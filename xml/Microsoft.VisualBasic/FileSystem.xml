<Type Name="FileSystem" FullName="Microsoft.VisualBasic.FileSystem">
  <Metadata><Meta Name="ms.openlocfilehash" Value="1f940726ccb01e692538ad14f77890b52044c8de" /><Meta Name="ms.sourcegitcommit" Value="11d168140aa8fade0768c2a9dde3e3bcacfdfb7d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="05/27/2020" /><Meta Name="ms.locfileid" Value="83954691" /></Metadata><TypeSignature Language="C#" Value="public sealed class FileSystem" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit FileSystem extends System.Object" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.FileSystem" />
  <TypeSignature Language="VB.NET" Value="Public Module FileSystem" />
  <TypeSignature Language="C++ CLI" Value="public ref class FileSystem sealed" />
  <TypeSignature Language="F#" Value="type FileSystem = class" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed FileSystem extends System.Object" FrameworkAlternate="netframework-1.1" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
    <AssemblyVersion>10.0.4.0</AssemblyVersion>
    <AssemblyVersion>10.0.5.0</AssemblyVersion>
    <AssemblyVersion>10.0.6.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Security.SecurityCritical</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="306d5-101"><see langword="FileSystem" /> 模块包含用于执行文件、目录或文件夹以及系统操作的过程。</span><span class="sxs-lookup"><span data-stu-id="306d5-101">The <see langword="FileSystem" /> module contains the procedures that are used to perform file, directory or folder, and system operations.</span></span> <span data-ttu-id="306d5-102">与使用 <see langword="My" /> 模块相比，<see langword="FileSystem" /> 功能在文件 I/O 操作方面可为您提供更高的效率和更好的性能。</span><span class="sxs-lookup"><span data-stu-id="306d5-102">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than using the <see langword="FileSystem" /> module.</span></span> <span data-ttu-id="306d5-103">有关详细信息，请参阅 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="306d5-103">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="306d5-104">此模块支持访问文件和文件夹的 Visual Basic 语言关键字和运行库成员。</span><span class="sxs-lookup"><span data-stu-id="306d5-104">This module supports the Visual Basic language keywords and run-time library members that access files and folders.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="306d5-105">此示例使用 `GetAttr` 函数确定文件和目录或文件夹的属性。</span><span class="sxs-lookup"><span data-stu-id="306d5-105">This example uses the `GetAttr` function to determine the attributes of a file and directory or folder.</span></span>  
  
 [!code-vb[VbVbalrCatRef#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#25)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/directories-and-files-summary"><span data-ttu-id="306d5-106">目录和文件摘要</span><span class="sxs-lookup"><span data-stu-id="306d5-106">Directories and Files Summary</span></span></related>
    <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/input-and-output-summary"><span data-ttu-id="306d5-107">输入和输出摘要</span><span class="sxs-lookup"><span data-stu-id="306d5-107">Input and Output Summary</span></span></related>
    <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/"><span data-ttu-id="306d5-108">关键字 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="306d5-108">Keywords (Visual Basic)</span></span></related>
    <related type="Article" href="/dotnet/visual-basic/language-reference/runtime-library-members"><span data-ttu-id="306d5-109">Visual Basic 运行时库成员</span><span class="sxs-lookup"><span data-stu-id="306d5-109">Visual Basic Run-Time Library Members</span></span></related>
  </Docs>
  <Members>
    <Member MemberName="ChDir">
      <MemberSignature Language="C#" Value="public static void ChDir (string Path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ChDir(string Path) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ChDir (Path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ChDir(System::String ^ Path);" />
      <MemberSignature Language="F#" Value="static member ChDir : string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.ChDir Path" />
      <MemberSignature Language="ILAsm" Value=".method public static void ChDir(string Path) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Path"><span data-ttu-id="306d5-110">必需。</span><span class="sxs-lookup"><span data-stu-id="306d5-110">Required.</span></span> <span data-ttu-id="306d5-111">一个字符串表达式，用于标识哪个目录或文件夹将成为新的默认目录或文件夹。</span><span class="sxs-lookup"><span data-stu-id="306d5-111">A string expression that identifies which directory or folder becomes the new default directory or folder.</span></span> <span data-ttu-id="306d5-112"><paramref name="Path" /> 可以包含驱动器。</span><span class="sxs-lookup"><span data-stu-id="306d5-112"><paramref name="Path" /> may include the drive.</span></span> <span data-ttu-id="306d5-113">如果未指定驱动器，则 <see langword="ChDir" /> 更改当前驱动器上的默认目录或文件夹。</span><span class="sxs-lookup"><span data-stu-id="306d5-113">If no drive is specified, <see langword="ChDir" /> changes the default directory or folder on the current drive.</span></span></param>
        <summary><span data-ttu-id="306d5-114">更改当前目录或文件夹。</span><span class="sxs-lookup"><span data-stu-id="306d5-114">Changes the current directory or folder.</span></span> <span data-ttu-id="306d5-115">与 <see langword="My" /> 函数相比，<see langword="ChDir" /> 功能在文件 I/O 操作方面可提供更高的效率和更好的性能。</span><span class="sxs-lookup"><span data-stu-id="306d5-115">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than the <see langword="ChDir" /> function.</span></span> <span data-ttu-id="306d5-116">有关详细信息，请参阅 <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />。</span><span class="sxs-lookup"><span data-stu-id="306d5-116">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" /> .</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="306d5-117">`ChDir` 函数将更改默认目录，但不会更改默认的驱动器。</span><span class="sxs-lookup"><span data-stu-id="306d5-117">The `ChDir` function changes the default directory, but not the default drive.</span></span> <span data-ttu-id="306d5-118">例如，如果默认驱动器是 C，则以下语句将更改驱动器 D 上的默认目录，但 C 仍是默认驱动器：</span><span class="sxs-lookup"><span data-stu-id="306d5-118">For example, if the default drive is C, the following statement changes the default directory on drive D, but C remains the default drive:</span></span>  
  
 [!code-vb[VbVbalrCatRef#39](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#39)]  
  
 <span data-ttu-id="306d5-119">可以通过键入两个句点来进行相对目录更改，如下所示：</span><span class="sxs-lookup"><span data-stu-id="306d5-119">You can make relative directory changes is by typing two periods, as follows:</span></span>  
  
 [!code-vb[VbVbalrCatRef#40](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#40)]  
  
> [!IMPORTANT]
>  <span data-ttu-id="306d5-120">`ChDir` 函数需要非托管代码权限，这可能会影响在部分信任情况下的执行。</span><span class="sxs-lookup"><span data-stu-id="306d5-120">The `ChDir` function requires unmanaged code permission, which may affect its execution in partial-trust situations.</span></span> <span data-ttu-id="306d5-121">有关详细信息，请参阅 <xref:System.Security.Permissions.SecurityPermission> 和。</span><span class="sxs-lookup"><span data-stu-id="306d5-121">For more information, see <xref:System.Security.Permissions.SecurityPermission> and .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="306d5-122">此示例使用 `ChDir` 函数更改当前目录或文件夹。</span><span class="sxs-lookup"><span data-stu-id="306d5-122">This example uses the `ChDir` function to change the current directory or folder.</span></span>  
  
 [!code-vb[VbVbalrCatRef#41](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#41)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="306d5-123"><paramref name="Path" /> 为空。</span><span class="sxs-lookup"><span data-stu-id="306d5-123"><paramref name="Path" /> is empty.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="306d5-124">指定的驱动器无效，或驱动器不可用。</span><span class="sxs-lookup"><span data-stu-id="306d5-124">Invalid drive is specified, or drive is unavailable.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Dir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-parse-file-paths"><span data-ttu-id="306d5-125">如何：在 Visual Basic 中分析文件路径</span><span class="sxs-lookup"><span data-stu-id="306d5-125">How to: Parse File Paths in Visual Basic</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/creating-deleting-and-moving-files-and-directories"><span data-ttu-id="306d5-126">创建、删除和移动文件和目录 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="306d5-126">Creating, Deleting, and Moving Files and Directories in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ChDrive">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="306d5-127">更改当前驱动器。</span><span class="sxs-lookup"><span data-stu-id="306d5-127">Changes the current drive.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ChDrive">
      <MemberSignature Language="C#" Value="public static void ChDrive (char Drive);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ChDrive(char Drive) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.ChDrive(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ChDrive (Drive As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ChDrive(char Drive);" />
      <MemberSignature Language="F#" Value="static member ChDrive : char -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.ChDrive Drive" />
      <MemberSignature Language="ILAsm" Value=".method public static void ChDrive(char Drive) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Drive" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Drive"><span data-ttu-id="306d5-128">必需。</span><span class="sxs-lookup"><span data-stu-id="306d5-128">Required.</span></span> <span data-ttu-id="306d5-129">指定现有驱动器的字符串表达式。</span><span class="sxs-lookup"><span data-stu-id="306d5-129">String expression that specifies an existing drive.</span></span> <span data-ttu-id="306d5-130">如果提供一个零长度字符串 ("")，则当前驱动器不会更改。</span><span class="sxs-lookup"><span data-stu-id="306d5-130">If you supply a zero-length string (""), the current drive does not change.</span></span> <span data-ttu-id="306d5-131">如果 <paramref name="Drive" /> 参数为多字符字符串，<see langword="ChDrive" /> 将仅使用第一个字母。</span><span class="sxs-lookup"><span data-stu-id="306d5-131">If the <paramref name="Drive" /> argument is a multiple-character string, <see langword="ChDrive" /> uses only the first letter.</span></span></param>
        <summary><span data-ttu-id="306d5-132">更改当前驱动器。</span><span class="sxs-lookup"><span data-stu-id="306d5-132">Changes the current drive.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="306d5-133">`ChDrive` 函数需要非托管代码权限，这可能会影响在部分信任情况下的执行。</span><span class="sxs-lookup"><span data-stu-id="306d5-133">The `ChDrive` function requires unmanaged-code permission, which may affect its execution in partial-trust situations.</span></span> <span data-ttu-id="306d5-134">有关详细信息，请参阅 <xref:System.Security.Permissions.SecurityPermission> 和[代码访问权限](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)。</span><span class="sxs-lookup"><span data-stu-id="306d5-134">For more information, see <xref:System.Security.Permissions.SecurityPermission> and [Code Access Permissions](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="306d5-135">此示例使用 `ChDrive` 函数更改当前驱动器。</span><span class="sxs-lookup"><span data-stu-id="306d5-135">This example uses the `ChDrive` function to change the current drive.</span></span> <span data-ttu-id="306d5-136">如果驱动器不存在，该函数将引发异常。</span><span class="sxs-lookup"><span data-stu-id="306d5-136">The function throws an exception if the drive does not exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#32](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#32)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="306d5-137">指定的驱动器无效，或驱动器不可用。</span><span class="sxs-lookup"><span data-stu-id="306d5-137">Invalid drive is specified, or drive is unavailable.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Dir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/file-access"><span data-ttu-id="306d5-138">使用 Visual Basic 访问文件</span><span class="sxs-lookup"><span data-stu-id="306d5-138">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ChDrive">
      <MemberSignature Language="C#" Value="public static void ChDrive (string Drive);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ChDrive(string Drive) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.ChDrive(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ChDrive (Drive As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ChDrive(System::String ^ Drive);" />
      <MemberSignature Language="F#" Value="static member ChDrive : string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.ChDrive Drive" />
      <MemberSignature Language="ILAsm" Value=".method public static void ChDrive(string Drive) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Drive" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Drive"><span data-ttu-id="306d5-139">必需。</span><span class="sxs-lookup"><span data-stu-id="306d5-139">Required.</span></span> <span data-ttu-id="306d5-140">指定现有驱动器的字符串表达式。</span><span class="sxs-lookup"><span data-stu-id="306d5-140">String expression that specifies an existing drive.</span></span> <span data-ttu-id="306d5-141">如果提供一个零长度字符串 ("")，则当前驱动器不会更改。</span><span class="sxs-lookup"><span data-stu-id="306d5-141">If you supply a zero-length string (""), the current drive does not change.</span></span> <span data-ttu-id="306d5-142">如果 <paramref name="Drive" /> 参数为多字符字符串，<see langword="ChDrive" /> 将仅使用第一个字母。</span><span class="sxs-lookup"><span data-stu-id="306d5-142">If the <paramref name="Drive" /> argument is a multiple-character string, <see langword="ChDrive" /> uses only the first letter.</span></span></param>
        <summary><span data-ttu-id="306d5-143">更改当前驱动器。</span><span class="sxs-lookup"><span data-stu-id="306d5-143">Changes the current drive.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="306d5-144">`ChDrive` 函数需要非托管代码权限，这可能会影响在部分信任情况下的执行。</span><span class="sxs-lookup"><span data-stu-id="306d5-144">The `ChDrive` function requires unmanaged-code permission, which may affect its execution in partial-trust situations.</span></span> <span data-ttu-id="306d5-145">有关详细信息，请参阅 <xref:System.Security.Permissions.SecurityPermission> 和[代码访问权限](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)。</span><span class="sxs-lookup"><span data-stu-id="306d5-145">For more information, see <xref:System.Security.Permissions.SecurityPermission> and [Code Access Permissions](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="306d5-146">此示例使用 `ChDrive` 函数更改当前驱动器。</span><span class="sxs-lookup"><span data-stu-id="306d5-146">This example uses the `ChDrive` function to change the current drive.</span></span> <span data-ttu-id="306d5-147">如果驱动器不存在，该函数将引发异常。</span><span class="sxs-lookup"><span data-stu-id="306d5-147">The function throws an exception if the drive does not exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#32](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#32)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="306d5-148">指定的驱动器无效，或驱动器不可用。</span><span class="sxs-lookup"><span data-stu-id="306d5-148">Invalid drive is specified, or drive is unavailable.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Dir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/file-access"><span data-ttu-id="306d5-149">使用 Visual Basic 访问文件</span><span class="sxs-lookup"><span data-stu-id="306d5-149">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="CurDir">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="306d5-150">返回表示当前路径的字符串。</span><span class="sxs-lookup"><span data-stu-id="306d5-150">Returns a string representing the current path.</span></span> <span data-ttu-id="306d5-151">与 <see langword="CurDir" /> 相比，<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> 在文件 I/O 操作方面可为您提供更高的效率和更好的性能。</span><span class="sxs-lookup"><span data-stu-id="306d5-151">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="CurDir" />.</span></span> <span data-ttu-id="306d5-152">有关详细信息，请参阅 <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />。</span><span class="sxs-lookup"><span data-stu-id="306d5-152">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CurDir">
      <MemberSignature Language="C#" Value="public static string CurDir ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string CurDir() cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.CurDir" />
      <MemberSignature Language="VB.NET" Value="Public Function CurDir () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ CurDir();" />
      <MemberSignature Language="F#" Value="static member CurDir : unit -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.CurDir " />
      <MemberSignature Language="ILAsm" Value=".method public static string CurDir() cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="306d5-153">返回表示当前路径的字符串。</span><span class="sxs-lookup"><span data-stu-id="306d5-153">Returns a string representing the current path.</span></span> <span data-ttu-id="306d5-154">与 <see langword="CurDir" /> 相比，<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> 在文件 I/O 操作方面可为您提供更高的效率和更好的性能。</span><span class="sxs-lookup"><span data-stu-id="306d5-154">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="CurDir" />.</span></span> <span data-ttu-id="306d5-155">有关详细信息，请参阅 <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />。</span><span class="sxs-lookup"><span data-stu-id="306d5-155">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span></span></summary>
        <returns><span data-ttu-id="306d5-156">表示当前路径的字符串。</span><span class="sxs-lookup"><span data-stu-id="306d5-156">A string representing the current path.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="306d5-157">此示例使用 `CurDir` 函数返回当前路径。</span><span class="sxs-lookup"><span data-stu-id="306d5-157">This example uses the `CurDir` function to return the current path.</span></span>  
  
 [!code-vb[VbVbalrCatRef#65](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#65)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="CurDir">
      <MemberSignature Language="C#" Value="public static string CurDir (char Drive);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string CurDir(char Drive) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.CurDir(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function CurDir (Drive As Char) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ CurDir(char Drive);" />
      <MemberSignature Language="F#" Value="static member CurDir : char -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.CurDir Drive" />
      <MemberSignature Language="ILAsm" Value=".method public static string CurDir(char Drive) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Drive" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Drive"><span data-ttu-id="306d5-158">可选。</span><span class="sxs-lookup"><span data-stu-id="306d5-158">Optional.</span></span> <span data-ttu-id="306d5-159">指定现有驱动器的 <see langword="Char" /> 表达式。</span><span class="sxs-lookup"><span data-stu-id="306d5-159"><see langword="Char" /> expression that specifies an existing drive.</span></span> <span data-ttu-id="306d5-160">如果未指定驱动器或 <paramref name="Drive" /> 是长度为零的字符串 ("")，则 <see langword="CurDir" /> 返回当前驱动器的路径。</span><span class="sxs-lookup"><span data-stu-id="306d5-160">If no drive is specified, or if <paramref name="Drive" /> is a zero-length string (""), <see langword="CurDir" /> returns the path for the current drive.</span></span></param>
        <summary><span data-ttu-id="306d5-161">返回表示当前路径的字符串。</span><span class="sxs-lookup"><span data-stu-id="306d5-161">Returns a string representing the current path.</span></span> <span data-ttu-id="306d5-162">与 <see langword="CurDir" /> 相比，<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> 在文件 I/O 操作方面可为您提供更高的效率和更好的性能。</span><span class="sxs-lookup"><span data-stu-id="306d5-162">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="CurDir" />.</span></span> <span data-ttu-id="306d5-163">有关详细信息，请参阅 <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />。</span><span class="sxs-lookup"><span data-stu-id="306d5-163">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span></span></summary>
        <returns><span data-ttu-id="306d5-164">表示当前路径的字符串。</span><span class="sxs-lookup"><span data-stu-id="306d5-164">A string representing the current path.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="306d5-165">此示例使用 `CurDir` 函数返回当前路径。</span><span class="sxs-lookup"><span data-stu-id="306d5-165">This example uses the `CurDir` function to return the current path.</span></span>  
  
 [!code-vb[VbVbalrCatRef#65](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#65)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Dir">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="306d5-166">返回表示文件、目录或文件夹名称的字符串，该文件、目录或文件夹具有指定的模式或文件特性，或者具有指定的驱动器卷标。</span><span class="sxs-lookup"><span data-stu-id="306d5-166">Returns a string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span></span> <span data-ttu-id="306d5-167">与 <see langword="Dir" /> 函数相比，<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> 在文件 I/O 操作方面可为您提供更高的效率和更好的性能。</span><span class="sxs-lookup"><span data-stu-id="306d5-167">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="Dir" /> function.</span></span> <span data-ttu-id="306d5-168">有关详细信息，请参阅<see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" />。</span><span class="sxs-lookup"><span data-stu-id="306d5-168">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" /> for more information.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dir">
      <MemberSignature Language="C#" Value="public static string Dir ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Dir() cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Dir" />
      <MemberSignature Language="VB.NET" Value="Public Function Dir () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Dir();" />
      <MemberSignature Language="F#" Value="static member Dir : unit -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.Dir " />
      <MemberSignature Language="ILAsm" Value=".method public static string Dir() cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="306d5-169">返回表示文件、目录或文件夹名称的字符串，该文件、目录或文件夹具有指定的模式或文件特性，或者具有指定的驱动器卷标。</span><span class="sxs-lookup"><span data-stu-id="306d5-169">Returns a string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span></span> <span data-ttu-id="306d5-170">与 <see langword="Dir" /> 函数相比，<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> 在文件 I/O 操作方面可为您提供更高的效率和更好的性能。</span><span class="sxs-lookup"><span data-stu-id="306d5-170">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="Dir" /> function.</span></span> <span data-ttu-id="306d5-171">有关详细信息，请参阅<see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" />。</span><span class="sxs-lookup"><span data-stu-id="306d5-171">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" /> for more information.</span></span></summary>
        <returns><span data-ttu-id="306d5-172">一个字符串，表示与指定模式或文件特性匹配的文件、目录或文件夹的名称，或者表示驱动器卷标。</span><span class="sxs-lookup"><span data-stu-id="306d5-172">A string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="306d5-173">`Dir` 函数支持使用多字符（`*`）和单字符（`?`）通配符来指定多个文件。</span><span class="sxs-lookup"><span data-stu-id="306d5-173">The `Dir` function supports the use of multiple-character (`*`) and single-character (`?`) wildcards to specify multiple files.</span></span>  
  
 <span data-ttu-id="306d5-174">`VbVolume` 返回驱动器的卷标，而不是特定的文件名。</span><span class="sxs-lookup"><span data-stu-id="306d5-174">`VbVolume` returns the volume label for the drive instead of a specific file name.</span></span>  
  
 <span data-ttu-id="306d5-175">第一次调用 `Dir` 函数时，必须提供 `PathName`。</span><span class="sxs-lookup"><span data-stu-id="306d5-175">You must supply a `PathName` the first time that you call the `Dir` function.</span></span> <span data-ttu-id="306d5-176">若要检索下一项，可以对不带参数的 `Dir` 函数进行后续调用。</span><span class="sxs-lookup"><span data-stu-id="306d5-176">To retrieve the next item, you can make subsequent calls to the `Dir` function without parameters.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="306d5-177">若要正确运行，`Dir` 函数要求向执行代码授予 <xref:System.Security.Permissions.FileIOPermission> 的 <xref:System.Security.Permissions.FileIOPermissionAccess.Read> 和 <xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery> 标志。</span><span class="sxs-lookup"><span data-stu-id="306d5-177">To run correctly, the `Dir` function requires the <xref:System.Security.Permissions.FileIOPermissionAccess.Read> and <xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery> flags of <xref:System.Security.Permissions.FileIOPermission> to be granted to the executing code.</span></span> <span data-ttu-id="306d5-178">有关详细信息，请参阅 <xref:System.Security.Permissions.FileIOPermission>、<xref:System.Security.SecurityException>和[代码访问权限](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)。</span><span class="sxs-lookup"><span data-stu-id="306d5-178">For more information, see <xref:System.Security.Permissions.FileIOPermission>, <xref:System.Security.SecurityException>, and [Code Access Permissions](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span></span>  
  
 <span data-ttu-id="306d5-179">`Attributes` 参数枚举值如下所示：</span><span class="sxs-lookup"><span data-stu-id="306d5-179">The `Attributes` argument enumeration values are as follows:</span></span>  
  
|<span data-ttu-id="306d5-180">值</span><span class="sxs-lookup"><span data-stu-id="306d5-180">Value</span></span>|<span data-ttu-id="306d5-181">一直</span><span class="sxs-lookup"><span data-stu-id="306d5-181">Constant</span></span>|<span data-ttu-id="306d5-182">说明</span><span class="sxs-lookup"><span data-stu-id="306d5-182">Description</span></span>|  
|-|-|-|  
|`Normal`|`vbnormal`|<span data-ttu-id="306d5-183">默认。</span><span class="sxs-lookup"><span data-stu-id="306d5-183">Default.</span></span> <span data-ttu-id="306d5-184">指定没有属性的文件。</span><span class="sxs-lookup"><span data-stu-id="306d5-184">Specifies files without attributes.</span></span>|  
|`ReadOnly`|`vbReadOnly`|<span data-ttu-id="306d5-185">指定只读文件以及没有属性的文件。</span><span class="sxs-lookup"><span data-stu-id="306d5-185">Specifies read-only files, and also files without attributes.</span></span>|  
|`Hidden`|`vbHidden`|<span data-ttu-id="306d5-186">指定隐藏的文件，还指定没有属性的文件。</span><span class="sxs-lookup"><span data-stu-id="306d5-186">Specifies hidden files, and also files without attributes.</span></span>|  
|`System`|`vbSystem`|<span data-ttu-id="306d5-187">指定系统文件以及没有属性的文件。</span><span class="sxs-lookup"><span data-stu-id="306d5-187">Specifies system files, and also files without attributes.</span></span>|  
|`Volume`|`vbVolume`|<span data-ttu-id="306d5-188">指定卷标;如果指定任何其他属性，则将忽略 `vbVolume`。</span><span class="sxs-lookup"><span data-stu-id="306d5-188">Specifies volume label; if any other attribute is specified, `vbVolume` is ignored.</span></span>|  
|`Directory`|`vbDirectory`|<span data-ttu-id="306d5-189">指定目录或文件夹以及没有属性的文件。</span><span class="sxs-lookup"><span data-stu-id="306d5-189">Specifies directories or folders, and also files without attributes.</span></span>|  
|`Archive`|`vbArchive`|<span data-ttu-id="306d5-190">文件自上次备份后已更改。</span><span class="sxs-lookup"><span data-stu-id="306d5-190">File has changed since last backup.</span></span>|  
|`Alias`|`vbAlias`|<span data-ttu-id="306d5-191">文件具有不同的名称。</span><span class="sxs-lookup"><span data-stu-id="306d5-191">File has a different name.</span></span>|  
  
> [!NOTE]
>  <span data-ttu-id="306d5-192">这些枚举由 Visual Basic 语言指定，可用于代码中的任何位置，而不是实际值。</span><span class="sxs-lookup"><span data-stu-id="306d5-192">These enumerations are specified by the Visual Basic language and can be used anywhere in your code instead of the actual values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="306d5-193">此示例使用 `Dir` 函数检查是否存在特定的文件和目录。</span><span class="sxs-lookup"><span data-stu-id="306d5-193">This example uses the `Dir` function to check if certain files and directories exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="T:Microsoft.VisualBasic.FileAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Dir">
      <MemberSignature Language="C#" Value="public static string Dir (string PathName, Microsoft.VisualBasic.FileAttribute Attributes = Microsoft.VisualBasic.FileAttribute.Normal);" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Dir(string PathName, valuetype Microsoft.VisualBasic.FileAttribute Attributes) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Dir(System.String,Microsoft.VisualBasic.FileAttribute)" />
      <MemberSignature Language="VB.NET" Value="Public Function Dir (PathName As String, Optional Attributes As FileAttribute = Microsoft.VisualBasic.FileAttribute.Normal) As String" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="F#" Value="static member Dir : string * Microsoft.VisualBasic.FileAttribute -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.Dir (PathName, Attributes)" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="C#" Value="public static string Dir (string Pathname, Microsoft.VisualBasic.FileAttribute Attributes = Microsoft.VisualBasic.FileAttribute.Normal);" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Dir(string Pathname, valuetype Microsoft.VisualBasic.FileAttribute Attributes) cil managed" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="VB.NET" Value="Public Function Dir (Pathname As String, Optional Attributes As FileAttribute = Microsoft.VisualBasic.FileAttribute.Normal) As String" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="F#" Value="static member Dir : string * Microsoft.VisualBasic.FileAttribute -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.Dir (Pathname, Attributes)" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="ILAsm" Value=".method public static string Dir(string PathName, valuetype Microsoft.VisualBasic.FileAttribute Attributes) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" Index="0" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Pathname" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1" />
        <Parameter Name="Attributes" Type="Microsoft.VisualBasic.FileAttribute" Index="1" />
      </Parameters>
      <Docs>
        <param name="PathName"><span data-ttu-id="306d5-194">可选。</span><span class="sxs-lookup"><span data-stu-id="306d5-194">Optional.</span></span> <span data-ttu-id="306d5-195">一个字符串表达式，用于指定文件名、目录或文件夹名或者驱动器卷标。</span><span class="sxs-lookup"><span data-stu-id="306d5-195">A string expression that specifies a file name, directory or folder name, or drive volume label.</span></span> <span data-ttu-id="306d5-196">如果未找到 <paramref name="PathName" />，则返回一个零长度字符串 (<see langword="&quot;&quot;" />)。</span><span class="sxs-lookup"><span data-stu-id="306d5-196">A zero-length string (<see langword="&quot;&quot;" />) is returned if <paramref name="PathName" /> is not found.</span></span></param>
        <param name="Pathname"><span data-ttu-id="306d5-197">可选。</span><span class="sxs-lookup"><span data-stu-id="306d5-197">Optional.</span></span> <span data-ttu-id="306d5-198">一个字符串表达式，用于指定文件名、目录或文件夹名或者驱动器卷标。</span><span class="sxs-lookup"><span data-stu-id="306d5-198">A string expression that specifies a file name, directory or folder name, or drive volume label.</span></span> <span data-ttu-id="306d5-199">如果未找到 <paramref name="Pathname" />，则返回一个零长度字符串 (<see langword="&quot;&quot;" />)。</span><span class="sxs-lookup"><span data-stu-id="306d5-199">A zero-length string (<see langword="&quot;&quot;" />) is returned if <paramref name="Pathname" /> is not found.</span></span></param>
        <param name="Attributes"><span data-ttu-id="306d5-200">可选。</span><span class="sxs-lookup"><span data-stu-id="306d5-200">Optional.</span></span> <span data-ttu-id="306d5-201">其值指定文件特性的枚举或数值表达式。</span><span class="sxs-lookup"><span data-stu-id="306d5-201">Enumeration or numeric expression whose value specifies file attributes.</span></span> <span data-ttu-id="306d5-202">如果省略，则 <see langword="Dir" /> 将返回与 <paramref name="Pathname" /> 匹配但不具有任何特性的文件。</span><span class="sxs-lookup"><span data-stu-id="306d5-202">If omitted, <see langword="Dir" /> returns files that match <paramref name="Pathname" /> but have no attributes.</span></span></param>
        <summary><span data-ttu-id="306d5-203">返回表示文件、目录或文件夹名称的字符串，该文件、目录或文件夹具有指定的模式或文件特性，或者具有指定的驱动器卷标。</span><span class="sxs-lookup"><span data-stu-id="306d5-203">Returns a string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span></span> <span data-ttu-id="306d5-204">与 <see langword="Dir" /> 函数相比，<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> 在文件 I/O 操作方面可为您提供更高的效率和更好的性能。</span><span class="sxs-lookup"><span data-stu-id="306d5-204">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="Dir" /> function.</span></span> <span data-ttu-id="306d5-205">有关详细信息，请参阅<see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" />。</span><span class="sxs-lookup"><span data-stu-id="306d5-205">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" /> for more information.</span></span></summary>
        <returns><span data-ttu-id="306d5-206">一个字符串，表示与指定模式或文件特性匹配的文件、目录或文件夹的名称，或者表示驱动器卷标。</span><span class="sxs-lookup"><span data-stu-id="306d5-206">A string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="306d5-207">`Dir` 函数支持使用多字符（`*`）和单字符（`?`）通配符来指定多个文件。</span><span class="sxs-lookup"><span data-stu-id="306d5-207">The `Dir` function supports the use of multiple-character (`*`) and single-character (`?`) wildcards to specify multiple files.</span></span>  
 <span data-ttu-id="306d5-208">`VbVolume` 返回驱动器的卷标，而不是特定的文件名。</span><span class="sxs-lookup"><span data-stu-id="306d5-208">`VbVolume` returns the volume label for the drive instead of a specific file name.</span></span>  
 <span data-ttu-id="306d5-209">第一次调用 `Dir` 函数时，必须提供 `PathName`。</span><span class="sxs-lookup"><span data-stu-id="306d5-209">You must supply a `PathName` the first time that you call the `Dir` function.</span></span> <span data-ttu-id="306d5-210">若要检索下一项，可以对不带参数的 `Dir` 函数进行后续调用。</span><span class="sxs-lookup"><span data-stu-id="306d5-210">To retrieve the next item, you can make subsequent calls to the `Dir` function with no parameters.</span></span>  
> [!IMPORTANT]
>  <span data-ttu-id="306d5-211">若要正确运行，`Dir` 函数要求向执行代码授予 <xref:System.Security.Permissions.FileIOPermission> 的 <xref:System.Security.Permissions.FileIOPermissionAccess.Read> 和 <xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery> 标志。</span><span class="sxs-lookup"><span data-stu-id="306d5-211">To run correctly, the `Dir` function requires the <xref:System.Security.Permissions.FileIOPermissionAccess.Read> and <xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery> flags of <xref:System.Security.Permissions.FileIOPermission> to be granted to the executing code.</span></span> <span data-ttu-id="306d5-212">有关详细信息，请参阅 <xref:System.Security.Permissions.FileIOPermission>、<xref:System.Security.SecurityException>和[代码访问权限](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)。</span><span class="sxs-lookup"><span data-stu-id="306d5-212">For more information, see <xref:System.Security.Permissions.FileIOPermission>, <xref:System.Security.SecurityException>, and [Code Access Permissions](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span></span>  
 <span data-ttu-id="306d5-213">`Attributes` 参数枚举值如下所示：</span><span class="sxs-lookup"><span data-stu-id="306d5-213">The `Attributes` argument enumeration values are as follows:</span></span>  
|<span data-ttu-id="306d5-214">值</span><span class="sxs-lookup"><span data-stu-id="306d5-214">Value</span></span>|<span data-ttu-id="306d5-215">一直</span><span class="sxs-lookup"><span data-stu-id="306d5-215">Constant</span></span>|<span data-ttu-id="306d5-216">说明</span><span class="sxs-lookup"><span data-stu-id="306d5-216">Description</span></span>|  
|-|-|-|  
|`Normal`|`vbnormal`|<span data-ttu-id="306d5-217">默认。</span><span class="sxs-lookup"><span data-stu-id="306d5-217">Default.</span></span> <span data-ttu-id="306d5-218">指定没有属性的文件。</span><span class="sxs-lookup"><span data-stu-id="306d5-218">Specifies files that have no attributes.</span></span>|  
|`ReadOnly`|`vbReadOnly`|<span data-ttu-id="306d5-219">指定只读文件以及没有属性的文件。</span><span class="sxs-lookup"><span data-stu-id="306d5-219">Specifies read-only files, in addition to files that have no attributes.</span></span>|  
|`Hidden`|`vbHidden`|<span data-ttu-id="306d5-220">除了指定没有属性的文件，还指定隐藏文件。</span><span class="sxs-lookup"><span data-stu-id="306d5-220">Specifies hidden files, in addition to files that have no attributes.</span></span>|  
|`System`|`vbSystem`|<span data-ttu-id="306d5-221">除了指定没有属性的文件，还指定系统文件。</span><span class="sxs-lookup"><span data-stu-id="306d5-221">Specifies system files, in addition to files that have no attributes.</span></span>|  
|`Volume`|`vbVolume`|<span data-ttu-id="306d5-222">指定卷标;如果指定任何其他属性，则将忽略 `vbVolume`。</span><span class="sxs-lookup"><span data-stu-id="306d5-222">Specifies volume label; if any other attribute is specified, `vbVolume` is ignored.</span></span>|  
|`Directory`|`vbDirectory`|<span data-ttu-id="306d5-223">指定目录或文件夹，以及没有属性的文件。</span><span class="sxs-lookup"><span data-stu-id="306d5-223">Specifies directories or folders, in addition to files that have no attributes.</span></span>|  
|`Archive`|`vbArchive`|<span data-ttu-id="306d5-224">文件自上次备份后已更改。</span><span class="sxs-lookup"><span data-stu-id="306d5-224">File has changed since last backup.</span></span>|  
|`Alias`|`vbAlias`|<span data-ttu-id="306d5-225">文件具有不同的名称。</span><span class="sxs-lookup"><span data-stu-id="306d5-225">File has a different name.</span></span>|  
> [!NOTE]
>  <span data-ttu-id="306d5-226">这些枚举由 Visual Basic 语言指定，并且可以在代码中的任何位置使用来代替实际值。</span><span class="sxs-lookup"><span data-stu-id="306d5-226">These enumerations are specified by the Visual Basic language and can be used anywhere in your code in place of the actual values.</span></span>  
## Examples  
 <span data-ttu-id="306d5-227">此示例使用 `Dir` 函数检查是否存在特定的文件和目录。</span><span class="sxs-lookup"><span data-stu-id="306d5-227">This example uses the `Dir` function to check if certain files and directories exist.</span></span>  
 [!code-vb[VbVbalrCatRef#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#3)]  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="T:Microsoft.VisualBasic.FileAttribute" />
      </Docs>
    </Member>
    <Member MemberName="EOF">
      <MemberSignature Language="C#" Value="public static bool EOF (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool EOF(int32 FileNumber) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.EOF(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function EOF (FileNumber As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool EOF(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member EOF : int -&gt; bool" Usage="Microsoft.VisualBasic.FileSystem.EOF FileNumber" />
      <MemberSignature Language="ILAsm" Value=".method public static bool EOF(int32 FileNumber) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="306d5-228">必需。</span><span class="sxs-lookup"><span data-stu-id="306d5-228">Required.</span></span> <span data-ttu-id="306d5-229">一个包含任何有效文件号的 <see langword="Integer" />。</span><span class="sxs-lookup"><span data-stu-id="306d5-229">An <see langword="Integer" /> that contains any valid file number.</span></span></param>
        <summary><span data-ttu-id="306d5-230">当达到为进行 <see langword="True" /> 或顺序 <see langword="Random" /> 而打开的文件的结尾时，此方法返回布尔值 <see langword="Input" />。</span><span class="sxs-lookup"><span data-stu-id="306d5-230">Returns a Boolean value <see langword="True" /> when the end of a file opened for <see langword="Random" /> or sequential <see langword="Input" /> has been reached.</span></span></summary>
        <returns><span data-ttu-id="306d5-231">当达到为进行 <see langword="Random" /> 或顺序 <see langword="Input" /> 而打开的文件的结尾时，为布尔值 <see langword="True" />。</span><span class="sxs-lookup"><span data-stu-id="306d5-231">A Boolean value <see langword="True" /> when the end of a file opened for <see langword="Random" /> or sequential <see langword="Input" /> has been reached.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="306d5-232">使用 `EOF` 避免尝试获取超过文件末尾的输入而生成的错误。</span><span class="sxs-lookup"><span data-stu-id="306d5-232">Use `EOF` to avoid the error generated by attempting to get input past the end of a file.</span></span>  
  
 <span data-ttu-id="306d5-233">`EOF` 函数将返回 `False`，直到到达文件末尾。</span><span class="sxs-lookup"><span data-stu-id="306d5-233">The `EOF` function returns `False` until the end of the file has been reached.</span></span> <span data-ttu-id="306d5-234">使用打开的文件进行 `Random` 或 `Binary` 访问时，`EOF` 返回 `False`，直到最后执行的 `FileGet` 函数无法读取整个记录。</span><span class="sxs-lookup"><span data-stu-id="306d5-234">With files opened for `Random` or `Binary` access, `EOF` returns `False` until the last executed `FileGet` function is unable to read a whole record.</span></span>  
  
 <span data-ttu-id="306d5-235">使用打开的文件进行 `Binary` 访问后，将尝试使用 `Input` 函数读取文件，直至 `EOF` 返回 `True` 会生成错误。</span><span class="sxs-lookup"><span data-stu-id="306d5-235">With files opened for `Binary` access, an attempt to read through the file using the `Input` function until `EOF` returns `True` generates an error.</span></span> <span data-ttu-id="306d5-236">使用 `Input`读取二进制文件时，使用 `LOF` 和 `Loc` 函数，而不是 `EOF`，或者使用 `Get` 函数时使用 `EOF`。</span><span class="sxs-lookup"><span data-stu-id="306d5-236">Use the `LOF` and `Loc` functions instead of `EOF` when reading binary files with `Input`, or use `Get` when using the `EOF` function.</span></span> <span data-ttu-id="306d5-237">如果文件是为 `Output`打开的，则 `EOF` 总是返回 `True`。</span><span class="sxs-lookup"><span data-stu-id="306d5-237">With files opened for `Output`, `EOF` always returns `True`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="306d5-238">此示例使用 `EOF` 函数来检测文件的结尾。</span><span class="sxs-lookup"><span data-stu-id="306d5-238">This example uses the `EOF` function to detect the end of a file.</span></span> <span data-ttu-id="306d5-239">此示例假定 `Testfile` 是包含多行文本的文本文件。</span><span class="sxs-lookup"><span data-stu-id="306d5-239">This example assumes that `Testfile` is a text file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#62](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#62)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="306d5-240">文件模式无效。</span><span class="sxs-lookup"><span data-stu-id="306d5-240">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.LOF(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FileAttr">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.OpenMode FileAttr (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.VisualBasic.OpenMode FileAttr(int32 FileNumber) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileAttr(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function FileAttr (FileNumber As Integer) As OpenMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::OpenMode FileAttr(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member FileAttr : int -&gt; Microsoft.VisualBasic.OpenMode" Usage="Microsoft.VisualBasic.FileSystem.FileAttr FileNumber" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.OpenMode FileAttr(int32 FileNumber) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.OpenMode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="306d5-241">必需。</span><span class="sxs-lookup"><span data-stu-id="306d5-241">Required.</span></span> <span data-ttu-id="306d5-242"><see langword="Integer" /> 列中的一个值匹配。</span><span class="sxs-lookup"><span data-stu-id="306d5-242"><see langword="Integer" />.</span></span> <span data-ttu-id="306d5-243">任何有效文件数。</span><span class="sxs-lookup"><span data-stu-id="306d5-243">Any valid file number.</span></span></param>
        <summary><span data-ttu-id="306d5-244">返回一个枚举，该枚举表示使用 <see langword="FileOpen" /> 函数打开的文件的文件模式。</span><span class="sxs-lookup"><span data-stu-id="306d5-244">Returns an enumeration representing the file mode for files opened using the <see langword="FileOpen" /> function.</span></span> <span data-ttu-id="306d5-245">与 <see langword="FileAttr" /> 函数相比，<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> 在文件 I/O 操作方面可为您提供更高的效率和更好的性能。</span><span class="sxs-lookup"><span data-stu-id="306d5-245">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="FileAttr" /> function.</span></span> <span data-ttu-id="306d5-246">有关详细信息，请参阅<see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" />。</span><span class="sxs-lookup"><span data-stu-id="306d5-246">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" /> for more information.</span></span></summary>
        <returns><span data-ttu-id="306d5-247">下列枚举值指示文件访问模式：</span><span class="sxs-lookup"><span data-stu-id="306d5-247">The following enumeration values indicate the file access mode:</span></span> 
 <list type="table"><item><term> <span data-ttu-id="306d5-248">值</span><span class="sxs-lookup"><span data-stu-id="306d5-248">Value</span></span> 
 </term><description> <span data-ttu-id="306d5-249">模式</span><span class="sxs-lookup"><span data-stu-id="306d5-249">Mode</span></span> 
 </description></item><item><term> <span data-ttu-id="306d5-250">1</span><span class="sxs-lookup"><span data-stu-id="306d5-250">1</span></span> 
 </term><description><see langword="OpenMode.Input" /></description></item><item><term> <span data-ttu-id="306d5-251">2</span><span class="sxs-lookup"><span data-stu-id="306d5-251">2</span></span> 
 </term><description><see langword="OpenMode.Output" /></description></item><item><term> <span data-ttu-id="306d5-252">4</span><span class="sxs-lookup"><span data-stu-id="306d5-252">4</span></span> 
 </term><description><see langword="OpenMode.Random" /></description></item><item><term> <span data-ttu-id="306d5-253">8</span><span class="sxs-lookup"><span data-stu-id="306d5-253">8</span></span> 
 </term><description><see langword="OpenMode.Append" /></description></item><item><term> <span data-ttu-id="306d5-254">32</span><span class="sxs-lookup"><span data-stu-id="306d5-254">32</span></span> 
 </term><description><see langword="OpenMode.Binary" /></description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="306d5-255">此函数返回一个枚举，该枚举表示使用 `FileOpen` 函数打开的文件的文件模式。</span><span class="sxs-lookup"><span data-stu-id="306d5-255">This function returns an enumeration representing the file mode for files opened using the `FileOpen` function.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="306d5-256">此示例使用 `FileAttr` 函数返回打开的文件的文件模式。</span><span class="sxs-lookup"><span data-stu-id="306d5-256">This example uses the `FileAttr` function to return the file mode of an open file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#46](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#46)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SetAttr(System.String,Microsoft.VisualBasic.FileAttribute)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/file-access"><span data-ttu-id="306d5-257">使用 Visual Basic 访问文件</span><span class="sxs-lookup"><span data-stu-id="306d5-257">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileClose">
      <MemberSignature Language="C#" Value="public static void FileClose (params int[] FileNumbers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void FileClose(int32[] FileNumbers) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileClose(System.Int32[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileClose (ParamArray FileNumbers As Integer())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void FileClose(... cli::array &lt;int&gt; ^ FileNumbers);" />
      <MemberSignature Language="F#" Value="static member FileClose : int[] -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileClose FileNumbers" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileClose(int32[] FileNumbers) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumbers" Type="System.Int32[]">
          <Attributes>
            <Attribute FrameworkAlternate="net-5.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumbers"><span data-ttu-id="306d5-258">可选。</span><span class="sxs-lookup"><span data-stu-id="306d5-258">Optional.</span></span> <span data-ttu-id="306d5-259">要关闭的 0 个或多个信道的参数数组。</span><span class="sxs-lookup"><span data-stu-id="306d5-259">Parameter array of 0 or more channels to be closed.</span></span></param>
        <summary><span data-ttu-id="306d5-260">关闭对用 <see langword="FileOpen" /> 函数打开的文件的输入/输出 (I/O)。</span><span class="sxs-lookup"><span data-stu-id="306d5-260">Concludes input/output (I/O) to a file opened using the <see langword="FileOpen" /> function.</span></span> <span data-ttu-id="306d5-261"><see langword="My" /> 在文件 I/O 操作方面可为您提供更高的效率和更好的性能。</span><span class="sxs-lookup"><span data-stu-id="306d5-261"><see langword="My" /> gives you better productivity and performance in file I/O operations.</span></span> <span data-ttu-id="306d5-262">有关详细信息，请参阅<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="306d5-262">See <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> for more information.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="306d5-263">提供 `FileClose` 函数是为了向后兼容，可能会影响性能。</span><span class="sxs-lookup"><span data-stu-id="306d5-263">The `FileClose` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="306d5-264">对于非旧版应用程序，`My.Computer.FileSystem` 对象提供更好的性能。</span><span class="sxs-lookup"><span data-stu-id="306d5-264">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="306d5-265">有关详细信息，请参阅[如何：使用 StreamReader 读取文件](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-text-from-files-with-a-streamreader)中的文本、[如何：使用 StreamWriter 向文件中写入文本](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter)和[演练：操作 Visual Basic 中的文件和目录](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/walkthrough-manipulating-files-and-directories)。</span><span class="sxs-lookup"><span data-stu-id="306d5-265">For more information, see [How to: Read Text from Files with a StreamReader](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-text-from-files-with-a-streamreader), [How to: Write Text to Files with a StreamWriter](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter), and [Walkthrough: Manipulating Files and Directories in Visual Basic](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/walkthrough-manipulating-files-and-directories).</span></span>  
  
 <span data-ttu-id="306d5-266">如果省略 `FileNumbers`，则将关闭 `FileOpen` 函数打开的所有活动文件。</span><span class="sxs-lookup"><span data-stu-id="306d5-266">If you omit `FileNumbers`, all active files opened by the `FileOpen` function are closed.</span></span>  
  
 <span data-ttu-id="306d5-267">关闭为 `Output` 或 `Append`打开的文件时，最终的输出缓冲区会写入该文件的操作系统缓冲区。</span><span class="sxs-lookup"><span data-stu-id="306d5-267">When you close files that were opened for `Output` or `Append`, the final buffer of output is written to the operating system buffer for that file.</span></span> <span data-ttu-id="306d5-268">与关闭的文件关联的所有缓冲区空间都将释放。</span><span class="sxs-lookup"><span data-stu-id="306d5-268">All buffer space associated with the closed file is released.</span></span>  
  
 <span data-ttu-id="306d5-269">执行 `FileClose` 函数时，文件的关联文件号将结束。</span><span class="sxs-lookup"><span data-stu-id="306d5-269">When the `FileClose` function is executed, the association of a file with its file number ends.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="306d5-270">此示例使用 `FileClose` 函数关闭为 `Input`打开的文件。</span><span class="sxs-lookup"><span data-stu-id="306d5-270">This example uses the `FileClose` function to close a file opened for `Input`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#69](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#69)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="306d5-271"><paramref name="FileNumber" /> 不存在。</span><span class="sxs-lookup"><span data-stu-id="306d5-271"><paramref name="FileNumber" /> does not exist.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Reset" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/statements/end-statement"><span data-ttu-id="306d5-272">End 语句</span><span class="sxs-lookup"><span data-stu-id="306d5-272">End Statement</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/statements/stop-statement"><span data-ttu-id="306d5-273">Stop 语句 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="306d5-273">Stop Statement (Visual Basic)</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/file-access"><span data-ttu-id="306d5-274">使用 Visual Basic 访问文件</span><span class="sxs-lookup"><span data-stu-id="306d5-274">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileCopy">
      <MemberSignature Language="C#" Value="public static void FileCopy (string Source, string Destination);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void FileCopy(string Source, string Destination) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileCopy(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileCopy (Source As String, Destination As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void FileCopy(System::String ^ Source, System::String ^ Destination);" />
      <MemberSignature Language="F#" Value="static member FileCopy : string * string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileCopy (Source, Destination)" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileCopy(string Source, string Destination) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Source" Type="System.String" />
        <Parameter Name="Destination" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Source"><span data-ttu-id="306d5-275">必需。</span><span class="sxs-lookup"><span data-stu-id="306d5-275">Required.</span></span> <span data-ttu-id="306d5-276">指定要复制的文件的名称的字符串表达式。</span><span class="sxs-lookup"><span data-stu-id="306d5-276">A string expression that specifies the name of the file to be copied.</span></span> <span data-ttu-id="306d5-277"><paramref name="Source" /> 可以包含源文件的驱动器和目录或文件夹。</span><span class="sxs-lookup"><span data-stu-id="306d5-277"><paramref name="Source" /> may include the directory or folder, and drive, of the source file.</span></span></param>
        <param name="Destination"><span data-ttu-id="306d5-278">必需。</span><span class="sxs-lookup"><span data-stu-id="306d5-278">Required.</span></span> <span data-ttu-id="306d5-279">指定目标文件名的字符串表达式。</span><span class="sxs-lookup"><span data-stu-id="306d5-279">A string expression that specifies the destination file name.</span></span> <span data-ttu-id="306d5-280"><paramref name="Destination" /> 可包含目标文件的驱动器和目录或文件夹。</span><span class="sxs-lookup"><span data-stu-id="306d5-280"><paramref name="Destination" /> may include the directory or folder, and drive, of the destination file.</span></span></param>
        <summary><span data-ttu-id="306d5-281">复制文件。</span><span class="sxs-lookup"><span data-stu-id="306d5-281">Copies a file.</span></span> <span data-ttu-id="306d5-282">与 <see langword="FileCopy" /> 相比，<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> 在文件 I/O 操作方面可为您提供更高的效率和更好的性能。</span><span class="sxs-lookup"><span data-stu-id="306d5-282">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="FileCopy" />.</span></span> <span data-ttu-id="306d5-283">有关详细信息，请参阅<see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.CopyFile(System.String,System.String)" />。</span><span class="sxs-lookup"><span data-stu-id="306d5-283">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.CopyFile(System.String,System.String)" /> for more information.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="306d5-284">如果尝试对当前打开的文件使用 `FileCopy` 函数，则会发生错误。</span><span class="sxs-lookup"><span data-stu-id="306d5-284">If you try to use the `FileCopy` function on a currently open file, an error occurs.</span></span>  
  
 <span data-ttu-id="306d5-285">`FileCopy` 要求完全信任才能在本地驱动器上工作。</span><span class="sxs-lookup"><span data-stu-id="306d5-285">`FileCopy` requires full trust to work on the local drive.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="306d5-286">此示例使用 `FileCopy` 函数将一个文件复制到另一个文件。</span><span class="sxs-lookup"><span data-stu-id="306d5-286">This example uses the `FileCopy` function to copy one file to another.</span></span> <span data-ttu-id="306d5-287">出于本示例的目的，假定 `SrcFile` 是包含数据的文件。</span><span class="sxs-lookup"><span data-stu-id="306d5-287">For purposes of this example, assume that `SrcFile` is a file that contains data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="306d5-288"><paramref name="Source" /> 或 <paramref name="Destination" /> 无效或未指定。</span><span class="sxs-lookup"><span data-stu-id="306d5-288"><paramref name="Source" /> or <paramref name="Destination" /> is invalid or not specified.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="306d5-289">文件已打开。</span><span class="sxs-lookup"><span data-stu-id="306d5-289">File is already open.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="306d5-290">文件不存在。</span><span class="sxs-lookup"><span data-stu-id="306d5-290">File does not exist.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Kill(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-copy-of-a-file-in-a-different-directory"><span data-ttu-id="306d5-291">如何：在 Visual Basic 中在不同的目录中创建文件的副本</span><span class="sxs-lookup"><span data-stu-id="306d5-291">How to: Create a Copy of a File in a Different Directory in Visual Basic</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-copy-of-a-file-in-the-same-directory"><span data-ttu-id="306d5-292">如何：在同一目录中创建文件副本 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="306d5-292">How to: Create a Copy of a File in the Same Directory in Visual Basic</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-copy-a-directory-to-another-directory"><span data-ttu-id="306d5-293">如何：在 Visual Basic 中将一个目录复制到另一个目录</span><span class="sxs-lookup"><span data-stu-id="306d5-293">How to: Copy a Directory to Another Directory in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileDateTime">
      <MemberSignature Language="C#" Value="public static DateTime FileDateTime (string PathName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime FileDateTime(string PathName) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileDateTime(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FileDateTime (PathName As String) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime FileDateTime(System::String ^ PathName);" />
      <MemberSignature Language="F#" Value="static member FileDateTime : string -&gt; DateTime" Usage="Microsoft.VisualBasic.FileSystem.FileDateTime PathName" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.DateTime FileDateTime(string PathName) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="PathName"><span data-ttu-id="306d5-294">必需。</span><span class="sxs-lookup"><span data-stu-id="306d5-294">Required.</span></span> <span data-ttu-id="306d5-295">指定一个文件名的字符串表达式。</span><span class="sxs-lookup"><span data-stu-id="306d5-295">A string expression that specifies a file name.</span></span> <span data-ttu-id="306d5-296"><paramref name="PathName" /> 可能包括目录或文件夹以及驱动器。</span><span class="sxs-lookup"><span data-stu-id="306d5-296"><paramref name="PathName" /> may include the directory or folder, and the drive.</span></span></param>
        <summary><span data-ttu-id="306d5-297">返回一个 <see langword="Date" /> 值，该值指示写入文件的日期和时间。</span><span class="sxs-lookup"><span data-stu-id="306d5-297">Returns a <see langword="Date" /> value that indicates the date and time a file was written to.</span></span> <span data-ttu-id="306d5-298">相比 <see langword="FileDateTime" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span><span class="sxs-lookup"><span data-stu-id="306d5-298">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileDateTime" />.</span></span> <span data-ttu-id="306d5-299">有关详细信息，请参阅<see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" /></span><span class="sxs-lookup"><span data-stu-id="306d5-299">For more information, see <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" /></span></span></summary>
        <returns><span data-ttu-id="306d5-300"><see langword="Date" /> 值，该值指示文件的创建日期和时间或上次修改日期和时间。</span><span class="sxs-lookup"><span data-stu-id="306d5-300"><see langword="Date" /> value that indicates the date and time a file was created or last modified.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="306d5-301">此示例使用 `FileDateTime` 函数来确定文件的创建日期和时间或上次修改日期和时间。</span><span class="sxs-lookup"><span data-stu-id="306d5-301">This example uses the `FileDateTime` function to determine the date and time a file was created or last modified.</span></span> <span data-ttu-id="306d5-302">显示的日期和时间的格式基于系统的区域设置。</span><span class="sxs-lookup"><span data-stu-id="306d5-302">The format of the date and time displayed is based on the locale settings of the system.</span></span>  
  
 [!code-vb[VbVbalrCatRef#34](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#34)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="306d5-303"><paramref name="PathName" /> 无效或包含通配符。</span><span class="sxs-lookup"><span data-stu-id="306d5-303"><paramref name="PathName" /> is invalid or contains wildcards.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="306d5-304">目标文件不存在。</span><span class="sxs-lookup"><span data-stu-id="306d5-304">Target file does not exist.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileLen(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/file-access"><span data-ttu-id="306d5-305">使用 Visual Basic 访问文件</span><span class="sxs-lookup"><span data-stu-id="306d5-305">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="FileGet">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="306d5-306">将数据从打开的磁盘文件读入到一个变量中。</span><span class="sxs-lookup"><span data-stu-id="306d5-306">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="306d5-307">相比 <see langword="FileGet" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span><span class="sxs-lookup"><span data-stu-id="306d5-307">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="306d5-308">有关详细信息，请参阅 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="306d5-308">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref bool Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void FileGet(int32 FileNumber, bool&amp; Value, int64 RecordNumber) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Boolean@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Boolean, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int * bool * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, bool&amp; Value, int64 RecordNumber) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Boolean" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="306d5-309">必需。</span><span class="sxs-lookup"><span data-stu-id="306d5-309">Required.</span></span> <span data-ttu-id="306d5-310">任何有效文件数。</span><span class="sxs-lookup"><span data-stu-id="306d5-310">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="306d5-311">必需。</span><span class="sxs-lookup"><span data-stu-id="306d5-311">Required.</span></span> <span data-ttu-id="306d5-312">数据读入到其中的有效变量名称。</span><span class="sxs-lookup"><span data-stu-id="306d5-312">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="306d5-313">可选。</span><span class="sxs-lookup"><span data-stu-id="306d5-313">Optional.</span></span> <span data-ttu-id="306d5-314">读取的开始位置处的记录号（<see langword="Random" /> 模式文件）或字节数（<see langword="Binary" /> 模式文件）。</span><span class="sxs-lookup"><span data-stu-id="306d5-314">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="306d5-315">将数据从打开的磁盘文件读入到一个变量中。</span><span class="sxs-lookup"><span data-stu-id="306d5-315">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="306d5-316">相比 <see langword="FileGet" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span><span class="sxs-lookup"><span data-stu-id="306d5-316">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="306d5-317">有关详细信息，请参阅<see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /></span><span class="sxs-lookup"><span data-stu-id="306d5-317">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /></span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="306d5-318">`FileGet` 仅在 `Random` 和 `Binary` 模式下有效。</span><span class="sxs-lookup"><span data-stu-id="306d5-318">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="306d5-319">使用 `FileGet` 读取的数据通常写入 `FilePut`的文件。</span><span class="sxs-lookup"><span data-stu-id="306d5-319">Data read with `FileGet` is usually written to a file with `FilePut`.</span></span>  
  
 <span data-ttu-id="306d5-320">文件中的第一个记录或字节位于位置1，第二个记录或字节在位置2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="306d5-320">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="306d5-321">如果省略 `RecordNumber`，则读取最后一个 `FileGet` 或 `FilePut` `Seek` 函数后的下一条记录或字节。</span><span class="sxs-lookup"><span data-stu-id="306d5-321">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="306d5-322">从文件中读取时，请不要根据文件扩展名来决定文件的内容。</span><span class="sxs-lookup"><span data-stu-id="306d5-322">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="306d5-323">例如，名为 "Form1" 的文件可能不是 Visual Basic 的源文件。</span><span class="sxs-lookup"><span data-stu-id="306d5-323">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="306d5-324">随机模式</span><span class="sxs-lookup"><span data-stu-id="306d5-324">Random Mode</span></span>  
 <span data-ttu-id="306d5-325">对于在 `Random` 模式下打开的文件，以下规则适用：</span><span class="sxs-lookup"><span data-stu-id="306d5-325">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="306d5-326">如果读取的数据的长度小于 `FileOpen` 函数的 `RecordLength` 子句中指定的长度，`FileGet` 将读取记录长度边界的后续记录。</span><span class="sxs-lookup"><span data-stu-id="306d5-326">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="306d5-327">一条记录的末尾和下一条记录的开头之间的空格将填充到文件缓冲区的现有内容中。</span><span class="sxs-lookup"><span data-stu-id="306d5-327">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="306d5-328">由于不能确定填充数据量，因此通常最好让记录长度与读取的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="306d5-328">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="306d5-329">默认情况下，如果要读入的变量是字符串，`FileGet` 会读取包含字符串长度的双字节说明符，然后读取进入该变量的数据。</span><span class="sxs-lookup"><span data-stu-id="306d5-329">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="306d5-330">因此，`FileOpen` 函数的 `RecordLength` 子句指定的记录长度必须大于字符串的实际长度的2个字节。</span><span class="sxs-lookup"><span data-stu-id="306d5-330">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="306d5-331">Visual Basic 6.0 及更早版本支持固定长度字符串;放到文件中时，不写入长度说明符。</span><span class="sxs-lookup"><span data-stu-id="306d5-331">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="306d5-332">如果要读取没有描述符的字符串，则应将 `True` 传递给 `StringIsFixedLength` 参数，并且读入的字符串应为正确的长度。</span><span class="sxs-lookup"><span data-stu-id="306d5-332">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="306d5-333">如果读入的变量是数组，则可以选择是否读取数组的大小和维度的说明符。</span><span class="sxs-lookup"><span data-stu-id="306d5-333">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="306d5-334">若要编写描述符，请将 `ArrayIsDynamic` 参数设置为 `True`。</span><span class="sxs-lookup"><span data-stu-id="306d5-334">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="306d5-335">读取数组时，必须匹配数组的写入方式。</span><span class="sxs-lookup"><span data-stu-id="306d5-335">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="306d5-336">如果使用描述符编写，则必须读取描述符。</span><span class="sxs-lookup"><span data-stu-id="306d5-336">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="306d5-337">如果未使用该说明符，则传递到 `FileGet` 的数组的大小和界限确定要读取的内容。</span><span class="sxs-lookup"><span data-stu-id="306d5-337">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="306d5-338">描述符指定数组的秩、大小和每个排名的下限。</span><span class="sxs-lookup"><span data-stu-id="306d5-338">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="306d5-339">其长度等于2再加上维度数的8倍：（2 + 8 \* NumberOfDimensions）。</span><span class="sxs-lookup"><span data-stu-id="306d5-339">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="306d5-340">`FileOpen` 函数中由 `RecordLength` 参数指定的记录长度必须大于或等于写入数组数据和数组描述符所需的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="306d5-340">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="306d5-341">例如，当数组写入磁盘时，以下数组声明需要218字节。</span><span class="sxs-lookup"><span data-stu-id="306d5-341">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="306d5-342">218字节分布如下：</span><span class="sxs-lookup"><span data-stu-id="306d5-342">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="306d5-343">描述符的18个字节：（2 + 8 \* 2）</span><span class="sxs-lookup"><span data-stu-id="306d5-343">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="306d5-344">数据为200字节：（5 \* 10 \* 4）。</span><span class="sxs-lookup"><span data-stu-id="306d5-344">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="306d5-345">如果读入的变量是任何其他类型的变量（不是变长字符串或对象），`FileGet` 仅读取变量数据。</span><span class="sxs-lookup"><span data-stu-id="306d5-345">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="306d5-346">`FileOpen` 函数中由 `RecordLength` 子句指定的记录长度必须大于或等于正在读取的数据的长度。</span><span class="sxs-lookup"><span data-stu-id="306d5-346">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="306d5-347">`FileGet` 读取结构的元素，就好像每个元素都是单独读取的，只不过元素之间没有任何空白。</span><span class="sxs-lookup"><span data-stu-id="306d5-347">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="306d5-348">在磁盘上，用户定义类型中的动态数组（使用 `FilePut`编写的）以一个描述符为前缀，其长度等于2再加上维度数的8倍：（2 + 8 \* NumberOfDimensions）。</span><span class="sxs-lookup"><span data-stu-id="306d5-348">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="306d5-349">`FileOpen` 函数中由 `RecordLength` 子句指定的记录长度必须大于或等于读取单个元素所需的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="306d5-349">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="306d5-350">这包括任何数组及其说明符。</span><span class="sxs-lookup"><span data-stu-id="306d5-350">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="306d5-351">`VBFixedString` 特性可应用于结构中的字符串字段，以指示写入磁盘时字符串的大小。</span><span class="sxs-lookup"><span data-stu-id="306d5-351">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="306d5-352">二进制模式</span><span class="sxs-lookup"><span data-stu-id="306d5-352">Binary Mode</span></span>  
 <span data-ttu-id="306d5-353">对于在 `Binary` 模式下打开的文件，大多数 `Random` 模式规则都适用，但有一些例外情况。</span><span class="sxs-lookup"><span data-stu-id="306d5-353">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="306d5-354">`Binary` 模式下打开的文件的以下规则不同于 `Random` 模式的规则：</span><span class="sxs-lookup"><span data-stu-id="306d5-354">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="306d5-355">`FileOpen` 函数中的 `RecordLength` 子句不起作用。</span><span class="sxs-lookup"><span data-stu-id="306d5-355">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="306d5-356">`FileGet` 连续读取磁盘中的所有变量;也就是说，记录之间不进行填充。</span><span class="sxs-lookup"><span data-stu-id="306d5-356">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="306d5-357">对于结构中除数组以外的任何数组，`FileGet` 仅读取数据。</span><span class="sxs-lookup"><span data-stu-id="306d5-357">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="306d5-358">未读取任何说明符。</span><span class="sxs-lookup"><span data-stu-id="306d5-358">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="306d5-359">`FileGet` 读取不是结构的元素且不需要双字节长度说明符的可变长度字符串。</span><span class="sxs-lookup"><span data-stu-id="306d5-359">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="306d5-360">读取的字节数等于字符串中的字符数。</span><span class="sxs-lookup"><span data-stu-id="306d5-360">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="306d5-361">使用`FileGet` 函数从文件读取需要从 <xref:System.Security.Permissions.FileIOPermissionAccess> 枚举进行 `Read` 访问。</span><span class="sxs-lookup"><span data-stu-id="306d5-361">Reading from a file by using the`FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="306d5-362"><paramref name="RecordNumber" /> &lt; 1 且不等于 -1。</span><span class="sxs-lookup"><span data-stu-id="306d5-362"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="306d5-363">文件模式无效。</span><span class="sxs-lookup"><span data-stu-id="306d5-363">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files"><span data-ttu-id="306d5-364">从文件读取 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="306d5-364">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files"><span data-ttu-id="306d5-365">写入文件 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="306d5-365">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref byte Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void FileGet(int32 FileNumber, unsigned int8&amp; Value, int64 RecordNumber) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Byte@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Byte, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int * byte * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, unsigned int8&amp; Value, int64 RecordNumber) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Byte" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="306d5-366">必需。</span><span class="sxs-lookup"><span data-stu-id="306d5-366">Required.</span></span> <span data-ttu-id="306d5-367">任何有效文件数。</span><span class="sxs-lookup"><span data-stu-id="306d5-367">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="306d5-368">必需。</span><span class="sxs-lookup"><span data-stu-id="306d5-368">Required.</span></span> <span data-ttu-id="306d5-369">数据读入到其中的有效变量名称。</span><span class="sxs-lookup"><span data-stu-id="306d5-369">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="306d5-370">可选。</span><span class="sxs-lookup"><span data-stu-id="306d5-370">Optional.</span></span> <span data-ttu-id="306d5-371">读取的开始位置处的记录号（<see langword="Random" /> 模式文件）或字节数（<see langword="Binary" /> 模式文件）。</span><span class="sxs-lookup"><span data-stu-id="306d5-371">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="306d5-372">将数据从打开的磁盘文件读入到一个变量中。</span><span class="sxs-lookup"><span data-stu-id="306d5-372">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="306d5-373">相比 <see langword="FileGet" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span><span class="sxs-lookup"><span data-stu-id="306d5-373">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="306d5-374">有关详细信息，请参阅 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="306d5-374">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="306d5-375">`FileGet` 仅在 `Random` 和 `Binary` 模式下有效。</span><span class="sxs-lookup"><span data-stu-id="306d5-375">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="306d5-376">使用 `FileGet` 读取的数据通常写入 `FilePut`的文件。</span><span class="sxs-lookup"><span data-stu-id="306d5-376">Data read with `FileGet` is usually written to a file with `FilePut`.</span></span>  
  
 <span data-ttu-id="306d5-377">文件中的第一个记录或字节位于位置1，第二个记录或字节在位置2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="306d5-377">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="306d5-378">如果省略 `RecordNumber`，则读取最后一个 `FileGet` 或 `FilePut` `Seek` 函数后的下一条记录或字节。</span><span class="sxs-lookup"><span data-stu-id="306d5-378">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="306d5-379">从文件中读取时，请不要根据文件扩展名来决定文件的内容。</span><span class="sxs-lookup"><span data-stu-id="306d5-379">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="306d5-380">例如，名为 "Form1" 的文件可能不是 Visual Basic 的源文件。</span><span class="sxs-lookup"><span data-stu-id="306d5-380">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="306d5-381">随机模式</span><span class="sxs-lookup"><span data-stu-id="306d5-381">Random Mode</span></span>  
 <span data-ttu-id="306d5-382">对于在 `Random` 模式下打开的文件，以下规则适用：</span><span class="sxs-lookup"><span data-stu-id="306d5-382">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="306d5-383">如果读取的数据的长度小于 `FileOpen` 函数的 `RecordLength` 子句中指定的长度，`FileGet` 将读取记录长度边界的后续记录。</span><span class="sxs-lookup"><span data-stu-id="306d5-383">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="306d5-384">一条记录的末尾和下一条记录的开头之间的空格将填充到文件缓冲区的现有内容中。</span><span class="sxs-lookup"><span data-stu-id="306d5-384">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="306d5-385">由于不能确定填充数据量，因此通常最好让记录长度与读取的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="306d5-385">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="306d5-386">默认情况下，如果要读入的变量是字符串，`FileGet` 会读取包含字符串长度的双字节说明符，然后读取进入该变量的数据。</span><span class="sxs-lookup"><span data-stu-id="306d5-386">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="306d5-387">因此，`FileOpen` 函数的 `RecordLength` 子句指定的记录长度必须大于字符串的实际长度的2个字节。</span><span class="sxs-lookup"><span data-stu-id="306d5-387">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="306d5-388">Visual Basic 6.0 及更早版本支持固定长度字符串;放到文件中时，不写入长度说明符。</span><span class="sxs-lookup"><span data-stu-id="306d5-388">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="306d5-389">如果要读取没有描述符的字符串，则应将 `True` 传递给 `StringIsFixedLength` 参数，并且读入的字符串应为正确的长度。</span><span class="sxs-lookup"><span data-stu-id="306d5-389">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="306d5-390">如果读入的变量是数组，则可以选择是否读取数组的大小和维度的说明符。</span><span class="sxs-lookup"><span data-stu-id="306d5-390">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="306d5-391">若要编写描述符，请将 `ArrayIsDynamic` 参数设置为 `True`。</span><span class="sxs-lookup"><span data-stu-id="306d5-391">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="306d5-392">读取数组时，必须匹配数组的写入方式。</span><span class="sxs-lookup"><span data-stu-id="306d5-392">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="306d5-393">如果使用描述符编写，则必须读取描述符。</span><span class="sxs-lookup"><span data-stu-id="306d5-393">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="306d5-394">如果未使用描述符，则为。</span><span class="sxs-lookup"><span data-stu-id="306d5-394">If the descriptor is not used.</span></span> <span data-ttu-id="306d5-395">然后，传递到 `FileGet` 的数组的大小和界限确定要读取的内容。</span><span class="sxs-lookup"><span data-stu-id="306d5-395">Then the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="306d5-396">描述符指定数组的秩、大小和每个排名的下限。</span><span class="sxs-lookup"><span data-stu-id="306d5-396">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="306d5-397">其长度等于2再加上维度数的8倍：（2 + 8 \* NumberOfDimensions）。</span><span class="sxs-lookup"><span data-stu-id="306d5-397">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="306d5-398">`FileOpen` 函数中由 `RecordLength` 参数指定的记录长度必须大于或等于写入数组数据和数组描述符所需的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="306d5-398">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="306d5-399">例如，当数组写入磁盘时，以下数组声明需要218字节。</span><span class="sxs-lookup"><span data-stu-id="306d5-399">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="306d5-400">218字节分布如下：</span><span class="sxs-lookup"><span data-stu-id="306d5-400">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="306d5-401">描述符的18个字节：（2 + 8 \* 2）</span><span class="sxs-lookup"><span data-stu-id="306d5-401">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="306d5-402">数据为200字节：（5 \* 10 \* 4）。</span><span class="sxs-lookup"><span data-stu-id="306d5-402">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="306d5-403">如果读入的变量是任何其他类型的变量（不是变长字符串或对象），`FileGet` 仅读取变量数据。</span><span class="sxs-lookup"><span data-stu-id="306d5-403">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="306d5-404">`FileOpen` 函数中由 `RecordLength` 子句指定的记录长度必须大于或等于正在读取的数据的长度。</span><span class="sxs-lookup"><span data-stu-id="306d5-404">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="306d5-405">`FileGet` 读取结构的元素，就好像每个元素都是单独读取的，只不过元素之间没有任何空白。</span><span class="sxs-lookup"><span data-stu-id="306d5-405">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="306d5-406">在磁盘上，用户定义类型中的动态数组（使用 `FilePut`编写的）以一个描述符为前缀，其长度等于2再加上维度数的8倍：（2 + 8 \* NumberOfDimensions）。</span><span class="sxs-lookup"><span data-stu-id="306d5-406">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="306d5-407">`FileOpen` 函数中由 `RecordLength` 子句指定的记录长度必须大于或等于读取单个元素所需的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="306d5-407">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="306d5-408">这包括任何数组及其说明符。</span><span class="sxs-lookup"><span data-stu-id="306d5-408">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="306d5-409">`VBFixedString` 特性可应用于结构中的字符串字段，以指示写入磁盘时字符串的大小。</span><span class="sxs-lookup"><span data-stu-id="306d5-409">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="306d5-410">二进制模式</span><span class="sxs-lookup"><span data-stu-id="306d5-410">Binary Mode</span></span>  
 <span data-ttu-id="306d5-411">对于在 `Binary` 模式下打开的文件，大多数 `Random` 模式规则都适用，但有一些例外情况。</span><span class="sxs-lookup"><span data-stu-id="306d5-411">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="306d5-412">`Binary` 模式下打开的文件的以下规则不同于 `Random` 模式的规则：</span><span class="sxs-lookup"><span data-stu-id="306d5-412">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="306d5-413">`FileOpen` 函数中的 `RecordLength` 子句不起作用。</span><span class="sxs-lookup"><span data-stu-id="306d5-413">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="306d5-414">`FileGet` 连续读取磁盘中的所有变量;也就是说，记录之间不进行填充。</span><span class="sxs-lookup"><span data-stu-id="306d5-414">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="306d5-415">对于结构中除数组以外的任何数组，`FileGet` 仅读取数据。</span><span class="sxs-lookup"><span data-stu-id="306d5-415">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="306d5-416">未读取任何说明符。</span><span class="sxs-lookup"><span data-stu-id="306d5-416">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="306d5-417">`FileGet` 读取不是结构的元素且不需要双字节长度说明符的可变长度字符串。</span><span class="sxs-lookup"><span data-stu-id="306d5-417">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="306d5-418">读取的字节数等于字符串中的字符数。</span><span class="sxs-lookup"><span data-stu-id="306d5-418">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="306d5-419">使用 `FileGet` 函数从文件读取需要从 <xref:System.Security.Permissions.FileIOPermissionAccess> 枚举进行 `Read` 访问。</span><span class="sxs-lookup"><span data-stu-id="306d5-419">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="306d5-420"><paramref name="RecordNumber" /> &lt; 1 且不等于 -1。</span><span class="sxs-lookup"><span data-stu-id="306d5-420"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="306d5-421">文件模式无效。</span><span class="sxs-lookup"><span data-stu-id="306d5-421">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files"><span data-ttu-id="306d5-422">从文件读取 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="306d5-422">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files"><span data-ttu-id="306d5-423">写入文件 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="306d5-423">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref char Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void FileGet(int32 FileNumber, char&amp; Value, int64 RecordNumber) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Char@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Char, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int * char * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, char&amp; Value, int64 RecordNumber) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Char" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="306d5-424">必需。</span><span class="sxs-lookup"><span data-stu-id="306d5-424">Required.</span></span> <span data-ttu-id="306d5-425">任何有效文件数。</span><span class="sxs-lookup"><span data-stu-id="306d5-425">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="306d5-426">必需。</span><span class="sxs-lookup"><span data-stu-id="306d5-426">Required.</span></span> <span data-ttu-id="306d5-427">数据读入到其中的有效变量名称。</span><span class="sxs-lookup"><span data-stu-id="306d5-427">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="306d5-428">可选。</span><span class="sxs-lookup"><span data-stu-id="306d5-428">Optional.</span></span> <span data-ttu-id="306d5-429">读取的开始位置处的记录号（<see langword="Random" /> 模式文件）或字节数（<see langword="Binary" /> 模式文件）。</span><span class="sxs-lookup"><span data-stu-id="306d5-429">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="306d5-430">将数据从打开的磁盘文件读入到一个变量中。</span><span class="sxs-lookup"><span data-stu-id="306d5-430">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="306d5-431">相比 <see langword="FileGet" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span><span class="sxs-lookup"><span data-stu-id="306d5-431">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="306d5-432">有关详细信息，请参阅 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="306d5-432">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="306d5-433">`FileGet` 仅在 `Random` 和 `Binary` 模式下有效。</span><span class="sxs-lookup"><span data-stu-id="306d5-433">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="306d5-434">使用 `FileGet` 读取的数据通常写入 `FilePut`的文件。</span><span class="sxs-lookup"><span data-stu-id="306d5-434">Data read with `FileGet` is usually written to a file with `FilePut`.</span></span>  
  
 <span data-ttu-id="306d5-435">文件中的第一个记录或字节位于位置1，第二个记录或字节在位置2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="306d5-435">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="306d5-436">如果省略 `RecordNumber`，则读取最后一个 `FileGet` 或 `FilePut` `Seek` 函数后的下一条记录或字节。</span><span class="sxs-lookup"><span data-stu-id="306d5-436">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="306d5-437">从文件中读取时，请不要根据文件扩展名来决定文件的内容。</span><span class="sxs-lookup"><span data-stu-id="306d5-437">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="306d5-438">例如，名为 "Form1" 的文件可能不是 Visual Basic 的源文件。</span><span class="sxs-lookup"><span data-stu-id="306d5-438">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="306d5-439">随机模式</span><span class="sxs-lookup"><span data-stu-id="306d5-439">Random Mode</span></span>  
 <span data-ttu-id="306d5-440">对于在 `Random` 模式下打开的文件，以下规则适用：</span><span class="sxs-lookup"><span data-stu-id="306d5-440">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="306d5-441">如果读取的数据的长度小于 `FileOpen` 函数的 `RecordLength` 子句中指定的长度，`FileGet` 将读取记录长度边界的后续记录。</span><span class="sxs-lookup"><span data-stu-id="306d5-441">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="306d5-442">一条记录的末尾和下一条记录的开头之间的空格将填充到文件缓冲区的现有内容中。</span><span class="sxs-lookup"><span data-stu-id="306d5-442">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="306d5-443">由于不能确定填充数据量，因此通常最好让记录长度与读取的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="306d5-443">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="306d5-444">默认情况下，如果要读入的变量是字符串，`FileGet` 会读取包含字符串长度的双字节说明符，然后读取进入该变量的数据。</span><span class="sxs-lookup"><span data-stu-id="306d5-444">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="306d5-445">因此，`FileOpen` 函数的 `RecordLength` 子句指定的记录长度必须大于字符串的实际长度的2个字节。</span><span class="sxs-lookup"><span data-stu-id="306d5-445">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="306d5-446">Visual Basic 6.0 及更早版本支持固定长度字符串;放到文件中时，不写入长度说明符。</span><span class="sxs-lookup"><span data-stu-id="306d5-446">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="306d5-447">如果要读取没有描述符的字符串，则应将 `True` 传递给 `StringIsFixedLength` 参数，并且读入的字符串应为正确的长度。</span><span class="sxs-lookup"><span data-stu-id="306d5-447">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="306d5-448">如果读入的变量是数组，则可以选择是否读取数组的大小和维度的说明符。</span><span class="sxs-lookup"><span data-stu-id="306d5-448">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="306d5-449">若要编写描述符，请将 `ArrayIsDynamic` 参数设置为 `True`。</span><span class="sxs-lookup"><span data-stu-id="306d5-449">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="306d5-450">读取数组时，必须匹配数组的写入方式。</span><span class="sxs-lookup"><span data-stu-id="306d5-450">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="306d5-451">如果使用描述符编写，则必须读取描述符。</span><span class="sxs-lookup"><span data-stu-id="306d5-451">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="306d5-452">如果未使用该说明符，则传递到 `FileGet` 的数组的大小和界限确定要读取的内容。</span><span class="sxs-lookup"><span data-stu-id="306d5-452">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="306d5-453">描述符指定数组的秩、大小和每个排名的下限。</span><span class="sxs-lookup"><span data-stu-id="306d5-453">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="306d5-454">其长度等于2再加上维度数的8倍：（2 + 8 \* NumberOfDimensions）。</span><span class="sxs-lookup"><span data-stu-id="306d5-454">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="306d5-455">`FileOpen` 函数中由 `RecordLength` 参数指定的记录长度必须大于或等于写入数组数据和数组描述符所需的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="306d5-455">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="306d5-456">例如，当数组写入磁盘时，以下数组声明需要218字节。</span><span class="sxs-lookup"><span data-stu-id="306d5-456">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="306d5-457">218字节分布如下：</span><span class="sxs-lookup"><span data-stu-id="306d5-457">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="306d5-458">描述符的18个字节：（2 + 8 \* 2）</span><span class="sxs-lookup"><span data-stu-id="306d5-458">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="306d5-459">数据为200字节：（5 \* 10 \* 4）。</span><span class="sxs-lookup"><span data-stu-id="306d5-459">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="306d5-460">如果读入的变量是任何其他类型的变量（不是变长字符串或对象），`FileGet` 仅读取变量数据。</span><span class="sxs-lookup"><span data-stu-id="306d5-460">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="306d5-461">`FileOpen` 函数中由 `RecordLength` 子句指定的记录长度必须大于或等于正在读取的数据的长度。</span><span class="sxs-lookup"><span data-stu-id="306d5-461">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="306d5-462">`FileGet` 读取结构的元素，就好像每个元素都是单独读取的，只不过元素之间没有任何空白。</span><span class="sxs-lookup"><span data-stu-id="306d5-462">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="306d5-463">在磁盘上，用户定义类型中的动态数组（使用 `FilePut`编写的）以一个描述符为前缀，其长度等于2再加上维度数的8倍：（2 + 8 \* NumberOfDimensions）。</span><span class="sxs-lookup"><span data-stu-id="306d5-463">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="306d5-464">`FileOpen` 函数中由 `RecordLength` 子句指定的记录长度必须大于或等于读取单个元素所需的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="306d5-464">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="306d5-465">这包括任何数组及其说明符。</span><span class="sxs-lookup"><span data-stu-id="306d5-465">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="306d5-466">`VBFixedString` 特性可应用于结构中的字符串字段，以指示写入磁盘时字符串的大小。</span><span class="sxs-lookup"><span data-stu-id="306d5-466">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="306d5-467">二进制模式</span><span class="sxs-lookup"><span data-stu-id="306d5-467">Binary Mode</span></span>  
 <span data-ttu-id="306d5-468">对于在 `Binary` 模式下打开的文件，大多数 `Random` 模式规则都适用，但有一些例外情况。</span><span class="sxs-lookup"><span data-stu-id="306d5-468">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="306d5-469">`Binary` 模式下打开的文件的以下规则不同于 `Random` 模式的规则：</span><span class="sxs-lookup"><span data-stu-id="306d5-469">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="306d5-470">`FileOpen` 函数中的 `RecordLength` 子句不起作用。</span><span class="sxs-lookup"><span data-stu-id="306d5-470">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="306d5-471">`FileGet` 连续读取磁盘中的所有变量;也就是说，记录之间不进行填充。</span><span class="sxs-lookup"><span data-stu-id="306d5-471">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="306d5-472">对于结构中除数组以外的任何数组，`FileGet` 仅读取数据。</span><span class="sxs-lookup"><span data-stu-id="306d5-472">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="306d5-473">未读取任何说明符。</span><span class="sxs-lookup"><span data-stu-id="306d5-473">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="306d5-474">`FileGet` 读取不是结构的元素且不需要双字节长度说明符的可变长度字符串。</span><span class="sxs-lookup"><span data-stu-id="306d5-474">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="306d5-475">读取的字节数等于字符串中的字符数。</span><span class="sxs-lookup"><span data-stu-id="306d5-475">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="306d5-476">使用 `FileGet` 函数从文件读取需要从 <xref:System.Security.Permissions.FileIOPermissionAccess> 枚举进行 `Read` 访问。</span><span class="sxs-lookup"><span data-stu-id="306d5-476">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="306d5-477"><paramref name="RecordNumber" /> &lt; 1 且不等于 -1。</span><span class="sxs-lookup"><span data-stu-id="306d5-477"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="306d5-478">文件模式无效。</span><span class="sxs-lookup"><span data-stu-id="306d5-478">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files"><span data-ttu-id="306d5-479">从文件读取 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="306d5-479">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files"><span data-ttu-id="306d5-480">写入文件 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="306d5-480">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref DateTime Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void FileGet(int32 FileNumber, valuetype System.DateTime&amp; Value, int64 RecordNumber) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.DateTime@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As DateTime, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int * DateTime * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, valuetype System.DateTime&amp; Value, int64 RecordNumber) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.DateTime" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="306d5-481">必需。</span><span class="sxs-lookup"><span data-stu-id="306d5-481">Required.</span></span> <span data-ttu-id="306d5-482">任何有效文件数。</span><span class="sxs-lookup"><span data-stu-id="306d5-482">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="306d5-483">必需。</span><span class="sxs-lookup"><span data-stu-id="306d5-483">Required.</span></span> <span data-ttu-id="306d5-484">数据读入到其中的有效变量名称。</span><span class="sxs-lookup"><span data-stu-id="306d5-484">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="306d5-485">可选。</span><span class="sxs-lookup"><span data-stu-id="306d5-485">Optional.</span></span> <span data-ttu-id="306d5-486">读取的开始位置处的记录号（<see langword="Random" /> 模式文件）或字节数（<see langword="Binary" /> 模式文件）。</span><span class="sxs-lookup"><span data-stu-id="306d5-486">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="306d5-487">将数据从打开的磁盘文件读入到一个变量中。</span><span class="sxs-lookup"><span data-stu-id="306d5-487">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="306d5-488">相比 <see langword="FileGet" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span><span class="sxs-lookup"><span data-stu-id="306d5-488">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="306d5-489">有关详细信息，请参阅 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="306d5-489">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="306d5-490">`FileGet` 仅在 `Random` 和 `Binary` 模式下有效。</span><span class="sxs-lookup"><span data-stu-id="306d5-490">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="306d5-491">使用 `FileGet` 读取的数据通常写入 `FilePut`的文件。</span><span class="sxs-lookup"><span data-stu-id="306d5-491">Data read with `FileGet` is usually written to a file with `FilePut`.</span></span>  
  
 <span data-ttu-id="306d5-492">文件中的第一个记录或字节位于位置1，第二个记录或字节在位置2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="306d5-492">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="306d5-493">如果省略 `RecordNumber`，则读取最后一个 `FileGet` 或 `FilePut` `Seek` 函数后的下一条记录或字节。</span><span class="sxs-lookup"><span data-stu-id="306d5-493">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="306d5-494">从文件中读取时，请不要根据文件扩展名来决定文件的内容。</span><span class="sxs-lookup"><span data-stu-id="306d5-494">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="306d5-495">例如，名为 "Form1" 的文件可能不是 Visual Basic 的源文件。</span><span class="sxs-lookup"><span data-stu-id="306d5-495">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="306d5-496">随机模式</span><span class="sxs-lookup"><span data-stu-id="306d5-496">Random Mode</span></span>  
 <span data-ttu-id="306d5-497">对于在 `Random` 模式下打开的文件，以下规则适用：</span><span class="sxs-lookup"><span data-stu-id="306d5-497">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="306d5-498">如果读取的数据的长度小于 `FileOpen` 函数的 `RecordLength` 子句中指定的长度，`FileGet` 将读取记录长度边界的后续记录。</span><span class="sxs-lookup"><span data-stu-id="306d5-498">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function,`FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="306d5-499">一条记录的末尾和下一条记录的开头之间的空格将填充到文件缓冲区的现有内容中。</span><span class="sxs-lookup"><span data-stu-id="306d5-499">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="306d5-500">由于不能确定填充数据量，因此通常最好让记录长度与读取的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="306d5-500">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="306d5-501">默认情况下，如果要读入的变量是字符串，`FileGet` 会读取包含字符串长度的双字节说明符，然后读取进入该变量的数据。</span><span class="sxs-lookup"><span data-stu-id="306d5-501">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="306d5-502">因此，`FileOpen` 函数的 `RecordLength` 子句指定的记录长度必须大于字符串的实际长度的2个字节。</span><span class="sxs-lookup"><span data-stu-id="306d5-502">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="306d5-503">Visual Basic 6.0 及更早版本支持固定长度字符串;放到文件中时，不写入长度说明符。</span><span class="sxs-lookup"><span data-stu-id="306d5-503">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="306d5-504">如果要读取没有描述符的字符串，则应将 `True` 传递给 `StringIsFixedLength` 参数，并且读入的字符串应为正确的长度。</span><span class="sxs-lookup"><span data-stu-id="306d5-504">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="306d5-505">如果读入的变量是数组，则可以选择是否读取数组的大小和维度的说明符。</span><span class="sxs-lookup"><span data-stu-id="306d5-505">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="306d5-506">若要编写描述符，请将 `ArrayIsDynamic` 参数设置为 `True`。</span><span class="sxs-lookup"><span data-stu-id="306d5-506">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="306d5-507">读取数组时，必须匹配数组的写入方式。</span><span class="sxs-lookup"><span data-stu-id="306d5-507">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="306d5-508">如果使用描述符编写，则必须读取描述符。</span><span class="sxs-lookup"><span data-stu-id="306d5-508">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="306d5-509">如果未使用该说明符，则传递到 `FileGet` 的数组的大小和界限确定要读取的内容。</span><span class="sxs-lookup"><span data-stu-id="306d5-509">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="306d5-510">描述符指定数组的秩、大小和每个排名的下限。</span><span class="sxs-lookup"><span data-stu-id="306d5-510">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="306d5-511">其长度等于2再加上维度数的8倍：（2 + 8 \* NumberOfDimensions）。</span><span class="sxs-lookup"><span data-stu-id="306d5-511">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="306d5-512">`FileOpen` 函数中由 `RecordLength` 参数指定的记录长度必须大于或等于写入数组数据和数组描述符所需的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="306d5-512">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="306d5-513">例如，当数组写入磁盘时，以下数组声明需要218字节。</span><span class="sxs-lookup"><span data-stu-id="306d5-513">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="306d5-514">218字节分布如下：</span><span class="sxs-lookup"><span data-stu-id="306d5-514">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="306d5-515">描述符的18个字节：（2 + 8 \* 2）</span><span class="sxs-lookup"><span data-stu-id="306d5-515">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="306d5-516">数据为200字节：（5 \* 10 \* 4）。</span><span class="sxs-lookup"><span data-stu-id="306d5-516">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="306d5-517">如果读入的变量是任何其他类型的变量（不是变长字符串或对象），`FileGet` 仅读取变量数据。</span><span class="sxs-lookup"><span data-stu-id="306d5-517">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="306d5-518">`FileOpen` 函数中由 `RecordLength` 子句指定的记录长度必须大于或等于正在读取的数据的长度。</span><span class="sxs-lookup"><span data-stu-id="306d5-518">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="306d5-519">`FileGet` 读取结构的元素，就好像每个元素都是单独读取的，只不过元素之间没有任何空白。</span><span class="sxs-lookup"><span data-stu-id="306d5-519">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="306d5-520">在磁盘上，用户定义类型中的动态数组（使用 `FilePut`编写的）以一个描述符为前缀，其长度等于2再加上维度数的8倍：（2 + 8 \* NumberOfDimensions）。</span><span class="sxs-lookup"><span data-stu-id="306d5-520">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="306d5-521">`FileOpen` 函数中由 `RecordLength` 子句指定的记录长度必须大于或等于读取单个元素所需的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="306d5-521">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="306d5-522">这包括任何数组及其说明符。</span><span class="sxs-lookup"><span data-stu-id="306d5-522">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="306d5-523">`VBFixedString` 特性可应用于结构中的字符串字段，以指示写入磁盘时字符串的大小。</span><span class="sxs-lookup"><span data-stu-id="306d5-523">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="306d5-524">二进制模式</span><span class="sxs-lookup"><span data-stu-id="306d5-524">Binary Mode</span></span>  
 <span data-ttu-id="306d5-525">对于在 `Binary` 模式下打开的文件，大多数 `Random` 模式规则都适用，但有一些例外情况。</span><span class="sxs-lookup"><span data-stu-id="306d5-525">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="306d5-526">`Binary` 模式下打开的文件的以下规则不同于 `Random` 模式的规则：</span><span class="sxs-lookup"><span data-stu-id="306d5-526">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="306d5-527">`FileOpen` 函数中的 `RecordLength` 子句不起作用。</span><span class="sxs-lookup"><span data-stu-id="306d5-527">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="306d5-528">`FileGet` 连续读取磁盘中的所有变量;也就是说，记录之间不进行填充。</span><span class="sxs-lookup"><span data-stu-id="306d5-528">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="306d5-529">对于结构中除数组以外的任何数组，`FileGet` 仅读取数据。</span><span class="sxs-lookup"><span data-stu-id="306d5-529">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="306d5-530">未读取任何说明符。</span><span class="sxs-lookup"><span data-stu-id="306d5-530">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="306d5-531">`FileGet` 读取不是结构的元素且不需要双字节长度说明符的可变长度字符串。</span><span class="sxs-lookup"><span data-stu-id="306d5-531">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="306d5-532">读取的字节数等于字符串中的字符数。</span><span class="sxs-lookup"><span data-stu-id="306d5-532">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="306d5-533">使用 `FileGet` 函数从文件读取需要从 <xref:System.Security.Permissions.FileIOPermissionAccess> 枚举进行 `Read` 访问。</span><span class="sxs-lookup"><span data-stu-id="306d5-533">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="306d5-534"><paramref name="RecordNumber" /> &lt; 1 且不等于 -1。</span><span class="sxs-lookup"><span data-stu-id="306d5-534"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="306d5-535">文件模式无效。</span><span class="sxs-lookup"><span data-stu-id="306d5-535">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files"><span data-ttu-id="306d5-536">从文件读取 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="306d5-536">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files"><span data-ttu-id="306d5-537">写入文件 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="306d5-537">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref decimal Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void FileGet(int32 FileNumber, valuetype System.Decimal&amp; Value, int64 RecordNumber) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Decimal@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Decimal, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int * decimal * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, valuetype System.Decimal&amp; Value, int64 RecordNumber) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Decimal" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="306d5-538">必需。</span><span class="sxs-lookup"><span data-stu-id="306d5-538">Required.</span></span> <span data-ttu-id="306d5-539">任何有效文件数。</span><span class="sxs-lookup"><span data-stu-id="306d5-539">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="306d5-540">必需。</span><span class="sxs-lookup"><span data-stu-id="306d5-540">Required.</span></span> <span data-ttu-id="306d5-541">数据读入到其中的有效变量名称。</span><span class="sxs-lookup"><span data-stu-id="306d5-541">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="306d5-542">可选。</span><span class="sxs-lookup"><span data-stu-id="306d5-542">Optional.</span></span> <span data-ttu-id="306d5-543">读取的开始位置处的记录号（<see langword="Random" /> 模式文件）或字节数（<see langword="Binary" /> 模式文件）。</span><span class="sxs-lookup"><span data-stu-id="306d5-543">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="306d5-544">将数据从打开的磁盘文件读入到一个变量中。</span><span class="sxs-lookup"><span data-stu-id="306d5-544">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="306d5-545">相比 <see langword="FileGet" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span><span class="sxs-lookup"><span data-stu-id="306d5-545">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="306d5-546">有关详细信息，请参阅 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="306d5-546">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="306d5-547">`FileGet` 仅在 `Random` 和 `Binary` 模式下有效。</span><span class="sxs-lookup"><span data-stu-id="306d5-547">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="306d5-548">使用 `FilePut``FileGet` 读取的数据通常写入到文件中。</span><span class="sxs-lookup"><span data-stu-id="306d5-548">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="306d5-549">文件中的第一个记录或字节位于位置1，第二个记录或字节在位置2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="306d5-549">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="306d5-550">如果省略 `RecordNumber`，则读取最后一个 `FileGet` 或 `FilePut` `Seek` 函数后的下一条记录或字节。</span><span class="sxs-lookup"><span data-stu-id="306d5-550">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="306d5-551">从文件中读取时，请不要根据文件扩展名来决定文件的内容。</span><span class="sxs-lookup"><span data-stu-id="306d5-551">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="306d5-552">例如，名为 "Form1" 的文件可能不是 Visual Basic 的源文件。</span><span class="sxs-lookup"><span data-stu-id="306d5-552">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="306d5-553">随机模式</span><span class="sxs-lookup"><span data-stu-id="306d5-553">Random Mode</span></span>  
 <span data-ttu-id="306d5-554">对于在 `Random` 模式下打开的文件，以下规则适用：</span><span class="sxs-lookup"><span data-stu-id="306d5-554">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="306d5-555">如果读取的数据的长度小于 `FileOpen` 函数的 `RecordLength` 子句中指定的长度，`FileGet` 将读取记录长度边界的后续记录。</span><span class="sxs-lookup"><span data-stu-id="306d5-555">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="306d5-556">一条记录的末尾和下一条记录的开头之间的空格将填充到文件缓冲区的现有内容中。</span><span class="sxs-lookup"><span data-stu-id="306d5-556">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="306d5-557">由于不能确定填充数据量，因此通常最好让记录长度与读取的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="306d5-557">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="306d5-558">默认情况下，如果要读入的变量是字符串，`FileGet` 会读取包含字符串长度的双字节说明符，然后读取进入该变量的数据。</span><span class="sxs-lookup"><span data-stu-id="306d5-558">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="306d5-559">因此，`FileOpen` 函数的 `RecordLength` 子句指定的记录长度必须大于字符串的实际长度的2个字节。</span><span class="sxs-lookup"><span data-stu-id="306d5-559">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="306d5-560">Visual Basic 6.0 及更早版本支持固定长度字符串;放到文件中时，不写入长度说明符。</span><span class="sxs-lookup"><span data-stu-id="306d5-560">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="306d5-561">如果要读取没有描述符的字符串，则应将 `True` 传递给 `StringIsFixedLength` 参数，并且读入的字符串应为正确的长度。</span><span class="sxs-lookup"><span data-stu-id="306d5-561">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="306d5-562">如果读入的变量是数组，则可以选择是否读取数组的大小和维度的说明符。</span><span class="sxs-lookup"><span data-stu-id="306d5-562">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="306d5-563">若要编写描述符，请将 `ArrayIsDynamic` 参数设置为 `True`。</span><span class="sxs-lookup"><span data-stu-id="306d5-563">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="306d5-564">读取数组时，必须匹配数组的写入方式。</span><span class="sxs-lookup"><span data-stu-id="306d5-564">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="306d5-565">如果使用描述符编写，则必须读取描述符。</span><span class="sxs-lookup"><span data-stu-id="306d5-565">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="306d5-566">如果未使用该说明符，则传递到 `FileGet` 的数组的大小和界限确定要读取的内容。</span><span class="sxs-lookup"><span data-stu-id="306d5-566">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="306d5-567">描述符指定数组的秩、大小和每个排名的下限。</span><span class="sxs-lookup"><span data-stu-id="306d5-567">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="306d5-568">其长度等于2再加上维度数的8倍：（2 + 8 \* NumberOfDimensions）。</span><span class="sxs-lookup"><span data-stu-id="306d5-568">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="306d5-569">`FileOpen` 函数中由 `RecordLength` 参数指定的记录长度必须大于或等于写入数组数据和数组描述符所需的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="306d5-569">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="306d5-570">例如，当数组写入磁盘时，以下数组声明需要218字节。</span><span class="sxs-lookup"><span data-stu-id="306d5-570">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="306d5-571">218字节分布如下：</span><span class="sxs-lookup"><span data-stu-id="306d5-571">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="306d5-572">描述符的18个字节：（2 + 8 \* 2）</span><span class="sxs-lookup"><span data-stu-id="306d5-572">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="306d5-573">数据为200字节：（5 \* 10 \* 4）。</span><span class="sxs-lookup"><span data-stu-id="306d5-573">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="306d5-574">如果读入的变量是任何其他类型的变量（不是变长字符串或对象），`FileGet` 仅读取变量数据。</span><span class="sxs-lookup"><span data-stu-id="306d5-574">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="306d5-575">`FileOpen` 函数中由 `RecordLength` 子句指定的记录长度必须大于或等于正在读取的数据的长度。</span><span class="sxs-lookup"><span data-stu-id="306d5-575">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="306d5-576">`FileGet` 读取结构的元素，就好像每个元素都是单独读取的，只不过元素之间没有任何空白。</span><span class="sxs-lookup"><span data-stu-id="306d5-576">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="306d5-577">在磁盘上，用户定义类型中的动态数组（使用 `FilePut`编写的）以一个描述符为前缀，其长度等于2再加上维度数的8倍：（2 + 8 \* NumberOfDimensions）。</span><span class="sxs-lookup"><span data-stu-id="306d5-577">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="306d5-578">`FileOpen` 函数中由 `RecordLength` 子句指定的记录长度必须大于或等于读取单个元素所需的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="306d5-578">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="306d5-579">这包括任何数组及其说明符。</span><span class="sxs-lookup"><span data-stu-id="306d5-579">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="306d5-580">`VBFixedString` 特性可应用于结构中的字符串字段，以指示写入磁盘时字符串的大小。</span><span class="sxs-lookup"><span data-stu-id="306d5-580">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="306d5-581">二进制模式</span><span class="sxs-lookup"><span data-stu-id="306d5-581">Binary Mode</span></span>  
 <span data-ttu-id="306d5-582">对于在 `Binary` 模式下打开的文件，大多数 `Random` 模式规则都适用，但有一些例外情况。</span><span class="sxs-lookup"><span data-stu-id="306d5-582">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="306d5-583">`Binary` 模式下打开的文件的以下规则不同于 `Random` 模式的规则：</span><span class="sxs-lookup"><span data-stu-id="306d5-583">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="306d5-584">`FileOpen` 函数中的 `RecordLength` 子句不起作用。</span><span class="sxs-lookup"><span data-stu-id="306d5-584">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="306d5-585">`FileGet` 连续读取磁盘中的所有变量;也就是说，记录之间不进行填充。</span><span class="sxs-lookup"><span data-stu-id="306d5-585">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="306d5-586">对于结构中除数组以外的任何数组，`FileGet` 仅读取数据。</span><span class="sxs-lookup"><span data-stu-id="306d5-586">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="306d5-587">未读取任何说明符。</span><span class="sxs-lookup"><span data-stu-id="306d5-587">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="306d5-588">`FileGet` 读取不是结构的元素且不需要双字节长度说明符的可变长度字符串。</span><span class="sxs-lookup"><span data-stu-id="306d5-588">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="306d5-589">读取的字节数等于字符串中的字符数。</span><span class="sxs-lookup"><span data-stu-id="306d5-589">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="306d5-590">使用 `FileGet` 函数从文件读取需要从 <xref:System.Security.Permissions.FileIOPermissionAccess> 枚举进行 `Read` 访问。</span><span class="sxs-lookup"><span data-stu-id="306d5-590">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="306d5-591"><paramref name="RecordNumber" /> &lt; 1 且不等于 -1。</span><span class="sxs-lookup"><span data-stu-id="306d5-591"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="306d5-592">文件模式无效。</span><span class="sxs-lookup"><span data-stu-id="306d5-592">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files"><span data-ttu-id="306d5-593">从文件读取 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="306d5-593">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files"><span data-ttu-id="306d5-594">写入文件 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="306d5-594">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref double Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void FileGet(int32 FileNumber, float64&amp; Value, int64 RecordNumber) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Double@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Double, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int * double * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, float64&amp; Value, int64 RecordNumber) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Double" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="306d5-595">必需。</span><span class="sxs-lookup"><span data-stu-id="306d5-595">Required.</span></span> <span data-ttu-id="306d5-596">任何有效文件数。</span><span class="sxs-lookup"><span data-stu-id="306d5-596">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="306d5-597">必需。</span><span class="sxs-lookup"><span data-stu-id="306d5-597">Required.</span></span> <span data-ttu-id="306d5-598">数据读入到其中的有效变量名称。</span><span class="sxs-lookup"><span data-stu-id="306d5-598">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="306d5-599">可选。</span><span class="sxs-lookup"><span data-stu-id="306d5-599">Optional.</span></span> <span data-ttu-id="306d5-600">读取的开始位置处的记录号（<see langword="Random" /> 模式文件）或字节数（<see langword="Binary" /> 模式文件）。</span><span class="sxs-lookup"><span data-stu-id="306d5-600">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="306d5-601">将数据从打开的磁盘文件读入到一个变量中。</span><span class="sxs-lookup"><span data-stu-id="306d5-601">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="306d5-602">相比 <see langword="FileGet" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span><span class="sxs-lookup"><span data-stu-id="306d5-602">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="306d5-603">有关详细信息，请参阅 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="306d5-603">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="306d5-604">`FileGet` 仅在 `Random` 和 `Binary` 模式下有效。</span><span class="sxs-lookup"><span data-stu-id="306d5-604">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="306d5-605">使用 `FilePut``FileGet` 读取的数据通常写入到文件中。</span><span class="sxs-lookup"><span data-stu-id="306d5-605">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="306d5-606">文件中的第一个记录或字节位于位置1，第二个记录或字节在位置2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="306d5-606">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="306d5-607">如果省略 `RecordNumber`，则读取最后一个 `FileGet` 或 `FilePut` `Seek` 函数后的下一条记录或字节。</span><span class="sxs-lookup"><span data-stu-id="306d5-607">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="306d5-608">从文件中读取时，请不要根据文件扩展名来决定文件的内容。</span><span class="sxs-lookup"><span data-stu-id="306d5-608">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="306d5-609">例如，名为 "Form1" 的文件可能不是 Visual Basic 的源文件。</span><span class="sxs-lookup"><span data-stu-id="306d5-609">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="306d5-610">随机模式</span><span class="sxs-lookup"><span data-stu-id="306d5-610">Random Mode</span></span>  
 <span data-ttu-id="306d5-611">对于在 `Random` 模式下打开的文件，以下规则适用：</span><span class="sxs-lookup"><span data-stu-id="306d5-611">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="306d5-612">如果读取的数据的长度小于 `FileOpen` 函数的 `RecordLength` 子句中指定的长度，`FileGet` 将读取记录长度边界的后续记录。</span><span class="sxs-lookup"><span data-stu-id="306d5-612">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="306d5-613">一条记录的末尾和下一条记录的开头之间的空格将填充到文件缓冲区的现有内容中。</span><span class="sxs-lookup"><span data-stu-id="306d5-613">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="306d5-614">由于不能确定填充数据量，因此通常最好让记录长度与读取的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="306d5-614">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="306d5-615">默认情况下，如果要读入的变量是字符串，`FileGet` 会读取包含字符串长度的双字节说明符，然后读取进入该变量的数据。</span><span class="sxs-lookup"><span data-stu-id="306d5-615">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="306d5-616">因此，`FileOpen` 函数的 `RecordLength` 子句指定的记录长度必须大于字符串的实际长度的2个字节。</span><span class="sxs-lookup"><span data-stu-id="306d5-616">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="306d5-617">Visual Basic 6.0 及更早版本支持固定长度字符串;放到文件中时，不写入长度说明符。</span><span class="sxs-lookup"><span data-stu-id="306d5-617">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="306d5-618">如果要读取没有描述符的字符串，则应将 `True` 传递给 `StringIsFixedLength` 参数，并且读入的字符串应为正确的长度。</span><span class="sxs-lookup"><span data-stu-id="306d5-618">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="306d5-619">如果读入的变量是数组，则可以选择是否读取数组的大小和维度的说明符。</span><span class="sxs-lookup"><span data-stu-id="306d5-619">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="306d5-620">若要编写描述符，请将 `ArrayIsDynamic` 参数设置为 `True`。</span><span class="sxs-lookup"><span data-stu-id="306d5-620">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="306d5-621">读取数组时，必须匹配数组的写入方式。</span><span class="sxs-lookup"><span data-stu-id="306d5-621">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="306d5-622">如果使用描述符编写，则必须读取描述符。</span><span class="sxs-lookup"><span data-stu-id="306d5-622">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="306d5-623">如果未使用该说明符，则传递到 `FileGet` 的数组的大小和界限确定要读取的内容。</span><span class="sxs-lookup"><span data-stu-id="306d5-623">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="306d5-624">描述符指定数组的秩、大小和每个排名的下限。</span><span class="sxs-lookup"><span data-stu-id="306d5-624">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="306d5-625">其长度等于2再加上维度数的8倍：（2 + 8 \* NumberOfDimensions）。</span><span class="sxs-lookup"><span data-stu-id="306d5-625">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="306d5-626">`FileOpen` 函数中由 `RecordLength` 参数指定的记录长度必须大于或等于写入数组数据和数组描述符所需的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="306d5-626">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="306d5-627">例如，当数组写入磁盘时，以下数组声明需要218字节。</span><span class="sxs-lookup"><span data-stu-id="306d5-627">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="306d5-628">218字节分布如下：</span><span class="sxs-lookup"><span data-stu-id="306d5-628">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="306d5-629">描述符的18个字节：（2 + 8 \* 2）</span><span class="sxs-lookup"><span data-stu-id="306d5-629">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="306d5-630">数据为200字节：（5 \* 10 \* 4）。</span><span class="sxs-lookup"><span data-stu-id="306d5-630">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="306d5-631">如果读入的变量是任何其他类型的变量（不是变长字符串或对象），`FileGet` 仅读取变量数据。</span><span class="sxs-lookup"><span data-stu-id="306d5-631">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="306d5-632">`FileOpen` 函数中由 `RecordLength` 子句指定的记录长度必须大于或等于正在读取的数据的长度。</span><span class="sxs-lookup"><span data-stu-id="306d5-632">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="306d5-633">`FileGet` 读取结构的元素，就好像每个元素都是单独读取的，只不过元素之间没有任何空白。</span><span class="sxs-lookup"><span data-stu-id="306d5-633">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="306d5-634">在磁盘上，用户定义类型中的动态数组（使用 `FilePut`编写的）以一个描述符为前缀，其长度等于2再加上维度数的8倍：（2 + 8 \* NumberOfDimensions）。</span><span class="sxs-lookup"><span data-stu-id="306d5-634">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="306d5-635">`FileOpen` 函数中由 `RecordLength` 子句指定的记录长度必须大于或等于读取单个元素所需的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="306d5-635">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="306d5-636">这包括任何数组及其说明符。</span><span class="sxs-lookup"><span data-stu-id="306d5-636">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="306d5-637">`VBFixedString` 特性可应用于结构中的字符串字段，以指示写入磁盘时字符串的大小。</span><span class="sxs-lookup"><span data-stu-id="306d5-637">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="306d5-638">二进制模式</span><span class="sxs-lookup"><span data-stu-id="306d5-638">Binary Mode</span></span>  
 <span data-ttu-id="306d5-639">对于在 `Binary` 模式下打开的文件，大多数 `Random` 模式规则都适用，但有一些例外情况。</span><span class="sxs-lookup"><span data-stu-id="306d5-639">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="306d5-640">`Binary` 模式下打开的文件的以下规则不同于 `Random` 模式的规则：</span><span class="sxs-lookup"><span data-stu-id="306d5-640">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="306d5-641">`FileOpen` 函数中的 `RecordLength` 子句不起作用。</span><span class="sxs-lookup"><span data-stu-id="306d5-641">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="306d5-642">`FileGet` 连续读取磁盘中的所有变量;也就是说，记录之间不进行填充。</span><span class="sxs-lookup"><span data-stu-id="306d5-642">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="306d5-643">对于结构中除数组以外的任何数组，`FileGet` 仅读取数据。</span><span class="sxs-lookup"><span data-stu-id="306d5-643">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="306d5-644">未读取任何说明符。</span><span class="sxs-lookup"><span data-stu-id="306d5-644">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="306d5-645">`FileGet` 读取不是结构的元素且不需要双字节长度说明符的可变长度字符串。</span><span class="sxs-lookup"><span data-stu-id="306d5-645">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="306d5-646">读取的字节数等于字符串中的字符数。</span><span class="sxs-lookup"><span data-stu-id="306d5-646">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="306d5-647">使用`FileGet` 函数从文件读取需要从 <xref:System.Security.Permissions.FileIOPermissionAccess> 枚举进行 `Read` 访问。</span><span class="sxs-lookup"><span data-stu-id="306d5-647">Reading from a file by using the`FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="306d5-648"><paramref name="RecordNumber" /> &lt; 1 且不等于 -1。</span><span class="sxs-lookup"><span data-stu-id="306d5-648"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="306d5-649">文件模式无效。</span><span class="sxs-lookup"><span data-stu-id="306d5-649">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files"><span data-ttu-id="306d5-650">从文件读取 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="306d5-650">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files"><span data-ttu-id="306d5-651">写入文件 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="306d5-651">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref short Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void FileGet(int32 FileNumber, int16&amp; Value, int64 RecordNumber) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Int16@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Short, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int * int16 * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, int16&amp; Value, int64 RecordNumber) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int16" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="306d5-652">必需。</span><span class="sxs-lookup"><span data-stu-id="306d5-652">Required.</span></span> <span data-ttu-id="306d5-653">任何有效文件数。</span><span class="sxs-lookup"><span data-stu-id="306d5-653">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="306d5-654">必需。</span><span class="sxs-lookup"><span data-stu-id="306d5-654">Required.</span></span> <span data-ttu-id="306d5-655">数据读入到其中的有效变量名称。</span><span class="sxs-lookup"><span data-stu-id="306d5-655">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="306d5-656">可选。</span><span class="sxs-lookup"><span data-stu-id="306d5-656">Optional.</span></span> <span data-ttu-id="306d5-657">读取的开始位置处的记录号（<see langword="Random" /> 模式文件）或字节数（<see langword="Binary" /> 模式文件）。</span><span class="sxs-lookup"><span data-stu-id="306d5-657">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="306d5-658">将数据从打开的磁盘文件读入到一个变量中。</span><span class="sxs-lookup"><span data-stu-id="306d5-658">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="306d5-659">相比 <see langword="FileGet" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span><span class="sxs-lookup"><span data-stu-id="306d5-659">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="306d5-660">有关详细信息，请参阅 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="306d5-660">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="306d5-661">`FileGet` 仅在 `Random` 和 `Binary` 模式下有效。</span><span class="sxs-lookup"><span data-stu-id="306d5-661">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="306d5-662">使用 `FilePut``FileGet` 读取的数据通常写入到文件中。</span><span class="sxs-lookup"><span data-stu-id="306d5-662">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="306d5-663">文件中的第一个记录或字节位于位置1，第二个记录或字节在位置2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="306d5-663">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="306d5-664">如果省略 `RecordNumber`，则读取最后一个 `FileGet` 或 `FilePut` `Seek` 函数后的下一条记录或字节。</span><span class="sxs-lookup"><span data-stu-id="306d5-664">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="306d5-665">从文件中读取时，请不要根据文件扩展名来决定文件的内容。</span><span class="sxs-lookup"><span data-stu-id="306d5-665">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="306d5-666">例如，名为 "Form1" 的文件可能不是 Visual Basic 的源文件。</span><span class="sxs-lookup"><span data-stu-id="306d5-666">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="306d5-667">随机模式</span><span class="sxs-lookup"><span data-stu-id="306d5-667">Random Mode</span></span>  
 <span data-ttu-id="306d5-668">对于在 `Random` 模式下打开的文件，以下规则适用：</span><span class="sxs-lookup"><span data-stu-id="306d5-668">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="306d5-669">如果读取的数据的长度小于 `FileOpen` 函数的 `RecordLength` 子句中指定的长度，`FileGet` 将读取记录长度边界的后续记录。</span><span class="sxs-lookup"><span data-stu-id="306d5-669">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="306d5-670">一条记录的末尾和下一条记录的开头之间的空格将填充到文件缓冲区的现有内容中。</span><span class="sxs-lookup"><span data-stu-id="306d5-670">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="306d5-671">由于不能确定填充数据量，因此通常最好让记录长度与读取的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="306d5-671">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="306d5-672">默认情况下，如果要读入的变量是字符串，`FileGet` 会读取包含字符串长度的双字节说明符，然后读取进入该变量的数据。</span><span class="sxs-lookup"><span data-stu-id="306d5-672">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="306d5-673">因此，`FileOpen` 函数的 `RecordLength` 子句指定的记录长度必须大于字符串的实际长度的2个字节。</span><span class="sxs-lookup"><span data-stu-id="306d5-673">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="306d5-674">Visual Basic 6.0 及更早版本支持固定长度字符串;放到文件中时，不写入长度说明符。</span><span class="sxs-lookup"><span data-stu-id="306d5-674">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="306d5-675">如果要读取没有描述符的字符串，则应将 `True` 传递给 `StringIsFixedLength` 参数，并且读入的字符串应为正确的长度。</span><span class="sxs-lookup"><span data-stu-id="306d5-675">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="306d5-676">如果读入的变量是数组，则可以选择是否读取数组的大小和维度的说明符。</span><span class="sxs-lookup"><span data-stu-id="306d5-676">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="306d5-677">若要编写描述符，请将 `ArrayIsDynamic` 参数设置为 `True`。</span><span class="sxs-lookup"><span data-stu-id="306d5-677">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="306d5-678">读取数组时，必须匹配数组的写入方式。</span><span class="sxs-lookup"><span data-stu-id="306d5-678">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="306d5-679">如果使用描述符编写，则必须读取描述符。</span><span class="sxs-lookup"><span data-stu-id="306d5-679">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="306d5-680">如果未使用该说明符，则传递到 `FileGet` 的数组的大小和界限确定要读取的内容。</span><span class="sxs-lookup"><span data-stu-id="306d5-680">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="306d5-681">描述符指定数组的秩、大小和每个排名的下限。</span><span class="sxs-lookup"><span data-stu-id="306d5-681">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="306d5-682">其长度等于2再加上维度数的8倍：（2 + 8 \* NumberOfDimensions）。</span><span class="sxs-lookup"><span data-stu-id="306d5-682">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="306d5-683">`FileOpen` 函数中由 `RecordLength` 参数指定的记录长度必须大于或等于写入数组数据和数组描述符所需的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="306d5-683">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="306d5-684">例如，当数组写入磁盘时，以下数组声明需要218字节。</span><span class="sxs-lookup"><span data-stu-id="306d5-684">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="306d5-685">218字节分布如下：</span><span class="sxs-lookup"><span data-stu-id="306d5-685">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="306d5-686">描述符的18个字节：（2 + 8 \* 2）</span><span class="sxs-lookup"><span data-stu-id="306d5-686">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="306d5-687">数据为200字节：（5 \* 10 \* 4）。</span><span class="sxs-lookup"><span data-stu-id="306d5-687">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="306d5-688">如果读入的变量是任何其他类型的变量（不是变长字符串或对象），`FileGet` 仅读取变量数据。</span><span class="sxs-lookup"><span data-stu-id="306d5-688">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="306d5-689">`FileOpen` 函数中由 `RecordLength` 子句指定的记录长度必须大于或等于正在读取的数据的长度。</span><span class="sxs-lookup"><span data-stu-id="306d5-689">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="306d5-690">`FileGet` 读取结构的元素，就好像每个元素都是单独读取的，只不过元素之间没有任何空白。</span><span class="sxs-lookup"><span data-stu-id="306d5-690">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="306d5-691">在磁盘上，用户定义类型中的动态数组（使用 `FilePut`编写的）以一个描述符为前缀，其长度等于2再加上维度数的8倍：（2 + 8 \* NumberOfDimensions）。</span><span class="sxs-lookup"><span data-stu-id="306d5-691">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="306d5-692">`FileOpen` 函数中由 `RecordLength` 子句指定的记录长度必须大于或等于读取单个元素所需的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="306d5-692">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="306d5-693">这包括任何数组及其说明符。</span><span class="sxs-lookup"><span data-stu-id="306d5-693">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="306d5-694">`VBFixedString` 特性可应用于结构中的字符串字段，以指示写入磁盘时字符串的大小。</span><span class="sxs-lookup"><span data-stu-id="306d5-694">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="306d5-695">二进制模式</span><span class="sxs-lookup"><span data-stu-id="306d5-695">Binary Mode</span></span>  
 <span data-ttu-id="306d5-696">对于在 `Binary` 模式下打开的文件，大多数 `Random` 模式规则都适用，但有一些例外情况。</span><span class="sxs-lookup"><span data-stu-id="306d5-696">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="306d5-697">`Binary` 模式下打开的文件的以下规则不同于 `Random` 模式的规则：</span><span class="sxs-lookup"><span data-stu-id="306d5-697">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="306d5-698">`FileOpen` 函数中的 `RecordLength` 子句不起作用。</span><span class="sxs-lookup"><span data-stu-id="306d5-698">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="306d5-699">`FileGet` 连续读取磁盘中的所有变量;也就是说，记录之间不进行填充。</span><span class="sxs-lookup"><span data-stu-id="306d5-699">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="306d5-700">对于结构中除数组以外的任何数组，`FileGet` 仅读取数据。</span><span class="sxs-lookup"><span data-stu-id="306d5-700">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="306d5-701">未读取任何说明符。</span><span class="sxs-lookup"><span data-stu-id="306d5-701">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="306d5-702">`FileGet` 读取不是结构的元素且不需要双字节长度说明符的可变长度字符串。</span><span class="sxs-lookup"><span data-stu-id="306d5-702">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="306d5-703">读取的字节数等于字符串中的字符数。</span><span class="sxs-lookup"><span data-stu-id="306d5-703">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="306d5-704">使用 `FileGet` 函数从文件读取需要从 <xref:System.Security.Permissions.FileIOPermissionAccess> 枚举进行 `Read` 访问。</span><span class="sxs-lookup"><span data-stu-id="306d5-704">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="306d5-705"><paramref name="RecordNumber" /> &lt; 1 且不等于 -1。</span><span class="sxs-lookup"><span data-stu-id="306d5-705"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="306d5-706">文件模式无效。</span><span class="sxs-lookup"><span data-stu-id="306d5-706">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files"><span data-ttu-id="306d5-707">从文件读取 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="306d5-707">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files"><span data-ttu-id="306d5-708">写入文件 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="306d5-708">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref int Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void FileGet(int32 FileNumber, int32&amp; Value, int64 RecordNumber) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Int32@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Integer, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int * int * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, int32&amp; Value, int64 RecordNumber) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int32" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="306d5-709">必需。</span><span class="sxs-lookup"><span data-stu-id="306d5-709">Required.</span></span> <span data-ttu-id="306d5-710">任何有效文件数。</span><span class="sxs-lookup"><span data-stu-id="306d5-710">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="306d5-711">必需。</span><span class="sxs-lookup"><span data-stu-id="306d5-711">Required.</span></span> <span data-ttu-id="306d5-712">数据读入到其中的有效变量名称。</span><span class="sxs-lookup"><span data-stu-id="306d5-712">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="306d5-713">可选。</span><span class="sxs-lookup"><span data-stu-id="306d5-713">Optional.</span></span> <span data-ttu-id="306d5-714">读取的开始位置处的记录号（<see langword="Random" /> 模式文件）或字节数（<see langword="Binary" /> 模式文件）。</span><span class="sxs-lookup"><span data-stu-id="306d5-714">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="306d5-715">将数据从打开的磁盘文件读入到一个变量中。</span><span class="sxs-lookup"><span data-stu-id="306d5-715">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="306d5-716">相比 <see langword="FileGet" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span><span class="sxs-lookup"><span data-stu-id="306d5-716">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="306d5-717">有关详细信息，请参阅 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="306d5-717">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="306d5-718">`FileGet` 仅在 `Random` 和 `Binary` 模式下有效。</span><span class="sxs-lookup"><span data-stu-id="306d5-718">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="306d5-719">使用 `FilePut``FileGet` 读取的数据通常写入到文件中。</span><span class="sxs-lookup"><span data-stu-id="306d5-719">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="306d5-720">文件中的第一个记录或字节位于位置1，第二个记录或字节在位置2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="306d5-720">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="306d5-721">如果省略 `RecordNumber`，则读取最后一个 `FileGet` 或 `FilePut` `Seek` 函数后的下一条记录或字节。</span><span class="sxs-lookup"><span data-stu-id="306d5-721">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="306d5-722">从文件中读取时，请不要根据文件扩展名来决定文件的内容。</span><span class="sxs-lookup"><span data-stu-id="306d5-722">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="306d5-723">例如，名为 "Form1" 的文件可能不是 Visual Basic 的源文件。</span><span class="sxs-lookup"><span data-stu-id="306d5-723">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="306d5-724">随机模式</span><span class="sxs-lookup"><span data-stu-id="306d5-724">Random Mode</span></span>  
 <span data-ttu-id="306d5-725">对于在 `Random` 模式下打开的文件，以下规则适用：</span><span class="sxs-lookup"><span data-stu-id="306d5-725">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="306d5-726">如果读取的数据的长度小于 `FileOpen` 函数的 `RecordLength` 子句中指定的长度，`FileGet` 将读取记录长度边界的后续记录。</span><span class="sxs-lookup"><span data-stu-id="306d5-726">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="306d5-727">一条记录的末尾和下一条记录的开头之间的空格将填充到文件缓冲区的现有内容中。</span><span class="sxs-lookup"><span data-stu-id="306d5-727">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="306d5-728">由于不能确定填充数据量，因此通常最好让记录长度与读取的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="306d5-728">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="306d5-729">默认情况下，如果要读入的变量是字符串，`FileGet` 会读取包含字符串长度的双字节说明符，然后读取进入该变量的数据。</span><span class="sxs-lookup"><span data-stu-id="306d5-729">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="306d5-730">因此，`FileOpen` 函数的 `RecordLength` 子句指定的记录长度必须大于字符串的实际长度的2个字节。</span><span class="sxs-lookup"><span data-stu-id="306d5-730">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="306d5-731">Visual Basic 6.0 及更早版本支持固定长度字符串;放到文件中时，不写入长度说明符。</span><span class="sxs-lookup"><span data-stu-id="306d5-731">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="306d5-732">如果要读取没有描述符的字符串，则应将 `True` 传递给 `StringIsFixedLength` 参数，并且读入的字符串应为正确的长度。</span><span class="sxs-lookup"><span data-stu-id="306d5-732">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="306d5-733">如果读入的变量是数组，则可以选择是否读取数组的大小和维度的说明符。</span><span class="sxs-lookup"><span data-stu-id="306d5-733">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="306d5-734">若要编写描述符，请将 `ArrayIsDynamic` 参数设置为 `True`。</span><span class="sxs-lookup"><span data-stu-id="306d5-734">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="306d5-735">读取数组时，必须匹配数组的写入方式。</span><span class="sxs-lookup"><span data-stu-id="306d5-735">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="306d5-736">如果使用描述符编写，则必须读取描述符。</span><span class="sxs-lookup"><span data-stu-id="306d5-736">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="306d5-737">如果未使用该说明符，则传递到 `FileGet` 的数组的大小和界限确定要读取的内容。</span><span class="sxs-lookup"><span data-stu-id="306d5-737">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="306d5-738">描述符指定数组的秩、大小和每个排名的下限。</span><span class="sxs-lookup"><span data-stu-id="306d5-738">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="306d5-739">其长度等于2再加上维度数的8倍：（2 + 8 \* NumberOfDimensions）。</span><span class="sxs-lookup"><span data-stu-id="306d5-739">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="306d5-740">`FileOpen` 函数中由 `RecordLength` 参数指定的记录长度必须大于或等于写入数组数据和数组描述符所需的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="306d5-740">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="306d5-741">例如，当数组写入磁盘时，以下数组声明需要218字节。</span><span class="sxs-lookup"><span data-stu-id="306d5-741">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="306d5-742">218字节分布如下：</span><span class="sxs-lookup"><span data-stu-id="306d5-742">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="306d5-743">描述符的18个字节：（2 + 8 \* 2）</span><span class="sxs-lookup"><span data-stu-id="306d5-743">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="306d5-744">数据为200字节：（5 \* 10 \* 4）。</span><span class="sxs-lookup"><span data-stu-id="306d5-744">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="306d5-745">如果读入的变量是任何其他类型的变量（不是变长字符串或对象），`FileGet` 仅读取变量数据。</span><span class="sxs-lookup"><span data-stu-id="306d5-745">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="306d5-746">`FileOpen` 函数中由 `RecordLength` 子句指定的记录长度必须大于或等于正在读取的数据的长度。</span><span class="sxs-lookup"><span data-stu-id="306d5-746">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="306d5-747">`FileGet` 读取结构的元素，就好像每个元素都是单独读取的，只不过元素之间没有任何空白。</span><span class="sxs-lookup"><span data-stu-id="306d5-747">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="306d5-748">在磁盘上，用户定义类型中的动态数组（使用 `FilePut`编写的）以一个描述符为前缀，其长度等于2再加上维度数的8倍：（2 + 8 \* NumberOfDimensions）。</span><span class="sxs-lookup"><span data-stu-id="306d5-748">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="306d5-749">`FileOpen` 函数中由 `RecordLength` 子句指定的记录长度必须大于或等于读取单个元素所需的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="306d5-749">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="306d5-750">这包括任何数组及其说明符。</span><span class="sxs-lookup"><span data-stu-id="306d5-750">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="306d5-751">`VBFixedString` 特性可应用于结构中的字符串字段，以指示写入磁盘时字符串的大小。</span><span class="sxs-lookup"><span data-stu-id="306d5-751">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="306d5-752">二进制模式</span><span class="sxs-lookup"><span data-stu-id="306d5-752">Binary Mode</span></span>  
 <span data-ttu-id="306d5-753">对于在 `Binary` 模式下打开的文件，大多数 `Random` 模式规则都适用，但有一些例外情况。</span><span class="sxs-lookup"><span data-stu-id="306d5-753">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="306d5-754">`Binary` 模式下打开的文件的以下规则不同于 `Random` 模式的规则：</span><span class="sxs-lookup"><span data-stu-id="306d5-754">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="306d5-755">`FileOpen` 函数中的 `RecordLength` 子句不起作用。</span><span class="sxs-lookup"><span data-stu-id="306d5-755">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="306d5-756">`FileGet` 连续读取磁盘中的所有变量;也就是说，记录之间不进行填充。</span><span class="sxs-lookup"><span data-stu-id="306d5-756">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="306d5-757">对于结构中除数组以外的任何数组，`FileGet` 仅读取数据。</span><span class="sxs-lookup"><span data-stu-id="306d5-757">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="306d5-758">未读取任何说明符。</span><span class="sxs-lookup"><span data-stu-id="306d5-758">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="306d5-759">`FileGet` 读取不是结构的元素且不需要双字节长度说明符的可变长度字符串。</span><span class="sxs-lookup"><span data-stu-id="306d5-759">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="306d5-760">读取的字节数等于字符串中的字符数。</span><span class="sxs-lookup"><span data-stu-id="306d5-760">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="306d5-761">使用 `FileGet` 函数从文件读取需要从 <xref:System.Security.Permissions.FileIOPermissionAccess> 枚举进行 `Read` 访问。</span><span class="sxs-lookup"><span data-stu-id="306d5-761">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="306d5-762"><paramref name="RecordNumber" /> &lt; 1 且不等于 -1。</span><span class="sxs-lookup"><span data-stu-id="306d5-762"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="306d5-763">文件模式无效。</span><span class="sxs-lookup"><span data-stu-id="306d5-763">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files"><span data-ttu-id="306d5-764">从文件读取 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="306d5-764">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files"><span data-ttu-id="306d5-765">写入文件 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="306d5-765">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref long Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void FileGet(int32 FileNumber, int64&amp; Value, int64 RecordNumber) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Int64@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Long, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int * int64 * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, int64&amp; Value, int64 RecordNumber) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int64" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="306d5-766">必需。</span><span class="sxs-lookup"><span data-stu-id="306d5-766">Required.</span></span> <span data-ttu-id="306d5-767">任何有效文件数。</span><span class="sxs-lookup"><span data-stu-id="306d5-767">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="306d5-768">必需。</span><span class="sxs-lookup"><span data-stu-id="306d5-768">Required.</span></span> <span data-ttu-id="306d5-769">数据读入到其中的有效变量名称。</span><span class="sxs-lookup"><span data-stu-id="306d5-769">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="306d5-770">可选。</span><span class="sxs-lookup"><span data-stu-id="306d5-770">Optional.</span></span> <span data-ttu-id="306d5-771">读取的开始位置处的记录号（<see langword="Random" /> 模式文件）或字节数（<see langword="Binary" /> 模式文件）。</span><span class="sxs-lookup"><span data-stu-id="306d5-771">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="306d5-772">将数据从打开的磁盘文件读入到一个变量中。</span><span class="sxs-lookup"><span data-stu-id="306d5-772">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="306d5-773">相比 <see langword="FileGet" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span><span class="sxs-lookup"><span data-stu-id="306d5-773">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="306d5-774">有关详细信息，请参阅 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="306d5-774">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="306d5-775">`FileGet` 仅在 `Random` 和 `Binary` 模式下有效。</span><span class="sxs-lookup"><span data-stu-id="306d5-775">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="306d5-776">使用 `FilePut``FileGet` 读取的数据通常写入到文件中。</span><span class="sxs-lookup"><span data-stu-id="306d5-776">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="306d5-777">文件中的第一个记录或字节位于位置1，第二个记录或字节在位置2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="306d5-777">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="306d5-778">如果省略 `RecordNumber`，则读取最后一个 `FileGet` 或 `FilePut` `Seek` 函数后的下一条记录或字节。</span><span class="sxs-lookup"><span data-stu-id="306d5-778">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="306d5-779">从文件中读取时，请不要根据文件扩展名来决定文件的内容。</span><span class="sxs-lookup"><span data-stu-id="306d5-779">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="306d5-780">例如，名为 "Form1" 的文件可能不是 Visual Basic 的源文件。</span><span class="sxs-lookup"><span data-stu-id="306d5-780">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="306d5-781">随机模式</span><span class="sxs-lookup"><span data-stu-id="306d5-781">Random Mode</span></span>  
 <span data-ttu-id="306d5-782">对于在 `Random` 模式下打开的文件，以下规则适用：</span><span class="sxs-lookup"><span data-stu-id="306d5-782">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="306d5-783">如果读取的数据的长度小于 `FileOpen` 函数的 `RecordLength` 子句中指定的长度，`FileGet` 将读取记录长度边界的后续记录。</span><span class="sxs-lookup"><span data-stu-id="306d5-783">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="306d5-784">一条记录的末尾和下一条记录的开头之间的空格将填充到文件缓冲区的现有内容中。</span><span class="sxs-lookup"><span data-stu-id="306d5-784">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="306d5-785">由于不能确定填充数据量，因此通常最好让记录长度与读取的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="306d5-785">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="306d5-786">默认情况下，如果要读入的变量是字符串，`FileGet` 会读取包含字符串长度的双字节说明符，然后读取进入该变量的数据。</span><span class="sxs-lookup"><span data-stu-id="306d5-786">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="306d5-787">因此，`FileOpen` 函数的 `RecordLength` 子句指定的记录长度必须大于字符串的实际长度的2个字节。</span><span class="sxs-lookup"><span data-stu-id="306d5-787">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="306d5-788">Visual Basic 6.0 及更早版本支持固定长度字符串;放到文件中时，不写入长度说明符。</span><span class="sxs-lookup"><span data-stu-id="306d5-788">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="306d5-789">如果要读取没有描述符的字符串，则应将 `True` 传递给 `StringIsFixedLength` 参数，并且读入的字符串应为正确的长度。</span><span class="sxs-lookup"><span data-stu-id="306d5-789">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="306d5-790">如果读入的变量是数组，则可以选择是否读取数组的大小和维度的说明符。</span><span class="sxs-lookup"><span data-stu-id="306d5-790">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="306d5-791">若要编写描述符，请将 `ArrayIsDynamic` 参数设置为 `True`。</span><span class="sxs-lookup"><span data-stu-id="306d5-791">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="306d5-792">读取数组时，必须匹配数组的写入方式。</span><span class="sxs-lookup"><span data-stu-id="306d5-792">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="306d5-793">如果使用描述符编写，则必须读取描述符。</span><span class="sxs-lookup"><span data-stu-id="306d5-793">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="306d5-794">如果未使用该说明符，则传递到 `FileGet` 的数组的大小和界限确定要读取的内容。</span><span class="sxs-lookup"><span data-stu-id="306d5-794">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="306d5-795">描述符指定数组的秩、大小和每个排名的下限。</span><span class="sxs-lookup"><span data-stu-id="306d5-795">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="306d5-796">其长度等于2再加上维度数的8倍：（2 + 8 \* NumberOfDimensions）。</span><span class="sxs-lookup"><span data-stu-id="306d5-796">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="306d5-797">`FileOpen` 函数中由 `RecordLength` 参数指定的记录长度必须大于或等于写入数组数据和数组描述符所需的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="306d5-797">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="306d5-798">例如，当数组写入磁盘时，以下数组声明需要218字节。</span><span class="sxs-lookup"><span data-stu-id="306d5-798">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="306d5-799">218字节分布如下：</span><span class="sxs-lookup"><span data-stu-id="306d5-799">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="306d5-800">描述符的18个字节：（2 + 8 \* 2）</span><span class="sxs-lookup"><span data-stu-id="306d5-800">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="306d5-801">数据为200字节：（5 \* 10 \* 4）。</span><span class="sxs-lookup"><span data-stu-id="306d5-801">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="306d5-802">如果读入的变量是任何其他类型的变量（不是变长字符串或对象），`FileGet` 仅读取变量数据。</span><span class="sxs-lookup"><span data-stu-id="306d5-802">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="306d5-803">`FileOpen` 函数中由 `RecordLength` 子句指定的记录长度必须大于或等于正在读取的数据的长度。</span><span class="sxs-lookup"><span data-stu-id="306d5-803">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="306d5-804">`FileGet` 读取结构的元素，就好像每个元素都是单独读取的，只不过元素之间没有任何空白。</span><span class="sxs-lookup"><span data-stu-id="306d5-804">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="306d5-805">在磁盘上，用户定义类型中的动态数组（使用 `FilePut`编写的）以一个描述符为前缀，其长度等于2再加上维度数的8倍：（2 + 8 \* NumberOfDimensions）。</span><span class="sxs-lookup"><span data-stu-id="306d5-805">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="306d5-806">`FileOpen` 函数中由 `RecordLength` 子句指定的记录长度必须大于或等于读取单个元素所需的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="306d5-806">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="306d5-807">这包括任何数组及其说明符。</span><span class="sxs-lookup"><span data-stu-id="306d5-807">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="306d5-808">`VBFixedString` 特性可应用于结构中的字符串字段，以指示写入磁盘时字符串的大小。</span><span class="sxs-lookup"><span data-stu-id="306d5-808">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="306d5-809">二进制模式</span><span class="sxs-lookup"><span data-stu-id="306d5-809">Binary Mode</span></span>  
 <span data-ttu-id="306d5-810">对于在 `Binary` 模式下打开的文件，大多数 `Random` 模式规则都适用，但有一些例外情况。</span><span class="sxs-lookup"><span data-stu-id="306d5-810">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="306d5-811">`Binary` 模式下打开的文件的以下规则不同于 `Random` 模式的规则：</span><span class="sxs-lookup"><span data-stu-id="306d5-811">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="306d5-812">`FileOpen` 函数中的 `RecordLength` 子句不起作用。</span><span class="sxs-lookup"><span data-stu-id="306d5-812">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="306d5-813">`FileGet` 连续读取磁盘中的所有变量;也就是说，记录之间不进行填充。</span><span class="sxs-lookup"><span data-stu-id="306d5-813">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="306d5-814">对于结构中除数组以外的任何数组，`FileGet` 仅读取数据。</span><span class="sxs-lookup"><span data-stu-id="306d5-814">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="306d5-815">未读取任何说明符。</span><span class="sxs-lookup"><span data-stu-id="306d5-815">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="306d5-816">`FileGet` 读取不是结构的元素且不需要双字节长度说明符的可变长度字符串。</span><span class="sxs-lookup"><span data-stu-id="306d5-816">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="306d5-817">读取的字节数等于字符串中的字符数。</span><span class="sxs-lookup"><span data-stu-id="306d5-817">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="306d5-818">使用 `FileGet` 函数从文件读取需要从 <xref:System.Security.Permissions.FileIOPermissionAccess> 枚举进行 `Read` 访问。</span><span class="sxs-lookup"><span data-stu-id="306d5-818">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="306d5-819"><paramref name="RecordNumber" /> &lt; 1 且不等于 -1。</span><span class="sxs-lookup"><span data-stu-id="306d5-819"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="306d5-820">文件模式无效。</span><span class="sxs-lookup"><span data-stu-id="306d5-820">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files"><span data-ttu-id="306d5-821">从文件读取 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="306d5-821">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files"><span data-ttu-id="306d5-822">写入文件 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="306d5-822">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref float Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void FileGet(int32 FileNumber, float32&amp; Value, int64 RecordNumber) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Single@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Single, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int * single * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, float32&amp; Value, int64 RecordNumber) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Single" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="306d5-823">必需。</span><span class="sxs-lookup"><span data-stu-id="306d5-823">Required.</span></span> <span data-ttu-id="306d5-824">任何有效文件数。</span><span class="sxs-lookup"><span data-stu-id="306d5-824">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="306d5-825">必需。</span><span class="sxs-lookup"><span data-stu-id="306d5-825">Required.</span></span> <span data-ttu-id="306d5-826">数据读入到其中的有效变量名称。</span><span class="sxs-lookup"><span data-stu-id="306d5-826">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="306d5-827">可选。</span><span class="sxs-lookup"><span data-stu-id="306d5-827">Optional.</span></span> <span data-ttu-id="306d5-828">读取的开始位置处的记录号（<see langword="Random" /> 模式文件）或字节数（<see langword="Binary" /> 模式文件）。</span><span class="sxs-lookup"><span data-stu-id="306d5-828">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="306d5-829">将数据从打开的磁盘文件读入到一个变量中。</span><span class="sxs-lookup"><span data-stu-id="306d5-829">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="306d5-830">相比 <see langword="FileGet" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span><span class="sxs-lookup"><span data-stu-id="306d5-830">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="306d5-831">有关详细信息，请参阅 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="306d5-831">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="306d5-832">`FileGet` 仅在 `Random` 和 `Binary` 模式下有效。</span><span class="sxs-lookup"><span data-stu-id="306d5-832">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="306d5-833">使用 `FilePut``FileGet` 读取的数据通常写入到文件中。</span><span class="sxs-lookup"><span data-stu-id="306d5-833">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="306d5-834">文件中的第一个记录或字节位于位置1，第二个记录或字节在位置2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="306d5-834">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="306d5-835">如果省略 `RecordNumber`，则读取最后一个 `FileGet` 或 `FilePut` `Seek` 函数后的下一条记录或字节。</span><span class="sxs-lookup"><span data-stu-id="306d5-835">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="306d5-836">从文件中读取时，请不要根据文件扩展名来决定文件的内容。</span><span class="sxs-lookup"><span data-stu-id="306d5-836">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="306d5-837">例如，名为 "Form1" 的文件可能不是 Visual Basic 的源文件。</span><span class="sxs-lookup"><span data-stu-id="306d5-837">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="306d5-838">随机模式</span><span class="sxs-lookup"><span data-stu-id="306d5-838">Random Mode</span></span>  
 <span data-ttu-id="306d5-839">对于在 `Random` 模式下打开的文件，以下规则适用：</span><span class="sxs-lookup"><span data-stu-id="306d5-839">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="306d5-840">如果读取的数据的长度小于 `FileOpen` 函数的 `RecordLength` 子句中指定的长度，`FileGet` 将读取记录长度边界的后续记录。</span><span class="sxs-lookup"><span data-stu-id="306d5-840">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="306d5-841">一条记录的末尾和下一条记录的开头之间的空格将填充到文件缓冲区的现有内容中。</span><span class="sxs-lookup"><span data-stu-id="306d5-841">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="306d5-842">由于不能确定填充数据量，因此通常最好让记录长度与读取的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="306d5-842">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="306d5-843">默认情况下，如果要读入的变量是字符串，`FileGet` 会读取包含字符串长度的双字节说明符，然后读取进入该变量的数据。</span><span class="sxs-lookup"><span data-stu-id="306d5-843">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="306d5-844">因此，`FileOpen` 函数的 `RecordLength` 子句指定的记录长度必须大于字符串的实际长度的2个字节。</span><span class="sxs-lookup"><span data-stu-id="306d5-844">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="306d5-845">Visual Basic 6.0 及更早版本支持固定长度字符串;放到文件中时，不写入长度说明符。</span><span class="sxs-lookup"><span data-stu-id="306d5-845">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="306d5-846">如果要读取没有描述符的字符串，则应将 `True` 传递给 `StringIsFixedLength` 参数，并且读入的字符串应为正确的长度。</span><span class="sxs-lookup"><span data-stu-id="306d5-846">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="306d5-847">如果读入的变量是数组，则可以选择是否读取数组的大小和维度的说明符。</span><span class="sxs-lookup"><span data-stu-id="306d5-847">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="306d5-848">若要编写描述符，请将 `ArrayIsDynamic` 参数设置为 `True`。</span><span class="sxs-lookup"><span data-stu-id="306d5-848">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="306d5-849">读取数组时，必须匹配数组的写入方式。</span><span class="sxs-lookup"><span data-stu-id="306d5-849">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="306d5-850">如果使用描述符编写，则必须读取描述符。</span><span class="sxs-lookup"><span data-stu-id="306d5-850">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="306d5-851">如果未使用该说明符，则传递到 `FileGet` 的数组的大小和界限确定要读取的内容。</span><span class="sxs-lookup"><span data-stu-id="306d5-851">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="306d5-852">描述符指定数组的秩、大小和每个排名的下限。</span><span class="sxs-lookup"><span data-stu-id="306d5-852">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="306d5-853">其长度等于2再加上维度数的8倍：（2 + 8 \* NumberOfDimensions）。</span><span class="sxs-lookup"><span data-stu-id="306d5-853">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="306d5-854">`FileOpen` 函数中由 `RecordLength` 参数指定的记录长度必须大于或等于写入数组数据和数组描述符所需的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="306d5-854">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="306d5-855">例如，当数组写入磁盘时，以下数组声明需要218字节。</span><span class="sxs-lookup"><span data-stu-id="306d5-855">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="306d5-856">218字节分布如下：</span><span class="sxs-lookup"><span data-stu-id="306d5-856">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="306d5-857">描述符的18个字节：（2 + 8 \* 2）</span><span class="sxs-lookup"><span data-stu-id="306d5-857">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="306d5-858">数据为200字节：（5 \* 10 \* 4）。</span><span class="sxs-lookup"><span data-stu-id="306d5-858">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="306d5-859">如果读入的变量是任何其他类型的变量（不是变长字符串或对象），`FileGet` 仅读取变量数据。</span><span class="sxs-lookup"><span data-stu-id="306d5-859">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="306d5-860">`FileOpen` 函数中由 `RecordLength` 子句指定的记录长度必须大于或等于正在读取的数据的长度。</span><span class="sxs-lookup"><span data-stu-id="306d5-860">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="306d5-861">`FileGet` 读取结构的元素，就好像每个元素都是单独读取的，只不过元素之间没有任何空白。</span><span class="sxs-lookup"><span data-stu-id="306d5-861">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="306d5-862">在磁盘上，用户定义类型中的动态数组（使用 `FilePut`编写的）以一个描述符为前缀，其长度等于2再加上维度数的8倍：（2 + 8 \* NumberOfDimensions）。</span><span class="sxs-lookup"><span data-stu-id="306d5-862">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="306d5-863">`FileOpen` 函数中由 `RecordLength` 子句指定的记录长度必须大于或等于读取单个元素所需的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="306d5-863">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="306d5-864">这包括任何数组及其说明符。</span><span class="sxs-lookup"><span data-stu-id="306d5-864">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="306d5-865">`VBFixedString` 特性可应用于结构中的字符串字段，以指示写入磁盘时字符串的大小。</span><span class="sxs-lookup"><span data-stu-id="306d5-865">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="306d5-866">二进制模式</span><span class="sxs-lookup"><span data-stu-id="306d5-866">Binary Mode</span></span>  
 <span data-ttu-id="306d5-867">对于在 `Binary` 模式下打开的文件，大多数 `Random` 模式规则都适用，但有一些例外情况。</span><span class="sxs-lookup"><span data-stu-id="306d5-867">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="306d5-868">`Binary` 模式下打开的文件的以下规则不同于 `Random` 模式的规则：</span><span class="sxs-lookup"><span data-stu-id="306d5-868">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="306d5-869">`FileOpen` 函数中的 `RecordLength` 子句不起作用。</span><span class="sxs-lookup"><span data-stu-id="306d5-869">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="306d5-870">`FileGet` 连续读取磁盘中的所有变量;也就是说，记录之间不进行填充。</span><span class="sxs-lookup"><span data-stu-id="306d5-870">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="306d5-871">对于结构中除数组以外的任何数组，`FileGet` 仅读取数据。</span><span class="sxs-lookup"><span data-stu-id="306d5-871">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="306d5-872">未读取任何说明符。</span><span class="sxs-lookup"><span data-stu-id="306d5-872">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="306d5-873">`FileGet` 读取不是结构的元素且不需要双字节长度说明符的可变长度字符串。</span><span class="sxs-lookup"><span data-stu-id="306d5-873">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="306d5-874">读取的字节数等于字符串中的字符数。</span><span class="sxs-lookup"><span data-stu-id="306d5-874">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="306d5-875">使用 `FileGet` 函数从文件读取需要从 <xref:System.Security.Permissions.FileIOPermissionAccess> 枚举进行 `Read` 访问。</span><span class="sxs-lookup"><span data-stu-id="306d5-875">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="306d5-876"><paramref name="RecordNumber" /> &lt; 1 且不等于 -1。</span><span class="sxs-lookup"><span data-stu-id="306d5-876"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="306d5-877">文件模式无效。</span><span class="sxs-lookup"><span data-stu-id="306d5-877">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files"><span data-ttu-id="306d5-878">从文件读取 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="306d5-878">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files"><span data-ttu-id="306d5-879">写入文件 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="306d5-879">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref ValueType Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void FileGet(int32 FileNumber, class System.ValueType&amp; Value, int64 RecordNumber) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.ValueType@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As ValueType, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int * ValueType * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, class System.ValueType&amp; Value, int64 RecordNumber) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.ValueType" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="306d5-880">必需。</span><span class="sxs-lookup"><span data-stu-id="306d5-880">Required.</span></span> <span data-ttu-id="306d5-881">任何有效文件数。</span><span class="sxs-lookup"><span data-stu-id="306d5-881">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="306d5-882">必需。</span><span class="sxs-lookup"><span data-stu-id="306d5-882">Required.</span></span> <span data-ttu-id="306d5-883">数据读入到其中的有效变量名称。</span><span class="sxs-lookup"><span data-stu-id="306d5-883">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="306d5-884">可选。</span><span class="sxs-lookup"><span data-stu-id="306d5-884">Optional.</span></span> <span data-ttu-id="306d5-885">读取的开始位置处的记录号（<see langword="Random" /> 模式文件）或字节数（<see langword="Binary" /> 模式文件）。</span><span class="sxs-lookup"><span data-stu-id="306d5-885">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="306d5-886">将数据从打开的磁盘文件读入到一个变量中。</span><span class="sxs-lookup"><span data-stu-id="306d5-886">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="306d5-887">相比 <see langword="FileGet" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span><span class="sxs-lookup"><span data-stu-id="306d5-887">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="306d5-888">有关详细信息，请参阅 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="306d5-888">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="306d5-889">`FileGet` 仅在 `Random` 和 `Binary` 模式下有效。</span><span class="sxs-lookup"><span data-stu-id="306d5-889">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="306d5-890">使用 `FilePut``FileGet` 读取的数据通常写入到文件中。</span><span class="sxs-lookup"><span data-stu-id="306d5-890">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="306d5-891">文件中的第一个记录或字节位于位置1，第二个记录或字节在位置2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="306d5-891">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="306d5-892">如果省略 `RecordNumber`，则读取最后一个 `FileGet` 或 `FilePut` `Seek` 函数后的下一条记录或字节。</span><span class="sxs-lookup"><span data-stu-id="306d5-892">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="306d5-893">从文件中读取时，请不要根据文件扩展名来决定文件的内容。</span><span class="sxs-lookup"><span data-stu-id="306d5-893">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="306d5-894">例如，名为 "Form1" 的文件可能不是 Visual Basic 的源文件。</span><span class="sxs-lookup"><span data-stu-id="306d5-894">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="306d5-895">随机模式</span><span class="sxs-lookup"><span data-stu-id="306d5-895">Random Mode</span></span>  
 <span data-ttu-id="306d5-896">对于在 `Random` 模式下打开的文件，以下规则适用：</span><span class="sxs-lookup"><span data-stu-id="306d5-896">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="306d5-897">如果读取的数据的长度小于 `FileOpen` 函数的 `RecordLength` 子句中指定的长度，`FileGet` 将读取记录长度边界的后续记录。</span><span class="sxs-lookup"><span data-stu-id="306d5-897">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="306d5-898">一条记录的末尾和下一条记录的开头之间的空格将填充到文件缓冲区的现有内容中。</span><span class="sxs-lookup"><span data-stu-id="306d5-898">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="306d5-899">由于不能确定填充数据量，因此通常最好让记录长度与读取的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="306d5-899">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="306d5-900">默认情况下，如果要读入的变量是字符串，`FileGet` 会读取包含字符串长度的双字节说明符，然后读取进入该变量的数据。</span><span class="sxs-lookup"><span data-stu-id="306d5-900">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="306d5-901">因此，`FileOpen` 函数的 `RecordLength` 子句指定的记录长度必须大于字符串的实际长度的2个字节。</span><span class="sxs-lookup"><span data-stu-id="306d5-901">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="306d5-902">Visual Basic 6.0 及更早版本支持固定长度字符串;放到文件中时，不写入长度说明符。</span><span class="sxs-lookup"><span data-stu-id="306d5-902">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="306d5-903">如果要读取没有描述符的字符串，则应将 `True` 传递给 `StringIsFixedLength` 参数，并且读入的字符串应为正确的长度。</span><span class="sxs-lookup"><span data-stu-id="306d5-903">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="306d5-904">如果读入的变量是数组，则可以选择是否读取数组的大小和维度的说明符。</span><span class="sxs-lookup"><span data-stu-id="306d5-904">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="306d5-905">若要编写描述符，请将 `ArrayIsDynamic` 参数设置为 `True`。</span><span class="sxs-lookup"><span data-stu-id="306d5-905">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="306d5-906">读取数组时，必须匹配数组的写入方式。</span><span class="sxs-lookup"><span data-stu-id="306d5-906">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="306d5-907">如果使用描述符编写，则必须读取描述符。</span><span class="sxs-lookup"><span data-stu-id="306d5-907">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="306d5-908">如果未使用该说明符，则传递到 `FileGet` 的数组的大小和界限确定要读取的内容。</span><span class="sxs-lookup"><span data-stu-id="306d5-908">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="306d5-909">描述符指定数组的秩、大小和每个排名的下限。</span><span class="sxs-lookup"><span data-stu-id="306d5-909">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="306d5-910">其长度等于2再加上维度数的8倍：（2 + 8 \* NumberOfDimensions）。</span><span class="sxs-lookup"><span data-stu-id="306d5-910">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="306d5-911">`FileOpen` 函数中由 `RecordLength` 参数指定的记录长度必须大于或等于写入数组数据和数组描述符所需的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="306d5-911">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="306d5-912">例如，当数组写入磁盘时，以下数组声明需要218字节。</span><span class="sxs-lookup"><span data-stu-id="306d5-912">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="306d5-913">218字节分布如下：</span><span class="sxs-lookup"><span data-stu-id="306d5-913">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="306d5-914">描述符的18个字节：（2 + 8 \* 2）</span><span class="sxs-lookup"><span data-stu-id="306d5-914">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="306d5-915">数据为200字节：（5 \* 10 \* 4）。</span><span class="sxs-lookup"><span data-stu-id="306d5-915">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="306d5-916">如果读入的变量是任何其他类型的变量（不是变长字符串或对象），`FileGet` 仅读取变量数据。</span><span class="sxs-lookup"><span data-stu-id="306d5-916">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="306d5-917">`FileOpen` 函数中由 `RecordLength` 子句指定的记录长度必须大于或等于正在读取的数据的长度。</span><span class="sxs-lookup"><span data-stu-id="306d5-917">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="306d5-918">`FileGet` 读取结构的元素，就好像每个元素都是单独读取的，只不过元素之间没有任何空白。</span><span class="sxs-lookup"><span data-stu-id="306d5-918">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="306d5-919">在磁盘上，用户定义类型中的动态数组（使用 `FilePut`编写的）以一个描述符为前缀，其长度等于2再加上维度数的8倍：（2 + 8 \* NumberOfDimensions）。</span><span class="sxs-lookup"><span data-stu-id="306d5-919">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="306d5-920">`FileOpen` 函数中由 `RecordLength` 子句指定的记录长度必须大于或等于读取单个元素所需的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="306d5-920">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="306d5-921">这包括任何数组及其说明符。</span><span class="sxs-lookup"><span data-stu-id="306d5-921">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="306d5-922">`VBFixedString` 特性可应用于结构中的字符串字段，以指示写入磁盘时字符串的大小。</span><span class="sxs-lookup"><span data-stu-id="306d5-922">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="306d5-923">二进制模式</span><span class="sxs-lookup"><span data-stu-id="306d5-923">Binary Mode</span></span>  
 <span data-ttu-id="306d5-924">对于在 `Binary` 模式下打开的文件，大多数 `Random` 模式规则都适用，但有一些例外情况。</span><span class="sxs-lookup"><span data-stu-id="306d5-924">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="306d5-925">`Binary` 模式下打开的文件的以下规则不同于 `Random` 模式的规则：</span><span class="sxs-lookup"><span data-stu-id="306d5-925">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="306d5-926">`FileOpen` 函数中的 `RecordLength` 子句不起作用。</span><span class="sxs-lookup"><span data-stu-id="306d5-926">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="306d5-927">`FileGet` 连续读取磁盘中的所有变量;也就是说，记录之间不进行填充。</span><span class="sxs-lookup"><span data-stu-id="306d5-927">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="306d5-928">对于结构中除数组以外的任何数组，`FileGet` 仅读取数据。</span><span class="sxs-lookup"><span data-stu-id="306d5-928">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="306d5-929">未读取任何说明符。</span><span class="sxs-lookup"><span data-stu-id="306d5-929">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="306d5-930">`FileGet` 读取不是结构的元素且不需要双字节长度说明符的可变长度字符串。</span><span class="sxs-lookup"><span data-stu-id="306d5-930">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="306d5-931">读取的字节数等于字符串中的字符数。</span><span class="sxs-lookup"><span data-stu-id="306d5-931">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="306d5-932">使用 `FileGet` 函数从文件读取需要从 <xref:System.Security.Permissions.FileIOPermissionAccess> 枚举进行 `Read` 访问。</span><span class="sxs-lookup"><span data-stu-id="306d5-932">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="306d5-933"><paramref name="RecordNumber" /> &lt; 1 且不等于 -1。</span><span class="sxs-lookup"><span data-stu-id="306d5-933"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="306d5-934">文件模式无效。</span><span class="sxs-lookup"><span data-stu-id="306d5-934">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files"><span data-ttu-id="306d5-935">从文件读取 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="306d5-935">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files"><span data-ttu-id="306d5-936">写入文件 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="306d5-936">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref string Value, long RecordNumber = -1, bool StringIsFixedLength = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void FileGet(int32 FileNumber, string&amp; Value, int64 RecordNumber, bool StringIsFixedLength) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.String@,System.Int64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As String, Optional RecordNumber As Long = -1, Optional StringIsFixedLength As Boolean = false)" />
      <MemberSignature Language="F#" Value="static member FileGet : int * string * int64 * bool -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber, StringIsFixedLength)" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, string&amp; Value, int64 RecordNumber, bool StringIsFixedLength) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.String" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
        <Parameter Name="StringIsFixedLength" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="306d5-937">必需。</span><span class="sxs-lookup"><span data-stu-id="306d5-937">Required.</span></span> <span data-ttu-id="306d5-938">任何有效文件数。</span><span class="sxs-lookup"><span data-stu-id="306d5-938">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="306d5-939">必需。</span><span class="sxs-lookup"><span data-stu-id="306d5-939">Required.</span></span> <span data-ttu-id="306d5-940">数据读入到其中的有效变量名称。</span><span class="sxs-lookup"><span data-stu-id="306d5-940">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="306d5-941">可选。</span><span class="sxs-lookup"><span data-stu-id="306d5-941">Optional.</span></span> <span data-ttu-id="306d5-942">读取的开始位置处的记录号（<see langword="Random" /> 模式文件）或字节数（<see langword="Binary" /> 模式文件）。</span><span class="sxs-lookup"><span data-stu-id="306d5-942">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <param name="StringIsFixedLength"><span data-ttu-id="306d5-943">可选。</span><span class="sxs-lookup"><span data-stu-id="306d5-943">Optional.</span></span> <span data-ttu-id="306d5-944">仅在写入字符串时适用。</span><span class="sxs-lookup"><span data-stu-id="306d5-944">Applies only when writing a string.</span></span> <span data-ttu-id="306d5-945">指定是否为描述长度的字符串写入一个双字节说明符。</span><span class="sxs-lookup"><span data-stu-id="306d5-945">Specifies whether to write a two-byte descriptor for the string that describes the length.</span></span> <span data-ttu-id="306d5-946">默认为 <see langword="False" />。</span><span class="sxs-lookup"><span data-stu-id="306d5-946">The default is <see langword="False" />.</span></span></param>
        <summary><span data-ttu-id="306d5-947">将数据从打开的磁盘文件读入到一个变量中。</span><span class="sxs-lookup"><span data-stu-id="306d5-947">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="306d5-948">相比 <see langword="FileGet" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span><span class="sxs-lookup"><span data-stu-id="306d5-948">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="306d5-949">有关详细信息，请参阅 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="306d5-949">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="306d5-950">`FileGet` 仅在 `Random` 和 `Binary` 模式下有效。</span><span class="sxs-lookup"><span data-stu-id="306d5-950">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="306d5-951">使用 `FilePut``FileGet` 读取的数据通常写入到文件中。</span><span class="sxs-lookup"><span data-stu-id="306d5-951">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="306d5-952">文件中的第一个记录或字节位于位置1，第二个记录或字节在位置2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="306d5-952">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="306d5-953">如果省略 `RecordNumber`，则读取最后一个 `FileGet` 或 `FilePut` `Seek` 函数后的下一条记录或字节。</span><span class="sxs-lookup"><span data-stu-id="306d5-953">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="306d5-954">从文件中读取时，请不要根据文件扩展名来决定文件的内容。</span><span class="sxs-lookup"><span data-stu-id="306d5-954">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="306d5-955">例如，名为 "Form1" 的文件可能不是 Visual Basic 的源文件。</span><span class="sxs-lookup"><span data-stu-id="306d5-955">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="306d5-956">随机模式</span><span class="sxs-lookup"><span data-stu-id="306d5-956">Random Mode</span></span>  
 <span data-ttu-id="306d5-957">对于在 `Random` 模式下打开的文件，以下规则适用：</span><span class="sxs-lookup"><span data-stu-id="306d5-957">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="306d5-958">如果读取的数据的长度小于 `FileOpen` 函数的 `RecordLength` 子句中指定的长度，`FileGet` 将读取记录长度边界的后续记录。</span><span class="sxs-lookup"><span data-stu-id="306d5-958">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="306d5-959">一条记录的末尾和下一条记录的开头之间的空格将填充到文件缓冲区的现有内容中。</span><span class="sxs-lookup"><span data-stu-id="306d5-959">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="306d5-960">由于不能确定填充数据量，因此通常最好让记录长度与读取的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="306d5-960">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="306d5-961">默认情况下，如果要读入的变量是字符串，`FileGet` 会读取包含字符串长度的双字节说明符，然后读取进入该变量的数据。</span><span class="sxs-lookup"><span data-stu-id="306d5-961">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="306d5-962">因此，`FileOpen` 函数的 `RecordLength` 子句指定的记录长度必须大于字符串的实际长度的2个字节。</span><span class="sxs-lookup"><span data-stu-id="306d5-962">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="306d5-963">Visual Basic 6.0 及更早版本支持固定长度字符串;放到文件中时，不写入长度说明符。</span><span class="sxs-lookup"><span data-stu-id="306d5-963">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="306d5-964">如果要读取没有描述符的字符串，则应将 `True` 传递给 `StringIsFixedLength` 参数，并且读入的字符串应为正确的长度。</span><span class="sxs-lookup"><span data-stu-id="306d5-964">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="306d5-965">如果读入的变量是数组，则可以选择是否读取数组的大小和维度的说明符。</span><span class="sxs-lookup"><span data-stu-id="306d5-965">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="306d5-966">若要编写描述符，请将 `ArrayIsDynamic` 参数设置为 `True`。</span><span class="sxs-lookup"><span data-stu-id="306d5-966">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="306d5-967">读取数组时，必须匹配数组的写入方式。</span><span class="sxs-lookup"><span data-stu-id="306d5-967">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="306d5-968">如果使用描述符编写，则必须读取描述符。</span><span class="sxs-lookup"><span data-stu-id="306d5-968">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="306d5-969">如果未使用该说明符，则传递到 `FileGet` 的数组的大小和界限确定要读取的内容。</span><span class="sxs-lookup"><span data-stu-id="306d5-969">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="306d5-970">描述符指定数组的秩、大小和每个排名的下限。</span><span class="sxs-lookup"><span data-stu-id="306d5-970">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="306d5-971">其长度等于2再加上维度数的8倍：（2 + 8 \* NumberOfDimensions）。</span><span class="sxs-lookup"><span data-stu-id="306d5-971">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="306d5-972">`FileOpen` 函数中由 `RecordLength` 参数指定的记录长度必须大于或等于写入数组数据和数组描述符所需的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="306d5-972">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="306d5-973">例如，当数组写入磁盘时，以下数组声明需要218字节。</span><span class="sxs-lookup"><span data-stu-id="306d5-973">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="306d5-974">218字节分布如下：</span><span class="sxs-lookup"><span data-stu-id="306d5-974">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="306d5-975">描述符的18个字节：（2 + 8 \* 2）</span><span class="sxs-lookup"><span data-stu-id="306d5-975">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="306d5-976">数据为200字节：（5 \* 10 \* 4）。</span><span class="sxs-lookup"><span data-stu-id="306d5-976">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="306d5-977">如果读入的变量是任何其他类型的变量（不是变长字符串或对象），`FileGet` 仅读取变量数据。</span><span class="sxs-lookup"><span data-stu-id="306d5-977">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="306d5-978">`FileOpen` 函数中由 `RecordLength` 子句指定的记录长度必须大于或等于正在读取的数据的长度。</span><span class="sxs-lookup"><span data-stu-id="306d5-978">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="306d5-979">`FileGet` 读取结构的元素，就好像每个元素都是单独读取的，只不过元素之间没有任何空白。</span><span class="sxs-lookup"><span data-stu-id="306d5-979">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="306d5-980">在磁盘上，用户定义类型中的动态数组（使用 `FilePut`编写的）以一个描述符为前缀，其长度等于2再加上维度数的8倍：（2 + 8 \* NumberOfDimensions）。</span><span class="sxs-lookup"><span data-stu-id="306d5-980">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="306d5-981">`FileOpen` 函数中由 `RecordLength` 子句指定的记录长度必须大于或等于读取单个元素所需的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="306d5-981">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="306d5-982">这包括任何数组及其说明符。</span><span class="sxs-lookup"><span data-stu-id="306d5-982">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="306d5-983">`VBFixedString` 特性可应用于结构中的字符串字段，以指示写入磁盘时字符串的大小。</span><span class="sxs-lookup"><span data-stu-id="306d5-983">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="306d5-984">二进制模式</span><span class="sxs-lookup"><span data-stu-id="306d5-984">Binary Mode</span></span>  
 <span data-ttu-id="306d5-985">对于在 `Binary` 模式下打开的文件，大多数 `Random` 模式规则都适用，但有一些例外情况。</span><span class="sxs-lookup"><span data-stu-id="306d5-985">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="306d5-986">`Binary` 模式下打开的文件的以下规则不同于 `Random` 模式的规则：</span><span class="sxs-lookup"><span data-stu-id="306d5-986">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="306d5-987">`FileOpen` 函数中的 `RecordLength` 子句不起作用。</span><span class="sxs-lookup"><span data-stu-id="306d5-987">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="306d5-988">`FileGet` 连续读取磁盘中的所有变量;也就是说，记录之间不进行填充。</span><span class="sxs-lookup"><span data-stu-id="306d5-988">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="306d5-989">对于结构中除数组以外的任何数组，`FileGet` 仅读取数据。</span><span class="sxs-lookup"><span data-stu-id="306d5-989">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="306d5-990">未读取任何说明符。</span><span class="sxs-lookup"><span data-stu-id="306d5-990">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="306d5-991">`FileGet` 读取不是结构的元素且不需要双字节长度说明符的可变长度字符串。</span><span class="sxs-lookup"><span data-stu-id="306d5-991">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="306d5-992">读取的字节数等于字符串中的字符数。</span><span class="sxs-lookup"><span data-stu-id="306d5-992">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="306d5-993">使用 `FileGet` 函数从文件读取需要从 <xref:System.Security.Permissions.FileIOPermissionAccess> 枚举进行 `Read` 访问。</span><span class="sxs-lookup"><span data-stu-id="306d5-993">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="306d5-994"><paramref name="RecordNumber" /> &lt; 1 且不等于 -1。</span><span class="sxs-lookup"><span data-stu-id="306d5-994"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="306d5-995">文件模式无效。</span><span class="sxs-lookup"><span data-stu-id="306d5-995">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files"><span data-ttu-id="306d5-996">从文件读取 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="306d5-996">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files"><span data-ttu-id="306d5-997">写入文件 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="306d5-997">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref Array Value, long RecordNumber = -1, bool ArrayIsDynamic = false, bool StringIsFixedLength = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void FileGet(int32 FileNumber, class System.Array&amp; Value, int64 RecordNumber, bool ArrayIsDynamic, bool StringIsFixedLength) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Array@,System.Int64,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Array, Optional RecordNumber As Long = -1, Optional ArrayIsDynamic As Boolean = false, Optional StringIsFixedLength As Boolean = false)" />
      <MemberSignature Language="F#" Value="static member FileGet : int * Array * int64 * bool * bool -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber, ArrayIsDynamic, StringIsFixedLength)" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, class System.Array&amp; Value, int64 RecordNumber, bool ArrayIsDynamic, bool StringIsFixedLength) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Array" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
        <Parameter Name="ArrayIsDynamic" Type="System.Boolean" />
        <Parameter Name="StringIsFixedLength" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="306d5-998">必需。</span><span class="sxs-lookup"><span data-stu-id="306d5-998">Required.</span></span> <span data-ttu-id="306d5-999">任何有效文件数。</span><span class="sxs-lookup"><span data-stu-id="306d5-999">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="306d5-1000">必需。</span><span class="sxs-lookup"><span data-stu-id="306d5-1000">Required.</span></span> <span data-ttu-id="306d5-1001">数据读入到其中的有效变量名称。</span><span class="sxs-lookup"><span data-stu-id="306d5-1001">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="306d5-1002">可选。</span><span class="sxs-lookup"><span data-stu-id="306d5-1002">Optional.</span></span> <span data-ttu-id="306d5-1003">读取的开始位置处的记录号（<see langword="Random" /> 模式文件）或字节数（<see langword="Binary" /> 模式文件）。</span><span class="sxs-lookup"><span data-stu-id="306d5-1003">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <param name="ArrayIsDynamic"><span data-ttu-id="306d5-1004">可选。</span><span class="sxs-lookup"><span data-stu-id="306d5-1004">Optional.</span></span> <span data-ttu-id="306d5-1005">仅当写入数组时使用。</span><span class="sxs-lookup"><span data-stu-id="306d5-1005">Applies only when writing an array.</span></span> <span data-ttu-id="306d5-1006">指定是否将数组视为动态数组，以及是否需要描述数组大小和边界的数组说明符。</span><span class="sxs-lookup"><span data-stu-id="306d5-1006">Specifies whether the array is to be treated as dynamic and whether an array descriptor describing the size and bounds of the array is necessary.</span></span></param>
        <param name="StringIsFixedLength"><span data-ttu-id="306d5-1007">可选。</span><span class="sxs-lookup"><span data-stu-id="306d5-1007">Optional.</span></span> <span data-ttu-id="306d5-1008">仅在写入字符串时适用。</span><span class="sxs-lookup"><span data-stu-id="306d5-1008">Applies only when writing a string.</span></span> <span data-ttu-id="306d5-1009">指定是否为描述长度的字符串写入一个双字节说明符。</span><span class="sxs-lookup"><span data-stu-id="306d5-1009">Specifies whether to write a two-byte descriptor for the string that describes the length.</span></span> <span data-ttu-id="306d5-1010">默认为 <see langword="False" />。</span><span class="sxs-lookup"><span data-stu-id="306d5-1010">The default is <see langword="False" />.</span></span></param>
        <summary><span data-ttu-id="306d5-1011">将数据从打开的磁盘文件读入到一个变量中。</span><span class="sxs-lookup"><span data-stu-id="306d5-1011">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="306d5-1012">相比 <see langword="FileGet" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span><span class="sxs-lookup"><span data-stu-id="306d5-1012">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="306d5-1013">有关详细信息，请参阅 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="306d5-1013">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="306d5-1014">`FileGet` 仅在 `Random` 和 `Binary` 模式下有效。</span><span class="sxs-lookup"><span data-stu-id="306d5-1014">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="306d5-1015">使用 `FilePut``FileGet` 读取的数据通常写入到文件中。</span><span class="sxs-lookup"><span data-stu-id="306d5-1015">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="306d5-1016">文件中的第一个记录或字节位于位置1，第二个记录或字节在位置2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="306d5-1016">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="306d5-1017">如果省略 `RecordNumber`，则读取最后一个 `FileGet` 或 `FilePut` `Seek` 函数后的下一条记录或字节。</span><span class="sxs-lookup"><span data-stu-id="306d5-1017">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="306d5-1018">从文件中读取时，请不要根据文件扩展名来决定文件的内容。</span><span class="sxs-lookup"><span data-stu-id="306d5-1018">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="306d5-1019">例如，名为 "Form1" 的文件可能不是 Visual Basic 的源文件。</span><span class="sxs-lookup"><span data-stu-id="306d5-1019">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="306d5-1020">随机模式</span><span class="sxs-lookup"><span data-stu-id="306d5-1020">Random Mode</span></span>  
 <span data-ttu-id="306d5-1021">对于在 `Random` 模式下打开的文件，以下规则适用：</span><span class="sxs-lookup"><span data-stu-id="306d5-1021">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="306d5-1022">如果读取的数据的长度小于 `FileOpen` 函数的 `RecordLength` 子句中指定的长度，`FileGet` 将读取记录长度边界的后续记录。</span><span class="sxs-lookup"><span data-stu-id="306d5-1022">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="306d5-1023">一条记录的末尾和下一条记录的开头之间的空格将填充到文件缓冲区的现有内容中。</span><span class="sxs-lookup"><span data-stu-id="306d5-1023">The space between the end of one record and the starting of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="306d5-1024">由于不能确定填充数据量，因此通常最好让记录长度与读取的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="306d5-1024">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="306d5-1025">默认情况下，如果要读入的变量是字符串，`FileGet` 会读取包含字符串长度的双字节说明符，然后读取进入该变量的数据。</span><span class="sxs-lookup"><span data-stu-id="306d5-1025">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="306d5-1026">因此，`FileOpen` 函数的 `RecordLength` 子句指定的记录长度必须大于字符串的实际长度的2个字节。</span><span class="sxs-lookup"><span data-stu-id="306d5-1026">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="306d5-1027">Visual Basic 6.0 及更早版本支持固定长度字符串;放到文件中时，不写入长度说明符。</span><span class="sxs-lookup"><span data-stu-id="306d5-1027">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="306d5-1028">如果要读取没有描述符的字符串，则应将 `True` 传递给 `StringIsFixedLength` 参数，并且读入的字符串应为正确的长度。</span><span class="sxs-lookup"><span data-stu-id="306d5-1028">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="306d5-1029">如果读入的变量是数组，则可以选择是否读取数组的大小和维度的说明符。</span><span class="sxs-lookup"><span data-stu-id="306d5-1029">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="306d5-1030">若要编写描述符，请将 `ArrayIsDynamic` 参数设置为 `True`。</span><span class="sxs-lookup"><span data-stu-id="306d5-1030">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="306d5-1031">读取数组时，必须匹配数组的写入方式。</span><span class="sxs-lookup"><span data-stu-id="306d5-1031">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="306d5-1032">如果使用描述符编写，则必须读取描述符。</span><span class="sxs-lookup"><span data-stu-id="306d5-1032">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="306d5-1033">如果未使用该说明符，则传递到 `FileGet` 的数组的大小和界限确定要读取的内容。</span><span class="sxs-lookup"><span data-stu-id="306d5-1033">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="306d5-1034">描述符指定数组的秩、大小和每个排名的下限。</span><span class="sxs-lookup"><span data-stu-id="306d5-1034">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="306d5-1035">其长度等于2再加上维度数的8倍：（2 + 8 \* NumberOfDimensions）。</span><span class="sxs-lookup"><span data-stu-id="306d5-1035">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="306d5-1036">`FileOpen` 函数中由 `RecordLength` 参数指定的记录长度必须大于或等于写入数组数据和数组描述符所需的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="306d5-1036">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="306d5-1037">例如，当数组写入磁盘时，以下数组声明需要218字节。</span><span class="sxs-lookup"><span data-stu-id="306d5-1037">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="306d5-1038">218字节分布如下：</span><span class="sxs-lookup"><span data-stu-id="306d5-1038">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="306d5-1039">描述符的18个字节：（2 + 8 \* 2）</span><span class="sxs-lookup"><span data-stu-id="306d5-1039">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="306d5-1040">数据为200字节：（5 \* 10 \* 4）。</span><span class="sxs-lookup"><span data-stu-id="306d5-1040">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="306d5-1041">如果读入的变量是任何其他类型的变量（不是变长字符串或对象），`FileGet` 仅读取变量数据。</span><span class="sxs-lookup"><span data-stu-id="306d5-1041">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="306d5-1042">`FileOpen` 函数中由 `RecordLength` 子句指定的记录长度必须大于或等于正在读取的数据的长度。</span><span class="sxs-lookup"><span data-stu-id="306d5-1042">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="306d5-1043">`FileGet` 读取结构的元素，就好像每个元素都是单独读取的，只不过元素之间没有任何空白。</span><span class="sxs-lookup"><span data-stu-id="306d5-1043">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="306d5-1044">在磁盘上，用户定义类型中的动态数组（使用 `FilePut`编写的）以一个描述符为前缀，其长度等于2再加上维度数的8倍：（2 + 8 \* NumberOfDimensions）。</span><span class="sxs-lookup"><span data-stu-id="306d5-1044">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="306d5-1045">`FileOpen` 函数中由 `RecordLength` 子句指定的记录长度必须大于或等于读取单个元素所需的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="306d5-1045">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="306d5-1046">这包括任何数组及其说明符。</span><span class="sxs-lookup"><span data-stu-id="306d5-1046">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="306d5-1047">`VBFixedString` 特性可应用于结构中的字符串字段，以指示写入磁盘时字符串的大小。</span><span class="sxs-lookup"><span data-stu-id="306d5-1047">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="306d5-1048">二进制模式</span><span class="sxs-lookup"><span data-stu-id="306d5-1048">Binary Mode</span></span>  
 <span data-ttu-id="306d5-1049">对于在 `Binary` 模式下打开的文件，大多数 `Random` 模式规则都适用，但有一些例外情况。</span><span class="sxs-lookup"><span data-stu-id="306d5-1049">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="306d5-1050">`Binary` 模式下打开的文件的以下规则不同于 `Random` 模式的规则：</span><span class="sxs-lookup"><span data-stu-id="306d5-1050">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="306d5-1051">`FileOpen` 函数中的 `RecordLength` 子句不起作用。</span><span class="sxs-lookup"><span data-stu-id="306d5-1051">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="306d5-1052">`FileGet` 连续读取磁盘中的所有变量;也就是说，记录之间不进行填充。</span><span class="sxs-lookup"><span data-stu-id="306d5-1052">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="306d5-1053">对于结构中除数组以外的任何数组，`FileGet` 仅读取数据。</span><span class="sxs-lookup"><span data-stu-id="306d5-1053">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="306d5-1054">未读取任何说明符。</span><span class="sxs-lookup"><span data-stu-id="306d5-1054">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="306d5-1055">`FileGet` 读取不是结构的元素且不需要双字节长度说明符的可变长度字符串。</span><span class="sxs-lookup"><span data-stu-id="306d5-1055">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="306d5-1056">读取的字节数等于字符串中的字符数。</span><span class="sxs-lookup"><span data-stu-id="306d5-1056">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="306d5-1057">使用 `FileGet` 函数从文件读取需要从 <xref:System.Security.Permissions.FileIOPermissionAccess> 枚举进行 `Read` 访问。</span><span class="sxs-lookup"><span data-stu-id="306d5-1057">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="306d5-1058"><paramref name="RecordNumber" /> &lt; 1 且不等于 -1。</span><span class="sxs-lookup"><span data-stu-id="306d5-1058"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="306d5-1059">文件模式无效。</span><span class="sxs-lookup"><span data-stu-id="306d5-1059">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files"><span data-ttu-id="306d5-1060">从文件读取 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="306d5-1060">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files"><span data-ttu-id="306d5-1061">写入文件 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="306d5-1061">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGetObject">
      <MemberSignature Language="C#" Value="public static void FileGetObject (int FileNumber, ref object Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void FileGetObject(int32 FileNumber, object&amp; Value, int64 RecordNumber) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGetObject (FileNumber As Integer, ByRef Value As Object, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGetObject : int * obj * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGetObject (FileNumber, Value, RecordNumber)" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGetObject(int32 FileNumber, object&amp; Value, int64 RecordNumber) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Object" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="306d5-1062">必需。</span><span class="sxs-lookup"><span data-stu-id="306d5-1062">Required.</span></span> <span data-ttu-id="306d5-1063">任何有效文件数。</span><span class="sxs-lookup"><span data-stu-id="306d5-1063">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="306d5-1064">必需。</span><span class="sxs-lookup"><span data-stu-id="306d5-1064">Required.</span></span> <span data-ttu-id="306d5-1065">数据读入到其中的有效变量名称。</span><span class="sxs-lookup"><span data-stu-id="306d5-1065">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="306d5-1066">可选。</span><span class="sxs-lookup"><span data-stu-id="306d5-1066">Optional.</span></span> <span data-ttu-id="306d5-1067">读取的开始位置处的记录号（<see langword="Random" /> 模式文件）或字节数（<see langword="Binary" /> 模式文件）。</span><span class="sxs-lookup"><span data-stu-id="306d5-1067">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="306d5-1068">将数据从打开的磁盘文件读入到一个变量中。</span><span class="sxs-lookup"><span data-stu-id="306d5-1068">Reads data from an open disk file into a variable.</span></span>  <span data-ttu-id="306d5-1069">相比 <see langword="FileGetObject" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span><span class="sxs-lookup"><span data-stu-id="306d5-1069">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGetObject" />.</span></span> <span data-ttu-id="306d5-1070">有关详细信息，请参阅 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="306d5-1070">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="306d5-1071">如果返回类型 `Object` 而不是另一种类型，则使用 `FileGetObject` 函数，而不是 `FileGet` 以避免编译时出现歧义，如 `Integer`、`Long`、`Short`等。</span><span class="sxs-lookup"><span data-stu-id="306d5-1071">The `FileGetObject` function is used instead of `FileGet` to avoid ambiguities at compile time if type `Object` is returned instead of another type, such as `Integer`, `Long`, `Short`, and so forth.</span></span>  
  
 <span data-ttu-id="306d5-1072">如果要编写 `Variant` 类型，`FileGetObject` 是必需的。</span><span class="sxs-lookup"><span data-stu-id="306d5-1072">If you intend to write out the `Variant` type, `FileGetObject` is required.</span></span> <span data-ttu-id="306d5-1073">当不确定时，如果使用第二个参数的对象，则始终建议使用 `FilePutObject` 和 `FileGetObject`。</span><span class="sxs-lookup"><span data-stu-id="306d5-1073">When in doubt, if you are using an object for the second parameter, it is always suggested that you use `FilePutObject` and `FileGetObject`.</span></span>  
  
 <span data-ttu-id="306d5-1074">`FileGetObject` 仅在 `Random` 和 `Binary` 模式下有效。</span><span class="sxs-lookup"><span data-stu-id="306d5-1074">`FileGetObject` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="306d5-1075">用 `FileGetObject` 读取的数据通常用 `FilePutObject`来编写。</span><span class="sxs-lookup"><span data-stu-id="306d5-1075">Data read with `FileGetObject` is usually written with `FilePutObject`.</span></span>  
  
 <span data-ttu-id="306d5-1076">文件中的第一个记录或字节位于位置1，第二个记录或字节在位置2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="306d5-1076">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="306d5-1077">如果省略 `RecordNumber`，`FileGetObject` 读取最后一个 `FileGetObject` 或 `FilePutObject` 函数之后的记录或字节（或最后一个 `Seek` 函数指向的那个函数）。</span><span class="sxs-lookup"><span data-stu-id="306d5-1077">If you omit `RecordNumber`, `FileGetObject` reads the record or byte after the last `FileGetObject` or `FilePutObject` function (or pointed to by the last `Seek` function).</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="306d5-1078">随机模式</span><span class="sxs-lookup"><span data-stu-id="306d5-1078">Random Mode</span></span>  
 <span data-ttu-id="306d5-1079">对于在 `Random` 模式下打开的文件，以下规则适用：</span><span class="sxs-lookup"><span data-stu-id="306d5-1079">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="306d5-1080">如果读取的数据的长度小于 `FileOpen` 函数的 `RecordLength` 子句中指定的长度，`FileGetObject` 将读取记录长度边界的后续记录。</span><span class="sxs-lookup"><span data-stu-id="306d5-1080">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGetObject` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="306d5-1081">一条记录的末尾和下一条记录的开头之间的空格将填充到文件缓冲区的现有内容中。</span><span class="sxs-lookup"><span data-stu-id="306d5-1081">The space between the end of one record and the beginning of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="306d5-1082">由于无法精确确定填充数据量，因此最好让记录长度与所读取的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="306d5-1082">Because the amount of padding data cannot be precisely determined, it is a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="306d5-1083">如果读入的变量是一个字符串，则默认情况下 `FileGetObject` 读取包含字符串长度的双字节说明符，然后读取进入该变量的数据。</span><span class="sxs-lookup"><span data-stu-id="306d5-1083">If the variable being read into is a string, by default `FileGetObject` reads a two-byte descriptor containing the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="306d5-1084">因此，`FileOpen` 函数的 `RecordLength` 子句指定的记录长度必须大于字符串的实际长度的2个字节。</span><span class="sxs-lookup"><span data-stu-id="306d5-1084">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="306d5-1085">Visual Basic 6.0 及更早版本支持固定长度字符串，读取文件时，不写入长度说明符。</span><span class="sxs-lookup"><span data-stu-id="306d5-1085">Visual Basic 6.0 and earlier versions support fixed-length strings and when read to a file, the length descriptor is not written.</span></span> <span data-ttu-id="306d5-1086">如果要读取没有描述符的字符串，则应将 `True` 传递给 `StringIsFixedLength` 参数，并且读入的字符串应为正确的长度。</span><span class="sxs-lookup"><span data-stu-id="306d5-1086">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="306d5-1087">如果读入的变量为数组，则 `RecordLength` 函数中 `FileOpen` 参数指定的记录长度必须大于或等于写入数组数据和数组描述符需要的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="306d5-1087">If the variable being read into is an array, then the record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="306d5-1088">描述符指定数组的秩、大小和每个排名的下限。</span><span class="sxs-lookup"><span data-stu-id="306d5-1088">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="306d5-1089">其长度等于2再加上维度数的8倍： 2 + 8 \* NumberOfDimensions。</span><span class="sxs-lookup"><span data-stu-id="306d5-1089">Its length equals 2 plus 8 times the number of dimensions: 2 + 8 \* NumberOfDimensions.</span></span>  
  
     <span data-ttu-id="306d5-1090">例如，当数组写入磁盘时，以下数组声明需要218字节：</span><span class="sxs-lookup"><span data-stu-id="306d5-1090">For example, the following array declaration requires 218 bytes when the array is written to disk:</span></span>  
  
     [!code-vb[VbVbalrCatRef#27](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#27)]  
  
     <span data-ttu-id="306d5-1091">分发了 218 个字节，如下所示：为描述符分发了 18 个字节 (2 + 8 \* 2)，为数据分发了 100 个字节 (5 \* 10 \* 4)。</span><span class="sxs-lookup"><span data-stu-id="306d5-1091">The 218 bytes are distributed as follows: 18 bytes for the descriptor (2 + 8 \* 2), and 100 bytes for the data (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="306d5-1092">`FileGetObject` 读取结构的元素，就好像每个元素都是单独读取的，只不过元素之间没有任何空白。</span><span class="sxs-lookup"><span data-stu-id="306d5-1092">`FileGetObject` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="306d5-1093">在磁盘上，用户定义类型中的动态数组（使用 `FilePutObject`编写的）以一个描述符为前缀，其长度等于2再加上维度数的8倍： 2 + 8 \* NumberOfDimensions。</span><span class="sxs-lookup"><span data-stu-id="306d5-1093">On disk, a dynamic array in a user-defined type (written with `FilePutObject`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: 2 + 8 \* NumberOfDimensions.</span></span> <span data-ttu-id="306d5-1094">`FileOpen` 函数中由 `RecordLength` 子句指定的记录长度必须大于或等于读取单个元素所需的所有字节的总和，包括任何数组及其说明符。</span><span class="sxs-lookup"><span data-stu-id="306d5-1094">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements, including any arrays and their descriptors.</span></span> <span data-ttu-id="306d5-1095"><xref:Microsoft.VisualBasic.VBFixedStringAttribute> 类可应用于结构中的字符串字段，以指示写入磁盘时字符串的大小。</span><span class="sxs-lookup"><span data-stu-id="306d5-1095">The <xref:Microsoft.VisualBasic.VBFixedStringAttribute> class can be applied to string fields in the structures to indicate the size of string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="306d5-1096">二进制模式</span><span class="sxs-lookup"><span data-stu-id="306d5-1096">Binary Mode</span></span>  
 <span data-ttu-id="306d5-1097">对于在 `Binary` 模式下打开的文件，所有 `Random` 规则均适用，但有以下例外：</span><span class="sxs-lookup"><span data-stu-id="306d5-1097">For files opened in `Binary` mode, all of the `Random` rules apply, with these exceptions:</span></span>  
  
-   <span data-ttu-id="306d5-1098">`FileOpen` 函数中的 `RecordLength` 子句不起作用。</span><span class="sxs-lookup"><span data-stu-id="306d5-1098">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="306d5-1099">`FileGetObject` 连续读取磁盘中的所有变量，即无记录之间的空白。</span><span class="sxs-lookup"><span data-stu-id="306d5-1099">`FileGetObject` reads all variables from disk contiguously, that is, with no padding between records.</span></span>  
  
-   <span data-ttu-id="306d5-1100">对于结构中除数组以外的任何数组，`FileGetObject` 仅读取数据。</span><span class="sxs-lookup"><span data-stu-id="306d5-1100">For any array other than an array in a structure, `FileGetObject` reads only the data.</span></span> <span data-ttu-id="306d5-1101">未读取任何说明符。</span><span class="sxs-lookup"><span data-stu-id="306d5-1101">No descriptor is read.</span></span>  
  
 <span data-ttu-id="306d5-1102">`FileGetObject` 读取不是结构的元素且不需要双字节长度说明符的可变长度字符串。</span><span class="sxs-lookup"><span data-stu-id="306d5-1102">`FileGetObject` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="306d5-1103">读取的字节数等于字符串中的字符数。</span><span class="sxs-lookup"><span data-stu-id="306d5-1103">The number of bytes read equals the number of characters already in the string.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="306d5-1104">从文件中读取时，请不要根据文件扩展名来决定文件的内容。</span><span class="sxs-lookup"><span data-stu-id="306d5-1104">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="306d5-1105">例如，名为 "Form1" 的文件可能不是 Visual Basic 的源文件。</span><span class="sxs-lookup"><span data-stu-id="306d5-1105">For example, a file named Form1.vb may not be a Visual Basic source file.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="306d5-1106">下面的示例将记录读入测试文件中，然后检索该记录。</span><span class="sxs-lookup"><span data-stu-id="306d5-1106">The following example reads a record into a test file and then retrieves it.</span></span>  
  
 [!code-vb[VbVbalrCatRef#26](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#26)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files"><span data-ttu-id="306d5-1107">从文件读取 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="306d5-1107">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files"><span data-ttu-id="306d5-1108">写入文件 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="306d5-1108">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileLen">
      <MemberSignature Language="C#" Value="public static long FileLen (string PathName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 FileLen(string PathName) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileLen(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FileLen (PathName As String) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long FileLen(System::String ^ PathName);" />
      <MemberSignature Language="F#" Value="static member FileLen : string -&gt; int64" Usage="Microsoft.VisualBasic.FileSystem.FileLen PathName" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 FileLen(string PathName) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="PathName"><span data-ttu-id="306d5-1109">必需。</span><span class="sxs-lookup"><span data-stu-id="306d5-1109">Required.</span></span> <span data-ttu-id="306d5-1110">指定一个文件的字符串表达式。</span><span class="sxs-lookup"><span data-stu-id="306d5-1110">A string expression that specifies a file.</span></span> <span data-ttu-id="306d5-1111"><paramref name="PathName" /> 可能包括目录或文件夹以及驱动器。</span><span class="sxs-lookup"><span data-stu-id="306d5-1111"><paramref name="PathName" /> may include the directory or folder, and the drive.</span></span></param>
        <summary><span data-ttu-id="306d5-1112">返回一个值，该值以字节为单位指定文件长度。</span><span class="sxs-lookup"><span data-stu-id="306d5-1112">Returns a value that specifies the length of a file in bytes.</span></span> <span data-ttu-id="306d5-1113">相比 <see langword="FileLen" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span><span class="sxs-lookup"><span data-stu-id="306d5-1113">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileLen" />.</span></span> <span data-ttu-id="306d5-1114">有关详细信息，请参阅 <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" />。</span><span class="sxs-lookup"><span data-stu-id="306d5-1114">For more information, see <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" />.</span></span></summary>
        <returns><span data-ttu-id="306d5-1115">文件的长度（以字节为单位）。</span><span class="sxs-lookup"><span data-stu-id="306d5-1115">The length of a file in bytes.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="306d5-1116">如果在调用 `FileLen` 函数时指定的文件处于打开状态，则返回的值表示文件在打开时的大小。</span><span class="sxs-lookup"><span data-stu-id="306d5-1116">If the specified file is open when the `FileLen` function is called, the value returned represents the size of the file at the time it was opened.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="306d5-1117">若要获取打开文件的当前长度，请使用 `LOF` 函数。</span><span class="sxs-lookup"><span data-stu-id="306d5-1117">To obtain the current length of an open file, use the `LOF` function.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="306d5-1118">此示例使用 `FileLen` 函数返回文件的长度（以字节为单位）。</span><span class="sxs-lookup"><span data-stu-id="306d5-1118">This example uses the `FileLen` function to return the length of a file in bytes.</span></span> <span data-ttu-id="306d5-1119">出于本示例的目的，假定 `TestFile` 是包含一些数据的文件。</span><span class="sxs-lookup"><span data-stu-id="306d5-1119">For purposes of this example, assume that `TestFile` is a file that contains some data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="306d5-1120">文件不存在。</span><span class="sxs-lookup"><span data-stu-id="306d5-1120">File does not exist.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileDateTime(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.LOF(System.Int32)" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/file-access"><span data-ttu-id="306d5-1121">使用 Visual Basic 访问文件</span><span class="sxs-lookup"><span data-stu-id="306d5-1121">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileOpen">
      <MemberSignature Language="C#" Value="public static void FileOpen (int FileNumber, string FileName, Microsoft.VisualBasic.OpenMode Mode, Microsoft.VisualBasic.OpenAccess Access = Microsoft.VisualBasic.OpenAccess.Default, Microsoft.VisualBasic.OpenShare Share = Microsoft.VisualBasic.OpenShare.Default, int RecordLength = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void FileOpen(int32 FileNumber, string FileName, valuetype Microsoft.VisualBasic.OpenMode Mode, valuetype Microsoft.VisualBasic.OpenAccess Access, valuetype Microsoft.VisualBasic.OpenShare Share, int32 RecordLength) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileOpen (FileNumber As Integer, FileName As String, Mode As OpenMode, Optional Access As OpenAccess = Microsoft.VisualBasic.OpenAccess.Default, Optional Share As OpenShare = Microsoft.VisualBasic.OpenShare.Default, Optional RecordLength As Integer = -1)" />
      <MemberSignature Language="F#" Value="static member FileOpen : int * string * Microsoft.VisualBasic.OpenMode * Microsoft.VisualBasic.OpenAccess * Microsoft.VisualBasic.OpenShare * int -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileOpen (FileNumber, FileName, Mode, Access, Share, RecordLength)" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileOpen(int32 FileNumber, string FileName, valuetype Microsoft.VisualBasic.OpenMode Mode, valuetype Microsoft.VisualBasic.OpenAccess Access, valuetype Microsoft.VisualBasic.OpenShare Share, int32 RecordLength) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="FileName" Type="System.String" />
        <Parameter Name="Mode" Type="Microsoft.VisualBasic.OpenMode" />
        <Parameter Name="Access" Type="Microsoft.VisualBasic.OpenAccess" />
        <Parameter Name="Share" Type="Microsoft.VisualBasic.OpenShare" />
        <Parameter Name="RecordLength" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="306d5-1122">必需。</span><span class="sxs-lookup"><span data-stu-id="306d5-1122">Required.</span></span> <span data-ttu-id="306d5-1123">任何有效文件数。</span><span class="sxs-lookup"><span data-stu-id="306d5-1123">Any valid file number.</span></span> <span data-ttu-id="306d5-1124">可使用 <see langword="FreeFile" /> 函数获取下一个可用的文件号。</span><span class="sxs-lookup"><span data-stu-id="306d5-1124">Use the <see langword="FreeFile" /> function to obtain the next available file number.</span></span></param>
        <param name="FileName"><span data-ttu-id="306d5-1125">必需。</span><span class="sxs-lookup"><span data-stu-id="306d5-1125">Required.</span></span> <span data-ttu-id="306d5-1126">一个指定文件名的字符串表达式，其中可包含目录或文件夹以及驱动器。</span><span class="sxs-lookup"><span data-stu-id="306d5-1126">A string expression that specifies a file name - may include directory or folder, and drive.</span></span></param>
        <param name="Mode"><span data-ttu-id="306d5-1127">必需。</span><span class="sxs-lookup"><span data-stu-id="306d5-1127">Required.</span></span> <span data-ttu-id="306d5-1128">指定文件模式的枚举：<see langword="Append" />、<see langword="Binary" />、<see langword="Input" />、<see langword="Output" /> 或 <see langword="Random" />。</span><span class="sxs-lookup"><span data-stu-id="306d5-1128">Enumeration specifying the file mode: <see langword="Append" />, <see langword="Binary" />, <see langword="Input" />, <see langword="Output" />, or <see langword="Random" />.</span></span> <span data-ttu-id="306d5-1129">有关详细信息，请参阅 <see cref="T:Microsoft.VisualBasic.OpenMode" />。</span><span class="sxs-lookup"><span data-stu-id="306d5-1129">For more information, see <see cref="T:Microsoft.VisualBasic.OpenMode" /> .</span></span></param>
        <param name="Access"><span data-ttu-id="306d5-1130">可选。</span><span class="sxs-lookup"><span data-stu-id="306d5-1130">Optional.</span></span> <span data-ttu-id="306d5-1131">一个枚举，它指定对打开的文件所允许进行的操作：<see langword="Read" />、<see langword="Write" /> 或 <see langword="ReadWrite" />。</span><span class="sxs-lookup"><span data-stu-id="306d5-1131">Enumeration specifying the operations permitted on the open file: <see langword="Read" />, <see langword="Write" />, or <see langword="ReadWrite" />.</span></span> <span data-ttu-id="306d5-1132">默认为 <see langword="ReadWrite" />。</span><span class="sxs-lookup"><span data-stu-id="306d5-1132">Defaults to <see langword="ReadWrite" />.</span></span> <span data-ttu-id="306d5-1133">有关详细信息，请参阅 <see cref="T:Microsoft.VisualBasic.OpenAccess" />。</span><span class="sxs-lookup"><span data-stu-id="306d5-1133">For more information, see <see cref="T:Microsoft.VisualBasic.OpenAccess" /> .</span></span></param>
        <param name="Share"><span data-ttu-id="306d5-1134">可选。</span><span class="sxs-lookup"><span data-stu-id="306d5-1134">Optional.</span></span> <span data-ttu-id="306d5-1135">一个枚举，它指定不允许其他进程对打开的文件所进行的操作：<see langword="Shared" />、<see langword="Lock Read" />、<see langword="Lock Write" /> 和 <see langword="Lock Read Write" />。</span><span class="sxs-lookup"><span data-stu-id="306d5-1135">Enumeration specifying the operations not permitted on the open file by other processes: <see langword="Shared" />, <see langword="Lock Read" />, <see langword="Lock Write" />, and <see langword="Lock Read Write" />.</span></span> <span data-ttu-id="306d5-1136">默认为 <see langword="Lock Read Write" />。</span><span class="sxs-lookup"><span data-stu-id="306d5-1136">Defaults to <see langword="Lock Read Write" />.</span></span> <span data-ttu-id="306d5-1137">有关详细信息，请参阅 <see cref="T:Microsoft.VisualBasic.OpenShare" />。</span><span class="sxs-lookup"><span data-stu-id="306d5-1137">For more information, see <see cref="T:Microsoft.VisualBasic.OpenShare" /> .</span></span></param>
        <param name="RecordLength"><span data-ttu-id="306d5-1138">可选。</span><span class="sxs-lookup"><span data-stu-id="306d5-1138">Optional.</span></span> <span data-ttu-id="306d5-1139">小于或等于 32,767（字节）的数字。</span><span class="sxs-lookup"><span data-stu-id="306d5-1139">Number less than or equal to 32,767 (bytes).</span></span> <span data-ttu-id="306d5-1140">对于为进行随机访问而打开的文件，此值是记录的长度。</span><span class="sxs-lookup"><span data-stu-id="306d5-1140">For files opened for random access, this value is the record length.</span></span> <span data-ttu-id="306d5-1141">对于顺序文件，此值是缓冲的字符数。</span><span class="sxs-lookup"><span data-stu-id="306d5-1141">For sequential files, this value is the number of characters buffered.</span></span></param>
        <summary><span data-ttu-id="306d5-1142">打开一个文件以进行输入或输出。</span><span class="sxs-lookup"><span data-stu-id="306d5-1142">Opens a file for input or output.</span></span> <span data-ttu-id="306d5-1143">相比 <see langword="FileOpen" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span><span class="sxs-lookup"><span data-stu-id="306d5-1143">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileOpen" />.</span></span> <span data-ttu-id="306d5-1144">有关详细信息，请参阅 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="306d5-1144">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="306d5-1145">提供 `FileOpen` 函数是为了向后兼容，可能会影响性能。</span><span class="sxs-lookup"><span data-stu-id="306d5-1145">The `FileOpen` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="306d5-1146">对于非旧版应用程序，`My.Computer.FileSystem` 对象提供更好的性能。</span><span class="sxs-lookup"><span data-stu-id="306d5-1146">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="306d5-1147">有关详细信息，请参阅[使用 Visual Basic 进行文件访问](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/file-access)。</span><span class="sxs-lookup"><span data-stu-id="306d5-1147">For more information, see [File Access with Visual Basic](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/file-access).</span></span>  
  
 <span data-ttu-id="306d5-1148">必须先打开文件，然后才能对其执行任何 i/o 操作。</span><span class="sxs-lookup"><span data-stu-id="306d5-1148">You must open a file before any I/O operation can be performed on it.</span></span> <span data-ttu-id="306d5-1149">`FileOpen` 为文件的 i/o 分配一个缓冲区，并确定要用于缓冲区的访问模式。</span><span class="sxs-lookup"><span data-stu-id="306d5-1149">`FileOpen` allocates a buffer for I/O to the file and determines the mode of access to use with the buffer.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="306d5-1150">写入文件时，如果尝试写入文件的文件不存在，则应用程序可能需要创建一个文件。</span><span class="sxs-lookup"><span data-stu-id="306d5-1150">When writing to a file, an application may have to create a file, if the file to which it is trying to write does not exist.</span></span> <span data-ttu-id="306d5-1151">为此，需要对要在其中创建文件的目录具有权限。</span><span class="sxs-lookup"><span data-stu-id="306d5-1151">To do so, it needs permission for the directory in which the file is to be created.</span></span> <span data-ttu-id="306d5-1152">但是，如果 `FileName` 指定的文件存在，则应用程序只需要对文件本身具有 `Write` 权限。</span><span class="sxs-lookup"><span data-stu-id="306d5-1152">However, if the file specified by `FileName` does exist, the application needs `Write` permission only to the file itself.</span></span> <span data-ttu-id="306d5-1153">若要帮助提高安全性，请在部署期间创建文件，并且仅授予对该文件的 `Write` 权限，而不是整个目录。</span><span class="sxs-lookup"><span data-stu-id="306d5-1153">Wherever possible, to help improve security, create the file during deployment and grant `Write` permission to that file only, instead of to the whole directory.</span></span> <span data-ttu-id="306d5-1154">为了帮助提高安全性，请将数据写入用户目录，而不是写入到根目录或 Program Files 目录。</span><span class="sxs-lookup"><span data-stu-id="306d5-1154">To help improve security, write data to user directories instead of to the root directory or the Program Files directory.</span></span>  
  
 <span data-ttu-id="306d5-1155">可以通过使用 `FreeFile()` 函数查找要打开的通道。</span><span class="sxs-lookup"><span data-stu-id="306d5-1155">The channel to open can be found by using the `FreeFile()` function.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="306d5-1156">`FileOpen` 函数要求 `Read` 从 `FileIOPermissionAccess` 枚举进行访问，这可能会影响在部分信任情况下的执行。</span><span class="sxs-lookup"><span data-stu-id="306d5-1156">The `FileOpen` function requires `Read` access from the `FileIOPermissionAccess` enumeration, which may affect its execution in partial trust situations.</span></span> <span data-ttu-id="306d5-1157">有关详细信息，请参阅 <xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="306d5-1157">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="306d5-1158">此示例演示了 `FileOpen` 函数对文件启用输入和输出的各种用法。</span><span class="sxs-lookup"><span data-stu-id="306d5-1158">This example illustrates various uses of the `FileOpen` function to enable input and output to a file.</span></span>  
  
 <span data-ttu-id="306d5-1159">下面的代码在 `Input` 模式下打开文件 `TestFile`。</span><span class="sxs-lookup"><span data-stu-id="306d5-1159">The following code opens the file `TestFile` in `Input` mode.</span></span>  
  
 [!code-vb[VbVbalrCatRef#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#5)]  
  
 <span data-ttu-id="306d5-1160">此示例在 `Binary` 模式下打开文件，仅用于写入操作。</span><span class="sxs-lookup"><span data-stu-id="306d5-1160">This example opens the file in `Binary` mode for writing operations only.</span></span>  
  
 [!code-vb[VbVbalrCatRef#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#6)]  
  
 <span data-ttu-id="306d5-1161">下面的示例在 `Random` 模式下打开文件。</span><span class="sxs-lookup"><span data-stu-id="306d5-1161">The following example opens the file in `Random` mode.</span></span> <span data-ttu-id="306d5-1162">此文件包含 `Person`结构的记录。</span><span class="sxs-lookup"><span data-stu-id="306d5-1162">The file contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#7)]  
  
 <span data-ttu-id="306d5-1163">此代码示例在 `Output` 模式下打开文件;任何进程都可以读取或写入文件。</span><span class="sxs-lookup"><span data-stu-id="306d5-1163">This code example opens the file in `Output` mode; any process can read or write to file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#8)]  
  
 <span data-ttu-id="306d5-1164">此代码示例在 `Binary` 模式下打开文件进行读取;其他进程无法读取文件。</span><span class="sxs-lookup"><span data-stu-id="306d5-1164">This code example opens the file in `Binary` mode for reading; other processes cannot read file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="306d5-1165">记录长度是负数（并且不等于 -1）。</span><span class="sxs-lookup"><span data-stu-id="306d5-1165">Record length is negative (and not equal to -1).</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="306d5-1166"><paramref name="FileName" /> 已经打开，或 <paramref name="FileName" /> 无效。</span><span class="sxs-lookup"><span data-stu-id="306d5-1166"><paramref name="FileName" /> is already open, or <paramref name="FileName" /> is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileClose(System.Int32[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FreeFile" />
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files"><span data-ttu-id="306d5-1167">从文件读取 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="306d5-1167">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files"><span data-ttu-id="306d5-1168">写入文件 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="306d5-1168">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="FilePut">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="306d5-1169">将变量中得数据写入磁盘文件中。</span><span class="sxs-lookup"><span data-stu-id="306d5-1169">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="306d5-1170">相比 <see langword="FilePut" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span><span class="sxs-lookup"><span data-stu-id="306d5-1170">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="306d5-1171">有关更多信息，请参见 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="306d5-1171">F For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, bool Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void FilePut(int32 FileNumber, bool Value, int64 RecordNumber) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Boolean,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Boolean, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * bool * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, bool Value, int64 RecordNumber) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Boolean" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="306d5-1172">必需。</span><span class="sxs-lookup"><span data-stu-id="306d5-1172">Required.</span></span> <span data-ttu-id="306d5-1173">任何有效文件数。</span><span class="sxs-lookup"><span data-stu-id="306d5-1173">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="306d5-1174">必需。</span><span class="sxs-lookup"><span data-stu-id="306d5-1174">Required.</span></span> <span data-ttu-id="306d5-1175">有效变量名，它包含写入磁盘的数据。</span><span class="sxs-lookup"><span data-stu-id="306d5-1175">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="306d5-1176">可选。</span><span class="sxs-lookup"><span data-stu-id="306d5-1176">Optional.</span></span> <span data-ttu-id="306d5-1177">开始写入处的记录号（<see langword="Random" /> 模式文件）或字节号（<see langword="Binary" /> 模式文件）。</span><span class="sxs-lookup"><span data-stu-id="306d5-1177">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="306d5-1178">将变量中得数据写入磁盘文件中。</span><span class="sxs-lookup"><span data-stu-id="306d5-1178">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="306d5-1179">相比 <see langword="FilePut" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span><span class="sxs-lookup"><span data-stu-id="306d5-1179">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="306d5-1180">有关详细信息，请参阅 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="306d5-1180">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="306d5-1181">`FilePut` 仅在 `Random` 和 `Binary` 模式下有效。</span><span class="sxs-lookup"><span data-stu-id="306d5-1181">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="306d5-1182">通常使用 `FileGet` 从文件中读取使用 `FilePut` 编写的数据。</span><span class="sxs-lookup"><span data-stu-id="306d5-1182">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="306d5-1183">文件中的第一个记录或字节位于位置1，第二个记录或字节在位置2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="306d5-1183">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="306d5-1184">如果省略 `RecordNumber`，则最后一个 `FileGet` 或 `FilePut` 函数之后或最后一个 `Seek` 函数指向的下一个记录或字节将被写入。</span><span class="sxs-lookup"><span data-stu-id="306d5-1184">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="306d5-1185">`StringIsFixedLength` 参数控制函数是将字符串解释为变量还是固定长度。</span><span class="sxs-lookup"><span data-stu-id="306d5-1185">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="306d5-1186">`True`参数时，`FilePut` 不会写入长度说明符。</span><span class="sxs-lookup"><span data-stu-id="306d5-1186">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="306d5-1187">如果将 `StringIsFixedLength` = `True` 与 `FilePut`一起使用，则必须使用 `FileGet`执行相同操作，并且必须确保将字符串初始化为预期的长度。</span><span class="sxs-lookup"><span data-stu-id="306d5-1187">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="306d5-1188">随机模式</span><span class="sxs-lookup"><span data-stu-id="306d5-1188">Random Mode</span></span>  
 <span data-ttu-id="306d5-1189">对于在 `Random` 模式下打开的文件，以下规则适用：</span><span class="sxs-lookup"><span data-stu-id="306d5-1189">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="306d5-1190">如果写入的数据的长度小于 `FileOpen` 函数的 `RecordLength` 子句中指定的长度，则 `FilePut` 会写入记录长度边界的后续记录。</span><span class="sxs-lookup"><span data-stu-id="306d5-1190">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="306d5-1191">一条记录的末尾和下一条记录的开头之间的空格将填充到文件缓冲区的现有内容中。</span><span class="sxs-lookup"><span data-stu-id="306d5-1191">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="306d5-1192">由于不能确定填充数据量，因此通常最好让记录长度与要写入的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="306d5-1192">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="306d5-1193">如果写入的数据的长度大于 `FileOpen` 函数的 `RecordLength` 子句中指定的长度，则将引发异常。</span><span class="sxs-lookup"><span data-stu-id="306d5-1193">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="306d5-1194">如果写入的变量是字符串，`FilePut` 会写入包含字符串长度的双字节说明符，然后写入该变量中的数据。</span><span class="sxs-lookup"><span data-stu-id="306d5-1194">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="306d5-1195">因此，`FileOpen` 函数中由 `RecordLength` 子句指定的记录长度必须大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="306d5-1195">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="306d5-1196">如果要写入的变量是包含数值类型的对象，`FilePut` 会写入两个字节，用于标识对象的 `VarType` 并写入变量。</span><span class="sxs-lookup"><span data-stu-id="306d5-1196">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="306d5-1197">例如，在编写包含整数的对象时，`FilePut` 会写入六个字节：两个字节，用于将对象标识为 `VarType(3)` （`Integer`）和四个包含数据的字节。</span><span class="sxs-lookup"><span data-stu-id="306d5-1197">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="306d5-1198">`FileOpen` 函数中由 `RecordLength` 参数指定的记录长度必须大于存储变量所需的实际字节数。</span><span class="sxs-lookup"><span data-stu-id="306d5-1198">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="306d5-1199">如果要写入的变量是包含字符串的对象，`FilePut` 将写入标识对象的 `VarType(8)` 的两个字节说明符，这是一个指示字符串长度的双字节说明符，然后写入字符串数据。</span><span class="sxs-lookup"><span data-stu-id="306d5-1199">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="306d5-1200">`FileOpen` 函数中由 `RecordLength` 参数指定的记录长度必须至少为4个字节，大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="306d5-1200">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="306d5-1201">如果要在不包含说明符的情况下放置字符串，则应将 `True` 传递给 `StringIsFixedLength` 参数，而你读入的字符串应为正确的长度。</span><span class="sxs-lookup"><span data-stu-id="306d5-1201">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="306d5-1202">如果要写入的变量是数组，则可以选择是否为数组的大小和维度编写说明符。</span><span class="sxs-lookup"><span data-stu-id="306d5-1202">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="306d5-1203">Visual Basic 6.0 及更早版本写入动态数组的文件描述符，但不写入固定大小的数组。</span><span class="sxs-lookup"><span data-stu-id="306d5-1203">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="306d5-1204">Visual Basic 2005 默认为不写入描述符。</span><span class="sxs-lookup"><span data-stu-id="306d5-1204">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="306d5-1205">若要编写描述符，请将 `ArrayIsDynamic` 参数设置为 `True`。</span><span class="sxs-lookup"><span data-stu-id="306d5-1205">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="306d5-1206">写入数组时，必须匹配读取数组的方式;如果它将使用描述符读取，则必须编写描述符。</span><span class="sxs-lookup"><span data-stu-id="306d5-1206">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="306d5-1207">描述符指定数组的秩、大小和每个排名的下限。</span><span class="sxs-lookup"><span data-stu-id="306d5-1207">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="306d5-1208">其长度等于2再加上维度数的8倍：（2 + 8 \* NumberOfDimensions）。</span><span class="sxs-lookup"><span data-stu-id="306d5-1208">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="306d5-1209">`FileOpen` 函数中由 `RecordLength` 子句指定的记录长度必须大于或等于写入数组数据和数组描述符所需的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="306d5-1209">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="306d5-1210">例如，当数组写入磁盘时，以下数组声明需要218字节。</span><span class="sxs-lookup"><span data-stu-id="306d5-1210">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="306d5-1211">如果写入的变量是任何其他类型的变量（不是变长字符串或对象），`FilePut` 仅写入变量数据。</span><span class="sxs-lookup"><span data-stu-id="306d5-1211">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="306d5-1212">`FileOpen` 函数中由 `RecordLength` 子句指定的记录长度必须大于或等于要写入的数据的长度。</span><span class="sxs-lookup"><span data-stu-id="306d5-1212">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="306d5-1213">`FilePut` 写入结构的元素，就好像每个元素都是单独编写的，只不过元素之间没有任何空白。</span><span class="sxs-lookup"><span data-stu-id="306d5-1213">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="306d5-1214">`VBFixedString` 特性可应用于结构中的字符串字段，以指示写入磁盘时字符串的大小。</span><span class="sxs-lookup"><span data-stu-id="306d5-1214">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="306d5-1215">写入磁盘时，将截断比 `VBFixedString` 属性指定的字节数更多的字符串字段。</span><span class="sxs-lookup"><span data-stu-id="306d5-1215">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="306d5-1216">二进制模式</span><span class="sxs-lookup"><span data-stu-id="306d5-1216">Binary Mode</span></span>  
 <span data-ttu-id="306d5-1217">对于在 `Binary` 模式下打开的文件，大多数 `Random` 模式规则都适用，但有一些例外情况。</span><span class="sxs-lookup"><span data-stu-id="306d5-1217">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="306d5-1218">`Binary` 模式下打开的文件的以下规则不同于 `Random` 模式的规则：</span><span class="sxs-lookup"><span data-stu-id="306d5-1218">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="306d5-1219">`FileOpen` 函数中的 `RecordLength` 子句不起作用。</span><span class="sxs-lookup"><span data-stu-id="306d5-1219">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="306d5-1220">`FilePut` 连续将所有变量写入磁盘，也就是说，在记录之间不进行填充。</span><span class="sxs-lookup"><span data-stu-id="306d5-1220">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="306d5-1221">对于结构中除数组以外的任何数组，`FilePut` 仅写入数据。</span><span class="sxs-lookup"><span data-stu-id="306d5-1221">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="306d5-1222">不写入任何说明符。</span><span class="sxs-lookup"><span data-stu-id="306d5-1222">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="306d5-1223">`FilePut` 写入不包含双字节长度说明符的结构元素的可变长度字符串。</span><span class="sxs-lookup"><span data-stu-id="306d5-1223">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="306d5-1224">写入的字节数等于字符串中的字符数。</span><span class="sxs-lookup"><span data-stu-id="306d5-1224">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="306d5-1225">例如，下面的语句将11个字节写入第1个文件：</span><span class="sxs-lookup"><span data-stu-id="306d5-1225">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="306d5-1226">使用 `FilePut` 函数写入文件需要从 <xref:System.Security.Permissions.FileIOPermissionAccess> 枚举进行 `Write` 访问。</span><span class="sxs-lookup"><span data-stu-id="306d5-1226">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="306d5-1227">此示例使用 `FilePut` 函数将数据写入文件。</span><span class="sxs-lookup"><span data-stu-id="306d5-1227">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="306d5-1228">将 `Person` 结构的五个记录写入到文件中。</span><span class="sxs-lookup"><span data-stu-id="306d5-1228">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="306d5-1229"><paramref name="RecordNumber" /> &lt; 1 且不等于 -1。</span><span class="sxs-lookup"><span data-stu-id="306d5-1229"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="306d5-1230">文件模式无效。</span><span class="sxs-lookup"><span data-stu-id="306d5-1230">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files"><span data-ttu-id="306d5-1231">写入文件 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="306d5-1231">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, byte Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void FilePut(int32 FileNumber, unsigned int8 Value, int64 RecordNumber) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Byte,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Byte, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * byte * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, unsigned int8 Value, int64 RecordNumber) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Byte" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="306d5-1232">必需。</span><span class="sxs-lookup"><span data-stu-id="306d5-1232">Required.</span></span> <span data-ttu-id="306d5-1233">任何有效文件数。</span><span class="sxs-lookup"><span data-stu-id="306d5-1233">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="306d5-1234">必需。</span><span class="sxs-lookup"><span data-stu-id="306d5-1234">Required.</span></span> <span data-ttu-id="306d5-1235">有效变量名，它包含写入磁盘的数据。</span><span class="sxs-lookup"><span data-stu-id="306d5-1235">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="306d5-1236">可选。</span><span class="sxs-lookup"><span data-stu-id="306d5-1236">Optional.</span></span> <span data-ttu-id="306d5-1237">开始写入处的记录号（<see langword="Random" /> 模式文件）或字节号（<see langword="Binary" /> 模式文件）。</span><span class="sxs-lookup"><span data-stu-id="306d5-1237">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="306d5-1238">将变量中得数据写入磁盘文件中。</span><span class="sxs-lookup"><span data-stu-id="306d5-1238">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="306d5-1239">相比 <see langword="FilePut" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span><span class="sxs-lookup"><span data-stu-id="306d5-1239">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="306d5-1240">有关详细信息，请参阅 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="306d5-1240">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="306d5-1241">`FilePut` 仅在 `Random` 和 `Binary` 模式下有效。</span><span class="sxs-lookup"><span data-stu-id="306d5-1241">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="306d5-1242">通常使用 `FileGet` 从文件中读取使用 `FilePut` 编写的数据。</span><span class="sxs-lookup"><span data-stu-id="306d5-1242">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="306d5-1243">文件中的第一个记录或字节位于位置1，第二个记录或字节在位置2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="306d5-1243">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="306d5-1244">如果省略 `RecordNumber`，则最后一个 `FileGet` 或 `FilePut` 函数之后或最后一个 `Seek` 函数指向的下一个记录或字节将被写入。</span><span class="sxs-lookup"><span data-stu-id="306d5-1244">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="306d5-1245">`StringIsFixedLength` 参数控制函数是将字符串解释为变量还是固定长度。</span><span class="sxs-lookup"><span data-stu-id="306d5-1245">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="306d5-1246">`True`参数时，`FilePut` 不会写入长度说明符。</span><span class="sxs-lookup"><span data-stu-id="306d5-1246">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="306d5-1247">如果将 `StringIsFixedLength` = `True` 与 `FilePut`一起使用，则必须使用 `FileGet`执行相同操作，并且必须确保将字符串初始化为预期的长度。</span><span class="sxs-lookup"><span data-stu-id="306d5-1247">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="306d5-1248">随机模式</span><span class="sxs-lookup"><span data-stu-id="306d5-1248">Random Mode</span></span>  
 <span data-ttu-id="306d5-1249">对于在 `Random` 模式下打开的文件，以下规则适用：</span><span class="sxs-lookup"><span data-stu-id="306d5-1249">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="306d5-1250">如果写入的数据的长度小于 `FileOpen` 函数的 `RecordLength` 子句中指定的长度，则 `FilePut` 会写入记录长度边界的后续记录。</span><span class="sxs-lookup"><span data-stu-id="306d5-1250">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="306d5-1251">一条记录的末尾和下一条记录的开头之间的空格将填充到文件缓冲区的现有内容中。</span><span class="sxs-lookup"><span data-stu-id="306d5-1251">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="306d5-1252">由于不能确定填充数据量，因此通常最好让记录长度与要写入的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="306d5-1252">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="306d5-1253">如果写入的数据的长度大于 `FileOpen` 函数的 `RecordLength` 子句中指定的长度，则将引发异常。</span><span class="sxs-lookup"><span data-stu-id="306d5-1253">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="306d5-1254">如果写入的变量是字符串，`FilePut` 会写入包含字符串长度的双字节说明符，然后写入该变量中的数据。</span><span class="sxs-lookup"><span data-stu-id="306d5-1254">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="306d5-1255">因此，`FileOpen` 函数中由 `RecordLength` 子句指定的记录长度必须大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="306d5-1255">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="306d5-1256">如果要写入的变量是包含数值类型的对象，`FilePut` 会写入两个字节，用于标识对象的 `VarType` 并写入变量。</span><span class="sxs-lookup"><span data-stu-id="306d5-1256">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="306d5-1257">例如，在编写包含整数的对象时，`FilePut` 会写入六个字节：两个字节，用于将对象标识为 `VarType(3)` （`Integer`）和四个包含数据的字节。</span><span class="sxs-lookup"><span data-stu-id="306d5-1257">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="306d5-1258">`FileOpen` 函数中由 `RecordLength` 参数指定的记录长度必须大于存储变量所需的实际字节数。</span><span class="sxs-lookup"><span data-stu-id="306d5-1258">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="306d5-1259">如果要写入的变量是包含字符串的对象，`FilePut` 将写入标识对象的 `VarType(8)` 的两个字节说明符，这是一个指示字符串长度的双字节说明符，然后写入字符串数据。</span><span class="sxs-lookup"><span data-stu-id="306d5-1259">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="306d5-1260">`FileOpen` 函数中由 `RecordLength` 参数指定的记录长度必须至少为4个字节，大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="306d5-1260">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="306d5-1261">如果要在不包含说明符的情况下放置字符串，则应将 `True` 传递给 `StringIsFixedLength` 参数，而你读入的字符串应为正确的长度。</span><span class="sxs-lookup"><span data-stu-id="306d5-1261">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="306d5-1262">如果要写入的变量是数组，则可以选择是否为数组的大小和维度编写说明符。</span><span class="sxs-lookup"><span data-stu-id="306d5-1262">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="306d5-1263">Visual Basic 6.0 及更早版本写入动态数组的文件描述符，但不写入固定大小的数组。</span><span class="sxs-lookup"><span data-stu-id="306d5-1263">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="306d5-1264">Visual Basic 2005 默认为不写入描述符。</span><span class="sxs-lookup"><span data-stu-id="306d5-1264">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="306d5-1265">若要编写描述符，请将 `ArrayIsDynamic` 参数设置为 `True`。</span><span class="sxs-lookup"><span data-stu-id="306d5-1265">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="306d5-1266">写入数组时，必须匹配读取数组的方式;如果它将使用描述符读取，则必须编写描述符。</span><span class="sxs-lookup"><span data-stu-id="306d5-1266">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="306d5-1267">描述符指定数组的秩、大小和每个排名的下限。</span><span class="sxs-lookup"><span data-stu-id="306d5-1267">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="306d5-1268">其长度等于2再加上维度数的8倍：（2 + 8 \* NumberOfDimensions）。</span><span class="sxs-lookup"><span data-stu-id="306d5-1268">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="306d5-1269">`FileOpen` 函数中由 `RecordLength` 子句指定的记录长度必须大于或等于写入数组数据和数组描述符所需的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="306d5-1269">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="306d5-1270">例如，当数组写入磁盘时，以下数组声明需要218字节。</span><span class="sxs-lookup"><span data-stu-id="306d5-1270">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="306d5-1271">如果写入的变量是任何其他类型的变量（不是变长字符串或对象），`FilePut` 仅写入变量数据。</span><span class="sxs-lookup"><span data-stu-id="306d5-1271">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="306d5-1272">`FileOpen` 函数中由 `RecordLength` 子句指定的记录长度必须大于或等于要写入的数据的长度。</span><span class="sxs-lookup"><span data-stu-id="306d5-1272">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="306d5-1273">`FilePut` 写入结构的元素，就好像每个元素都是单独编写的，只不过元素之间没有任何空白。</span><span class="sxs-lookup"><span data-stu-id="306d5-1273">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="306d5-1274">`VBFixedString` 特性可应用于结构中的字符串字段，以指示写入磁盘时字符串的大小。</span><span class="sxs-lookup"><span data-stu-id="306d5-1274">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="306d5-1275">写入磁盘时，将截断比 `VBFixedString` 属性指定的字节数更多的字符串字段。</span><span class="sxs-lookup"><span data-stu-id="306d5-1275">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="306d5-1276">二进制模式</span><span class="sxs-lookup"><span data-stu-id="306d5-1276">Binary Mode</span></span>  
 <span data-ttu-id="306d5-1277">对于在 `Binary` 模式下打开的文件，大多数 `Random` 模式规则都适用，但有一些例外情况。</span><span class="sxs-lookup"><span data-stu-id="306d5-1277">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="306d5-1278">`Binary` 模式下打开的文件的以下规则不同于 `Random` 模式的规则：</span><span class="sxs-lookup"><span data-stu-id="306d5-1278">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="306d5-1279">`FileOpen` 函数中的 `RecordLength` 子句不起作用。</span><span class="sxs-lookup"><span data-stu-id="306d5-1279">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="306d5-1280">`FilePut` 连续将所有变量写入磁盘，也就是说，在记录之间不进行填充。</span><span class="sxs-lookup"><span data-stu-id="306d5-1280">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="306d5-1281">对于结构中除数组以外的任何数组，`FilePut` 仅写入数据。</span><span class="sxs-lookup"><span data-stu-id="306d5-1281">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="306d5-1282">不写入任何说明符。</span><span class="sxs-lookup"><span data-stu-id="306d5-1282">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="306d5-1283">`FilePut` 写入不包含双字节长度说明符的结构元素的可变长度字符串。</span><span class="sxs-lookup"><span data-stu-id="306d5-1283">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="306d5-1284">写入的字节数等于字符串中的字符数。</span><span class="sxs-lookup"><span data-stu-id="306d5-1284">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="306d5-1285">例如，下面的语句将11个字节写入第1个文件：</span><span class="sxs-lookup"><span data-stu-id="306d5-1285">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="306d5-1286">使用 `FilePut` 函数写入文件需要从 <xref:System.Security.Permissions.FileIOPermissionAccess> 枚举进行 `Write` 访问。</span><span class="sxs-lookup"><span data-stu-id="306d5-1286">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="306d5-1287">此示例使用 `FilePut` 函数将数据写入文件。</span><span class="sxs-lookup"><span data-stu-id="306d5-1287">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="306d5-1288">将 `Person` 结构的五个记录写入到文件中。</span><span class="sxs-lookup"><span data-stu-id="306d5-1288">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="306d5-1289"><paramref name="RecordNumber" /> &lt; 1 且不等于 -1。</span><span class="sxs-lookup"><span data-stu-id="306d5-1289"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="306d5-1290">文件模式无效。</span><span class="sxs-lookup"><span data-stu-id="306d5-1290">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files"><span data-ttu-id="306d5-1291">写入文件 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="306d5-1291">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, char Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void FilePut(int32 FileNumber, char Value, int64 RecordNumber) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Char,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Char, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * char * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, char Value, int64 RecordNumber) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Char" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="306d5-1292">必需。</span><span class="sxs-lookup"><span data-stu-id="306d5-1292">Required.</span></span> <span data-ttu-id="306d5-1293">任何有效文件数。</span><span class="sxs-lookup"><span data-stu-id="306d5-1293">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="306d5-1294">必需。</span><span class="sxs-lookup"><span data-stu-id="306d5-1294">Required.</span></span> <span data-ttu-id="306d5-1295">有效变量名，它包含写入磁盘的数据。</span><span class="sxs-lookup"><span data-stu-id="306d5-1295">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="306d5-1296">可选。</span><span class="sxs-lookup"><span data-stu-id="306d5-1296">Optional.</span></span> <span data-ttu-id="306d5-1297">开始写入处的记录号（<see langword="Random" /> 模式文件）或字节号（<see langword="Binary" /> 模式文件）。</span><span class="sxs-lookup"><span data-stu-id="306d5-1297">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="306d5-1298">将变量中得数据写入磁盘文件中。</span><span class="sxs-lookup"><span data-stu-id="306d5-1298">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="306d5-1299">相比 <see langword="FilePut" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span><span class="sxs-lookup"><span data-stu-id="306d5-1299">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="306d5-1300">有关详细信息，请参阅 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="306d5-1300">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="306d5-1301">`FilePut` 仅在 `Random` 和 `Binary` 模式下有效。</span><span class="sxs-lookup"><span data-stu-id="306d5-1301">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="306d5-1302">通常使用 `FileGet` 从文件中读取使用 `FilePut` 编写的数据。</span><span class="sxs-lookup"><span data-stu-id="306d5-1302">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="306d5-1303">文件中的第一个记录或字节位于位置1，第二个记录或字节在位置2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="306d5-1303">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="306d5-1304">如果省略 `RecordNumber`，则最后一个 `FileGet` 或 `FilePut` 函数之后或最后一个 `Seek` 函数指向的下一个记录或字节将被写入。</span><span class="sxs-lookup"><span data-stu-id="306d5-1304">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="306d5-1305">`StringIsFixedLength` 参数控制函数是将字符串解释为变量还是固定长度。</span><span class="sxs-lookup"><span data-stu-id="306d5-1305">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="306d5-1306">`True`参数时，`FilePut` 不会写入长度说明符。</span><span class="sxs-lookup"><span data-stu-id="306d5-1306">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="306d5-1307">如果将 `StringIsFixedLength` = `True` 与 `FilePut`一起使用，则必须使用 `FileGet`执行相同操作，并且必须确保将字符串初始化为预期的长度。</span><span class="sxs-lookup"><span data-stu-id="306d5-1307">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="306d5-1308">随机模式</span><span class="sxs-lookup"><span data-stu-id="306d5-1308">Random Mode</span></span>  
 <span data-ttu-id="306d5-1309">对于在 `Random` 模式下打开的文件，以下规则适用：</span><span class="sxs-lookup"><span data-stu-id="306d5-1309">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="306d5-1310">如果写入的数据的长度小于 `FileOpen` 函数的 `RecordLength` 子句中指定的长度，则 `FilePut` 会写入记录长度边界的后续记录。</span><span class="sxs-lookup"><span data-stu-id="306d5-1310">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="306d5-1311">一条记录的末尾和下一条记录的开头之间的空格将填充到文件缓冲区的现有内容中。</span><span class="sxs-lookup"><span data-stu-id="306d5-1311">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="306d5-1312">由于不能确定填充数据量，因此通常最好让记录长度与要写入的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="306d5-1312">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="306d5-1313">如果写入的数据的长度大于 `FileOpen` 函数的 `RecordLength` 子句中指定的长度，则将引发异常。</span><span class="sxs-lookup"><span data-stu-id="306d5-1313">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="306d5-1314">如果写入的变量是字符串，`FilePut` 会写入包含字符串长度的双字节说明符，然后写入该变量中的数据。</span><span class="sxs-lookup"><span data-stu-id="306d5-1314">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="306d5-1315">因此，`FileOpen` 函数中由 `RecordLength` 子句指定的记录长度必须大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="306d5-1315">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="306d5-1316">如果要写入的变量是包含数值类型的对象，`FilePut` 会写入两个字节，用于标识对象的 `VarType` 并写入变量。</span><span class="sxs-lookup"><span data-stu-id="306d5-1316">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="306d5-1317">例如，在编写包含整数的对象时，`FilePut` 会写入六个字节：两个字节，用于将对象标识为 `VarType(3)` （`Integer`）和四个包含数据的字节。</span><span class="sxs-lookup"><span data-stu-id="306d5-1317">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="306d5-1318">`FileOpen` 函数中由 `RecordLength` 参数指定的记录长度必须大于存储变量所需的实际字节数。</span><span class="sxs-lookup"><span data-stu-id="306d5-1318">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="306d5-1319">如果要写入的变量是包含字符串的对象，`FilePut` 将写入标识对象的 `VarType(8)` 的两个字节说明符，这是一个指示字符串长度的双字节说明符，然后写入字符串数据。</span><span class="sxs-lookup"><span data-stu-id="306d5-1319">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="306d5-1320">`FileOpen` 函数中由 `RecordLength` 参数指定的记录长度必须至少为4个字节，大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="306d5-1320">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="306d5-1321">如果要在不包含说明符的情况下放置字符串，则应将 `True` 传递给 `StringIsFixedLength` 参数，而你读入的字符串应为正确的长度。</span><span class="sxs-lookup"><span data-stu-id="306d5-1321">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="306d5-1322">如果要写入的变量是数组，则可以选择是否为数组的大小和维度编写说明符。</span><span class="sxs-lookup"><span data-stu-id="306d5-1322">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="306d5-1323">Visual Basic 6.0 及更早版本写入动态数组的文件描述符，但不写入固定大小的数组。</span><span class="sxs-lookup"><span data-stu-id="306d5-1323">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="306d5-1324">Visual Basic 2005 默认为不写入描述符。</span><span class="sxs-lookup"><span data-stu-id="306d5-1324">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="306d5-1325">若要编写描述符，请将 `ArrayIsDynamic` 参数设置为 `True`。</span><span class="sxs-lookup"><span data-stu-id="306d5-1325">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="306d5-1326">写入数组时，必须匹配读取数组的方式;如果它将使用描述符读取，则必须编写描述符。</span><span class="sxs-lookup"><span data-stu-id="306d5-1326">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="306d5-1327">描述符指定数组的秩、大小和每个排名的下限。</span><span class="sxs-lookup"><span data-stu-id="306d5-1327">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="306d5-1328">其长度等于2再加上维度数的8倍：（2 + 8 \* NumberOfDimensions）。</span><span class="sxs-lookup"><span data-stu-id="306d5-1328">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="306d5-1329">`FileOpen` 函数中由 `RecordLength` 子句指定的记录长度必须大于或等于写入数组数据和数组描述符所需的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="306d5-1329">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="306d5-1330">例如，当数组写入磁盘时，以下数组声明需要218字节。</span><span class="sxs-lookup"><span data-stu-id="306d5-1330">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="306d5-1331">如果写入的变量是任何其他类型的变量（不是变长字符串或对象），`FilePut` 仅写入变量数据。</span><span class="sxs-lookup"><span data-stu-id="306d5-1331">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="306d5-1332">`FileOpen` 函数中由 `RecordLength` 子句指定的记录长度必须大于或等于要写入的数据的长度。</span><span class="sxs-lookup"><span data-stu-id="306d5-1332">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="306d5-1333">`FilePut` 写入结构的元素，就好像每个元素都是单独编写的，只不过元素之间没有任何空白。</span><span class="sxs-lookup"><span data-stu-id="306d5-1333">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="306d5-1334">`VBFixedString` 特性可应用于结构中的字符串字段，以指示写入磁盘时字符串的大小。</span><span class="sxs-lookup"><span data-stu-id="306d5-1334">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="306d5-1335">写入磁盘时，将截断比 `VBFixedString` 属性指定的字节数更多的字符串字段。</span><span class="sxs-lookup"><span data-stu-id="306d5-1335">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="306d5-1336">二进制模式</span><span class="sxs-lookup"><span data-stu-id="306d5-1336">Binary Mode</span></span>  
 <span data-ttu-id="306d5-1337">对于在 `Binary` 模式下打开的文件，大多数 `Random` 模式规则都适用，但有一些例外情况。</span><span class="sxs-lookup"><span data-stu-id="306d5-1337">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="306d5-1338">`Binary` 模式下打开的文件的以下规则不同于 `Random` 模式的规则：</span><span class="sxs-lookup"><span data-stu-id="306d5-1338">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="306d5-1339">`FileOpen` 函数中的 `RecordLength` 子句不起作用。</span><span class="sxs-lookup"><span data-stu-id="306d5-1339">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="306d5-1340">`FilePut` 连续将所有变量写入磁盘，也就是说，在记录之间不进行填充。</span><span class="sxs-lookup"><span data-stu-id="306d5-1340">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="306d5-1341">对于结构中除数组以外的任何数组，`FilePut` 仅写入数据。</span><span class="sxs-lookup"><span data-stu-id="306d5-1341">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="306d5-1342">不写入任何说明符。</span><span class="sxs-lookup"><span data-stu-id="306d5-1342">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="306d5-1343">`FilePut` 写入不包含双字节长度说明符的结构元素的可变长度字符串。</span><span class="sxs-lookup"><span data-stu-id="306d5-1343">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="306d5-1344">写入的字节数等于字符串中的字符数。</span><span class="sxs-lookup"><span data-stu-id="306d5-1344">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="306d5-1345">例如，下面的语句将11个字节写入第1个文件：</span><span class="sxs-lookup"><span data-stu-id="306d5-1345">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="306d5-1346">使用 `FilePut` 函数写入文件需要从 <xref:System.Security.Permissions.FileIOPermissionAccess> 枚举进行 `Write` 访问。</span><span class="sxs-lookup"><span data-stu-id="306d5-1346">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="306d5-1347">此示例使用 `FilePut` 函数将数据写入文件。</span><span class="sxs-lookup"><span data-stu-id="306d5-1347">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="306d5-1348">将 `Person` 结构的五个记录写入到文件中。</span><span class="sxs-lookup"><span data-stu-id="306d5-1348">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="306d5-1349"><paramref name="RecordNumber" /> &lt; 1 且不等于 -1。</span><span class="sxs-lookup"><span data-stu-id="306d5-1349"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="306d5-1350">文件模式无效。</span><span class="sxs-lookup"><span data-stu-id="306d5-1350">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files"><span data-ttu-id="306d5-1351">写入文件 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="306d5-1351">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, DateTime Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void FilePut(int32 FileNumber, valuetype System.DateTime Value, int64 RecordNumber) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.DateTime,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As DateTime, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * DateTime * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, valuetype System.DateTime Value, int64 RecordNumber) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.DateTime" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="306d5-1352">必需。</span><span class="sxs-lookup"><span data-stu-id="306d5-1352">Required.</span></span> <span data-ttu-id="306d5-1353">任何有效文件数。</span><span class="sxs-lookup"><span data-stu-id="306d5-1353">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="306d5-1354">必需。</span><span class="sxs-lookup"><span data-stu-id="306d5-1354">Required.</span></span> <span data-ttu-id="306d5-1355">有效变量名，它包含写入磁盘的数据。</span><span class="sxs-lookup"><span data-stu-id="306d5-1355">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="306d5-1356">可选。</span><span class="sxs-lookup"><span data-stu-id="306d5-1356">Optional.</span></span> <span data-ttu-id="306d5-1357">开始写入处的记录号（<see langword="Random" /> 模式文件）或字节号（<see langword="Binary" /> 模式文件）。</span><span class="sxs-lookup"><span data-stu-id="306d5-1357">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="306d5-1358">将变量中得数据写入磁盘文件中。</span><span class="sxs-lookup"><span data-stu-id="306d5-1358">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="306d5-1359">相比 <see langword="FilePut" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span><span class="sxs-lookup"><span data-stu-id="306d5-1359">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="306d5-1360">有关详细信息，请参阅 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="306d5-1360">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="306d5-1361">`FilePut` 仅在 `Random` 和 `Binary` 模式下有效。</span><span class="sxs-lookup"><span data-stu-id="306d5-1361">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="306d5-1362">通常使用 `FileGet` 从文件中读取使用 `FilePut` 编写的数据。</span><span class="sxs-lookup"><span data-stu-id="306d5-1362">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="306d5-1363">文件中的第一个记录或字节位于位置1，第二个记录或字节在位置2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="306d5-1363">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="306d5-1364">如果省略 `RecordNumber`，则最后一个 `FileGet` 或 `FilePut` 函数之后或最后一个 `Seek` 函数指向的下一个记录或字节将被写入。</span><span class="sxs-lookup"><span data-stu-id="306d5-1364">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="306d5-1365">`StringIsFixedLength` 参数控制函数是将字符串解释为变量还是固定长度。</span><span class="sxs-lookup"><span data-stu-id="306d5-1365">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="306d5-1366">`True`参数时，`FilePut` 不会写入长度说明符。</span><span class="sxs-lookup"><span data-stu-id="306d5-1366">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="306d5-1367">如果将 `StringIsFixedLength` = `True` 与 `FilePut`一起使用，则必须使用 `FileGet`执行相同操作，并且必须确保将字符串初始化为预期的长度。</span><span class="sxs-lookup"><span data-stu-id="306d5-1367">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="306d5-1368">随机模式</span><span class="sxs-lookup"><span data-stu-id="306d5-1368">Random Mode</span></span>  
 <span data-ttu-id="306d5-1369">对于在 `Random` 模式下打开的文件，以下规则适用：</span><span class="sxs-lookup"><span data-stu-id="306d5-1369">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="306d5-1370">如果写入的数据的长度小于 `FileOpen` 函数的 `RecordLength` 子句中指定的长度，则 `FilePut` 会写入记录长度边界的后续记录。</span><span class="sxs-lookup"><span data-stu-id="306d5-1370">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="306d5-1371">一条记录的末尾和下一条记录的开头之间的空格将填充到文件缓冲区的现有内容中。</span><span class="sxs-lookup"><span data-stu-id="306d5-1371">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="306d5-1372">由于不能确定填充数据量，因此通常最好让记录长度与要写入的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="306d5-1372">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="306d5-1373">如果写入的数据的长度大于 `FileOpen` 函数的 `RecordLength` 子句中指定的长度，则将引发异常。</span><span class="sxs-lookup"><span data-stu-id="306d5-1373">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="306d5-1374">如果写入的变量是字符串，`FilePut` 会写入包含字符串长度的双字节说明符，然后写入该变量中的数据。</span><span class="sxs-lookup"><span data-stu-id="306d5-1374">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="306d5-1375">因此，`FileOpen` 函数中由 `RecordLength` 子句指定的记录长度必须大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="306d5-1375">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="306d5-1376">如果要写入的变量是包含数值类型的对象，`FilePut` 会写入两个字节，用于标识对象的 `VarType` 并写入变量。</span><span class="sxs-lookup"><span data-stu-id="306d5-1376">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="306d5-1377">例如，在编写包含整数的对象时，`FilePut` 会写入六个字节：两个字节，用于将对象标识为 `VarType(3)` （`Integer`）和四个包含数据的字节。</span><span class="sxs-lookup"><span data-stu-id="306d5-1377">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="306d5-1378">`FileOpen` 函数中由 `RecordLength` 参数指定的记录长度必须大于存储变量所需的实际字节数。</span><span class="sxs-lookup"><span data-stu-id="306d5-1378">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="306d5-1379">如果要写入的变量是包含字符串的对象，`FilePut` 将写入标识对象的 `VarType(8)` 的两个字节说明符，这是一个指示字符串长度的双字节说明符，然后写入字符串数据。</span><span class="sxs-lookup"><span data-stu-id="306d5-1379">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="306d5-1380">`FileOpen` 函数中由 `RecordLength` 参数指定的记录长度必须至少为4个字节，大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="306d5-1380">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="306d5-1381">如果要在不包含说明符的情况下放置字符串，则应将 `True` 传递给 `StringIsFixedLength` 参数，而你读入的字符串应为正确的长度。</span><span class="sxs-lookup"><span data-stu-id="306d5-1381">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="306d5-1382">如果要写入的变量是数组，则可以选择是否为数组的大小和维度编写说明符。</span><span class="sxs-lookup"><span data-stu-id="306d5-1382">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="306d5-1383">Visual Basic 6.0 及更早版本写入动态数组的文件描述符，但不写入固定大小的数组。</span><span class="sxs-lookup"><span data-stu-id="306d5-1383">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="306d5-1384">Visual Basic 2005 默认为不写入描述符。</span><span class="sxs-lookup"><span data-stu-id="306d5-1384">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="306d5-1385">若要编写描述符，请将 `ArrayIsDynamic` 参数设置为 `True`。</span><span class="sxs-lookup"><span data-stu-id="306d5-1385">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="306d5-1386">写入数组时，必须匹配读取数组的方式;如果它将使用描述符读取，则必须编写描述符。</span><span class="sxs-lookup"><span data-stu-id="306d5-1386">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="306d5-1387">描述符指定数组的秩、大小和每个排名的下限。</span><span class="sxs-lookup"><span data-stu-id="306d5-1387">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="306d5-1388">其长度等于2再加上维度数的8倍：（2 + 8 \* NumberOfDimensions）。</span><span class="sxs-lookup"><span data-stu-id="306d5-1388">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="306d5-1389">`FileOpen` 函数中由 `RecordLength` 子句指定的记录长度必须大于或等于写入数组数据和数组描述符所需的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="306d5-1389">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="306d5-1390">例如，当数组写入磁盘时，以下数组声明需要218字节。</span><span class="sxs-lookup"><span data-stu-id="306d5-1390">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="306d5-1391">如果写入的变量是任何其他类型的变量（不是变长字符串或对象），`FilePut` 仅写入变量数据。</span><span class="sxs-lookup"><span data-stu-id="306d5-1391">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="306d5-1392">`FileOpen` 函数中由 `RecordLength` 子句指定的记录长度必须大于或等于要写入的数据的长度。</span><span class="sxs-lookup"><span data-stu-id="306d5-1392">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="306d5-1393">`FilePut` 写入结构的元素，就好像每个元素都是单独编写的，只不过元素之间没有任何空白。</span><span class="sxs-lookup"><span data-stu-id="306d5-1393">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="306d5-1394">`VBFixedString` 特性可应用于结构中的字符串字段，以指示写入磁盘时字符串的大小。</span><span class="sxs-lookup"><span data-stu-id="306d5-1394">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="306d5-1395">写入磁盘时，将截断比 `VBFixedString` 属性指定的字节数更多的字符串字段。</span><span class="sxs-lookup"><span data-stu-id="306d5-1395">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="306d5-1396">二进制模式</span><span class="sxs-lookup"><span data-stu-id="306d5-1396">Binary Mode</span></span>  
 <span data-ttu-id="306d5-1397">对于在 `Binary` 模式下打开的文件，大多数 `Random` 模式规则都适用，但有一些例外情况。</span><span class="sxs-lookup"><span data-stu-id="306d5-1397">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="306d5-1398">`Binary` 模式下打开的文件的以下规则不同于 `Random` 模式的规则：</span><span class="sxs-lookup"><span data-stu-id="306d5-1398">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="306d5-1399">`FileOpen` 函数中的 `RecordLength` 子句不起作用。</span><span class="sxs-lookup"><span data-stu-id="306d5-1399">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="306d5-1400">`FilePut` 连续将所有变量写入磁盘，也就是说，在记录之间不进行填充。</span><span class="sxs-lookup"><span data-stu-id="306d5-1400">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="306d5-1401">对于结构中除数组以外的任何数组，`FilePut` 仅写入数据。</span><span class="sxs-lookup"><span data-stu-id="306d5-1401">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="306d5-1402">不写入任何说明符。</span><span class="sxs-lookup"><span data-stu-id="306d5-1402">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="306d5-1403">`FilePut` 写入不包含双字节长度说明符的结构元素的可变长度字符串。</span><span class="sxs-lookup"><span data-stu-id="306d5-1403">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="306d5-1404">写入的字节数等于字符串中的字符数。</span><span class="sxs-lookup"><span data-stu-id="306d5-1404">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="306d5-1405">例如，下面的语句将11个字节写入第1个文件：</span><span class="sxs-lookup"><span data-stu-id="306d5-1405">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="306d5-1406">使用 `FilePut` 函数写入文件需要从 <xref:System.Security.Permissions.FileIOPermissionAccess> 枚举进行 `Write` 访问。</span><span class="sxs-lookup"><span data-stu-id="306d5-1406">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="306d5-1407">此示例使用 `FilePut` 函数将数据写入文件。</span><span class="sxs-lookup"><span data-stu-id="306d5-1407">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="306d5-1408">将 `Person` 结构的五个记录写入到文件中。</span><span class="sxs-lookup"><span data-stu-id="306d5-1408">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="306d5-1409"><paramref name="RecordNumber" /> &lt; 1 且不等于 -1。</span><span class="sxs-lookup"><span data-stu-id="306d5-1409"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="306d5-1410">文件模式无效。</span><span class="sxs-lookup"><span data-stu-id="306d5-1410">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files"><span data-ttu-id="306d5-1411">写入文件 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="306d5-1411">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, decimal Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void FilePut(int32 FileNumber, valuetype System.Decimal Value, int64 RecordNumber) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Decimal,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Decimal, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * decimal * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, valuetype System.Decimal Value, int64 RecordNumber) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Decimal" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="306d5-1412">必需。</span><span class="sxs-lookup"><span data-stu-id="306d5-1412">Required.</span></span> <span data-ttu-id="306d5-1413">任何有效文件数。</span><span class="sxs-lookup"><span data-stu-id="306d5-1413">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="306d5-1414">必需。</span><span class="sxs-lookup"><span data-stu-id="306d5-1414">Required.</span></span> <span data-ttu-id="306d5-1415">有效变量名，它包含写入磁盘的数据。</span><span class="sxs-lookup"><span data-stu-id="306d5-1415">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="306d5-1416">可选。</span><span class="sxs-lookup"><span data-stu-id="306d5-1416">Optional.</span></span> <span data-ttu-id="306d5-1417">开始写入处的记录号（<see langword="Random" /> 模式文件）或字节号（<see langword="Binary" /> 模式文件）。</span><span class="sxs-lookup"><span data-stu-id="306d5-1417">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="306d5-1418">将变量中得数据写入磁盘文件中。</span><span class="sxs-lookup"><span data-stu-id="306d5-1418">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="306d5-1419">相比 <see langword="FilePut" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span><span class="sxs-lookup"><span data-stu-id="306d5-1419">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="306d5-1420">有关详细信息，请参阅 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="306d5-1420">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="306d5-1421">`FilePut` 仅在 `Random` 和 `Binary` 模式下有效。</span><span class="sxs-lookup"><span data-stu-id="306d5-1421">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="306d5-1422">通常使用 `FileGet` 从文件中读取使用 `FilePut` 编写的数据。</span><span class="sxs-lookup"><span data-stu-id="306d5-1422">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="306d5-1423">文件中的第一个记录或字节位于位置1，第二个记录或字节在位置2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="306d5-1423">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="306d5-1424">如果省略 `RecordNumber`，则最后一个 `FileGet` 或 `FilePut` 函数之后或最后一个 `Seek` 函数指向的下一个记录或字节将被写入。</span><span class="sxs-lookup"><span data-stu-id="306d5-1424">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="306d5-1425">`StringIsFixedLength` 参数控制函数是将字符串解释为变量还是固定长度。</span><span class="sxs-lookup"><span data-stu-id="306d5-1425">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="306d5-1426">`True`参数时，`FilePut` 不会写入长度说明符。</span><span class="sxs-lookup"><span data-stu-id="306d5-1426">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="306d5-1427">如果将 `StringIsFixedLength` = `True` 与 `FilePut`一起使用，则必须使用 `FileGet`执行相同操作，并且必须确保将字符串初始化为预期的长度。</span><span class="sxs-lookup"><span data-stu-id="306d5-1427">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="306d5-1428">随机模式</span><span class="sxs-lookup"><span data-stu-id="306d5-1428">Random Mode</span></span>  
 <span data-ttu-id="306d5-1429">对于在 `Random` 模式下打开的文件，以下规则适用：</span><span class="sxs-lookup"><span data-stu-id="306d5-1429">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="306d5-1430">如果写入的数据的长度小于 `FileOpen` 函数的 `RecordLength` 子句中指定的长度，则 `FilePut` 会写入记录长度边界的后续记录。</span><span class="sxs-lookup"><span data-stu-id="306d5-1430">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="306d5-1431">一条记录的末尾和下一条记录的开头之间的空格将填充到文件缓冲区的现有内容中。</span><span class="sxs-lookup"><span data-stu-id="306d5-1431">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="306d5-1432">由于不能确定填充数据量，因此通常最好让记录长度与要写入的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="306d5-1432">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="306d5-1433">如果写入的数据的长度大于 `FileOpen` 函数的 `RecordLength` 子句中指定的长度，则将引发异常。</span><span class="sxs-lookup"><span data-stu-id="306d5-1433">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="306d5-1434">如果写入的变量是字符串，`FilePut` 会写入包含字符串长度的双字节说明符，然后写入该变量中的数据。</span><span class="sxs-lookup"><span data-stu-id="306d5-1434">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="306d5-1435">因此，`FileOpen` 函数中由 `RecordLength` 子句指定的记录长度必须大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="306d5-1435">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="306d5-1436">如果要写入的变量是包含数值类型的对象，`FilePut` 会写入两个字节，用于标识对象的 `VarType` 并写入变量。</span><span class="sxs-lookup"><span data-stu-id="306d5-1436">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="306d5-1437">例如，在编写包含整数的对象时，`FilePut` 会写入六个字节：两个字节，用于将对象标识为 `VarType(3)` （`Integer`）和四个包含数据的字节。</span><span class="sxs-lookup"><span data-stu-id="306d5-1437">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="306d5-1438">`FileOpen` 函数中由 `RecordLength` 参数指定的记录长度必须大于存储变量所需的实际字节数。</span><span class="sxs-lookup"><span data-stu-id="306d5-1438">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="306d5-1439">如果要写入的变量是包含字符串的对象，`FilePut` 将写入标识对象的 `VarType(8)` 的两个字节说明符，这是一个指示字符串长度的双字节说明符，然后写入字符串数据。</span><span class="sxs-lookup"><span data-stu-id="306d5-1439">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="306d5-1440">`FileOpen` 函数中由 `RecordLength` 参数指定的记录长度必须至少为4个字节，大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="306d5-1440">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="306d5-1441">如果要在不包含说明符的情况下放置字符串，则应将 `True` 传递给 `StringIsFixedLength` 参数，而你读入的字符串应为正确的长度。</span><span class="sxs-lookup"><span data-stu-id="306d5-1441">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="306d5-1442">如果要写入的变量是数组，则可以选择是否为数组的大小和维度编写说明符。</span><span class="sxs-lookup"><span data-stu-id="306d5-1442">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="306d5-1443">Visual Basic 6.0 及更早版本写入动态数组的文件描述符，但不写入固定大小的数组。</span><span class="sxs-lookup"><span data-stu-id="306d5-1443">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="306d5-1444">Visual Basic 2005 默认为不写入描述符。</span><span class="sxs-lookup"><span data-stu-id="306d5-1444">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="306d5-1445">若要编写描述符，请将 `ArrayIsDynamic` 参数设置为 `True`。</span><span class="sxs-lookup"><span data-stu-id="306d5-1445">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="306d5-1446">写入数组时，必须匹配读取数组的方式;如果它将使用描述符读取，则必须编写描述符。</span><span class="sxs-lookup"><span data-stu-id="306d5-1446">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="306d5-1447">描述符指定数组的秩、大小和每个排名的下限。</span><span class="sxs-lookup"><span data-stu-id="306d5-1447">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="306d5-1448">其长度等于2再加上维度数的8倍：（2 + 8 \* NumberOfDimensions）。</span><span class="sxs-lookup"><span data-stu-id="306d5-1448">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="306d5-1449">`FileOpen` 函数中由 `RecordLength` 子句指定的记录长度必须大于或等于写入数组数据和数组描述符所需的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="306d5-1449">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="306d5-1450">例如，当数组写入磁盘时，以下数组声明需要218字节。</span><span class="sxs-lookup"><span data-stu-id="306d5-1450">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="306d5-1451">如果写入的变量是任何其他类型的变量（不是变长字符串或对象），`FilePut` 仅写入变量数据。</span><span class="sxs-lookup"><span data-stu-id="306d5-1451">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="306d5-1452">`FileOpen` 函数中由 `RecordLength` 子句指定的记录长度必须大于或等于要写入的数据的长度。</span><span class="sxs-lookup"><span data-stu-id="306d5-1452">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="306d5-1453">`FilePut` 写入结构的元素，就好像每个元素都是单独编写的，只不过元素之间没有任何空白。</span><span class="sxs-lookup"><span data-stu-id="306d5-1453">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="306d5-1454">`VBFixedString` 特性可应用于结构中的字符串字段，以指示写入磁盘时字符串的大小。</span><span class="sxs-lookup"><span data-stu-id="306d5-1454">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="306d5-1455">写入磁盘时，将截断比 `VBFixedString` 属性指定的字节数更多的字符串字段。</span><span class="sxs-lookup"><span data-stu-id="306d5-1455">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="306d5-1456">二进制模式</span><span class="sxs-lookup"><span data-stu-id="306d5-1456">Binary Mode</span></span>  
 <span data-ttu-id="306d5-1457">对于在 `Binary` 模式下打开的文件，大多数 `Random` 模式规则都适用，但有一些例外情况。</span><span class="sxs-lookup"><span data-stu-id="306d5-1457">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="306d5-1458">`Binary` 模式下打开的文件的以下规则不同于 `Random` 模式的规则：</span><span class="sxs-lookup"><span data-stu-id="306d5-1458">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="306d5-1459">`FileOpen` 函数中的 `RecordLength` 子句不起作用。</span><span class="sxs-lookup"><span data-stu-id="306d5-1459">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="306d5-1460">`FilePut` 连续将所有变量写入磁盘，也就是说，在记录之间不进行填充。</span><span class="sxs-lookup"><span data-stu-id="306d5-1460">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="306d5-1461">对于结构中除数组以外的任何数组，`FilePut` 仅写入数据。</span><span class="sxs-lookup"><span data-stu-id="306d5-1461">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="306d5-1462">不写入任何说明符。</span><span class="sxs-lookup"><span data-stu-id="306d5-1462">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="306d5-1463">`FilePut` 写入不包含双字节长度说明符的结构元素的可变长度字符串。</span><span class="sxs-lookup"><span data-stu-id="306d5-1463">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="306d5-1464">写入的字节数等于字符串中的字符数。</span><span class="sxs-lookup"><span data-stu-id="306d5-1464">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="306d5-1465">例如，下面的语句将11个字节写入第1个文件：</span><span class="sxs-lookup"><span data-stu-id="306d5-1465">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="306d5-1466">使用 `FilePut` 函数写入文件需要从 <xref:System.Security.Permissions.FileIOPermissionAccess> 枚举进行 `Write` 访问。</span><span class="sxs-lookup"><span data-stu-id="306d5-1466">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="306d5-1467">此示例使用 `FilePut` 函数将数据写入文件。</span><span class="sxs-lookup"><span data-stu-id="306d5-1467">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="306d5-1468">将 `Person` 结构的五个记录写入到文件中。</span><span class="sxs-lookup"><span data-stu-id="306d5-1468">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="306d5-1469"><paramref name="RecordNumber" /> &lt; 1 且不等于 -1。</span><span class="sxs-lookup"><span data-stu-id="306d5-1469"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="306d5-1470">文件模式无效。</span><span class="sxs-lookup"><span data-stu-id="306d5-1470">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files"><span data-ttu-id="306d5-1471">写入文件 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="306d5-1471">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, double Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void FilePut(int32 FileNumber, float64 Value, int64 RecordNumber) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Double,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Double, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * double * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, float64 Value, int64 RecordNumber) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Double" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="306d5-1472">必需。</span><span class="sxs-lookup"><span data-stu-id="306d5-1472">Required.</span></span> <span data-ttu-id="306d5-1473">任何有效文件数。</span><span class="sxs-lookup"><span data-stu-id="306d5-1473">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="306d5-1474">必需。</span><span class="sxs-lookup"><span data-stu-id="306d5-1474">Required.</span></span> <span data-ttu-id="306d5-1475">有效变量名，它包含写入磁盘的数据。</span><span class="sxs-lookup"><span data-stu-id="306d5-1475">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="306d5-1476">可选。</span><span class="sxs-lookup"><span data-stu-id="306d5-1476">Optional.</span></span> <span data-ttu-id="306d5-1477">开始写入处的记录号（<see langword="Random" /> 模式文件）或字节号（<see langword="Binary" /> 模式文件）。</span><span class="sxs-lookup"><span data-stu-id="306d5-1477">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="306d5-1478">将变量中得数据写入磁盘文件中。</span><span class="sxs-lookup"><span data-stu-id="306d5-1478">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="306d5-1479">相比 <see langword="FilePut" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span><span class="sxs-lookup"><span data-stu-id="306d5-1479">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="306d5-1480">有关详细信息，请参阅 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="306d5-1480">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="306d5-1481">`FilePut` 仅在 `Random` 和 `Binary` 模式下有效。</span><span class="sxs-lookup"><span data-stu-id="306d5-1481">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="306d5-1482">通常使用 `FileGet` 从文件中读取使用 `FilePut` 编写的数据。</span><span class="sxs-lookup"><span data-stu-id="306d5-1482">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="306d5-1483">文件中的第一个记录或字节位于位置1，第二个记录或字节在位置2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="306d5-1483">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="306d5-1484">如果省略 `RecordNumber`，则最后一个 `FileGet` 或 `FilePut` 函数之后或最后一个 `Seek` 函数指向的下一个记录或字节将被写入。</span><span class="sxs-lookup"><span data-stu-id="306d5-1484">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="306d5-1485">`StringIsFixedLength` 参数控制函数是将字符串解释为变量还是固定长度。</span><span class="sxs-lookup"><span data-stu-id="306d5-1485">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="306d5-1486">`True`参数时，`FilePut` 不会写入长度说明符。</span><span class="sxs-lookup"><span data-stu-id="306d5-1486">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="306d5-1487">如果将 `StringIsFixedLength` = `True` 与 `FilePut`一起使用，则必须使用 `FileGet`执行相同操作，并且必须确保将字符串初始化为预期的长度。</span><span class="sxs-lookup"><span data-stu-id="306d5-1487">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="306d5-1488">随机模式</span><span class="sxs-lookup"><span data-stu-id="306d5-1488">Random Mode</span></span>  
 <span data-ttu-id="306d5-1489">对于在 `Random` 模式下打开的文件，以下规则适用：</span><span class="sxs-lookup"><span data-stu-id="306d5-1489">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="306d5-1490">如果写入的数据的长度小于 `FileOpen` 函数的 `RecordLength` 子句中指定的长度，则 `FilePut` 会写入记录长度边界的后续记录。</span><span class="sxs-lookup"><span data-stu-id="306d5-1490">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="306d5-1491">一条记录的末尾和下一条记录的开头之间的空格将填充到文件缓冲区的现有内容中。</span><span class="sxs-lookup"><span data-stu-id="306d5-1491">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="306d5-1492">由于不能确定填充数据量，因此通常最好让记录长度与要写入的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="306d5-1492">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="306d5-1493">如果写入的数据的长度大于 `FileOpen` 函数的 `RecordLength` 子句中指定的长度，则将引发异常。</span><span class="sxs-lookup"><span data-stu-id="306d5-1493">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="306d5-1494">如果写入的变量是字符串，`FilePut` 会写入包含字符串长度的双字节说明符，然后写入该变量中的数据。</span><span class="sxs-lookup"><span data-stu-id="306d5-1494">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="306d5-1495">因此，`FileOpen` 函数中由 `RecordLength` 子句指定的记录长度必须大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="306d5-1495">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="306d5-1496">如果要写入的变量是包含数值类型的对象，`FilePut` 会写入两个字节，用于标识对象的 `VarType` 并写入变量。</span><span class="sxs-lookup"><span data-stu-id="306d5-1496">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="306d5-1497">例如，在编写包含整数的对象时，`FilePut` 会写入六个字节：两个字节，用于将对象标识为 `VarType(3)` （`Integer`）和四个包含数据的字节。</span><span class="sxs-lookup"><span data-stu-id="306d5-1497">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="306d5-1498">`FileOpen` 函数中由 `RecordLength` 参数指定的记录长度必须大于存储变量所需的实际字节数。</span><span class="sxs-lookup"><span data-stu-id="306d5-1498">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="306d5-1499">如果要写入的变量是包含字符串的对象，`FilePut` 将写入标识对象的 `VarType(8)` 的两个字节说明符，这是一个指示字符串长度的双字节说明符，然后写入字符串数据。</span><span class="sxs-lookup"><span data-stu-id="306d5-1499">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="306d5-1500">`FileOpen` 函数中由 `RecordLength` 参数指定的记录长度必须至少为4个字节，大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="306d5-1500">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="306d5-1501">如果要在不包含说明符的情况下放置字符串，则应将 `True` 传递给 `StringIsFixedLength` 参数，而你读入的字符串应为正确的长度。</span><span class="sxs-lookup"><span data-stu-id="306d5-1501">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="306d5-1502">如果要写入的变量是数组，则可以选择是否为数组的大小和维度编写说明符。</span><span class="sxs-lookup"><span data-stu-id="306d5-1502">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="306d5-1503">Visual Basic 6.0 及更早版本写入动态数组的文件描述符，但不写入固定大小的数组。</span><span class="sxs-lookup"><span data-stu-id="306d5-1503">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="306d5-1504">Visual Basic 2005 默认为不写入描述符。</span><span class="sxs-lookup"><span data-stu-id="306d5-1504">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="306d5-1505">若要编写描述符，请将 `ArrayIsDynamic` 参数设置为 `True`。</span><span class="sxs-lookup"><span data-stu-id="306d5-1505">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="306d5-1506">写入数组时，必须匹配读取数组的方式;如果它将使用描述符读取，则必须编写描述符。</span><span class="sxs-lookup"><span data-stu-id="306d5-1506">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="306d5-1507">描述符指定数组的秩、大小和每个排名的下限。</span><span class="sxs-lookup"><span data-stu-id="306d5-1507">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="306d5-1508">其长度等于2再加上维度数的8倍：（2 + 8 \* NumberOfDimensions）。</span><span class="sxs-lookup"><span data-stu-id="306d5-1508">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="306d5-1509">`FileOpen` 函数中由 `RecordLength` 子句指定的记录长度必须大于或等于写入数组数据和数组描述符所需的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="306d5-1509">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="306d5-1510">例如，当数组写入磁盘时，以下数组声明需要218字节。</span><span class="sxs-lookup"><span data-stu-id="306d5-1510">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="306d5-1511">如果写入的变量是任何其他类型的变量（不是变长字符串或对象），`FilePut` 仅写入变量数据。</span><span class="sxs-lookup"><span data-stu-id="306d5-1511">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="306d5-1512">`FileOpen` 函数中由 `RecordLength` 子句指定的记录长度必须大于或等于要写入的数据的长度。</span><span class="sxs-lookup"><span data-stu-id="306d5-1512">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="306d5-1513">`FilePut` 写入结构的元素，就好像每个元素都是单独编写的，只不过元素之间没有任何空白。</span><span class="sxs-lookup"><span data-stu-id="306d5-1513">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="306d5-1514">`VBFixedString` 特性可应用于结构中的字符串字段，以指示写入磁盘时字符串的大小。</span><span class="sxs-lookup"><span data-stu-id="306d5-1514">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="306d5-1515">写入磁盘时，将截断比 `VBFixedString` 属性指定的字节数更多的字符串字段。</span><span class="sxs-lookup"><span data-stu-id="306d5-1515">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="306d5-1516">二进制模式</span><span class="sxs-lookup"><span data-stu-id="306d5-1516">Binary Mode</span></span>  
 <span data-ttu-id="306d5-1517">对于在 `Binary` 模式下打开的文件，大多数 `Random` 模式规则都适用，但有一些例外情况。</span><span class="sxs-lookup"><span data-stu-id="306d5-1517">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="306d5-1518">`Binary` 模式下打开的文件的以下规则不同于 `Random` 模式的规则：</span><span class="sxs-lookup"><span data-stu-id="306d5-1518">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="306d5-1519">`FileOpen` 函数中的 `RecordLength` 子句不起作用。</span><span class="sxs-lookup"><span data-stu-id="306d5-1519">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="306d5-1520">`FilePut` 连续将所有变量写入磁盘，也就是说，在记录之间不进行填充。</span><span class="sxs-lookup"><span data-stu-id="306d5-1520">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="306d5-1521">对于结构中除数组以外的任何数组，`FilePut` 仅写入数据。</span><span class="sxs-lookup"><span data-stu-id="306d5-1521">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="306d5-1522">不写入任何说明符。</span><span class="sxs-lookup"><span data-stu-id="306d5-1522">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="306d5-1523">`FilePut` 写入不包含双字节长度说明符的结构元素的可变长度字符串。</span><span class="sxs-lookup"><span data-stu-id="306d5-1523">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="306d5-1524">写入的字节数等于字符串中的字符数。</span><span class="sxs-lookup"><span data-stu-id="306d5-1524">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="306d5-1525">例如，下面的语句将11个字节写入第1个文件：</span><span class="sxs-lookup"><span data-stu-id="306d5-1525">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="306d5-1526">使用 `FilePut` 函数写入文件需要从 <xref:System.Security.Permissions.FileIOPermissionAccess> 枚举进行 `Write` 访问。</span><span class="sxs-lookup"><span data-stu-id="306d5-1526">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="306d5-1527">此示例使用 `FilePut` 函数将数据写入文件。</span><span class="sxs-lookup"><span data-stu-id="306d5-1527">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="306d5-1528">将 `Person` 结构的五个记录写入到文件中。</span><span class="sxs-lookup"><span data-stu-id="306d5-1528">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="306d5-1529"><paramref name="RecordNumber" /> &lt; 1 且不等于 -1。</span><span class="sxs-lookup"><span data-stu-id="306d5-1529"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="306d5-1530">文件模式无效。</span><span class="sxs-lookup"><span data-stu-id="306d5-1530">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files"><span data-ttu-id="306d5-1531">写入文件 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="306d5-1531">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, short Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void FilePut(int32 FileNumber, int16 Value, int64 RecordNumber) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Int16,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Short, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * int16 * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, int16 Value, int64 RecordNumber) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int16" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="306d5-1532">必需。</span><span class="sxs-lookup"><span data-stu-id="306d5-1532">Required.</span></span> <span data-ttu-id="306d5-1533">任何有效文件数。</span><span class="sxs-lookup"><span data-stu-id="306d5-1533">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="306d5-1534">必需。</span><span class="sxs-lookup"><span data-stu-id="306d5-1534">Required.</span></span> <span data-ttu-id="306d5-1535">有效变量名，它包含写入磁盘的数据。</span><span class="sxs-lookup"><span data-stu-id="306d5-1535">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="306d5-1536">可选。</span><span class="sxs-lookup"><span data-stu-id="306d5-1536">Optional.</span></span> <span data-ttu-id="306d5-1537">开始写入处的记录号（<see langword="Random" /> 模式文件）或字节号（<see langword="Binary" /> 模式文件）。</span><span class="sxs-lookup"><span data-stu-id="306d5-1537">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="306d5-1538">将变量中得数据写入磁盘文件中。</span><span class="sxs-lookup"><span data-stu-id="306d5-1538">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="306d5-1539">相比 <see langword="FilePut" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span><span class="sxs-lookup"><span data-stu-id="306d5-1539">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="306d5-1540">有关详细信息，请参阅 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="306d5-1540">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="306d5-1541">`FilePut` 仅在 `Random` 和 `Binary` 模式下有效。</span><span class="sxs-lookup"><span data-stu-id="306d5-1541">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="306d5-1542">通常使用 `FileGet` 从文件中读取使用 `FilePut` 编写的数据。</span><span class="sxs-lookup"><span data-stu-id="306d5-1542">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="306d5-1543">文件中的第一个记录或字节位于位置1，第二个记录或字节在位置2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="306d5-1543">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="306d5-1544">如果省略 `RecordNumber`，则最后一个 `FileGet` 或 `FilePut` 函数之后或最后一个 `Seek` 函数指向的下一个记录或字节将被写入。</span><span class="sxs-lookup"><span data-stu-id="306d5-1544">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="306d5-1545">`StringIsFixedLength` 参数控制函数是将字符串解释为变量还是固定长度。</span><span class="sxs-lookup"><span data-stu-id="306d5-1545">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="306d5-1546">`True`参数时，`FilePut` 不会写入长度说明符。</span><span class="sxs-lookup"><span data-stu-id="306d5-1546">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="306d5-1547">如果将 `StringIsFixedLength` = `True` 与 `FilePut`一起使用，则必须使用 `FileGet`执行相同操作，并且必须确保将字符串初始化为预期的长度。</span><span class="sxs-lookup"><span data-stu-id="306d5-1547">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="306d5-1548">随机模式</span><span class="sxs-lookup"><span data-stu-id="306d5-1548">Random Mode</span></span>  
 <span data-ttu-id="306d5-1549">对于在 `Random` 模式下打开的文件，以下规则适用：</span><span class="sxs-lookup"><span data-stu-id="306d5-1549">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="306d5-1550">如果写入的数据的长度小于 `FileOpen` 函数的 `RecordLength` 子句中指定的长度，则 `FilePut` 会写入记录长度边界的后续记录。</span><span class="sxs-lookup"><span data-stu-id="306d5-1550">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="306d5-1551">一条记录的末尾和下一条记录的开头之间的空格将填充到文件缓冲区的现有内容中。</span><span class="sxs-lookup"><span data-stu-id="306d5-1551">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="306d5-1552">由于不能确定填充数据量，因此通常最好让记录长度与要写入的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="306d5-1552">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="306d5-1553">如果写入的数据的长度大于 `FileOpen` 函数的 `RecordLength` 子句中指定的长度，则将引发异常。</span><span class="sxs-lookup"><span data-stu-id="306d5-1553">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="306d5-1554">如果写入的变量是字符串，`FilePut` 会写入包含字符串长度的双字节说明符，然后写入该变量中的数据。</span><span class="sxs-lookup"><span data-stu-id="306d5-1554">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="306d5-1555">因此，`FileOpen` 函数中由 `RecordLength` 子句指定的记录长度必须大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="306d5-1555">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="306d5-1556">如果要写入的变量是包含数值类型的对象，`FilePut` 会写入两个字节，用于标识对象的 `VarType` 并写入变量。</span><span class="sxs-lookup"><span data-stu-id="306d5-1556">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="306d5-1557">例如，在编写包含整数的对象时，`FilePut` 会写入六个字节：两个字节，用于将对象标识为 `VarType(3)` （`Integer`）和四个包含数据的字节。</span><span class="sxs-lookup"><span data-stu-id="306d5-1557">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="306d5-1558">`FileOpen` 函数中由 `RecordLength` 参数指定的记录长度必须大于存储变量所需的实际字节数。</span><span class="sxs-lookup"><span data-stu-id="306d5-1558">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="306d5-1559">如果要写入的变量是包含字符串的对象，`FilePut` 将写入标识对象的`VarType(8)` 的两个字节说明符，这是一个指示字符串长度的双字节说明符，然后写入字符串数据。</span><span class="sxs-lookup"><span data-stu-id="306d5-1559">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the`VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="306d5-1560">`FileOpen` 函数中由 `RecordLength` 参数指定的记录长度必须至少为4个字节，大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="306d5-1560">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="306d5-1561">如果要在不包含说明符的情况下放置字符串，则应将 `True` 传递给 `StringIsFixedLength` 参数，而你读入的字符串应为正确的长度。</span><span class="sxs-lookup"><span data-stu-id="306d5-1561">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="306d5-1562">如果要写入的变量是数组，则可以选择是否为数组的大小和维度编写说明符。</span><span class="sxs-lookup"><span data-stu-id="306d5-1562">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="306d5-1563">Visual Basic 6.0 及更早版本写入动态数组的文件描述符，但不写入固定大小的数组。</span><span class="sxs-lookup"><span data-stu-id="306d5-1563">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="306d5-1564">Visual Basic 2005 默认为不写入描述符。</span><span class="sxs-lookup"><span data-stu-id="306d5-1564">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="306d5-1565">若要编写描述符，请将 `ArrayIsDynamic` 参数设置为 `True`。</span><span class="sxs-lookup"><span data-stu-id="306d5-1565">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="306d5-1566">写入数组时，必须匹配读取数组的方式;如果它将使用描述符读取，则必须编写描述符。</span><span class="sxs-lookup"><span data-stu-id="306d5-1566">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="306d5-1567">描述符指定数组的秩、大小和每个排名的下限。</span><span class="sxs-lookup"><span data-stu-id="306d5-1567">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="306d5-1568">其长度等于2再加上维度数的8倍：（2 + 8 \* NumberOfDimensions）。</span><span class="sxs-lookup"><span data-stu-id="306d5-1568">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="306d5-1569">`FileOpen` 函数中由 `RecordLength` 子句指定的记录长度必须大于或等于写入数组数据和数组描述符所需的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="306d5-1569">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="306d5-1570">例如，当数组写入磁盘时，以下数组声明需要218字节。</span><span class="sxs-lookup"><span data-stu-id="306d5-1570">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="306d5-1571">如果写入的变量是任何其他类型的变量（不是变长字符串或对象），`FilePut` 仅写入变量数据。</span><span class="sxs-lookup"><span data-stu-id="306d5-1571">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="306d5-1572">`FileOpen` 函数中由 `RecordLength` 子句指定的记录长度必须大于或等于要写入的数据的长度。</span><span class="sxs-lookup"><span data-stu-id="306d5-1572">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="306d5-1573">`FilePut` 写入结构的元素，就好像每个元素都是单独编写的，只不过元素之间没有任何空白。</span><span class="sxs-lookup"><span data-stu-id="306d5-1573">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="306d5-1574">`VBFixedString` 特性可应用于结构中的字符串字段，以指示写入磁盘时字符串的大小。</span><span class="sxs-lookup"><span data-stu-id="306d5-1574">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="306d5-1575">写入磁盘时，将截断比 `VBFixedString` 属性指定的字节数更多的字符串字段。</span><span class="sxs-lookup"><span data-stu-id="306d5-1575">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="306d5-1576">二进制模式</span><span class="sxs-lookup"><span data-stu-id="306d5-1576">Binary Mode</span></span>  
 <span data-ttu-id="306d5-1577">对于在 `Binary` 模式下打开的文件，大多数 `Random` 模式规则都适用，但有一些例外情况。</span><span class="sxs-lookup"><span data-stu-id="306d5-1577">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="306d5-1578">`Binary` 模式下打开的文件的以下规则不同于 `Random` 模式的规则：</span><span class="sxs-lookup"><span data-stu-id="306d5-1578">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="306d5-1579">`FileOpen` 函数中的 `RecordLength` 子句不起作用。</span><span class="sxs-lookup"><span data-stu-id="306d5-1579">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="306d5-1580">`FilePut` 连续将所有变量写入磁盘，也就是说，在记录之间不进行填充。</span><span class="sxs-lookup"><span data-stu-id="306d5-1580">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="306d5-1581">对于结构中除数组以外的任何数组，`FilePut` 仅写入数据。</span><span class="sxs-lookup"><span data-stu-id="306d5-1581">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="306d5-1582">不写入任何说明符。</span><span class="sxs-lookup"><span data-stu-id="306d5-1582">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="306d5-1583">`FilePut` 写入不包含双字节长度说明符的结构元素的可变长度字符串。</span><span class="sxs-lookup"><span data-stu-id="306d5-1583">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="306d5-1584">写入的字节数等于字符串中的字符数。</span><span class="sxs-lookup"><span data-stu-id="306d5-1584">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="306d5-1585">例如，下面的语句将11个字节写入第1个文件：</span><span class="sxs-lookup"><span data-stu-id="306d5-1585">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="306d5-1586">使用 `FilePut` 函数写入文件需要从 <xref:System.Security.Permissions.FileIOPermissionAccess> 枚举进行 `Write` 访问。</span><span class="sxs-lookup"><span data-stu-id="306d5-1586">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="306d5-1587">此示例使用 `FilePut` 函数将数据写入文件。</span><span class="sxs-lookup"><span data-stu-id="306d5-1587">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="306d5-1588">将 `Person` 结构的五个记录写入到文件中。</span><span class="sxs-lookup"><span data-stu-id="306d5-1588">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="306d5-1589"><paramref name="RecordNumber" /> &lt; 1 且不等于 -1。</span><span class="sxs-lookup"><span data-stu-id="306d5-1589"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="306d5-1590">文件模式无效。</span><span class="sxs-lookup"><span data-stu-id="306d5-1590">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files"><span data-ttu-id="306d5-1591">写入文件 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="306d5-1591">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, int Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void FilePut(int32 FileNumber, int32 Value, int64 RecordNumber) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Int32,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Integer, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * int * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, int32 Value, int64 RecordNumber) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int32" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="306d5-1592">必需。</span><span class="sxs-lookup"><span data-stu-id="306d5-1592">Required.</span></span> <span data-ttu-id="306d5-1593">任何有效文件数。</span><span class="sxs-lookup"><span data-stu-id="306d5-1593">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="306d5-1594">必需。</span><span class="sxs-lookup"><span data-stu-id="306d5-1594">Required.</span></span> <span data-ttu-id="306d5-1595">有效变量名，它包含写入磁盘的数据。</span><span class="sxs-lookup"><span data-stu-id="306d5-1595">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="306d5-1596">可选。</span><span class="sxs-lookup"><span data-stu-id="306d5-1596">Optional.</span></span> <span data-ttu-id="306d5-1597">开始写入处的记录号（<see langword="Random" /> 模式文件）或字节号（<see langword="Binary" /> 模式文件）。</span><span class="sxs-lookup"><span data-stu-id="306d5-1597">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="306d5-1598">将变量中得数据写入磁盘文件中。</span><span class="sxs-lookup"><span data-stu-id="306d5-1598">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="306d5-1599">相比 <see langword="FilePut" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span><span class="sxs-lookup"><span data-stu-id="306d5-1599">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="306d5-1600">有关详细信息，请参阅 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="306d5-1600">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="306d5-1601">`FilePut` 仅在 `Random` 和 `Binary` 模式下有效。</span><span class="sxs-lookup"><span data-stu-id="306d5-1601">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="306d5-1602">通常使用 `FileGet` 从文件中读取使用 `FilePut` 编写的数据。</span><span class="sxs-lookup"><span data-stu-id="306d5-1602">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="306d5-1603">文件中的第一个记录或字节位于位置1，第二个记录或字节在位置2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="306d5-1603">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="306d5-1604">如果省略 `RecordNumber`，则最后一个 `FileGet` 或 `FilePut` 函数之后或最后一个 `Seek` 函数指向的下一个记录或字节将被写入。</span><span class="sxs-lookup"><span data-stu-id="306d5-1604">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="306d5-1605">`StringIsFixedLength` 参数控制函数是将字符串解释为变量还是固定长度。</span><span class="sxs-lookup"><span data-stu-id="306d5-1605">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="306d5-1606">`True`参数时，`FilePut` 不会写入长度说明符。</span><span class="sxs-lookup"><span data-stu-id="306d5-1606">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="306d5-1607">如果将 `StringIsFixedLength` = `True` 与 `FilePut`一起使用，则必须使用 `FileGet`执行相同操作，并且必须确保将字符串初始化为预期的长度。</span><span class="sxs-lookup"><span data-stu-id="306d5-1607">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="306d5-1608">随机模式</span><span class="sxs-lookup"><span data-stu-id="306d5-1608">Random Mode</span></span>  
 <span data-ttu-id="306d5-1609">对于在 `Random` 模式下打开的文件，以下规则适用：</span><span class="sxs-lookup"><span data-stu-id="306d5-1609">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="306d5-1610">如果写入的数据的长度小于 `FileOpen` 函数的 `RecordLength` 子句中指定的长度，则 `FilePut` 会写入记录长度边界的后续记录。</span><span class="sxs-lookup"><span data-stu-id="306d5-1610">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="306d5-1611">一条记录的末尾和下一条记录的开头之间的空格将填充到文件缓冲区的现有内容中。</span><span class="sxs-lookup"><span data-stu-id="306d5-1611">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="306d5-1612">由于不能确定填充数据量，因此通常最好让记录长度与要写入的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="306d5-1612">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="306d5-1613">如果写入的数据的长度大于 `FileOpen` 函数的 `RecordLength` 子句中指定的长度，则将引发异常。</span><span class="sxs-lookup"><span data-stu-id="306d5-1613">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="306d5-1614">如果写入的变量是字符串，`FilePut` 会写入包含字符串长度的双字节说明符，然后写入该变量中的数据。</span><span class="sxs-lookup"><span data-stu-id="306d5-1614">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="306d5-1615">因此，`FileOpen` 函数中由 `RecordLength` 子句指定的记录长度必须大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="306d5-1615">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="306d5-1616">如果要写入的变量是包含数值类型的对象，`FilePut` 会写入两个字节，用于标识对象的 `VarType` 并写入变量。</span><span class="sxs-lookup"><span data-stu-id="306d5-1616">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="306d5-1617">例如，在编写包含整数的对象时，`FilePut` 会写入六个字节：两个字节，用于将对象标识为 `VarType(3)` （`Integer`）和四个包含数据的字节。</span><span class="sxs-lookup"><span data-stu-id="306d5-1617">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="306d5-1618">`FileOpen` 函数中由 `RecordLength` 参数指定的记录长度必须大于存储变量所需的实际字节数。</span><span class="sxs-lookup"><span data-stu-id="306d5-1618">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="306d5-1619">如果要写入的变量是包含字符串的对象，`FilePut` 将写入标识对象的 `VarType(8)` 的两个字节说明符，这是一个指示字符串长度的双字节说明符，然后写入字符串数据。</span><span class="sxs-lookup"><span data-stu-id="306d5-1619">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="306d5-1620">`FileOpen` 函数中由 `RecordLength` 参数指定的记录长度必须至少为4个字节，大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="306d5-1620">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="306d5-1621">如果要在不包含说明符的情况下放置字符串，则应将 `True` 传递给 `StringIsFixedLength` 参数，而你读入的字符串应为正确的长度。</span><span class="sxs-lookup"><span data-stu-id="306d5-1621">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="306d5-1622">如果要写入的变量是数组，则可以选择是否为数组的大小和维度编写说明符。</span><span class="sxs-lookup"><span data-stu-id="306d5-1622">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="306d5-1623">Visual Basic 6.0 及更早版本写入动态数组的文件描述符，但不写入固定大小的数组。</span><span class="sxs-lookup"><span data-stu-id="306d5-1623">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="306d5-1624">Visual Basic 2005 默认为不写入描述符。</span><span class="sxs-lookup"><span data-stu-id="306d5-1624">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="306d5-1625">若要编写描述符，请将 `ArrayIsDynamic` 参数设置为 `True`。</span><span class="sxs-lookup"><span data-stu-id="306d5-1625">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="306d5-1626">写入数组时，必须匹配读取数组的方式;如果它将使用描述符读取，则必须编写描述符。</span><span class="sxs-lookup"><span data-stu-id="306d5-1626">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="306d5-1627">描述符指定数组的秩、大小和每个排名的下限。</span><span class="sxs-lookup"><span data-stu-id="306d5-1627">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="306d5-1628">其长度等于2再加上维度数的8倍：（2 + 8 \* NumberOfDimensions）。</span><span class="sxs-lookup"><span data-stu-id="306d5-1628">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="306d5-1629">`FileOpen` 函数中由 `RecordLength` 子句指定的记录长度必须大于或等于写入数组数据和数组描述符所需的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="306d5-1629">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="306d5-1630">例如，当数组写入磁盘时，以下数组声明需要218字节。</span><span class="sxs-lookup"><span data-stu-id="306d5-1630">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="306d5-1631">如果写入的变量是任何其他类型的变量（不是变长字符串或对象），`FilePut` 仅写入变量数据。</span><span class="sxs-lookup"><span data-stu-id="306d5-1631">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="306d5-1632">`FileOpen` 函数中由 `RecordLength` 子句指定的记录长度必须大于或等于要写入的数据的长度。</span><span class="sxs-lookup"><span data-stu-id="306d5-1632">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="306d5-1633">`FilePut` 写入结构的元素，就好像每个元素都是单独编写的，只不过元素之间没有任何空白。</span><span class="sxs-lookup"><span data-stu-id="306d5-1633">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="306d5-1634">`VBFixedString` 特性可应用于结构中的字符串字段，以指示写入磁盘时字符串的大小。</span><span class="sxs-lookup"><span data-stu-id="306d5-1634">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="306d5-1635">写入磁盘时，将截断比 `VBFixedString` 属性指定的字节数更多的字符串字段。</span><span class="sxs-lookup"><span data-stu-id="306d5-1635">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="306d5-1636">二进制模式</span><span class="sxs-lookup"><span data-stu-id="306d5-1636">Binary Mode</span></span>  
 <span data-ttu-id="306d5-1637">对于在 `Binary` 模式下打开的文件，大多数 `Random` 模式规则都适用，但有一些例外情况。</span><span class="sxs-lookup"><span data-stu-id="306d5-1637">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="306d5-1638">`Binary` 模式下打开的文件的以下规则不同于 `Random` 模式的规则：</span><span class="sxs-lookup"><span data-stu-id="306d5-1638">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="306d5-1639">`FileOpen` 函数中的 `RecordLength` 子句不起作用。</span><span class="sxs-lookup"><span data-stu-id="306d5-1639">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="306d5-1640">`FilePut` 连续将所有变量写入磁盘，也就是说，在记录之间不进行填充。</span><span class="sxs-lookup"><span data-stu-id="306d5-1640">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="306d5-1641">对于结构中除数组以外的任何数组，`FilePut` 仅写入数据。</span><span class="sxs-lookup"><span data-stu-id="306d5-1641">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="306d5-1642">不写入任何说明符。</span><span class="sxs-lookup"><span data-stu-id="306d5-1642">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="306d5-1643">`FilePut` 写入不包含双字节长度说明符的结构元素的可变长度字符串。</span><span class="sxs-lookup"><span data-stu-id="306d5-1643">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="306d5-1644">写入的字节数等于字符串中的字符数。</span><span class="sxs-lookup"><span data-stu-id="306d5-1644">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="306d5-1645">例如，下面的语句将11个字节写入第1个文件：</span><span class="sxs-lookup"><span data-stu-id="306d5-1645">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="306d5-1646">使用 `FilePut` 函数写入文件需要从 <xref:System.Security.Permissions.FileIOPermissionAccess> 枚举进行 `Write` 访问。</span><span class="sxs-lookup"><span data-stu-id="306d5-1646">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="306d5-1647">此示例使用 `FilePut` 函数将数据写入文件。</span><span class="sxs-lookup"><span data-stu-id="306d5-1647">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="306d5-1648">将 `Person` 结构的五个记录写入到文件中。</span><span class="sxs-lookup"><span data-stu-id="306d5-1648">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="306d5-1649"><paramref name="RecordNumber" /> &lt; 1 且不等于 -1。</span><span class="sxs-lookup"><span data-stu-id="306d5-1649"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="306d5-1650">文件模式无效。</span><span class="sxs-lookup"><span data-stu-id="306d5-1650">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files"><span data-ttu-id="306d5-1651">写入文件 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="306d5-1651">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, long Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void FilePut(int32 FileNumber, int64 Value, int64 RecordNumber) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Long, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * int64 * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, int64 Value, int64 RecordNumber) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int64" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="306d5-1652">必需。</span><span class="sxs-lookup"><span data-stu-id="306d5-1652">Required.</span></span> <span data-ttu-id="306d5-1653">任何有效文件数。</span><span class="sxs-lookup"><span data-stu-id="306d5-1653">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="306d5-1654">必需。</span><span class="sxs-lookup"><span data-stu-id="306d5-1654">Required.</span></span> <span data-ttu-id="306d5-1655">有效变量名，它包含写入磁盘的数据。</span><span class="sxs-lookup"><span data-stu-id="306d5-1655">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="306d5-1656">可选。</span><span class="sxs-lookup"><span data-stu-id="306d5-1656">Optional.</span></span> <span data-ttu-id="306d5-1657">开始写入处的记录号（<see langword="Random" /> 模式文件）或字节号（<see langword="Binary" /> 模式文件）。</span><span class="sxs-lookup"><span data-stu-id="306d5-1657">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="306d5-1658">将变量中得数据写入磁盘文件中。</span><span class="sxs-lookup"><span data-stu-id="306d5-1658">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="306d5-1659">相比 <see langword="FilePut" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span><span class="sxs-lookup"><span data-stu-id="306d5-1659">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="306d5-1660">有关详细信息，请参阅 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="306d5-1660">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="306d5-1661">`FilePut` 仅在 `Random` 和 `Binary` 模式下有效。</span><span class="sxs-lookup"><span data-stu-id="306d5-1661">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="306d5-1662">通常使用 `FileGet` 从文件中读取使用 `FilePut` 编写的数据。</span><span class="sxs-lookup"><span data-stu-id="306d5-1662">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="306d5-1663">文件中的第一个记录或字节位于位置1，第二个记录或字节在位置2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="306d5-1663">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="306d5-1664">如果省略 `RecordNumber`，则最后一个 `FileGet` 或 `FilePut` 函数之后或最后一个 `Seek` 函数指向的下一个记录或字节将被写入。</span><span class="sxs-lookup"><span data-stu-id="306d5-1664">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="306d5-1665">`StringIsFixedLength` 参数控制函数是将字符串解释为变量还是固定长度。</span><span class="sxs-lookup"><span data-stu-id="306d5-1665">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="306d5-1666">`True`参数时，`FilePut` 不会写入长度说明符。</span><span class="sxs-lookup"><span data-stu-id="306d5-1666">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="306d5-1667">如果将 `StringIsFixedLength` = `True` 与 `FilePut`一起使用，则必须使用 `FileGet`执行相同操作，并且必须确保将字符串初始化为预期的长度。</span><span class="sxs-lookup"><span data-stu-id="306d5-1667">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="306d5-1668">随机模式</span><span class="sxs-lookup"><span data-stu-id="306d5-1668">Random Mode</span></span>  
 <span data-ttu-id="306d5-1669">对于在 `Random` 模式下打开的文件，以下规则适用：</span><span class="sxs-lookup"><span data-stu-id="306d5-1669">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="306d5-1670">如果写入的数据的长度小于 `FileOpen` 函数的 `RecordLength` 子句中指定的长度，则 `FilePut` 会写入记录长度边界的后续记录。</span><span class="sxs-lookup"><span data-stu-id="306d5-1670">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="306d5-1671">一条记录的末尾和下一条记录的开头之间的空格将填充到文件缓冲区的现有内容中。</span><span class="sxs-lookup"><span data-stu-id="306d5-1671">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="306d5-1672">由于不能确定填充数据量，因此通常最好让记录长度与要写入的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="306d5-1672">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="306d5-1673">如果写入的数据的长度大于 `FileOpen` 函数的 `RecordLength` 子句中指定的长度，则将引发异常。</span><span class="sxs-lookup"><span data-stu-id="306d5-1673">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="306d5-1674">如果写入的变量是字符串，`FilePut` 会写入包含字符串长度的双字节说明符，然后写入该变量中的数据。</span><span class="sxs-lookup"><span data-stu-id="306d5-1674">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="306d5-1675">因此，`FileOpen` 函数中由 `RecordLength` 子句指定的记录长度必须大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="306d5-1675">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="306d5-1676">如果要写入的变量是包含数值类型的对象，`FilePut` 会写入两个字节，用于标识对象的 `VarType` 并写入变量。</span><span class="sxs-lookup"><span data-stu-id="306d5-1676">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="306d5-1677">例如，在编写包含整数的对象时，`FilePut` 会写入六个字节：两个字节，用于将对象标识为 `VarType(3)` （`Integer`）和四个包含数据的字节。</span><span class="sxs-lookup"><span data-stu-id="306d5-1677">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="306d5-1678">`FileOpen` 函数中由 `RecordLength` 参数指定的记录长度必须大于存储变量所需的实际字节数。</span><span class="sxs-lookup"><span data-stu-id="306d5-1678">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="306d5-1679">如果要写入的变量是包含字符串的对象，`FilePut` 将写入标识对象的 `VarType(8)` 的两个字节说明符，这是一个指示字符串长度的双字节说明符，然后写入字符串数据。</span><span class="sxs-lookup"><span data-stu-id="306d5-1679">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="306d5-1680">`FileOpen` 函数中由 `RecordLength` 参数指定的记录长度必须至少为4个字节，大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="306d5-1680">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="306d5-1681">如果要在不包含说明符的情况下放置字符串，则应将 `True` 传递给 `StringIsFixedLength` 参数，而你读入的字符串应为正确的长度。</span><span class="sxs-lookup"><span data-stu-id="306d5-1681">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="306d5-1682">如果要写入的变量是数组，则可以选择是否为数组的大小和维度编写说明符。</span><span class="sxs-lookup"><span data-stu-id="306d5-1682">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="306d5-1683">Visual Basic 6.0 及更早版本写入动态数组的文件描述符，但不写入固定大小的数组。</span><span class="sxs-lookup"><span data-stu-id="306d5-1683">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="306d5-1684">Visual Basic 2005 默认为不写入描述符。</span><span class="sxs-lookup"><span data-stu-id="306d5-1684">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="306d5-1685">若要编写描述符，请将 `ArrayIsDynamic` 参数设置为 `True`。</span><span class="sxs-lookup"><span data-stu-id="306d5-1685">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="306d5-1686">写入数组时，必须匹配读取数组的方式;如果它将使用描述符读取，则必须编写描述符。</span><span class="sxs-lookup"><span data-stu-id="306d5-1686">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="306d5-1687">描述符指定数组的秩、大小和每个排名的下限。</span><span class="sxs-lookup"><span data-stu-id="306d5-1687">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="306d5-1688">其长度等于2再加上维度数的8倍：（2 + 8 \* NumberOfDimensions）。</span><span class="sxs-lookup"><span data-stu-id="306d5-1688">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="306d5-1689">`FileOpen` 函数中由 `RecordLength` 子句指定的记录长度必须大于或等于写入数组数据和数组描述符所需的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="306d5-1689">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="306d5-1690">例如，当数组写入磁盘时，以下数组声明需要218字节。</span><span class="sxs-lookup"><span data-stu-id="306d5-1690">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="306d5-1691">如果写入的变量是任何其他类型的变量（不是变长字符串或对象），`FilePut` 仅写入变量数据。</span><span class="sxs-lookup"><span data-stu-id="306d5-1691">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="306d5-1692">`FileOpen` 函数中由 `RecordLength` 子句指定的记录长度必须大于或等于要写入的数据的长度。</span><span class="sxs-lookup"><span data-stu-id="306d5-1692">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="306d5-1693">`FilePut` 写入结构的元素，就好像每个元素都是单独编写的，只不过元素之间没有任何空白。</span><span class="sxs-lookup"><span data-stu-id="306d5-1693">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="306d5-1694">`VBFixedString` 特性可应用于结构中的字符串字段，以指示写入磁盘时字符串的大小。</span><span class="sxs-lookup"><span data-stu-id="306d5-1694">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="306d5-1695">写入磁盘时，将截断比 `VBFixedString` 属性指定的字节数更多的字符串字段。</span><span class="sxs-lookup"><span data-stu-id="306d5-1695">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="306d5-1696">二进制模式</span><span class="sxs-lookup"><span data-stu-id="306d5-1696">Binary Mode</span></span>  
 <span data-ttu-id="306d5-1697">对于在 `Binary` 模式下打开的文件，大多数 `Random` 模式规则都适用，但有一些例外情况。</span><span class="sxs-lookup"><span data-stu-id="306d5-1697">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="306d5-1698">`Binary` 模式下打开的文件的以下规则不同于 `Random` 模式的规则：</span><span class="sxs-lookup"><span data-stu-id="306d5-1698">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="306d5-1699">`FileOpen` 函数中的 `RecordLength` 子句不起作用。</span><span class="sxs-lookup"><span data-stu-id="306d5-1699">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="306d5-1700">`FilePut` 连续将所有变量写入磁盘，也就是说，在记录之间不进行填充。</span><span class="sxs-lookup"><span data-stu-id="306d5-1700">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="306d5-1701">对于结构中除数组以外的任何数组，`FilePut` 仅写入数据。</span><span class="sxs-lookup"><span data-stu-id="306d5-1701">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="306d5-1702">不写入任何说明符。</span><span class="sxs-lookup"><span data-stu-id="306d5-1702">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="306d5-1703">`FilePut` 写入不包含双字节长度说明符的结构元素的可变长度字符串。</span><span class="sxs-lookup"><span data-stu-id="306d5-1703">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="306d5-1704">写入的字节数等于字符串中的字符数。</span><span class="sxs-lookup"><span data-stu-id="306d5-1704">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="306d5-1705">例如，下面的语句将11个字节写入第1个文件：</span><span class="sxs-lookup"><span data-stu-id="306d5-1705">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="306d5-1706">使用 `FilePut` 函数写入文件需要从 <xref:System.Security.Permissions.FileIOPermissionAccess> 枚举进行 `Write` 访问。</span><span class="sxs-lookup"><span data-stu-id="306d5-1706">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="306d5-1707">此示例使用 `FilePut` 函数将数据写入文件。</span><span class="sxs-lookup"><span data-stu-id="306d5-1707">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="306d5-1708">将 `Person` 结构的五个记录写入到文件中。</span><span class="sxs-lookup"><span data-stu-id="306d5-1708">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="306d5-1709"><paramref name="RecordNumber" /> &lt; 1 且不等于 -1。</span><span class="sxs-lookup"><span data-stu-id="306d5-1709"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="306d5-1710">文件模式无效。</span><span class="sxs-lookup"><span data-stu-id="306d5-1710">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files"><span data-ttu-id="306d5-1711">写入文件 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="306d5-1711">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, float Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void FilePut(int32 FileNumber, float32 Value, int64 RecordNumber) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Single,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Single, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * single * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, float32 Value, int64 RecordNumber) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Single" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="306d5-1712">必需。</span><span class="sxs-lookup"><span data-stu-id="306d5-1712">Required.</span></span> <span data-ttu-id="306d5-1713">任何有效文件数。</span><span class="sxs-lookup"><span data-stu-id="306d5-1713">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="306d5-1714">必需。</span><span class="sxs-lookup"><span data-stu-id="306d5-1714">Required.</span></span> <span data-ttu-id="306d5-1715">有效变量名，它包含写入磁盘的数据。</span><span class="sxs-lookup"><span data-stu-id="306d5-1715">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="306d5-1716">可选。</span><span class="sxs-lookup"><span data-stu-id="306d5-1716">Optional.</span></span> <span data-ttu-id="306d5-1717">开始写入处的记录号（<see langword="Random" /> 模式文件）或字节号（<see langword="Binary" /> 模式文件）。</span><span class="sxs-lookup"><span data-stu-id="306d5-1717">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="306d5-1718">将变量中得数据写入磁盘文件中。</span><span class="sxs-lookup"><span data-stu-id="306d5-1718">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="306d5-1719">相比 <see langword="FilePut" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span><span class="sxs-lookup"><span data-stu-id="306d5-1719">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="306d5-1720">有关详细信息，请参阅 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="306d5-1720">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="306d5-1721">`FilePut` 仅在 `Random` 和 `Binary` 模式下有效。</span><span class="sxs-lookup"><span data-stu-id="306d5-1721">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="306d5-1722">通常使用 `FileGet` 从文件中读取使用 `FilePut` 编写的数据。</span><span class="sxs-lookup"><span data-stu-id="306d5-1722">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="306d5-1723">文件中的第一个记录或字节位于位置1，第二个记录或字节在位置2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="306d5-1723">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="306d5-1724">如果省略 `RecordNumber`，则最后一个 `FileGet` 或 `FilePut` 函数之后或最后一个 `Seek` 函数指向的下一个记录或字节将被写入。</span><span class="sxs-lookup"><span data-stu-id="306d5-1724">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="306d5-1725">`StringIsFixedLength` 参数控制函数是将字符串解释为变量还是固定长度。</span><span class="sxs-lookup"><span data-stu-id="306d5-1725">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="306d5-1726">`True`参数时，`FilePut` 不会写入长度说明符。</span><span class="sxs-lookup"><span data-stu-id="306d5-1726">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="306d5-1727">如果将 `StringIsFixedLength` = `True` 与 `FilePut`一起使用，则必须使用 `FileGet`执行相同操作，并且必须确保将字符串初始化为预期的长度。</span><span class="sxs-lookup"><span data-stu-id="306d5-1727">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="306d5-1728">随机模式</span><span class="sxs-lookup"><span data-stu-id="306d5-1728">Random Mode</span></span>  
 <span data-ttu-id="306d5-1729">对于在 `Random` 模式下打开的文件，以下规则适用：</span><span class="sxs-lookup"><span data-stu-id="306d5-1729">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="306d5-1730">如果写入的数据的长度小于 `FileOpen` 函数的 `RecordLength` 子句中指定的长度，则 `FilePut` 会写入记录长度边界的后续记录。</span><span class="sxs-lookup"><span data-stu-id="306d5-1730">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="306d5-1731">一条记录的末尾和下一条记录的开头之间的空格将填充到文件缓冲区的现有内容中。</span><span class="sxs-lookup"><span data-stu-id="306d5-1731">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="306d5-1732">由于不能确定填充数据量，因此通常最好让记录长度与要写入的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="306d5-1732">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="306d5-1733">如果写入的数据的长度大于 `FileOpen` 函数的 `RecordLength` 子句中指定的长度，则将引发异常。</span><span class="sxs-lookup"><span data-stu-id="306d5-1733">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="306d5-1734">如果写入的变量是字符串，`FilePut` 会写入包含字符串长度的双字节说明符，然后写入该变量中的数据。</span><span class="sxs-lookup"><span data-stu-id="306d5-1734">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="306d5-1735">因此，`FileOpen` 函数中由 `RecordLength` 子句指定的记录长度必须大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="306d5-1735">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="306d5-1736">如果要写入的变量是包含数值类型的对象，`FilePut` 会写入两个字节，用于标识对象的 `VarType` 并写入变量。</span><span class="sxs-lookup"><span data-stu-id="306d5-1736">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="306d5-1737">例如，在编写包含整数的对象时，`FilePut` 会写入六个字节：两个字节，用于将对象标识为 `VarType(3)` （`Integer`）和四个包含数据的字节。</span><span class="sxs-lookup"><span data-stu-id="306d5-1737">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="306d5-1738">`FileOpen` 函数中由 `RecordLength` 参数指定的记录长度必须大于存储变量所需的实际字节数。</span><span class="sxs-lookup"><span data-stu-id="306d5-1738">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="306d5-1739">如果要写入的变量是包含字符串的对象，`FilePut` 将写入标识对象的 `VarType(8)` 的两个字节说明符，这是一个指示字符串长度的双字节说明符，然后写入字符串数据。</span><span class="sxs-lookup"><span data-stu-id="306d5-1739">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="306d5-1740">`FileOpen` 函数中由 `RecordLength` 参数指定的记录长度必须至少为4个字节，大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="306d5-1740">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="306d5-1741">如果要在不包含说明符的情况下放置字符串，则应将 `True` 传递给 `StringIsFixedLength` 参数，而你读入的字符串应为正确的长度。</span><span class="sxs-lookup"><span data-stu-id="306d5-1741">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="306d5-1742">如果要写入的变量是数组，则可以选择是否为数组的大小和维度编写说明符。</span><span class="sxs-lookup"><span data-stu-id="306d5-1742">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="306d5-1743">Visual Basic 6.0 及更早版本写入动态数组的文件描述符，但不写入固定大小的数组。</span><span class="sxs-lookup"><span data-stu-id="306d5-1743">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="306d5-1744">Visual Basic 2005 默认为不写入描述符。</span><span class="sxs-lookup"><span data-stu-id="306d5-1744">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="306d5-1745">若要编写描述符，请将 `ArrayIsDynamic` 参数设置为 `True`。</span><span class="sxs-lookup"><span data-stu-id="306d5-1745">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="306d5-1746">写入数组时，必须匹配读取数组的方式;如果它将使用描述符读取，则必须编写描述符。</span><span class="sxs-lookup"><span data-stu-id="306d5-1746">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="306d5-1747">描述符指定数组的秩、大小和每个排名的下限。</span><span class="sxs-lookup"><span data-stu-id="306d5-1747">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="306d5-1748">其长度等于2再加上维度数的8倍：（2 + 8 \* NumberOfDimensions）。</span><span class="sxs-lookup"><span data-stu-id="306d5-1748">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="306d5-1749">`FileOpen` 函数中由 `RecordLength` 子句指定的记录长度必须大于或等于写入数组数据和数组描述符所需的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="306d5-1749">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="306d5-1750">例如，当数组写入磁盘时，以下数组声明需要218字节。</span><span class="sxs-lookup"><span data-stu-id="306d5-1750">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="306d5-1751">如果写入的变量是任何其他类型的变量（不是变长字符串或对象），`FilePut` 仅写入变量数据。</span><span class="sxs-lookup"><span data-stu-id="306d5-1751">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="306d5-1752">`FileOpen` 函数中由 `RecordLength` 子句指定的记录长度必须大于或等于要写入的数据的长度。</span><span class="sxs-lookup"><span data-stu-id="306d5-1752">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="306d5-1753">`FilePut` 写入结构的元素，就好像每个元素都是单独编写的，只不过元素之间没有任何空白。</span><span class="sxs-lookup"><span data-stu-id="306d5-1753">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="306d5-1754">`VBFixedString` 特性可应用于结构中的字符串字段，以指示写入磁盘时字符串的大小。</span><span class="sxs-lookup"><span data-stu-id="306d5-1754">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="306d5-1755">写入磁盘时，将截断比 `VBFixedString` 属性指定的字节数更多的字符串字段。</span><span class="sxs-lookup"><span data-stu-id="306d5-1755">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="306d5-1756">二进制模式</span><span class="sxs-lookup"><span data-stu-id="306d5-1756">Binary Mode</span></span>  
 <span data-ttu-id="306d5-1757">对于在 `Binary` 模式下打开的文件，大多数 `Random` 模式规则都适用，但有一些例外情况。</span><span class="sxs-lookup"><span data-stu-id="306d5-1757">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="306d5-1758">`Binary` 模式下打开的文件的以下规则不同于 `Random` 模式的规则：</span><span class="sxs-lookup"><span data-stu-id="306d5-1758">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="306d5-1759">`FileOpen` 函数中的 `RecordLength` 子句不起作用。</span><span class="sxs-lookup"><span data-stu-id="306d5-1759">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="306d5-1760">`FilePut` 连续将所有变量写入磁盘，也就是说，在记录之间不进行填充。</span><span class="sxs-lookup"><span data-stu-id="306d5-1760">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="306d5-1761">对于结构中除数组以外的任何数组，`FilePut` 仅写入数据。</span><span class="sxs-lookup"><span data-stu-id="306d5-1761">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="306d5-1762">不写入任何说明符。</span><span class="sxs-lookup"><span data-stu-id="306d5-1762">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="306d5-1763">`FilePut` 写入不包含双字节长度说明符的结构元素的可变长度字符串。</span><span class="sxs-lookup"><span data-stu-id="306d5-1763">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="306d5-1764">写入的字节数等于字符串中的字符数。</span><span class="sxs-lookup"><span data-stu-id="306d5-1764">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="306d5-1765">例如，下面的语句将11个字节写入第1个文件：</span><span class="sxs-lookup"><span data-stu-id="306d5-1765">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="306d5-1766">使用 `FilePut` 函数写入文件需要从 <xref:System.Security.Permissions.FileIOPermissionAccess> 枚举进行 `Write` 访问。</span><span class="sxs-lookup"><span data-stu-id="306d5-1766">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="306d5-1767">此示例使用 `FilePut` 函数将数据写入文件。</span><span class="sxs-lookup"><span data-stu-id="306d5-1767">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="306d5-1768">将 `Person` 结构的五个记录写入到文件中。</span><span class="sxs-lookup"><span data-stu-id="306d5-1768">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="306d5-1769"><paramref name="RecordNumber" /> &lt; 1 且不等于 -1。</span><span class="sxs-lookup"><span data-stu-id="306d5-1769"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="306d5-1770">文件模式无效。</span><span class="sxs-lookup"><span data-stu-id="306d5-1770">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files"><span data-ttu-id="306d5-1771">写入文件 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="306d5-1771">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, ValueType Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void FilePut(int32 FileNumber, class System.ValueType Value, int64 RecordNumber) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.ValueType,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As ValueType, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * ValueType * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, class System.ValueType Value, int64 RecordNumber) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.ValueType" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="306d5-1772">必需。</span><span class="sxs-lookup"><span data-stu-id="306d5-1772">Required.</span></span> <span data-ttu-id="306d5-1773">任何有效文件数。</span><span class="sxs-lookup"><span data-stu-id="306d5-1773">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="306d5-1774">必需。</span><span class="sxs-lookup"><span data-stu-id="306d5-1774">Required.</span></span> <span data-ttu-id="306d5-1775">有效变量名，它包含写入磁盘的数据。</span><span class="sxs-lookup"><span data-stu-id="306d5-1775">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="306d5-1776">可选。</span><span class="sxs-lookup"><span data-stu-id="306d5-1776">Optional.</span></span> <span data-ttu-id="306d5-1777">开始写入处的记录号（<see langword="Random" /> 模式文件）或字节号（<see langword="Binary" /> 模式文件）。</span><span class="sxs-lookup"><span data-stu-id="306d5-1777">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="306d5-1778">将变量中得数据写入磁盘文件中。</span><span class="sxs-lookup"><span data-stu-id="306d5-1778">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="306d5-1779">相比 <see langword="FilePut" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span><span class="sxs-lookup"><span data-stu-id="306d5-1779">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="306d5-1780">有关详细信息，请参阅 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="306d5-1780">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="306d5-1781">`FilePut` 仅在 `Random` 和 `Binary` 模式下有效。</span><span class="sxs-lookup"><span data-stu-id="306d5-1781">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="306d5-1782">通常使用 `FileGet` 从文件中读取使用 `FilePut` 编写的数据。</span><span class="sxs-lookup"><span data-stu-id="306d5-1782">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="306d5-1783">文件中的第一个记录或字节位于位置1，第二个记录或字节在位置2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="306d5-1783">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="306d5-1784">如果省略 `RecordNumber`，则最后一个 `FileGet` 或 `FilePut` 函数之后或最后一个 `Seek` 函数指向的下一个记录或字节将被写入。</span><span class="sxs-lookup"><span data-stu-id="306d5-1784">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="306d5-1785">`StringIsFixedLength` 参数控制函数是将字符串解释为变量还是固定长度。</span><span class="sxs-lookup"><span data-stu-id="306d5-1785">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="306d5-1786">`True`参数时，`FilePut` 不会写入长度说明符。</span><span class="sxs-lookup"><span data-stu-id="306d5-1786">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="306d5-1787">如果将 `StringIsFixedLength` = `True` 与 `FilePut`一起使用，则必须使用 `FileGet`执行相同操作，并且必须确保将字符串初始化为预期的长度。</span><span class="sxs-lookup"><span data-stu-id="306d5-1787">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="306d5-1788">随机模式</span><span class="sxs-lookup"><span data-stu-id="306d5-1788">Random Mode</span></span>  
 <span data-ttu-id="306d5-1789">对于在 `Random` 模式下打开的文件，以下规则适用：</span><span class="sxs-lookup"><span data-stu-id="306d5-1789">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="306d5-1790">如果写入的数据的长度小于 `FileOpen` 函数的`RecordLength` 子句中指定的长度，则 `FilePut` 会写入记录长度边界的后续记录。</span><span class="sxs-lookup"><span data-stu-id="306d5-1790">If the length of the data being written is less than the length specified in the`RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="306d5-1791">一条记录的末尾和下一条记录的开头之间的空格将填充到文件缓冲区的现有内容中。</span><span class="sxs-lookup"><span data-stu-id="306d5-1791">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="306d5-1792">由于不能确定填充数据量，因此通常最好让记录长度与要写入的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="306d5-1792">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="306d5-1793">如果写入的数据的长度大于 `FileOpen` 函数的 `RecordLength` 子句中指定的长度，则将引发异常。</span><span class="sxs-lookup"><span data-stu-id="306d5-1793">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="306d5-1794">如果写入的变量是字符串，`FilePut` 会写入包含字符串长度的双字节说明符，然后写入该变量中的数据。</span><span class="sxs-lookup"><span data-stu-id="306d5-1794">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="306d5-1795">因此，`FileOpen` 函数中由 `RecordLength` 子句指定的记录长度必须大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="306d5-1795">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="306d5-1796">如果要写入的变量是包含数值类型的对象，`FilePut` 会写入两个字节，用于标识对象的 `VarType` 并写入变量。</span><span class="sxs-lookup"><span data-stu-id="306d5-1796">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="306d5-1797">例如，在编写包含整数的对象时，`FilePut` 会写入六个字节：两个字节，用于将对象标识为 `VarType(3)` （`Integer`）和四个包含数据的字节。</span><span class="sxs-lookup"><span data-stu-id="306d5-1797">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="306d5-1798">`FileOpen` 函数中由 `RecordLength` 参数指定的记录长度必须大于存储变量所需的实际字节数。</span><span class="sxs-lookup"><span data-stu-id="306d5-1798">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="306d5-1799">如果要写入的变量是包含字符串的对象，`FilePut` 将写入标识对象的 `VarType(8)` 的两个字节说明符，这是一个指示字符串长度的双字节说明符，然后写入字符串数据。</span><span class="sxs-lookup"><span data-stu-id="306d5-1799">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="306d5-1800">`FileOpen` 函数中由 `RecordLength` 参数指定的记录长度必须至少为4个字节，大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="306d5-1800">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="306d5-1801">如果要在不包含说明符的情况下放置字符串，则应将 `True` 传递给 `StringIsFixedLength` 参数，而你读入的字符串应为正确的长度。</span><span class="sxs-lookup"><span data-stu-id="306d5-1801">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="306d5-1802">如果要写入的变量是数组，则可以选择是否为数组的大小和维度编写说明符。</span><span class="sxs-lookup"><span data-stu-id="306d5-1802">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="306d5-1803">Visual Basic 6.0 及更早版本写入动态数组的文件描述符，但不写入固定大小的数组。</span><span class="sxs-lookup"><span data-stu-id="306d5-1803">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="306d5-1804">Visual Basic 2005 默认为不写入描述符。</span><span class="sxs-lookup"><span data-stu-id="306d5-1804">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="306d5-1805">若要编写描述符，请将 `ArrayIsDynamic` 参数设置为 `True`。</span><span class="sxs-lookup"><span data-stu-id="306d5-1805">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="306d5-1806">写入数组时，必须匹配读取数组的方式;如果它将使用描述符读取，则必须编写描述符。</span><span class="sxs-lookup"><span data-stu-id="306d5-1806">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="306d5-1807">描述符指定数组的秩、大小和每个排名的下限。</span><span class="sxs-lookup"><span data-stu-id="306d5-1807">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="306d5-1808">其长度等于2再加上维度数的8倍：（2 + 8 \* NumberOfDimensions）。</span><span class="sxs-lookup"><span data-stu-id="306d5-1808">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="306d5-1809">`FileOpen` 函数中由 `RecordLength` 子句指定的记录长度必须大于或等于写入数组数据和数组描述符所需的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="306d5-1809">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="306d5-1810">例如，当数组写入磁盘时，以下数组声明需要218字节。</span><span class="sxs-lookup"><span data-stu-id="306d5-1810">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="306d5-1811">如果写入的变量是任何其他类型的变量（不是变长字符串或对象），`FilePut` 仅写入变量数据。</span><span class="sxs-lookup"><span data-stu-id="306d5-1811">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="306d5-1812">`FileOpen` 函数中由 `RecordLength` 子句指定的记录长度必须大于或等于要写入的数据的长度。</span><span class="sxs-lookup"><span data-stu-id="306d5-1812">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="306d5-1813">`FilePut` 写入结构的元素，就好像每个元素都是单独编写的，只不过元素之间没有任何空白。</span><span class="sxs-lookup"><span data-stu-id="306d5-1813">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="306d5-1814">`VBFixedString` 特性可应用于结构中的字符串字段，以指示写入磁盘时字符串的大小。</span><span class="sxs-lookup"><span data-stu-id="306d5-1814">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="306d5-1815">写入磁盘时，将截断比 `VBFixedString` 属性指定的字节数更多的字符串字段。</span><span class="sxs-lookup"><span data-stu-id="306d5-1815">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="306d5-1816">二进制模式</span><span class="sxs-lookup"><span data-stu-id="306d5-1816">Binary Mode</span></span>  
 <span data-ttu-id="306d5-1817">对于在 `Binary` 模式下打开的文件，大多数 `Random` 模式规则都适用，但有一些例外情况。</span><span class="sxs-lookup"><span data-stu-id="306d5-1817">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="306d5-1818">`Binary` 模式下打开的文件的以下规则不同于 `Random` 模式的规则：</span><span class="sxs-lookup"><span data-stu-id="306d5-1818">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="306d5-1819">`FileOpen` 函数中的 `RecordLength` 子句不起作用。</span><span class="sxs-lookup"><span data-stu-id="306d5-1819">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="306d5-1820">`FilePut` 连续将所有变量写入磁盘，也就是说，在记录之间不进行填充。</span><span class="sxs-lookup"><span data-stu-id="306d5-1820">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="306d5-1821">对于结构中除数组以外的任何数组，`FilePut` 仅写入数据。</span><span class="sxs-lookup"><span data-stu-id="306d5-1821">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="306d5-1822">不写入任何说明符。</span><span class="sxs-lookup"><span data-stu-id="306d5-1822">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="306d5-1823">`FilePut` 写入不包含双字节长度说明符的结构元素的可变长度字符串。</span><span class="sxs-lookup"><span data-stu-id="306d5-1823">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="306d5-1824">写入的字节数等于字符串中的字符数。</span><span class="sxs-lookup"><span data-stu-id="306d5-1824">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="306d5-1825">例如，下面的语句将11个字节写入第1个文件：</span><span class="sxs-lookup"><span data-stu-id="306d5-1825">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="306d5-1826">使用 `FilePut` 函数写入文件需要从 <xref:System.Security.Permissions.FileIOPermissionAccess> 枚举进行 `Write` 访问。</span><span class="sxs-lookup"><span data-stu-id="306d5-1826">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="306d5-1827">此示例使用 `FilePut` 函数将数据写入文件。</span><span class="sxs-lookup"><span data-stu-id="306d5-1827">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="306d5-1828">将 `Person` 结构的五个记录写入到文件中。</span><span class="sxs-lookup"><span data-stu-id="306d5-1828">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="306d5-1829"><paramref name="RecordNumber" /> &lt; 1 且不等于 -1。</span><span class="sxs-lookup"><span data-stu-id="306d5-1829"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="306d5-1830">文件模式无效。</span><span class="sxs-lookup"><span data-stu-id="306d5-1830">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files"><span data-ttu-id="306d5-1831">写入文件 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="306d5-1831">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (object FileNumber, object Value, object RecordNumber);" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void FilePut(object FileNumber, object Value, object RecordNumber) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Object, Value As Object, RecordNumber As Object)" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void FilePut(System::Object ^ FileNumber, System::Object ^ Value, System::Object ^ RecordNumber);" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="F#" Value="static member FilePut : obj * obj * obj -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberSignature Language="C#" Value="public static void FilePut (object FileNumber, object Value, object RecordNumber = -1);" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Object, Value As Object, Optional RecordNumber As Object = -1)" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(object FileNumber, object Value, object RecordNumber) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Obsolete("Use FilePutObject to write Object types, or coerce FileNumber and RecordNumber to Integer for writing non-Object types")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.1;net-5.0">
          <AttributeName>System.Obsolete("This member has been deprecated. Please use FilePutObject to write Object types, or coerce FileNumber and RecordNumber to Integer for writing non-Object types. http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Object" />
        <Parameter Name="Value" Type="System.Object" />
        <Parameter Name="RecordNumber" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="306d5-1832">必需。</span><span class="sxs-lookup"><span data-stu-id="306d5-1832">Required.</span></span> <span data-ttu-id="306d5-1833">任何有效文件数。</span><span class="sxs-lookup"><span data-stu-id="306d5-1833">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="306d5-1834">必需。</span><span class="sxs-lookup"><span data-stu-id="306d5-1834">Required.</span></span> <span data-ttu-id="306d5-1835">有效变量名，它包含写入磁盘的数据。</span><span class="sxs-lookup"><span data-stu-id="306d5-1835">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="306d5-1836">可选。</span><span class="sxs-lookup"><span data-stu-id="306d5-1836">Optional.</span></span> <span data-ttu-id="306d5-1837">开始写入处的记录号（<see langword="Random" /> 模式文件）或字节号（<see langword="Binary" /> 模式文件）。</span><span class="sxs-lookup"><span data-stu-id="306d5-1837">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="306d5-1838">将变量中得数据写入磁盘文件中。</span><span class="sxs-lookup"><span data-stu-id="306d5-1838">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="306d5-1839">相比 <see langword="FilePut" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span><span class="sxs-lookup"><span data-stu-id="306d5-1839">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="306d5-1840">有关详细信息，请参阅 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="306d5-1840">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="306d5-1841">`FilePut` 仅在 `Random` 和 `Binary` 模式下有效。</span><span class="sxs-lookup"><span data-stu-id="306d5-1841">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="306d5-1842">通常使用 `FileGet` 从文件中读取使用 `FilePut` 编写的数据。</span><span class="sxs-lookup"><span data-stu-id="306d5-1842">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="306d5-1843">文件中的第一个记录或字节位于位置1，第二个记录或字节在位置2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="306d5-1843">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="306d5-1844">如果省略 `RecordNumber`，则最后一个 `FileGet` 或 `FilePut` 函数之后或最后一个 `Seek` 函数指向的下一个记录或字节将被写入。</span><span class="sxs-lookup"><span data-stu-id="306d5-1844">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="306d5-1845">`StringIsFixedLength` 参数控制函数是将字符串解释为变量还是固定长度。</span><span class="sxs-lookup"><span data-stu-id="306d5-1845">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="306d5-1846">`True`参数时，`FilePut` 不会写入长度说明符。</span><span class="sxs-lookup"><span data-stu-id="306d5-1846">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="306d5-1847">如果将 `StringIsFixedLength` = `True` 与 `FilePut`一起使用，则必须使用 `FileGet`执行相同操作，并且必须确保将字符串初始化为预期的长度。</span><span class="sxs-lookup"><span data-stu-id="306d5-1847">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="306d5-1848">随机模式</span><span class="sxs-lookup"><span data-stu-id="306d5-1848">Random Mode</span></span>  
 <span data-ttu-id="306d5-1849">对于在 `Random` 模式下打开的文件，以下规则适用：</span><span class="sxs-lookup"><span data-stu-id="306d5-1849">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="306d5-1850">如果写入的数据的长度小于 `FileOpen` 函数的 `RecordLength` 子句中指定的长度，则 `FilePut` 会写入记录长度边界的后续记录。</span><span class="sxs-lookup"><span data-stu-id="306d5-1850">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="306d5-1851">一条记录的末尾和下一条记录的开头之间的空格将填充到文件缓冲区的现有内容中。</span><span class="sxs-lookup"><span data-stu-id="306d5-1851">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="306d5-1852">由于不能确定填充数据量，因此通常最好让记录长度与要写入的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="306d5-1852">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="306d5-1853">如果写入的数据的长度大于 `FileOpen` 函数的 `RecordLength` 子句中指定的长度，则将引发异常。</span><span class="sxs-lookup"><span data-stu-id="306d5-1853">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="306d5-1854">如果写入的变量是字符串，`FilePut` 会写入包含字符串长度的双字节说明符，然后写入该变量中的数据。</span><span class="sxs-lookup"><span data-stu-id="306d5-1854">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="306d5-1855">因此，`FileOpen` 函数中由 `RecordLength` 子句指定的记录长度必须大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="306d5-1855">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="306d5-1856">如果要写入的变量是包含数值类型的对象，`FilePut` 会写入两个字节，用于标识对象的 `VarType` 并写入变量。</span><span class="sxs-lookup"><span data-stu-id="306d5-1856">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="306d5-1857">例如，在编写包含整数的对象时，`FilePut` 会写入六个字节：两个字节，用于将对象标识为 `VarType(3)` （`Integer`）和四个包含数据的字节。</span><span class="sxs-lookup"><span data-stu-id="306d5-1857">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="306d5-1858">`FileOpen` 函数中由 `RecordLength` 参数指定的记录长度必须大于存储变量所需的实际字节数。</span><span class="sxs-lookup"><span data-stu-id="306d5-1858">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="306d5-1859">如果要写入的变量是包含字符串的对象，`FilePut` 将写入标识对象的 `VarType(8)` 的两个字节说明符，这是一个指示字符串长度的双字节说明符，然后写入字符串数据。</span><span class="sxs-lookup"><span data-stu-id="306d5-1859">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="306d5-1860">`FileOpen` 函数中由 `RecordLength` 参数指定的记录长度必须至少为4个字节，大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="306d5-1860">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="306d5-1861">如果要在不包含说明符的情况下放置字符串，则应将 `True` 传递给 `StringIsFixedLength` 参数，而你读入的字符串应为正确的长度。</span><span class="sxs-lookup"><span data-stu-id="306d5-1861">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="306d5-1862">如果要写入的变量是数组，则可以选择是否为数组的大小和维度编写说明符。</span><span class="sxs-lookup"><span data-stu-id="306d5-1862">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="306d5-1863">Visual Basic 6.0 及更早版本写入动态数组的文件描述符，但不写入固定大小的数组。</span><span class="sxs-lookup"><span data-stu-id="306d5-1863">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="306d5-1864">Visual Basic 2005 默认为不写入描述符。</span><span class="sxs-lookup"><span data-stu-id="306d5-1864">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="306d5-1865">若要编写描述符，请将 `ArrayIsDynamic` 参数设置为 `True`。</span><span class="sxs-lookup"><span data-stu-id="306d5-1865">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="306d5-1866">写入数组时，必须匹配读取数组的方式;如果它将使用描述符读取，则必须编写描述符。</span><span class="sxs-lookup"><span data-stu-id="306d5-1866">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="306d5-1867">描述符指定数组的秩、大小和每个排名的下限。</span><span class="sxs-lookup"><span data-stu-id="306d5-1867">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="306d5-1868">其长度等于2再加上维度数的8倍：（2 + 8 \* NumberOfDimensions）。</span><span class="sxs-lookup"><span data-stu-id="306d5-1868">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="306d5-1869">`FileOpen` 函数中由 `RecordLength` 子句指定的记录长度必须大于或等于写入数组数据和数组描述符所需的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="306d5-1869">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="306d5-1870">例如，当数组写入磁盘时，以下数组声明需要218字节。</span><span class="sxs-lookup"><span data-stu-id="306d5-1870">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="306d5-1871">如果写入的变量是任何其他类型的变量（不是变长字符串或对象），`FilePut` 仅写入变量数据。</span><span class="sxs-lookup"><span data-stu-id="306d5-1871">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="306d5-1872">`FileOpen` 函数中由 `RecordLength` 子句指定的记录长度必须大于或等于要写入的数据的长度。</span><span class="sxs-lookup"><span data-stu-id="306d5-1872">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="306d5-1873">`FilePut` 写入结构的元素，就好像每个元素都是单独编写的，只不过元素之间没有任何空白。</span><span class="sxs-lookup"><span data-stu-id="306d5-1873">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="306d5-1874">`VBFixedString` 特性可应用于结构中的字符串字段，以指示写入磁盘时字符串的大小。</span><span class="sxs-lookup"><span data-stu-id="306d5-1874">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="306d5-1875">写入磁盘时，将截断比 `VBFixedString` 属性指定的字节数更多的字符串字段。</span><span class="sxs-lookup"><span data-stu-id="306d5-1875">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="306d5-1876">二进制模式</span><span class="sxs-lookup"><span data-stu-id="306d5-1876">Binary Mode</span></span>  
 <span data-ttu-id="306d5-1877">对于在 `Binary` 模式下打开的文件，大多数 `Random` 模式规则都适用，但有一些例外情况。</span><span class="sxs-lookup"><span data-stu-id="306d5-1877">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="306d5-1878">`Binary` 模式下打开的文件的以下规则不同于 `Random` 模式的规则：</span><span class="sxs-lookup"><span data-stu-id="306d5-1878">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="306d5-1879">`FileOpen` 函数中的 `RecordLength` 子句不起作用。</span><span class="sxs-lookup"><span data-stu-id="306d5-1879">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="306d5-1880">`FilePut` 连续将所有变量写入磁盘，也就是说，在记录之间不进行填充。</span><span class="sxs-lookup"><span data-stu-id="306d5-1880">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="306d5-1881">对于结构中除数组以外的任何数组，`FilePut` 仅写入数据。</span><span class="sxs-lookup"><span data-stu-id="306d5-1881">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="306d5-1882">不写入任何说明符。</span><span class="sxs-lookup"><span data-stu-id="306d5-1882">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="306d5-1883">`FilePut` 写入不包含双字节长度说明符的结构元素的可变长度字符串。</span><span class="sxs-lookup"><span data-stu-id="306d5-1883">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="306d5-1884">写入的字节数等于字符串中的字符数。</span><span class="sxs-lookup"><span data-stu-id="306d5-1884">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="306d5-1885">例如，下面的语句将11个字节写入第1个文件：</span><span class="sxs-lookup"><span data-stu-id="306d5-1885">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="306d5-1886">使用 `FilePut` 函数写入文件需要从 <xref:System.Security.Permissions.FileIOPermissionAccess> 枚举进行 `Write` 访问。</span><span class="sxs-lookup"><span data-stu-id="306d5-1886">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="306d5-1887">此示例使用 `FilePut` 函数将数据写入文件。</span><span class="sxs-lookup"><span data-stu-id="306d5-1887">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="306d5-1888">将 `Person` 结构的五个记录写入到文件中。</span><span class="sxs-lookup"><span data-stu-id="306d5-1888">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="306d5-1889"><paramref name="RecordNumber" /> &lt; 1 且不等于 -1。</span><span class="sxs-lookup"><span data-stu-id="306d5-1889"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="306d5-1890">文件模式无效。</span><span class="sxs-lookup"><span data-stu-id="306d5-1890">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files"><span data-ttu-id="306d5-1891">写入文件 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="306d5-1891">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, string Value, long RecordNumber = -1, bool StringIsFixedLength = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void FilePut(int32 FileNumber, string Value, int64 RecordNumber, bool StringIsFixedLength) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.String,System.Int64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As String, Optional RecordNumber As Long = -1, Optional StringIsFixedLength As Boolean = false)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * string * int64 * bool -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber, StringIsFixedLength)" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, string Value, int64 RecordNumber, bool StringIsFixedLength) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.String" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
        <Parameter Name="StringIsFixedLength" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="306d5-1892">必需。</span><span class="sxs-lookup"><span data-stu-id="306d5-1892">Required.</span></span> <span data-ttu-id="306d5-1893">任何有效文件数。</span><span class="sxs-lookup"><span data-stu-id="306d5-1893">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="306d5-1894">必需。</span><span class="sxs-lookup"><span data-stu-id="306d5-1894">Required.</span></span> <span data-ttu-id="306d5-1895">有效变量名，它包含写入磁盘的数据。</span><span class="sxs-lookup"><span data-stu-id="306d5-1895">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="306d5-1896">可选。</span><span class="sxs-lookup"><span data-stu-id="306d5-1896">Optional.</span></span> <span data-ttu-id="306d5-1897">开始写入处的记录号（<see langword="Random" /> 模式文件）或字节号（<see langword="Binary" /> 模式文件）。</span><span class="sxs-lookup"><span data-stu-id="306d5-1897">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <param name="StringIsFixedLength"><span data-ttu-id="306d5-1898">可选。</span><span class="sxs-lookup"><span data-stu-id="306d5-1898">Optional.</span></span> <span data-ttu-id="306d5-1899">仅在写入字符串时适用。</span><span class="sxs-lookup"><span data-stu-id="306d5-1899">Applies only when writing a string.</span></span> <span data-ttu-id="306d5-1900">指定是否将字符串的双字节字符串长度说明符写入文件中。</span><span class="sxs-lookup"><span data-stu-id="306d5-1900">Specifies whether to write a two-byte string length descriptor for the string to the file.</span></span> <span data-ttu-id="306d5-1901">默认为 <see langword="False" />。</span><span class="sxs-lookup"><span data-stu-id="306d5-1901">The default is <see langword="False" />.</span></span></param>
        <summary><span data-ttu-id="306d5-1902">将变量中得数据写入磁盘文件中。</span><span class="sxs-lookup"><span data-stu-id="306d5-1902">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="306d5-1903">相比 <see langword="FilePut" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span><span class="sxs-lookup"><span data-stu-id="306d5-1903">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="306d5-1904">有关详细信息，请参阅 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="306d5-1904">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="306d5-1905">`FilePut` 仅在 `Random` 和 `Binary` 模式下有效。</span><span class="sxs-lookup"><span data-stu-id="306d5-1905">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="306d5-1906">通常使用 `FileGet` 从文件中读取使用 `FilePut` 编写的数据。</span><span class="sxs-lookup"><span data-stu-id="306d5-1906">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="306d5-1907">文件中的第一个记录或字节位于位置1，第二个记录或字节在位置2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="306d5-1907">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="306d5-1908">如果省略 `RecordNumber`，则最后一个 `FileGet` 或 `FilePut` 函数之后或最后一个 `Seek` 函数指向的下一个记录或字节将被写入。</span><span class="sxs-lookup"><span data-stu-id="306d5-1908">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="306d5-1909">`StringIsFixedLength` 参数控制函数是将字符串解释为变量还是固定长度。</span><span class="sxs-lookup"><span data-stu-id="306d5-1909">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="306d5-1910">`True`参数时，`FilePut` 不会写入长度说明符。</span><span class="sxs-lookup"><span data-stu-id="306d5-1910">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="306d5-1911">如果将 `StringIsFixedLength` = `True` 与 `FilePut`一起使用，则必须使用 `FileGet`执行相同操作，并且必须确保将字符串初始化为预期的长度。</span><span class="sxs-lookup"><span data-stu-id="306d5-1911">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="306d5-1912">随机模式</span><span class="sxs-lookup"><span data-stu-id="306d5-1912">Random Mode</span></span>  
 <span data-ttu-id="306d5-1913">对于在 `Random` 模式下打开的文件，以下规则适用：</span><span class="sxs-lookup"><span data-stu-id="306d5-1913">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="306d5-1914">如果写入的数据的长度小于 `FileOpen` 函数的 `RecordLength` 子句中指定的长度，则 `FilePut` 会写入记录长度边界的后续记录。</span><span class="sxs-lookup"><span data-stu-id="306d5-1914">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="306d5-1915">一条记录的末尾和下一条记录的开头之间的空格将填充到文件缓冲区的现有内容中。</span><span class="sxs-lookup"><span data-stu-id="306d5-1915">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="306d5-1916">由于不能确定填充数据量，因此通常最好让记录长度与要写入的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="306d5-1916">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="306d5-1917">如果写入的数据的长度大于 `FileOpen` 函数的 `RecordLength` 子句中指定的长度，则将引发异常。</span><span class="sxs-lookup"><span data-stu-id="306d5-1917">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="306d5-1918">如果写入的变量是字符串，`FilePut` 会写入包含字符串长度的双字节说明符，然后写入该变量中的数据。</span><span class="sxs-lookup"><span data-stu-id="306d5-1918">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="306d5-1919">因此，`FileOpen` 函数中由 `RecordLength` 子句指定的记录长度必须大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="306d5-1919">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="306d5-1920">如果要写入的变量是包含数值类型的对象，`FilePut` 会写入两个字节，用于标识对象的 `VarType` 并写入变量。</span><span class="sxs-lookup"><span data-stu-id="306d5-1920">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="306d5-1921">例如，在编写包含整数的对象时，`FilePut` 会写入六个字节：两个字节，用于将对象标识为 `VarType(3)` （`Integer`）和四个包含数据的字节。</span><span class="sxs-lookup"><span data-stu-id="306d5-1921">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="306d5-1922">`FileOpen` 函数中由 `RecordLength` 参数指定的记录长度必须大于存储变量所需的实际字节数。</span><span class="sxs-lookup"><span data-stu-id="306d5-1922">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="306d5-1923">如果要写入的变量是包含字符串的对象，`FilePut` 将写入标识对象的 `VarType(8)` 的两个字节说明符，这是一个指示字符串长度的双字节说明符，然后写入字符串数据。</span><span class="sxs-lookup"><span data-stu-id="306d5-1923">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="306d5-1924">`FileOpen` 函数中由 `RecordLength` 参数指定的记录长度必须至少为4个字节，大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="306d5-1924">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="306d5-1925">如果要在不包含说明符的情况下放置字符串，则应将 `True` 传递给 `StringIsFixedLength` 参数，而你读入的字符串应为正确的长度。</span><span class="sxs-lookup"><span data-stu-id="306d5-1925">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="306d5-1926">如果要写入的变量是数组，则可以选择是否为数组的大小和维度编写说明符。</span><span class="sxs-lookup"><span data-stu-id="306d5-1926">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="306d5-1927">Visual Basic 6.0 及更早版本写入动态数组的文件描述符，但不写入固定大小的数组。</span><span class="sxs-lookup"><span data-stu-id="306d5-1927">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="306d5-1928">Visual Basic 2005 默认为不写入描述符。</span><span class="sxs-lookup"><span data-stu-id="306d5-1928">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="306d5-1929">若要编写描述符，请将 `ArrayIsDynamic` 参数设置为 `True`。</span><span class="sxs-lookup"><span data-stu-id="306d5-1929">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="306d5-1930">写入数组时，必须匹配读取数组的方式;如果它将使用描述符读取，则必须编写描述符。</span><span class="sxs-lookup"><span data-stu-id="306d5-1930">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="306d5-1931">描述符指定数组的秩、大小和每个排名的下限。</span><span class="sxs-lookup"><span data-stu-id="306d5-1931">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="306d5-1932">其长度等于2再加上维度数的8倍：（2 + 8 \* NumberOfDimensions）。</span><span class="sxs-lookup"><span data-stu-id="306d5-1932">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="306d5-1933">`FileOpen` 函数中由 `RecordLength` 子句指定的记录长度必须大于或等于写入数组数据和数组描述符所需的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="306d5-1933">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="306d5-1934">例如，当数组写入磁盘时，以下数组声明需要218字节。</span><span class="sxs-lookup"><span data-stu-id="306d5-1934">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="306d5-1935">如果写入的变量是任何其他类型的变量（不是变长字符串或对象），`FilePut` 仅写入变量数据。</span><span class="sxs-lookup"><span data-stu-id="306d5-1935">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="306d5-1936">`FileOpen` 函数中由 `RecordLength` 子句指定的记录长度必须大于或等于要写入的数据的长度。</span><span class="sxs-lookup"><span data-stu-id="306d5-1936">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="306d5-1937">`FilePut` 写入结构的元素，就好像每个元素都是单独编写的，只不过元素之间没有任何空白。</span><span class="sxs-lookup"><span data-stu-id="306d5-1937">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="306d5-1938">`VBFixedString` 特性可应用于结构中的字符串字段，以指示写入磁盘时字符串的大小。</span><span class="sxs-lookup"><span data-stu-id="306d5-1938">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="306d5-1939">写入磁盘时，将截断比 `VBFixedString` 属性指定的字节数更多的字符串字段。</span><span class="sxs-lookup"><span data-stu-id="306d5-1939">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="306d5-1940">二进制模式</span><span class="sxs-lookup"><span data-stu-id="306d5-1940">Binary Mode</span></span>  
 <span data-ttu-id="306d5-1941">对于在 `Binary` 模式下打开的文件，大多数 `Random` 模式规则都适用，但有一些例外情况。</span><span class="sxs-lookup"><span data-stu-id="306d5-1941">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="306d5-1942">`Binary` 模式下打开的文件的以下规则不同于 `Random` 模式的规则：</span><span class="sxs-lookup"><span data-stu-id="306d5-1942">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="306d5-1943">`FileOpen` 函数中的 `RecordLength` 子句不起作用。</span><span class="sxs-lookup"><span data-stu-id="306d5-1943">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="306d5-1944">`FilePut` 连续将所有变量写入磁盘，也就是说，在记录之间不进行填充。</span><span class="sxs-lookup"><span data-stu-id="306d5-1944">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="306d5-1945">对于结构中除数组以外的任何数组，`FilePut` 仅写入数据。</span><span class="sxs-lookup"><span data-stu-id="306d5-1945">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="306d5-1946">不写入任何说明符。</span><span class="sxs-lookup"><span data-stu-id="306d5-1946">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="306d5-1947">`FilePut` 写入不包含双字节长度说明符的结构元素的可变长度字符串。</span><span class="sxs-lookup"><span data-stu-id="306d5-1947">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="306d5-1948">写入的字节数等于字符串中的字符数。</span><span class="sxs-lookup"><span data-stu-id="306d5-1948">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="306d5-1949">例如，下面的语句将11个字节写入第1个文件：</span><span class="sxs-lookup"><span data-stu-id="306d5-1949">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="306d5-1950">使用 `FilePut` 函数写入文件需要从 <xref:System.Security.Permissions.FileIOPermissionAccess> 枚举进行 `Write` 访问。</span><span class="sxs-lookup"><span data-stu-id="306d5-1950">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="306d5-1951">此示例使用 `FilePut` 函数将数据写入文件。</span><span class="sxs-lookup"><span data-stu-id="306d5-1951">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="306d5-1952">将 `Person` 结构的五个记录写入到文件中。</span><span class="sxs-lookup"><span data-stu-id="306d5-1952">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="306d5-1953"><paramref name="RecordNumber" /> &lt; 1 且不等于 -1。</span><span class="sxs-lookup"><span data-stu-id="306d5-1953"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="306d5-1954">文件模式无效。</span><span class="sxs-lookup"><span data-stu-id="306d5-1954">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files"><span data-ttu-id="306d5-1955">写入文件 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="306d5-1955">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, Array Value, long RecordNumber = -1, bool ArrayIsDynamic = false, bool StringIsFixedLength = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void FilePut(int32 FileNumber, class System.Array Value, int64 RecordNumber, bool ArrayIsDynamic, bool StringIsFixedLength) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Array,System.Int64,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Array, Optional RecordNumber As Long = -1, Optional ArrayIsDynamic As Boolean = false, Optional StringIsFixedLength As Boolean = false)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * Array * int64 * bool * bool -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber, ArrayIsDynamic, StringIsFixedLength)" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, class System.Array Value, int64 RecordNumber, bool ArrayIsDynamic, bool StringIsFixedLength) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Array" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
        <Parameter Name="ArrayIsDynamic" Type="System.Boolean" />
        <Parameter Name="StringIsFixedLength" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="306d5-1956">必需。</span><span class="sxs-lookup"><span data-stu-id="306d5-1956">Required.</span></span> <span data-ttu-id="306d5-1957">任何有效文件数。</span><span class="sxs-lookup"><span data-stu-id="306d5-1957">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="306d5-1958">必需。</span><span class="sxs-lookup"><span data-stu-id="306d5-1958">Required.</span></span> <span data-ttu-id="306d5-1959">有效变量名，它包含写入磁盘的数据。</span><span class="sxs-lookup"><span data-stu-id="306d5-1959">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="306d5-1960">可选。</span><span class="sxs-lookup"><span data-stu-id="306d5-1960">Optional.</span></span> <span data-ttu-id="306d5-1961">开始写入处的记录号（<see langword="Random" /> 模式文件）或字节号（<see langword="Binary" /> 模式文件）。</span><span class="sxs-lookup"><span data-stu-id="306d5-1961">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <param name="ArrayIsDynamic"><span data-ttu-id="306d5-1962">可选。</span><span class="sxs-lookup"><span data-stu-id="306d5-1962">Optional.</span></span> <span data-ttu-id="306d5-1963">仅当写入数组时使用。</span><span class="sxs-lookup"><span data-stu-id="306d5-1963">Applies only when writing an array.</span></span> <span data-ttu-id="306d5-1964">指定是否将数组视为动态数组，以及是否写入用于描述字符串长度的数组说明符。</span><span class="sxs-lookup"><span data-stu-id="306d5-1964">Specifies whether the array is to be treated as dynamic, and whether to write an array descriptor for the string that describes the length.</span></span></param>
        <param name="StringIsFixedLength"><span data-ttu-id="306d5-1965">可选。</span><span class="sxs-lookup"><span data-stu-id="306d5-1965">Optional.</span></span> <span data-ttu-id="306d5-1966">仅在写入字符串时适用。</span><span class="sxs-lookup"><span data-stu-id="306d5-1966">Applies only when writing a string.</span></span> <span data-ttu-id="306d5-1967">指定是否将字符串的双字节字符串长度说明符写入文件中。</span><span class="sxs-lookup"><span data-stu-id="306d5-1967">Specifies whether to write a two-byte string length descriptor for the string to the file.</span></span> <span data-ttu-id="306d5-1968">默认为 <see langword="False" />。</span><span class="sxs-lookup"><span data-stu-id="306d5-1968">The default is <see langword="False" />.</span></span></param>
        <summary><span data-ttu-id="306d5-1969">将变量中得数据写入磁盘文件中。</span><span class="sxs-lookup"><span data-stu-id="306d5-1969">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="306d5-1970">相比 <see langword="FilePut" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span><span class="sxs-lookup"><span data-stu-id="306d5-1970">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="306d5-1971">有关详细信息，请参阅 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="306d5-1971">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="306d5-1972">`FilePut` 仅在 `Random` 和 `Binary` 模式下有效。</span><span class="sxs-lookup"><span data-stu-id="306d5-1972">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="306d5-1973">通常使用 `FileGet` 从文件中读取使用 `FilePut` 编写的数据。</span><span class="sxs-lookup"><span data-stu-id="306d5-1973">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="306d5-1974">文件中的第一个记录或字节位于位置1，第二个记录或字节在位置2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="306d5-1974">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="306d5-1975">如果省略 `RecordNumber`，则最后一个 `FileGet` 或 `FilePut` 函数之后或最后一个 `Seek` 函数指向的下一个记录或字节将被写入。</span><span class="sxs-lookup"><span data-stu-id="306d5-1975">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="306d5-1976">`StringIsFixedLength` 参数控制函数是将字符串解释为变量还是固定长度。</span><span class="sxs-lookup"><span data-stu-id="306d5-1976">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="306d5-1977">`True`参数时，`FilePut` 不会写入长度说明符。</span><span class="sxs-lookup"><span data-stu-id="306d5-1977">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="306d5-1978">如果将 `StringIsFixedLength` = `True` 与 `FilePut`一起使用，则必须使用 `FileGet`执行相同操作，并且必须确保将字符串初始化为预期的长度。</span><span class="sxs-lookup"><span data-stu-id="306d5-1978">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="306d5-1979">随机模式</span><span class="sxs-lookup"><span data-stu-id="306d5-1979">Random Mode</span></span>  
 <span data-ttu-id="306d5-1980">对于在 `Random` 模式下打开的文件，以下规则适用：</span><span class="sxs-lookup"><span data-stu-id="306d5-1980">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="306d5-1981">如果写入的数据的长度小于 `FileOpen` 函数的 `RecordLength` 子句中指定的长度，则 `FilePut` 会写入记录长度边界的后续记录。</span><span class="sxs-lookup"><span data-stu-id="306d5-1981">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="306d5-1982">一条记录的末尾和下一条记录的开头之间的空格将填充到文件缓冲区的现有内容中。</span><span class="sxs-lookup"><span data-stu-id="306d5-1982">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="306d5-1983">由于不能确定填充数据量，因此通常最好让记录长度与要写入的数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="306d5-1983">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="306d5-1984">如果写入的数据的长度大于 `FileOpen` 函数的 `RecordLength` 子句中指定的长度，则将引发异常。</span><span class="sxs-lookup"><span data-stu-id="306d5-1984">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="306d5-1985">如果写入的变量是字符串，`FilePut` 会写入包含字符串长度的双字节说明符，然后写入该变量中的数据。</span><span class="sxs-lookup"><span data-stu-id="306d5-1985">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="306d5-1986">因此，`FileOpen` 函数中由 `RecordLength` 子句指定的记录长度必须大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="306d5-1986">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="306d5-1987">如果要写入的变量是包含数值类型的对象，`FilePut` 会写入两个字节，用于标识对象的 `VarType` 并写入变量。</span><span class="sxs-lookup"><span data-stu-id="306d5-1987">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="306d5-1988">例如，在编写包含整数的对象时，`FilePut` 会写入六个字节：两个字节，用于将对象标识为 `VarType(3)` （`Integer`）和四个包含数据的字节。</span><span class="sxs-lookup"><span data-stu-id="306d5-1988">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="306d5-1989">`FileOpen` 函数中由 `RecordLength` 参数指定的记录长度必须大于存储变量所需的实际字节数。</span><span class="sxs-lookup"><span data-stu-id="306d5-1989">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="306d5-1990">如果要写入的变量是包含字符串的对象，`FilePut` 将写入标识对象的 `VarType(8)` 的两个字节说明符，这是一个指示字符串长度的双字节说明符，然后写入字符串数据。</span><span class="sxs-lookup"><span data-stu-id="306d5-1990">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="306d5-1991">`FileOpen` 函数中由 `RecordLength` 参数指定的记录长度必须至少为4个字节，大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="306d5-1991">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="306d5-1992">如果要在不包含说明符的情况下放置字符串，则应将 `True` 传递给 `StringIsFixedLength` 参数，而你读入的字符串应为正确的长度。</span><span class="sxs-lookup"><span data-stu-id="306d5-1992">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="306d5-1993">如果要写入的变量是数组，则可以选择是否为数组的大小和维度编写说明符。</span><span class="sxs-lookup"><span data-stu-id="306d5-1993">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="306d5-1994">Visual Basic 6.0 及更早版本写入动态数组的文件描述符，但不写入固定大小的数组。</span><span class="sxs-lookup"><span data-stu-id="306d5-1994">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="306d5-1995">Visual Basic 2005 默认为不写入描述符。</span><span class="sxs-lookup"><span data-stu-id="306d5-1995">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="306d5-1996">若要编写描述符，请将 `ArrayIsDynamic` 参数设置为 `True`。</span><span class="sxs-lookup"><span data-stu-id="306d5-1996">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="306d5-1997">写入数组时，必须匹配读取数组的方式;如果它将使用描述符读取，则必须编写描述符。</span><span class="sxs-lookup"><span data-stu-id="306d5-1997">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="306d5-1998">描述符指定数组的秩、大小和每个排名的下限。</span><span class="sxs-lookup"><span data-stu-id="306d5-1998">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="306d5-1999">其长度等于2再加上维度数的8倍：（2 + 8 \* NumberOfDimensions）。</span><span class="sxs-lookup"><span data-stu-id="306d5-1999">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="306d5-2000">`FileOpen` 函数中由 `RecordLength` 子句指定的记录长度必须大于或等于写入数组数据和数组描述符所需的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="306d5-2000">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="306d5-2001">例如，当数组写入磁盘时，以下数组声明需要218字节。</span><span class="sxs-lookup"><span data-stu-id="306d5-2001">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="306d5-2002">如果写入的变量是任何其他类型的变量（不是变长字符串或对象），`FilePut` 仅写入变量数据。</span><span class="sxs-lookup"><span data-stu-id="306d5-2002">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="306d5-2003">`FileOpen` 函数中由 `RecordLength` 子句指定的记录长度必须大于或等于要写入的数据的长度。</span><span class="sxs-lookup"><span data-stu-id="306d5-2003">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="306d5-2004">`FilePut` 写入结构的元素，就好像每个元素都是单独编写的，只不过元素之间没有任何空白。</span><span class="sxs-lookup"><span data-stu-id="306d5-2004">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="306d5-2005">`VBFixedString` 特性可应用于结构中的字符串字段，以指示写入磁盘时字符串的大小。</span><span class="sxs-lookup"><span data-stu-id="306d5-2005">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="306d5-2006">写入磁盘时，将截断比 `VBFixedString` 属性指定的字节数更多的字符串字段。</span><span class="sxs-lookup"><span data-stu-id="306d5-2006">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="306d5-2007">二进制模式</span><span class="sxs-lookup"><span data-stu-id="306d5-2007">Binary Mode</span></span>  
 <span data-ttu-id="306d5-2008">对于在 `Binary` 模式下打开的文件，大多数 `Random` 模式规则都适用，但有一些例外情况。</span><span class="sxs-lookup"><span data-stu-id="306d5-2008">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="306d5-2009">`Binary` 模式下打开的文件的以下规则不同于 `Random` 模式的规则：</span><span class="sxs-lookup"><span data-stu-id="306d5-2009">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="306d5-2010">`FileOpen` 函数中的 `RecordLength` 子句不起作用。</span><span class="sxs-lookup"><span data-stu-id="306d5-2010">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="306d5-2011">`FilePut` 连续将所有变量写入磁盘，也就是说，在记录之间不进行填充。</span><span class="sxs-lookup"><span data-stu-id="306d5-2011">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="306d5-2012">对于结构中除数组以外的任何数组，`FilePut` 仅写入数据。</span><span class="sxs-lookup"><span data-stu-id="306d5-2012">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="306d5-2013">不写入任何说明符。</span><span class="sxs-lookup"><span data-stu-id="306d5-2013">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="306d5-2014">`FilePut` 写入不包含双字节长度说明符的结构元素的可变长度字符串。</span><span class="sxs-lookup"><span data-stu-id="306d5-2014">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="306d5-2015">写入的字节数等于字符串中的字符数。</span><span class="sxs-lookup"><span data-stu-id="306d5-2015">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="306d5-2016">例如，下面的语句将11个字节写入第1个文件：</span><span class="sxs-lookup"><span data-stu-id="306d5-2016">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="306d5-2017">使用 `FilePut` 函数写入文件需要从 <xref:System.Security.Permissions.FileIOPermissionAccess> 枚举进行 `Write` 访问。</span><span class="sxs-lookup"><span data-stu-id="306d5-2017">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="306d5-2018">此示例使用 `FilePut` 函数将数据写入文件。</span><span class="sxs-lookup"><span data-stu-id="306d5-2018">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="306d5-2019">将 `Person` 结构的五个记录写入到文件中。</span><span class="sxs-lookup"><span data-stu-id="306d5-2019">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="306d5-2020"><paramref name="RecordNumber" /> &lt; 1 且不等于 -1。</span><span class="sxs-lookup"><span data-stu-id="306d5-2020"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="306d5-2021">文件模式无效。</span><span class="sxs-lookup"><span data-stu-id="306d5-2021">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files"><span data-ttu-id="306d5-2022">写入文件 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="306d5-2022">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePutObject">
      <MemberSignature Language="C#" Value="public static void FilePutObject (int FileNumber, object Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void FilePutObject(int32 FileNumber, object Value, int64 RecordNumber) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePutObject(System.Int32,System.Object,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePutObject (FileNumber As Integer, Value As Object, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePutObject : int * obj * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePutObject (FileNumber, Value, RecordNumber)" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePutObject(int32 FileNumber, object Value, int64 RecordNumber) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Object" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="306d5-2023">必需。</span><span class="sxs-lookup"><span data-stu-id="306d5-2023">Required.</span></span> <span data-ttu-id="306d5-2024">任何有效文件数。</span><span class="sxs-lookup"><span data-stu-id="306d5-2024">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="306d5-2025">必需。</span><span class="sxs-lookup"><span data-stu-id="306d5-2025">Required.</span></span> <span data-ttu-id="306d5-2026">有效变量名，它包含写入磁盘的数据。</span><span class="sxs-lookup"><span data-stu-id="306d5-2026">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="306d5-2027">可选。</span><span class="sxs-lookup"><span data-stu-id="306d5-2027">Optional.</span></span> <span data-ttu-id="306d5-2028">开始写入处的记录号（<see langword="Random" /> 模式文件）或字节号（<see langword="Binary" /> 模式文件）。</span><span class="sxs-lookup"><span data-stu-id="306d5-2028">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="306d5-2029">将变量中得数据写入磁盘文件中。</span><span class="sxs-lookup"><span data-stu-id="306d5-2029">Writes data from a variable to a disk file.</span></span>  <span data-ttu-id="306d5-2030">相比 <see langword="FilePutObject" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span><span class="sxs-lookup"><span data-stu-id="306d5-2030">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePutObject" />.</span></span> <span data-ttu-id="306d5-2031">有关详细信息，请参阅 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="306d5-2031">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="306d5-2032">如果传递类型 `Object` 而不是另一种类型，则使用 `FilePutObject` 函数，而不是 `FilePut` 以避免编译时出现歧义，如 `Integer`、`Long`、`Short`等。</span><span class="sxs-lookup"><span data-stu-id="306d5-2032">The `FilePutObject` function is used instead of `FilePut` to avoid ambiguities at compile time if type `Object` is passed instead of another type, such as `Integer`, `Long`, `Short`, and so forth.</span></span>  
  
 <span data-ttu-id="306d5-2033">`FilePutObject` 写入和读取描述对象的描述符。</span><span class="sxs-lookup"><span data-stu-id="306d5-2033">`FilePutObject` writes and reads descriptors that describe the object.</span></span> <span data-ttu-id="306d5-2034">如果要编写 `Variant` 类型，`FilePutObject` 是必需的。</span><span class="sxs-lookup"><span data-stu-id="306d5-2034">If you intend to write out the `Variant` type, `FilePutObject` is required.</span></span> <span data-ttu-id="306d5-2035">当不确定时，如果使用第二个参数的对象，我们建议始终使用 `FilePutObject` 和 `FileGetObject`。</span><span class="sxs-lookup"><span data-stu-id="306d5-2035">When in doubt, if you are using an object for the second parameter, we recommend that you always use `FilePutObject` and `FileGetObject`.</span></span>  
  
 <span data-ttu-id="306d5-2036">`FilePutObject` 仅在 `Random` 和 `Binary` 模式下有效。</span><span class="sxs-lookup"><span data-stu-id="306d5-2036">`FilePutObject` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="306d5-2037">通常使用 `FileGetObject` 从文件中读取使用 `FilePutObject` 编写的数据。</span><span class="sxs-lookup"><span data-stu-id="306d5-2037">Data written with `FilePutObject` is usually read from a file by using `FileGetObject`.</span></span>  
  
 <span data-ttu-id="306d5-2038">文件中的第一个记录或字节位于位置1，第二个记录或字节在位置2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="306d5-2038">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="306d5-2039">如果省略 `RecordNumber`，`FilePutObject` 会在最后一个 `FileGetObject` 或 `FilePutObject` 函数后写入下一条记录或字节，或最后一个 `Seek` 函数指向的记录或字节。</span><span class="sxs-lookup"><span data-stu-id="306d5-2039">If you omit `RecordNumber`, `FilePutObject` writes the next record or byte after the last `FileGetObject` or `FilePutObject` function (or the record or byte pointed to by the last `Seek` function).</span></span>  
  
 <span data-ttu-id="306d5-2040">`StringIsFixedLength` 参数控制函数是将字符串解释为变量还是固定长度。</span><span class="sxs-lookup"><span data-stu-id="306d5-2040">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="306d5-2041">`True`参数时，`FilePutObject` 不会写入长度说明符。</span><span class="sxs-lookup"><span data-stu-id="306d5-2041">`FilePutObject` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="306d5-2042">如果使用 `FilePutObject``StringIsFixedLength` = `True`，则必须与 `FileGetObject`执行相同操作，并且还必须确保将字符串初始化为预期的长度。</span><span class="sxs-lookup"><span data-stu-id="306d5-2042">If you use `StringIsFixedLength` = `True` with `FilePutObject`, you have to do the same with `FileGetObject`, and you must also make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="306d5-2043">随机模式</span><span class="sxs-lookup"><span data-stu-id="306d5-2043">Random Mode</span></span>  
 <span data-ttu-id="306d5-2044">对于在 `Random` 模式下打开的文件，以下规则适用：</span><span class="sxs-lookup"><span data-stu-id="306d5-2044">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="306d5-2045">如果写入的数据的长度小于 `FileOpen` 函数的 `RecordLength` 子句中指定的长度，则 `FilePutObject` 会写入记录长度边界的后续记录。</span><span class="sxs-lookup"><span data-stu-id="306d5-2045">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePutObject` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="306d5-2046">一条记录的末尾和下一条记录的开头之间的空格将填充到文件缓冲区的现有内容中。</span><span class="sxs-lookup"><span data-stu-id="306d5-2046">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="306d5-2047">由于不能准确确定填充数据量，因此最好将记录长度与所写入数据的长度匹配。</span><span class="sxs-lookup"><span data-stu-id="306d5-2047">Because the amount of padding data cannot be precisely determined, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="306d5-2048">如果写入的数据的长度大于 `FileOpen` 函数的 `RecordLength` 子句中指定的长度，则会引发异常。</span><span class="sxs-lookup"><span data-stu-id="306d5-2048">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception is thrown.</span></span>  
  
-   <span data-ttu-id="306d5-2049">如果要写入的变量是包含数值类型的对象，`FilePutObject` 会写入两个字节，用于标识对象的 `VarType` 并写入变量。</span><span class="sxs-lookup"><span data-stu-id="306d5-2049">If the variable being written is an object that contains a numeric type, `FilePutObject` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="306d5-2050">例如，在编写包含整数的对象时，`FilePutObject` 会写入六个字节：两个字节，用于将对象标识为 `VarType(3)` （`Integer`）和四个包含数据的字节。</span><span class="sxs-lookup"><span data-stu-id="306d5-2050">For example, when writing an object that contains an integer, `FilePutObject` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="306d5-2051">`FileOpen` 函数中由 `RecordLength` 参数指定的记录长度必须大于存储变量所需的实际字节数。</span><span class="sxs-lookup"><span data-stu-id="306d5-2051">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="306d5-2052">如果写入的变量是包含字符串的对象，`FilePutObject` 会写入一个双字节说明符，该说明符标识对象的 `VarType(8)`，一个双字节说明符，指示字符串的长度，然后写入字符串数据。</span><span class="sxs-lookup"><span data-stu-id="306d5-2052">If the variable being written is an object that contains a string, `FilePutObject` writes a two-byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="306d5-2053">`FileOpen` 函数中由 `RecordLength` 参数指定的记录长度必须至少为4个字节，大于字符串的实际长度。</span><span class="sxs-lookup"><span data-stu-id="306d5-2053">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="306d5-2054">如果要在不包含说明符的情况下放置字符串，则应将 `True` 传递给 `StringIsFixedLength` 参数，而你读入的字符串应为正确的长度。</span><span class="sxs-lookup"><span data-stu-id="306d5-2054">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="306d5-2055">如果写入的变量为数组，则 `RecordLength` 函数中 `FileOpen` 子句指定的记录长度必须大于或等于写入数组数据和数组描述符需要的所有字节之和。</span><span class="sxs-lookup"><span data-stu-id="306d5-2055">If the variable being written is an array, then the record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="306d5-2056">描述符指定数组的秩、大小和每个排名的下限。</span><span class="sxs-lookup"><span data-stu-id="306d5-2056">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="306d5-2057">其长度等于2再加上维度数的8倍：（2 + 8 \* NumberOfDimensions）。</span><span class="sxs-lookup"><span data-stu-id="306d5-2057">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="306d5-2058">二进制模式</span><span class="sxs-lookup"><span data-stu-id="306d5-2058">Binary Mode</span></span>  
 <span data-ttu-id="306d5-2059">对于在 `Binary` 模式下打开的文件，所有 `Random` 模式规则都适用，只不过：</span><span class="sxs-lookup"><span data-stu-id="306d5-2059">For files opened in `Binary` mode, all the `Random` mode rules apply, except:</span></span>  
  
-   <span data-ttu-id="306d5-2060">`FileOpen` 函数中的 `RecordLength` 子句不起作用。</span><span class="sxs-lookup"><span data-stu-id="306d5-2060">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="306d5-2061">`FilePutObject` 连续将所有变量写入磁盘，也就是说，在记录之间不进行填充。</span><span class="sxs-lookup"><span data-stu-id="306d5-2061">`FilePutObject` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="306d5-2062">此示例使用 `FilePutObject` 函数将字符串写入文件。</span><span class="sxs-lookup"><span data-stu-id="306d5-2062">This example uses the `FilePutObject` function to write a string to a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files"><span data-ttu-id="306d5-2063">写入文件 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="306d5-2063">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileWidth">
      <MemberSignature Language="C#" Value="public static void FileWidth (int FileNumber, int RecordWidth);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void FileWidth(int32 FileNumber, int32 RecordWidth) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileWidth(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileWidth (FileNumber As Integer, RecordWidth As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void FileWidth(int FileNumber, int RecordWidth);" />
      <MemberSignature Language="F#" Value="static member FileWidth : int * int -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileWidth (FileNumber, RecordWidth)" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileWidth(int32 FileNumber, int32 RecordWidth) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="RecordWidth" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="306d5-2064">必需。</span><span class="sxs-lookup"><span data-stu-id="306d5-2064">Required.</span></span> <span data-ttu-id="306d5-2065">任何有效文件数。</span><span class="sxs-lookup"><span data-stu-id="306d5-2065">Any valid file number.</span></span></param>
        <param name="RecordWidth"><span data-ttu-id="306d5-2066">必需。</span><span class="sxs-lookup"><span data-stu-id="306d5-2066">Required.</span></span> <span data-ttu-id="306d5-2067">0 到 255（包括 0 和 255）范围内的数值表达式，它表示在开始新一行前每一行中所显示的字符数。</span><span class="sxs-lookup"><span data-stu-id="306d5-2067">Numeric expression in the range 0-255, inclusive, which indicates how many characters appear on a line before a new line is started.</span></span> <span data-ttu-id="306d5-2068">如果 <paramref name="RecordWidth" /> 等于 0，则行的长度没有限制。</span><span class="sxs-lookup"><span data-stu-id="306d5-2068">If <paramref name="RecordWidth" /> equals 0, there is no limit to the length of a line.</span></span> <span data-ttu-id="306d5-2069"><paramref name="RecordWidth" /> 的默认值为 0。</span><span class="sxs-lookup"><span data-stu-id="306d5-2069">The default value for <paramref name="RecordWidth" /> is 0.</span></span></param>
        <summary><span data-ttu-id="306d5-2070">为用 <see langword="FileOpen" /> 函数打开的文件分配输出行宽。</span><span class="sxs-lookup"><span data-stu-id="306d5-2070">Assigns an output line width to a file opened by using the <see langword="FileOpen" /> function.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="306d5-2071">此示例使用 `FileWidth` 函数设置文件的输出行宽度。</span><span class="sxs-lookup"><span data-stu-id="306d5-2071">This example uses the `FileWidth` function to set the output line width for a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="306d5-2072">文件模式无效。</span><span class="sxs-lookup"><span data-stu-id="306d5-2072">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/file-access"><span data-ttu-id="306d5-2073">使用 Visual Basic 访问文件</span><span class="sxs-lookup"><span data-stu-id="306d5-2073">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FreeFile">
      <MemberSignature Language="C#" Value="public static int FreeFile ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 FreeFile() cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FreeFile" />
      <MemberSignature Language="VB.NET" Value="Public Function FreeFile () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int FreeFile();" />
      <MemberSignature Language="F#" Value="static member FreeFile : unit -&gt; int" Usage="Microsoft.VisualBasic.FileSystem.FreeFile " />
      <MemberSignature Language="ILAsm" Value=".method public static int32 FreeFile() cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="306d5-2074">返回一个 <see langword="Integer" /> 值，该值表示 <see langword="FileOpen" /> 函数可用的下一个文件号。</span><span class="sxs-lookup"><span data-stu-id="306d5-2074">Returns an <see langword="Integer" /> value that represents the next file number available for use by the <see langword="FileOpen" /> function.</span></span></summary>
        <returns><span data-ttu-id="306d5-2075">一个整数值，该值表示 <see langword="FileOpen" /> 函数可用的下一个文件号。</span><span class="sxs-lookup"><span data-stu-id="306d5-2075">An integer value that represents the next file number available for use by the <see langword="FileOpen" /> function.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="306d5-2076">使用 `FreeFile` 提供尚未使用的文件编号。</span><span class="sxs-lookup"><span data-stu-id="306d5-2076">Use `FreeFile` to supply a file number that is not already being used.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="306d5-2077">此示例使用 `FreeFile` 函数返回下一个可用的文件号。</span><span class="sxs-lookup"><span data-stu-id="306d5-2077">This example uses the `FreeFile` function to return the next available file number.</span></span> <span data-ttu-id="306d5-2078">为循环内的输出打开5个文件，并将一些示例数据写入每个文件。</span><span class="sxs-lookup"><span data-stu-id="306d5-2078">Five files are opened for output within the loop, and some sample data is written to each.</span></span>  
  
 [!code-vb[VbVbalrCatRef#55](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#55)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="306d5-2079">正在使用的文件数超过 255。</span><span class="sxs-lookup"><span data-stu-id="306d5-2079">More than 255 files are in use.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files"><span data-ttu-id="306d5-2080">写入文件 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="306d5-2080">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetAttr">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.FileAttribute GetAttr (string PathName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.VisualBasic.FileAttribute GetAttr(string PathName) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAttr (PathName As String) As FileAttribute" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::FileAttribute GetAttr(System::String ^ PathName);" />
      <MemberSignature Language="F#" Value="static member GetAttr : string -&gt; Microsoft.VisualBasic.FileAttribute" Usage="Microsoft.VisualBasic.FileSystem.GetAttr PathName" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.FileAttribute GetAttr(string PathName) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.FileAttribute</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="PathName"><span data-ttu-id="306d5-2081">必需。</span><span class="sxs-lookup"><span data-stu-id="306d5-2081">Required.</span></span> <span data-ttu-id="306d5-2082">指定一个文件名、目录名或文件夹名的字符串表达式。</span><span class="sxs-lookup"><span data-stu-id="306d5-2082">A string expression that specifies a file, directory, or folder name.</span></span> <span data-ttu-id="306d5-2083"><paramref name="PathName" /> 可以包含驱动器和目录或文件夹。</span><span class="sxs-lookup"><span data-stu-id="306d5-2083"><paramref name="PathName" /> can include the directory or folder, and the drive.</span></span></param>
        <summary><span data-ttu-id="306d5-2084">返回一个表示文件、目录或文件夹的特性的 <see langword="FileAttribute" /> 值。</span><span class="sxs-lookup"><span data-stu-id="306d5-2084">Returns a <see langword="FileAttribute" /> value that represents the attributes of a file, directory, or folder.</span></span> <span data-ttu-id="306d5-2085">相比 <see langword="FileAttribute" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span><span class="sxs-lookup"><span data-stu-id="306d5-2085">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileAttribute" />.</span></span> <span data-ttu-id="306d5-2086">有关详细信息，请参阅 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="306d5-2086">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <returns><span data-ttu-id="306d5-2087">枚举值的按位组合。</span><span class="sxs-lookup"><span data-stu-id="306d5-2087">A bitwise combination of the enumeration values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="306d5-2088">若要确定设置了哪些特性，请使用 `And` 运算符来对 `GetAttr` 函数返回的值和所需的单个文件特性值执行按位比较。</span><span class="sxs-lookup"><span data-stu-id="306d5-2088">To determine which attributes are set, use the `And` operator to perform a bitwise comparison of the value returned by the `GetAttr` function and the value of the individual file attribute you want.</span></span> <span data-ttu-id="306d5-2089">如果结果不为零，则为命名文件设置该属性。</span><span class="sxs-lookup"><span data-stu-id="306d5-2089">If the result is not zero, that attribute is set for the named file.</span></span> <span data-ttu-id="306d5-2090">例如，如果未设置 `Archive` 特性，以下 `And` 表达式的返回值为零：</span><span class="sxs-lookup"><span data-stu-id="306d5-2090">For example, the return value of the following `And` expression is zero if the `Archive` attribute is not set:</span></span>  
  
```vb  
Result = GetAttr(FName) And vbArchive  
```  
  
 <span data-ttu-id="306d5-2091">如果设置了 `Archive` 特性，则返回一个非零值。</span><span class="sxs-lookup"><span data-stu-id="306d5-2091">A nonzero value is returned if the `Archive` attribute is set.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="306d5-2092">此示例使用 `GetAttr` 函数确定文件和目录或文件夹的属性。</span><span class="sxs-lookup"><span data-stu-id="306d5-2092">This example uses the `GetAttr` function to determine the attributes of a file and directory or folder.</span></span>  
  
 [!code-vb[VbVbalrCatRef#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="306d5-2093"><paramref name="Pathname" /> 无效或包含通配符。</span><span class="sxs-lookup"><span data-stu-id="306d5-2093"><paramref name="Pathname" /> is invalid or contains wildcards.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="306d5-2094">目标文件不存在。</span><span class="sxs-lookup"><span data-stu-id="306d5-2094">Target file does not exist.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileAttr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SetAttr(System.String,Microsoft.VisualBasic.FileAttribute)" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <altmember cref="T:Microsoft.VisualBasic.FileAttribute" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/operators/and-operator"><span data-ttu-id="306d5-2095">And 运算符 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="306d5-2095">And Operator (Visual Basic)</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/file-access"><span data-ttu-id="306d5-2096">使用 Visual Basic 访问文件</span><span class="sxs-lookup"><span data-stu-id="306d5-2096">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Input">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="306d5-2097">读取打开的顺序文件中的数据，并将这些数据赋值给变量。</span><span class="sxs-lookup"><span data-stu-id="306d5-2097">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref bool Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Input(int32 FileNumber, bool&amp; Value) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, bool % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int * bool -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, bool&amp; Value) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Boolean" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="306d5-2098">必需。</span><span class="sxs-lookup"><span data-stu-id="306d5-2098">Required.</span></span> <span data-ttu-id="306d5-2099">任何有效文件数。</span><span class="sxs-lookup"><span data-stu-id="306d5-2099">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="306d5-2100">必需。</span><span class="sxs-lookup"><span data-stu-id="306d5-2100">Required.</span></span> <span data-ttu-id="306d5-2101">被赋以从文件中读取的值的变量不能是数组或对象变量。</span><span class="sxs-lookup"><span data-stu-id="306d5-2101">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="306d5-2102">读取打开的顺序文件中的数据，并将这些数据赋值给变量。</span><span class="sxs-lookup"><span data-stu-id="306d5-2102">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="306d5-2103">提供 `Input` 函数是为了向后兼容，可能会影响性能。</span><span class="sxs-lookup"><span data-stu-id="306d5-2103">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="306d5-2104">对于非旧版应用程序，`My.Computer.FileSystem` 对象提供更好的性能。</span><span class="sxs-lookup"><span data-stu-id="306d5-2104">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="306d5-2105">有关详细信息，请参阅[使用 Visual Basic 进行文件访问](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/file-access)。</span><span class="sxs-lookup"><span data-stu-id="306d5-2105">For more information, see [File Access with Visual Basic](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/file-access).</span></span>  
  
 <span data-ttu-id="306d5-2106">使用 `Write``Input` 读取的数据通常写入到文件中。</span><span class="sxs-lookup"><span data-stu-id="306d5-2106">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="306d5-2107">仅将此函数用于在 `Input` 或 `Binary` 模式下打开的文件。</span><span class="sxs-lookup"><span data-stu-id="306d5-2107">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="306d5-2108">在从文件中读取时，请不要根据文件扩展名来决定文件的内容。</span><span class="sxs-lookup"><span data-stu-id="306d5-2108">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="306d5-2109">例如，名为 "Form1" 的文件可能不是 Visual Basic 2005 的源文件。</span><span class="sxs-lookup"><span data-stu-id="306d5-2109">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="306d5-2110">在读取时，不修改标准字符串或数值数据，而是将其分配给变量。</span><span class="sxs-lookup"><span data-stu-id="306d5-2110">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="306d5-2111">下表说明了如何处理其他输入数据。</span><span class="sxs-lookup"><span data-stu-id="306d5-2111">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="306d5-2112">数据</span><span class="sxs-lookup"><span data-stu-id="306d5-2112">Data</span></span>|<span data-ttu-id="306d5-2113">赋给变量的值</span><span class="sxs-lookup"><span data-stu-id="306d5-2113">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="306d5-2114">分隔逗号或空白行</span><span class="sxs-lookup"><span data-stu-id="306d5-2114">Delimiting comma or blank line</span></span>|<span data-ttu-id="306d5-2115">空</span><span class="sxs-lookup"><span data-stu-id="306d5-2115">Empty</span></span>|  
|<span data-ttu-id="306d5-2116">#NULL#</span><span class="sxs-lookup"><span data-stu-id="306d5-2116">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="306d5-2117">#TRUE # 或 #FALSE#</span><span class="sxs-lookup"><span data-stu-id="306d5-2117">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="306d5-2118">`True` 或 `False`</span><span class="sxs-lookup"><span data-stu-id="306d5-2118">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="306d5-2119">表达式所表示的日期和/或时间</span><span class="sxs-lookup"><span data-stu-id="306d5-2119">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="306d5-2120">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="306d5-2120">#ERROR `errornumber`#</span></span>|<span data-ttu-id="306d5-2121">`errornumber` （变量是标记为错误的对象）</span><span class="sxs-lookup"><span data-stu-id="306d5-2121">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="306d5-2122">如果在您输入数据项时到达该文件的末尾，则输入将停止并发生错误。</span><span class="sxs-lookup"><span data-stu-id="306d5-2122">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="306d5-2123">`Input` 函数未本地化。</span><span class="sxs-lookup"><span data-stu-id="306d5-2123">The `Input` function is not localized.</span></span> <span data-ttu-id="306d5-2124">例如，在德语版本中，如果输入3、14159，则它仅返回3，因为逗号被视为变量分隔符，而不是小数点。</span><span class="sxs-lookup"><span data-stu-id="306d5-2124">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="306d5-2125">使用 `Input` 函数从文件读取需要从 `FileIOPermissionAccess` 枚举进行 `Read` 访问。</span><span class="sxs-lookup"><span data-stu-id="306d5-2125">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="306d5-2126">有关详细信息，请参阅 <xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="306d5-2126">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="306d5-2127">此示例使用 `Input` 函数将文件中的数据读入两个变量。</span><span class="sxs-lookup"><span data-stu-id="306d5-2127">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="306d5-2128">此示例假定 `TestFile` 是使用 `Write` 函数向其写入一些数据行的文件，其中每行都包含一个以引号表示的字符串和一个用逗号分隔的数字，例如：（"Hello"，234）。</span><span class="sxs-lookup"><span data-stu-id="306d5-2128">This example assumes that `TestFile` is a file that has some lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="306d5-2129">文件模式无效。</span><span class="sxs-lookup"><span data-stu-id="306d5-2129">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files"><span data-ttu-id="306d5-2130">如何：在 Visual Basic 中向文件内写入文本</span><span class="sxs-lookup"><span data-stu-id="306d5-2130">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/file-access"><span data-ttu-id="306d5-2131">使用 Visual Basic 访问文件</span><span class="sxs-lookup"><span data-stu-id="306d5-2131">File Access with Visual Basic</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter"><span data-ttu-id="306d5-2132">如何：使用 Streamwriter （Visual Basic）将文本写入文件</span><span class="sxs-lookup"><span data-stu-id="306d5-2132">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref byte Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Input(int32 FileNumber, unsigned int8&amp; Value) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Byte@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Byte)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, System::Byte % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int * byte -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, unsigned int8&amp; Value) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Byte" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="306d5-2133">必需。</span><span class="sxs-lookup"><span data-stu-id="306d5-2133">Required.</span></span> <span data-ttu-id="306d5-2134">任何有效文件数。</span><span class="sxs-lookup"><span data-stu-id="306d5-2134">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="306d5-2135">必需。</span><span class="sxs-lookup"><span data-stu-id="306d5-2135">Required.</span></span> <span data-ttu-id="306d5-2136">被赋以从文件中读取的值的变量不能是数组或对象变量。</span><span class="sxs-lookup"><span data-stu-id="306d5-2136">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="306d5-2137">读取打开的顺序文件中的数据，并将这些数据赋值给变量。</span><span class="sxs-lookup"><span data-stu-id="306d5-2137">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="306d5-2138">提供 `Input` 函数是为了向后兼容，可能会影响性能。</span><span class="sxs-lookup"><span data-stu-id="306d5-2138">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="306d5-2139">对于非旧版应用程序，`My.Computer.FileSystem` 对象提供更好的性能。</span><span class="sxs-lookup"><span data-stu-id="306d5-2139">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="306d5-2140">有关详细信息，请参阅[使用 Visual Basic 进行文件访问](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/file-access)。</span><span class="sxs-lookup"><span data-stu-id="306d5-2140">For more information, see [File Access with Visual Basic](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/file-access).</span></span>  
  
 <span data-ttu-id="306d5-2141">使用 `Write``Input` 读取的数据通常写入到文件中。</span><span class="sxs-lookup"><span data-stu-id="306d5-2141">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="306d5-2142">仅将此函数用于在 `Input` 或 `Binary` 模式下打开的文件。</span><span class="sxs-lookup"><span data-stu-id="306d5-2142">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="306d5-2143">在从文件中读取时，请不要根据文件扩展名来决定文件的内容。</span><span class="sxs-lookup"><span data-stu-id="306d5-2143">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="306d5-2144">例如，名为 "Form1" 的文件可能不是 Visual Basic 2005 的源文件。</span><span class="sxs-lookup"><span data-stu-id="306d5-2144">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="306d5-2145">在读取时，不修改标准字符串或数值数据，而是将其分配给变量。</span><span class="sxs-lookup"><span data-stu-id="306d5-2145">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="306d5-2146">下表说明了如何处理其他输入数据。</span><span class="sxs-lookup"><span data-stu-id="306d5-2146">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="306d5-2147">数据</span><span class="sxs-lookup"><span data-stu-id="306d5-2147">Data</span></span>|<span data-ttu-id="306d5-2148">赋给变量的值</span><span class="sxs-lookup"><span data-stu-id="306d5-2148">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="306d5-2149">分隔逗号或空白行</span><span class="sxs-lookup"><span data-stu-id="306d5-2149">Delimiting comma or blank line</span></span>|<span data-ttu-id="306d5-2150">空</span><span class="sxs-lookup"><span data-stu-id="306d5-2150">Empty</span></span>|  
|<span data-ttu-id="306d5-2151">#NULL#</span><span class="sxs-lookup"><span data-stu-id="306d5-2151">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="306d5-2152">#TRUE # 或 #FALSE#</span><span class="sxs-lookup"><span data-stu-id="306d5-2152">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="306d5-2153">`True` 或 `False`</span><span class="sxs-lookup"><span data-stu-id="306d5-2153">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="306d5-2154">表达式所表示的日期和/或时间</span><span class="sxs-lookup"><span data-stu-id="306d5-2154">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="306d5-2155">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="306d5-2155">#ERROR `errornumber`#</span></span>|<span data-ttu-id="306d5-2156">`errornumber` （变量是标记为错误的对象）</span><span class="sxs-lookup"><span data-stu-id="306d5-2156">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="306d5-2157">如果在您输入数据项时到达该文件的末尾，则输入将停止并发生错误。</span><span class="sxs-lookup"><span data-stu-id="306d5-2157">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="306d5-2158">`Input` 函数未本地化。</span><span class="sxs-lookup"><span data-stu-id="306d5-2158">The `Input` function is not localized.</span></span> <span data-ttu-id="306d5-2159">例如，在德语版本中，如果输入3、14159，则它仅返回3，因为逗号被视为变量分隔符，而不是小数点。</span><span class="sxs-lookup"><span data-stu-id="306d5-2159">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="306d5-2160">使用 `Input` 函数从文件读取需要从 `FileIOPermissionAccess` 枚举进行 `Read` 访问。</span><span class="sxs-lookup"><span data-stu-id="306d5-2160">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="306d5-2161">有关详细信息，请参阅 <xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="306d5-2161">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="306d5-2162">此示例使用 `Input` 函数将文件中的数据读入两个变量。</span><span class="sxs-lookup"><span data-stu-id="306d5-2162">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="306d5-2163">此示例假定 `TestFile` 是使用 `Write` 函数向其写入一些数据行的文件，其中每行都包含一个以引号表示的字符串和一个用逗号分隔的数字，例如：（"Hello"，234）。</span><span class="sxs-lookup"><span data-stu-id="306d5-2163">This example assumes that `TestFile` is a file that has some lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="306d5-2164">文件模式无效。</span><span class="sxs-lookup"><span data-stu-id="306d5-2164">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files"><span data-ttu-id="306d5-2165">如何：在 Visual Basic 中向文件内写入文本</span><span class="sxs-lookup"><span data-stu-id="306d5-2165">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/file-access"><span data-ttu-id="306d5-2166">使用 Visual Basic 访问文件</span><span class="sxs-lookup"><span data-stu-id="306d5-2166">File Access with Visual Basic</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter"><span data-ttu-id="306d5-2167">如何：使用 Streamwriter （Visual Basic）将文本写入文件</span><span class="sxs-lookup"><span data-stu-id="306d5-2167">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref char Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Input(int32 FileNumber, char&amp; Value) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Char@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, char % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int * char -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, char&amp; Value) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Char" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="306d5-2168">必需。</span><span class="sxs-lookup"><span data-stu-id="306d5-2168">Required.</span></span> <span data-ttu-id="306d5-2169">任何有效文件数。</span><span class="sxs-lookup"><span data-stu-id="306d5-2169">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="306d5-2170">必需。</span><span class="sxs-lookup"><span data-stu-id="306d5-2170">Required.</span></span> <span data-ttu-id="306d5-2171">被赋以从文件中读取的值的变量不能是数组或对象变量。</span><span class="sxs-lookup"><span data-stu-id="306d5-2171">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="306d5-2172">读取打开的顺序文件中的数据，并将这些数据赋值给变量。</span><span class="sxs-lookup"><span data-stu-id="306d5-2172">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="306d5-2173">提供 `Input` 函数是为了向后兼容，可能会影响性能。</span><span class="sxs-lookup"><span data-stu-id="306d5-2173">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="306d5-2174">对于非旧版应用程序，`My.Computer.FileSystem` 对象提供更好的性能。</span><span class="sxs-lookup"><span data-stu-id="306d5-2174">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="306d5-2175">有关详细信息，请参阅[使用 Visual Basic 进行文件访问](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/file-access)。</span><span class="sxs-lookup"><span data-stu-id="306d5-2175">For more information, see [File Access with Visual Basic](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/file-access).</span></span>  
  
 <span data-ttu-id="306d5-2176">使用 `Write``Input` 读取的数据通常写入到文件中。</span><span class="sxs-lookup"><span data-stu-id="306d5-2176">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="306d5-2177">仅将此函数用于在 `Input` 或 `Binary` 模式下打开的文件。</span><span class="sxs-lookup"><span data-stu-id="306d5-2177">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="306d5-2178">在从文件中读取时，请不要根据文件扩展名来决定文件的内容。</span><span class="sxs-lookup"><span data-stu-id="306d5-2178">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="306d5-2179">例如，名为 "Form1" 的文件可能不是 Visual Basic 2005 的源文件。</span><span class="sxs-lookup"><span data-stu-id="306d5-2179">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="306d5-2180">在读取时，不修改标准字符串或数值数据，而是将其分配给变量。</span><span class="sxs-lookup"><span data-stu-id="306d5-2180">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="306d5-2181">下表说明了如何处理其他输入数据。</span><span class="sxs-lookup"><span data-stu-id="306d5-2181">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="306d5-2182">数据</span><span class="sxs-lookup"><span data-stu-id="306d5-2182">Data</span></span>|<span data-ttu-id="306d5-2183">赋给变量的值</span><span class="sxs-lookup"><span data-stu-id="306d5-2183">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="306d5-2184">分隔逗号或空白行</span><span class="sxs-lookup"><span data-stu-id="306d5-2184">Delimiting comma or blank line</span></span>|<span data-ttu-id="306d5-2185">空</span><span class="sxs-lookup"><span data-stu-id="306d5-2185">Empty</span></span>|  
|<span data-ttu-id="306d5-2186">#NULL#</span><span class="sxs-lookup"><span data-stu-id="306d5-2186">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="306d5-2187">#TRUE # 或 #FALSE#</span><span class="sxs-lookup"><span data-stu-id="306d5-2187">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="306d5-2188">`True` 或 `False`</span><span class="sxs-lookup"><span data-stu-id="306d5-2188">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="306d5-2189">表达式所表示的日期和/或时间</span><span class="sxs-lookup"><span data-stu-id="306d5-2189">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="306d5-2190">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="306d5-2190">#ERROR `errornumber`#</span></span>|<span data-ttu-id="306d5-2191">`errornumber` （变量是标记为错误的对象）</span><span class="sxs-lookup"><span data-stu-id="306d5-2191">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="306d5-2192">如果在您输入数据项时到达该文件的末尾，则输入将停止并发生错误。</span><span class="sxs-lookup"><span data-stu-id="306d5-2192">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="306d5-2193">`Input` 函数未本地化。</span><span class="sxs-lookup"><span data-stu-id="306d5-2193">The `Input` function is not localized.</span></span> <span data-ttu-id="306d5-2194">例如，在德语版本中，如果输入3、14159，则它仅返回3，因为逗号被视为变量分隔符，而不是小数点。</span><span class="sxs-lookup"><span data-stu-id="306d5-2194">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="306d5-2195">使用 `Input` 函数从文件读取需要从 `FileIOPermissionAccess` 枚举进行 `Read` 访问。</span><span class="sxs-lookup"><span data-stu-id="306d5-2195">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="306d5-2196">有关详细信息，请参阅 <xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="306d5-2196">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="306d5-2197">此示例使用 `Input` 函数将文件中的数据读入两个变量。</span><span class="sxs-lookup"><span data-stu-id="306d5-2197">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="306d5-2198">此示例假定 `TestFile` 是使用 `Write` 函数向其写入多行数据的文件，其中每行都包含一个以引号表示的字符串和一个用逗号分隔的数字，例如：（"Hello"，234）。</span><span class="sxs-lookup"><span data-stu-id="306d5-2198">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="306d5-2199">文件模式无效。</span><span class="sxs-lookup"><span data-stu-id="306d5-2199">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files"><span data-ttu-id="306d5-2200">如何：在 Visual Basic 中向文件内写入文本</span><span class="sxs-lookup"><span data-stu-id="306d5-2200">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/file-access"><span data-ttu-id="306d5-2201">使用 Visual Basic 访问文件</span><span class="sxs-lookup"><span data-stu-id="306d5-2201">File Access with Visual Basic</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter"><span data-ttu-id="306d5-2202">如何：使用 Streamwriter （Visual Basic）将文本写入文件</span><span class="sxs-lookup"><span data-stu-id="306d5-2202">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref DateTime Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Input(int32 FileNumber, valuetype System.DateTime&amp; Value) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, DateTime % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int * DateTime -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, valuetype System.DateTime&amp; Value) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.DateTime" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="306d5-2203">必需。</span><span class="sxs-lookup"><span data-stu-id="306d5-2203">Required.</span></span> <span data-ttu-id="306d5-2204">任何有效文件数。</span><span class="sxs-lookup"><span data-stu-id="306d5-2204">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="306d5-2205">必需。</span><span class="sxs-lookup"><span data-stu-id="306d5-2205">Required.</span></span> <span data-ttu-id="306d5-2206">被赋以从文件中读取的值的变量不能是数组或对象变量。</span><span class="sxs-lookup"><span data-stu-id="306d5-2206">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="306d5-2207">读取打开的顺序文件中的数据，并将这些数据赋值给变量。</span><span class="sxs-lookup"><span data-stu-id="306d5-2207">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="306d5-2208">提供 `Input` 函数是为了向后兼容，可能会影响性能。</span><span class="sxs-lookup"><span data-stu-id="306d5-2208">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="306d5-2209">对于非旧版应用程序，`My.Computer.FileSystem` 对象提供更好的性能。</span><span class="sxs-lookup"><span data-stu-id="306d5-2209">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="306d5-2210">有关详细信息，请参阅[使用 Visual Basic 进行文件访问](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/file-access)。</span><span class="sxs-lookup"><span data-stu-id="306d5-2210">For more information, see [File Access with Visual Basic](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/file-access).</span></span>  
  
 <span data-ttu-id="306d5-2211">使用 `Write``Input` 读取的数据通常写入到文件中。</span><span class="sxs-lookup"><span data-stu-id="306d5-2211">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="306d5-2212">仅将此函数用于在 `Input` 或 `Binary` 模式下打开的文件。</span><span class="sxs-lookup"><span data-stu-id="306d5-2212">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="306d5-2213">在从文件中读取时，请不要根据文件扩展名来决定文件的内容。</span><span class="sxs-lookup"><span data-stu-id="306d5-2213">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="306d5-2214">例如，名为 "Form1" 的文件可能不是 Visual Basic 2005 的源文件。</span><span class="sxs-lookup"><span data-stu-id="306d5-2214">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="306d5-2215">在读取时，不修改标准字符串或数值数据，而是将其分配给变量。</span><span class="sxs-lookup"><span data-stu-id="306d5-2215">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="306d5-2216">下表说明了如何处理其他输入数据。</span><span class="sxs-lookup"><span data-stu-id="306d5-2216">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="306d5-2217">数据</span><span class="sxs-lookup"><span data-stu-id="306d5-2217">Data</span></span>|<span data-ttu-id="306d5-2218">赋给变量的值</span><span class="sxs-lookup"><span data-stu-id="306d5-2218">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="306d5-2219">分隔逗号或空白行</span><span class="sxs-lookup"><span data-stu-id="306d5-2219">Delimiting comma or blank line</span></span>|<span data-ttu-id="306d5-2220">空</span><span class="sxs-lookup"><span data-stu-id="306d5-2220">Empty</span></span>|  
|<span data-ttu-id="306d5-2221">#NULL#</span><span class="sxs-lookup"><span data-stu-id="306d5-2221">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="306d5-2222">#TRUE # 或 #FALSE#</span><span class="sxs-lookup"><span data-stu-id="306d5-2222">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="306d5-2223">`True` 或 `False`</span><span class="sxs-lookup"><span data-stu-id="306d5-2223">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="306d5-2224">表达式所表示的日期和/或时间</span><span class="sxs-lookup"><span data-stu-id="306d5-2224">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="306d5-2225">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="306d5-2225">#ERROR `errornumber`#</span></span>|<span data-ttu-id="306d5-2226">`errornumber` （变量是标记为错误的对象）</span><span class="sxs-lookup"><span data-stu-id="306d5-2226">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="306d5-2227">如果在您输入数据项时到达该文件的末尾，则输入将停止并发生错误。</span><span class="sxs-lookup"><span data-stu-id="306d5-2227">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="306d5-2228">`Input` 函数未本地化。</span><span class="sxs-lookup"><span data-stu-id="306d5-2228">The `Input` function is not localized.</span></span> <span data-ttu-id="306d5-2229">例如，在德语版本中，如果输入3、14159，则它仅返回3，因为逗号被视为变量分隔符，而不是小数点。</span><span class="sxs-lookup"><span data-stu-id="306d5-2229">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="306d5-2230">使用 `Input` 函数从文件读取需要从 `FileIOPermissionAccess` 枚举进行 `Read` 访问。</span><span class="sxs-lookup"><span data-stu-id="306d5-2230">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="306d5-2231">有关详细信息，请参阅 <xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="306d5-2231">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="306d5-2232">此示例使用 `Input` 函数将文件中的数据读入两个变量。</span><span class="sxs-lookup"><span data-stu-id="306d5-2232">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="306d5-2233">此示例假定 `TestFile` 是使用 `Write` 函数向其写入多行数据的文件，其中每行都包含一个以引号表示的字符串和一个用逗号分隔的数字，例如：（"Hello"，234）。</span><span class="sxs-lookup"><span data-stu-id="306d5-2233">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="306d5-2234">文件模式无效。</span><span class="sxs-lookup"><span data-stu-id="306d5-2234">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files"><span data-ttu-id="306d5-2235">如何：在 Visual Basic 中向文件内写入文本</span><span class="sxs-lookup"><span data-stu-id="306d5-2235">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/file-access"><span data-ttu-id="306d5-2236">使用 Visual Basic 访问文件</span><span class="sxs-lookup"><span data-stu-id="306d5-2236">File Access with Visual Basic</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter"><span data-ttu-id="306d5-2237">如何：使用 Streamwriter （Visual Basic）将文本写入文件</span><span class="sxs-lookup"><span data-stu-id="306d5-2237">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref decimal Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Input(int32 FileNumber, valuetype System.Decimal&amp; Value) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Decimal@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, System::Decimal % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int * decimal -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, valuetype System.Decimal&amp; Value) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Decimal" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="306d5-2238">必需。</span><span class="sxs-lookup"><span data-stu-id="306d5-2238">Required.</span></span> <span data-ttu-id="306d5-2239">任何有效文件数。</span><span class="sxs-lookup"><span data-stu-id="306d5-2239">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="306d5-2240">必需。</span><span class="sxs-lookup"><span data-stu-id="306d5-2240">Required.</span></span> <span data-ttu-id="306d5-2241">被赋以从文件中读取的值的变量不能是数组或对象变量。</span><span class="sxs-lookup"><span data-stu-id="306d5-2241">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="306d5-2242">读取打开的顺序文件中的数据，并将这些数据赋值给变量。</span><span class="sxs-lookup"><span data-stu-id="306d5-2242">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="306d5-2243">提供 `Input` 函数是为了向后兼容，可能会影响性能。</span><span class="sxs-lookup"><span data-stu-id="306d5-2243">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="306d5-2244">对于非旧版应用程序，`My.Computer.FileSystem` 对象提供更好的性能。</span><span class="sxs-lookup"><span data-stu-id="306d5-2244">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="306d5-2245">有关详细信息，请参阅[使用 Visual Basic 进行文件访问](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/file-access)。</span><span class="sxs-lookup"><span data-stu-id="306d5-2245">For more information, see [File Access with Visual Basic](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/file-access).</span></span>  
  
 <span data-ttu-id="306d5-2246">使用 `Write``Input` 读取的数据通常写入到文件中。</span><span class="sxs-lookup"><span data-stu-id="306d5-2246">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="306d5-2247">仅将此函数用于在 `Input` 或 `Binary` 模式下打开的文件。</span><span class="sxs-lookup"><span data-stu-id="306d5-2247">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="306d5-2248">在从文件中读取时，请不要根据文件扩展名来决定文件的内容。</span><span class="sxs-lookup"><span data-stu-id="306d5-2248">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="306d5-2249">例如，名为 "Form1" 的文件可能不是 Visual Basic 2005 的源文件。</span><span class="sxs-lookup"><span data-stu-id="306d5-2249">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="306d5-2250">在读取时，不修改标准字符串或数值数据，而是将其分配给变量。</span><span class="sxs-lookup"><span data-stu-id="306d5-2250">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="306d5-2251">下表说明了如何处理其他输入数据。</span><span class="sxs-lookup"><span data-stu-id="306d5-2251">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="306d5-2252">数据</span><span class="sxs-lookup"><span data-stu-id="306d5-2252">Data</span></span>|<span data-ttu-id="306d5-2253">赋给变量的值</span><span class="sxs-lookup"><span data-stu-id="306d5-2253">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="306d5-2254">分隔逗号或空白行</span><span class="sxs-lookup"><span data-stu-id="306d5-2254">Delimiting comma or blank line</span></span>|<span data-ttu-id="306d5-2255">空</span><span class="sxs-lookup"><span data-stu-id="306d5-2255">Empty</span></span>|  
|<span data-ttu-id="306d5-2256">#NULL#</span><span class="sxs-lookup"><span data-stu-id="306d5-2256">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="306d5-2257">#TRUE # 或 #FALSE#</span><span class="sxs-lookup"><span data-stu-id="306d5-2257">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="306d5-2258">`True` 或 `False`</span><span class="sxs-lookup"><span data-stu-id="306d5-2258">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="306d5-2259">表达式所表示的日期和/或时间</span><span class="sxs-lookup"><span data-stu-id="306d5-2259">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="306d5-2260">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="306d5-2260">#ERROR `errornumber`#</span></span>|<span data-ttu-id="306d5-2261">`errornumber` （变量是标记为错误的对象）</span><span class="sxs-lookup"><span data-stu-id="306d5-2261">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="306d5-2262">如果在您输入数据项时到达该文件的末尾，则输入将停止并发生错误。</span><span class="sxs-lookup"><span data-stu-id="306d5-2262">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="306d5-2263">`Input` 函数未本地化。</span><span class="sxs-lookup"><span data-stu-id="306d5-2263">The `Input` function is not localized.</span></span> <span data-ttu-id="306d5-2264">例如，在德语版本中，如果输入3、14159，则它仅返回3，因为逗号被视为变量分隔符，而不是小数点。</span><span class="sxs-lookup"><span data-stu-id="306d5-2264">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="306d5-2265">使用 `Input` 函数从文件读取需要从 `FileIOPermissionAccess` 枚举进行 `Read` 访问。</span><span class="sxs-lookup"><span data-stu-id="306d5-2265">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="306d5-2266">有关详细信息，请参阅 <xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="306d5-2266">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="306d5-2267">此示例使用 `Input` 函数将文件中的数据读入两个变量。</span><span class="sxs-lookup"><span data-stu-id="306d5-2267">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="306d5-2268">此示例假定 `TestFile` 是使用 `Write` 函数向其写入多行数据的文件，其中每行都包含一个以引号表示的字符串和一个用逗号分隔的数字，例如：（"Hello"，234）。</span><span class="sxs-lookup"><span data-stu-id="306d5-2268">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="306d5-2269">文件模式无效。</span><span class="sxs-lookup"><span data-stu-id="306d5-2269">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files"><span data-ttu-id="306d5-2270">如何：在 Visual Basic 中向文件内写入文本</span><span class="sxs-lookup"><span data-stu-id="306d5-2270">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/file-access"><span data-ttu-id="306d5-2271">使用 Visual Basic 访问文件</span><span class="sxs-lookup"><span data-stu-id="306d5-2271">File Access with Visual Basic</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter"><span data-ttu-id="306d5-2272">如何：使用 Streamwriter （Visual Basic）将文本写入文件</span><span class="sxs-lookup"><span data-stu-id="306d5-2272">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref double Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Input(int32 FileNumber, float64&amp; Value) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Double@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, double % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int * double -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, float64&amp; Value) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Double" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="306d5-2273">必需。</span><span class="sxs-lookup"><span data-stu-id="306d5-2273">Required.</span></span> <span data-ttu-id="306d5-2274">任何有效文件数。</span><span class="sxs-lookup"><span data-stu-id="306d5-2274">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="306d5-2275">必需。</span><span class="sxs-lookup"><span data-stu-id="306d5-2275">Required.</span></span> <span data-ttu-id="306d5-2276">被赋以从文件中读取的值的变量不能是数组或对象变量。</span><span class="sxs-lookup"><span data-stu-id="306d5-2276">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="306d5-2277">读取打开的顺序文件中的数据，并将这些数据赋值给变量。</span><span class="sxs-lookup"><span data-stu-id="306d5-2277">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="306d5-2278">提供 `Input` 函数是为了向后兼容，可能会影响性能。</span><span class="sxs-lookup"><span data-stu-id="306d5-2278">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="306d5-2279">对于非旧版应用程序，`My.Computer.FileSystem` 对象提供更好的性能。</span><span class="sxs-lookup"><span data-stu-id="306d5-2279">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="306d5-2280">有关详细信息，请参阅[使用 Visual Basic 进行文件访问](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/file-access)。</span><span class="sxs-lookup"><span data-stu-id="306d5-2280">For more information, see [File Access with Visual Basic](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/file-access).</span></span>  
  
 <span data-ttu-id="306d5-2281">使用 `Write``Input` 读取的数据通常写入到文件中。</span><span class="sxs-lookup"><span data-stu-id="306d5-2281">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="306d5-2282">仅将此函数用于在 `Input` 或 `Binary` 模式下打开的文件。</span><span class="sxs-lookup"><span data-stu-id="306d5-2282">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="306d5-2283">在从文件中读取时，请不要根据文件扩展名来决定文件的内容。</span><span class="sxs-lookup"><span data-stu-id="306d5-2283">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="306d5-2284">例如，名为 "Form1" 的文件可能不是 Visual Basic 2005 的源文件。</span><span class="sxs-lookup"><span data-stu-id="306d5-2284">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="306d5-2285">在读取时，不修改标准字符串或数值数据，而是将其分配给变量。</span><span class="sxs-lookup"><span data-stu-id="306d5-2285">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="306d5-2286">下表说明了如何处理其他输入数据。</span><span class="sxs-lookup"><span data-stu-id="306d5-2286">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="306d5-2287">数据</span><span class="sxs-lookup"><span data-stu-id="306d5-2287">Data</span></span>|<span data-ttu-id="306d5-2288">赋给变量的值</span><span class="sxs-lookup"><span data-stu-id="306d5-2288">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="306d5-2289">分隔逗号或空白行</span><span class="sxs-lookup"><span data-stu-id="306d5-2289">Delimiting comma or blank line</span></span>|<span data-ttu-id="306d5-2290">空</span><span class="sxs-lookup"><span data-stu-id="306d5-2290">Empty</span></span>|  
|<span data-ttu-id="306d5-2291">#NULL#</span><span class="sxs-lookup"><span data-stu-id="306d5-2291">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="306d5-2292">#TRUE # 或 #FALSE#</span><span class="sxs-lookup"><span data-stu-id="306d5-2292">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="306d5-2293">`True` 或 `False`</span><span class="sxs-lookup"><span data-stu-id="306d5-2293">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="306d5-2294">表达式所表示的日期和/或时间</span><span class="sxs-lookup"><span data-stu-id="306d5-2294">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="306d5-2295">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="306d5-2295">#ERROR `errornumber`#</span></span>|<span data-ttu-id="306d5-2296">`errornumber` （变量是标记为错误的对象）</span><span class="sxs-lookup"><span data-stu-id="306d5-2296">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="306d5-2297">如果在您输入数据项时到达该文件的末尾，则输入将停止并发生错误。</span><span class="sxs-lookup"><span data-stu-id="306d5-2297">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="306d5-2298">`Input` 函数未本地化。</span><span class="sxs-lookup"><span data-stu-id="306d5-2298">The `Input` function is not localized.</span></span> <span data-ttu-id="306d5-2299">例如，在德语版本中，如果输入3、14159，则它仅返回3，因为逗号被视为变量分隔符，而不是小数点。</span><span class="sxs-lookup"><span data-stu-id="306d5-2299">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="306d5-2300">使用 `Input` 函数从文件读取需要从 `FileIOPermissionAccess` 枚举进行 `Read` 访问。</span><span class="sxs-lookup"><span data-stu-id="306d5-2300">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="306d5-2301">有关详细信息，请参阅 <xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="306d5-2301">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="306d5-2302">此示例使用 `Input` 函数将文件中的数据读入两个变量。</span><span class="sxs-lookup"><span data-stu-id="306d5-2302">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="306d5-2303">此示例假定 `TestFile` 是使用 `Write` 函数向其写入多行数据的文件，其中每行都包含一个以引号表示的字符串和一个用逗号分隔的数字，例如：（"Hello"，234）。</span><span class="sxs-lookup"><span data-stu-id="306d5-2303">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="306d5-2304">文件模式无效。</span><span class="sxs-lookup"><span data-stu-id="306d5-2304">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files"><span data-ttu-id="306d5-2305">如何：在 Visual Basic 中向文件内写入文本</span><span class="sxs-lookup"><span data-stu-id="306d5-2305">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/file-access"><span data-ttu-id="306d5-2306">使用 Visual Basic 访问文件</span><span class="sxs-lookup"><span data-stu-id="306d5-2306">File Access with Visual Basic</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter"><span data-ttu-id="306d5-2307">如何：使用 Streamwriter （Visual Basic）将文本写入文件</span><span class="sxs-lookup"><span data-stu-id="306d5-2307">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref short Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Input(int32 FileNumber, int16&amp; Value) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Int16@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Short)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, short % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int * int16 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, int16&amp; Value) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int16" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="306d5-2308">必需。</span><span class="sxs-lookup"><span data-stu-id="306d5-2308">Required.</span></span> <span data-ttu-id="306d5-2309">任何有效文件数。</span><span class="sxs-lookup"><span data-stu-id="306d5-2309">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="306d5-2310">必需。</span><span class="sxs-lookup"><span data-stu-id="306d5-2310">Required.</span></span> <span data-ttu-id="306d5-2311">被赋以从文件中读取的值的变量不能是数组或对象变量。</span><span class="sxs-lookup"><span data-stu-id="306d5-2311">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="306d5-2312">读取打开的顺序文件中的数据，并将这些数据赋值给变量。</span><span class="sxs-lookup"><span data-stu-id="306d5-2312">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="306d5-2313">提供 `Input` 函数是为了向后兼容，可能会影响性能。</span><span class="sxs-lookup"><span data-stu-id="306d5-2313">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="306d5-2314">对于非旧版应用程序，`My.Computer.FileSystem` 对象提供更好的性能。</span><span class="sxs-lookup"><span data-stu-id="306d5-2314">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="306d5-2315">有关详细信息，请参阅[使用 Visual Basic 进行文件访问](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/file-access)。</span><span class="sxs-lookup"><span data-stu-id="306d5-2315">For more information, see [File Access with Visual Basic](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/file-access).</span></span>  
  
 <span data-ttu-id="306d5-2316">使用 `Write``Input` 读取的数据通常写入到文件中。</span><span class="sxs-lookup"><span data-stu-id="306d5-2316">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="306d5-2317">仅将此函数用于在 `Input` 或 `Binary` 模式下打开的文件。</span><span class="sxs-lookup"><span data-stu-id="306d5-2317">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="306d5-2318">在从文件中读取时，请不要根据文件扩展名来决定文件的内容。</span><span class="sxs-lookup"><span data-stu-id="306d5-2318">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="306d5-2319">例如，名为 "Form1" 的文件可能不是 Visual Basic 2005 的源文件。</span><span class="sxs-lookup"><span data-stu-id="306d5-2319">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="306d5-2320">在读取时，不修改标准字符串或数值数据，而是将其分配给变量。</span><span class="sxs-lookup"><span data-stu-id="306d5-2320">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="306d5-2321">下表说明了如何处理其他输入数据。</span><span class="sxs-lookup"><span data-stu-id="306d5-2321">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="306d5-2322">数据</span><span class="sxs-lookup"><span data-stu-id="306d5-2322">Data</span></span>|<span data-ttu-id="306d5-2323">赋给变量的值</span><span class="sxs-lookup"><span data-stu-id="306d5-2323">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="306d5-2324">分隔逗号或空白行</span><span class="sxs-lookup"><span data-stu-id="306d5-2324">Delimiting comma or blank line</span></span>|<span data-ttu-id="306d5-2325">空</span><span class="sxs-lookup"><span data-stu-id="306d5-2325">Empty</span></span>|  
|<span data-ttu-id="306d5-2326">#NULL#</span><span class="sxs-lookup"><span data-stu-id="306d5-2326">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="306d5-2327">#TRUE # 或 #FALSE#</span><span class="sxs-lookup"><span data-stu-id="306d5-2327">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="306d5-2328">`True` 或 `False`</span><span class="sxs-lookup"><span data-stu-id="306d5-2328">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="306d5-2329">表达式所表示的日期和/或时间</span><span class="sxs-lookup"><span data-stu-id="306d5-2329">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="306d5-2330">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="306d5-2330">#ERROR `errornumber`#</span></span>|<span data-ttu-id="306d5-2331">`errornumber` （变量是标记为错误的对象）</span><span class="sxs-lookup"><span data-stu-id="306d5-2331">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="306d5-2332">如果在您输入数据项时到达该文件的末尾，则输入将停止并发生错误。</span><span class="sxs-lookup"><span data-stu-id="306d5-2332">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="306d5-2333">`Input` 函数未本地化。</span><span class="sxs-lookup"><span data-stu-id="306d5-2333">The `Input` function is not localized.</span></span> <span data-ttu-id="306d5-2334">例如，在德语版本中，如果输入3、14159，则它仅返回3，因为逗号被视为变量分隔符，而不是小数点。</span><span class="sxs-lookup"><span data-stu-id="306d5-2334">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="306d5-2335">使用 `Input` 函数从文件读取需要从 `FileIOPermissionAccess` 枚举进行 `Read` 访问。</span><span class="sxs-lookup"><span data-stu-id="306d5-2335">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="306d5-2336">有关详细信息，请参阅 <xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="306d5-2336">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="306d5-2337">此示例使用 `Input` 函数将文件中的数据读入两个变量。</span><span class="sxs-lookup"><span data-stu-id="306d5-2337">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="306d5-2338">此示例假定 `TestFile` 是使用 `Write` 函数向其写入多行数据的文件，其中每行都包含一个以引号表示的字符串和一个用逗号分隔的数字，例如：（"Hello"，234）。</span><span class="sxs-lookup"><span data-stu-id="306d5-2338">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="306d5-2339">文件模式无效。</span><span class="sxs-lookup"><span data-stu-id="306d5-2339">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files"><span data-ttu-id="306d5-2340">如何：在 Visual Basic 中向文件内写入文本</span><span class="sxs-lookup"><span data-stu-id="306d5-2340">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/file-access"><span data-ttu-id="306d5-2341">使用 Visual Basic 访问文件</span><span class="sxs-lookup"><span data-stu-id="306d5-2341">File Access with Visual Basic</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter"><span data-ttu-id="306d5-2342">如何：使用 Streamwriter （Visual Basic）将文本写入文件</span><span class="sxs-lookup"><span data-stu-id="306d5-2342">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref int Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Input(int32 FileNumber, int32&amp; Value) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, int % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int * int -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, int32&amp; Value) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int32" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="306d5-2343">必需。</span><span class="sxs-lookup"><span data-stu-id="306d5-2343">Required.</span></span> <span data-ttu-id="306d5-2344">任何有效文件数。</span><span class="sxs-lookup"><span data-stu-id="306d5-2344">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="306d5-2345">必需。</span><span class="sxs-lookup"><span data-stu-id="306d5-2345">Required.</span></span> <span data-ttu-id="306d5-2346">被赋以从文件中读取的值的变量不能是数组或对象变量。</span><span class="sxs-lookup"><span data-stu-id="306d5-2346">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="306d5-2347">读取打开的顺序文件中的数据，并将这些数据赋值给变量。</span><span class="sxs-lookup"><span data-stu-id="306d5-2347">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="306d5-2348">提供 `Input` 函数是为了向后兼容，可能会影响性能。</span><span class="sxs-lookup"><span data-stu-id="306d5-2348">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="306d5-2349">对于非旧版应用程序，`My.Computer.FileSystem` 对象提供更好的性能。</span><span class="sxs-lookup"><span data-stu-id="306d5-2349">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="306d5-2350">有关详细信息，请参阅[使用 Visual Basic 进行文件访问](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/file-access)。</span><span class="sxs-lookup"><span data-stu-id="306d5-2350">For more information, see [File Access with Visual Basic](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/file-access).</span></span>  
  
 <span data-ttu-id="306d5-2351">使用 `Write``Input` 读取的数据通常写入到文件中。</span><span class="sxs-lookup"><span data-stu-id="306d5-2351">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="306d5-2352">仅将此函数用于在 `Input` 或 `Binary` 模式下打开的文件。</span><span class="sxs-lookup"><span data-stu-id="306d5-2352">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="306d5-2353">在从文件中读取时，请不要根据文件扩展名来决定文件的内容。</span><span class="sxs-lookup"><span data-stu-id="306d5-2353">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="306d5-2354">例如，名为 "Form1" 的文件可能不是 Visual Basic 2005 的源文件。</span><span class="sxs-lookup"><span data-stu-id="306d5-2354">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="306d5-2355">在读取时，不修改标准字符串或数值数据，而是将其分配给变量。</span><span class="sxs-lookup"><span data-stu-id="306d5-2355">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="306d5-2356">下表说明了如何处理其他输入数据。</span><span class="sxs-lookup"><span data-stu-id="306d5-2356">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="306d5-2357">数据</span><span class="sxs-lookup"><span data-stu-id="306d5-2357">Data</span></span>|<span data-ttu-id="306d5-2358">赋给变量的值</span><span class="sxs-lookup"><span data-stu-id="306d5-2358">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="306d5-2359">分隔逗号或空白行</span><span class="sxs-lookup"><span data-stu-id="306d5-2359">Delimiting comma or blank line</span></span>|<span data-ttu-id="306d5-2360">空</span><span class="sxs-lookup"><span data-stu-id="306d5-2360">Empty</span></span>|  
|<span data-ttu-id="306d5-2361">#NULL#</span><span class="sxs-lookup"><span data-stu-id="306d5-2361">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="306d5-2362">#TRUE # 或 #FALSE#</span><span class="sxs-lookup"><span data-stu-id="306d5-2362">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="306d5-2363">`True` 或 `False`</span><span class="sxs-lookup"><span data-stu-id="306d5-2363">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="306d5-2364">表达式所表示的日期和/或时间</span><span class="sxs-lookup"><span data-stu-id="306d5-2364">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="306d5-2365">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="306d5-2365">#ERROR `errornumber`#</span></span>|<span data-ttu-id="306d5-2366">`errornumber` （变量是标记为错误的对象）</span><span class="sxs-lookup"><span data-stu-id="306d5-2366">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="306d5-2367">如果在您输入数据项时到达该文件的末尾，则输入将停止并发生错误。</span><span class="sxs-lookup"><span data-stu-id="306d5-2367">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="306d5-2368">`Input` 函数未本地化。</span><span class="sxs-lookup"><span data-stu-id="306d5-2368">The `Input` function is not localized.</span></span> <span data-ttu-id="306d5-2369">例如，在德语版本中，如果输入14159，则它仅返回3，因为逗号被视为变量分隔符，而不是小数点。</span><span class="sxs-lookup"><span data-stu-id="306d5-2369">For example, in the German version, if you input 3,14159, it returns only 3, since the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="306d5-2370">使用 `Input` 函数从文件读取需要从 `FileIOPermissionAccess` 枚举进行 `Read` 访问。</span><span class="sxs-lookup"><span data-stu-id="306d5-2370">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="306d5-2371">有关详细信息，请参阅 <xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="306d5-2371">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="306d5-2372">此示例使用 `Input` 函数将文件中的数据读入两个变量。</span><span class="sxs-lookup"><span data-stu-id="306d5-2372">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="306d5-2373">此示例假定 `TestFile` 是使用 `Write` 函数向其写入多行数据的文件，其中每行都包含一个以引号表示的字符串和一个用逗号分隔的数字，例如：（"Hello"，234）。</span><span class="sxs-lookup"><span data-stu-id="306d5-2373">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="306d5-2374">文件模式无效。</span><span class="sxs-lookup"><span data-stu-id="306d5-2374">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files"><span data-ttu-id="306d5-2375">如何：在 Visual Basic 中向文件内写入文本</span><span class="sxs-lookup"><span data-stu-id="306d5-2375">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/file-access"><span data-ttu-id="306d5-2376">使用 Visual Basic 访问文件</span><span class="sxs-lookup"><span data-stu-id="306d5-2376">File Access with Visual Basic</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter"><span data-ttu-id="306d5-2377">如何：使用 Streamwriter （Visual Basic）将文本写入文件</span><span class="sxs-lookup"><span data-stu-id="306d5-2377">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref long Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Input(int32 FileNumber, int64&amp; Value) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Int64@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, long % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, int64&amp; Value) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int64" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="306d5-2378">必需。</span><span class="sxs-lookup"><span data-stu-id="306d5-2378">Required.</span></span> <span data-ttu-id="306d5-2379">任何有效文件数。</span><span class="sxs-lookup"><span data-stu-id="306d5-2379">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="306d5-2380">必需。</span><span class="sxs-lookup"><span data-stu-id="306d5-2380">Required.</span></span> <span data-ttu-id="306d5-2381">被赋以从文件中读取的值的变量不能是数组或对象变量。</span><span class="sxs-lookup"><span data-stu-id="306d5-2381">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="306d5-2382">读取打开的顺序文件中的数据，并将这些数据赋值给变量。</span><span class="sxs-lookup"><span data-stu-id="306d5-2382">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="306d5-2383">提供 `Input` 函数是为了向后兼容，可能会影响性能。</span><span class="sxs-lookup"><span data-stu-id="306d5-2383">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="306d5-2384">对于非旧版应用程序，`My.Computer.FileSystem` 对象提供更好的性能。</span><span class="sxs-lookup"><span data-stu-id="306d5-2384">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="306d5-2385">有关详细信息，请参阅[使用 Visual Basic 进行文件访问](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/file-access)。</span><span class="sxs-lookup"><span data-stu-id="306d5-2385">For more information, see [File Access with Visual Basic](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/file-access).</span></span>  
  
 <span data-ttu-id="306d5-2386">使用 `Write``Input` 读取的数据通常写入到文件中。</span><span class="sxs-lookup"><span data-stu-id="306d5-2386">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="306d5-2387">仅将此函数用于在 `Input` 或 `Binary` 模式下打开的文件。</span><span class="sxs-lookup"><span data-stu-id="306d5-2387">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="306d5-2388">在从文件中读取时，请不要根据文件扩展名来决定文件的内容。</span><span class="sxs-lookup"><span data-stu-id="306d5-2388">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="306d5-2389">例如，名为 "Form1" 的文件可能不是 Visual Basic 2005 的源文件。</span><span class="sxs-lookup"><span data-stu-id="306d5-2389">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="306d5-2390">在读取时，不修改标准字符串或数值数据，而是将其分配给变量。</span><span class="sxs-lookup"><span data-stu-id="306d5-2390">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="306d5-2391">下表说明了如何处理其他输入数据。</span><span class="sxs-lookup"><span data-stu-id="306d5-2391">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="306d5-2392">数据</span><span class="sxs-lookup"><span data-stu-id="306d5-2392">Data</span></span>|<span data-ttu-id="306d5-2393">赋给变量的值</span><span class="sxs-lookup"><span data-stu-id="306d5-2393">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="306d5-2394">分隔逗号或空白行</span><span class="sxs-lookup"><span data-stu-id="306d5-2394">Delimiting comma or blank line</span></span>|<span data-ttu-id="306d5-2395">空</span><span class="sxs-lookup"><span data-stu-id="306d5-2395">Empty</span></span>|  
|<span data-ttu-id="306d5-2396">#NULL#</span><span class="sxs-lookup"><span data-stu-id="306d5-2396">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="306d5-2397">#TRUE # 或 #FALSE#</span><span class="sxs-lookup"><span data-stu-id="306d5-2397">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="306d5-2398">`True` 或 `False`</span><span class="sxs-lookup"><span data-stu-id="306d5-2398">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="306d5-2399">表达式所表示的日期和/或时间</span><span class="sxs-lookup"><span data-stu-id="306d5-2399">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="306d5-2400">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="306d5-2400">#ERROR `errornumber`#</span></span>|<span data-ttu-id="306d5-2401">`errornumber` （变量是标记为错误的对象）</span><span class="sxs-lookup"><span data-stu-id="306d5-2401">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="306d5-2402">如果在您输入数据项时到达该文件的末尾，则输入将停止并发生错误。</span><span class="sxs-lookup"><span data-stu-id="306d5-2402">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="306d5-2403">`Input` 函数未本地化。</span><span class="sxs-lookup"><span data-stu-id="306d5-2403">The `Input` function is not localized.</span></span> <span data-ttu-id="306d5-2404">例如，在德语版本中，如果输入3、14159，则它仅返回3，因为逗号被视为变量分隔符，而不是小数点。</span><span class="sxs-lookup"><span data-stu-id="306d5-2404">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="306d5-2405">使用 `Input` 函数从文件读取需要从 `FileIOPermissionAccess` 枚举进行 `Read` 访问。</span><span class="sxs-lookup"><span data-stu-id="306d5-2405">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="306d5-2406">有关详细信息，请参阅 <xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="306d5-2406">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="306d5-2407">此示例使用 `Input` 函数将文件中的数据读入两个变量。</span><span class="sxs-lookup"><span data-stu-id="306d5-2407">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="306d5-2408">此示例假定 `TestFile` 是使用 `Write` 函数向其写入多行数据的文件，其中每行都包含一个以引号表示的字符串和一个用逗号分隔的数字，例如：（"Hello"，234）。</span><span class="sxs-lookup"><span data-stu-id="306d5-2408">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="306d5-2409">文件模式无效。</span><span class="sxs-lookup"><span data-stu-id="306d5-2409">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files"><span data-ttu-id="306d5-2410">如何：在 Visual Basic 中向文件内写入文本</span><span class="sxs-lookup"><span data-stu-id="306d5-2410">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/file-access"><span data-ttu-id="306d5-2411">使用 Visual Basic 访问文件</span><span class="sxs-lookup"><span data-stu-id="306d5-2411">File Access with Visual Basic</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter"><span data-ttu-id="306d5-2412">如何：使用 Streamwriter （Visual Basic）将文本写入文件</span><span class="sxs-lookup"><span data-stu-id="306d5-2412">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref object Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Input(int32 FileNumber, object&amp; Value) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, System::Object ^ % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int * obj -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, object&amp; Value) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Object" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="306d5-2413">必需。</span><span class="sxs-lookup"><span data-stu-id="306d5-2413">Required.</span></span> <span data-ttu-id="306d5-2414">任何有效文件数。</span><span class="sxs-lookup"><span data-stu-id="306d5-2414">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="306d5-2415">必需。</span><span class="sxs-lookup"><span data-stu-id="306d5-2415">Required.</span></span> <span data-ttu-id="306d5-2416">被赋以从文件中读取的值的变量不能是数组或对象变量。</span><span class="sxs-lookup"><span data-stu-id="306d5-2416">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="306d5-2417">读取打开的顺序文件中的数据，并将这些数据赋值给变量。</span><span class="sxs-lookup"><span data-stu-id="306d5-2417">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="306d5-2418">提供 `Input` 函数是为了向后兼容，可能会影响性能。</span><span class="sxs-lookup"><span data-stu-id="306d5-2418">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="306d5-2419">对于非旧版应用程序，`My.Computer.FileSystem` 对象提供更好的性能。</span><span class="sxs-lookup"><span data-stu-id="306d5-2419">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="306d5-2420">有关详细信息，请参阅[使用 Visual Basic 进行文件访问](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/file-access)。</span><span class="sxs-lookup"><span data-stu-id="306d5-2420">For more information, see [File Access with Visual Basic](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/file-access).</span></span>  
  
 <span data-ttu-id="306d5-2421">使用 `Write``Input` 读取的数据通常写入到文件中。</span><span class="sxs-lookup"><span data-stu-id="306d5-2421">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="306d5-2422">仅将此函数用于在 `Input` 或 `Binary` 模式下打开的文件。</span><span class="sxs-lookup"><span data-stu-id="306d5-2422">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="306d5-2423">在从文件中读取时，请不要根据文件扩展名来决定文件的内容。</span><span class="sxs-lookup"><span data-stu-id="306d5-2423">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="306d5-2424">例如，名为 "Form1" 的文件可能不是 Visual Basic 2005 的源文件。</span><span class="sxs-lookup"><span data-stu-id="306d5-2424">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="306d5-2425">在读取时，不修改标准字符串或数值数据，而是将其分配给变量。</span><span class="sxs-lookup"><span data-stu-id="306d5-2425">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="306d5-2426">下表说明了如何处理其他输入数据。</span><span class="sxs-lookup"><span data-stu-id="306d5-2426">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="306d5-2427">数据</span><span class="sxs-lookup"><span data-stu-id="306d5-2427">Data</span></span>|<span data-ttu-id="306d5-2428">赋给变量的值</span><span class="sxs-lookup"><span data-stu-id="306d5-2428">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="306d5-2429">分隔逗号或空白行</span><span class="sxs-lookup"><span data-stu-id="306d5-2429">Delimiting comma or blank line</span></span>|<span data-ttu-id="306d5-2430">空</span><span class="sxs-lookup"><span data-stu-id="306d5-2430">Empty</span></span>|  
|<span data-ttu-id="306d5-2431">#NULL#</span><span class="sxs-lookup"><span data-stu-id="306d5-2431">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="306d5-2432">#TRUE # 或 #FALSE#</span><span class="sxs-lookup"><span data-stu-id="306d5-2432">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="306d5-2433">`True` 或 `False`</span><span class="sxs-lookup"><span data-stu-id="306d5-2433">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="306d5-2434">表达式所表示的日期和/或时间</span><span class="sxs-lookup"><span data-stu-id="306d5-2434">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="306d5-2435">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="306d5-2435">#ERROR `errornumber`#</span></span>|<span data-ttu-id="306d5-2436">`errornumber` （变量是标记为错误的对象）</span><span class="sxs-lookup"><span data-stu-id="306d5-2436">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="306d5-2437">如果在您输入数据项时到达该文件的末尾，则输入将停止并发生错误。</span><span class="sxs-lookup"><span data-stu-id="306d5-2437">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="306d5-2438">`Input` 函数未本地化。</span><span class="sxs-lookup"><span data-stu-id="306d5-2438">The `Input` function is not localized.</span></span> <span data-ttu-id="306d5-2439">例如，在德语版本中，如果输入3、14159，则它仅返回3，因为逗号被视为变量分隔符，而不是小数点。</span><span class="sxs-lookup"><span data-stu-id="306d5-2439">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="306d5-2440">使用 `Input` 函数从文件读取需要从 `FileIOPermissionAccess` 枚举进行 `Read` 访问。</span><span class="sxs-lookup"><span data-stu-id="306d5-2440">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="306d5-2441">有关详细信息，请参阅 <xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="306d5-2441">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="306d5-2442">此示例使用 `Input` 函数将文件中的数据读入两个变量。</span><span class="sxs-lookup"><span data-stu-id="306d5-2442">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="306d5-2443">此示例假定 `TestFile` 是使用 `Write` 函数向其写入多行数据的文件，其中每行都包含一个以引号表示的字符串和一个用逗号分隔的数字，例如：（"Hello"，234）。</span><span class="sxs-lookup"><span data-stu-id="306d5-2443">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="306d5-2444">文件模式无效。</span><span class="sxs-lookup"><span data-stu-id="306d5-2444">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files"><span data-ttu-id="306d5-2445">如何：在 Visual Basic 中向文件内写入文本</span><span class="sxs-lookup"><span data-stu-id="306d5-2445">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/file-access"><span data-ttu-id="306d5-2446">使用 Visual Basic 访问文件</span><span class="sxs-lookup"><span data-stu-id="306d5-2446">File Access with Visual Basic</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter"><span data-ttu-id="306d5-2447">如何：使用 Streamwriter （Visual Basic）将文本写入文件</span><span class="sxs-lookup"><span data-stu-id="306d5-2447">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref float Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Input(int32 FileNumber, float32&amp; Value) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Single@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, float % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int * single -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, float32&amp; Value) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Single" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="306d5-2448">必需。</span><span class="sxs-lookup"><span data-stu-id="306d5-2448">Required.</span></span> <span data-ttu-id="306d5-2449">任何有效文件数。</span><span class="sxs-lookup"><span data-stu-id="306d5-2449">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="306d5-2450">必需。</span><span class="sxs-lookup"><span data-stu-id="306d5-2450">Required.</span></span> <span data-ttu-id="306d5-2451">被赋以从文件中读取的值的变量不能是数组或对象变量。</span><span class="sxs-lookup"><span data-stu-id="306d5-2451">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="306d5-2452">读取打开的顺序文件中的数据，并将这些数据赋值给变量。</span><span class="sxs-lookup"><span data-stu-id="306d5-2452">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="306d5-2453">提供 `Input` 函数是为了向后兼容，可能会影响性能。</span><span class="sxs-lookup"><span data-stu-id="306d5-2453">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="306d5-2454">对于非旧版应用程序，`My.Computer.FileSystem` 对象提供更好的性能。</span><span class="sxs-lookup"><span data-stu-id="306d5-2454">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="306d5-2455">有关详细信息，请参阅[使用 Visual Basic 进行文件访问](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/file-access)。</span><span class="sxs-lookup"><span data-stu-id="306d5-2455">For more information, see [File Access with Visual Basic](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/file-access).</span></span>  
  
 <span data-ttu-id="306d5-2456">使用 `Write``Input` 读取的数据通常写入到文件中。</span><span class="sxs-lookup"><span data-stu-id="306d5-2456">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="306d5-2457">仅将此函数用于在 `Input` 或 `Binary` 模式下打开的文件。</span><span class="sxs-lookup"><span data-stu-id="306d5-2457">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="306d5-2458">在从文件中读取时，请不要根据文件扩展名来决定文件的内容。</span><span class="sxs-lookup"><span data-stu-id="306d5-2458">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="306d5-2459">例如，名为 "Form1" 的文件可能不是 Visual Basic 2005 的源文件。</span><span class="sxs-lookup"><span data-stu-id="306d5-2459">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="306d5-2460">在读取时，不修改标准字符串或数值数据，而是将其分配给变量。</span><span class="sxs-lookup"><span data-stu-id="306d5-2460">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="306d5-2461">下表说明了如何处理其他输入数据。</span><span class="sxs-lookup"><span data-stu-id="306d5-2461">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="306d5-2462">数据</span><span class="sxs-lookup"><span data-stu-id="306d5-2462">Data</span></span>|<span data-ttu-id="306d5-2463">赋给变量的值</span><span class="sxs-lookup"><span data-stu-id="306d5-2463">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="306d5-2464">分隔逗号或空白行</span><span class="sxs-lookup"><span data-stu-id="306d5-2464">Delimiting comma or blank line</span></span>|<span data-ttu-id="306d5-2465">空</span><span class="sxs-lookup"><span data-stu-id="306d5-2465">Empty</span></span>|  
|<span data-ttu-id="306d5-2466">#NULL#</span><span class="sxs-lookup"><span data-stu-id="306d5-2466">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="306d5-2467">#TRUE # 或 #FALSE#</span><span class="sxs-lookup"><span data-stu-id="306d5-2467">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="306d5-2468">`True` 或 `False`</span><span class="sxs-lookup"><span data-stu-id="306d5-2468">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="306d5-2469">表达式所表示的日期和/或时间</span><span class="sxs-lookup"><span data-stu-id="306d5-2469">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="306d5-2470">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="306d5-2470">#ERROR `errornumber`#</span></span>|<span data-ttu-id="306d5-2471">`errornumber` （变量是标记为错误的对象）</span><span class="sxs-lookup"><span data-stu-id="306d5-2471">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="306d5-2472">如果在您输入数据项时到达该文件的末尾，则输入将停止并发生错误。</span><span class="sxs-lookup"><span data-stu-id="306d5-2472">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="306d5-2473">`Input` 函数未本地化。</span><span class="sxs-lookup"><span data-stu-id="306d5-2473">The `Input` function is not localized.</span></span> <span data-ttu-id="306d5-2474">例如，在德语版本中，如果输入3、14159，则它仅返回3，因为逗号被视为变量分隔符，而不是小数点。</span><span class="sxs-lookup"><span data-stu-id="306d5-2474">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="306d5-2475">使用 `Input` 函数从文件读取需要从 `FileIOPermissionAccess` 枚举进行 `Read` 访问。</span><span class="sxs-lookup"><span data-stu-id="306d5-2475">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="306d5-2476">有关详细信息，请参阅 <xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="306d5-2476">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="306d5-2477">此示例使用 `Input` 函数将文件中的数据读入两个变量。</span><span class="sxs-lookup"><span data-stu-id="306d5-2477">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="306d5-2478">此示例假定 `TestFile` 是使用 `Write` 函数向其写入多行数据的文件，其中每行都包含一个以引号表示的字符串和一个用逗号分隔的数字，例如：（"Hello"，234）。</span><span class="sxs-lookup"><span data-stu-id="306d5-2478">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="306d5-2479">文件模式无效。</span><span class="sxs-lookup"><span data-stu-id="306d5-2479">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files"><span data-ttu-id="306d5-2480">如何：在 Visual Basic 中向文件内写入文本</span><span class="sxs-lookup"><span data-stu-id="306d5-2480">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/file-access"><span data-ttu-id="306d5-2481">使用 Visual Basic 访问文件</span><span class="sxs-lookup"><span data-stu-id="306d5-2481">File Access with Visual Basic</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter"><span data-ttu-id="306d5-2482">如何：使用 Streamwriter （Visual Basic）将文本写入文件</span><span class="sxs-lookup"><span data-stu-id="306d5-2482">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref string Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Input(int32 FileNumber, string&amp; Value) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.String@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, System::String ^ % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int * string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, string&amp; Value) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.String" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="306d5-2483">必需。</span><span class="sxs-lookup"><span data-stu-id="306d5-2483">Required.</span></span> <span data-ttu-id="306d5-2484">任何有效文件数。</span><span class="sxs-lookup"><span data-stu-id="306d5-2484">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="306d5-2485">必需。</span><span class="sxs-lookup"><span data-stu-id="306d5-2485">Required.</span></span> <span data-ttu-id="306d5-2486">被赋以从文件中读取的值的变量不能是数组或对象变量。</span><span class="sxs-lookup"><span data-stu-id="306d5-2486">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="306d5-2487">读取打开的顺序文件中的数据，并将这些数据赋值给变量。</span><span class="sxs-lookup"><span data-stu-id="306d5-2487">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="306d5-2488">提供 `Input` 函数是为了向后兼容，可能会影响性能。</span><span class="sxs-lookup"><span data-stu-id="306d5-2488">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="306d5-2489">对于非旧版应用程序，`My.Computer.FileSystem` 对象提供更好的性能。</span><span class="sxs-lookup"><span data-stu-id="306d5-2489">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="306d5-2490">有关详细信息，请参阅[使用 Visual Basic 进行文件访问](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/file-access)。</span><span class="sxs-lookup"><span data-stu-id="306d5-2490">For more information, see [File Access with Visual Basic](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/file-access).</span></span>  
  
 <span data-ttu-id="306d5-2491">使用 `Write``Input` 读取的数据通常写入到文件中。</span><span class="sxs-lookup"><span data-stu-id="306d5-2491">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="306d5-2492">仅将此函数用于在 `Input` 或 `Binary` 模式下打开的文件。</span><span class="sxs-lookup"><span data-stu-id="306d5-2492">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="306d5-2493">在从文件中读取时，请不要根据文件扩展名来决定文件的内容。</span><span class="sxs-lookup"><span data-stu-id="306d5-2493">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="306d5-2494">例如，名为 "Form1" 的文件可能不是 Visual Basic 2005 的源文件。</span><span class="sxs-lookup"><span data-stu-id="306d5-2494">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="306d5-2495">在读取时，不修改标准字符串或数值数据，而是将其分配给变量。</span><span class="sxs-lookup"><span data-stu-id="306d5-2495">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="306d5-2496">下表说明了如何处理其他输入数据。</span><span class="sxs-lookup"><span data-stu-id="306d5-2496">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="306d5-2497">数据</span><span class="sxs-lookup"><span data-stu-id="306d5-2497">Data</span></span>|<span data-ttu-id="306d5-2498">赋给变量的值</span><span class="sxs-lookup"><span data-stu-id="306d5-2498">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="306d5-2499">分隔逗号或空白行</span><span class="sxs-lookup"><span data-stu-id="306d5-2499">Delimiting comma or blank line</span></span>|<span data-ttu-id="306d5-2500">空</span><span class="sxs-lookup"><span data-stu-id="306d5-2500">Empty</span></span>|  
|<span data-ttu-id="306d5-2501">#NULL#</span><span class="sxs-lookup"><span data-stu-id="306d5-2501">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="306d5-2502">#TRUE # 或 #FALSE#</span><span class="sxs-lookup"><span data-stu-id="306d5-2502">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="306d5-2503">`True` 或 `False`</span><span class="sxs-lookup"><span data-stu-id="306d5-2503">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="306d5-2504">表达式所表示的日期和/或时间</span><span class="sxs-lookup"><span data-stu-id="306d5-2504">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="306d5-2505">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="306d5-2505">#ERROR `errornumber`#</span></span>|<span data-ttu-id="306d5-2506">`errornumber` （变量是标记为错误的对象）</span><span class="sxs-lookup"><span data-stu-id="306d5-2506">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="306d5-2507">如果在您输入数据项时到达该文件的末尾，则输入将停止并发生错误。</span><span class="sxs-lookup"><span data-stu-id="306d5-2507">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="306d5-2508">`Input` 函数未本地化。</span><span class="sxs-lookup"><span data-stu-id="306d5-2508">The `Input` function is not localized.</span></span> <span data-ttu-id="306d5-2509">例如，在德语版本中，如果输入3、14159，则它仅返回3，因为逗号被视为变量分隔符，而不是小数点。</span><span class="sxs-lookup"><span data-stu-id="306d5-2509">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="306d5-2510">使用 `Input` 函数从文件读取需要从 `FileIOPermissionAccess` 枚举进行 `Read` 访问。</span><span class="sxs-lookup"><span data-stu-id="306d5-2510">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="306d5-2511">有关详细信息，请参阅 <xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="306d5-2511">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="306d5-2512">此示例使用 `Input` 函数将文件中的数据读入两个变量。</span><span class="sxs-lookup"><span data-stu-id="306d5-2512">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="306d5-2513">此示例假定 `TestFile` 是使用 `Write` 函数向其写入多行数据的文件，其中每行都包含一个以引号表示的字符串和一个用逗号分隔的数字，例如：（"Hello"，234）。</span><span class="sxs-lookup"><span data-stu-id="306d5-2513">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="306d5-2514">文件模式无效。</span><span class="sxs-lookup"><span data-stu-id="306d5-2514">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files"><span data-ttu-id="306d5-2515">如何：在 Visual Basic 中向文件内写入文本</span><span class="sxs-lookup"><span data-stu-id="306d5-2515">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/file-access"><span data-ttu-id="306d5-2516">使用 Visual Basic 访问文件</span><span class="sxs-lookup"><span data-stu-id="306d5-2516">File Access with Visual Basic</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter"><span data-ttu-id="306d5-2517">如何：使用 Streamwriter （Visual Basic）将文本写入文件</span><span class="sxs-lookup"><span data-stu-id="306d5-2517">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="InputString">
      <MemberSignature Language="C#" Value="public static string InputString (int FileNumber, int CharCount);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string InputString(int32 FileNumber, int32 CharCount) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function InputString (FileNumber As Integer, CharCount As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ InputString(int FileNumber, int CharCount);" />
      <MemberSignature Language="F#" Value="static member InputString : int * int -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.InputString (FileNumber, CharCount)" />
      <MemberSignature Language="ILAsm" Value=".method public static string InputString(int32 FileNumber, int32 CharCount) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="CharCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="306d5-2518">必需。</span><span class="sxs-lookup"><span data-stu-id="306d5-2518">Required.</span></span> <span data-ttu-id="306d5-2519">任何有效文件数。</span><span class="sxs-lookup"><span data-stu-id="306d5-2519">Any valid file number.</span></span></param>
        <param name="CharCount"><span data-ttu-id="306d5-2520">必需。</span><span class="sxs-lookup"><span data-stu-id="306d5-2520">Required.</span></span> <span data-ttu-id="306d5-2521">用于指定要读取的字符数的任何有效数值表达式。</span><span class="sxs-lookup"><span data-stu-id="306d5-2521">Any valid numeric expression specifying the number of characters to read.</span></span></param>
        <summary><span data-ttu-id="306d5-2522">返回 <see langword="String" /> 值，该值包含以 <see langword="Input" /> 或 <see langword="Binary" /> 模式打开的文件中的字符。</span><span class="sxs-lookup"><span data-stu-id="306d5-2522">Returns <see langword="String" /> value that contains characters from a file opened in <see langword="Input" /> or <see langword="Binary" /> mode.</span></span> <span data-ttu-id="306d5-2523">相比 <see langword="InputString" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span><span class="sxs-lookup"><span data-stu-id="306d5-2523">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="InputString" />.</span></span> <span data-ttu-id="306d5-2524">有关详细信息，请参阅 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="306d5-2524">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <returns><span data-ttu-id="306d5-2525">一个字符串，该字符串包含以 <see langword="Input" /> 或 <see langword="Binary" /> 模式打开的文件中的字符。</span><span class="sxs-lookup"><span data-stu-id="306d5-2525">A string that contains characters from a file opened in <see langword="Input" /> or <see langword="Binary" /> mode.</span></span> <span data-ttu-id="306d5-2526">相比 <see langword="InputString" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span><span class="sxs-lookup"><span data-stu-id="306d5-2526">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="InputString" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="306d5-2527">提供 `InputString` 函数是为了向后兼容，可能会影响性能。</span><span class="sxs-lookup"><span data-stu-id="306d5-2527">The `InputString` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="306d5-2528">对于非旧版应用程序，`My.Computer.FileSystem` 对象提供更好的性能。</span><span class="sxs-lookup"><span data-stu-id="306d5-2528">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="306d5-2529">有关详细信息，请参阅[使用 Visual Basic 进行文件访问](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/file-access)。</span><span class="sxs-lookup"><span data-stu-id="306d5-2529">For more information, see [File Access with Visual Basic](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/file-access).</span></span>  
  
 <span data-ttu-id="306d5-2530">使用 `InputString` 函数读取的数据通常使用 `Print` 或 `FilePut`写入文件。</span><span class="sxs-lookup"><span data-stu-id="306d5-2530">Data read with the `InputString` function is usually written to a file by using `Print` or `FilePut`.</span></span> <span data-ttu-id="306d5-2531">仅将此函数用于在 `Input` 或 `Binary` 模式下打开的文件。</span><span class="sxs-lookup"><span data-stu-id="306d5-2531">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
 <span data-ttu-id="306d5-2532">与 `Input` 函数不同，`InputString` 函数返回它读取的所有字符。</span><span class="sxs-lookup"><span data-stu-id="306d5-2532">Unlike the `Input` function, the `InputString` function returns all the characters it reads.</span></span> <span data-ttu-id="306d5-2533">这包括逗号、回车符、换行符、引号和前导空格。</span><span class="sxs-lookup"><span data-stu-id="306d5-2533">This includes commas, carriage returns, line feeds, quotation marks, and leading spaces.</span></span>  
  
 <span data-ttu-id="306d5-2534">使用打开的文件进行 `Binary` 访问后，尝试通过使用 `InputString` 函数在文件中进行读取，直到 `EOF` 返回 `True` 会生成错误。</span><span class="sxs-lookup"><span data-stu-id="306d5-2534">With files opened for `Binary` access, an attempt to read through the file by using the `InputString` function until `EOF` returns `True` generates an error.</span></span> <span data-ttu-id="306d5-2535">使用 `InputString`读取二进制文件时，使用 `LOF` 和 `Loc` 函数，而不是 `EOF`，或者使用 `FileGet` 函数。`EOF`</span><span class="sxs-lookup"><span data-stu-id="306d5-2535">Use the `LOF` and `Loc` functions instead of `EOF` when you read binary files by using `InputString`, or use `FileGet` when you use the `EOF` function.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="306d5-2536">在从文件中读取时，不要根据文件扩展名对文件内容做出安全决策。</span><span class="sxs-lookup"><span data-stu-id="306d5-2536">When reading from files, do not make security decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="306d5-2537">例如，名为 "Form1" 的文件可能不是 Visual Basic 的源文件。</span><span class="sxs-lookup"><span data-stu-id="306d5-2537">For example, a file named Form1.vb may not be a Visual Basic source file.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="306d5-2538">此示例使用 `InputString` 函数每次从文件读取一个字符，然后将其打印到 "`Output`" 窗口。</span><span class="sxs-lookup"><span data-stu-id="306d5-2538">This example uses the `InputString` function to read one character at a time from a file and print it to the `Output` window.</span></span> <span data-ttu-id="306d5-2539">此示例假定 `MyFile` 是包含几行示例数据的文本文件。</span><span class="sxs-lookup"><span data-stu-id="306d5-2539">This example assumes that `MyFile` is a text file that has several lines of sample data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="306d5-2540"><paramref name="FileNumber" /> 不存在。</span><span class="sxs-lookup"><span data-stu-id="306d5-2540"><paramref name="FileNumber" /> does not exist.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="306d5-2541"><paramref name="CharCount" />&lt; 0 或 &gt; 214。</span><span class="sxs-lookup"><span data-stu-id="306d5-2541"><paramref name="CharCount" /> &lt; 0 or &gt; 214.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Input" />
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/file-access"><span data-ttu-id="306d5-2542">使用 Visual Basic 访问文件</span><span class="sxs-lookup"><span data-stu-id="306d5-2542">File Access with Visual Basic</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter"><span data-ttu-id="306d5-2543">如何：使用 Streamwriter （Visual Basic）将文本写入文件</span><span class="sxs-lookup"><span data-stu-id="306d5-2543">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files"><span data-ttu-id="306d5-2544">如何：在 Visual Basic 中向文件内写入文本</span><span class="sxs-lookup"><span data-stu-id="306d5-2544">How to: Write Text to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Kill">
      <MemberSignature Language="C#" Value="public static void Kill (string PathName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Kill(string PathName) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Kill(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Kill (PathName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Kill(System::String ^ PathName);" />
      <MemberSignature Language="F#" Value="static member Kill : string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Kill PathName" />
      <MemberSignature Language="ILAsm" Value=".method public static void Kill(string PathName) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="PathName"><span data-ttu-id="306d5-2545">必需。</span><span class="sxs-lookup"><span data-stu-id="306d5-2545">Required.</span></span> <span data-ttu-id="306d5-2546">指定要删除的一个或多个文件名的字符串表达式。</span><span class="sxs-lookup"><span data-stu-id="306d5-2546">A string expression that specifies one or more file names to be deleted.</span></span> <span data-ttu-id="306d5-2547"><paramref name="PathName" /> 可以包含驱动器和目录或文件夹。</span><span class="sxs-lookup"><span data-stu-id="306d5-2547"><paramref name="PathName" /> can include the directory or folder, and the drive.</span></span></param>
        <summary><span data-ttu-id="306d5-2548">从磁盘中删除文件。</span><span class="sxs-lookup"><span data-stu-id="306d5-2548">Deletes files from a disk.</span></span> <span data-ttu-id="306d5-2549">相比 <see langword="Kill" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span><span class="sxs-lookup"><span data-stu-id="306d5-2549">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Kill" />.</span></span> <span data-ttu-id="306d5-2550">有关详细信息，请参阅 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="306d5-2550">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> .</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="306d5-2551">`Kill` 支持使用多字符（`*`）和单字符（`?`）通配符来指定多个文件。</span><span class="sxs-lookup"><span data-stu-id="306d5-2551">`Kill` supports the use of multiple-character (`*`) and single-character (`?`) wildcards to specify multiple files.</span></span>  
  
 <span data-ttu-id="306d5-2552">**安全说明**为了执行，`Kill` 函数要求向执行代码授予 `Read` 和 `PathDiscovery` 的 <xref:System.Security.Permissions.FileIOPermission> 标志。</span><span class="sxs-lookup"><span data-stu-id="306d5-2552">**Security Note** In order to execute, the `Kill` function requires `Read` and `PathDiscovery` flags of <xref:System.Security.Permissions.FileIOPermission> to be granted to the executing code.</span></span> <span data-ttu-id="306d5-2553">有关详细信息，请参阅 <xref:System.Security.SecurityException>[代码访问权限](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)</span><span class="sxs-lookup"><span data-stu-id="306d5-2553">For more information, see <xref:System.Security.SecurityException>[Code Access Permissions](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="306d5-2554">此示例使用 `Kill` 函数删除磁盘中的文件。</span><span class="sxs-lookup"><span data-stu-id="306d5-2554">This example uses the `Kill` function to delete a file from a disk.</span></span>  
  
 [!code-vb[VbVbalrCatRef#60](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#60)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="306d5-2555">目标文件打开。</span><span class="sxs-lookup"><span data-stu-id="306d5-2555">Target file(s) open.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="306d5-2556">目标文件未找到。</span><span class="sxs-lookup"><span data-stu-id="306d5-2556">Target file(s) not found.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="306d5-2557">权限被拒绝。</span><span class="sxs-lookup"><span data-stu-id="306d5-2557">Permission denied.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
      </Docs>
    </Member>
    <Member MemberName="LineInput">
      <MemberSignature Language="C#" Value="public static string LineInput (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string LineInput(int32 FileNumber) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.LineInput(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function LineInput (FileNumber As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ LineInput(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member LineInput : int -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.LineInput FileNumber" />
      <MemberSignature Language="ILAsm" Value=".method public static string LineInput(int32 FileNumber) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="306d5-2558">必需。</span><span class="sxs-lookup"><span data-stu-id="306d5-2558">Required.</span></span> <span data-ttu-id="306d5-2559">任何有效文件数。</span><span class="sxs-lookup"><span data-stu-id="306d5-2559">Any valid file number.</span></span></param>
        <summary><span data-ttu-id="306d5-2560">从打开的顺序文件中读取一行并将其赋值给一个 <see langword="String" /> 变量。</span><span class="sxs-lookup"><span data-stu-id="306d5-2560">Reads a single line from an open sequential file and assigns it to a <see langword="String" /> variable.</span></span></summary>
        <returns><span data-ttu-id="306d5-2561">从打开的顺序文件中读取一行并将其赋值给一个 <see langword="String" /> 变量。</span><span class="sxs-lookup"><span data-stu-id="306d5-2561">Reads a single line from an open sequential file and assigns it to a <see langword="String" /> variable.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="306d5-2562">提供 `LineInput` 函数是为了向后兼容，可能会影响性能。</span><span class="sxs-lookup"><span data-stu-id="306d5-2562">The `LineInput` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="306d5-2563">对于非旧版应用程序，`My.Computer.FileSystem` 对象提供更好的性能。</span><span class="sxs-lookup"><span data-stu-id="306d5-2563">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="306d5-2564">有关详细信息，请参阅[使用 Visual Basic 进行文件访问](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/file-access)。</span><span class="sxs-lookup"><span data-stu-id="306d5-2564">For more information, see [File Access with Visual Basic](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/file-access).</span></span>  
  
 <span data-ttu-id="306d5-2565">使用 `Print``LineInput` 读取的数据通常写入到文件中。</span><span class="sxs-lookup"><span data-stu-id="306d5-2565">Data read with `LineInput` is usually written to a file by using `Print`.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="306d5-2566">从文件中读取时，请不要根据文件扩展名来决定文件的内容。</span><span class="sxs-lookup"><span data-stu-id="306d5-2566">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="306d5-2567">例如，名为 "Form1" 的文件可能不是 Visual Basic 的源文件。</span><span class="sxs-lookup"><span data-stu-id="306d5-2567">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
 <span data-ttu-id="306d5-2568">`LineInput` 函数每次从一个文件读取一个字符，直到它遇到回车符（`Chr(13)`）或回车符/换行符（`Chr(13) + Chr(10)`）序列。</span><span class="sxs-lookup"><span data-stu-id="306d5-2568">The `LineInput` function reads from a file one character at a time until it encounters a carriage return (`Chr(13)`) or carriage return/line feed (`Chr(13) + Chr(10)`) sequence.</span></span> <span data-ttu-id="306d5-2569">将跳过回车符/换行符，而不是追加到字符串。</span><span class="sxs-lookup"><span data-stu-id="306d5-2569">Carriage return/line feed sequences are skipped instead of appended to the character string.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="306d5-2570">使用 `LineInput` 函数从文件读取需要从 <xref:System.Security.Permissions.FileIOPermissionAccess> 枚举进行 `Read` 访问。</span><span class="sxs-lookup"><span data-stu-id="306d5-2570">Reading from a file by using the `LineInput` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="306d5-2571">此示例使用 `LineInput` 函数读取顺序文件中的行，并将其分配给变量。</span><span class="sxs-lookup"><span data-stu-id="306d5-2571">This example uses the `LineInput` function to read a line from a sequential file and assign it to a variable.</span></span> <span data-ttu-id="306d5-2572">此示例假定 `TestFile` 是包含几行示例数据的文本文件。</span><span class="sxs-lookup"><span data-stu-id="306d5-2572">This example assumes that `TestFile` is a text file that has several lines of sample data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.EndOfStreamException"><span data-ttu-id="306d5-2573">到达文件末尾。</span><span class="sxs-lookup"><span data-stu-id="306d5-2573">End of file reached.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="306d5-2574"><paramref name="FileNumber" /> 不存在。</span><span class="sxs-lookup"><span data-stu-id="306d5-2574"><paramref name="FileNumber" /> does not exist.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Input" />
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/file-access"><span data-ttu-id="306d5-2575">使用 Visual Basic 访问文件</span><span class="sxs-lookup"><span data-stu-id="306d5-2575">File Access with Visual Basic</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter"><span data-ttu-id="306d5-2576">如何：使用 Streamwriter （Visual Basic）将文本写入文件</span><span class="sxs-lookup"><span data-stu-id="306d5-2576">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files"><span data-ttu-id="306d5-2577">如何：在 Visual Basic 中向文件内写入文本</span><span class="sxs-lookup"><span data-stu-id="306d5-2577">How to: Write Text to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Loc">
      <MemberSignature Language="C#" Value="public static long Loc (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 Loc(int32 FileNumber) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Loc (FileNumber As Integer) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Loc(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member Loc : int -&gt; int64" Usage="Microsoft.VisualBasic.FileSystem.Loc FileNumber" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Loc(int32 FileNumber) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="306d5-2578">必需。</span><span class="sxs-lookup"><span data-stu-id="306d5-2578">Required.</span></span> <span data-ttu-id="306d5-2579">任何有效的 <see langword="Integer" /> 文件号。</span><span class="sxs-lookup"><span data-stu-id="306d5-2579">Any valid <see langword="Integer" /> file number.</span></span></param>
        <summary><span data-ttu-id="306d5-2580">返回指定打开文件中当前读/写位置的值。</span><span class="sxs-lookup"><span data-stu-id="306d5-2580">Returns a value that specifies the current read/write position in an open file.</span></span></summary>
        <returns><span data-ttu-id="306d5-2581">打开文件中当前读/写位置。</span><span class="sxs-lookup"><span data-stu-id="306d5-2581">The current read/write position in an open file.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="306d5-2582">`Loc` 函数从零开始;使用它检索文件中的第一个字节将返回0。</span><span class="sxs-lookup"><span data-stu-id="306d5-2582">The `Loc` function is zero-based; using it to retrieve the first byte in a file will return 0.</span></span>  
  
 <span data-ttu-id="306d5-2583">提供 `Loc` 函数是为了向后兼容，可能会影响性能。</span><span class="sxs-lookup"><span data-stu-id="306d5-2583">The `Loc` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="306d5-2584">对于非旧版应用程序，`My.Computer.FileSystem` 对象提供更好的性能。</span><span class="sxs-lookup"><span data-stu-id="306d5-2584">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="306d5-2585">有关详细信息，请参阅[使用 Visual Basic 进行文件访问](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/file-access)。</span><span class="sxs-lookup"><span data-stu-id="306d5-2585">For more information, see [File Access with Visual Basic](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/file-access).</span></span>  
  
 <span data-ttu-id="306d5-2586">下面说明了每个文件访问模式的返回值：</span><span class="sxs-lookup"><span data-stu-id="306d5-2586">The following describes the return value for each file access mode:</span></span>  
  
|<span data-ttu-id="306d5-2587">模式</span><span class="sxs-lookup"><span data-stu-id="306d5-2587">Mode</span></span>|<span data-ttu-id="306d5-2588">返回值</span><span class="sxs-lookup"><span data-stu-id="306d5-2588">Return value</span></span>|  
|-|-|  
|`Random`|<span data-ttu-id="306d5-2589">读取或写入文件的最后一条记录的编号。</span><span class="sxs-lookup"><span data-stu-id="306d5-2589">Number of the last record read from or written to the file.</span></span>|  
|`Sequential`|<span data-ttu-id="306d5-2590">文件中的当前字节位置除以128。</span><span class="sxs-lookup"><span data-stu-id="306d5-2590">Current byte position in the file divided by 128.</span></span> <span data-ttu-id="306d5-2591">但是，不使用也不需要为顺序文件 `Loc` 返回的信息。</span><span class="sxs-lookup"><span data-stu-id="306d5-2591">However, information returned by `Loc` for sequential files is neither used nor required.</span></span>|  
|`Binary`|<span data-ttu-id="306d5-2592">上次读取或写入字节的位置。</span><span class="sxs-lookup"><span data-stu-id="306d5-2592">Position of the last byte read or written.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="306d5-2593">此示例使用 `Loc` 函数返回打开的文件中的当前读/写位置。</span><span class="sxs-lookup"><span data-stu-id="306d5-2593">This example uses the `Loc` function to return the current read/write position in an open file.</span></span> <span data-ttu-id="306d5-2594">此示例假定 `MyFile` 是包含几行示例数据的文本文件。</span><span class="sxs-lookup"><span data-stu-id="306d5-2594">This example assumes that `MyFile` is a text file that has several lines of sample data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#17](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#17)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="306d5-2595">文件模式无效。</span><span class="sxs-lookup"><span data-stu-id="306d5-2595">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.EOF(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.LOF(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Lock">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="306d5-2596">控制其他进程对使用 <see langword="Open" /> 函数打开的文件的全部或部分的访问。</span><span class="sxs-lookup"><span data-stu-id="306d5-2596">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span></span> <span data-ttu-id="306d5-2597">与 <see langword="My" /> 和 <see langword="Lock" /> 相比，<see langword="Unlock" /> 功能在文件 I/O 操作方面可为您提供更高的效率和更好的性能。</span><span class="sxs-lookup"><span data-stu-id="306d5-2597">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span></span> <span data-ttu-id="306d5-2598">有关详细信息，请参阅 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="306d5-2598">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Lock">
      <MemberSignature Language="C#" Value="public static void Lock (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Lock(int32 FileNumber) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Lock(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Lock (FileNumber As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Lock(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member Lock : int -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Lock FileNumber" />
      <MemberSignature Language="ILAsm" Value=".method public static void Lock(int32 FileNumber) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="306d5-2599">必需。</span><span class="sxs-lookup"><span data-stu-id="306d5-2599">Required.</span></span> <span data-ttu-id="306d5-2600">任何有效文件数。</span><span class="sxs-lookup"><span data-stu-id="306d5-2600">Any valid file number.</span></span></param>
        <summary><span data-ttu-id="306d5-2601">控制其他进程对使用 <see langword="Open" /> 函数打开的文件的全部或部分的访问。</span><span class="sxs-lookup"><span data-stu-id="306d5-2601">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span></span> <span data-ttu-id="306d5-2602">与 <see langword="My" /> 和 <see langword="Lock" /> 相比，<see langword="Unlock" /> 功能在文件 I/O 操作方面可为您提供更高的效率和更好的性能。</span><span class="sxs-lookup"><span data-stu-id="306d5-2602">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span></span> <span data-ttu-id="306d5-2603">有关详细信息，请参阅 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="306d5-2603">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="306d5-2604">`Lock` 和 `Unlock` 函数在多个进程可能需要访问同一文件的环境中使用。</span><span class="sxs-lookup"><span data-stu-id="306d5-2604">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="306d5-2605">`Lock` 和 `Unlock` 函数始终成对使用。</span><span class="sxs-lookup"><span data-stu-id="306d5-2605">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="306d5-2606">`Lock` 和 `Unlock` 的参数必须完全相同。</span><span class="sxs-lookup"><span data-stu-id="306d5-2606">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="306d5-2607">如果未提供 `Record`或 `FromRecord` 和 `ToRecord`，则锁定将用于整个文件。</span><span class="sxs-lookup"><span data-stu-id="306d5-2607">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="306d5-2608">如果指定 "单独 `Record`"，则将锁定/解锁单个记录。</span><span class="sxs-lookup"><span data-stu-id="306d5-2608">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="306d5-2609">如果文件已打开以进行顺序输入或输出，`Lock` 和 `Unlock` 会影响整个文件，而不考虑 `FromRecord` 和`ToRecord`指定的范围。</span><span class="sxs-lookup"><span data-stu-id="306d5-2609">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="306d5-2610">此示例演示如何使用 `Lock` 和 `Unlock` 函数。</span><span class="sxs-lookup"><span data-stu-id="306d5-2610">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="306d5-2611">此示例假定 `People.txt` 是包含结构 `Person`的记录的文件。</span><span class="sxs-lookup"><span data-stu-id="306d5-2611">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="306d5-2612">文件模式无效。</span><span class="sxs-lookup"><span data-stu-id="306d5-2612">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/file-access"><span data-ttu-id="306d5-2613">使用 Visual Basic 访问文件</span><span class="sxs-lookup"><span data-stu-id="306d5-2613">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Lock">
      <MemberSignature Language="C#" Value="public static void Lock (int FileNumber, long Record);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Lock(int32 FileNumber, int64 Record) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Lock(System.Int32,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Lock (FileNumber As Integer, Record As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Lock(int FileNumber, long Record);" />
      <MemberSignature Language="F#" Value="static member Lock : int * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Lock (FileNumber, Record)" />
      <MemberSignature Language="ILAsm" Value=".method public static void Lock(int32 FileNumber, int64 Record) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Record" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="306d5-2614">必需。</span><span class="sxs-lookup"><span data-stu-id="306d5-2614">Required.</span></span> <span data-ttu-id="306d5-2615">任何有效文件数。</span><span class="sxs-lookup"><span data-stu-id="306d5-2615">Any valid file number.</span></span></param>
        <param name="Record"><span data-ttu-id="306d5-2616">可选。</span><span class="sxs-lookup"><span data-stu-id="306d5-2616">Optional.</span></span> <span data-ttu-id="306d5-2617">唯一要锁定或取消锁定的记录号或字节数。</span><span class="sxs-lookup"><span data-stu-id="306d5-2617">Number of the only record or byte to lock or unlock.</span></span></param>
        <summary><span data-ttu-id="306d5-2618">控制其他进程对使用 <see langword="Open" /> 函数打开的文件的全部或部分的访问。</span><span class="sxs-lookup"><span data-stu-id="306d5-2618">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span></span> <span data-ttu-id="306d5-2619">与 <see langword="My" /> 和 <see langword="Lock" /> 相比，<see langword="Unlock" /> 功能在文件 I/O 操作方面可为您提供更高的效率和更好的性能。</span><span class="sxs-lookup"><span data-stu-id="306d5-2619">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span></span> <span data-ttu-id="306d5-2620">有关详细信息，请参阅 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="306d5-2620">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="306d5-2621">`Lock` 和 `Unlock` 函数在多个进程可能需要访问同一文件的环境中使用。</span><span class="sxs-lookup"><span data-stu-id="306d5-2621">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="306d5-2622">`Lock` 和 `Unlock` 函数始终成对使用。</span><span class="sxs-lookup"><span data-stu-id="306d5-2622">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="306d5-2623">`Lock` 和 `Unlock` 的参数必须完全相同。</span><span class="sxs-lookup"><span data-stu-id="306d5-2623">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="306d5-2624">如果未提供 `Record`或 `FromRecord` 和 `ToRecord`，则锁定将用于整个文件。</span><span class="sxs-lookup"><span data-stu-id="306d5-2624">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="306d5-2625">如果指定 "单独 `Record`"，则将锁定/解锁单个记录。</span><span class="sxs-lookup"><span data-stu-id="306d5-2625">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="306d5-2626">如果文件已打开以进行顺序输入或输出，`Lock` 和 `Unlock` 会影响整个文件，而不考虑 `FromRecord` 和`ToRecord`指定的范围。</span><span class="sxs-lookup"><span data-stu-id="306d5-2626">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="306d5-2627">此示例演示如何使用 `Lock` 和 `Unlock` 函数。</span><span class="sxs-lookup"><span data-stu-id="306d5-2627">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="306d5-2628">此示例假定 `People.txt` 是包含结构 `Person`的记录的文件。</span><span class="sxs-lookup"><span data-stu-id="306d5-2628">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="306d5-2629">文件模式无效。</span><span class="sxs-lookup"><span data-stu-id="306d5-2629">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/file-access"><span data-ttu-id="306d5-2630">使用 Visual Basic 访问文件</span><span class="sxs-lookup"><span data-stu-id="306d5-2630">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Lock">
      <MemberSignature Language="C#" Value="public static void Lock (int FileNumber, long FromRecord, long ToRecord);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Lock(int32 FileNumber, int64 FromRecord, int64 ToRecord) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Lock(System.Int32,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Lock (FileNumber As Integer, FromRecord As Long, ToRecord As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Lock(int FileNumber, long FromRecord, long ToRecord);" />
      <MemberSignature Language="F#" Value="static member Lock : int * int64 * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Lock (FileNumber, FromRecord, ToRecord)" />
      <MemberSignature Language="ILAsm" Value=".method public static void Lock(int32 FileNumber, int64 FromRecord, int64 ToRecord) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="FromRecord" Type="System.Int64" />
        <Parameter Name="ToRecord" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="306d5-2631">必需。</span><span class="sxs-lookup"><span data-stu-id="306d5-2631">Required.</span></span> <span data-ttu-id="306d5-2632">任何有效文件数。</span><span class="sxs-lookup"><span data-stu-id="306d5-2632">Any valid file number.</span></span></param>
        <param name="FromRecord"><span data-ttu-id="306d5-2633">可选。</span><span class="sxs-lookup"><span data-stu-id="306d5-2633">Optional.</span></span> <span data-ttu-id="306d5-2634">第一个要锁定或取消锁定的记录号或字节数。</span><span class="sxs-lookup"><span data-stu-id="306d5-2634">Number of the first record or byte to lock or unlock.</span></span></param>
        <param name="ToRecord"><span data-ttu-id="306d5-2635">可选。</span><span class="sxs-lookup"><span data-stu-id="306d5-2635">Optional.</span></span> <span data-ttu-id="306d5-2636">最后一个要锁定或取消锁定的记录号或字节数。</span><span class="sxs-lookup"><span data-stu-id="306d5-2636">Number of the last record or byte to lock or unlock.</span></span></param>
        <summary><span data-ttu-id="306d5-2637">控制其他进程对使用 <see langword="Open" /> 函数打开的文件的全部或部分的访问。</span><span class="sxs-lookup"><span data-stu-id="306d5-2637">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span></span> <span data-ttu-id="306d5-2638">与 <see langword="My" /> 和 <see langword="Lock" /> 相比，<see langword="Unlock" /> 功能在文件 I/O 操作方面可为您提供更高的效率和更好的性能。</span><span class="sxs-lookup"><span data-stu-id="306d5-2638">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span></span> <span data-ttu-id="306d5-2639">有关详细信息，请参阅 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="306d5-2639">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="306d5-2640">`Lock` 和 `Unlock` 函数在多个进程可能需要访问同一文件的环境中使用。</span><span class="sxs-lookup"><span data-stu-id="306d5-2640">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="306d5-2641">`Lock` 和 `Unlock` 函数始终成对使用。</span><span class="sxs-lookup"><span data-stu-id="306d5-2641">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="306d5-2642">`Lock` 和 `Unlock` 的参数必须完全相同。</span><span class="sxs-lookup"><span data-stu-id="306d5-2642">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="306d5-2643">如果未提供 `Record`或 `FromRecord` 和 `ToRecord`，则锁定将用于整个文件。</span><span class="sxs-lookup"><span data-stu-id="306d5-2643">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="306d5-2644">如果指定 "单独 `Record`"，则将锁定/解锁单个记录。</span><span class="sxs-lookup"><span data-stu-id="306d5-2644">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="306d5-2645">如果文件已打开以进行顺序输入或输出，`Lock` 和 `Unlock` 会影响整个文件，而不考虑 `FromRecord` 和`ToRecord`指定的范围。</span><span class="sxs-lookup"><span data-stu-id="306d5-2645">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="306d5-2646">此示例演示如何使用 `Lock` 和 `Unlock` 函数。</span><span class="sxs-lookup"><span data-stu-id="306d5-2646">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="306d5-2647">此示例假定 `People.txt` 是包含结构 `Person`的记录的文件。</span><span class="sxs-lookup"><span data-stu-id="306d5-2647">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="306d5-2648">文件模式无效。</span><span class="sxs-lookup"><span data-stu-id="306d5-2648">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/file-access"><span data-ttu-id="306d5-2649">使用 Visual Basic 访问文件</span><span class="sxs-lookup"><span data-stu-id="306d5-2649">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="LOF">
      <MemberSignature Language="C#" Value="public static long LOF (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 LOF(int32 FileNumber) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.LOF(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function LOF (FileNumber As Integer) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long LOF(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member LOF : int -&gt; int64" Usage="Microsoft.VisualBasic.FileSystem.LOF FileNumber" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 LOF(int32 FileNumber) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="306d5-2650">必需。</span><span class="sxs-lookup"><span data-stu-id="306d5-2650">Required.</span></span> <span data-ttu-id="306d5-2651">一个包含有效文件号的整数。</span><span class="sxs-lookup"><span data-stu-id="306d5-2651">An integer that contains a valid file number.</span></span></param>
        <summary><span data-ttu-id="306d5-2652">返回使用 <see langword="FileOpen" /> 函数打开的文件的大小（以字节为单位）。</span><span class="sxs-lookup"><span data-stu-id="306d5-2652">Returns the size, in bytes, of a file opened by using the <see langword="FileOpen" /> function.</span></span> <span data-ttu-id="306d5-2653">相比 <see langword="LOF" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span><span class="sxs-lookup"><span data-stu-id="306d5-2653">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="LOF" />.</span></span> <span data-ttu-id="306d5-2654">有关详细信息，请参阅 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="306d5-2654">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <returns><span data-ttu-id="306d5-2655">使用 <see langword="FileOpen" /> 函数打开的文件的大小（以字节为单位）。</span><span class="sxs-lookup"><span data-stu-id="306d5-2655">The size, in bytes, of a file opened by using the <see langword="FileOpen" /> function.</span></span> <span data-ttu-id="306d5-2656">相比 <see langword="LOF" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span><span class="sxs-lookup"><span data-stu-id="306d5-2656">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="LOF" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="306d5-2657">使用 `FileLen` 函数获取未打开的文件的长度。</span><span class="sxs-lookup"><span data-stu-id="306d5-2657">Use the `FileLen` function to obtain the length of a file that is not open.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="306d5-2658">此示例使用 `LOF` 函数确定打开文件的大小。</span><span class="sxs-lookup"><span data-stu-id="306d5-2658">This example uses the `LOF` function to determine the size of an open file.</span></span> <span data-ttu-id="306d5-2659">此示例假定 `TestFile` 是包含示例数据的文本文件。</span><span class="sxs-lookup"><span data-stu-id="306d5-2659">This example assumes that `TestFile` is a text file that contains sample data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#23](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#23)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="306d5-2660">文件模式无效。</span><span class="sxs-lookup"><span data-stu-id="306d5-2660">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.EOF(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileLen(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files"><span data-ttu-id="306d5-2661">从文件读取 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="306d5-2661">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files"><span data-ttu-id="306d5-2662">写入文件 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="306d5-2662">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="MkDir">
      <MemberSignature Language="C#" Value="public static void MkDir (string Path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void MkDir(string Path) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub MkDir (Path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void MkDir(System::String ^ Path);" />
      <MemberSignature Language="F#" Value="static member MkDir : string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.MkDir Path" />
      <MemberSignature Language="ILAsm" Value=".method public static void MkDir(string Path) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Path"><span data-ttu-id="306d5-2663">必需。</span><span class="sxs-lookup"><span data-stu-id="306d5-2663">Required.</span></span> <span data-ttu-id="306d5-2664">标识要创建的目录的字符串表达式。</span><span class="sxs-lookup"><span data-stu-id="306d5-2664">A string expression that identifies the directory to be created.</span></span> <span data-ttu-id="306d5-2665"><paramref name="Path" /> 可以包含驱动器。</span><span class="sxs-lookup"><span data-stu-id="306d5-2665">The <paramref name="Path" /> may include the drive.</span></span> <span data-ttu-id="306d5-2666">如果未指定驱动器，则 <see langword="MkDir" /> 在当前驱动器上创建新目录。</span><span class="sxs-lookup"><span data-stu-id="306d5-2666">If no drive is specified, <see langword="MkDir" /> creates the new directory on the current drive.</span></span></param>
        <summary><span data-ttu-id="306d5-2667">新建目录。</span><span class="sxs-lookup"><span data-stu-id="306d5-2667">Creates a new directory.</span></span> <span data-ttu-id="306d5-2668">相比 <see langword="MkDir" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span><span class="sxs-lookup"><span data-stu-id="306d5-2668">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="MkDir" />.</span></span> <span data-ttu-id="306d5-2669">有关详细信息，请参阅 <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.CreateDirectory(System.String)" />。</span><span class="sxs-lookup"><span data-stu-id="306d5-2669">For more information, see <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.CreateDirectory(System.String)" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="306d5-2670">此函数创建一个新目录。</span><span class="sxs-lookup"><span data-stu-id="306d5-2670">This function creates a new directory.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="306d5-2671">此示例使用 `MkDir` 函数创建目录。</span><span class="sxs-lookup"><span data-stu-id="306d5-2671">This example uses the `MkDir` function to create a directory.</span></span> <span data-ttu-id="306d5-2672">如果未指定驱动器，则将在当前驱动器上创建新目录。</span><span class="sxs-lookup"><span data-stu-id="306d5-2672">If the drive is not specified, the new directory is created on the current drive.</span></span>  
  
 [!code-vb[VbVbalrCatRef#38](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#38)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="306d5-2673"><paramref name="Path" /> 未指定或为空。</span><span class="sxs-lookup"><span data-stu-id="306d5-2673"><paramref name="Path" /> is not specified or is empty.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="306d5-2674">权限被拒绝。</span><span class="sxs-lookup"><span data-stu-id="306d5-2674">Permission denied.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="306d5-2675">目录已存在。</span><span class="sxs-lookup"><span data-stu-id="306d5-2675">Directory already exists.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-directory"><span data-ttu-id="306d5-2676">如何：在 Visual Basic 中创建目录</span><span class="sxs-lookup"><span data-stu-id="306d5-2676">How to: Create a Directory in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Print">
      <MemberSignature Language="C#" Value="public static void Print (int FileNumber, params object[] Output);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Print(int32 FileNumber, object[] Output) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub Print (FileNumber As Integer, ParamArray Output As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Print(int FileNumber, ... cli::array &lt;System::Object ^&gt; ^ Output);" />
      <MemberSignature Language="F#" Value="static member Print : int * obj[] -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Print (FileNumber, Output)" />
      <MemberSignature Language="ILAsm" Value=".method public static void Print(int32 FileNumber, object[] Output) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Output" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="net-5.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="306d5-2677">必需。</span><span class="sxs-lookup"><span data-stu-id="306d5-2677">Required.</span></span> <span data-ttu-id="306d5-2678">任何有效文件数。</span><span class="sxs-lookup"><span data-stu-id="306d5-2678">Any valid file number.</span></span></param>
        <param name="Output"><span data-ttu-id="306d5-2679">可选。</span><span class="sxs-lookup"><span data-stu-id="306d5-2679">Optional.</span></span> <span data-ttu-id="306d5-2680">要写入文件的零个或多个由逗号分隔的表达式。</span><span class="sxs-lookup"><span data-stu-id="306d5-2680">Zero or more comma-delimited expressions to write to a file.</span></span>  
  
<span data-ttu-id="306d5-2681"><paramref name="Output" /> 参数的设置是：</span><span class="sxs-lookup"><span data-stu-id="306d5-2681">The <paramref name="Output" /> argument settings are:</span></span> 
 <span data-ttu-id="306d5-2682"><see langword="T:System.IO.IOException" />：文件模式无效。</span><span class="sxs-lookup"><span data-stu-id="306d5-2682"><see langword="T:System.IO.IOException" />: File mode is invalid.</span></span>  
  
 <span data-ttu-id="306d5-2683"><see langword="T:System.IO.IOException" />：<paramref name="FileNumber" /> 不存在。</span><span class="sxs-lookup"><span data-stu-id="306d5-2683"><see langword="T:System.IO.IOException" />: <paramref name="FileNumber" /> does not exist.</span></span></param>
        <summary><span data-ttu-id="306d5-2684">将已设置显示格式的数据写入顺序文件。</span><span class="sxs-lookup"><span data-stu-id="306d5-2684">Writes display-formatted data to a sequential file.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="306d5-2685">提供 `Print` 和 `PrintLine` 函数是为了向后兼容，可能会影响性能。</span><span class="sxs-lookup"><span data-stu-id="306d5-2685">The `Print` and `PrintLine` functions are provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="306d5-2686">对于非旧版应用程序，`My.Computer.FileSystem` 对象提供更好的性能。</span><span class="sxs-lookup"><span data-stu-id="306d5-2686">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="306d5-2687">有关详细信息，请参阅[使用 Visual Basic 进行文件访问](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/file-access)。</span><span class="sxs-lookup"><span data-stu-id="306d5-2687">For more information, see [File Access with Visual Basic](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/file-access).</span></span>  
  
 <span data-ttu-id="306d5-2688">`Print` 不在行尾包含换行符;但 `PrintLine` 包括换行。</span><span class="sxs-lookup"><span data-stu-id="306d5-2688">`Print` does not include a line feed at the end of a line; however, `PrintLine` does include a line feed.</span></span>  
  
 <span data-ttu-id="306d5-2689">通常使用 `LineInput` 或 `Input`从文件中读取使用 `Print` 编写的数据。</span><span class="sxs-lookup"><span data-stu-id="306d5-2689">Data written with `Print` is usually read from a file by using `LineInput` or `Input`.</span></span>  
  
 <span data-ttu-id="306d5-2690">如果省略 `PrintLine``Output`，则会在文件中打印一个空行;对于 `Print`，不会有任何输出。</span><span class="sxs-lookup"><span data-stu-id="306d5-2690">If you omit `Output` for `PrintLine`, a blank line is printed to the file; for `Print`, nothing is output.</span></span> <span data-ttu-id="306d5-2691">用逗号分隔的多个表达式将在制表符边界上对齐，但混合逗点和 `TAB` 可能会导致不一致的结果。</span><span class="sxs-lookup"><span data-stu-id="306d5-2691">Multiple expressions separated with a comma will be aligned on tab boundaries, but mixing commas and `TAB` may cause inconsistent results.</span></span>  
  
 <span data-ttu-id="306d5-2692">对于 `Boolean` 的数据，将打印 `True` 或 `False`。</span><span class="sxs-lookup"><span data-stu-id="306d5-2692">For `Boolean` data, either `True` or `False` is printed.</span></span> <span data-ttu-id="306d5-2693">不会转换 `True` 和 `False` 关键字，无论区域设置如何。</span><span class="sxs-lookup"><span data-stu-id="306d5-2693">The `True` and `False` keywords are not translated, regardless of the locale.</span></span>  
  
 <span data-ttu-id="306d5-2694">使用系统识别的标准短日期格式将日期数据写入文件。</span><span class="sxs-lookup"><span data-stu-id="306d5-2694">Date data is written to the file by using the standard short date format recognized by your system.</span></span> <span data-ttu-id="306d5-2695">当日期或时间部分缺失或为零时，只将提供的部分写入文件中。</span><span class="sxs-lookup"><span data-stu-id="306d5-2695">When either the date or the time component is missing or zero, only the part provided is written to the file.</span></span>  
  
 <span data-ttu-id="306d5-2696">如果 `Output` 数据为空，则不会向文件写入任何内容。</span><span class="sxs-lookup"><span data-stu-id="306d5-2696">Nothing is written to the file if `Output` data is empty.</span></span> <span data-ttu-id="306d5-2697">但是，如果 `DBNull``Output` 列出数据，`Null` 将写入文件。</span><span class="sxs-lookup"><span data-stu-id="306d5-2697">However, if `Output` list data is `DBNull`, `Null` is written to the file.</span></span>  
  
 <span data-ttu-id="306d5-2698">对于 `Error` 数据，输出显示为 `Error errorcode`。</span><span class="sxs-lookup"><span data-stu-id="306d5-2698">For `Error` data, the output appears as `Error errorcode`.</span></span> <span data-ttu-id="306d5-2699">无论区域设置如何，都不会转换 `Error` 关键字。</span><span class="sxs-lookup"><span data-stu-id="306d5-2699">The `Error` keyword is not translated regardless of the locale.</span></span>  
  
 <span data-ttu-id="306d5-2700">使用 `Print` 写入文件的所有数据都是可以识别的;也就是说，使用适当的小数点分隔符正确设置数据的格式。</span><span class="sxs-lookup"><span data-stu-id="306d5-2700">All data written to the file by using `Print` is internationally aware; that is, the data is correctly formatted using the appropriate decimal separator.</span></span> <span data-ttu-id="306d5-2701">如果用户希望输出由多个区域设置使用的数据，则应使用 `Write`。</span><span class="sxs-lookup"><span data-stu-id="306d5-2701">If the user wishes to output data for use by multiple locales, `Write` should be used.</span></span>  
  
 <span data-ttu-id="306d5-2702">使用 `Print` 或 `PrintLine` 函数写入文件需要从 `FileIOPermissionAccess` 枚举 `Write` 访问。</span><span class="sxs-lookup"><span data-stu-id="306d5-2702">Writing to a file by using the `Print` or `PrintLine` functions requires `Write` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="306d5-2703">有关详细信息，请参阅 <xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="306d5-2703">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="306d5-2704">此示例使用 `Print` 和 `PrintLine` 函数将数据写入文件。</span><span class="sxs-lookup"><span data-stu-id="306d5-2704">This example uses the `Print` and `PrintLine` functions to write data to a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#53](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#53)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.TAB" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/file-access"><span data-ttu-id="306d5-2705">使用 Visual Basic 访问文件</span><span class="sxs-lookup"><span data-stu-id="306d5-2705">File Access with Visual Basic</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files"><span data-ttu-id="306d5-2706">如何：在 Visual Basic 中向文件内写入文本</span><span class="sxs-lookup"><span data-stu-id="306d5-2706">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter"><span data-ttu-id="306d5-2707">如何：使用 Streamwriter （Visual Basic）将文本写入文件</span><span class="sxs-lookup"><span data-stu-id="306d5-2707">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="PrintLine">
      <MemberSignature Language="C#" Value="public static void PrintLine (int FileNumber, params object[] Output);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void PrintLine(int32 FileNumber, object[] Output) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub PrintLine (FileNumber As Integer, ParamArray Output As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void PrintLine(int FileNumber, ... cli::array &lt;System::Object ^&gt; ^ Output);" />
      <MemberSignature Language="F#" Value="static member PrintLine : int * obj[] -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.PrintLine (FileNumber, Output)" />
      <MemberSignature Language="ILAsm" Value=".method public static void PrintLine(int32 FileNumber, object[] Output) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Output" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="net-5.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="306d5-2708">必需。</span><span class="sxs-lookup"><span data-stu-id="306d5-2708">Required.</span></span> <span data-ttu-id="306d5-2709">任何有效文件数。</span><span class="sxs-lookup"><span data-stu-id="306d5-2709">Any valid file number.</span></span></param>
        <param name="Output"><span data-ttu-id="306d5-2710">可选。</span><span class="sxs-lookup"><span data-stu-id="306d5-2710">Optional.</span></span> <span data-ttu-id="306d5-2711">要写入文件的零个或多个由逗号分隔的表达式。</span><span class="sxs-lookup"><span data-stu-id="306d5-2711">Zero or more comma-delimited expressions to write to a file.</span></span>  
  
<span data-ttu-id="306d5-2712"><paramref name="Output" /> 参数的设置是：</span><span class="sxs-lookup"><span data-stu-id="306d5-2712">The <paramref name="Output" /> argument settings are:</span></span> 
 <span data-ttu-id="306d5-2713"><see langword="T:System.IO.IOException" />：文件模式无效。</span><span class="sxs-lookup"><span data-stu-id="306d5-2713"><see langword="T:System.IO.IOException" />: File mode is invalid.</span></span>  
  
 <span data-ttu-id="306d5-2714"><see langword="T:System.IO.IOException" />：<paramref name="FileNumber" /> 不存在。</span><span class="sxs-lookup"><span data-stu-id="306d5-2714"><see langword="T:System.IO.IOException" />: <paramref name="FileNumber" /> does not exist.</span></span></param>
        <summary><span data-ttu-id="306d5-2715">将已设置显示格式的数据写入顺序文件。</span><span class="sxs-lookup"><span data-stu-id="306d5-2715">Writes display-formatted data to a sequential file.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="306d5-2716">提供 `Print` 和 `PrintLine` 函数是为了向后兼容，可能会影响性能。</span><span class="sxs-lookup"><span data-stu-id="306d5-2716">The `Print` and `PrintLine` functions are provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="306d5-2717">对于非旧版应用程序，`My.Computer.FileSystem` 对象提供更好的性能。</span><span class="sxs-lookup"><span data-stu-id="306d5-2717">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="306d5-2718">有关详细信息，请参阅[使用 Visual Basic 进行文件访问](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/file-access)。</span><span class="sxs-lookup"><span data-stu-id="306d5-2718">For more information, see [File Access with Visual Basic](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/file-access).</span></span>  
  
 <span data-ttu-id="306d5-2719">`Print` 不在行尾包含换行符;但`PrintLine` 包括换行。</span><span class="sxs-lookup"><span data-stu-id="306d5-2719">`Print` does not include a line feed at the end of a line; however,`PrintLine` does include a line feed.</span></span>  
  
 <span data-ttu-id="306d5-2720">通常使用 `LineInput` 或 `Input`从文件中读取使用 `Print` 编写的数据。</span><span class="sxs-lookup"><span data-stu-id="306d5-2720">Data written with `Print` is usually read from a file by using `LineInput` or `Input`.</span></span>  
  
 <span data-ttu-id="306d5-2721">如果省略 `PrintLine``Output`，则会在文件中打印一个空行;对于 `Print`，不会有任何输出。</span><span class="sxs-lookup"><span data-stu-id="306d5-2721">If you omit `Output` for `PrintLine`, a blank line is printed to the file; for `Print`, nothing is output.</span></span> <span data-ttu-id="306d5-2722">用逗号分隔的多个表达式将在制表符边界上对齐，但混合逗点和 `TAB` 可能会导致不一致的结果。</span><span class="sxs-lookup"><span data-stu-id="306d5-2722">Multiple expressions separated with a comma will be aligned on tab boundaries, but mixing commas and `TAB` may cause inconsistent results.</span></span>  
  
 <span data-ttu-id="306d5-2723">对于 `Boolean` 的数据，将打印 `True` 或 `False`。</span><span class="sxs-lookup"><span data-stu-id="306d5-2723">For `Boolean` data, either `True` or `False` is printed.</span></span> <span data-ttu-id="306d5-2724">不会转换 `True` 和 `False` 关键字，无论区域设置如何。</span><span class="sxs-lookup"><span data-stu-id="306d5-2724">The `True` and `False` keywords are not translated, regardless of the locale.</span></span>  
  
 <span data-ttu-id="306d5-2725">使用系统识别的标准短日期格式将日期数据写入文件。</span><span class="sxs-lookup"><span data-stu-id="306d5-2725">Date data is written to the file by using the standard short date format recognized by the system.</span></span> <span data-ttu-id="306d5-2726">当日期或时间部分缺失或为零时，只将提供的部分写入文件中。</span><span class="sxs-lookup"><span data-stu-id="306d5-2726">When either the date or the time component is missing or zero, only the part provided is written to the file.</span></span>  
  
 <span data-ttu-id="306d5-2727">如果 `Output` 数据为空，则不会向文件写入任何内容。</span><span class="sxs-lookup"><span data-stu-id="306d5-2727">Nothing is written to the file if `Output` data is empty.</span></span> <span data-ttu-id="306d5-2728">但是，如果 `DBNull``Output` 列出数据，`Null` 将写入文件。</span><span class="sxs-lookup"><span data-stu-id="306d5-2728">However, if `Output` list data is `DBNull`, `Null` is written to the file.</span></span>  
  
 <span data-ttu-id="306d5-2729">对于 `Error` 数据，输出显示为 `Error errorcode`。</span><span class="sxs-lookup"><span data-stu-id="306d5-2729">For `Error` data, the output appears as `Error errorcode`.</span></span> <span data-ttu-id="306d5-2730">无论区域设置如何，都不会转换 `Error` 关键字。</span><span class="sxs-lookup"><span data-stu-id="306d5-2730">The `Error` keyword is not translated regardless of the locale.</span></span>  
  
 <span data-ttu-id="306d5-2731">使用 `Print` 写入文件的所有数据都是可以识别的;也就是说，使用适当的小数点分隔符正确设置数据的格式。</span><span class="sxs-lookup"><span data-stu-id="306d5-2731">All data written to the file by using `Print` is internationally aware; that is, the data is correctly formatted using the appropriate decimal separator.</span></span> <span data-ttu-id="306d5-2732">如果用户希望输出由多个区域设置使用的数据，则应使用 `Write`。</span><span class="sxs-lookup"><span data-stu-id="306d5-2732">If the user wishes to output data for use by multiple locales, `Write` should be used.</span></span>  
  
 <span data-ttu-id="306d5-2733">使用 `Print` 或 `PrintLine` 函数写入文件需要从 `FileIOPermissionAccess` 枚举 `Write` 访问。</span><span class="sxs-lookup"><span data-stu-id="306d5-2733">Writing to a file by using the `Print` or `PrintLine` functions requires `Write` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="306d5-2734">有关详细信息，请参阅 <xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="306d5-2734">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="306d5-2735">此示例使用 `Print` 和 `PrintLine` 函数将数据写入文件。</span><span class="sxs-lookup"><span data-stu-id="306d5-2735">This example uses the `Print` and `PrintLine` functions to write data to a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#53](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#53)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.TAB" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/file-access"><span data-ttu-id="306d5-2736">使用 Visual Basic 访问文件</span><span class="sxs-lookup"><span data-stu-id="306d5-2736">File Access with Visual Basic</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files"><span data-ttu-id="306d5-2737">如何：在 Visual Basic 中向文件内写入文本</span><span class="sxs-lookup"><span data-stu-id="306d5-2737">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter"><span data-ttu-id="306d5-2738">如何：使用 Streamwriter （Visual Basic）将文本写入文件</span><span class="sxs-lookup"><span data-stu-id="306d5-2738">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Rename">
      <MemberSignature Language="C#" Value="public static void Rename (string OldPath, string NewPath);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Rename(string OldPath, string NewPath) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Rename(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Rename (OldPath As String, NewPath As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Rename(System::String ^ OldPath, System::String ^ NewPath);" />
      <MemberSignature Language="F#" Value="static member Rename : string * string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Rename (OldPath, NewPath)" />
      <MemberSignature Language="ILAsm" Value=".method public static void Rename(string OldPath, string NewPath) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="OldPath" Type="System.String" />
        <Parameter Name="NewPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="OldPath"><span data-ttu-id="306d5-2739">必需。</span><span class="sxs-lookup"><span data-stu-id="306d5-2739">Required.</span></span> <span data-ttu-id="306d5-2740">指定现有文件名和位置的字符串表达式。</span><span class="sxs-lookup"><span data-stu-id="306d5-2740">A string expression that specifies the existing file name and location.</span></span> <span data-ttu-id="306d5-2741"><paramref name="OldPath" /> 可包含文件的目录和驱动器。</span><span class="sxs-lookup"><span data-stu-id="306d5-2741"><paramref name="OldPath" /> may include the directory, and drive, of the file.</span></span></param>
        <param name="NewPath"><span data-ttu-id="306d5-2742">必需。</span><span class="sxs-lookup"><span data-stu-id="306d5-2742">Required.</span></span> <span data-ttu-id="306d5-2743">指定新文件名和位置的字符串表达式。</span><span class="sxs-lookup"><span data-stu-id="306d5-2743">A string expression that specifies the new file name and location.</span></span> <span data-ttu-id="306d5-2744"><paramref name="NewPath" /> 可包含目标位置的目录和驱动器。</span><span class="sxs-lookup"><span data-stu-id="306d5-2744"><paramref name="NewPath" /> may include directory and drive of the destination location.</span></span> <span data-ttu-id="306d5-2745"><paramref name="NewPath" /> 指定的文件名不能是已存在的文件名。</span><span class="sxs-lookup"><span data-stu-id="306d5-2745">The file name specified by <paramref name="NewPath" /> cannot already exist.</span></span></param>
        <summary><span data-ttu-id="306d5-2746">重命名磁盘文件或目录。</span><span class="sxs-lookup"><span data-stu-id="306d5-2746">Renames a disk file or directory.</span></span> <span data-ttu-id="306d5-2747">相比 <see langword="Rename" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span><span class="sxs-lookup"><span data-stu-id="306d5-2747">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Rename" />.</span></span> <span data-ttu-id="306d5-2748">有关详细信息，请参阅 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="306d5-2748">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="306d5-2749">如果需要，`Rename` 函数将重命名文件并将其移动到不同的目录。</span><span class="sxs-lookup"><span data-stu-id="306d5-2749">The`Rename` function renames a file and moves it to a different directory, if it is required.</span></span> <span data-ttu-id="306d5-2750">`Rename` 函数可以跨驱动器移动文件，但当 `NewPath` 和 `OldPath` 都位于同一驱动器上时，它只能重命名现有目录。</span><span class="sxs-lookup"><span data-stu-id="306d5-2750">The `Rename` function can move a file across drives, but it can only rename an existing directory when both `NewPath` and `OldPath` are located on the same drive.</span></span> <span data-ttu-id="306d5-2751">`Rename` 无法创建新的文件或目录。</span><span class="sxs-lookup"><span data-stu-id="306d5-2751">`Rename` cannot create a new file or directory.</span></span>  
  
 <span data-ttu-id="306d5-2752">对打开的文件使用 `Rename` 函数将产生错误。</span><span class="sxs-lookup"><span data-stu-id="306d5-2752">Using the `Rename` function on an open file produces an error.</span></span> <span data-ttu-id="306d5-2753">在重命名之前，必须先关闭打开的文件。</span><span class="sxs-lookup"><span data-stu-id="306d5-2753">You must close an open file before renaming it.</span></span> <span data-ttu-id="306d5-2754">`Rename` 参数不能包含多字符（\*）和单字符（？）通配符。</span><span class="sxs-lookup"><span data-stu-id="306d5-2754">`Rename` arguments cannot include multiple-character (\*) and single-character (?) wildcards.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="306d5-2755">使用 `Rename` 将不受保护的位置中的文件复制到受保护的位置时，该文件将保留有限的权限。</span><span class="sxs-lookup"><span data-stu-id="306d5-2755">When using `Rename` to copy a file from an unprotected location to a protected location, the file retains the less restricted rights.</span></span> <span data-ttu-id="306d5-2756">请检查以确保未引入可能的安全风险。</span><span class="sxs-lookup"><span data-stu-id="306d5-2756">Check to make sure that you are not introducing a possible security risk.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="306d5-2757">此示例使用 `Rename` 函数重命名文件。</span><span class="sxs-lookup"><span data-stu-id="306d5-2757">This example uses the `Rename` function to rename a file.</span></span> <span data-ttu-id="306d5-2758">出于本示例的目的，假定指定的目录已存在。</span><span class="sxs-lookup"><span data-stu-id="306d5-2758">For purposes of this example, assume that the directories that are specified already exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="306d5-2759">路径无效。</span><span class="sxs-lookup"><span data-stu-id="306d5-2759">Path is invalid.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="306d5-2760"><paramref name="OldPath" /> file does not exist.</span><span class="sxs-lookup"><span data-stu-id="306d5-2760"><paramref name="OldPath" /> file does not exist.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="306d5-2761">无法重命名为不同的设备。</span><span class="sxs-lookup"><span data-stu-id="306d5-2761">Cannot rename to different device.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Kill(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-rename-a-file"><span data-ttu-id="306d5-2762">如何：在 Visual Basic 中重命名文件</span><span class="sxs-lookup"><span data-stu-id="306d5-2762">How to: Rename a File in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public static void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Reset() cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Reset();" />
      <MemberSignature Language="F#" Value="static member Reset : unit -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Reset " />
      <MemberSignature Language="ILAsm" Value=".method public static void Reset() cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="306d5-2763">关闭所有使用 <see langword="FileOpen" /> 函数打开的磁盘文件。</span><span class="sxs-lookup"><span data-stu-id="306d5-2763">Closes all disk files opened by using the <see langword="FileOpen" /> function.</span></span> <span data-ttu-id="306d5-2764">相比 <see langword="Reset" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span><span class="sxs-lookup"><span data-stu-id="306d5-2764">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Reset" />.</span></span> <span data-ttu-id="306d5-2765">有关详细信息，请参阅 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="306d5-2765">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="306d5-2766">`Reset` 函数关闭 `FileOpen` 函数打开的所有活动文件，并且该函数与 `FileClose()` 没有任何参数的函数相同。</span><span class="sxs-lookup"><span data-stu-id="306d5-2766">The `Reset` function closes all active files opened by the `FileOpen` function and has the same function as `FileClose()` without any parameters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="306d5-2767">此示例使用 `Reset` 函数关闭所有打开的文件，并将所有文件缓冲区的内容写入磁盘。</span><span class="sxs-lookup"><span data-stu-id="306d5-2767">This example uses the `Reset` function to close all open files and write the contents of all file buffers to disk.</span></span> <span data-ttu-id="306d5-2768">请注意，`Object` 变量的用法 `FileNumber` 同时作为字符串和数字。</span><span class="sxs-lookup"><span data-stu-id="306d5-2768">Note the use of the `Object` variable `FileNumber` as both a string and a number.</span></span>  
  
 [!code-vb[VbVbalrCatRef#12](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#12)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileClose(System.Int32[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/statements/end-statement"><span data-ttu-id="306d5-2769">End 语句</span><span class="sxs-lookup"><span data-stu-id="306d5-2769">End Statement</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="RmDir">
      <MemberSignature Language="C#" Value="public static void RmDir (string Path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RmDir(string Path) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RmDir (Path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RmDir(System::String ^ Path);" />
      <MemberSignature Language="F#" Value="static member RmDir : string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.RmDir Path" />
      <MemberSignature Language="ILAsm" Value=".method public static void RmDir(string Path) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Path"><span data-ttu-id="306d5-2770">必需。</span><span class="sxs-lookup"><span data-stu-id="306d5-2770">Required.</span></span> <span data-ttu-id="306d5-2771">标识要移除的目录或文件夹的字符串表达式。</span><span class="sxs-lookup"><span data-stu-id="306d5-2771">A string expression that identifies the directory or folder to be removed.</span></span> <span data-ttu-id="306d5-2772"><paramref name="Path" /> 可以包含驱动器。</span><span class="sxs-lookup"><span data-stu-id="306d5-2772"><paramref name="Path" /> can include the drive.</span></span> <span data-ttu-id="306d5-2773">如果未指定驱动器，则 <see langword="RmDir" /> 移除当前驱动器上的目录。</span><span class="sxs-lookup"><span data-stu-id="306d5-2773">If no drive is specified, <see langword="RmDir" /> removes the directory on the current drive.</span></span></param>
        <summary><span data-ttu-id="306d5-2774">移除现有目录。</span><span class="sxs-lookup"><span data-stu-id="306d5-2774">Removes an existing directory.</span></span> <span data-ttu-id="306d5-2775">相比 <see langword="RmDir" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span><span class="sxs-lookup"><span data-stu-id="306d5-2775">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="RmDir" />.</span></span> <span data-ttu-id="306d5-2776">有关详细信息，请参阅 <see cref="Overload:Microsoft.VisualBasic.FileIO.FileSystem.DeleteDirectory" />。</span><span class="sxs-lookup"><span data-stu-id="306d5-2776">For more information, see <see cref="Overload:Microsoft.VisualBasic.FileIO.FileSystem.DeleteDirectory" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="306d5-2777">如果尝试对包含文件的目录使用 `RmDir`，则会发生错误。</span><span class="sxs-lookup"><span data-stu-id="306d5-2777">An error occurs if you try to use `RmDir` on a directory that contains files.</span></span> <span data-ttu-id="306d5-2778">在尝试删除目录之前，请使用 `Kill` 函数删除所有文件。</span><span class="sxs-lookup"><span data-stu-id="306d5-2778">Use the `Kill` function to delete all files before you try to remove a directory.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="306d5-2779">此示例使用 `RmDir` 函数来删除现有目录。</span><span class="sxs-lookup"><span data-stu-id="306d5-2779">This example uses the `RmDir` function to remove an existing directory.</span></span>  
  
 [!code-vb[VbVbalrCatRef#31](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#31)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="306d5-2780"><paramref name="Path" /> 未指定或为空。</span><span class="sxs-lookup"><span data-stu-id="306d5-2780"><paramref name="Path" /> is not specified or is empty.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="306d5-2781">目标目录包含文件。</span><span class="sxs-lookup"><span data-stu-id="306d5-2781">Target directory contains files.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="306d5-2782">目录不存在。</span><span class="sxs-lookup"><span data-stu-id="306d5-2782">Directory does not exist.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Kill(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Seek">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="306d5-2783">返回 <see langword="Long" />，它指定使用 <see langword="FileOpen" /> 函数打开的文件中的当前读/写位置；或设置使用 <see langword="FileOpen" /> 函数打开的文件中的下一个读/写操作的位置。</span><span class="sxs-lookup"><span data-stu-id="306d5-2783">Returns a <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span></span> <span data-ttu-id="306d5-2784">相比 <see langword="Seek" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span><span class="sxs-lookup"><span data-stu-id="306d5-2784">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Seek" />.</span></span> <span data-ttu-id="306d5-2785">有关详细信息，请参阅 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="306d5-2785">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Seek">
      <MemberSignature Language="C#" Value="public static long Seek (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 Seek(int32 FileNumber) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Seek(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Seek (FileNumber As Integer) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Seek(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member Seek : int -&gt; int64" Usage="Microsoft.VisualBasic.FileSystem.Seek FileNumber" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Seek(int32 FileNumber) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="306d5-2786">必需。</span><span class="sxs-lookup"><span data-stu-id="306d5-2786">Required.</span></span> <span data-ttu-id="306d5-2787">一个包含有效文件号的 <see langword="Integer" />。</span><span class="sxs-lookup"><span data-stu-id="306d5-2787">An <see langword="Integer" /> that contains a valid file number.</span></span></param>
        <summary><span data-ttu-id="306d5-2788">返回 <see langword="Long" />，它指定使用 <see langword="FileOpen" /> 函数打开的文件中的当前读/写位置；或设置使用 <see langword="FileOpen" /> 函数打开的文件中的下一个读/写操作的位置。</span><span class="sxs-lookup"><span data-stu-id="306d5-2788">Returns a <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span></span> <span data-ttu-id="306d5-2789">相比 <see langword="Seek" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span><span class="sxs-lookup"><span data-stu-id="306d5-2789">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Seek" />.</span></span> <span data-ttu-id="306d5-2790">有关详细信息，请参阅 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="306d5-2790">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <returns><span data-ttu-id="306d5-2791">一个 <see langword="Long" />，它指定使用 <see langword="FileOpen" /> 函数打开的文件中的当前读/写位置；或设置使用 <see langword="FileOpen" /> 函数打开的文件中的下一个读/写操作的位置。</span><span class="sxs-lookup"><span data-stu-id="306d5-2791">A <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="306d5-2792">`Seek` 返回1到2147483647（相当于 2 ^ 31-1）之间的值（包括这两个值）。</span><span class="sxs-lookup"><span data-stu-id="306d5-2792">`Seek` returns a value between 1 and 2,147,483,647 (equivalent to 2^31 - 1), inclusive.</span></span>  
  
 <span data-ttu-id="306d5-2793">下面说明了每个文件访问模式的返回值：</span><span class="sxs-lookup"><span data-stu-id="306d5-2793">The following describes the return values for each file access mode:</span></span>  
  
|<span data-ttu-id="306d5-2794">模式</span><span class="sxs-lookup"><span data-stu-id="306d5-2794">Mode</span></span>|<span data-ttu-id="306d5-2795">返回值</span><span class="sxs-lookup"><span data-stu-id="306d5-2795">Return Value</span></span>|  
|-|-|  
|`Random`|<span data-ttu-id="306d5-2796">读取或写入的下一个记录的编号</span><span class="sxs-lookup"><span data-stu-id="306d5-2796">Number of the next record read or written</span></span>|  
|<span data-ttu-id="306d5-2797">`Binary`、`Input`、`Output`、`Append`</span><span class="sxs-lookup"><span data-stu-id="306d5-2797">`Binary`, `Input`, `Output`, `Append`</span></span>|<span data-ttu-id="306d5-2798">发生下一操作的字节位置。</span><span class="sxs-lookup"><span data-stu-id="306d5-2798">Byte position at which the next operation occurs.</span></span> <span data-ttu-id="306d5-2799">文件中的第一个字节的位置为1，第二个字节在位置2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="306d5-2799">The first byte in a file is at position 1, the second byte is at position 2, and so on.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="306d5-2800">此示例使用 `Seek` 函数返回当前文件位置。</span><span class="sxs-lookup"><span data-stu-id="306d5-2800">This example uses the `Seek` function to return the current file position.</span></span> <span data-ttu-id="306d5-2801">该示例假定 `TestFile` 是包含结构 `Record`的记录的文件。</span><span class="sxs-lookup"><span data-stu-id="306d5-2801">The example assumes `TestFile` is a file that contains records of the structure `Record`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#47](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#47)]  
  
 <span data-ttu-id="306d5-2802">对于在 `Random` 模式下打开的文件，`Seek` 返回下一条记录的数目。</span><span class="sxs-lookup"><span data-stu-id="306d5-2802">For files opened in `Random` mode, `Seek` returns the number of next record.</span></span>  
  
 [!code-vb[VbVbalrCatRef#48](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#48)]  
  
 <span data-ttu-id="306d5-2803">对于在 `Random` 模式之外的模式中打开的文件，`Seek` 返回发生下一操作的字节位置。</span><span class="sxs-lookup"><span data-stu-id="306d5-2803">For files opened in modes other than `Random` mode, `Seek` returns the byte position at which the next operation occurs.</span></span> <span data-ttu-id="306d5-2804">假定 `TestFile` 是包含多行文本的文件。</span><span class="sxs-lookup"><span data-stu-id="306d5-2804">Assume `TestFile` is a file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#49](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#49)]  
  
 <span data-ttu-id="306d5-2805">此示例使用 `Seek` 函数设置文件中下一次读取或写入的位置。</span><span class="sxs-lookup"><span data-stu-id="306d5-2805">This example uses the `Seek` function to set the position for the next read or write in a file.</span></span>  
  
 <span data-ttu-id="306d5-2806">对于在 `Random` 模式之外的模式中打开的文件，`Seek` 设置发生下一操作的字节位置。</span><span class="sxs-lookup"><span data-stu-id="306d5-2806">For files opened in modes other than `Random` mode, `Seek` sets the byte position at which the next operation occurs.</span></span> <span data-ttu-id="306d5-2807">假定 `TestFile` 是包含多行文本的文件。</span><span class="sxs-lookup"><span data-stu-id="306d5-2807">Assume `TestFile` is a file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#52](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#52)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="306d5-2808">文件模式无效。</span><span class="sxs-lookup"><span data-stu-id="306d5-2808">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files"><span data-ttu-id="306d5-2809">从文件读取 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="306d5-2809">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files"><span data-ttu-id="306d5-2810">写入文件 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="306d5-2810">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Seek">
      <MemberSignature Language="C#" Value="public static void Seek (int FileNumber, long Position);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Seek(int32 FileNumber, int64 Position) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Seek(System.Int32,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Seek (FileNumber As Integer, Position As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Seek(int FileNumber, long Position);" />
      <MemberSignature Language="F#" Value="static member Seek : int * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Seek (FileNumber, Position)" />
      <MemberSignature Language="ILAsm" Value=".method public static void Seek(int32 FileNumber, int64 Position) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Position" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="306d5-2811">必需。</span><span class="sxs-lookup"><span data-stu-id="306d5-2811">Required.</span></span> <span data-ttu-id="306d5-2812">一个包含有效文件号的 <see langword="Integer" />。</span><span class="sxs-lookup"><span data-stu-id="306d5-2812">An <see langword="Integer" /> that contains a valid file number.</span></span></param>
        <param name="Position"><span data-ttu-id="306d5-2813">必需。</span><span class="sxs-lookup"><span data-stu-id="306d5-2813">Required.</span></span> <span data-ttu-id="306d5-2814">一个 1 到 2,147,483,647 范围内（包括 1 和 2,147,483,647）的数字，用于指示下一个读取/写入操作应该发生的位置。</span><span class="sxs-lookup"><span data-stu-id="306d5-2814">Number in the range 1-2,147,483,647, inclusive, that indicates where the next read/write operation should occur.</span></span></param>
        <summary><span data-ttu-id="306d5-2815">返回 <see langword="Long" />，它指定使用 <see langword="FileOpen" /> 函数打开的文件中的当前读/写位置；或设置使用 <see langword="FileOpen" /> 函数打开的文件中的下一个读/写操作的位置。</span><span class="sxs-lookup"><span data-stu-id="306d5-2815">Returns a <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span></span> <span data-ttu-id="306d5-2816">相比 <see langword="Seek" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span><span class="sxs-lookup"><span data-stu-id="306d5-2816">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Seek" />.</span></span> <span data-ttu-id="306d5-2817">有关详细信息，请参阅 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="306d5-2817">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="306d5-2818">`Seek` 返回1到2147483647（相当于 2 ^ 31-1）之间的值（包括这两个值）。</span><span class="sxs-lookup"><span data-stu-id="306d5-2818">`Seek` returns a value between 1 and 2,147,483,647 (equivalent to 2^31 - 1), inclusive.</span></span>  
  
 <span data-ttu-id="306d5-2819">下面说明了每个文件访问模式的返回值：</span><span class="sxs-lookup"><span data-stu-id="306d5-2819">The following describes the return values for each file access mode:</span></span>  
  
|<span data-ttu-id="306d5-2820">模式</span><span class="sxs-lookup"><span data-stu-id="306d5-2820">Mode</span></span>|<span data-ttu-id="306d5-2821">返回值</span><span class="sxs-lookup"><span data-stu-id="306d5-2821">Return Value</span></span>|  
|-|-|  
|`Random`|<span data-ttu-id="306d5-2822">读取或写入的下一个记录的编号</span><span class="sxs-lookup"><span data-stu-id="306d5-2822">Number of the next record read or written</span></span>|  
|<span data-ttu-id="306d5-2823">`Binary`、`Input`、`Output`、`Append`</span><span class="sxs-lookup"><span data-stu-id="306d5-2823">`Binary`, `Input`, `Output`, `Append`</span></span>|<span data-ttu-id="306d5-2824">发生下一操作的字节位置。</span><span class="sxs-lookup"><span data-stu-id="306d5-2824">Byte position at which the next operation occurs.</span></span> <span data-ttu-id="306d5-2825">文件中的第一个字节的位置为1，第二个字节在位置2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="306d5-2825">The first byte in a file is at position 1, the second byte is at position 2, and so on.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="306d5-2826">此示例使用 `Seek` 函数返回当前文件位置。</span><span class="sxs-lookup"><span data-stu-id="306d5-2826">This example uses the `Seek` function to return the current file position.</span></span> <span data-ttu-id="306d5-2827">该示例假定 `TestFile` 是包含结构 `Record`的记录的文件。</span><span class="sxs-lookup"><span data-stu-id="306d5-2827">The example assumes `TestFile` is a file that contains records of the structure `Record`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#47](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#47)]  
  
 <span data-ttu-id="306d5-2828">对于在 `Random` 模式下打开的文件，`Seek` 返回下一条记录的数目。</span><span class="sxs-lookup"><span data-stu-id="306d5-2828">For files opened in `Random` mode, `Seek` returns the number of next record.</span></span>  
  
 [!code-vb[VbVbalrCatRef#48](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#48)]  
  
 <span data-ttu-id="306d5-2829">对于在 `Random` 模式之外的模式中打开的文件，`Seek` 返回发生下一操作的字节位置。</span><span class="sxs-lookup"><span data-stu-id="306d5-2829">For files opened in modes other than `Random` mode, `Seek` returns the byte position at which the next operation occurs.</span></span> <span data-ttu-id="306d5-2830">假定 `TestFile` 是包含多行文本的文件。</span><span class="sxs-lookup"><span data-stu-id="306d5-2830">Assume `TestFile` is a file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#49](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#49)]  
  
 <span data-ttu-id="306d5-2831">此示例使用 `Seek` 函数设置文件中下一次读取或写入的位置。</span><span class="sxs-lookup"><span data-stu-id="306d5-2831">This example uses the `Seek` function to set the position for the next read or write in a file.</span></span>  
  
 <span data-ttu-id="306d5-2832">对于在 `Random` 模式之外的模式中打开的文件，`Seek` 设置发生下一操作的字节位置。</span><span class="sxs-lookup"><span data-stu-id="306d5-2832">For files opened in modes other than `Random` mode, `Seek` sets the byte position at which the next operation occurs.</span></span> <span data-ttu-id="306d5-2833">假定 `TestFile` 是包含多行文本的文件。</span><span class="sxs-lookup"><span data-stu-id="306d5-2833">Assume `TestFile` is a file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#52](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#52)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="306d5-2834">文件模式无效。</span><span class="sxs-lookup"><span data-stu-id="306d5-2834">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files"><span data-ttu-id="306d5-2835">从文件读取 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="306d5-2835">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files"><span data-ttu-id="306d5-2836">写入文件 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="306d5-2836">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="SetAttr">
      <MemberSignature Language="C#" Value="public static void SetAttr (string PathName, Microsoft.VisualBasic.FileAttribute Attributes);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetAttr(string PathName, valuetype Microsoft.VisualBasic.FileAttribute Attributes) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.SetAttr(System.String,Microsoft.VisualBasic.FileAttribute)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetAttr (PathName As String, Attributes As FileAttribute)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetAttr(System::String ^ PathName, Microsoft::VisualBasic::FileAttribute Attributes);" />
      <MemberSignature Language="F#" Value="static member SetAttr : string * Microsoft.VisualBasic.FileAttribute -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.SetAttr (PathName, Attributes)" />
      <MemberSignature Language="ILAsm" Value=".method public static void SetAttr(string PathName, valuetype Microsoft.VisualBasic.FileAttribute Attributes) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
        <Parameter Name="Attributes" Type="Microsoft.VisualBasic.FileAttribute" />
      </Parameters>
      <Docs>
        <param name="PathName"><span data-ttu-id="306d5-2837">必需。</span><span class="sxs-lookup"><span data-stu-id="306d5-2837">Required.</span></span> <span data-ttu-id="306d5-2838">指定一个文件名的字符串表达式。</span><span class="sxs-lookup"><span data-stu-id="306d5-2838">A string expression that specifies a file name.</span></span> <span data-ttu-id="306d5-2839"><paramref name="PathName" /> 可以包含驱动器和目录或文件夹。</span><span class="sxs-lookup"><span data-stu-id="306d5-2839"><paramref name="PathName" /> can include directory or folder, and drive.</span></span></param>
        <param name="Attributes"><span data-ttu-id="306d5-2840">必需。</span><span class="sxs-lookup"><span data-stu-id="306d5-2840">Required.</span></span> <span data-ttu-id="306d5-2841">常量或数值表达式，所有这些值一起指定文件特性。</span><span class="sxs-lookup"><span data-stu-id="306d5-2841">Constant or numeric expression, whose sum specifies file attributes.</span></span></param>
        <summary><span data-ttu-id="306d5-2842">设置文件的特性信息。</span><span class="sxs-lookup"><span data-stu-id="306d5-2842">Sets attribute information for a file.</span></span> <span data-ttu-id="306d5-2843">相比 <see langword="SetAttr" />，<see langword="My" /> 功能可使文件 I/O 操作的效率更高、性能更好。</span><span class="sxs-lookup"><span data-stu-id="306d5-2843">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="SetAttr" />.</span></span> <span data-ttu-id="306d5-2844">有关详细信息，请参阅 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="306d5-2844">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="306d5-2845">如果尝试设置打开的文件的属性，则会发生运行时错误。</span><span class="sxs-lookup"><span data-stu-id="306d5-2845">A run-time error occurs if you try to set the attributes of an open file.</span></span>  
  
 <span data-ttu-id="306d5-2846">`Attributes` 参数枚举值如下所示：</span><span class="sxs-lookup"><span data-stu-id="306d5-2846">The `Attributes` argument enumeration values are as follows:</span></span>  
  
|<span data-ttu-id="306d5-2847">值</span><span class="sxs-lookup"><span data-stu-id="306d5-2847">Value</span></span>|<span data-ttu-id="306d5-2848">一直</span><span class="sxs-lookup"><span data-stu-id="306d5-2848">Constant</span></span>|<span data-ttu-id="306d5-2849">说明</span><span class="sxs-lookup"><span data-stu-id="306d5-2849">Description</span></span>|  
|-|-|-|  
|`Normal`|`vbNormal`|<span data-ttu-id="306d5-2850">Normal （默认值）。</span><span class="sxs-lookup"><span data-stu-id="306d5-2850">Normal (default).</span></span>|  
|`ReadOnly`|`vbReadOnly`|<span data-ttu-id="306d5-2851">只读。</span><span class="sxs-lookup"><span data-stu-id="306d5-2851">Read-only.</span></span>|  
|`Hidden`|`vbHidden`|<span data-ttu-id="306d5-2852">Hidden。</span><span class="sxs-lookup"><span data-stu-id="306d5-2852">Hidden.</span></span>|  
|`System`|`vbSystem`|<span data-ttu-id="306d5-2853">系统文件。</span><span class="sxs-lookup"><span data-stu-id="306d5-2853">System file.</span></span>|  
|`Volume`|`vbVolume`|<span data-ttu-id="306d5-2854">卷标</span><span class="sxs-lookup"><span data-stu-id="306d5-2854">Volume label</span></span>|  
|`Directory`|`vbDirectory`|<span data-ttu-id="306d5-2855">目录或文件夹。</span><span class="sxs-lookup"><span data-stu-id="306d5-2855">Directory or folder.</span></span>|  
|`Archive`|`vbArchive`|<span data-ttu-id="306d5-2856">文件自上次备份后已更改。</span><span class="sxs-lookup"><span data-stu-id="306d5-2856">File has changed since last backup.</span></span>|  
|`Alias`|`vbAlias`|<span data-ttu-id="306d5-2857">文件具有不同的名称。</span><span class="sxs-lookup"><span data-stu-id="306d5-2857">File has a different name.</span></span>|  
  
> [!NOTE]
>  <span data-ttu-id="306d5-2858">这些枚举是由 Visual Basic 语言指定的。</span><span class="sxs-lookup"><span data-stu-id="306d5-2858">These enumerations are specified by the Visual Basic language.</span></span> <span data-ttu-id="306d5-2859">可以在代码中的任何位置使用这些名称，而不是实际值。</span><span class="sxs-lookup"><span data-stu-id="306d5-2859">The names can be used anywhere in your code instead of the actual values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="306d5-2860">此示例使用 `SetAttr` 函数为文件设置属性。</span><span class="sxs-lookup"><span data-stu-id="306d5-2860">This example uses the `SetAttr` function to set attributes for a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#14](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="306d5-2861"><paramref name="Attribute" /> 类型无效。</span><span class="sxs-lookup"><span data-stu-id="306d5-2861"><paramref name="Attribute" /> type is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileAttr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:Microsoft.VisualBasic.FileAttribute" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />
      </Docs>
    </Member>
    <Member MemberName="SPC">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.SpcInfo SPC (short Count);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.VisualBasic.SpcInfo SPC(int16 Count) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function SPC (Count As Short) As SpcInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::SpcInfo SPC(short Count);" />
      <MemberSignature Language="F#" Value="static member SPC : int16 -&gt; Microsoft.VisualBasic.SpcInfo" Usage="Microsoft.VisualBasic.FileSystem.SPC Count" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.SpcInfo SPC(int16 Count) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.SpcInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Count" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Count"><span data-ttu-id="306d5-2862">必需。</span><span class="sxs-lookup"><span data-stu-id="306d5-2862">Required.</span></span> <span data-ttu-id="306d5-2863">在显示或输出列表中下一个表达式之前要插入的空格数。</span><span class="sxs-lookup"><span data-stu-id="306d5-2863">The number of spaces to insert before displaying or printing the next expression in a list.</span></span></param>
        <summary><span data-ttu-id="306d5-2864">与 <see langword="Print" /> 或 <see langword="PrintLine" /> 函数一起使用以定位输出。</span><span class="sxs-lookup"><span data-stu-id="306d5-2864">Used with the <see langword="Print" /> or <see langword="PrintLine" /> function to position output.</span></span></summary>
        <returns><span data-ttu-id="306d5-2865">与 <see langword="Print" /> 或 <see langword="PrintLine" /> 函数一起使用以定位输出。</span><span class="sxs-lookup"><span data-stu-id="306d5-2865">Used with the <see langword="Print" /> or <see langword="PrintLine" /> function to position output.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="306d5-2866">如果 `Count` 小于输出行的宽度，则下一个打印位置紧跟打印的空格数。</span><span class="sxs-lookup"><span data-stu-id="306d5-2866">If `Count` is less than the output line width, the next print position immediately follows the number of spaces printed.</span></span> <span data-ttu-id="306d5-2867">如果`Count` 大于输出行宽度，`SPC` 使用公式计算下一个打印位置：</span><span class="sxs-lookup"><span data-stu-id="306d5-2867">If`Count` is greater than the output line width, `SPC` calculates the next print position using the formula:</span></span>  
  
 <span data-ttu-id="306d5-2868">`currentprintposition`（+ （`Count``Mod``width`））</span><span class="sxs-lookup"><span data-stu-id="306d5-2868">`currentprintposition`(+(`Count``Mod``width`))</span></span>  
  
 <span data-ttu-id="306d5-2869">例如，如果当前打印位置为24，则输出行宽度为80，指定 `SPC(90)`后，下一次打印将在位置34（当前打印位置 + 90/80 的余数）开始。</span><span class="sxs-lookup"><span data-stu-id="306d5-2869">For example, if the current print position is 24, the output line width is 80, and you specify `SPC(90)`, the next print will start at position 34 (current print position + the remainder of 90/80).</span></span> <span data-ttu-id="306d5-2870">如果当前打印位置与输出行宽度之间的差异小于 `Count` （或 `Count` `Mod`*宽度*），则 `SPC` 函数将跳到下一行的开头，并生成等于 `Count` 的空间（*宽度* - *currentprintposition*）。</span><span class="sxs-lookup"><span data-stu-id="306d5-2870">If the difference between the current print position and the output line width is less than `Count` (or `Count` `Mod` *width*), the `SPC` function skips to the start of the next line and generates spaces equal to `Count` - (*width* - *currentprintposition*).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="306d5-2871">请确保表格列宽度足以允许宽信。</span><span class="sxs-lookup"><span data-stu-id="306d5-2871">Make sure your tabular columns are wide enough to allow for wide letters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="306d5-2872">此示例使用 `SPC` 函数将输出定位于文件和**输出**窗口中。</span><span class="sxs-lookup"><span data-stu-id="306d5-2872">This example uses the `SPC` function to position output in a file and in the **Output** window.</span></span>  
  
 [!code-vb[VbVbalrCatRef#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.TAB" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileWidth(System.Int32,System.Int32)" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/operators/mod-operator"><span data-ttu-id="306d5-2873">Mod 运算符 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="306d5-2873">Mod Operator (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="TAB">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="306d5-2874">与 <see langword="Print" /> 或 <see langword="PrintLine" /> 函数一起使用以定位输出。</span><span class="sxs-lookup"><span data-stu-id="306d5-2874">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TAB">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.TabInfo TAB ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.VisualBasic.TabInfo TAB() cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.TAB" />
      <MemberSignature Language="VB.NET" Value="Public Function TAB () As TabInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::TabInfo TAB();" />
      <MemberSignature Language="F#" Value="static member TAB : unit -&gt; Microsoft.VisualBasic.TabInfo" Usage="Microsoft.VisualBasic.FileSystem.TAB " />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.TabInfo TAB() cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.TabInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="306d5-2875">与 <see langword="Print" /> 或 <see langword="PrintLine" /> 函数一起使用以定位输出。</span><span class="sxs-lookup"><span data-stu-id="306d5-2875">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span></span></summary>
        <returns><span data-ttu-id="306d5-2876">与 <see langword="Print" /> 或 <see langword="PrintLine" /> 函数一起使用以定位输出。</span><span class="sxs-lookup"><span data-stu-id="306d5-2876">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="306d5-2877">如果当前行上的当前打印位置大于 `Column`，`TAB` 将跳到下一个输出行中 `Column` 的列值。</span><span class="sxs-lookup"><span data-stu-id="306d5-2877">If the current print position on the current line is larger than `Column`, `TAB` skips to the column value equal to `Column` on the next output line.</span></span> <span data-ttu-id="306d5-2878">如果 `Column` 小于1，`TAB` 将打印位置移到第1列。</span><span class="sxs-lookup"><span data-stu-id="306d5-2878">If `Column` is less than 1, `TAB` moves the print position to column 1.</span></span> <span data-ttu-id="306d5-2879">如果 `Column` 大于输出行宽度，`TAB` 使用公式计算下一个打印位置：</span><span class="sxs-lookup"><span data-stu-id="306d5-2879">If `Column` is larger than the output line width, `TAB` calculates the next print position using the formula:</span></span>  
  
 <span data-ttu-id="306d5-2880">列 Mod 宽度</span><span class="sxs-lookup"><span data-stu-id="306d5-2880">Column Mod width</span></span>  
  
 <span data-ttu-id="306d5-2881">例如，如果*width*为80，并且您指定了 `TAB(90)`，则下一次打印将从第10列（90/80 的余数）开始。</span><span class="sxs-lookup"><span data-stu-id="306d5-2881">For example, if *width* is 80 and you specify `TAB(90)`, the next print will start at column 10 (the remainder of 90/80).</span></span> <span data-ttu-id="306d5-2882">如果 `Column` 小于当前打印位置，则打印将从计算的打印位置的下一行开始。</span><span class="sxs-lookup"><span data-stu-id="306d5-2882">If `Column` is less than the current print position, printing starts on the next line at the calculated print position.</span></span> <span data-ttu-id="306d5-2883">如果计算出的打印位置大于当前打印位置，则打印在同一行的计算打印位置处开始打印。</span><span class="sxs-lookup"><span data-stu-id="306d5-2883">If the calculated print position is larger than the current print position, printing starts at the calculated print position on the same line.</span></span>  
  
 <span data-ttu-id="306d5-2884">输出行上最左侧的打印位置始终为1。</span><span class="sxs-lookup"><span data-stu-id="306d5-2884">The leftmost print position on an output line is always 1.</span></span> <span data-ttu-id="306d5-2885">使用 `Print` 或 `PrintLine` 函数打印到文件时，最右侧的打印位置是输出文件的当前宽度，可以使用 `FileWidth` 函数进行设置。</span><span class="sxs-lookup"><span data-stu-id="306d5-2885">When you use the `Print` or `PrintLine` functions to print to files, the rightmost print position is the current width of the output file, which you can set using the `FileWidth` function.</span></span>  
  
 <span data-ttu-id="306d5-2886">`TAB` 函数还可用于 `WriteLine` 函数。</span><span class="sxs-lookup"><span data-stu-id="306d5-2886">The `TAB` function can also be used with the `WriteLine` function.</span></span> <span data-ttu-id="306d5-2887">它不能与 <xref:System.Diagnostics.Debug.WriteLine%2A?displayProperty=nameWithType> 或 <xref:System.Console.WriteLine%2A?displayProperty=nameWithType>一起使用。</span><span class="sxs-lookup"><span data-stu-id="306d5-2887">It cannot be used with <xref:System.Diagnostics.Debug.WriteLine%2A?displayProperty=nameWithType> or <xref:System.Console.WriteLine%2A?displayProperty=nameWithType>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="306d5-2888">请确保表格列的宽度足以容纳宽信。</span><span class="sxs-lookup"><span data-stu-id="306d5-2888">Make sure your tabular columns are wide enough to contain wide letters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="306d5-2889">此示例使用 `TAB` 函数将输出定位于文件和**输出**窗口中。</span><span class="sxs-lookup"><span data-stu-id="306d5-2889">This example uses the `TAB` function to position output in a file and in the **Output** window.</span></span>  
  
 [!code-vb[VbVbalrCatRef#37](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#37)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileWidth(System.Int32,System.Int32)" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/operators/mod-operator"><span data-ttu-id="306d5-2890">Mod 运算符 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="306d5-2890">Mod Operator (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="TAB">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.TabInfo TAB (short Column);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.VisualBasic.TabInfo TAB(int16 Column) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.TAB(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function TAB (Column As Short) As TabInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::TabInfo TAB(short Column);" />
      <MemberSignature Language="F#" Value="static member TAB : int16 -&gt; Microsoft.VisualBasic.TabInfo" Usage="Microsoft.VisualBasic.FileSystem.TAB Column" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.TabInfo TAB(int16 Column) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.TabInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Column" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Column"><span data-ttu-id="306d5-2891">可选。</span><span class="sxs-lookup"><span data-stu-id="306d5-2891">Optional.</span></span> <span data-ttu-id="306d5-2892">在显示或输出列表中下一个表达式之前要移动到的列号。</span><span class="sxs-lookup"><span data-stu-id="306d5-2892">The column number moved to before displaying or printing the next expression in a list.</span></span> <span data-ttu-id="306d5-2893">如果省略它，则 <see langword="TAB" /> 将插入点移动到下一个打印区域的开始位置。</span><span class="sxs-lookup"><span data-stu-id="306d5-2893">If omitted, <see langword="TAB" /> moves the insertion point to the start of the next print zone.</span></span></param>
        <summary><span data-ttu-id="306d5-2894">与 <see langword="Print" /> 或 <see langword="PrintLine" /> 函数一起使用以定位输出。</span><span class="sxs-lookup"><span data-stu-id="306d5-2894">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span></span></summary>
        <returns><span data-ttu-id="306d5-2895">与 <see langword="Print" /> 或 <see langword="PrintLine" /> 函数一起使用以定位输出。</span><span class="sxs-lookup"><span data-stu-id="306d5-2895">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="306d5-2896">如果当前行上的当前打印位置大于 `Column`，`TAB` 将跳到下一个输出行中 `Column` 的列值。</span><span class="sxs-lookup"><span data-stu-id="306d5-2896">If the current print position on the current line is greater than `Column`, `TAB` skips to the column value equal to `Column` on the next output line.</span></span> <span data-ttu-id="306d5-2897">如果 `Column` 小于1，`TAB` 将打印位置移到第1列。</span><span class="sxs-lookup"><span data-stu-id="306d5-2897">If `Column` is less than 1, `TAB` moves the print position to column 1.</span></span> <span data-ttu-id="306d5-2898">如果 `Column` 大于输出行宽度，`TAB` 使用公式计算下一个打印位置：</span><span class="sxs-lookup"><span data-stu-id="306d5-2898">If `Column` is greater than the output line width, `TAB` calculates the next print position using the formula:</span></span>  
  
 <span data-ttu-id="306d5-2899">列 Mod 宽度</span><span class="sxs-lookup"><span data-stu-id="306d5-2899">Column Mod width</span></span>  
  
 <span data-ttu-id="306d5-2900">例如，如果*width*为80，并且您指定了 `TAB(90)`，则下一次打印将从第10列（90/80 的余数）开始。</span><span class="sxs-lookup"><span data-stu-id="306d5-2900">For example, if *width* is 80 and you specify `TAB(90)`, the next print will start at column 10 (the remainder of 90/80).</span></span> <span data-ttu-id="306d5-2901">如果 `Column` 小于当前打印位置，则打印将从计算的打印位置的下一行开始。</span><span class="sxs-lookup"><span data-stu-id="306d5-2901">If `Column` is less than the current print position, printing starts on the next line at the calculated print position.</span></span> <span data-ttu-id="306d5-2902">如果计算出的打印位置大于当前打印位置，则打印在同一行的计算打印位置处开始打印。</span><span class="sxs-lookup"><span data-stu-id="306d5-2902">If the calculated print position is greater than the current print position, printing starts at the calculated print position on the same line.</span></span>  
  
 <span data-ttu-id="306d5-2903">输出行上最左侧的打印位置始终为1。</span><span class="sxs-lookup"><span data-stu-id="306d5-2903">The leftmost print position on an output line is always 1.</span></span> <span data-ttu-id="306d5-2904">使用 `Print` 或 `PrintLine` 函数打印到文件时，最右侧的打印位置是输出文件的当前宽度，可以使用 `FileWidth` 函数进行设置。</span><span class="sxs-lookup"><span data-stu-id="306d5-2904">When you use the `Print` or `PrintLine` functions to print to files, the rightmost print position is the current width of the output file, which you can set using the `FileWidth` function.</span></span>  
  
 <span data-ttu-id="306d5-2905">`TAB` 函数还可用于 `WriteLine` 函数。</span><span class="sxs-lookup"><span data-stu-id="306d5-2905">The `TAB` function can also be used with the `WriteLine` function.</span></span> <span data-ttu-id="306d5-2906">它不能与 <xref:System.Diagnostics.Debug.WriteLine%2A?displayProperty=nameWithType> 或 <xref:System.Console.WriteLine%2A?displayProperty=nameWithType>一起使用。</span><span class="sxs-lookup"><span data-stu-id="306d5-2906">It cannot be used with <xref:System.Diagnostics.Debug.WriteLine%2A?displayProperty=nameWithType> or <xref:System.Console.WriteLine%2A?displayProperty=nameWithType>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="306d5-2907">请确保表格列的宽度足以容纳宽信。</span><span class="sxs-lookup"><span data-stu-id="306d5-2907">Make sure your tabular columns are wide enough to contain wide letters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="306d5-2908">此示例使用 `TAB` 函数将输出定位于文件和**输出**窗口中。</span><span class="sxs-lookup"><span data-stu-id="306d5-2908">This example uses the `TAB` function to position output in a file and in the **Output** window.</span></span>  
  
 [!code-vb[VbVbalrCatRef#37](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#37)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileWidth(System.Int32,System.Int32)" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/operators/mod-operator"><span data-ttu-id="306d5-2909">Mod 运算符 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="306d5-2909">Mod Operator (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Unlock">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="306d5-2910">控制其他进程对使用 <see langword="Open" /> 函数打开的文件的全部或部分的访问。</span><span class="sxs-lookup"><span data-stu-id="306d5-2910">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span></span> <span data-ttu-id="306d5-2911">与 <see langword="My" /> 和 <see langword="Lock" /> 相比，<see langword="Unlock" /> 功能在文件 I/O 操作方面可为您提供更高的效率和更好的性能。</span><span class="sxs-lookup"><span data-stu-id="306d5-2911">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span></span> <span data-ttu-id="306d5-2912">有关详细信息，请参阅 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="306d5-2912">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Unlock">
      <MemberSignature Language="C#" Value="public static void Unlock (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Unlock(int32 FileNumber) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Unlock(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Unlock (FileNumber As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Unlock(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member Unlock : int -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Unlock FileNumber" />
      <MemberSignature Language="ILAsm" Value=".method public static void Unlock(int32 FileNumber) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="306d5-2913">必需。</span><span class="sxs-lookup"><span data-stu-id="306d5-2913">Required.</span></span> <span data-ttu-id="306d5-2914">任何有效文件数。</span><span class="sxs-lookup"><span data-stu-id="306d5-2914">Any valid file number.</span></span></param>
        <summary><span data-ttu-id="306d5-2915">控制其他进程对使用 <see langword="Open" /> 函数打开的文件的全部或部分的访问。</span><span class="sxs-lookup"><span data-stu-id="306d5-2915">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span></span> <span data-ttu-id="306d5-2916">与 <see langword="My" /> 和 <see langword="Lock" /> 相比，<see langword="Unlock" /> 功能在文件 I/O 操作方面可为您提供更高的效率和更好的性能。</span><span class="sxs-lookup"><span data-stu-id="306d5-2916">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span></span> <span data-ttu-id="306d5-2917">有关详细信息，请参阅 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="306d5-2917">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="306d5-2918">`Lock` 和 `Unlock` 函数在多个进程可能需要访问同一文件的环境中使用。</span><span class="sxs-lookup"><span data-stu-id="306d5-2918">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="306d5-2919">`Lock` 和 `Unlock` 函数始终成对使用。</span><span class="sxs-lookup"><span data-stu-id="306d5-2919">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="306d5-2920">`Lock` 和 `Unlock` 的参数必须完全相同。</span><span class="sxs-lookup"><span data-stu-id="306d5-2920">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="306d5-2921">如果未提供 `Record`或 `FromRecord` 和 `ToRecord`，则锁定将用于整个文件。</span><span class="sxs-lookup"><span data-stu-id="306d5-2921">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="306d5-2922">如果指定 "单独 `Record`"，则将锁定/解锁单个记录。</span><span class="sxs-lookup"><span data-stu-id="306d5-2922">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="306d5-2923">如果文件已打开以进行顺序输入或输出，`Lock` 和 `Unlock` 会影响整个文件，而不考虑 `FromRecord` 和`ToRecord`指定的范围。</span><span class="sxs-lookup"><span data-stu-id="306d5-2923">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="306d5-2924">此示例演示如何使用 `Lock` 和 `Unlock` 函数。</span><span class="sxs-lookup"><span data-stu-id="306d5-2924">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="306d5-2925">此示例假定 `People.txt` 是包含结构 `Person`的记录的文件。</span><span class="sxs-lookup"><span data-stu-id="306d5-2925">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="306d5-2926">文件模式无效。</span><span class="sxs-lookup"><span data-stu-id="306d5-2926">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/file-access"><span data-ttu-id="306d5-2927">使用 Visual Basic 访问文件</span><span class="sxs-lookup"><span data-stu-id="306d5-2927">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Unlock">
      <MemberSignature Language="C#" Value="public static void Unlock (int FileNumber, long Record);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Unlock(int32 FileNumber, int64 Record) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Unlock(System.Int32,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Unlock (FileNumber As Integer, Record As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Unlock(int FileNumber, long Record);" />
      <MemberSignature Language="F#" Value="static member Unlock : int * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Unlock (FileNumber, Record)" />
      <MemberSignature Language="ILAsm" Value=".method public static void Unlock(int32 FileNumber, int64 Record) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Record" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="306d5-2928">必需。</span><span class="sxs-lookup"><span data-stu-id="306d5-2928">Required.</span></span> <span data-ttu-id="306d5-2929">任何有效文件数。</span><span class="sxs-lookup"><span data-stu-id="306d5-2929">Any valid file number.</span></span></param>
        <param name="Record"><span data-ttu-id="306d5-2930">可选。</span><span class="sxs-lookup"><span data-stu-id="306d5-2930">Optional.</span></span> <span data-ttu-id="306d5-2931">唯一要锁定或取消锁定的记录号或字节数</span><span class="sxs-lookup"><span data-stu-id="306d5-2931">Number of the only record or byte to lock or unlock</span></span></param>
        <summary><span data-ttu-id="306d5-2932">控制其他进程对使用 <see langword="Open" /> 函数打开的文件的全部或部分的访问。</span><span class="sxs-lookup"><span data-stu-id="306d5-2932">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span></span> <span data-ttu-id="306d5-2933">与 <see langword="My" /> 和 <see langword="Lock" /> 相比，<see langword="Unlock" /> 功能在文件 I/O 操作方面可为您提供更高的效率和更好的性能。</span><span class="sxs-lookup"><span data-stu-id="306d5-2933">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span></span> <span data-ttu-id="306d5-2934">有关详细信息，请参阅 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="306d5-2934">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="306d5-2935">`Lock` 和 `Unlock` 函数在多个进程可能需要访问同一文件的环境中使用。</span><span class="sxs-lookup"><span data-stu-id="306d5-2935">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="306d5-2936">`Lock` 和 `Unlock` 函数始终成对使用。</span><span class="sxs-lookup"><span data-stu-id="306d5-2936">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="306d5-2937">`Lock` 和 `Unlock` 的参数必须完全相同。</span><span class="sxs-lookup"><span data-stu-id="306d5-2937">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="306d5-2938">如果未提供 `Record`或 `FromRecord` 和 `ToRecord`，则锁定将用于整个文件。</span><span class="sxs-lookup"><span data-stu-id="306d5-2938">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="306d5-2939">如果指定 "单独 `Record`"，则将锁定/解锁单个记录。</span><span class="sxs-lookup"><span data-stu-id="306d5-2939">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="306d5-2940">如果文件已打开以进行顺序输入或输出，`Lock` 和 `Unlock` 会影响整个文件，而不考虑 `FromRecord` 和`ToRecord`指定的范围。</span><span class="sxs-lookup"><span data-stu-id="306d5-2940">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="306d5-2941">此示例演示如何使用 `Lock` 和 `Unlock` 函数。</span><span class="sxs-lookup"><span data-stu-id="306d5-2941">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="306d5-2942">此示例假定 `People.txt` 是包含结构 `Person`的记录的文件。</span><span class="sxs-lookup"><span data-stu-id="306d5-2942">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="306d5-2943">文件模式无效。</span><span class="sxs-lookup"><span data-stu-id="306d5-2943">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/file-access"><span data-ttu-id="306d5-2944">使用 Visual Basic 访问文件</span><span class="sxs-lookup"><span data-stu-id="306d5-2944">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Unlock">
      <MemberSignature Language="C#" Value="public static void Unlock (int FileNumber, long FromRecord, long ToRecord);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Unlock(int32 FileNumber, int64 FromRecord, int64 ToRecord) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Unlock(System.Int32,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Unlock (FileNumber As Integer, FromRecord As Long, ToRecord As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Unlock(int FileNumber, long FromRecord, long ToRecord);" />
      <MemberSignature Language="F#" Value="static member Unlock : int * int64 * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Unlock (FileNumber, FromRecord, ToRecord)" />
      <MemberSignature Language="ILAsm" Value=".method public static void Unlock(int32 FileNumber, int64 FromRecord, int64 ToRecord) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="FromRecord" Type="System.Int64" />
        <Parameter Name="ToRecord" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="306d5-2945">必需。</span><span class="sxs-lookup"><span data-stu-id="306d5-2945">Required.</span></span> <span data-ttu-id="306d5-2946">任何有效文件数。</span><span class="sxs-lookup"><span data-stu-id="306d5-2946">Any valid file number.</span></span></param>
        <param name="FromRecord"><span data-ttu-id="306d5-2947">可选。</span><span class="sxs-lookup"><span data-stu-id="306d5-2947">Optional.</span></span> <span data-ttu-id="306d5-2948">第一个要锁定或取消锁定的记录号或字节数。</span><span class="sxs-lookup"><span data-stu-id="306d5-2948">Number of the first record or byte to lock or unlock.</span></span></param>
        <param name="ToRecord"><span data-ttu-id="306d5-2949">可选。</span><span class="sxs-lookup"><span data-stu-id="306d5-2949">Optional.</span></span> <span data-ttu-id="306d5-2950">最后一个要锁定或取消锁定的记录号或字节数。</span><span class="sxs-lookup"><span data-stu-id="306d5-2950">Number of the last record or byte to lock or unlock.</span></span></param>
        <summary><span data-ttu-id="306d5-2951">控制其他进程对使用 <see langword="Open" /> 函数打开的文件的全部或部分的访问。</span><span class="sxs-lookup"><span data-stu-id="306d5-2951">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span></span> <span data-ttu-id="306d5-2952">与 <see langword="My" /> 和 <see langword="Lock" /> 相比，<see langword="Unlock" /> 功能在文件 I/O 操作方面可为您提供更高的效率和更好的性能。</span><span class="sxs-lookup"><span data-stu-id="306d5-2952">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span></span> <span data-ttu-id="306d5-2953">有关详细信息，请参阅 <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />。</span><span class="sxs-lookup"><span data-stu-id="306d5-2953">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="306d5-2954">`Lock` 和 `Unlock` 函数在多个进程可能需要访问同一文件的环境中使用。</span><span class="sxs-lookup"><span data-stu-id="306d5-2954">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="306d5-2955">`Lock` 和 `Unlock` 函数始终成对使用。</span><span class="sxs-lookup"><span data-stu-id="306d5-2955">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="306d5-2956">`Lock` 和 `Unlock` 的参数必须完全相同。</span><span class="sxs-lookup"><span data-stu-id="306d5-2956">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="306d5-2957">如果未提供 `Record`或 `FromRecord` 和 `ToRecord`，则锁定将用于整个文件。</span><span class="sxs-lookup"><span data-stu-id="306d5-2957">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="306d5-2958">如果指定 "单独 `Record`"，则将锁定/解锁单个记录。</span><span class="sxs-lookup"><span data-stu-id="306d5-2958">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="306d5-2959">如果文件已打开以进行顺序输入或输出，`Lock` 和 `Unlock` 会影响整个文件，而不考虑 `FromRecord` 和`ToRecord`指定的范围。</span><span class="sxs-lookup"><span data-stu-id="306d5-2959">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="306d5-2960">此示例演示如何使用 `Lock` 和 `Unlock` 函数。</span><span class="sxs-lookup"><span data-stu-id="306d5-2960">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="306d5-2961">此示例假定 `People.txt` 是包含结构 `Person`的记录的文件。</span><span class="sxs-lookup"><span data-stu-id="306d5-2961">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="306d5-2962">文件模式无效。</span><span class="sxs-lookup"><span data-stu-id="306d5-2962">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/file-access"><span data-ttu-id="306d5-2963">使用 Visual Basic 访问文件</span><span class="sxs-lookup"><span data-stu-id="306d5-2963">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (int FileNumber, params object[] Output);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(int32 FileNumber, object[] Output) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub Write (FileNumber As Integer, ParamArray Output As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(int FileNumber, ... cli::array &lt;System::Object ^&gt; ^ Output);" />
      <MemberSignature Language="F#" Value="static member Write : int * obj[] -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Write (FileNumber, Output)" />
      <MemberSignature Language="ILAsm" Value=".method public static void Write(int32 FileNumber, object[] Output) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Output" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="net-5.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="306d5-2964">必需。</span><span class="sxs-lookup"><span data-stu-id="306d5-2964">Required.</span></span> <span data-ttu-id="306d5-2965">包含任何有效文件数的 <see langword="Integer" /> 表达式。</span><span class="sxs-lookup"><span data-stu-id="306d5-2965">An <see langword="Integer" /> expression that contains any valid file number.</span></span></param>
        <param name="Output"><span data-ttu-id="306d5-2966">可选。</span><span class="sxs-lookup"><span data-stu-id="306d5-2966">Optional.</span></span> <span data-ttu-id="306d5-2967">要写入文件的一个或多个由逗号分隔的表达式。</span><span class="sxs-lookup"><span data-stu-id="306d5-2967">One or more comma-delimited expressions to write to a file.</span></span></param>
        <summary><span data-ttu-id="306d5-2968">将数据写入一个顺序文件。</span><span class="sxs-lookup"><span data-stu-id="306d5-2968">Writes data to a sequential file.</span></span> <span data-ttu-id="306d5-2969">通常使用 <see langword="Input" /> 从文件中读取使用 <see langword="Write" /> 编写的数据。</span><span class="sxs-lookup"><span data-stu-id="306d5-2969">Data written with <see langword="Write" /> is usually read from a file by using <see langword="Input" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="306d5-2970">提供 `Write` 和 `WriteLine` 函数是为了向后兼容，可能会影响性能。</span><span class="sxs-lookup"><span data-stu-id="306d5-2970">The `Write` and `WriteLine` functions are provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="306d5-2971">对于非旧版应用程序，`My.Computer.FileSystem` 对象提供更好的性能。</span><span class="sxs-lookup"><span data-stu-id="306d5-2971">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="306d5-2972">有关详细信息，请参阅[使用 Visual Basic 进行文件访问](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/file-access)。</span><span class="sxs-lookup"><span data-stu-id="306d5-2972">For more information, see [File Access with Visual Basic](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/file-access).</span></span>  
  
 <span data-ttu-id="306d5-2973">如果省略 `Output`，则会在文件中打印一个空行。</span><span class="sxs-lookup"><span data-stu-id="306d5-2973">If you omit `Output`, a blank line is printed to the file.</span></span> <span data-ttu-id="306d5-2974">多个表达式可以用逗号分隔。</span><span class="sxs-lookup"><span data-stu-id="306d5-2974">Multiple expressions can be separated with a comma.</span></span>  
  
 <span data-ttu-id="306d5-2975">与 `Print` 函数不同，`Write` 函数在将字符串写入到文件中的项和引号之间插入逗号。</span><span class="sxs-lookup"><span data-stu-id="306d5-2975">Unlike the `Print` function, the `Write` function inserts commas between items and quotation marks around strings as they are written to the file.</span></span> <span data-ttu-id="306d5-2976">不需要在列表中放置显式分隔符。</span><span class="sxs-lookup"><span data-stu-id="306d5-2976">You do not have to put explicit delimiters in the list.</span></span> <span data-ttu-id="306d5-2977">当使用 `Write` 将数据写入文件时，仅支持数值、`Boolean`、日期、null 和 `Error` 数据格式。</span><span class="sxs-lookup"><span data-stu-id="306d5-2977">When `Write` is used to write data to a file, only numeric, `Boolean`, date, null, and `Error` data formats are supported.</span></span> <span data-ttu-id="306d5-2978">遵循以下通用假设，这样无论区域设置如何，都可以使用 `Input`读取和正确地解释数据：</span><span class="sxs-lookup"><span data-stu-id="306d5-2978">The following universal assumptions are followed so the data can always be read and correctly interpreted using `Input`, regardless of locale:</span></span>  
  
-   <span data-ttu-id="306d5-2979">始终使用句点作为小数点分隔符来编写数值数据。</span><span class="sxs-lookup"><span data-stu-id="306d5-2979">Numeric data is always written using the period as the decimal separator.</span></span>  
  
-   <span data-ttu-id="306d5-2980">对于 `Boolean` 的数据，将打印 `#TRUE#` 或 `#FALSE#`。</span><span class="sxs-lookup"><span data-stu-id="306d5-2980">For `Boolean` data, either `#TRUE#` or `#FALSE#` is printed.</span></span> <span data-ttu-id="306d5-2981">不会转换 `True` 和 `False` 关键字，无论区域设置如何。</span><span class="sxs-lookup"><span data-stu-id="306d5-2981">The `True` and `False` keywords are not translated, regardless of locale.</span></span>  
  
-   <span data-ttu-id="306d5-2982">使用通用日期格式将数据写入文件。</span><span class="sxs-lookup"><span data-stu-id="306d5-2982">Date data is written to the file using the universal date format.</span></span> <span data-ttu-id="306d5-2983">当日期或时间部分缺失或为零时，只将提供的部分写入文件中。</span><span class="sxs-lookup"><span data-stu-id="306d5-2983">When either the date or the time component is missing or zero, only the part provided is written to the file.</span></span>  
  
-   <span data-ttu-id="306d5-2984">如果 `Output` 数据为空，则不会向文件写入任何内容。</span><span class="sxs-lookup"><span data-stu-id="306d5-2984">Nothing is written to the file if `Output` data is empty.</span></span> <span data-ttu-id="306d5-2985">但对于空数据，将写入 `#NULL#`。</span><span class="sxs-lookup"><span data-stu-id="306d5-2985">However, for null data, `#NULL#` is written.</span></span>  
  
-   <span data-ttu-id="306d5-2986">对于 `Error` 数据，输出显示为 `#ERROR errorcode#`。</span><span class="sxs-lookup"><span data-stu-id="306d5-2986">For `Error` data, the output appears as `#ERROR errorcode#`.</span></span> <span data-ttu-id="306d5-2987">无论区域设置如何，都不会转换 `Error` 关键字。</span><span class="sxs-lookup"><span data-stu-id="306d5-2987">The `Error` keyword is not translated, regardless of locale.</span></span>  
  
 <span data-ttu-id="306d5-2988">`WriteLine` 在将 `Output` 中的最后一个字符写入文件后，插入一个换行符（即回车符/换行符，或 `Chr(13) + Chr(10)`）。</span><span class="sxs-lookup"><span data-stu-id="306d5-2988">`WriteLine` inserts a newline character (that is, a carriage return/line feed, or `Chr(13) + Chr(10)`), after it has written the final character in `Output` to the file.</span></span>  
  
 <span data-ttu-id="306d5-2989">您可以通过使用双引号或 "" 在字符串中嵌入引号。</span><span class="sxs-lookup"><span data-stu-id="306d5-2989">You can embed quotation marks in a string by using double quotation marks, or "".</span></span> <span data-ttu-id="306d5-2990">例如，</span><span class="sxs-lookup"><span data-stu-id="306d5-2990">For example,</span></span>  
  
 [!code-vb[VbVbalrCatRef#63](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#63)]  
  
 <span data-ttu-id="306d5-2991">返回值为 `Double quotation marks aren't "difficult" to handle`的字符串。</span><span class="sxs-lookup"><span data-stu-id="306d5-2991">returns a string with the value of `Double quotation marks aren't "difficult" to handle`.</span></span>  
  
 <span data-ttu-id="306d5-2992">使用 `Write` 或 `WriteLine` 函数写入文件需要从 `FileIOPermissionAccess` 枚举 `Append` 访问。</span><span class="sxs-lookup"><span data-stu-id="306d5-2992">Writing to a file by using the `Write` or `WriteLine` functions requires `Append` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="306d5-2993">有关详细信息，请参阅 <xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="306d5-2993">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="306d5-2994">此示例使用 `Write` 函数将原始数据写入顺序文件。</span><span class="sxs-lookup"><span data-stu-id="306d5-2994">This example uses the `Write` function to write raw data to a sequential file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#64](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#64)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="306d5-2995">文件模式无效。</span><span class="sxs-lookup"><span data-stu-id="306d5-2995">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Input" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/file-access"><span data-ttu-id="306d5-2996">使用 Visual Basic 访问文件</span><span class="sxs-lookup"><span data-stu-id="306d5-2996">File Access with Visual Basic</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files"><span data-ttu-id="306d5-2997">如何：在 Visual Basic 中向文件内写入文本</span><span class="sxs-lookup"><span data-stu-id="306d5-2997">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter"><span data-ttu-id="306d5-2998">如何：使用 Streamwriter （Visual Basic）将文本写入文件</span><span class="sxs-lookup"><span data-stu-id="306d5-2998">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (int FileNumber, params object[] Output);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(int32 FileNumber, object[] Output) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteLine (FileNumber As Integer, ParamArray Output As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(int FileNumber, ... cli::array &lt;System::Object ^&gt; ^ Output);" />
      <MemberSignature Language="F#" Value="static member WriteLine : int * obj[] -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.WriteLine (FileNumber, Output)" />
      <MemberSignature Language="ILAsm" Value=".method public static void WriteLine(int32 FileNumber, object[] Output) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Output" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="net-5.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="306d5-2999">必需。</span><span class="sxs-lookup"><span data-stu-id="306d5-2999">Required.</span></span> <span data-ttu-id="306d5-3000">包含任何有效文件数的 <see langword="Integer" /> 表达式。</span><span class="sxs-lookup"><span data-stu-id="306d5-3000">An <see langword="Integer" /> expression that contains any valid file number.</span></span></param>
        <param name="Output"><span data-ttu-id="306d5-3001">可选。</span><span class="sxs-lookup"><span data-stu-id="306d5-3001">Optional.</span></span> <span data-ttu-id="306d5-3002">要写入文件的一个或多个由逗号分隔的表达式。</span><span class="sxs-lookup"><span data-stu-id="306d5-3002">One or more comma-delimited expressions to write to a file.</span></span></param>
        <summary><span data-ttu-id="306d5-3003">将数据写入一个顺序文件。</span><span class="sxs-lookup"><span data-stu-id="306d5-3003">Writes data to a sequential file.</span></span> <span data-ttu-id="306d5-3004">通常使用 <see langword="Input" /> 从文件中读取使用 <see langword="Write" /> 编写的数据。</span><span class="sxs-lookup"><span data-stu-id="306d5-3004">Data written with <see langword="Write" /> is usually read from a file by using <see langword="Input" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="306d5-3005">提供 `Write` 和 `WriteLine` 函数是为了向后兼容，可能会影响性能。</span><span class="sxs-lookup"><span data-stu-id="306d5-3005">The `Write` and `WriteLine` functions are provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="306d5-3006">对于非旧版应用程序，`My.Computer.FileSystem` 对象提供更好的性能。</span><span class="sxs-lookup"><span data-stu-id="306d5-3006">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="306d5-3007">有关详细信息，请参阅[使用 Visual Basic 进行文件访问](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/file-access)。</span><span class="sxs-lookup"><span data-stu-id="306d5-3007">For more information, see [File Access with Visual Basic](/dotnet/visual-basic/developing-apps/programming/drives-directories-files/file-access).</span></span>  
  
 <span data-ttu-id="306d5-3008">如果省略 `Output`，则会在文件中打印一个空行。</span><span class="sxs-lookup"><span data-stu-id="306d5-3008">If you omit `Output`, a blank line is printed to the file.</span></span> <span data-ttu-id="306d5-3009">多个表达式可以用逗号分隔。</span><span class="sxs-lookup"><span data-stu-id="306d5-3009">Multiple expressions can be separated with a comma.</span></span>  
  
 <span data-ttu-id="306d5-3010">与 `Print` 函数不同，`Write` 函数在将字符串写入到文件中的项和引号之间插入逗号。</span><span class="sxs-lookup"><span data-stu-id="306d5-3010">Unlike the `Print` function, the `Write` function inserts commas between items and quotation marks around strings as they are written to the file.</span></span> <span data-ttu-id="306d5-3011">不需要在列表中放置显式分隔符。</span><span class="sxs-lookup"><span data-stu-id="306d5-3011">You do not have to put explicit delimiters in the list.</span></span> <span data-ttu-id="306d5-3012">当使用 `Write` 将数据写入文件时，仅支持数值、`Boolean`、日期、null 和 `Error` 数据格式。</span><span class="sxs-lookup"><span data-stu-id="306d5-3012">When `Write` is used to write data to a file, only numeric, `Boolean`, date, null, and `Error` data formats are supported.</span></span> <span data-ttu-id="306d5-3013">遵循以下通用假设，这样无论区域设置如何，都可以使用 `Input`读取和正确地解释数据：</span><span class="sxs-lookup"><span data-stu-id="306d5-3013">The following universal assumptions are followed so the data can always be read and correctly interpreted using `Input`, regardless of locale:</span></span>  
  
-   <span data-ttu-id="306d5-3014">始终使用句点作为小数点分隔符来编写数值数据。</span><span class="sxs-lookup"><span data-stu-id="306d5-3014">Numeric data is always written using the period as the decimal separator.</span></span>  
  
-   <span data-ttu-id="306d5-3015">对于 `Boolean` 的数据，将打印 `#TRUE#` 或 `#FALSE#`。</span><span class="sxs-lookup"><span data-stu-id="306d5-3015">For `Boolean` data, either `#TRUE#` or `#FALSE#` is printed.</span></span> <span data-ttu-id="306d5-3016">不会转换 `True` 和 `False` 关键字，无论区域设置如何。</span><span class="sxs-lookup"><span data-stu-id="306d5-3016">The `True` and `False` keywords are not translated, regardless of locale.</span></span>  
  
-   <span data-ttu-id="306d5-3017">使用通用日期格式将数据写入文件。</span><span class="sxs-lookup"><span data-stu-id="306d5-3017">Date data is written to the file using the universal date format.</span></span> <span data-ttu-id="306d5-3018">当日期或时间部分缺失或为零时，只将提供的部分写入文件中。</span><span class="sxs-lookup"><span data-stu-id="306d5-3018">When either the date or the time component is missing or zero, only the part provided is written to the file.</span></span>  
  
-   <span data-ttu-id="306d5-3019">如果 `Output` 数据为空，则不会向文件写入任何内容。</span><span class="sxs-lookup"><span data-stu-id="306d5-3019">Nothing is written to the file if `Output` data is empty.</span></span> <span data-ttu-id="306d5-3020">但对于空数据，将写入 `#NULL#`。</span><span class="sxs-lookup"><span data-stu-id="306d5-3020">However, for null data, `#NULL#` is written.</span></span>  
  
-   <span data-ttu-id="306d5-3021">对于 `Error` 数据，输出显示为 `#ERROR errorcode#`。</span><span class="sxs-lookup"><span data-stu-id="306d5-3021">For `Error` data, the output appears as `#ERROR errorcode#`.</span></span> <span data-ttu-id="306d5-3022">无论区域设置如何，都不会转换 `Error` 关键字。</span><span class="sxs-lookup"><span data-stu-id="306d5-3022">The `Error` keyword is not translated, regardless of locale.</span></span>  
  
 <span data-ttu-id="306d5-3023">`WriteLine` 在将 `Output` 中的最后一个字符写入文件后，插入一个换行符（即回车符/换行符，或 `Chr(13) + Chr(10)`）。</span><span class="sxs-lookup"><span data-stu-id="306d5-3023">`WriteLine` inserts a newline character (that is, a carriage return/line feed, or `Chr(13) + Chr(10)`), after it has written the final character in `Output` to the file.</span></span>  
  
 <span data-ttu-id="306d5-3024">您可以通过使用双引号或 "" 在字符串中嵌入引号。</span><span class="sxs-lookup"><span data-stu-id="306d5-3024">You can embed quotation marks in a string by using double quotation marks, or "".</span></span> <span data-ttu-id="306d5-3025">例如，</span><span class="sxs-lookup"><span data-stu-id="306d5-3025">For example,</span></span>  
  
 [!code-vb[VbVbalrCatRef#63](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#63)]  
  
 <span data-ttu-id="306d5-3026">返回值为 `Double quotation marks aren't "difficult" to handle`的字符串。</span><span class="sxs-lookup"><span data-stu-id="306d5-3026">returns a string with the value of `Double quotation marks aren't "difficult" to handle`.</span></span>  
  
 <span data-ttu-id="306d5-3027">使用 `Write` 或 `WriteLine` 函数写入文件需要从 `FileIOPermissionAccess` 枚举 `Append` 访问。</span><span class="sxs-lookup"><span data-stu-id="306d5-3027">Writing to a file by using the `Write` or `WriteLine` functions requires `Append` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="306d5-3028">有关详细信息，请参阅 <xref:System.Security.Permissions.FileIOPermissionAccess>。</span><span class="sxs-lookup"><span data-stu-id="306d5-3028">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="306d5-3029">此示例使用 `Write` 函数将原始数据写入顺序文件。</span><span class="sxs-lookup"><span data-stu-id="306d5-3029">This example uses the `Write` function to write raw data to a sequential file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#64](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#64)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Input" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/file-access"><span data-ttu-id="306d5-3030">使用 Visual Basic 访问文件</span><span class="sxs-lookup"><span data-stu-id="306d5-3030">File Access with Visual Basic</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files"><span data-ttu-id="306d5-3031">如何：在 Visual Basic 中向文件内写入文本</span><span class="sxs-lookup"><span data-stu-id="306d5-3031">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter"><span data-ttu-id="306d5-3032">如何：使用 Streamwriter （Visual Basic）将文本写入文件</span><span class="sxs-lookup"><span data-stu-id="306d5-3032">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>
