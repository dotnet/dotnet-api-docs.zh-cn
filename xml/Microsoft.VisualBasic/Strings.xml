<Type Name="Strings" FullName="Microsoft.VisualBasic.Strings">
  <Metadata><Meta Name="ms.openlocfilehash" Value="5f3d8336fb3091707bd9291d357c0518485ad5c9" /><Meta Name="ms.sourcegitcommit" Value="11d168140aa8fade0768c2a9dde3e3bcacfdfb7d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="05/27/2020" /><Meta Name="ms.locfileid" Value="83951660" /></Metadata><TypeSignature Language="C#" Value="public sealed class Strings" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Strings extends System.Object" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Strings" />
  <TypeSignature Language="VB.NET" Value="Public Module Strings" />
  <TypeSignature Language="C++ CLI" Value="public ref class Strings sealed" />
  <TypeSignature Language="F#" Value="type Strings = class" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Strings extends System.Object" FrameworkAlternate="netframework-1.1" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
    <AssemblyVersion>10.0.4.0</AssemblyVersion>
    <AssemblyVersion>10.0.5.0</AssemblyVersion>
    <AssemblyVersion>10.0.6.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netcore-3.1;net-5.0">
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><see langword="Strings" /> 模块包含用于执行字符串操作的过程。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此模块支持操作字符串的 Visual Basic 语言关键字和运行时库成员。  
  
   
  
## Examples  
 下面的示例演示如何在字符串所在的空间拆分字符串。  
  
 [!code-vb[VbVbalrStrings#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#13)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/string-manipulation-summary">字符串操作摘要</related>
    <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/">关键字 (Visual Basic)</related>
    <related type="Article" href="/dotnet/visual-basic/language-reference/runtime-library-members">Visual Basic 运行时库成员</related>
  </Docs>
  <Members>
    <MemberGroup MemberName="Asc">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>返回表示与某个字符相对应的字符代码的整数值。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Asc">
      <MemberSignature Language="C#" Value="public static int Asc (char String);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Asc(char String) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Asc(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function Asc (String As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Asc(char String);" />
      <MemberSignature Language="F#" Value="static member Asc : char -&gt; int" Usage="Microsoft.VisualBasic.Strings.Asc String" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Asc(char String) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String" Type="System.Char" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="String">必需。 任何有效的 <see langword="Char" /> 或 <see langword="String" /> 表达式。 如果 <paramref name="String" /> 是一个 <see langword="String" /> 表达式，则只将字符串的第一个字符用于输入。 如果 <paramref name="String" /> 是 <see langword="Nothing" /> 或不包含任何字符，将会出现 <see cref="T:System.ArgumentException" /> 错误。</param>
        <summary>返回表示与某个字符相对应的字符代码的整数值。</summary>
        <returns>与某个字符相对应的字符代码。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Asc` 返回输入字符的*代码点*或字符代码。 对于单字节字符集（SBCS）值，此值可以为0到255，对于双字节字符集（DBCS）值，为-32768 到32767。  
  
 `AscW` 返回输入字符的 Unicode 码位。 这可以是从0到65535的。 返回的值与当前线程的区域性和代码页设置无关。  
  
> [!NOTE]
>  Visual Basic 早期版本的 `AscB` 函数返回一个字节的代码，而不是一个字符。 它主要用于在双字节字符集（DBCS）应用程序中转换字符串。 所有 Visual Basic 2005 字符串均采用 Unicode 格式，`AscB` 不再受支持。  
  
   
  
## Examples  
 下面的示例使用 `Asc` 函数返回对应于每个字符串中第一个字母的 `Integer` 字符代码。  
  
 [!code-vb[VbVbalrFunctions#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="N:System.Globalization" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.TextInfo.ANSICodePage" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/functions/">函数 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Asc">
      <MemberSignature Language="C#" Value="public static int Asc (string String);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Asc(string String) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Asc(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Asc (String As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Asc(System::String ^ String);" />
      <MemberSignature Language="F#" Value="static member Asc : string -&gt; int" Usage="Microsoft.VisualBasic.Strings.Asc String" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Asc(string String) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="String">必需。 任何有效的 <see langword="Char" /> 或 <see langword="String" /> 表达式。 如果 <paramref name="String" /> 是一个 <see langword="String" /> 表达式，则只将字符串的第一个字符用于输入。 如果 <paramref name="String" /> 是 <see langword="Nothing" /> 或不包含任何字符，将会出现 <see cref="T:System.ArgumentException" /> 错误。</param>
        <summary>返回表示与某个字符相对应的字符代码的整数值。</summary>
        <returns>与某个字符相对应的字符代码。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Asc` 返回输入字符的*代码点*或字符代码。 对于单字节字符集（SBCS）值，此值可以为0到255，对于双字节字符集（DBCS）值，为-32768 到32767。  
  
 `AscW` 返回输入字符的 Unicode 码位。 这可以是从0到65535的。 返回的值与当前线程的区域性和代码页设置无关。  
  
> [!NOTE]
>  Visual Basic 早期版本的 `AscB` 函数返回一个字节的代码，而不是一个字符。 它主要用于在双字节字符集（DBCS）应用程序中转换字符串。 所有 Visual Basic 2005 字符串均采用 Unicode 格式，`AscB` 不再受支持。  
  
   
  
## Examples  
 下面的示例使用 `Asc` 函数返回对应于每个字符串中第一个字母的 `Integer` 字符代码。  
  
 [!code-vb[VbVbalrFunctions#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="N:System.Globalization" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.TextInfo.ANSICodePage" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/functions/">函数 (Visual Basic)</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="AscW">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>返回表示与某个字符相对应的字符代码的整数值。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AscW">
      <MemberSignature Language="C#" Value="public static int AscW (char String);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 AscW(char String) cil managed" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.AscW(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function AscW (String As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int AscW(char String);" />
      <MemberSignature Language="F#" Value="static member AscW : char -&gt; int" Usage="Microsoft.VisualBasic.Strings.AscW String" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 AscW(char String) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="String">必需。 任何有效的 <see langword="Char" /> 或 <see langword="String" /> 表达式。 如果 <paramref name="String" /> 是一个 <see langword="String" /> 表达式，则只将字符串的第一个字符用于输入。 如果 <paramref name="String" /> 是 <see langword="Nothing" /> 或不包含任何字符，将会出现 <see cref="T:System.ArgumentException" /> 错误。</param>
        <summary>返回表示与某个字符相对应的字符代码的整数值。</summary>
        <returns>与某个字符相对应的字符代码。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Asc` 返回输入字符的*代码点*或字符代码。 对于单字节字符集（SBCS）值，此值可以为0到255，对于双字节字符集（DBCS）值，为-32768 到32767。  
  
 `AscW` 返回输入字符的 Unicode 码位。 这可以是从0到65535的。 返回的值与当前线程的区域性和代码页设置无关。  
  
> [!NOTE]
>  Visual Basic 早期版本的 `AscB` 函数返回一个字节的代码，而不是一个字符。 它主要用于在双字节字符集（DBCS）应用程序中转换字符串。 所有 Visual Basic 2005 字符串均采用 Unicode 格式，`AscB` 不再受支持。  
  
   
  
## Examples  
 下面的示例使用 `Asc` 函数返回对应于每个字符串中第一个字母的 `Integer` 字符代码。  
  
 [!code-vb[VbVbalrFunctions#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="N:System.Globalization" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.TextInfo.ANSICodePage" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/functions/">函数 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="AscW">
      <MemberSignature Language="C#" Value="public static int AscW (string String);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 AscW(string String) cil managed" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.AscW(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function AscW (String As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int AscW(System::String ^ String);" />
      <MemberSignature Language="F#" Value="static member AscW : string -&gt; int" Usage="Microsoft.VisualBasic.Strings.AscW String" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 AscW(string String) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="String">必需。 任何有效的 <see langword="Char" /> 或 <see langword="String" /> 表达式。 如果 <paramref name="String" /> 是一个 <see langword="String" /> 表达式，则只将字符串的第一个字符用于输入。 如果 <paramref name="String" /> 是 <see langword="Nothing" /> 或不包含任何字符，将会出现 <see cref="T:System.ArgumentException" /> 错误。</param>
        <summary>返回表示与某个字符相对应的字符代码的整数值。</summary>
        <returns>与某个字符相对应的字符代码。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Asc` 返回输入字符的*代码点*或字符代码。 对于单字节字符集（SBCS）值，此值可以为0到255，对于双字节字符集（DBCS）值，为-32768 到32767。  
  
 `AscW` 返回输入字符的 Unicode 码位。 这可以是从0到65535的。 返回的值与当前线程的区域性和代码页设置无关。  
  
> [!NOTE]
>  Visual Basic 早期版本的 `AscB` 函数返回一个字节的代码，而不是一个字符。 它主要用于在双字节字符集（DBCS）应用程序中转换字符串。 所有 Visual Basic 2005 字符串均采用 Unicode 格式，`AscB` 不再受支持。  
  
   
  
## Examples  
 下面的示例使用 `Asc` 函数返回对应于每个字符串中第一个字母的 `Integer` 字符代码。  
  
 [!code-vb[VbVbalrFunctions#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="N:System.Globalization" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.TextInfo.ANSICodePage" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/functions/">函数 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Chr">
      <MemberSignature Language="C#" Value="public static char Chr (int CharCode);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char Chr(int32 CharCode) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Chr (CharCode As Integer) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char Chr(int CharCode);" />
      <MemberSignature Language="F#" Value="static member Chr : int -&gt; char" Usage="Microsoft.VisualBasic.Strings.Chr CharCode" />
      <MemberSignature Language="ILAsm" Value=".method public static char Chr(int32 CharCode) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="CharCode" Type="System.Int32" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="CharCode">必需。 <see langword="Integer" /> 表达式，表示字符的 <c>code point</c> 或字符代码。</param>
        <summary>返回与指定字符代码相关联的字符。</summary>
        <returns>与指定字符代码相关联的字符。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 接受的非对称范围 `CharCode` 会对 `Short` 和 `Integer`之间的存储差异进行补偿。 例如，-29183 是一个 `Short` 但 + 36353 是一个 `Integer`。 这也有助于与 Visual Basic 6.0 兼容。  
  
 `Chr` 使用 <xref:System.Text?displayProperty=nameWithType> 命名空间中的 <xref:System.Text.Encoding> 类来确定当前线程是否使用单字节字符集（SBCS）或双字节字符集（DBCS）。 然后，它会将 `CharCode` 视为适当集中的码位。 对于半角字符，范围可以为0到255，对于 DBCS 字符，范围为-32768 到65535。  
  
 返回的值取决于当前线程的代码页，该代码页包含在 <xref:System.Globalization> 命名空间中 <xref:System.Globalization.TextInfo> 类的 <xref:System.Globalization.TextInfo.ANSICodePage%2A> 属性中。 您可以通过指定 `System.Globalization.CultureInfo.CurrentCulture.TextInfo.ANSICodePage`来获取 <xref:System.Globalization.TextInfo.ANSICodePage%2A>。  
  
 `ChrW` 将 `CharCode` 为 Unicode 码位。 范围与当前线程的区域性和代码页设置无关。 从-32768 到-1 的值被视为与 + 32768 到 + 65535 范围内的值相同。  
  
 0到31之间的数字与标准的非打印 ASCII 代码相同。 例如，`Chr(10)` 返回换行符。  
  
> [!NOTE]
>  Visual Basic 早期版本中的 `ChrB` 函数返回单个字节。 它主要用于在双字节字符集（DBCS）应用程序中转换字符串。 Visual Basic 和 .NET Framework 中的所有字符串都采用 Unicode 格式，`ChrB` 不再受支持。  
  
   
  
## Examples  
 下面的示例使用 `Chr` 函数返回与指定字符代码关联的字符。  
  
 [!code-vb[VbVbalrStrings#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><see langword="Chr" /> 的 <paramref name="CharCode" /> &lt; 0 或 &gt; 255。</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Asc" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.AscW" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/string-manipulation-summary">字符串操作摘要</related>
      </Docs>
    </Member>
    <Member MemberName="ChrW">
      <MemberSignature Language="C#" Value="public static char ChrW (int CharCode);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char ChrW(int32 CharCode) cil managed" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function ChrW (CharCode As Integer) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char ChrW(int CharCode);" />
      <MemberSignature Language="F#" Value="static member ChrW : int -&gt; char" Usage="Microsoft.VisualBasic.Strings.ChrW CharCode" />
      <MemberSignature Language="ILAsm" Value=".method public static char ChrW(int32 CharCode) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="CharCode" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="CharCode">必需。 <see langword="Integer" /> 表达式，表示字符的 <c>code point</c> 或字符代码。</param>
        <summary>返回与指定字符代码相关联的字符。</summary>
        <returns>与指定字符代码相关联的字符。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 接受的非对称范围 `CharCode` 会对 `Short` 和 `Integer`之间的存储差异进行补偿。 例如，-29183 是一个 `Short` 但 + 36353 是一个 `Integer`。 这也有助于与 Visual Basic 6.0 兼容。  
  
 `Chr` 使用 <xref:System.Text?displayProperty=nameWithType> 命名空间中的 <xref:System.Text.Encoding> 类来确定当前线程是否使用单字节字符集（SBCS）或双字节字符集（DBCS）。 然后，它会将 `CharCode` 视为适当集中的码位。 对于半角字符，范围可以为0到255，对于 DBCS 字符，范围为-32768 到65535。  
  
 返回的值取决于当前线程的代码页，该代码页包含在 <xref:System.Globalization> 命名空间中 <xref:System.Globalization.TextInfo> 类的 <xref:System.Globalization.TextInfo.ANSICodePage%2A> 属性中。 您可以通过指定 `System.Globalization.CultureInfo.CurrentCulture.TextInfo.ANSICodePage`来获取 <xref:System.Globalization.TextInfo.ANSICodePage%2A>。  
  
 `ChrW` 将 `CharCode` 为 Unicode 码位。 范围与当前线程的区域性和代码页设置无关。 从-32768 到-1 的值被视为与 + 32768 到 + 65535 范围内的值相同。  
  
 0到31之间的数字与标准的非打印 ASCII 代码相同。 例如，`Chr(10)` 返回换行符。  
  
> [!NOTE]
>  Visual Basic 早期版本中的 `ChrB` 函数返回单个字节。 它主要用于在双字节字符集（DBCS）应用程序中转换字符串。 Visual Basic 和 .NET Framework 中的所有字符串都采用 Unicode 格式，`ChrB` 不再受支持。  
  
   
  
## Examples  
 下面的示例使用 `Chr` 函数返回与指定字符代码关联的字符。  
  
 [!code-vb[VbVbalrStrings#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><see langword="ChrW" /> 的 <paramref name="CharCode" /> &lt; -32768 或 &gt; 65535。</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Asc" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.AscW" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/string-manipulation-summary">字符串操作摘要</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Filter">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>返回一个从零开始的数组，该数组包含基于指定筛选条件的 <see langword="String" /> 数组的子集。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Filter">
      <MemberSignature Language="C#" Value="public static string[] Filter (object[] Source, string Match, bool Include = true, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string[] Filter(object[] Source, string Match, bool Include, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Filter(System.Object[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function Filter (Source As Object(), Match As String, Optional Include As Boolean = true, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As String()" />
      <MemberSignature Language="F#" Value="static member Filter : obj[] * string * bool * Microsoft.VisualBasic.CompareMethod -&gt; string[]" Usage="Microsoft.VisualBasic.Strings.Filter (Source, Match, Include, Compare)" />
      <MemberSignature Language="ILAsm" Value=".method public static string[] Filter(object[] Source, string Match, bool Include, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Source" Type="System.Object[]" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.1;net-5.0" />
        <Parameter Name="Match" Type="System.String" Index="1" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.1;net-5.0" />
        <Parameter Name="Include" Type="System.Boolean" Index="2" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.1;net-5.0" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod" Index="3" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.1;net-5.0">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="Source">必需。 要搜索的一维字符串数组。</param>
        <param name="Match">必需。 要搜索的字符串。</param>
        <param name="Include">可选。 <see langword="Boolean" /> 值，指示是返回包含还是排除 <paramref name="Match" /> 的子字符串。 如果 <paramref name="Include" /> 为 <see langword="True" />，则 <see langword="Filter" /> 函数返回将 <paramref name="Match" /> 作为子字符串包含在其中的数组的子集。 如果 <paramref name="Include" /> 为 <see langword="False" />，则 <see langword="Filter" /> 函数返回不将 <paramref name="Match" /> 作为子字符串包含在其中的数组的子集。</param>
        <param name="Compare">可选。 表示要使用的字符串比较类型的数值。 请参阅“设置”，以获取值。</param>
        <summary>返回一个从零开始的数组，该数组包含基于指定筛选条件的 <see langword="String" /> 数组的子集。</summary>
        <returns>一个从零开始的数组，该数组包含基于指定筛选条件的 <see langword="String" /> 数组的子集。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果在 `Source`中找不到 `Match` 的匹配项，则 `Filter` 函数将返回空数组。 如果 `Source` 设置为 `Nothing` 或不是一维数组，则会发生错误。  
  
 `Filter` 函数返回的数组包含的元素数足以包含匹配项的数目。  
  
 `Compare` 参数可以具有下列值。  
  
|一直|说明|  
|-|-|  
|一直|说明|  
|`CompareMethod.Binary`|执行二进制比较|  
|`CompareMethod.Text`|执行文本比较|  
  
   
  
## Examples  
 此示例演示如何使用 `Filter` 函数。  
  
 [!code-vb[VbVbalrStrings#24](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#24)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Source" /> 为 <see langword="Nothing" /> 或不是一维数组。</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/string-manipulation-summary">字符串操作摘要</related>
      </Docs>
    </Member>
    <Member MemberName="Filter">
      <MemberSignature Language="C#" Value="public static string[] Filter (string[] Source, string Match, bool Include = true, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string[] Filter(string[] Source, string Match, bool Include, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Filter(System.String[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function Filter (Source As String(), Match As String, Optional Include As Boolean = true, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As String()" />
      <MemberSignature Language="F#" Value="static member Filter : string[] * string * bool * Microsoft.VisualBasic.CompareMethod -&gt; string[]" Usage="Microsoft.VisualBasic.Strings.Filter (Source, Match, Include, Compare)" />
      <MemberSignature Language="ILAsm" Value=".method public static string[] Filter(string[] Source, string Match, bool Include, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Source" Type="System.String[]" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.1;net-5.0" />
        <Parameter Name="Match" Type="System.String" Index="1" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.1;net-5.0" />
        <Parameter Name="Include" Type="System.Boolean" Index="2" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.1;net-5.0" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod" Index="3" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.1;net-5.0">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="Source">必需。 要搜索的一维字符串数组。</param>
        <param name="Match">必需。 要搜索的字符串。</param>
        <param name="Include">可选。 <see langword="Boolean" /> 值，指示是返回包含还是排除 <paramref name="Match" /> 的子字符串。 如果 <paramref name="Include" /> 为 <see langword="True" />，则 <see langword="Filter" /> 函数返回将 <paramref name="Match" /> 作为子字符串包含在其中的数组的子集。 如果 <paramref name="Include" /> 为 <see langword="False" />，则 <see langword="Filter" /> 函数返回不将 <paramref name="Match" /> 作为子字符串包含在其中的数组的子集。</param>
        <param name="Compare">可选。 表示要使用的字符串比较类型的数值。 请参阅“设置”，以获取值。</param>
        <summary>返回一个从零开始的数组，该数组包含基于指定筛选条件的 <see langword="String" /> 数组的子集。</summary>
        <returns>一个从零开始的数组，该数组包含基于指定筛选条件的 <see langword="String" /> 数组的子集。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果在 `Source`中找不到 `Match` 的匹配项，则 `Filter` 函数将返回空数组。 如果 `Source` 设置为 `Nothing` 或不是一维数组，则会发生错误。  
  
 `Filter` 函数返回的数组包含的元素数足以包含匹配项的数目。  
  
 `Compare` 参数可以具有下列值。  
  
|一直|说明|  
|-|-|  
|`CompareMethod.Binary`|执行二进制比较|  
|`CompareMethod.Text`|执行文本比较|  
  
   
  
## Examples  
 此示例演示如何使用 `Filter` 函数。  
  
 [!code-vb[VbVbalrStrings#24](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#24)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Source" /> 为 <see langword="Nothing" /> 或不是一维数组。</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/string-manipulation-summary">字符串操作摘要</related>
      </Docs>
    </Member>
    <Member MemberName="Format">
      <MemberSignature Language="C#" Value="public static string Format (object Expression, string Style = &quot;&quot;);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Format(object Expression, string Style) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Format (Expression As Object, Optional Style As String = &quot;&quot;) As String" />
      <MemberSignature Language="F#" Value="static member Format : obj * string -&gt; string" Usage="Microsoft.VisualBasic.Strings.Format (Expression, Style)" />
      <MemberSignature Language="ILAsm" Value=".method public static string Format(object Expression, string Style) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0" />
        <Parameter Name="Style" Type="System.String" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="Expression">必需。 任何有效的表达式。</param>
        <param name="Style">可选。 一个有效的命名或用户定义的格式 <see langword="String" /> 表达式。</param>
        <summary>返回根据格式 <see langword="String" /> 表达式中包含的指令设置格式的字符串。</summary>
        <returns>根据格式 <see langword="String" /> 表达式中包含的指令设置格式的字符串。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.String.Format%2A?displayProperty=nameWithType> 方法还提供了类似的功能。  
  
 如果要设置非本地化数字字符串的格式，则应使用用户定义的数字格式，以确保获得所需的外观。  
  
 如果尝试在不指定 `Style`的情况下设置数字的格式，则 `Format` 函数会提供与 `Str` 函数类似的功能，但它可以识别出的功能。 但是，使用 `Format` 函数为字符串设置格式的正数不包括为值的符号保留的前导空格;使用 `Str` 函数转换的函数将保留前导空格。  
  
## <a name="different-formats-for-different-numeric-values"></a>不同数值的不同格式  
 用户定义的数字格式表达式可以包含一至三个部分（各部分之间用分号分隔）。 如果 `Format` 函数的 `Style` 参数包含预定义的数字格式之一，则只允许使用一个部分。  
  
|如果您使用|下面是查询结果。|  
|-|-|  
|只有一部分|格式表达式应用于所有值。|  
|两部分|第一部分应用于正值和零；第二部分应用于负值。|  
|三部分|第一部分应用于正值，第二部分应用于负值，第三部分应用于零。|  
  
 下面的示例包含两个部分：第一个部分定义正值和零的格式;第二部分定义负值的格式。 由于 `Format` 函数的 `Style` 参数使用字符串，因此它用引号引起来。  
  
 [!code-vb[VbVbalrStrings#18](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#18)]  
  
 如果包含两个连续的分号，则缺少的部分用正值的格式显示。 例如，以下格式使用第一部分中的格式显示正值和负值，如果值为零，则显示 `Zero`。  
  
 [!code-vb[VbVbalrStrings#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#19)]  
  
## <a name="predefined-numeric-formats"></a>预定义的数字格式  
 下表标识预定义数字格式的名称。 它们可被名称用作 `Format` 函数的 `Style` 参数：  
  
|格式名|说明|  
|-|-|  
|`General Number`、`G` 或 `g`|显示不带千位分隔符的数字。<br /><br /> 例如，`Format(&H3FA, "g")` 返回 `1018`。|  
|`Currency`、`C` 或 `c`|如果适用，则显示带千位分隔符的数字;显示小数点分隔符右侧的两个数字。 输出基于系统区域设置。<br /><br /> 例如，`Format(1234567, "c")` 返回 `$1,234,567.00`。|  
|`Fixed`、`F` 或 `f`|小数点分隔符左侧至少显示一个数字，右侧至少显示两个数字。<br /><br /> 例如，`Format(1234567, "f")` 返回 `1234567.00`。|  
|`Standard`、`N` 或 `n`|显示带千位分隔符的数字，小数点分隔符左侧至少有一个数字，右侧至少有两个数字。<br /><br /> 例如，`Format(1234567, "n")` 返回 `1,234,567.00`。|  
|`Percent`|将数字乘以 100 后显示，并在紧右侧追加百分号 (%)；小数点分隔符右侧总是显示两位。<br /><br /> 例如，`Format(0.4744, "Percent")` 返回 `47.44%`。|  
|`P`、或 `p`|将带有千位分隔符的数字乘以 100 后显示，并在右侧追加百分号 (%) 并用单个空格分隔；小数点分隔符右侧总是显示两位。<br /><br /> 例如，`Format(0.80345, "p")` 返回 `80.35 %`。|  
|`Scientific`|使用标准的科学记数法，并且提供两个有效位数。<br /><br /> 例如，`Format(1234567, "Scientific")` 返回 `1.23E+06`。|  
|`E`、或 `e`|使用标准的科学记数法，并且提供六个有效位数。<br /><br /> 例如，`Format(1234567, "e")` 返回 `1.234567e+006`。|  
|`D`、或 `d`|将数字显示为字符串，该字符串包含采用十进制（以 10 为底）格式的数字值。 仅整型类型（`Byte`、`Short`、`Integer``Long`）支持此选项。<br /><br /> 例如，`Format(&H7F, "d")` 返回 `127`。|  
|`X`、或 `x`|将数字显示为字符串，该字符串包含采用十六进制（以 16 为底）格式的数字值。 仅整型类型（`Byte`、`Short`、`Integer``Long`）支持此选项。<br /><br /> 例如，`Format(127, "x")` 返回 `7f`。|  
|`Yes/No`|如果 number 为0，则显示 `No`;否则，将显示 `Yes`。<br /><br /> 例如，`Format(0, "Yes/No")` 返回 `No`。|  
|`True/False`|如果 number 为0，则显示 `False`;否则，将显示 `True`。<br /><br /> 例如，`Format(1, "True/False")` 返回 `True`。|  
|`On/Off`|如果 number 为0，则显示 `Off`;否则，将显示 `On`。<br /><br /> 例如，`Format(1, "On/Off")` 返回 `On`。|  
  
### <a name="smart-device-developer-notes"></a>智能设备开发人员说明  
 不支持 `Yes/No`、`True/False`和 `On/Off` 格式。  
  
## <a name="user-defined-numeric-formats"></a>用户定义的数字格式  
 下表标识了可用于创建用户定义的数字格式的字符。 这些函数可用于生成 `Format` 函数的 `Style` 参数：  
  
|字符|说明|  
|-|-|  
|无|显示不带格式的数字。|  
|(`0`)|数字占位符。 显示一个数字或一个零。 如果表达式在格式字符串中出现零的位置有一个数字，则显示它;否则，将在该位置显示零。<br /><br /> 如果数字的位数少于格式表达式中零的个数（不管在小数点的哪一侧），将显示前导零或尾随零。 如果小数点分隔符右侧的数字位数多于格式表达式中小数点分隔符右侧的零的个数，将对数字四舍五入，使其小数位数与零的个数一样多。 如果小数点分隔符左侧的数字位数多于格式表达式中小数点分隔符左侧的零的个数，则将显示多出的位数而不作任何修改。|  
|(`#`)|数字占位符。 显示一个数字或不显示任何内容。 如果表达式在格式字符串中出现 `#` 字符的位置有一个数字，则显示它;否则，不会在该位置显示任何内容。<br /><br /> 此符号的工作方式与 `0` 数字占位符相同，不同之处在于，如果数字的位数少于格式表达式中小数点分隔符任意一侧 `#` 字符，则不会显示前导零和尾随零。|  
|(`.`)|小数点占位符。 小数点占位符确定在小数点分隔符左侧和右侧显示几位数。 如果格式表达式仅包含此符号左侧的 `#` 字符，则为; 否则为。小于1的数字以小数点分隔符开头。 若要显示随小数显示的前导零，请使用零作为小数点分隔符左侧的第一个数字占位符。 在某些区域设置中，用逗号作为小数点分隔符。 在格式化输出中用作小数点占位符的实际字符取决于系统所识别的数字格式。 因此，在您的格式中应将句点用作小数点占位符，即使您位于使用逗号作为小数点占位符的区域设置中。 格式化字符串将以适合区域设置的正确格式显示。|  
|(`%`)|百分比占位符。 将表达式乘以 100。 将在格式字符串中出现的位置插入百分比字符（`%`）。|  
|(`,`)|千位分隔符。 千位分隔符将在小数点分隔符左侧具有四位或更多位数的数字中的千位和百位分隔开。 如果格式包含一个由数字占位符（`0` 或 `#`）包围的千位分隔符，则指定千位分隔符的标准用法。<br /><br /> 一个千位分隔符紧挨小数点分隔符的左侧（无论是否指定小数）或者作为字符串中最右侧的字符表示“通过除以 1000 来将数字按比例减小，并按需要四舍五入”。 小于1000但大于或等于500的数字显示为 `1`，小于500的数字显示为 `0`。 此位置有两个相邻千位分隔符表示按一百万倍的比例因子缩小，并且每增加一个分隔符表示另外缩小 1,000 倍。<br /><br /> 多个分隔符出现在紧挨小数点分隔符左侧或字符串最右侧位置被视为指定使用千位分隔符。 在某些区域设置中，用句点作为千位分隔符。 在格式化输出中用作千位分隔符的实际字符取决于您的系统所识别的数字格式。 因此，在您的格式中应将逗号用作千位分隔符，即使您位于使用句点作为千位分隔符的区域设置中。 格式化字符串将以适合区域设置的正确格式显示。<br /><br /> 例如，考虑以下三个格式字符串：<br /><br /> -   `"#,0."`，它使用千位分隔符将数字100000000的格式设置为字符串 "100000000"。<br />-   `"#0,."`，它使用系数为1000的缩放来将数字100000000的格式设置为字符串 "100000"。<br />-   `"#,0,."`，它使用千位分隔符并按1000进行缩放，以将数字100000000的格式设置为字符串 "100000"。|  
|(`:`)|时间分隔符。 在某些区域设置中，可能用其他字符表示时间分隔符。 在设置时间值的格式时，时间分隔符用于分隔小时、分钟和秒。 在格式化输出中用作时间分隔符的实际字符取决于您的系统设置。|  
|(`/`)|日期分隔符。 在某些区域设置中，可能用其他字符表示日期分隔符。 在设置日期值的格式时，日期分隔符用于分隔年、月和日。 在格式化输出中用作日期分隔符的实际字符取决于您的系统设置。|  
|(`E-``E+``e-``e+`)|科学记数法格式。 如果格式表达式在 `E-`、`E+`、`e-`或 `e+`的左侧至少包含一个数字占位符（`0` 或 `#`），则数字以科学记数格式显示，并在数字与其指数之间插入 `E` 或 `e`。 左侧的数字占位符的个数决定了指数中的数字个数。 使用 `E-` 或 `e-` 可在负指数的后面放置一个减号。 使用 `E+` 或 `e+` 可在负指数的后面放置一个减号，在正指数的后面放置一个加号。 还必须在该符号右侧包括数字占位符以获取正确的格式。|  
|`-` `+` `$` （）|文字字符。 这些字符将完全按格式字符串中所键入的形式显示。 若要显示其中一个字符以外的其他字符，请在该字符前加上一个反斜杠（`\`）或将其括在双引号（""）中。|  
|(`\`)|显示格式字符串中的下一个字符。 若要将具有特殊含义的字符显示为文字字符，请在该字符前加上一个反斜杠（`\`）。 反斜杠本身不显示。 使用反斜杠与将下一个字符放在双引号中的作用是相同的。 若要显示反斜杠，请使用两个反斜杠（`\\`）。<br /><br /> 不能显示为文字字符的字符示例包括日期格式和时间格式字符（`a``c`、`d`、`h`、`m`、`n`、`p`、`q`、`s`、`t`、`w`、`y`、`/`和 `:`）、数字格式字符（`#`、`0`、`%`、`E`、`e`、逗号和句点）以及字符串格式字符（`@`、`&`、`<`、`>`和 `!`）。|  
|(`"``ABC``"`)|显示双引号 (" ") 里面的字符串。 若要将字符串包含在代码内的样式参数中，必须使用 `Chr(34)` 将文本括起来（`34` 为引号（"）的字符代码）。|  
  
### <a name="legacy-code-example"></a>旧代码示例  
 下表包含用于表示数字的一些示例格式表达式。 （这些示例均假设您的系统区域设置为 "英语-美国"）第一列包含 `Format` 函数的 `Style` 参数的格式字符串;如果带格式的数据具有列标题中给定的值，则其他列包含生成的输出。  
  
|Format （`Style`）|“5”格式设置为|“-5”格式设置为|“0.5”格式设置为|  
|-|-|-|-|  
|`Zero-length string ("")`|`5`|`-5`|`0.5`|  
|`0`|`5`|`-5`|`1`|  
|`0.00`|`5.00`|`-5.00`|`0.50`|  
|`#,##0`|`5`|`-5`|`1`|  
|`$#,##0;($#,##0)`|`$5`|`($5)`|`$1`|  
|`$#,##0.00;($#,##0.00)`|`$5.00`|`($5.00)`|`$0.50`|  
|`0%`|`500%`|`-500%`|`50%`|  
|`0.00%`|`500.00%`|`-500.00%`|`50.00%`|  
|`0.00E+00`|`5.00E+00`|`-5.00E+00`|`5.00E-01`|  
|`0.00E-00`|`5.00E00`|`-5.00E00`|`5.00E-01`|  
  
## <a name="predefined-datetime-formats"></a>预定义日期/时间格式  
 下表标识预定义的日期和时间格式的名称。 它们可被名称用作 `Format` 函数的 style 参数：  
  
|格式名|说明|  
|-|-|  
|`General Date`、或 `G`|显示日期和/或时间。 例如，`3/12/2008 11:07:31 AM` 。 日期显示由您的应用程序的当前区域性值确定。|  
|`Long Date`、`Medium Date` 或 `D`|根据您的当前区域性的长日期格式显示日期。 例如，`Wednesday, March 12, 2008` 。|  
|`Short Date`、或 `d`|使用您的当前区域性的短日期格式显示日期。 例如，`3/12/2008` 。<br /><br /> `d` 字符以用户定义的日期格式显示日期。|  
|`Long Time`、`Medium Time` 或 `T`|使用您的当前区域性的长时间格式显示时间；通常包括小时、分钟和秒。 例如，`11:07:31 AM` 。|  
|`Short Time` 或 `t`|使用您的当前区域性的短时间格式显示时间。 例如，`11:07 AM` 。<br /><br /> `t` 字符以用户定义的时间格式显示使用12小时制的区域设置 `AM` 或 `PM` 值。|  
|`f`|根据您的当前区域性的格式显示长日期和短时间。 例如，`Wednesday, March 12, 2008 11:07 AM` 。|  
|`F`|根据您的当前区域性的格式显示长日期和长时间。 例如，`Wednesday, March 12, 2008 11:07:31 AM` 。|  
|`g`|根据您的当前区域性的格式显示短日期和短时间。 例如，`3/12/2008 11:07 AM` 。|  
|`M`、`m`|显示日期的月份和月中哪一天。 例如，`March 12` 。<br /><br /> `M` 字符以用户定义的日期格式显示月份。 `m` 字符以用户定义的时间格式显示分钟。|  
|`R`、`r`|根据 <xref:System.Globalization.DateTimeFormatInfo.RFC1123Pattern%2A> 属性设置日期的格式。 例如，`Wed, 12 Mar 2008 11:07:31 GMT` 。 带格式的日期不调整日期和时间的值。 在调用 `Format` 函数之前，必须将日期/时间值调整为 GMT。|  
|`s`|将日期和时间设置为可排序索引格式。 例如，`2008-03-12T11:07:31` 。<br /><br /> `s` 字符以用户定义的时间格式显示秒。|  
|`u`|将日期和时间设置为 GMT 可排序索引格式。 例如，`2008-03-12 11:07:31Z` 。|  
|`U`|将具有长日期和长时间的日期和时间设置为 GMT 格式。 例如，`Wednesday, March 12, 2008 6:07:31 PM` 。|  
|`Y`、`y`|将日期设置为年和月的格式。 例如，`March, 2008` 。<br /><br /> `Y` 和 `y` 字符以用户定义的日期格式显示年份。|  
  
 有关应用程序的当前区域性信息的详细信息，请参阅[在 Visual Basic 中区域性如何影响字符串](/dotnet/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings)。  
  
## <a name="user-defined-datetime-formats"></a>用户定义的日期/时间格式  
 下表显示可用于创建用户定义的日期/时间格式的字符。 与 Visual Basic 早期版本不同，这些格式字符区分大小写。  
  
|字符|说明|  
|-|-|  
|(`:`)|时间分隔符。 在某些区域设置中，可能用其他字符表示时间分隔符。 在设置时间值的格式时，时间分隔符用于分隔小时、分钟和秒。 在格式化输出中用作时间分隔符的实际字符取决于您应用程序的当前区域性值。|  
|(`/`)|日期分隔符。 在某些区域设置中，可能用其他字符表示日期分隔符。 在设置日期值的格式时，日期分隔符用于分隔年、月和日。 在格式化输出中用作日期分隔符的实际字符取决于您应用程序的当前区域性。|  
|(`%`)|用于指示应以单个字母格式读取后面的字符，而不考虑任何尾随字母。 此外，还用于指示以用户定义的格式读取单个字母格式。 有关其他详细信息，请参阅以下内容。|  
|`d`|将天显示为不带前导零的数字（例如 `1`）。 如果这是用户定义的数字格式中的唯一字符，则使用 `%d`。|  
|`dd`|将天显示为带前导零的数字（例如 `01`）。|  
|`ddd`|将天显示为缩写形式（例如 `Sun`）。|  
|`dddd`|将日期显示为全名（例如 `Sunday`）。|  
|`M`|将月显示为不带前导零的数字（例如，一月表示为 `1`）。 如果这是用户定义的数字格式中的唯一字符，则使用 `%M`。|  
|`MM`|将月显示为带前导零的数字（例如 `01/12/01`）。|  
|`MMM`|将月显示为缩写（例如 `Jan`）。|  
|`MMMM`|将月显示为完整的月份名称（例如 `January`）。|  
|`gg`|显示句点/年代字符串（例如 `A.D.`）。|  
|`h`|使用12小时制时钟将小时显示为不带前导零的数字（例如 `1:15:15 PM`）。 如果这是用户定义的数字格式中的唯一字符，则使用 `%h`。|  
|`hh`|使用12小时制时钟将小时显示为带前导零的数字（例如 `01:15:15 PM`）。|  
|`H`|使用24小时制将小时显示为不带前导零的数字（例如 `1:15:15`）。 如果这是用户定义的数字格式中的唯一字符，则使用 `%H`。|  
|`HH`|使用24小时制将小时显示为带前导零的数字（例如 `01:15:15`）。|  
|`m`|将分钟显示为不带前导零的数字（例如 `12:1:15`）。 如果这是用户定义的数字格式中的唯一字符，则使用 `%m`。|  
|`mm`|将分钟显示为带前导零的数字（例如 `12:01:15`）。|  
|`s`|将秒显示为不带前导零的数字（例如 `12:15:5`）。 如果这是用户定义的数字格式中的唯一字符，则使用 `%s`。|  
|`ss`|将秒显示为带前导零的数字（例如 `12:15:05`）。|  
|`f`|显示秒的小数部分。 例如 `ff` 显示百分之一秒，而 `ffff` 显示十分之几秒。 你最多可以使用7个 `f` 符号，用户定义的格式为。 如果这是用户定义的数字格式中的唯一字符，则使用 `%f`。|  
|`t`|使用12小时制时钟，并在中午之前的任何小时显示一个大写 `A`;在中午到 11:59 P.M. 之间的任何小时显示一个大写 `P`。 如果这是用户定义的数字格式中的唯一字符，则使用 `%t`。|  
|`tt`|对于使用12小时制时钟的区域设置，将在中午之前的任何小时显示一个大写 `AM`;显示一个大写的 `PM`，其中的时间为中午到 11:59 P.M 之间的任何小时。<br /><br /> 对于使用 24 小时制时钟的区域设置，不显示任何内容。|  
|`y`|将年显示为不带前导零的数字 (0-9)。 如果这是用户定义的数字格式中的唯一字符，则使用 `%y`。|  
|`yy`|以带一个前导零的两位数字格式显示年（如果适用）。|  
|`yyy`|以四位数字格式显示年。|  
|`yyyy`|以四位数字格式显示年。|  
|`z`|显示不带前导零的时区偏移量（例如 `-8`）。 如果这是用户定义的数字格式中的唯一字符，则使用 `%z`。|  
|`zz`|显示带前导零的时区偏移量（例如 `-08`）|  
|`zzz`|显示完整的时区偏移量（例如 `-08:00`）|  
  
### <a name="legacy-code-example"></a>旧代码示例  
 下面是 `December 7, 1958, 8:50 PM, 35 seconds`的用户定义日期和时间格式的示例：  
  
|格式|显示|  
|-|-|  
|`M/d/yy`|`12/7/58`|  
|`d-MMM`|`7-Dec`|  
|`d-MMMM-yy`|`7-December-58`|  
|`d MMMM`|`7 December`|  
|`MMMM yy`|`December 58`|  
|`hh:mm tt`|`08:50 PM`|  
|`h:mm:ss t`|`8:50:35 P`|  
|`H:mm`|`20:50`|  
|`H:mm:ss`|`20:50:35`|  
|`M/d/yyyy H:mm`|`12/7/1958 20:50`|  
  
### <a name="smart-device-developer-notes"></a>智能设备开发人员说明  
 设备的制造商确定设备的最小时间解决方法。 如果设备的时间解析度足够粗，则在该设备上运行时，`f` 格式字符将返回0。  
  
   
  
## Examples  
 此示例演示同时使用 `Format` 格式和用户定义格式格式化值的 `String` 函数的各种用法。 对于日期分隔符 (`/`)、时间分隔符 (`:`) 和 AM/PM 指示符（`t` 和 `tt`），系统显示的实际格式化输出取决于代码使用的区域设置。 当在开发环境中显示时间和日期时，使用代码区域设置的短时间格式和短日期格式。  
  
> [!NOTE]
>  对于使用 24 小时制的区域设置，AM/PM 指示符（`t` 和 `tt`）不显示任何内容。  
  
 [!code-vb[VbVbalrStrings#27](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#27)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.String.Format(System.String,System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/string-manipulation-summary">字符串操作摘要</related>
      </Docs>
    </Member>
    <Member MemberName="FormatCurrency">
      <MemberSignature Language="C#" Value="public static string FormatCurrency (object Expression, int NumDigitsAfterDecimal = -1, Microsoft.VisualBasic.TriState IncludeLeadingDigit = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState UseParensForNegativeNumbers = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState GroupDigits = Microsoft.VisualBasic.TriState.UseDefault);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string FormatCurrency(object Expression, int32 NumDigitsAfterDecimal, valuetype Microsoft.VisualBasic.TriState IncludeLeadingDigit, valuetype Microsoft.VisualBasic.TriState UseParensForNegativeNumbers, valuetype Microsoft.VisualBasic.TriState GroupDigits) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
      <MemberSignature Language="VB.NET" Value="Public Function FormatCurrency (Expression As Object, Optional NumDigitsAfterDecimal As Integer = -1, Optional IncludeLeadingDigit As TriState = Microsoft.VisualBasic.TriState.UseDefault, Optional UseParensForNegativeNumbers As TriState = Microsoft.VisualBasic.TriState.UseDefault, Optional GroupDigits As TriState = Microsoft.VisualBasic.TriState.UseDefault) As String" />
      <MemberSignature Language="F#" Value="static member FormatCurrency : obj * int * Microsoft.VisualBasic.TriState * Microsoft.VisualBasic.TriState * Microsoft.VisualBasic.TriState -&gt; string" Usage="Microsoft.VisualBasic.Strings.FormatCurrency (Expression, NumDigitsAfterDecimal, IncludeLeadingDigit, UseParensForNegativeNumbers, GroupDigits)" />
      <MemberSignature Language="ILAsm" Value=".method public static string FormatCurrency(object Expression, int32 NumDigitsAfterDecimal, valuetype Microsoft.VisualBasic.TriState IncludeLeadingDigit, valuetype Microsoft.VisualBasic.TriState UseParensForNegativeNumbers, valuetype Microsoft.VisualBasic.TriState GroupDigits) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0" />
        <Parameter Name="NumDigitsAfterDecimal" Type="System.Int32" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0" />
        <Parameter Name="IncludeLeadingDigit" Type="Microsoft.VisualBasic.TriState" Index="2" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0" />
        <Parameter Name="UseParensForNegativeNumbers" Type="Microsoft.VisualBasic.TriState" Index="3" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0" />
        <Parameter Name="GroupDigits" Type="Microsoft.VisualBasic.TriState" Index="4" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="Expression">必需。 要格式化的表达式。</param>
        <param name="NumDigitsAfterDecimal">可选。 数值，指示在小数点右侧显示的位数。 默认值为 -1，指示使用了计算机的区域设置。</param>
        <param name="IncludeLeadingDigit">可选。 <see cref="T:Microsoft.VisualBasic.TriState" /> 枚举，指示对于小数值是否显示前导零。 请参见值的“备注”。</param>
        <param name="UseParensForNegativeNumbers">可选。 <see cref="T:Microsoft.VisualBasic.TriState" /> 枚举，指示是否用括号将负值括起来。 请参见值的“备注”。</param>
        <param name="GroupDigits">可选。 <see cref="T:Microsoft.VisualBasic.TriState" /> 枚举，指示是否用计算机区域设置中指定的组分隔符对数字进行分组。 请参见值的“备注”。</param>
        <summary>返回一个格式为货币值的表达式，该货币值使用系统控制面板中定义的货币符号。</summary>
        <returns>一个格式为货币值的表达式，该货币值使用系统控制面板中定义的货币符号。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 省略一个或多个可选参数时，将改用计算机的匹配区域设置值。  
  
 货币符号相对于货币值的位置由系统的区域设置确定。  
  
> [!NOTE]
>  所有设置信息来自应用程序的区域设置。 默认情况下，将为 "控制面板" 中设置的区域设置。 但是，可以使用 .NET Framework 以编程方式更改它，但不会从 "`Number`" 选项卡中使用前导零。  
  
 `IncludeLeadingDigit`、`UseParensForNegativeNumbers`和 `GroupDigits` 参数采用以下三态枚举值。  
  
|值|说明|  
|-|-|  
|`TriState.True`|True|  
|`TriState.False`|False|  
|`TriState.UseDefault`|计算机的区域设置|  
  
   
  
## Examples  
 下面的示例阐释了 `FormatCurrency` 函数的用法。  
  
 [!code-vb[VbVbalrStrings#32](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#32)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">小数点后的数字位数大于 99。</exception>
        <exception cref="T:System.InvalidCastException">不是数字类型。</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="T:Microsoft.VisualBasic.TriState" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.InvalidCastException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/string-manipulation-summary">字符串操作</related>
      </Docs>
    </Member>
    <Member MemberName="FormatDateTime">
      <MemberSignature Language="C#" Value="public static string FormatDateTime (DateTime Expression, Microsoft.VisualBasic.DateFormat NamedFormat = Microsoft.VisualBasic.DateFormat.GeneralDate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string FormatDateTime(valuetype System.DateTime Expression, valuetype Microsoft.VisualBasic.DateFormat NamedFormat) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)" />
      <MemberSignature Language="VB.NET" Value="Public Function FormatDateTime (Expression As DateTime, Optional NamedFormat As DateFormat = Microsoft.VisualBasic.DateFormat.GeneralDate) As String" />
      <MemberSignature Language="F#" Value="static member FormatDateTime : DateTime * Microsoft.VisualBasic.DateFormat -&gt; string" Usage="Microsoft.VisualBasic.Strings.FormatDateTime (Expression, NamedFormat)" />
      <MemberSignature Language="ILAsm" Value=".method public static string FormatDateTime(valuetype System.DateTime Expression, valuetype Microsoft.VisualBasic.DateFormat NamedFormat) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.DateTime" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0" />
        <Parameter Name="NamedFormat" Type="Microsoft.VisualBasic.DateFormat" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="Expression">必需。 <see langword="Date" /> expression to be formatted.</param>
        <param name="NamedFormat">可选。 指示所使用的日期/时间格式的数值。 如果省略，则使用 <see langword="DateFormat.GeneralDate" />。</param>
        <summary>返回一个表示日期/时间值的字符串表达式。</summary>
        <returns>一个表示日期/时间值的字符串表达式。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Date` 数据类型始终包含日期和时间信息。 出于类型转换的目的，Visual Basic 将1/1/1 （第1年1月1日）视为日期的非特定值，00:00:00 （午夜）为时间的非特定值。 如果将 `Date` 值设置为日期/时间字符串格式，则 `FormatDateTime` 不会在生成的字符串中包含非特定值。 例如，如果将 #1/1/0001 9：30： 00 # 转换为字符串，则结果为 "9:30:00 AM";禁止显示日期信息。 但是，日期信息仍以原始 `Date` 值形式存在，可以通过 `DatePart`等功能进行恢复。  
  
> [!NOTE]
>  如果将 `Expression` 参数作为 `String` 文本传递，`FormatDateTime` 会根据应用程序的 <xref:System.Globalization.CultureInfo.CurrentCulture%2A> 设置对其进行解释。 但是，如果将它作为 `Date` 文本传递，请使用格式 #mm/dd/yyyy #，因为 `FormatDateTime` 始终根据英语（美国）区域性解释 `Date` 文本。 这是必需的，因为如果应用程序是使用 `Date` 某个区域性的文本进行开发和编码的，但随后在具有不同区域性的平台上执行，则 `Date` 文本可能会错误地进行分析。  
  
 `NamedFormat` 参数具有以下设置。  
  
|一直|说明|  
|-|-|  
|`DateFormat.GeneralDate`|显示日期和/或时间。 将日期部分显示为短日期。 如果有时间部分，则将其显示为长时间。 如果存在，则这两个部分都显示。|  
|`DateFormat.LongDate`|使用计算机的区域设置中指定的长日期格式显示日期。|  
|`DateFormat.ShortDate`|使用计算机的区域设置中指定的短日期格式显示日期。|  
|`DateFormat.LongTime`|使用计算机的区域设置中指定的时间格式显示时间。|  
|`DateFormat.ShortTime`|使用24小时格式显示时间（hh： mm）。|  
  
   
  
## Examples  
 此示例演示如何使用 `FormatDateTime` 函数。  
  
 [!code-vb[VbVbalrStrings#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="NamedFormat" /> 设置无效。</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.DatePart(Microsoft.VisualBasic.DateInterval,System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/string-manipulation-summary">字符串操作摘要</related>
      </Docs>
    </Member>
    <Member MemberName="FormatNumber">
      <MemberSignature Language="C#" Value="public static string FormatNumber (object Expression, int NumDigitsAfterDecimal = -1, Microsoft.VisualBasic.TriState IncludeLeadingDigit = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState UseParensForNegativeNumbers = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState GroupDigits = Microsoft.VisualBasic.TriState.UseDefault);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string FormatNumber(object Expression, int32 NumDigitsAfterDecimal, valuetype Microsoft.VisualBasic.TriState IncludeLeadingDigit, valuetype Microsoft.VisualBasic.TriState UseParensForNegativeNumbers, valuetype Microsoft.VisualBasic.TriState GroupDigits) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
      <MemberSignature Language="VB.NET" Value="Public Function FormatNumber (Expression As Object, Optional NumDigitsAfterDecimal As Integer = -1, Optional IncludeLeadingDigit As TriState = Microsoft.VisualBasic.TriState.UseDefault, Optional UseParensForNegativeNumbers As TriState = Microsoft.VisualBasic.TriState.UseDefault, Optional GroupDigits As TriState = Microsoft.VisualBasic.TriState.UseDefault) As String" />
      <MemberSignature Language="F#" Value="static member FormatNumber : obj * int * Microsoft.VisualBasic.TriState * Microsoft.VisualBasic.TriState * Microsoft.VisualBasic.TriState -&gt; string" Usage="Microsoft.VisualBasic.Strings.FormatNumber (Expression, NumDigitsAfterDecimal, IncludeLeadingDigit, UseParensForNegativeNumbers, GroupDigits)" />
      <MemberSignature Language="ILAsm" Value=".method public static string FormatNumber(object Expression, int32 NumDigitsAfterDecimal, valuetype Microsoft.VisualBasic.TriState IncludeLeadingDigit, valuetype Microsoft.VisualBasic.TriState UseParensForNegativeNumbers, valuetype Microsoft.VisualBasic.TriState GroupDigits) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0" />
        <Parameter Name="NumDigitsAfterDecimal" Type="System.Int32" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0" />
        <Parameter Name="IncludeLeadingDigit" Type="Microsoft.VisualBasic.TriState" Index="2" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0" />
        <Parameter Name="UseParensForNegativeNumbers" Type="Microsoft.VisualBasic.TriState" Index="3" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0" />
        <Parameter Name="GroupDigits" Type="Microsoft.VisualBasic.TriState" Index="4" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="Expression">必需。 要格式化的表达式。</param>
        <param name="NumDigitsAfterDecimal">可选。 数值，指示在小数点右侧显示的位数。 默认值为 -1，指示使用了计算机的区域设置。</param>
        <param name="IncludeLeadingDigit">可选。 <see cref="T:Microsoft.VisualBasic.TriState" /> 常量，指示对于小数值是否显示前导零。 请参阅“设置”，以获取值。</param>
        <param name="UseParensForNegativeNumbers">可选。 <see cref="T:Microsoft.VisualBasic.TriState" /> 常量，指示是否用括号将负值括起来。 请参阅“设置”，以获取值。</param>
        <param name="GroupDigits">可选。 <see cref="T:Microsoft.VisualBasic.TriState" /> 常量，指示是否使用区域设置中指定的组分隔符对数字进行分组。 请参阅“设置”，以获取值。</param>
        <summary>返回格式化为数字的表达式。</summary>
        <returns>格式化为数字的表达式。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果省略了一个或多个可选参数，则由区域设置提供省略参数的值。  
  
> [!NOTE]
>  所有设置信息来自应用程序的区域设置。 默认情况下，将为 "控制面板" 中设置的区域设置。 但是，可以使用 .NET Framework 以编程方式对其进行更改。  
  
 `IncludeLeadingDigit`、`UseParensForNegativeNumbers`和 `GroupDigits` 参数具有以下设置。  
  
|一直|说明|  
|-|-|  
|`TriState.True`|True|  
|`TriState.False`|False|  
|`TriState.UseDefault`|计算机的区域设置|  
  
   
  
## Examples  
 此示例演示 `FormatNumber` 函数。  
  
 [!code-vb[VbVbalrStrings#15](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#15)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">不是数字类型。</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="T:Microsoft.VisualBasic.TriState" />
        <altmember cref="T:System.InvalidCastException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/string-manipulation-summary">字符串操作摘要</related>
      </Docs>
    </Member>
    <Member MemberName="FormatPercent">
      <MemberSignature Language="C#" Value="public static string FormatPercent (object Expression, int NumDigitsAfterDecimal = -1, Microsoft.VisualBasic.TriState IncludeLeadingDigit = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState UseParensForNegativeNumbers = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState GroupDigits = Microsoft.VisualBasic.TriState.UseDefault);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string FormatPercent(object Expression, int32 NumDigitsAfterDecimal, valuetype Microsoft.VisualBasic.TriState IncludeLeadingDigit, valuetype Microsoft.VisualBasic.TriState UseParensForNegativeNumbers, valuetype Microsoft.VisualBasic.TriState GroupDigits) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
      <MemberSignature Language="VB.NET" Value="Public Function FormatPercent (Expression As Object, Optional NumDigitsAfterDecimal As Integer = -1, Optional IncludeLeadingDigit As TriState = Microsoft.VisualBasic.TriState.UseDefault, Optional UseParensForNegativeNumbers As TriState = Microsoft.VisualBasic.TriState.UseDefault, Optional GroupDigits As TriState = Microsoft.VisualBasic.TriState.UseDefault) As String" />
      <MemberSignature Language="F#" Value="static member FormatPercent : obj * int * Microsoft.VisualBasic.TriState * Microsoft.VisualBasic.TriState * Microsoft.VisualBasic.TriState -&gt; string" Usage="Microsoft.VisualBasic.Strings.FormatPercent (Expression, NumDigitsAfterDecimal, IncludeLeadingDigit, UseParensForNegativeNumbers, GroupDigits)" />
      <MemberSignature Language="ILAsm" Value=".method public static string FormatPercent(object Expression, int32 NumDigitsAfterDecimal, valuetype Microsoft.VisualBasic.TriState IncludeLeadingDigit, valuetype Microsoft.VisualBasic.TriState UseParensForNegativeNumbers, valuetype Microsoft.VisualBasic.TriState GroupDigits) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0" />
        <Parameter Name="NumDigitsAfterDecimal" Type="System.Int32" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0" />
        <Parameter Name="IncludeLeadingDigit" Type="Microsoft.VisualBasic.TriState" Index="2" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0" />
        <Parameter Name="UseParensForNegativeNumbers" Type="Microsoft.VisualBasic.TriState" Index="3" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0" />
        <Parameter Name="GroupDigits" Type="Microsoft.VisualBasic.TriState" Index="4" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="Expression">必需。 要格式化的表达式。</param>
        <param name="NumDigitsAfterDecimal">可选。 数字值，该值指示要显示小数点右侧的多少位。 默认值为 -1，指示使用了区域设置。</param>
        <param name="IncludeLeadingDigit">可选。 <see cref="T:Microsoft.VisualBasic.TriState" /> 常量，指示是否显示小数值前的零。 请参阅“设置”，以获取值。</param>
        <param name="UseParensForNegativeNumbers">可选。 <see cref="T:Microsoft.VisualBasic.TriState" /> 常量，指示是否在括号内放入负值。 请参阅“设置”，以获取值。</param>
        <param name="GroupDigits">可选。 <see cref="T:Microsoft.VisualBasic.TriState" /> 常量，指示是否使用区域设置中指定的组分隔符对数字进行分组。 请参阅“设置”，以获取值。</param>
        <summary>返回以 % 字符结尾的百分比格式的表达式（即乘以 100）。</summary>
        <returns>以 % 字符结尾的百分比格式（即乘以 100）的表达式。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果省略了一个或多个可选参数，则省略参数的值由区域设置提供。  
  
> [!NOTE]
>  所有设置信息来自应用程序的区域设置。 默认情况下，将为 "控制面板" 中设置的区域设置。 但是，可以使用 .NET Framework 以编程方式对其进行更改。  
  
 `IncludeLeadingDigit`、`UseParensForNegativeNumbers`和 `GroupDigits` 参数具有以下设置。  
  
|一直|说明|  
|-|-|  
|`TriState.True`|True|  
|`TriState.False`|False|  
|`TriState.Default`|计算机的区域设置|  
  
   
  
## Examples  
 此示例演示如何使用 `FormatPercent` 函数。  
  
 [!code-vb[VbVbalrStrings#28](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#28)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">不是数字类型。</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="T:Microsoft.VisualBasic.TriState" />
        <altmember cref="T:System.InvalidCastException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/string-manipulation-summary">字符串操作摘要</related>
      </Docs>
    </Member>
    <Member MemberName="GetChar">
      <MemberSignature Language="C#" Value="public static char GetChar (string str, int Index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char GetChar(string str, int32 Index) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.GetChar(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetChar (str As String, Index As Integer) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char GetChar(System::String ^ str, int Index);" />
      <MemberSignature Language="F#" Value="static member GetChar : string * int -&gt; char" Usage="Microsoft.VisualBasic.Strings.GetChar (str, Index)" />
      <MemberSignature Language="ILAsm" Value=".method public static char GetChar(string str, int32 Index) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0" />
        <Parameter Name="Index" Type="System.Int32" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="str">必需。 任何有效的 <see langword="String" /> 表达式。</param>
        <param name="Index">必需。 <see langword="Integer" /> 表达式。 要返回的 <paramref name="str" /> 中的字符索引（从 1 开始）。</param>
        <summary>返回 <see langword="Char" /> 值，该值表示提供的字符串中位于指定的索引位置处的字符。</summary>
        <returns><see langword="Char" /> 值，该值表示提供的字符串中指定索引处的字符。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果 `Index` 小于1或大于 `str`中最后一个字符的索引，则会引发 `ArgumentException`。  
  
   
  
## Examples  
 此示例演示如何使用 `GetChar` 函数返回 `String`中指定索引处的字符。  
  
 [!code-vb[VbVbalrStrings#23](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#23)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="str" /> 为 <see langword="Nothing" />，<paramref name="Index" /> &lt; 1，或 <paramref name="Index" /> 大于 <paramref name="str" /> 最后一个字符的索引。</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Mid" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/string-manipulation-summary">字符串操作摘要</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="InStr">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>返回一个整数，该整数指定一个字符串在另一个字符串中的第一个匹配项的起始位置。  如果找到了匹配项，则该整数是从 1 开始的索引。  如果未找到匹配项，则函数返回零。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="InStr">
      <MemberSignature Language="C#" Value="public static int InStr (string String1, string String2, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 InStr(string String1, string String2, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.InStr(System.String,System.String,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function InStr (String1 As String, String2 As String, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As Integer" />
      <MemberSignature Language="F#" Value="static member InStr : string * string * Microsoft.VisualBasic.CompareMethod -&gt; int" Usage="Microsoft.VisualBasic.Strings.InStr (String1, String2, Compare)" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 InStr(string String1, string String2, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String1" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.1;net-5.0" />
        <Parameter Name="String2" Type="System.String" Index="1" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.1;net-5.0" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod" Index="2" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.1;net-5.0">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="String1">必需。 正在搜索的 <see langword="String" /> 表达式。</param>
        <param name="String2">必需。 查找到的 <see langword="String" /> 表达式。</param>
        <param name="Compare">可选。 指定字符串比较的类型。 如果省略 <paramref name="Compare" />，则由 <see langword="Option Compare" /> 设置确定比较类型。</param>
        <summary>返回一个整数，该整数指定一个字符串在另一个字符串中的第一个匹配项的起始位置。</summary>
        <returns><list type="table">
            <item>
              <term> 如果 
 </term>
              <description> InStr 返回 
 </description>
            </item>
            <item>
              <term>
                <paramref name="String1" /> 的长度为零或 <see langword="Nothing" /></term>
              <description> 0 
 </description>
            </item>
            <item>
              <term>
                <paramref name="String2" /> 的长度为零或 <see langword="Nothing" /></term>
              <description> 搜索的开始位置，该位置默认为第一个字符位置。  
  
 </description>
            </item>
            <item>
              <term>未找到 
                <paramref name="String2" />。 
 </term>
              <description> 0 
 </description>
            </item>
            <item>
              <term>在 
                <paramref name="String2" /> 中找到 <paramref name="String1" /></term>
              <description> 匹配开始的位置 
 </description>
            </item>
            <item>
              <term>
              </term>
              <description>
              </description>
            </item>
          </list>
。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 通常，在分析字符串时使用 `InStr` 函数。  
  
> [!NOTE]
>  Visual Basic 以前版本中的 `InStrB` 函数返回的字节数而不是字符位置。 它主要用于在双字节字符集（DBCS）应用程序中转换字符串。 所有 Visual Basic 2005 字符串均采用 Unicode 格式，`InStrB` 不再受支持。  
  
 `Compare` 参数的设置是：  
  
|一直|值|说明|  
|-|-|-|  
|`Binary`|0|执行二进制比较|  
|`Text`|1|执行文本比较|  
  
   
  
## Examples  
 本例使用 `InStr` 函数返回一个字符串在另一个字符串中的第一个匹配项的位置。  
  
 [!code-vb[VbVbalrStrings#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#8)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.StrComp(System.String,System.String,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="/dotnet/visual-basic/programming-guide/language-features/strings/">字符串 (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/programming-guide/language-features/strings/introduction-to-strings">字符串介绍 (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/statements/option-compare-statement">Option Compare 语句</related>
      </Docs>
    </Member>
    <Member MemberName="InStr">
      <MemberSignature Language="C#" Value="public static int InStr (int StartPos, string String1, string String2, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 InStr(int32 StartPos, string String1, string String2, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.InStr(System.Int32,System.String,System.String,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function InStr (StartPos As Integer, String1 As String, String2 As String, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As Integer" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="F#" Value="static member InStr : int * string * string * Microsoft.VisualBasic.CompareMethod -&gt; int" Usage="Microsoft.VisualBasic.Strings.InStr (StartPos, String1, String2, Compare)" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="C#" Value="public static int InStr (int Start, string String1, string String2, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 InStr(int32 Start, string String1, string String2, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="VB.NET" Value="Public Function InStr (Start As Integer, String1 As String, String2 As String, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As Integer" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="F#" Value="static member InStr : int * string * string * Microsoft.VisualBasic.CompareMethod -&gt; int" Usage="Microsoft.VisualBasic.Strings.InStr (Start, String1, String2, Compare)" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 InStr(int32 Start, string String1, string String2, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Start" Type="System.Int32" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-1.1;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netframework-2.0" />
        <Parameter Name="StartPos" Type="System.Int32" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;net-5.0" />
        <Parameter Name="String1" Type="System.String" Index="1" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netframework-2.0;netcore-3.1;net-5.0" />
        <Parameter Name="String2" Type="System.String" Index="2" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netframework-2.0;netcore-3.1;net-5.0" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod" Index="3" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netframework-2.0;netcore-3.1;net-5.0">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="Start">可选。 数值表达式，设置每个搜索的起始位置。 如果省略该参数，则从第一个字符位置开始搜索。 起始索引从一开始。</param>
        <param name="StartPos">To be added.</param>
        <param name="String1">必需。 正在搜索的 <see langword="String" /> 表达式。</param>
        <param name="String2">必需。 查找到的 <see langword="String" /> 表达式。</param>
        <param name="Compare">可选。 指定字符串比较的类型。 如果省略 <paramref name="Compare" />，则由 <see langword="Option Compare" /> 设置确定比较类型。</param>
        <summary>返回一个整数，该整数指定一个字符串在另一个字符串中的第一个匹配项的起始位置。</summary>
        <returns><list type="table">
            <item>
              <term> 如果 
 </term>
              <description> InStr 返回 
 </description>
            </item>
            <item>
              <term>
                <paramref name="String1" /> 的长度为零或 <see langword="Nothing" /></term>
              <description> 0 
 </description>
            </item>
            <item>
              <term>
                <paramref name="String2" /> 的长度为零或 <see langword="Nothing" /></term>
              <description>
                <paramref name="start" />
              </description>
            </item>
            <item>
              <term>未找到 
                <paramref name="String2" />。 
 </term>
              <description> 0 
 </description>
            </item>
            <item>
              <term>在 
                <paramref name="String2" /> 中找到 <paramref name="String1" /></term>
              <description> 匹配开始的位置 
 </description>
            </item>
            <item>
              <term>
                <paramref name="Start" /> 长度大于 <paramref name="String1" /></term>
              <description> 0 
 </description>
            </item>
          </list>
。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 通常，在分析字符串时使用 `InStr` 函数。  
  
> [!NOTE]
>  Visual Basic 以前版本中的 `InStrB` 函数返回的字节数而不是字符位置。 它主要用于在双字节字符集（DBCS）应用程序中转换字符串。 所有 Visual Basic 2005 字符串均采用 Unicode 格式，`InStrB` 不再受支持。  
  
 `Compare` 参数的设置是：  
  
|一直|值|说明|  
|-|-|-|  
|`Binary`|0|执行二进制比较|  
|`Text`|1|执行文本比较|  
  
   
  
## Examples  
 本例使用 `InStr` 函数返回一个字符串在另一个字符串中的第一个匹配项的位置。  
  
 [!code-vb[VbVbalrStrings#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Start" /> &lt; 1。</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.StrComp(System.String,System.String,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="/dotnet/visual-basic/programming-guide/language-features/strings/">字符串 (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/programming-guide/language-features/strings/introduction-to-strings">字符串介绍 (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/statements/option-compare-statement">Option Compare 语句</related>
      </Docs>
    </Member>
    <Member MemberName="InStrRev">
      <MemberSignature Language="C#" Value="public static int InStrRev (string StringCheck, string StringMatch, int Start = -1, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 InStrRev(string StringCheck, string StringMatch, int32 Start, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function InStrRev (StringCheck As String, StringMatch As String, Optional Start As Integer = -1, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As Integer" />
      <MemberSignature Language="F#" Value="static member InStrRev : string * string * int * Microsoft.VisualBasic.CompareMethod -&gt; int" Usage="Microsoft.VisualBasic.Strings.InStrRev (StringCheck, StringMatch, Start, Compare)" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 InStrRev(string StringCheck, string StringMatch, int32 Start, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="StringCheck" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.1;net-5.0" />
        <Parameter Name="StringMatch" Type="System.String" Index="1" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.1;net-5.0" />
        <Parameter Name="Start" Type="System.Int32" Index="2" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.1;net-5.0" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod" Index="3" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.1;net-5.0">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="StringCheck">必需。 搜索的 String 表达式。</param>
        <param name="StringMatch">必需。 搜索的字符串表达式。</param>
        <param name="Start">可选。 数值表达式，设置从字符串左侧开始进行的每个搜索的起始位置（从一开始计数）。 如果省略 <paramref name="Start" />，则使用 -1，它表示搜索从最后一个字符位置开始。 然后搜索从右到左继续进行。</param>
        <param name="Compare">可选。 数值，指示对子字符串求值时使用的比较类型。 如果省略，就会执行二进制比较。 具体的值请参见"设置"。</param>
        <summary>返回某一字符串从另一字符串的右侧开始算起第一次出现的位置。</summary>
        <returns><list type="table">
            <item>
              <term> 如果 
 </term>
              <description> InStrRev 返回 
 </description>
            </item>
            <item>
              <term>
                <paramref name="StringCheck" /> 的长度为零 
 </term>
              <description> 0 
 </description>
            </item>
            <item>
              <term>
                <paramref name="StringMatch" /> 的长度为零 
 </term>
              <description>
                <paramref name="Start" />
              </description>
            </item>
            <item>
              <term>未找到 
                <paramref name="StringMatch" />。 
 </term>
              <description> 0 
 </description>
            </item>
            <item>
              <term>在 
                <paramref name="StringMatch" /> 中找到 <paramref name="StringCheck" /></term>
              <description> 从字符串的右侧开始找到的第一个匹配项的位置。  
  
 </description>
            </item>
            <item>
              <term>
                <paramref name="Start" /> 大于 <paramref name="StringMatch" /> 的长度</term>
              <description> 0 
 </description>
            </item>
          </list>
。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 请注意，`InStrRev` 函数的语法与 `InStr` 函数的语法不同。  
  
 `Compare` 参数可以具有下列值。  
  
|一直|说明|  
|-|-|  
|`Binary`|执行二进制比较。|  
|`Text`|执行文本比较。|  
  
   
  
## Examples  
 此示例演示如何使用 `InStrRev` 函数。  
  
 [!code-vb[VbVbalrStrings#26](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#26)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Start" /> = 0 或 <paramref name="Start" /> &lt; -1。</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.InStr" />
        <related type="Article" href="/dotnet/visual-basic/programming-guide/language-features/strings/">字符串 (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/programming-guide/language-features/strings/introduction-to-strings">字符串介绍 (Visual Basic)</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Join">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>返回通过连接一个数组中包含的若干子字符串创建的字符串。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Join">
      <MemberSignature Language="C#" Value="public static string Join (object[] SourceArray, string Delimiter = &quot; &quot;);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Join(object[] SourceArray, string Delimiter) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Join(System.Object[],System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Join (SourceArray As Object(), Optional Delimiter As String = &quot; &quot;) As String" />
      <MemberSignature Language="F#" Value="static member Join : obj[] * string -&gt; string" Usage="Microsoft.VisualBasic.Strings.Join (SourceArray, Delimiter)" />
      <MemberSignature Language="ILAsm" Value=".method public static string Join(object[] SourceArray, string Delimiter) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="SourceArray" Type="System.Object[]" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0" />
        <Parameter Name="Delimiter" Type="System.String" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="SourceArray">必需。 一维数组，包含要连接的子字符串。</param>
        <param name="Delimiter">可选。 任意字符串，用于分隔返回的字符串中的子字符串。 如果省略，则使用空格字符（“ ”）。 如果 <paramref name="Delimiter" /> 是零长度字符串 ("") 或 <see langword="Nothing" />，则列表中的所有项目都串联在一起，中间没有分隔符。</param>
        <summary>返回通过连接一个数组中包含的若干子字符串创建的字符串。</summary>
        <returns>通过连接一个数组中包含的若干子字符串创建的字符串。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Join` 和 `Split` 函数之间存在奇偶校验。 `Join` 函数使用一个字符串数组，并使用分隔符字符串将它们联接起来，以返回单个字符串。 `Split` 函数使用一个字符串并将其分隔，以返回字符串数组。 但是，主要区别在于 `Join` 可以使用任何分隔符字符串将字符串连接起来，`Split` 只能使用单个字符分隔符分隔字符串。  
  
   
  
## Examples  
 下面的示例演示如何使用 `Join` 函数从多个字符串创建列表。  
  
 [!code-vb[VbVbalrStrings#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="SourceArray" /> 不是一维数组。</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/string-manipulation-summary">字符串操作摘要</related>
      </Docs>
    </Member>
    <Member MemberName="Join">
      <MemberSignature Language="C#" Value="public static string Join (string[] SourceArray, string Delimiter = &quot; &quot;);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Join(string[] SourceArray, string Delimiter) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Join(System.String[],System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Join (SourceArray As String(), Optional Delimiter As String = &quot; &quot;) As String" />
      <MemberSignature Language="F#" Value="static member Join : string[] * string -&gt; string" Usage="Microsoft.VisualBasic.Strings.Join (SourceArray, Delimiter)" />
      <MemberSignature Language="ILAsm" Value=".method public static string Join(string[] SourceArray, string Delimiter) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="SourceArray" Type="System.String[]" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0" />
        <Parameter Name="Delimiter" Type="System.String" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="SourceArray">必需。 一维数组，包含要连接的子字符串。</param>
        <param name="Delimiter">可选。 任意字符串，用于分隔返回的字符串中的子字符串。 如果省略，则使用空格字符（“ ”）。 如果 <paramref name="Delimiter" /> 是零长度字符串 ("") 或 <see langword="Nothing" />，则列表中的所有项目都串联在一起，中间没有分隔符。</param>
        <summary>返回通过连接一个数组中包含的若干子字符串创建的字符串。</summary>
        <returns>通过连接一个数组中包含的若干子字符串创建的字符串。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Join` 和 `Split` 函数之间存在奇偶校验。 `Join` 函数使用一个字符串数组，并使用分隔符字符串将它们联接起来，以返回单个字符串。 `Split` 函数使用一个字符串并将其分隔，以返回字符串数组。 但是，主要区别在于 `Join` 可以使用任何分隔符字符串将字符串连接起来，`Split` 只能使用单个字符分隔符分隔字符串。  
  
   
  
## Examples  
 下面的示例演示如何使用 `Join` 函数从多个字符串创建列表。  
  
 [!code-vb[VbVbalrStrings#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="SourceArray" /> 不是一维数组。</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/string-manipulation-summary">字符串操作摘要</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="LCase">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>返回将转换为小写的字符串或字符。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="LCase">
      <MemberSignature Language="C#" Value="public static char LCase (char Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char LCase(char Value) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.LCase(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function LCase (Value As Char) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char LCase(char Value);" />
      <MemberSignature Language="F#" Value="static member LCase : char -&gt; char" Usage="Microsoft.VisualBasic.Strings.LCase Value" />
      <MemberSignature Language="ILAsm" Value=".method public static char LCase(char Value) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Value" Type="System.Char" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="Value">必需。 任何有效的 <see langword="String" /> 或 <see langword="Char" /> 表达式。</param>
        <summary>返回将转换为小写的字符串或字符。</summary>
        <returns>将转换为小写的字符串或字符。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 只有大写字母转换为小写字母;所有小写字母和 nonletter 字符保持不变。  
  
 此函数在操作字符串时使用应用程序的区域性信息，以便大小写更改适用于正在使用应用程序的区域设置。  
  
> [!IMPORTANT]
>  如果你的应用程序根据比较或大小写更改操作的结果做出安全决策，则操作应使用 <xref:System.String.Compare%2A?displayProperty=nameWithType> 方法，并为 `comparisonType` 参数传递 <xref:System.StringComparison.Ordinal> 或 <xref:System.StringComparison.OrdinalIgnoreCase>。 有关详细信息，请参阅[在 Visual Basic 中区域性如何影响字符串](/dotnet/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings)。  
  
   
  
## Examples  
 此示例使用 `LCase` 函数返回字符串的小写形式。  
  
 [!code-vb[VbVbalrStrings#12](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#12)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.UCase" />
        <related type="Article" href="/dotnet/visual-basic/programming-guide/language-features/strings/">字符串 (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/programming-guide/language-features/strings/introduction-to-strings">字符串介绍 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="LCase">
      <MemberSignature Language="C#" Value="public static string LCase (string Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string LCase(string Value) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.LCase(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function LCase (Value As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ LCase(System::String ^ Value);" />
      <MemberSignature Language="F#" Value="static member LCase : string -&gt; string" Usage="Microsoft.VisualBasic.Strings.LCase Value" />
      <MemberSignature Language="ILAsm" Value=".method public static string LCase(string Value) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Value" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="Value">必需。 任何有效的 <see langword="String" /> 或 <see langword="Char" /> 表达式。</param>
        <summary>返回将转换为小写的字符串或字符。</summary>
        <returns>将转换为小写的字符串或字符。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 只有大写字母转换为小写字母;所有小写字母和 nonletter 字符保持不变。  
  
 此函数在操作字符串时使用应用程序的区域性信息，以便大小写更改适用于正在使用应用程序的区域设置。  
  
> [!IMPORTANT]
>  如果你的应用程序根据比较或大小写更改操作的结果做出安全决策，则操作应使用 <xref:System.String.Compare%2A?displayProperty=nameWithType> 方法，并为 `comparisonType` 参数传递 <xref:System.StringComparison.Ordinal> 或 <xref:System.StringComparison.OrdinalIgnoreCase>。 有关详细信息，请参阅[在 Visual Basic 中区域性如何影响字符串](/dotnet/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings)。  
  
   
  
## Examples  
 此示例使用 `LCase` 函数返回字符串的小写形式。  
  
 [!code-vb[VbVbalrStrings#12](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#12)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.UCase" />
        <related type="Article" href="/dotnet/visual-basic/programming-guide/language-features/strings/">字符串 (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/programming-guide/language-features/strings/introduction-to-strings">字符串介绍 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Left">
      <MemberSignature Language="C#" Value="public static string Left (string str, int Length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Left(string str, int32 Length) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Left (str As String, Length As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Left(System::String ^ str, int Length);" />
      <MemberSignature Language="F#" Value="static member Left : string * int -&gt; string" Usage="Microsoft.VisualBasic.Strings.Left (str, Length)" />
      <MemberSignature Language="ILAsm" Value=".method public static string Left(string str, int32 Length) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.1;net-5.0" />
        <Parameter Name="Length" Type="System.Int32" Index="1" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="str">必需。 一个 <see langword="String" /> 表达式，从中返回最左侧的那些字符。</param>
        <param name="Length">必需。 <see langword="Integer" /> 表达式。 指示要返回的字符数的数值表达式。 如果为 0，则返回零长度字符串 ("")。 如果大于或等于 <paramref name="str" /> 的字符数，则返回整个字符串。</param>
        <summary>返回一个字符串，该字符串包含从某字符串左侧算起的指定数量的字符。</summary>
        <returns>一个字符串，该字符串包含从某字符串左侧算起的指定数量的字符。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要确定 `str`中的字符数，请使用 `Len` 函数。 如果用于 Windows 窗体应用程序或具有 `Left` 属性的任何其他类，则必须使用 `Microsoft.VisualBasic.Left`完全限定该函数。  
  
> [!NOTE]
>  以前版本的 Visual Basic 中的 `LeftB` 函数返回以字节而不是字符表示的字符串。 它主要用于在双字节字符集（DBCS）应用程序中转换字符串。 所有当前 Visual Basic 字符串均采用 Unicode 格式，且不再支持 `LeftB`。  
  
   
  
## Examples  
 此示例演示如何使用 `Left` 函数返回给定 `String`的子字符串。 在具有 `Left` 属性的类中，可能需要完全限定 `Left` 函数。  
  
 [!code-vb[VbVbalrStrings#20](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#20)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Length" /> &lt; 0。</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Mid" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/string-manipulation-summary">字符串操作摘要</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Len">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>返回一个包含字符串中的字符数或存储某个变量所需的名义字节数的整数。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (bool Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Len(bool Expression) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Boolean) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(bool Expression);" />
      <MemberSignature Language="F#" Value="static member Len : bool -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(bool Expression) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Boolean" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="Expression">任何有效的 <see langword="String" /> 表达式或变量名。 如果 <paramref name="Expression" /> 为 <see langword="Object" /> 类型，<see langword="Len" /> 函数将返回其在由 <see langword="FilePut" /> 函数写入文件中时的大小。</param>
        <summary>返回一个包含字符串中的字符数或存储某个变量所需的名义字节数的整数。</summary>
        <returns>一个包含字符串中的字符数或存储某个变量所需的名义字节数的整数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用用户定义的类型和 `Object` 变量，`Len` 函数返回 `FilePut` 函数将其写入文件的大小。 如果 `Object` 包含 `String`，它将返回字符串的长度。 如果 `Object` 包含任何其他类型，则它将返回对象的大小，因为 `FilePut` 函数将该对象写入文件。  
  
 `VBFixedString` 特性可应用于对象中的字符串字段，以指示写入磁盘时字符串的大小（以字节为单位）。 `Len` 函数在确定 `Object` 变量大小时使用 `VBFixedString` 属性（如果可用）。  
  
> [!NOTE]
>  如果在用户定义数据类型中与可变长度字符串一起使用，则 `Len` 函数可能无法确定所需的实际存储字节数。  
  
> [!NOTE]
>  Visual Basic 早期版本中的 `LenB` 函数返回字符串中的字节数，而不是个字符。 它主要用于在双字节字符集（DBCS）应用程序中转换字符串。 所有当前 Visual Basic 字符串均采用 Unicode 格式，且不再支持 `LenB`。  
  
## <a name="smart-device-developer-notes"></a>智能设备开发人员说明  
 `Len` 函数只接受 `String` 和 `Object` 变量作为参数。 如果 `Object` 包含 `String`，它将返回 `String`的长度。 如果参数为 NULL `Object` 引用，则函数将返回零。 如果 `Object` 包含任何其他类型，则将引发异常。  
  
   
  
## Examples  
 本例使用 `Len` 返回字符串中的字符数。  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/string-manipulation-summary">字符串操作摘要</related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/data-types/data-type-summary">数据类型摘要 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (byte Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Len(unsigned int8 Expression) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Byte) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::Byte Expression);" />
      <MemberSignature Language="F#" Value="static member Len : byte -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(unsigned int8 Expression) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Byte" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="Expression">任何有效的 <see langword="String" /> 表达式或变量名。 如果 <paramref name="Expression" /> 为 <see langword="Object" /> 类型，<see langword="Len" /> 函数将返回其在由 <see langword="FilePut" /> 函数写入文件中时的大小。</param>
        <summary>返回一个包含字符串中的字符数或存储某个变量所需的名义字节数的整数。</summary>
        <returns>一个包含字符串中的字符数或存储某个变量所需的名义字节数的整数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用用户定义的类型和 `Object` 变量，`Len` 函数返回 `FilePut` 函数将其写入文件的大小。 如果 `Object` 包含 `String`，它将返回字符串的长度。 如果 `Object` 包含任何其他类型，则它将返回对象的大小，因为 `FilePut` 函数将该对象写入文件。  
  
 `VBFixedString` 特性可应用于对象中的字符串字段，以指示写入磁盘时字符串的大小（以字节为单位）。 `Len` 函数在确定 `Object` 变量大小时使用 `VBFixedString` 属性（如果可用）。  
  
> [!NOTE]
>  如果在用户定义数据类型中与可变长度字符串一起使用，则 `Len` 函数可能无法确定所需的实际存储字节数。  
  
> [!NOTE]
>  Visual Basic 早期版本中的 `LenB` 函数返回字符串中的字节数，而不是个字符。 它主要用于在双字节字符集（DBCS）应用程序中转换字符串。 所有当前 Visual Basic 字符串均采用 Unicode 格式，且不再支持 `LenB`。  
  
## <a name="smart-device-developer-notes"></a>智能设备开发人员说明  
 `Len` 函数只接受 `String` 和 `Object` 变量作为参数。 如果 `Object` 包含 `String`，它将返回 `String`的长度。 如果参数为 NULL `Object` 引用，则函数将返回零。 如果 `Object` 包含任何其他类型，则将引发异常。  
  
   
  
## Examples  
 本例使用 `Len` 返回字符串中的字符数。  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/string-manipulation-summary">字符串操作摘要</related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/data-types/data-type-summary">数据类型摘要 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (char Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Len(char Expression) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(char Expression);" />
      <MemberSignature Language="F#" Value="static member Len : char -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(char Expression) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Char" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="Expression">任何有效的 <see langword="String" /> 表达式或变量名。 如果 <paramref name="Expression" /> 为 <see langword="Object" /> 类型，<see langword="Len" /> 函数将返回其在由 <see langword="FilePut" /> 函数写入文件中时的大小。</param>
        <summary>返回一个包含字符串中的字符数或存储某个变量所需的名义字节数的整数。</summary>
        <returns>一个包含字符串中的字符数或存储某个变量所需的名义字节数的整数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用用户定义的类型和 `Object` 变量，`Len` 函数返回 `FilePut` 函数将其写入文件的大小。 如果 `Object` 包含 `String`，它将返回字符串的长度。 如果 `Object` 包含任何其他类型，则它将返回对象的大小，因为 `FilePut` 函数将该对象写入文件。  
  
 `VBFixedString` 特性可应用于对象中的字符串字段，以指示写入磁盘时字符串的大小（以字节为单位）。 `Len` 函数在确定 `Object` 变量大小时使用 `VBFixedString` 属性（如果可用）。  
  
> [!NOTE]
>  如果在用户定义数据类型中与可变长度字符串一起使用，则 `Len` 函数可能无法确定所需的实际存储字节数。  
  
> [!NOTE]
>  Visual Basic 早期版本中的 `LenB` 函数返回字符串中的字节数，而不是个字符。 它主要用于在双字节字符集（DBCS）应用程序中转换字符串。 所有当前 Visual Basic 字符串均采用 Unicode 格式，且不再支持 `LenB`。  
  
## <a name="smart-device-developer-notes"></a>智能设备开发人员说明  
 `Len` 函数只接受 `String` 和 `Object` 变量作为参数。 如果 `Object` 包含 `String`，它将返回 `String`的长度。 如果参数为 NULL `Object` 引用，则函数将返回零。 如果 `Object` 包含任何其他类型，则将引发异常。  
  
   
  
## Examples  
 本例使用 `Len` 返回字符串中的字符数。  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/string-manipulation-summary">字符串操作摘要</related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/data-types/data-type-summary">数据类型摘要 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (DateTime Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Len(valuetype System.DateTime Expression) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As DateTime) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(DateTime Expression);" />
      <MemberSignature Language="F#" Value="static member Len : DateTime -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(valuetype System.DateTime Expression) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.DateTime" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="Expression">任何有效的 <see langword="String" /> 表达式或变量名。 如果 <paramref name="Expression" /> 为 <see langword="Object" /> 类型，<see langword="Len" /> 函数将返回其在由 <see langword="FilePut" /> 函数写入文件中时的大小。</param>
        <summary>返回一个包含字符串中的字符数或存储某个变量所需的名义字节数的整数。</summary>
        <returns>一个包含字符串中的字符数或存储某个变量所需的名义字节数的整数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用用户定义的类型和 `Object` 变量，`Len` 函数返回 `FilePut` 函数将其写入文件的大小。 如果 `Object` 包含 `String`，它将返回字符串的长度。 如果 `Object` 包含任何其他类型，则它将返回对象的大小，因为 `FilePut` 函数将该对象写入文件。  
  
 `VBFixedString` 特性可应用于对象中的字符串字段，以指示写入磁盘时字符串的大小（以字节为单位）。 `Len` 函数在确定 `Object` 变量大小时使用 `VBFixedString` 属性（如果可用）。  
  
> [!NOTE]
>  如果在用户定义数据类型中与可变长度字符串一起使用，则 `Len` 函数可能无法确定所需的实际存储字节数。  
  
> [!NOTE]
>  Visual Basic 早期版本中的 `LenB` 函数返回字符串中的字节数，而不是个字符。 它主要用于在双字节字符集（DBCS）应用程序中转换字符串。 所有当前 Visual Basic 字符串均采用 Unicode 格式，且不再支持 `LenB`。  
  
## <a name="smart-device-developer-notes"></a>智能设备开发人员说明  
 `Len` 函数只接受 `String` 和 `Object` 变量作为参数。 如果 `Object` 包含 `String`，它将返回 `String`的长度。 如果参数为 NULL `Object` 引用，则函数将返回零。 如果 `Object` 包含任何其他类型，则将引发异常。  
  
   
  
## Examples  
 本例使用 `Len` 返回字符串中的字符数。  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/string-manipulation-summary">字符串操作摘要</related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/data-types/data-type-summary">数据类型摘要 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (decimal Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Len(valuetype System.Decimal Expression) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Decimal) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::Decimal Expression);" />
      <MemberSignature Language="F#" Value="static member Len : decimal -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(valuetype System.Decimal Expression) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Decimal" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="Expression">任何有效的 <see langword="String" /> 表达式或变量名。 如果 <paramref name="Expression" /> 为 <see langword="Object" /> 类型，<see langword="Len" /> 函数将返回其在由 <see langword="FilePut" /> 函数写入文件中时的大小。</param>
        <summary>返回一个包含字符串中的字符数或存储某个变量所需的名义字节数的整数。</summary>
        <returns>一个包含字符串中的字符数或存储某个变量所需的名义字节数的整数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用用户定义的类型和 `Object` 变量，`Len` 函数返回 `FilePut` 函数将其写入文件的大小。 如果 `Object` 包含 `String`，它将返回字符串的长度。 如果 `Object` 包含任何其他类型，则它将返回对象的大小，因为 `FilePut` 函数将该对象写入文件。  
  
 `VBFixedString` 特性可应用于对象中的字符串字段，以指示写入磁盘时字符串的大小（以字节为单位）。 `Len` 函数在确定 `Object` 变量大小时使用 `VBFixedString` 属性（如果可用）。  
  
> [!NOTE]
>  如果在用户定义数据类型中与可变长度字符串一起使用，则 `Len` 函数可能无法确定所需的实际存储字节数。  
  
> [!NOTE]
>  Visual Basic 早期版本中的 `LenB` 函数返回字符串中的字节数，而不是个字符。 它主要用于在双字节字符集（DBCS）应用程序中转换字符串。 所有当前 Visual Basic 字符串均采用 Unicode 格式，且不再支持 `LenB`。  
  
## <a name="smart-device-developer-notes"></a>智能设备开发人员说明  
 `Len` 函数只接受 `String` 和 `Object` 变量作为参数。 如果 `Object` 包含 `String`，它将返回 `String`的长度。 如果参数为 NULL `Object` 引用，则函数将返回零。 如果 `Object` 包含任何其他类型，则将引发异常。  
  
   
  
## Examples  
 本例使用 `Len` 返回字符串中的字符数。  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/string-manipulation-summary">字符串操作摘要</related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/data-types/data-type-summary">数据类型摘要 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (double Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Len(float64 Expression) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Double) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(double Expression);" />
      <MemberSignature Language="F#" Value="static member Len : double -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(float64 Expression) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Double" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="Expression">任何有效的 <see langword="String" /> 表达式或变量名。 如果 <paramref name="Expression" /> 为 <see langword="Object" /> 类型，<see langword="Len" /> 函数将返回其在由 <see langword="FilePut" /> 函数写入文件中时的大小。</param>
        <summary>返回一个包含字符串中的字符数或存储某个变量所需的名义字节数的整数。</summary>
        <returns>一个包含字符串中的字符数或存储某个变量所需的名义字节数的整数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用用户定义的类型和 `Object` 变量，`Len` 函数返回 `FilePut` 函数将其写入文件的大小。 如果 `Object` 包含 `String`，它将返回字符串的长度。 如果 `Object` 包含任何其他类型，则它将返回对象的大小，因为 `FilePut` 函数将该对象写入文件。  
  
 `VBFixedString` 特性可应用于对象中的字符串字段，以指示写入磁盘时字符串的大小（以字节为单位）。 `Len` 函数在确定 `Object` 变量大小时使用 `VBFixedString` 属性（如果可用）。  
  
> [!NOTE]
>  如果在用户定义数据类型中与可变长度字符串一起使用，则 `Len` 函数可能无法确定所需的实际存储字节数。  
  
> [!NOTE]
>  Visual Basic 早期版本中的 `LenB` 函数返回字符串中的字节数，而不是个字符。 它主要用于在双字节字符集（DBCS）应用程序中转换字符串。 所有当前 Visual Basic 字符串均采用 Unicode 格式，且不再支持 `LenB`。  
  
## <a name="smart-device-developer-notes"></a>智能设备开发人员说明  
 `Len` 函数只接受 `String` 和 `Object` 变量作为参数。 如果 `Object` 包含 `String`，它将返回 `String`的长度。 如果参数为 NULL `Object` 引用，则函数将返回零。 如果 `Object` 包含任何其他类型，则将引发异常。  
  
   
  
## Examples  
 本例使用 `Len` 返回字符串中的字符数。  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/string-manipulation-summary">字符串操作摘要</related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/data-types/data-type-summary">数据类型摘要 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (short Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Len(int16 Expression) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Short) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(short Expression);" />
      <MemberSignature Language="F#" Value="static member Len : int16 -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(int16 Expression) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Int16" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="Expression">任何有效的 <see langword="String" /> 表达式或变量名。 如果 <paramref name="Expression" /> 为 <see langword="Object" /> 类型，<see langword="Len" /> 函数将返回其在由 <see langword="FilePut" /> 函数写入文件中时的大小。</param>
        <summary>返回一个包含字符串中的字符数或存储某个变量所需的名义字节数的整数。</summary>
        <returns>一个包含字符串中的字符数或存储某个变量所需的名义字节数的整数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用用户定义的类型和 `Object` 变量，`Len` 函数返回 `FilePut` 函数将其写入文件的大小。 如果 `Object` 包含 `String`，它将返回字符串的长度。 如果 `Object` 包含任何其他类型，则它将返回对象的大小，因为 `FilePut` 函数将该对象写入文件。  
  
 `VBFixedString` 特性可应用于对象中的字符串字段，以指示写入磁盘时字符串的大小（以字节为单位）。 `Len` 函数在确定 `Object` 变量大小时使用 `VBFixedString` 属性（如果可用）。  
  
> [!NOTE]
>  如果在用户定义数据类型中与可变长度字符串一起使用，则 `Len` 函数可能无法确定所需的实际存储字节数。  
  
> [!NOTE]
>  Visual Basic 早期版本中的 `LenB` 函数返回字符串中的字节数，而不是个字符。 它主要用于在双字节字符集（DBCS）应用程序中转换字符串。 所有当前 Visual Basic 字符串均采用 Unicode 格式，且不再支持 `LenB`。  
  
## <a name="smart-device-developer-notes"></a>智能设备开发人员说明  
 `Len` 函数只接受 `String` 和 `Object` 变量作为参数。 如果 `Object` 包含 `String`，它将返回 `String`的长度。 如果参数为 NULL `Object` 引用，则函数将返回零。 如果 `Object` 包含任何其他类型，则将引发异常。  
  
   
  
## Examples  
 本例使用 `Len` 返回字符串中的字符数。  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/string-manipulation-summary">字符串操作摘要</related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/data-types/data-type-summary">数据类型摘要 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (int Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Len(int32 Expression) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(int Expression);" />
      <MemberSignature Language="F#" Value="static member Len : int -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(int32 Expression) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Int32" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="Expression">任何有效的 <see langword="String" /> 表达式或变量名。 如果 <paramref name="Expression" /> 为 <see langword="Object" /> 类型，<see langword="Len" /> 函数将返回其在由 <see langword="FilePut" /> 函数写入文件中时的大小。</param>
        <summary>返回一个包含字符串中的字符数或存储某个变量所需的名义字节数的整数。</summary>
        <returns>一个包含字符串中的字符数或存储某个变量所需的名义字节数的整数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用用户定义的类型和 `Object` 变量，`Len` 函数返回 `FilePut` 函数将其写入文件的大小。 如果 `Object` 包含 `String`，它将返回字符串的长度。 如果 `Object` 包含任何其他类型，则它将返回对象的大小，因为 `FilePut` 函数将该对象写入文件。  
  
 `VBFixedString` 特性可应用于对象中的字符串字段，以指示写入磁盘时字符串的大小（以字节为单位）。 `Len` 函数在确定 `Object` 变量大小时使用 `VBFixedString` 属性（如果可用）。  
  
> [!NOTE]
>  如果在用户定义数据类型中与可变长度字符串一起使用，则 `Len` 函数可能无法确定所需的实际存储字节数。  
  
> [!NOTE]
>  Visual Basic 早期版本中的 `LenB` 函数返回字符串中的字节数，而不是个字符。 它主要用于在双字节字符集（DBCS）应用程序中转换字符串。 所有当前 Visual Basic 字符串均采用 Unicode 格式，且不再支持 `LenB`。  
  
## <a name="smart-device-developer-notes"></a>智能设备开发人员说明  
 `Len` 函数只接受 `String` 和 `Object` 变量作为参数。 如果 `Object` 包含 `String`，它将返回 `String`的长度。 如果参数为 NULL `Object` 引用，则函数将返回零。 如果 `Object` 包含任何其他类型，则将引发异常。  
  
   
  
## Examples  
 本例使用 `Len` 返回字符串中的字符数。  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/string-manipulation-summary">字符串操作摘要</related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/data-types/data-type-summary">数据类型摘要 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (long Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Len(int64 Expression) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Long) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(long Expression);" />
      <MemberSignature Language="F#" Value="static member Len : int64 -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(int64 Expression) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Int64" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="Expression">任何有效的 <see langword="String" /> 表达式或变量名。 如果 <paramref name="Expression" /> 为 <see langword="Object" /> 类型，<see langword="Len" /> 函数将返回其在由 <see langword="FilePut" /> 函数写入文件中时的大小。</param>
        <summary>返回一个包含字符串中的字符数或存储某个变量所需的名义字节数的整数。</summary>
        <returns>一个包含字符串中的字符数或存储某个变量所需的名义字节数的整数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用用户定义的类型和 `Object` 变量，`Len` 函数返回 `FilePut` 函数将其写入文件的大小。 如果 `Object` 包含 `String`，它将返回字符串的长度。 如果 `Object` 包含任何其他类型，则它将返回对象的大小，因为 `FilePut` 函数将该对象写入文件。  
  
 `VBFixedString` 特性可应用于对象中的字符串字段，以指示写入磁盘时字符串的大小（以字节为单位）。 `Len` 函数在确定 `Object` 变量大小时使用 `VBFixedString` 属性（如果可用）。  
  
> [!NOTE]
>  如果在用户定义数据类型中与可变长度字符串一起使用，则 `Len` 函数可能无法确定所需的实际存储字节数。  
  
> [!NOTE]
>  Visual Basic 早期版本中的 `LenB` 函数返回字符串中的字节数，而不是个字符。 它主要用于在双字节字符集（DBCS）应用程序中转换字符串。 所有当前 Visual Basic 字符串均采用 Unicode 格式，且不再支持 `LenB`。  
  
## <a name="smart-device-developer-notes"></a>智能设备开发人员说明  
 `Len` 函数只接受 `String` 和 `Object` 变量作为参数。 如果 `Object` 包含 `String`，它将返回 `String`的长度。 如果参数为 NULL `Object` 引用，则函数将返回零。 如果 `Object` 包含任何其他类型，则将引发异常。  
  
   
  
## Examples  
 本例使用 `Len` 返回字符串中的字符数。  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/string-manipulation-summary">字符串操作摘要</related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/data-types/data-type-summary">数据类型摘要 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Len(object Expression) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Object) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member Len : obj -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(object Expression) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="Expression">任何有效的 <see langword="String" /> 表达式或变量名。 如果 <paramref name="Expression" /> 为 <see langword="Object" /> 类型，<see langword="Len" /> 函数将返回其在由 <see langword="FilePut" /> 函数写入文件中时的大小。</param>
        <summary>返回一个包含字符串中的字符数或存储某个变量所需的名义字节数的整数。</summary>
        <returns>一个包含字符串中的字符数或存储某个变量所需的名义字节数的整数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用用户定义的类型和 `Object` 变量，`Len` 函数返回 `FilePut` 函数将其写入文件的大小。 如果 `Object` 包含 `String`，它将返回字符串的长度。 如果 `Object` 包含任何其他类型，则它将返回对象的大小，因为 `FilePut` 函数将该对象写入文件。  
  
 `VBFixedString` 特性可应用于对象中的字符串字段，以指示写入磁盘时字符串的大小（以字节为单位）。 `Len` 函数在确定 `Object` 变量大小时使用 `VBFixedString` 属性（如果可用）。  
  
> [!NOTE]
>  如果在用户定义数据类型中与可变长度字符串一起使用，则 `Len` 函数可能无法确定所需的实际存储字节数。  
  
> [!NOTE]
>  Visual Basic 早期版本中的 `LenB` 函数返回字符串中的字节数，而不是个字符。 它主要用于在双字节字符集（DBCS）应用程序中转换字符串。 所有当前 Visual Basic 字符串均采用 Unicode 格式，且不再支持 `LenB`。  
  
## <a name="smart-device-developer-notes"></a>智能设备开发人员说明  
 `Len` 函数只接受 `String` 和 `Object` 变量作为参数。 如果 `Object` 包含 `String`，它将返回 `String`的长度。 如果参数为 NULL `Object` 引用，则函数将返回零。 如果 `Object` 包含任何其他类型，则将引发异常。  
  
   
  
## Examples  
 本例使用 `Len` 返回字符串中的字符数。  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/string-manipulation-summary">字符串操作摘要</related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/data-types/data-type-summary">数据类型摘要 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (sbyte Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Len(int8 Expression) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As SByte) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::SByte Expression);" />
      <MemberSignature Language="F#" Value="static member Len : sbyte -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(int8 Expression) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.SByte" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="Expression">任何有效的 <see langword="String" /> 表达式或变量名。 如果 <paramref name="Expression" /> 为 <see langword="Object" /> 类型，<see langword="Len" /> 函数将返回其在由 <see langword="FilePut" /> 函数写入文件中时的大小。</param>
        <summary>返回一个包含字符串中的字符数或存储某个变量所需的名义字节数的整数。</summary>
        <returns>一个包含字符串中的字符数或存储某个变量所需的名义字节数的整数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用用户定义的类型和 `Object` 变量，`Len` 函数返回 `FilePut` 函数将其写入文件的大小。 如果 `Object` 包含 `String`，它将返回字符串的长度。 如果 `Object` 包含任何其他类型，则它将返回对象的大小，因为 `FilePut` 函数将该对象写入文件。  
  
 `VBFixedString` 特性可应用于对象中的字符串字段，以指示写入磁盘时字符串的大小（以字节为单位）。 `Len` 函数在确定 `Object` 变量大小时使用 `VBFixedString` 属性（如果可用）。  
  
> [!NOTE]
>  如果在用户定义数据类型中与可变长度字符串一起使用，则 `Len` 函数可能无法确定所需的实际存储字节数。  
  
> [!NOTE]
>  Visual Basic 早期版本中的 `LenB` 函数返回字符串中的字节数，而不是个字符。 它主要用于在双字节字符集（DBCS）应用程序中转换字符串。 所有当前 Visual Basic 字符串均采用 Unicode 格式，且不再支持 `LenB`。  
  
## <a name="smart-device-developer-notes"></a>智能设备开发人员说明  
 `Len` 函数只接受 `String` 和 `Object` 变量作为参数。 如果 `Object` 包含 `String`，它将返回 `String`的长度。 如果参数为 NULL `Object` 引用，则函数将返回零。 如果 `Object` 包含任何其他类型，则将引发异常。  
  
   
  
## Examples  
 本例使用 `Len` 返回字符串中的字符数。  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Strings.Len(System.Byte)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/string-manipulation-summary">字符串操作摘要</related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/data-types/data-type-summary">数据类型摘要 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (float Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Len(float32 Expression) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Single) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(float Expression);" />
      <MemberSignature Language="F#" Value="static member Len : single -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(float32 Expression) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Single" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="Expression">任何有效的 <see langword="String" /> 表达式或变量名。 如果 <paramref name="Expression" /> 为 <see langword="Object" /> 类型，<see langword="Len" /> 函数将返回其在由 <see langword="FilePut" /> 函数写入文件中时的大小。</param>
        <summary>返回一个包含字符串中的字符数或存储某个变量所需的名义字节数的整数。</summary>
        <returns>一个包含字符串中的字符数或存储某个变量所需的名义字节数的整数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用用户定义的类型和 `Object` 变量，`Len` 函数返回 `FilePut` 函数将其写入文件的大小。 如果 `Object` 包含 `String`，它将返回字符串的长度。 如果 `Object` 包含任何其他类型，则它将返回对象的大小，因为 `FilePut` 函数将该对象写入文件。  
  
 `VBFixedString` 特性可应用于对象中的字符串字段，以指示写入磁盘时字符串的大小（以字节为单位）。 `Len` 函数在确定 `Object` 变量大小时使用 `VBFixedString` 属性（如果可用）。  
  
> [!NOTE]
>  如果在用户定义数据类型中与可变长度字符串一起使用，则 `Len` 函数可能无法确定所需的实际存储字节数。  
  
> [!NOTE]
>  Visual Basic 早期版本中的 `LenB` 函数返回字符串中的字节数，而不是个字符。 它主要用于在双字节字符集（DBCS）应用程序中转换字符串。 所有当前 Visual Basic 字符串均采用 Unicode 格式，且不再支持 `LenB`。  
  
## <a name="smart-device-developer-notes"></a>智能设备开发人员说明  
 `Len` 函数只接受 `String` 和 `Object` 变量作为参数。 如果 `Object` 包含 `String`，它将返回 `String`的长度。 如果参数为 NULL `Object` 引用，则函数将返回零。 如果 `Object` 包含任何其他类型，则将引发异常。  
  
   
  
## Examples  
 本例使用 `Len` 返回字符串中的字符数。  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/string-manipulation-summary">字符串操作摘要</related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/data-types/data-type-summary">数据类型摘要 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (string Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Len(string Expression) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::String ^ Expression);" />
      <MemberSignature Language="F#" Value="static member Len : string -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(string Expression) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="Expression">任何有效的 <see langword="String" /> 表达式或变量名。 如果 <paramref name="Expression" /> 为 <see langword="Object" /> 类型，<see langword="Len" /> 函数将返回其在由 <see langword="FilePut" /> 函数写入文件中时的大小。</param>
        <summary>返回一个包含字符串中的字符数或存储某个变量所需的名义字节数的整数。</summary>
        <returns>一个包含字符串中的字符数或存储某个变量所需的名义字节数的整数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用用户定义的类型和 `Object` 变量，`Len` 函数返回 `FilePut` 函数将其写入文件的大小。 如果 `Object` 包含 `String`，它将返回字符串的长度。 如果 `Object` 包含任何其他类型，则它将返回对象的大小，因为 `FilePut` 函数将该对象写入文件。  
  
 `VBFixedString` 特性可应用于对象中的字符串字段，以指示写入磁盘时字符串的大小（以字节为单位）。 `Len` 函数在确定 `Object` 变量大小时使用 `VBFixedString` 属性（如果可用）。  
  
> [!NOTE]
>  如果在用户定义数据类型中与可变长度字符串一起使用，则 `Len` 函数可能无法确定所需的实际存储字节数。  
  
> [!NOTE]
>  Visual Basic 早期版本中的 `LenB` 函数返回字符串中的字节数，而不是个字符。 它主要用于在双字节字符集（DBCS）应用程序中转换字符串。 所有当前 Visual Basic 字符串均采用 Unicode 格式，且不再支持 `LenB`。  
  
## <a name="smart-device-developer-notes"></a>智能设备开发人员说明  
 `Len` 函数只接受 `String` 和 `Object` 变量作为参数。 如果 `Object` 包含 `String`，它将返回 `String`的长度。 如果参数为 NULL `Object` 引用，则函数将返回零。 如果 `Object` 包含任何其他类型，则将引发异常。  
  
   
  
## Examples  
 本例使用 `Len` 返回字符串中的字符数。  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/string-manipulation-summary">字符串操作摘要</related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/data-types/data-type-summary">数据类型摘要 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (ushort Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Len(unsigned int16 Expression) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As UShort) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::UInt16 Expression);" />
      <MemberSignature Language="F#" Value="static member Len : uint16 -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(unsigned int16 Expression) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.UInt16" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="Expression">任何有效的 <see langword="String" /> 表达式或变量名。 如果 <paramref name="Expression" /> 为 <see langword="Object" /> 类型，<see langword="Len" /> 函数将返回其在由 <see langword="FilePut" /> 函数写入文件中时的大小。</param>
        <summary>返回一个包含字符串中的字符数或存储某个变量所需的名义字节数的整数。</summary>
        <returns>一个包含字符串中的字符数或存储某个变量所需的名义字节数的整数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用用户定义的类型和 `Object` 变量，`Len` 函数返回 `FilePut` 函数将其写入文件的大小。 如果 `Object` 包含 `String`，它将返回字符串的长度。 如果 `Object` 包含任何其他类型，则它将返回对象的大小，因为 `FilePut` 函数将该对象写入文件。  
  
 `VBFixedString` 特性可应用于对象中的字符串字段，以指示写入磁盘时字符串的大小（以字节为单位）。 `Len` 函数在确定 `Object` 变量大小时使用 `VBFixedString` 属性（如果可用）。  
  
> [!NOTE]
>  如果在用户定义数据类型中与可变长度字符串一起使用，则 `Len` 函数可能无法确定所需的实际存储字节数。  
  
> [!NOTE]
>  Visual Basic 早期版本中的 `LenB` 函数返回字符串中的字节数，而不是个字符。 它主要用于在双字节字符集（DBCS）应用程序中转换字符串。 所有当前 Visual Basic 字符串均采用 Unicode 格式，且不再支持 `LenB`。  
  
## <a name="smart-device-developer-notes"></a>智能设备开发人员说明  
 `Len` 函数只接受 `String` 和 `Object` 变量作为参数。 如果 `Object` 包含 `String`，它将返回 `String`的长度。 如果参数为 NULL `Object` 引用，则函数将返回零。 如果 `Object` 包含任何其他类型，则将引发异常。  
  
   
  
## Examples  
 本例使用 `Len` 返回字符串中的字符数。  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Strings.Len(System.Int16)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/string-manipulation-summary">字符串操作摘要</related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/data-types/data-type-summary">数据类型摘要 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (uint Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Len(unsigned int32 Expression) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As UInteger) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::UInt32 Expression);" />
      <MemberSignature Language="F#" Value="static member Len : uint32 -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(unsigned int32 Expression) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.UInt32" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="Expression">任何有效的 <see langword="String" /> 表达式或变量名。 如果 <paramref name="Expression" /> 为 <see langword="Object" /> 类型，<see langword="Len" /> 函数将返回其在由 <see langword="FilePut" /> 函数写入文件中时的大小。</param>
        <summary>返回一个包含字符串中的字符数或存储某个变量所需的名义字节数的整数。</summary>
        <returns>一个包含字符串中的字符数或存储某个变量所需的名义字节数的整数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用用户定义的类型和 `Object` 变量，`Len` 函数返回 `FilePut` 函数将其写入文件的大小。 如果 `Object` 包含 `String`，它将返回字符串的长度。 如果 `Object` 包含任何其他类型，则它将返回对象的大小，因为 `FilePut` 函数将该对象写入文件。  
  
 `VBFixedString` 特性可应用于对象中的字符串字段，以指示写入磁盘时字符串的大小（以字节为单位）。 `Len` 函数在确定 `Object` 变量大小时使用 `VBFixedString` 属性（如果可用）。  
  
> [!NOTE]
>  如果在用户定义数据类型中与可变长度字符串一起使用，则 `Len` 函数可能无法确定所需的实际存储字节数。  
  
> [!NOTE]
>  Visual Basic 早期版本中的 `LenB` 函数返回字符串中的字节数，而不是个字符。 它主要用于在双字节字符集（DBCS）应用程序中转换字符串。 所有当前 Visual Basic 字符串均采用 Unicode 格式，且不再支持 `LenB`。  
  
## <a name="smart-device-developer-notes"></a>智能设备开发人员说明  
 `Len` 函数只接受 `String` 和 `Object` 变量作为参数。 如果 `Object` 包含 `String`，它将返回 `String`的长度。 如果参数为 NULL `Object` 引用，则函数将返回零。 如果 `Object` 包含任何其他类型，则将引发异常。  
  
   
  
## Examples  
 本例使用 `Len` 返回字符串中的字符数。  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Strings.Len(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/string-manipulation-summary">字符串操作摘要</related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/data-types/data-type-summary">数据类型摘要 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (ulong Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Len(unsigned int64 Expression) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As ULong) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::UInt64 Expression);" />
      <MemberSignature Language="F#" Value="static member Len : uint64 -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(unsigned int64 Expression) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.UInt64" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="Expression">任何有效的 <see langword="String" /> 表达式或变量名。 如果 <paramref name="Expression" /> 为 <see langword="Object" /> 类型，<see langword="Len" /> 函数将返回其在由 <see langword="FilePut" /> 函数写入文件中时的大小。</param>
        <summary>返回一个包含字符串中的字符数或存储某个变量所需的名义字节数的整数。</summary>
        <returns>一个包含字符串中的字符数或存储某个变量所需的名义字节数的整数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用用户定义的类型和 `Object` 变量，`Len` 函数返回 `FilePut` 函数将其写入文件的大小。 如果 `Object` 包含 `String`，它将返回字符串的长度。 如果 `Object` 包含任何其他类型，则它将返回对象的大小，因为 `FilePut` 函数将该对象写入文件。  
  
 `VBFixedString` 特性可应用于对象中的字符串字段，以指示写入磁盘时字符串的大小（以字节为单位）。 `Len` 函数在确定 `Object` 变量大小时使用 `VBFixedString` 属性（如果可用）。  
  
> [!NOTE]
>  如果在用户定义数据类型中与可变长度字符串一起使用，则 `Len` 函数可能无法确定所需的实际存储字节数。  
  
> [!NOTE]
>  Visual Basic 早期版本中的 `LenB` 函数返回字符串中的字节数，而不是个字符。 它主要用于在双字节字符集（DBCS）应用程序中转换字符串。 所有当前 Visual Basic 字符串均采用 Unicode 格式，且不再支持 `LenB`。  
  
## <a name="smart-device-developer-notes"></a>智能设备开发人员说明  
 `Len` 函数只接受 `String` 和 `Object` 变量作为参数。 如果 `Object` 包含 `String`，它将返回 `String`的长度。 如果参数为 NULL `Object` 引用，则函数将返回零。 如果 `Object` 包含任何其他类型，则将引发异常。  
  
   
  
## Examples  
 本例使用 `Len` 返回字符串中的字符数。  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Strings.Len(System.Int64)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/string-manipulation-summary">字符串操作摘要</related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/data-types/data-type-summary">数据类型摘要 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="LSet">
      <MemberSignature Language="C#" Value="public static string LSet (string Source, int Length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string LSet(string Source, int32 Length) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.LSet(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function LSet (Source As String, Length As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ LSet(System::String ^ Source, int Length);" />
      <MemberSignature Language="F#" Value="static member LSet : string * int -&gt; string" Usage="Microsoft.VisualBasic.Strings.LSet (Source, Length)" />
      <MemberSignature Language="ILAsm" Value=".method public static string LSet(string Source, int32 Length) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Source" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0" />
        <Parameter Name="Length" Type="System.Int32" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="Source">必需。 <see langword="String" /> 表达式。 字符串变量的名称。</param>
        <param name="Length">必需。 <see langword="Integer" /> 表达式。 返回的字符串的长度。</param>
        <summary>返回一个左对齐字符串，该字符串包含调整为指定长度的指定的字符串。</summary>
        <returns>一个左对齐字符串，该字符串包含调整为指定长度的指定的字符串。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果指定的字符串长度超过指定的长度，则返回的字符串将缩短为指定长度。 如果指定的字符串短于指定的长度，则将在返回的字符串的右端添加空格以生成相应的长度。  
  
   
  
## Examples  
 此示例演示如何使用 `LSet` 函数。  
  
 [!code-vb[VbVbalrStrings#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.RSet(System.String,System.Int32)" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/string-manipulation-summary">字符串操作摘要</related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/data-types/data-type-summary">数据类型摘要 (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/programming-guide/language-features/data-types/efficient-use-of-data-types">有效使用数据类型</related>
      </Docs>
    </Member>
    <Member MemberName="LTrim">
      <MemberSignature Language="C#" Value="public static string LTrim (string str);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string LTrim(string str) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.LTrim(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function LTrim (str As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ LTrim(System::String ^ str);" />
      <MemberSignature Language="F#" Value="static member LTrim : string -&gt; string" Usage="Microsoft.VisualBasic.Strings.LTrim str" />
      <MemberSignature Language="ILAsm" Value=".method public static string LTrim(string str) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="str">必需。 任何有效的 <see langword="String" /> 表达式。</param>
        <summary>返回一个字符串，它包含一个没有前导空格 (<see langword="LTrim" />)、没有尾随空格 (<see langword="RTrim" />) 或既没有前导空格也没有尾随空格 (<see langword="Trim" />) 的指定字符串的副本。</summary>
        <returns>一个字符串，它包含一个没有前导空格 (<see langword="LTrim" />)、没有尾随空格 (<see langword="RTrim" />) 或既没有前导空格也没有尾随空格 (<see langword="Trim" />) 的指定字符串的副本。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `LTrim`、`RTrim`和 `Trim` 函数将删除字符串末尾的空格。  
  
   
  
## Examples  
 此示例使用 `LTrim` 函数去除字符串变量的前导空格，使用 `RTrim` 函数去除尾随空格， 并使用 `Trim` 函数同时去除这两种类型的空格。  
  
 [!code-vb[VbVbalrStrings#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Trim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.RTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/string-manipulation-summary">字符串操作摘要</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Mid">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>返回一个字符串，该字符串包含来自指定字符串的字符。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Mid">
      <MemberSignature Language="C#" Value="public static string Mid (string str, int Start);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Mid(string str, int32 Start) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Mid (str As String, Start As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Mid(System::String ^ str, int Start);" />
      <MemberSignature Language="F#" Value="static member Mid : string * int -&gt; string" Usage="Microsoft.VisualBasic.Strings.Mid (str, Start)" />
      <MemberSignature Language="ILAsm" Value=".method public static string Mid(string str, int32 Start) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.1;net-5.0" />
        <Parameter Name="Start" Type="System.Int32" Index="1" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="str">必需。 <see langword="String" /> 表达式，从该表达式返回字符。</param>
        <param name="Start">必需。 <see langword="Integer" /> 表达式。 要返回字符的开始位置。 如果 <paramref name="Start" /> 大于 <paramref name="str" /> 中的字符个数，则 <see langword="Mid" /> 函数返回零长度字符串 ("")。 <paramref name="Start" /> 从一开始。</param>
        <summary>返回字符串，该字符串包含从字符串中的指定位置开始的所有字符。</summary>
        <returns>由从字符串中指定位置开始的所有字符组成的字符串。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要确定 `str`中的字符数，请使用 `Len` 函数。  
  
 Visual Basic 具有 `Mid` 函数和 `Mid` 语句。 这些元素对字符串中的指定数量的字符进行操作，但 `Mid` 函数返回字符，而 `Mid` 语句替换这些字符。 有关详细信息，请参阅[Mid 语句](/dotnet/visual-basic/language-reference/statements/mid-statement)。  
  
> [!NOTE]
>  以前版本的 Visual Basic 中的 `MidB` 函数返回以字节而不是字符表示的字符串。 它主要用于在双字节字符集（DBCS）应用程序中转换字符串。 所有 Visual Basic 字符串均采用 Unicode 格式，`MidB` 不再受支持。  
  
   
  
## Examples  
 此示例中的最后一行对 `Mid` 函数使用此重载以返回字符串中第 5 个字符之后的字符（包括第 5 个字符）。  
  
 [!code-vb[VbVbalrStrings#17](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#17)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Start" /> &lt;= 0 或 <paramref name="Length" /> &lt; 0。</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Trim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.LTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.RTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/string-manipulation-summary">字符串操作摘要</related>
        <related type="Article" href="/dotnet/visual-basic/programming-guide/language-features/strings/">字符串 (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/programming-guide/language-features/strings/introduction-to-strings">字符串介绍 (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/statements/mid-statement">Mid 语句</related>
      </Docs>
    </Member>
    <Member MemberName="Mid">
      <MemberSignature Language="C#" Value="public static string Mid (string str, int Start, int Length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Mid(string str, int32 Start, int32 Length) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Mid (str As String, Start As Integer, Length As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Mid(System::String ^ str, int Start, int Length);" />
      <MemberSignature Language="F#" Value="static member Mid : string * int * int -&gt; string" Usage="Microsoft.VisualBasic.Strings.Mid (str, Start, Length)" />
      <MemberSignature Language="ILAsm" Value=".method public static string Mid(string str, int32 Start, int32 Length) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.1;net-5.0" />
        <Parameter Name="Start" Type="System.Int32" Index="1" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.1;net-5.0" />
        <Parameter Name="Length" Type="System.Int32" Index="2" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="str">必需。 <see langword="String" /> 表达式，从该表达式返回字符。</param>
        <param name="Start">必需。 <see langword="Integer" /> 表达式。 要返回字符的开始位置。 如果 <paramref name="Start" /> 大于 <paramref name="str" /> 中的字符个数，则 <see langword="Mid" /> 函数返回零长度字符串 ("")。 <paramref name="Start" /> 从 1 开始。</param>
        <param name="Length">可选。 <see langword="Integer" /> 表达式。 要返回的字符数。 如果 <paramref name="Length" /> 省略或超过文本的字符（包括 <paramref name="Start" /> 处的字符）数，则返回从字符串开始位置到结尾的所有字符。</param>
        <summary>返回字符串，该字符串包含从字符串中的指定位置开始的指定数量的字符。</summary>
        <returns>由从字符串中指定位置开始的指定数量的字符组成的字符串。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要确定 `str`中的字符数，请使用 `Len` 函数。  
  
 Visual Basic 具有 `Mid` 函数和 `Mid` 语句。 这些元素对字符串中的指定数量的字符进行操作，但 `Mid` 函数返回字符，而 `Mid` 语句替换这些字符。 有关详细信息，请参阅[Mid 语句](/dotnet/visual-basic/language-reference/statements/mid-statement)。  
  
> [!NOTE]
>  以前版本的 Visual Basic 中的 `MidB` 函数返回以字节而不是字符表示的字符串。 它主要用于在双字节字符集（DBCS）应用程序中转换字符串。 所有 Visual Basic 字符串均采用 Unicode 格式，`MidB` 不再受支持。  
  
   
  
## Examples  
 此示例中的前两个 `Mid` 函数从字符串中的指定位置开始返回指定数量的字符。 （最后一个函数阐释 <xref:Microsoft.VisualBasic.Strings.Mid%28System.String%2CSystem.Int32%29> 重载，并且仅指定字符串提取的起点。）  
  
 [!code-vb[VbVbalrStrings#17](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#17)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Start" /> &lt;= 0 或 <paramref name="Length" /> &lt; 0。</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Trim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.LTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.RTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/string-manipulation-summary">字符串操作摘要</related>
        <related type="Article" href="/dotnet/visual-basic/programming-guide/language-features/strings/">字符串 (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/programming-guide/language-features/strings/introduction-to-strings">字符串介绍 (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/statements/mid-statement">Mid 语句</related>
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public static string Replace (string Expression, string Find, string Replacement, int Start = 1, int Count = -1, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Replace(string Expression, string Find, string Replacement, int32 Start, int32 Count, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function Replace (Expression As String, Find As String, Replacement As String, Optional Start As Integer = 1, Optional Count As Integer = -1, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As String" />
      <MemberSignature Language="F#" Value="static member Replace : string * string * string * int * int * Microsoft.VisualBasic.CompareMethod -&gt; string" Usage="Microsoft.VisualBasic.Strings.Replace (Expression, Find, Replacement, Start, Count, Compare)" />
      <MemberSignature Language="ILAsm" Value=".method public static string Replace(string Expression, string Find, string Replacement, int32 Start, int32 Count, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0" />
        <Parameter Name="Find" Type="System.String" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0" />
        <Parameter Name="Replacement" Type="System.String" Index="2" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0" />
        <Parameter Name="Start" Type="System.Int32" Index="3" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0" />
        <Parameter Name="Count" Type="System.Int32" Index="4" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod" Index="5" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="Expression">必需。 字符串表达式，包含要替换的子字符串。</param>
        <param name="Find">必需。 搜索的子字符串。</param>
        <param name="Replacement">必需。 替换用的子字符串。</param>
        <param name="Start">可选。 <paramref name="Expression" /> 内部要替换的子字符串的开始的位置。 <see langword="Replace" /> 的返回值是字符串，在 <paramref name="Start" /> 开始，具有相应的子情况。 如果省略，则假定为 1。</param>
        <param name="Count">可选。 执行子字符串替换的数目。 如果省略，则默认值是 -1，表示“进行所有可能的替换”。</param>
        <param name="Compare">可选。 数值，指示对子字符串求值时使用的比较类型。 具体的值请参见"设置"。</param>
        <summary>返回一个字符串，其中的指定子字符串已由另一个子字符串替换了指定的次数。</summary>
        <returns><see langword="Replace" /> 返回下列值。  
  
 <list type="table"><item><term> 如果 
 </term><description> Replace 返回 
 </description></item><item><term><paramref name="Find" /> 的长度为零或 <see langword="Nothing" /></term><description> <paramref name="Expression" /> 的副本</description></item><item><term><paramref name="Replace" /> 的长度为零 
 </term><description> <paramref name="Expression" /> 的副本，不带 <paramref name="Find" /> 匹配项</description></item><item><term><paramref name="Expression" /> 的长度为零或 <see langword="Nothing" />，或者 <paramref name="Start" /> 大于 <paramref name="Expression" /> 的长度</term><description><see langword="Nothing" /></description></item><item><term><paramref name="Count" /> 是 0 
 </term><description> <paramref name="Expression" /> 的副本</description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Replace` 函数的返回值是一个字符串，该字符串从 `Start` 指定的位置开始，在 `Expression` 字符串的末尾结束，并通过 `Find` 和 `Replace` 值指定的替换进行。  
  
 `Compare` 参数可以具有下列值。  
  
|一直|说明|  
|-|-|  
|`Binary`|执行二进制比较|  
|`Text`|执行文本比较|  
  
   
  
## Examples  
 此示例演示 `Replace` 函数。  
  
```vb  
Dim TestString As String = "Shopping List"  
' Returns "Shipping List".  
Dim aString As String = Replace(TestString, "o", "i")  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Count" /> &lt; -1 或 <paramref name="Start" /> &lt;= 0。</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Filter" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/string-manipulation-summary">字符串操作摘要</related>
      </Docs>
    </Member>
    <Member MemberName="Right">
      <MemberSignature Language="C#" Value="public static string Right (string str, int Length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Right(string str, int32 Length) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Right (str As String, Length As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Right(System::String ^ str, int Length);" />
      <MemberSignature Language="F#" Value="static member Right : string * int -&gt; string" Usage="Microsoft.VisualBasic.Strings.Right (str, Length)" />
      <MemberSignature Language="ILAsm" Value=".method public static string Right(string str, int32 Length) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.1;net-5.0" />
        <Parameter Name="Length" Type="System.Int32" Index="1" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="str">必需。 一个 <see langword="String" /> 表达式，从中返回最右侧的那些字符。</param>
        <param name="Length">必需。 <see langword="Integer" /> 列中的一个值匹配。 指示要返回的字符数的数值表达式。 如果为 0，则返回零长度字符串 ("")。 如果大于或等于 <paramref name="str" /> 的字符数，则返回整个字符串。</param>
        <summary>返回一个字符串，其中包含从某个字符串右端开始的指定数量的字符。</summary>
        <returns>一个字符串，其中包含从某个字符串右端开始的指定数量的字符。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要确定 `str`中的字符数，请使用 `Len` 函数。 如果在 Windows 窗体中使用或任何其他具有 `Right` 属性的类，则必须使用 `Microsoft.VisualBasic.Strings.Right`完全限定该函数。  
  
> [!NOTE]
>  早期版本的 Visual Basic 中的 `RightB` 函数以字节为单位（而不是字符）返回字符串。 它主要用于在双字节字符集（DBCS）应用程序中转换字符串。 所有当前 Visual Basic 字符串均采用 Unicode 格式，且不再支持 `RightB`。  
  
   
  
## Examples  
 此示例演示如何使用 `Right` 函数返回给定 `String`的子字符串。 在具有 `Right` 属性的类中，可能需要完全限定 `Right` 函数。  
  
 [!code-vb[VbVbalrStrings#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#21)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Length" /> &lt; 0。</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Mid" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/string-manipulation-summary">字符串操作摘要</related>
      </Docs>
    </Member>
    <Member MemberName="RSet">
      <MemberSignature Language="C#" Value="public static string RSet (string Source, int Length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string RSet(string Source, int32 Length) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.RSet(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function RSet (Source As String, Length As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ RSet(System::String ^ Source, int Length);" />
      <MemberSignature Language="F#" Value="static member RSet : string * int -&gt; string" Usage="Microsoft.VisualBasic.Strings.RSet (Source, Length)" />
      <MemberSignature Language="ILAsm" Value=".method public static string RSet(string Source, int32 Length) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Source" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0" />
        <Parameter Name="Length" Type="System.Int32" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="Source">必需。 <see langword="String" /> 表达式。 字符串变量的名称。</param>
        <param name="Length">必需。 <see langword="Integer" /> 表达式。 返回的字符串的长度。</param>
        <summary>返回包含调整为指定长度的指定字符串的右对齐字符串。</summary>
        <returns>包含调整为指定长度的指定字符串的右对齐字符串。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果 `Source` 的长度超过 `Length`，则 `RSet` 会仅在返回的字符串中将最左侧的字符（直到 `Source`的长度）。 如果指定的字符串短于指定的长度，则将在字符串的左端添加空格以生成相应的长度。 如果指定的字符串长度超过指定的长度，则将其缩短为指定长度。  
  
   
  
## Examples  
 此示例演示如何使用 `RSet` 函数。  
  
 [!code-vb[VbVbalrStrings#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#9)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.LSet(System.String,System.Int32)" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/string-manipulation-summary">字符串操作摘要</related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/data-types/data-type-summary">数据类型摘要 (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/programming-guide/language-features/data-types/efficient-use-of-data-types">有效使用数据类型</related>
      </Docs>
    </Member>
    <Member MemberName="RTrim">
      <MemberSignature Language="C#" Value="public static string RTrim (string str);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string RTrim(string str) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.RTrim(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function RTrim (str As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ RTrim(System::String ^ str);" />
      <MemberSignature Language="F#" Value="static member RTrim : string -&gt; string" Usage="Microsoft.VisualBasic.Strings.RTrim str" />
      <MemberSignature Language="ILAsm" Value=".method public static string RTrim(string str) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="str">必需。 任何有效的 <see langword="String" /> 表达式。</param>
        <summary>返回一个字符串，它包含一个没有前导空格 (<see langword="LTrim" />)、没有尾随空格 (<see langword="RTrim" />) 或既没有前导空格也没有尾随空格 (<see langword="Trim" />) 的指定字符串的副本。</summary>
        <returns>一个字符串，它包含一个没有前导空格 (<see langword="LTrim" />)、没有尾随空格 (<see langword="RTrim" />) 或既没有前导空格也没有尾随空格 (<see langword="Trim" />) 的指定字符串的副本。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `LTrim`、`RTrim`和 `Trim` 函数将删除字符串末尾的空格。  
  
   
  
## Examples  
 此示例使用 `LTrim` 函数去除字符串变量的前导空格，使用 `RTrim` 函数去除尾随空格， 并使用 `Trim` 函数同时去除这两种类型的空格。  
  
 [!code-vb[VbVbalrStrings#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Trim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.LTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/string-manipulation-summary">字符串操作摘要</related>
      </Docs>
    </Member>
    <Member MemberName="Space">
      <MemberSignature Language="C#" Value="public static string Space (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Space(int32 Number) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Space (Number As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Space(int Number);" />
      <MemberSignature Language="F#" Value="static member Space : int -&gt; string" Usage="Microsoft.VisualBasic.Strings.Space Number" />
      <MemberSignature Language="ILAsm" Value=".method public static string Space(int32 Number) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="Number">必需。 <see langword="Integer" /> 表达式。 希望字符串包含的空格数。</param>
        <summary>返回由指定数量空格组成的字符串。</summary>
        <returns>由指定数量空格组成的字符串。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Space` 函数对于格式化输出和清除固定长度字符串中的数据非常有用。  
  
   
  
## Examples  
 此示例使用 `Space` 函数返回由指定数量的空格组成的字符串。  
  
 [!code-vb[VbVbalrStrings#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Number" /> &lt; 0。</exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/string-manipulation-summary">字符串操作摘要</related>
      </Docs>
    </Member>
    <Member MemberName="Split">
      <MemberSignature Language="C#" Value="public static string[] Split (string Expression, string Delimiter = &quot; &quot;, int Limit = -1, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string[] Split(string Expression, string Delimiter, int32 Limit, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function Split (Expression As String, Optional Delimiter As String = &quot; &quot;, Optional Limit As Integer = -1, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As String()" />
      <MemberSignature Language="F#" Value="static member Split : string * string * int * Microsoft.VisualBasic.CompareMethod -&gt; string[]" Usage="Microsoft.VisualBasic.Strings.Split (Expression, Delimiter, Limit, Compare)" />
      <MemberSignature Language="ILAsm" Value=".method public static string[] Split(string Expression, string Delimiter, int32 Limit, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0" />
        <Parameter Name="Delimiter" Type="System.String" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0" />
        <Parameter Name="Limit" Type="System.Int32" Index="2" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod" Index="3" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="Expression">必需。 包含子字符串和分隔符的 <see langword="String" /> 表达式。</param>
        <param name="Delimiter">可选。 用于标识子字符串的界限的任何单个字符。 如果省略了 <paramref name="Delimiter" />，则假定空白字符 (" ") 为分隔符。</param>
        <param name="Limit">可选。 输入字符串应拆分到的子字符串的最大数量。 默认值为 -1，指示在 <paramref name="Delimiter" /> 字符串的每个匹配项处都拆分输入字符串。</param>
        <param name="Compare">可选。 数值，指示计算子字符串时使用的比较模式。 请参阅“设置”，以获取值。</param>
        <summary>返回一个从零开始的一维数组，其中包含指定数量的子字符串。</summary>
        <returns><see langword="String" /> 数组。 如果 <paramref name="Expression" /> 为零长度字符串 ("")，则 <see langword="Split" /> 返回包含零长度字符串的单个元素数组。 如果 <paramref name="Delimiter" /> 为零长度字符串，或如果它不在 <paramref name="Expression" /> 中的任何位置出现，则 <see langword="Split" /> 将返回包含整个 <paramref name="Expression" /> 字符串的单个元素数组。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 默认情况下，或 `Limit` 等于-1 时，`Split` 函数将在每次出现分隔符字符串时拆分输入字符串，并返回数组中的子字符串。 如果 `Limit` 参数大于零，则 `Split` 函数将在第一次 `Limit`分隔符时拆分字符串，并返回包含生成的子字符串的数组。 例如，`Split("a:b:c", ":")` `{"a", "b", "c"}`返回数组，`Split("a:b:c", ":", 2)` 返回数组 `{"a", "b:c"}`。  
  
 当 `Split` 函数在一个行中遇到两个分隔符时，或在字符串开头或结尾处使用分隔符时，它会将它们解释为环绕空字符串（""）。 例如，`Split("xx", "x")` 返回包含三个空字符串的数组：一个介于字符串开头和第一个 "x" 之间，一个介于两个 "x" 字符串之间，另一个介于字符串的最后一个 "x" 和末尾之间。  
  
 下表演示可选 `Delimiter`、`Limit`和 `Compare` 参数如何更改 `Split` 函数的行为。  
  
|拆分呼叫|返回值|  
|-|-|  
|`Split("42, 12, 19")`|{"42," , "12," , "19"}|  
|`Split("42, 12, 19", ", ")`|{"42", "12", "19"}|  
|`Split("42, 12, 19", ", ", 2)`|{"42", "12, 19"}|  
|`Split("192.168.0.1", ".")`|{"192", "168", "0", "1"}|  
|`Split("Alice and Bob", " AND ")`|{"Alice and Bob"}|  
|`Split("Alice and Bob", " AND ", ,CompareMethod.Text)`|{"Alice"，"Bob"}|  
|`Split("someone@example.com", "@",1)`|{"someone@example.com"}|  
|`Split("someone@example.com", "@",2)`|{"example.com"}|  
  
 `Compare` 参数可以具有下列值。  
  
|一直|说明|值|  
|-|-|-|  
|`CompareMethod.Binary`|执行二进制比较|0|  
|`CompareMethod.Text`|执行文本比较|1|  
  
   
  
## Examples  
 下面的示例演示如何在字符串所在的空间拆分字符串。  
  
 [!code-vb[VbVbalrStrings#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#13)]  
  
 下面的示例演示如何使用行中的多个分隔符拆分字符串并筛选出空字符串。  
  
 [!code-vb[VbVbalrStrings#14](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#14)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Join" />
        <altmember cref="T:Microsoft.VisualBasic.CompareMethod" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/string-manipulation-summary">字符串操作摘要</related>
      </Docs>
    </Member>
    <Member MemberName="StrComp">
      <MemberSignature Language="C#" Value="public static int StrComp (string String1, string String2, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 StrComp(string String1, string String2, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrComp(System.String,System.String,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function StrComp (String1 As String, String2 As String, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As Integer" />
      <MemberSignature Language="F#" Value="static member StrComp : string * string * Microsoft.VisualBasic.CompareMethod -&gt; int" Usage="Microsoft.VisualBasic.Strings.StrComp (String1, String2, Compare)" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 StrComp(string String1, string String2, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String1" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0" />
        <Parameter Name="String2" Type="System.String" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod" Index="2" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="String1">必需。 任何有效的 <see langword="String" /> 表达式。</param>
        <param name="String2">必需。 任何有效的 <see langword="String" /> 表达式。</param>
        <param name="Compare">可选。 指定字符串比较的类型。 如果省略 <paramref name="Compare" />，则由 <see langword="Option Compare" /> 设置确定比较类型。</param>
        <summary>根据字符串的比较结果返回 -1、0 或 1。</summary>
        <returns><see langword="StrComp" /> 函数具有下列返回值：  
  
 <list type="table"><item><term> 如果 
 </term><description> StrComp 返回 
 </description></item><item><term><paramref name="String1" /> 排在 <paramref name="String2" /> 的前面</term><description> -1 
 </description></item><item><term><paramref name="String1" /> 等于 <paramref name="String2" /></term><description> 0 
 </description></item><item><term><paramref name="String1" /> 排在 <paramref name="String2" /> 的后面</term><description> 1 
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 将从第一个字符开始按字母数字排序值对字符串进行比较。 有关二进制比较、文本比较和排序顺序的详细信息，请参阅[Option Compare 语句](/dotnet/visual-basic/language-reference/statements/option-compare-statement)。  
  
 `Compare` 参数的设置是：  
  
|一直|说明|  
|-|-|  
|`Binary`|根据从字符的内部二进制表示形式派生的排序顺序执行二进制比较。|  
|`Text`|根据系统的 `LocaleID` 值确定的不区分大小写的文本排序顺序执行文本比较。|  
  
   
  
## Examples  
 此示例使用 `StrComp` 函数返回字符串比较的结果。  
  
 [!code-vb[VbVbalrStrings#22](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#22)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Compare" /> 值无效。</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.InStr" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/string-manipulation-summary">字符串操作摘要</related>
        <related type="Article" href="/dotnet/visual-basic/programming-guide/language-features/strings/">字符串 (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/programming-guide/language-features/strings/introduction-to-strings">字符串介绍 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="StrConv">
      <MemberSignature Language="C#" Value="public static string StrConv (string str, Microsoft.VisualBasic.VbStrConv Conversion, int LocaleID = 0);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string StrConv(string str, valuetype Microsoft.VisualBasic.VbStrConv Conversion, int32 LocaleID) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrConv(System.String,Microsoft.VisualBasic.VbStrConv,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function StrConv (str As String, Conversion As VbStrConv, Optional LocaleID As Integer = 0) As String" />
      <MemberSignature Language="F#" Value="static member StrConv : string * Microsoft.VisualBasic.VbStrConv * int -&gt; string" Usage="Microsoft.VisualBasic.Strings.StrConv (str, Conversion, LocaleID)" />
      <MemberSignature Language="ILAsm" Value=".method public static string StrConv(string str, valuetype Microsoft.VisualBasic.VbStrConv Conversion, int32 LocaleID) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0" />
        <Parameter Name="Conversion" Type="Microsoft.VisualBasic.VbStrConv" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0" />
        <Parameter Name="LocaleID" Type="System.Int32" Index="2" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="str">必需。 要转换的 <see langword="String" /> 表达式。</param>
        <param name="Conversion">必需。 <see cref="T:Microsoft.VisualBasic.VbStrConv" /> 成员。 指定要执行的转换类型的枚举值。</param>
        <param name="LocaleID">可选。 <see langword="LocaleID" /> 值（如果与系统 <see langword="LocaleID" /> 值不同）。 （系统 <see langword="LocaleID" /> 值为默认值。）</param>
        <summary>返回按照指定方式转换的字符串。</summary>
        <returns>按照指定方式转换的字符串。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果常量 `VbStrConv.Wide`、`VbStrConv.Narrow`、`VbStrConv.SimplifiedChinese`、`VbStrConv.TraditionalChinese`、`VbStrConv.Katakana`和 `VbStrConv.Hiragana` 在不应用的区域设置中使用时可能会导致运行时错误，但并不总是这样：在安装了日语语言包的非日语系统中，可以使用常量 `VbStrConv.Katakana` 和 `VbStrConv.Hiragana`。 此外，在安装了东亚语言的任何系统上，都支持使用常量 `VbStrConv.Wide` 和 `VbStrConv.Narrow`。  
  
 此函数在操作字符串时使用应用程序的区域性信息，以便大小写更改适用于正在使用应用程序的区域设置。  
  
> [!IMPORTANT]
>  如果你的应用程序根据比较或大小写更改操作的结果做出安全决策，则操作应使用 <xref:System.String.Compare%2A?displayProperty=nameWithType> 方法，并为 `comparisonType` 参数传递 <xref:System.StringComparison.Ordinal> 或 <xref:System.StringComparison.OrdinalIgnoreCase>。 有关详细信息，请参阅[在 Visual Basic 中区域性如何影响字符串](/dotnet/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings)。  
  
 `Conversion` 参数的设置是：  
  
|枚举成员|说明|  
|-|-|  
|`VbStrConv.None`|不执行任何转换|  
|`VbStrConv.LinguisticCasing`|使用区分大小写的语言规则，而不使用文件系统（默认值）。 仅对 `VbStrConv.UpperCase` 和 `VbStrConv.LowerCase` 有效。|  
|`VbStrConv.UpperCase`|将字符串转换为大写字符。|  
|`VbStrConv.LowerCase`|将字符串转换为小写字符。|  
|`VbStrConv.ProperCase`|将字符串中每个单词的首字母转换为大写。|  
|`VbStrConv.Wide` <sup>*</sup>|将字符串中的窄（半角）字符转换为宽（全角字）字符。 [!INCLUDE[vbstrconv-wide](~/includes/vbstrconv-wide-md.md)]|  
|`VbStrConv.Narrow` <sup>*</sup>|将字符串中的宽（全角字）字符转换为窄（半角）字符。|  
|`VbStrConv.Katakana` <sup>**</sup>|将字符串中的平假名字符转换为片假名字符。|  
|`VbStrConv.Hiragana` <sup>**</sup>|将字符串中片假名字符的转换为平假名字符。|  
|`VbStrConv.SimplifiedChinese` <sup>*</sup>|将繁体中文字符转换为简体中文字符。|  
|`VbStrConv.TraditionalChinese` <sup>*</sup>|将简体中文字符转换为繁体中文字符。|  
  
 <sup>*</sup>适用于亚洲区域设置。  
  
 <sup>**</sup>仅适用于日本。  
  
> [!NOTE]
>  这些常量在 .NET Framework 公共语言运行时中指定。 因此，可以在代码中的任何位置使用这些值来代替实际值。 大多数可以组合（例如 `UpperCase + Wide`），除非它们是互斥的（例如，`VbStrConv.Wide + VbStrConv.Narrow`）。  
  
 下面是正确大小写的有效单词分隔符： Null （`Chr$(0)`）、水平制表符（`Chr$(9)`）、换行符（`Chr$(10)`）、垂直制表符（`Chr$(11)`）、换页符（`Chr$(12)`）、回车符（`Chr$(13)`）、空格（单字节字符集）（`Chr$(32)`）。 空间的实际值（可为全角或半角）因东亚区域性的国家/地区而异。  
  
   
  
## Examples  
 此示例将文本全部转换为小写字母。  
  
 [!code-vb[VbVbalrStrings#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">不支持 <paramref name="LocaleID" />、<paramref name="Conversion" /> &lt; 0 或 &gt; 2048，或不支持指定区域设置的转换。</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="T:System.String" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/string-manipulation-summary">字符串操作摘要</related>
        <related type="Article" href="/dotnet/visual-basic/language-reference/functions/type-conversion-functions">Type Conversion Functions</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="StrDup">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>返回由指定字符重复指定次数后形成的字符串或对象。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="StrDup">
      <MemberSignature Language="C#" Value="public static string StrDup (int Number, char Character);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string StrDup(int32 Number, char Character) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function StrDup (Number As Integer, Character As Char) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ StrDup(int Number, char Character);" />
      <MemberSignature Language="F#" Value="static member StrDup : int * char -&gt; string" Usage="Microsoft.VisualBasic.Strings.StrDup (Number, Character)" />
      <MemberSignature Language="ILAsm" Value=".method public static string StrDup(int32 Number, char Character) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0" />
        <Parameter Name="Character" Type="System.Char" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="Number">必需。 <see langword="Integer" /> 表达式。 要返回的字符串的长度。</param>
        <param name="Character">必需。 任何有效的 <see langword="Char" />、<see langword="String" /> 或 <see langword="Object" /> 表达式。 将只使用表达式的第一个字符。 如果字符类型是 <see langword="Object" />，则它必须包含一个 <see langword="Char" /> 或 <see langword="String" /> 值。</param>
        <summary>返回由指定字符重复指定次数后形成的字符串或对象。</summary>
        <returns>由指定字符重复指定次数后形成的字符串或对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此函数返回一个由重复字符组成的 `String`。 构成字符串的字符是 `Character` 自变量中的第一个字符，该字符重复 `Number` 次。  
  
   
  
## Examples  
 此示例使用 `StrDup` 函数返回重复字符的字符串。  
  
 [!code-vb[VbVbalrStrings#34](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#34)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Number" /> 小于 0 或 <paramref name="Character" /> 类型无效。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="Character" /> 为 <see langword="Nothing" />。</exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/string-manipulation-summary">字符串操作摘要</related>
      </Docs>
    </Member>
    <Member MemberName="StrDup">
      <MemberSignature Language="C#" Value="public static object StrDup (int Number, object Character);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object StrDup(int32 Number, object Character) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function StrDup (Number As Integer, Character As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ StrDup(int Number, System::Object ^ Character);" />
      <MemberSignature Language="F#" Value="static member StrDup : int * obj -&gt; obj" Usage="Microsoft.VisualBasic.Strings.StrDup (Number, Character)" />
      <MemberSignature Language="ILAsm" Value=".method public static object StrDup(int32 Number, object Character) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0" />
        <Parameter Name="Character" Type="System.Object" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="Number">必需。 <see langword="Integer" /> 表达式。 要返回的字符串的长度。</param>
        <param name="Character">必需。 任何有效的 <see langword="Char" />、<see langword="String" /> 或 <see langword="Object" /> 表达式。 将只使用表达式的第一个字符。 如果字符类型是 <see langword="Object" />，则它必须包含一个 <see langword="Char" /> 或 <see langword="String" /> 值。</param>
        <summary>返回由指定字符重复指定次数后形成的字符串或对象。</summary>
        <returns>由指定字符重复指定次数后形成的字符串或对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此函数返回一个由重复字符组成的 `String`。 构成字符串的字符是 `Character` 自变量中的第一个字符，该字符重复 `Number` 次。  
  
   
  
## Examples  
 此示例使用 `StrDup` 函数返回重复字符的字符串。  
  
 [!code-vb[VbVbalrStrings#34](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#34)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Number" /> 小于 0 或 <paramref name="Character" /> 类型无效。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="Character" /> 为 <see langword="Nothing" />。</exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/string-manipulation-summary">字符串操作摘要</related>
      </Docs>
    </Member>
    <Member MemberName="StrDup">
      <MemberSignature Language="C#" Value="public static string StrDup (int Number, string Character);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string StrDup(int32 Number, string Character) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function StrDup (Number As Integer, Character As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ StrDup(int Number, System::String ^ Character);" />
      <MemberSignature Language="F#" Value="static member StrDup : int * string -&gt; string" Usage="Microsoft.VisualBasic.Strings.StrDup (Number, Character)" />
      <MemberSignature Language="ILAsm" Value=".method public static string StrDup(int32 Number, string Character) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0" />
        <Parameter Name="Character" Type="System.String" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="Number">必需。 <see langword="Integer" /> 表达式。 要返回的字符串的长度。</param>
        <param name="Character">必需。 任何有效的 <see langword="Char" />、<see langword="String" /> 或 <see langword="Object" /> 表达式。 将只使用表达式的第一个字符。 如果字符类型是 <see langword="Object" />，则它必须包含一个 <see langword="Char" /> 或 <see langword="String" /> 值。</param>
        <summary>返回由指定字符重复指定次数后形成的字符串或对象。</summary>
        <returns>由指定字符重复指定次数后形成的字符串或对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此函数返回一个由重复字符组成的 `String`。 构成字符串的字符是 `Character` 自变量中的第一个字符，该字符重复 `Number` 次。  
  
   
  
## Examples  
 此示例使用 `StrDup` 函数返回重复字符的字符串。  
  
 [!code-vb[VbVbalrStrings#34](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#34)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Number" /> 小于 0 或 <paramref name="Character" /> 类型无效。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="Character" /> 为 <see langword="Nothing" />。</exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/string-manipulation-summary">字符串操作摘要</related>
      </Docs>
    </Member>
    <Member MemberName="StrReverse">
      <MemberSignature Language="C#" Value="public static string StrReverse (string Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string StrReverse(string Expression) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrReverse(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function StrReverse (Expression As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ StrReverse(System::String ^ Expression);" />
      <MemberSignature Language="F#" Value="static member StrReverse : string -&gt; string" Usage="Microsoft.VisualBasic.Strings.StrReverse Expression" />
      <MemberSignature Language="ILAsm" Value=".method public static string StrReverse(string Expression) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="Expression">必需。 字符反转的字符串表达式。 如果 <paramref name="Expression" /> 是一个零长度字符串 ("")，则返回一个零长度字符串。</param>
        <summary>返回指定字符串的字符顺序是相反的字符串。</summary>
        <returns>指定字符串的字符顺序是相反的字符串。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `StrReverse` 函数返回一个字符串，该字符串包含与 `Expression`相同的字符，但顺序相反。  
  
   
  
## Examples  
 [!code-vb[VbVbalrStrings#29](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#29)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/string-manipulation-summary">字符串操作摘要</related>
      </Docs>
    </Member>
    <Member MemberName="Trim">
      <MemberSignature Language="C#" Value="public static string Trim (string str);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Trim(string str) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Trim(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Trim (str As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Trim(System::String ^ str);" />
      <MemberSignature Language="F#" Value="static member Trim : string -&gt; string" Usage="Microsoft.VisualBasic.Strings.Trim str" />
      <MemberSignature Language="ILAsm" Value=".method public static string Trim(string str) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="str">必需。 任何有效的 <see langword="String" /> 表达式。</param>
        <summary>返回一个字符串，它包含一个没有前导空格 (<see langword="LTrim" />)、没有尾随空格 (<see langword="RTrim" />) 或既没有前导空格也没有尾随空格 (<see langword="Trim" />) 的指定字符串的副本。</summary>
        <returns>一个字符串，它包含一个没有前导空格 (<see langword="LTrim" />)、没有尾随空格 (<see langword="RTrim" />) 或既没有前导空格也没有尾随空格 (<see langword="Trim" />) 的指定字符串的副本。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `LTrim`、`RTrim`和 `Trim` 函数将删除字符串末尾的空格。  
  
   
  
## Examples  
 此示例使用 `LTrim` 函数去除字符串变量的前导空格，使用 `RTrim` 函数去除尾随空格， 并使用 `Trim` 函数同时去除这两种类型的空格。  
  
 [!code-vb[VbVbalrStrings#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.RTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.LTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/string-manipulation-summary">字符串操作摘要</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="UCase">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>返回一个字符串或字符，其中包含转换为大写的指定字符串。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="UCase">
      <MemberSignature Language="C#" Value="public static char UCase (char Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char UCase(char Value) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.UCase(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function UCase (Value As Char) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char UCase(char Value);" />
      <MemberSignature Language="F#" Value="static member UCase : char -&gt; char" Usage="Microsoft.VisualBasic.Strings.UCase Value" />
      <MemberSignature Language="ILAsm" Value=".method public static char UCase(char Value) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Value" Type="System.Char" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="Value">必需。 任何有效的 <see langword="String" /> 或 <see langword="Char" /> 表达式。</param>
        <summary>返回一个字符串或字符，其中包含转换为大写的指定字符串。</summary>
        <returns>一个字符串或字符，其中包含转换为大写的指定字符串。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 仅小写字母转换为大写;所有大写字母和 nonletter 字符保持不变。  
  
 此函数在操作字符串时使用应用程序的区域性信息，以便大小写更改适用于正在使用应用程序的区域设置。  
  
> [!IMPORTANT]
>  如果你的应用程序根据比较或大小写更改操作的结果做出安全决策，则操作应使用 <xref:System.String.Compare%2A?displayProperty=nameWithType> 方法，并为 `comparisonType` 参数传递 <xref:System.StringComparison.Ordinal> 或 <xref:System.StringComparison.OrdinalIgnoreCase>。 有关详细信息，请参阅[在 Visual Basic 中区域性如何影响字符串](/dotnet/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings)。  
  
   
  
## Examples  
 本例使用 `UCase` 函数返回字符串的大写版本。  
  
 [!code-vb[VbVbalrStrings#31](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#31)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.LCase" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/string-manipulation-summary">字符串操作摘要</related>
        <related type="Article" href="/dotnet/visual-basic/programming-guide/language-features/strings/">字符串 (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/programming-guide/language-features/strings/introduction-to-strings">字符串介绍 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="UCase">
      <MemberSignature Language="C#" Value="public static string UCase (string Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string UCase(string Value) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.UCase(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function UCase (Value As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ UCase(System::String ^ Value);" />
      <MemberSignature Language="F#" Value="static member UCase : string -&gt; string" Usage="Microsoft.VisualBasic.Strings.UCase Value" />
      <MemberSignature Language="ILAsm" Value=".method public static string UCase(string Value) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Value" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="Value">必需。 任何有效的 <see langword="String" /> 或 <see langword="Char" /> 表达式。</param>
        <summary>返回一个字符串或字符，其中包含转换为大写的指定字符串。</summary>
        <returns>一个字符串或字符，其中包含转换为大写的指定字符串。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 仅小写字母转换为大写;所有大写字母和 nonletter 字符保持不变。  
  
 此函数在操作字符串时使用应用程序的区域性信息，以便大小写更改适用于正在使用应用程序的区域设置。  
  
> [!IMPORTANT]
>  如果你的应用程序根据比较或大小写更改操作的结果做出安全决策，则操作应使用 <xref:System.String.Compare%2A?displayProperty=nameWithType> 方法，并为 `comparisonType` 参数传递 <xref:System.StringComparison.Ordinal> 或 <xref:System.StringComparison.OrdinalIgnoreCase>。 有关详细信息，请参阅[在 Visual Basic 中区域性如何影响字符串](/dotnet/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings)。  
  
   
  
## Examples  
 本例使用 `UCase` 函数返回字符串的大写版本。  
  
 [!code-vb[VbVbalrStrings#31](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#31)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.LCase" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/string-manipulation-summary">字符串操作摘要</related>
        <related type="Article" href="/dotnet/visual-basic/programming-guide/language-features/strings/">字符串 (Visual Basic)</related>
        <related type="Article" href="/dotnet/visual-basic/programming-guide/language-features/strings/introduction-to-strings">字符串介绍 (Visual Basic)</related>
      </Docs>
    </Member>
  </Members>
</Type>
