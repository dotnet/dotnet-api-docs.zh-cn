<Type Name="Financial" FullName="Microsoft.VisualBasic.Financial">
  <Metadata><Meta Name="ms.openlocfilehash" Value="0825b75790a03586803a50f1fea172096a1dbbc3" /><Meta Name="ms.sourcegitcommit" Value="c982ad9e10a242d90f1e631b5981570f9e5d9f34" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/10/2020" /><Meta Name="ms.locfileid" Value="89917659" /></Metadata><TypeSignature Language="C#" Value="public sealed class Financial" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Financial extends System.Object" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Financial" />
  <TypeSignature Language="VB.NET" Value="Public Module Financial" />
  <TypeSignature Language="C++ CLI" Value="public ref class Financial sealed" />
  <TypeSignature Language="F#" Value="type Financial = class" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Financial extends System.Object" FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
    <AssemblyVersion>10.0.4.0</AssemblyVersion>
    <AssemblyVersion>10.0.5.0</AssemblyVersion>
    <AssemblyVersion>10.0.6.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[Microsoft.VisualBasic.CompilerServices.StandardModule]</AttributeName>
      <AttributeName Language="F#">[&lt;Microsoft.VisualBasic.CompilerServices.StandardModule&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><see langword="Financial" /> 模块包含用于执行财务运算的过程。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此模块支持执行财务计算的 Visual Basic 运行时库成员，如折旧、现有和未来值、利率、回报率和付款。  
  
   
  
## Examples  
 此示例使用 `Rate` 函数来计算贷款的利率，给定的总付款次数 (`TotPmts`) ，贷款付款 () ，贷款的现值、 () `Payment` `PVal` 、贷款的未来值 (`FVal`) 、指示支付是在付款期的开始还是结束时到期的数字 ()  (`PayType` ，以及预计利率的近似值) `Guess` 。  
  
 [!code-vb[VbVbalrMath#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#2)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/financial-summary">财务摘要</related>
    <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/">关键字 (Visual Basic)</related>
    <related type="Article" href="/dotnet/visual-basic/language-reference/runtime-library-members">Visual Basic 运行时库成员</related>
  </Docs>
  <Members>
    <Member MemberName="DDB">
      <MemberSignature Language="C#" Value="public static double DDB (double Cost, double Salvage, double Life, double Period, double Factor = 2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 DDB(float64 Cost, float64 Salvage, float64 Life, float64 Period, float64 Factor) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.DDB(System.Double,System.Double,System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function DDB (Cost As Double, Salvage As Double, Life As Double, Period As Double, Optional Factor As Double = 2) As Double" />
      <MemberSignature Language="F#" Value="static member DDB : double * double * double * double * double -&gt; double" Usage="Microsoft.VisualBasic.Financial.DDB (Cost, Salvage, Life, Period, Factor)" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 DDB(float64 Cost, float64 Salvage, float64 Life, float64 Period, float64 Factor) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Cost" Type="System.Double" />
        <Parameter Name="Salvage" Type="System.Double" />
        <Parameter Name="Life" Type="System.Double" />
        <Parameter Name="Period" Type="System.Double" />
        <Parameter Name="Factor" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Cost">必需。 资产的原始成本。</param>
        <param name="Salvage">必需。 资产在使用年限结束时的价值。</param>
        <param name="Life">必需。 资产的使用年限。</param>
        <param name="Period">必需。 计算资产折旧所用的周期。</param>
        <param name="Factor">可选。 余额递减的速率。 如果省略，则假定为 2（双倍余额递减法）。</param>
        <summary>返回一个值，它使用双倍余额递减法或指定的其他方法来指定特定时间周期内的资产折旧。</summary>
        <returns>使用双倍余额递减法或指定的其他方法的特定时间周期内的资产折旧。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 双倍余额递减法按加速费率计算折旧。 在第一期内，折旧率最高，并在连续期间内缩短。  
  
 `Life`和 `Period` 参数必须以相同的单位表示。 例如，如果 `Life` 以月为单位给出，则 `Period` 还必须以月为单位给出。 所有自变量都必须是正数。  
  
 该 `DDB` 函数使用以下公式来计算给定期间的折旧：  
  
 折旧率 = ( # B1 Cost) * 因素) /生命周期  
  
   
  
## Examples  
 此示例使用 `DDB` 函数返回指定时间段内的资产在指定时间段内的折旧，给定初期成本 (`InitCost`) ，资产的使用年限结束时的残值 (`SalvageVal`) ，资产的总生活 `LifeTime` 时间 () ，以及以年计的计算折旧 () `Depr` 。  
  
 [!code-vb[VbVbalrMath#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Factor" />&lt;= 0， <paramref name="Salvage" /> &lt;0、 <paramref name="Period" /> &lt; = 0 或 <paramref name="Period" /> &gt; <paramref name="Life" /> 。</exception>
        <altmember cref="M:Microsoft.VisualBasic.Financial.SLN(System.Double,System.Double,System.Double)" />
        <altmember cref="M:Microsoft.VisualBasic.Financial.SYD(System.Double,System.Double,System.Double,System.Double)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/financial-summary">财务摘要</related>
      </Docs>
    </Member>
    <Member MemberName="FV">
      <MemberSignature Language="C#" Value="public static double FV (double Rate, double NPer, double Pmt, double PV = 0, Microsoft.VisualBasic.DueDate Due = Microsoft.VisualBasic.DueDate.EndOfPeriod);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 FV(float64 Rate, float64 NPer, float64 Pmt, float64 PV, valuetype Microsoft.VisualBasic.DueDate Due) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.FV(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)" />
      <MemberSignature Language="VB.NET" Value="Public Function FV (Rate As Double, NPer As Double, Pmt As Double, Optional PV As Double = 0, Optional Due As DueDate = Microsoft.VisualBasic.DueDate.EndOfPeriod) As Double" />
      <MemberSignature Language="F#" Value="static member FV : double * double * double * double * Microsoft.VisualBasic.DueDate -&gt; double" Usage="Microsoft.VisualBasic.Financial.FV (Rate, NPer, Pmt, PV, Due)" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 FV(float64 Rate, float64 NPer, float64 Pmt, float64 PV, valuetype Microsoft.VisualBasic.DueDate Due) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Rate" Type="System.Double" />
        <Parameter Name="NPer" Type="System.Double" />
        <Parameter Name="Pmt" Type="System.Double" />
        <Parameter Name="PV" Type="System.Double" />
        <Parameter Name="Due" Type="Microsoft.VisualBasic.DueDate" />
      </Parameters>
      <Docs>
        <param name="Rate">必需。 每期的利率。 例如，如果您的汽车贷款的年利率 (APR) 为 10%，按月还款，则每期利率为 0.1/12（即 0.0083）。</param>
        <param name="NPer">必需。 年金付款总期数。 例如，如果您的汽车贷款的期限为四年，按月还款，则这笔贷款共有 4 * 12（即 48）个支付周期。</param>
        <param name="Pmt">必需。 每期应付金额。 付款金额通常包含本金和利息，该值在年金的有效期限内都不会改变。</param>
        <param name="PV">可选。 未来一系列付款金额（或一次付清款项）的现值。 例如，如果您贷款买车，贷款额就是您将以按月还款的方式付给贷方的现值。 如果省略，则假定为 0。</param>
        <param name="Due">可选。 <see cref="T:Microsoft.VisualBasic.DueDate" /> 类型的对象指定付款何时到期。 如果在付款期末付款，则此参数必须为 <see langword="DueDate.EndOfPeriod" />；如果在付款期初付款，则此参数必须为 <see langword="DueDate.BegOfPeriod" />。 如果省略，则假定为 <see langword="DueDate.EndOfPeriod" />。</param>
        <summary>返回一值，该值基于等额分期付款和固定利率指定年金的终值。</summary>
        <returns>基于等额分期付款和固定利率的年金的终值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 年金是一系列经过一段时间的固定现金付款。 年金可以是贷款 (例如住房抵押) 或投资 (如每月储蓄计划) 。  
  
 `Rate` `NPer` 必须使用以相同单位表示的付款期来计算和参数。 例如，如果 `Rate` 使用月份计算，则 `NPer` 还必须使用月份计算。  
  
 对于所有自变量，现金支付 (如储蓄量) 表示为负数;收到的现金 (如被除数检查) 由正数表示。  
  
   
  
## Examples  
 此示例使用 `FV` 函数返回给定的投资值的未来值（给定百分比费率为每个周期)  (`APR / 12` ，支付 (`TotPmts`) 总数，付款 (`Payment`) ，投资 () 的当前值， `PVal` 以及指示支付是在付款期的开始还是结束 () 的数字 `PayType` 。 请注意，由于 `Payment` 表示现金支付，因此为负数。  
  
 [!code-vb[VbVbalrMath#22](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#22)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/financial-summary">财务摘要</related>
      </Docs>
    </Member>
    <Member MemberName="IPmt">
      <MemberSignature Language="C#" Value="public static double IPmt (double Rate, double Per, double NPer, double PV, double FV = 0, Microsoft.VisualBasic.DueDate Due = Microsoft.VisualBasic.DueDate.EndOfPeriod);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 IPmt(float64 Rate, float64 Per, float64 NPer, float64 PV, float64 FV, valuetype Microsoft.VisualBasic.DueDate Due) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.IPmt(System.Double,System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)" />
      <MemberSignature Language="VB.NET" Value="Public Function IPmt (Rate As Double, Per As Double, NPer As Double, PV As Double, Optional FV As Double = 0, Optional Due As DueDate = Microsoft.VisualBasic.DueDate.EndOfPeriod) As Double" />
      <MemberSignature Language="F#" Value="static member IPmt : double * double * double * double * double * Microsoft.VisualBasic.DueDate -&gt; double" Usage="Microsoft.VisualBasic.Financial.IPmt (Rate, Per, NPer, PV, FV, Due)" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 IPmt(float64 Rate, float64 Per, float64 NPer, float64 PV, float64 FV, valuetype Microsoft.VisualBasic.DueDate Due) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Rate" Type="System.Double" />
        <Parameter Name="Per" Type="System.Double" />
        <Parameter Name="NPer" Type="System.Double" />
        <Parameter Name="PV" Type="System.Double" />
        <Parameter Name="FV" Type="System.Double" />
        <Parameter Name="Due" Type="Microsoft.VisualBasic.DueDate" />
      </Parameters>
      <Docs>
        <param name="Rate">必需。 每期的利率。 例如，如果您的汽车贷款的年利率 (APR) 为 10%，按月还款，则每期利率为 0.1/12（即 0.0083）。</param>
        <param name="Per">必需。 1 到 <paramref name="NPer" />.范围内的支付周期。</param>
        <param name="NPer">必需。 年金付款总期数。 例如，如果您的汽车贷款的期限为四年，按月还款，则这笔贷款共有 4 * 12（即 48）个支付周期。</param>
        <param name="PV">必需。 未来一系列支出或收入的现值。 例如，如果您贷款买车，贷款额就是您将以按月还款的方式付给贷方的现值。</param>
        <param name="FV">可选。 完成最后一次付款后所希望的终值或现金余额。 例如，贷款的终值为 0，这是因为终值是末期还款之后的价值。 但是，如果您想用 18 年的时间存储 $50,000 作为孩子的教育经费，则 $50,000 是终值。 如果省略，则假定为 0。</param>
        <param name="Due">可选。 <see cref="T:Microsoft.VisualBasic.DueDate" /> 类型的对象指定付款何时到期。 如果在付款期末付款，则此参数必须为 <c>DueDate.EndOfPeriod</c>；如果在付款期初付款，则此参数必须为 <c>DueDate.BegOfPeriod</c>。 如果省略，则假定 <c>DueDate.EndOfPeriod</c>。</param>
        <summary>返回一个值，该值基于等额分期付款和固定利率指定年金在给定期间的支付利息。</summary>
        <returns>基于等额分期付款和固定利率的给定周期的支付利息。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 年金是一系列经过一段时间的固定现金付款。 年金可以是贷款 (例如住房抵押) 或投资 (如每月储蓄计划) 。  
  
 `Rate` `NPer` 必须使用以相同单位表示的付款期来计算和参数。 例如，如果 `Rate` 使用月份计算，则 `NPer` 还必须使用月份计算。  
  
 对于所有自变量，现金支付 (如储蓄量) 表示为负数;收到的现金 (如被除数检查) 由正数表示。  
  
   
  
## Examples  
 此示例使用 `IPmt` 函数来计算所有付款值都相等时的付款量。 给定的是每个周期的利率 (`APR / 12`) 、需要利息部分的支付周期 () 、的总付款期、 () 、贷款的终值 () 、 `Period` `TotPmts` `PVal` 贷款的未来值 () ， `FVal` 以及指示付款是否在支付期的开始或结束日期 (`PayType`) 。  
  
 [!code-vb[VbVbalrMath#26](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#26)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Per" />&lt;= 0 或 <paramref name="Per" /> &gt;<paramref name="NPer" /></exception>
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/financial-summary">财务摘要</related>
      </Docs>
    </Member>
    <Member MemberName="IRR">
      <MemberSignature Language="C#" Value="public static double IRR (ref double[] ValueArray, double Guess = 0.1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 IRR(float64[]&amp; ValueArray, float64 Guess) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.IRR(System.Double[]@,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function IRR (ByRef ValueArray As Double(), Optional Guess As Double = 0.1) As Double" />
      <MemberSignature Language="F#" Value="static member IRR : Double[] * double -&gt; double" Usage="Microsoft.VisualBasic.Financial.IRR (ValueArray, Guess)" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 IRR(float64[]&amp; ValueArray, float64 Guess) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ValueArray" Type="System.Double[]" RefType="ref" />
        <Parameter Name="Guess" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="ValueArray">必需。 指定现金流值的 <see cref="T:System.Double" /> 数组。 该数组必须至少包含一个负值（支出）和一个正值（收入）。</param>
        <param name="Guess">可选。 指定 <see langword="IRR" /> 将返回的估算值的对象。 如果省略，<paramref name="Guess" /> 便为 0.1 (10%)。</param>
        <summary>返回一个值，该值指定一系列定期现金流（支出和收入）的内部收益率。</summary>
        <returns>一系列定期现金流（支出和收入）的内部收益率。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 内部报酬率是一项投资的利率，此利率由定期发生的付款和收入组成。  
  
 `IRR`函数使用数组中值的顺序来解释付款和收入的顺序。 请确保按正确的顺序输入付款值和接收值。 每个期间的现金流不需要固定，因为它适用于年金。  
  
 `IRR` 由迭代计算。 从的值开始 `Guess` ， `IRR` 循环计算，直到结果精确到0.00001%。 如果 `IRR` 在20次尝试后找不到结果，则会失败。  
  
   
  
## Examples  
 在此示例中， `IRR` 函数返回数组中包含的五个现金流的内部收益率 `Values()` 。 第一个数组元素是一个负现金流，表示业务启动成本。 其余四个现金流表示后续四年的正现金流。 `Guess` 估计的内部收益率。  
  
 [!code-vb[VbVbalrMath#20](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#20)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">数组参数值无效或 <paramref name="Guess" /> &lt; =-1。</exception>
        <altmember cref="M:Microsoft.VisualBasic.Financial.NPV(System.Double,System.Double[]@)" />
        <altmember cref="M:Microsoft.VisualBasic.Financial.MIRR(System.Double[]@,System.Double,System.Double)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/financial-summary">财务摘要</related>
      </Docs>
    </Member>
    <Member MemberName="MIRR">
      <MemberSignature Language="C#" Value="public static double MIRR (ref double[] ValueArray, double FinanceRate, double ReinvestRate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 MIRR(float64[]&amp; ValueArray, float64 FinanceRate, float64 ReinvestRate) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.MIRR(System.Double[]@,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function MIRR (ByRef ValueArray As Double(), FinanceRate As Double, ReinvestRate As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double MIRR(cli::array &lt;double&gt; ^ % ValueArray, double FinanceRate, double ReinvestRate);" />
      <MemberSignature Language="F#" Value="static member MIRR : Double[] * double * double -&gt; double" Usage="Microsoft.VisualBasic.Financial.MIRR (ValueArray, FinanceRate, ReinvestRate)" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 MIRR(float64[]&amp; ValueArray, float64 FinanceRate, float64 ReinvestRate) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ValueArray" Type="System.Double[]" RefType="ref" />
        <Parameter Name="FinanceRate" Type="System.Double" />
        <Parameter Name="ReinvestRate" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="ValueArray">必需。 指定现金流值的 <see cref="T:System.Double" /> 数组。 该数组必须至少包含一个负值（支出）和一个正值（收入）。</param>
        <param name="FinanceRate">必需。 作为财务费用支付的利率。</param>
        <param name="ReinvestRate">必需。 现金再投资收益中的所得利率。</param>
        <summary>返回一个值，该值指定一系列定期现金流（支出和收入）修改后的内部收益率。</summary>
        <returns>一系列定期现金流（支出和收入）修改后的内部收益率。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 修改后的内部报酬率是指在支付和收入按不同费率计算时的内部收益率。 该 `MIRR` 函数将考虑投资的成本 (`FinanceRate`) ，以及在现金 () 利息重新投资上收到的利率 `ReinvestRate` 。  
  
 `FinanceRate`和 `ReinvestRate` 参数是以十进制值表示的百分比。 例如，12% 表示为0.12。  
  
 `MIRR`函数使用数组中值的顺序来解释付款和收入的顺序。 请确保按正确的顺序输入付款值和接收值。  
  
   
  
## Examples  
 此示例使用 `MIRR` 函数来返回数组中包含的一系列现金流的修改后的内部收益率 `Values()` 。 `LoanAPR` 表示融资利息，并 `InvAPR` 表示在利息重新投资上收到的利率。  
  
 [!code-vb[VbVbalrMath#29](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#29)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="ValueArray" /> 的秩不等于 1，<paramref name="FinanceRate" /> = -1，或 <paramref name="ReinvestRate" /> = -1</exception>
        <exception cref="T:System.DivideByZeroException">出现被零除。</exception>
        <altmember cref="M:Microsoft.VisualBasic.Financial.IRR(System.Double[]@,System.Double)" />
        <altmember cref="M:Microsoft.VisualBasic.Financial.NPV(System.Double,System.Double[]@)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.DivideByZeroException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/financial-summary">财务摘要</related>
      </Docs>
    </Member>
    <Member MemberName="NPer">
      <MemberSignature Language="C#" Value="public static double NPer (double Rate, double Pmt, double PV, double FV = 0, Microsoft.VisualBasic.DueDate Due = Microsoft.VisualBasic.DueDate.EndOfPeriod);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 NPer(float64 Rate, float64 Pmt, float64 PV, float64 FV, valuetype Microsoft.VisualBasic.DueDate Due) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.NPer(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)" />
      <MemberSignature Language="VB.NET" Value="Public Function NPer (Rate As Double, Pmt As Double, PV As Double, Optional FV As Double = 0, Optional Due As DueDate = Microsoft.VisualBasic.DueDate.EndOfPeriod) As Double" />
      <MemberSignature Language="F#" Value="static member NPer : double * double * double * double * Microsoft.VisualBasic.DueDate -&gt; double" Usage="Microsoft.VisualBasic.Financial.NPer (Rate, Pmt, PV, FV, Due)" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 NPer(float64 Rate, float64 Pmt, float64 PV, float64 FV, valuetype Microsoft.VisualBasic.DueDate Due) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Rate" Type="System.Double" />
        <Parameter Name="Pmt" Type="System.Double" />
        <Parameter Name="PV" Type="System.Double" />
        <Parameter Name="FV" Type="System.Double" />
        <Parameter Name="Due" Type="Microsoft.VisualBasic.DueDate" />
      </Parameters>
      <Docs>
        <param name="Rate">必需。 每期的利率。 例如，如果您的汽车贷款的年利率 (APR) 为 10%，按月还款，则每期利率为 0.1/12（即 0.0083）。</param>
        <param name="Pmt">必需。 每期应付金额。 付款金额通常包含本金和利息，该值在年金的有效期限内都不会改变。</param>
        <param name="PV">必需。 未来一系列支出或收入的现值。 例如，如果您贷款买车，贷款额就是您将以按月还款的方式付给贷方的现值。</param>
        <param name="FV">可选。 完成最后一次付款后所希望的终值或现金余额。 例如，贷款的终值为 $0，这是因为终值是末期还款之后的价值。 但是，如果您想用 18 年的时间存储 $50,000 作为孩子的教育经费，则 $50,000 是终值。 如果省略，则假定为 0。</param>
        <param name="Due">可选。 <see cref="T:Microsoft.VisualBasic.DueDate" /> 类型的对象指定付款何时到期。 如果在付款期末付款，则此参数必须为 <c>DueDate.EndOfPeriod</c>；如果在付款期初付款，则此参数必须为 <c>DueDate.BegOfPeriod</c>。 如果省略，则假定 <c>DueDate.EndOfPeriod</c>。</param>
        <summary>返回一个值，该值基于等额分期付款和固定利率指定年金的期数。</summary>
        <returns>基于等额分期付款和固定利率的年金的期数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 年金是在一段时间内进行的一系列固定的现金付款。 年金可以是贷款 (例如住房抵押) 或投资 (如每月储蓄计划) 。  
  
 对于所有自变量，现金支付 (如储蓄量) 表示为负数;收到的现金 (如被除数检查) 由正数表示。  
  
   
  
## Examples  
 此示例使用 `NPer` 函数返回必须支付多少期才能支付其值包含在中的贷款 `PVal` 。 此外，还提供了每个周期的利率 (`APR / 12`) 、支付 (`Payment`) 、贷款的未来值 (`FVal`) ，以及一个数字，该数字指示付款在支付期的开始或结束时间是否是在 (`PayType`) 。  
  
 [!code-vb[VbVbalrMath#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Rate" /> = 0 和 <paramref name="Pmt" /> = 0</exception>
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/financial-summary">财务摘要</related>
      </Docs>
    </Member>
    <Member MemberName="NPV">
      <MemberSignature Language="C#" Value="public static double NPV (double Rate, ref double[] ValueArray);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 NPV(float64 Rate, float64[]&amp; ValueArray) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.NPV(System.Double,System.Double[]@)" />
      <MemberSignature Language="VB.NET" Value="Public Function NPV (Rate As Double, ByRef ValueArray As Double()) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double NPV(double Rate, cli::array &lt;double&gt; ^ % ValueArray);" />
      <MemberSignature Language="F#" Value="static member NPV : double * Double[] -&gt; double" Usage="Microsoft.VisualBasic.Financial.NPV (Rate, ValueArray)" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 NPV(float64 Rate, float64[]&amp; ValueArray) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Rate" Type="System.Double" />
        <Parameter Name="ValueArray" Type="System.Double[]" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="Rate">必需。 每期的贴现率，以小数表示。</param>
        <param name="ValueArray">必需。 指定现金流值的 <see cref="T:System.Double" /> 数组。 该数组必须至少包含一个负值（支出）和一个正值（收入）。</param>
        <summary>返回一个值，该值基于一系列定期现金流（支出和收入）和贴现率来指定投资的净现值。</summary>
        <returns>基于一系列定期现金流（支出和收入）和贴现率的投资的净现值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 投资的净现值是未来一系列支付和收入的当前价值。  
  
 `NPV`函数使用数组中值的顺序来解释付款和收入的顺序。 请确保按正确的顺序输入付款值和接收值。  
  
 `NPV`投资在第一个现金流值的日期之前开始一个句点，并以数组中的最后一个现金流值结束。  
  
 净现值计算基于未来的现金流。 如果第一个现金流在第一个周期开始时出现，则必须将第一个值添加到返回的值 `NPV` 中，而不能包含在的现金流值中 `ValueArray` 。  
  
 `NPV`函数类似于 `PV` 函数 (现值) ，只不过 `PV` 函数允许现金流在结束或某个时间段的开头开始。 与可变的 `NPV` 现金流值不同， `PV` 现金流必须在整个投资中固定。  
  
   
  
## Examples  
 此示例使用 `NPV` 函数返回数组中包含的一系列现金流的净现值 `values()` 。 中存储的返回值 `FixedRetRate` 表示固定的内部收益率。  
  
 [!code-vb[VbVbalrMath#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="ValueArray" />为 <see langword="Nothing" /> ，秩为 <paramref name="ValueArray" /> &lt; &gt; 1 或 <paramref name="Rate" /> =-1</exception>
        <altmember cref="M:Microsoft.VisualBasic.Financial.IRR(System.Double[]@,System.Double)" />
        <altmember cref="M:Microsoft.VisualBasic.Financial.MIRR(System.Double[]@,System.Double,System.Double)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/financial-summary">财务摘要</related>
      </Docs>
    </Member>
    <Member MemberName="Pmt">
      <MemberSignature Language="C#" Value="public static double Pmt (double Rate, double NPer, double PV, double FV = 0, Microsoft.VisualBasic.DueDate Due = Microsoft.VisualBasic.DueDate.EndOfPeriod);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Pmt(float64 Rate, float64 NPer, float64 PV, float64 FV, valuetype Microsoft.VisualBasic.DueDate Due) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.Pmt(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)" />
      <MemberSignature Language="VB.NET" Value="Public Function Pmt (Rate As Double, NPer As Double, PV As Double, Optional FV As Double = 0, Optional Due As DueDate = Microsoft.VisualBasic.DueDate.EndOfPeriod) As Double" />
      <MemberSignature Language="F#" Value="static member Pmt : double * double * double * double * Microsoft.VisualBasic.DueDate -&gt; double" Usage="Microsoft.VisualBasic.Financial.Pmt (Rate, NPer, PV, FV, Due)" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Pmt(float64 Rate, float64 NPer, float64 PV, float64 FV, valuetype Microsoft.VisualBasic.DueDate Due) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Rate" Type="System.Double" />
        <Parameter Name="NPer" Type="System.Double" />
        <Parameter Name="PV" Type="System.Double" />
        <Parameter Name="FV" Type="System.Double" />
        <Parameter Name="Due" Type="Microsoft.VisualBasic.DueDate" />
      </Parameters>
      <Docs>
        <param name="Rate">必需。 每期的利率。 例如，如果您的汽车贷款的年利率 (APR) 为 10%，按月还款，则每期利率为 0.1/12（即 0.0083）。</param>
        <param name="NPer">必需。 年金付款总期数。 例如，如果您的汽车贷款的期限为四年，按月还款，则这笔贷款共有 4 * 12（即 48）个支付周期。</param>
        <param name="PV">必需。 未来一系列要支付的付款现值（或一次付清款项）。 例如，如果您贷款买车，贷款额就是您将以按月还款的方式付给贷方的现值。</param>
        <param name="FV">可选。 完成最后一次付款后所希望的终值或现金余额。 例如，贷款的终值为 $0，这是因为终值是末期还款之后的价值。 但是，如果您想用 18 年的时间储蓄 $50,000 作为孩子的教育经费，则 $50,000 是终值。 如果省略，则假定为 0。</param>
        <param name="Due">可选。 <see cref="T:Microsoft.VisualBasic.DueDate" /> 类型的对象指定付款何时到期。 如果在付款期末付款，则此参数必须为 <c>DueDate.EndOfPeriod</c>；如果在付款期初付款，则此参数必须为 <c>DueDate.BegOfPeriod</c>。 如果省略，则假定 <c>DueDate.EndOfPeriod</c>。</param>
        <summary>返回一个值，它基于等额分期付款和固定利率指定年金的付款金额。</summary>
        <returns>基于等额分期付款和固定利率的年金的付款金额。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 年金是在一段时间内进行的一系列固定的现金付款。 年金可以是贷款 (例如住房抵押) 或投资 (如每月储蓄计划) 。  
  
 `Rate` `NPer` 必须使用以相同单位表示的付款期来计算和参数。 例如，如果 `Rate` 使用月份计算，则 `NPer` 还必须使用月份计算。  
  
 对于所有自变量，现金支付 (如储蓄量) 表示为负数;收到的现金 (如被除数检查) 由正数表示。  
  
   
  
## Examples  
 此示例使用 `Pmt` 函数返回在固定期间内贷款的每月支付。 给定的是每个期间的利率利率 (`APR / 12`) ， () 的总付款次数 `TotPmts` 、贷款 (的现值或本金) `PVal` 、贷款的未来值 () `FVal` ，以及指示付款是否在支付期的开始或结束日期 `(PayType).`  
  
 [!code-vb[VbVbalrMath#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="NPer" /> = 0.</exception>
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/financial-summary">财务摘要</related>
      </Docs>
    </Member>
    <Member MemberName="PPmt">
      <MemberSignature Language="C#" Value="public static double PPmt (double Rate, double Per, double NPer, double PV, double FV = 0, Microsoft.VisualBasic.DueDate Due = Microsoft.VisualBasic.DueDate.EndOfPeriod);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 PPmt(float64 Rate, float64 Per, float64 NPer, float64 PV, float64 FV, valuetype Microsoft.VisualBasic.DueDate Due) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.PPmt(System.Double,System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)" />
      <MemberSignature Language="VB.NET" Value="Public Function PPmt (Rate As Double, Per As Double, NPer As Double, PV As Double, Optional FV As Double = 0, Optional Due As DueDate = Microsoft.VisualBasic.DueDate.EndOfPeriod) As Double" />
      <MemberSignature Language="F#" Value="static member PPmt : double * double * double * double * double * Microsoft.VisualBasic.DueDate -&gt; double" Usage="Microsoft.VisualBasic.Financial.PPmt (Rate, Per, NPer, PV, FV, Due)" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 PPmt(float64 Rate, float64 Per, float64 NPer, float64 PV, float64 FV, valuetype Microsoft.VisualBasic.DueDate Due) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Rate" Type="System.Double" />
        <Parameter Name="Per" Type="System.Double" />
        <Parameter Name="NPer" Type="System.Double" />
        <Parameter Name="PV" Type="System.Double" />
        <Parameter Name="FV" Type="System.Double" />
        <Parameter Name="Due" Type="Microsoft.VisualBasic.DueDate" />
      </Parameters>
      <Docs>
        <param name="Rate">必需。 每期的利率。 例如，如果您的汽车贷款的年利率 (APR) 为 10%，按月还款，则每期利率为 0.1/12（即 0.0083）。</param>
        <param name="Per">必需。 1 到 <paramref name="NPer" />.范围内的支付周期。</param>
        <param name="NPer">必需。 年金付款总期数。 例如，如果您的汽车贷款的期限为四年，按月还款，则这笔贷款共有 4 * 12（即 48）个支付周期。</param>
        <param name="PV">必需。 指定未来一系列支出或收入的现值。 例如，如果您贷款买车，贷款额就是您将以按月还款的方式付给贷方的现值。</param>
        <param name="FV">可选。 完成最后一次付款后所希望的终值或现金余额。 例如，贷款的终值为 $0，这是因为终值是末期还款之后的价值。 但是，如果您想用 18 年的时间存储 $50,000 作为孩子的教育经费，则 $50,000 是终值。 如果省略，则假定为 0。</param>
        <param name="Due">可选。 <see cref="T:Microsoft.VisualBasic.DueDate" /> 类型的对象指定付款何时到期。 如果在付款期末付款，则此参数必须为 <c>DueDate.EndOfPeriod</c>；如果在付款期初付款，则此参数必须为 <c>DueDate.BegOfPeriod</c>。 如果省略，则假定 <c>DueDate.EndOfPeriod</c>。</param>
        <summary>返回一个值，该值基于等额分期付款和固定利率指定年金在给定期间的本金付款额。</summary>
        <returns>基于等额分期付款和固定利率的年金在给定期间的本金付款额。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 年金是在一段时间内进行的一系列固定的现金付款。 年金可以是贷款 (例如住房抵押) 或投资 (如每月储蓄计划) 。  
  
 `Rate` `NPer` 必须使用以相同单位表示的付款期来计算和参数。 例如，如果 `Rate` 使用月份计算，则 `NPer` 还必须使用月份计算。  
  
 对于所有自变量，现金支付 (如储蓄量) 表示为负数;收到的现金 (如被除数检查) 由正数表示。  
  
   
  
## Examples  
 此示例使用 `PPmt` 函数来计算当所有付款值都相等时，特定时间段的付款量是 "主体"。 给定的是每个周期的利率 (`APR / 12`) 、需要主体部分的支付周期 () 、 (的 `Period` 总付款次数、贷款)  (、贷款的终值)  (、贷款的未来值)  (， `TotPmts` `PVal` `FVal` 以及指示付款是否在支付期的开始或结束时间) `PayType` 。  
  
 [!code-vb[VbVbalrMath#24](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#24)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Per" />&lt;= 0 或 <paramref name="Per" /> &gt;<paramref name="NPer" />.</exception>
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/financial-summary">财务摘要</related>
      </Docs>
    </Member>
    <Member MemberName="PV">
      <MemberSignature Language="C#" Value="public static double PV (double Rate, double NPer, double Pmt, double FV = 0, Microsoft.VisualBasic.DueDate Due = Microsoft.VisualBasic.DueDate.EndOfPeriod);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 PV(float64 Rate, float64 NPer, float64 Pmt, float64 FV, valuetype Microsoft.VisualBasic.DueDate Due) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.PV(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)" />
      <MemberSignature Language="VB.NET" Value="Public Function PV (Rate As Double, NPer As Double, Pmt As Double, Optional FV As Double = 0, Optional Due As DueDate = Microsoft.VisualBasic.DueDate.EndOfPeriod) As Double" />
      <MemberSignature Language="F#" Value="static member PV : double * double * double * double * Microsoft.VisualBasic.DueDate -&gt; double" Usage="Microsoft.VisualBasic.Financial.PV (Rate, NPer, Pmt, FV, Due)" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 PV(float64 Rate, float64 NPer, float64 Pmt, float64 FV, valuetype Microsoft.VisualBasic.DueDate Due) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Rate" Type="System.Double" />
        <Parameter Name="NPer" Type="System.Double" />
        <Parameter Name="Pmt" Type="System.Double" />
        <Parameter Name="FV" Type="System.Double" />
        <Parameter Name="Due" Type="Microsoft.VisualBasic.DueDate" />
      </Parameters>
      <Docs>
        <param name="Rate">必需。 每期的利率。 例如，如果您的汽车贷款的年利率 (APR) 为 10%，按月还款，则每期利率为 0.1/12（即 0.0083）。</param>
        <param name="NPer">必需。 年金付款总期数。 例如，如果您的汽车贷款的期限为四年，按月还款，则这笔贷款共有 4 * 12（即 48）个支付周期。</param>
        <param name="Pmt">必需。 每期应付金额。 付款金额通常包含本金和利息，该值在年金的有效期限内都不会改变。</param>
        <param name="FV">可选。 完成最后一次付款后所希望的终值或现金余额。 例如，贷款的终值为 $0，这是因为终值是末期还款之后的价值。 但是，如果您想用 18 年的时间存储 $50,000 作为孩子的教育经费，则 $50,000 是终值。 如果省略，则假定为 0。</param>
        <param name="Due">可选。 <see cref="T:Microsoft.VisualBasic.DueDate" /> 类型的对象指定付款何时到期。 如果在付款期末付款，则此参数必须为 <c>DueDate.EndOfPeriod</c>；如果在付款期初付款，则此参数必须为 <c>DueDate.BegOfPeriod</c>。 如果省略，则假定 <c>DueDate.EndOfPeriod</c>。</param>
        <summary>返回一个值，它基于未来等额分期付款和固定利率指定年金的现值。</summary>
        <returns>基于未来等额分期付款和固定利率的年金的现值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 年金是在一段时间内进行的一系列固定的现金付款。 年金可以是贷款 (例如住房抵押) 或投资 (如每月储蓄计划) 。  
  
 `Rate` `NPer` 必须使用以相同单位表示的付款期来计算和参数。 例如，如果 `Rate` 使用月份计算，则 `NPer` 还必须使用月份计算。  
  
 对于所有自变量，现金支付 (如储蓄量) 表示为负数;收到的现金 (如被除数检查) 由正数表示。  
  
   
  
## Examples  
 在此示例中，该 `PV` 函数将返回 $1000000 年金的现值，该年金将在未来20年中提供 $50000 年。 提供的预计年百分比率 (`APR`) ， () 的总付款次数 `TotPmts` 、每个付款 () `YrIncome` 、投资的总未来值 (`FVal`) ，以及一个数字，用于指示是否在支付期的开始或结束时间 (`PayType`) 。 请注意， `YrIncome` 为负数，因为它表示每年从年金支付的现金。  
  
 [!code-vb[VbVbalrMath#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/financial-summary">财务摘要</related>
      </Docs>
    </Member>
    <Member MemberName="Rate">
      <MemberSignature Language="C#" Value="public static double Rate (double NPer, double Pmt, double PV, double FV = 0, Microsoft.VisualBasic.DueDate Due = Microsoft.VisualBasic.DueDate.EndOfPeriod, double Guess = 0.1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Rate(float64 NPer, float64 Pmt, float64 PV, float64 FV, valuetype Microsoft.VisualBasic.DueDate Due, float64 Guess) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.Rate(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Rate (NPer As Double, Pmt As Double, PV As Double, Optional FV As Double = 0, Optional Due As DueDate = Microsoft.VisualBasic.DueDate.EndOfPeriod, Optional Guess As Double = 0.1) As Double" />
      <MemberSignature Language="F#" Value="static member Rate : double * double * double * double * Microsoft.VisualBasic.DueDate * double -&gt; double" Usage="Microsoft.VisualBasic.Financial.Rate (NPer, Pmt, PV, FV, Due, Guess)" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Rate(float64 NPer, float64 Pmt, float64 PV, float64 FV, valuetype Microsoft.VisualBasic.DueDate Due, float64 Guess) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="NPer" Type="System.Double" />
        <Parameter Name="Pmt" Type="System.Double" />
        <Parameter Name="PV" Type="System.Double" />
        <Parameter Name="FV" Type="System.Double" />
        <Parameter Name="Due" Type="Microsoft.VisualBasic.DueDate" />
        <Parameter Name="Guess" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="NPer">必需。 年金付款总期数。 例如，如果您的汽车贷款的期限为四年，按月还款，则这笔贷款共有 4 * 12（即 48）个支付周期。</param>
        <param name="Pmt">必需。 每期应付金额。 付款金额通常包含本金和利息，该值在年金的有效期限内都不会改变。</param>
        <param name="PV">必需。 未来一系列支出或收入的现值。 例如，如果您贷款买车，贷款额就是您将以按月还款的方式付给贷方的现值。</param>
        <param name="FV">可选。 完成最后一次付款后所希望的终值或现金余额。 例如，贷款的终值为 $0，这是因为终值是末期还款之后的价值。 但是，如果您想用 18 年的时间存储 $50,000 作为孩子的教育经费，则 $50,000 是终值。 如果省略，则假定为 0。</param>
        <param name="Due">可选。 <see cref="T:Microsoft.VisualBasic.DueDate" /> 类型的对象指定付款何时到期。 如果在付款期末付款，则此参数必须为 <c>DueDate.EndOfPeriod</c>；如果在付款期初付款，则此参数必须为 <c>DueDate.BegOfPeriod</c>。 如果省略，则假定 <c>DueDate.EndOfPeriod</c>。</param>
        <param name="Guess">可选。 <see langword="Rate" /> 将返回估计值。 如果省略，<paramref name="Guess" /> 便为 0.1 (10%)。</param>
        <summary>返回一个指定每期年金利率的值。</summary>
        <returns>每期的年金利率。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 年金是在一段时间内进行的一系列固定的现金付款。 年金可以是贷款 (例如住房抵押) 或投资 (如每月储蓄计划) 。  
  
 对于所有自变量，现金支付 (如储蓄量) 表示为负数;收到的现金 (如被除数检查) 由正数表示。  
  
 `Rate` 由迭代计算。 从的值开始 `Guess` ， `Rate` 循环计算，直到结果精确到0.00001%。 如果 `Rate` 在20次尝试后找不到结果，则会失败。 如果推测值为10%，并且 `Rate` 失败，请尝试为使用其他值 `Guess` 。  
  
   
  
## Examples  
 此示例使用 `Rate` 函数来计算一笔贷款的利率，给定 () 的总付款次数 `TotPmts` ，贷款支付量 (`Payment`) ，贷款的现值或本金 (`PVal`) ，贷款的未来值 (`FVal`) ，指示支付是在付款期的开始还是结束时到期的数字 () `PayType` ，以及预计利率的近似值 (`Guess`) 。  
  
 [!code-vb[VbVbalrMath#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="NPer" />&lt;= 0。</exception>
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/financial-summary">财务摘要</related>
      </Docs>
    </Member>
    <Member MemberName="SLN">
      <MemberSignature Language="C#" Value="public static double SLN (double Cost, double Salvage, double Life);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 SLN(float64 Cost, float64 Salvage, float64 Life) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.SLN(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function SLN (Cost As Double, Salvage As Double, Life As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double SLN(double Cost, double Salvage, double Life);" />
      <MemberSignature Language="F#" Value="static member SLN : double * double * double -&gt; double" Usage="Microsoft.VisualBasic.Financial.SLN (Cost, Salvage, Life)" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 SLN(float64 Cost, float64 Salvage, float64 Life) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Cost" Type="System.Double" />
        <Parameter Name="Salvage" Type="System.Double" />
        <Parameter Name="Life" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Cost">必需。 资产的原始成本。</param>
        <param name="Salvage">必需。 资产在使用年限结束时的价值。</param>
        <param name="Life">必需。 资产的使用年限。</param>
        <summary>返回一个值，该值指定资产在一个周期内的直线折旧。</summary>
        <returns>资产在一个周期内的直线折旧。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此折旧期必须以与参数相同的单位表示 `Life` 。 所有自变量都必须是正数。  
  
   
  
## Examples  
 此示例使用 `SLN` 函数在给定资产初始成本的情况下，在单个期间内返回资产的直线折旧 `InitCost`) ，资产的使用年限结束时的残值 (`SalvageVal`) ， (年资产的总寿命 (`LifeTime`) 。  
  
 [!code-vb[VbVbalrMath#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Life" /> = 0.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Financial.SYD(System.Double,System.Double,System.Double,System.Double)" />
        <altmember cref="M:Microsoft.VisualBasic.Financial.DDB(System.Double,System.Double,System.Double,System.Double,System.Double)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/financial-summary">财务摘要</related>
      </Docs>
    </Member>
    <Member MemberName="SYD">
      <MemberSignature Language="C#" Value="public static double SYD (double Cost, double Salvage, double Life, double Period);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 SYD(float64 Cost, float64 Salvage, float64 Life, float64 Period) cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.SYD(System.Double,System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function SYD (Cost As Double, Salvage As Double, Life As Double, Period As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double SYD(double Cost, double Salvage, double Life, double Period);" />
      <MemberSignature Language="F#" Value="static member SYD : double * double * double * double -&gt; double" Usage="Microsoft.VisualBasic.Financial.SYD (Cost, Salvage, Life, Period)" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 SYD(float64 Cost, float64 Salvage, float64 Life, float64 Period) cil managed" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
        <AssemblyVersion>10.0.5.0</AssemblyVersion>
        <AssemblyVersion>10.0.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Cost" Type="System.Double" />
        <Parameter Name="Salvage" Type="System.Double" />
        <Parameter Name="Life" Type="System.Double" />
        <Parameter Name="Period" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Cost">必需。 资产的原始成本。</param>
        <param name="Salvage">必需。 资产在使用年限结束时的价值。</param>
        <param name="Life">必需。 资产的使用年限。</param>
        <param name="Period">必需。 计算资产折旧所用的周期。</param>
        <summary>返回一个值，该值指定在指定周期内资产的年限总额折旧。</summary>
        <returns>指定周期内资产的年限总额折旧。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Life`和 `Period` 参数必须以相同的单位表示。 例如，如果 `Life` 以月为单位给出，则 `Period` 还必须以月为单位给出。 所有自变量都必须是正数。  
  
   
  
## Examples  
 此示例使用 `SYD` 函数返回指定时间段内资产的折旧率，给定资产的初始成本 (`InitCost`) 、资产的使用年限结束时的残值 (`SalvageVal`) ，以及年资产的总使用时间 (`LifeTime`) 。  
  
 [!code-vb[VbVbalrMath#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Salvage" />&lt;0， <paramref name="Period" /> &gt;<paramref name="Life" />，或 <paramref name="Period" /> &lt;= 0。</exception>
        <altmember cref="M:Microsoft.VisualBasic.Financial.DDB(System.Double,System.Double,System.Double,System.Double,System.Double)" />
        <altmember cref="M:Microsoft.VisualBasic.Financial.SLN(System.Double,System.Double,System.Double)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/keywords/financial-summary">财务摘要</related>
      </Docs>
    </Member>
  </Members>
</Type>
