<Type Name="ResourceReader" FullName="System.Resources.ResourceReader">
  <Metadata><Meta Name="ms.openlocfilehash" Value="216faf3024c3774719644b0e7d8a44af29b225f8" /><Meta Name="ms.sourcegitcommit" Value="c982ad9e10a242d90f1e631b5981570f9e5d9f34" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/10/2020" /><Meta Name="ms.locfileid" Value="89894107" /></Metadata><TypeSignature Language="C#" Value="public sealed class ResourceReader : System.Resources.IResourceReader" FrameworkAlternate="net-5.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ResourceReader extends System.Object implements class System.Collections.IEnumerable, class System.IDisposable, class System.Resources.IResourceReader" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="DocId" Value="T:System.Resources.ResourceReader" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ResourceReader&#xA;Implements IResourceReader" FrameworkAlternate="net-5.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="C++ CLI" Value="public ref class ResourceReader sealed : System::Resources::IResourceReader" FrameworkAlternate="net-5.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="F#" Value="type ResourceReader = class&#xA;    interface IEnumerable&#xA;    interface IDisposable&#xA;    interface IResourceReader" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netstandard-2.0;netstandard-2.1" />
  <TypeSignature Language="C#" Value="public sealed class ResourceReader : IDisposable" FrameworkAlternate="netcore-1.0;netcore-1.1" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ResourceReader extends System.Object implements class System.IDisposable" FrameworkAlternate="netcore-1.0;netcore-1.1" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ResourceReader&#xA;Implements IDisposable" FrameworkAlternate="netcore-1.0;netcore-1.1" />
  <TypeSignature Language="C++ CLI" Value="public ref class ResourceReader sealed : IDisposable" FrameworkAlternate="netcore-1.0;netcore-1.1" />
  <TypeSignature Language="F#" Value="type ResourceReader = class&#xA;    interface IDisposable" FrameworkAlternate="netcore-1.0;netcore-1.1" />
  <TypeSignature Language="C#" Value="public sealed class ResourceReader : IDisposable, System.Collections.IEnumerable, System.Resources.IResourceReader" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ResourceReader&#xA;Implements IDisposable, IEnumerable, IResourceReader" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1" />
  <TypeSignature Language="C++ CLI" Value="public ref class ResourceReader sealed : IDisposable, System::Collections::IEnumerable, System::Resources::IResourceReader" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1" />
  <TypeSignature Language="F#" Value="type ResourceReader = class&#xA;    interface IResourceReader&#xA;    interface IEnumerable&#xA;    interface IDisposable" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <AssemblyInfo>
    <AssemblyName>System.Resources.Reader</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Resources.ResourceManager</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.2.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Runtime" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
    <TypeForwarding From="System.Resources.Reader" FromVersion="5.0.0.0" To="System.Runtime" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
    <TypeForwarding From="System.Resources.ResourceManager" FromVersion="5.0.0.0" To="System.Runtime" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
    <TypeForwarding From="System.Resources.Reader" FromVersion="4.1.0.0" To="System.Resources.ResourceManager" ToVersion="4.1.0.0" FrameworkAlternate="netcore-2.0" />
    <TypeForwarding From="System.Resources.Reader" FromVersion="4.1.1.0" To="System.Resources.ResourceManager" ToVersion="4.1.1.0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0" />
    <TypeForwarding From="System.Resources.Reader" FromVersion="4.1.2.0" To="System.Resources.ResourceManager" ToVersion="4.1.2.0" FrameworkAlternate="netcore-3.1" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <InterfaceName>System.Resources.IResourceReader</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName Language="C#">[System.Runtime.InteropServices.ComVisible(true)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.ComVisible(true)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="326d0-101">通过读取顺序资源名称/值对枚举二进制资源 (.resources) 文件的资源。</span><span class="sxs-lookup"><span data-stu-id="326d0-101">Enumerates the resources in a binary resources (.resources) file by reading sequential resource name/value pairs.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  

[!INCLUDE [untrusted-data-class-note](~/includes/untrusted-data-class-note.md)]

 <span data-ttu-id="326d0-102"><xref:System.Resources.ResourceReader>类提供接口的标准实现 <xref:System.Resources.IResourceReader> 。</span><span class="sxs-lookup"><span data-stu-id="326d0-102">The <xref:System.Resources.ResourceReader> class provides a standard implementation of the <xref:System.Resources.IResourceReader> interface.</span></span> <span data-ttu-id="326d0-103"><xref:System.Resources.ResourceReader>实例表示嵌入到程序集中的独立 .resources 文件或 .resources 文件。</span><span class="sxs-lookup"><span data-stu-id="326d0-103">A <xref:System.Resources.ResourceReader> instance represents either a standalone .resources file or a .resources file that is embedded in an assembly.</span></span> <span data-ttu-id="326d0-104">它用于枚举 .resources 文件中的资源，并检索其名称/值对。</span><span class="sxs-lookup"><span data-stu-id="326d0-104">It is used to enumerate the resources in a .resources file and retrieve its name/value pairs.</span></span> <span data-ttu-id="326d0-105">它与类不同 <xref:System.Resources.ResourceManager> ，后者用于从嵌入在程序集中的 .resources 文件中检索指定的已命名资源。</span><span class="sxs-lookup"><span data-stu-id="326d0-105">It differs from the <xref:System.Resources.ResourceManager> class, which is used to retrieve specified named resources from a .resources file that is embedded in an assembly.</span></span> <span data-ttu-id="326d0-106"><xref:System.Resources.ResourceManager>类用于检索事先知道其名称的资源，而 <xref:System.Resources.ResourceReader> 类可用于检索在编译时不知道其数字或精确名称的资源。</span><span class="sxs-lookup"><span data-stu-id="326d0-106">The <xref:System.Resources.ResourceManager> class is used to retrieve resources whose names are known in advance, whereas the <xref:System.Resources.ResourceReader> class is useful for retrieving resources whose number or precise names are not known at compile time.</span></span> <span data-ttu-id="326d0-107">例如，应用程序可以使用资源文件来存储组织中的部分和项的配置信息，其中节或节中的项的数目事先是未知的。</span><span class="sxs-lookup"><span data-stu-id="326d0-107">For example, an application may use a resources file to store configuration information that is organized into sections and items in a section, where the number of sections or items in a section is not known in advance.</span></span> <span data-ttu-id="326d0-108">然后，可以使用对象对资源进行常规命名 (例如，、、等 `Section1` `Section1Item1` `Section1Item2`) 和检索 <xref:System.Resources.ResourceReader> 。</span><span class="sxs-lookup"><span data-stu-id="326d0-108">Resources can then be named generically (such as `Section1`, `Section1Item1`, `Section1Item2`, and so on) and retrieved by using a <xref:System.Resources.ResourceReader> object.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="326d0-109">此类型实现 <xref:System.IDisposable> 接口。</span><span class="sxs-lookup"><span data-stu-id="326d0-109">This type implements the <xref:System.IDisposable> interface.</span></span> <span data-ttu-id="326d0-110">在使用完类型后，您应直接或间接释放类型。</span><span class="sxs-lookup"><span data-stu-id="326d0-110">When you have finished using the type, you should dispose of it either directly or indirectly.</span></span> <span data-ttu-id="326d0-111">若要直接释放类型，请在 `try`/`catch` 块中调用其 <xref:System.IDisposable.Dispose%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="326d0-111">To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block.</span></span> <span data-ttu-id="326d0-112">若要间接释放类型，请使用 `using`（在 C# 中）或 `Using`（在 Visual Basic 中）等语言构造。</span><span class="sxs-lookup"><span data-stu-id="326d0-112">To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic).</span></span> <span data-ttu-id="326d0-113">有关详细信息，请参阅 <xref:System.IDisposable> 接口主题中的“使用实现 IDisposable 的对象”一节。</span><span class="sxs-lookup"><span data-stu-id="326d0-113">For more information, see the "Using an Object that Implements IDisposable" section in the <xref:System.IDisposable> interface topic.</span></span>  
  
 <span data-ttu-id="326d0-114">有关使用类的详细信息 <xref:System.Resources.ResourceReader> ，请参阅以下部分：</span><span class="sxs-lookup"><span data-stu-id="326d0-114">For more information about using the <xref:System.Resources.ResourceReader> class, see the following sections:</span></span>  
  
-   [<span data-ttu-id="326d0-115">实例化 ResourceReader 对象</span><span class="sxs-lookup"><span data-stu-id="326d0-115">Instantiating a ResourceReader object</span></span>](#instantiate)  
  
-   [<span data-ttu-id="326d0-116">枚举 ResourceReader 对象的资源</span><span class="sxs-lookup"><span data-stu-id="326d0-116">Enumerating a ResourceReader object's resources</span></span>](#enumerate)  
  
    -   [<span data-ttu-id="326d0-117">使用 IDictionaryEnumerator 属性检索资源</span><span class="sxs-lookup"><span data-stu-id="326d0-117">Retrieving resources by using IDictionaryEnumerator properties</span></span>](#idictionaryenumerator)  
  
    -   [<span data-ttu-id="326d0-118">使用 GetResourceData 按名称检索资源</span><span class="sxs-lookup"><span data-stu-id="326d0-118">Retrieving resources by name with GetResourceData</span></span>](#getresourcedata)  
  
<a name="instantiate"></a>   
## <a name="instantiating-a-resourcereader-object"></a><span data-ttu-id="326d0-119">实例化 ResourceReader 对象</span><span class="sxs-lookup"><span data-stu-id="326d0-119">Instantiating a ResourceReader Object</span></span>  
 <span data-ttu-id="326d0-120">.Resources 文件是二进制文件，已通过 [Resgen.exe (资源文件生成器) ](/dotnet/framework/tools/resgen-exe-resource-file-generator)，从文本文件或 XML .resx 文件进行编译。</span><span class="sxs-lookup"><span data-stu-id="326d0-120">A .resources file is a binary file that has been compiled from either a text file or an XML .resx file by [Resgen.exe (Resource File Generator)](/dotnet/framework/tools/resgen-exe-resource-file-generator).</span></span> <span data-ttu-id="326d0-121"><xref:System.Resources.ResourceReader>对象可以表示独立 .resources 文件或已嵌入到程序集中的 .resources 文件。</span><span class="sxs-lookup"><span data-stu-id="326d0-121">A <xref:System.Resources.ResourceReader> object can represent either a standalone .resources file or a .resources file that has been embedded in an assembly.</span></span>  
  
 <span data-ttu-id="326d0-122">若要实例化 <xref:System.Resources.ResourceReader> 从独立 .resources 文件中读取的对象，请将 <xref:System.Resources.ResourceReader> 类构造函数用于输入流或包含 .resources 文件名称的字符串。</span><span class="sxs-lookup"><span data-stu-id="326d0-122">To instantiate a <xref:System.Resources.ResourceReader> object that reads from a standalone .resources file, use the <xref:System.Resources.ResourceReader> class constructor with either an input stream or a string that contains the .resources file name.</span></span> <span data-ttu-id="326d0-123">下面的示例演示了这两种方法。</span><span class="sxs-lookup"><span data-stu-id="326d0-123">The following example illustrates both approaches.</span></span> <span data-ttu-id="326d0-124">第一个实例化一个 <xref:System.Resources.ResourceReader> 对象，该对象表示一个名为的 .resources 文件， `Resources1.resources` 使用其文件名。</span><span class="sxs-lookup"><span data-stu-id="326d0-124">The first instantiates a <xref:System.Resources.ResourceReader> object that represents a .resources file named `Resources1.resources` by using its file name.</span></span> <span data-ttu-id="326d0-125">第二个实例化一个 <xref:System.Resources.ResourceReader> 对象，该对象表示 `Resources2.resources` 使用从文件创建的流命名的 .resources 文件。</span><span class="sxs-lookup"><span data-stu-id="326d0-125">The second instantiates a <xref:System.Resources.ResourceReader> object that represents a .resources file named `Resources2.resources` by using a stream created from the file.</span></span>  
  
 [!code-csharp[System.Resources.ResourceReader.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcereader.class/cs/ctor1.cs#2)]
 [!code-vb[System.Resources.ResourceReader.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcereader.class/vb/ctor1.vb#2)]  
  
 <span data-ttu-id="326d0-126">若要创建 <xref:System.Resources.ResourceReader> 表示嵌入 .resources 文件的对象，请 <xref:System.Reflection.Assembly> 从嵌入 .resources 文件的程序集中实例化对象。</span><span class="sxs-lookup"><span data-stu-id="326d0-126">To create a <xref:System.Resources.ResourceReader> object that represents an embedded .resources file, instantiate an <xref:System.Reflection.Assembly> object from the assembly in which the .resources file is embedded.</span></span> <span data-ttu-id="326d0-127">其 <xref:System.Reflection.Assembly.GetManifestResourceStream%2A?displayProperty=nameWithType> 方法返回 <xref:System.IO.Stream> 可传递给 <xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29> 构造函数的对象。</span><span class="sxs-lookup"><span data-stu-id="326d0-127">Its <xref:System.Reflection.Assembly.GetManifestResourceStream%2A?displayProperty=nameWithType> method returns a <xref:System.IO.Stream> object that can be passed to the <xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29> constructor.</span></span> <span data-ttu-id="326d0-128">下面的示例实例化一个 <xref:System.Resources.ResourceReader> 表示嵌入 .resources 文件的对象。</span><span class="sxs-lookup"><span data-stu-id="326d0-128">The following example instantiates a <xref:System.Resources.ResourceReader> object that represents an embedded .resources file.</span></span>  
  
 [!code-csharp[System.Resources.ResourceReader.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcereader.class/cs/ctor1.cs#3)]
 [!code-vb[System.Resources.ResourceReader.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcereader.class/vb/ctor1.vb#3)]  
  
<a name="enumerate"></a>   
## <a name="enumerating-a-resourcereader-objects-resources"></a><span data-ttu-id="326d0-129">枚举 ResourceReader 对象的资源</span><span class="sxs-lookup"><span data-stu-id="326d0-129">Enumerating a ResourceReader Object's Resources</span></span>  
 <span data-ttu-id="326d0-130">若要枚举 .resources 文件中的资源，请调用 <xref:System.Resources.ResourceReader.GetEnumerator%2A> 返回对象的方法 <xref:System.Collections.IDictionaryEnumerator?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="326d0-130">To enumerate the resources in a .resources file, you call the <xref:System.Resources.ResourceReader.GetEnumerator%2A> method, which returns an <xref:System.Collections.IDictionaryEnumerator?displayProperty=nameWithType> object.</span></span> <span data-ttu-id="326d0-131">调用 `IDictionaryEnumerator.MoveNext` 方法以从一个资源移到下一个资源。</span><span class="sxs-lookup"><span data-stu-id="326d0-131">You call the `IDictionaryEnumerator.MoveNext` method to move from one resource to the next.</span></span> <span data-ttu-id="326d0-132">`false`如果已枚举 .resources 文件中的所有资源，则方法将返回。</span><span class="sxs-lookup"><span data-stu-id="326d0-132">The method returns `false` when all the resources in the .resources file have been enumerated.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="326d0-133">尽管 <xref:System.Resources.ResourceReader> 类实现 <xref:System.Collections.IEnumerable> 接口和 <xref:System.Collections.IEnumerable.GetEnumerator%2A?displayProperty=nameWithType> 方法，但方法并 <xref:System.Resources.ResourceReader.GetEnumerator%2A?displayProperty=nameWithType> 不提供 <xref:System.Collections.IEnumerable.GetEnumerator%2A?displayProperty=nameWithType> 实现。</span><span class="sxs-lookup"><span data-stu-id="326d0-133">Although the <xref:System.Resources.ResourceReader> class implements the <xref:System.Collections.IEnumerable> interface and the <xref:System.Collections.IEnumerable.GetEnumerator%2A?displayProperty=nameWithType> method, the <xref:System.Resources.ResourceReader.GetEnumerator%2A?displayProperty=nameWithType> method does not provide the <xref:System.Collections.IEnumerable.GetEnumerator%2A?displayProperty=nameWithType> implementation.</span></span> <span data-ttu-id="326d0-134">相反，该 <xref:System.Resources.ResourceReader.GetEnumerator%2A?displayProperty=nameWithType> 方法返回 <xref:System.Collections.IDictionaryEnumerator> 提供对每个资源的名称/值对的访问的接口对象。</span><span class="sxs-lookup"><span data-stu-id="326d0-134">Instead, the <xref:System.Resources.ResourceReader.GetEnumerator%2A?displayProperty=nameWithType> method  returns an <xref:System.Collections.IDictionaryEnumerator> interface object that provides access to each resource's name/value pair.</span></span>  
  
 <span data-ttu-id="326d0-135">可以通过两种方式检索集合中的单个资源：</span><span class="sxs-lookup"><span data-stu-id="326d0-135">You can retrieve the individual resources in the collection in two ways:</span></span>  
  
-   <span data-ttu-id="326d0-136">可以循环访问集合中的每个资源 <xref:System.Collections.IDictionaryEnumerator?displayProperty=nameWithType> ，并使用 <xref:System.Collections.IDictionaryEnumerator?displayProperty=nameWithType> 属性来检索资源名称和值。</span><span class="sxs-lookup"><span data-stu-id="326d0-136">You can iterate each resource in the <xref:System.Collections.IDictionaryEnumerator?displayProperty=nameWithType> collection and use <xref:System.Collections.IDictionaryEnumerator?displayProperty=nameWithType> properties to retrieve the resource name and value.</span></span> <span data-ttu-id="326d0-137">如果所有资源的类型相同，或者知道每个资源的数据类型，则我们建议采用此方法。</span><span class="sxs-lookup"><span data-stu-id="326d0-137">We recommend this technique when all the resources are of the same type, or you know the data type of each resource.</span></span>  
  
-   <span data-ttu-id="326d0-138">在循环访问 <xref:System.Collections.IDictionaryEnumerator?displayProperty=nameWithType> 集合并调用 <xref:System.Resources.ResourceReader.GetResourceData%2A> 方法以检索资源的数据时，可以检索每个资源的名称。</span><span class="sxs-lookup"><span data-stu-id="326d0-138">You can retrieve the name of each resource when you iterate the <xref:System.Collections.IDictionaryEnumerator?displayProperty=nameWithType> collection and call the <xref:System.Resources.ResourceReader.GetResourceData%2A> method to retrieve the resource's data.</span></span> <span data-ttu-id="326d0-139">如果你不知道每个资源的数据类型，或者以前的方法引发异常，则建议采用此方法。</span><span class="sxs-lookup"><span data-stu-id="326d0-139">We recommend this approach when you do not know the data type of each resource or if the previous approach throws exceptions.</span></span>  
  
<a name="idictionaryenumerator"></a>   
### <a name="retrieving-resources-by-using-idictionaryenumerator-properties"></a><span data-ttu-id="326d0-140">使用 IDictionaryEnumerator 属性检索资源</span><span class="sxs-lookup"><span data-stu-id="326d0-140">Retrieving Resources by Using IDictionaryEnumerator Properties</span></span>  
 <span data-ttu-id="326d0-141">枚举 .resources 文件中的资源的第一种方法涉及直接检索每个资源的名称/值对。</span><span class="sxs-lookup"><span data-stu-id="326d0-141">The first method of enumerating the resources in a .resources file involves directly retrieving each resource's name/value pair.</span></span> <span data-ttu-id="326d0-142">调用 `IDictionaryEnumerator.MoveNext` 方法移动到集合中的每个资源后，可以从属性 <xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=nameWithType> 和属性的资源数据中检索资源名称 <xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="326d0-142">After you call the `IDictionaryEnumerator.MoveNext` method to move to each resource in the collection, you can retrieve the resource name from the <xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=nameWithType> property and the resource data from the <xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType> property.</span></span>  
  
 <span data-ttu-id="326d0-143">下面的示例演示如何使用和属性检索 .resources 文件中每个资源的名称和值 <xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=nameWithType> <xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="326d0-143">The following example shows how to retrieve the name and value of each resource in a .resources file by using the <xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=nameWithType> and <xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType> properties.</span></span> <span data-ttu-id="326d0-144">若要运行该示例，请创建名为 ApplicationResources.txt 的以下文本文件来定义字符串资源。</span><span class="sxs-lookup"><span data-stu-id="326d0-144">To run the example, create the following text file named ApplicationResources.txt to define string resources.</span></span>  
  
```  
Title="Contact Information"  
Label1="First Name:"  
Label2="Middle Name:"  
Label3="Last Name:"  
Label4="SSN:"  
Label5="Street Address:"  
Label6="City:"  
Label7="State:"  
Label8="Zip Code:"  
Label9="Home Phone:"  
Label10="Business Phone:"  
Label11="Mobile Phone:"  
Label12="Other Phone:"  
Label13="Fax:"  
Label14="Email Address:"  
Label15="Alternate Email Address:"  
```  
  
 <span data-ttu-id="326d0-145">然后，可以使用以下命令将文本资源文件转换为名为 ApplicationResources 的二进制文件：</span><span class="sxs-lookup"><span data-stu-id="326d0-145">You can then convert the text resource file to a binary file named ApplicationResources.resources by using the following command:</span></span>  
  
 <span data-ttu-id="326d0-146">**resgen ApplicationResources.txt**</span><span class="sxs-lookup"><span data-stu-id="326d0-146">**resgen ApplicationResources.txt**</span></span>  
  
 <span data-ttu-id="326d0-147">下面的示例使用 <xref:System.Resources.ResourceReader> 类来枚举独立的二进制 .resources 文件中的每个资源，并显示其密钥名称和相应的值。</span><span class="sxs-lookup"><span data-stu-id="326d0-147">The following example then uses the <xref:System.Resources.ResourceReader> class to enumerate each resource in the standalone binary .resources file and to display its key name and corresponding value.</span></span>  
  
 [!code-csharp[System.Resources.ResourceReader.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcereader.class/cs/class1.cs#1)]
 [!code-vb[System.Resources.ResourceReader.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcereader.class/vb/class1.vb#1)]  
  
 <span data-ttu-id="326d0-148">尝试从属性中检索资源数据 <xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType> 会引发以下异常：</span><span class="sxs-lookup"><span data-stu-id="326d0-148">The attempt to retrieve resource data from the <xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType> property can throw the following exceptions:</span></span>  
  
-   <span data-ttu-id="326d0-149"><xref:System.FormatException>如果数据不是预期的格式，则为。</span><span class="sxs-lookup"><span data-stu-id="326d0-149">A <xref:System.FormatException> if the data is not in the expected format.</span></span>  
  
-   <span data-ttu-id="326d0-150"><xref:System.IO.FileNotFoundException>如果找不到包含数据所属类型的程序集，则为。</span><span class="sxs-lookup"><span data-stu-id="326d0-150">A <xref:System.IO.FileNotFoundException> if the assembly that contains the type to which the data belongs cannot be found.</span></span>  
  
-   <span data-ttu-id="326d0-151"><xref:System.TypeLoadException>如果找不到数据所属的类型，则为。</span><span class="sxs-lookup"><span data-stu-id="326d0-151">A <xref:System.TypeLoadException> if the type to which the data belongs cannot be cannot be found.</span></span>  
  
 <span data-ttu-id="326d0-152">通常，如果在手动修改了某个类型的程序集时未将该类型的程序集包括在应用程序中或被无意中删除，或者如果该程序集是早于类型的较旧版本，则会引发这些异常。</span><span class="sxs-lookup"><span data-stu-id="326d0-152">Typically, these exceptions are thrown if the .resources file has been modified manually, if the assembly in which a type is defined has either not been included with an application or has been inadvertently deleted, or if the assembly is an older version that predates a type.</span></span> <span data-ttu-id="326d0-153">如果引发其中一个异常，可以通过枚举每个资源并调用方法来检索资源 <xref:System.Resources.ResourceReader.GetResourceData%2A> ，如以下部分所示。</span><span class="sxs-lookup"><span data-stu-id="326d0-153">If one of these exceptions is thrown, you can retrieve resources by enumerating each resource and calling the <xref:System.Resources.ResourceReader.GetResourceData%2A> method, as the following section shows.</span></span> <span data-ttu-id="326d0-154">此方法提供了有关属性尝试返回的数据类型的一些信息 <xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="326d0-154">This approach provides you with some information about the data type that the <xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType> property attempted to return.</span></span>  
  
<a name="getresourcedata"></a>   
### <a name="retrieving-resources-by-name-with-getresourcedata"></a><span data-ttu-id="326d0-155">使用 GetResourceData 按名称检索资源</span><span class="sxs-lookup"><span data-stu-id="326d0-155">Retrieving Resources by Name with GetResourceData</span></span>  
 <span data-ttu-id="326d0-156">在 .resources 文件中枚举资源的第二种方法还涉及通过调用方法来浏览文件中的资源 `IDictionaryEnumerator.MoveNext` 。</span><span class="sxs-lookup"><span data-stu-id="326d0-156">The second approach to enumerating resources in a .resources file also involves navigating through the resources in the file by calling the `IDictionaryEnumerator.MoveNext` method.</span></span> <span data-ttu-id="326d0-157">对于每个资源，从属性中检索资源的名称 <xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=nameWithType> ，然后将其传递给 <xref:System.Resources.ResourceReader.GetResourceData%28System.String%2CSystem.String%40%2CSystem.Byte%5B%5D%40%29> 方法以检索资源的数据。</span><span class="sxs-lookup"><span data-stu-id="326d0-157">For each resource, you retrieve the resource's name from the <xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=nameWithType> property, which is then passed to the <xref:System.Resources.ResourceReader.GetResourceData%28System.String%2CSystem.String%40%2CSystem.Byte%5B%5D%40%29> method to retrieve the resource's data.</span></span> <span data-ttu-id="326d0-158">这在参数中作为字节数组返回 `resourceData` 。</span><span class="sxs-lookup"><span data-stu-id="326d0-158">This is returned as a byte array in the `resourceData` argument.</span></span>  
  
 <span data-ttu-id="326d0-159">与从和属性检索资源名称和值相比，此方法更 <xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=nameWithType> 难 <xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType> ，因为它返回构成资源值的实际字节。</span><span class="sxs-lookup"><span data-stu-id="326d0-159">This approach is more awkward than retrieving the resource name and value from the <xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=nameWithType> and <xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType> properties, because it returns the actual bytes that form the resource value.</span></span> <span data-ttu-id="326d0-160">但是，如果尝试检索资源时引发异常，则 <xref:System.Resources.ResourceReader.GetResourceData%2A> 方法可以通过提供有关资源的数据类型的信息来帮助确定异常的源。</span><span class="sxs-lookup"><span data-stu-id="326d0-160">However, if the attempt to retrieve the resource throws an exception, the <xref:System.Resources.ResourceReader.GetResourceData%2A> method can help identify the source of the exception by supplying information about the resource's data type.</span></span> <span data-ttu-id="326d0-161">有关指示资源的数据类型的字符串的详细信息，请参阅 <xref:System.Resources.ResourceReader.GetResourceData%2A> 。</span><span class="sxs-lookup"><span data-stu-id="326d0-161">For more information about the string that indicates the resource's data type, see <xref:System.Resources.ResourceReader.GetResourceData%2A>.</span></span>  
  
 <span data-ttu-id="326d0-162">下面的示例演示如何使用此方法检索资源并处理引发的任何异常。</span><span class="sxs-lookup"><span data-stu-id="326d0-162">The following example illustrates how to use this approach to retrieve resources and to handle any exceptions that are thrown.</span></span> <span data-ttu-id="326d0-163">它以编程方式创建一个二进制 .resources 文件，其中包含四个字符串、一个布尔值、一个整数、一个位图和一个自定义 `DateTimeTZI` 对象。</span><span class="sxs-lookup"><span data-stu-id="326d0-163">It programmatically creates a binary .resources file that contains four strings, one Boolean, one integer, one bitmap, and one custom `DateTimeTZI` object.</span></span> <span data-ttu-id="326d0-164">若要运行该示例，请执行以下操作：</span><span class="sxs-lookup"><span data-stu-id="326d0-164">To run the example, do the following:</span></span>  
  
1.  <span data-ttu-id="326d0-165">创建一个名为 Library.dll 的程序集，该程序集包含 `DateTimeTZI` 结构。</span><span class="sxs-lookup"><span data-stu-id="326d0-165">Create an assembly named Library.dll that contains the `DateTimeTZI` structure.</span></span> <span data-ttu-id="326d0-166">下面是该程序集的源代码。</span><span class="sxs-lookup"><span data-stu-id="326d0-166">The following is the source code for the assembly.</span></span>  
  
     [!code-csharp[System.Resources.ResourceReader.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcereader.class/cs/library.cs#4)]
     [!code-vb[System.Resources.ResourceReader.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcereader.class/vb/library.vb#4)]  
  
     <span data-ttu-id="326d0-167">使用以下命令编译 c # 中的源代码：</span><span class="sxs-lookup"><span data-stu-id="326d0-167">Compile the source code in C# by using the following command:</span></span>  
  
    ```  
    csc /t:library library.cs  
    ```  
  
     <span data-ttu-id="326d0-168">或者，可以使用以下命令在 Visual Basic 中对其进行编译：</span><span class="sxs-lookup"><span data-stu-id="326d0-168">Or, you can compile it in Visual Basic by using the following command:</span></span>  
  
    ```  
    vbc library.vb /t:library  
    ```  
  
2.  <span data-ttu-id="326d0-169">编译并执行以下源代码，这会创建一个名为 ContactResources 的 .resources 文件。</span><span class="sxs-lookup"><span data-stu-id="326d0-169">Compile and execute the following source code, which creates a .resources file named ContactResources.resources.</span></span>  
  
     [!code-csharp[System.Resources.ResourceReader.Class#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcereader.class/cs/createresourceex1.cs#5)]
     [!code-vb[System.Resources.ResourceReader.Class#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcereader.class/vb/createresourceex1.vb#5)]  
  
     <span data-ttu-id="326d0-170">源代码文件被命名为 CreateResources.cs。</span><span class="sxs-lookup"><span data-stu-id="326d0-170">The source code file is named CreateResources.cs.</span></span> <span data-ttu-id="326d0-171">可以使用以下命令在 c # 中对其进行编译：</span><span class="sxs-lookup"><span data-stu-id="326d0-171">You can compile it in C# by using the following command:</span></span>  
  
    ```  
    csc CreateResources.cs /r:library.dll  
    ```  
  
     <span data-ttu-id="326d0-172">或者，可以使用以下命令在 Visual Basic 中对其进行编译：</span><span class="sxs-lookup"><span data-stu-id="326d0-172">Or, you can compile it in Visual Basic by using the following command:</span></span>  
  
    ```  
    vbc CreateResources.vb /r:library.dll  
    ```  
  
3.  <span data-ttu-id="326d0-173">编译并运行以下代码以枚举 ContactResources 文件中的资源。</span><span class="sxs-lookup"><span data-stu-id="326d0-173">Compile and run the following code to enumerate the resources in the ContactResources.resources file.</span></span>  
  
     [!code-csharp[System.Resources.ResourceReader.Class#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcereader.class/cs/readresourceex1.cs#6)]
     [!code-vb[System.Resources.ResourceReader.Class#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcereader.class/vb/readresourceex1.vb#6)]  
  
     <span data-ttu-id="326d0-174">修改源代码后 (例如，通过在块的末尾特意引发， <xref:System.FormatException> `try`) 或重命名 Library.dll 程序集，使其在运行时不可用，则可以运行此示例，了解如何通过调用来 <xref:System.Resources.ResourceReader.GetResourceData%2A> 检索或重新创建某些资源信息。</span><span class="sxs-lookup"><span data-stu-id="326d0-174">After modifying the source code (for example, by deliberately throwing a <xref:System.FormatException> at the end of the `try` block) or renaming the Library.dll assembly so that it is unavailable at runtime, you can run the example to see how calls to <xref:System.Resources.ResourceReader.GetResourceData%2A> enable you to retrieve or recreate some resource information.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Resources.Reader</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="326d0-175">初始化 <see cref="T:System.Resources.ResourceReader" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="326d0-175">Initializes a new instance of the <see cref="T:System.Resources.ResourceReader" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="326d0-176">[!INCLUDE [untrusted-data-instance-note](~/includes/untrusted-data-instance-note.md)].</span><span class="sxs-lookup"><span data-stu-id="326d0-176">[!INCLUDE [untrusted-data-instance-note](~/includes/untrusted-data-instance-note.md)].</span></span>
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ResourceReader (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceReader.#ctor(System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (stream As Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ResourceReader(System::IO::Stream ^ stream);" />
      <MemberSignature Language="F#" Value="new System.Resources.ResourceReader : System.IO.Stream -&gt; System.Resources.ResourceReader" Usage="new System.Resources.ResourceReader stream" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Resources.Reader</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Security.SecurityCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecurityCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream"><span data-ttu-id="326d0-177">用于读取资源的输入流。</span><span class="sxs-lookup"><span data-stu-id="326d0-177">The input stream for reading resources.</span></span></param>
        <summary><span data-ttu-id="326d0-178">为指定的流初始化 <see cref="T:System.Resources.ResourceReader" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="326d0-178">Initializes a new instance of the <see cref="T:System.Resources.ResourceReader" /> class for the specified stream.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="326d0-179"><xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29>构造函数实例化一个 <xref:System.Resources.ResourceReader> 对象，该对象从独立 .resources 文件或嵌入在程序集中的 .resources 文件检索资源。</span><span class="sxs-lookup"><span data-stu-id="326d0-179">The <xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29> constructor instantiates a <xref:System.Resources.ResourceReader> object that retrieves resources either from a standalone .resources file or from a .resources file that is embedded in an assembly.</span></span> <span data-ttu-id="326d0-180">若要从独立 .resources 文件中读取，请实例化 <xref:System.IO.Stream> 对象并将其传递给 <xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29> 构造函数。</span><span class="sxs-lookup"><span data-stu-id="326d0-180">To read from a standalone .resources file, instantiate a <xref:System.IO.Stream> object and pass it to the <xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29> constructor.</span></span> <span data-ttu-id="326d0-181">若要读取嵌入的 .resources 文件，请 <xref:System.Reflection.Assembly.GetManifestResourceStream%2A?displayProperty=nameWithType> 使用 .resources 文件的区分大小写的名称调用方法，并将返回的 <xref:System.IO.Stream> 对象传递到 <xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29> 构造函数。</span><span class="sxs-lookup"><span data-stu-id="326d0-181">To read from an embedded .resources file, call the <xref:System.Reflection.Assembly.GetManifestResourceStream%2A?displayProperty=nameWithType> method with the case-sensitive name of the .resources file, and pass the returned <xref:System.IO.Stream> object to the <xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29> constructor.</span></span>  
  
[!INCLUDE [untrusted-data-instance-note](~/includes/untrusted-data-instance-note.md)]
  
## Examples  
 <span data-ttu-id="326d0-182">本部分中的示例使用名为的以下 .txt 文件 `PatientForm.txt` 来定义应用程序使用的资源。</span><span class="sxs-lookup"><span data-stu-id="326d0-182">The example in this section uses the following .txt file named `PatientForm.txt` to define the resources used by an application.</span></span>  
  
```  
  
Title="Top Pet Animal Clinic"  
Label1="Patient Number:"  
Label2="Pet Name:"  
Label3="Species:"  
Label4="Breed:"  
Label5="Date of Birth:"  
Label6="Age:"  
Label7="Owner:"  
Label8="Address:"  
Label9="Home Phone:"  
Label10="Work Phone:"  
Label11="Mobile Phone:"  
  
```  
  
 <span data-ttu-id="326d0-183">可以通过发出以下命令，将 .txt 文件编译为 .resources 文件：</span><span class="sxs-lookup"><span data-stu-id="326d0-183">You can compile the .txt file into a .resources file by issuing the following command:</span></span>  
  
 <span data-ttu-id="326d0-184">**resgen PatientForm.txt**</span><span class="sxs-lookup"><span data-stu-id="326d0-184">**resgen PatientForm.txt**</span></span>  
  
 <span data-ttu-id="326d0-185">下面的示例假定资源文件嵌入到包含应用程序的可执行代码的程序集中。</span><span class="sxs-lookup"><span data-stu-id="326d0-185">The following example assumes that the resource file is embedded in the assembly that contains the application's executable code.</span></span> <span data-ttu-id="326d0-186">它从当前正在执行的程序集检索名为的资源文件 `PatientForm.resources` ，并显示其每个资源的名称和值。</span><span class="sxs-lookup"><span data-stu-id="326d0-186">It retrieves a resource file named `PatientForm.resources` from the currently executing assemblies and displays the name and value of each of its resources.</span></span>  
  
 [!code-csharp[System.Resources.ResourceReader.Ctor#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcereader.ctor/cs/stream1.cs#1)]
 [!code-vb[System.Resources.ResourceReader.Ctor#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcereader.ctor/vb/stream1.vb#1)]  
  
 <span data-ttu-id="326d0-187">如果 c # 示例命名为 `Example.cs` ，则可以使用以下命令对其进行编译：</span><span class="sxs-lookup"><span data-stu-id="326d0-187">If the C# example is named `Example.cs`, you can compile it by using the following command:</span></span>  
  
 <span data-ttu-id="326d0-188">**csc Example.cs/res： PatientForm**</span><span class="sxs-lookup"><span data-stu-id="326d0-188">**csc Example.cs /res:PatientForm.resources**</span></span>  
  
 <span data-ttu-id="326d0-189">如果 Visual Basic 示例命名为 `Example.vb` ，则可以使用以下命令对其进行编译：</span><span class="sxs-lookup"><span data-stu-id="326d0-189">If the Visual Basic example is named `Example.vb`, you can compile it by using the following command:</span></span>  
  
 <span data-ttu-id="326d0-190">**vbc 示例 .vb/res： PatientForm**</span><span class="sxs-lookup"><span data-stu-id="326d0-190">**vbc Example.vb /res:PatientForm.resources**</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="326d0-191"><paramref name="stream" /> 参数不可读。</span><span class="sxs-lookup"><span data-stu-id="326d0-191">The <paramref name="stream" /> parameter is not readable.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="326d0-192"><paramref name="stream" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="326d0-192">The <paramref name="stream" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="326d0-193">在访问 <paramref name="stream" /> 时发生 I/O 错误。</span><span class="sxs-lookup"><span data-stu-id="326d0-193">An I/O error has occurred while accessing <paramref name="stream" />.</span></span></exception>
        <altmember cref="M:System.Reflection.Assembly.GetManifestResourceStream(System.String)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ResourceReader (string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceReader.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (fileName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ResourceReader(System::String ^ fileName);" />
      <MemberSignature Language="F#" Value="new System.Resources.ResourceReader : string -&gt; System.Resources.ResourceReader" Usage="new System.Resources.ResourceReader fileName" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.Reader</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="fileName"><span data-ttu-id="326d0-194">要读取的源文件的路径及名称。</span><span class="sxs-lookup"><span data-stu-id="326d0-194">The path and name of the resource file to read.</span></span> <span data-ttu-id="326d0-195">文件名<c></c>不区分大小写。</span><span class="sxs-lookup"><span data-stu-id="326d0-195"><c>filename</c> is not case-sensitive.</span></span></param>
        <summary><span data-ttu-id="326d0-196">为指定的资源文件初始化 <see cref="T:System.Resources.ResourceReader" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="326d0-196">Initializes a new instance of the <see cref="T:System.Resources.ResourceReader" /> class for the specified named resource file.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="326d0-197"><xref:System.Resources.ResourceReader.%23ctor%28System.String%29>构造函数实例化一个 <xref:System.Resources.ResourceReader> 对象，该对象从独立 .resources 文件中检索资源。</span><span class="sxs-lookup"><span data-stu-id="326d0-197">The <xref:System.Resources.ResourceReader.%23ctor%28System.String%29> constructor instantiates a <xref:System.Resources.ResourceReader> object that retrieves resources from a standalone .resources file.</span></span> <span data-ttu-id="326d0-198">若要从嵌入的 .resources 文件中检索资源，请使用 <xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29> 构造函数。</span><span class="sxs-lookup"><span data-stu-id="326d0-198">To retrieve resources from an embedded .resources file, use the <xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29> constructor.</span></span>  

[!INCLUDE [untrusted-data-instance-note](~/includes/untrusted-data-instance-note.md)]

## Examples  
 <span data-ttu-id="326d0-199">本部分中的示例使用名为的以下 .txt 文件 `PatientForm.txt` 来定义应用程序使用的资源。</span><span class="sxs-lookup"><span data-stu-id="326d0-199">The example in this section uses the following .txt file named `PatientForm.txt` to define the resources used by an application.</span></span>  
  
```  
  
Title="Top Pet Animal Clinic"  
Label1="Patient Number:"  
Label2="Pet Name:"  
Label3="Species:"  
Label4="Breed:"  
Label5="Date of Birth:"  
Label6="Age:"  
Label7="Owner:"  
Label8="Address:"  
Label9="Home Phone:"  
Label10="Work Phone:"  
Label11="Mobile Phone:"  
  
```  
  
 <span data-ttu-id="326d0-200">可以通过发出以下命令，将此 .txt 文件编译为 .resources 文件：</span><span class="sxs-lookup"><span data-stu-id="326d0-200">You can compile this .txt file into a .resources file by issuing the following command:</span></span>  
  
 <span data-ttu-id="326d0-201">**resgen PatientForm.txt**</span><span class="sxs-lookup"><span data-stu-id="326d0-201">**resgen PatientForm.txt**</span></span>  
  
 <span data-ttu-id="326d0-202">下面的示例枚举中的资源 `PatientForm.resources` ，并显示每个资源的名称和值。</span><span class="sxs-lookup"><span data-stu-id="326d0-202">The following example enumerates the resources in `PatientForm.resources` and displays the name and value of each.</span></span>  
  
 [!code-csharp[System.Resources.ResourceReader.Ctor#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcereader.ctor/cs/stream2.cs#2)]
 [!code-vb[System.Resources.ResourceReader.Ctor#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcereader.ctor/vb/stream2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="326d0-203"><paramref name="fileName" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="326d0-203">The <paramref name="fileName" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="326d0-204">找不到该文件。</span><span class="sxs-lookup"><span data-stu-id="326d0-204">The file cannot be found.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="326d0-205">发生了 I/O 错误。</span><span class="sxs-lookup"><span data-stu-id="326d0-205">An I/O error has occurred.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="326d0-206">资源文件的格式无效。</span><span class="sxs-lookup"><span data-stu-id="326d0-206">The resource file has an invalid format.</span></span> <span data-ttu-id="326d0-207">例如，文件的长度可能为零。</span><span class="sxs-lookup"><span data-stu-id="326d0-207">For example, the length of the file may be zero.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceReader.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Close();" />
      <MemberSignature Language="F#" Value="abstract member Close : unit -&gt; unit&#xA;override this.Close : unit -&gt; unit" Usage="resourceReader.Close " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Resources.IResourceReader.Close</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.Reader</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="326d0-208">释放与此 <see cref="T:System.Resources.ResourceReader" /> 对象相关联的所有操作系统资源。</span><span class="sxs-lookup"><span data-stu-id="326d0-208">Releases all operating system resources associated with this <see cref="T:System.Resources.ResourceReader" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="326d0-209"><xref:System.Resources.ResourceReader.Close%2A> 可以安全地调用多次。</span><span class="sxs-lookup"><span data-stu-id="326d0-209"><xref:System.Resources.ResourceReader.Close%2A> can be safely called multiple times.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="326d0-210">下面的示例在文件的资源中移动，并显示它找到的所有键/值对。</span><span class="sxs-lookup"><span data-stu-id="326d0-210">The following example moves through a file's resources and displays all the key/value pairs it finds.</span></span> <span data-ttu-id="326d0-211">然后，该代码使用 <xref:System.Resources.ResourceReader.Close%2A> 方法关闭 <xref:System.Resources.ResourceReader> 并释放它所使用的所有资源。</span><span class="sxs-lookup"><span data-stu-id="326d0-211">The code then uses the <xref:System.Resources.ResourceReader.Close%2A> method to shut down the <xref:System.Resources.ResourceReader> and to release all resources used by it.</span></span>  
  
 [!code-cpp[System.Resources.ResourceReader.GetEnumerator Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Resources.ResourceReader.GetEnumerator Example/CPP/getenumerator.cpp#1)]
 [!code-csharp[System.Resources.ResourceReader.GetEnumerator Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Resources.ResourceReader.GetEnumerator Example/CS/getenumerator.cs#1)]
 [!code-vb[System.Resources.ResourceReader.GetEnumerator Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Resources.ResourceReader.GetEnumerator Example/VB/getenumerator.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceReader.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="resourceReader.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Resources.Reader</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="326d0-212">释放 <see cref="T:System.Resources.ResourceReader" /> 类的当前实例所使用的所有资源。</span><span class="sxs-lookup"><span data-stu-id="326d0-212">Releases all resources used by the current instance of the <see cref="T:System.Resources.ResourceReader" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="326d0-213">使用的此实例完成后 <xref:System.Resources.ResourceReader> ，调用 <xref:System.Resources.ResourceReader.Dispose%2A> 以释放此实例使用的所有资源。</span><span class="sxs-lookup"><span data-stu-id="326d0-213">When you are finished using this instance of <xref:System.Resources.ResourceReader>, call <xref:System.Resources.ResourceReader.Dispose%2A> to release all resources used by this instance.</span></span> <span data-ttu-id="326d0-214">你应消除对此实例的进一步引用 <xref:System.Resources.ResourceReader> ，以便垃圾回收器可以回收实例的内存，而不是使其处于活动状态以完成。</span><span class="sxs-lookup"><span data-stu-id="326d0-214">You should eliminate further references to this <xref:System.Resources.ResourceReader> instance so that the garbage collector can reclaim the memory of the instance instead of keeping it alive for finalization.</span></span>  
  
 <span data-ttu-id="326d0-215"><xref:System.Resources.ResourceReader.Dispose%2A> 调用私有 Dispose (布尔) 方法，其中包含用于释放托管资源和非托管资源的代码。</span><span class="sxs-lookup"><span data-stu-id="326d0-215"><xref:System.Resources.ResourceReader.Dispose%2A> calls the private Dispose(Boolean) method, which contains the code to release managed and unmanaged resources.</span></span> <span data-ttu-id="326d0-216">有关详细信息，请参阅 [实现 Dispose 方法](/dotnet/standard/garbage-collection/implementing-dispose)。</span><span class="sxs-lookup"><span data-stu-id="326d0-216">For more information, see [Implementing a Dispose Method](/dotnet/standard/garbage-collection/implementing-dispose).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.IDictionaryEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IDictionaryEnumerator GetEnumerator() cil managed" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceReader.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IDictionaryEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::IDictionaryEnumerator ^ GetEnumerator();" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="abstract member GetEnumerator : unit -&gt; System.Collections.IDictionaryEnumerator&#xA;override this.GetEnumerator : unit -&gt; System.Collections.IDictionaryEnumerator" Usage="resourceReader.GetEnumerator " FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.IDictionaryEnumerator GetEnumerator() cil managed" FrameworkAlternate="netcore-1.0;netcore-1.1" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::IDictionaryEnumerator ^ GetEnumerator();" FrameworkAlternate="netcore-1.0;netcore-1.1" />
      <MemberSignature Language="F#" Value="member this.GetEnumerator : unit -&gt; System.Collections.IDictionaryEnumerator" Usage="resourceReader.GetEnumerator " FrameworkAlternate="netcore-1.0;netcore-1.1" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">M:System.Resources.IResourceReader.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Resources.Reader</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IDictionaryEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="326d0-217">返回此 <see cref="T:System.Resources.ResourceReader" /> 对象的枚举器。</span><span class="sxs-lookup"><span data-stu-id="326d0-217">Returns an enumerator for this <see cref="T:System.Resources.ResourceReader" /> object.</span></span></summary>
        <returns><span data-ttu-id="326d0-218">此 <see cref="T:System.Resources.ResourceReader" /> 对象的枚举器。</span><span class="sxs-lookup"><span data-stu-id="326d0-218">An enumerator for this <see cref="T:System.Resources.ResourceReader" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="326d0-219">通常，可以通过调用方法来枚举资源， <xref:System.Resources.ResourceReader.GetEnumerator%2A> 然后 <xref:System.Collections.IEnumerator.MoveNext%2A> 在返回的对象上重复调用方法， <xref:System.Collections.IDictionaryEnumerator> 直到该方法返回 `false` 。</span><span class="sxs-lookup"><span data-stu-id="326d0-219">Typically, you enumerate resources by calling the <xref:System.Resources.ResourceReader.GetEnumerator%2A> method and then repeatedly calling the <xref:System.Collections.IEnumerator.MoveNext%2A> method on the returned <xref:System.Collections.IDictionaryEnumerator> object until the method returns `false`.</span></span> <span data-ttu-id="326d0-220">资源名称可从属性获取， <xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=nameWithType> 其值来自 <xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType> 属性。</span><span class="sxs-lookup"><span data-stu-id="326d0-220">The resource name is available from the <xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=nameWithType> property; its value from the <xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="326d0-221">该示例演示如何以这种方式枚举资源。</span><span class="sxs-lookup"><span data-stu-id="326d0-221">The example illustrates how to enumerate resources in this way.</span></span>  
  
 <span data-ttu-id="326d0-222">类的属性实现 <xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType> <xref:System.Resources.ResourceReader> 可能引发以下异常：</span><span class="sxs-lookup"><span data-stu-id="326d0-222">The implementation of the <xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType> property by the <xref:System.Resources.ResourceReader> class can throw the following exceptions:</span></span>  
  
-   <xref:System.IO.FileNotFoundException>  
  
     <span data-ttu-id="326d0-223">找不到包含数据所属的类型的程序集。</span><span class="sxs-lookup"><span data-stu-id="326d0-223">The assembly that contains the type to which the data belongs cannot be found.</span></span>  
  
-   <xref:System.FormatException>  
  
     <span data-ttu-id="326d0-224">数据的格式不正确。</span><span class="sxs-lookup"><span data-stu-id="326d0-224">The data is not in the expected format.</span></span>  
  
-   <xref:System.TypeLoadException>  
  
     <span data-ttu-id="326d0-225">找不到数据所属的类型。</span><span class="sxs-lookup"><span data-stu-id="326d0-225">The type to which the data belongs cannot be found.</span></span>  
  
 <span data-ttu-id="326d0-226">您可以通过调用 <xref:System.Resources.ResourceReader.GetResourceData%2A> 方法来检索有关数据类型的信息以及分配给该命名资源的字节数组的信息，从而处理此异常。</span><span class="sxs-lookup"><span data-stu-id="326d0-226">You can handle the exception by calling the <xref:System.Resources.ResourceReader.GetResourceData%2A> method to retrieve information about the data type and the byte array assigned to the named resource.</span></span> <span data-ttu-id="326d0-227">有关详细信息，请参阅类主题中的 "按名称使用 GetResourceData 检索资源" 部分 <xref:System.Resources.ResourceReader> 。</span><span class="sxs-lookup"><span data-stu-id="326d0-227">For more information, see the "Retrieving Resources by Name with GetResourceData" section in the <xref:System.Resources.ResourceReader> class topic.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="326d0-228"><xref:System.Resources.ResourceReader>类包含两个返回枚举器的方法。</span><span class="sxs-lookup"><span data-stu-id="326d0-228">The <xref:System.Resources.ResourceReader> class includes two methods that return enumerators.</span></span> <span data-ttu-id="326d0-229"><xref:System.Resources.ResourceReader.GetEnumerator%2A>方法返回 <xref:System.Collections.IDictionaryEnumerator> 接口对象，是枚举资源时建议调用的方法。</span><span class="sxs-lookup"><span data-stu-id="326d0-229">The <xref:System.Resources.ResourceReader.GetEnumerator%2A> method returns an <xref:System.Collections.IDictionaryEnumerator> interface object and is the recommended method to call when enumerating resources.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="326d0-230">本部分中的示例使用名为的以下 .txt 文件 `PatientForm.txt` 来定义应用程序使用的资源。</span><span class="sxs-lookup"><span data-stu-id="326d0-230">The example in this section uses the following .txt file named `PatientForm.txt` to define the resources used by an application.</span></span>  
  
```  
  
Title="Top Pet Animal Clinic"  
Label1="Patient Number:"  
Label2="Pet Name:"  
Label3="Species:"  
Label4="Breed:"  
Label5="Date of Birth:"  
Label6="Age:"  
Label7="Owner:"  
Label8="Address:"  
Label9="Home Phone:"  
Label10="Work Phone:"  
Label11="Mobile Phone:"  
  
```  
  
 <span data-ttu-id="326d0-231">可以通过发出以下命令，将 .txt 文件编译为 .resources 文件：</span><span class="sxs-lookup"><span data-stu-id="326d0-231">You can compile the .txt file into a .resources file by issuing the following command:</span></span>  
  
 <span data-ttu-id="326d0-232">**resgen PatientForm.txt**</span><span class="sxs-lookup"><span data-stu-id="326d0-232">**resgen PatientForm.txt**</span></span>  
  
 <span data-ttu-id="326d0-233">下面的示例枚举中的资源 `PatientForm.resources` ，并显示每个资源的名称和值。</span><span class="sxs-lookup"><span data-stu-id="326d0-233">The following example enumerates the resources in `PatientForm.resources` and displays the name and value of each.</span></span>  
  
 [!code-csharp[System.Resources.ResourceReader.Ctor#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcereader.ctor/cs/stream2.cs#2)]
 [!code-vb[System.Resources.ResourceReader.Ctor#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcereader.ctor/vb/stream2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="326d0-234">读取器已关闭或释放，因此无法访问。</span><span class="sxs-lookup"><span data-stu-id="326d0-234">The reader has been closed or disposed, and cannot be accessed.</span></span></exception>
        <altmember cref="T:System.Collections.IDictionary" />
        <altmember cref="T:System.Collections.IDictionaryEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="GetResourceData">
      <MemberSignature Language="C#" Value="public void GetResourceData (string resourceName, out string resourceType, out byte[] resourceData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void GetResourceData(string resourceName, [out] string&amp; resourceType, [out] unsigned int8[]&amp; resourceData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceReader.GetResourceData(System.String,System.String@,System.Byte[]@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub GetResourceData (resourceName As String, ByRef resourceType As String, ByRef resourceData As Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void GetResourceData(System::String ^ resourceName, [Runtime::InteropServices::Out] System::String ^ % resourceType, [Runtime::InteropServices::Out] cli::array &lt;System::Byte&gt; ^ % resourceData);" />
      <MemberSignature Language="F#" Value="member this.GetResourceData : string * string * Byte[] -&gt; unit" Usage="resourceReader.GetResourceData (resourceName, resourceType, resourceData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.Reader</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceName" Type="System.String" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="resourceType" Type="System.String" RefType="out" Index="1" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="resourceData" Type="System.Byte[]" RefType="out" Index="2" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="resourceName"><span data-ttu-id="326d0-235">资源的名称。</span><span class="sxs-lookup"><span data-stu-id="326d0-235">The name of a resource.</span></span></param>
        <param name="resourceType"><span data-ttu-id="326d0-236">当此方法返回时，包含表示检索资源的类型名称的字符串。</span><span class="sxs-lookup"><span data-stu-id="326d0-236">When this method returns, contains a string that represents the type name of the retrieved resource.</span></span> <span data-ttu-id="326d0-237">此参数未经初始化即被传递。</span><span class="sxs-lookup"><span data-stu-id="326d0-237">This parameter is passed uninitialized.</span></span></param>
        <param name="resourceData"><span data-ttu-id="326d0-238">此方法返回时，包含一个字节数组，该字节数组为所检索类型的二进制表示形式。</span><span class="sxs-lookup"><span data-stu-id="326d0-238">When this method returns, contains a byte array that is the binary representation of the retrieved type.</span></span> <span data-ttu-id="326d0-239">此参数未经初始化即被传递。</span><span class="sxs-lookup"><span data-stu-id="326d0-239">This parameter is passed uninitialized.</span></span></param>
        <summary><span data-ttu-id="326d0-240">从打开的资源文件或流检索指定资源的类型名称和数据。</span><span class="sxs-lookup"><span data-stu-id="326d0-240">Retrieves the type name and data of a named resource from an open resource file or stream.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="326d0-241"><xref:System.Resources.ResourceReader.GetResourceData%2A>方法检索指定资源的值作为字节数组。</span><span class="sxs-lookup"><span data-stu-id="326d0-241">The <xref:System.Resources.ResourceReader.GetResourceData%2A> method retrieves the value of a named resource as a byte array.</span></span> <span data-ttu-id="326d0-242">当 <xref:System.Collections.IDictionaryEnumerator.Value%2A> 属性尝试检索资源的值时，通常会使用该属性引发异常。</span><span class="sxs-lookup"><span data-stu-id="326d0-242">It is typically used when the <xref:System.Collections.IDictionaryEnumerator.Value%2A> property throws an exception when it tries to retrieve the value of a resource.</span></span>  
  
 <span data-ttu-id="326d0-243">`resourceType` 表示资源的数据类型的字符串。</span><span class="sxs-lookup"><span data-stu-id="326d0-243">`resourceType` is a string that represents the data type of the resource.</span></span> <span data-ttu-id="326d0-244">可以是以下任一值：</span><span class="sxs-lookup"><span data-stu-id="326d0-244">It can be any of the following values:</span></span>  
  
-   <span data-ttu-id="326d0-245">`ResourceTypeCode`指示资源的数据类型的枚举成员的字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="326d0-245">The string representation of a `ResourceTypeCode` enumeration member that indicates the data type of the resource.</span></span> <span data-ttu-id="326d0-246">`ResourceTypeCode` 是使用的私有枚举。指示使用特殊的二进制格式存储19个常见数据类型之一。</span><span class="sxs-lookup"><span data-stu-id="326d0-246">`ResourceTypeCode` is a private enumeration that is used by .to indicate that a special binary format is used to store one of 19 common data types.</span></span> <span data-ttu-id="326d0-247">其中包括 .NET Framework 基元数据类型 (、、、、、、、、、、、、 <xref:System.Boolean> <xref:System.Byte> <xref:System.Char> <xref:System.Decimal> <xref:System.Double> <xref:System.Int16> <xref:System.Int32> <xref:System.Int64> <xref:System.Single> <xref:System.SByte> <xref:System.UInt16> <xref:System.UInt32> <xref:System.UInt64>) ，以及 <xref:System.String> 、 <xref:System.DateTime> 和， <xref:System.TimeSpan> 另外， `ResourceTypeCode` 枚举还包括下表中显示的值。</span><span class="sxs-lookup"><span data-stu-id="326d0-247">These include the .NET Framework primitive data types (<xref:System.Boolean>, <xref:System.Byte>, <xref:System.Char>, <xref:System.Decimal>, <xref:System.Double>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.Int64>, <xref:System.Single>, <xref:System.SByte>, <xref:System.UInt16>, <xref:System.UInt32>, <xref:System.UInt64>), as well as <xref:System.String>, <xref:System.DateTime>, and <xref:System.TimeSpan>, In addition, the `ResourceTypeCode` enumeration includes the values shown in the following table.</span></span>  
  
    |<span data-ttu-id="326d0-248">ResourceTypeCode 值</span><span class="sxs-lookup"><span data-stu-id="326d0-248">ResourceTypeCode value</span></span>|<span data-ttu-id="326d0-249">说明</span><span class="sxs-lookup"><span data-stu-id="326d0-249">Description</span></span>|  
    |----------------------------|-----------------|  
    |`ResourceTypeCode.ByteArray`|<span data-ttu-id="326d0-250">数据是字节数组。</span><span class="sxs-lookup"><span data-stu-id="326d0-250">The data is a byte array.</span></span> <span data-ttu-id="326d0-251">此数据类型通常是通过调用方法导致的 <xref:System.Resources.ResourceWriter.AddResource%28System.String%2CSystem.Byte%5B%5D%29?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="326d0-251">This data type commonly results from the call to the <xref:System.Resources.ResourceWriter.AddResource%28System.String%2CSystem.Byte%5B%5D%29?displayProperty=nameWithType> method.</span></span>|  
    |`ResourceTypeCode.Null`|<span data-ttu-id="326d0-252">数据为空引用。</span><span class="sxs-lookup"><span data-stu-id="326d0-252">The data is a null reference.</span></span> <span data-ttu-id="326d0-253">此数据类型通常是 <xref:System.Resources.ResourceWriter.AddResource%28System.String%2CSystem.Object%29?displayProperty=nameWithType> 使用值为的对象调用方法导致的 `null` 。</span><span class="sxs-lookup"><span data-stu-id="326d0-253">This data type commonly results from the call to the <xref:System.Resources.ResourceWriter.AddResource%28System.String%2CSystem.Object%29?displayProperty=nameWithType> method with an object whose value is `null`.</span></span>|  
    |`ResourceTypeCode.Stream`|<span data-ttu-id="326d0-254">数据存储在流中。</span><span class="sxs-lookup"><span data-stu-id="326d0-254">The data is stored in a stream.</span></span> <span data-ttu-id="326d0-255">此数据类型通常是通过调用 <xref:System.Resources.ResourceWriter.AddResource%28System.String%2CSystem.IO.Stream%29?displayProperty=nameWithType> 或方法生成的 <xref:System.Resources.ResourceWriter.AddResource%28System.String%2CSystem.IO.Stream%2CSystem.Boolean%29?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="326d0-255">This data type commonly results from the call to the <xref:System.Resources.ResourceWriter.AddResource%28System.String%2CSystem.IO.Stream%29?displayProperty=nameWithType> or <xref:System.Resources.ResourceWriter.AddResource%28System.String%2CSystem.IO.Stream%2CSystem.Boolean%29?displayProperty=nameWithType> method.</span></span>|  
  
     <span data-ttu-id="326d0-256">假定 `resourceData` 未损坏，则通常可以通过调用或方法将其从字节数组转换回其原始值 <xref:System.BitConverter> <xref:System.IO.BinaryReader> 。</span><span class="sxs-lookup"><span data-stu-id="326d0-256">Assuming that `resourceData` has not been corrupted, it can usually be converted from a byte array back to its original value by calling a <xref:System.BitConverter> or <xref:System.IO.BinaryReader> method.</span></span>  
  
-   <span data-ttu-id="326d0-257">一个字符串，其中包含类型的完全限定名称，该类型的序列化数据将分配给 `resourceData` 参数 (例如 `System.String`) 。</span><span class="sxs-lookup"><span data-stu-id="326d0-257">A string that contains the fully qualified name of the type whose serialized data is assigned to the `resourceData` argument (for example, `System.String`).</span></span> <span data-ttu-id="326d0-258">此外，对于不属于 .NET Framework 类库的类型，该字符串包含包含该类型的程序集的名称、版本、区域性和公钥。</span><span class="sxs-lookup"><span data-stu-id="326d0-258">In addition, for types that are not part of the .NET Framework class library, the string includes the name, version, culture, and public key of the assembly that contains the type.</span></span> <span data-ttu-id="326d0-259">例如，下面的字符串表示序列化数据表示 `Person` 命名空间中类型的一个实例，该类型在 `Extensions` 名为 Utility 的程序集的版本1.0 中，该程序集没有公共密钥，也没有指定的区域性。</span><span class="sxs-lookup"><span data-stu-id="326d0-259">For example, the following string indicates that the serialized data represents an instance of the `Person` type in the `Extensions` namespace, which is found in version 1.0 of an assembly named Utility that has no public key and no designated culture.</span></span>  
  
     `Extensions.Person, Utility, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null`  
  
     <span data-ttu-id="326d0-260">假设未 `resourceData` 损坏并且源类型可用，则 `resourceData` 可以通过将字节数组转换为 <xref:System.IO.Stream> 对象并将流传递到方法，将字节数组转换回其原始值 <xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.Deserialize%2A?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="326d0-260">Assuming that `resourceData` has not been corrupted and that the source type is available, `resourceData` can be converted from a byte array back to its original value by converting the byte array to a <xref:System.IO.Stream> object and passing the stream to the <xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.Deserialize%2A?displayProperty=nameWithType> method.</span></span>  
  
-   <span data-ttu-id="326d0-261">用于描述方法调用中的数据类型的字符串 <xref:System.Resources.ResourceWriter.AddResourceData%2A?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="326d0-261">The string used to describe the data type in the <xref:System.Resources.ResourceWriter.AddResourceData%2A?displayProperty=nameWithType> method call.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="326d0-262"><paramref name="resourceName" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="326d0-262"><paramref name="resourceName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="326d0-263"><paramref name="resourceName" /> 不存在。</span><span class="sxs-lookup"><span data-stu-id="326d0-263"><paramref name="resourceName" /> does not exist.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="326d0-264"><paramref name="resourceName" /> 具有无效的类型。</span><span class="sxs-lookup"><span data-stu-id="326d0-264"><paramref name="resourceName" /> has an invalid type.</span></span></exception>
        <exception cref="T:System.FormatException"><span data-ttu-id="326d0-265">检索的资源数据已损坏。</span><span class="sxs-lookup"><span data-stu-id="326d0-265">The retrieved resource data is corrupt.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="326d0-266">当前 <see cref="T:System.Resources.ResourceReader" /> 对象未初始化，可能因其已被关闭。</span><span class="sxs-lookup"><span data-stu-id="326d0-266">The current <see cref="T:System.Resources.ResourceReader" /> object is not initialized, probably because it is closed.</span></span></exception>
        <altmember cref="M:System.Resources.ResourceWriter.AddResourceData(System.String,System.String,System.Byte[])" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceReader.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IEnumerator ^ System.Collections.IEnumerable.GetEnumerator() = System::Collections::IEnumerable::GetEnumerator;" />
      <MemberSignature Language="F#" Value="abstract member System.Collections.IEnumerable.GetEnumerator : unit -&gt; System.Collections.IEnumerator&#xA;override this.System.Collections.IEnumerable.GetEnumerator : unit -&gt; System.Collections.IEnumerator" Usage="resourceReader.System.Collections.IEnumerable.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.Reader</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="326d0-267">返回此 <see cref="T:System.Resources.ResourceReader" /> 对象的枚举器。</span><span class="sxs-lookup"><span data-stu-id="326d0-267">Returns an enumerator for this <see cref="T:System.Resources.ResourceReader" /> object.</span></span></summary>
        <returns><span data-ttu-id="326d0-268">此 <see cref="T:System.Resources.ResourceReader" /> 对象的枚举器。</span><span class="sxs-lookup"><span data-stu-id="326d0-268">An enumerator for this <see cref="T:System.Resources.ResourceReader" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="326d0-269"><xref:System.Resources.ResourceReader.System%23Collections%23IEnumerable%23GetEnumerator%2A?displayProperty=nameWithType> 是显式接口实现。</span><span class="sxs-lookup"><span data-stu-id="326d0-269"><xref:System.Resources.ResourceReader.System%23Collections%23IEnumerable%23GetEnumerator%2A?displayProperty=nameWithType> is an explicit interface implementation.</span></span> <span data-ttu-id="326d0-270">它只能在 <xref:System.Resources.ResourceReader> 实例被强制转换为 <xref:System.Collections.IEnumerable> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="326d0-270">It can be used only when the <xref:System.Resources.ResourceReader> instance is cast to an <xref:System.Collections.IEnumerable> interface.</span></span> <span data-ttu-id="326d0-271">在 .resources 文件中枚举资源的建议方法是调用 <xref:System.Collections.IEnumerator.MoveNext%2A> <xref:System.Collections.IDictionaryEnumerator> 方法返回的对象的方法 <xref:System.Resources.ResourceReader.GetEnumerator%2A?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="326d0-271">The recommended approach to enumerating the resources in a .resources file is to call the <xref:System.Collections.IEnumerator.MoveNext%2A> method of the <xref:System.Collections.IDictionaryEnumerator> object returned by the <xref:System.Resources.ResourceReader.GetEnumerator%2A?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="326d0-272">读取器已关闭，并且无法访问。</span><span class="sxs-lookup"><span data-stu-id="326d0-272">The reader has already been closed and cannot be accessed.</span></span></exception>
        <altmember cref="T:System.Collections.IDictionary" />
        <altmember cref="T:System.Collections.IDictionaryEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="System.IDisposable.Dispose">
      <MemberSignature Language="C#" Value="void IDisposable.Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.IDisposable.Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceReader.System#IDisposable#Dispose" />
      <MemberSignature Language="VB.NET" Value="Sub Dispose () Implements IDisposable.Dispose" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.IDisposable.Dispose() = IDisposable::Dispose;" />
      <MemberSignature Language="F#" Value="abstract member System.IDisposable.Dispose : unit -&gt; unit&#xA;override this.System.IDisposable.Dispose : unit -&gt; unit" Usage="resourceReader.System.IDisposable.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.Reader</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="326d0-273">释放由 <see cref="T:System.Resources.ResourceReader" /> 占用的资源。</span><span class="sxs-lookup"><span data-stu-id="326d0-273">Releases the resources used by the <see cref="T:System.Resources.ResourceReader" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
<span data-ttu-id="326d0-274">调用 Dispose 允许 <xref:System.Resources.ResourceReader> 出于其他目的重新分配使用的资源。</span><span class="sxs-lookup"><span data-stu-id="326d0-274">Calling Dispose allows the resources used by the <xref:System.Resources.ResourceReader> to be reallocated for other purposes.</span></span> <span data-ttu-id="326d0-275">有关 Dispose 的详细信息，请参阅 [清理非托管资源](/dotnet/standard/garbage-collection/unmanaged)。</span><span class="sxs-lookup"><span data-stu-id="326d0-275">For more information about Dispose, see [Cleaning Up Unmanaged Resources](/dotnet/standard/garbage-collection/unmanaged).</span></span>

## Examples  
<span data-ttu-id="326d0-276">下面的代码示例在文件的资源中移动，并输出找到的所有键/值对。</span><span class="sxs-lookup"><span data-stu-id="326d0-276">The following code example moves through a file's resources and prints out all the key/value pairs it finds.</span></span> <span data-ttu-id="326d0-277">然后，该代码使用 theIDisposable 方法关闭 <xref:System.Resources.ResourceReader> 并释放它所使用的所有资源。</span><span class="sxs-lookup"><span data-stu-id="326d0-277">The code then uses theIDisposable.Dispose method to shut down the <xref:System.Resources.ResourceReader> and to release all resources used by it.</span></span>

```vb
Imports System
Imports System.Resources
Imports System.Collections

Public Class ReadResources

    Public Shared Sub Main(args() As String)
        ' Create a resource reader for items.resources 
        ' and get an enumerator to iterate through the file. 
        Dim reader As IResourceReader = New ResourceReader("items.resources")
        Dim en As IDictionaryEnumerator = reader.GetEnumerator()

        ' Iterate through the file, printing the key and value pairs. 
        While en.MoveNext()
            Console.WriteLine()
            Console.WriteLine("Name: {0}", en.Key)
            Console.WriteLine("Value: {0}", en.Value)
        End While 

        ' Clean up all resources associated with the reader. 
        ' Calling Dispose is equivalent to calling Close.
        reader.Dispose()
    End Sub 

End Class
```

```csharp
using System;
using System.Resources;
using System.Collections;

public class ReadResources 
{
    public static void Main(string[] args) 
    {
        // Create a resource reader for items.resources 
        // and get an enumerator to iterate through the file.
        IResourceReader reader = new ResourceReader("items.resources");
        IDictionaryEnumerator en = reader.GetEnumerator();

        // Iterate through the file, printing the key/value pairs. 
        while (en.MoveNext()) 
        {
            Console.WriteLine();
            Console.WriteLine("Name: {0}", en.Key);
            Console.WriteLine("Value: {0}", en.Value);
        }

        // Clean up all resources associated with the reader. 
        // Calling Dispose is equivalent to calling Close.
        reader.Dispose();
    }
}
```

```cpp
using namespace System;
using namespace System::Resources;
using namespace System::Collections;
int main()
{
   array<String^>^args = Environment::GetCommandLineArgs();

   // Create a resource reader for items.resources 
   // and get an enumerator to iterate through the file.
   IResourceReader^ reader = gcnew ResourceReader( "items.resources" );
   IDictionaryEnumerator^ en = reader->GetEnumerator();

   // Iterate through the file, printing the key/value pairs. 
   while ( en->MoveNext() )
   {
      Console::WriteLine();
      Console::WriteLine( "Name: {0}", en->Key );
      Console::WriteLine( "Value: {0}", en->Value );
   }

   // Clean up all resources associated with the reader. 
   // Calling the destructor is equivalent to calling Close.
   reader->~IResourceReader();
}
```

]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
