<Type Name="EventSourceCreationData" FullName="System.Diagnostics.EventSourceCreationData">
  <Metadata><Meta Name="ms.openlocfilehash" Value="e1d148c42fbf6e219b8f26b1303909a0505126c7" /><Meta Name="ms.sourcegitcommit" Value="c982ad9e10a242d90f1e631b5981570f9e5d9f34" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/10/2020" /><Meta Name="ms.locfileid" Value="89805827" /></Metadata><TypeSignature Language="C#" Value="public class EventSourceCreationData" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit EventSourceCreationData extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.EventSourceCreationData" />
  <TypeSignature Language="VB.NET" Value="Public Class EventSourceCreationData" />
  <TypeSignature Language="C++ CLI" Value="public ref class EventSourceCreationData" />
  <TypeSignature Language="F#" Value="type EventSourceCreationData = class" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Diagnostics.EventLog</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
    <AssemblyVersion>4.0.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="6bf63-101">表示用于在本地或远程计算机上创建事件日志源的配置设置。</span><span class="sxs-lookup"><span data-stu-id="6bf63-101">Represents the configuration settings used to create an event log source on the local computer or a remote computer.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6bf63-102">使用 <xref:System.Diagnostics.EventSourceCreationData> 类可配置用于向事件日志写入本地化项的新源。</span><span class="sxs-lookup"><span data-stu-id="6bf63-102">Use the <xref:System.Diagnostics.EventSourceCreationData> class to configure a new source for writing localized entries to an event log.</span></span> <span data-ttu-id="6bf63-103">不需要使用此类从事件日志中读取。</span><span class="sxs-lookup"><span data-stu-id="6bf63-103">It is not necessary to use this class to read from an event log.</span></span>  
  
 <span data-ttu-id="6bf63-104">此类定义新事件源及其关联事件日志的配置设置。</span><span class="sxs-lookup"><span data-stu-id="6bf63-104">This class defines the configuration settings for a new event source and its associated event log.</span></span> <span data-ttu-id="6bf63-105">关联的事件日志可以位于本地计算机或远程计算机上。</span><span class="sxs-lookup"><span data-stu-id="6bf63-105">The associated event log can be on the local computer or a remote computer.</span></span> <span data-ttu-id="6bf63-106">若要为本地计算机上的新的或现有的事件日志创建新的源，请设置的 <xref:System.Diagnostics.EventSourceCreationData.LogName%2A> 和 <xref:System.Diagnostics.EventSourceCreationData.Source%2A> 属性， <xref:System.Diagnostics.EventSourceCreationData> 并调用 <xref:System.Diagnostics.EventLog.CreateEventSource%28System.Diagnostics.EventSourceCreationData%29?displayProperty=nameWithType> 方法。</span><span class="sxs-lookup"><span data-stu-id="6bf63-106">To create a new source for a new or existing event log on the local computer, set the <xref:System.Diagnostics.EventSourceCreationData.LogName%2A> and <xref:System.Diagnostics.EventSourceCreationData.Source%2A> properties of an <xref:System.Diagnostics.EventSourceCreationData> and call the <xref:System.Diagnostics.EventLog.CreateEventSource%28System.Diagnostics.EventSourceCreationData%29?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="6bf63-107">此方法将创建在属性中指定的事件源 <xref:System.Diagnostics.EventSourceCreationData.Source%2A> ，并将其注册为中指定的事件日志 <xref:System.Diagnostics.EventSourceCreationData.LogName%2A> 。</span><span class="sxs-lookup"><span data-stu-id="6bf63-107">This method creates the event source you specify in the <xref:System.Diagnostics.EventSourceCreationData.Source%2A> property and registers it for the event log specified in <xref:System.Diagnostics.EventSourceCreationData.LogName%2A>.</span></span> <span data-ttu-id="6bf63-108">此行为类似于使用 <xref:System.Diagnostics.EventLogInstaller> 类注册事件日志的事件源。</span><span class="sxs-lookup"><span data-stu-id="6bf63-108">This behavior is similar to using the <xref:System.Diagnostics.EventLogInstaller> class to register an event source for an event log.</span></span>  
  
 <span data-ttu-id="6bf63-109">使用 <xref:System.Diagnostics.EventLog.WriteEvent%2A> 和 <xref:System.Diagnostics.EventLog.WriteEntry%2A> 方法可将事件写入事件日志。</span><span class="sxs-lookup"><span data-stu-id="6bf63-109">Use the <xref:System.Diagnostics.EventLog.WriteEvent%2A> and <xref:System.Diagnostics.EventLog.WriteEntry%2A> methods to write events to an event log.</span></span> <span data-ttu-id="6bf63-110">您必须指定事件源以写入事件;在写入包含源的第一个条目之前，必须创建并配置事件源。</span><span class="sxs-lookup"><span data-stu-id="6bf63-110">You must specify an event source to write events; you must create and configure the event source before writing the first entry with the source.</span></span>  
  
 <span data-ttu-id="6bf63-111">在应用程序安装过程中创建新的事件源。</span><span class="sxs-lookup"><span data-stu-id="6bf63-111">Create the new event source during the installation of your application.</span></span> <span data-ttu-id="6bf63-112">这样，操作系统就可以刷新其已注册事件源的列表及其配置。</span><span class="sxs-lookup"><span data-stu-id="6bf63-112">This allows time for the operating system to refresh its list of registered event sources and their configurations.</span></span> <span data-ttu-id="6bf63-113">如果操作系统尚未刷新其事件源列表，而你尝试使用新源写入事件，则写入操作将失败。</span><span class="sxs-lookup"><span data-stu-id="6bf63-113">If the operating system has not refreshed its list of event sources, and you attempt to write an event with the new source, the write operation will fail.</span></span> <span data-ttu-id="6bf63-114">您可以使用或方法来配置新源 <xref:System.Diagnostics.EventLogInstaller> <xref:System.Diagnostics.EventLog.CreateEventSource%2A> 。</span><span class="sxs-lookup"><span data-stu-id="6bf63-114">You can configure a new source using an <xref:System.Diagnostics.EventLogInstaller>, or using the <xref:System.Diagnostics.EventLog.CreateEventSource%2A> method.</span></span> <span data-ttu-id="6bf63-115">您必须对该计算机具有管理权限才能创建新的事件源。</span><span class="sxs-lookup"><span data-stu-id="6bf63-115">You must have administrative rights on the computer to create a new event source.</span></span>  
  
 <span data-ttu-id="6bf63-116">可以为现有事件日志或新的事件日志创建事件源。</span><span class="sxs-lookup"><span data-stu-id="6bf63-116">You can create an event source for an existing event log or a new event log.</span></span> <span data-ttu-id="6bf63-117">为新的事件日志创建新源时，系统将为该日志注册源，但在向其中写入第一个条目之前，不会创建日志。</span><span class="sxs-lookup"><span data-stu-id="6bf63-117">When you create a new source for a new event log, the system registers the source for that log, but the log is not created until the first entry is written to it.</span></span>  
  
 <span data-ttu-id="6bf63-118">每个源一次只能写入一个事件日志;但是，应用程序可以使用多个源来写入多个事件日志。</span><span class="sxs-lookup"><span data-stu-id="6bf63-118">Each source can only write to one event log at a time; however, your application can use multiple sources to write to multiple event logs.</span></span> <span data-ttu-id="6bf63-119">例如，你的应用程序可能需要为不同的事件日志或不同的资源文件配置多个源。</span><span class="sxs-lookup"><span data-stu-id="6bf63-119">For example, your application might need multiple sources configured for different event logs or different resource files.</span></span>  
  
 <span data-ttu-id="6bf63-120">若要更改现有源的配置详细信息，必须删除该源，并使用新配置创建它。</span><span class="sxs-lookup"><span data-stu-id="6bf63-120">To change the configuration details of an existing source, you must delete the source and then create it with the new configuration.</span></span> <span data-ttu-id="6bf63-121">如果其他应用程序或组件使用现有源，请使用更新的配置创建新的源，而不是删除现有源。</span><span class="sxs-lookup"><span data-stu-id="6bf63-121">If other applications or components use the existing source, create a new source with the updated configuration rather than deleting the existing source.</span></span>  
  
 <span data-ttu-id="6bf63-122">可以向事件类别和消息字符串的本地化资源注册事件源。</span><span class="sxs-lookup"><span data-stu-id="6bf63-122">You can register the event source with localized resources for your event category and message strings.</span></span> <span data-ttu-id="6bf63-123">应用程序可以使用资源标识符而不是指定实际字符串来编写事件日志项。</span><span class="sxs-lookup"><span data-stu-id="6bf63-123">Your application can write event log entries using resource identifiers, rather than specifying the actual string.</span></span> <span data-ttu-id="6bf63-124">事件查看器使用资源标识符从本地化的资源文件中查找并显示相应的字符串。</span><span class="sxs-lookup"><span data-stu-id="6bf63-124">The Event Viewer uses the resource identifier to find and display the corresponding string from the localized resource file based on current language settings.</span></span> <span data-ttu-id="6bf63-125">您可以为事件类别、消息和参数插入字符串注册单独的文件，也可以为所有这三种类型的字符串注册同一资源文件。</span><span class="sxs-lookup"><span data-stu-id="6bf63-125">You can register a separate file for event categories, messages, and parameter insertion strings, or you can register the same resource file for all three types of strings.</span></span> <span data-ttu-id="6bf63-126">使用 <xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A> 、 <xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A> 、 <xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A> 和属性将 <xref:System.Diagnostics.EventSourceCreationData.ParameterResourceFile%2A> 源配置为将本地化项写入事件日志。</span><span class="sxs-lookup"><span data-stu-id="6bf63-126">Use the <xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A>, <xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A>, <xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A>, and <xref:System.Diagnostics.EventSourceCreationData.ParameterResourceFile%2A> properties to configure the source to write localized entries to the event log.</span></span> <span data-ttu-id="6bf63-127">如果你的应用程序将字符串值直接写入事件日志，则不需要设置这些属性。</span><span class="sxs-lookup"><span data-stu-id="6bf63-127">If your application writes string values directly to the event log, you do not need to set these properties.</span></span>  
  
 <span data-ttu-id="6bf63-128">源必须配置为写入本地化项或写入直接字符串。</span><span class="sxs-lookup"><span data-stu-id="6bf63-128">The source must be configured either for writing localized entries or for writing direct strings.</span></span> <span data-ttu-id="6bf63-129"><xref:System.Diagnostics.EventLog.WriteEntry%2A>方法将给定字符串直接写入事件日志; 它不使用可本地化的消息资源文件。</span><span class="sxs-lookup"><span data-stu-id="6bf63-129">The <xref:System.Diagnostics.EventLog.WriteEntry%2A> method writes the given string directly to the event log; it does not use a localizable message resource file.</span></span> <span data-ttu-id="6bf63-130">使用 <xref:System.Diagnostics.EventLog.WriteEvent%2A> 方法可使用本地化消息资源文件编写事件。</span><span class="sxs-lookup"><span data-stu-id="6bf63-130">Use the <xref:System.Diagnostics.EventLog.WriteEvent%2A> method to write events using a localized message resource file.</span></span>  
  
 <span data-ttu-id="6bf63-131">如果应用程序使用资源标识符和字符串值写入条目，则必须注册两个不同的源。</span><span class="sxs-lookup"><span data-stu-id="6bf63-131">If your application writes entries using both resource identifiers and string values, you must register two separate sources.</span></span> <span data-ttu-id="6bf63-132">例如，使用资源文件配置一个源，然后在方法中使用该源，将 <xref:System.Diagnostics.EventLog.WriteEvent%2A> 使用资源标识符的项写入事件日志。</span><span class="sxs-lookup"><span data-stu-id="6bf63-132">For example, configure one source with resource files, and then use that source in the <xref:System.Diagnostics.EventLog.WriteEvent%2A> method to write entries using resource identifiers to the event log.</span></span> <span data-ttu-id="6bf63-133">然后，创建一个没有资源文件的不同源，并在方法中使用该源，使用 <xref:System.Diagnostics.EventLog.WriteEntry%2A> 该源直接向事件日志写入字符串。</span><span class="sxs-lookup"><span data-stu-id="6bf63-133">Then create a different source without resource files and use that source in the <xref:System.Diagnostics.EventLog.WriteEntry%2A> method to write strings directly to the event log using that source.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6bf63-134">下面的代码示例通过命令行参数设置事件源的配置属性。</span><span class="sxs-lookup"><span data-stu-id="6bf63-134">The following code example sets the configuration properties for an event source from command-line arguments.</span></span> <span data-ttu-id="6bf63-135">输入参数指定事件源名称、事件日志名称、计算机名称和事件消息资源文件。</span><span class="sxs-lookup"><span data-stu-id="6bf63-135">The input arguments specify the event source name, event log name, computer name, and event message resource file.</span></span> <span data-ttu-id="6bf63-136">此代码示例验证源是否与现有事件源冲突，然后为指定的事件日志创建新的事件源。</span><span class="sxs-lookup"><span data-stu-id="6bf63-136">The code example verifies that the source does not conflict with an existing event source, and then creates the new event source for the specified event log.</span></span>  
  
 [!code-cpp[EventLog_EventSourceCreation_Properties#1](~/samples/snippets/cpp/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/CPP/source.cpp#1)]
 [!code-csharp[EventLog_EventSourceCreation_Properties#1](~/samples/snippets/csharp/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/CS/source.cs#1)]
 [!code-vb[EventLog_EventSourceCreation_Properties#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Diagnostics.EventLog" />
    <altmember cref="T:System.Diagnostics.EventLogInstaller" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventSourceCreationData (string source, string logName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string source, string logName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventSourceCreationData.#ctor(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (source As String, logName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EventSourceCreationData(System::String ^ source, System::String ^ logName);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.EventSourceCreationData : string * string -&gt; System.Diagnostics.EventSourceCreationData" Usage="new System.Diagnostics.EventSourceCreationData (source, logName)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.EventLog</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="logName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="6bf63-137">要在事件日志中注册为项源的名称。</span><span class="sxs-lookup"><span data-stu-id="6bf63-137">The name to register with the event log as a source of entries.</span></span></param>
        <param name="logName"><span data-ttu-id="6bf63-138">要将来自源的项写入其中的日志的名称。</span><span class="sxs-lookup"><span data-stu-id="6bf63-138">The name of the log to which entries from the source are written.</span></span></param>
        <summary><span data-ttu-id="6bf63-139">使用指定的事件源和事件日志名称对 <see cref="T:System.Diagnostics.EventSourceCreationData" /> 类的新实例进行初始化。</span><span class="sxs-lookup"><span data-stu-id="6bf63-139">Initializes a new instance of the <see cref="T:System.Diagnostics.EventSourceCreationData" /> class with a specified event source and event log name.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6bf63-140">若要将条目写入事件日志，必须首先为事件日志创建事件源。</span><span class="sxs-lookup"><span data-stu-id="6bf63-140">To write entries to an event log, you must first create an event source for the event log.</span></span> <span data-ttu-id="6bf63-141">若要注册新的源，请初始化 <xref:System.Diagnostics.EventSourceCreationData> 实例，为应用程序配置实例属性，并调用 <xref:System.Diagnostics.EventLog.CreateEventSource%28System.Diagnostics.EventSourceCreationData%29?displayProperty=nameWithType> 方法。</span><span class="sxs-lookup"><span data-stu-id="6bf63-141">To register a new source, initialize an <xref:System.Diagnostics.EventSourceCreationData> instance, configure the instance properties for your application, and call the <xref:System.Diagnostics.EventLog.CreateEventSource%28System.Diagnostics.EventSourceCreationData%29?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="6bf63-142">在注册源后，可以使用或方法从源中写入条目 <xref:System.Diagnostics.EventLog.WriteEvent%2A> <xref:System.Diagnostics.EventLog.WriteEntry%2A> 。</span><span class="sxs-lookup"><span data-stu-id="6bf63-142">After the source is registered, you can write entries from the source using the <xref:System.Diagnostics.EventLog.WriteEvent%2A> or <xref:System.Diagnostics.EventLog.WriteEntry%2A> methods.</span></span>  
  
 <span data-ttu-id="6bf63-143">可以向事件类别和消息字符串的本地化资源注册事件源。</span><span class="sxs-lookup"><span data-stu-id="6bf63-143">You can register the event source with localized resources for your event category and message strings.</span></span> <span data-ttu-id="6bf63-144">应用程序可以使用资源标识符而不是指定实际字符串来编写事件日志项。</span><span class="sxs-lookup"><span data-stu-id="6bf63-144">Your application can write event log entries using resource identifiers, rather than specifying the actual string.</span></span> <span data-ttu-id="6bf63-145">事件查看器使用资源标识符从本地化的资源文件中查找并显示相应的字符串。</span><span class="sxs-lookup"><span data-stu-id="6bf63-145">The Event Viewer uses the resource identifier to find and display the corresponding string from the localized resource file based on current language settings.</span></span> <span data-ttu-id="6bf63-146">您可以为事件类别、消息和参数插入字符串注册单独的文件，也可以为所有这三种类型的字符串注册同一资源文件。</span><span class="sxs-lookup"><span data-stu-id="6bf63-146">You can register a separate file for event categories, messages, and parameter insertion strings, or you can register the same resource file for all three types of strings.</span></span> <span data-ttu-id="6bf63-147">使用 <xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A> 、 <xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A> 、 <xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A> 和属性将 <xref:System.Diagnostics.EventSourceCreationData.ParameterResourceFile%2A> 源配置为将本地化项写入事件日志。</span><span class="sxs-lookup"><span data-stu-id="6bf63-147">Use the <xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A>, <xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A>, <xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A>, and <xref:System.Diagnostics.EventSourceCreationData.ParameterResourceFile%2A> properties to configure the source to write localized entries to the event log.</span></span> <span data-ttu-id="6bf63-148">如果你的应用程序将字符串值直接写入事件日志，则不需要设置这些属性。</span><span class="sxs-lookup"><span data-stu-id="6bf63-148">If your application writes string values directly to the event log, you do not need to set these properties.</span></span>  
  
 <span data-ttu-id="6bf63-149">源必须配置为写入本地化项或写入直接字符串。</span><span class="sxs-lookup"><span data-stu-id="6bf63-149">The source must be configured either for writing localized entries or for writing direct strings.</span></span> <span data-ttu-id="6bf63-150">如果应用程序使用资源标识符和字符串值写入条目，则必须注册两个不同的源。</span><span class="sxs-lookup"><span data-stu-id="6bf63-150">If your application writes entries using both resource identifiers and string values, you must register two separate sources.</span></span> <span data-ttu-id="6bf63-151">例如，使用资源文件配置一个源，然后在方法中使用该源，将 <xref:System.Diagnostics.EventLog.WriteEvent%2A> 使用资源标识符的项写入事件日志。</span><span class="sxs-lookup"><span data-stu-id="6bf63-151">For example, configure one source with resource files, and then use that source in the <xref:System.Diagnostics.EventLog.WriteEvent%2A> method to write entries using resource identifiers to the event log.</span></span> <span data-ttu-id="6bf63-152">然后，创建一个没有资源文件的不同源，并在方法中使用该源 <xref:System.Diagnostics.EventLog.WriteEntry%2A> 直接向事件日志写入字符串。</span><span class="sxs-lookup"><span data-stu-id="6bf63-152">Then create a different source without resource files and use that source in the <xref:System.Diagnostics.EventLog.WriteEntry%2A> method to write strings directly to the event log.</span></span>  
  
 <span data-ttu-id="6bf63-153">下表显示了的初始属性值 <xref:System.Diagnostics.EventSourceCreationData> 。</span><span class="sxs-lookup"><span data-stu-id="6bf63-153">The following table shows initial property values for an <xref:System.Diagnostics.EventSourceCreationData>.</span></span>  
  
|<span data-ttu-id="6bf63-154">properties</span><span class="sxs-lookup"><span data-stu-id="6bf63-154">Property</span></span>|<span data-ttu-id="6bf63-155">初始值</span><span class="sxs-lookup"><span data-stu-id="6bf63-155">Initial Value</span></span>|  
|--------------|-------------------|  
|<xref:System.Diagnostics.EventSourceCreationData.Source%2A>|<span data-ttu-id="6bf63-156">`source` 参数。</span><span class="sxs-lookup"><span data-stu-id="6bf63-156">The `source` parameter.</span></span>|  
|<xref:System.Diagnostics.EventSourceCreationData.LogName%2A>|<span data-ttu-id="6bf63-157">`logName` 参数。</span><span class="sxs-lookup"><span data-stu-id="6bf63-157">The `logName` parameter.</span></span>|  
|<xref:System.Diagnostics.EventSourceCreationData.MachineName%2A>|<span data-ttu-id="6bf63-158">本地计算机 ( "。) 。</span><span class="sxs-lookup"><span data-stu-id="6bf63-158">The local computer (".").</span></span>|  
|<xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A>|<span data-ttu-id="6bf63-159">零</span><span class="sxs-lookup"><span data-stu-id="6bf63-159">Zero</span></span>|  
|<xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A>|<span data-ttu-id="6bf63-160">`null`（在 Visual Basic 中为 `Nothing`）。</span><span class="sxs-lookup"><span data-stu-id="6bf63-160">`null` (`Nothing` in Visual Basic).</span></span>|  
|<xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A>|<span data-ttu-id="6bf63-161">`null`（在 Visual Basic 中为 `Nothing`）。</span><span class="sxs-lookup"><span data-stu-id="6bf63-161">`null` (`Nothing` in Visual Basic).</span></span>|  
|<xref:System.Diagnostics.EventSourceCreationData.ParameterResourceFile%2A>|<span data-ttu-id="6bf63-162">`null`（在 Visual Basic 中为 `Nothing`）。</span><span class="sxs-lookup"><span data-stu-id="6bf63-162">`null` (`Nothing` in Visual Basic).</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="6bf63-163">下面的代码示例确定是否 `SampleApplicationSource` 在本地计算机上注册了名为的事件源。</span><span class="sxs-lookup"><span data-stu-id="6bf63-163">The following code example determines whether the event source named `SampleApplicationSource` is registered on the local computer.</span></span> <span data-ttu-id="6bf63-164">如果事件源不存在，则此示例将为源设置消息资源文件并创建新的事件源。</span><span class="sxs-lookup"><span data-stu-id="6bf63-164">If the event source does not exist, the example sets the message resource file for the source and creates the new event source.</span></span> <span data-ttu-id="6bf63-165">最后，此代码示例使用中的资源标识符值 `DisplayNameMsgId` 和中的资源文件路径，为事件日志设置本地化的显示名称 `messageFile` 。</span><span class="sxs-lookup"><span data-stu-id="6bf63-165">Finally, the code example sets the localized display name for the event log, using the resource identifier value in `DisplayNameMsgId` and the resource file path in `messageFile`.</span></span>  
  
 [!code-cpp[EventLog_WriteEvent#6](~/samples/snippets/cpp/VS_Snippets_CLR/eventlog_WriteEvent/CPP/source.cpp#6)]
 [!code-csharp[EventLog_WriteEvent#6](~/samples/snippets/csharp/VS_Snippets_CLR/eventlog_WriteEvent/CS/source.cs#6)]
 [!code-vb[EventLog_WriteEvent#6](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlog_WriteEvent/VB/source.vb#6)]  
  
 <span data-ttu-id="6bf63-166">此代码示例使用资源库中内置的以下消息文本文件 EventLogMsgs.dll。</span><span class="sxs-lookup"><span data-stu-id="6bf63-166">The code example uses the following message text file, built into the resource library EventLogMsgs.dll.</span></span> <span data-ttu-id="6bf63-167">消息文本文件是从中创建消息资源文件的源。</span><span class="sxs-lookup"><span data-stu-id="6bf63-167">A message text file is the source from which the message resource file is created.</span></span> <span data-ttu-id="6bf63-168">消息文本文件定义类别、事件消息和参数插入字符串的资源标识符和文本。</span><span class="sxs-lookup"><span data-stu-id="6bf63-168">The message text file defines the resource identifiers and text for the category, event message, and parameter insertion strings.</span></span>  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.EventSourceCreationData.Source" />
        <altmember cref="P:System.Diagnostics.EventSourceCreationData.LogName" />
      </Docs>
    </Member>
    <Member MemberName="CategoryCount">
      <MemberSignature Language="C#" Value="public int CategoryCount { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CategoryCount" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventSourceCreationData.CategoryCount" />
      <MemberSignature Language="VB.NET" Value="Public Property CategoryCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int CategoryCount { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.CategoryCount : int with get, set" Usage="System.Diagnostics.EventSourceCreationData.CategoryCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.EventLog</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6bf63-169">获取或设置类别资源文件中类别的数目。</span><span class="sxs-lookup"><span data-stu-id="6bf63-169">Gets or sets the number of categories in the category resource file.</span></span></summary>
        <value><span data-ttu-id="6bf63-170">类别资源文件中的类别的数目。</span><span class="sxs-lookup"><span data-stu-id="6bf63-170">The number of categories in the category resource file.</span></span> <span data-ttu-id="6bf63-171">默认值为零。</span><span class="sxs-lookup"><span data-stu-id="6bf63-171">The default value is zero.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6bf63-172">使用 <xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A> 和 <xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A> 属性来写入包含本地化类别字符串的事件。</span><span class="sxs-lookup"><span data-stu-id="6bf63-172">Use the <xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A> and <xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A> properties to write events with localized category strings.</span></span> <span data-ttu-id="6bf63-173">如果你在写入事件时提供了一个类别，则事件查看器将显示该事件项的类别。</span><span class="sxs-lookup"><span data-stu-id="6bf63-173">The Event Viewer displays the category for an event entry if you supply a category when you write the event.</span></span> <span data-ttu-id="6bf63-174">事件日志类别是应用程序定义的字符串，可帮助筛选事件，或提供有关事件的详细信息。</span><span class="sxs-lookup"><span data-stu-id="6bf63-174">Event log categories are application-defined strings that help filter events, or provide further information on the event.</span></span> <span data-ttu-id="6bf63-175">例如，你的应用程序可以为不同的组件或不同的操作定义单独的类别。</span><span class="sxs-lookup"><span data-stu-id="6bf63-175">For example, your application can define separate categories for different components or different operations.</span></span>  
  
 <span data-ttu-id="6bf63-176">事件类别是可选的;如果你的应用程序不使用类别，请不要设置 <xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A> 和 <xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A> 属性。</span><span class="sxs-lookup"><span data-stu-id="6bf63-176">Event categories are optional; if your application does not use categories, do not set the <xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A> and <xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A> properties.</span></span>  
  
 <span data-ttu-id="6bf63-177">有关定义事件消息和生成事件资源文件的详细信息，请参阅 Platform SDK 文档中的 [消息编译器](/windows/win32/wes/message-compiler--mc-exe-) 一文。</span><span class="sxs-lookup"><span data-stu-id="6bf63-177">For details about defining event messages and building event resource files, see the [Message Compiler](/windows/win32/wes/message-compiler--mc-exe-) article in the Platform SDK documentation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6bf63-178">下面的代码示例确定是否 `SampleApplicationSource` 在本地计算机上注册了名为的事件源。</span><span class="sxs-lookup"><span data-stu-id="6bf63-178">The following code example determines whether the event source named `SampleApplicationSource` is registered on the local computer.</span></span> <span data-ttu-id="6bf63-179">如果事件源不存在，则此示例将为源设置消息资源文件并创建新的事件源。</span><span class="sxs-lookup"><span data-stu-id="6bf63-179">If the event source does not exist, the example sets the message resource file for the source and creates the new event source.</span></span> <span data-ttu-id="6bf63-180">最后，此代码示例使用中的资源标识符值 `DisplayNameMsgId` 和中的资源文件路径，为事件日志设置本地化的显示名称 `messageFile` 。</span><span class="sxs-lookup"><span data-stu-id="6bf63-180">Finally, the code example sets the localized display name for the event log, using the resource identifier value in `DisplayNameMsgId` and the resource file path in `messageFile`.</span></span>  
  
 [!code-cpp[EventLog_WriteEvent#6](~/samples/snippets/cpp/VS_Snippets_CLR/eventlog_WriteEvent/CPP/source.cpp#6)]
 [!code-csharp[EventLog_WriteEvent#6](~/samples/snippets/csharp/VS_Snippets_CLR/eventlog_WriteEvent/CS/source.cs#6)]
 [!code-vb[EventLog_WriteEvent#6](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlog_WriteEvent/VB/source.vb#6)]  
  
 <span data-ttu-id="6bf63-181">此代码示例使用资源库中内置的以下消息文本文件 EventLogMsgs.dll。</span><span class="sxs-lookup"><span data-stu-id="6bf63-181">The code example uses the following message text file, built into the resource library EventLogMsgs.dll.</span></span> <span data-ttu-id="6bf63-182">消息文本文件是从中创建消息资源文件的源。</span><span class="sxs-lookup"><span data-stu-id="6bf63-182">A message text file is the source from which the message resource file is created.</span></span> <span data-ttu-id="6bf63-183">消息文本文件定义类别、事件消息和参数插入字符串的资源标识符和文本。</span><span class="sxs-lookup"><span data-stu-id="6bf63-183">The message text file defines the resource identifiers and text for the category, event message, and parameter insertion strings.</span></span>  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="6bf63-184">该属性设置为负值或大于 <see cref="F:System.UInt16.MaxValue" /> 的值。</span><span class="sxs-lookup"><span data-stu-id="6bf63-184">The property is set to a negative value or to a value larger than <see cref="F:System.UInt16.MaxValue" />.</span></span></exception>
        <altmember cref="P:System.Diagnostics.EventSourceCreationData.CategoryResourceFile" />
        <altmember cref="P:System.Diagnostics.EventLogInstaller.CategoryCount" />
        <altmember cref="Overload:System.Diagnostics.EventLog.WriteEvent" />
      </Docs>
    </Member>
    <Member MemberName="CategoryResourceFile">
      <MemberSignature Language="C#" Value="public string CategoryResourceFile { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CategoryResourceFile" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventSourceCreationData.CategoryResourceFile" />
      <MemberSignature Language="VB.NET" Value="Public Property CategoryResourceFile As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ CategoryResourceFile { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CategoryResourceFile : string with get, set" Usage="System.Diagnostics.EventSourceCreationData.CategoryResourceFile" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.EventLog</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6bf63-185">获取或设置包含源的类别字符串的资源文件的路径。</span><span class="sxs-lookup"><span data-stu-id="6bf63-185">Gets or sets the path of the resource file that contains category strings for the source.</span></span></summary>
        <value><span data-ttu-id="6bf63-186">类别资源文件的路径。</span><span class="sxs-lookup"><span data-stu-id="6bf63-186">The path of the category resource file.</span></span> <span data-ttu-id="6bf63-187">默认值为空字符串("")。</span><span class="sxs-lookup"><span data-stu-id="6bf63-187">The default is an empty string ("").</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6bf63-188">使用 <xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A> 和 <xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A> 属性来写入包含本地化类别字符串的事件。</span><span class="sxs-lookup"><span data-stu-id="6bf63-188">Use the <xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A> and <xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A> properties to write events with localized category strings.</span></span> <span data-ttu-id="6bf63-189">如果你在写入事件时提供了一个类别，则事件查看器将显示该事件项的类别。</span><span class="sxs-lookup"><span data-stu-id="6bf63-189">The Event Viewer displays the category for an event entry if you supply a category when you write the event.</span></span> <span data-ttu-id="6bf63-190">事件日志类别是应用程序定义的字符串，可帮助筛选事件，或提供有关事件的详细信息。</span><span class="sxs-lookup"><span data-stu-id="6bf63-190">Event log categories are application-defined strings that help filter events, or provide further information on the event.</span></span> <span data-ttu-id="6bf63-191">例如，你的应用程序可以为不同的组件或不同的操作定义单独的类别。</span><span class="sxs-lookup"><span data-stu-id="6bf63-191">For example, your application can define separate categories for different components or different operations.</span></span>  
  
 <span data-ttu-id="6bf63-192">事件类别是可选的;如果你的应用程序不使用类别，请不要设置 <xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A> 和 <xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A> 属性。</span><span class="sxs-lookup"><span data-stu-id="6bf63-192">Event categories are optional; if your application does not use categories, do not set the <xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A> and <xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A> properties.</span></span>  
  
 <span data-ttu-id="6bf63-193">有关定义事件消息和生成事件资源文件的详细信息，请参阅 Platform SDK 文档中的 [消息编译器](/windows/win32/wes/message-compiler--mc-exe-) 一文。</span><span class="sxs-lookup"><span data-stu-id="6bf63-193">For details about defining event messages and building event resource files, see the [Message Compiler](/windows/win32/wes/message-compiler--mc-exe-) article in the Platform SDK documentation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6bf63-194">下面的代码示例确定是否 `SampleApplicationSource` 在本地计算机上注册了名为的事件源。</span><span class="sxs-lookup"><span data-stu-id="6bf63-194">The following code example determines whether the event source named `SampleApplicationSource` is registered on the local computer.</span></span> <span data-ttu-id="6bf63-195">如果事件源不存在，则此示例将为源设置消息资源文件并创建新的事件源。</span><span class="sxs-lookup"><span data-stu-id="6bf63-195">If the event source does not exist, the example sets the message resource file for the source and creates the new event source.</span></span> <span data-ttu-id="6bf63-196">最后，此代码示例使用中的资源标识符值 `DisplayNameMsgId` 和中的资源文件路径，为事件日志设置本地化的显示名称 `messageFile` 。</span><span class="sxs-lookup"><span data-stu-id="6bf63-196">Finally, the code example sets the localized display name for the event log, using the resource identifier value in `DisplayNameMsgId` and the resource file path in `messageFile`.</span></span>  
  
 [!code-cpp[EventLog_WriteEvent#6](~/samples/snippets/cpp/VS_Snippets_CLR/eventlog_WriteEvent/CPP/source.cpp#6)]
 [!code-csharp[EventLog_WriteEvent#6](~/samples/snippets/csharp/VS_Snippets_CLR/eventlog_WriteEvent/CS/source.cs#6)]
 [!code-vb[EventLog_WriteEvent#6](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlog_WriteEvent/VB/source.vb#6)]  
  
 <span data-ttu-id="6bf63-197">此代码示例使用资源库中内置的以下消息文本文件 EventLogMsgs.dll。</span><span class="sxs-lookup"><span data-stu-id="6bf63-197">The code example uses the following message text file, built into the resource library EventLogMsgs.dll.</span></span> <span data-ttu-id="6bf63-198">消息文本文件是从中创建消息资源文件的源。</span><span class="sxs-lookup"><span data-stu-id="6bf63-198">A message text file is the source from which the message resource file is created.</span></span> <span data-ttu-id="6bf63-199">消息文本文件定义类别、事件消息和参数插入字符串的资源标识符和文本。</span><span class="sxs-lookup"><span data-stu-id="6bf63-199">The message text file defines the resource identifiers and text for the category, event message, and parameter insertion strings.</span></span>  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.EventSourceCreationData.CategoryCount" />
        <altmember cref="P:System.Diagnostics.EventLogInstaller.CategoryResourceFile" />
      </Docs>
    </Member>
    <Member MemberName="LogName">
      <MemberSignature Language="C#" Value="public string LogName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string LogName" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventSourceCreationData.LogName" />
      <MemberSignature Language="VB.NET" Value="Public Property LogName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ LogName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.LogName : string with get, set" Usage="System.Diagnostics.EventSourceCreationData.LogName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.EventLog</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6bf63-200">获取或设置事件日志的名称，事件源要向该日志写入项。</span><span class="sxs-lookup"><span data-stu-id="6bf63-200">Gets or sets the name of the event log to which the source writes entries.</span></span></summary>
        <value><span data-ttu-id="6bf63-201">事件日志的名称。</span><span class="sxs-lookup"><span data-stu-id="6bf63-201">The name of the event log.</span></span> <span data-ttu-id="6bf63-202">这可以是 Application、System 或一个自定义的日志名称。</span><span class="sxs-lookup"><span data-stu-id="6bf63-202">This can be Application, System, or a custom log name.</span></span> <span data-ttu-id="6bf63-203">默认值为“Application”。</span><span class="sxs-lookup"><span data-stu-id="6bf63-203">The default value is "Application."</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6bf63-204">使用 <xref:System.Diagnostics.EventSourceCreationData.LogName%2A> 属性来标识应用程序将条目写入到使用新源的事件日志。</span><span class="sxs-lookup"><span data-stu-id="6bf63-204">Use the <xref:System.Diagnostics.EventSourceCreationData.LogName%2A> property to identify the event log that your application writes entries to using the new source.</span></span> <span data-ttu-id="6bf63-205">事件日志可以是新日志或现有日志。</span><span class="sxs-lookup"><span data-stu-id="6bf63-205">The event log can be a new log or an existing log.</span></span> <span data-ttu-id="6bf63-206">应用程序和服务应写入应用程序日志或自定义日志。</span><span class="sxs-lookup"><span data-stu-id="6bf63-206">Applications and services should write to the Application log or a custom log.</span></span> <span data-ttu-id="6bf63-207">设备驱动程序应该写入系统日志。</span><span class="sxs-lookup"><span data-stu-id="6bf63-207">Device drivers should write to the System log.</span></span> <span data-ttu-id="6bf63-208">如果未显式设置 <xref:System.Diagnostics.EventSourceCreationData.LogName%2A> 属性，则事件日志会默认为应用程序日志。</span><span class="sxs-lookup"><span data-stu-id="6bf63-208">If you do not explicitly set the <xref:System.Diagnostics.EventSourceCreationData.LogName%2A> property, the event log defaults to the Application log.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6bf63-209">安全日志为只读。</span><span class="sxs-lookup"><span data-stu-id="6bf63-209">The Security log is read-only.</span></span>  
  
 <span data-ttu-id="6bf63-210">若要以新源的现有日志为目标，请将 <xref:System.Diagnostics.EventSourceCreationData.LogName%2A> 属性设置为现有的事件日志名称。</span><span class="sxs-lookup"><span data-stu-id="6bf63-210">To target an existing log for the new source, set the <xref:System.Diagnostics.EventSourceCreationData.LogName%2A> property to the existing event log name.</span></span> <span data-ttu-id="6bf63-211">若要为源创建新的事件日志，则必须设置 <xref:System.Diagnostics.EventSourceCreationData.LogName%2A> 属性。</span><span class="sxs-lookup"><span data-stu-id="6bf63-211">To create a new event log for the source, you must set the <xref:System.Diagnostics.EventSourceCreationData.LogName%2A> property.</span></span> <span data-ttu-id="6bf63-212">事件日志名称必须由可打印字符组成，且不得包含字符“\*”、“?”或“\\”。</span><span class="sxs-lookup"><span data-stu-id="6bf63-212">Event log names must consist of printable characters, and cannot include the characters '\*', '?', or '\\'.</span></span> <span data-ttu-id="6bf63-213">事件日志名称的前8个字符必须不同于指定计算机上的现有事件日志名称的前8个字符。</span><span class="sxs-lookup"><span data-stu-id="6bf63-213">The first 8 characters of the event log name must be different from the first 8 characters of existing names of event logs on the specified computer.</span></span>  
  
 <span data-ttu-id="6bf63-214">操作系统将事件日志存储为文件。</span><span class="sxs-lookup"><span data-stu-id="6bf63-214">The operating system stores event logs as files.</span></span> <span data-ttu-id="6bf63-215">当使用 <xref:System.Diagnostics.EventLogInstaller> 或 <xref:System.Diagnostics.EventLog.CreateEventSource%2A> 方法创建新的事件日志时，关联的文件将存储在指定计算机上的%SystemRoot%\System32\Config 目录中。</span><span class="sxs-lookup"><span data-stu-id="6bf63-215">When you use <xref:System.Diagnostics.EventLogInstaller> or the <xref:System.Diagnostics.EventLog.CreateEventSource%2A> method to create a new event log, the associated file is stored in the %SystemRoot%\System32\Config directory on the specified computer.</span></span> <span data-ttu-id="6bf63-216">文件名的设置方法是将属性的前8个字符追加到 <xref:System.Diagnostics.EventSourceCreationData.LogName%2A> 文件扩展名 ".evt"。</span><span class="sxs-lookup"><span data-stu-id="6bf63-216">The file name is set by appending the first 8 characters of the <xref:System.Diagnostics.EventSourceCreationData.LogName%2A> property with the ".evt" file name extension.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6bf63-217">下面的代码示例通过命令行参数设置事件源的配置属性。</span><span class="sxs-lookup"><span data-stu-id="6bf63-217">The following code example sets the configuration properties for an event source from command-line arguments.</span></span> <span data-ttu-id="6bf63-218">输入参数指定事件源名称、事件日志名称、计算机名称和事件消息资源文件。</span><span class="sxs-lookup"><span data-stu-id="6bf63-218">The input arguments specify the event source name, event log name, computer name, and event message resource file.</span></span> <span data-ttu-id="6bf63-219">此示例是为类提供的更大示例的一部分 <xref:System.Diagnostics.EventSourceCreationData> 。</span><span class="sxs-lookup"><span data-stu-id="6bf63-219">This example is part of a larger example provided for the <xref:System.Diagnostics.EventSourceCreationData> class.</span></span>  
  
 [!code-cpp[EventLog_EventSourceCreation_Properties#2](~/samples/snippets/cpp/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/CPP/source.cpp#2)]
 [!code-csharp[EventLog_EventSourceCreation_Properties#2](~/samples/snippets/csharp/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/CS/source.cs#2)]
 [!code-vb[EventLog_EventSourceCreation_Properties#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.EventLogInstaller.Log" />
        <altmember cref="M:System.Diagnostics.EventLog.Exists(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="MachineName">
      <MemberSignature Language="C#" Value="public string MachineName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string MachineName" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventSourceCreationData.MachineName" />
      <MemberSignature Language="VB.NET" Value="Public Property MachineName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ MachineName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.MachineName : string with get, set" Usage="System.Diagnostics.EventSourceCreationData.MachineName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.EventLog</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6bf63-220">获取或设置在其上注册事件源的计算机的名称。</span><span class="sxs-lookup"><span data-stu-id="6bf63-220">Gets or sets the name of the computer on which to register the event source.</span></span></summary>
        <value><span data-ttu-id="6bf63-221">在其上注册事件源的系统的名称。</span><span class="sxs-lookup"><span data-stu-id="6bf63-221">The name of the system on which to register the event source.</span></span> <span data-ttu-id="6bf63-222">默认为本地计算机 (".")。</span><span class="sxs-lookup"><span data-stu-id="6bf63-222">The default is the local computer (".").</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6bf63-223"><xref:System.Diagnostics.EventSourceCreationData.MachineName%2A>该值不能为空字符串。</span><span class="sxs-lookup"><span data-stu-id="6bf63-223">The <xref:System.Diagnostics.EventSourceCreationData.MachineName%2A> value cannot be an empty string.</span></span> <span data-ttu-id="6bf63-224">如果未显式设置计算机名称，则默认为本地计算机 ( "。) 。</span><span class="sxs-lookup"><span data-stu-id="6bf63-224">If the machine name is not explicitly set, it defaults to the local computer (".").</span></span>  
  
 <span data-ttu-id="6bf63-225">在远程计算机上注册源时，您必须对该计算机具有管理权限，才能写入具有足够权限的注册表值。</span><span class="sxs-lookup"><span data-stu-id="6bf63-225">When registering a source on a remote computer, you must have administrative rights on that computer to write the registry values with sufficient permissions.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6bf63-226">下面的代码示例通过命令行参数设置事件源的配置属性。</span><span class="sxs-lookup"><span data-stu-id="6bf63-226">The following code example sets the configuration properties for an event source from command-line arguments.</span></span> <span data-ttu-id="6bf63-227">输入参数指定事件源名称、事件日志名称、计算机名称和事件消息资源文件。</span><span class="sxs-lookup"><span data-stu-id="6bf63-227">The input arguments specify the event source name, event log name, computer name, and event message resource file.</span></span> <span data-ttu-id="6bf63-228">此示例是为类提供的更大示例的一部分 <xref:System.Diagnostics.EventSourceCreationData> 。</span><span class="sxs-lookup"><span data-stu-id="6bf63-228">This example is part of a larger example provided for the <xref:System.Diagnostics.EventSourceCreationData> class.</span></span>  
  
 [!code-cpp[EventLog_EventSourceCreation_Properties#2](~/samples/snippets/cpp/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/CPP/source.cpp#2)]
 [!code-csharp[EventLog_EventSourceCreation_Properties#2](~/samples/snippets/csharp/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/CS/source.cs#2)]
 [!code-vb[EventLog_EventSourceCreation_Properties#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6bf63-229">计算机名称无效。</span><span class="sxs-lookup"><span data-stu-id="6bf63-229">The computer name is invalid.</span></span></exception>
        <altmember cref="P:System.Diagnostics.EventLog.MachineName" />
        <altmember cref="P:System.Diagnostics.EventSourceCreationData.Source" />
        <altmember cref="M:System.Diagnostics.EventLog.Exists(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="MessageResourceFile">
      <MemberSignature Language="C#" Value="public string MessageResourceFile { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string MessageResourceFile" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventSourceCreationData.MessageResourceFile" />
      <MemberSignature Language="VB.NET" Value="Public Property MessageResourceFile As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ MessageResourceFile { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.MessageResourceFile : string with get, set" Usage="System.Diagnostics.EventSourceCreationData.MessageResourceFile" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.EventLog</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6bf63-230">获取或设置消息资源文件的路径，该文件包含源的消息格式字符串。</span><span class="sxs-lookup"><span data-stu-id="6bf63-230">Gets or sets the path of the message resource file that contains message formatting strings for the source.</span></span></summary>
        <value><span data-ttu-id="6bf63-231">消息资源文件的路径。</span><span class="sxs-lookup"><span data-stu-id="6bf63-231">The path of the message resource file.</span></span> <span data-ttu-id="6bf63-232">默认值为空字符串("")。</span><span class="sxs-lookup"><span data-stu-id="6bf63-232">The default is an empty string ("").</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6bf63-233">使用 <xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A> 属性将事件日志源配置为写入本地化事件消息。</span><span class="sxs-lookup"><span data-stu-id="6bf63-233">Use the <xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A> property to configure an event log source to write localized event messages.</span></span> <span data-ttu-id="6bf63-234">事件消息是应用程序定义的字符串，用于向用户描述事件。</span><span class="sxs-lookup"><span data-stu-id="6bf63-234">Event messages are application-defined strings that describe the event to the user.</span></span>  
  
 <span data-ttu-id="6bf63-235">应用程序可以使用资源标识符编写事件日志项。</span><span class="sxs-lookup"><span data-stu-id="6bf63-235">Your application can write event log entries using resource identifiers.</span></span> <span data-ttu-id="6bf63-236">资源标识符对位于中的消息进行索引 <xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A> 。</span><span class="sxs-lookup"><span data-stu-id="6bf63-236">A resource identifier indexes a message located in the <xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A>.</span></span> <span data-ttu-id="6bf63-237">事件查看器使用资源标识符从本地化的消息资源文件中查找并显示相应的字符串，该文件基于当前语言设置。</span><span class="sxs-lookup"><span data-stu-id="6bf63-237">The Event Viewer uses the resource identifier to find and display the corresponding string from the localized message resource file based on current language settings.</span></span>  
  
 <span data-ttu-id="6bf63-238">事件源必须配置为写入本地化项或写入直接字符串。</span><span class="sxs-lookup"><span data-stu-id="6bf63-238">The event source must be configured either for writing localized entries or for writing direct strings.</span></span> <span data-ttu-id="6bf63-239">使用 <xref:System.Diagnostics.EventLog.WriteEvent%2A> 方法为使用消息资源文件配置的源写入本地化项。</span><span class="sxs-lookup"><span data-stu-id="6bf63-239">Use the <xref:System.Diagnostics.EventLog.WriteEvent%2A> method to write localized entries for a source configured with a message resource file.</span></span>  
  
 <span data-ttu-id="6bf63-240">如果你的应用程序直接写入事件消息字符串，而不是在本地化的资源文件中使用资源标识符，请不要设置 <xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A> 属性。</span><span class="sxs-lookup"><span data-stu-id="6bf63-240">If your application writes event message strings directly, rather than using a resource identifier in a localized resource file, do not set the <xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A> property.</span></span>  
  
 <span data-ttu-id="6bf63-241">有关定义事件消息和生成事件资源文件的详细信息，请参阅 Platform SDK 文档中的 [消息编译器](/windows/win32/wes/message-compiler--mc-exe-) 一文。</span><span class="sxs-lookup"><span data-stu-id="6bf63-241">For details about defining event messages and building event resource files, see the [Message Compiler](/windows/win32/wes/message-compiler--mc-exe-) article in the Platform SDK documentation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6bf63-242">下面的代码示例确定是否 `SampleApplicationSource` 在本地计算机上注册了名为的事件源。</span><span class="sxs-lookup"><span data-stu-id="6bf63-242">The following code example determines whether the event source named `SampleApplicationSource` is registered on the local computer.</span></span> <span data-ttu-id="6bf63-243">如果事件源不存在，则此示例将为源设置消息资源文件并创建新的事件源。</span><span class="sxs-lookup"><span data-stu-id="6bf63-243">If the event source does not exist, the example sets the message resource file for the source and creates the new event source.</span></span> <span data-ttu-id="6bf63-244">最后，此代码示例使用中的资源标识符值 `DisplayNameMsgId` 和中的资源文件路径，为事件日志设置本地化的显示名称 `messageFile` 。</span><span class="sxs-lookup"><span data-stu-id="6bf63-244">Finally, the code example sets the localized display name for the event log, using the resource identifier value in `DisplayNameMsgId` and the resource file path in `messageFile`.</span></span>  
  
 [!code-cpp[EventLog_WriteEvent#6](~/samples/snippets/cpp/VS_Snippets_CLR/eventlog_WriteEvent/CPP/source.cpp#6)]
 [!code-csharp[EventLog_WriteEvent#6](~/samples/snippets/csharp/VS_Snippets_CLR/eventlog_WriteEvent/CS/source.cs#6)]
 [!code-vb[EventLog_WriteEvent#6](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlog_WriteEvent/VB/source.vb#6)]  
  
 <span data-ttu-id="6bf63-245">此代码示例使用资源库中内置的以下消息文本文件 EventLogMsgs.dll。</span><span class="sxs-lookup"><span data-stu-id="6bf63-245">The code example uses the following message text file, built into the resource library EventLogMsgs.dll.</span></span> <span data-ttu-id="6bf63-246">消息文本文件是从中创建消息资源文件的源。</span><span class="sxs-lookup"><span data-stu-id="6bf63-246">A message text file is the source from which the message resource file is created.</span></span> <span data-ttu-id="6bf63-247">消息文本文件定义类别、事件消息和参数插入字符串的资源标识符和文本。</span><span class="sxs-lookup"><span data-stu-id="6bf63-247">The message text file defines the resource identifiers and text for the category, event message, and parameter insertion strings.</span></span>  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.EventLogInstaller.MessageResourceFile" />
      </Docs>
    </Member>
    <Member MemberName="ParameterResourceFile">
      <MemberSignature Language="C#" Value="public string ParameterResourceFile { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ParameterResourceFile" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventSourceCreationData.ParameterResourceFile" />
      <MemberSignature Language="VB.NET" Value="Public Property ParameterResourceFile As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ParameterResourceFile { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ParameterResourceFile : string with get, set" Usage="System.Diagnostics.EventSourceCreationData.ParameterResourceFile" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.EventLog</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6bf63-248">获取或设置资源文件的路径，该文件包含源的消息参数字符串。</span><span class="sxs-lookup"><span data-stu-id="6bf63-248">Gets or sets the path of the resource file that contains message parameter strings for the source.</span></span></summary>
        <value><span data-ttu-id="6bf63-249">参数资源文件的路径。</span><span class="sxs-lookup"><span data-stu-id="6bf63-249">The path of the parameter resource file.</span></span> <span data-ttu-id="6bf63-250">默认值为空字符串("")。</span><span class="sxs-lookup"><span data-stu-id="6bf63-250">The default is an empty string ("").</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6bf63-251">使用 <xref:System.Diagnostics.EventSourceCreationData.ParameterResourceFile%2A> 属性来配置事件日志源，以使用插入的参数字符串写入本地化事件消息。</span><span class="sxs-lookup"><span data-stu-id="6bf63-251">Use the <xref:System.Diagnostics.EventSourceCreationData.ParameterResourceFile%2A> property to configure an event log source to write localized event messages with inserted parameter strings.</span></span> <span data-ttu-id="6bf63-252">属性中指定的每个本地化事件消息 <xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A> 可以包含插入字符串的占位符。</span><span class="sxs-lookup"><span data-stu-id="6bf63-252">Each localized event message specified in the <xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A> property can contain placeholders for insertion strings.</span></span> <span data-ttu-id="6bf63-253">这些占位符用于指定事件消息中与语言无关的字符串的位置和资源标识符。</span><span class="sxs-lookup"><span data-stu-id="6bf63-253">These placeholders are used to specify the position and resource identifier for a language-independent string within the event message.</span></span> <span data-ttu-id="6bf63-254">事件查看器使用中的相应字符串填充占位符 <xref:System.Diagnostics.EventSourceCreationData.ParameterResourceFile%2A> ，并为本地化事件项设置事件日志消息的格式。</span><span class="sxs-lookup"><span data-stu-id="6bf63-254">The Event Viewer fills in the placeholders using the corresponding strings from the <xref:System.Diagnostics.EventSourceCreationData.ParameterResourceFile%2A> and formats the event log message for the localized event entry.</span></span>  
  
 <span data-ttu-id="6bf63-255">例如，消息文本文件的以下部分定义带有参数占位符的字符串：</span><span class="sxs-lookup"><span data-stu-id="6bf63-255">For example, the following section of a message text file defines a string with a parameter placeholder:</span></span>  
  
```  
  
MessageId = 1501  
Severity = Success  
Facility = Application  
SymbolicName = COMPONENT_STARTING  
Language=English  
Component %%6050 is starting.  
.  
```  
  
 <span data-ttu-id="6bf63-256">在参数资源文件中，插入字符串必须定义为与占位符对应的资源标识符，如下所示：</span><span class="sxs-lookup"><span data-stu-id="6bf63-256">Within the parameter resource file, the insertion string must be defined with the resource identifier that corresponds to the placeholder, as shown below:</span></span>  
  
```  
MessageId = 6050  
Severity = Success  
Facility = Application  
SymbolicName = COMPONENT_NAME_MSGID  
Language=English  
TRIGGER.EXE  
.  
```  
  
 <span data-ttu-id="6bf63-257">事件源必须配置为写入本地化项或写入直接字符串。</span><span class="sxs-lookup"><span data-stu-id="6bf63-257">The event source must be configured either for writing localized entries or for writing direct strings.</span></span> <span data-ttu-id="6bf63-258">使用 <xref:System.Diagnostics.EventLog.WriteEvent%2A> 方法为使用消息资源文件配置的源写入本地化项。</span><span class="sxs-lookup"><span data-stu-id="6bf63-258">Use the <xref:System.Diagnostics.EventLog.WriteEvent%2A> method to write localized entries for a source configured with a message resource file.</span></span>  
  
 <span data-ttu-id="6bf63-259">如果你的应用程序将事件消息字符串直接写入事件日志，或者如果你 <xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A> 的属性不包含具有参数插入占位符的消息，请不要设置 <xref:System.Diagnostics.EventSourceCreationData.ParameterResourceFile%2A> 属性。</span><span class="sxs-lookup"><span data-stu-id="6bf63-259">If your application writes event message strings directly to the event log, or if your <xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A> property does not contain messages with parameter insertion placeholders, do not set the <xref:System.Diagnostics.EventSourceCreationData.ParameterResourceFile%2A> property.</span></span>  
  
 <span data-ttu-id="6bf63-260">有关定义事件消息和生成事件资源文件的详细信息，请参阅 Platform SDK 文档中的 [消息编译器](/windows/win32/wes/message-compiler--mc-exe-) 一文。</span><span class="sxs-lookup"><span data-stu-id="6bf63-260">For details about defining event messages and building event resource files, see the [Message Compiler](/windows/win32/wes/message-compiler--mc-exe-) article in the Platform SDK documentation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6bf63-261">下面的代码示例确定是否 `SampleApplicationSource` 在本地计算机上注册了名为的事件源。</span><span class="sxs-lookup"><span data-stu-id="6bf63-261">The following code example determines whether the event source named `SampleApplicationSource` is registered on the local computer.</span></span> <span data-ttu-id="6bf63-262">如果事件源不存在，则此示例将为源设置消息资源文件并创建新的事件源。</span><span class="sxs-lookup"><span data-stu-id="6bf63-262">If the event source does not exist, the example sets the message resource file for the source and creates the new event source.</span></span> <span data-ttu-id="6bf63-263">最后，此代码示例使用中的资源标识符值 `DisplayNameMsgId` 和中的资源文件路径，为事件日志设置本地化的显示名称 `messageFile` 。</span><span class="sxs-lookup"><span data-stu-id="6bf63-263">Finally, the code example sets the localized display name for the event log, using the resource identifier value in `DisplayNameMsgId` and the resource file path in `messageFile`.</span></span>  
  
 [!code-cpp[EventLog_WriteEvent#6](~/samples/snippets/cpp/VS_Snippets_CLR/eventlog_WriteEvent/CPP/source.cpp#6)]
 [!code-csharp[EventLog_WriteEvent#6](~/samples/snippets/csharp/VS_Snippets_CLR/eventlog_WriteEvent/CS/source.cs#6)]
 [!code-vb[EventLog_WriteEvent#6](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlog_WriteEvent/VB/source.vb#6)]  
  
 <span data-ttu-id="6bf63-264">此代码示例使用资源库中内置的以下消息文本文件 EventLogMsgs.dll。</span><span class="sxs-lookup"><span data-stu-id="6bf63-264">The code example uses the following message text file, built into the resource library EventLogMsgs.dll.</span></span> <span data-ttu-id="6bf63-265">消息文本文件是从中创建消息资源文件的源。</span><span class="sxs-lookup"><span data-stu-id="6bf63-265">A message text file is the source from which the message resource file is created.</span></span> <span data-ttu-id="6bf63-266">消息文本文件定义类别、事件消息和参数插入字符串的资源标识符和文本。</span><span class="sxs-lookup"><span data-stu-id="6bf63-266">The message text file defines the resource identifiers and text for the category, event message, and parameter insertion strings.</span></span> <span data-ttu-id="6bf63-267">具体而言，为资源标识符1004定义的消息使用占位符作为为资源标识符5002定义的参数字符串。</span><span class="sxs-lookup"><span data-stu-id="6bf63-267">Specifically, the message defined for resource identifier 1004 uses a placeholder for a parameter string defined for resource identifier 5002.</span></span>  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.EventLogInstaller.ParameterResourceFile" />
      </Docs>
    </Member>
    <Member MemberName="Source">
      <MemberSignature Language="C#" Value="public string Source { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Source" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventSourceCreationData.Source" />
      <MemberSignature Language="VB.NET" Value="Public Property Source As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Source { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Source : string with get, set" Usage="System.Diagnostics.EventSourceCreationData.Source" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.EventLog</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6bf63-268">获取或设置要在事件日志中注册为事件源的名称。</span><span class="sxs-lookup"><span data-stu-id="6bf63-268">Gets or sets the name to register with the event log as an event source.</span></span></summary>
        <value><span data-ttu-id="6bf63-269">要在事件日志中注册为项源的名称。</span><span class="sxs-lookup"><span data-stu-id="6bf63-269">The name to register with the event log as a source of entries.</span></span> <span data-ttu-id="6bf63-270">默认值为空字符串("")。</span><span class="sxs-lookup"><span data-stu-id="6bf63-270">The default is an empty string ("").</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6bf63-271">源名称通常是应用程序的名称，或者是大型应用程序中组件的名称。</span><span class="sxs-lookup"><span data-stu-id="6bf63-271">The source name is often the name of the application, or the name of a component within a large application.</span></span> <span data-ttu-id="6bf63-272"><xref:System.Diagnostics.EventLog.CreateEventSource%28System.Diagnostics.EventSourceCreationData%29?displayProperty=nameWithType>方法使用 <xref:System.Diagnostics.EventSourceCreationData.Source%2A> 、 <xref:System.Diagnostics.EventSourceCreationData.LogName%2A> 和 <xref:System.Diagnostics.EventSourceCreationData.MachineName%2A> 属性在目标计算机上为新源及其关联事件日志创建注册表值。</span><span class="sxs-lookup"><span data-stu-id="6bf63-272">The <xref:System.Diagnostics.EventLog.CreateEventSource%28System.Diagnostics.EventSourceCreationData%29?displayProperty=nameWithType> method uses the <xref:System.Diagnostics.EventSourceCreationData.Source%2A>, <xref:System.Diagnostics.EventSourceCreationData.LogName%2A>, and <xref:System.Diagnostics.EventSourceCreationData.MachineName%2A> properties to create registry values on the target computer for the new source and its associated event log.</span></span> <span data-ttu-id="6bf63-273">新的源名称不能与目标计算机上的现有源名称或现有事件日志名称相匹配。</span><span class="sxs-lookup"><span data-stu-id="6bf63-273">A new source name cannot match an existing source name or an existing event log name on the target computer.</span></span>  
  
 <span data-ttu-id="6bf63-274">创建源的注册表值后，应用程序可以使用源将条目写入已配置的事件日志。</span><span class="sxs-lookup"><span data-stu-id="6bf63-274">After the registry values for the source are created, your application can use the source to write entries to the configured event log.</span></span>  
  
 <span data-ttu-id="6bf63-275">每个源一次只能写入一个事件日志;但是，应用程序可以使用多个源来写入多个事件日志。</span><span class="sxs-lookup"><span data-stu-id="6bf63-275">Each source can only write to one event log at a time; however, your application can use multiple sources to write to multiple event logs.</span></span> <span data-ttu-id="6bf63-276">例如，你的应用程序可能需要为不同的事件日志或不同的资源文件配置多个源。</span><span class="sxs-lookup"><span data-stu-id="6bf63-276">For example, your application might require multiple sources configured for different event logs or different resource files.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6bf63-277">下面的代码示例通过命令行参数设置事件源的配置属性。</span><span class="sxs-lookup"><span data-stu-id="6bf63-277">The following code example sets the configuration properties for an event source from command-line arguments.</span></span> <span data-ttu-id="6bf63-278">输入参数指定事件源名称、事件日志名称、计算机名称和事件消息资源文件。</span><span class="sxs-lookup"><span data-stu-id="6bf63-278">The input arguments specify the event source name, event log name, computer name, and event message resource file.</span></span> <span data-ttu-id="6bf63-279">此示例是为类提供的更大示例的一部分 <xref:System.Diagnostics.EventSourceCreationData> 。</span><span class="sxs-lookup"><span data-stu-id="6bf63-279">This example is part of a larger example provided for the <xref:System.Diagnostics.EventSourceCreationData> class.</span></span>  
  
 [!code-cpp[EventLog_EventSourceCreation_Properties#2](~/samples/snippets/cpp/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/CPP/source.cpp#2)]
 [!code-csharp[EventLog_EventSourceCreation_Properties#2](~/samples/snippets/csharp/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/CS/source.cs#2)]
 [!code-vb[EventLog_EventSourceCreation_Properties#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.EventLogInstaller.Source" />
        <altmember cref="M:System.Diagnostics.EventLog.SourceExists(System.String)" />
      </Docs>
    </Member>
  </Members>
</Type>
