<Type Name="Trace" FullName="System.Diagnostics.Trace">
  <Metadata><Meta Name="ms.openlocfilehash" Value="bcdd62fd1508ffba7f1eabdc956abce6edd98458" /><Meta Name="ms.sourcegitcommit" Value="b53d35b4a410c949742abd4c6a989d1af5357bca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="86849254" /></Metadata><TypeSignature Language="C#" Value="public sealed class Trace" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Trace extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.Trace" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Trace" />
  <TypeSignature Language="C++ CLI" Value="public ref class Trace sealed" />
  <TypeSignature Language="F#" Value="type Trace = class" />
  <AssemblyInfo>
    <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Diagnostics.TraceSource" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="a1819-101">提供一组方法和属性，帮助您跟踪代码的执行。</span><span class="sxs-lookup"><span data-stu-id="a1819-101">Provides a set of methods and properties that help you trace the execution of your code.</span></span> <span data-ttu-id="a1819-102">此类不能被继承。</span><span class="sxs-lookup"><span data-stu-id="a1819-102">This class cannot be inherited.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1819-103">您可以使用类中的属性和方法 <xref:System.Diagnostics.Trace> 来检测发布版本。</span><span class="sxs-lookup"><span data-stu-id="a1819-103">You can use the properties and methods in the <xref:System.Diagnostics.Trace> class to instrument release builds.</span></span> <span data-ttu-id="a1819-104">借助检测功能，可以监视应用程序在真实设置中运行的运行状况。</span><span class="sxs-lookup"><span data-stu-id="a1819-104">Instrumentation allows you to monitor the health of your application running in real-life settings.</span></span> <span data-ttu-id="a1819-105">跟踪有助于隔离问题并修复它们，而不会影响正在运行的系统。</span><span class="sxs-lookup"><span data-stu-id="a1819-105">Tracing helps you isolate problems and fix them without disturbing a running system.</span></span>  
  
 <span data-ttu-id="a1819-106">此类提供用于显示 <xref:System.Diagnostics.Trace.Assert%2A> 对话框的方法，并发出将始终发出的断言 <xref:System.Diagnostics.Trace.Fail%2A> 。</span><span class="sxs-lookup"><span data-stu-id="a1819-106">This class provides methods to display an <xref:System.Diagnostics.Trace.Assert%2A> dialog box, and to emit an assertion that will always <xref:System.Diagnostics.Trace.Fail%2A>.</span></span> <span data-ttu-id="a1819-107">此类提供以下变体中的编写方法： <xref:System.Diagnostics.Trace.Write%2A> 、 <xref:System.Diagnostics.Trace.WriteLine%2A> 、 <xref:System.Diagnostics.Trace.WriteIf%2A> 和 <xref:System.Diagnostics.Trace.WriteLineIf%2A> 。</span><span class="sxs-lookup"><span data-stu-id="a1819-107">This class provides write methods in the following variations: <xref:System.Diagnostics.Trace.Write%2A>, <xref:System.Diagnostics.Trace.WriteLine%2A>, <xref:System.Diagnostics.Trace.WriteIf%2A>, and <xref:System.Diagnostics.Trace.WriteLineIf%2A>.</span></span>  
  
 <span data-ttu-id="a1819-108"><xref:System.Diagnostics.BooleanSwitch>和 <xref:System.Diagnostics.TraceSwitch> 类提供了动态控制跟踪输出的方法。</span><span class="sxs-lookup"><span data-stu-id="a1819-108">The <xref:System.Diagnostics.BooleanSwitch> and <xref:System.Diagnostics.TraceSwitch> classes provide means to dynamically control the tracing output.</span></span> <span data-ttu-id="a1819-109">您可以修改这些开关的值，而无需重新编译应用程序。</span><span class="sxs-lookup"><span data-stu-id="a1819-109">You can modify the values of these switches without recompiling your application.</span></span> <span data-ttu-id="a1819-110">有关使用配置文件设置开关的信息，请参阅 <xref:System.Diagnostics.Switch> 类和[如何：创建、初始化和配置跟踪开关](/dotnet/framework/debug-trace-profile/how-to-create-initialize-and-configure-trace-switches)主题。</span><span class="sxs-lookup"><span data-stu-id="a1819-110">For information on using the configuration file to set a switch, see the <xref:System.Diagnostics.Switch> class and the [How to: Create, Initialize and Configure Trace Switches](/dotnet/framework/debug-trace-profile/how-to-create-initialize-and-configure-trace-switches) topic.</span></span>  
  
 <span data-ttu-id="a1819-111">您可以通过将 <xref:System.Diagnostics.TraceListener> 实例添加到集合或从集合中删除实例来自定义跟踪输出的目标 <xref:System.Diagnostics.Trace.Listeners%2A> 。</span><span class="sxs-lookup"><span data-stu-id="a1819-111">You can customize the tracing output's target by adding <xref:System.Diagnostics.TraceListener> instances to or removing instances from the <xref:System.Diagnostics.Trace.Listeners%2A> collection.</span></span> <span data-ttu-id="a1819-112"><xref:System.Diagnostics.Trace.Listeners%2A>集合由 <xref:System.Diagnostics.Debug> 和 <xref:System.Diagnostics.Trace> 类共享; 将跟踪侦听器添加到任一类会将侦听器添加到这两个类中。</span><span class="sxs-lookup"><span data-stu-id="a1819-112">The <xref:System.Diagnostics.Trace.Listeners%2A> collection is shared by both the <xref:System.Diagnostics.Debug> and the <xref:System.Diagnostics.Trace> classes; adding a trace listener to either class adds the listener to both.</span></span> <span data-ttu-id="a1819-113">默认情况下，使用类发出跟踪输出 <xref:System.Diagnostics.DefaultTraceListener> 。</span><span class="sxs-lookup"><span data-stu-id="a1819-113">By default, trace output is emitted using the <xref:System.Diagnostics.DefaultTraceListener> class.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a1819-114">如果跟踪侦听器使用的资源不可用，则在跟踪时将跟踪侦听器添加到 <xref:System.Diagnostics.Trace.Listeners%2A> 集合可能导致引发异常。</span><span class="sxs-lookup"><span data-stu-id="a1819-114">Adding a trace listener to the <xref:System.Diagnostics.Trace.Listeners%2A> collection can cause an exception to be thrown while tracing, if a resource used by the trace listener is not available.</span></span> <span data-ttu-id="a1819-115">条件和引发的异常依赖于跟踪侦听器，在本主题中无法枚举。</span><span class="sxs-lookup"><span data-stu-id="a1819-115">The conditions and the exception thrown depend on the trace listener and cannot be enumerated in this topic.</span></span> <span data-ttu-id="a1819-116"><xref:System.Diagnostics.Trace>在块中调用方法以 `try` / `catch` 检测和处理跟踪侦听器中的任何异常可能会很有用。</span><span class="sxs-lookup"><span data-stu-id="a1819-116">It may be useful to place calls to the <xref:System.Diagnostics.Trace> methods in `try`/`catch` blocks to detect and handle any exceptions from trace listeners.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a1819-117">如果将跟踪侦听器添加到部分受信任的代码，则您将收到 <xref:System.Security.SecurityException> 异常，因为添加跟踪侦听器需要 <xref:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode> 权限。</span><span class="sxs-lookup"><span data-stu-id="a1819-117">If you add trace listeners to partially trusted code, you will get a <xref:System.Security.SecurityException> exception, because adding trace listeners requires <xref:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode> permission.</span></span> <span data-ttu-id="a1819-118">若要跟踪正在 Visual Studio 的沙盒中运行的部分受信任的代码，请不要添加跟踪侦听器。</span><span class="sxs-lookup"><span data-stu-id="a1819-118">To trace partially trusted code that is running in a sandbox in Visual Studio, do not add trace listeners.</span></span> <span data-ttu-id="a1819-119">请改为 <xref:System.Diagnostics.Trace> <xref:System.Diagnostics.Debug> 在**输出**窗口中查看和消息。</span><span class="sxs-lookup"><span data-stu-id="a1819-119">Instead, view the <xref:System.Diagnostics.Trace> and <xref:System.Diagnostics.Debug> messages in the **Output** window.</span></span>  
  
 <span data-ttu-id="a1819-120"><xref:System.Diagnostics.Trace>类提供属性以获取或设置的级别 <xref:System.Diagnostics.Trace.Indent%2A> 、 <xref:System.Diagnostics.Trace.IndentSize%2A> 和是否 <xref:System.Diagnostics.Trace.AutoFlush%2A> 在每次写入后。</span><span class="sxs-lookup"><span data-stu-id="a1819-120">The <xref:System.Diagnostics.Trace> class provides properties to get or set the level of <xref:System.Diagnostics.Trace.Indent%2A>, the <xref:System.Diagnostics.Trace.IndentSize%2A>, and whether to <xref:System.Diagnostics.Trace.AutoFlush%2A> after each write.</span></span>  
  
 <span data-ttu-id="a1819-121">若要为 <xref:System.Diagnostics.Trace.AutoFlush%2A> 设置 <xref:System.Diagnostics.Trace.IndentSize%2A> 和 <xref:System.Diagnostics.Trace> ，你可以编辑与你的应用程序的名称对应的配置文件。</span><span class="sxs-lookup"><span data-stu-id="a1819-121">To set the <xref:System.Diagnostics.Trace.AutoFlush%2A> and <xref:System.Diagnostics.Trace.IndentSize%2A> for <xref:System.Diagnostics.Trace>, you can edit the configuration file that corresponds to the name of your application.</span></span> <span data-ttu-id="a1819-122">配置文件的格式应类似于以下示例：</span><span class="sxs-lookup"><span data-stu-id="a1819-122">The configuration file should be formatted like the following example:</span></span>  
  
```xml  
<configuration>  
  <system.diagnostics>  
    <trace autoflush="false" indentsize="3" />  
  </system.diagnostics>  
</configuration>  
```  
  
 <span data-ttu-id="a1819-123"><xref:System.Diagnostics.ConditionalAttribute>特性应用于的方法 <xref:System.Diagnostics.Trace> 。</span><span class="sxs-lookup"><span data-stu-id="a1819-123">The <xref:System.Diagnostics.ConditionalAttribute> attribute is applied to the methods of <xref:System.Diagnostics.Trace>.</span></span> <span data-ttu-id="a1819-124">支持 <xref:System.Diagnostics.ConditionalAttribute> 忽略对这些方法的调用的编译器，除非 "TRACE" 被定义为条件编译符号。</span><span class="sxs-lookup"><span data-stu-id="a1819-124">Compilers that support <xref:System.Diagnostics.ConditionalAttribute> ignore calls to these methods unless "TRACE" is defined as a conditional compilation symbol.</span></span> <span data-ttu-id="a1819-125">请参阅编译器的文档，以确定是否 <xref:System.Diagnostics.ConditionalAttribute> 支持以及用于定义条件编译符号的语法。</span><span class="sxs-lookup"><span data-stu-id="a1819-125">Refer to a compiler's documentation to determine whether <xref:System.Diagnostics.ConditionalAttribute> is supported and the syntax for defining a conditional compilation symbol.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a1819-126">在 Visual Studio 项目中，默认情况下，为调试版本定义“DEBUG”条件编译符号，并为调试版本和发行版本定义“TRACE”符号。</span><span class="sxs-lookup"><span data-stu-id="a1819-126">In Visual Studio projects, by default, the "DEBUG" conditional compilation symbol is defined for debug builds, and the "TRACE" symbol is defined for both debug and release builds.</span></span> <span data-ttu-id="a1819-127">有关如何禁用此行为的信息，请参阅 Visual Studio 文档。</span><span class="sxs-lookup"><span data-stu-id="a1819-127">For information about how to disable this behavior, see the Visual Studio documentation.</span></span>  
  
 <span data-ttu-id="a1819-128">若要在 C# 中定义“TRACE”条件编译符号，请在使用命令行编译代码时将 `/d:TRACE` 选项添加到编译器命令行，或将 `#define TRACE` 添加到文件顶部。</span><span class="sxs-lookup"><span data-stu-id="a1819-128">To define the "TRACE" conditional compilation symbol in C#, add the `/d:TRACE` option to the compiler command line when you compile your code using a command line, or add `#define TRACE` to the top of your file.</span></span> <span data-ttu-id="a1819-129">在 Visual Basic 中，将 `/d:TRACE=True` 选项添加到编译器命令行或添加 `#Const TRACE=True` 到文件。</span><span class="sxs-lookup"><span data-stu-id="a1819-129">In Visual Basic, add the `/d:TRACE=True` option to the compiler command line or add `#Const TRACE=True` to the file.</span></span>  
  
 <span data-ttu-id="a1819-130"><xref:System.Diagnostics.ConditionalAttribute>c + + 编译器不支持。</span><span class="sxs-lookup"><span data-stu-id="a1819-130"><xref:System.Diagnostics.ConditionalAttribute> is not supported by the C++ compiler.</span></span> <span data-ttu-id="a1819-131">若要提供等效的功能，必须在块中包含对方法的调用 <xref:System.Diagnostics.Trace> `#if defined(TRACE) ... #endif` ，并将 `/DTRACE` 选项添加到编译器命令行或添加 `#define TRACE` 到文件中。</span><span class="sxs-lookup"><span data-stu-id="a1819-131">To provide equivalent functionality, you must enclose calls to the methods of <xref:System.Diagnostics.Trace> in an `#if defined(TRACE) ... #endif` block, and add the `/DTRACE` option to the compiler command line or add `#define TRACE` to the file.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1819-132">下面的示例使用 <xref:System.Diagnostics.Trace> 来指示程序执行的开始和结束。</span><span class="sxs-lookup"><span data-stu-id="a1819-132">The following example uses <xref:System.Diagnostics.Trace> to indicate the beginning and the end of a program's execution.</span></span> <span data-ttu-id="a1819-133">该示例还使用 <xref:System.Diagnostics.Trace.Indent%2A?displayProperty=nameWithType> 和 <xref:System.Diagnostics.Trace.Unindent%2A?displayProperty=nameWithType> 方法来区分跟踪输出。</span><span class="sxs-lookup"><span data-stu-id="a1819-133">The example also uses the <xref:System.Diagnostics.Trace.Indent%2A?displayProperty=nameWithType> and <xref:System.Diagnostics.Trace.Unindent%2A?displayProperty=nameWithType> methods to distinguish the tracing output.</span></span> <span data-ttu-id="a1819-134">有关使用的更完整示例 <xref:System.Diagnostics.Trace> ，请参阅[如何：向应用程序代码添加跟踪语句](/dotnet/framework/debug-trace-profile/how-to-add-trace-statements-to-application-code)。</span><span class="sxs-lookup"><span data-stu-id="a1819-134">For a more complete example of the use of <xref:System.Diagnostics.Trace>, see [How to: Add Trace Statements to Application Code](/dotnet/framework/debug-trace-profile/how-to-add-trace-statements-to-application-code).</span></span>  
  
 [!code-cpp[Classic Trace Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Trace Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Trace Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Trace Example/CS/source.cs#1)]
 [!code-vb[Classic Trace Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Trace Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="a1819-135">此类型是线程安全的。</span><span class="sxs-lookup"><span data-stu-id="a1819-135">This type is thread safe.</span></span></threadsafe>
    <altmember cref="T:System.Diagnostics.Debug" />
    <altmember cref="T:System.Diagnostics.Switch" />
    <altmember cref="T:System.Diagnostics.BooleanSwitch" />
    <altmember cref="T:System.Diagnostics.TraceSwitch" />
    <altmember cref="T:System.Diagnostics.TraceListener" />
    <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
    <altmember cref="T:System.Diagnostics.EventLogTraceListener" />
    <altmember cref="T:System.Diagnostics.TraceListenerCollection" />
    <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
  </Docs>
  <Members>
    <MemberGroup MemberName="Assert">
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="a1819-136">检查条件 ；如果条件为 <see langword="false" />，则输出消息，并显示一个消息框，其中显示调用堆栈。</span><span class="sxs-lookup"><span data-stu-id="a1819-136">Checks for a condition; if the condition is <see langword="false" />, outputs messages and displays a message box that shows the call stack.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Assert">
      <MemberSignature Language="C#" Value="public static void Assert (bool condition);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Assert(bool condition) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Trace.Assert(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Assert (condition As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Assert(bool condition);" />
      <MemberSignature Language="F#" Value="static member Assert : bool -&gt; unit" Usage="System.Diagnostics.Trace.Assert condition" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Diagnostics.Conditional("TRACE")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.Conditional("TRACE")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="condition"><span data-ttu-id="a1819-137">要计算的条件表达式。</span><span class="sxs-lookup"><span data-stu-id="a1819-137">The conditional expression to evaluate.</span></span> <span data-ttu-id="a1819-138">如果条件为 <see langword="true" />，则不会发送失败消息，也不显示消息框。</span><span class="sxs-lookup"><span data-stu-id="a1819-138">If the condition is <see langword="true" />, a failure message is not sent and the message box is not displayed.</span></span></param>
        <summary><span data-ttu-id="a1819-139">检查条件 ；如果条件为 <see langword="false" />，则显示一个消息框，其中显示调用堆栈。</span><span class="sxs-lookup"><span data-stu-id="a1819-139">Checks for a condition; if the condition is <see langword="false" />, displays a message box that shows the call stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1819-140"><xref:System.Diagnostics.Trace.Assert%2A?displayProperty=nameWithType>如果要在发布版本中进行断言，请使用方法。</span><span class="sxs-lookup"><span data-stu-id="a1819-140">Use the <xref:System.Diagnostics.Trace.Assert%2A?displayProperty=nameWithType> method if you want to do assertions in release builds.</span></span> <span data-ttu-id="a1819-141"><xref:System.Diagnostics.Debug.Assert%2A?displayProperty=nameWithType>方法仅适用于调试版本。</span><span class="sxs-lookup"><span data-stu-id="a1819-141">The <xref:System.Diagnostics.Debug.Assert%2A?displayProperty=nameWithType> method works only in debug builds.</span></span> <span data-ttu-id="a1819-142">有关详细信息，请参阅[托管代码中的断言](/visualstudio/debugger/assertions-in-managed-code)。</span><span class="sxs-lookup"><span data-stu-id="a1819-142">For more information, see [Assertions in Managed Code](/visualstudio/debugger/assertions-in-managed-code).</span></span>  
  
 <span data-ttu-id="a1819-143">通常， <xref:System.Diagnostics.Trace.Assert%28System.Boolean%29> 方法用于标识程序开发过程中的逻辑错误。</span><span class="sxs-lookup"><span data-stu-id="a1819-143">Typically, the <xref:System.Diagnostics.Trace.Assert%28System.Boolean%29> method is used to identify logic errors during program development.</span></span> <span data-ttu-id="a1819-144"><xref:System.Diagnostics.Trace.Assert%28System.Boolean%29>计算条件。</span><span class="sxs-lookup"><span data-stu-id="a1819-144"><xref:System.Diagnostics.Trace.Assert%28System.Boolean%29> evaluates the condition.</span></span> <span data-ttu-id="a1819-145">如果结果为 `false` ，则它会将失败消息发送到该 <xref:System.Diagnostics.Trace.Listeners%2A> 集合。</span><span class="sxs-lookup"><span data-stu-id="a1819-145">If the result is `false`, it sends a failure message to the <xref:System.Diagnostics.Trace.Listeners%2A> collection.</span></span> <span data-ttu-id="a1819-146">可以通过将添加 <xref:System.Diagnostics.TraceListener> 到集合或从集合中删除一个来自定义此行为 <xref:System.Diagnostics.Trace.Listeners%2A> 。</span><span class="sxs-lookup"><span data-stu-id="a1819-146">You can customize this behavior by adding a <xref:System.Diagnostics.TraceListener> to, or removing one from, the <xref:System.Diagnostics.Trace.Listeners%2A> collection.</span></span>  
  
 <span data-ttu-id="a1819-147">当应用程序在用户界面模式下运行时，它将显示一个消息框，其中显示带有文件和行号的调用堆栈。</span><span class="sxs-lookup"><span data-stu-id="a1819-147">When the application runs in user-interface mode, it displays a message box that shows the call stack with file and line numbers.</span></span> <span data-ttu-id="a1819-148">消息框包含三个按钮： "**中止**"、"**重试**" 和 "**忽略**"。</span><span class="sxs-lookup"><span data-stu-id="a1819-148">The message box contains three buttons: **Abort**, **Retry**, and **Ignore**.</span></span> <span data-ttu-id="a1819-149">单击 "**中止**" 按钮将终止应用程序。</span><span class="sxs-lookup"><span data-stu-id="a1819-149">Clicking the **Abort** button terminates the application.</span></span> <span data-ttu-id="a1819-150">如果你的应用程序在调试器中运行，则单击 "**重试**" 会将你发送到调试器中的代码，如果不是，则单击 "提供" 以打开调试器。</span><span class="sxs-lookup"><span data-stu-id="a1819-150">Clicking **Retry** sends you to the code in the debugger if your application is running in a debugger, or offers to open a debugger if it is not.</span></span> <span data-ttu-id="a1819-151">单击 "**忽略**" 将继续执行代码中的下一个指令。</span><span class="sxs-lookup"><span data-stu-id="a1819-151">Clicking **Ignore** continues with the next instruction in the code.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a1819-152">消息框的显示取决于是否存在 <xref:System.Diagnostics.DefaultTraceListener> 。</span><span class="sxs-lookup"><span data-stu-id="a1819-152">The display of the message box depends on the presence of the <xref:System.Diagnostics.DefaultTraceListener>.</span></span> <span data-ttu-id="a1819-153">如果不 <xref:System.Diagnostics.DefaultTraceListener> 在 <xref:System.Diagnostics.Trace.Listeners%2A> 集合中，则不显示消息框。</span><span class="sxs-lookup"><span data-stu-id="a1819-153">If the <xref:System.Diagnostics.DefaultTraceListener> is not in the <xref:System.Diagnostics.Trace.Listeners%2A> collection, the message box is not displayed.</span></span> <span data-ttu-id="a1819-154"><xref:System.Diagnostics.DefaultTraceListener>可以通过[ &lt; &gt; 清除](/dotnet/framework/configure-apps/file-schema/trace-debug/clear-element-for-listeners-for-trace)、 [ &lt; 删除 &gt; ](/dotnet/framework/configure-apps/file-schema/trace-debug/remove-element-for-listeners-for-trace)或调用 <xref:System.Diagnostics.TraceListenerCollection.Clear%2A> <xref:System.Diagnostics.Trace.Listeners%2A> 属性 () 来删除 `System.Diagnostics.Trace.Listeners.Clear()` 。</span><span class="sxs-lookup"><span data-stu-id="a1819-154">The <xref:System.Diagnostics.DefaultTraceListener> can be removed by the [&lt;clear&gt;](/dotnet/framework/configure-apps/file-schema/trace-debug/clear-element-for-listeners-for-trace), the [&lt;remove&gt;](/dotnet/framework/configure-apps/file-schema/trace-debug/remove-element-for-listeners-for-trace), or by calling the <xref:System.Diagnostics.TraceListenerCollection.Clear%2A> method on the <xref:System.Diagnostics.Trace.Listeners%2A> property (`System.Diagnostics.Trace.Listeners.Clear()`).</span></span>  
  
 <span data-ttu-id="a1819-155">你可以 <xref:System.Diagnostics.DefaultTraceListener> 在配置文件中更改与你的应用程序的名称相对应的行为。</span><span class="sxs-lookup"><span data-stu-id="a1819-155">You can change the behavior of the <xref:System.Diagnostics.DefaultTraceListener> in the configuration file that corresponds to the name of your application.</span></span> <span data-ttu-id="a1819-156">在此文件中，您可以启用和禁用断言消息框或设置 <xref:System.Diagnostics.DefaultTraceListener.LogFileName%2A?displayProperty=nameWithType> 属性。</span><span class="sxs-lookup"><span data-stu-id="a1819-156">In this file, you can enable and disable the assert message box or set the <xref:System.Diagnostics.DefaultTraceListener.LogFileName%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="a1819-157">配置文件的格式应如下所示：</span><span class="sxs-lookup"><span data-stu-id="a1819-157">The configuration file should be formatted as follows:</span></span>  
  
```xml  
<configuration>  
  <system.diagnostics>  
    <switches>  
      <add name="mySwitch" value="4"/>  
    </switches>  
    <trace autoflush="false" indentsize="4"/>  
    <assert assertuienabled="true" logfilename=".\TraceLog.txt"/>  
  </system.diagnostics>  
</configuration>  
```  
  
   
  
## Examples  
 <span data-ttu-id="a1819-158">下面的示例为数组创建索引。</span><span class="sxs-lookup"><span data-stu-id="a1819-158">The following example creates an index for an array.</span></span> <span data-ttu-id="a1819-159">然后执行某些操作来设置索引的值。</span><span class="sxs-lookup"><span data-stu-id="a1819-159">Then some action is performed that sets the value of the index.</span></span> <span data-ttu-id="a1819-160">接下来，代码调用 <xref:System.Diagnostics.Trace.Assert%2A> 来验证索引值是否有效。</span><span class="sxs-lookup"><span data-stu-id="a1819-160">Next the code calls <xref:System.Diagnostics.Trace.Assert%2A> to verify the index value is valid.</span></span> <span data-ttu-id="a1819-161">如果无效，则 <xref:System.Diagnostics.Trace.Assert%2A> 输出调用堆栈。</span><span class="sxs-lookup"><span data-stu-id="a1819-161">If it is not valid, the <xref:System.Diagnostics.Trace.Assert%2A> outputs the call stack.</span></span>  
  
 [!code-cpp[Classic Trace.Assert Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Trace.Assert Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Trace.Assert Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Trace.Assert Example/CS/source.cs#1)]
 [!code-vb[Classic Trace.Assert Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Trace.Assert Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Assert">
      <MemberSignature Language="C#" Value="public static void Assert (bool condition, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Assert(bool condition, string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Trace.Assert(System.Boolean,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Assert (condition As Boolean, message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Assert(bool condition, System::String ^ message);" />
      <MemberSignature Language="F#" Value="static member Assert : bool * string -&gt; unit" Usage="System.Diagnostics.Trace.Assert (condition, message)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Diagnostics.Conditional("TRACE")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.Conditional("TRACE")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="condition"><span data-ttu-id="a1819-162">要计算的条件表达式。</span><span class="sxs-lookup"><span data-stu-id="a1819-162">The conditional expression to evaluate.</span></span> <span data-ttu-id="a1819-163">如果条件为 <see langword="true" />，则不会发送指定消息，也不显示消息框。</span><span class="sxs-lookup"><span data-stu-id="a1819-163">If the condition is <see langword="true" />, the specified message is not sent and the message box is not displayed.</span></span></param>
        <param name="message"><span data-ttu-id="a1819-164">要发送到 <see cref="P:System.Diagnostics.Trace.Listeners" /> 集合的消息。</span><span class="sxs-lookup"><span data-stu-id="a1819-164">The message to send to the <see cref="P:System.Diagnostics.Trace.Listeners" /> collection.</span></span></param>
        <summary><span data-ttu-id="a1819-165">检查条件；如果条件为 <see langword="false" />，则输出指定消息并显示指示调用堆栈的消息框。</span><span class="sxs-lookup"><span data-stu-id="a1819-165">Checks for a condition; if the condition is <see langword="false" />, outputs a specified message and displays a message box that shows the call stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1819-166"><xref:System.Diagnostics.Trace.Assert%2A?displayProperty=nameWithType>如果要在发布版本中进行断言，请使用方法。</span><span class="sxs-lookup"><span data-stu-id="a1819-166">Use the <xref:System.Diagnostics.Trace.Assert%2A?displayProperty=nameWithType> method if you want to do assertions in release builds.</span></span> <span data-ttu-id="a1819-167"><xref:System.Diagnostics.Debug.Assert%2A?displayProperty=nameWithType>方法仅适用于调试版本。</span><span class="sxs-lookup"><span data-stu-id="a1819-167">The <xref:System.Diagnostics.Debug.Assert%2A?displayProperty=nameWithType> method works only in debug builds.</span></span> <span data-ttu-id="a1819-168">有关详细信息，请参阅[托管代码中的断言](/visualstudio/debugger/assertions-in-managed-code)。</span><span class="sxs-lookup"><span data-stu-id="a1819-168">For more information, see [Assertions in Managed Code](/visualstudio/debugger/assertions-in-managed-code).</span></span>  
  
 <span data-ttu-id="a1819-169">通常， <xref:System.Diagnostics.Trace.Assert%28System.Boolean%2CSystem.String%29> 方法用于标识程序开发过程中的逻辑错误。</span><span class="sxs-lookup"><span data-stu-id="a1819-169">Typically, the <xref:System.Diagnostics.Trace.Assert%28System.Boolean%2CSystem.String%29> method is used to identify logic errors during program development.</span></span> <span data-ttu-id="a1819-170"><xref:System.Diagnostics.Trace.Assert%28System.Boolean%2CSystem.String%29>计算条件。</span><span class="sxs-lookup"><span data-stu-id="a1819-170"><xref:System.Diagnostics.Trace.Assert%28System.Boolean%2CSystem.String%29> evaluates the condition.</span></span> <span data-ttu-id="a1819-171">如果结果为 `false` ，则将指定的诊断消息发送到该 <xref:System.Diagnostics.Trace.Listeners%2A> 集合。</span><span class="sxs-lookup"><span data-stu-id="a1819-171">If the result is `false`, it sends the specified diagnostic message to the <xref:System.Diagnostics.Trace.Listeners%2A> collection.</span></span> <span data-ttu-id="a1819-172">可以通过将添加 <xref:System.Diagnostics.TraceListener> 到集合或从集合中删除一个来自定义此行为 <xref:System.Diagnostics.Trace.Listeners%2A> 。</span><span class="sxs-lookup"><span data-stu-id="a1819-172">You can customize this behavior by adding a <xref:System.Diagnostics.TraceListener> to, or removing one from, the <xref:System.Diagnostics.Trace.Listeners%2A> collection.</span></span>  
  
 <span data-ttu-id="a1819-173">当应用程序在用户界面模式下运行时，它将显示一个消息框，其中显示带有文件和行号的调用堆栈。</span><span class="sxs-lookup"><span data-stu-id="a1819-173">When the application runs in user-interface mode, it displays a message box that shows the call stack with file and line numbers.</span></span> <span data-ttu-id="a1819-174">消息框包含三个按钮： "**中止**"、"**重试**" 和 "**忽略**"。</span><span class="sxs-lookup"><span data-stu-id="a1819-174">The message box contains three buttons: **Abort**, **Retry**, and **Ignore**.</span></span> <span data-ttu-id="a1819-175">单击 "**中止**" 按钮将终止应用程序。</span><span class="sxs-lookup"><span data-stu-id="a1819-175">Clicking the **Abort** button terminates the application.</span></span> <span data-ttu-id="a1819-176">如果你的应用程序在调试器中运行，则单击 "**重试**" 会将你发送到调试器中的代码，如果不是，则单击 "提供" 以打开调试器。</span><span class="sxs-lookup"><span data-stu-id="a1819-176">Clicking **Retry** sends you to the code in the debugger if your application is running in a debugger, or offers to open a debugger if it is not.</span></span> <span data-ttu-id="a1819-177">单击 "**忽略**" 将继续执行代码中的下一个指令。</span><span class="sxs-lookup"><span data-stu-id="a1819-177">Clicking **Ignore** continues with the next instruction in the code.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a1819-178">消息框的显示取决于是否存在 <xref:System.Diagnostics.DefaultTraceListener> 。</span><span class="sxs-lookup"><span data-stu-id="a1819-178">The display of the message box depends on the presence of the <xref:System.Diagnostics.DefaultTraceListener>.</span></span> <span data-ttu-id="a1819-179">如果不 <xref:System.Diagnostics.DefaultTraceListener> 在 <xref:System.Diagnostics.Trace.Listeners%2A> 集合中，则不显示消息框。</span><span class="sxs-lookup"><span data-stu-id="a1819-179">If the <xref:System.Diagnostics.DefaultTraceListener> is not in the <xref:System.Diagnostics.Trace.Listeners%2A> collection, the message box is not displayed.</span></span> <span data-ttu-id="a1819-180"><xref:System.Diagnostics.DefaultTraceListener>可以通过[ &lt; &gt; 清除](/dotnet/framework/configure-apps/file-schema/trace-debug/clear-element-for-listeners-for-trace)、 [ &lt; 删除 &gt; ](/dotnet/framework/configure-apps/file-schema/trace-debug/remove-element-for-listeners-for-trace)或调用 <xref:System.Diagnostics.TraceListenerCollection.Clear%2A> <xref:System.Diagnostics.Trace.Listeners%2A> 属性 () 来删除 `System.Diagnostics.Trace.Listeners.Clear()` 。</span><span class="sxs-lookup"><span data-stu-id="a1819-180">The <xref:System.Diagnostics.DefaultTraceListener> can be removed by the [&lt;clear&gt;](/dotnet/framework/configure-apps/file-schema/trace-debug/clear-element-for-listeners-for-trace), the [&lt;remove&gt;](/dotnet/framework/configure-apps/file-schema/trace-debug/remove-element-for-listeners-for-trace), or by calling the <xref:System.Diagnostics.TraceListenerCollection.Clear%2A> method on the <xref:System.Diagnostics.Trace.Listeners%2A> property (`System.Diagnostics.Trace.Listeners.Clear()`).</span></span>  
  
 <span data-ttu-id="a1819-181">你可以 <xref:System.Diagnostics.DefaultTraceListener> 在配置文件中更改与你的应用程序的名称相对应的行为。</span><span class="sxs-lookup"><span data-stu-id="a1819-181">You can change the behavior of the <xref:System.Diagnostics.DefaultTraceListener> in the configuration file that corresponds to the name of your application.</span></span> <span data-ttu-id="a1819-182">在此文件中，您可以启用和禁用断言消息框或设置 <xref:System.Diagnostics.DefaultTraceListener.LogFileName%2A?displayProperty=nameWithType> 属性。</span><span class="sxs-lookup"><span data-stu-id="a1819-182">In this file, you can enable and disable the assert message box or set the <xref:System.Diagnostics.DefaultTraceListener.LogFileName%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="a1819-183">配置文件的格式应如下所示：</span><span class="sxs-lookup"><span data-stu-id="a1819-183">The configuration file should be formatted as follows:</span></span>  
  
```xml  
<configuration>  
  <system.diagnostics>  
    <switches>  
      <add name="mySwitch" value="4"/>  
    </switches>  
    <trace autoflush="false" indentsize="4"/>  
    <assert assertuienabled="true" logfilename=".\TraceLog.txt"/>  
  </system.diagnostics>  
</configuration>  
```  
  
   
  
## Examples  
 <span data-ttu-id="a1819-184">下面的示例将检查该 `type` 参数是否有效。</span><span class="sxs-lookup"><span data-stu-id="a1819-184">The following example checks to see that the `type` parameter is valid.</span></span> <span data-ttu-id="a1819-185">如果 `type` 传入的为 `null` ，则 <xref:System.Diagnostics.Trace.Assert%2A> 输出一条消息。</span><span class="sxs-lookup"><span data-stu-id="a1819-185">If the `type` passed in is `null`, the <xref:System.Diagnostics.Trace.Assert%2A> outputs a message.</span></span>  
  
 [!code-cpp[Classic Trace.Assert1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Trace.Assert1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Trace.Assert1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Trace.Assert1 Example/CS/source.cs#1)]
 [!code-vb[Classic Trace.Assert1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Trace.Assert1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Assert">
      <MemberSignature Language="C#" Value="public static void Assert (bool condition, string message, string detailMessage);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Assert(bool condition, string message, string detailMessage) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Trace.Assert(System.Boolean,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Assert (condition As Boolean, message As String, detailMessage As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Assert(bool condition, System::String ^ message, System::String ^ detailMessage);" />
      <MemberSignature Language="F#" Value="static member Assert : bool * string * string -&gt; unit" Usage="System.Diagnostics.Trace.Assert (condition, message, detailMessage)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Diagnostics.Conditional("TRACE")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.Conditional("TRACE")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="detailMessage" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="condition"><span data-ttu-id="a1819-186">要计算的条件表达式。</span><span class="sxs-lookup"><span data-stu-id="a1819-186">The conditional expression to evaluate.</span></span> <span data-ttu-id="a1819-187">如果条件为 <see langword="true" />，则不会发送指定的消息，也不显示消息框。</span><span class="sxs-lookup"><span data-stu-id="a1819-187">If the condition is <see langword="true" />, the specified messages are not sent and the message box is not displayed.</span></span></param>
        <param name="message"><span data-ttu-id="a1819-188">要发送到 <see cref="P:System.Diagnostics.Trace.Listeners" /> 集合的消息。</span><span class="sxs-lookup"><span data-stu-id="a1819-188">The message to send to the <see cref="P:System.Diagnostics.Trace.Listeners" /> collection.</span></span></param>
        <param name="detailMessage"><span data-ttu-id="a1819-189">要发送到 <see cref="P:System.Diagnostics.Trace.Listeners" /> 集合的详细消息。</span><span class="sxs-lookup"><span data-stu-id="a1819-189">The detailed message to send to the <see cref="P:System.Diagnostics.Trace.Listeners" /> collection.</span></span></param>
        <summary><span data-ttu-id="a1819-190">检查条件 ；如果条件为 <see langword="false" />，则输出两条指定消息，并显示一个消息框，其中显示调用堆栈。</span><span class="sxs-lookup"><span data-stu-id="a1819-190">Checks for a condition; if the condition is <see langword="false" />, outputs two specified messages and displays a message box that shows the call stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1819-191"><xref:System.Diagnostics.Trace.Assert%2A?displayProperty=nameWithType>如果要在发布版本中进行断言，请使用方法。</span><span class="sxs-lookup"><span data-stu-id="a1819-191">Use the <xref:System.Diagnostics.Trace.Assert%2A?displayProperty=nameWithType> method if you want to do assertions in release builds.</span></span> <span data-ttu-id="a1819-192"><xref:System.Diagnostics.Debug.Assert%2A?displayProperty=nameWithType>方法仅适用于调试版本。</span><span class="sxs-lookup"><span data-stu-id="a1819-192">The <xref:System.Diagnostics.Debug.Assert%2A?displayProperty=nameWithType> method works only in debug builds.</span></span> <span data-ttu-id="a1819-193">有关详细信息，请参阅[托管代码中的断言](/visualstudio/debugger/assertions-in-managed-code)。</span><span class="sxs-lookup"><span data-stu-id="a1819-193">For more information, see [Assertions in Managed Code](/visualstudio/debugger/assertions-in-managed-code).</span></span>  
  
 <span data-ttu-id="a1819-194">通常， <xref:System.Diagnostics.Trace.Assert%28System.Boolean%2CSystem.String%2CSystem.String%29> 方法用于标识程序开发过程中的逻辑错误。</span><span class="sxs-lookup"><span data-stu-id="a1819-194">Typically, the <xref:System.Diagnostics.Trace.Assert%28System.Boolean%2CSystem.String%2CSystem.String%29> method is used to identify logic errors during program development.</span></span> <span data-ttu-id="a1819-195"><xref:System.Diagnostics.Trace.Assert%2A>计算条件。</span><span class="sxs-lookup"><span data-stu-id="a1819-195"><xref:System.Diagnostics.Trace.Assert%2A> evaluates the condition.</span></span> <span data-ttu-id="a1819-196">如果结果为 `false` ，则它会向集合发送指定的诊断消息和详细消息 <xref:System.Diagnostics.Trace.Listeners%2A> 。</span><span class="sxs-lookup"><span data-stu-id="a1819-196">If the result is `false`, it sends the specified diagnostic message and detailed message to the <xref:System.Diagnostics.Trace.Listeners%2A> collection.</span></span> <span data-ttu-id="a1819-197">可以通过将添加 <xref:System.Diagnostics.TraceListener> 到集合或从集合中删除一个来自定义此行为 <xref:System.Diagnostics.Trace.Listeners%2A> 。</span><span class="sxs-lookup"><span data-stu-id="a1819-197">You can customize this behavior by adding a <xref:System.Diagnostics.TraceListener> to, or removing one from, the <xref:System.Diagnostics.Trace.Listeners%2A> collection.</span></span>  
  
 <span data-ttu-id="a1819-198">当应用程序在用户界面模式下运行时，它将显示一个消息框，其中显示带有文件和行号的调用堆栈。</span><span class="sxs-lookup"><span data-stu-id="a1819-198">When the application runs in user-interface mode, it displays a message box that shows the call stack with file and line numbers.</span></span> <span data-ttu-id="a1819-199">消息框包含三个按钮： "**中止**"、"**重试**" 和 "**忽略**"。</span><span class="sxs-lookup"><span data-stu-id="a1819-199">The message box contains three buttons: **Abort**, **Retry**, and **Ignore**.</span></span> <span data-ttu-id="a1819-200">单击 "**中止**" 按钮将终止应用程序。</span><span class="sxs-lookup"><span data-stu-id="a1819-200">Clicking the **Abort** button terminates the application.</span></span> <span data-ttu-id="a1819-201">如果你的应用程序在调试器中运行，则单击 "**重试**" 会将你发送到调试器中的代码，如果不是，则单击 "提供" 以打开调试器。</span><span class="sxs-lookup"><span data-stu-id="a1819-201">Clicking **Retry** sends you to the code in the debugger if your application is running in a debugger, or offers to open a debugger if it is not.</span></span> <span data-ttu-id="a1819-202">单击 "**忽略**" 将继续执行代码中的下一个指令。</span><span class="sxs-lookup"><span data-stu-id="a1819-202">Clicking **Ignore** continues with the next instruction in the code.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a1819-203">消息框的显示取决于是否存在 <xref:System.Diagnostics.DefaultTraceListener> 。</span><span class="sxs-lookup"><span data-stu-id="a1819-203">The display of the message box depends on the presence of the <xref:System.Diagnostics.DefaultTraceListener>.</span></span> <span data-ttu-id="a1819-204">如果不 <xref:System.Diagnostics.DefaultTraceListener> 在 <xref:System.Diagnostics.Trace.Listeners%2A> 集合中，则不显示消息框。</span><span class="sxs-lookup"><span data-stu-id="a1819-204">If the <xref:System.Diagnostics.DefaultTraceListener> is not in the <xref:System.Diagnostics.Trace.Listeners%2A> collection, the message box is not displayed.</span></span> <span data-ttu-id="a1819-205"><xref:System.Diagnostics.DefaultTraceListener>可以通过[ &lt; &gt; 清除](/dotnet/framework/configure-apps/file-schema/trace-debug/clear-element-for-listeners-for-trace)、 [ &lt; 删除 &gt; ](/dotnet/framework/configure-apps/file-schema/trace-debug/remove-element-for-listeners-for-trace)或调用 <xref:System.Diagnostics.TraceListenerCollection.Clear%2A> <xref:System.Diagnostics.Trace.Listeners%2A> 属性 () 来删除 `System.Diagnostics.Trace.Listeners.Clear()` 。</span><span class="sxs-lookup"><span data-stu-id="a1819-205">The <xref:System.Diagnostics.DefaultTraceListener> can be removed by the [&lt;clear&gt;](/dotnet/framework/configure-apps/file-schema/trace-debug/clear-element-for-listeners-for-trace), the [&lt;remove&gt;](/dotnet/framework/configure-apps/file-schema/trace-debug/remove-element-for-listeners-for-trace), or by calling the <xref:System.Diagnostics.TraceListenerCollection.Clear%2A> method on the <xref:System.Diagnostics.Trace.Listeners%2A> property (`System.Diagnostics.Trace.Listeners.Clear()`).</span></span>  
  
 <span data-ttu-id="a1819-206">你可以 <xref:System.Diagnostics.DefaultTraceListener> 在配置文件中更改与你的应用程序的名称相对应的行为。</span><span class="sxs-lookup"><span data-stu-id="a1819-206">You can change the behavior of the <xref:System.Diagnostics.DefaultTraceListener> in the configuration file that corresponds to the name of your application.</span></span> <span data-ttu-id="a1819-207">在此文件中，您可以启用和禁用断言消息框或设置 <xref:System.Diagnostics.DefaultTraceListener.LogFileName%2A?displayProperty=nameWithType> 属性。</span><span class="sxs-lookup"><span data-stu-id="a1819-207">In this file, you can enable and disable the assert message box or set the <xref:System.Diagnostics.DefaultTraceListener.LogFileName%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="a1819-208">配置文件的格式应如下所示：</span><span class="sxs-lookup"><span data-stu-id="a1819-208">The configuration file should be formatted as follows:</span></span>  
  
```xml  
<configuration>  
  <system.diagnostics>  
    <switches>  
      <add name="mySwitch" value="4"/>  
    </switches>  
    <trace autoflush="false" indentsize="4"/>  
    <assert assertuienabled="true" logfilename=".\TraceLog.txt"/>  
  </system.diagnostics>  
</configuration>  
```  
  
   
  
## Examples  
 <span data-ttu-id="a1819-209">下面的示例将检查该 `type` 参数是否有效。</span><span class="sxs-lookup"><span data-stu-id="a1819-209">The following example checks to see that the `type` parameter is valid.</span></span> <span data-ttu-id="a1819-210">如果 `type` 传入的为 `null` ，则 <xref:System.Diagnostics.Trace.Assert%2A> 输出一条消息。</span><span class="sxs-lookup"><span data-stu-id="a1819-210">If the `type` passed in is `null`, the <xref:System.Diagnostics.Trace.Assert%2A> outputs a message.</span></span>  
  
 [!code-cpp[Classic Trace.Assert2 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Trace.Assert2 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Trace.Assert2 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Trace.Assert2 Example/CS/source.cs#1)]
 [!code-vb[Classic Trace.Assert2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Trace.Assert2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="AutoFlush">
      <MemberSignature Language="C#" Value="public static bool AutoFlush { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property bool AutoFlush" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Trace.AutoFlush" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property AutoFlush As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool AutoFlush { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AutoFlush : bool with get, set" Usage="System.Diagnostics.Trace.AutoFlush" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1819-211">获取或设置每次写入后是否应在 <see cref="P:System.Diagnostics.Trace.Listeners" /> 上调用 <see cref="M:System.Diagnostics.Trace.Flush" /></span><span class="sxs-lookup"><span data-stu-id="a1819-211">Gets or sets whether <see cref="M:System.Diagnostics.Trace.Flush" /> should be called on the <see cref="P:System.Diagnostics.Trace.Listeners" /> after every write.</span></span></summary>
        <value><span data-ttu-id="a1819-212">如果每次写入后在 <see cref="P:System.Diagnostics.Trace.Listeners" /> 上调用 <see cref="M:System.Diagnostics.Trace.Flush" />，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="a1819-212"><see langword="true" /> if <see cref="M:System.Diagnostics.Trace.Flush" /> is called on the <see cref="P:System.Diagnostics.Trace.Listeners" /> after every write; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1819-213">默认值为 `false`。</span><span class="sxs-lookup"><span data-stu-id="a1819-213">The default is `false`.</span></span>  
  
 <span data-ttu-id="a1819-214">除非显式调用或，否则刷新流将不会刷新其基础编码器 <xref:System.Diagnostics.Trace.Flush%2A> <xref:System.Diagnostics.Trace.Close%2A> 。</span><span class="sxs-lookup"><span data-stu-id="a1819-214">Flushing the stream will not flush its underlying encoder unless you explicitly call <xref:System.Diagnostics.Trace.Flush%2A> or <xref:System.Diagnostics.Trace.Close%2A>.</span></span> <span data-ttu-id="a1819-215">如果设置为，则 <xref:System.Diagnostics.Trace.AutoFlush%2A> `true` 表示将数据从缓冲区刷新到流，但不会刷新编码器状态。</span><span class="sxs-lookup"><span data-stu-id="a1819-215">Setting <xref:System.Diagnostics.Trace.AutoFlush%2A> to `true` means that data will be flushed from the buffer to the stream, but the encoder state will not be flushed.</span></span> <span data-ttu-id="a1819-216">这样，编码器就可以将其状态保留 (部分字符) 以便它能够正确地编码下一个字符块。</span><span class="sxs-lookup"><span data-stu-id="a1819-216">This allows the encoder to keep its state (partial characters) so that it can encode the next block of characters correctly.</span></span> <span data-ttu-id="a1819-217">此方案影响 UTF8 和 UTF7，其中某些字符只能在编码器接收到相邻字符后编码。</span><span class="sxs-lookup"><span data-stu-id="a1819-217">This scenario affects UTF8 and UTF7 where certain characters can only be encoded after the encoder receives the adjacent character or characters.</span></span>  
  
 <span data-ttu-id="a1819-218">若要为 <xref:System.Diagnostics.Trace.AutoFlush%2A> 设置 <xref:System.Diagnostics.Trace.IndentSize%2A> 和 <xref:System.Diagnostics.Trace> ，还可以编辑与应用程序名称对应的配置文件。</span><span class="sxs-lookup"><span data-stu-id="a1819-218">To set the <xref:System.Diagnostics.Trace.AutoFlush%2A> and <xref:System.Diagnostics.Trace.IndentSize%2A> for <xref:System.Diagnostics.Trace>, you can also edit the configuration file that corresponds to the name of your application.</span></span> <span data-ttu-id="a1819-219">配置文件的格式应类似于以下示例：</span><span class="sxs-lookup"><span data-stu-id="a1819-219">The configuration file should be formatted like the following example:</span></span>  
  
```xml  
<configuration>  
  <system.diagnostics>  
    <trace autoflush="false" indentsize="3" />  
  </system.diagnostics>  
</configuration>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public static void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Trace.Close" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Close();" />
      <MemberSignature Language="F#" Value="static member Close : unit -&gt; unit" Usage="System.Diagnostics.Trace.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Diagnostics.Conditional("TRACE")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.Conditional("TRACE")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a1819-220">刷新输出缓冲区，然后关闭 <see cref="P:System.Diagnostics.Trace.Listeners" />。</span><span class="sxs-lookup"><span data-stu-id="a1819-220">Flushes the output buffer, and then closes the <see cref="P:System.Diagnostics.Trace.Listeners" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1819-221">在输出转到文件（例如）时使用此方法 <xref:System.Diagnostics.TextWriterTraceListener> 。</span><span class="sxs-lookup"><span data-stu-id="a1819-221">Use this method when the output is going to a file, such as to the <xref:System.Diagnostics.TextWriterTraceListener>.</span></span>  
  
 <span data-ttu-id="a1819-222">除非显式调用或，否则刷新流将不会刷新其基础编码器 <xref:System.Diagnostics.Trace.Flush%2A> <xref:System.Diagnostics.Trace.Close%2A> 。</span><span class="sxs-lookup"><span data-stu-id="a1819-222">Flushing the stream will not flush its underlying encoder unless you explicitly call <xref:System.Diagnostics.Trace.Flush%2A> or <xref:System.Diagnostics.Trace.Close%2A>.</span></span> <span data-ttu-id="a1819-223">如果设置为，则 <xref:System.Diagnostics.Trace.AutoFlush%2A> `true` 表示将数据从缓冲区刷新到流，但不会刷新编码器状态。</span><span class="sxs-lookup"><span data-stu-id="a1819-223">Setting <xref:System.Diagnostics.Trace.AutoFlush%2A> to `true` means that data will be flushed from the buffer to the stream, but the encoder state will not be flushed.</span></span> <span data-ttu-id="a1819-224">这样，编码器就可以将其状态保留 (部分字符) 以便它能够正确地编码下一个字符块。</span><span class="sxs-lookup"><span data-stu-id="a1819-224">This allows the encoder to keep its state (partial characters) so that it can encode the next block of characters correctly.</span></span> <span data-ttu-id="a1819-225">此方案影响 UTF8 和 UTF7，其中某些字符只能在编码器接收到相邻字符后编码。</span><span class="sxs-lookup"><span data-stu-id="a1819-225">This scenario affects UTF8 and UTF7 where certain characters can only be encoded after the encoder receives the adjacent character or characters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1819-226">下面的示例创建一个 <xref:System.Diagnostics.TextWriterTraceListener> 名为的 `myTextListener` 。</span><span class="sxs-lookup"><span data-stu-id="a1819-226">The following example creates a <xref:System.Diagnostics.TextWriterTraceListener> named `myTextListener`.</span></span> <span data-ttu-id="a1819-227">`myTextListener`使用 <xref:System.IO.StreamWriter> 调用的 `myOutputWriter` 来写入名为的文件 `TestFile.txt` 。</span><span class="sxs-lookup"><span data-stu-id="a1819-227">`myTextListener` uses a <xref:System.IO.StreamWriter> called `myOutputWriter` to write to a file named `TestFile.txt`.</span></span> <span data-ttu-id="a1819-228">该示例创建文件、流和文本编写器，将一行文本写入文件，然后刷新并关闭输出。</span><span class="sxs-lookup"><span data-stu-id="a1819-228">The example creates the file, stream and text writer, writes one line of text to the file, and then flushes and closes the output.</span></span>  
  
 [!code-cpp[Classic Trace.Flush Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Trace.Flush Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Trace.Flush Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Trace.Flush Example/CS/source.cs#1)]
 [!code-vb[Classic Trace.Flush Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Trace.Flush Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="CorrelationManager">
      <MemberSignature Language="C#" Value="public static System.Diagnostics.CorrelationManager? CorrelationManager { get; }" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".property class System.Diagnostics.CorrelationManager CorrelationManager" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Trace.CorrelationManager" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CorrelationManager As CorrelationManager" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Diagnostics::CorrelationManager ^ CorrelationManager { System::Diagnostics::CorrelationManager ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CorrelationManager : System.Diagnostics.CorrelationManager" Usage="System.Diagnostics.Trace.CorrelationManager" />
      <MemberSignature Language="C#" Value="public static System.Diagnostics.CorrelationManager CorrelationManager { get; }" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.CorrelationManager</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1819-229">获取此跟踪的线程的相关管理器。</span><span class="sxs-lookup"><span data-stu-id="a1819-229">Gets the correlation manager for the thread for this trace.</span></span></summary>
        <value><span data-ttu-id="a1819-230">与此跟踪的线程关联的 <see cref="T:System.Diagnostics.CorrelationManager" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="a1819-230">The <see cref="T:System.Diagnostics.CorrelationManager" /> object associated with the thread for this trace.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="a1819-231">这是大多数应用程序都不应使用的高级属性。</span><span class="sxs-lookup"><span data-stu-id="a1819-231">This is an advanced property that most applications should not have occasion to use.</span></span>  
  
 <span data-ttu-id="a1819-232"><xref:System.Diagnostics.CorrelationManager>类提供用于在线程绑定的上下文中存储逻辑操作标识的方法，并使用存储的标识自动标记线程生成的每个跟踪事件。</span><span class="sxs-lookup"><span data-stu-id="a1819-232">The <xref:System.Diagnostics.CorrelationManager> class provides methods used to store a logical operation identity in a thread-bound context and automatically tag each trace event generated by the thread with the stored identity.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.CorrelationManager" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Fail">
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="a1819-233">发出一条错误消息。</span><span class="sxs-lookup"><span data-stu-id="a1819-233">Emits an error message.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Fail">
      <MemberSignature Language="C#" Value="public static void Fail (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Fail(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Trace.Fail(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Fail (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Fail(System::String ^ message);" />
      <MemberSignature Language="F#" Value="static member Fail : string -&gt; unit" Usage="System.Diagnostics.Trace.Fail message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Diagnostics.Conditional("TRACE")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.Conditional("TRACE")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message"><span data-ttu-id="a1819-234">要发出的消息。</span><span class="sxs-lookup"><span data-stu-id="a1819-234">A message to emit.</span></span></param>
        <summary><span data-ttu-id="a1819-235">发出指定的错误消息。</span><span class="sxs-lookup"><span data-stu-id="a1819-235">Emits the specified error message.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1819-236">默认跟踪侦听器的默认行为是在 `message` 用户界面模式下运行应用程序时将参数输出到消息框，并将其输出到 <xref:System.Diagnostics.TraceListener> 集合中的实例 <xref:System.Diagnostics.Trace.Listeners%2A> 。</span><span class="sxs-lookup"><span data-stu-id="a1819-236">The default behavior for the default trace listener is to output the `message` parameter to a message box when the application runs in user-interface mode, and to the <xref:System.Diagnostics.TraceListener> instances in the <xref:System.Diagnostics.Trace.Listeners%2A> collection.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a1819-237">消息框的显示取决于是否存在 <xref:System.Diagnostics.DefaultTraceListener> 。</span><span class="sxs-lookup"><span data-stu-id="a1819-237">The display of the message box is dependent on the presence of the <xref:System.Diagnostics.DefaultTraceListener>.</span></span> <span data-ttu-id="a1819-238">如果不 <xref:System.Diagnostics.DefaultTraceListener> 在 <xref:System.Diagnostics.Trace.Listeners%2A> 集合中，则不显示消息框。</span><span class="sxs-lookup"><span data-stu-id="a1819-238">If the <xref:System.Diagnostics.DefaultTraceListener> is not in the <xref:System.Diagnostics.Trace.Listeners%2A> collection, the message box is not displayed.</span></span> <span data-ttu-id="a1819-239"><xref:System.Diagnostics.DefaultTraceListener>可以通过[ &lt; &gt; 清除](/dotnet/framework/configure-apps/file-schema/trace-debug/clear-element-for-listeners-for-trace)、 [ &lt; 删除 &gt; ](/dotnet/framework/configure-apps/file-schema/trace-debug/remove-element-for-listeners-for-trace)或调用 <xref:System.Diagnostics.TraceListenerCollection.Clear%2A> <xref:System.Diagnostics.Trace.Listeners%2A> 属性 () 来删除 `System.Diagnostics.Trace.Listeners.Clear()` 。</span><span class="sxs-lookup"><span data-stu-id="a1819-239">The <xref:System.Diagnostics.DefaultTraceListener> can be removed by the [&lt;clear&gt;](/dotnet/framework/configure-apps/file-schema/trace-debug/clear-element-for-listeners-for-trace), the [&lt;remove&gt;](/dotnet/framework/configure-apps/file-schema/trace-debug/remove-element-for-listeners-for-trace), or by calling the <xref:System.Diagnostics.TraceListenerCollection.Clear%2A> method on the <xref:System.Diagnostics.Trace.Listeners%2A> property (`System.Diagnostics.Trace.Listeners.Clear()`).</span></span>  
  
 <span data-ttu-id="a1819-240">可以通过将添加 <xref:System.Diagnostics.TraceListener> 到集合或从集合中删除一个来自定义此行为 <xref:System.Diagnostics.Trace.Listeners%2A> 。</span><span class="sxs-lookup"><span data-stu-id="a1819-240">You can customize this behavior by adding a <xref:System.Diagnostics.TraceListener> to, or by removing one from, the <xref:System.Diagnostics.Trace.Listeners%2A> collection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1819-241">下面的示例使用 <xref:System.Diagnostics.Trace.Fail%2A> 方法在异常处理过程中打印消息。</span><span class="sxs-lookup"><span data-stu-id="a1819-241">The following example uses the <xref:System.Diagnostics.Trace.Fail%2A> method to print a message during exception handling.</span></span>  
  
 [!code-cpp[Classic Trace.Fail Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Trace.Fail Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Trace.Fail Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Trace.Fail Example/CS/source.cs#1)]
 [!code-vb[Classic Trace.Fail Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Trace.Fail Example/VB/source.vb#1)]  
  
 <span data-ttu-id="a1819-242">你还可以 <xref:System.Diagnostics.Trace.Fail%2A> 在 switch 语句中使用方法。</span><span class="sxs-lookup"><span data-stu-id="a1819-242">You can also use the <xref:System.Diagnostics.Trace.Fail%2A> method in a switch statement.</span></span>  
  
 [!code-cpp[Classic Trace.Fail Example#2](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Trace.Fail Example/CPP/source.cpp#2)]
 [!code-csharp[Classic Trace.Fail Example#2](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Trace.Fail Example/CS/source.cs#2)]
 [!code-vb[Classic Trace.Fail Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Trace.Fail Example/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Fail">
      <MemberSignature Language="C#" Value="public static void Fail (string message, string detailMessage);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Fail(string message, string detailMessage) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Trace.Fail(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Fail (message As String, detailMessage As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Fail(System::String ^ message, System::String ^ detailMessage);" />
      <MemberSignature Language="F#" Value="static member Fail : string * string -&gt; unit" Usage="System.Diagnostics.Trace.Fail (message, detailMessage)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Diagnostics.Conditional("TRACE")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.Conditional("TRACE")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="detailMessage" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message"><span data-ttu-id="a1819-243">要发出的消息。</span><span class="sxs-lookup"><span data-stu-id="a1819-243">A message to emit.</span></span></param>
        <param name="detailMessage"><span data-ttu-id="a1819-244">要发出的详细消息。</span><span class="sxs-lookup"><span data-stu-id="a1819-244">A detailed message to emit.</span></span></param>
        <summary><span data-ttu-id="a1819-245">发出一条错误消息和一条详细的错误消息。</span><span class="sxs-lookup"><span data-stu-id="a1819-245">Emits an error message, and a detailed error message.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1819-246">默认情况下，默认行为是在 `message` `detailedMessage` 应用程序在用户界面模式下运行时，默认跟踪侦听器将参数和参数输出到消息框中，并将参数输出到 <xref:System.Diagnostics.TraceListener> 集合中的实例 <xref:System.Diagnostics.Trace.Listeners%2A> 。</span><span class="sxs-lookup"><span data-stu-id="a1819-246">The default behavior is for the default trace listener to output the `message` parameter and the `detailedMessage` parameter to a message box when the application runs in user-interface mode, and to the <xref:System.Diagnostics.TraceListener> instances in the <xref:System.Diagnostics.Trace.Listeners%2A> collection.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a1819-247">消息框的显示取决于是否存在 <xref:System.Diagnostics.DefaultTraceListener> 。</span><span class="sxs-lookup"><span data-stu-id="a1819-247">The display of the message box is dependent on the presence of the <xref:System.Diagnostics.DefaultTraceListener>.</span></span> <span data-ttu-id="a1819-248">如果不 <xref:System.Diagnostics.DefaultTraceListener> 在 <xref:System.Diagnostics.Trace.Listeners%2A> 集合中，则不显示消息框。</span><span class="sxs-lookup"><span data-stu-id="a1819-248">If the <xref:System.Diagnostics.DefaultTraceListener> is not in the <xref:System.Diagnostics.Trace.Listeners%2A> collection, the message box is not displayed.</span></span> <span data-ttu-id="a1819-249"><xref:System.Diagnostics.DefaultTraceListener>可以通过[ &lt; &gt; 清除](/dotnet/framework/configure-apps/file-schema/trace-debug/clear-element-for-listeners-for-trace)、 [ &lt; 删除 &gt; ](/dotnet/framework/configure-apps/file-schema/trace-debug/remove-element-for-listeners-for-trace)或调用 <xref:System.Diagnostics.TraceListenerCollection.Clear%2A> <xref:System.Diagnostics.Trace.Listeners%2A> 属性 () 来删除 `System.Diagnostics.Trace.Listeners.Clear()` 。</span><span class="sxs-lookup"><span data-stu-id="a1819-249">The <xref:System.Diagnostics.DefaultTraceListener> can be removed by the [&lt;clear&gt;](/dotnet/framework/configure-apps/file-schema/trace-debug/clear-element-for-listeners-for-trace), the [&lt;remove&gt;](/dotnet/framework/configure-apps/file-schema/trace-debug/remove-element-for-listeners-for-trace), or by calling the <xref:System.Diagnostics.TraceListenerCollection.Clear%2A> method on the <xref:System.Diagnostics.Trace.Listeners%2A> property (`System.Diagnostics.Trace.Listeners.Clear()`).</span></span>  
  
 <span data-ttu-id="a1819-250">可以通过将添加 <xref:System.Diagnostics.TraceListener> 到集合或从集合中删除一个来自定义此行为 <xref:System.Diagnostics.Trace.Listeners%2A> 。</span><span class="sxs-lookup"><span data-stu-id="a1819-250">You can customize this behavior by adding a <xref:System.Diagnostics.TraceListener> to, or by removing one from, the <xref:System.Diagnostics.Trace.Listeners%2A> collection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1819-251">下面的示例使用 <xref:System.Diagnostics.Trace.Fail%2A> 方法在异常处理过程中打印消息。</span><span class="sxs-lookup"><span data-stu-id="a1819-251">The following example uses the <xref:System.Diagnostics.Trace.Fail%2A> method to print a message during exception handling.</span></span>  
  
 [!code-cpp[Classic Trace.Fail1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Trace.Fail1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Trace.Fail1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Trace.Fail1 Example/CS/source.cs#1)]
 [!code-vb[Classic Trace.Fail1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Trace.Fail1 Example/VB/source.vb#1)]  
  
 <span data-ttu-id="a1819-252">你还可以 <xref:System.Diagnostics.Trace.Fail%2A> 在 switch 语句中使用方法。</span><span class="sxs-lookup"><span data-stu-id="a1819-252">You can also use the <xref:System.Diagnostics.Trace.Fail%2A> method in a switch statement.</span></span>  
  
 [!code-cpp[Classic Trace.Fail1 Example#2](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Trace.Fail1 Example/CPP/source.cpp#2)]
 [!code-csharp[Classic Trace.Fail1 Example#2](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Trace.Fail1 Example/CS/source.cs#2)]
 [!code-vb[Classic Trace.Fail1 Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Trace.Fail1 Example/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public static void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Flush() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Trace.Flush" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Flush ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Flush();" />
      <MemberSignature Language="F#" Value="static member Flush : unit -&gt; unit" Usage="System.Diagnostics.Trace.Flush " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Diagnostics.Conditional("TRACE")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.Conditional("TRACE")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a1819-253">刷新输出缓冲区，并使放入缓冲区中的数据写入 <see cref="P:System.Diagnostics.Trace.Listeners" />。</span><span class="sxs-lookup"><span data-stu-id="a1819-253">Flushes the output buffer, and causes buffered data to be written to the <see cref="P:System.Diagnostics.Trace.Listeners" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1819-254">除非显式调用或，否则刷新流将不会刷新其基础编码器 <xref:System.Diagnostics.Trace.Flush%2A> <xref:System.Diagnostics.Trace.Close%2A> 。</span><span class="sxs-lookup"><span data-stu-id="a1819-254">Flushing the stream will not flush its underlying encoder unless you explicitly call <xref:System.Diagnostics.Trace.Flush%2A> or <xref:System.Diagnostics.Trace.Close%2A>.</span></span> <span data-ttu-id="a1819-255">如果设置为，则 <xref:System.Diagnostics.Trace.AutoFlush%2A> `true` 表示将数据从缓冲区刷新到流，但不会刷新编码器状态。</span><span class="sxs-lookup"><span data-stu-id="a1819-255">Setting <xref:System.Diagnostics.Trace.AutoFlush%2A> to `true` means that data will be flushed from the buffer to the stream, but the encoder state will not be flushed.</span></span> <span data-ttu-id="a1819-256">这样，编码器就可以将其状态保留 (部分字符) 以便它能够正确地编码下一个字符块。</span><span class="sxs-lookup"><span data-stu-id="a1819-256">This allows the encoder to keep its state (partial characters) so that it can encode the next block of characters correctly.</span></span> <span data-ttu-id="a1819-257">此方案影响 UTF8 和 UTF7，其中某些字符只能在编码器接收到相邻字符后编码。</span><span class="sxs-lookup"><span data-stu-id="a1819-257">This scenario affects UTF8 and UTF7 where certain characters can only be encoded after the encoder receives the adjacent character or characters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1819-258">下面的示例创建一个 <xref:System.Diagnostics.TextWriterTraceListener> 名为的 `myTextListener` 。</span><span class="sxs-lookup"><span data-stu-id="a1819-258">The following example creates a <xref:System.Diagnostics.TextWriterTraceListener> named `myTextListener`.</span></span> <span data-ttu-id="a1819-259">`myTextListener`使用 <xref:System.IO.StreamWriter> 调用的 `myOutputWriter` 来写入名为的文件 `TestFile.txt` 。</span><span class="sxs-lookup"><span data-stu-id="a1819-259">`myTextListener` uses a <xref:System.IO.StreamWriter> called `myOutputWriter` to write to a file named `TestFile.txt`.</span></span> <span data-ttu-id="a1819-260">该示例创建文件、流和文本编写器，将一行文本写入文件，然后刷新并关闭输出。</span><span class="sxs-lookup"><span data-stu-id="a1819-260">The example creates the file, stream and text writer, writes one line of text to the file, and then flushes and closes the output.</span></span>  
  
 [!code-cpp[Classic Trace.Flush Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Trace.Flush Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Trace.Flush Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Trace.Flush Example/CS/source.cs#1)]
 [!code-vb[Classic Trace.Flush Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Trace.Flush Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Indent">
      <MemberSignature Language="C#" Value="public static void Indent ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Indent() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Trace.Indent" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Indent ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Indent();" />
      <MemberSignature Language="F#" Value="static member Indent : unit -&gt; unit" Usage="System.Diagnostics.Trace.Indent " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Diagnostics.Conditional("TRACE")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.Conditional("TRACE")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a1819-261">将当前的 <see cref="P:System.Diagnostics.Trace.IndentLevel" /> 增加 1。</span><span class="sxs-lookup"><span data-stu-id="a1819-261">Increases the current <see cref="P:System.Diagnostics.Trace.IndentLevel" /> by one.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="a1819-262">下面的示例将递增和递减缩进级别并发出跟踪消息。</span><span class="sxs-lookup"><span data-stu-id="a1819-262">The following example increments and decrements the indent level and emits tracing messages.</span></span>  
  
 [!code-cpp[Classic Trace.IndentLevel Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Trace.IndentLevel Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Trace.IndentLevel Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Trace.IndentLevel Example/CS/source.cs#1)]
 [!code-vb[Classic Trace.IndentLevel Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Trace.IndentLevel Example/VB/source.vb#1)]  
  
 <span data-ttu-id="a1819-263">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="a1819-263">This example produces the following output:</span></span>  
  
```  
List of errors:  
     Error 1: File not found  
     Error 2: Directory not found  
End of list of errors  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Diagnostics.Trace.Unindent" />
        <altmember cref="P:System.Diagnostics.Trace.IndentLevel" />
        <altmember cref="P:System.Diagnostics.Trace.IndentSize" />
      </Docs>
    </Member>
    <Member MemberName="IndentLevel">
      <MemberSignature Language="C#" Value="public static int IndentLevel { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 IndentLevel" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Trace.IndentLevel" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property IndentLevel As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int IndentLevel { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.IndentLevel : int with get, set" Usage="System.Diagnostics.Trace.IndentLevel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1819-264">获取或设置缩进级别。</span><span class="sxs-lookup"><span data-stu-id="a1819-264">Gets or sets the indent level.</span></span></summary>
        <value><span data-ttu-id="a1819-265">缩进级别。</span><span class="sxs-lookup"><span data-stu-id="a1819-265">The indent level.</span></span> <span data-ttu-id="a1819-266">默认值为 0。</span><span class="sxs-lookup"><span data-stu-id="a1819-266">The default is zero.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1819-267"><xref:System.Diagnostics.Trace.IndentLevel%2A>属性表示应用大小缩进的次数 <xref:System.Diagnostics.Trace.IndentSize%2A> 。</span><span class="sxs-lookup"><span data-stu-id="a1819-267">The <xref:System.Diagnostics.Trace.IndentLevel%2A> property represents the number of times the indent of size <xref:System.Diagnostics.Trace.IndentSize%2A> is applied.</span></span> <span data-ttu-id="a1819-268">此属性基于每个线程/每个请求存储。</span><span class="sxs-lookup"><span data-stu-id="a1819-268">This property is stored on per-thread/per-request basis.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1819-269">下面的示例将递增和递减缩进级别并发出跟踪消息。</span><span class="sxs-lookup"><span data-stu-id="a1819-269">The following example increments and decrements the indent level and emits tracing messages.</span></span>  
  
 [!code-cpp[Classic Trace.IndentLevel Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Trace.IndentLevel Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Trace.IndentLevel Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Trace.IndentLevel Example/CS/source.cs#1)]
 [!code-vb[Classic Trace.IndentLevel Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Trace.IndentLevel Example/VB/source.vb#1)]  
  
 <span data-ttu-id="a1819-270">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="a1819-270">This example produces the following output:</span></span>  
  
```  
  
List of errors:  
     Error 1: File not found  
     Error 2: Directory not found  
End of list of errors  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.Trace.IndentSize" />
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="IndentSize">
      <MemberSignature Language="C#" Value="public static int IndentSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 IndentSize" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Trace.IndentSize" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property IndentSize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int IndentSize { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.IndentSize : int with get, set" Usage="System.Diagnostics.Trace.IndentSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1819-271">获取或设置缩进的空格数。</span><span class="sxs-lookup"><span data-stu-id="a1819-271">Gets or sets the number of spaces in an indent.</span></span></summary>
        <value><span data-ttu-id="a1819-272">缩进的空格数。</span><span class="sxs-lookup"><span data-stu-id="a1819-272">The number of spaces in an indent.</span></span> <span data-ttu-id="a1819-273">默认值为四。</span><span class="sxs-lookup"><span data-stu-id="a1819-273">The default is four.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1819-274">将 <xref:System.Diagnostics.TextWriterTraceListener> 此数字解释为空格。</span><span class="sxs-lookup"><span data-stu-id="a1819-274">A <xref:System.Diagnostics.TextWriterTraceListener> interprets this number as spaces.</span></span> <span data-ttu-id="a1819-275"><xref:System.Diagnostics.EventLogTraceListener>忽略此值。</span><span class="sxs-lookup"><span data-stu-id="a1819-275">An <xref:System.Diagnostics.EventLogTraceListener> ignores this value.</span></span>  
  
 <span data-ttu-id="a1819-276">此属性基于每个线程/每个请求存储。</span><span class="sxs-lookup"><span data-stu-id="a1819-276">This property is stored on per-thread/per-request basis.</span></span>  
  
 <span data-ttu-id="a1819-277">若要为 <xref:System.Diagnostics.Trace.AutoFlush%2A> 设置 <xref:System.Diagnostics.Trace.IndentSize%2A> 和 <xref:System.Diagnostics.Trace> ，还可以编辑与应用程序名称对应的配置文件。</span><span class="sxs-lookup"><span data-stu-id="a1819-277">To set the <xref:System.Diagnostics.Trace.AutoFlush%2A> and <xref:System.Diagnostics.Trace.IndentSize%2A> for <xref:System.Diagnostics.Trace>, you can also edit the configuration file that corresponds to the name of your application.</span></span> <span data-ttu-id="a1819-278">配置文件的格式应类似于以下示例：</span><span class="sxs-lookup"><span data-stu-id="a1819-278">The configuration file should be formatted like the following example:</span></span>  
  
```xml  
<configuration>  
  <system.diagnostics>  
    <trace autoflush="false" indentsize="3" />  
  </system.diagnostics>  
</configuration>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.Trace.IndentLevel" />
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Listeners">
      <MemberSignature Language="C#" Value="public static System.Diagnostics.TraceListenerCollection? Listeners { get; }" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".property class System.Diagnostics.TraceListenerCollection Listeners" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Trace.Listeners" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Listeners As TraceListenerCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Diagnostics::TraceListenerCollection ^ Listeners { System::Diagnostics::TraceListenerCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Listeners : System.Diagnostics.TraceListenerCollection" Usage="System.Diagnostics.Trace.Listeners" />
      <MemberSignature Language="C#" Value="public static System.Diagnostics.TraceListenerCollection Listeners { get; }" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.TraceListenerCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1819-279">获取正在监视跟踪输出的侦听器集合。</span><span class="sxs-lookup"><span data-stu-id="a1819-279">Gets the collection of listeners that is monitoring the trace output.</span></span></summary>
        <value><span data-ttu-id="a1819-280">表示监视跟踪输出的类型 <see cref="T:System.Diagnostics.TraceListener" /> 集合的 <see cref="T:System.Diagnostics.TraceListenerCollection" />。</span><span class="sxs-lookup"><span data-stu-id="a1819-280">A <see cref="T:System.Diagnostics.TraceListenerCollection" /> that represents a collection of type <see cref="T:System.Diagnostics.TraceListener" /> monitoring the trace output.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1819-281">侦听器从跟踪输出生成格式输出。</span><span class="sxs-lookup"><span data-stu-id="a1819-281">The listeners produce formatted output from the trace output.</span></span> <span data-ttu-id="a1819-282">默认情况下，集合包含类的实例 <xref:System.Diagnostics.DefaultTraceListener> 。</span><span class="sxs-lookup"><span data-stu-id="a1819-282">By default, the collection contains an instance of the <xref:System.Diagnostics.DefaultTraceListener> class.</span></span> <span data-ttu-id="a1819-283">如果要删除默认侦听器，请调用 <xref:System.Diagnostics.TraceListenerCollection.Remove%2A> 方法，并向其传递的实例 <xref:System.Diagnostics.DefaultTraceListener> 。</span><span class="sxs-lookup"><span data-stu-id="a1819-283">If you want to remove the default listener, call the <xref:System.Diagnostics.TraceListenerCollection.Remove%2A> method, and pass it the instance of the <xref:System.Diagnostics.DefaultTraceListener>.</span></span> <span data-ttu-id="a1819-284">若要将输出重定向到控制台窗口，请添加类的实例 <xref:System.Diagnostics.ConsoleTraceListener> 。</span><span class="sxs-lookup"><span data-stu-id="a1819-284">To redirect output to the console window, add an instance of the <xref:System.Diagnostics.ConsoleTraceListener> class.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a1819-285"><xref:System.Diagnostics.Trace.Listeners%2A>集合由 <xref:System.Diagnostics.Debug> 和 <xref:System.Diagnostics.Trace> 类共享; 将跟踪侦听器添加到任一类会将侦听器添加到这两个类中。</span><span class="sxs-lookup"><span data-stu-id="a1819-285">The <xref:System.Diagnostics.Trace.Listeners%2A> collection is shared by both the <xref:System.Diagnostics.Debug> and the <xref:System.Diagnostics.Trace> classes; adding a trace listener to either class adds the listener to both.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1819-286">下面的示例创建一个 <xref:System.Diagnostics.ConsoleTraceListener> 输出到控制台屏幕的。</span><span class="sxs-lookup"><span data-stu-id="a1819-286">The following example creates a <xref:System.Diagnostics.ConsoleTraceListener> that outputs to the console screen.</span></span> <span data-ttu-id="a1819-287">然后，该代码将新侦听器添加到 <xref:System.Diagnostics.Trace.Listeners%2A> 。</span><span class="sxs-lookup"><span data-stu-id="a1819-287">The code then adds the new listener to the <xref:System.Diagnostics.Trace.Listeners%2A>.</span></span>  
  
 [!code-cpp[Classic Trace.Listeners Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Trace.Listeners Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Trace.Listeners Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Trace.Listeners Example/CS/source.cs#1)]
 [!code-vb[Classic Trace.Listeners Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Trace.Listeners Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Refresh">
      <MemberSignature Language="C#" Value="public static void Refresh ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Refresh() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Trace.Refresh" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Refresh ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Refresh();" />
      <MemberSignature Language="F#" Value="static member Refresh : unit -&gt; unit" Usage="System.Diagnostics.Trace.Refresh " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a1819-288">刷新跟踪配置数据。</span><span class="sxs-lookup"><span data-stu-id="a1819-288">Refreshes the trace configuration data.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1819-289">在应用程序启动时捕获跟踪配置数据。</span><span class="sxs-lookup"><span data-stu-id="a1819-289">Trace configuration data is captured when the application is started.</span></span> <span data-ttu-id="a1819-290">如果在应用程序启动后更改了配置数据，请调用 <xref:System.Diagnostics.Trace.Refresh%2A> 方法来更新跟踪配置数据。</span><span class="sxs-lookup"><span data-stu-id="a1819-290">If the configuration data is changed after the application is started, call the <xref:System.Diagnostics.Trace.Refresh%2A> method to update the trace configuration data.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="TraceError">
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="a1819-291">将错误信息写入 <see cref="P:System.Diagnostics.Trace.Listeners" /> 集合中的跟踪侦听器中。</span><span class="sxs-lookup"><span data-stu-id="a1819-291">Writes error information to the trace listeners in the <see cref="P:System.Diagnostics.Trace.Listeners" /> collection.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TraceError">
      <MemberSignature Language="C#" Value="public static void TraceError (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void TraceError(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Trace.TraceError(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub TraceError (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void TraceError(System::String ^ message);" />
      <MemberSignature Language="F#" Value="static member TraceError : string -&gt; unit" Usage="System.Diagnostics.Trace.TraceError message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Diagnostics.Conditional("TRACE")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.Conditional("TRACE")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" Index="0" FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="message"><span data-ttu-id="a1819-292">要写入的信息性消息。</span><span class="sxs-lookup"><span data-stu-id="a1819-292">The informative message to write.</span></span></param>
        <summary><span data-ttu-id="a1819-293">使用指定消息，将错误消息写入 <see cref="P:System.Diagnostics.Trace.Listeners" /> 集合中的跟踪侦听器。</span><span class="sxs-lookup"><span data-stu-id="a1819-293">Writes an error message to the trace listeners in the <see cref="P:System.Diagnostics.Trace.Listeners" /> collection using the specified message.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1819-294"><xref:System.Diagnostics.Trace.TraceError%2A>`TraceEvent`用 trace 事件类型为每个跟踪侦听器调用方法 <xref:System.Diagnostics.TraceEventType.Error> ，并将信息性消息作为消息字符串传递。</span><span class="sxs-lookup"><span data-stu-id="a1819-294"><xref:System.Diagnostics.Trace.TraceError%2A> calls the `TraceEvent` method for each trace listener, with the trace event type <xref:System.Diagnostics.TraceEventType.Error>, passing the informative message as the message string.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="TraceError">
      <MemberSignature Language="C#" Value="public static void TraceError (string format, params object[]? args);" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void TraceError(string format, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Trace.TraceError(System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub TraceError (format As String, ParamArray args As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void TraceError(System::String ^ format, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="static member TraceError : string * obj[] -&gt; unit" Usage="System.Diagnostics.Trace.TraceError (format, args)" />
      <MemberSignature Language="C#" Value="public static void TraceError (string format, params object[] args);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Diagnostics.Conditional("TRACE")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.Conditional("TRACE")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" Index="0" FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="args" Type="System.Object[]" Index="1" FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <Attributes>
            <Attribute FrameworkAlternate="net-5.0">
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="format"><span data-ttu-id="a1819-295">一个格式字符串，其中包含零个或多个格式项，它们对应于 <paramref name="args" /> 数组中的对象。</span><span class="sxs-lookup"><span data-stu-id="a1819-295">A format string that contains zero or more format items, which correspond to objects in the <paramref name="args" /> array.</span></span></param>
        <param name="args"><span data-ttu-id="a1819-296">包含零个或多个要格式化的对象的 <see langword="object" /> 数组。</span><span class="sxs-lookup"><span data-stu-id="a1819-296">An <see langword="object" /> array containing zero or more objects to format.</span></span></param>
        <summary><span data-ttu-id="a1819-297">使用指定的对象数组和格式化信息，将错误消息写入 <see cref="P:System.Diagnostics.Trace.Listeners" /> 集合中的跟踪侦听器中。</span><span class="sxs-lookup"><span data-stu-id="a1819-297">Writes an error message to the trace listeners in the <see cref="P:System.Diagnostics.Trace.Listeners" /> collection using the specified array of objects and formatting information.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1819-298"><xref:System.Diagnostics.Trace.TraceError%2A>`TraceEvent`使用 trace 事件类型调用跟踪侦听器中的方法 <xref:System.Diagnostics.TraceEventType.Error> ，将消息内容作为包含格式信息的对象数组进行传递。</span><span class="sxs-lookup"><span data-stu-id="a1819-298"><xref:System.Diagnostics.Trace.TraceError%2A> calls the `TraceEvent` methods in the trace listeners with the trace event type <xref:System.Diagnostics.TraceEventType.Error>, passing the message content as an object array with formatting information.</span></span> <span data-ttu-id="a1819-299">有关 <xref:System.String.Format%2A> 和参数的详细信息，请参阅方法 `format` `args` 。</span><span class="sxs-lookup"><span data-stu-id="a1819-299">See the <xref:System.String.Format%2A> method for more information about the `format` and `args` parameters.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <MemberGroup MemberName="TraceInformation">
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="a1819-300">将信息性消息写入 <see cref="P:System.Diagnostics.Trace.Listeners" /> 集合中的跟踪侦听器中。</span><span class="sxs-lookup"><span data-stu-id="a1819-300">Writes an informational message to the trace listeners in the <see cref="P:System.Diagnostics.Trace.Listeners" /> collection.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TraceInformation">
      <MemberSignature Language="C#" Value="public static void TraceInformation (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void TraceInformation(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Trace.TraceInformation(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub TraceInformation (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void TraceInformation(System::String ^ message);" />
      <MemberSignature Language="F#" Value="static member TraceInformation : string -&gt; unit" Usage="System.Diagnostics.Trace.TraceInformation message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Diagnostics.Conditional("TRACE")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.Conditional("TRACE")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" Index="0" FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="message"><span data-ttu-id="a1819-301">要写入的信息性消息。</span><span class="sxs-lookup"><span data-stu-id="a1819-301">The informative message to write.</span></span></param>
        <summary><span data-ttu-id="a1819-302">使用指定消息，将信息性消息写入 <see cref="P:System.Diagnostics.Trace.Listeners" /> 集合中的跟踪侦听器中。</span><span class="sxs-lookup"><span data-stu-id="a1819-302">Writes an informational message to the trace listeners in the <see cref="P:System.Diagnostics.Trace.Listeners" /> collection using the specified message.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1819-303"><xref:System.Diagnostics.Trace.TraceInformation%2A>`TraceEvent`用 trace 事件类型为每个跟踪侦听器调用方法 <xref:System.Diagnostics.TraceEventType.Information> ，并将信息性消息作为消息字符串传递。</span><span class="sxs-lookup"><span data-stu-id="a1819-303"><xref:System.Diagnostics.Trace.TraceInformation%2A> calls the `TraceEvent` method for each trace listener, with the trace event type <xref:System.Diagnostics.TraceEventType.Information>, passing the informative message as the message string.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="TraceInformation">
      <MemberSignature Language="C#" Value="public static void TraceInformation (string format, params object[]? args);" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void TraceInformation(string format, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Trace.TraceInformation(System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub TraceInformation (format As String, ParamArray args As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void TraceInformation(System::String ^ format, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="static member TraceInformation : string * obj[] -&gt; unit" Usage="System.Diagnostics.Trace.TraceInformation (format, args)" />
      <MemberSignature Language="C#" Value="public static void TraceInformation (string format, params object[] args);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Diagnostics.Conditional("TRACE")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.Conditional("TRACE")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" Index="0" FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="args" Type="System.Object[]" Index="1" FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <Attributes>
            <Attribute FrameworkAlternate="net-5.0">
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="format"><span data-ttu-id="a1819-304">一个格式字符串，其中包含零个或多个格式项，它们对应于 <paramref name="args" /> 数组中的对象。</span><span class="sxs-lookup"><span data-stu-id="a1819-304">A format string that contains zero or more format items, which correspond to objects in the <paramref name="args" /> array.</span></span></param>
        <param name="args"><span data-ttu-id="a1819-305">包含零个或多个要格式化的对象的 <see langword="object" /> 数组。</span><span class="sxs-lookup"><span data-stu-id="a1819-305">An <see langword="object" /> array containing zero or more objects to format.</span></span></param>
        <summary><span data-ttu-id="a1819-306">使用指定的对象数组和格式化信息，将信息性消息写入 <see cref="P:System.Diagnostics.Trace.Listeners" /> 集合中的跟踪侦听器中。</span><span class="sxs-lookup"><span data-stu-id="a1819-306">Writes an informational message to the trace listeners in the <see cref="P:System.Diagnostics.Trace.Listeners" /> collection using the specified array of objects and formatting information.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1819-307"><xref:System.Diagnostics.Trace.TraceInformation%2A>`TraceEvent`使用 trace 事件类型调用跟踪侦听器中的方法 <xref:System.Diagnostics.TraceEventType.Information> ，将消息内容作为包含格式信息的对象数组进行传递。</span><span class="sxs-lookup"><span data-stu-id="a1819-307"><xref:System.Diagnostics.Trace.TraceInformation%2A> calls the `TraceEvent` methods in the trace listeners with the trace event type <xref:System.Diagnostics.TraceEventType.Information>, passing the message content as an object array with formatting information.</span></span> <span data-ttu-id="a1819-308">有关 <xref:System.String.Format%2A> 和参数的详细信息，请参阅方法 `format` `args` 。</span><span class="sxs-lookup"><span data-stu-id="a1819-308">See the <xref:System.String.Format%2A> method for more information about the `format` and `args` parameters.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <MemberGroup MemberName="TraceWarning">
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="a1819-309">将警告信息写入 <see cref="P:System.Diagnostics.Trace.Listeners" /> 集合中的跟踪侦听器。</span><span class="sxs-lookup"><span data-stu-id="a1819-309">Writes warning information to the trace listeners in the <see cref="P:System.Diagnostics.Trace.Listeners" /> collection.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TraceWarning">
      <MemberSignature Language="C#" Value="public static void TraceWarning (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void TraceWarning(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Trace.TraceWarning(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub TraceWarning (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void TraceWarning(System::String ^ message);" />
      <MemberSignature Language="F#" Value="static member TraceWarning : string -&gt; unit" Usage="System.Diagnostics.Trace.TraceWarning message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Diagnostics.Conditional("TRACE")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.Conditional("TRACE")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" Index="0" FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="message"><span data-ttu-id="a1819-310">要写入的信息性消息。</span><span class="sxs-lookup"><span data-stu-id="a1819-310">The informative message to write.</span></span></param>
        <summary><span data-ttu-id="a1819-311">使用指定的消息将警告消息写入 <see cref="P:System.Diagnostics.Trace.Listeners" /> 集合中的跟踪侦听器。</span><span class="sxs-lookup"><span data-stu-id="a1819-311">Writes a warning message to the trace listeners in the <see cref="P:System.Diagnostics.Trace.Listeners" /> collection using the specified message.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1819-312"><xref:System.Diagnostics.Trace.TraceWarning%2A>为 `TraceEvent` 包含跟踪事件类型的每个跟踪侦听器调用方法 <xref:System.Diagnostics.TraceEventType.Warning> ，并将信息性消息作为消息字符串传递。</span><span class="sxs-lookup"><span data-stu-id="a1819-312"><xref:System.Diagnostics.Trace.TraceWarning%2A> calls the `TraceEvent` method for each trace listener with the trace event type <xref:System.Diagnostics.TraceEventType.Warning>, passing the informative message as the message string.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="TraceWarning">
      <MemberSignature Language="C#" Value="public static void TraceWarning (string format, params object[]? args);" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void TraceWarning(string format, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Trace.TraceWarning(System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub TraceWarning (format As String, ParamArray args As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void TraceWarning(System::String ^ format, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="static member TraceWarning : string * obj[] -&gt; unit" Usage="System.Diagnostics.Trace.TraceWarning (format, args)" />
      <MemberSignature Language="C#" Value="public static void TraceWarning (string format, params object[] args);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Diagnostics.Conditional("TRACE")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.Conditional("TRACE")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" Index="0" FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="args" Type="System.Object[]" Index="1" FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <Attributes>
            <Attribute FrameworkAlternate="net-5.0">
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="format"><span data-ttu-id="a1819-313">一个格式字符串，其中包含零个或多个格式项，它们对应于 <paramref name="args" /> 数组中的对象。</span><span class="sxs-lookup"><span data-stu-id="a1819-313">A format string that contains zero or more format items, which correspond to objects in the <paramref name="args" /> array.</span></span></param>
        <param name="args"><span data-ttu-id="a1819-314">包含零个或多个要格式化的对象的 <see langword="object" /> 数组。</span><span class="sxs-lookup"><span data-stu-id="a1819-314">An <see langword="object" /> array containing zero or more objects to format.</span></span></param>
        <summary><span data-ttu-id="a1819-315">使用指定的对象数组和格式化信息，将警告消息写入 <see cref="P:System.Diagnostics.Trace.Listeners" /> 集合中的跟踪侦听器中。</span><span class="sxs-lookup"><span data-stu-id="a1819-315">Writes a warning message to the trace listeners in the <see cref="P:System.Diagnostics.Trace.Listeners" /> collection using the specified array of objects and formatting information.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1819-316"><xref:System.Diagnostics.Trace.TraceWarning%2A>`TraceEvent`使用 trace 事件类型调用跟踪侦听器中的方法 <xref:System.Diagnostics.TraceEventType.Warning> ，将消息内容作为包含格式信息的对象数组进行传递。</span><span class="sxs-lookup"><span data-stu-id="a1819-316"><xref:System.Diagnostics.Trace.TraceWarning%2A> calls the `TraceEvent` methods in the trace listeners with the trace event type <xref:System.Diagnostics.TraceEventType.Warning>, passing the message content as an object array with formatting information.</span></span> <span data-ttu-id="a1819-317">有关 <xref:System.String.Format%2A> 和参数的详细信息，请参阅方法 `format` `args` 。</span><span class="sxs-lookup"><span data-stu-id="a1819-317">See the <xref:System.String.Format%2A> method for more information about the `format` and `args` parameters.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Unindent">
      <MemberSignature Language="C#" Value="public static void Unindent ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Unindent() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Trace.Unindent" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Unindent ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Unindent();" />
      <MemberSignature Language="F#" Value="static member Unindent : unit -&gt; unit" Usage="System.Diagnostics.Trace.Unindent " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Diagnostics.Conditional("TRACE")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.Conditional("TRACE")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a1819-318">将当前的 <see cref="P:System.Diagnostics.Trace.IndentLevel" /> 减少 1。</span><span class="sxs-lookup"><span data-stu-id="a1819-318">Decreases the current <see cref="P:System.Diagnostics.Trace.IndentLevel" /> by one.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="a1819-319">下面的示例将递增和递减缩进级别并发出跟踪消息。</span><span class="sxs-lookup"><span data-stu-id="a1819-319">The following example increments and decrements the indent level and emits tracing messages.</span></span>  
  
 [!code-cpp[Classic Trace.IndentLevel Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Trace.IndentLevel Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Trace.IndentLevel Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Trace.IndentLevel Example/CS/source.cs#1)]
 [!code-vb[Classic Trace.IndentLevel Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Trace.IndentLevel Example/VB/source.vb#1)]  
  
 <span data-ttu-id="a1819-320">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="a1819-320">This example produces the following output:</span></span>  
  
```  
  
List of errors:  
     Error 1: File not found  
     Error 2: Directory not found  
End of list of errors  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Diagnostics.Trace.Indent" />
        <altmember cref="P:System.Diagnostics.Trace.IndentLevel" />
        <altmember cref="P:System.Diagnostics.Trace.IndentSize" />
      </Docs>
    </Member>
    <Member MemberName="UseGlobalLock">
      <MemberSignature Language="C#" Value="public static bool UseGlobalLock { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property bool UseGlobalLock" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Trace.UseGlobalLock" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property UseGlobalLock As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool UseGlobalLock { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.UseGlobalLock : bool with get, set" Usage="System.Diagnostics.Trace.UseGlobalLock" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a1819-321">获取或设置一个值，该值指示是否应使用全局锁。</span><span class="sxs-lookup"><span data-stu-id="a1819-321">Gets or sets a value indicating whether the global lock should be used.</span></span></summary>
        <value><span data-ttu-id="a1819-322">如果要使用全局锁，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="a1819-322"><see langword="true" /> if the global lock is to be used; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="a1819-323">默认值为 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="a1819-323">The default is <see langword="true" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1819-324">如果跟踪侦听器不是线程安全的，无论的值如何，始终使用全局锁 <xref:System.Diagnostics.Trace.UseGlobalLock%2A> 。</span><span class="sxs-lookup"><span data-stu-id="a1819-324">The global lock is always used if the trace listener is not thread safe, regardless of the value of <xref:System.Diagnostics.Trace.UseGlobalLock%2A>.</span></span> <span data-ttu-id="a1819-325"><xref:System.Diagnostics.TraceListener.IsThreadSafe%2A>属性用于确定侦听器是否是线程安全的。</span><span class="sxs-lookup"><span data-stu-id="a1819-325">The <xref:System.Diagnostics.TraceListener.IsThreadSafe%2A> property is used to determine if the listener is thread safe.</span></span> <span data-ttu-id="a1819-326">仅当的值 <xref:System.Diagnostics.Trace.UseGlobalLock%2A> 为 `false` ，并且的值 <xref:System.Diagnostics.TraceListener.IsThreadSafe%2A> 为时，才使用全局锁 `true` 。</span><span class="sxs-lookup"><span data-stu-id="a1819-326">The global lock is not used only if the value of <xref:System.Diagnostics.Trace.UseGlobalLock%2A> is `false` and the value of <xref:System.Diagnostics.TraceListener.IsThreadSafe%2A> is `true`.</span></span> <span data-ttu-id="a1819-327">默认行为是使用全局锁。</span><span class="sxs-lookup"><span data-stu-id="a1819-327">The default behavior is to use the global lock.</span></span>  
  
 <span data-ttu-id="a1819-328">若要 <xref:System.Diagnostics.Trace.UseGlobalLock%2A> 为设置 <xref:System.Diagnostics.Trace> ，还可以编辑与应用程序名称对应的配置文件。</span><span class="sxs-lookup"><span data-stu-id="a1819-328">To set the <xref:System.Diagnostics.Trace.UseGlobalLock%2A> for <xref:System.Diagnostics.Trace>, you can also edit the configuration file that corresponds to the name of your application.</span></span> <span data-ttu-id="a1819-329">配置文件的格式应类似于以下示例：</span><span class="sxs-lookup"><span data-stu-id="a1819-329">The configuration file should be formatted like the following example:</span></span>  
  
```xml  
<configuration>  
  <system.diagnostics>  
    <trace useGlobalLock="false" />  
  </system.diagnostics>  
</configuration>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Write">
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="a1819-330">将有关跟踪的信息写入 <see cref="P:System.Diagnostics.Trace.Listeners" /> 集合中的跟踪侦听器。</span><span class="sxs-lookup"><span data-stu-id="a1819-330">Writes information about the trace to the trace listeners in the <see cref="P:System.Diagnostics.Trace.Listeners" /> collection.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Trace.Write(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="static member Write : obj -&gt; unit" Usage="System.Diagnostics.Trace.Write value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Diagnostics.Conditional("TRACE")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.Conditional("TRACE")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="a1819-331">其名称将发送至 <see cref="P:System.Diagnostics.Trace.Listeners" /> 的 <see cref="T:System.Object" />。</span><span class="sxs-lookup"><span data-stu-id="a1819-331">An <see cref="T:System.Object" /> whose name is sent to the <see cref="P:System.Diagnostics.Trace.Listeners" />.</span></span></param>
        <summary><span data-ttu-id="a1819-332">将对象 <see cref="M:System.Object.ToString" /> 方法的值写入 <see cref="P:System.Diagnostics.Trace.Listeners" /> 集合中的跟踪侦听器。</span><span class="sxs-lookup"><span data-stu-id="a1819-332">Writes the value of the object's <see cref="M:System.Object.ToString" /> method to the trace listeners in the <see cref="P:System.Diagnostics.Trace.Listeners" /> collection.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1819-333">默认情况下，输出将写入到的实例中 <xref:System.Diagnostics.DefaultTraceListener> 。</span><span class="sxs-lookup"><span data-stu-id="a1819-333">By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.</span></span>  
  
 <span data-ttu-id="a1819-334">此方法调用 <xref:System.Diagnostics.TraceListener.Write%2A> 跟踪侦听器的方法。</span><span class="sxs-lookup"><span data-stu-id="a1819-334">This method calls the <xref:System.Diagnostics.TraceListener.Write%2A> method of the trace listener.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a1819-335">ASP.NET 提供为网页定制的跟踪功能。</span><span class="sxs-lookup"><span data-stu-id="a1819-335">ASP.NET supplies tracing functionality tailored for Web pages.</span></span> <span data-ttu-id="a1819-336">若要在 ASP.NET 页中写入跟踪消息，请使用 <xref:System.Web.UI.Page.Trace%2A?displayProperty=nameWithType> 属性。</span><span class="sxs-lookup"><span data-stu-id="a1819-336">To write trace messages in ASP.NET pages, use the <xref:System.Web.UI.Page.Trace%2A?displayProperty=nameWithType> property.</span></span>  
  
 <span data-ttu-id="a1819-337">默认情况下，在与 ASP.NET 网页关联的代码中，语句 `Trace.Write("...")` 是对属性的方法的调用 <xref:System.Web.TraceContext.Write%2A> <xref:System.Web.UI.Page.Trace%2A?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="a1819-337">By default, in code associated with an ASP.NET Web page, the statement `Trace.Write("...")` is a call to the <xref:System.Web.TraceContext.Write%2A> method of the <xref:System.Web.UI.Page.Trace%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="a1819-338">若要 <xref:System.Diagnostics.Trace?displayProperty=nameWithType> 在网页中使用类，必须包括命名空间，例如 `System.Diagnostics.Trace.Write("...")` 。</span><span class="sxs-lookup"><span data-stu-id="a1819-338">To use the <xref:System.Diagnostics.Trace?displayProperty=nameWithType> class in Web pages, you must include the namespace, for example, `System.Diagnostics.Trace.Write("...")`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1819-339">下面的示例创建一个 <xref:System.Diagnostics.TraceSwitch> 名为的 `generalSwitch` 。</span><span class="sxs-lookup"><span data-stu-id="a1819-339">The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`.</span></span> <span data-ttu-id="a1819-340">此开关在代码示例之外设置。</span><span class="sxs-lookup"><span data-stu-id="a1819-340">This switch is set outside the code sample.</span></span>  
  
 <span data-ttu-id="a1819-341">如果开关设置为 <xref:System.Diagnostics.TraceLevel> `Error` 或更高版本，则该示例会将参数的第一个名称输出 `value` 到 <xref:System.Diagnostics.Trace.Listeners%2A> 。</span><span class="sxs-lookup"><span data-stu-id="a1819-341">If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Error` or higher, the example outputs the first name of the `value` parameter to the <xref:System.Diagnostics.Trace.Listeners%2A>.</span></span> <span data-ttu-id="a1819-342">有关将侦听器添加到集合的信息 <xref:System.Diagnostics.Trace.Listeners%2A> ，请参阅 <xref:System.Diagnostics.TraceListenerCollection> 类。</span><span class="sxs-lookup"><span data-stu-id="a1819-342">For information on adding a listener to the <xref:System.Diagnostics.Trace.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.</span></span>  
  
 <span data-ttu-id="a1819-343">然后，如果将 <xref:System.Diagnostics.TraceLevel> 设置为 `Verbose` ，则该示例将在第一条消息所在的行上输出一条消息。</span><span class="sxs-lookup"><span data-stu-id="a1819-343">Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Verbose`, the example outputs a message on the same line as the first message.</span></span> <span data-ttu-id="a1819-344">第二条消息后跟行结束符。</span><span class="sxs-lookup"><span data-stu-id="a1819-344">The second message is followed by a line terminator.</span></span>  
  
 [!code-cpp[Classic Trace.Write1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Trace.Write1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Trace.Write1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Trace.Write1 Example/CS/source.cs#1)]
 [!code-vb[Classic Trace.Write1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Trace.Write1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Trace.Write(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(System::String ^ message);" />
      <MemberSignature Language="F#" Value="static member Write : string -&gt; unit" Usage="System.Diagnostics.Trace.Write message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Diagnostics.Conditional("TRACE")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.Conditional("TRACE")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message"><span data-ttu-id="a1819-345">要写入的消息。</span><span class="sxs-lookup"><span data-stu-id="a1819-345">A message to write.</span></span></param>
        <summary><span data-ttu-id="a1819-346">将消息写入 <see cref="P:System.Diagnostics.Trace.Listeners" /> 集合中的跟踪侦听器。</span><span class="sxs-lookup"><span data-stu-id="a1819-346">Writes a message to the trace listeners in the <see cref="P:System.Diagnostics.Trace.Listeners" /> collection.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1819-347">默认情况下，输出将写入到的实例中 <xref:System.Diagnostics.DefaultTraceListener> 。</span><span class="sxs-lookup"><span data-stu-id="a1819-347">By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.</span></span>  
  
 <span data-ttu-id="a1819-348">此方法调用 <xref:System.Diagnostics.TraceListener.Write%2A> 跟踪侦听器的方法。</span><span class="sxs-lookup"><span data-stu-id="a1819-348">This method calls the <xref:System.Diagnostics.TraceListener.Write%2A> method of the trace listener.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a1819-349">ASP.NET 提供为网页定制的跟踪功能。</span><span class="sxs-lookup"><span data-stu-id="a1819-349">ASP.NET supplies tracing functionality tailored for Web pages.</span></span> <span data-ttu-id="a1819-350">若要在 ASP.NET 页中写入跟踪消息，请使用 <xref:System.Web.UI.Page.Trace%2A?displayProperty=nameWithType> 属性。</span><span class="sxs-lookup"><span data-stu-id="a1819-350">To write trace messages in ASP.NET pages, use the <xref:System.Web.UI.Page.Trace%2A?displayProperty=nameWithType> property.</span></span>  
  
 <span data-ttu-id="a1819-351">默认情况下，在与 ASP.NET 网页关联的代码中，语句 `Trace.Write("...")` 是对属性的方法的调用 <xref:System.Web.TraceContext.Write%2A> <xref:System.Web.UI.Page.Trace%2A?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="a1819-351">By default, in code associated with an ASP.NET Web page, the statement `Trace.Write("...")` is a call to the <xref:System.Web.TraceContext.Write%2A> method of the <xref:System.Web.UI.Page.Trace%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="a1819-352">若要 <xref:System.Diagnostics.Trace?displayProperty=nameWithType> 在网页中使用类，必须包括命名空间，例如 `System.Diagnostics.Trace.Write("...")` 。</span><span class="sxs-lookup"><span data-stu-id="a1819-352">To use the <xref:System.Diagnostics.Trace?displayProperty=nameWithType> class in Web pages, you must include the namespace, for example, `System.Diagnostics.Trace.Write("...")`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1819-353">下面的示例创建一个 <xref:System.Diagnostics.TraceSwitch> 名为的 `generalSwitch` 。</span><span class="sxs-lookup"><span data-stu-id="a1819-353">The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`.</span></span> <span data-ttu-id="a1819-354">此开关在代码示例之外设置。</span><span class="sxs-lookup"><span data-stu-id="a1819-354">This switch is set outside the code sample.</span></span>  
  
 <span data-ttu-id="a1819-355">如果开关设置为 <xref:System.Diagnostics.TraceLevel> `Error` 或更高版本，则该示例会将第一条错误消息输出到 <xref:System.Diagnostics.Trace.Listeners%2A> 。</span><span class="sxs-lookup"><span data-stu-id="a1819-355">If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Error` or higher, the example outputs the first error message to the <xref:System.Diagnostics.Trace.Listeners%2A>.</span></span> <span data-ttu-id="a1819-356">有关将侦听器添加到集合的信息 <xref:System.Diagnostics.Trace.Listeners%2A> ，请参阅 <xref:System.Diagnostics.TraceListenerCollection> 类。</span><span class="sxs-lookup"><span data-stu-id="a1819-356">For information on adding a listener to the <xref:System.Diagnostics.Trace.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.</span></span>  
  
 <span data-ttu-id="a1819-357">然后，如果将 <xref:System.Diagnostics.TraceLevel> 设置为，则该示例会将第 `Verbose` 二个错误消息输出到第一条消息所在的同一行。</span><span class="sxs-lookup"><span data-stu-id="a1819-357">Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Verbose`, the example outputs the second error message on the same line as the first message.</span></span> <span data-ttu-id="a1819-358">行结束符后跟第二条消息。</span><span class="sxs-lookup"><span data-stu-id="a1819-358">A line terminator follows the second message.</span></span>  
  
 [!code-cpp[Classic Trace.Write Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Trace.Write Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Trace.Write Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Trace.Write Example/CS/source.cs#1)]
 [!code-vb[Classic Trace.Write Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Trace.Write Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (object value, string category);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(object value, string category) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Trace.Write(System.Object,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (value As Object, category As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(System::Object ^ value, System::String ^ category);" />
      <MemberSignature Language="F#" Value="static member Write : obj * string -&gt; unit" Usage="System.Diagnostics.Trace.Write (value, category)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Diagnostics.Conditional("TRACE")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.Conditional("TRACE")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="category" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="a1819-359">一个 <see cref="T:System.Object" />，其名称将发送至 <see cref="P:System.Diagnostics.Trace.Listeners" />。</span><span class="sxs-lookup"><span data-stu-id="a1819-359">An <see cref="T:System.Object" /> name is sent to the <see cref="P:System.Diagnostics.Trace.Listeners" />.</span></span></param>
        <param name="category"><span data-ttu-id="a1819-360">用于组织输出的类别名称。</span><span class="sxs-lookup"><span data-stu-id="a1819-360">A category name used to organize the output.</span></span></param>
        <summary><span data-ttu-id="a1819-361">将类别名称和对象的 <see cref="M:System.Object.ToString" /> 方法的值写入 <see cref="P:System.Diagnostics.Trace.Listeners" /> 集合中的跟踪侦听器。</span><span class="sxs-lookup"><span data-stu-id="a1819-361">Writes a category name and the value of the object's <see cref="M:System.Object.ToString" /> method to the trace listeners in the <see cref="P:System.Diagnostics.Trace.Listeners" /> collection.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1819-362">默认情况下，输出将写入到的实例中 <xref:System.Diagnostics.DefaultTraceListener> 。</span><span class="sxs-lookup"><span data-stu-id="a1819-362">By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.</span></span>  
  
 <span data-ttu-id="a1819-363">`category`参数可用于对输出消息进行分组。</span><span class="sxs-lookup"><span data-stu-id="a1819-363">The `category` parameter can be used to group output messages.</span></span>  
  
 <span data-ttu-id="a1819-364">此方法调用 <xref:System.Diagnostics.TraceListener.Write%2A> 跟踪侦听器的方法。</span><span class="sxs-lookup"><span data-stu-id="a1819-364">This method calls the <xref:System.Diagnostics.TraceListener.Write%2A> method of the trace listener.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a1819-365">ASP.NET 提供为网页定制的跟踪功能。</span><span class="sxs-lookup"><span data-stu-id="a1819-365">ASP.NET supplies tracing functionality tailored for Web pages.</span></span> <span data-ttu-id="a1819-366">若要在 ASP.NET 页中写入跟踪消息，请使用 <xref:System.Web.UI.Page.Trace%2A?displayProperty=nameWithType> 属性。</span><span class="sxs-lookup"><span data-stu-id="a1819-366">To write trace messages in ASP.NET pages, use the <xref:System.Web.UI.Page.Trace%2A?displayProperty=nameWithType> property.</span></span>  
  
 <span data-ttu-id="a1819-367">默认情况下，在与 ASP.NET 网页关联的代码中，语句 `Trace.Write("...")` 是对属性的方法的调用 <xref:System.Web.TraceContext.Write%2A> <xref:System.Web.UI.Page.Trace%2A?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="a1819-367">By default, in code associated with an ASP.NET Web page, the statement `Trace.Write("...")` is a call to the <xref:System.Web.TraceContext.Write%2A> method of the <xref:System.Web.UI.Page.Trace%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="a1819-368">若要 <xref:System.Diagnostics.Trace?displayProperty=nameWithType> 在网页中使用类，必须包括命名空间，例如 `System.Diagnostics.Trace.Write("...")` 。</span><span class="sxs-lookup"><span data-stu-id="a1819-368">To use the <xref:System.Diagnostics.Trace?displayProperty=nameWithType> class in Web pages, you must include the namespace, for example, `System.Diagnostics.Trace.Write("...")`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1819-369">下面的示例创建一个 <xref:System.Diagnostics.TraceSwitch> 名为的 `generalSwitch` 。</span><span class="sxs-lookup"><span data-stu-id="a1819-369">The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`.</span></span> <span data-ttu-id="a1819-370">此开关在代码示例之外设置。</span><span class="sxs-lookup"><span data-stu-id="a1819-370">This switch is set outside the code sample.</span></span>  
  
 <span data-ttu-id="a1819-371">如果开关设置为 <xref:System.Diagnostics.TraceLevel> `Verbose` ，则该示例会将和的名称输出 `myObject` `category` 到 <xref:System.Diagnostics.Trace.Listeners%2A> 。</span><span class="sxs-lookup"><span data-stu-id="a1819-371">If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Verbose`, the example outputs the name of the `myObject` and the `category` to the <xref:System.Diagnostics.Trace.Listeners%2A>.</span></span> <span data-ttu-id="a1819-372">有关将侦听器添加到集合的信息 <xref:System.Diagnostics.Trace.Listeners%2A> ，请参阅 <xref:System.Diagnostics.TraceListenerCollection> 类。</span><span class="sxs-lookup"><span data-stu-id="a1819-372">For information on adding a listener to the <xref:System.Diagnostics.Trace.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.</span></span>  
  
 <span data-ttu-id="a1819-373">然后，如果 <xref:System.Diagnostics.TraceLevel> 设置为 `Error` 或更高版本，则该示例会将第二个错误消息输出到第一条消息所在的同一行。</span><span class="sxs-lookup"><span data-stu-id="a1819-373">Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Error` or higher, the example outputs the second error message on the same line as the first message.</span></span> <span data-ttu-id="a1819-374">第二条消息后跟行结束符。</span><span class="sxs-lookup"><span data-stu-id="a1819-374">The second message is followed by a line terminator.</span></span>  
  
 [!code-cpp[Classic Trace.Write3 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Trace.Write3 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Trace.Write3 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Trace.Write3 Example/CS/source.cs#1)]
 [!code-vb[Classic Trace.Write3 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Trace.Write3 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (string message, string category);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(string message, string category) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Trace.Write(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (message As String, category As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(System::String ^ message, System::String ^ category);" />
      <MemberSignature Language="F#" Value="static member Write : string * string -&gt; unit" Usage="System.Diagnostics.Trace.Write (message, category)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Diagnostics.Conditional("TRACE")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.Conditional("TRACE")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="category" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message"><span data-ttu-id="a1819-375">要写入的消息。</span><span class="sxs-lookup"><span data-stu-id="a1819-375">A message to write.</span></span></param>
        <param name="category"><span data-ttu-id="a1819-376">用于组织输出的类别名称。</span><span class="sxs-lookup"><span data-stu-id="a1819-376">A category name used to organize the output.</span></span></param>
        <summary><span data-ttu-id="a1819-377">将类别名称和消息写入 <see cref="P:System.Diagnostics.Trace.Listeners" /> 集合中的跟踪侦听器。</span><span class="sxs-lookup"><span data-stu-id="a1819-377">Writes a category name and a message to the trace listeners in the <see cref="P:System.Diagnostics.Trace.Listeners" /> collection.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1819-378">默认情况下，输出将写入到的实例中 <xref:System.Diagnostics.DefaultTraceListener> 。</span><span class="sxs-lookup"><span data-stu-id="a1819-378">By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.</span></span>  
  
 <span data-ttu-id="a1819-379">`category`参数可用于对输出消息进行分组。</span><span class="sxs-lookup"><span data-stu-id="a1819-379">The `category` parameter can be used to group output messages.</span></span>  
  
 <span data-ttu-id="a1819-380">此方法调用 <xref:System.Diagnostics.TraceListener.Write%2A> 跟踪侦听器的方法。</span><span class="sxs-lookup"><span data-stu-id="a1819-380">This method calls the <xref:System.Diagnostics.TraceListener.Write%2A> method of the trace listener.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a1819-381">ASP.NET 提供为网页定制的跟踪功能。</span><span class="sxs-lookup"><span data-stu-id="a1819-381">ASP.NET supplies tracing functionality tailored for Web pages.</span></span> <span data-ttu-id="a1819-382">若要在 ASP.NET 页中写入跟踪消息，请使用 <xref:System.Web.UI.Page.Trace%2A?displayProperty=nameWithType> 属性。</span><span class="sxs-lookup"><span data-stu-id="a1819-382">To write trace messages in ASP.NET pages, use the <xref:System.Web.UI.Page.Trace%2A?displayProperty=nameWithType> property.</span></span>  
  
 <span data-ttu-id="a1819-383">默认情况下，在与 ASP.NET 网页关联的代码中，语句 `Trace.Write("...")` 是对属性的方法的调用 <xref:System.Web.TraceContext.Write%2A> <xref:System.Web.UI.Page.Trace%2A?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="a1819-383">By default, in code associated with an ASP.NET Web page, the statement `Trace.Write("...")` is a call to the <xref:System.Web.TraceContext.Write%2A> method of the <xref:System.Web.UI.Page.Trace%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="a1819-384">若要 <xref:System.Diagnostics.Trace?displayProperty=nameWithType> 在网页中使用类，必须包括命名空间，例如 `System.Diagnostics.Trace.Write("...")` 。</span><span class="sxs-lookup"><span data-stu-id="a1819-384">To use the <xref:System.Diagnostics.Trace?displayProperty=nameWithType> class in Web pages, you must include the namespace, for example, `System.Diagnostics.Trace.Write("...")`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1819-385">下面的示例创建一个 <xref:System.Diagnostics.TraceSwitch> 名为的 `generalSwitch` 。</span><span class="sxs-lookup"><span data-stu-id="a1819-385">The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`.</span></span> <span data-ttu-id="a1819-386">此开关在代码示例之外设置。</span><span class="sxs-lookup"><span data-stu-id="a1819-386">This switch is set outside the code sample.</span></span>  
  
 <span data-ttu-id="a1819-387">如果开关设置为 <xref:System.Diagnostics.TraceLevel> `Verbose` ，则该示例会将第一条错误消息输出到 <xref:System.Diagnostics.Trace.Listeners%2A> 。</span><span class="sxs-lookup"><span data-stu-id="a1819-387">If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Verbose`, the example outputs the first error message to the <xref:System.Diagnostics.Trace.Listeners%2A>.</span></span> <span data-ttu-id="a1819-388">有关将侦听器添加到集合的信息 <xref:System.Diagnostics.Trace.Listeners%2A> ，请参阅 <xref:System.Diagnostics.TraceListenerCollection> 类。</span><span class="sxs-lookup"><span data-stu-id="a1819-388">For information on adding a listener to the <xref:System.Diagnostics.Trace.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.</span></span>  
  
 <span data-ttu-id="a1819-389">然后，如果 <xref:System.Diagnostics.TraceLevel> 设置为 `Error` 或更高版本，则该示例会将第二个错误消息输出到第一条消息所在的同一行。</span><span class="sxs-lookup"><span data-stu-id="a1819-389">Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Error` or higher, the example outputs the second error message on the same line as the first message.</span></span> <span data-ttu-id="a1819-390">第二条消息后跟行结束符。</span><span class="sxs-lookup"><span data-stu-id="a1819-390">The second message is followed by a line terminator.</span></span>  
  
 [!code-cpp[Classic Trace.Write2 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Trace.Write2 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Trace.Write2 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Trace.Write2 Example/CS/source.cs#1)]
 [!code-vb[Classic Trace.Write2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Trace.Write2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteIf">
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="a1819-391">如果条件为 <see langword="true" />，则将有关跟踪的信息写入 <see cref="P:System.Diagnostics.Trace.Listeners" /> 集合中的跟踪侦听器。</span><span class="sxs-lookup"><span data-stu-id="a1819-391">Writes information about the trace to the trace listeners in the <see cref="P:System.Diagnostics.Trace.Listeners" /> collection if a condition is <see langword="true" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteIf">
      <MemberSignature Language="C#" Value="public static void WriteIf (bool condition, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteIf(bool condition, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Trace.WriteIf(System.Boolean,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteIf (condition As Boolean, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteIf(bool condition, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="static member WriteIf : bool * obj -&gt; unit" Usage="System.Diagnostics.Trace.WriteIf (condition, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Diagnostics.Conditional("TRACE")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.Conditional("TRACE")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="condition"><span data-ttu-id="a1819-392">若要使消息被写入，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="a1819-392"><see langword="true" /> to cause a message to be written; otherwise, <see langword="false" />.</span></span></param>
        <param name="value"><span data-ttu-id="a1819-393">其名称将发送至 <see cref="P:System.Diagnostics.Trace.Listeners" /> 的 <see cref="T:System.Object" />。</span><span class="sxs-lookup"><span data-stu-id="a1819-393">An <see cref="T:System.Object" /> whose name is sent to the <see cref="P:System.Diagnostics.Trace.Listeners" />.</span></span></param>
        <summary><span data-ttu-id="a1819-394">如果条件为 <see langword="true" />，则向 <see cref="P:System.Diagnostics.Trace.Listeners" /> 集合中的跟踪侦听器写入对象的 <see cref="M:System.Object.ToString" /> 方法。</span><span class="sxs-lookup"><span data-stu-id="a1819-394">Writes the value of the object's <see cref="M:System.Object.ToString" /> method to the trace listeners in the <see cref="P:System.Diagnostics.Trace.Listeners" /> collection if a condition is <see langword="true" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1819-395">默认情况下，输出将写入到的实例中 <xref:System.Diagnostics.DefaultTraceListener> 。</span><span class="sxs-lookup"><span data-stu-id="a1819-395">By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.</span></span>  
  
 <span data-ttu-id="a1819-396">此方法调用 <xref:System.Diagnostics.TraceListener.Write%2A> 跟踪侦听器的方法。</span><span class="sxs-lookup"><span data-stu-id="a1819-396">This method calls the <xref:System.Diagnostics.TraceListener.Write%2A> method of the trace listener.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1819-397">下面的示例创建一个 <xref:System.Diagnostics.TraceSwitch> 名为的 `generalSwitch` 。</span><span class="sxs-lookup"><span data-stu-id="a1819-397">The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`.</span></span> <span data-ttu-id="a1819-398">此开关在代码示例之外设置。</span><span class="sxs-lookup"><span data-stu-id="a1819-398">This switch is set outside the code sample.</span></span>  
  
 <span data-ttu-id="a1819-399">如果开关设置为 <xref:System.Diagnostics.TraceLevel> `Error` 或更高版本，则该示例会将值参数的第一个名称输出到 <xref:System.Diagnostics.Trace.Listeners%2A> 。</span><span class="sxs-lookup"><span data-stu-id="a1819-399">If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Error` or higher, the example outputs the first name of the value parameter to the <xref:System.Diagnostics.Trace.Listeners%2A>.</span></span> <span data-ttu-id="a1819-400">有关将侦听器添加到集合的信息 <xref:System.Diagnostics.Trace.Listeners%2A> ，请参阅 <xref:System.Diagnostics.TraceListenerCollection> 类。</span><span class="sxs-lookup"><span data-stu-id="a1819-400">For information on adding a listener to the <xref:System.Diagnostics.Trace.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.</span></span>  
  
 <span data-ttu-id="a1819-401">然后，如果将 <xref:System.Diagnostics.TraceLevel> 设置为 `Verbose` ，则该示例将在第一条消息所在的行上输出一条消息。</span><span class="sxs-lookup"><span data-stu-id="a1819-401">Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Verbose`, the example outputs a message on the same line as the first message.</span></span> <span data-ttu-id="a1819-402">第二条消息后跟行结束符。</span><span class="sxs-lookup"><span data-stu-id="a1819-402">The second message is followed by a line terminator.</span></span>  
  
 [!code-cpp[Classic Trace.WriteIf1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Trace.WriteIf1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Trace.WriteIf1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Trace.WriteIf1 Example/CS/source.cs#1)]
 [!code-vb[Classic Trace.WriteIf1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Trace.WriteIf1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="a1819-403">可以通过使用 <see langword="If...Then" /> 语句而不是使用语句来最大程度地减少对应用程序进行检测的性能损失 <see cref="M:System.Diagnostics.Trace.WriteIf(System.Boolean,System.String)" /> 。</span><span class="sxs-lookup"><span data-stu-id="a1819-403">You can minimize the performance penalty of instrumenting your application by using <see langword="If...Then" /> statements instead of using <see cref="M:System.Diagnostics.Trace.WriteIf(System.Boolean,System.String)" /> statements.</span></span> <span data-ttu-id="a1819-404">下面两个代码示例发送相同的调试消息。</span><span class="sxs-lookup"><span data-stu-id="a1819-404">The following two code examples send the same debugging message.</span></span> <span data-ttu-id="a1819-405">但是，当跟踪关闭时，第一个示例的速度要快得多，因为如果<c>mySwitch 的</c>计算结果 <see langword="false" /> 不是 <see cref="M:System.Diagnostics.Trace.Write(System.String)" /> 。</span><span class="sxs-lookup"><span data-stu-id="a1819-405">However, the first example is much faster when tracing is off, because if <c>mySwitch.TraceError</c> evaluates to <see langword="false" /> you do not call <see cref="M:System.Diagnostics.Trace.Write(System.String)" />.</span></span> <span data-ttu-id="a1819-406">第二个示例始终调用 <see cref="M:System.Diagnostics.Trace.WriteIf(System.Boolean,System.String)" /> ，即使<c>MySwitch 为 TraceError</c> ，也不会 <see langword="false" /> 生成任何跟踪输出。</span><span class="sxs-lookup"><span data-stu-id="a1819-406">The second example always calls <see cref="M:System.Diagnostics.Trace.WriteIf(System.Boolean,System.String)" />, even when <c>mySwitch.TraceError</c> is <see langword="false" /> and no tracing output is produced.</span></span> <span data-ttu-id="a1819-407">这可能导致不必要地执行任意复杂的代码。</span><span class="sxs-lookup"><span data-stu-id="a1819-407">This can result in unnecessary execution of arbitrarily complex code.</span></span>  
  
 <span data-ttu-id="a1819-408">**第一个示例**</span><span class="sxs-lookup"><span data-stu-id="a1819-408">**First example**</span></span>  
  
```csharp  
if(mySwitch.TraceError)   
    Trace.Write("aNumber = " + aNumber + " out of range");  
```  
  
 <span data-ttu-id="a1819-409">**第二个示例**</span><span class="sxs-lookup"><span data-stu-id="a1819-409">**Second example**</span></span>  
  
```csharp  
Trace.WriteIf(mySwitch.TraceError, "aNumber = " + aNumber + " out of range");  
```</para></block>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="WriteIf">
      <MemberSignature Language="C#" Value="public static void WriteIf (bool condition, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteIf(bool condition, string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Trace.WriteIf(System.Boolean,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteIf (condition As Boolean, message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteIf(bool condition, System::String ^ message);" />
      <MemberSignature Language="F#" Value="static member WriteIf : bool * string -&gt; unit" Usage="System.Diagnostics.Trace.WriteIf (condition, message)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Diagnostics.Conditional("TRACE")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.Conditional("TRACE")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="condition"><span data-ttu-id="a1819-410">若要使消息被写入，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="a1819-410"><see langword="true" /> to cause a message to be written; otherwise, <see langword="false" />.</span></span></param>
        <param name="message"><span data-ttu-id="a1819-411">要写入的消息。</span><span class="sxs-lookup"><span data-stu-id="a1819-411">A message to write.</span></span></param>
        <summary><span data-ttu-id="a1819-412">如果条件为 <see langword="true" />，则将消息写入 <see cref="P:System.Diagnostics.Trace.Listeners" /> 集合中的跟踪侦听器。</span><span class="sxs-lookup"><span data-stu-id="a1819-412">Writes a message to the trace listeners in the <see cref="P:System.Diagnostics.Trace.Listeners" /> collection if a condition is <see langword="true" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1819-413">默认情况下，输出将写入到的实例中 <xref:System.Diagnostics.DefaultTraceListener> 。</span><span class="sxs-lookup"><span data-stu-id="a1819-413">By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.</span></span>  
  
 <span data-ttu-id="a1819-414">此方法调用 <xref:System.Diagnostics.TraceListener.Write%2A> 跟踪侦听器的方法。</span><span class="sxs-lookup"><span data-stu-id="a1819-414">This method calls the <xref:System.Diagnostics.TraceListener.Write%2A> method of the trace listener.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1819-415">下面的示例创建一个 <xref:System.Diagnostics.TraceSwitch> 名为的 `generalSwitch` 。</span><span class="sxs-lookup"><span data-stu-id="a1819-415">The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`.</span></span> <span data-ttu-id="a1819-416">此开关在代码示例之外设置。</span><span class="sxs-lookup"><span data-stu-id="a1819-416">This switch is set outside the code sample.</span></span>  
  
 <span data-ttu-id="a1819-417">如果开关设置为 <xref:System.Diagnostics.TraceLevel> `Error` 或更高版本，则该示例会将第一条错误消息输出到 <xref:System.Diagnostics.Trace.Listeners%2A> 。</span><span class="sxs-lookup"><span data-stu-id="a1819-417">If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Error` or higher, the example outputs the first error message to the <xref:System.Diagnostics.Trace.Listeners%2A>.</span></span> <span data-ttu-id="a1819-418">有关将侦听器添加到集合的信息 <xref:System.Diagnostics.Trace.Listeners%2A> ，请参阅 <xref:System.Diagnostics.TraceListenerCollection> 类。</span><span class="sxs-lookup"><span data-stu-id="a1819-418">For information on adding a listener to the <xref:System.Diagnostics.Trace.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.</span></span>  
  
 <span data-ttu-id="a1819-419">然后，如果将 <xref:System.Diagnostics.TraceLevel> 设置为，则该示例会将第 `Verbose` 二个错误消息输出到第一条消息所在的同一行。</span><span class="sxs-lookup"><span data-stu-id="a1819-419">Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Verbose`, the example outputs the second error message on the same line as the first message.</span></span> <span data-ttu-id="a1819-420">第二条消息后跟行结束符。</span><span class="sxs-lookup"><span data-stu-id="a1819-420">The second message is followed by a line terminator.</span></span>  
  
 [!code-cpp[Classic Trace.WriteIf Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Trace.WriteIf Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Trace.WriteIf Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Trace.WriteIf Example/CS/source.cs#1)]
 [!code-vb[Classic Trace.WriteIf Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Trace.WriteIf Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="a1819-421">可以通过使用 <see langword="If...Then" /> 语句而不是使用语句来最大程度地减少对应用程序进行检测的性能损失 <see cref="M:System.Diagnostics.Trace.WriteIf(System.Boolean,System.String)" /> 。</span><span class="sxs-lookup"><span data-stu-id="a1819-421">You can minimize the performance penalty of instrumenting your application by using <see langword="If...Then" /> statements instead of using <see cref="M:System.Diagnostics.Trace.WriteIf(System.Boolean,System.String)" /> statements.</span></span> <span data-ttu-id="a1819-422">下面两个代码示例发送相同的调试消息。</span><span class="sxs-lookup"><span data-stu-id="a1819-422">The following two code examples send the same debugging message.</span></span> <span data-ttu-id="a1819-423">但是，当跟踪关闭时，第一个示例的速度要快得多，因为如果<c>mySwitch 的</c>计算结果 <see langword="false" /> 不是 <see cref="M:System.Diagnostics.Trace.Write(System.String)" /> 。</span><span class="sxs-lookup"><span data-stu-id="a1819-423">However, the first example is much faster when tracing is off, because if <c>mySwitch.TraceError</c> evaluates to <see langword="false" /> you do not call <see cref="M:System.Diagnostics.Trace.Write(System.String)" />.</span></span> <span data-ttu-id="a1819-424">第二个示例始终调用 <see cref="M:System.Diagnostics.Trace.WriteIf(System.Boolean,System.String)" /> ，即使<c>MySwitch 为 TraceError</c> ，也不会 <see langword="false" /> 生成任何跟踪输出。</span><span class="sxs-lookup"><span data-stu-id="a1819-424">The second example always calls <see cref="M:System.Diagnostics.Trace.WriteIf(System.Boolean,System.String)" />, even when <c>mySwitch.TraceError</c> is <see langword="false" /> and no tracing output is produced.</span></span> <span data-ttu-id="a1819-425">这可能导致不必要地执行任意复杂的代码。</span><span class="sxs-lookup"><span data-stu-id="a1819-425">This can result in unnecessary execution of arbitrarily complex code.</span></span>  
  
 <span data-ttu-id="a1819-426">**第一个示例**</span><span class="sxs-lookup"><span data-stu-id="a1819-426">**First example**</span></span>  
  
```csharp  
if(mySwitch.TraceError)   
    Trace.Write("aNumber = " + aNumber + " out of range");  
```  
  
 <span data-ttu-id="a1819-427">**第二个示例**</span><span class="sxs-lookup"><span data-stu-id="a1819-427">**Second example**</span></span>  
  
```csharp  
Trace.WriteIf(mySwitch.TraceError, "aNumber = " + aNumber + " out of range");  
```</para></block>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="WriteIf">
      <MemberSignature Language="C#" Value="public static void WriteIf (bool condition, object value, string category);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteIf(bool condition, object value, string category) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Trace.WriteIf(System.Boolean,System.Object,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteIf (condition As Boolean, value As Object, category As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteIf(bool condition, System::Object ^ value, System::String ^ category);" />
      <MemberSignature Language="F#" Value="static member WriteIf : bool * obj * string -&gt; unit" Usage="System.Diagnostics.Trace.WriteIf (condition, value, category)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Diagnostics.Conditional("TRACE")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.Conditional("TRACE")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="category" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="condition"><span data-ttu-id="a1819-428">若要使消息被写入，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="a1819-428"><see langword="true" /> to cause a message to be written; otherwise, <see langword="false" />.</span></span></param>
        <param name="value"><span data-ttu-id="a1819-429">其名称将发送至 <see cref="P:System.Diagnostics.Trace.Listeners" /> 的 <see cref="T:System.Object" />。</span><span class="sxs-lookup"><span data-stu-id="a1819-429">An <see cref="T:System.Object" /> whose name is sent to the <see cref="P:System.Diagnostics.Trace.Listeners" />.</span></span></param>
        <param name="category"><span data-ttu-id="a1819-430">用于组织输出的类别名称。</span><span class="sxs-lookup"><span data-stu-id="a1819-430">A category name used to organize the output.</span></span></param>
        <summary><span data-ttu-id="a1819-431">如果条件为 <see langword="true" />，则向 <see cref="P:System.Diagnostics.Trace.Listeners" /> 集合中的跟踪侦听器写入类别名称和对象的 <see cref="M:System.Object.ToString" /> 方法值。</span><span class="sxs-lookup"><span data-stu-id="a1819-431">Writes a category name and the value of the object's <see cref="M:System.Object.ToString" /> method to the trace listeners in the <see cref="P:System.Diagnostics.Trace.Listeners" /> collection if a condition is <see langword="true" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1819-432">默认情况下，输出将写入到的实例中 <xref:System.Diagnostics.DefaultTraceListener> 。</span><span class="sxs-lookup"><span data-stu-id="a1819-432">By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.</span></span>  
  
 <span data-ttu-id="a1819-433">`category`参数可用于对输出消息进行分组。</span><span class="sxs-lookup"><span data-stu-id="a1819-433">The `category` parameter can be used to group output messages.</span></span>  
  
 <span data-ttu-id="a1819-434">此方法调用 <xref:System.Diagnostics.TraceListener.Write%2A> 跟踪侦听器的方法。</span><span class="sxs-lookup"><span data-stu-id="a1819-434">This method calls the <xref:System.Diagnostics.TraceListener.Write%2A> method of the trace listener.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1819-435">下面的示例创建一个 <xref:System.Diagnostics.TraceSwitch> 名为的 `generalSwitch` 。</span><span class="sxs-lookup"><span data-stu-id="a1819-435">The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`.</span></span> <span data-ttu-id="a1819-436">此开关在代码示例之外设置。</span><span class="sxs-lookup"><span data-stu-id="a1819-436">This switch is set outside the code sample.</span></span>  
  
 <span data-ttu-id="a1819-437">如果开关设置为 <xref:System.Diagnostics.TraceLevel> `Verbose` ，则该示例会将和的名称输出 `myObject` `category` 到 <xref:System.Diagnostics.Trace.Listeners%2A> 。</span><span class="sxs-lookup"><span data-stu-id="a1819-437">If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Verbose`, the example outputs the name of the `myObject` and the `category` to the <xref:System.Diagnostics.Trace.Listeners%2A>.</span></span> <span data-ttu-id="a1819-438">有关将侦听器添加到集合的信息 <xref:System.Diagnostics.Trace.Listeners%2A> ，请参阅 <xref:System.Diagnostics.TraceListenerCollection> 类。</span><span class="sxs-lookup"><span data-stu-id="a1819-438">For information on adding a listener to the <xref:System.Diagnostics.Trace.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.</span></span>  
  
 <span data-ttu-id="a1819-439">然后，如果 <xref:System.Diagnostics.TraceLevel> 设置为 `Error` 或更高版本，则该示例会将第二个错误消息输出到第一条消息所在的同一行。</span><span class="sxs-lookup"><span data-stu-id="a1819-439">Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Error` or higher, the example outputs the second error message on the same line as the first message.</span></span> <span data-ttu-id="a1819-440">第二条消息后跟行结束符。</span><span class="sxs-lookup"><span data-stu-id="a1819-440">The second message is followed by a line terminator.</span></span>  
  
 [!code-cpp[Classic Trace.WriteIf3 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Trace.WriteIf3 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Trace.WriteIf3 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Trace.WriteIf3 Example/CS/source.cs#1)]
 [!code-vb[Classic Trace.WriteIf3 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Trace.WriteIf3 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="a1819-441">可以通过使用 <see langword="If...Then" /> 语句而不是使用语句来最大程度地减少对应用程序进行检测的性能损失 <see cref="M:System.Diagnostics.Trace.WriteIf(System.Boolean,System.String)" /> 。</span><span class="sxs-lookup"><span data-stu-id="a1819-441">You can minimize the performance penalty of instrumenting your application by using <see langword="If...Then" /> statements instead of using <see cref="M:System.Diagnostics.Trace.WriteIf(System.Boolean,System.String)" /> statements.</span></span> <span data-ttu-id="a1819-442">下面两个代码示例发送相同的调试消息。</span><span class="sxs-lookup"><span data-stu-id="a1819-442">The following two code examples send the same debugging message.</span></span> <span data-ttu-id="a1819-443">但是，当跟踪关闭时，第一个示例的速度要快得多，因为如果<c>mySwitch 的</c>计算结果 <see langword="false" /> 不是 <see cref="M:System.Diagnostics.Trace.Write(System.String)" /> 。</span><span class="sxs-lookup"><span data-stu-id="a1819-443">However, the first example is much faster when tracing is off, because if <c>mySwitch.TraceError</c> evaluates to <see langword="false" /> you do not call <see cref="M:System.Diagnostics.Trace.Write(System.String)" />.</span></span> <span data-ttu-id="a1819-444">第二个示例始终调用 <see cref="M:System.Diagnostics.Trace.WriteIf(System.Boolean,System.String)" /> ，即使<c>MySwitch 为 TraceError</c> ，也不会 <see langword="false" /> 生成任何跟踪输出。</span><span class="sxs-lookup"><span data-stu-id="a1819-444">The second example always calls <see cref="M:System.Diagnostics.Trace.WriteIf(System.Boolean,System.String)" />, even when <c>mySwitch.TraceError</c> is <see langword="false" /> and no tracing output is produced.</span></span> <span data-ttu-id="a1819-445">这可能导致不必要地执行任意复杂的代码。</span><span class="sxs-lookup"><span data-stu-id="a1819-445">This can result in unnecessary execution of arbitrarily complex code.</span></span>  
  
 <span data-ttu-id="a1819-446">**第一个示例**</span><span class="sxs-lookup"><span data-stu-id="a1819-446">**First example**</span></span>  
  
```csharp  
if(mySwitch.TraceError)   
    Trace.Write("aNumber = " + aNumber + " out of range");  
```  
  
 <span data-ttu-id="a1819-447">**第二个示例**</span><span class="sxs-lookup"><span data-stu-id="a1819-447">**Second example**</span></span>  
  
```csharp  
Trace.WriteIf(mySwitch.TraceError, "aNumber = " + aNumber + " out of range");  
```</para></block>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="WriteIf">
      <MemberSignature Language="C#" Value="public static void WriteIf (bool condition, string message, string category);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteIf(bool condition, string message, string category) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Trace.WriteIf(System.Boolean,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteIf (condition As Boolean, message As String, category As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteIf(bool condition, System::String ^ message, System::String ^ category);" />
      <MemberSignature Language="F#" Value="static member WriteIf : bool * string * string -&gt; unit" Usage="System.Diagnostics.Trace.WriteIf (condition, message, category)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Diagnostics.Conditional("TRACE")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.Conditional("TRACE")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="category" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="condition"><span data-ttu-id="a1819-448">若要使消息被写入，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="a1819-448"><see langword="true" /> to cause a message to be written; otherwise, <see langword="false" />.</span></span></param>
        <param name="message"><span data-ttu-id="a1819-449">要写入的消息。</span><span class="sxs-lookup"><span data-stu-id="a1819-449">A message to write.</span></span></param>
        <param name="category"><span data-ttu-id="a1819-450">用于组织输出的类别名称。</span><span class="sxs-lookup"><span data-stu-id="a1819-450">A category name used to organize the output.</span></span></param>
        <summary><span data-ttu-id="a1819-451">如果条件为 <see langword="true" />，则将类别名称和消息写入 <see cref="P:System.Diagnostics.Trace.Listeners" /> 集合中的跟踪侦听器。</span><span class="sxs-lookup"><span data-stu-id="a1819-451">Writes a category name and message to the trace listeners in the <see cref="P:System.Diagnostics.Trace.Listeners" /> collection if a condition is <see langword="true" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1819-452">默认情况下，输出将写入到的实例中 <xref:System.Diagnostics.DefaultTraceListener> 。</span><span class="sxs-lookup"><span data-stu-id="a1819-452">By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.</span></span>  
  
 <span data-ttu-id="a1819-453">`category`参数可用于对输出消息进行分组。</span><span class="sxs-lookup"><span data-stu-id="a1819-453">The `category` parameter can be used to group output messages.</span></span>  
  
 <span data-ttu-id="a1819-454">此方法调用 <xref:System.Diagnostics.TraceListener.Write%2A> 跟踪侦听器的方法。</span><span class="sxs-lookup"><span data-stu-id="a1819-454">This method calls the <xref:System.Diagnostics.TraceListener.Write%2A> method of the trace listener.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1819-455">下面的示例创建一个 <xref:System.Diagnostics.TraceSwitch> 名为的 `generalSwitch` 。</span><span class="sxs-lookup"><span data-stu-id="a1819-455">The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`.</span></span> <span data-ttu-id="a1819-456">此开关在代码示例之外设置。</span><span class="sxs-lookup"><span data-stu-id="a1819-456">This switch is set outside the code sample.</span></span>  
  
 <span data-ttu-id="a1819-457">如果开关设置为 <xref:System.Diagnostics.TraceLevel> `Verbose` ，则该示例会将第一条错误消息输出到 <xref:System.Diagnostics.Trace.Listeners%2A> 。</span><span class="sxs-lookup"><span data-stu-id="a1819-457">If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Verbose`, the example outputs the first error message to the <xref:System.Diagnostics.Trace.Listeners%2A>.</span></span> <span data-ttu-id="a1819-458">有关将侦听器添加到集合的信息 <xref:System.Diagnostics.Trace.Listeners%2A> ，请参阅 <xref:System.Diagnostics.TraceListenerCollection> 类。</span><span class="sxs-lookup"><span data-stu-id="a1819-458">For information on adding a listener to the <xref:System.Diagnostics.Trace.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.</span></span>  
  
 <span data-ttu-id="a1819-459">然后，如果 <xref:System.Diagnostics.TraceLevel> 设置为 `Error` 或更高版本，则该示例会将第二个错误消息输出到第一条消息所在的同一行。</span><span class="sxs-lookup"><span data-stu-id="a1819-459">Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Error` or higher, the example outputs the second error message on the same line as the first message.</span></span> <span data-ttu-id="a1819-460">第二条消息后跟行结束符。</span><span class="sxs-lookup"><span data-stu-id="a1819-460">The second message is followed by a line terminator.</span></span>  
  
 [!code-cpp[Classic Trace.WriteIf2 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Trace.WriteIf2 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Trace.WriteIf2 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Trace.WriteIf2 Example/CS/source.cs#1)]
 [!code-vb[Classic Trace.WriteIf2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Trace.WriteIf2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="a1819-461">可以通过使用 <see langword="If...Then" /> 语句而不是使用语句来最大程度地减少对应用程序进行检测的性能损失 <see cref="M:System.Diagnostics.Trace.WriteIf(System.Boolean,System.String)" /> 。</span><span class="sxs-lookup"><span data-stu-id="a1819-461">You can minimize the performance penalty of instrumenting your application by using <see langword="If...Then" /> statements instead of using <see cref="M:System.Diagnostics.Trace.WriteIf(System.Boolean,System.String)" /> statements.</span></span> <span data-ttu-id="a1819-462">下面两个代码示例发送相同的调试消息。</span><span class="sxs-lookup"><span data-stu-id="a1819-462">The following two code examples send the same debugging message.</span></span> <span data-ttu-id="a1819-463">但是，当跟踪关闭时，第一个示例的速度要快得多，因为如果<c>mySwitch 的</c>计算结果 <see langword="false" /> 不是 <see cref="M:System.Diagnostics.Trace.Write(System.String)" /> 。</span><span class="sxs-lookup"><span data-stu-id="a1819-463">However, the first example is much faster when tracing is off, because if <c>mySwitch.TraceError</c> evaluates to <see langword="false" /> you do not call <see cref="M:System.Diagnostics.Trace.Write(System.String)" />.</span></span> <span data-ttu-id="a1819-464">第二个示例始终调用 <see cref="M:System.Diagnostics.Trace.WriteIf(System.Boolean,System.String)" /> ，即使<c>MySwitch 为 TraceError</c> ，也不会 <see langword="false" /> 生成任何跟踪输出。</span><span class="sxs-lookup"><span data-stu-id="a1819-464">The second example always calls <see cref="M:System.Diagnostics.Trace.WriteIf(System.Boolean,System.String)" />, even when <c>mySwitch.TraceError</c> is <see langword="false" /> and no tracing output is produced.</span></span> <span data-ttu-id="a1819-465">这可能导致不必要地执行任意复杂的代码。</span><span class="sxs-lookup"><span data-stu-id="a1819-465">This can result in unnecessary execution of arbitrarily complex code.</span></span>  
  
 <span data-ttu-id="a1819-466">**第一个示例**</span><span class="sxs-lookup"><span data-stu-id="a1819-466">**First example**</span></span>  
  
```csharp  
if(mySwitch.TraceError)   
    Trace.Write("aNumber = " + aNumber + " out of range");  
```  
  
 <span data-ttu-id="a1819-467">**第二个示例**</span><span class="sxs-lookup"><span data-stu-id="a1819-467">**Second example**</span></span>  
  
```csharp  
Trace.WriteIf(mySwitch.TraceError, "aNumber = " + aNumber + " out of range");  
```</para></block>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteLine">
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="a1819-468">将有关跟踪的信息写入 <see cref="P:System.Diagnostics.Trace.Listeners" /> 集合中的跟踪侦听器。</span><span class="sxs-lookup"><span data-stu-id="a1819-468">Writes information about the trace to the trace listeners in the <see cref="P:System.Diagnostics.Trace.Listeners" /> collection.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Trace.WriteLine(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="static member WriteLine : obj -&gt; unit" Usage="System.Diagnostics.Trace.WriteLine value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Diagnostics.Conditional("TRACE")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.Conditional("TRACE")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="a1819-469">其名称将发送至 <see cref="P:System.Diagnostics.Trace.Listeners" /> 的 <see cref="T:System.Object" />。</span><span class="sxs-lookup"><span data-stu-id="a1819-469">An <see cref="T:System.Object" /> whose name is sent to the <see cref="P:System.Diagnostics.Trace.Listeners" />.</span></span></param>
        <summary><span data-ttu-id="a1819-470">将对象 <see cref="M:System.Object.ToString" /> 方法的值写入 <see cref="P:System.Diagnostics.Trace.Listeners" /> 集合中的跟踪侦听器。</span><span class="sxs-lookup"><span data-stu-id="a1819-470">Writes the value of the object's <see cref="M:System.Object.ToString" /> method to the trace listeners in the <see cref="P:System.Diagnostics.Trace.Listeners" /> collection.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1819-471">默认情况下，输出将写入到的实例中 <xref:System.Diagnostics.DefaultTraceListener> 。</span><span class="sxs-lookup"><span data-stu-id="a1819-471">By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.</span></span>  
  
 <span data-ttu-id="a1819-472">此方法调用 <xref:System.Diagnostics.TraceListener.WriteLine%2A> 跟踪侦听器的方法。</span><span class="sxs-lookup"><span data-stu-id="a1819-472">This method calls the <xref:System.Diagnostics.TraceListener.WriteLine%2A> method of the trace listener.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1819-473">下面的示例创建一个 <xref:System.Diagnostics.TraceSwitch> 名为的 `generalSwitch` 。</span><span class="sxs-lookup"><span data-stu-id="a1819-473">The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`.</span></span> <span data-ttu-id="a1819-474">此开关在代码示例之外设置。</span><span class="sxs-lookup"><span data-stu-id="a1819-474">This switch is set outside the code sample.</span></span>  
  
 <span data-ttu-id="a1819-475">如果开关设置为 <xref:System.Diagnostics.TraceLevel> `Error` 或更高版本，则该示例会将第一条错误消息输出到 <xref:System.Diagnostics.Trace.Listeners%2A> 。</span><span class="sxs-lookup"><span data-stu-id="a1819-475">If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Error` or higher, the example outputs the first error message to the <xref:System.Diagnostics.Trace.Listeners%2A>.</span></span> <span data-ttu-id="a1819-476">有关将侦听器添加到集合的信息 <xref:System.Diagnostics.Trace.Listeners%2A> ，请参阅 <xref:System.Diagnostics.TraceListenerCollection> 类。</span><span class="sxs-lookup"><span data-stu-id="a1819-476">For information on adding a listener to the <xref:System.Diagnostics.Trace.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.</span></span>  
  
 <span data-ttu-id="a1819-477">然后，如果将 <xref:System.Diagnostics.TraceLevel> 设置为 `Verbose` ，则该示例会将对象的名称输出到第一条消息所在的同一行。</span><span class="sxs-lookup"><span data-stu-id="a1819-477">Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Verbose`, the example outputs the name of the object on the same line as the first message.</span></span> <span data-ttu-id="a1819-478">第二条消息后跟行结束符。</span><span class="sxs-lookup"><span data-stu-id="a1819-478">The second message is followed by a line terminator.</span></span>  
  
 [!code-cpp[Classic Trace.WriteLine1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Trace.WriteLine1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Trace.WriteLine1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Trace.WriteLine1 Example/CS/source.cs#1)]
 [!code-vb[Classic Trace.WriteLine1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Trace.WriteLine1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Trace.WriteLine(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(System::String ^ message);" />
      <MemberSignature Language="F#" Value="static member WriteLine : string -&gt; unit" Usage="System.Diagnostics.Trace.WriteLine message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Diagnostics.Conditional("TRACE")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.Conditional("TRACE")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message"><span data-ttu-id="a1819-479">要写入的消息。</span><span class="sxs-lookup"><span data-stu-id="a1819-479">A message to write.</span></span></param>
        <summary><span data-ttu-id="a1819-480">将消息写入 <see cref="P:System.Diagnostics.Trace.Listeners" /> 集合中的跟踪侦听器。</span><span class="sxs-lookup"><span data-stu-id="a1819-480">Writes a message to the trace listeners in the <see cref="P:System.Diagnostics.Trace.Listeners" /> collection.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1819-481">默认情况下，输出将写入到的实例中 <xref:System.Diagnostics.DefaultTraceListener> 。</span><span class="sxs-lookup"><span data-stu-id="a1819-481">By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.</span></span>  
  
 <span data-ttu-id="a1819-482">此方法调用 <xref:System.Diagnostics.TraceListener.WriteLine%2A> 跟踪侦听器的方法。</span><span class="sxs-lookup"><span data-stu-id="a1819-482">This method calls the <xref:System.Diagnostics.TraceListener.WriteLine%2A> method of the trace listener.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1819-483">下面的示例创建一个 <xref:System.Diagnostics.TraceSwitch> 名为的 `generalSwitch` 。</span><span class="sxs-lookup"><span data-stu-id="a1819-483">The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`.</span></span> <span data-ttu-id="a1819-484">此开关在代码示例之外设置。</span><span class="sxs-lookup"><span data-stu-id="a1819-484">This switch is set outside the code sample.</span></span>  
  
 <span data-ttu-id="a1819-485">如果开关设置为 <xref:System.Diagnostics.TraceLevel> `Error` 或更高版本，则该示例会将第一条错误消息输出到 <xref:System.Diagnostics.Trace.Listeners%2A> 。</span><span class="sxs-lookup"><span data-stu-id="a1819-485">If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Error` or higher, the example outputs the first error message to the <xref:System.Diagnostics.Trace.Listeners%2A>.</span></span> <span data-ttu-id="a1819-486">有关将侦听器添加到集合的信息 <xref:System.Diagnostics.Trace.Listeners%2A> ，请参阅 <xref:System.Diagnostics.TraceListenerCollection> 类。</span><span class="sxs-lookup"><span data-stu-id="a1819-486">For information on adding a listener to the <xref:System.Diagnostics.Trace.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.</span></span>  
  
 <span data-ttu-id="a1819-487">然后，如果将 <xref:System.Diagnostics.TraceLevel> 设置为，则该示例会将第 `Verbose` 二个错误消息输出到第一条消息所在的同一行。</span><span class="sxs-lookup"><span data-stu-id="a1819-487">Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Verbose`, the example outputs the second error message on the same line as the first message.</span></span> <span data-ttu-id="a1819-488">第二条消息后跟行结束符。</span><span class="sxs-lookup"><span data-stu-id="a1819-488">The second message is followed by a line terminator.</span></span>  
  
 [!code-cpp[Classic Trace.Write Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Trace.Write Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Trace.Write Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Trace.Write Example/CS/source.cs#1)]
 [!code-vb[Classic Trace.Write Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Trace.Write Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (object value, string category);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(object value, string category) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Trace.WriteLine(System.Object,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (value As Object, category As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(System::Object ^ value, System::String ^ category);" />
      <MemberSignature Language="F#" Value="static member WriteLine : obj * string -&gt; unit" Usage="System.Diagnostics.Trace.WriteLine (value, category)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Diagnostics.Conditional("TRACE")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.Conditional("TRACE")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="category" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="a1819-489">其名称将发送至 <see cref="P:System.Diagnostics.Trace.Listeners" /> 的 <see cref="T:System.Object" />。</span><span class="sxs-lookup"><span data-stu-id="a1819-489">An <see cref="T:System.Object" /> whose name is sent to the <see cref="P:System.Diagnostics.Trace.Listeners" />.</span></span></param>
        <param name="category"><span data-ttu-id="a1819-490">用于组织输出的类别名称。</span><span class="sxs-lookup"><span data-stu-id="a1819-490">A category name used to organize the output.</span></span></param>
        <summary><span data-ttu-id="a1819-491">将类别名称和对象的 <see cref="M:System.Object.ToString" /> 方法的值写入 <see cref="P:System.Diagnostics.Trace.Listeners" /> 集合中的跟踪侦听器。</span><span class="sxs-lookup"><span data-stu-id="a1819-491">Writes a category name and the value of the object's <see cref="M:System.Object.ToString" /> method to the trace listeners in the <see cref="P:System.Diagnostics.Trace.Listeners" /> collection.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1819-492">默认情况下，输出将写入到的实例中 <xref:System.Diagnostics.DefaultTraceListener> 。</span><span class="sxs-lookup"><span data-stu-id="a1819-492">By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.</span></span>  
  
 <span data-ttu-id="a1819-493">`category`参数可用于对输出消息进行分组。</span><span class="sxs-lookup"><span data-stu-id="a1819-493">The `category` parameter can be used to group output messages.</span></span>  
  
 <span data-ttu-id="a1819-494">此方法调用 <xref:System.Diagnostics.TraceListener.WriteLine%2A> 跟踪侦听器的方法。</span><span class="sxs-lookup"><span data-stu-id="a1819-494">This method calls the <xref:System.Diagnostics.TraceListener.WriteLine%2A> method of the trace listener.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1819-495">下面的示例创建一个 <xref:System.Diagnostics.TraceSwitch> 名为的 `generalSwitch` 。</span><span class="sxs-lookup"><span data-stu-id="a1819-495">The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`.</span></span> <span data-ttu-id="a1819-496">此开关在代码示例之外设置。</span><span class="sxs-lookup"><span data-stu-id="a1819-496">This switch is set outside the code sample.</span></span>  
  
 <span data-ttu-id="a1819-497">如果开关设置为 <xref:System.Diagnostics.TraceLevel> `Error` 或更高版本，则该示例会将第一条错误消息输出到 <xref:System.Diagnostics.Trace.Listeners%2A> 。</span><span class="sxs-lookup"><span data-stu-id="a1819-497">If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Error` or higher, the example outputs the first error message to the <xref:System.Diagnostics.Trace.Listeners%2A>.</span></span> <span data-ttu-id="a1819-498">有关将侦听器添加到集合的信息 <xref:System.Diagnostics.Trace.Listeners%2A> ，请参阅 <xref:System.Diagnostics.TraceListenerCollection> 类。</span><span class="sxs-lookup"><span data-stu-id="a1819-498">For information on adding a listener to the <xref:System.Diagnostics.Trace.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.</span></span>  
  
 <span data-ttu-id="a1819-499">然后，如果将 <xref:System.Diagnostics.TraceLevel> 设置为，则该示例会将第 `Verbose` 二个错误消息输出到第一条消息所在的同一行。</span><span class="sxs-lookup"><span data-stu-id="a1819-499">Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Verbose`, the example outputs the second error message on the same line as the first message.</span></span> <span data-ttu-id="a1819-500">第二条消息后跟行结束符。</span><span class="sxs-lookup"><span data-stu-id="a1819-500">The second message is followed by a line terminator.</span></span>  
  
 [!code-cpp[Classic Trace.WriteLine3 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Trace.WriteLine3 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Trace.WriteLine3 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Trace.WriteLine3 Example/CS/source.cs#1)]
 [!code-vb[Classic Trace.WriteLine3 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Trace.WriteLine3 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (string message, string category);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(string message, string category) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Trace.WriteLine(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (message As String, category As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(System::String ^ message, System::String ^ category);" />
      <MemberSignature Language="F#" Value="static member WriteLine : string * string -&gt; unit" Usage="System.Diagnostics.Trace.WriteLine (message, category)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Diagnostics.Conditional("TRACE")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.Conditional("TRACE")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="category" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message"><span data-ttu-id="a1819-501">要写入的消息。</span><span class="sxs-lookup"><span data-stu-id="a1819-501">A message to write.</span></span></param>
        <param name="category"><span data-ttu-id="a1819-502">用于组织输出的类别名称。</span><span class="sxs-lookup"><span data-stu-id="a1819-502">A category name used to organize the output.</span></span></param>
        <summary><span data-ttu-id="a1819-503">将类别名称和消息写入 <see cref="P:System.Diagnostics.Trace.Listeners" /> 集合中的跟踪侦听器。</span><span class="sxs-lookup"><span data-stu-id="a1819-503">Writes a category name and message to the trace listeners in the <see cref="P:System.Diagnostics.Trace.Listeners" /> collection.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1819-504">默认情况下，输出将写入到的实例中 <xref:System.Diagnostics.DefaultTraceListener> 。</span><span class="sxs-lookup"><span data-stu-id="a1819-504">By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.</span></span>  
  
 <span data-ttu-id="a1819-505">`category`参数可用于对输出消息进行分组。</span><span class="sxs-lookup"><span data-stu-id="a1819-505">The `category` parameter can be used to group output messages.</span></span>  
  
 <span data-ttu-id="a1819-506">此方法调用 <xref:System.Diagnostics.TraceListener.WriteLine%2A> 跟踪侦听器的方法。</span><span class="sxs-lookup"><span data-stu-id="a1819-506">This method calls the <xref:System.Diagnostics.TraceListener.WriteLine%2A> method of the trace listener.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1819-507">下面的示例创建一个 <xref:System.Diagnostics.TraceSwitch> 名为的 `generalSwitch` 。</span><span class="sxs-lookup"><span data-stu-id="a1819-507">The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`.</span></span> <span data-ttu-id="a1819-508">此开关在代码示例之外设置。</span><span class="sxs-lookup"><span data-stu-id="a1819-508">This switch is set outside the code sample.</span></span>  
  
 <span data-ttu-id="a1819-509">如果开关设置为 <xref:System.Diagnostics.TraceLevel> `Error` 或更高版本，则该示例会将第一条错误消息输出到 <xref:System.Diagnostics.Trace.Listeners%2A> 。</span><span class="sxs-lookup"><span data-stu-id="a1819-509">If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Error` or higher, the example outputs the first error message to the <xref:System.Diagnostics.Trace.Listeners%2A>.</span></span> <span data-ttu-id="a1819-510">有关将侦听器添加到集合的信息 <xref:System.Diagnostics.Trace.Listeners%2A> ，请参阅 <xref:System.Diagnostics.TraceListenerCollection> 类。</span><span class="sxs-lookup"><span data-stu-id="a1819-510">For information on adding a listener to the <xref:System.Diagnostics.Trace.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.</span></span>  
  
 <span data-ttu-id="a1819-511">然后，如果将 <xref:System.Diagnostics.TraceLevel> 设置为 `Verbose` ，则该示例会将第二个错误消息和与 `category` 第一条消息输出在同一行上。</span><span class="sxs-lookup"><span data-stu-id="a1819-511">Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Verbose`, the example outputs the second error message and the `category` on the same line as the first message.</span></span> <span data-ttu-id="a1819-512">第二条消息后跟行结束符。</span><span class="sxs-lookup"><span data-stu-id="a1819-512">The second message is followed by a line terminator.</span></span>  
  
 [!code-cpp[Classic Trace.WriteLine2 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Trace.WriteLine2 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Trace.WriteLine2 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Trace.WriteLine2 Example/CS/source.cs#1)]
 [!code-vb[Classic Trace.WriteLine2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Trace.WriteLine2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteLineIf">
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="a1819-513">如果条件为 <see langword="true" />，则将有关跟踪的信息写入 <see cref="P:System.Diagnostics.Trace.Listeners" /> 集合中的跟踪侦听器。</span><span class="sxs-lookup"><span data-stu-id="a1819-513">Writes information about the trace to the trace listeners in the <see cref="P:System.Diagnostics.Trace.Listeners" /> collection if a condition is <see langword="true" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteLineIf">
      <MemberSignature Language="C#" Value="public static void WriteLineIf (bool condition, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLineIf(bool condition, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Trace.WriteLineIf(System.Boolean,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLineIf (condition As Boolean, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLineIf(bool condition, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="static member WriteLineIf : bool * obj -&gt; unit" Usage="System.Diagnostics.Trace.WriteLineIf (condition, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Diagnostics.Conditional("TRACE")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.Conditional("TRACE")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="condition"><span data-ttu-id="a1819-514">若要使消息被写入，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="a1819-514"><see langword="true" /> to cause a message to be written; otherwise, <see langword="false" />.</span></span></param>
        <param name="value"><span data-ttu-id="a1819-515">其名称将发送至 <see cref="P:System.Diagnostics.Trace.Listeners" /> 的 <see cref="T:System.Object" />。</span><span class="sxs-lookup"><span data-stu-id="a1819-515">An <see cref="T:System.Object" /> whose name is sent to the <see cref="P:System.Diagnostics.Trace.Listeners" />.</span></span></param>
        <summary><span data-ttu-id="a1819-516">如果条件为 <see langword="true" />，则向 <see cref="P:System.Diagnostics.Trace.Listeners" /> 集合中的跟踪侦听器写入对象的 <see cref="M:System.Object.ToString" /> 方法。</span><span class="sxs-lookup"><span data-stu-id="a1819-516">Writes the value of the object's <see cref="M:System.Object.ToString" /> method to the trace listeners in the <see cref="P:System.Diagnostics.Trace.Listeners" /> collection if a condition is <see langword="true" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1819-517">默认情况下，输出将写入到的实例中 <xref:System.Diagnostics.DefaultTraceListener> 。</span><span class="sxs-lookup"><span data-stu-id="a1819-517">By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.</span></span>  
  
 <span data-ttu-id="a1819-518">此方法调用 <xref:System.Diagnostics.TraceListener.WriteLine%2A> 跟踪侦听器的方法。</span><span class="sxs-lookup"><span data-stu-id="a1819-518">This method calls the <xref:System.Diagnostics.TraceListener.WriteLine%2A> method of the trace listener.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1819-519">下面的示例创建一个 <xref:System.Diagnostics.TraceSwitch> 名为的 `generalSwitch` 。</span><span class="sxs-lookup"><span data-stu-id="a1819-519">The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`.</span></span> <span data-ttu-id="a1819-520">此开关在代码示例之外设置。</span><span class="sxs-lookup"><span data-stu-id="a1819-520">This switch is set outside the code sample.</span></span>  
  
 <span data-ttu-id="a1819-521">如果开关设置为 <xref:System.Diagnostics.TraceLevel> `Error` 或更高版本，则该示例会将第一条错误消息输出到 <xref:System.Diagnostics.Trace.Listeners%2A> 。</span><span class="sxs-lookup"><span data-stu-id="a1819-521">If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Error` or higher, the example outputs the first error message to the <xref:System.Diagnostics.Trace.Listeners%2A>.</span></span> <span data-ttu-id="a1819-522">有关将侦听器添加到集合的信息 <xref:System.Diagnostics.Trace.Listeners%2A> ，请参阅 <xref:System.Diagnostics.TraceListenerCollection> 类。</span><span class="sxs-lookup"><span data-stu-id="a1819-522">For information on adding a listener to the <xref:System.Diagnostics.Trace.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.</span></span>  
  
 <span data-ttu-id="a1819-523">然后，如果将 <xref:System.Diagnostics.TraceLevel> 设置为 `Verbose` ，则该示例会将对象的名称输出到第一条消息所在的同一行。</span><span class="sxs-lookup"><span data-stu-id="a1819-523">Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Verbose`, the example outputs the name of the object on the same line as the first message.</span></span> <span data-ttu-id="a1819-524">第二条消息后跟行结束符。</span><span class="sxs-lookup"><span data-stu-id="a1819-524">The second message is followed by a line terminator.</span></span>  
  
 [!code-cpp[Classic Trace.WriteLineIf1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Trace.WriteLineIf1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Trace.WriteLineIf1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Trace.WriteLineIf1 Example/CS/source.cs#1)]
 [!code-vb[Classic Trace.WriteLineIf1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Trace.WriteLineIf1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="a1819-525">可以通过使用 <see langword="If...Then" /> 语句而不是使用语句来最大程度地减少对应用程序进行检测的性能损失 <see cref="M:System.Diagnostics.Trace.WriteLineIf(System.Boolean,System.String)" /> 。</span><span class="sxs-lookup"><span data-stu-id="a1819-525">You can minimize the performance penalty of instrumenting your application by using <see langword="If...Then" /> statements instead of using <see cref="M:System.Diagnostics.Trace.WriteLineIf(System.Boolean,System.String)" /> statements.</span></span> <span data-ttu-id="a1819-526">下面两个代码示例发送相同的调试消息。</span><span class="sxs-lookup"><span data-stu-id="a1819-526">The following two code examples send the same debugging message.</span></span> <span data-ttu-id="a1819-527">但是，当跟踪关闭时，第一个示例的速度要快得多，因为如果<c>mySwitch 的</c>计算结果 <see langword="false" /> 不是 <see cref="M:System.Diagnostics.Trace.WriteLine(System.String)" /> 。</span><span class="sxs-lookup"><span data-stu-id="a1819-527">However, the first example is much faster when tracing is off, because if <c>mySwitch.TraceError</c> evaluates to <see langword="false" /> you do not call <see cref="M:System.Diagnostics.Trace.WriteLine(System.String)" />.</span></span> <span data-ttu-id="a1819-528">第二个示例始终调用 <see cref="M:System.Diagnostics.Trace.WriteLineIf(System.Boolean,System.String)" /> ，即使<c>MySwitch 为 TraceError</c> ，也不会 <see langword="false" /> 生成任何跟踪输出。</span><span class="sxs-lookup"><span data-stu-id="a1819-528">The second example always calls <see cref="M:System.Diagnostics.Trace.WriteLineIf(System.Boolean,System.String)" />, even when <c>mySwitch.TraceError</c> is <see langword="false" /> and no tracing output is produced.</span></span> <span data-ttu-id="a1819-529">这可能导致不必要地执行任意复杂的代码。</span><span class="sxs-lookup"><span data-stu-id="a1819-529">This can result in unnecessary execution of arbitrarily complex code.</span></span>  
  
 <span data-ttu-id="a1819-530">**第一个示例**</span><span class="sxs-lookup"><span data-stu-id="a1819-530">**First example**</span></span>  
  
```csharp  
if(mySwitch.TraceError)   
    Trace.WriteLine("aNumber = " + aNumber + " out of range");  
```  
  
 <span data-ttu-id="a1819-531">**第二个示例**</span><span class="sxs-lookup"><span data-stu-id="a1819-531">**Second example**</span></span>  
  
```csharp  
Trace.WriteLineIf(mySwitch.TraceError, "aNumber = " + aNumber + " out of range");  
```</para></block>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="WriteLineIf">
      <MemberSignature Language="C#" Value="public static void WriteLineIf (bool condition, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLineIf(bool condition, string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Trace.WriteLineIf(System.Boolean,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLineIf (condition As Boolean, message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLineIf(bool condition, System::String ^ message);" />
      <MemberSignature Language="F#" Value="static member WriteLineIf : bool * string -&gt; unit" Usage="System.Diagnostics.Trace.WriteLineIf (condition, message)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Diagnostics.Conditional("TRACE")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.Conditional("TRACE")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="condition"><span data-ttu-id="a1819-532">若要使消息被写入，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="a1819-532"><see langword="true" /> to cause a message to be written; otherwise, <see langword="false" />.</span></span></param>
        <param name="message"><span data-ttu-id="a1819-533">要写入的消息。</span><span class="sxs-lookup"><span data-stu-id="a1819-533">A message to write.</span></span></param>
        <summary><span data-ttu-id="a1819-534">如果条件为 <see langword="true" />，则将消息写入 <see cref="P:System.Diagnostics.Trace.Listeners" /> 集合中的跟踪侦听器。</span><span class="sxs-lookup"><span data-stu-id="a1819-534">Writes a message to the trace listeners in the <see cref="P:System.Diagnostics.Trace.Listeners" /> collection if a condition is <see langword="true" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1819-535">默认情况下，输出将写入到的实例中 <xref:System.Diagnostics.DefaultTraceListener> 。</span><span class="sxs-lookup"><span data-stu-id="a1819-535">By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.</span></span>  
  
 <span data-ttu-id="a1819-536">此方法调用 <xref:System.Diagnostics.TraceListener.WriteLine%2A> 跟踪侦听器的方法。</span><span class="sxs-lookup"><span data-stu-id="a1819-536">This method calls the <xref:System.Diagnostics.TraceListener.WriteLine%2A> method of the trace listener.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1819-537">下面的示例创建一个 <xref:System.Diagnostics.TraceSwitch> 名为的 `generalSwitch` 。</span><span class="sxs-lookup"><span data-stu-id="a1819-537">The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`.</span></span> <span data-ttu-id="a1819-538">此开关在代码示例之外设置。</span><span class="sxs-lookup"><span data-stu-id="a1819-538">This switch is set outside the code sample.</span></span>  
  
 <span data-ttu-id="a1819-539">如果开关设置为 <xref:System.Diagnostics.TraceLevel> `Error` 或更高版本，则该示例会将第一条错误消息输出到 <xref:System.Diagnostics.Trace.Listeners%2A> 。</span><span class="sxs-lookup"><span data-stu-id="a1819-539">If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Error` or higher, the example outputs the first error message to the <xref:System.Diagnostics.Trace.Listeners%2A>.</span></span> <span data-ttu-id="a1819-540">有关将侦听器添加到集合的信息 <xref:System.Diagnostics.Trace.Listeners%2A> ，请参阅 <xref:System.Diagnostics.TraceListenerCollection> 类。</span><span class="sxs-lookup"><span data-stu-id="a1819-540">For information on adding a listener to the <xref:System.Diagnostics.Trace.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.</span></span>  
  
 <span data-ttu-id="a1819-541">然后，如果将 <xref:System.Diagnostics.TraceLevel> 设置为，则该示例会将第 `Verbose` 二个错误消息输出到第一条消息所在的同一行。</span><span class="sxs-lookup"><span data-stu-id="a1819-541">Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Verbose`, the example outputs the second error message on the same line as the first message.</span></span> <span data-ttu-id="a1819-542">第二条消息后跟行结束符。</span><span class="sxs-lookup"><span data-stu-id="a1819-542">The second message is followed by a line terminator.</span></span>  
  
 [!code-cpp[Classic Trace.WriteIf Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Trace.WriteIf Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Trace.WriteIf Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Trace.WriteIf Example/CS/source.cs#1)]
 [!code-vb[Classic Trace.WriteIf Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Trace.WriteIf Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="a1819-543">可以通过使用 <see langword="If...Then" /> 语句而不是使用语句来最大程度地减少对应用程序进行检测的性能损失 <see cref="M:System.Diagnostics.Trace.WriteLineIf(System.Boolean,System.String)" /> 。</span><span class="sxs-lookup"><span data-stu-id="a1819-543">You can minimize the performance penalty of instrumenting your application by using <see langword="If...Then" /> statements instead of using <see cref="M:System.Diagnostics.Trace.WriteLineIf(System.Boolean,System.String)" /> statements.</span></span> <span data-ttu-id="a1819-544">下面两个代码示例发送相同的调试消息。</span><span class="sxs-lookup"><span data-stu-id="a1819-544">The following two code examples send the same debugging message.</span></span> <span data-ttu-id="a1819-545">但是，当跟踪关闭时，第一个示例的速度要快得多，因为如果<c>mySwitch 的</c>计算结果 <see langword="false" /> 不是 <see cref="M:System.Diagnostics.Trace.WriteLine(System.String)" /> 。</span><span class="sxs-lookup"><span data-stu-id="a1819-545">However, the first example is much faster when tracing is off, because if <c>mySwitch.TraceError</c> evaluates to <see langword="false" /> you do not call <see cref="M:System.Diagnostics.Trace.WriteLine(System.String)" />.</span></span> <span data-ttu-id="a1819-546">第二个示例始终调用 <see cref="M:System.Diagnostics.Trace.WriteLineIf(System.Boolean,System.String)" /> ，即使<c>MySwitch 为 TraceError</c> ，也不会 <see langword="false" /> 生成任何跟踪输出。</span><span class="sxs-lookup"><span data-stu-id="a1819-546">The second example always calls <see cref="M:System.Diagnostics.Trace.WriteLineIf(System.Boolean,System.String)" />, even when <c>mySwitch.TraceError</c> is <see langword="false" /> and no tracing output is produced.</span></span> <span data-ttu-id="a1819-547">这可能导致不必要地执行任意复杂的代码。</span><span class="sxs-lookup"><span data-stu-id="a1819-547">This can result in unnecessary execution of arbitrarily complex code.</span></span>  
  
 <span data-ttu-id="a1819-548">**第一个示例**</span><span class="sxs-lookup"><span data-stu-id="a1819-548">**First example**</span></span>  
  
```csharp  
if(mySwitch.TraceError)   
    Trace.WriteLine("aNumber = " + aNumber + " out of range");  
```  
  
 <span data-ttu-id="a1819-549">**第二个示例**</span><span class="sxs-lookup"><span data-stu-id="a1819-549">**Second example**</span></span>  
  
```csharp  
Trace.WriteLineIf(mySwitch.TraceError, "aNumber = " + aNumber + " out of range");  
```</para></block>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="WriteLineIf">
      <MemberSignature Language="C#" Value="public static void WriteLineIf (bool condition, object value, string category);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLineIf(bool condition, object value, string category) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Trace.WriteLineIf(System.Boolean,System.Object,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLineIf (condition As Boolean, value As Object, category As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLineIf(bool condition, System::Object ^ value, System::String ^ category);" />
      <MemberSignature Language="F#" Value="static member WriteLineIf : bool * obj * string -&gt; unit" Usage="System.Diagnostics.Trace.WriteLineIf (condition, value, category)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Diagnostics.Conditional("TRACE")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.Conditional("TRACE")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="category" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="condition"><span data-ttu-id="a1819-550">若要使消息被写入，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="a1819-550"><see langword="true" /> to cause a message to be written; otherwise, <see langword="false" />.</span></span></param>
        <param name="value"><span data-ttu-id="a1819-551">其名称将发送至 <see cref="P:System.Diagnostics.Trace.Listeners" /> 的 <see cref="T:System.Object" />。</span><span class="sxs-lookup"><span data-stu-id="a1819-551">An <see cref="T:System.Object" /> whose name is sent to the <see cref="P:System.Diagnostics.Trace.Listeners" />.</span></span></param>
        <param name="category"><span data-ttu-id="a1819-552">用于组织输出的类别名称。</span><span class="sxs-lookup"><span data-stu-id="a1819-552">A category name used to organize the output.</span></span></param>
        <summary><span data-ttu-id="a1819-553">如果条件为 <see langword="true" />，则向 <see cref="P:System.Diagnostics.Trace.Listeners" /> 集合中的跟踪侦听器写入类别名称和对象的 <see cref="M:System.Object.ToString" /> 方法值。</span><span class="sxs-lookup"><span data-stu-id="a1819-553">Writes a category name and the value of the object's <see cref="M:System.Object.ToString" /> method to the trace listeners in the <see cref="P:System.Diagnostics.Trace.Listeners" /> collection if a condition is <see langword="true" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1819-554">默认情况下，输出将写入到的实例中 <xref:System.Diagnostics.DefaultTraceListener> 。</span><span class="sxs-lookup"><span data-stu-id="a1819-554">By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.</span></span>  
  
 <span data-ttu-id="a1819-555">`category`参数可用于对输出消息进行分组。</span><span class="sxs-lookup"><span data-stu-id="a1819-555">The `category` parameter can be used to group output messages.</span></span>  
  
 <span data-ttu-id="a1819-556">此方法调用 <xref:System.Diagnostics.TraceListener.WriteLine%2A> 跟踪侦听器的方法。</span><span class="sxs-lookup"><span data-stu-id="a1819-556">This method calls the <xref:System.Diagnostics.TraceListener.WriteLine%2A> method of the trace listener.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1819-557">下面的示例创建一个 <xref:System.Diagnostics.TraceSwitch> 名为的 `generalSwitch` 。</span><span class="sxs-lookup"><span data-stu-id="a1819-557">The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`.</span></span> <span data-ttu-id="a1819-558">此开关在代码示例之外设置。</span><span class="sxs-lookup"><span data-stu-id="a1819-558">This switch is set outside the code sample.</span></span>  
  
 <span data-ttu-id="a1819-559">如果开关设置为 <xref:System.Diagnostics.TraceLevel> `Error` 或更高版本，则该示例会将第一条错误消息输出到 <xref:System.Diagnostics.Trace.Listeners%2A> 。</span><span class="sxs-lookup"><span data-stu-id="a1819-559">If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Error` or higher, the example outputs the first error message to the <xref:System.Diagnostics.Trace.Listeners%2A>.</span></span> <span data-ttu-id="a1819-560">有关将侦听器添加到集合的信息 <xref:System.Diagnostics.Trace.Listeners%2A> ，请参阅 <xref:System.Diagnostics.TraceListenerCollection> 类。</span><span class="sxs-lookup"><span data-stu-id="a1819-560">For information on adding a listener to the <xref:System.Diagnostics.Trace.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.</span></span>  
  
 <span data-ttu-id="a1819-561">然后，如果将 <xref:System.Diagnostics.TraceLevel> 设置为，则该示例会将第 `Verbose` 二个错误消息输出到第一条消息所在的同一行。</span><span class="sxs-lookup"><span data-stu-id="a1819-561">Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Verbose`, the example outputs the second error message on the same line as the first message.</span></span> <span data-ttu-id="a1819-562">第二条消息后跟行结束符。</span><span class="sxs-lookup"><span data-stu-id="a1819-562">The second message is followed by a line terminator.</span></span>  
  
 [!code-cpp[Classic Trace.WriteLineIf3 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Trace.WriteLineIf3 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Trace.WriteLineIf3 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Trace.WriteLineIf3 Example/CS/source.cs#1)]
 [!code-vb[Classic Trace.WriteLineIf3 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Trace.WriteLineIf3 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="a1819-563">可以通过使用 <see langword="If...Then" /> 语句而不是使用语句来最大程度地减少对应用程序进行检测的性能损失 <see cref="M:System.Diagnostics.Trace.WriteLineIf(System.Boolean,System.String)" /> 。</span><span class="sxs-lookup"><span data-stu-id="a1819-563">You can minimize the performance penalty of instrumenting your application by using <see langword="If...Then" /> statements instead of using <see cref="M:System.Diagnostics.Trace.WriteLineIf(System.Boolean,System.String)" /> statements.</span></span> <span data-ttu-id="a1819-564">下面两个代码示例发送相同的调试消息。</span><span class="sxs-lookup"><span data-stu-id="a1819-564">The following two code examples send the same debugging message.</span></span> <span data-ttu-id="a1819-565">但是，当跟踪关闭时，第一个示例的速度要快得多，因为如果<c>mySwitch 的</c>计算结果 <see langword="false" /> 不是 <see cref="M:System.Diagnostics.Trace.WriteLine(System.String)" /> 。</span><span class="sxs-lookup"><span data-stu-id="a1819-565">However, the first example is much faster when tracing is off, because if <c>mySwitch.TraceError</c> evaluates to <see langword="false" /> you do not call <see cref="M:System.Diagnostics.Trace.WriteLine(System.String)" />.</span></span> <span data-ttu-id="a1819-566">第二个示例始终调用 <see cref="M:System.Diagnostics.Trace.WriteLineIf(System.Boolean,System.String)" /> ，即使<c>MySwitch 为 TraceError</c> ，也不会 <see langword="false" /> 生成任何跟踪输出。</span><span class="sxs-lookup"><span data-stu-id="a1819-566">The second example always calls <see cref="M:System.Diagnostics.Trace.WriteLineIf(System.Boolean,System.String)" />, even when <c>mySwitch.TraceError</c> is <see langword="false" /> and no tracing output is produced.</span></span> <span data-ttu-id="a1819-567">这可能导致不必要地执行任意复杂的代码。</span><span class="sxs-lookup"><span data-stu-id="a1819-567">This can result in unnecessary execution of arbitrarily complex code.</span></span>  
  
 <span data-ttu-id="a1819-568">**第一个示例**</span><span class="sxs-lookup"><span data-stu-id="a1819-568">**First example**</span></span>  
  
```csharp  
if(mySwitch.TraceError)   
    Trace.WriteLine("aNumber = " + aNumber + " out of range");  
```  
  
 <span data-ttu-id="a1819-569">**第二个示例**</span><span class="sxs-lookup"><span data-stu-id="a1819-569">**Second example**</span></span>  
  
```csharp  
Trace.WriteLineIf(mySwitch.TraceError, "aNumber = " + aNumber + " out of range");  
```</para></block>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="WriteLineIf">
      <MemberSignature Language="C#" Value="public static void WriteLineIf (bool condition, string message, string category);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLineIf(bool condition, string message, string category) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Trace.WriteLineIf(System.Boolean,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLineIf (condition As Boolean, message As String, category As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLineIf(bool condition, System::String ^ message, System::String ^ category);" />
      <MemberSignature Language="F#" Value="static member WriteLineIf : bool * string * string -&gt; unit" Usage="System.Diagnostics.Trace.WriteLineIf (condition, message, category)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Diagnostics.Conditional("TRACE")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.Conditional("TRACE")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="category" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="condition"><span data-ttu-id="a1819-570">若要使消息被写入，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="a1819-570"><see langword="true" /> to cause a message to be written; otherwise, <see langword="false" />.</span></span></param>
        <param name="message"><span data-ttu-id="a1819-571">要写入的消息。</span><span class="sxs-lookup"><span data-stu-id="a1819-571">A message to write.</span></span></param>
        <param name="category"><span data-ttu-id="a1819-572">用于组织输出的类别名称。</span><span class="sxs-lookup"><span data-stu-id="a1819-572">A category name used to organize the output.</span></span></param>
        <summary><span data-ttu-id="a1819-573">如果条件为 <see langword="true" />，则将类别名称和消息写入 <see cref="P:System.Diagnostics.Trace.Listeners" /> 集合中的跟踪侦听器。</span><span class="sxs-lookup"><span data-stu-id="a1819-573">Writes a category name and message to the trace listeners in the <see cref="P:System.Diagnostics.Trace.Listeners" /> collection if a condition is <see langword="true" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1819-574">默认情况下，输出将写入到的实例中 <xref:System.Diagnostics.DefaultTraceListener> 。</span><span class="sxs-lookup"><span data-stu-id="a1819-574">By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.</span></span>  
  
 <span data-ttu-id="a1819-575">`category`参数可用于对输出消息进行分组。</span><span class="sxs-lookup"><span data-stu-id="a1819-575">The `category` parameter can be used to group output messages.</span></span>  
  
 <span data-ttu-id="a1819-576">此方法调用 <xref:System.Diagnostics.TraceListener.WriteLine%2A> 跟踪侦听器的方法。</span><span class="sxs-lookup"><span data-stu-id="a1819-576">This method calls the <xref:System.Diagnostics.TraceListener.WriteLine%2A> method of the trace listener.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1819-577">下面的示例创建一个 <xref:System.Diagnostics.TraceSwitch> 名为的 `generalSwitch` 。</span><span class="sxs-lookup"><span data-stu-id="a1819-577">The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`.</span></span> <span data-ttu-id="a1819-578">此开关在代码示例之外设置。</span><span class="sxs-lookup"><span data-stu-id="a1819-578">This switch is set outside the code sample.</span></span>  
  
 <span data-ttu-id="a1819-579">如果开关设置为 <xref:System.Diagnostics.TraceLevel> `Error` 或更高版本，则该示例会将第一条错误消息输出到 <xref:System.Diagnostics.Trace.Listeners%2A> 。</span><span class="sxs-lookup"><span data-stu-id="a1819-579">If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Error` or higher, the example outputs the first error message to the <xref:System.Diagnostics.Trace.Listeners%2A>.</span></span> <span data-ttu-id="a1819-580">有关将侦听器添加到集合的信息 <xref:System.Diagnostics.Trace.Listeners%2A> ，请参阅 <xref:System.Diagnostics.TraceListenerCollection> 类。</span><span class="sxs-lookup"><span data-stu-id="a1819-580">For information on adding a listener to the <xref:System.Diagnostics.Trace.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.</span></span>  
  
 <span data-ttu-id="a1819-581">然后，如果将 <xref:System.Diagnostics.TraceLevel> 设置为 `Verbose` ，则该示例会将第二个错误消息和与 `category` 第一条消息输出在同一行上。</span><span class="sxs-lookup"><span data-stu-id="a1819-581">Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Verbose`, the example outputs the second error message and the `category` on the same line as the first message.</span></span> <span data-ttu-id="a1819-582">第二条消息后跟行结束符。</span><span class="sxs-lookup"><span data-stu-id="a1819-582">The second message is followed by a line terminator.</span></span>  
  
 [!code-cpp[Classic Trace.WriteLineIf2 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Trace.WriteLineIf2 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Trace.WriteLineIf2 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Trace.WriteLineIf2 Example/CS/source.cs#1)]
 [!code-vb[Classic Trace.WriteLineIf2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Trace.WriteLineIf2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="a1819-583">可以通过使用 <see langword="If...Then" /> 语句而不是使用语句来最大程度地减少对应用程序进行检测的性能损失 <see cref="M:System.Diagnostics.Trace.WriteLineIf(System.Boolean,System.String)" /> 。</span><span class="sxs-lookup"><span data-stu-id="a1819-583">You can minimize the performance penalty of instrumenting your application by using <see langword="If...Then" /> statements instead of using <see cref="M:System.Diagnostics.Trace.WriteLineIf(System.Boolean,System.String)" /> statements.</span></span> <span data-ttu-id="a1819-584">下面两个代码示例发送相同的调试消息。</span><span class="sxs-lookup"><span data-stu-id="a1819-584">The following two code examples send the same debugging message.</span></span> <span data-ttu-id="a1819-585">但是，当跟踪关闭时，第一个示例的速度要快得多，因为如果<c>mySwitch 的</c>计算结果 <see langword="false" /> 不是 <see cref="M:System.Diagnostics.Trace.WriteLine(System.String)" /> 。</span><span class="sxs-lookup"><span data-stu-id="a1819-585">However, the first example is much faster when tracing is off, because if <c>mySwitch.TraceError</c> evaluates to <see langword="false" /> you do not call <see cref="M:System.Diagnostics.Trace.WriteLine(System.String)" />.</span></span> <span data-ttu-id="a1819-586">第二个示例始终调用 <see cref="M:System.Diagnostics.Trace.WriteLineIf(System.Boolean,System.String)" /> ，即使<c>MySwitch 为 TraceError</c> ，也不会 <see langword="false" /> 生成任何跟踪输出。</span><span class="sxs-lookup"><span data-stu-id="a1819-586">The second example always calls <see cref="M:System.Diagnostics.Trace.WriteLineIf(System.Boolean,System.String)" />, even when <c>mySwitch.TraceError</c> is <see langword="false" /> and no tracing output is produced.</span></span> <span data-ttu-id="a1819-587">这可能导致不必要地执行任意复杂的代码。</span><span class="sxs-lookup"><span data-stu-id="a1819-587">This can result in unnecessary execution of arbitrarily complex code.</span></span>  
  
 <span data-ttu-id="a1819-588">**第一个示例**</span><span class="sxs-lookup"><span data-stu-id="a1819-588">**First example**</span></span>  
  
```csharp  
if(mySwitch.TraceError)   
    Trace.WriteLine("aNumber = " + aNumber + " out of range");  
```  
  
 <span data-ttu-id="a1819-589">**第二个示例**</span><span class="sxs-lookup"><span data-stu-id="a1819-589">**Second example**</span></span>  
  
```csharp  
Trace.WriteLineIf(mySwitch.TraceError, "aNumber = " + aNumber + " out of range");  
```</para></block>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
  </Members>
</Type>
