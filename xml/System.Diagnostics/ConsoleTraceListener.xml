<Type Name="ConsoleTraceListener" FullName="System.Diagnostics.ConsoleTraceListener">
  <Metadata><Meta Name="ms.openlocfilehash" Value="c3cb6ca76cf168420256ee203732c7ac72a08733" /><Meta Name="ms.sourcegitcommit" Value="9506e50ec7beb4fa30206b9840dc546b035a6600" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/23/2020" /><Meta Name="ms.locfileid" Value="83975356" /></Metadata><TypeSignature Language="C#" Value="public class ConsoleTraceListener : System.Diagnostics.TextWriterTraceListener" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ConsoleTraceListener extends System.Diagnostics.TextWriterTraceListener" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.ConsoleTraceListener" />
  <TypeSignature Language="VB.NET" Value="Public Class ConsoleTraceListener&#xA;Inherits TextWriterTraceListener" />
  <TypeSignature Language="C++ CLI" Value="public ref class ConsoleTraceListener : System::Diagnostics::TextWriterTraceListener" />
  <TypeSignature Language="F#" Value="type ConsoleTraceListener = class&#xA;    inherit TextWriterTraceListener" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Diagnostics.TextWriterTraceListener</AssemblyName>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Diagnostics.TextWriterTraceListener</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="8c4b4-101">将跟踪或调试输出指引至标准输出或标准错误流。</span><span class="sxs-lookup"><span data-stu-id="8c4b4-101">Directs tracing or debugging output to either the standard output or the standard error stream.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8c4b4-102">使用 <xref:System.Diagnostics.ConsoleTraceListener> 类将跟踪和调试消息写入控制台。</span><span class="sxs-lookup"><span data-stu-id="8c4b4-102">Use the <xref:System.Diagnostics.ConsoleTraceListener> class to write trace and debugging messages to the console.</span></span> <span data-ttu-id="8c4b4-103">您可以 <xref:System.Diagnostics.ConsoleTraceListener> 对对象进行初始化，以将跟踪消息写入 <xref:System.Console.Out%2A?displayProperty=nameWithType> 流或 <xref:System.Console.Error%2A?displayProperty=nameWithType> 流中。</span><span class="sxs-lookup"><span data-stu-id="8c4b4-103">You can initialize a <xref:System.Diagnostics.ConsoleTraceListener> object to write trace messages to the <xref:System.Console.Out%2A?displayProperty=nameWithType> stream or to the <xref:System.Console.Error%2A?displayProperty=nameWithType> stream.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="8c4b4-104"><xref:System.IDisposable> 接口。</span><span class="sxs-lookup"><span data-stu-id="8c4b4-104"><xref:System.IDisposable> interface.</span></span> <span data-ttu-id="8c4b4-105">在使用完类型后，您应直接或间接释放类型。</span><span class="sxs-lookup"><span data-stu-id="8c4b4-105">When you have finished using the type, you should dispose of it either directly or indirectly.</span></span> <span data-ttu-id="8c4b4-106">若要直接释放类型，请 <xref:System.IDisposable.Dispose%2A> 在块中调用其方法 `try` / `catch` 。</span><span class="sxs-lookup"><span data-stu-id="8c4b4-106">To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a`try`/`catch` block.</span></span> <span data-ttu-id="8c4b4-107">若要间接释放类型，请使用 `using`（在 C# 中）或 `Using`（在 Visual Basic 中）等语言构造。</span><span class="sxs-lookup"><span data-stu-id="8c4b4-107">To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic).</span></span> <span data-ttu-id="8c4b4-108">有关详细信息，请参阅 <xref:System.IDisposable> 接口主题中的“使用实现 IDisposable 的对象”一节。</span><span class="sxs-lookup"><span data-stu-id="8c4b4-108">For more information, see the "Using an Object that Implements IDisposable" section in the <xref:System.IDisposable> interface topic.</span></span>  
  
 <span data-ttu-id="8c4b4-109">启用跟踪和调试输出后， <xref:System.Diagnostics.ConsoleTraceListener> 消息将写入指定的 <xref:System.Console?displayProperty=nameWithType> 流，这与用或方法编写消息的方式类似 <xref:System.Console.Write%2A?displayProperty=nameWithType> <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="8c4b4-109">When trace and debugging output is enabled, the <xref:System.Diagnostics.ConsoleTraceListener> messages are written to the specified <xref:System.Console?displayProperty=nameWithType> stream, which is similar to the way messages are written with the <xref:System.Console.Write%2A?displayProperty=nameWithType> or <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> methods.</span></span> <span data-ttu-id="8c4b4-110">在控制台应用程序中， <xref:System.Console?displayProperty=nameWithType> 输出和错误流将消息写入现有控制台窗口，或者您可以重定向流以写入到 <xref:System.IO.TextWriter?displayProperty=nameWithType> 实例。</span><span class="sxs-lookup"><span data-stu-id="8c4b4-110">In a console application, the <xref:System.Console?displayProperty=nameWithType> output and error streams write messages to the existing console window, or you can redirect the streams to write to a <xref:System.IO.TextWriter?displayProperty=nameWithType> instance.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8c4b4-111">如果控制台不存在（例如，在基于 Windows 的应用程序中），则不会显示写入控制台的消息。</span><span class="sxs-lookup"><span data-stu-id="8c4b4-111">If the console does not exist, as in a Windows-based application, messages written to the console are not displayed.</span></span>  
  
 <span data-ttu-id="8c4b4-112"><xref:System.Diagnostics.ConsoleTraceListener> <xref:System.Diagnostics.Trace.Listeners%2A> 如果希望 <xref:System.Diagnostics.Trace> 将通过、 <xref:System.Diagnostics.TraceSource> 或编写的消息 <xref:System.Diagnostics.Debug> 写入控制台，请将对象添加到相应的集合中。</span><span class="sxs-lookup"><span data-stu-id="8c4b4-112">Add a <xref:System.Diagnostics.ConsoleTraceListener> object to the appropriate <xref:System.Diagnostics.Trace.Listeners%2A> collection if you want messages written through <xref:System.Diagnostics.Trace>, <xref:System.Diagnostics.TraceSource>, or <xref:System.Diagnostics.Debug> to be written to the console.</span></span> <span data-ttu-id="8c4b4-113">此外，还可以使用或方法将消息直接写入控制台 <xref:System.Diagnostics.Trace.Write%2A?displayProperty=nameWithType> <xref:System.Diagnostics.Trace.WriteLine%2A?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="8c4b4-113">In addition, you can write messages directly to the console using the <xref:System.Diagnostics.Trace.Write%2A?displayProperty=nameWithType> or <xref:System.Diagnostics.Trace.WriteLine%2A?displayProperty=nameWithType> methods.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8c4b4-114"><xref:System.Diagnostics.Debug>和 <xref:System.Diagnostics.Trace> 类共享同一 <xref:System.Diagnostics.TraceListenerCollection> 集合，并通过其各自的属性进行访问 `Listeners` 。</span><span class="sxs-lookup"><span data-stu-id="8c4b4-114">The <xref:System.Diagnostics.Debug> and <xref:System.Diagnostics.Trace> classes share the same <xref:System.Diagnostics.TraceListenerCollection> collection, accessed through their respective `Listeners` properties.</span></span> <span data-ttu-id="8c4b4-115">如果 <xref:System.Diagnostics.ConsoleTraceListener> 使用这些类之一将对象添加到集合，则其他类将自动使用同一个侦听器。</span><span class="sxs-lookup"><span data-stu-id="8c4b4-115">If you add a <xref:System.Diagnostics.ConsoleTraceListener> object to the collection using one of these classes, the other class automatically uses the same listener.</span></span>  
  
 <span data-ttu-id="8c4b4-116">大多数编译器通过条件编译标志启用跟踪和调试输出。</span><span class="sxs-lookup"><span data-stu-id="8c4b4-116">Most compilers enable trace and debug output through conditional compilation flags.</span></span> <span data-ttu-id="8c4b4-117">如果不启用跟踪或调试，则 <xref:System.Diagnostics.Debug?displayProperty=nameWithType> <xref:System.Diagnostics.Trace?displayProperty=nameWithType> 会有效地忽略通过和类写入的消息。</span><span class="sxs-lookup"><span data-stu-id="8c4b4-117">If you do not enable tracing or debugging, the messages written through the <xref:System.Diagnostics.Debug?displayProperty=nameWithType> and <xref:System.Diagnostics.Trace?displayProperty=nameWithType> classes are effectively ignored.</span></span> <span data-ttu-id="8c4b4-118">启用跟踪和调试输出的语法特定于编译器;如果使用 c # 或 Visual Basic 以外的编译器，请参阅编译器的文档。</span><span class="sxs-lookup"><span data-stu-id="8c4b4-118">The syntax to enable trace and debug output is compiler specific; if you use compilers other than C# or Visual Basic, refer to the documentation for your compiler.</span></span>  
  
-   <span data-ttu-id="8c4b4-119">若要在 c # 中启用调试，请在编译代码时将 **/d： debug**标志添加到编译器命令行，也可以将 **#define 调试**添加到文件的顶部。</span><span class="sxs-lookup"><span data-stu-id="8c4b4-119">To enable debugging in C#, add the **/d:DEBUG**flag to the compiler command line when you compile your code, or you can add **#define DEBUG** to the top of your file.</span></span> <span data-ttu-id="8c4b4-120">在 Visual Basic 中，将 **/d： DEBUG = True**标志添加到编译器命令行。</span><span class="sxs-lookup"><span data-stu-id="8c4b4-120">In Visual Basic, add the **/d:DEBUG=True** flag to the compiler command line.</span></span>  
  
-   <span data-ttu-id="8c4b4-121">若要使用 c # 启用跟踪，请在编译代码时将 **/d： TRACE**标志添加到编译器命令行，或将 **#define trace**添加到文件的顶部。</span><span class="sxs-lookup"><span data-stu-id="8c4b4-121">To enable tracing in C#, add the **/d:TRACE** flag to the compiler command line when you compile your code, or add **#define TRACE** to the top of your file.</span></span> <span data-ttu-id="8c4b4-122">在 Visual Basic 中，将 **/d： TRACE = True**标志添加到编译器命令行。</span><span class="sxs-lookup"><span data-stu-id="8c4b4-122">In Visual Basic, add the **/d:TRACE=True** flag to the compiler command line.</span></span>  
  
 <span data-ttu-id="8c4b4-123">您可以 <xref:System.Diagnostics.ConsoleTraceListener> 在代码中将对象添加到 <xref:System.Diagnostics.Trace.Listeners%2A> 集合中，也可以 <xref:System.Diagnostics.ConsoleTraceListener> <xref:System.Diagnostics.Trace.Listeners%2A> 通过应用程序配置文件将对象添加到集合中。</span><span class="sxs-lookup"><span data-stu-id="8c4b4-123">You can add a <xref:System.Diagnostics.ConsoleTraceListener> object to the <xref:System.Diagnostics.Trace.Listeners%2A> collection in your code, or you can add a <xref:System.Diagnostics.ConsoleTraceListener> object to the <xref:System.Diagnostics.Trace.Listeners%2A> collection through the application configuration file.</span></span> <span data-ttu-id="8c4b4-124"><xref:System.Diagnostics.ConsoleTraceListener>在代码中添加对象，以写入特定代码节或执行路径的消息。</span><span class="sxs-lookup"><span data-stu-id="8c4b4-124">Add the <xref:System.Diagnostics.ConsoleTraceListener> object in your code to write messages for a specific code section or execution path.</span></span> <span data-ttu-id="8c4b4-125">将 <xref:System.Diagnostics.ConsoleTraceListener> 对象添加到应用程序配置文件中，以便在应用程序执行时将所有跟踪和调试消息定向到控制台。</span><span class="sxs-lookup"><span data-stu-id="8c4b4-125">Add the <xref:System.Diagnostics.ConsoleTraceListener> object in your application configuration file to direct all trace and debug messages to the console while the application executes.</span></span>  
  
 <span data-ttu-id="8c4b4-126">若要为特定代码段将跟踪和调试消息写入控制台，请初始化 <xref:System.Diagnostics.ConsoleTraceListener> 对象并将其添加到集合中 <xref:System.Diagnostics.Trace.Listeners%2A> 。</span><span class="sxs-lookup"><span data-stu-id="8c4b4-126">To write trace and debug messages to the console for a specific section of code, initialize a <xref:System.Diagnostics.ConsoleTraceListener> object and add it to the <xref:System.Diagnostics.Trace.Listeners%2A> collection.</span></span> <span data-ttu-id="8c4b4-127">使用或类检测包含消息的代码部分 <xref:System.Diagnostics.Trace> <xref:System.Diagnostics.Debug> 。</span><span class="sxs-lookup"><span data-stu-id="8c4b4-127">Instrument the section of code that contains messages using the <xref:System.Diagnostics.Trace> or <xref:System.Diagnostics.Debug> classes.</span></span> <span data-ttu-id="8c4b4-128">在代码部分的末尾，从集合中删除 <xref:System.Diagnostics.ConsoleTraceListener> 对象 <xref:System.Diagnostics.Trace.Listeners%2A> ，然后对调用 <xref:System.Diagnostics.TextWriterTraceListener.Close%2A> 方法 <xref:System.Diagnostics.ConsoleTraceListener> 。</span><span class="sxs-lookup"><span data-stu-id="8c4b4-128">At the end of the code section, remove the <xref:System.Diagnostics.ConsoleTraceListener> object from the <xref:System.Diagnostics.Trace.Listeners%2A> collection, and call the <xref:System.Diagnostics.TextWriterTraceListener.Close%2A> method on the <xref:System.Diagnostics.ConsoleTraceListener>.</span></span>  
  
 <span data-ttu-id="8c4b4-129">若要在应用程序执行时将所有跟踪和调试消息定向到控制台，请将 <xref:System.Diagnostics.ConsoleTraceListener> 对象添加到应用程序配置文件中。</span><span class="sxs-lookup"><span data-stu-id="8c4b4-129">To direct all trace and debug messages to the console while the application executes, add a <xref:System.Diagnostics.ConsoleTraceListener> object to the application configuration file.</span></span> <span data-ttu-id="8c4b4-130">编辑与应用程序名称对应的配置文件，或者编辑项目中的 app.config 文件 [!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)] 。</span><span class="sxs-lookup"><span data-stu-id="8c4b4-130">Edit the configuration file that corresponds to the name of your application, or the app.config file in a [!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)] project.</span></span> <span data-ttu-id="8c4b4-131">在此文件中，为插入一个元素 <xref:System.Diagnostics.ConsoleTraceListener> 。</span><span class="sxs-lookup"><span data-stu-id="8c4b4-131">In this file, insert an element for a <xref:System.Diagnostics.ConsoleTraceListener>.</span></span>  
  
 <span data-ttu-id="8c4b4-132">下面的示例将一个 <xref:System.Diagnostics.ConsoleTraceListener> 名为 `configConsoleListener` 的对象添加到 <xref:System.Diagnostics.Trace.Listeners%2A> 集合中。</span><span class="sxs-lookup"><span data-stu-id="8c4b4-132">The following example adds a <xref:System.Diagnostics.ConsoleTraceListener> object named `configConsoleListener` to the <xref:System.Diagnostics.Trace.Listeners%2A> collection.</span></span>  
  
```xml  
<configuration>  
  <system.diagnostics>  
    <trace autoflush="false" indentsize="4">  
      <listeners>  
        <add name="configConsoleListener"            type="System.Diagnostics.ConsoleTraceListener" />  
      </listeners>  
    </trace>  
  </system.diagnostics>  
 </configuration>  
```  
  
 <span data-ttu-id="8c4b4-133">有关在应用程序配置文件中添加跟踪侦听器的详细信息，请参阅[ &lt; 侦听器 &gt; ](/dotnet/framework/configure-apps/file-schema/trace-debug/listeners-element-for-trace)。</span><span class="sxs-lookup"><span data-stu-id="8c4b4-133">For details about adding trace listeners in the application configuration file, see [&lt;listeners&gt;](/dotnet/framework/configure-apps/file-schema/trace-debug/listeners-element-for-trace).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8c4b4-134">下面的代码示例实现了一个控制台应用程序，其中包含具有两个公共方法的类。</span><span class="sxs-lookup"><span data-stu-id="8c4b4-134">The following code example implements a console application consisting of a class with two public methods.</span></span>  
  
 <span data-ttu-id="8c4b4-135">`Main`方法检查命令行参数，并确定是否应将跟踪输出定向到标准错误流或标准输出流。</span><span class="sxs-lookup"><span data-stu-id="8c4b4-135">The `Main` method examines the command-line arguments and determines if trace output should be directed to the standard error stream or the standard output stream.</span></span> <span data-ttu-id="8c4b4-136">`Main`创建并初始化 <xref:System.Diagnostics.ConsoleTraceListener> 指定的 <xref:System.Console> 输出流的对象，并将此对象添加到跟踪侦听器集合。</span><span class="sxs-lookup"><span data-stu-id="8c4b4-136">`Main` creates and initializes a <xref:System.Diagnostics.ConsoleTraceListener> object for the specified <xref:System.Console> output stream, and adds this object to the trace listener collection.</span></span> <span data-ttu-id="8c4b4-137">然后，它调用 `WriteEnvironmentInfoToTrace` 方法，该方法将有关执行环境的详细信息和跟踪侦听器配置写入跟踪输出。</span><span class="sxs-lookup"><span data-stu-id="8c4b4-137">It then calls the `WriteEnvironmentInfoToTrace` method, which writes details about the executing environment and the trace listener configuration to the trace output.</span></span>  
  
 <span data-ttu-id="8c4b4-138">运行示例应用程序时，会通过对象将环境和跟踪配置详细信息写入指定的控制台输出流中 <xref:System.Diagnostics.ConsoleTraceListener> 。</span><span class="sxs-lookup"><span data-stu-id="8c4b4-138">When the example application runs, the environment and trace configuration details are written to the specified console output stream through the <xref:System.Diagnostics.ConsoleTraceListener> object.</span></span>  
  
 [!code-csharp[Diagnostics_ConsoleTraceListener#1](~/samples/snippets/csharp/VS_Snippets_CLR/Diagnostics_ConsoleTraceListener/CS/program.cs#1)]
 [!code-vb[Diagnostics_ConsoleTraceListener#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Diagnostics_ConsoleTraceListener/VB/consoletrace.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Diagnostics.TraceListener" />
    <altmember cref="T:System.Diagnostics.TextWriterTraceListener" />
    <altmember cref="T:System.Diagnostics.Debug" />
    <altmember cref="T:System.Diagnostics.Trace" />
    <altmember cref="T:System.Console" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="8c4b4-139">初始化 <see cref="T:System.Diagnostics.ConsoleTraceListener" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="8c4b4-139">Initializes a new instance of the <see cref="T:System.Diagnostics.ConsoleTraceListener" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ConsoleTraceListener ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.ConsoleTraceListener.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ConsoleTraceListener();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TextWriterTraceListener</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="8c4b4-140">初始化 <see cref="T:System.Diagnostics.ConsoleTraceListener" /> 类的新实例，并将跟踪输出写入标准输出流中。</span><span class="sxs-lookup"><span data-stu-id="8c4b4-140">Initializes a new instance of the <see cref="T:System.Diagnostics.ConsoleTraceListener" /> class with trace output written to the standard output stream.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8c4b4-141">此构造函数初始化 <xref:System.Diagnostics.ConsoleTraceListener> 对象，以将消息写入 <xref:System.Console.Out%2A?displayProperty=nameWithType> 流中。</span><span class="sxs-lookup"><span data-stu-id="8c4b4-141">This constructor initializes a <xref:System.Diagnostics.ConsoleTraceListener> object to write messages to the <xref:System.Console.Out%2A?displayProperty=nameWithType> stream.</span></span> <span data-ttu-id="8c4b4-142">将其 <xref:System.Diagnostics.TraceListener.Name%2A> 属性初始化为空字符串（""）。</span><span class="sxs-lookup"><span data-stu-id="8c4b4-142">Its <xref:System.Diagnostics.TraceListener.Name%2A> property is initialized to an empty string ("").</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8c4b4-143">下面的代码示例初始化 <xref:System.Diagnostics.ConsoleTraceListener> 指定的 <xref:System.Console> 输出流的对象，并将其添加到跟踪侦听器集合。</span><span class="sxs-lookup"><span data-stu-id="8c4b4-143">The following code example initializes a <xref:System.Diagnostics.ConsoleTraceListener> object for the specified <xref:System.Console> output stream and adds it to the trace listener collection.</span></span> <span data-ttu-id="8c4b4-144">此代码示例是为类提供的更大示例的一部分 <xref:System.Diagnostics.ConsoleTraceListener> 。</span><span class="sxs-lookup"><span data-stu-id="8c4b4-144">This code example is part of a larger example provided for the <xref:System.Diagnostics.ConsoleTraceListener> class.</span></span>  
  
 [!code-csharp[Diagnostics_ConsoleTraceListener#2](~/samples/snippets/csharp/VS_Snippets_CLR/Diagnostics_ConsoleTraceListener/CS/program.cs#2)]
 [!code-vb[Diagnostics_ConsoleTraceListener#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/Diagnostics_ConsoleTraceListener/VB/consoletrace.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.EventLogTraceListener" />
        <altmember cref="T:System.Diagnostics.TextWriterTraceListener" />
        <altmember cref="P:System.Console.Out" />
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ConsoleTraceListener (bool useErrorStream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool useErrorStream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.ConsoleTraceListener.#ctor(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (useErrorStream As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ConsoleTraceListener(bool useErrorStream);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.ConsoleTraceListener : bool -&gt; System.Diagnostics.ConsoleTraceListener" Usage="new System.Diagnostics.ConsoleTraceListener useErrorStream" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TextWriterTraceListener</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="useErrorStream" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="useErrorStream"><span data-ttu-id="8c4b4-145">若为 <see langword="true" />，则将跟踪和调试输出写入标准错误流中；若为 <see langword="false" />，则将跟踪和调试输出写入标准输出流中。</span><span class="sxs-lookup"><span data-stu-id="8c4b4-145"><see langword="true" /> to write tracing and debugging output to the standard error stream; <see langword="false" /> to write tracing and debugging output to the standard output stream.</span></span></param>
        <summary><span data-ttu-id="8c4b4-146">初始化 <see cref="T:System.Diagnostics.ConsoleTraceListener" /> 类的一个新实例，并利用一个选项将跟踪输出写入标准输出流或标准错误流中。</span><span class="sxs-lookup"><span data-stu-id="8c4b4-146">Initializes a new instance of the <see cref="T:System.Diagnostics.ConsoleTraceListener" /> class with an option to write trace output to the standard output stream or the standard error stream.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8c4b4-147">此构造函数初始化 <xref:System.Diagnostics.ConsoleTraceListener> 对象，以将消息写入到 <xref:System.Console.Out%2A?displayProperty=nameWithType> 流或 <xref:System.Console.Error%2A?displayProperty=nameWithType> 流中。</span><span class="sxs-lookup"><span data-stu-id="8c4b4-147">This constructor initializes a <xref:System.Diagnostics.ConsoleTraceListener> object to write messages to either the <xref:System.Console.Out%2A?displayProperty=nameWithType> or the <xref:System.Console.Error%2A?displayProperty=nameWithType> stream.</span></span> <span data-ttu-id="8c4b4-148">将其 <xref:System.Diagnostics.TraceListener.Name%2A> 属性初始化为空字符串（""）。</span><span class="sxs-lookup"><span data-stu-id="8c4b4-148">Its <xref:System.Diagnostics.TraceListener.Name%2A> property is initialized to an empty string ("").</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8c4b4-149">下面的代码示例初始化 <xref:System.Diagnostics.ConsoleTraceListener> 指定的 <xref:System.Console> 输出流的对象，并将其添加到跟踪侦听器集合。</span><span class="sxs-lookup"><span data-stu-id="8c4b4-149">The following code example initializes a <xref:System.Diagnostics.ConsoleTraceListener> object for the specified <xref:System.Console> output stream and adds it to the trace listener collection.</span></span> <span data-ttu-id="8c4b4-150">此代码示例是为类提供的更大示例的一部分 <xref:System.Diagnostics.ConsoleTraceListener> 。</span><span class="sxs-lookup"><span data-stu-id="8c4b4-150">This code example is part of a larger example provided for the <xref:System.Diagnostics.ConsoleTraceListener> class.</span></span>  
  
 [!code-csharp[Diagnostics_ConsoleTraceListener#2](~/samples/snippets/csharp/VS_Snippets_CLR/Diagnostics_ConsoleTraceListener/CS/program.cs#2)]
 [!code-vb[Diagnostics_ConsoleTraceListener#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/Diagnostics_ConsoleTraceListener/VB/consoletrace.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.EventLogTraceListener" />
        <altmember cref="T:System.Diagnostics.TextWriterTraceListener" />
        <altmember cref="T:System.Console" />
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public override void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.ConsoleTraceListener.Close" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Close();" />
      <MemberSignature Language="F#" Value="override this.Close : unit -&gt; unit" Usage="consoleTraceListener.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TextWriterTraceListener</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="8c4b4-151">关闭到为此跟踪侦听器指定的流的输出。</span><span class="sxs-lookup"><span data-stu-id="8c4b4-151">Closes the output to the stream specified for this trace listener.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8c4b4-152">为此 <xref:System.Diagnostics.ConsoleTraceListener> 实例（ <xref:System.Console.Out%2A?displayProperty=nameWithType> 流或流）指定的流已 <xref:System.Console.Error%2A?displayProperty=nameWithType> 关闭。</span><span class="sxs-lookup"><span data-stu-id="8c4b4-152">The stream specified for this <xref:System.Diagnostics.ConsoleTraceListener> instance (either the <xref:System.Console.Out%2A?displayProperty=nameWithType> stream or the <xref:System.Console.Error%2A?displayProperty=nameWithType> stream) is closed.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
