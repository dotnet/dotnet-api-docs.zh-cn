<Type Name="ConsoleTraceListener" FullName="System.Diagnostics.ConsoleTraceListener">
  <Metadata><Meta Name="ms.openlocfilehash" Value="c3cb6ca76cf168420256ee203732c7ac72a08733" /><Meta Name="ms.sourcegitcommit" Value="c982ad9e10a242d90f1e631b5981570f9e5d9f34" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/10/2020" /><Meta Name="ms.locfileid" Value="89674008" /></Metadata><TypeSignature Language="C#" Value="public class ConsoleTraceListener : System.Diagnostics.TextWriterTraceListener" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ConsoleTraceListener extends System.Diagnostics.TextWriterTraceListener" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.ConsoleTraceListener" />
  <TypeSignature Language="VB.NET" Value="Public Class ConsoleTraceListener&#xA;Inherits TextWriterTraceListener" />
  <TypeSignature Language="C++ CLI" Value="public ref class ConsoleTraceListener : System::Diagnostics::TextWriterTraceListener" />
  <TypeSignature Language="F#" Value="type ConsoleTraceListener = class&#xA;    inherit TextWriterTraceListener" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Diagnostics.TextWriterTraceListener</AssemblyName>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Diagnostics.TextWriterTraceListener</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>将跟踪或调试输出指引至标准输出或标准错误流。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用 <xref:System.Diagnostics.ConsoleTraceListener> 类将跟踪和调试消息写入控制台。 您可以 <xref:System.Diagnostics.ConsoleTraceListener> 对对象进行初始化，以将跟踪消息写入 <xref:System.Console.Out%2A?displayProperty=nameWithType> 流或 <xref:System.Console.Error%2A?displayProperty=nameWithType> 流中。  
  
> [!IMPORTANT]
>  <xref:System.IDisposable> 接口。 在使用完类型后，您应直接或间接释放类型。 若要直接释放类型，请 <xref:System.IDisposable.Dispose%2A> 在块中调用其方法 `try` / `catch` 。 若要间接释放类型，请使用 `using`（在 C# 中）或 `Using`（在 Visual Basic 中）等语言构造。 有关详细信息，请参阅 <xref:System.IDisposable> 接口主题中的“使用实现 IDisposable 的对象”一节。  
  
 启用跟踪和调试输出后， <xref:System.Diagnostics.ConsoleTraceListener> 消息将写入指定的 <xref:System.Console?displayProperty=nameWithType> 流，这与用或方法编写消息的方式类似 <xref:System.Console.Write%2A?displayProperty=nameWithType> <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 。 在控制台应用程序中， <xref:System.Console?displayProperty=nameWithType> 输出和错误流将消息写入现有控制台窗口，或者您可以重定向流以写入到 <xref:System.IO.TextWriter?displayProperty=nameWithType> 实例。  
  
> [!NOTE]
>  如果控制台不存在（例如，在基于 Windows 的应用程序中），则不会显示写入控制台的消息。  
  
 <xref:System.Diagnostics.ConsoleTraceListener> <xref:System.Diagnostics.Trace.Listeners%2A> 如果希望 <xref:System.Diagnostics.Trace> 将通过、 <xref:System.Diagnostics.TraceSource> 或编写的消息 <xref:System.Diagnostics.Debug> 写入控制台，请将对象添加到相应的集合中。 此外，还可以使用或方法将消息直接写入控制台 <xref:System.Diagnostics.Trace.Write%2A?displayProperty=nameWithType> <xref:System.Diagnostics.Trace.WriteLine%2A?displayProperty=nameWithType> 。  
  
> [!NOTE]
>  <xref:System.Diagnostics.Debug>和 <xref:System.Diagnostics.Trace> 类共享同一 <xref:System.Diagnostics.TraceListenerCollection> 集合，并通过其各自的属性进行访问 `Listeners` 。 如果 <xref:System.Diagnostics.ConsoleTraceListener> 使用这些类之一将对象添加到集合，则其他类将自动使用同一个侦听器。  
  
 大多数编译器通过条件编译标志启用跟踪和调试输出。 如果不启用跟踪或调试，则 <xref:System.Diagnostics.Debug?displayProperty=nameWithType> <xref:System.Diagnostics.Trace?displayProperty=nameWithType> 会有效地忽略通过和类写入的消息。 启用跟踪和调试输出的语法特定于编译器;如果使用 c # 或 Visual Basic 以外的编译器，请参阅编译器的文档。  
  
-   若要在 c # 中启用调试，请在编译代码时将 **/d： debug**标志添加到编译器命令行，也可以将 **#define 调试** 添加到文件的顶部。 在 Visual Basic 中，将 **/d： DEBUG = True** 标志添加到编译器命令行。  
  
-   若要使用 c # 启用跟踪，请在编译代码时将 **/d： TRACE** 标志添加到编译器命令行，或将 **#define trace** 添加到文件的顶部。 在 Visual Basic 中，将 **/d： TRACE = True** 标志添加到编译器命令行。  
  
 您可以 <xref:System.Diagnostics.ConsoleTraceListener> 在代码中将对象添加到 <xref:System.Diagnostics.Trace.Listeners%2A> 集合中，也可以 <xref:System.Diagnostics.ConsoleTraceListener> <xref:System.Diagnostics.Trace.Listeners%2A> 通过应用程序配置文件将对象添加到集合中。 <xref:System.Diagnostics.ConsoleTraceListener>在代码中添加对象，以写入特定代码节或执行路径的消息。 将 <xref:System.Diagnostics.ConsoleTraceListener> 对象添加到应用程序配置文件中，以便在应用程序执行时将所有跟踪和调试消息定向到控制台。  
  
 若要为特定代码段将跟踪和调试消息写入控制台，请初始化 <xref:System.Diagnostics.ConsoleTraceListener> 对象并将其添加到集合中 <xref:System.Diagnostics.Trace.Listeners%2A> 。 使用或类检测包含消息的代码部分 <xref:System.Diagnostics.Trace> <xref:System.Diagnostics.Debug> 。 在代码部分的末尾，从集合中删除 <xref:System.Diagnostics.ConsoleTraceListener> 对象 <xref:System.Diagnostics.Trace.Listeners%2A> ，然后对调用 <xref:System.Diagnostics.TextWriterTraceListener.Close%2A> 方法 <xref:System.Diagnostics.ConsoleTraceListener> 。  
  
 若要在应用程序执行时将所有跟踪和调试消息定向到控制台，请将 <xref:System.Diagnostics.ConsoleTraceListener> 对象添加到应用程序配置文件中。 编辑与应用程序名称对应的配置文件，或者编辑项目中的 app.config 文件 [!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)] 。 在此文件中，为插入一个元素 <xref:System.Diagnostics.ConsoleTraceListener> 。  
  
 下面的示例将一个 <xref:System.Diagnostics.ConsoleTraceListener> 名为 `configConsoleListener` 的对象添加到 <xref:System.Diagnostics.Trace.Listeners%2A> 集合中。  
  
```xml  
<configuration>  
  <system.diagnostics>  
    <trace autoflush="false" indentsize="4">  
      <listeners>  
        <add name="configConsoleListener"            type="System.Diagnostics.ConsoleTraceListener" />  
      </listeners>  
    </trace>  
  </system.diagnostics>  
 </configuration>  
```  
  
 有关在应用程序配置文件中添加跟踪侦听器的详细信息，请参阅[ &lt; 侦听器 &gt; ](/dotnet/framework/configure-apps/file-schema/trace-debug/listeners-element-for-trace)。  
  
   
  
## Examples  
 下面的代码示例实现了一个控制台应用程序，其中包含具有两个公共方法的类。  
  
 `Main`方法检查命令行参数，并确定是否应将跟踪输出定向到标准错误流或标准输出流。 `Main` 创建并初始化 <xref:System.Diagnostics.ConsoleTraceListener> 指定的 <xref:System.Console> 输出流的对象，并将此对象添加到跟踪侦听器集合。 然后，它调用 `WriteEnvironmentInfoToTrace` 方法，该方法将有关执行环境的详细信息和跟踪侦听器配置写入跟踪输出。  
  
 运行示例应用程序时，会通过对象将环境和跟踪配置详细信息写入指定的控制台输出流中 <xref:System.Diagnostics.ConsoleTraceListener> 。  
  
 [!code-csharp[Diagnostics_ConsoleTraceListener#1](~/samples/snippets/csharp/VS_Snippets_CLR/Diagnostics_ConsoleTraceListener/CS/program.cs#1)]
 [!code-vb[Diagnostics_ConsoleTraceListener#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Diagnostics_ConsoleTraceListener/VB/consoletrace.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Diagnostics.TraceListener" />
    <altmember cref="T:System.Diagnostics.TextWriterTraceListener" />
    <altmember cref="T:System.Diagnostics.Debug" />
    <altmember cref="T:System.Diagnostics.Trace" />
    <altmember cref="T:System.Console" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Diagnostics.ConsoleTraceListener" /> 类的新实例。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ConsoleTraceListener ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.ConsoleTraceListener.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ConsoleTraceListener();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TextWriterTraceListener</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Diagnostics.ConsoleTraceListener" /> 类的新实例，并将跟踪输出写入标准输出流中。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此构造函数初始化 <xref:System.Diagnostics.ConsoleTraceListener> 对象，以将消息写入 <xref:System.Console.Out%2A?displayProperty=nameWithType> 流中。 其 <xref:System.Diagnostics.TraceListener.Name%2A> 属性初始化为空字符串 ( "" ) 。  
  
   
  
## Examples  
 下面的代码示例初始化 <xref:System.Diagnostics.ConsoleTraceListener> 指定的 <xref:System.Console> 输出流的对象，并将其添加到跟踪侦听器集合。 此代码示例是为类提供的更大示例的一部分 <xref:System.Diagnostics.ConsoleTraceListener> 。  
  
 [!code-csharp[Diagnostics_ConsoleTraceListener#2](~/samples/snippets/csharp/VS_Snippets_CLR/Diagnostics_ConsoleTraceListener/CS/program.cs#2)]
 [!code-vb[Diagnostics_ConsoleTraceListener#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/Diagnostics_ConsoleTraceListener/VB/consoletrace.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.EventLogTraceListener" />
        <altmember cref="T:System.Diagnostics.TextWriterTraceListener" />
        <altmember cref="P:System.Console.Out" />
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ConsoleTraceListener (bool useErrorStream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool useErrorStream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.ConsoleTraceListener.#ctor(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (useErrorStream As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ConsoleTraceListener(bool useErrorStream);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.ConsoleTraceListener : bool -&gt; System.Diagnostics.ConsoleTraceListener" Usage="new System.Diagnostics.ConsoleTraceListener useErrorStream" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TextWriterTraceListener</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="useErrorStream" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="useErrorStream">若为 <see langword="true" />，则将跟踪和调试输出写入标准错误流中；若为 <see langword="false" />，则将跟踪和调试输出写入标准输出流中。</param>
        <summary>初始化 <see cref="T:System.Diagnostics.ConsoleTraceListener" /> 类的一个新实例，并利用一个选项将跟踪输出写入标准输出流或标准错误流中。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此构造函数初始化 <xref:System.Diagnostics.ConsoleTraceListener> 对象，以将消息写入到 <xref:System.Console.Out%2A?displayProperty=nameWithType> 流或 <xref:System.Console.Error%2A?displayProperty=nameWithType> 流中。 其 <xref:System.Diagnostics.TraceListener.Name%2A> 属性初始化为空字符串 ( "" ) 。  
  
   
  
## Examples  
 下面的代码示例初始化 <xref:System.Diagnostics.ConsoleTraceListener> 指定的 <xref:System.Console> 输出流的对象，并将其添加到跟踪侦听器集合。 此代码示例是为类提供的更大示例的一部分 <xref:System.Diagnostics.ConsoleTraceListener> 。  
  
 [!code-csharp[Diagnostics_ConsoleTraceListener#2](~/samples/snippets/csharp/VS_Snippets_CLR/Diagnostics_ConsoleTraceListener/CS/program.cs#2)]
 [!code-vb[Diagnostics_ConsoleTraceListener#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/Diagnostics_ConsoleTraceListener/VB/consoletrace.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.EventLogTraceListener" />
        <altmember cref="T:System.Diagnostics.TextWriterTraceListener" />
        <altmember cref="T:System.Console" />
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public override void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.ConsoleTraceListener.Close" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Close();" />
      <MemberSignature Language="F#" Value="override this.Close : unit -&gt; unit" Usage="consoleTraceListener.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TextWriterTraceListener</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>关闭到为此跟踪侦听器指定的流的输出。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 为此实例指定的流 <xref:System.Diagnostics.ConsoleTraceListener> (<xref:System.Console.Out%2A?displayProperty=nameWithType> 流或 <xref:System.Console.Error%2A?displayProperty=nameWithType> 流) 处于关闭状态。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
