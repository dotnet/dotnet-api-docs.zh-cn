<Type Name="EventInstance" FullName="System.Diagnostics.EventInstance">
  <Metadata><Meta Name="ms.openlocfilehash" Value="d56c25e46c67222bff08ef27dd3bd67e7e3de300" /><Meta Name="ms.sourcegitcommit" Value="c982ad9e10a242d90f1e631b5981570f9e5d9f34" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/10/2020" /><Meta Name="ms.locfileid" Value="89944096" /></Metadata><TypeSignature Language="C#" Value="public class EventInstance" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit EventInstance extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.EventInstance" />
  <TypeSignature Language="VB.NET" Value="Public Class EventInstance" />
  <TypeSignature Language="C++ CLI" Value="public ref class EventInstance" />
  <TypeSignature Language="F#" Value="type EventInstance = class" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Diagnostics.EventLog</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
    <AssemblyVersion>4.0.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>表示事件日志项的非特定语言信息。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用 <xref:System.Diagnostics.EventInstance> 写入资源标识符而不是字符串值的事件日志项。 若要编写事件日志项，请初始化 <xref:System.Diagnostics.EventInstance.InstanceId%2A> 属性，并将实例传递给 <xref:System.Diagnostics.EventLog.WriteEvent%2A> 方法。 事件查看器使用实例标识符从本地化的资源文件中查找和显示基于当前语言设置的相应字符串。 必须先向相应的资源文件注册事件源，然后才能使用资源标识符编写事件。  
  
 写入事件时，可以设置属性， <xref:System.Diagnostics.EventInstance.EntryType%2A> 以指定事件查看器为该项显示的图标。 您还可以指定一个 <xref:System.Diagnostics.EventInstance.CategoryId%2A> 属性以指定事件查看器为该项显示的类别。  
  
 事件查看器使用类别来筛选由事件源写入的事件。 事件查看器可以将类别显示为数值，也可以将类别用作资源标识符以显示本地化的类别字符串。  
  
 若要在事件查看器中显示本地化的类别字符串，必须使用配置有类别资源文件的事件源，并将设置 <xref:System.Diagnostics.EventInstance.CategoryId%2A> 为类别资源文件中的资源标识符。 如果事件源没有已配置的类别资源文件，或者指定的不为 <xref:System.Diagnostics.EventInstance.CategoryId%2A> 类别资源文件中的字符串编制索引，则事件查看器将显示该条目的数值类别值。 使用或类配置类别资源文件以及资源文件中的类别字符串的数目 <xref:System.Diagnostics.EventLogInstaller> <xref:System.Diagnostics.EventSourceCreationData> 。  
  
 在使用编写带有方法的事件之前，必须注册事件日志的源 <xref:System.Diagnostics.EventInstance> <xref:System.Diagnostics.EventLog.WriteEvent%2A> 。 必须将源配置为将本地化项写入日志，并且源必须至少定义一个消息资源文件。  
  
 在应用程序安装过程中创建新的事件源。 这样，操作系统就可以刷新其已注册事件源的列表及其配置。 如果操作系统尚未刷新其事件源列表，而你尝试使用新源写入事件，则写入操作将失败。 您可以使用或方法来配置新源 <xref:System.Diagnostics.EventLogInstaller> <xref:System.Diagnostics.EventLog.CreateEventSource%2A> 。 您必须对该计算机具有管理权限才能创建新的事件源。  
  
 有关定义事件消息和生成事件日志资源文件的详细信息，请参阅 Platform SDK 文档中的 [消息编译器](/windows/win32/wes/message-compiler--mc-exe-) 一文。  
  
   
  
## Examples  
 下面的代码示例编写一个信息性事件项，然后重新使用将 <xref:System.Diagnostics.EventInstance> 警告事件的条目写入现有的事件日志。 使用消息资源文件中的资源标识符指定事件消息文本。 此代码示例假定已为源注册了相应的消息资源文件。  
  
 [!code-cpp[EventLog_WriteEvent#9](~/samples/snippets/cpp/VS_Snippets_CLR/eventlog_WriteEvent/CPP/source.cpp#9)]
 [!code-csharp[EventLog_WriteEvent#9](~/samples/snippets/csharp/VS_Snippets_CLR/eventlog_WriteEvent/CS/source.cs#9)]
 [!code-vb[EventLog_WriteEvent#9](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlog_WriteEvent/VB/source.vb#9)]  
  
 此代码示例使用资源库中内置的以下消息文本文件 EventLogMsgs.dll。 消息文本文件是从中创建消息资源文件的源。 消息文本文件定义类别、事件消息和参数插入字符串的资源标识符和文本。  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="Overload:System.Diagnostics.EventLog.WriteEvent" />
    <altmember cref="T:System.Diagnostics.EventLogEntry" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>使用非特定语言的信息初始化 <see cref="T:System.Diagnostics.EventInstance" /> 类的一个新实例以定义事件日志项。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventInstance (long instanceId, int categoryId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int64 instanceId, int32 categoryId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventInstance.#ctor(System.Int64,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (instanceId As Long, categoryId As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EventInstance(long instanceId, int categoryId);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.EventInstance : int64 * int -&gt; System.Diagnostics.EventInstance" Usage="new System.Diagnostics.EventInstance (instanceId, categoryId)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.EventLog</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="instanceId" Type="System.Int64" />
        <Parameter Name="categoryId" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="instanceId">资源标识符，与事件源的消息资源文件中定义的字符串对应。</param>
        <param name="categoryId">资源标识符，与事件源的类别资源文件中定义的字符串对应。如果没有为事件指定类别，则为零。</param>
        <summary>使用事件项的本地化消息和类别文本的指定资源标识符初始化 <see cref="T:System.Diagnostics.EventInstance" /> 类的一个新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要将信息性项写入事件日志，请初始化， <xref:System.Diagnostics.EventInstance> 并将其传递给 <xref:System.Diagnostics.EventLog.WriteEvent%2A> 方法。 `instanceId`在源的相应属性中将设置为事件消息的资源标识符 <xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A> 。 将设置 `categoryId` 为数值类别值，或将源的属性中的事件类别的资源标识符设置为 <xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A> ; 对于 "无事件类别"，将设置 `categoryId` 为零。 <xref:System.Diagnostics.EventInstance.EntryType%2A>默认情况下，新实例的属性设置为 <xref:System.Diagnostics.EventLogEntryType.Information> 。  
  
 事件查看器使用资源标识符显示源的本地化资源文件中的相应字符串。 必须先向相应的资源文件注册源，然后才能使用资源标识符编写事件。  
  
   
  
## Examples  
 下面的代码示例编写一个信息性事件项，然后重新使用将 <xref:System.Diagnostics.EventInstance> 警告事件的条目写入现有的事件日志。 使用消息资源文件中的资源标识符指定事件消息文本。 此代码示例假定已为源注册了相应的消息资源文件。  
  
 [!code-cpp[EventLog_WriteEvent#9](~/samples/snippets/cpp/VS_Snippets_CLR/eventlog_WriteEvent/CPP/source.cpp#9)]
 [!code-csharp[EventLog_WriteEvent#9](~/samples/snippets/csharp/VS_Snippets_CLR/eventlog_WriteEvent/CS/source.cs#9)]
 [!code-vb[EventLog_WriteEvent#9](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlog_WriteEvent/VB/source.vb#9)]  
  
 此代码示例使用资源库中内置的以下消息文本文件 EventLogMsgs.dll。 消息文本文件是从中创建消息资源文件的源。 消息文本文件定义类别、事件消息和参数插入字符串的资源标识符和文本。  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="instanceId" /> 参数是负值或大于 <see cref="F:System.UInt32.MaxValue" /> 的值。  
  
- 或 - 
<paramref name="categoryId" /> 参数是负值或大于 <see cref="F:System.UInt16.MaxValue" /> 的值。</exception>
        <altmember cref="P:System.Diagnostics.EventInstance.CategoryId" />
        <altmember cref="P:System.Diagnostics.EventInstance.InstanceId" />
        <altmember cref="Overload:System.Diagnostics.EventLog.WriteEvent" />
        <altmember cref="T:System.Diagnostics.EventSourceCreationData" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventInstance (long instanceId, int categoryId, System.Diagnostics.EventLogEntryType entryType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int64 instanceId, int32 categoryId, valuetype System.Diagnostics.EventLogEntryType entryType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventInstance.#ctor(System.Int64,System.Int32,System.Diagnostics.EventLogEntryType)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (instanceId As Long, categoryId As Integer, entryType As EventLogEntryType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EventInstance(long instanceId, int categoryId, System::Diagnostics::EventLogEntryType entryType);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.EventInstance : int64 * int * System.Diagnostics.EventLogEntryType -&gt; System.Diagnostics.EventInstance" Usage="new System.Diagnostics.EventInstance (instanceId, categoryId, entryType)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.EventLog</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="instanceId" Type="System.Int64" />
        <Parameter Name="categoryId" Type="System.Int32" />
        <Parameter Name="entryType" Type="System.Diagnostics.EventLogEntryType" />
      </Parameters>
      <Docs>
        <param name="instanceId">资源标识符，与事件源的消息资源文件中定义的字符串对应。</param>
        <param name="categoryId">资源标识符，与事件源的类别资源文件中定义的字符串对应。如果没有为事件指定类别，则为零。</param>
        <param name="entryType">指示事件类型的 <see cref="T:System.Diagnostics.EventLogEntryType" /> 值。</param>
        <summary>使用事件项的本地化消息和类别文本的指定资源标识符以及指定的事件日志项类型初始化 <see cref="T:System.Diagnostics.EventInstance" /> 类的一个新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要将项写入事件日志，请初始化， <xref:System.Diagnostics.EventInstance> 并将其传递给 <xref:System.Diagnostics.EventLog.WriteEvent%2A> 方法。 `instanceId`在源的相应属性中将设置为事件消息的资源标识符 <xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A> 。 将设置 `categoryId` 为数值类别值，或将源的属性中的事件类别的资源标识符设置为 <xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A> ; 对于 "无事件类别"，将设置 `categoryId` 为零。  
  
 事件查看器使用资源标识符显示源的本地化资源文件中的相应字符串。 必须先向相应的资源文件注册源，然后才能使用资源标识符编写事件。  
  
 将设置 `entryType` 为预定义的项类型之一。 事件查看器使用事件类型确定要在事件日志的列表视图中显示哪个图标。  
  
   
  
## Examples  
 下面的代码示例将两个审核事件项写入事件日志 `myNewLog` 。 如果本地计算机上不存在新的事件源和新的事件日志，则代码示例将创建一个新的事件源和一个新的事件日志。 使用资源文件中的资源标识符指定事件消息文本。  
  
 [!code-cpp[EventLog_WriteEvent#7](~/samples/snippets/cpp/VS_Snippets_CLR/eventlog_WriteEvent/CPP/source.cpp#7)]
 [!code-csharp[EventLog_WriteEvent#7](~/samples/snippets/csharp/VS_Snippets_CLR/eventlog_WriteEvent/CS/source.cs#7)]
 [!code-vb[EventLog_WriteEvent#7](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlog_WriteEvent/VB/source.vb#7)]  
  
 此代码示例使用资源库中内置的以下消息文本文件 EventLogMsgs.dll。 消息文本文件是从中创建消息资源文件的源。 消息文本文件定义类别、事件消息和参数插入字符串的资源标识符和文本。  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="entryType" /> 不是有效的 <see cref="T:System.Diagnostics.EventLogEntryType" /> 值。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="instanceId" /> 是负值或大于 <see cref="F:System.UInt32.MaxValue" /> 的值。  
  
- 或 - 
 <paramref name="categoryId" /> 是负值或大于 <see cref="F:System.UInt16.MaxValue" /> 的值。</exception>
        <altmember cref="P:System.Diagnostics.EventInstance.CategoryId" />
        <altmember cref="P:System.Diagnostics.EventInstance.InstanceId" />
        <altmember cref="T:System.Diagnostics.EventLogEntry" />
        <altmember cref="Overload:System.Diagnostics.EventLog.WriteEvent" />
        <altmember cref="T:System.Diagnostics.EventSourceCreationData" />
      </Docs>
    </Member>
    <Member MemberName="CategoryId">
      <MemberSignature Language="C#" Value="public int CategoryId { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CategoryId" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventInstance.CategoryId" />
      <MemberSignature Language="VB.NET" Value="Public Property CategoryId As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int CategoryId { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.CategoryId : int with get, set" Usage="System.Diagnostics.EventInstance.CategoryId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.EventLog</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置指定事件项的应用程序定义类别的资源标识符。</summary>
        <value>数字型类别值或资源标识符，与事件源的类别资源文件中定义的字符串对应。 默认值为零，这意味着将不会为该事件项显示类别。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 事件日志类别是应用程序定义的值，可帮助筛选事件，或提供有关事件的详细信息。 例如，你的应用程序可以为不同的组件或不同的操作定义单独的类别。  
  
 设置 <xref:System.Diagnostics.EventInstance.CategoryId%2A> 属性以指定事件查看器为该项显示的类别。 事件查看器可以将类别显示为数值，也可以使用 <xref:System.Diagnostics.EventInstance.CategoryId%2A> 作为资源标识符来基于当前语言设置显示本地化的类别字符串。  
  
 若要在事件查看器中显示本地化的类别字符串，必须使用配置有类别资源文件的事件源，并将设置 <xref:System.Diagnostics.EventInstance.CategoryId%2A> 为类别资源文件中的资源标识符。 如果事件源没有已配置的类别资源文件，或者指定的不为 <xref:System.Diagnostics.EventInstance.CategoryId%2A> 类别资源文件中的字符串编制索引，则事件查看器将显示该条目的数值类别值。  
  
 必须先向相应的资源文件注册源，然后才能使用资源标识符编写事件类别。 使用或类配置类别资源文件以及资源文件中的类别字符串的数目 <xref:System.Diagnostics.EventLogInstaller> <xref:System.Diagnostics.EventSourceCreationData> 。 在资源文件中定义类别字符串时，类别资源标识符必须从1开始连续编号，直到达到配置的 <xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A> 属性值。  
  
 事件类别是可选的。 如果你的应用程序不使用类别，请不要 <xref:System.Diagnostics.EventInstance.CategoryId%2A> 为事件日志条目设置。  
  
 有关定义事件消息和生成事件资源文件的详细信息，请参阅 Platform SDK 文档中的 [消息编译器](/windows/win32/wes/message-compiler--mc-exe-) 一文。 有关在资源文件中定义事件类别的详细信息，请参阅 Platform SDK 中的 "事件类别" 主题  
  
   
  
## Examples  
 下面的代码示例编写一个信息性事件项，然后重新使用将 <xref:System.Diagnostics.EventInstance> 警告事件的条目写入现有的事件日志。 使用消息资源文件中的资源标识符指定事件消息文本。 此代码示例假定已为源注册了相应的消息资源文件。  
  
 [!code-cpp[EventLog_WriteEvent#9](~/samples/snippets/cpp/VS_Snippets_CLR/eventlog_WriteEvent/CPP/source.cpp#9)]
 [!code-csharp[EventLog_WriteEvent#9](~/samples/snippets/csharp/VS_Snippets_CLR/eventlog_WriteEvent/CS/source.cs#9)]
 [!code-vb[EventLog_WriteEvent#9](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlog_WriteEvent/VB/source.vb#9)]  
  
 此代码示例使用资源库中内置的以下消息文本文件 EventLogMsgs.dll。 消息文本文件是从中创建消息资源文件的源。 消息文本文件定义类别、事件消息和参数插入字符串的资源标识符和文本。  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">该属性设置为负值或大于 <see cref="F:System.UInt16.MaxValue" /> 的值。</exception>
        <altmember cref="Overload:System.Diagnostics.EventLog.WriteEvent" />
        <altmember cref="P:System.Diagnostics.EventLogEntry.CategoryNumber" />
        <altmember cref="P:System.Diagnostics.EventSourceCreationData.CategoryResourceFile" />
        <altmember cref="P:System.Diagnostics.EventLogInstaller.CategoryResourceFile" />
      </Docs>
    </Member>
    <Member MemberName="EntryType">
      <MemberSignature Language="C#" Value="public System.Diagnostics.EventLogEntryType EntryType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Diagnostics.EventLogEntryType EntryType" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventInstance.EntryType" />
      <MemberSignature Language="VB.NET" Value="Public Property EntryType As EventLogEntryType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Diagnostics::EventLogEntryType EntryType { System::Diagnostics::EventLogEntryType get(); void set(System::Diagnostics::EventLogEntryType value); };" />
      <MemberSignature Language="F#" Value="member this.EntryType : System.Diagnostics.EventLogEntryType with get, set" Usage="System.Diagnostics.EventInstance.EntryType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.EventLog</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Diagnostics.EventLogEntryType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置事件日志项的事件类型。</summary>
        <value>指示事件项类型的 <see cref="T:System.Diagnostics.EventLogEntryType" /> 值。 默认值是 <see cref="F:System.Diagnostics.EventLogEntryType.Information" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 每个事件都属于单个类型，应用程序在报告事件时指示该类型。 事件查看器使用事件类型确定要在事件日志的列表视图中显示哪个图标。  
  
   
  
## Examples  
 下面的代码示例编写一个信息性事件项，然后重新使用将 <xref:System.Diagnostics.EventInstance> 警告事件的条目写入现有的事件日志。 使用消息资源文件中的资源标识符指定事件消息文本。 此代码示例假定已为源注册了相应的消息资源文件。  
  
 [!code-cpp[EventLog_WriteEvent#9](~/samples/snippets/cpp/VS_Snippets_CLR/eventlog_WriteEvent/CPP/source.cpp#9)]
 [!code-csharp[EventLog_WriteEvent#9](~/samples/snippets/csharp/VS_Snippets_CLR/eventlog_WriteEvent/CS/source.cs#9)]
 [!code-vb[EventLog_WriteEvent#9](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlog_WriteEvent/VB/source.vb#9)]  
  
 此代码示例使用资源库中内置的以下消息文本文件 EventLogMsgs.dll。 消息文本文件是从中创建消息资源文件的源。 消息文本文件定义类别、事件消息和参数插入字符串的资源标识符和文本。  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">该属性未设置为有效的 <see cref="T:System.Diagnostics.EventLogEntryType" /> 值。</exception>
        <altmember cref="T:System.Diagnostics.EventLogEntryType" />
        <altmember cref="P:System.Diagnostics.EventLogEntry.EntryType" />
        <altmember cref="Overload:System.Diagnostics.EventLog.WriteEvent" />
      </Docs>
    </Member>
    <Member MemberName="InstanceId">
      <MemberSignature Language="C#" Value="public long InstanceId { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 InstanceId" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventInstance.InstanceId" />
      <MemberSignature Language="VB.NET" Value="Public Property InstanceId As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long InstanceId { long get(); void set(long value); };" />
      <MemberSignature Language="F#" Value="member this.InstanceId : int64 with get, set" Usage="System.Diagnostics.EventInstance.InstanceId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.EventLog</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置指定事件项的消息文本的资源标识符。</summary>
        <value>资源标识符，与事件源的消息资源文件中定义的字符串对应。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此 <xref:System.Diagnostics.EventInstance.InstanceId%2A> 属性唯一标识已配置事件源的事件条目。 对于在消息资源文件中定义的事件， <xref:System.Diagnostics.EventInstance.InstanceId%2A> 对应于从消息文本文件的消息定义字段中编译的资源标识符。 应用程序可以通过将设置 <xref:System.Diagnostics.EventInstance.InstanceId%2A> 为资源标识符来编写本地化的事件日志项。 事件查看器使用 <xref:System.Diagnostics.EventInstance.InstanceId%2A> 资源标识符从本地化的资源文件中查找并显示相应的字符串。 必须先向相应的资源文件注册源，然后才能使用资源标识符编写事件。  
  
 有关定义事件消息和生成事件日志资源文件的详细信息，请参阅 Platform SDK 文档中的 [消息编译器](/windows/win32/wes/message-compiler--mc-exe-) 一文。 有关事件日志标识符的详细信息，请参阅 Platform SDK 文档中的 [事件标识符](/windows/win32/eventlog/event-categories) 一文。  
  
   
  
## Examples  
 下面的代码示例编写一个信息性事件项，然后重新使用将 <xref:System.Diagnostics.EventInstance> 警告事件的条目写入现有的事件日志。 使用消息资源文件中的资源标识符指定事件消息文本。 此代码示例假定已为源注册了相应的消息资源文件。  
  
 [!code-cpp[EventLog_WriteEvent#9](~/samples/snippets/cpp/VS_Snippets_CLR/eventlog_WriteEvent/CPP/source.cpp#9)]
 [!code-csharp[EventLog_WriteEvent#9](~/samples/snippets/csharp/VS_Snippets_CLR/eventlog_WriteEvent/CS/source.cs#9)]
 [!code-vb[EventLog_WriteEvent#9](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlog_WriteEvent/VB/source.vb#9)]  
  
 此代码示例使用资源库中内置的以下消息文本文件 EventLogMsgs.dll。 消息文本文件是从中创建消息资源文件的源。 消息文本文件定义类别、事件消息和参数插入字符串的资源标识符和文本。  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">该属性设置为负值或大于 <see cref="F:System.UInt32.MaxValue" /> 的值。</exception>
        <altmember cref="Overload:System.Diagnostics.EventLog.WriteEvent" />
        <altmember cref="P:System.Diagnostics.EventLogEntry.InstanceId" />
        <altmember cref="P:System.Diagnostics.EventSourceCreationData.MessageResourceFile" />
        <altmember cref="P:System.Diagnostics.EventLogInstaller.MessageResourceFile" />
      </Docs>
    </Member>
  </Members>
</Type>
