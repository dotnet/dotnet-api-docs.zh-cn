<Type Name="Process" FullName="System.Diagnostics.Process">
  <Metadata><Meta Name="ms.openlocfilehash" Value="6b5eaf1c8e7af0a1f4cdb3cfe23e5987ebc44436" /><Meta Name="ms.sourcegitcommit" Value="b0bdcfcb19a33875516ae41a1e844efbf779f33d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/04/2020" /><Meta Name="ms.locfileid" Value="89474649" /></Metadata><TypeSignature Language="C#" Value="public class Process : System.ComponentModel.Component, IDisposable" FrameworkAlternate="net-5.0" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Process extends System.ComponentModel.Component implements class System.IDisposable" FrameworkAlternate="net-5.0" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.Process" />
  <TypeSignature Language="VB.NET" Value="Public Class Process&#xA;Inherits Component&#xA;Implements IDisposable" FrameworkAlternate="net-5.0" />
  <TypeSignature Language="C++ CLI" Value="public ref class Process : System::ComponentModel::Component, IDisposable" FrameworkAlternate="net-5.0" />
  <TypeSignature Language="F#" Value="type Process = class&#xA;    inherit Component&#xA;    interface IDisposable" FrameworkAlternate="net-5.0" />
  <TypeSignature Language="C#" Value="public class Process : IDisposable" FrameworkAlternate="netcore-1.0;netcore-1.1" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Process extends System.Object implements class System.IDisposable" FrameworkAlternate="netcore-1.0;netcore-1.1" />
  <TypeSignature Language="VB.NET" Value="Public Class Process&#xA;Implements IDisposable" FrameworkAlternate="netcore-1.0;netcore-1.1" />
  <TypeSignature Language="C++ CLI" Value="public ref class Process : IDisposable" FrameworkAlternate="netcore-1.0;netcore-1.1" />
  <TypeSignature Language="F#" Value="type Process = class&#xA;    interface IDisposable" FrameworkAlternate="netcore-1.0;netcore-1.1" />
  <TypeSignature Language="C#" Value="public class Process : System.ComponentModel.Component" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Process extends System.ComponentModel.Component" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="VB.NET" Value="Public Class Process&#xA;Inherits Component" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="C++ CLI" Value="public ref class Process : System::ComponentModel::Component" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="F#" Value="type Process = class&#xA;    inherit Component" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <AssemblyInfo>
    <AssemblyName>System.Diagnostics.Process</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Diagnostics.Process" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.ComponentModel.Component</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netcore-1.0;netcore-1.1">System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1">
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName Language="C#">[System.ComponentModel.DefaultEvent("Exited")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultEvent("Exited")&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName Language="C#">[System.ComponentModel.DefaultProperty("StartInfo")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultProperty("StartInfo")&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1">
      <AttributeName Language="C#">[System.ComponentModel.Designer("System.Diagnostics.Design.ProcessDesigner, System.Design, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.ComponentModel.Designer("System.Diagnostics.Design.ProcessDesigner, System.Design, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
      <AttributeName Language="C#">[System.ComponentModel.Designer("System.Diagnostics.Design.ProcessDesigner, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.ComponentModel.Designer("System.Diagnostics.Design.ProcessDesigner, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName Language="C#">[System.Diagnostics.MonitoringDescription("ProcessDesc")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Diagnostics.MonitoringDescription("ProcessDesc")&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
      <AttributeName Language="C#">[System.ComponentModel.Designer("System.Diagnostics.Design.ProcessDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.ComponentModel.Designer("System.Diagnostics.Design.ProcessDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8">
      <AttributeName Language="C#">[System.ComponentModel.Designer("System.Diagnostics.Design.ProcessDesigner, System.Design, Version=2.0.5.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.ComponentModel.Designer("System.Diagnostics.Design.ProcessDesigner, System.Design, Version=2.0.5.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName Language="C#">[System.Diagnostics.MonitoringDescription("Provides access to local and remote processes, enabling starting and stopping of local processes.")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Diagnostics.MonitoringDescription("Provides access to local and remote processes, enabling starting and stopping of local processes.")&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="7e18d-101">提供对本地和远程进程的访问权限并使你能够启动和停止本地系统进程。</span><span class="sxs-lookup"><span data-stu-id="7e18d-101">Provides access to local and remote processes and enables you to start and stop local system processes.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> component provides access to a process that is running on a computer. A process, in the simplest terms, is a running app. A thread is the basic unit to which the operating system allocates processor time. <span data-ttu-id="7e18d-105">线程可以执行进程的任何代码部分，包括当前由另一个线程执行的部分。</span><span class="sxs-lookup"><span data-stu-id="7e18d-105">A thread can execute any part of the code of the process, including parts currently being executed by another thread.</span></span>  
  
 <span data-ttu-id="7e18d-106"><xref:System.Diagnostics.Process>组件是一个有用的工具，可用于启动、停止、控制和监视应用。</span><span class="sxs-lookup"><span data-stu-id="7e18d-106">The <xref:System.Diagnostics.Process> component is a useful tool for starting, stopping, controlling, and monitoring apps.</span></span> <span data-ttu-id="7e18d-107">您可以使用该 <xref:System.Diagnostics.Process> 组件获取正在运行的进程的列表，也可以启动新的进程。</span><span class="sxs-lookup"><span data-stu-id="7e18d-107">You can use the <xref:System.Diagnostics.Process> component, to obtain a list of the processes that are running, or you can start a new process.</span></span> <span data-ttu-id="7e18d-108"><xref:System.Diagnostics.Process>组件用于访问系统进程。</span><span class="sxs-lookup"><span data-stu-id="7e18d-108">A <xref:System.Diagnostics.Process> component is used to access system processes.</span></span> <span data-ttu-id="7e18d-109"><xref:System.Diagnostics.Process>组件初始化完成后，可用于获取有关正在运行的进程的信息。</span><span class="sxs-lookup"><span data-stu-id="7e18d-109">After a <xref:System.Diagnostics.Process> component has been initialized, it can be used to obtain information about the running process.</span></span> <span data-ttu-id="7e18d-110">此类信息包括一组线程、已加载的模块 ( .dll 和 .exe 文件) 以及性能信息，如进程正在使用的内存量。</span><span class="sxs-lookup"><span data-stu-id="7e18d-110">Such information includes the set of threads, the loaded modules (.dll and .exe files), and performance information such as the amount of memory the process is using.</span></span>  
  
 <span data-ttu-id="7e18d-111">此类型实现 <xref:System.IDisposable> 接口。</span><span class="sxs-lookup"><span data-stu-id="7e18d-111">This type implements the <xref:System.IDisposable> interface.</span></span> <span data-ttu-id="7e18d-112">在使用完类型后，您应直接或间接释放类型。</span><span class="sxs-lookup"><span data-stu-id="7e18d-112">When you have finished using the type, you should dispose of it either directly or indirectly.</span></span> <span data-ttu-id="7e18d-113">若要直接释放类型，请在 `try`/`finally` 块中调用其 <xref:System.IDisposable.Dispose%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="7e18d-113">To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`finally` block.</span></span> <span data-ttu-id="7e18d-114">若要间接释放类型，请使用 `using`（在 C# 中）或 `Using`（在 Visual Basic 中）等语言构造。</span><span class="sxs-lookup"><span data-stu-id="7e18d-114">To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic).</span></span> <span data-ttu-id="7e18d-115">有关详细信息，请参阅 <xref:System.IDisposable> 接口主题中的“使用实现 IDisposable 的对象”一节。</span><span class="sxs-lookup"><span data-stu-id="7e18d-115">For more information, see the "Using an Object that Implements IDisposable" section in the <xref:System.IDisposable> interface topic.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7e18d-116">32位进程无法访问64位进程的模块。</span><span class="sxs-lookup"><span data-stu-id="7e18d-116">32-bit processes cannot access the modules of a 64-bit process.</span></span> <span data-ttu-id="7e18d-117">如果尝试从32位进程获取有关64位进程的信息，将会出现 <xref:System.ComponentModel.Win32Exception> 异常。</span><span class="sxs-lookup"><span data-stu-id="7e18d-117">If you try to get information about a 64-bit process from a 32-bit process, you will get a <xref:System.ComponentModel.Win32Exception> exception.</span></span> <span data-ttu-id="7e18d-118">另一方面，64位进程可以访问32位进程的模块。</span><span class="sxs-lookup"><span data-stu-id="7e18d-118">A 64-bit process, on the other hand, can access the modules of a 32-bit process.</span></span>  
  
 <span data-ttu-id="7e18d-119">进程组件同时获取有关一组属性的信息。</span><span class="sxs-lookup"><span data-stu-id="7e18d-119">The process component obtains information about a group of properties all at once.</span></span> <span data-ttu-id="7e18d-120"><xref:System.Diagnostics.Process>组件获取了有关任何组中的一个成员的信息后，将缓存该组中其他属性的值，而不获取有关组中其他成员的新信息，直到调用 <xref:System.Diagnostics.Process.Refresh%2A> 方法为止。</span><span class="sxs-lookup"><span data-stu-id="7e18d-120">After the <xref:System.Diagnostics.Process> component has obtained information about one member of any group, it will cache the values for the other properties in that group and not obtain new information about the other members of the group until you call the <xref:System.Diagnostics.Process.Refresh%2A> method.</span></span> <span data-ttu-id="7e18d-121">因此，属性值不能保证比最后一次调用 <xref:System.Diagnostics.Process.Refresh%2A> 方法更新。</span><span class="sxs-lookup"><span data-stu-id="7e18d-121">Therefore, a property value is not guaranteed to be any newer than the last call to the <xref:System.Diagnostics.Process.Refresh%2A> method.</span></span> <span data-ttu-id="7e18d-122">组细目依赖于操作系统。</span><span class="sxs-lookup"><span data-stu-id="7e18d-122">The group breakdowns are operating-system dependent.</span></span>  
  
 <span data-ttu-id="7e18d-123">如果在系统中使用引号声明了路径变量，则在启动在该位置找到的任何进程时必须完全限定该路径。</span><span class="sxs-lookup"><span data-stu-id="7e18d-123">If you have a path variable declared in your system using quotes, you must fully qualify that path when starting any process found in that location.</span></span> <span data-ttu-id="7e18d-124">否则，系统将找不到该路径。</span><span class="sxs-lookup"><span data-stu-id="7e18d-124">Otherwise, the system will not find the path.</span></span> <span data-ttu-id="7e18d-125">例如，如果不 `c:\mypath` 在你的路径中，且你使用引号添加它： `path = %path%;"c:\mypath"` ，则在启动时，你必须完全限定中的任何进程 `c:\mypath` 。</span><span class="sxs-lookup"><span data-stu-id="7e18d-125">For example, if `c:\mypath` is not in your path, and you add it using quotation marks: `path = %path%;"c:\mypath"`, you must fully qualify any process in `c:\mypath` when starting it.</span></span>  
  
 <span data-ttu-id="7e18d-126">系统进程通过其进程标识符在系统上唯一标识。</span><span class="sxs-lookup"><span data-stu-id="7e18d-126">A system process is uniquely identified on the system by its process identifier.</span></span> <span data-ttu-id="7e18d-127">与许多 Windows 资源一样，进程也由其句柄标识，该进程在计算机上可能不唯一。</span><span class="sxs-lookup"><span data-stu-id="7e18d-127">Like many Windows resources, a process is also identified by its handle, which might not be unique on the computer.</span></span> <span data-ttu-id="7e18d-128">句柄是资源标识符的一般术语。</span><span class="sxs-lookup"><span data-stu-id="7e18d-128">A handle is the generic term for an identifier of a resource.</span></span> <span data-ttu-id="7e18d-129">操作系统将保留进程句柄，该句柄通过组件的 <xref:System.Diagnostics.Process.Handle%2A> 属性进行访问 <xref:System.Diagnostics.Process> ，即使进程已退出也是如此。</span><span class="sxs-lookup"><span data-stu-id="7e18d-129">The operating system persists the process handle, which is accessed through the <xref:System.Diagnostics.Process.Handle%2A> property of the <xref:System.Diagnostics.Process> component, even when the process has exited.</span></span> <span data-ttu-id="7e18d-130">因此，你可以获取进程的管理信息，如 <xref:System.Diagnostics.Process.ExitCode%2A> (通常为零表示成功，否则为非零错误代码) 和 <xref:System.Diagnostics.Process.ExitTime%2A> 。</span><span class="sxs-lookup"><span data-stu-id="7e18d-130">Thus, you can get the process's administrative information, such as the <xref:System.Diagnostics.Process.ExitCode%2A> (usually either zero for success or a nonzero error code) and the <xref:System.Diagnostics.Process.ExitTime%2A>.</span></span> <span data-ttu-id="7e18d-131">句柄是一个极其宝贵的资源，因此泄漏句柄比泄漏内存更 virulent。</span><span class="sxs-lookup"><span data-stu-id="7e18d-131">Handles are an extremely valuable resource, so leaking handles is more virulent than leaking memory.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7e18d-132">此类包含应用于所有成员的类级别的链接要求和继承要求。</span><span class="sxs-lookup"><span data-stu-id="7e18d-132">This class contains a link demand and an inheritance demand at the class level that applies to all members.</span></span> <span data-ttu-id="7e18d-133"><xref:System.Security.SecurityException>当直接调用方或派生类不具有完全信任权限时，将引发。</span><span class="sxs-lookup"><span data-stu-id="7e18d-133">A <xref:System.Security.SecurityException> is thrown when either the immediate caller or the derived class does not have full-trust permission.</span></span> <span data-ttu-id="7e18d-134">有关安全要求的详细信息，请参阅 [链接需求](/dotnet/framework/misc/link-demands)。</span><span class="sxs-lookup"><span data-stu-id="7e18d-134">For details about security demands, see [Link Demands](/dotnet/framework/misc/link-demands).</span></span>  
  
<a name="Core"></a>   
## <a name="net_core-notes"></a>[!INCLUDE[net_core](~/includes/net-core-md.md)] <span data-ttu-id="7e18d-135">本票</span><span class="sxs-lookup"><span data-stu-id="7e18d-135">Notes</span></span>  
 <span data-ttu-id="7e18d-136">在 .NET Framework 中， <xref:System.Diagnostics.Process> 默认情况下，类使用 <xref:System.Console> 编码，通常为输入、输出和错误流的代码页编码。</span><span class="sxs-lookup"><span data-stu-id="7e18d-136">In the .NET Framework, the <xref:System.Diagnostics.Process> class by default uses <xref:System.Console> encodings, which are typically code page encodings, for the input, output, and error streams.</span></span> <span data-ttu-id="7e18d-137">例如，在区域性为英语 (美国) 的系统上，代码页437是类的默认编码 <xref:System.Console> 。</span><span class="sxs-lookup"><span data-stu-id="7e18d-137">For example code, on systems whose culture is English (United States), code page 437 is the default encoding for the <xref:System.Console> class.</span></span> <span data-ttu-id="7e18d-138">但是， [!INCLUDE[net_core](~/includes/net-core-md.md)] 只能提供这些编码的有限子集。</span><span class="sxs-lookup"><span data-stu-id="7e18d-138">However, [!INCLUDE[net_core](~/includes/net-core-md.md)] may make only a limited subset of these encodings available.</span></span> <span data-ttu-id="7e18d-139">如果是这种情况，它将使用 <xref:System.Text.Encoding.UTF8%2A?displayProperty=nameWithType> 作为默认编码。</span><span class="sxs-lookup"><span data-stu-id="7e18d-139">If this is the case, it uses <xref:System.Text.Encoding.UTF8%2A?displayProperty=nameWithType> as the default encoding.</span></span>  
  
 <span data-ttu-id="7e18d-140">如果 <xref:System.Diagnostics.Process> 对象依赖于特定的代码页编码，仍可以在调用任何方法 *之前* ，通过执行以下操作来使对象可用 <xref:System.Diagnostics.Process> ：</span><span class="sxs-lookup"><span data-stu-id="7e18d-140">If a <xref:System.Diagnostics.Process> object depends on specific code page encodings, you can still make them available by doing the following *before* you call any <xref:System.Diagnostics.Process> methods:</span></span>  
  
1.  <span data-ttu-id="7e18d-141">向项目添加对 System.Text.Encoding.CodePages.dll 程序集的引用。</span><span class="sxs-lookup"><span data-stu-id="7e18d-141">Add a reference to the System.Text.Encoding.CodePages.dll assembly to your project.</span></span>  
  
2.  <span data-ttu-id="7e18d-142"><xref:System.Text.EncodingProvider>从属性中检索对象 <xref:System.Text.CodePagesEncodingProvider.Instance%2A?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="7e18d-142">Retrieve the <xref:System.Text.EncodingProvider> object from the <xref:System.Text.CodePagesEncodingProvider.Instance%2A?displayProperty=nameWithType> property.</span></span>  
  
3.  <span data-ttu-id="7e18d-143">将 <xref:System.Text.EncodingProvider> 对象传递给 <xref:System.Text.Encoding.RegisterProvider%2A?displayProperty=nameWithType> 方法，以使编码提供程序支持其他编码。</span><span class="sxs-lookup"><span data-stu-id="7e18d-143">Pass the <xref:System.Text.EncodingProvider> object to the <xref:System.Text.Encoding.RegisterProvider%2A?displayProperty=nameWithType> method to make the additional encodings supported by the encoding provider available.</span></span>  
  
 <span data-ttu-id="7e18d-144"><xref:System.Diagnostics.Process>如果在调用任何方法之前已注册了编码提供程序，则类将自动使用默认系统编码而不是 UTF8 <xref:System.Diagnostics.Process> 。</span><span class="sxs-lookup"><span data-stu-id="7e18d-144">The <xref:System.Diagnostics.Process> class will then automatically use the default system encoding rather than UTF8, provided that you have registered the encoding provider before calling any <xref:System.Diagnostics.Process> methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7e18d-145">下面的示例使用类的实例 <xref:System.Diagnostics.Process> 来启动进程。</span><span class="sxs-lookup"><span data-stu-id="7e18d-145">The following example uses an instance of the <xref:System.Diagnostics.Process> class to start a process.</span></span>  
  
 [!code-cpp[Process.Start_instance#1](~/samples/snippets/cpp/VS_Snippets_CLR/Process.Start_instance/CPP/processstart.cpp#1)]
 [!code-csharp[Process.Start_instance#1](~/samples/snippets/csharp/VS_Snippets_CLR/Process.Start_instance/CS/processstart.cs#1)]
 [!code-vb[Process.Start_instance#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Process.Start_instance/VB/processstart.vb#1)]  
  
 <span data-ttu-id="7e18d-146">下面的示例使用 <xref:System.Diagnostics.Process> 类本身和静态 <xref:System.Diagnostics.Process.Start%2A> 方法来启动进程。</span><span class="sxs-lookup"><span data-stu-id="7e18d-146">The following example uses the <xref:System.Diagnostics.Process> class itself and a static <xref:System.Diagnostics.Process.Start%2A> method to start a process.</span></span>  
  
 [!code-cpp[Process.Start_static#1](~/samples/snippets/cpp/VS_Snippets_CLR/Process.Start_static/CPP/processstartstatic.cpp)]
 [!code-csharp[Process.Start_static#1](~/samples/snippets/csharp/VS_Snippets_CLR/Process.Start_static/CS/processstartstatic.cs)]
 [!code-vb[Process.Start_static#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Process.Start_static/VB/processstartstatic.vb)]  
  
 <span data-ttu-id="7e18d-147">以下 F # 示例定义了一个 `runProc` 函数，该函数启动进程、捕获所有输出和错误信息，并记录进程已运行的毫秒数。</span><span class="sxs-lookup"><span data-stu-id="7e18d-147">The following F# example defines a `runProc` function that starts a process, captures all output and error information, and records the number of milliseconds that the process has run.</span></span>  <span data-ttu-id="7e18d-148">该 `runProc` 函数有三个参数：要启动的应用程序的名称、要为应用程序提供的参数以及起始目录。</span><span class="sxs-lookup"><span data-stu-id="7e18d-148">The `runProc` function has three parameters: the name of application to launch, the arguments to supply to the application, and the starting directory.</span></span>  
  
 [!code-fsharp[System.Diagnostics.Process#1](~/samples/snippets/fsharp/VS_Snippets_CLR_System/system.diagnostics.process/fs/Start1.fs#1)]  
  
 <span data-ttu-id="7e18d-149">此函数的代码 `runProc` 由 [ImaginaryDevelopment](http://fssnip.net/authors/ImaginaryDevelopment) 编写，并在 [Microsoft 公共许可证](https://opensource.org/licenses/ms-pl)下提供。</span><span class="sxs-lookup"><span data-stu-id="7e18d-149">The code for the `runProc` function was written by [ImaginaryDevelopment](http://fssnip.net/authors/ImaginaryDevelopment) and is available under the [Microsoft Public License](https://opensource.org/licenses/ms-pl).</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="M:System.Diagnostics.Process.Start" />
    <altmember cref="T:System.Diagnostics.ProcessStartInfo" />
    <altmember cref="M:System.Diagnostics.Process.CloseMainWindow" />
    <altmember cref="M:System.Diagnostics.Process.Kill" />
    <altmember cref="T:System.Diagnostics.ProcessThread" />
    <related type="ExternalDocumentation" href="https://code.msdn.microsoft.com/windowsdesktop/Using-the-NET-Process-Class-d70597ef"><span data-ttu-id="7e18d-150">使用 .NET 进程类</span><span class="sxs-lookup"><span data-stu-id="7e18d-150">Using the .NET Process Class</span></span></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Process ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Process.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Process();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7e18d-151">初始化 <see cref="T:System.Diagnostics.Process" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="7e18d-151">Initializes a new instance of the <see cref="T:System.Diagnostics.Process" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If you do not specify the <ph id="ph1">&lt;xref:System.Diagnostics.Process.MachineName%2A&gt;</ph> property, the default is the local computer, (".").  
  
 You have two options for associating a new <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> component with a process on the computer. The first option is to use the constructor to create the <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> component, set the appropriate members of the <ph id="ph2">&lt;xref:System.Diagnostics.Process.StartInfo%2A&gt;</ph> property and call <ph id="ph3">&lt;xref:System.Diagnostics.Process.Start%2A&gt;</ph> to associate the <ph id="ph4">&lt;xref:System.Diagnostics.Process&gt;</ph> with a new system process. <span data-ttu-id="7e18d-155">第二种方法是 <xref:System.Diagnostics.Process> 使用 <xref:System.Diagnostics.Process.GetProcessById%2A> 或返回值之一将与正在运行的系统进程关联 <xref:System.Diagnostics.Process.GetProcesses%2A> 。</span><span class="sxs-lookup"><span data-stu-id="7e18d-155">The second option is to associate the <xref:System.Diagnostics.Process> with a running system process by using <xref:System.Diagnostics.Process.GetProcessById%2A> or one of the <xref:System.Diagnostics.Process.GetProcesses%2A> return values.</span></span>  
  
 <span data-ttu-id="7e18d-156">如果使用方法的 `static` 重载 <xref:System.Diagnostics.Process.Start%2A> 来启动新的系统进程，则方法会创建一个新的 <xref:System.Diagnostics.Process> 组件，并将其与进程关联。</span><span class="sxs-lookup"><span data-stu-id="7e18d-156">If you use a `static` overload of the <xref:System.Diagnostics.Process.Start%2A> method to start a new system process, the method creates a new <xref:System.Diagnostics.Process> component and associates it with the process.</span></span>  
  
 <span data-ttu-id="7e18d-157">如果 <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A?displayProperty=nameWithType> 将属性设置为其默认值， `true` 则可以使用与使用 `Run` Windows 菜单对话框相同的方式启动应用程序和文档 `Start` 。</span><span class="sxs-lookup"><span data-stu-id="7e18d-157">When the <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A?displayProperty=nameWithType> property is set to its default value, `true`, you can start applications and documents in a way that is similar to using the `Run` dialog box of the Windows `Start` menu.</span></span> <span data-ttu-id="7e18d-158">当 <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A?displayProperty=nameWithType> 为时 `false` ，只能启动可执行文件。</span><span class="sxs-lookup"><span data-stu-id="7e18d-158">When <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A?displayProperty=nameWithType> is `false`, you can start only executables.</span></span>  
  
 <span data-ttu-id="7e18d-159">可以通过以下两种方式之一来启动可从命令行调用的可执行文件：设置属性的相应成员 <xref:System.Diagnostics.Process.StartInfo%2A> 并调用 <xref:System.Diagnostics.Process.Start%2A> 不带参数的方法，或通过将适当的参数传递给 `static` <xref:System.Diagnostics.Process.Start%2A> 成员。</span><span class="sxs-lookup"><span data-stu-id="7e18d-159">Any executable file that you can call from the command line can be started in one of two ways: by setting the appropriate members of the <xref:System.Diagnostics.Process.StartInfo%2A> property and calling the <xref:System.Diagnostics.Process.Start%2A> method with no parameters, or by passing the appropriate parameter to the `static`<xref:System.Diagnostics.Process.Start%2A> member.</span></span>  
  
 <span data-ttu-id="7e18d-160">您可以 <xref:System.Diagnostics.Process> 使用构造函数、一个静态 <xref:System.Diagnostics.Process.Start%2A> 重载或任何 <xref:System.Diagnostics.Process.GetProcessById%2A> 、 <xref:System.Diagnostics.Process.GetProcesses%2A> 或方法创建组件 <xref:System.Diagnostics.Process.GetProcessesByName%2A> 。</span><span class="sxs-lookup"><span data-stu-id="7e18d-160">You can create a <xref:System.Diagnostics.Process> component by using the constructor, one of the static <xref:System.Diagnostics.Process.Start%2A> overloads, or any of the <xref:System.Diagnostics.Process.GetProcessById%2A>, <xref:System.Diagnostics.Process.GetProcesses%2A>, or <xref:System.Diagnostics.Process.GetProcessesByName%2A> methods.</span></span> <span data-ttu-id="7e18d-161">完成此操作后，就可以查看关联的进程。</span><span class="sxs-lookup"><span data-stu-id="7e18d-161">After you have done so, you have a view into the associated process.</span></span> <span data-ttu-id="7e18d-162">这不是动态视图，当进程属性在内存中更改时，它会自动更新自身。</span><span class="sxs-lookup"><span data-stu-id="7e18d-162">This is not a dynamic view that updates itself automatically when the process properties have changed in memory.</span></span> <span data-ttu-id="7e18d-163">相反，你必须 <xref:System.Diagnostics.Process.Refresh%2A> 为组件调用以更新 <xref:System.Diagnostics.Process> 应用程序中的属性信息。</span><span class="sxs-lookup"><span data-stu-id="7e18d-163">Instead, you must call <xref:System.Diagnostics.Process.Refresh%2A> for the component to update the <xref:System.Diagnostics.Process> property information in your application.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BasePriority">
      <MemberSignature Language="C#" Value="public int BasePriority { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 BasePriority" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.BasePriority" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BasePriority As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int BasePriority { int get(); };" />
      <MemberSignature Language="F#" Value="member this.BasePriority : int" Usage="System.Diagnostics.Process.BasePriority" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.Diagnostics.MonitoringDescription("ProcessBasePriority")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.MonitoringDescription("ProcessBasePriority")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Diagnostics.MonitoringDescription("Base process priority.")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.MonitoringDescription("Base process priority.")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.MonoTODO]</AttributeName>
          <AttributeName Language="F#">[&lt;System.MonoTODO&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7e18d-164">获取关联进程的基本优先级。</span><span class="sxs-lookup"><span data-stu-id="7e18d-164">Gets the base priority of the associated process.</span></span></summary>
        <value><span data-ttu-id="7e18d-165">基本优先级，从关联进程的 <see cref="P:System.Diagnostics.Process.PriorityClass" /> 计算。</span><span class="sxs-lookup"><span data-stu-id="7e18d-165">The base priority, which is computed from the <see cref="P:System.Diagnostics.Process.PriorityClass" /> of the associated process.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <ph id="ph1">&lt;xref:System.Diagnostics.Process.BasePriority%2A&gt;</ph> of the process is the starting priority for threads created within the associated process. You can view information about the base priority through the System Monitor's Priority Base counter.  
  
 Based on the time elapsed or other boosts, the operating system can change the base priority when a process should be placed ahead of others.  
  
 <span data-ttu-id="7e18d-169">使用 <xref:System.Diagnostics.Process.BasePriority%2A> 属性可以查看分配给进程的启动优先级。</span><span class="sxs-lookup"><span data-stu-id="7e18d-169">The <xref:System.Diagnostics.Process.BasePriority%2A> property lets you view the starting priority assigned to a process.</span></span> <span data-ttu-id="7e18d-170">但是，因为它是只读的，所以不能使用 <xref:System.Diagnostics.Process.BasePriority%2A> 来设置进程的优先级。</span><span class="sxs-lookup"><span data-stu-id="7e18d-170">However, because it is read-only, you cannot use the <xref:System.Diagnostics.Process.BasePriority%2A> to set the priority of the process.</span></span> <span data-ttu-id="7e18d-171">若要更改优先级，请使用 <xref:System.Diagnostics.Process.PriorityClass%2A> 属性。</span><span class="sxs-lookup"><span data-stu-id="7e18d-171">To change the priority, use the <xref:System.Diagnostics.Process.PriorityClass%2A> property.</span></span> <span data-ttu-id="7e18d-172"><xref:System.Diagnostics.Process.BasePriority%2A>是使用系统监视器查看的，而不是 <xref:System.Diagnostics.Process.PriorityClass%2A> 。</span><span class="sxs-lookup"><span data-stu-id="7e18d-172">The <xref:System.Diagnostics.Process.BasePriority%2A> is viewable using the System Monitor, while the <xref:System.Diagnostics.Process.PriorityClass%2A> is not.</span></span> <span data-ttu-id="7e18d-173">和均 <xref:System.Diagnostics.Process.BasePriority%2A> <xref:System.Diagnostics.Process.PriorityClass%2A> 可通过编程方式查看。</span><span class="sxs-lookup"><span data-stu-id="7e18d-173">Both the <xref:System.Diagnostics.Process.BasePriority%2A> and the <xref:System.Diagnostics.Process.PriorityClass%2A> can be viewed programmatically.</span></span> <span data-ttu-id="7e18d-174">下表显示了 <xref:System.Diagnostics.Process.BasePriority%2A> 值与值之间的关系 <xref:System.Diagnostics.Process.PriorityClass%2A> 。</span><span class="sxs-lookup"><span data-stu-id="7e18d-174">The following table shows the relationship between <xref:System.Diagnostics.Process.BasePriority%2A> values and <xref:System.Diagnostics.Process.PriorityClass%2A> values.</span></span>  
  
|<span data-ttu-id="7e18d-175">BasePriority</span><span class="sxs-lookup"><span data-stu-id="7e18d-175">BasePriority</span></span>|<span data-ttu-id="7e18d-176">PriorityClass</span><span class="sxs-lookup"><span data-stu-id="7e18d-176">PriorityClass</span></span>|  
|------------------|-------------------|  
|<span data-ttu-id="7e18d-177">4</span><span class="sxs-lookup"><span data-stu-id="7e18d-177">4</span></span>|<xref:System.Diagnostics.ProcessPriorityClass.Idle>|  
|<span data-ttu-id="7e18d-178">8</span><span class="sxs-lookup"><span data-stu-id="7e18d-178">8</span></span>|<xref:System.Diagnostics.ProcessPriorityClass.Normal>|  
|<span data-ttu-id="7e18d-179">13</span><span class="sxs-lookup"><span data-stu-id="7e18d-179">13</span></span>|<xref:System.Diagnostics.ProcessPriorityClass.High>|  
|<span data-ttu-id="7e18d-180">24</span><span class="sxs-lookup"><span data-stu-id="7e18d-180">24</span></span>|<xref:System.Diagnostics.ProcessPriorityClass.RealTime>|  
  
   
  
## Examples  
 <span data-ttu-id="7e18d-181">下面的示例启动记事本的实例。</span><span class="sxs-lookup"><span data-stu-id="7e18d-181">The following example starts an instance of Notepad.</span></span> <span data-ttu-id="7e18d-182">然后，该示例检索并显示关联进程的各种属性。</span><span class="sxs-lookup"><span data-stu-id="7e18d-182">The example then retrieves and displays various properties of the associated process.</span></span> <span data-ttu-id="7e18d-183">该示例在进程退出时进行检测，并显示该进程的退出代码。</span><span class="sxs-lookup"><span data-stu-id="7e18d-183">The example detects when the process exits, and displays the process's exit code.</span></span>  
  
 [!code-cpp[Diag_Process_MemoryProperties64#1](~/samples/snippets/cpp/VS_Snippets_CLR/Diag_Process_MemoryProperties64/CPP/source.cpp#1)]
 [!code-csharp[Diag_Process_MemoryProperties64#1](~/samples/snippets/csharp/VS_Snippets_CLR/Diag_Process_MemoryProperties64/CS/source.cs#1)]
 [!code-vb[Diag_Process_MemoryProperties64#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Diag_Process_MemoryProperties64/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="7e18d-184">该进程已退出。</span><span class="sxs-lookup"><span data-stu-id="7e18d-184">The process has exited.</span></span>  
  
 <span data-ttu-id="7e18d-185">- 或 -</span><span class="sxs-lookup"><span data-stu-id="7e18d-185">-or-</span></span>  
  
 <span data-ttu-id="7e18d-186">尚未启动进程，因此没有进程 ID。</span><span class="sxs-lookup"><span data-stu-id="7e18d-186">The process has not started, so there is no process ID.</span></span></exception>
        <altmember cref="P:System.Diagnostics.Process.PriorityClass" />
        <altmember cref="T:System.Diagnostics.ProcessPriorityClass" />
        <altmember cref="T:System.Diagnostics.ThreadPriorityLevel" />
      </Docs>
    </Member>
    <Member MemberName="BeginErrorReadLine">
      <MemberSignature Language="C#" Value="public void BeginErrorReadLine ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BeginErrorReadLine() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Process.BeginErrorReadLine" />
      <MemberSignature Language="VB.NET" Value="Public Sub BeginErrorReadLine ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BeginErrorReadLine();" />
      <MemberSignature Language="F#" Value="member this.BeginErrorReadLine : unit -&gt; unit" Usage="process.BeginErrorReadLine " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Runtime.InteropServices.ComVisible(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.ComVisible(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7e18d-187">在应用程序的重定向 <see cref="P:System.Diagnostics.Process.StandardError" /> 流上开始进行异步读取操作。</span><span class="sxs-lookup"><span data-stu-id="7e18d-187">Begins asynchronous read operations on the redirected <see cref="P:System.Diagnostics.Process.StandardError" /> stream of the application.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <ph id="ph1">&lt;xref:System.Diagnostics.Process.StandardError%2A&gt;</ph> stream can be read synchronously or asynchronously. Methods such as <ph id="ph1">&lt;xref:System.IO.StreamReader.Read%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.IO.StreamReader.ReadLine%2A&gt;</ph>, and <ph id="ph3">&lt;xref:System.IO.StreamReader.ReadToEnd%2A&gt;</ph> perform synchronous read operations on the error output stream of the process. These synchronous read operations do not complete until the associated <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> writes to its <ph id="ph2">&lt;xref:System.Diagnostics.Process.StandardError%2A&gt;</ph> stream, or closes the stream.  
  
 <span data-ttu-id="7e18d-191">与此相反， <xref:System.Diagnostics.Process.BeginErrorReadLine%2A> 对流启动异步读取操作 <xref:System.Diagnostics.Process.StandardError%2A> 。</span><span class="sxs-lookup"><span data-stu-id="7e18d-191">In contrast, <xref:System.Diagnostics.Process.BeginErrorReadLine%2A> starts asynchronous read operations on the <xref:System.Diagnostics.Process.StandardError%2A> stream.</span></span> <span data-ttu-id="7e18d-192">此方法将为流输出启用指定的事件处理程序，并立即返回到调用方，当流输出定向到事件处理程序时，该处理程序可以执行其他操作。</span><span class="sxs-lookup"><span data-stu-id="7e18d-192">This method enables the designated event handler for the stream output and immediately returns to the caller, which can perform other work while the stream output is directed to the event handler.</span></span>  
  
 <span data-ttu-id="7e18d-193">按照以下步骤对执行异步读取操作 <xref:System.Diagnostics.Process.StandardError%2A> <xref:System.Diagnostics.Process> ：</span><span class="sxs-lookup"><span data-stu-id="7e18d-193">Follow these steps to perform asynchronous read operations on <xref:System.Diagnostics.Process.StandardError%2A> for a <xref:System.Diagnostics.Process> :</span></span>  
  
1.  <span data-ttu-id="7e18d-194">将 <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A> 设置为 `false`。</span><span class="sxs-lookup"><span data-stu-id="7e18d-194">Set <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A> to `false`.</span></span>  
  
2.  <span data-ttu-id="7e18d-195">将 <xref:System.Diagnostics.ProcessStartInfo.RedirectStandardError%2A> 设置为 `true`。</span><span class="sxs-lookup"><span data-stu-id="7e18d-195">Set <xref:System.Diagnostics.ProcessStartInfo.RedirectStandardError%2A> to `true`.</span></span>  
  
3.  <span data-ttu-id="7e18d-196">向事件添加事件处理程序 <xref:System.Diagnostics.Process.ErrorDataReceived> 。</span><span class="sxs-lookup"><span data-stu-id="7e18d-196">Add your event handler to the <xref:System.Diagnostics.Process.ErrorDataReceived> event.</span></span> <span data-ttu-id="7e18d-197">事件处理程序必须与 <xref:System.Diagnostics.DataReceivedEventHandler?displayProperty=nameWithType> 委托签名匹配。</span><span class="sxs-lookup"><span data-stu-id="7e18d-197">The event handler must match the <xref:System.Diagnostics.DataReceivedEventHandler?displayProperty=nameWithType> delegate signature.</span></span>  
  
4.  <span data-ttu-id="7e18d-198">启动 <xref:System.Diagnostics.Process>。</span><span class="sxs-lookup"><span data-stu-id="7e18d-198">Start the <xref:System.Diagnostics.Process>.</span></span>  
  
5.  <span data-ttu-id="7e18d-199">调用 <xref:System.Diagnostics.Process.BeginErrorReadLine%2A> <xref:System.Diagnostics.Process> 。</span><span class="sxs-lookup"><span data-stu-id="7e18d-199">Call <xref:System.Diagnostics.Process.BeginErrorReadLine%2A> for the <xref:System.Diagnostics.Process>.</span></span> <span data-ttu-id="7e18d-200">此调用启动对的异步读取操作 <xref:System.Diagnostics.Process.StandardError%2A> 。</span><span class="sxs-lookup"><span data-stu-id="7e18d-200">This call starts asynchronous read operations on <xref:System.Diagnostics.Process.StandardError%2A>.</span></span>  
  
 <span data-ttu-id="7e18d-201">当异步读取操作开始时，每当关联的事件 <xref:System.Diagnostics.Process> 行写入其流时，就会调用事件处理程序 <xref:System.Diagnostics.Process.StandardError%2A> 。</span><span class="sxs-lookup"><span data-stu-id="7e18d-201">When asynchronous read operations start, the event handler is called each time the associated <xref:System.Diagnostics.Process> writes a line of text to its <xref:System.Diagnostics.Process.StandardError%2A> stream.</span></span>  
  
 <span data-ttu-id="7e18d-202">可以通过调用取消异步读取操作 <xref:System.Diagnostics.Process.CancelErrorRead%2A> 。</span><span class="sxs-lookup"><span data-stu-id="7e18d-202">You can cancel an asynchronous read operation by calling <xref:System.Diagnostics.Process.CancelErrorRead%2A>.</span></span> <span data-ttu-id="7e18d-203">读取操作可由调用方或事件处理程序取消。</span><span class="sxs-lookup"><span data-stu-id="7e18d-203">The read operation can be canceled by the caller or by the event handler.</span></span> <span data-ttu-id="7e18d-204">取消后，可以再次调用 <xref:System.Diagnostics.Process.BeginErrorReadLine%2A> 以恢复异步读取操作。</span><span class="sxs-lookup"><span data-stu-id="7e18d-204">After canceling, you can call <xref:System.Diagnostics.Process.BeginErrorReadLine%2A> again to resume asynchronous read operations.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7e18d-205">不能对重定向的流混合使用异步和同步读取操作。</span><span class="sxs-lookup"><span data-stu-id="7e18d-205">You cannot mix asynchronous and synchronous read operations on a redirected stream.</span></span> <span data-ttu-id="7e18d-206"><xref:System.Diagnostics.Process>在异步或同步模式下打开的重定向流后，对该流进行的所有进一步读取操作都必须处于同一模式。</span><span class="sxs-lookup"><span data-stu-id="7e18d-206">Once the redirected stream of a <xref:System.Diagnostics.Process> is opened in either asynchronous or synchronous mode, all further read operations on that stream must be in the same mode.</span></span> <span data-ttu-id="7e18d-207">例如，不要在 <xref:System.Diagnostics.Process.BeginErrorReadLine%2A> <xref:System.IO.StreamReader.ReadLine%2A> 对流上调用， <xref:System.Diagnostics.Process.StandardError%2A> 反之亦然。</span><span class="sxs-lookup"><span data-stu-id="7e18d-207">For example, do not follow <xref:System.Diagnostics.Process.BeginErrorReadLine%2A> with a call to <xref:System.IO.StreamReader.ReadLine%2A> on the <xref:System.Diagnostics.Process.StandardError%2A> stream, or vice versa.</span></span> <span data-ttu-id="7e18d-208">但是，可以在不同模式下读取两个不同的流。</span><span class="sxs-lookup"><span data-stu-id="7e18d-208">However, you can read two different streams in different modes.</span></span> <span data-ttu-id="7e18d-209">例如，可以调用 <xref:System.Diagnostics.Process.BeginErrorReadLine%2A> ，然后调用流的 <xref:System.IO.StreamReader.ReadLine%2A> <xref:System.Diagnostics.Process.StandardOutput%2A> 。</span><span class="sxs-lookup"><span data-stu-id="7e18d-209">For example, you can call <xref:System.Diagnostics.Process.BeginErrorReadLine%2A> and then call <xref:System.IO.StreamReader.ReadLine%2A> for the <xref:System.Diagnostics.Process.StandardOutput%2A> stream.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7e18d-210">以下示例使用 `net view` 命令列出远程计算机上可用的网络资源。</span><span class="sxs-lookup"><span data-stu-id="7e18d-210">The following example uses the `net view` command to list the available network resources on a remote computer.</span></span> <span data-ttu-id="7e18d-211">用户以命令行参数的形式提供目标计算机名称。</span><span class="sxs-lookup"><span data-stu-id="7e18d-211">The user supplies the target computer name as a command-line argument.</span></span> <span data-ttu-id="7e18d-212">用户还可以提供错误输出的文件名。</span><span class="sxs-lookup"><span data-stu-id="7e18d-212">The user can also supply a file name for error output.</span></span> <span data-ttu-id="7e18d-213">该示例收集 net 命令的输出，等待进程完成，然后将输出结果写入控制台。</span><span class="sxs-lookup"><span data-stu-id="7e18d-213">The example collects the output of the net command, waits for the process to finish, and then writes the output results to the console.</span></span> <span data-ttu-id="7e18d-214">如果用户提供了可选的错误文件，则该示例会将错误写入文件。</span><span class="sxs-lookup"><span data-stu-id="7e18d-214">If the user supplies the optional error file, the example writes errors to the file.</span></span>  
  
 [!code-cpp[Process_AsyncStreams#2](~/samples/snippets/cpp/VS_Snippets_CLR/process_asyncstreams/CPP/net_async.cpp#2)]
 [!code-csharp[Process_AsyncStreams#2](~/samples/snippets/csharp/VS_Snippets_CLR/process_asyncstreams/CS/net_async.cs#2)]
 [!code-vb[Process_AsyncStreams#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/process_asyncstreams/VB/net_async.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="7e18d-215"><see cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardError" /> 属性为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="7e18d-215">The <see cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardError" /> property is <see langword="false" />.</span></span>  
  
<span data-ttu-id="7e18d-216">- 或 -</span><span class="sxs-lookup"><span data-stu-id="7e18d-216">-or-</span></span> 
<span data-ttu-id="7e18d-217"><see cref="P:System.Diagnostics.Process.StandardError" /> 流上已在进行异步读取操作。</span><span class="sxs-lookup"><span data-stu-id="7e18d-217">An asynchronous read operation is already in progress on the <see cref="P:System.Diagnostics.Process.StandardError" /> stream.</span></span>  
  
<span data-ttu-id="7e18d-218">- 或 -</span><span class="sxs-lookup"><span data-stu-id="7e18d-218">-or-</span></span> 
<span data-ttu-id="7e18d-219">同步读取操作已使用 <see cref="P:System.Diagnostics.Process.StandardError" /> 流。</span><span class="sxs-lookup"><span data-stu-id="7e18d-219">The <see cref="P:System.Diagnostics.Process.StandardError" /> stream has been used by a synchronous read operation.</span></span></exception>
        <altmember cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardError" />
        <altmember cref="P:System.Diagnostics.Process.StandardError" />
        <altmember cref="E:System.Diagnostics.Process.ErrorDataReceived" />
        <altmember cref="T:System.Diagnostics.DataReceivedEventHandler" />
        <altmember cref="M:System.Diagnostics.Process.CancelErrorRead" />
      </Docs>
    </Member>
    <Member MemberName="BeginOutputReadLine">
      <MemberSignature Language="C#" Value="public void BeginOutputReadLine ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BeginOutputReadLine() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Process.BeginOutputReadLine" />
      <MemberSignature Language="VB.NET" Value="Public Sub BeginOutputReadLine ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BeginOutputReadLine();" />
      <MemberSignature Language="F#" Value="member this.BeginOutputReadLine : unit -&gt; unit" Usage="process.BeginOutputReadLine " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Runtime.InteropServices.ComVisible(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.ComVisible(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7e18d-220">在应用程序的重定向 <see cref="P:System.Diagnostics.Process.StandardOutput" /> 流上开始进行异步读取操作。</span><span class="sxs-lookup"><span data-stu-id="7e18d-220">Begins asynchronous read operations on the redirected <see cref="P:System.Diagnostics.Process.StandardOutput" /> stream of the application.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <ph id="ph1">&lt;xref:System.Diagnostics.Process.StandardOutput%2A&gt;</ph> stream can be read synchronously or asynchronously. Methods such as <ph id="ph1">&lt;xref:System.IO.StreamReader.Read%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.IO.StreamReader.ReadLine%2A&gt;</ph>, and <ph id="ph3">&lt;xref:System.IO.StreamReader.ReadToEnd%2A&gt;</ph> perform synchronous read operations on the output stream of the process. These synchronous read operations do not complete until the associated <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> writes to its <ph id="ph2">&lt;xref:System.Diagnostics.Process.StandardOutput%2A&gt;</ph> stream, or closes the stream.  
  
 <span data-ttu-id="7e18d-224">与此相反， <xref:System.Diagnostics.Process.BeginOutputReadLine%2A> 对流启动异步读取操作 <xref:System.Diagnostics.Process.StandardOutput%2A> 。</span><span class="sxs-lookup"><span data-stu-id="7e18d-224">In contrast, <xref:System.Diagnostics.Process.BeginOutputReadLine%2A> starts asynchronous read operations on the <xref:System.Diagnostics.Process.StandardOutput%2A> stream.</span></span> <span data-ttu-id="7e18d-225">此方法将为流输出启用指定的事件处理程序，并立即返回到调用方，当流输出定向到事件处理程序时，该处理程序可以执行其他操作。</span><span class="sxs-lookup"><span data-stu-id="7e18d-225">This method enables a designated event handler for the stream output and immediately returns to the caller, which can perform other work while the stream output is directed to the event handler.</span></span>  
  
 <span data-ttu-id="7e18d-226">按照以下步骤对执行异步读取操作 <xref:System.Diagnostics.Process.StandardOutput%2A> <xref:System.Diagnostics.Process> ：</span><span class="sxs-lookup"><span data-stu-id="7e18d-226">Follow these steps to perform asynchronous read operations on <xref:System.Diagnostics.Process.StandardOutput%2A> for a <xref:System.Diagnostics.Process> :</span></span>  
  
1.  <span data-ttu-id="7e18d-227">将 <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A> 设置为 `false`。</span><span class="sxs-lookup"><span data-stu-id="7e18d-227">Set <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A> to `false`.</span></span>  
  
2.  <span data-ttu-id="7e18d-228">将 <xref:System.Diagnostics.ProcessStartInfo.RedirectStandardOutput%2A> 设置为 `true`。</span><span class="sxs-lookup"><span data-stu-id="7e18d-228">Set <xref:System.Diagnostics.ProcessStartInfo.RedirectStandardOutput%2A> to `true`.</span></span>  
  
3.  <span data-ttu-id="7e18d-229">向事件添加事件处理程序 <xref:System.Diagnostics.Process.OutputDataReceived> 。</span><span class="sxs-lookup"><span data-stu-id="7e18d-229">Add your event handler to the <xref:System.Diagnostics.Process.OutputDataReceived> event.</span></span> <span data-ttu-id="7e18d-230">事件处理程序必须与 <xref:System.Diagnostics.DataReceivedEventHandler?displayProperty=nameWithType> 委托签名匹配。</span><span class="sxs-lookup"><span data-stu-id="7e18d-230">The event handler must match the <xref:System.Diagnostics.DataReceivedEventHandler?displayProperty=nameWithType> delegate signature.</span></span>  
  
4.  <span data-ttu-id="7e18d-231">启动 <xref:System.Diagnostics.Process>。</span><span class="sxs-lookup"><span data-stu-id="7e18d-231">Start the <xref:System.Diagnostics.Process>.</span></span>  
  
5.  <span data-ttu-id="7e18d-232">调用 <xref:System.Diagnostics.Process.BeginOutputReadLine%2A> <xref:System.Diagnostics.Process> 。</span><span class="sxs-lookup"><span data-stu-id="7e18d-232">Call <xref:System.Diagnostics.Process.BeginOutputReadLine%2A> for the <xref:System.Diagnostics.Process>.</span></span> <span data-ttu-id="7e18d-233">此调用启动对的异步读取操作 <xref:System.Diagnostics.Process.StandardOutput%2A> 。</span><span class="sxs-lookup"><span data-stu-id="7e18d-233">This call starts asynchronous read operations on <xref:System.Diagnostics.Process.StandardOutput%2A>.</span></span>  
  
 <span data-ttu-id="7e18d-234">当异步读取操作开始时，每当关联的事件 <xref:System.Diagnostics.Process> 行写入其流时，就会调用事件处理程序 <xref:System.Diagnostics.Process.StandardOutput%2A> 。</span><span class="sxs-lookup"><span data-stu-id="7e18d-234">When asynchronous read operations start, the event handler is called each time the associated <xref:System.Diagnostics.Process> writes a line of text to its <xref:System.Diagnostics.Process.StandardOutput%2A> stream.</span></span>  
  
 <span data-ttu-id="7e18d-235">可以通过调用取消异步读取操作 <xref:System.Diagnostics.Process.CancelOutputRead%2A> 。</span><span class="sxs-lookup"><span data-stu-id="7e18d-235">You can cancel an asynchronous read operation by calling <xref:System.Diagnostics.Process.CancelOutputRead%2A>.</span></span> <span data-ttu-id="7e18d-236">读取操作可由调用方或事件处理程序取消。</span><span class="sxs-lookup"><span data-stu-id="7e18d-236">The read operation can be canceled by the caller or by the event handler.</span></span> <span data-ttu-id="7e18d-237">取消后，可以再次调用 <xref:System.Diagnostics.Process.BeginOutputReadLine%2A> 以恢复异步读取操作。</span><span class="sxs-lookup"><span data-stu-id="7e18d-237">After canceling, you can call <xref:System.Diagnostics.Process.BeginOutputReadLine%2A> again to resume asynchronous read operations.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7e18d-238">不能对重定向的流混合使用异步和同步读取操作。</span><span class="sxs-lookup"><span data-stu-id="7e18d-238">You cannot mix asynchronous and synchronous read operations on a redirected stream.</span></span> <span data-ttu-id="7e18d-239"><xref:System.Diagnostics.Process>在异步或同步模式下打开的重定向流后，对该流进行的所有进一步读取操作都必须处于同一模式。</span><span class="sxs-lookup"><span data-stu-id="7e18d-239">Once the redirected stream of a <xref:System.Diagnostics.Process> is opened in either asynchronous or synchronous mode, all further read operations on that stream must be in the same mode.</span></span> <span data-ttu-id="7e18d-240">例如，不要在 <xref:System.Diagnostics.Process.BeginOutputReadLine%2A> <xref:System.IO.StreamReader.ReadLine%2A> 对流上调用， <xref:System.Diagnostics.Process.StandardOutput%2A> 反之亦然。</span><span class="sxs-lookup"><span data-stu-id="7e18d-240">For example, do not follow <xref:System.Diagnostics.Process.BeginOutputReadLine%2A> with a call to <xref:System.IO.StreamReader.ReadLine%2A> on the <xref:System.Diagnostics.Process.StandardOutput%2A> stream, or vice versa.</span></span> <span data-ttu-id="7e18d-241">但是，可以在不同模式下读取两个不同的流。</span><span class="sxs-lookup"><span data-stu-id="7e18d-241">However, you can read two different streams in different modes.</span></span> <span data-ttu-id="7e18d-242">例如，可以调用 <xref:System.Diagnostics.Process.BeginOutputReadLine%2A> ，然后调用流的 <xref:System.IO.StreamReader.ReadLine%2A> <xref:System.Diagnostics.Process.StandardError%2A> 。</span><span class="sxs-lookup"><span data-stu-id="7e18d-242">For example, you can call <xref:System.Diagnostics.Process.BeginOutputReadLine%2A> and then call <xref:System.IO.StreamReader.ReadLine%2A> for the <xref:System.Diagnostics.Process.StandardError%2A> stream.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7e18d-243">下面的示例演示如何在命令的重定向流上执行异步读取操作 <xref:System.Diagnostics.Process.StandardOutput%2A> `sort` 。</span><span class="sxs-lookup"><span data-stu-id="7e18d-243">The following example illustrates how to perform asynchronous read operations on the redirected <xref:System.Diagnostics.Process.StandardOutput%2A> stream of the `sort` command.</span></span> <span data-ttu-id="7e18d-244">`sort`命令是一种控制台应用程序，用于读取和排序文本输入。</span><span class="sxs-lookup"><span data-stu-id="7e18d-244">The `sort` command is a console application that reads and sorts text input.</span></span>  
  
 <span data-ttu-id="7e18d-245">该示例创建 `SortOutputHandler` 事件处理程序的事件委托，并将其与事件相关联 <xref:System.Diagnostics.Process.OutputDataReceived> 。</span><span class="sxs-lookup"><span data-stu-id="7e18d-245">The example creates an event delegate for the `SortOutputHandler` event handler and associates it with the <xref:System.Diagnostics.Process.OutputDataReceived> event.</span></span> <span data-ttu-id="7e18d-246">事件处理程序接收重定向流中的文本行 <xref:System.Diagnostics.Process.StandardOutput%2A> ，设置文本的格式，并将文本写入屏幕。</span><span class="sxs-lookup"><span data-stu-id="7e18d-246">The event handler receives text lines from the redirected <xref:System.Diagnostics.Process.StandardOutput%2A> stream, formats the text, and writes the text to the screen.</span></span>  
  
 [!code-cpp[Process_AsyncStreams#1](~/samples/snippets/cpp/VS_Snippets_CLR/process_asyncstreams/CPP/sort_async.cpp#1)]
 [!code-csharp[Process_AsyncStreams#1](~/samples/snippets/csharp/VS_Snippets_CLR/process_asyncstreams/CS/sort_async.cs#1)]
 [!code-vb[Process_AsyncStreams#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/process_asyncstreams/VB/sort_async.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="7e18d-247"><see cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardOutput" /> 属性为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="7e18d-247">The <see cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardOutput" /> property is <see langword="false" />.</span></span>  
  
<span data-ttu-id="7e18d-248">- 或 -</span><span class="sxs-lookup"><span data-stu-id="7e18d-248">-or-</span></span> 
<span data-ttu-id="7e18d-249"><see cref="P:System.Diagnostics.Process.StandardOutput" /> 流上已在进行异步读取操作。</span><span class="sxs-lookup"><span data-stu-id="7e18d-249">An asynchronous read operation is already in progress on the <see cref="P:System.Diagnostics.Process.StandardOutput" /> stream.</span></span>  
  
<span data-ttu-id="7e18d-250">- 或 -</span><span class="sxs-lookup"><span data-stu-id="7e18d-250">-or-</span></span> 
<span data-ttu-id="7e18d-251">同步读取操作已使用 <see cref="P:System.Diagnostics.Process.StandardOutput" /> 流。</span><span class="sxs-lookup"><span data-stu-id="7e18d-251">The <see cref="P:System.Diagnostics.Process.StandardOutput" /> stream has been used by a synchronous read operation.</span></span></exception>
        <altmember cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardOutput" />
        <altmember cref="P:System.Diagnostics.Process.StandardOutput" />
        <altmember cref="E:System.Diagnostics.Process.OutputDataReceived" />
        <altmember cref="T:System.Diagnostics.DataReceivedEventHandler" />
        <altmember cref="M:System.Diagnostics.Process.CancelOutputRead" />
      </Docs>
    </Member>
    <Member MemberName="CancelErrorRead">
      <MemberSignature Language="C#" Value="public void CancelErrorRead ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CancelErrorRead() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Process.CancelErrorRead" />
      <MemberSignature Language="VB.NET" Value="Public Sub CancelErrorRead ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CancelErrorRead();" />
      <MemberSignature Language="F#" Value="member this.CancelErrorRead : unit -&gt; unit" Usage="process.CancelErrorRead " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Runtime.InteropServices.ComVisible(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.ComVisible(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7e18d-252">取消在应用程序的重定向 <see cref="P:System.Diagnostics.Process.StandardError" /> 流上执行的异步读取操作。</span><span class="sxs-lookup"><span data-stu-id="7e18d-252">Cancels the asynchronous read operation on the redirected <see cref="P:System.Diagnostics.Process.StandardError" /> stream of an application.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <ph id="ph1">&lt;xref:System.Diagnostics.Process.BeginErrorReadLine%2A&gt;</ph> starts an asynchronous read operation on the <ph id="ph2">&lt;xref:System.Diagnostics.Process.StandardError%2A&gt;</ph> stream. <ph id="ph1">&lt;xref:System.Diagnostics.Process.CancelErrorRead%2A&gt;</ph> ends the asynchronous read operation.  
  
 After canceling, you can resume the asynchronous read operation by calling <ph id="ph1">&lt;xref:System.Diagnostics.Process.BeginErrorReadLine%2A&gt;</ph> again.  
  
 <span data-ttu-id="7e18d-256">当你调用时 <xref:System.Diagnostics.Process.CancelErrorRead%2A> ，所有正在进行的读取操作 <xref:System.Diagnostics.Process.StandardError%2A> 都将完成，然后将禁用事件处理程序。</span><span class="sxs-lookup"><span data-stu-id="7e18d-256">When you call <xref:System.Diagnostics.Process.CancelErrorRead%2A>, all in-progress read operations for <xref:System.Diagnostics.Process.StandardError%2A> are completed and then the event handler is disabled.</span></span> <span data-ttu-id="7e18d-257">所有进一步的重定向输出 <xref:System.Diagnostics.Process.StandardError%2A> 都将丢失。</span><span class="sxs-lookup"><span data-stu-id="7e18d-257">All further redirected output to <xref:System.Diagnostics.Process.StandardError%2A> will be lost.</span></span> <span data-ttu-id="7e18d-258">如果使用对的调用重新启用事件处理程序，则会 <xref:System.Diagnostics.Process.BeginErrorReadLine%2A> 恢复异步读取操作。</span><span class="sxs-lookup"><span data-stu-id="7e18d-258">If you re-enable the event handler with a call to <xref:System.Diagnostics.Process.BeginErrorReadLine%2A>, asynchronous read operations resume.</span></span> <span data-ttu-id="7e18d-259">如果要在恢复异步读取操作之前更改事件处理程序，则必须先删除现有的事件处理程序，然后再添加新的事件处理程序：</span><span class="sxs-lookup"><span data-stu-id="7e18d-259">If you want to change the event handler before resuming asynchronous read operations, you must remove the existing event handler before adding the new event handler:</span></span>  
  
```csharp  
// At this point the DataReceivedEventHandler(ErrorHandler1)   
// has executed a CancelErrorRead.  
  
// Remove the prior event handler.  
process.ErrorDataReceived -=   
    new DataReceivedEventHandler(ErrorHandler1);  
  
// Register a new event handler.  
process.ErrorDataReceived +=   
    new DataReceivedEventHandler(ErrorHandler2);  
  
// Call the corresponding BeginErrorReadLine.  
process.BeginErrorReadLine();  
```  
  
> [!NOTE]
>  <span data-ttu-id="7e18d-260">不能对重定向的流混合使用异步和同步读取操作 <xref:System.Diagnostics.Process.StandardError%2A> 。</span><span class="sxs-lookup"><span data-stu-id="7e18d-260">You cannot mix asynchronous and synchronous read operations on the redirected <xref:System.Diagnostics.Process.StandardError%2A> stream.</span></span> <span data-ttu-id="7e18d-261"><xref:System.Diagnostics.Process>在异步或同步模式下打开的重定向流后，对该流进行的所有进一步读取操作都必须处于同一模式。</span><span class="sxs-lookup"><span data-stu-id="7e18d-261">Once the redirected stream of a <xref:System.Diagnostics.Process> is opened in either asynchronous or synchronous mode, all further read operations on that stream must be in the same mode.</span></span> <span data-ttu-id="7e18d-262">如果取消对的异步读取操作， <xref:System.Diagnostics.Process.StandardError%2A> 然后需要重新读取流，则必须使用 <xref:System.Diagnostics.Process.BeginErrorReadLine%2A> 恢复异步读取操作。</span><span class="sxs-lookup"><span data-stu-id="7e18d-262">If you cancel an asynchronous read operation on <xref:System.Diagnostics.Process.StandardError%2A> and then need to read from the stream again, you must use <xref:System.Diagnostics.Process.BeginErrorReadLine%2A> to resume asynchronous read operations.</span></span> <span data-ttu-id="7e18d-263">不要遵循 <xref:System.Diagnostics.Process.CancelErrorRead%2A> 、或等同步读取方法的调用 <xref:System.Diagnostics.Process.StandardError%2A> <xref:System.IO.StreamReader.Read%2A> <xref:System.IO.StreamReader.ReadLine%2A> <xref:System.IO.StreamReader.ReadToEnd%2A> 。</span><span class="sxs-lookup"><span data-stu-id="7e18d-263">Do not follow <xref:System.Diagnostics.Process.CancelErrorRead%2A> with a call to the synchronous read methods of <xref:System.Diagnostics.Process.StandardError%2A> such as <xref:System.IO.StreamReader.Read%2A>, <xref:System.IO.StreamReader.ReadLine%2A>, or <xref:System.IO.StreamReader.ReadToEnd%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7e18d-264">下面的示例 `nmake` 用用户提供的参数启动命令。</span><span class="sxs-lookup"><span data-stu-id="7e18d-264">The following example starts the `nmake` command with user supplied arguments.</span></span> <span data-ttu-id="7e18d-265">异步读取错误和输出流;收集的文本行将显示到控制台并写入日志文件。</span><span class="sxs-lookup"><span data-stu-id="7e18d-265">The error and output streams are read asynchronously; the collected text lines are displayed to the console as well as written to a log file.</span></span> <span data-ttu-id="7e18d-266">如果命令输出超过指定的行数，则将取消异步读取操作。</span><span class="sxs-lookup"><span data-stu-id="7e18d-266">If the command output exceeds a specified number of lines, the asynchronous read operations are canceled.</span></span>  
  
 [!code-cpp[Process_AsyncStreams#3](~/samples/snippets/cpp/VS_Snippets_CLR/process_asyncstreams/CPP/nmake_async.cpp#3)]
 [!code-csharp[Process_AsyncStreams#3](~/samples/snippets/csharp/VS_Snippets_CLR/process_asyncstreams/CS/nmake_async.cs#3)]
 [!code-vb[Process_AsyncStreams#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/process_asyncstreams/VB/nmake_async.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="7e18d-267">未针对异步读取操作启用 <see cref="P:System.Diagnostics.Process.StandardError" /> 流。</span><span class="sxs-lookup"><span data-stu-id="7e18d-267">The <see cref="P:System.Diagnostics.Process.StandardError" /> stream is not enabled for asynchronous read operations.</span></span></exception>
        <altmember cref="M:System.Diagnostics.Process.BeginErrorReadLine" />
        <altmember cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardError" />
        <altmember cref="P:System.Diagnostics.Process.StandardError" />
        <altmember cref="E:System.Diagnostics.Process.ErrorDataReceived" />
        <altmember cref="T:System.Diagnostics.DataReceivedEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="CancelOutputRead">
      <MemberSignature Language="C#" Value="public void CancelOutputRead ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CancelOutputRead() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Process.CancelOutputRead" />
      <MemberSignature Language="VB.NET" Value="Public Sub CancelOutputRead ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CancelOutputRead();" />
      <MemberSignature Language="F#" Value="member this.CancelOutputRead : unit -&gt; unit" Usage="process.CancelOutputRead " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Runtime.InteropServices.ComVisible(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.ComVisible(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7e18d-268">取消在应用程序的重定向 <see cref="P:System.Diagnostics.Process.StandardOutput" /> 流上执行的异步读取操作。</span><span class="sxs-lookup"><span data-stu-id="7e18d-268">Cancels the asynchronous read operation on the redirected <see cref="P:System.Diagnostics.Process.StandardOutput" /> stream of an application.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <ph id="ph1">&lt;xref:System.Diagnostics.Process.BeginOutputReadLine%2A&gt;</ph> starts an asynchronous read operation on the <ph id="ph2">&lt;xref:System.Diagnostics.Process.StandardOutput%2A&gt;</ph> stream. <ph id="ph1">&lt;xref:System.Diagnostics.Process.CancelOutputRead%2A&gt;</ph> ends the asynchronous read operation.  
  
 After canceling, you can resume asynchronous read operations by calling <ph id="ph1">&lt;xref:System.Diagnostics.Process.BeginOutputReadLine%2A&gt;</ph> again.  
  
 <span data-ttu-id="7e18d-272">当你调用时 <xref:System.Diagnostics.Process.CancelOutputRead%2A> ，所有正在进行的读取操作 <xref:System.Diagnostics.Process.StandardOutput%2A> 都将完成，然后将禁用事件处理程序。</span><span class="sxs-lookup"><span data-stu-id="7e18d-272">When you call <xref:System.Diagnostics.Process.CancelOutputRead%2A>, all in-progress read operations for <xref:System.Diagnostics.Process.StandardOutput%2A> are completed and then the event handler is disabled.</span></span> <span data-ttu-id="7e18d-273">所有进一步的重定向输出 <xref:System.Diagnostics.Process.StandardOutput%2A> 都保存在一个缓冲区中。</span><span class="sxs-lookup"><span data-stu-id="7e18d-273">All further redirected output to <xref:System.Diagnostics.Process.StandardOutput%2A> is saved in a buffer.</span></span> <span data-ttu-id="7e18d-274">如果使用对的调用重新启用事件处理程序 <xref:System.Diagnostics.Process.BeginOutputReadLine%2A> ，则会将保存的输出发送到事件处理程序，并恢复异步读取操作。</span><span class="sxs-lookup"><span data-stu-id="7e18d-274">If you re-enable the event handler with a call to <xref:System.Diagnostics.Process.BeginOutputReadLine%2A>, the saved output is sent to the event handler and asynchronous read operations resume.</span></span> <span data-ttu-id="7e18d-275">如果要在恢复异步读取操作之前更改事件处理程序，则必须先删除现有的事件处理程序，然后再添加新的事件处理程序：</span><span class="sxs-lookup"><span data-stu-id="7e18d-275">If you want to change the event handler before resuming asynchronous read operations, you must remove the existing event handler before adding the new event handler:</span></span>  
  
```csharp  
// At this point the DataReceivedEventHandler(OutputHandler1)   
// has executed a CancelOutputRead.  
  
// Remove the prior event handler.  
process.OutputDataReceived -=   
    new DataReceivedEventHandler(OutputHandler1);  
  
// Register a new event handler.  
process.OutputDataReceived +=   
    new DataReceivedEventHandler(OutputHandler2);  
  
// Call the corresponding BeginOutputReadLine.  
process.BeginOutputReadLine();  
```  
  
> [!NOTE]
>  <span data-ttu-id="7e18d-276">不能对重定向的流混合使用异步和同步读取操作 <xref:System.Diagnostics.Process.StandardOutput%2A> 。</span><span class="sxs-lookup"><span data-stu-id="7e18d-276">You cannot mix asynchronous and synchronous read operations on the redirected <xref:System.Diagnostics.Process.StandardOutput%2A> stream.</span></span> <span data-ttu-id="7e18d-277"><xref:System.Diagnostics.Process>在异步或同步模式下打开的重定向流后，对该流进行的所有进一步读取操作都必须处于同一模式。</span><span class="sxs-lookup"><span data-stu-id="7e18d-277">Once the redirected stream of a <xref:System.Diagnostics.Process> is opened in either asynchronous or synchronous mode, all further read operations on that stream must be in the same mode.</span></span> <span data-ttu-id="7e18d-278">如果取消对的异步读取操作， <xref:System.Diagnostics.Process.StandardOutput%2A> 然后需要重新读取流，则必须使用 <xref:System.Diagnostics.Process.BeginOutputReadLine%2A> 恢复异步读取操作。</span><span class="sxs-lookup"><span data-stu-id="7e18d-278">If you cancel an asynchronous read operation on <xref:System.Diagnostics.Process.StandardOutput%2A> and then need to read from the stream again, you must use <xref:System.Diagnostics.Process.BeginOutputReadLine%2A> to resume asynchronous read operations.</span></span> <span data-ttu-id="7e18d-279">不要遵循 <xref:System.Diagnostics.Process.CancelOutputRead%2A> 、或等同步读取方法的调用 <xref:System.Diagnostics.Process.StandardOutput%2A> <xref:System.IO.StreamReader.Read%2A> <xref:System.IO.StreamReader.ReadLine%2A> <xref:System.IO.StreamReader.ReadToEnd%2A> 。</span><span class="sxs-lookup"><span data-stu-id="7e18d-279">Do not follow <xref:System.Diagnostics.Process.CancelOutputRead%2A> with a call to the synchronous read methods of <xref:System.Diagnostics.Process.StandardOutput%2A> such as <xref:System.IO.StreamReader.Read%2A>, <xref:System.IO.StreamReader.ReadLine%2A>, or <xref:System.IO.StreamReader.ReadToEnd%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7e18d-280">下面的示例 `nmake` 用用户提供的参数启动命令。</span><span class="sxs-lookup"><span data-stu-id="7e18d-280">The following example starts the `nmake` command with user supplied arguments.</span></span> <span data-ttu-id="7e18d-281">异步读取错误和输出流;收集的文本行将显示到控制台并写入日志文件。</span><span class="sxs-lookup"><span data-stu-id="7e18d-281">The error and output streams are read asynchronously; the collected text lines are displayed to the console as well as written to a log file.</span></span> <span data-ttu-id="7e18d-282">如果命令输出超过指定的行数，则将取消异步读取操作。</span><span class="sxs-lookup"><span data-stu-id="7e18d-282">If the command output exceeds a specified number of lines, the asynchronous read operations are canceled.</span></span>  
  
 [!code-cpp[Process_AsyncStreams#3](~/samples/snippets/cpp/VS_Snippets_CLR/process_asyncstreams/CPP/nmake_async.cpp#3)]
 [!code-csharp[Process_AsyncStreams#3](~/samples/snippets/csharp/VS_Snippets_CLR/process_asyncstreams/CS/nmake_async.cs#3)]
 [!code-vb[Process_AsyncStreams#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/process_asyncstreams/VB/nmake_async.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="7e18d-283">未针对异步读取操作启用 <see cref="P:System.Diagnostics.Process.StandardOutput" /> 流。</span><span class="sxs-lookup"><span data-stu-id="7e18d-283">The <see cref="P:System.Diagnostics.Process.StandardOutput" /> stream is not enabled for asynchronous read operations.</span></span></exception>
        <altmember cref="M:System.Diagnostics.Process.BeginOutputReadLine" />
        <altmember cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardOutput" />
        <altmember cref="P:System.Diagnostics.Process.StandardOutput" />
        <altmember cref="E:System.Diagnostics.Process.OutputDataReceived" />
        <altmember cref="T:System.Diagnostics.DataReceivedEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Process.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberSignature Language="F#" Value="member this.Close : unit -&gt; unit" Usage="process.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7e18d-284">释放与此组件关联的所有资源。</span><span class="sxs-lookup"><span data-stu-id="7e18d-284">Frees all the resources that are associated with this component.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <ph id="ph1">&lt;xref:System.Diagnostics.Process.Close%2A&gt;</ph> method causes the process to stop waiting for exit if it was waiting, closes the process handle, and clears process-specific properties. <ph id="ph1">&lt;xref:System.Diagnostics.Process.Close%2A&gt;</ph> does not close the standard output, input, and error readers and writers in case they are being referenced externally.  
  
> [!NOTE]
>  <span data-ttu-id="7e18d-287"><xref:System.Diagnostics.Process.Dispose%2A> 方法调用 <xref:System.Diagnostics.Process.Close%2A>。</span><span class="sxs-lookup"><span data-stu-id="7e18d-287">The <xref:System.Diagnostics.Process.Dispose%2A> method calls <xref:System.Diagnostics.Process.Close%2A>.</span></span> Placing the <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> object in a <ph id="ph2">`using`</ph> block disposes of resources without the need to call <ph id="ph3">&lt;xref:System.Diagnostics.Process.Close%2A&gt;</ph>.  
  
   
  
## Examples  
 <span data-ttu-id="7e18d-289">下面的示例启动记事本的实例。</span><span class="sxs-lookup"><span data-stu-id="7e18d-289">The following example starts an instance of Notepad.</span></span> <span data-ttu-id="7e18d-290">然后，它会以2秒的间隔检索关联进程的物理内存使用率，最大值为10秒。</span><span class="sxs-lookup"><span data-stu-id="7e18d-290">It then retrieves the physical memory usage of the associated process at 2-second intervals for a maximum of 10 seconds.</span></span> <span data-ttu-id="7e18d-291">该示例检测进程是否在10秒后退出。</span><span class="sxs-lookup"><span data-stu-id="7e18d-291">The example detects whether the process exits before 10 seconds have elapsed.</span></span> <span data-ttu-id="7e18d-292">如果10秒后仍在运行，则此示例将关闭进程。</span><span class="sxs-lookup"><span data-stu-id="7e18d-292">The example closes the process if it is still running after 10 seconds.</span></span>  
  
 [!code-cpp[process_refresh#1](~/samples/snippets/cpp/VS_Snippets_CLR/process_refresh/CPP/process_refresh.cpp#1)]
 [!code-csharp[process_refresh#1](~/samples/snippets/csharp/VS_Snippets_CLR/process_refresh/CS/process_refresh.cs#1)]
 [!code-vb[process_refresh#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/process_refresh/VB/process_refresh.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CloseMainWindow">
      <MemberSignature Language="C#" Value="public bool CloseMainWindow ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CloseMainWindow() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Process.CloseMainWindow" />
      <MemberSignature Language="VB.NET" Value="Public Function CloseMainWindow () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CloseMainWindow();" />
      <MemberSignature Language="F#" Value="member this.CloseMainWindow : unit -&gt; bool" Usage="process.CloseMainWindow " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7e18d-293">通过向进程的主窗口发送关闭消息来关闭拥有用户界面的进程。</span><span class="sxs-lookup"><span data-stu-id="7e18d-293">Closes a process that has a user interface by sending a close message to its main window.</span></span></summary>
        <returns><span data-ttu-id="7e18d-294">如果成功发送了关闭消息，则为 <see langword="true" />；如果关联进程没有主窗口或禁用了主窗口(例如，如果当前显示模式对话框)，则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="7e18d-294"><see langword="true" /> if the close message was successfully sent; <see langword="false" /> if the associated process does not have a main window or if the main window is disabled (for example if a modal dialog is being shown).</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When a process is executing, its message loop is in a wait state. The message loop executes every time a Windows message is sent to the process by the operating system. Calling <ph id="ph1">&lt;xref:System.Diagnostics.Process.CloseMainWindow%2A&gt;</ph> sends a request to close the main window, which, in a well-formed application, closes child windows and revokes all running message loops for the application. <span data-ttu-id="7e18d-298">通过调用退出进程的请求 <xref:System.Diagnostics.Process.CloseMainWindow%2A> 不会强制应用程序退出。</span><span class="sxs-lookup"><span data-stu-id="7e18d-298">The request to exit the process by calling <xref:System.Diagnostics.Process.CloseMainWindow%2A> does not force the application to quit.</span></span> <span data-ttu-id="7e18d-299">应用程序可以在退出前要求用户进行验证，也可以拒绝退出。</span><span class="sxs-lookup"><span data-stu-id="7e18d-299">The application can ask for user verification before quitting, or it can refuse to quit.</span></span> <span data-ttu-id="7e18d-300">若要强制退出应用程序，请使用 <xref:System.Diagnostics.Process.Kill%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="7e18d-300">To force the application to quit, use the <xref:System.Diagnostics.Process.Kill%2A> method.</span></span> <span data-ttu-id="7e18d-301">的行为与 <xref:System.Diagnostics.Process.CloseMainWindow%2A> 用户使用系统菜单关闭应用程序的主窗口的行为相同。</span><span class="sxs-lookup"><span data-stu-id="7e18d-301">The behavior of <xref:System.Diagnostics.Process.CloseMainWindow%2A> is identical to that of a user closing an application's main window using the system menu.</span></span> <span data-ttu-id="7e18d-302">因此，通过关闭主窗口来退出进程的请求不会强制立即退出。</span><span class="sxs-lookup"><span data-stu-id="7e18d-302">Therefore, the request to exit the process by closing the main window does not force the application to quit immediately.</span></span>  
  
 <span data-ttu-id="7e18d-303">如果调用，则由进程编辑的数据或分配给进程的资源可能会丢失 <xref:System.Diagnostics.Process.Kill%2A> 。</span><span class="sxs-lookup"><span data-stu-id="7e18d-303">Data edited by the process or resources allocated to the process can be lost if you call <xref:System.Diagnostics.Process.Kill%2A>.</span></span> <span data-ttu-id="7e18d-304"><xref:System.Diagnostics.Process.Kill%2A> 导致异常的进程终止，只应在必要时使用。</span><span class="sxs-lookup"><span data-stu-id="7e18d-304"><xref:System.Diagnostics.Process.Kill%2A> causes an abnormal process termination, and should be used only when necessary.</span></span> <span data-ttu-id="7e18d-305"><xref:System.Diagnostics.Process.CloseMainWindow%2A> 启用进程的有序终止，并关闭所有窗口，因此更适合使用接口的应用程序。</span><span class="sxs-lookup"><span data-stu-id="7e18d-305"><xref:System.Diagnostics.Process.CloseMainWindow%2A> enables an orderly termination of the process and closes all windows, so it is preferable for applications with an interface.</span></span> <span data-ttu-id="7e18d-306">如果 <xref:System.Diagnostics.Process.CloseMainWindow%2A> 失败，可使用 <xref:System.Diagnostics.Process.Kill%2A> 终止进程。</span><span class="sxs-lookup"><span data-stu-id="7e18d-306">If <xref:System.Diagnostics.Process.CloseMainWindow%2A> fails, you can use <xref:System.Diagnostics.Process.Kill%2A> to terminate the process.</span></span> <span data-ttu-id="7e18d-307"><xref:System.Diagnostics.Process.Kill%2A> 是终止没有图形界面的进程的唯一方法。</span><span class="sxs-lookup"><span data-stu-id="7e18d-307"><xref:System.Diagnostics.Process.Kill%2A> is the only way to terminate processes that do not have graphical interfaces.</span></span>  
  
 <span data-ttu-id="7e18d-308">只能为在 <xref:System.Diagnostics.Process.Kill%2A> <xref:System.Diagnostics.Process.CloseMainWindow%2A> 本地计算机上运行的进程调用和。</span><span class="sxs-lookup"><span data-stu-id="7e18d-308">You can call <xref:System.Diagnostics.Process.Kill%2A> and <xref:System.Diagnostics.Process.CloseMainWindow%2A> only for processes that are running on the local computer.</span></span> <span data-ttu-id="7e18d-309">不能使远程计算机上的进程退出。</span><span class="sxs-lookup"><span data-stu-id="7e18d-309">You cannot cause processes on remote computers to exit.</span></span> <span data-ttu-id="7e18d-310">只能查看远程计算机上运行的进程的信息。</span><span class="sxs-lookup"><span data-stu-id="7e18d-310">You can only view information for processes running on remote computers.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7e18d-311">下面的示例启动记事本的实例。</span><span class="sxs-lookup"><span data-stu-id="7e18d-311">The following example starts an instance of Notepad.</span></span> <span data-ttu-id="7e18d-312">然后，它以2秒的间隔检索关联进程的物理内存使用率，最大值为10秒。</span><span class="sxs-lookup"><span data-stu-id="7e18d-312">It then retrieves the physical memory usage of the associated process at 2 second intervals for a maximum of 10 seconds.</span></span> <span data-ttu-id="7e18d-313">该示例检测进程是否在10秒后退出。</span><span class="sxs-lookup"><span data-stu-id="7e18d-313">The example detects whether the process exits before 10 seconds have elapsed.</span></span> <span data-ttu-id="7e18d-314">如果10秒后仍在运行，则此示例将关闭进程。</span><span class="sxs-lookup"><span data-stu-id="7e18d-314">The example closes the process if it is still running after 10 seconds.</span></span>  
  
 [!code-cpp[process_refresh#1](~/samples/snippets/cpp/VS_Snippets_CLR/process_refresh/CPP/process_refresh.cpp#1)]
 [!code-csharp[process_refresh#1](~/samples/snippets/csharp/VS_Snippets_CLR/process_refresh/CS/process_refresh.cs#1)]
 [!code-vb[process_refresh#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/process_refresh/VB/process_refresh.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="7e18d-315">已经退出该进程。</span><span class="sxs-lookup"><span data-stu-id="7e18d-315">The process has already exited.</span></span>  
  
<span data-ttu-id="7e18d-316">- 或 -</span><span class="sxs-lookup"><span data-stu-id="7e18d-316">-or-</span></span> 
<span data-ttu-id="7e18d-317">没有与此 <see cref="T:System.Diagnostics.Process" /> 对象关联的进程。</span><span class="sxs-lookup"><span data-stu-id="7e18d-317">No process is associated with this <see cref="T:System.Diagnostics.Process" /> object.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Process.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="process.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7e18d-318">执行与释放或重置非托管资源关联的应用程序定义的任务。</span><span class="sxs-lookup"><span data-stu-id="7e18d-318">Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Process.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="process.Dispose disposing" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" FrameworkAlternate="netcore-1.0;netcore-1.1" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" FrameworkAlternate="netcore-1.0;netcore-1.1" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" FrameworkAlternate="netcore-1.0;netcore-1.1" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" FrameworkAlternate="netcore-1.0;netcore-1.1" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="process.Dispose disposing" FrameworkAlternate="netcore-1.0;netcore-1.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing"><span data-ttu-id="7e18d-319">若要释放托管资源和非托管资源，则为 <see langword="true" />；若仅释放非托管资源，则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="7e18d-319"><see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</span></span></param>
        <summary><span data-ttu-id="7e18d-320">释放此进程使用的所有资源。</span><span class="sxs-lookup"><span data-stu-id="7e18d-320">Release all resources used by this process.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableRaisingEvents">
      <MemberSignature Language="C#" Value="public bool EnableRaisingEvents { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableRaisingEvents" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.EnableRaisingEvents" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableRaisingEvents As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableRaisingEvents { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnableRaisingEvents : bool with get, set" Usage="System.Diagnostics.Process.EnableRaisingEvents" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.Diagnostics.MonitoringDescription("ProcessEnableRaisingEvents")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.MonitoringDescription("ProcessEnableRaisingEvents")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Diagnostics.MonitoringDescription("Whether the process component should watch for the associated process to exit, and raise the Exited event.")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.MonitoringDescription("Whether the process component should watch for the associated process to exit, and raise the Exited event.")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7e18d-321">获取或设置在进程终止时是否应引发 <see cref="E:System.Diagnostics.Process.Exited" /> 事件。</span><span class="sxs-lookup"><span data-stu-id="7e18d-321">Gets or sets whether the <see cref="E:System.Diagnostics.Process.Exited" /> event should be raised when the process terminates.</span></span></summary>
        <value><span data-ttu-id="7e18d-322">如果关联的进程终止（通过退出或者调用<see langword="true" /> ）时应引发 <see cref="E:System.Diagnostics.Process.Exited" /> 事件，则为 <see cref="M:System.Diagnostics.Process.Kill" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="7e18d-322"><see langword="true" /> if the <see cref="E:System.Diagnostics.Process.Exited" /> event should be raised when the associated process is terminated (through either an exit or a call to <see cref="M:System.Diagnostics.Process.Kill" />); otherwise, <see langword="false" />.</span></span> <span data-ttu-id="7e18d-323">默认值为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="7e18d-323">The default is <see langword="false" />.</span></span> Note that the <ph id="ph1">&lt;see cref="E:System.Diagnostics.Process.Exited" /&gt;</ph> event is raised even if the value of <ph id="ph2">&lt;see cref="P:System.Diagnostics.Process.EnableRaisingEvents" /&gt;</ph> is <ph id="ph3">&lt;see langword="false" /&gt;</ph> when the process exits during or before the user performs a <ph id="ph4">&lt;see cref="P:System.Diagnostics.Process.HasExited" /&gt;</ph> check.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
The <ph id="ph1">&lt;xref:System.Diagnostics.Process.EnableRaisingEvents%2A&gt;</ph> property suggests whether the component should be notified when the operating system has shut down a process. The <ph id="ph1">&lt;xref:System.Diagnostics.Process.EnableRaisingEvents%2A&gt;</ph> property is used in asynchronous processing to notify your application that a process has exited. <span data-ttu-id="7e18d-327">若要强制您的应用程序以同步方式等待退出事件 (中断应用程序的处理，直到) 出现 exit 事件，请使用 <xref:System.Diagnostics.Process.WaitForExit%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="7e18d-327">To force your application to synchronously wait for an exit event (which interrupts processing of the application until the exit event has occurred), use the <xref:System.Diagnostics.Process.WaitForExit%2A> method.</span></span>

> [!NOTE]
> <span data-ttu-id="7e18d-328">如果使用的是 Visual Studio 并双击 <xref:System.Diagnostics.Process> 项目中的组件，则 <xref:System.Diagnostics.Process.Exited> 会自动生成事件委托和事件处理程序。</span><span class="sxs-lookup"><span data-stu-id="7e18d-328">If you're using Visual Studio and double-click a <xref:System.Diagnostics.Process> component in your project, an <xref:System.Diagnostics.Process.Exited> event delegate and event handler are automatically generated.</span></span> <span data-ttu-id="7e18d-329">其他代码将 <xref:System.Diagnostics.Process.EnableRaisingEvents%2A> 属性设置为 `false` 。</span><span class="sxs-lookup"><span data-stu-id="7e18d-329">Additional code sets the <xref:System.Diagnostics.Process.EnableRaisingEvents%2A> property to `false`.</span></span> <span data-ttu-id="7e18d-330">您必须将此属性更改为，以便 `true` 事件处理程序在关联进程退出时执行。</span><span class="sxs-lookup"><span data-stu-id="7e18d-330">You must change this property to `true` for your event handler to execute when the associated process exits.</span></span>

<span data-ttu-id="7e18d-331">如果组件的 <xref:System.Diagnostics.Process.EnableRaisingEvents%2A> 值为 `true` ，或者当 <xref:System.Diagnostics.Process.EnableRaisingEvents%2A> 为 `false` 并且 <xref:System.Diagnostics.Process.HasExited%2A> 组件调用了检查时，组件可以访问关联进程的管理信息，该信息仍由操作系统存储。</span><span class="sxs-lookup"><span data-stu-id="7e18d-331">If the component's <xref:System.Diagnostics.Process.EnableRaisingEvents%2A> value is `true`, or when <xref:System.Diagnostics.Process.EnableRaisingEvents%2A> is `false` and a <xref:System.Diagnostics.Process.HasExited%2A> check is invoked by the component, the component can access the administrative information for the associated process, which remains stored by the operating system.</span></span> <span data-ttu-id="7e18d-332">此类信息包括 <xref:System.Diagnostics.Process.ExitTime%2A> 和 <xref:System.Diagnostics.Process.ExitCode%2A> 。</span><span class="sxs-lookup"><span data-stu-id="7e18d-332">Such information includes the <xref:System.Diagnostics.Process.ExitTime%2A> and the <xref:System.Diagnostics.Process.ExitCode%2A>.</span></span>

<span data-ttu-id="7e18d-333">关联进程退出后，组件的将不再 <xref:System.Diagnostics.Process.Handle%2A> 指向现有进程资源。</span><span class="sxs-lookup"><span data-stu-id="7e18d-333">After the associated process exits, the <xref:System.Diagnostics.Process.Handle%2A> of the component no longer points to an existing process resource.</span></span> <span data-ttu-id="7e18d-334">相反，它只能用于访问有关进程资源的操作系统的信息。</span><span class="sxs-lookup"><span data-stu-id="7e18d-334">Instead, it can only be used to access the operating system's information about the process resource.</span></span> <span data-ttu-id="7e18d-335">操作系统会注意到，存在已被组件释放的退出进程的句柄 <xref:System.Diagnostics.Process> ，因此它将 <xref:System.Diagnostics.Process.ExitTime%2A> 和 <xref:System.Diagnostics.Process.Handle%2A> 信息保留在内存中。</span><span class="sxs-lookup"><span data-stu-id="7e18d-335">The operating system is aware that there are handles to exited processes that haven't been released by <xref:System.Diagnostics.Process> components, so it keeps the <xref:System.Diagnostics.Process.ExitTime%2A> and <xref:System.Diagnostics.Process.Handle%2A> information in memory.</span></span>

<span data-ttu-id="7e18d-336">监视进程退出会产生相关费用。</span><span class="sxs-lookup"><span data-stu-id="7e18d-336">There's a cost associated with watching for a process to exit.</span></span> <span data-ttu-id="7e18d-337">如果 <xref:System.Diagnostics.Process.EnableRaisingEvents%2A> 为 `true` ，则在 <xref:System.Diagnostics.Process.Exited> 关联进程终止时引发事件。</span><span class="sxs-lookup"><span data-stu-id="7e18d-337">If <xref:System.Diagnostics.Process.EnableRaisingEvents%2A> is `true`, the <xref:System.Diagnostics.Process.Exited> event is raised when the associated process terminates.</span></span> <span data-ttu-id="7e18d-338"><xref:System.Diagnostics.Process.Exited>在此时运行事件的过程。</span><span class="sxs-lookup"><span data-stu-id="7e18d-338">Your procedures for the <xref:System.Diagnostics.Process.Exited> event run at that time.</span></span>

<span data-ttu-id="7e18d-339">有时，应用程序会启动进程，但不需要通知结束。</span><span class="sxs-lookup"><span data-stu-id="7e18d-339">Sometimes, your application starts a process but doesn't require notification of its closure.</span></span> <span data-ttu-id="7e18d-340">例如，你的应用程序可以启动记事本，以允许用户执行文本编辑，但不会再进一步使用记事本应用程序。</span><span class="sxs-lookup"><span data-stu-id="7e18d-340">For example, your application can start Notepad to allow the user to perform text editing but make no further use of the Notepad application.</span></span> <span data-ttu-id="7e18d-341">你可以选择在进程退出时避免通知，因为它与你的应用程序的继续操作无关。</span><span class="sxs-lookup"><span data-stu-id="7e18d-341">You can choose to avoid notification when the process exits because it's not relevant to the continued operation of your application.</span></span> <span data-ttu-id="7e18d-342">设置 <xref:System.Diagnostics.Process.EnableRaisingEvents%2A> 为 `false` 可以保存系统资源。</span><span class="sxs-lookup"><span data-stu-id="7e18d-342">Setting <xref:System.Diagnostics.Process.EnableRaisingEvents%2A> to `false` can save system resources.</span></span>

## Examples  
<span data-ttu-id="7e18d-343">下面的代码示例创建打印文件的进程。</span><span class="sxs-lookup"><span data-stu-id="7e18d-343">The following code example creates a process that prints a file.</span></span> <span data-ttu-id="7e18d-344">它设置 <xref:System.Diagnostics.Process.EnableRaisingEvents%2A> 属性，使进程 <xref:System.Diagnostics.Process.Exited> 在退出时引发事件。</span><span class="sxs-lookup"><span data-stu-id="7e18d-344">It sets the <xref:System.Diagnostics.Process.EnableRaisingEvents%2A> property to cause the process to raise the <xref:System.Diagnostics.Process.Exited> event when it exits.</span></span> <span data-ttu-id="7e18d-345"><xref:System.Diagnostics.Process.Exited>事件处理程序显示进程信息。</span><span class="sxs-lookup"><span data-stu-id="7e18d-345">The <xref:System.Diagnostics.Process.Exited> event handler displays process information.</span></span>

[!code-csharp[System.Diagnostics.Process.EnableExited#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.Process.EnableExited/CS/processexitedevent.cs#1)]   
[!code-vb[System.Diagnostics.Process.EnableExited#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.Process.EnableExited/VB/processexitedevent.vb#1)]   
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Diagnostics.Process.WaitForExit(System.Int32)" />
        <altmember cref="E:System.Diagnostics.Process.Exited" />
        <altmember cref="M:System.Diagnostics.Process.CloseMainWindow" />
        <altmember cref="M:System.Diagnostics.Process.Kill" />
        <altmember cref="P:System.Diagnostics.Process.Handle" />
        <altmember cref="P:System.Diagnostics.Process.ExitTime" />
        <altmember cref="P:System.Diagnostics.Process.HasExited" />
      </Docs>
    </Member>
    <Member MemberName="EnterDebugMode">
      <MemberSignature Language="C#" Value="public static void EnterDebugMode ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void EnterDebugMode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Process.EnterDebugMode" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub EnterDebugMode ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void EnterDebugMode();" />
      <MemberSignature Language="F#" Value="static member EnterDebugMode : unit -&gt; unit" Usage="System.Diagnostics.Process.EnterDebugMode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7e18d-346">通过启用当前线程的本机属性 <see cref="T:System.Diagnostics.Process" />，将 <see langword="SeDebugPrivilege" /> 组件置于与以特殊模式运行的操作系统进程交互的状态。</span><span class="sxs-lookup"><span data-stu-id="7e18d-346">Puts a <see cref="T:System.Diagnostics.Process" /> component in state to interact with operating system processes that run in a special mode by enabling the native property <see langword="SeDebugPrivilege" /> on the current thread.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Some operating system processes run in a special mode. Attempting to read properties of or attach to these processes is not possible unless you have called <ph id="ph1">&lt;xref:System.Diagnostics.Process.EnterDebugMode%2A&gt;</ph> on the component. Call <ph id="ph1">&lt;xref:System.Diagnostics.Process.LeaveDebugMode%2A&gt;</ph> when you no longer need access to these processes that run in special mode.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Diagnostics.Process.LeaveDebugMode" />
      </Docs>
    </Member>
    <Member MemberName="ErrorDataReceived">
      <MemberSignature Language="C#" Value="public event System.Diagnostics.DataReceivedEventHandler ErrorDataReceived;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Diagnostics.DataReceivedEventHandler ErrorDataReceived" />
      <MemberSignature Language="DocId" Value="E:System.Diagnostics.Process.ErrorDataReceived" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ErrorDataReceived As DataReceivedEventHandler " FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Diagnostics::DataReceivedEventHandler ^ ErrorDataReceived;" />
      <MemberSignature Language="F#" Value="member this.ErrorDataReceived : System.Diagnostics.DataReceivedEventHandler " Usage="member this.ErrorDataReceived : System.Diagnostics.DataReceivedEventHandler " />
      <MemberSignature Language="VB.NET" Value="Public Event ErrorDataReceived As DataReceivedEventHandler " FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.ComponentModel.Browsable(true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(true)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.Diagnostics.MonitoringDescription("ProcessAssociated")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.MonitoringDescription("ProcessAssociated")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Diagnostics.MonitoringDescription("Indicates if the process component is associated with a real process.")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.MonitoringDescription("Indicates if the process component is associated with a real process.")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Diagnostics.DataReceivedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7e18d-350">当应用程序写入其重定向 <see cref="P:System.Diagnostics.Process.StandardError" /> 流中时发生。</span><span class="sxs-lookup"><span data-stu-id="7e18d-350">Occurs when an application writes to its redirected <see cref="P:System.Diagnostics.Process.StandardError" /> stream.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <ph id="ph1">&lt;xref:System.Diagnostics.Process.ErrorDataReceived&gt;</ph> event indicates that the associated <ph id="ph2">&lt;xref:System.Diagnostics.Process&gt;</ph> has written a line that's terminated with a newline (carriage return (CR), line feed (LF), or CR+LF) to its redirected <ph id="ph3">&lt;xref:System.Diagnostics.Process.StandardError%2A&gt;</ph> stream.
  
 The event only occurs during asynchronous read operations on <ph id="ph1">&lt;xref:System.Diagnostics.Process.StandardError%2A&gt;</ph>. To start asynchronous read operations, you must redirect the <ph id="ph1">&lt;xref:System.Diagnostics.Process.StandardError%2A&gt;</ph> stream of a <ph id="ph2">&lt;xref:System.Diagnostics.Process&gt;</ph>, add your event handler to the <ph id="ph3">&lt;xref:System.Diagnostics.Process.ErrorDataReceived&gt;</ph> event, and call <ph id="ph4">&lt;xref:System.Diagnostics.Process.BeginErrorReadLine%2A&gt;</ph>. <span data-ttu-id="7e18d-354">此后， <xref:System.Diagnostics.Process.ErrorDataReceived> 每次进程将行写入重定向的流时，都会发出事件信号 <xref:System.Diagnostics.Process.StandardError%2A> ，直到进程退出或调用 <xref:System.Diagnostics.Process.CancelErrorRead%2A> 。</span><span class="sxs-lookup"><span data-stu-id="7e18d-354">Thereafter, the <xref:System.Diagnostics.Process.ErrorDataReceived> event signals each time the process writes a line to the redirected <xref:System.Diagnostics.Process.StandardError%2A> stream, until the process exits or calls <xref:System.Diagnostics.Process.CancelErrorRead%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7e18d-355">处理异步输出的应用程序应调用 <xref:System.Diagnostics.Process.WaitForExit> 方法，以确保刷新了输出缓冲区。</span><span class="sxs-lookup"><span data-stu-id="7e18d-355">The application that is processing the asynchronous output should call the <xref:System.Diagnostics.Process.WaitForExit> method to ensure that the output buffer has been flushed.</span></span> <span data-ttu-id="7e18d-356">请注意，使用重载指定超时不 <xref:System.Diagnostics.Process.WaitForExit(System.Int32)> 会确保*not*输出缓冲区已刷新。</span><span class="sxs-lookup"><span data-stu-id="7e18d-356">Note that specifying a timeout by using the <xref:System.Diagnostics.Process.WaitForExit(System.Int32)> overload does *not* ensure the output buffer has been flushed.</span></span>
  
   
  
## Examples  
 <span data-ttu-id="7e18d-357">以下示例使用 `net view` 命令列出远程计算机上可用的网络资源。</span><span class="sxs-lookup"><span data-stu-id="7e18d-357">The following example uses the `net view` command to list the available network resources on a remote computer.</span></span> <span data-ttu-id="7e18d-358">用户以命令行参数的形式提供目标计算机名称。</span><span class="sxs-lookup"><span data-stu-id="7e18d-358">The user supplies the target computer name as a command-line argument.</span></span> <span data-ttu-id="7e18d-359">用户还可以提供错误输出的文件名。</span><span class="sxs-lookup"><span data-stu-id="7e18d-359">The user can also supply a file name for error output.</span></span> <span data-ttu-id="7e18d-360">该示例收集 net 命令的输出，等待进程完成，然后将输出结果写入控制台。</span><span class="sxs-lookup"><span data-stu-id="7e18d-360">The example collects the output of the net command, waits for the process to finish, and then writes the output results to the console.</span></span> <span data-ttu-id="7e18d-361">如果用户提供了可选的错误文件，则该示例会将错误写入文件。</span><span class="sxs-lookup"><span data-stu-id="7e18d-361">If the user supplies the optional error file, the example writes errors to the file.</span></span>  
  
 [!code-cpp[Process_AsyncStreams#2](~/samples/snippets/cpp/VS_Snippets_CLR/process_asyncstreams/CPP/net_async.cpp#2)]
 [!code-csharp[Process_AsyncStreams#2](~/samples/snippets/csharp/VS_Snippets_CLR/process_asyncstreams/CS/net_async.cs#2)]
 [!code-vb[Process_AsyncStreams#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/process_asyncstreams/VB/net_async.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardError" />
        <altmember cref="P:System.Diagnostics.Process.StandardError" />
        <altmember cref="M:System.Diagnostics.Process.BeginErrorReadLine" />
        <altmember cref="M:System.Diagnostics.Process.CancelErrorRead" />
        <altmember cref="T:System.Diagnostics.DataReceivedEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="ExitCode">
      <MemberSignature Language="C#" Value="public int ExitCode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ExitCode" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.ExitCode" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ExitCode As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ExitCode { int get(); };" />
      <MemberSignature Language="F#" Value="member this.ExitCode : int" Usage="System.Diagnostics.Process.ExitCode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.Diagnostics.MonitoringDescription("ProcessExitCode")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.MonitoringDescription("ProcessExitCode")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Diagnostics.MonitoringDescription("The value returned from the associated process when it terminated.")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.MonitoringDescription("The value returned from the associated process when it terminated.")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7e18d-362">获取关联进程终止时指定的值。</span><span class="sxs-lookup"><span data-stu-id="7e18d-362">Gets the value that the associated process specified when it terminated.</span></span></summary>
        <value><span data-ttu-id="7e18d-363">关联进程终止时指定的代码。</span><span class="sxs-lookup"><span data-stu-id="7e18d-363">The code that the associated process specified when it terminated.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use <ph id="ph1">&lt;xref:System.Diagnostics.Process.ExitCode%2A&gt;</ph> to get the status that the system process returned when it exited. You can use the exit code much like an integer return value from a <ph id="ph1">`main()`</ph> procedure.  
  
 The <ph id="ph1">&lt;xref:System.Diagnostics.Process.ExitCode%2A&gt;</ph> value for a process reflects the specific convention implemented by the application developer for that process. <span data-ttu-id="7e18d-367">如果使用退出代码值在代码中做出决策，请确保了解应用程序进程使用的退出代码约定。</span><span class="sxs-lookup"><span data-stu-id="7e18d-367">If you use the exit code value to make decisions in your code, be sure that you know the exit code convention used by the application process.</span></span>  
  
 <span data-ttu-id="7e18d-368">开发人员通常会指示值为零的成功退出 <xref:System.Diagnostics.Process.ExitCode%2A> ，并通过非零值指定错误，调用方法可以使用该值来识别异常进程终止的原因。</span><span class="sxs-lookup"><span data-stu-id="7e18d-368">Developers usually indicate a successful exit by an <xref:System.Diagnostics.Process.ExitCode%2A> value of zero, and designate errors by nonzero values that the calling method can use to identify the cause of an abnormal process termination.</span></span> <span data-ttu-id="7e18d-369">不需要遵循这些准则，但它们是约定。</span><span class="sxs-lookup"><span data-stu-id="7e18d-369">It is not necessary to follow these guidelines, but they are the convention.</span></span>  
  
 <span data-ttu-id="7e18d-370">如果尝试在 <xref:System.Diagnostics.Process.ExitCode%2A> 进程退出之前获取，则尝试会引发异常。</span><span class="sxs-lookup"><span data-stu-id="7e18d-370">If you try to get the <xref:System.Diagnostics.Process.ExitCode%2A> before the process has exited, the attempt throws an exception.</span></span> <span data-ttu-id="7e18d-371">首先检查 <xref:System.Diagnostics.Process.HasExited%2A> 属性以验证关联的进程是否已终止。</span><span class="sxs-lookup"><span data-stu-id="7e18d-371">Examine the <xref:System.Diagnostics.Process.HasExited%2A> property first to verify whether the associated process has terminated.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7e18d-372">将标准输出重定向到异步事件处理程序时，输出处理可能在返回时不会完成 <xref:System.Diagnostics.Process.HasExited%2A> `true` 。</span><span class="sxs-lookup"><span data-stu-id="7e18d-372">When standard output has been redirected to asynchronous event handlers, it is possible that output processing will not have completed when <xref:System.Diagnostics.Process.HasExited%2A> returns `true`.</span></span> <span data-ttu-id="7e18d-373">若要确保异步事件处理已完成，请 <xref:System.Diagnostics.Process.WaitForExit> 在检查前调用不带任何参数的重载 <xref:System.Diagnostics.Process.HasExited%2A> 。</span><span class="sxs-lookup"><span data-stu-id="7e18d-373">To ensure that asynchronous event handling has been completed, call the <xref:System.Diagnostics.Process.WaitForExit> overload that takes no parameter before checking <xref:System.Diagnostics.Process.HasExited%2A>.</span></span>  
  
 <span data-ttu-id="7e18d-374">您可以使用 <xref:System.Diagnostics.Process.CloseMainWindow%2A> 或 <xref:System.Diagnostics.Process.Kill%2A> 方法来使关联进程退出。</span><span class="sxs-lookup"><span data-stu-id="7e18d-374">You can use the <xref:System.Diagnostics.Process.CloseMainWindow%2A> or the <xref:System.Diagnostics.Process.Kill%2A> method to cause an associated process to exit.</span></span>  
  
 <span data-ttu-id="7e18d-375">关联进程退出时，有两种通知方式：同步和异步。</span><span class="sxs-lookup"><span data-stu-id="7e18d-375">There are two ways of being notified when the associated process exits: synchronously and asynchronously.</span></span> <span data-ttu-id="7e18d-376">同步通知依赖于调用 <xref:System.Diagnostics.Process.WaitForExit%2A> 方法暂停应用程序的处理，直到关联的组件退出。</span><span class="sxs-lookup"><span data-stu-id="7e18d-376">Synchronous notification relies on calling the <xref:System.Diagnostics.Process.WaitForExit%2A> method to pause the processing of your application until the associated component exits.</span></span> <span data-ttu-id="7e18d-377">异步通知依赖于 <xref:System.Diagnostics.Process.Exited> 事件。</span><span class="sxs-lookup"><span data-stu-id="7e18d-377">Asynchronous notification relies on the <xref:System.Diagnostics.Process.Exited> event.</span></span> <span data-ttu-id="7e18d-378">使用异步通知时， <xref:System.Diagnostics.Process.EnableRaisingEvents%2A> 必须将设置为， `true` <xref:System.Diagnostics.Process> 组件才能接收进程已退出的通知。</span><span class="sxs-lookup"><span data-stu-id="7e18d-378">When using asynchronous notification, <xref:System.Diagnostics.Process.EnableRaisingEvents%2A> must be set to `true` for the <xref:System.Diagnostics.Process> component to receive notification that the process has exited.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7e18d-379">下面的示例启动记事本的实例。</span><span class="sxs-lookup"><span data-stu-id="7e18d-379">The following example starts an instance of Notepad.</span></span> <span data-ttu-id="7e18d-380">然后，该示例检索并显示关联进程的各种属性。</span><span class="sxs-lookup"><span data-stu-id="7e18d-380">The example then retrieves and displays various properties of the associated process.</span></span> <span data-ttu-id="7e18d-381">该示例在进程退出时进行检测，并显示该进程的退出代码。</span><span class="sxs-lookup"><span data-stu-id="7e18d-381">The example detects when the process exits, and displays the process's exit code.</span></span>  
  
 [!code-cpp[Diag_Process_MemoryProperties64#1](~/samples/snippets/cpp/VS_Snippets_CLR/Diag_Process_MemoryProperties64/CPP/source.cpp#1)]
 [!code-csharp[Diag_Process_MemoryProperties64#1](~/samples/snippets/csharp/VS_Snippets_CLR/Diag_Process_MemoryProperties64/CS/source.cs#1)]
 [!code-vb[Diag_Process_MemoryProperties64#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Diag_Process_MemoryProperties64/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="7e18d-382">进程尚未退出。</span><span class="sxs-lookup"><span data-stu-id="7e18d-382">The process has not exited.</span></span>  
  
<span data-ttu-id="7e18d-383">- 或 -</span><span class="sxs-lookup"><span data-stu-id="7e18d-383">-or-</span></span> 
<span data-ttu-id="7e18d-384">进程 <see cref="P:System.Diagnostics.Process.Handle" /> 无效。</span><span class="sxs-lookup"><span data-stu-id="7e18d-384">The process <see cref="P:System.Diagnostics.Process.Handle" /> is not valid.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="7e18d-385">你正尝试访问在远程计算机上运行的进程的 <see cref="P:System.Diagnostics.Process.ExitCode" /> 属性。</span><span class="sxs-lookup"><span data-stu-id="7e18d-385">You are trying to access the <see cref="P:System.Diagnostics.Process.ExitCode" /> property for a process that is running on a remote computer.</span></span> <span data-ttu-id="7e18d-386">此属性仅可用于本地计算机上运行的进程。</span><span class="sxs-lookup"><span data-stu-id="7e18d-386">This property is available only for processes that are running on the local computer.</span></span></exception>
        <altmember cref="P:System.Diagnostics.Process.HasExited" />
        <altmember cref="M:System.Diagnostics.Process.CloseMainWindow" />
        <altmember cref="M:System.Diagnostics.Process.Kill" />
        <altmember cref="M:System.Diagnostics.Process.WaitForExit(System.Int32)" />
        <altmember cref="P:System.Diagnostics.Process.EnableRaisingEvents" />
      </Docs>
    </Member>
    <Member MemberName="Exited">
      <MemberSignature Language="C#" Value="public event EventHandler Exited;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Exited" />
      <MemberSignature Language="DocId" Value="E:System.Diagnostics.Process.Exited" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Exited As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Exited;" />
      <MemberSignature Language="F#" Value="member this.Exited : EventHandler " Usage="member this.Exited : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.ComponentModel.Category("Behavior")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Category("Behavior")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.Diagnostics.MonitoringDescription("ProcessExited")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.MonitoringDescription("ProcessExited")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Diagnostics.MonitoringDescription("If the WatchForExit property is set to true, then this event is raised when the associated process exits.")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.MonitoringDescription("If the WatchForExit property is set to true, then this event is raised when the associated process exits.")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7e18d-387">在进程退出时发生。</span><span class="sxs-lookup"><span data-stu-id="7e18d-387">Occurs when a process exits.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <ph id="ph1">&lt;xref:System.Diagnostics.Process.Exited&gt;</ph> event indicates that the associated process exited. This occurrence means either that the process terminated (aborted) or successfully closed. This event can occur only if the value of the <ph id="ph1">&lt;xref:System.Diagnostics.Process.EnableRaisingEvents%2A&gt;</ph> property is <ph id="ph2">`true`</ph>.  
  
 <span data-ttu-id="7e18d-391">关联进程退出时，有两种通知方式：同步和异步。</span><span class="sxs-lookup"><span data-stu-id="7e18d-391">There are two ways of being notified when the associated process exits: synchronously and asynchronously.</span></span> <span data-ttu-id="7e18d-392">同步通知意味着调用 <xref:System.Diagnostics.Process.WaitForExit%2A> 方法阻止当前线程，直到进程退出。</span><span class="sxs-lookup"><span data-stu-id="7e18d-392">Synchronous notification means calling the <xref:System.Diagnostics.Process.WaitForExit%2A> method to block the current thread until the process exits.</span></span> <span data-ttu-id="7e18d-393">异步通知使用 <xref:System.Diagnostics.Process.Exited> 事件，该事件允许调用线程同时继续执行。</span><span class="sxs-lookup"><span data-stu-id="7e18d-393">Asynchronous notification uses the <xref:System.Diagnostics.Process.Exited> event, which allows the calling thread to continue execution in the meantime.</span></span> <span data-ttu-id="7e18d-394">在后一种情况下， <xref:System.Diagnostics.Process.EnableRaisingEvents%2A> 必须将设置为，以便 `true` 调用应用程序接收退出事件。</span><span class="sxs-lookup"><span data-stu-id="7e18d-394">In the latter case, <xref:System.Diagnostics.Process.EnableRaisingEvents%2A> must be set to `true` for the calling application to receive the Exited event.</span></span>  
  
 <span data-ttu-id="7e18d-395">当操作系统关闭进程时，它会通知所有其他进程已退出事件的已注册处理程序。</span><span class="sxs-lookup"><span data-stu-id="7e18d-395">When the operating system shuts down a process, it notifies all other processes that have registered handlers for the Exited event.</span></span> <span data-ttu-id="7e18d-396">此时，可使用刚刚退出的进程的句柄来访问某些属性（如）  <xref:System.Diagnostics.Process.ExitTime%2A> ，并且在 <xref:System.Diagnostics.Process.HasExited%2A> 它完全释放该句柄之前，操作系统一直维护。</span><span class="sxs-lookup"><span data-stu-id="7e18d-396">At this time, the handle of the process that just exited can be used to access some properties such as  <xref:System.Diagnostics.Process.ExitTime%2A> and <xref:System.Diagnostics.Process.HasExited%2A> that the operating system maintains until it releases that handle completely.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7e18d-397">即使您具有已退出进程的句柄，也不能 <xref:System.Diagnostics.Process.Start%2A> 再次调用来重新连接到同一进程。</span><span class="sxs-lookup"><span data-stu-id="7e18d-397">Even if you have a handle to an exited process, you cannot call <xref:System.Diagnostics.Process.Start%2A> again to reconnect to the same process.</span></span> <span data-ttu-id="7e18d-398">调用 <xref:System.Diagnostics.Process.Start%2A> 会自动释放关联的进程，并使用同一文件而不是全新的进程连接到进程 <xref:System.Diagnostics.Process.Handle%2A> 。</span><span class="sxs-lookup"><span data-stu-id="7e18d-398">Calling <xref:System.Diagnostics.Process.Start%2A> automatically releases the associated process and connects to a process with the same file but an entirely new <xref:System.Diagnostics.Process.Handle%2A>.</span></span>  
  
 <span data-ttu-id="7e18d-399">有关 <xref:System.Diagnostics.Process.Exited> 在 Windows 窗体应用程序中使用事件的详细信息，请参阅 <xref:System.Diagnostics.Process.SynchronizingObject%2A> 属性。</span><span class="sxs-lookup"><span data-stu-id="7e18d-399">For more information about the use of the <xref:System.Diagnostics.Process.Exited> event in Windows Forms applications, see the <xref:System.Diagnostics.Process.SynchronizingObject%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7e18d-400">下面的代码示例创建打印文件的进程。</span><span class="sxs-lookup"><span data-stu-id="7e18d-400">The following code example creates a process that prints a file.</span></span> <span data-ttu-id="7e18d-401">它 <xref:System.Diagnostics.Process.Exited> 在进程退出时引发事件，因为在 <xref:System.Diagnostics.Process.EnableRaisingEvents%2A> 创建进程时设置了属性。</span><span class="sxs-lookup"><span data-stu-id="7e18d-401">It raises the <xref:System.Diagnostics.Process.Exited> event when the process exits because the <xref:System.Diagnostics.Process.EnableRaisingEvents%2A> property was set when the process was created.</span></span> <span data-ttu-id="7e18d-402"><xref:System.Diagnostics.Process.Exited>事件处理程序显示进程信息。</span><span class="sxs-lookup"><span data-stu-id="7e18d-402">The <xref:System.Diagnostics.Process.Exited> event handler displays process information.</span></span>  
  
 [!code-csharp[System.Diagnostics.Process.EnableExited#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.Process.EnableExited/CS/processexitedevent.cs#1)]
 [!code-vb[System.Diagnostics.Process.EnableExited#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.Process.EnableExited/VB/processexitedevent.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExitTime">
      <MemberSignature Language="C#" Value="public DateTime ExitTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime ExitTime" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.ExitTime" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ExitTime As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTime ExitTime { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.ExitTime : DateTime" Usage="System.Diagnostics.Process.ExitTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.Diagnostics.MonitoringDescription("ProcessExitTime")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.MonitoringDescription("ProcessExitTime")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Diagnostics.MonitoringDescription("The time that the associated process exited.")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.MonitoringDescription("The time that the associated process exited.")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7e18d-403">获取关联进程退出的时间。</span><span class="sxs-lookup"><span data-stu-id="7e18d-403">Gets the time that the associated process exited.</span></span></summary>
        <value><span data-ttu-id="7e18d-404"><see cref="T:System.DateTime" />，它指示关联进程终止的时间。</span><span class="sxs-lookup"><span data-stu-id="7e18d-404">A <see cref="T:System.DateTime" /> that indicates when the associated process was terminated.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If the process has not terminated, attempting to retrieve the <ph id="ph1">&lt;xref:System.Diagnostics.Process.ExitTime%2A&gt;</ph> property throws an exception. Use <ph id="ph1">&lt;xref:System.Diagnostics.Process.HasExited%2A&gt;</ph> before getting the <ph id="ph2">&lt;xref:System.Diagnostics.Process.ExitTime%2A&gt;</ph> property to determine whether the associated process has terminated.  
  
   
  
## Examples  
 The following code example creates a process that prints a file. <span data-ttu-id="7e18d-408">进程在 <xref:System.Diagnostics.Process.Exited> 退出时将引发事件，并且事件处理程序会显示 <xref:System.Diagnostics.Process.ExitTime%2A> 属性和其他进程信息。</span><span class="sxs-lookup"><span data-stu-id="7e18d-408">The process raises the <xref:System.Diagnostics.Process.Exited> event when it exits, and the event handler displays the <xref:System.Diagnostics.Process.ExitTime%2A> property and other process information.</span></span>  
  
 [!code-csharp[System.Diagnostics.Process.EnableExited#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.Process.EnableExited/CS/processexitedevent.cs#1)]
 [!code-vb[System.Diagnostics.Process.EnableExited#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.Process.EnableExited/VB/processexitedevent.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="7e18d-409">你正尝试访问在远程计算机上运行的进程的 <see cref="P:System.Diagnostics.Process.ExitTime" /> 属性。</span><span class="sxs-lookup"><span data-stu-id="7e18d-409">You are trying to access the <see cref="P:System.Diagnostics.Process.ExitTime" /> property for a process that is running on a remote computer.</span></span> <span data-ttu-id="7e18d-410">此属性仅可用于本地计算机上运行的进程。</span><span class="sxs-lookup"><span data-stu-id="7e18d-410">This property is available only for processes that are running on the local computer.</span></span></exception>
        <altmember cref="P:System.Diagnostics.Process.Handle" />
        <altmember cref="P:System.Diagnostics.Process.ExitCode" />
      </Docs>
    </Member>
    <Member MemberName="GetCurrentProcess">
      <MemberSignature Language="C#" Value="public static System.Diagnostics.Process GetCurrentProcess ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Diagnostics.Process GetCurrentProcess() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Process.GetCurrentProcess" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetCurrentProcess () As Process" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Diagnostics::Process ^ GetCurrentProcess();" />
      <MemberSignature Language="F#" Value="static member GetCurrentProcess : unit -&gt; System.Diagnostics.Process" Usage="System.Diagnostics.Process.GetCurrentProcess " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.Process</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7e18d-411">获取新的 <see cref="T:System.Diagnostics.Process" /> 组件并将其与当前活动的进程关联。</span><span class="sxs-lookup"><span data-stu-id="7e18d-411">Gets a new <see cref="T:System.Diagnostics.Process" /> component and associates it with the currently active process.</span></span></summary>
        <returns><span data-ttu-id="7e18d-412">与运行调用应用程序的进程资源关联的新的 <see cref="T:System.Diagnostics.Process" /> 组件。</span><span class="sxs-lookup"><span data-stu-id="7e18d-412">A new <see cref="T:System.Diagnostics.Process" /> component associated with the process resource that is running the calling application.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use this method to create a new <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> instance and associate it with the process resource on the local computer.  
  
 Like the similar <ph id="ph1">&lt;xref:System.Diagnostics.Process.GetProcessById%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Diagnostics.Process.GetProcessesByName%2A&gt;</ph>, and <ph id="ph3">&lt;xref:System.Diagnostics.Process.GetProcesses%2A&gt;</ph> methods, <ph id="ph4">&lt;xref:System.Diagnostics.Process.GetCurrentProcess%2A&gt;</ph> associates an existing resource with a new <ph id="ph5">&lt;xref:System.Diagnostics.Process&gt;</ph> component.  
  
   
  
## Examples  
 The following example retrieves information of the current process, processes running on the local computer, all instances of Notepad running on the local computer, and a specific process on the local computer. <span data-ttu-id="7e18d-416">然后，它将检索远程计算机上相同进程的信息。</span><span class="sxs-lookup"><span data-stu-id="7e18d-416">It then retrieves information for the same processes on a remote computer.</span></span>  
  
 [!code-cpp[Process.GetProcesses_noexception#1](~/samples/snippets/cpp/VS_Snippets_CLR/Process.GetProcesses_noexception/CPP/processstaticget.cpp#1)]
 [!code-csharp[Process.GetProcesses_noexception#1](~/samples/snippets/csharp/VS_Snippets_CLR/Process.GetProcesses_noexception/CS/processstaticget.cs#1)]
 [!code-vb[Process.GetProcesses_noexception#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Process.GetProcesses_noexception/VB/processstaticget.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Diagnostics.Process.GetProcessById(System.Int32,System.String)" />
        <altmember cref="M:System.Diagnostics.Process.GetProcessesByName(System.String)" />
        <altmember cref="M:System.Diagnostics.Process.GetProcesses" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetProcessById">
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="7e18d-417">创建新的 <see cref="T:System.Diagnostics.Process" /> 组件，并将其与您指定的现有进程资源关联。</span><span class="sxs-lookup"><span data-stu-id="7e18d-417">Creates a new <see cref="T:System.Diagnostics.Process" /> component, and associates it with the existing process resource that you specify.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetProcessById">
      <MemberSignature Language="C#" Value="public static System.Diagnostics.Process GetProcessById (int processId);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Diagnostics.Process GetProcessById(int32 processId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Process.GetProcessById(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetProcessById (processId As Integer) As Process" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Diagnostics::Process ^ GetProcessById(int processId);" />
      <MemberSignature Language="F#" Value="static member GetProcessById : int -&gt; System.Diagnostics.Process" Usage="System.Diagnostics.Process.GetProcessById processId" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Diagnostics.Process</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="processId" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="processId"><span data-ttu-id="7e18d-418">进程资源的系统唯一标识符。</span><span class="sxs-lookup"><span data-stu-id="7e18d-418">The system-unique identifier of a process resource.</span></span></param>
        <summary><span data-ttu-id="7e18d-419">返回新的 <see cref="T:System.Diagnostics.Process" /> 组件(给定本地计算机上某个进程的标识符)。</span><span class="sxs-lookup"><span data-stu-id="7e18d-419">Returns a new <see cref="T:System.Diagnostics.Process" /> component, given the identifier of a process on the local computer.</span></span></summary>
        <returns><span data-ttu-id="7e18d-420">与 <paramref name="processId" /> 参数标识的本地进程资源关联的 <see cref="T:System.Diagnostics.Process" /> 组件。</span><span class="sxs-lookup"><span data-stu-id="7e18d-420">A <see cref="T:System.Diagnostics.Process" /> component that is associated with the local process resource identified by the <paramref name="processId" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use this method to create a new <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> component and associate it with a process resource on the local computer. The process resource must already exist on the computer, because <ph id="ph1">&lt;xref:System.Diagnostics.Process.GetProcessById%28System.Int32%29&gt;</ph> does not create a system resource, but rather associates a resource with an application-generated <ph id="ph2">&lt;xref:System.Diagnostics.Process&gt;</ph> component. A process <ph id="ph1">&lt;xref:System.Diagnostics.Process.Id%2A&gt;</ph> can be retrieved only for a process that is currently running on the computer. <span data-ttu-id="7e18d-424">进程终止后， <xref:System.Diagnostics.Process.GetProcessById%28System.Int32%29> 如果向其传递过期的标识符，将引发异常。</span><span class="sxs-lookup"><span data-stu-id="7e18d-424">After the process terminates, <xref:System.Diagnostics.Process.GetProcessById%28System.Int32%29> throws an exception if you pass it an expired identifier.</span></span>  
  
 <span data-ttu-id="7e18d-425">在任何特定计算机上，进程的标识符都是唯一的。</span><span class="sxs-lookup"><span data-stu-id="7e18d-425">On any particular computer, the identifier of a process is unique.</span></span> <span data-ttu-id="7e18d-426"><xref:System.Diagnostics.Process.GetProcessById%28System.Int32%29> 最多返回一个进程。</span><span class="sxs-lookup"><span data-stu-id="7e18d-426"><xref:System.Diagnostics.Process.GetProcessById%28System.Int32%29> returns one process at most.</span></span> <span data-ttu-id="7e18d-427">如果要获取运行特定应用程序的所有进程，请使用 <xref:System.Diagnostics.Process.GetProcessesByName%28System.String%29> 。</span><span class="sxs-lookup"><span data-stu-id="7e18d-427">If you want to get all the processes running a particular application, use <xref:System.Diagnostics.Process.GetProcessesByName%28System.String%29>.</span></span> <span data-ttu-id="7e18d-428">如果运行指定应用程序的计算机上存在多个进程，则 <xref:System.Diagnostics.Process.GetProcessesByName%28System.String%29> 返回包含所有关联进程的数组。</span><span class="sxs-lookup"><span data-stu-id="7e18d-428">If multiple processes exist on the computer running the specified application, <xref:System.Diagnostics.Process.GetProcessesByName%28System.String%29> returns an array containing all the associated processes.</span></span> <span data-ttu-id="7e18d-429">你可以依次查询每个进程的标识符。</span><span class="sxs-lookup"><span data-stu-id="7e18d-429">You can query each of these processes in turn for its identifier.</span></span> <span data-ttu-id="7e18d-430">可以在 `Processes` Windows 任务管理器的面板中查看进程标识符。</span><span class="sxs-lookup"><span data-stu-id="7e18d-430">The process identifier can be viewed in the `Processes` panel of the Windows Task Manager.</span></span> <span data-ttu-id="7e18d-431">`PID`列显示分配给进程的进程标识符。</span><span class="sxs-lookup"><span data-stu-id="7e18d-431">The `PID` column displays the process identifier that is assigned to a process.</span></span>  
  
 <span data-ttu-id="7e18d-432">`processId`参数是一个 <xref:System.Int32> (32 位有符号整数) ，不过，基础 Windows API 使用 `DWORD` (适用于类似 api 的无符号32位整数) 。</span><span class="sxs-lookup"><span data-stu-id="7e18d-432">The `processId` parameter is an <xref:System.Int32> (a 32-bit signed integer), although the underlying Windows API uses a `DWORD` (an unsigned 32-bit integer) for similar APIs.</span></span> <span data-ttu-id="7e18d-433">这是出于历史原因。</span><span class="sxs-lookup"><span data-stu-id="7e18d-433">This is for historical reasons.</span></span>
  
## Examples  
 <span data-ttu-id="7e18d-434">下面的示例检索当前进程的信息、在本地计算机上运行的进程、在本地计算机上运行的所有 Notepad 实例，以及本地计算机上的特定进程。</span><span class="sxs-lookup"><span data-stu-id="7e18d-434">The following example retrieves information of the current process, processes running on the local computer, all instances of Notepad running on the local computer, and a specific process on the local computer.</span></span> <span data-ttu-id="7e18d-435">然后，它将检索远程计算机上相同进程的信息。</span><span class="sxs-lookup"><span data-stu-id="7e18d-435">It then retrieves information for the same processes on a remote computer.</span></span>  
  
 [!code-cpp[Process.GetProcesses_noexception#1](~/samples/snippets/cpp/VS_Snippets_CLR/Process.GetProcesses_noexception/CPP/processstaticget.cpp#1)]
 [!code-csharp[Process.GetProcesses_noexception#1](~/samples/snippets/csharp/VS_Snippets_CLR/Process.GetProcesses_noexception/CS/processstaticget.cs#1)]
 [!code-vb[Process.GetProcesses_noexception#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Process.GetProcesses_noexception/VB/processstaticget.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="7e18d-436"><paramref name="processId" /> 参数指定的进程未运行。</span><span class="sxs-lookup"><span data-stu-id="7e18d-436">The process specified by the <paramref name="processId" /> parameter is not running.</span></span> <span data-ttu-id="7e18d-437">此标识符可能已过期。</span><span class="sxs-lookup"><span data-stu-id="7e18d-437">The identifier might be expired.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="7e18d-438">此对象未启动该进程。</span><span class="sxs-lookup"><span data-stu-id="7e18d-438">The process was not started by this object.</span></span></exception>
        <altmember cref="P:System.Diagnostics.Process.Id" />
        <altmember cref="M:System.Diagnostics.Process.GetProcessesByName(System.String)" />
        <altmember cref="M:System.Diagnostics.Process.GetProcesses" />
        <altmember cref="M:System.Diagnostics.Process.GetCurrentProcess" />
      </Docs>
    </Member>
    <Member MemberName="GetProcessById">
      <MemberSignature Language="C#" Value="public static System.Diagnostics.Process GetProcessById (int processId, string machineName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Diagnostics.Process GetProcessById(int32 processId, string machineName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Process.GetProcessById(System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetProcessById (processId As Integer, machineName As String) As Process" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Diagnostics::Process ^ GetProcessById(int processId, System::String ^ machineName);" />
      <MemberSignature Language="F#" Value="static member GetProcessById : int * string -&gt; System.Diagnostics.Process" Usage="System.Diagnostics.Process.GetProcessById (processId, machineName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.MonoTODO("There is no support for retrieving process information from a remote machine")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.MonoTODO("There is no support for retrieving process information from a remote machine")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Diagnostics.Process</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="processId" Type="System.Int32" />
        <Parameter Name="machineName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="processId"><span data-ttu-id="7e18d-439">进程资源的系统唯一标识符。</span><span class="sxs-lookup"><span data-stu-id="7e18d-439">The system-unique identifier of a process resource.</span></span></param>
        <param name="machineName"><span data-ttu-id="7e18d-440">网络上计算机的名称。</span><span class="sxs-lookup"><span data-stu-id="7e18d-440">The name of a computer on the network.</span></span></param>
        <summary><span data-ttu-id="7e18d-441">返回新的 <see cref="T:System.Diagnostics.Process" /> 组件(给定进程标识符和网络中计算机的名称)。</span><span class="sxs-lookup"><span data-stu-id="7e18d-441">Returns a new <see cref="T:System.Diagnostics.Process" /> component, given a process identifier and the name of a computer on the network.</span></span></summary>
        <returns><span data-ttu-id="7e18d-442">与 <paramref name="processId" /> 参数标识的远程进程资源关联的 <see cref="T:System.Diagnostics.Process" /> 组件。</span><span class="sxs-lookup"><span data-stu-id="7e18d-442">A <see cref="T:System.Diagnostics.Process" /> component that is associated with a remote process resource identified by the <paramref name="processId" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use this method to create a new <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> component and associate it with a process resource on a remote computer on the network. The process resource must already exist on the specified computer, because <ph id="ph1">&lt;xref:System.Diagnostics.Process.GetProcessById%28System.Int32%2CSystem.String%29&gt;</ph> does not create a system resource, but rather associates a resource with an application-generated <ph id="ph2">&lt;xref:System.Diagnostics.Process&gt;</ph> component. A process <ph id="ph1">&lt;xref:System.Diagnostics.Process.Id%2A&gt;</ph> can be retrieved only for a process that is currently running on the computer. <span data-ttu-id="7e18d-446">进程终止后， <xref:System.Diagnostics.Process.GetProcessById%28System.Int32%2CSystem.String%29> 如果向其传递过期的标识符，将引发异常。</span><span class="sxs-lookup"><span data-stu-id="7e18d-446">After the process terminates, <xref:System.Diagnostics.Process.GetProcessById%28System.Int32%2CSystem.String%29> throws an exception if you pass it an expired identifier.</span></span>  
  
 <span data-ttu-id="7e18d-447">在任何特定计算机上，进程的标识符都是唯一的。</span><span class="sxs-lookup"><span data-stu-id="7e18d-447">On any particular computer, the identifier of a process is unique.</span></span> <span data-ttu-id="7e18d-448"><xref:System.Diagnostics.Process.GetProcessById%28System.Int32%2CSystem.String%29> 最多返回一个进程。</span><span class="sxs-lookup"><span data-stu-id="7e18d-448"><xref:System.Diagnostics.Process.GetProcessById%28System.Int32%2CSystem.String%29> returns one process at most.</span></span> <span data-ttu-id="7e18d-449">如果要获取运行特定应用程序的所有进程，请使用 <xref:System.Diagnostics.Process.GetProcessesByName%28System.String%29> 。</span><span class="sxs-lookup"><span data-stu-id="7e18d-449">If you want to get all the processes running a particular application, use <xref:System.Diagnostics.Process.GetProcessesByName%28System.String%29>.</span></span> <span data-ttu-id="7e18d-450">如果运行指定应用程序的计算机上存在多个进程，则 <xref:System.Diagnostics.Process.GetProcessesByName%28System.String%29> 返回包含所有关联进程的数组。</span><span class="sxs-lookup"><span data-stu-id="7e18d-450">If multiple processes exist on the computer running the specified application, <xref:System.Diagnostics.Process.GetProcessesByName%28System.String%29> returns an array containing all the associated processes.</span></span> <span data-ttu-id="7e18d-451">你可以依次查询每个进程的标识符。</span><span class="sxs-lookup"><span data-stu-id="7e18d-451">You can query each of these processes in turn for its identifier.</span></span> <span data-ttu-id="7e18d-452">可以在 `Processes` Windows 任务管理器的面板中查看进程标识符。</span><span class="sxs-lookup"><span data-stu-id="7e18d-452">The process identifier can be viewed in the `Processes` panel of the Windows Task Manager.</span></span> <span data-ttu-id="7e18d-453">`PID`列显示分配给进程的进程标识符。</span><span class="sxs-lookup"><span data-stu-id="7e18d-453">The `PID` column displays the process identifier that is assigned to a process.</span></span>  
  
 <span data-ttu-id="7e18d-454">如果不指定 `machineName` ，则使用本地计算机。</span><span class="sxs-lookup"><span data-stu-id="7e18d-454">If you do not specify a `machineName`, the local computer is used.</span></span> <span data-ttu-id="7e18d-455">或者，您可以通过将设置 `machineName` 为值 "." 或空字符串 ( "" ) 来指定本地计算机。</span><span class="sxs-lookup"><span data-stu-id="7e18d-455">Alternatively, you can specify the local computer by setting `machineName` to the value "." or to an empty string ("").</span></span>  
  
 <span data-ttu-id="7e18d-456">`processId`参数是一个 <xref:System.Int32> (32 位有符号整数) ，不过，基础 Windows API 使用 `DWORD` (适用于类似 api 的无符号32位整数) 。</span><span class="sxs-lookup"><span data-stu-id="7e18d-456">The `processId` parameter is an <xref:System.Int32> (a 32-bit signed integer), although the underlying Windows API uses a `DWORD` (an unsigned 32-bit integer) for similar APIs.</span></span> <span data-ttu-id="7e18d-457">这是出于历史原因。</span><span class="sxs-lookup"><span data-stu-id="7e18d-457">This is for historical reasons.</span></span>   
  
## Examples  
 <span data-ttu-id="7e18d-458">下面的示例检索当前进程的信息、在本地计算机上运行的进程、在本地计算机上运行的所有 Notepad 实例，以及本地计算机上的特定进程。</span><span class="sxs-lookup"><span data-stu-id="7e18d-458">The following example retrieves information of the current process, processes running on the local computer, all instances of Notepad running on the local computer, and a specific process on the local computer.</span></span> <span data-ttu-id="7e18d-459">然后，它将检索远程计算机上相同进程的信息。</span><span class="sxs-lookup"><span data-stu-id="7e18d-459">It then retrieves information for the same processes on a remote computer.</span></span>  
  
 [!code-cpp[Process.GetProcesses_noexception#1](~/samples/snippets/cpp/VS_Snippets_CLR/Process.GetProcesses_noexception/CPP/processstaticget.cpp#1)]
 [!code-csharp[Process.GetProcesses_noexception#1](~/samples/snippets/csharp/VS_Snippets_CLR/Process.GetProcesses_noexception/CS/processstaticget.cs#1)]
 [!code-vb[Process.GetProcesses_noexception#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Process.GetProcesses_noexception/VB/processstaticget.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="7e18d-460"><paramref name="processId" /> 参数指定的进程未运行。</span><span class="sxs-lookup"><span data-stu-id="7e18d-460">The process specified by the <paramref name="processId" /> parameter is not running.</span></span> <span data-ttu-id="7e18d-461">此标识符可能已过期。</span><span class="sxs-lookup"><span data-stu-id="7e18d-461">The identifier might be expired.</span></span>  
  
<span data-ttu-id="7e18d-462">- 或 -</span><span class="sxs-lookup"><span data-stu-id="7e18d-462">-or-</span></span> 
<span data-ttu-id="7e18d-463"><paramref name="machineName" /> 参数的语法无效。</span><span class="sxs-lookup"><span data-stu-id="7e18d-463">The <paramref name="machineName" /> parameter syntax is invalid.</span></span> <span data-ttu-id="7e18d-464">名称的长度可能为零 (0)。</span><span class="sxs-lookup"><span data-stu-id="7e18d-464">The name might have length zero (0).</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7e18d-465"><paramref name="machineName" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="7e18d-465">The <paramref name="machineName" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="7e18d-466">此对象未启动该进程。</span><span class="sxs-lookup"><span data-stu-id="7e18d-466">The process was not started by this object.</span></span></exception>
        <altmember cref="P:System.Diagnostics.Process.Id" />
        <altmember cref="P:System.Diagnostics.Process.MachineName" />
        <altmember cref="M:System.Diagnostics.Process.GetProcessesByName(System.String)" />
        <altmember cref="M:System.Diagnostics.Process.GetProcesses" />
        <altmember cref="M:System.Diagnostics.Process.GetCurrentProcess" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetProcesses">
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="7e18d-467">创建新的 <see cref="T:System.Diagnostics.Process" /> 组件的数组，并将它们与现有进程资源关联。</span><span class="sxs-lookup"><span data-stu-id="7e18d-467">Creates an array of new <see cref="T:System.Diagnostics.Process" /> components and associates them with existing process resources.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetProcesses">
      <MemberSignature Language="C#" Value="public static System.Diagnostics.Process[] GetProcesses ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Diagnostics.Process[] GetProcesses() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Process.GetProcesses" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetProcesses () As Process()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::Diagnostics::Process ^&gt; ^ GetProcesses();" />
      <MemberSignature Language="F#" Value="static member GetProcesses : unit -&gt; System.Diagnostics.Process[]" Usage="System.Diagnostics.Process.GetProcesses " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Diagnostics.Process[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7e18d-468">为本地计算机上的每个进程资源创建一个新的 <see cref="T:System.Diagnostics.Process" /> 组件。</span><span class="sxs-lookup"><span data-stu-id="7e18d-468">Creates a new <see cref="T:System.Diagnostics.Process" /> component for each process resource on the local computer.</span></span></summary>
        <returns><span data-ttu-id="7e18d-469">类型 <see cref="T:System.Diagnostics.Process" /> 的数组，表示本地计算机上运行的所有进程资源。</span><span class="sxs-lookup"><span data-stu-id="7e18d-469">An array of type <see cref="T:System.Diagnostics.Process" /> that represents all the process resources running on the local computer.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use this method to create an array of new <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> components and associate them with all the process resources on the local computer. The process resources must already exist on the local computer, because <ph id="ph1">&lt;xref:System.Diagnostics.Process.GetProcesses%2A&gt;</ph> does not create system resources but rather associates resources with application-generated <ph id="ph2">&lt;xref:System.Diagnostics.Process&gt;</ph> components. Because the operating system itself is running background processes, this array is never empty.  
  
 <span data-ttu-id="7e18d-473">如果您不想检索计算机上运行的所有进程，则可以使用或方法来限制它们的数量 <xref:System.Diagnostics.Process.GetProcessById%2A> <xref:System.Diagnostics.Process.GetProcessesByName%2A> 。</span><span class="sxs-lookup"><span data-stu-id="7e18d-473">If you do not want to retrieve all the processes running on the computer, you can restrict their number by using the <xref:System.Diagnostics.Process.GetProcessById%2A> or <xref:System.Diagnostics.Process.GetProcessesByName%2A> method.</span></span> <span data-ttu-id="7e18d-474"><xref:System.Diagnostics.Process.GetProcessById%2A><xref:System.Diagnostics.Process>通过传递给方法的进程标识符，创建与系统上标识的进程相关联的组件。</span><span class="sxs-lookup"><span data-stu-id="7e18d-474"><xref:System.Diagnostics.Process.GetProcessById%2A> creates a <xref:System.Diagnostics.Process> component that is associated with the process identified on the system by the process identifier that you pass to the method.</span></span> <span data-ttu-id="7e18d-475"><xref:System.Diagnostics.Process.GetProcessesByName%2A> 创建一组组件，这些 <xref:System.Diagnostics.Process> 组件的关联进程资源共享您传递给方法的可执行文件。</span><span class="sxs-lookup"><span data-stu-id="7e18d-475"><xref:System.Diagnostics.Process.GetProcessesByName%2A> creates an array of <xref:System.Diagnostics.Process> components whose associated process resources share the executable file you pass to the method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7e18d-476">在服务主机进程的同一个实例中，可以加载多个 Windows 服务 ( # A0) 。</span><span class="sxs-lookup"><span data-stu-id="7e18d-476">Multiple Windows services can be loaded within the same instance of the Service Host process (svchost.exe).</span></span> <span data-ttu-id="7e18d-477">GetProcesses 不标识这些单独的服务;为此，请参阅 <xref:System.ServiceProcess.ServiceController.GetServices%2A> 。</span><span class="sxs-lookup"><span data-stu-id="7e18d-477">GetProcesses does not identify those individual services; for that, see <xref:System.ServiceProcess.ServiceController.GetServices%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7e18d-478">下面的示例检索当前进程的信息、在本地计算机上运行的进程、在本地计算机上运行的所有 Notepad 实例，以及本地计算机上的特定进程。</span><span class="sxs-lookup"><span data-stu-id="7e18d-478">The following example retrieves information of the current process, processes running on the local computer, all instances of Notepad running on the local computer, and a specific process on the local computer.</span></span> <span data-ttu-id="7e18d-479">然后，它将检索远程计算机上相同进程的信息。</span><span class="sxs-lookup"><span data-stu-id="7e18d-479">It then retrieves information for the same processes on a remote computer.</span></span>  
  
 [!code-cpp[Process.GetProcesses_noexception#1](~/samples/snippets/cpp/VS_Snippets_CLR/Process.GetProcesses_noexception/CPP/processstaticget.cpp#1)]
 [!code-csharp[Process.GetProcesses_noexception#1](~/samples/snippets/csharp/VS_Snippets_CLR/Process.GetProcesses_noexception/CS/processstaticget.cs#1)]
 [!code-vb[Process.GetProcesses_noexception#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Process.GetProcesses_noexception/VB/processstaticget.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.Process.MachineName" />
        <altmember cref="M:System.Diagnostics.Process.GetProcessById(System.Int32,System.String)" />
        <altmember cref="M:System.Diagnostics.Process.GetProcessesByName(System.String)" />
        <altmember cref="M:System.Diagnostics.Process.GetCurrentProcess" />
      </Docs>
    </Member>
    <Member MemberName="GetProcesses">
      <MemberSignature Language="C#" Value="public static System.Diagnostics.Process[] GetProcesses (string machineName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Diagnostics.Process[] GetProcesses(string machineName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Process.GetProcesses(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetProcesses (machineName As String) As Process()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::Diagnostics::Process ^&gt; ^ GetProcesses(System::String ^ machineName);" />
      <MemberSignature Language="F#" Value="static member GetProcesses : string -&gt; System.Diagnostics.Process[]" Usage="System.Diagnostics.Process.GetProcesses machineName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.MonoTODO("There is no support for retrieving process information from a remote machine")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.MonoTODO("There is no support for retrieving process information from a remote machine")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Diagnostics.Process[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="machineName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="machineName"><span data-ttu-id="7e18d-480">从其中读取进程列表的计算机。</span><span class="sxs-lookup"><span data-stu-id="7e18d-480">The computer from which to read the list of processes.</span></span></param>
        <summary><span data-ttu-id="7e18d-481">为指定计算机上的每个进程资源创建一个新的 <see cref="T:System.Diagnostics.Process" /> 组件。</span><span class="sxs-lookup"><span data-stu-id="7e18d-481">Creates a new <see cref="T:System.Diagnostics.Process" /> component for each process resource on the specified computer.</span></span></summary>
        <returns><span data-ttu-id="7e18d-482">类型 <see cref="T:System.Diagnostics.Process" /> 的数组，表示指定计算机上运行的所有进程资源。</span><span class="sxs-lookup"><span data-stu-id="7e18d-482">An array of type <see cref="T:System.Diagnostics.Process" /> that represents all the process resources running on the specified computer.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use this method to create an array of new <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> components and associate them with all the process resources on the specified (usually remote) computer. The process resources must already exist on the local computer, because <ph id="ph1">&lt;xref:System.Diagnostics.Process.GetProcesses%2A&gt;</ph> does not create system resources but rather associates resources with application-generated <ph id="ph2">&lt;xref:System.Diagnostics.Process&gt;</ph> components. Because the operating system itself is running background processes, this array is never empty.  
  
 <span data-ttu-id="7e18d-486">如果您不想检索计算机上运行的所有进程，则可以使用或方法来限制它们的数量 <xref:System.Diagnostics.Process.GetProcessById%2A> <xref:System.Diagnostics.Process.GetProcessesByName%2A> 。</span><span class="sxs-lookup"><span data-stu-id="7e18d-486">If you do not want to retrieve all the processes running on the computer, you can restrict their number by using the <xref:System.Diagnostics.Process.GetProcessById%2A> or <xref:System.Diagnostics.Process.GetProcessesByName%2A> method.</span></span> <span data-ttu-id="7e18d-487"><xref:System.Diagnostics.Process.GetProcessById%2A><xref:System.Diagnostics.Process>通过传递给方法的进程标识符，创建与系统上标识的进程相关联的组件。</span><span class="sxs-lookup"><span data-stu-id="7e18d-487"><xref:System.Diagnostics.Process.GetProcessById%2A> creates a <xref:System.Diagnostics.Process> component that is associated with the process identified on the system by the process identifier that you pass to the method.</span></span> <span data-ttu-id="7e18d-488"><xref:System.Diagnostics.Process.GetProcessesByName%2A> 创建一组组件，这些 <xref:System.Diagnostics.Process> 组件的关联进程资源共享您传递给方法的可执行文件。</span><span class="sxs-lookup"><span data-stu-id="7e18d-488"><xref:System.Diagnostics.Process.GetProcessesByName%2A> creates an array of <xref:System.Diagnostics.Process> components whose associated process resources share the executable file you pass to the method.</span></span>  
  
 <span data-ttu-id="7e18d-489">此方法的重载 <xref:System.Diagnostics.Process.GetProcesses%2A> 通常用于检索网络上远程计算机上运行的进程资源的列表，但你可以通过传递 "." 来指定本地计算机。</span><span class="sxs-lookup"><span data-stu-id="7e18d-489">This overload of the <xref:System.Diagnostics.Process.GetProcesses%2A> method is generally used to retrieve the list of process resources running on a remote computer on the network, but you can specify the local computer by passing ".".</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7e18d-490">在服务主机进程的同一个实例中，可以加载多个 Windows 服务 ( # A0) 。</span><span class="sxs-lookup"><span data-stu-id="7e18d-490">Multiple Windows services can be loaded within the same instance of the Service Host process (svchost.exe).</span></span> <span data-ttu-id="7e18d-491">GetProcesses 不标识这些单独的服务;为此，请参阅 <xref:System.ServiceProcess.ServiceController.GetServices%2A> 。</span><span class="sxs-lookup"><span data-stu-id="7e18d-491">GetProcesses does not identify those individual services; for that, see <xref:System.ServiceProcess.ServiceController.GetServices%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7e18d-492">下面的示例检索当前进程的信息、在本地计算机上运行的进程、在本地计算机上运行的所有 Notepad 实例，以及本地计算机上的特定进程。</span><span class="sxs-lookup"><span data-stu-id="7e18d-492">The following example retrieves information of the current process, processes running on the local computer, all instances of Notepad running on the local computer, and a specific process on the local computer.</span></span> <span data-ttu-id="7e18d-493">然后，它将检索远程计算机上相同进程的信息。</span><span class="sxs-lookup"><span data-stu-id="7e18d-493">It then retrieves information for the same processes on a remote computer.</span></span>  
  
 [!code-cpp[Process.GetProcesses_noexception#1](~/samples/snippets/cpp/VS_Snippets_CLR/Process.GetProcesses_noexception/CPP/processstaticget.cpp#1)]
 [!code-csharp[Process.GetProcesses_noexception#1](~/samples/snippets/csharp/VS_Snippets_CLR/Process.GetProcesses_noexception/CS/processstaticget.cs#1)]
 [!code-vb[Process.GetProcesses_noexception#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Process.GetProcesses_noexception/VB/processstaticget.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="7e18d-494"><paramref name="machineName" /> 参数的语法无效。</span><span class="sxs-lookup"><span data-stu-id="7e18d-494">The <paramref name="machineName" /> parameter syntax is invalid.</span></span> <span data-ttu-id="7e18d-495">其长度可能为零 (0)。</span><span class="sxs-lookup"><span data-stu-id="7e18d-495">It might have length zero (0).</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7e18d-496"><paramref name="machineName" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="7e18d-496">The <paramref name="machineName" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="7e18d-497">操作系统平台不支持在远程计算机上进行此操作。</span><span class="sxs-lookup"><span data-stu-id="7e18d-497">The operating system platform does not support this operation on remote computers.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="7e18d-498">访问用于获取进程信息的性能计数器 API 时遇到问题。</span><span class="sxs-lookup"><span data-stu-id="7e18d-498">There are problems accessing the performance counter APIs used to get process information.</span></span> <span data-ttu-id="7e18d-499">此异常特定于 Windows NT、Windows 2000 和 Windows XP。</span><span class="sxs-lookup"><span data-stu-id="7e18d-499">This exception is specific to Windows NT, Windows 2000, and Windows XP.</span></span></exception>
        <exception cref="T:System.ComponentModel.Win32Exception"><span data-ttu-id="7e18d-500">访问基础系统 API 时出现问题。</span><span class="sxs-lookup"><span data-stu-id="7e18d-500">A problem occurred accessing an underlying system API.</span></span></exception>
        <altmember cref="P:System.Diagnostics.Process.MachineName" />
        <altmember cref="M:System.Diagnostics.Process.GetProcessById(System.Int32,System.String)" />
        <altmember cref="M:System.Diagnostics.Process.GetProcessesByName(System.String)" />
        <altmember cref="M:System.Diagnostics.Process.GetCurrentProcess" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetProcessesByName">
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="7e18d-501">创建新的 <see cref="T:System.Diagnostics.Process" /> 组件的数组，并将它们与共享指定的进程名称的所有现有进程资源关联。</span><span class="sxs-lookup"><span data-stu-id="7e18d-501">Creates an array of new <see cref="T:System.Diagnostics.Process" /> components and associates them with the existing process resources that all share the specified process name.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetProcessesByName">
      <MemberSignature Language="C#" Value="public static System.Diagnostics.Process[] GetProcessesByName (string? processName);" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Diagnostics.Process[] GetProcessesByName(string processName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Process.GetProcessesByName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetProcessesByName (processName As String) As Process()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::Diagnostics::Process ^&gt; ^ GetProcessesByName(System::String ^ processName);" />
      <MemberSignature Language="F#" Value="static member GetProcessesByName : string -&gt; System.Diagnostics.Process[]" Usage="System.Diagnostics.Process.GetProcessesByName processName" />
      <MemberSignature Language="C#" Value="public static System.Diagnostics.Process[] GetProcessesByName (string processName);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Diagnostics.Process[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="processName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="processName"><span data-ttu-id="7e18d-502">该进程的友好名称。</span><span class="sxs-lookup"><span data-stu-id="7e18d-502">The friendly name of the process.</span></span></param>
        <summary><span data-ttu-id="7e18d-503">创建新的 <see cref="T:System.Diagnostics.Process" /> 组件的数组，并将它们与本地计算机上共享指定的进程名称的所有进程资源关联。</span><span class="sxs-lookup"><span data-stu-id="7e18d-503">Creates an array of new <see cref="T:System.Diagnostics.Process" /> components and associates them with all the process resources on the local computer that share the specified process name.</span></span></summary>
        <returns><span data-ttu-id="7e18d-504">类型 <see cref="T:System.Diagnostics.Process" /> 的数组，表示运行指定应用程序或文件的进程资源。</span><span class="sxs-lookup"><span data-stu-id="7e18d-504">An array of type <see cref="T:System.Diagnostics.Process" /> that represents the process resources running the specified application or file.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use this method to create an array of new <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> components and associate them with all the process resources that are running the same executable file on the local computer. The process resources must already exist on the computer, because <ph id="ph1">&lt;xref:System.Diagnostics.Process.GetProcessesByName%2A&gt;</ph> does not create system resources but rather associates them with application-generated <ph id="ph2">&lt;xref:System.Diagnostics.Process&gt;</ph> components. A <ph id="ph1">`processName`</ph> can be specified for an executable file that is not currently running on the local computer, so the array the method returns can be empty.  
  
 <span data-ttu-id="7e18d-508">进程名称是进程（例如 Outlook）的友好名称，该名称不包括 .exe 扩展名或路径。</span><span class="sxs-lookup"><span data-stu-id="7e18d-508">The process name is a friendly name for the process, such as Outlook, that does not include the .exe extension or the path.</span></span> <span data-ttu-id="7e18d-509"><xref:System.Diagnostics.Process.GetProcessesByName%2A> 对于获取和操作与同一可执行文件关联的所有进程很有用。</span><span class="sxs-lookup"><span data-stu-id="7e18d-509"><xref:System.Diagnostics.Process.GetProcessesByName%2A> is helpful for getting and manipulating all the processes that are associated with the same executable file.</span></span> <span data-ttu-id="7e18d-510">例如，可以将可执行文件名称作为 `processName` 参数进行传递，以便关闭该可执行文件的所有正在运行的实例。</span><span class="sxs-lookup"><span data-stu-id="7e18d-510">For example, you can pass an executable file name as the `processName` parameter, in order to shut down all the running instances of that executable file.</span></span>  
  
 <span data-ttu-id="7e18d-511">尽管进程 <xref:System.Diagnostics.Process.Id%2A> 对于系统上的单个进程资源是唯一的，但本地计算机上的多个进程可以运行参数指定的应用程序 `processName` 。</span><span class="sxs-lookup"><span data-stu-id="7e18d-511">Although a process <xref:System.Diagnostics.Process.Id%2A> is unique to a single process resource on the system, multiple processes on the local computer can be running the application specified by the `processName` parameter.</span></span> <span data-ttu-id="7e18d-512">因此， <xref:System.Diagnostics.Process.GetProcessById%2A> 最多返回一个进程，但 <xref:System.Diagnostics.Process.GetProcessesByName%2A> 返回包含所有关联进程的数组。</span><span class="sxs-lookup"><span data-stu-id="7e18d-512">Therefore, <xref:System.Diagnostics.Process.GetProcessById%2A> returns one process at most, but <xref:System.Diagnostics.Process.GetProcessesByName%2A> returns an array containing all the associated processes.</span></span> <span data-ttu-id="7e18d-513">如果需要使用标准 API 调用来操作进程，可以依次查询每个进程的标识符。</span><span class="sxs-lookup"><span data-stu-id="7e18d-513">If you need to manipulate the process using standard API calls, you can query each of these processes in turn for its identifier.</span></span> <span data-ttu-id="7e18d-514">你不能只通过进程名称访问进程资源，但一旦检索到 <xref:System.Diagnostics.Process> 与进程资源关联的组件的数组，就可以启动、终止和其他操作系统资源。</span><span class="sxs-lookup"><span data-stu-id="7e18d-514">You cannot access process resources through the process name alone but, once you have retrieved an array of <xref:System.Diagnostics.Process> components that have been associated with the process resources, you can start, terminate, and otherwise manipulate the system resources.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7e18d-515">下面的示例检索当前进程的信息、在本地计算机上运行的进程、在本地计算机上运行的所有 Notepad 实例，以及本地计算机上的特定进程。</span><span class="sxs-lookup"><span data-stu-id="7e18d-515">The following example retrieves information of the current process, processes running on the local computer, all instances of Notepad running on the local computer, and a specific process on the local computer.</span></span> <span data-ttu-id="7e18d-516">然后，它将检索远程计算机上相同进程的信息。</span><span class="sxs-lookup"><span data-stu-id="7e18d-516">It then retrieves information for the same processes on a remote computer.</span></span>  
  
 [!code-cpp[Process.GetProcesses_noexception#1](~/samples/snippets/cpp/VS_Snippets_CLR/Process.GetProcesses_noexception/CPP/processstaticget.cpp#1)]
 [!code-csharp[Process.GetProcesses_noexception#1](~/samples/snippets/csharp/VS_Snippets_CLR/Process.GetProcesses_noexception/CS/processstaticget.cs#1)]
 [!code-vb[Process.GetProcesses_noexception#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Process.GetProcesses_noexception/VB/processstaticget.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="7e18d-517">访问用于获取进程信息的性能计数器 API 时遇到问题。</span><span class="sxs-lookup"><span data-stu-id="7e18d-517">There are problems accessing the performance counter APIs used to get process information.</span></span> <span data-ttu-id="7e18d-518">此异常特定于 Windows NT、Windows 2000 和 Windows XP。</span><span class="sxs-lookup"><span data-stu-id="7e18d-518">This exception is specific to Windows NT, Windows 2000, and Windows XP.</span></span></exception>
        <altmember cref="P:System.Diagnostics.Process.ProcessName" />
        <altmember cref="M:System.Diagnostics.Process.GetProcessById(System.Int32,System.String)" />
        <altmember cref="M:System.Diagnostics.Process.GetProcesses" />
        <altmember cref="M:System.Diagnostics.Process.GetCurrentProcess" />
      </Docs>
    </Member>
    <Member MemberName="GetProcessesByName">
      <MemberSignature Language="C#" Value="public static System.Diagnostics.Process[] GetProcessesByName (string? processName, string machineName);" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Diagnostics.Process[] GetProcessesByName(string processName, string machineName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Process.GetProcessesByName(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetProcessesByName (processName As String, machineName As String) As Process()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::Diagnostics::Process ^&gt; ^ GetProcessesByName(System::String ^ processName, System::String ^ machineName);" />
      <MemberSignature Language="F#" Value="static member GetProcessesByName : string * string -&gt; System.Diagnostics.Process[]" Usage="System.Diagnostics.Process.GetProcessesByName (processName, machineName)" />
      <MemberSignature Language="C#" Value="public static System.Diagnostics.Process[] GetProcessesByName (string processName, string machineName);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.MonoTODO]</AttributeName>
          <AttributeName Language="F#">[&lt;System.MonoTODO&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Diagnostics.Process[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="processName" Type="System.String" />
        <Parameter Name="machineName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="processName"><span data-ttu-id="7e18d-519">该进程的友好名称。</span><span class="sxs-lookup"><span data-stu-id="7e18d-519">The friendly name of the process.</span></span></param>
        <param name="machineName"><span data-ttu-id="7e18d-520">网络上计算机的名称。</span><span class="sxs-lookup"><span data-stu-id="7e18d-520">The name of a computer on the network.</span></span></param>
        <summary><span data-ttu-id="7e18d-521">创建新的 <see cref="T:System.Diagnostics.Process" /> 组件的数组，并将它们与远程计算机上共享指定进程名称的所有进程资源关联。</span><span class="sxs-lookup"><span data-stu-id="7e18d-521">Creates an array of new <see cref="T:System.Diagnostics.Process" /> components and associates them with all the process resources on a remote computer that share the specified process name.</span></span></summary>
        <returns><span data-ttu-id="7e18d-522">类型 <see cref="T:System.Diagnostics.Process" /> 的数组，表示运行指定应用程序或文件的进程资源。</span><span class="sxs-lookup"><span data-stu-id="7e18d-522">An array of type <see cref="T:System.Diagnostics.Process" /> that represents the process resources running the specified application or file.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use this method to create an array of new <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> components and associate them with all the process resources that are running the same executable file on the specified computer. The process resources must already exist on the computer, because <ph id="ph1">&lt;xref:System.Diagnostics.Process.GetProcessesByName%2A&gt;</ph> does not create system resources but rather associates them with application-generated <ph id="ph2">&lt;xref:System.Diagnostics.Process&gt;</ph> components. A <ph id="ph1">`processName`</ph> can be specified for an executable file that is not currently running on the local computer, so the array the method returns can be empty.  
  
 <span data-ttu-id="7e18d-526">进程名称是进程（例如 Outlook）的友好名称，该名称不包括 .exe 扩展名或路径。</span><span class="sxs-lookup"><span data-stu-id="7e18d-526">The process name is a friendly name for the process, such as Outlook, that does not include the .exe extension or the path.</span></span> <span data-ttu-id="7e18d-527"><xref:System.Diagnostics.Process.GetProcessesByName%2A> 对于获取和操作与同一可执行文件关联的所有进程很有用。</span><span class="sxs-lookup"><span data-stu-id="7e18d-527"><xref:System.Diagnostics.Process.GetProcessesByName%2A> is helpful for getting and manipulating all the processes that are associated with the same executable file.</span></span> <span data-ttu-id="7e18d-528">例如，可以将可执行文件名称作为 `processName` 参数进行传递，以便关闭该可执行文件的所有正在运行的实例。</span><span class="sxs-lookup"><span data-stu-id="7e18d-528">For example, you can pass an executable file name as the `processName` parameter, in order to shut down all the running instances of that executable file.</span></span>  
  
 <span data-ttu-id="7e18d-529">尽管进程 <xref:System.Diagnostics.Process.Id%2A> 对于系统上的单个进程资源是唯一的，但本地计算机上的多个进程可以运行参数指定的应用程序 `processName` 。</span><span class="sxs-lookup"><span data-stu-id="7e18d-529">Although a process <xref:System.Diagnostics.Process.Id%2A> is unique to a single process resource on the system, multiple processes on the local computer can be running the application specified by the `processName` parameter.</span></span> <span data-ttu-id="7e18d-530">因此， <xref:System.Diagnostics.Process.GetProcessById%2A> 最多返回一个进程，但 <xref:System.Diagnostics.Process.GetProcessesByName%2A> 返回包含所有关联进程的数组。</span><span class="sxs-lookup"><span data-stu-id="7e18d-530">Therefore, <xref:System.Diagnostics.Process.GetProcessById%2A> returns one process at most, but <xref:System.Diagnostics.Process.GetProcessesByName%2A> returns an array containing all the associated processes.</span></span> <span data-ttu-id="7e18d-531">如果需要使用标准 API 调用来操作进程，可以依次查询每个进程的标识符。</span><span class="sxs-lookup"><span data-stu-id="7e18d-531">If you need to manipulate the process using standard API calls, you can query each of these processes in turn for its identifier.</span></span> <span data-ttu-id="7e18d-532">你不能只通过进程名称访问进程资源，但一旦检索到 <xref:System.Diagnostics.Process> 与进程资源关联的组件的数组，就可以启动、终止和其他操作系统资源。</span><span class="sxs-lookup"><span data-stu-id="7e18d-532">You cannot access process resources through the process name alone but, once you have retrieved an array of <xref:System.Diagnostics.Process> components that have been associated with the process resources, you can start, terminate, and otherwise manipulate the system resources.</span></span>  
  
 <span data-ttu-id="7e18d-533">您可以使用此重载获取本地计算机以及远程计算机上的进程。</span><span class="sxs-lookup"><span data-stu-id="7e18d-533">You can use this overload to get processes on the local computer as well as on a remote computer.</span></span> <span data-ttu-id="7e18d-534">使用 "." 指定本地计算机。</span><span class="sxs-lookup"><span data-stu-id="7e18d-534">Use "." to specify the local computer.</span></span> <span data-ttu-id="7e18d-535">默认情况下，存在使用本地计算机的另一个重载。</span><span class="sxs-lookup"><span data-stu-id="7e18d-535">Another overload exists that uses the local computer by default.</span></span>  
  
 <span data-ttu-id="7e18d-536">您可以访问远程计算机上的进程，以便查看有关进程的信息（例如统计信息）。</span><span class="sxs-lookup"><span data-stu-id="7e18d-536">You can access processes on remote computers only to view information, such as statistics, about the processes.</span></span> <span data-ttu-id="7e18d-537">您无法关闭、终止使用) 的 (<xref:System.Diagnostics.Process.Kill%2A> ，或在远程计算机上启动进程。</span><span class="sxs-lookup"><span data-stu-id="7e18d-537">You cannot close, terminate (using <xref:System.Diagnostics.Process.Kill%2A>), or start processes on remote computers.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7e18d-538">下面的示例检索当前进程的信息、在本地计算机上运行的进程、在本地计算机上运行的所有 Notepad 实例，以及本地计算机上的特定进程。</span><span class="sxs-lookup"><span data-stu-id="7e18d-538">The following example retrieves information of the current process, processes running on the local computer, all instances of Notepad running on the local computer, and a specific process on the local computer.</span></span> <span data-ttu-id="7e18d-539">然后，它将检索远程计算机上相同进程的信息。</span><span class="sxs-lookup"><span data-stu-id="7e18d-539">It then retrieves information for the same processes on a remote computer.</span></span>  
  
 [!code-cpp[Process.GetProcesses_noexception#1](~/samples/snippets/cpp/VS_Snippets_CLR/Process.GetProcesses_noexception/CPP/processstaticget.cpp#1)]
 [!code-csharp[Process.GetProcesses_noexception#1](~/samples/snippets/csharp/VS_Snippets_CLR/Process.GetProcesses_noexception/CS/processstaticget.cs#1)]
 [!code-vb[Process.GetProcesses_noexception#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Process.GetProcesses_noexception/VB/processstaticget.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="7e18d-540"><paramref name="machineName" /> 参数的语法无效。</span><span class="sxs-lookup"><span data-stu-id="7e18d-540">The <paramref name="machineName" /> parameter syntax is invalid.</span></span> <span data-ttu-id="7e18d-541">其长度可能为零 (0)。</span><span class="sxs-lookup"><span data-stu-id="7e18d-541">It might have length zero (0).</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7e18d-542"><paramref name="machineName" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="7e18d-542">The <paramref name="machineName" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="7e18d-543">操作系统平台不支持在远程计算机上进行此操作。</span><span class="sxs-lookup"><span data-stu-id="7e18d-543">The operating system platform does not support this operation on remote computers.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="7e18d-544">尝试连接到 <paramref name="machineName" /> 失败。</span><span class="sxs-lookup"><span data-stu-id="7e18d-544">The attempt to connect to <paramref name="machineName" /> has failed.</span></span>

<span data-ttu-id="7e18d-545">- 或 -</span><span class="sxs-lookup"><span data-stu-id="7e18d-545">-or-</span></span> 
<span data-ttu-id="7e18d-546">访问用于获取进程信息的性能计数器 API 时遇到问题。</span><span class="sxs-lookup"><span data-stu-id="7e18d-546">There are problems accessing the performance counter APIs used to get process information.</span></span> <span data-ttu-id="7e18d-547">此异常特定于 Windows NT、Windows 2000 和 Windows XP。</span><span class="sxs-lookup"><span data-stu-id="7e18d-547">This exception is specific to Windows NT, Windows 2000, and Windows XP.</span></span></exception>
        <exception cref="T:System.ComponentModel.Win32Exception"><span data-ttu-id="7e18d-548">访问基础系统 API 时出现问题。</span><span class="sxs-lookup"><span data-stu-id="7e18d-548">A problem occurred accessing an underlying system API.</span></span></exception>
        <altmember cref="P:System.Diagnostics.Process.ProcessName" />
        <altmember cref="P:System.Diagnostics.Process.MachineName" />
        <altmember cref="M:System.Diagnostics.Process.GetProcessById(System.Int32,System.String)" />
        <altmember cref="M:System.Diagnostics.Process.GetProcesses" />
        <altmember cref="M:System.Diagnostics.Process.GetCurrentProcess" />
      </Docs>
    </Member>
    <Member MemberName="Handle">
      <MemberSignature Language="C#" Value="public IntPtr Handle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int Handle" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.Handle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Handle As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IntPtr Handle { IntPtr get(); };" />
      <MemberSignature Language="F#" Value="member this.Handle : nativeint" Usage="System.Diagnostics.Process.Handle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.Diagnostics.MonitoringDescription("ProcessHandle")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.MonitoringDescription("ProcessHandle")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Diagnostics.MonitoringDescription("Returns the native handle for this process.   The handle is only available if the process was started using this component.")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.MonitoringDescription("Returns the native handle for this process.   The handle is only available if the process was started using this component.")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7e18d-549">获取关联进程的本机句柄。</span><span class="sxs-lookup"><span data-stu-id="7e18d-549">Gets the native handle of the associated process.</span></span></summary>
        <value><span data-ttu-id="7e18d-550">进程启动时操作系统向关联进程分配的句柄。</span><span class="sxs-lookup"><span data-stu-id="7e18d-550">The handle that the operating system assigned to the associated process when the process was started.</span></span> <span data-ttu-id="7e18d-551">系统使用此句柄来跟踪进程特性。</span><span class="sxs-lookup"><span data-stu-id="7e18d-551">The system uses this handle to keep track of process attributes.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 An application can obtain a handle to a process that can be used as a parameter to many process-information and control functions. You can use this handle to initialize a <ph id="ph1">&lt;xref:System.Threading.WaitHandle&gt;</ph> or to call native methods with platform invoke.  
  
 This process handle is private to an application--in other words, process handles cannot be shared. <span data-ttu-id="7e18d-555">进程还具有一个进程 <xref:System.Diagnostics.Process.Id%2A> ，该进程与不同 <xref:System.Diagnostics.Process.Handle%2A> ，它是唯一的，因此在整个系统中有效。</span><span class="sxs-lookup"><span data-stu-id="7e18d-555">A process also has a process <xref:System.Diagnostics.Process.Id%2A> which, unlike the <xref:System.Diagnostics.Process.Handle%2A>, is unique and, therefore, valid throughout the system.</span></span>  
  
 <span data-ttu-id="7e18d-556">只有通过调用来启动的进程才会 <xref:System.Diagnostics.Process.Start%2A> 设置 <xref:System.Diagnostics.Process.Handle%2A> 相应实例的属性 <xref:System.Diagnostics.Process> 。</span><span class="sxs-lookup"><span data-stu-id="7e18d-556">Only processes started through a call to <xref:System.Diagnostics.Process.Start%2A> set the <xref:System.Diagnostics.Process.Handle%2A> property of the corresponding <xref:System.Diagnostics.Process> instances.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="7e18d-557">该进程尚未启动或已退出。</span><span class="sxs-lookup"><span data-stu-id="7e18d-557">The process has not been started or has exited.</span></span> <span data-ttu-id="7e18d-558">不能读取 <see cref="P:System.Diagnostics.Process.Handle" /> 属性，因为没有与此 <see cref="T:System.Diagnostics.Process" /> 实例关联的进程。</span><span class="sxs-lookup"><span data-stu-id="7e18d-558">The <see cref="P:System.Diagnostics.Process.Handle" /> property cannot be read because there is no process associated with this <see cref="T:System.Diagnostics.Process" /> instance.</span></span>  
  
<span data-ttu-id="7e18d-559">- 或 -</span><span class="sxs-lookup"><span data-stu-id="7e18d-559">-or-</span></span> 
<span data-ttu-id="7e18d-560"><see cref="T:System.Diagnostics.Process" /> 实例已附加到正在运行的进程，但你没有获取具有完全访问权限的句柄所需的权限。</span><span class="sxs-lookup"><span data-stu-id="7e18d-560">The <see cref="T:System.Diagnostics.Process" /> instance has been attached to a running process but you do not have the necessary permissions to get a handle with full access rights.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="7e18d-561">你正尝试访问在远程计算机上运行的进程的 <see cref="P:System.Diagnostics.Process.Handle" /> 属性。</span><span class="sxs-lookup"><span data-stu-id="7e18d-561">You are trying to access the <see cref="P:System.Diagnostics.Process.Handle" /> property for a process that is running on a remote computer.</span></span> <span data-ttu-id="7e18d-562">此属性仅可用于本地计算机上运行的进程。</span><span class="sxs-lookup"><span data-stu-id="7e18d-562">This property is available only for processes that are running on the local computer.</span></span></exception>
        <altmember cref="P:System.Diagnostics.Process.Id" />
        <altmember cref="P:System.Diagnostics.Process.ExitCode" />
        <altmember cref="P:System.Diagnostics.Process.ExitTime" />
        <altmember cref="P:System.Diagnostics.Process.HandleCount" />
        <altmember cref="M:System.Diagnostics.Process.Start" />
        <altmember cref="M:System.Diagnostics.Process.Refresh" />
      </Docs>
    </Member>
    <Member MemberName="HandleCount">
      <MemberSignature Language="C#" Value="public int HandleCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 HandleCount" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.HandleCount" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HandleCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int HandleCount { int get(); };" />
      <MemberSignature Language="F#" Value="member this.HandleCount : int" Usage="System.Diagnostics.Process.HandleCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.Diagnostics.MonitoringDescription("ProcessHandleCount")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.MonitoringDescription("ProcessHandleCount")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Diagnostics.MonitoringDescription("Handles for this process.")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.MonitoringDescription("Handles for this process.")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.MonoTODO]</AttributeName>
          <AttributeName Language="F#">[&lt;System.MonoTODO&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7e18d-563">获取由进程打开的句柄数。</span><span class="sxs-lookup"><span data-stu-id="7e18d-563">Gets the number of handles opened by the process.</span></span></summary>
        <value><span data-ttu-id="7e18d-564">进程打开的操作系统句柄数。</span><span class="sxs-lookup"><span data-stu-id="7e18d-564">The number of operating system handles the process has opened.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Handles provide a way for a process to refer to objects. A process can obtain handles to files, resources, message queues, and many other operating system objects. The operating system reclaims the memory associated with the process only when the handle count is zero.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.Process.Handle" />
        <altmember cref="M:System.Diagnostics.Process.Start" />
        <altmember cref="M:System.Diagnostics.Process.CloseMainWindow" />
        <altmember cref="M:System.Diagnostics.Process.Kill" />
      </Docs>
    </Member>
    <Member MemberName="HasExited">
      <MemberSignature Language="C#" Value="public bool HasExited { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasExited" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.HasExited" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasExited As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasExited { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasExited : bool" Usage="System.Diagnostics.Process.HasExited" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.Diagnostics.MonitoringDescription("ProcessTerminated")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.MonitoringDescription("ProcessTerminated")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Diagnostics.MonitoringDescription("Indicates if the associated process has been terminated.")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.MonitoringDescription("Indicates if the associated process has been terminated.")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7e18d-568">获取指示关联进程是否已终止的值。</span><span class="sxs-lookup"><span data-stu-id="7e18d-568">Gets a value indicating whether the associated process has been terminated.</span></span></summary>
        <value><span data-ttu-id="7e18d-569">如果 <see cref="T:System.Diagnostics.Process" /> 组件引用的操作系统进程已终止，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="7e18d-569"><see langword="true" /> if the operating system process referenced by the <see cref="T:System.Diagnostics.Process" /> component has terminated; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A value of <ph id="ph1">`true`</ph> for <ph id="ph2">&lt;xref:System.Diagnostics.Process.HasExited%2A&gt;</ph> indicates that the associated process has terminated, either normally or abnormally. You can request or force the associated process to exit by calling <ph id="ph1">&lt;xref:System.Diagnostics.Process.CloseMainWindow%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Diagnostics.Process.Kill%2A&gt;</ph>. If a handle is open to the process, the operating system releases the process memory when the process has exited, but retains administrative information about the process, such as the handle, exit code, and exit time. <span data-ttu-id="7e18d-573">若要获取此信息，你可以使用 <xref:System.Diagnostics.Process.ExitCode%2A> 和 <xref:System.Diagnostics.Process.ExitTime%2A> 属性。</span><span class="sxs-lookup"><span data-stu-id="7e18d-573">To get this information, you can use the <xref:System.Diagnostics.Process.ExitCode%2A> and <xref:System.Diagnostics.Process.ExitTime%2A> properties.</span></span> <span data-ttu-id="7e18d-574">对于此组件启动的进程，会自动填充这些属性。</span><span class="sxs-lookup"><span data-stu-id="7e18d-574">These properties are populated automatically for processes that were started by this component.</span></span> <span data-ttu-id="7e18d-575">当所有 <xref:System.Diagnostics.Process> 与系统进程关联的组件都被销毁并且不将更多的句柄保留到已退出的进程时，管理信息将被释放。</span><span class="sxs-lookup"><span data-stu-id="7e18d-575">The administrative information is released when all the <xref:System.Diagnostics.Process> components that are associated with the system process are destroyed and hold no more handles to the exited process.</span></span>  
  
 <span data-ttu-id="7e18d-576">进程可以独立于你的代码而终止。</span><span class="sxs-lookup"><span data-stu-id="7e18d-576">A process can terminate independently of your code.</span></span> <span data-ttu-id="7e18d-577">如果使用此组件启动了进程，则系统会自动更新的值 <xref:System.Diagnostics.Process.HasExited%2A> ，即使关联的进程独立退出也是如此。</span><span class="sxs-lookup"><span data-stu-id="7e18d-577">If you started the process using this component, the system updates the value of <xref:System.Diagnostics.Process.HasExited%2A> automatically, even if the associated process exits independently.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7e18d-578">将标准输出重定向到异步事件处理程序后，当此属性返回时，输出处理可能不会完成 `true` 。</span><span class="sxs-lookup"><span data-stu-id="7e18d-578">When standard output has been redirected to asynchronous event handlers, it is possible that output processing will not have completed when this property returns `true`.</span></span> <span data-ttu-id="7e18d-579">若要确保异步事件处理已完成，请 <xref:System.Diagnostics.Process.WaitForExit> 在检查前调用不带任何参数的重载 <xref:System.Diagnostics.Process.HasExited%2A> 。</span><span class="sxs-lookup"><span data-stu-id="7e18d-579">To ensure that asynchronous event handling has been completed, call the <xref:System.Diagnostics.Process.WaitForExit> overload that takes no parameter before checking <xref:System.Diagnostics.Process.HasExited%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7e18d-580">下面的示例启动记事本的实例。</span><span class="sxs-lookup"><span data-stu-id="7e18d-580">The following example starts an instance of Notepad.</span></span> <span data-ttu-id="7e18d-581">然后，它以2秒的间隔检索关联进程的物理内存使用率，最大值为10秒。</span><span class="sxs-lookup"><span data-stu-id="7e18d-581">It then retrieves the physical memory usage of the associated process at 2 second intervals for a maximum of 10 seconds.</span></span> <span data-ttu-id="7e18d-582">该示例检测进程是否在10秒后退出。</span><span class="sxs-lookup"><span data-stu-id="7e18d-582">The example detects whether the process exits before 10 seconds have elapsed.</span></span> <span data-ttu-id="7e18d-583">如果10秒后仍在运行，则此示例将关闭进程。</span><span class="sxs-lookup"><span data-stu-id="7e18d-583">The example closes the process if it is still running after 10 seconds.</span></span>  
  
 [!code-cpp[process_refresh#1](~/samples/snippets/cpp/VS_Snippets_CLR/process_refresh/CPP/process_refresh.cpp#1)]
 [!code-csharp[process_refresh#1](~/samples/snippets/csharp/VS_Snippets_CLR/process_refresh/CS/process_refresh.cs#1)]
 [!code-vb[process_refresh#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/process_refresh/VB/process_refresh.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="7e18d-584">没有与此对象关联的进程。</span><span class="sxs-lookup"><span data-stu-id="7e18d-584">There is no process associated with the object.</span></span></exception>
        <exception cref="T:System.ComponentModel.Win32Exception"><span data-ttu-id="7e18d-585">无法检索该进程的退出代码。</span><span class="sxs-lookup"><span data-stu-id="7e18d-585">The exit code for the process could not be retrieved.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="7e18d-586">你正尝试访问在远程计算机上运行的进程的 <see cref="P:System.Diagnostics.Process.HasExited" /> 属性。</span><span class="sxs-lookup"><span data-stu-id="7e18d-586">You are trying to access the <see cref="P:System.Diagnostics.Process.HasExited" /> property for a process that is running on a remote computer.</span></span> <span data-ttu-id="7e18d-587">此属性仅可用于本地计算机上运行的进程。</span><span class="sxs-lookup"><span data-stu-id="7e18d-587">This property is available only for processes that are running on the local computer.</span></span></exception>
        <altmember cref="P:System.Diagnostics.Process.ExitCode" />
        <altmember cref="P:System.Diagnostics.Process.ExitTime" />
        <altmember cref="M:System.Diagnostics.Process.WaitForExit(System.Int32)" />
        <altmember cref="P:System.Diagnostics.Process.EnableRaisingEvents" />
        <altmember cref="M:System.Diagnostics.Process.OnExited" />
      </Docs>
    </Member>
    <Member MemberName="Id">
      <MemberSignature Language="C#" Value="public int Id { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Id" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.Id" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Id As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Id { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Id : int" Usage="System.Diagnostics.Process.Id" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.Diagnostics.MonitoringDescription("ProcessId")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.MonitoringDescription("ProcessId")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Diagnostics.MonitoringDescription("The unique identifier for the process.")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.MonitoringDescription("The unique identifier for the process.")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7e18d-588">获取关联进程的唯一标识符。</span><span class="sxs-lookup"><span data-stu-id="7e18d-588">Gets the unique identifier for the associated process.</span></span></summary>
        <value><span data-ttu-id="7e18d-589">此 <see cref="T:System.Diagnostics.Process" /> 实例引用的、由系统生成的进程的唯一标识符。</span><span class="sxs-lookup"><span data-stu-id="7e18d-589">The system-generated unique identifier of the process that is referenced by this <see cref="T:System.Diagnostics.Process" /> instance.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The process <ph id="ph1">&lt;xref:System.Diagnostics.Process.Id%2A&gt;</ph> is not valid if the associated process is not running. Therefore, you should ensure that the process is running before attempting to retrieve the <ph id="ph1">&lt;xref:System.Diagnostics.Process.Id%2A&gt;</ph> property. Until the process terminates, the process identifier uniquely identifies the process throughout the system.  
  
 <span data-ttu-id="7e18d-593">可以 <xref:System.Diagnostics.Process> 通过将进程标识符传递给方法，将本地或远程计算机上运行的进程连接到新的实例 <xref:System.Diagnostics.Process.GetProcessById%2A> 。</span><span class="sxs-lookup"><span data-stu-id="7e18d-593">You can connect a process that is running on a local or remote computer to a new <xref:System.Diagnostics.Process> instance by passing the process identifier to the <xref:System.Diagnostics.Process.GetProcessById%2A> method.</span></span> <span data-ttu-id="7e18d-594"><xref:System.Diagnostics.Process.GetProcessById%2A> 是一个 `static` 方法，该方法创建一个新的组件，并 <xref:System.Diagnostics.Process.Id%2A> 自动设置新实例的属性 <xref:System.Diagnostics.Process> 。</span><span class="sxs-lookup"><span data-stu-id="7e18d-594"><xref:System.Diagnostics.Process.GetProcessById%2A> is a `static` method that creates a new component and sets the <xref:System.Diagnostics.Process.Id%2A> property for the new <xref:System.Diagnostics.Process> instance automatically.</span></span>  
  
 <span data-ttu-id="7e18d-595">系统可以重新使用进程标识符。</span><span class="sxs-lookup"><span data-stu-id="7e18d-595">Process identifiers can be reused by the system.</span></span> <span data-ttu-id="7e18d-596"><xref:System.Diagnostics.Process.Id%2A>仅当关联的进程正在运行时，属性值才是唯一的。</span><span class="sxs-lookup"><span data-stu-id="7e18d-596">The <xref:System.Diagnostics.Process.Id%2A> property value is unique only while the associated process is running.</span></span> <span data-ttu-id="7e18d-597">进程终止后，系统可以 <xref:System.Diagnostics.Process.Id%2A> 为不相关的进程重复使用属性值。</span><span class="sxs-lookup"><span data-stu-id="7e18d-597">After the process has terminated, the system can reuse the <xref:System.Diagnostics.Process.Id%2A> property value for an unrelated process.</span></span>  
  
 <span data-ttu-id="7e18d-598">由于标识符在系统中是唯一的，因此你可以将其作为传递实例的替代方法传递给其他线程 <xref:System.Diagnostics.Process> 。</span><span class="sxs-lookup"><span data-stu-id="7e18d-598">Because the identifier is unique on the system, you can pass it to other threads as an alternative to passing a <xref:System.Diagnostics.Process> instance.</span></span> <span data-ttu-id="7e18d-599">此操作可以保存系统资源，并保证正确地标识该进程。</span><span class="sxs-lookup"><span data-stu-id="7e18d-599">This action can save system resources yet guarantee that the process is correctly identified.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7e18d-600">下面的示例演示如何获取 <xref:System.Diagnostics.Process.Id%2A> 应用程序的所有正在运行的实例的。</span><span class="sxs-lookup"><span data-stu-id="7e18d-600">The following example demonstrates how to obtain the <xref:System.Diagnostics.Process.Id%2A> for all running instances of an application.</span></span> <span data-ttu-id="7e18d-601">该代码将创建一个新的记事本实例，列出记事本的所有实例，然后允许用户输入该 <xref:System.Diagnostics.Process.Id%2A> 数字以删除特定的实例。</span><span class="sxs-lookup"><span data-stu-id="7e18d-601">The code creates a new instance of Notepad, lists all the instances of Notepad, and then allows the user to enter the <xref:System.Diagnostics.Process.Id%2A> number to remove a specific instance.</span></span>  
  
 [!code-csharp[System.Diagnostics.Process.Id#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.Process.Id/CS/program.cs#1)]
 [!code-vb[System.Diagnostics.Process.Id#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.Process.Id/VB/program.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="7e18d-602">尚未设置此进程的 <see cref="P:System.Diagnostics.Process.Id" /> 属性。</span><span class="sxs-lookup"><span data-stu-id="7e18d-602">The process's <see cref="P:System.Diagnostics.Process.Id" /> property has not been set.</span></span>  
  
<span data-ttu-id="7e18d-603">- 或 -</span><span class="sxs-lookup"><span data-stu-id="7e18d-603">-or-</span></span> 
<span data-ttu-id="7e18d-604">没有与此 <see cref="T:System.Diagnostics.Process" /> 对象关联的进程。</span><span class="sxs-lookup"><span data-stu-id="7e18d-604">There is no process associated with this <see cref="T:System.Diagnostics.Process" /> object.</span></span></exception>
        <altmember cref="P:System.Diagnostics.Process.Handle" />
        <altmember cref="M:System.Diagnostics.Process.GetProcessById(System.Int32,System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Kill">
      <Docs>
        <summary><span data-ttu-id="7e18d-605">强制终止基础进程。</span><span class="sxs-lookup"><span data-stu-id="7e18d-605">Forces termination of the underlying process.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

The <ph id="ph1">`Kill`</ph> method forces a termination of the process, while <ph id="ph2">&lt;xref:System.Diagnostics.Process.CloseMainWindow%2A&gt;</ph> only requests a termination. When a process with a graphical interface is executing, its message loop is in a wait state. <span data-ttu-id="7e18d-608">每次操作系统将 Windows 消息发送到该进程时，消息循环都会执行。</span><span class="sxs-lookup"><span data-stu-id="7e18d-608">The message loop executes every time a Windows message is sent to the process by the operating system.</span></span> <span data-ttu-id="7e18d-609">调用 <xref:System.Diagnostics.Process.CloseMainWindow%2A> 将发送一个请求来关闭主窗口，该窗口在格式正确的应用程序中将关闭子窗口，并为应用程序撤消所有正在运行的消息循环。</span><span class="sxs-lookup"><span data-stu-id="7e18d-609">Calling <xref:System.Diagnostics.Process.CloseMainWindow%2A> sends a request to close the main window, which, in a well-formed application, closes child windows and revokes all running message loops for the application.</span></span> <span data-ttu-id="7e18d-610">通过调用退出进程的请求 <xref:System.Diagnostics.Process.CloseMainWindow%2A> 不会强制应用程序退出。</span><span class="sxs-lookup"><span data-stu-id="7e18d-610">The request to exit the process by calling <xref:System.Diagnostics.Process.CloseMainWindow%2A> does not force the application to quit.</span></span>
<span data-ttu-id="7e18d-611">应用程序可以在退出前要求用户进行验证，也可以拒绝退出。</span><span class="sxs-lookup"><span data-stu-id="7e18d-611">The application can ask for user verification before quitting, or it can refuse to quit.</span></span> <span data-ttu-id="7e18d-612">若要强制退出应用程序，请使用 `Kill` 方法。</span><span class="sxs-lookup"><span data-stu-id="7e18d-612">To force the application to quit, use the `Kill` method.</span></span>

<span data-ttu-id="7e18d-613">的行为与 <xref:System.Diagnostics.Process.CloseMainWindow%2A> 用户使用系统菜单关闭应用程序的主窗口的行为相同。</span><span class="sxs-lookup"><span data-stu-id="7e18d-613">The behavior of <xref:System.Diagnostics.Process.CloseMainWindow%2A> is identical to that of a user closing an application's main window using the system menu.</span></span>
<span data-ttu-id="7e18d-614">因此，通过关闭主窗口来退出进程的请求不会强制立即退出。</span><span class="sxs-lookup"><span data-stu-id="7e18d-614">Therefore, the request to exit the process by closing the main window does not force the application to quit immediately.</span></span>
  
> [!NOTE]
> <span data-ttu-id="7e18d-615"><xref:System.Diagnostics.Process.Kill%2A>方法以异步方式执行。</span><span class="sxs-lookup"><span data-stu-id="7e18d-615">The <xref:System.Diagnostics.Process.Kill%2A> method executes asynchronously.</span></span> <span data-ttu-id="7e18d-616">调用方法后 `Kill` ，调用 <xref:System.Diagnostics.Process.WaitForExit%2A> 方法以等待进程退出，或检查 <xref:System.Diagnostics.Process.HasExited%2A> 属性以确定进程是否已退出。</span><span class="sxs-lookup"><span data-stu-id="7e18d-616">After calling the `Kill` method, call the <xref:System.Diagnostics.Process.WaitForExit%2A> method to wait for the process to exit, or check the <xref:System.Diagnostics.Process.HasExited%2A> property to determine if the process has exited.</span></span>

> [!NOTE]
> <span data-ttu-id="7e18d-617"><xref:System.Diagnostics.Process.WaitForExit%2A>方法和 <xref:System.Diagnostics.Process.HasExited%2A> 属性不反映后代进程的状态。</span><span class="sxs-lookup"><span data-stu-id="7e18d-617">The <xref:System.Diagnostics.Process.WaitForExit%2A> method and the <xref:System.Diagnostics.Process.HasExited%2A> property do not reflect the status of descendant processes.</span></span>
> <span data-ttu-id="7e18d-618">`Kill(entireProcessTree: true)`使用时， <xref:System.Diagnostics.Process.WaitForExit%2A> <xref:System.Diagnostics.Process.HasExited%2A> 将指示在给定进程退出后退出已完成，即使所有子代尚未退出也是如此。</span><span class="sxs-lookup"><span data-stu-id="7e18d-618">When `Kill(entireProcessTree: true)` is used, <xref:System.Diagnostics.Process.WaitForExit%2A> and <xref:System.Diagnostics.Process.HasExited%2A> will indicate that exiting has completed after the given process exits, even if all descendants have not yet exited.</span></span>
  
<span data-ttu-id="7e18d-619">如果调用，则由进程编辑的数据或分配给进程的资源可能会丢失 `Kill` 。</span><span class="sxs-lookup"><span data-stu-id="7e18d-619">Data edited by the process or resources allocated to the process can be lost if you call `Kill`.</span></span> 
<span data-ttu-id="7e18d-620">`Kill` 导致异常的进程终止，只应在必要时使用。</span><span class="sxs-lookup"><span data-stu-id="7e18d-620">`Kill` causes an abnormal process termination and should be used only when necessary.</span></span>
<span data-ttu-id="7e18d-621"><xref:System.Diagnostics.Process.CloseMainWindow%2A> 启用进程的有序终止，并关闭所有窗口，因此更适合使用接口的应用程序。</span><span class="sxs-lookup"><span data-stu-id="7e18d-621"><xref:System.Diagnostics.Process.CloseMainWindow%2A> enables an orderly termination of the process and closes all windows, so it is preferable for applications with an interface.</span></span> <span data-ttu-id="7e18d-622">如果 <xref:System.Diagnostics.Process.CloseMainWindow%2A> 失败，可使用 `Kill` 终止进程。</span><span class="sxs-lookup"><span data-stu-id="7e18d-622">If <xref:System.Diagnostics.Process.CloseMainWindow%2A> fails, you can use `Kill` to terminate the process.</span></span>
<span data-ttu-id="7e18d-623">`Kill` 是终止没有图形界面的进程的唯一方法。</span><span class="sxs-lookup"><span data-stu-id="7e18d-623">`Kill` is the only way to terminate processes that do not have graphical interfaces.</span></span>
  
<span data-ttu-id="7e18d-624">只能为在 `Kill` <xref:System.Diagnostics.Process.CloseMainWindow%2A> 本地计算机上运行的进程调用和。</span><span class="sxs-lookup"><span data-stu-id="7e18d-624">You can call `Kill` and <xref:System.Diagnostics.Process.CloseMainWindow%2A> only for processes that are running on the local computer.</span></span>
<span data-ttu-id="7e18d-625">不能使远程计算机上的进程退出。</span><span class="sxs-lookup"><span data-stu-id="7e18d-625">You cannot cause processes on remote computers to exit.</span></span> <span data-ttu-id="7e18d-626">只能查看远程计算机上运行的进程的信息。</span><span class="sxs-lookup"><span data-stu-id="7e18d-626">You can only view information for processes running on remote computers.</span></span>
  
> [!NOTE]
> <span data-ttu-id="7e18d-627">如果在 `Kill` 进程当前终止时调用了方法，则 <xref:System.ComponentModel.Win32Exception> 会引发访问被拒绝。</span><span class="sxs-lookup"><span data-stu-id="7e18d-627">If the call to the `Kill` method is made while the process is currently terminating, a <xref:System.ComponentModel.Win32Exception> is thrown for Access Denied.</span></span>
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Kill">
      <MemberSignature Language="C#" Value="public void Kill ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Kill() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Process.Kill" />
      <MemberSignature Language="VB.NET" Value="Public Sub Kill ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Kill();" />
      <MemberSignature Language="F#" Value="member this.Kill : unit -&gt; unit" Usage="process.Kill " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7e18d-628">立即停止关联的进程。</span><span class="sxs-lookup"><span data-stu-id="7e18d-628">Immediately stops the associated process.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ComponentModel.Win32Exception"><span data-ttu-id="7e18d-629">无法终止相关联的进程。</span><span class="sxs-lookup"><span data-stu-id="7e18d-629">The associated process could not be terminated.</span></span>  
  
 <span data-ttu-id="7e18d-630">- 或 -</span><span class="sxs-lookup"><span data-stu-id="7e18d-630">-or-</span></span>  
  
 <span data-ttu-id="7e18d-631">进程将终止。</span><span class="sxs-lookup"><span data-stu-id="7e18d-631">The process is terminating.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="7e18d-632">你正尝试为远程计算机上运行的进程调用 <see cref="M:System.Diagnostics.Process.Kill" />。</span><span class="sxs-lookup"><span data-stu-id="7e18d-632">You are attempting to call <see cref="M:System.Diagnostics.Process.Kill" /> for a process that is running on a remote computer.</span></span> <span data-ttu-id="7e18d-633">该方法仅对本地计算机上运行的进程可用。</span><span class="sxs-lookup"><span data-stu-id="7e18d-633">The method is available only for processes running on the local computer.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="7e18d-634">已经退出该进程。</span><span class="sxs-lookup"><span data-stu-id="7e18d-634">The process has already exited.</span></span>  
  
<span data-ttu-id="7e18d-635">- 或 -</span><span class="sxs-lookup"><span data-stu-id="7e18d-635">-or-</span></span> 
<span data-ttu-id="7e18d-636">没有与此 <see cref="T:System.Diagnostics.Process" /> 对象关联的进程。</span><span class="sxs-lookup"><span data-stu-id="7e18d-636">There is no process associated with this <see cref="T:System.Diagnostics.Process" /> object.</span></span></exception>
        <altmember cref="M:System.Environment.Exit(System.Int32)" />
        <altmember cref="M:System.Diagnostics.Process.CloseMainWindow" />
        <altmember cref="M:System.Diagnostics.Process.Start" />
      </Docs>
    </Member>
    <Member MemberName="Kill">
      <MemberSignature Language="C#" Value="public void Kill (bool entireProcessTree);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Kill(bool entireProcessTree) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Process.Kill(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Kill (entireProcessTree As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Kill(bool entireProcessTree);" />
      <MemberSignature Language="F#" Value="member this.Kill : bool -&gt; unit" Usage="process.Kill entireProcessTree" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entireProcessTree" Type="System.Boolean" Index="0" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="entireProcessTree"><span data-ttu-id="7e18d-637"><see langword="true" /> 终止相关联进程及其后代；<see langword="false" /> 仅终止相关联进程。</span><span class="sxs-lookup"><span data-stu-id="7e18d-637"><see langword="true" /> to kill the associated process and its descendants; <see langword="false" /> to kill only the associated process.</span></span></param>
        <summary><span data-ttu-id="7e18d-638">立即停止关联的进程，并可选择停止其子/后代进程。</span><span class="sxs-lookup"><span data-stu-id="7e18d-638">Immediately stops the associated process, and optionally its child/descendent processes.</span></span></summary>
        <remarks>When <ph id="ph1">&lt;paramref name="entireProcessTree" /&gt;</ph> is set to <ph id="ph2">&lt;see langword="true" /&gt;</ph>, processes where the call lacks permissions to view details are silently skipped by the descendant termination process because the termination process is unable to determine whether those processes are descendants.</remarks>
        <exception cref="T:System.ComponentModel.Win32Exception"><span data-ttu-id="7e18d-640">无法终止相关联的进程。</span><span class="sxs-lookup"><span data-stu-id="7e18d-640">The associated process could not be terminated.</span></span>  
  
 <span data-ttu-id="7e18d-641">- 或 -</span><span class="sxs-lookup"><span data-stu-id="7e18d-641">-or-</span></span>  
  
 <span data-ttu-id="7e18d-642">进程将终止。</span><span class="sxs-lookup"><span data-stu-id="7e18d-642">The process is terminating.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="7e18d-643">你正尝试为远程计算机上运行的进程调用 <see cref="M:System.Diagnostics.Process.Kill" />。</span><span class="sxs-lookup"><span data-stu-id="7e18d-643">You are attempting to call <see cref="M:System.Diagnostics.Process.Kill" /> for a process that is running on a remote computer.</span></span> <span data-ttu-id="7e18d-644">该方法仅对本地计算机上运行的进程可用。</span><span class="sxs-lookup"><span data-stu-id="7e18d-644">The method is available only for processes running on the local computer.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="7e18d-645">已经退出该进程。</span><span class="sxs-lookup"><span data-stu-id="7e18d-645">The process has already exited.</span></span>  
  
<span data-ttu-id="7e18d-646">- 或 -</span><span class="sxs-lookup"><span data-stu-id="7e18d-646">-or-</span></span>

<span data-ttu-id="7e18d-647">没有与此 <see cref="T:System.Diagnostics.Process" /> 对象关联的进程。</span><span class="sxs-lookup"><span data-stu-id="7e18d-647">There is no process associated with this <see cref="T:System.Diagnostics.Process" /> object.</span></span>

<span data-ttu-id="7e18d-648">- 或 -</span><span class="sxs-lookup"><span data-stu-id="7e18d-648">-or-</span></span>

<span data-ttu-id="7e18d-649">调用进程是关联进程的后代树的成员。</span><span class="sxs-lookup"><span data-stu-id="7e18d-649">The calling process is a member of the associated process' descendant tree.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="7e18d-650">并非关联进程的后代树中的所有进程都可以终止。</span><span class="sxs-lookup"><span data-stu-id="7e18d-650">Not all processes in the associated process' descendant tree could be terminated.</span></span></exception>
        <altmember cref="M:System.Environment.Exit(System.Int32)" />
        <altmember cref="M:System.Diagnostics.Process.CloseMainWindow" />
        <altmember cref="M:System.Diagnostics.Process.Start" />
      </Docs>
    </Member>
    <Member MemberName="LeaveDebugMode">
      <MemberSignature Language="C#" Value="public static void LeaveDebugMode ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void LeaveDebugMode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Process.LeaveDebugMode" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub LeaveDebugMode ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void LeaveDebugMode();" />
      <MemberSignature Language="F#" Value="static member LeaveDebugMode : unit -&gt; unit" Usage="System.Diagnostics.Process.LeaveDebugMode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7e18d-651">使 <see cref="T:System.Diagnostics.Process" /> 组件离开允许它与以特殊模式运行的操作系统进程交互的状态。</span><span class="sxs-lookup"><span data-stu-id="7e18d-651">Takes a <see cref="T:System.Diagnostics.Process" /> component out of the state that lets it interact with operating system processes that run in a special mode.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Some operating system processes run in a special mode. Attempting to read properties of or attach to these processes is not possible unless you have called <ph id="ph1">&lt;xref:System.Diagnostics.Process.EnterDebugMode%2A&gt;</ph> on the component. Call <ph id="ph1">&lt;xref:System.Diagnostics.Process.LeaveDebugMode%2A&gt;</ph> when you no longer need access to these processes that run in special mode.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Diagnostics.Process.EnterDebugMode" />
      </Docs>
    </Member>
    <Member MemberName="MachineName">
      <MemberSignature Language="C#" Value="public string MachineName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string MachineName" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.MachineName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MachineName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ MachineName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MachineName : string" Usage="System.Diagnostics.Process.MachineName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.Diagnostics.MonitoringDescription("ProcessMachineName")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.MonitoringDescription("ProcessMachineName")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Diagnostics.MonitoringDescription("The name of the machine the running the process.")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.MonitoringDescription("The name of the machine the running the process.")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7e18d-655">获取关联进程正在其上运行的计算机的名称。</span><span class="sxs-lookup"><span data-stu-id="7e18d-655">Gets the name of the computer the associated process is running on.</span></span></summary>
        <value><span data-ttu-id="7e18d-656">关联进程正在其上运行的计算机的名称。</span><span class="sxs-lookup"><span data-stu-id="7e18d-656">The name of the computer that the associated process is running on.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You can view statistical data and process information for processes running on remote computers but you cannot call <ph id="ph1">&lt;xref:System.Diagnostics.Process.Start%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Diagnostics.Process.CloseMainWindow%2A&gt;</ph>, or <ph id="ph3">&lt;xref:System.Diagnostics.Process.Kill%2A&gt;</ph> on remote computers.  
  
> [!NOTE]
>  When the associated process is executing on the local machine, this property returns a period (".") for the machine name. You should use the <ph id="ph1">&lt;xref:System.Environment.MachineName%2A?displayProperty=nameWithType&gt;</ph> property to get the correct machine name.  
  
   
  
## Examples  
 <span data-ttu-id="7e18d-660">若要使用下面的示例，必须首先在远程计算机上至少启动记事本的一个实例。</span><span class="sxs-lookup"><span data-stu-id="7e18d-660">To use the following example you must first start at least one instance of Notepad on a remote computer.</span></span> <span data-ttu-id="7e18d-661">该示例请求记事本正在其上运行的远程计算机的名称，然后显示 <xref:System.Diagnostics.Process.ProcessName%2A> <xref:System.Diagnostics.Process.Id%2A> 每个实例各自的、和 <xref:System.Diagnostics.Process.MachineName%2A> 属性。</span><span class="sxs-lookup"><span data-stu-id="7e18d-661">The example requests the name of the remote computer on which Notepad is running, and then displays the respective <xref:System.Diagnostics.Process.ProcessName%2A>, <xref:System.Diagnostics.Process.Id%2A>, and <xref:System.Diagnostics.Process.MachineName%2A> properties for each instance.</span></span>  
  
 [!code-csharp[process_GetProcessesByName2_2#2](~/samples/snippets/csharp/VS_Snippets_CLR/Process_GetProcessesByName2_2/CS/process_getprocessesbyname2_2.cs#2)]
 [!code-vb[process_GetProcessesByName2_2#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/Process_GetProcessesByName2_2/VB/process_getprocessesbyname2_2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="7e18d-662">没有与此 <see cref="T:System.Diagnostics.Process" /> 对象关联的进程。</span><span class="sxs-lookup"><span data-stu-id="7e18d-662">There is no process associated with this <see cref="T:System.Diagnostics.Process" /> object.</span></span></exception>
        <altmember cref="M:System.Diagnostics.Process.GetProcesses" />
        <altmember cref="M:System.Diagnostics.Process.GetProcessById(System.Int32,System.String)" />
        <altmember cref="M:System.Diagnostics.Process.GetProcessesByName(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="MainModule">
      <MemberSignature Language="C#" Value="public System.Diagnostics.ProcessModule? MainModule { get; }" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Diagnostics.ProcessModule MainModule" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.MainModule" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MainModule As ProcessModule" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Diagnostics::ProcessModule ^ MainModule { System::Diagnostics::ProcessModule ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MainModule : System.Diagnostics.ProcessModule" Usage="System.Diagnostics.Process.MainModule" />
      <MemberSignature Language="C#" Value="public System.Diagnostics.ProcessModule MainModule { get; }" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.Diagnostics.MonitoringDescription("ProcessMainModule")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.MonitoringDescription("ProcessMainModule")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Diagnostics.MonitoringDescription("The main module of the process.")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.MonitoringDescription("The main module of the process.")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Diagnostics.ProcessModule</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7e18d-663">获取关联进程的主模块。</span><span class="sxs-lookup"><span data-stu-id="7e18d-663">Gets the main module for the associated process.</span></span></summary>
        <value><span data-ttu-id="7e18d-664">用于启动进程的 <see cref="T:System.Diagnostics.ProcessModule" />。</span><span class="sxs-lookup"><span data-stu-id="7e18d-664">The <see cref="T:System.Diagnostics.ProcessModule" /> that was used to start the process.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A process module represents a.dll or .exe file that is loaded into a particular process. The <ph id="ph1">&lt;xref:System.Diagnostics.Process.MainModule%2A&gt;</ph> property lets you view information about the executable used to start the process, including the module name, file name, and module memory details.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="7e18d-667">你正尝试访问在远程计算机上运行的进程的 <see cref="P:System.Diagnostics.Process.MainModule" /> 属性。</span><span class="sxs-lookup"><span data-stu-id="7e18d-667">You are trying to access the <see cref="P:System.Diagnostics.Process.MainModule" /> property for a process that is running on a remote computer.</span></span> <span data-ttu-id="7e18d-668">此属性仅可用于本地计算机上运行的进程。</span><span class="sxs-lookup"><span data-stu-id="7e18d-668">This property is available only for processes that are running on the local computer.</span></span></exception>
        <exception cref="T:System.ComponentModel.Win32Exception"><span data-ttu-id="7e18d-669">32 位进程正尝试访问 64 位进程的模块。</span><span class="sxs-lookup"><span data-stu-id="7e18d-669">A 32-bit process is trying to access the modules of a 64-bit process.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="7e18d-670">进程 <see cref="P:System.Diagnostics.Process.Id" /> 不可用。</span><span class="sxs-lookup"><span data-stu-id="7e18d-670">The process <see cref="P:System.Diagnostics.Process.Id" /> is not available.</span></span>  
  
<span data-ttu-id="7e18d-671">- 或 -</span><span class="sxs-lookup"><span data-stu-id="7e18d-671">-or-</span></span> 
<span data-ttu-id="7e18d-672">该进程已退出。</span><span class="sxs-lookup"><span data-stu-id="7e18d-672">The process has exited.</span></span></exception>
        <altmember cref="P:System.Diagnostics.Process.Modules" />
      </Docs>
    </Member>
    <Member MemberName="MainWindowHandle">
      <MemberSignature Language="C#" Value="public IntPtr MainWindowHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int MainWindowHandle" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.MainWindowHandle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MainWindowHandle As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IntPtr MainWindowHandle { IntPtr get(); };" />
      <MemberSignature Language="F#" Value="member this.MainWindowHandle : nativeint" Usage="System.Diagnostics.Process.MainWindowHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.Diagnostics.MonitoringDescription("ProcessMainWindowHandle")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.MonitoringDescription("ProcessMainWindowHandle")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Diagnostics.MonitoringDescription("The handle of the main window of the process.")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.MonitoringDescription("The handle of the main window of the process.")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.MonoTODO]</AttributeName>
          <AttributeName Language="F#">[&lt;System.MonoTODO&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7e18d-673">获取关联进程主窗口的窗口句柄。</span><span class="sxs-lookup"><span data-stu-id="7e18d-673">Gets the window handle of the main window of the associated process.</span></span></summary>
        <value><span data-ttu-id="7e18d-674">关联进程主窗口的系统生成的窗口句柄。</span><span class="sxs-lookup"><span data-stu-id="7e18d-674">The system-generated window handle of the main window of the associated process.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The main window is the window opened by the process that currently has the focus (the <ph id="ph1">&lt;xref:System.Windows.Forms.Form.TopLevel%2A&gt;</ph> form). You must use the <ph id="ph1">&lt;xref:System.Diagnostics.Process.Refresh%2A&gt;</ph> method to refresh the <ph id="ph2">&lt;xref:System.Diagnostics.Process&gt;</ph> object to get the current main window handle if it has changed. In general, because the window handle is cached, use <ph id="ph1">&lt;xref:System.Diagnostics.Process.Refresh%2A&gt;</ph> beforehand to guarantee that you'll retrieve the current handle.  
  
 <span data-ttu-id="7e18d-678">只能获取 <xref:System.Diagnostics.Process.MainWindowHandle%2A> 本地计算机上运行的进程的属性。</span><span class="sxs-lookup"><span data-stu-id="7e18d-678">You can get the <xref:System.Diagnostics.Process.MainWindowHandle%2A> property only for processes that are running on the local computer.</span></span> <span data-ttu-id="7e18d-679"><xref:System.Diagnostics.Process.MainWindowHandle%2A>属性是唯一标识与进程关联的窗口的值。</span><span class="sxs-lookup"><span data-stu-id="7e18d-679">The <xref:System.Diagnostics.Process.MainWindowHandle%2A> property is a value that uniquely identifies the window that is associated with the process.</span></span>  
  
 <span data-ttu-id="7e18d-680">仅当进程具有图形界面时，才有一个与之关联的主窗口。</span><span class="sxs-lookup"><span data-stu-id="7e18d-680">A process has a main window associated with it only if the process has a graphical interface.</span></span> <span data-ttu-id="7e18d-681">如果关联进程没有主窗口，则 <xref:System.Diagnostics.Process.MainWindowHandle%2A> 值为零。</span><span class="sxs-lookup"><span data-stu-id="7e18d-681">If the associated process does not have a main window, the <xref:System.Diagnostics.Process.MainWindowHandle%2A> value is zero.</span></span> <span data-ttu-id="7e18d-682">对于已隐藏的进程（即，任务栏中不显示的进程），值也为零。</span><span class="sxs-lookup"><span data-stu-id="7e18d-682">The value is also zero for processes that have been hidden, that is, processes that are not visible in the taskbar.</span></span> <span data-ttu-id="7e18d-683">这种情况可能会出现在通知区域中任务栏最右侧的图标。</span><span class="sxs-lookup"><span data-stu-id="7e18d-683">This can be the case for processes that appear as icons in the notification area, at the far right of the taskbar.</span></span>  
  
 <span data-ttu-id="7e18d-684">如果刚启动了一个进程，并想要使用其主窗口句柄，请考虑使用 <xref:System.Diagnostics.Process.WaitForInputIdle%2A> 方法来允许进程开始，确保已创建了主窗口句柄。</span><span class="sxs-lookup"><span data-stu-id="7e18d-684">If you have just started a process and want to use its main window handle, consider using the <xref:System.Diagnostics.Process.WaitForInputIdle%2A> method to allow the process to finish starting, ensuring that the main window handle has been created.</span></span> <span data-ttu-id="7e18d-685">否则，将引发异常。</span><span class="sxs-lookup"><span data-stu-id="7e18d-685">Otherwise, an exception will be thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="7e18d-686">未定义 <see cref="P:System.Diagnostics.Process.MainWindowHandle" />，因为已退出进程。</span><span class="sxs-lookup"><span data-stu-id="7e18d-686">The <see cref="P:System.Diagnostics.Process.MainWindowHandle" /> is not defined because the process has exited.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="7e18d-687">你正尝试访问在远程计算机上运行的进程的 <see cref="P:System.Diagnostics.Process.MainWindowHandle" /> 属性。</span><span class="sxs-lookup"><span data-stu-id="7e18d-687">You are trying to access the <see cref="P:System.Diagnostics.Process.MainWindowHandle" /> property for a process that is running on a remote computer.</span></span> <span data-ttu-id="7e18d-688">此属性仅可用于本地计算机上运行的进程。</span><span class="sxs-lookup"><span data-stu-id="7e18d-688">This property is available only for processes that are running on the local computer.</span></span></exception>
        <altmember cref="P:System.Diagnostics.Process.MainWindowTitle" />
        <altmember cref="P:System.Diagnostics.Process.MainModule" />
      </Docs>
    </Member>
    <Member MemberName="MainWindowTitle">
      <MemberSignature Language="C#" Value="public string MainWindowTitle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string MainWindowTitle" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.MainWindowTitle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MainWindowTitle As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ MainWindowTitle { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MainWindowTitle : string" Usage="System.Diagnostics.Process.MainWindowTitle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.Diagnostics.MonitoringDescription("ProcessMainWindowTitle")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.MonitoringDescription("ProcessMainWindowTitle")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Diagnostics.MonitoringDescription("The title of the main window of the process.")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.MonitoringDescription("The title of the main window of the process.")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.MonoTODO]</AttributeName>
          <AttributeName Language="F#">[&lt;System.MonoTODO&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7e18d-689">获取进程的主窗口标题。</span><span class="sxs-lookup"><span data-stu-id="7e18d-689">Gets the caption of the main window of the process.</span></span></summary>
        <value><span data-ttu-id="7e18d-690">进程的主窗口标题。</span><span class="sxs-lookup"><span data-stu-id="7e18d-690">The main window title of the process.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A process has a main window associated with it only if the process has a graphical interface. If the associated process does not have a main window (so that <ph id="ph1">&lt;xref:System.Diagnostics.Process.MainWindowHandle%2A&gt;</ph> is zero), or if the system can't determine that there's a main window (such as may be the case on some Unix platforms), <ph id="ph2">&lt;xref:System.Diagnostics.Process.MainWindowTitle%2A&gt;</ph> is an empty string ("").
 
 If you have just started a process and want to use its main window title, consider using the <ph id="ph1">&lt;xref:System.Diagnostics.Process.WaitForInputIdle%2A&gt;</ph> method to allow the process to finish starting, ensuring that the main window handle has been created. <span data-ttu-id="7e18d-694">否则，系统将引发异常。</span><span class="sxs-lookup"><span data-stu-id="7e18d-694">Otherwise, the system throws an exception.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7e18d-695">主窗口是当前具有焦点的窗口;请注意，这可能不是进程的主窗口。</span><span class="sxs-lookup"><span data-stu-id="7e18d-695">The main window is the window that currently has the focus; note that this might not be the primary window for the process.</span></span> <span data-ttu-id="7e18d-696"><xref:System.Diagnostics.Process.Refresh%2A> <xref:System.Diagnostics.Process> 如果对象已更改，则必须使用方法刷新对象以获取当前主窗口句柄。</span><span class="sxs-lookup"><span data-stu-id="7e18d-696">You must use the <xref:System.Diagnostics.Process.Refresh%2A> method to refresh the <xref:System.Diagnostics.Process> object to get the current main window handle if it has changed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7e18d-697">下面的示例启动记事本实例，并检索进程主窗口的标题。</span><span class="sxs-lookup"><span data-stu-id="7e18d-697">The following example starts an instance of Notepad and retrieves the caption of the main window of the process.</span></span>  
  
 [!code-cpp[process_MainWindowTitle#1](~/samples/snippets/cpp/VS_Snippets_CLR/Process_MainWindowTitle/CPP/process_mainwindowtitle.cpp#1)]
 [!code-csharp[process_MainWindowTitle#1](~/samples/snippets/csharp/VS_Snippets_CLR/Process_MainWindowTitle/CS/process_mainwindowtitle.cs#1)]
 [!code-vb[process_MainWindowTitle#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Process_MainWindowTitle/VB/process_mainwindowtitle.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="7e18d-698">未定义 <see cref="P:System.Diagnostics.Process.MainWindowTitle" /> 属性，因为进程已退出。</span><span class="sxs-lookup"><span data-stu-id="7e18d-698">The <see cref="P:System.Diagnostics.Process.MainWindowTitle" /> property is not defined because the process has exited.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="7e18d-699">你正尝试访问在远程计算机上运行的进程的 <see cref="P:System.Diagnostics.Process.MainWindowTitle" /> 属性。</span><span class="sxs-lookup"><span data-stu-id="7e18d-699">You are trying to access the <see cref="P:System.Diagnostics.Process.MainWindowTitle" /> property for a process that is running on a remote computer.</span></span> <span data-ttu-id="7e18d-700">此属性仅可用于本地计算机上运行的进程。</span><span class="sxs-lookup"><span data-stu-id="7e18d-700">This property is available only for processes that are running on the local computer.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="MaxWorkingSet">
      <MemberSignature Language="C#" Value="public IntPtr MaxWorkingSet { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int MaxWorkingSet" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.MaxWorkingSet" />
      <MemberSignature Language="VB.NET" Value="Public Property MaxWorkingSet As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IntPtr MaxWorkingSet { IntPtr get(); void set(IntPtr value); };" />
      <MemberSignature Language="F#" Value="member this.MaxWorkingSet : nativeint with get, set" Usage="System.Diagnostics.Process.MaxWorkingSet" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.Diagnostics.MonitoringDescription("ProcessMaxWorkingSet")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.MonitoringDescription("ProcessMaxWorkingSet")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Diagnostics.MonitoringDescription("The maximum amount of physical memory the process has required since it was started.")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.MonitoringDescription("The maximum amount of physical memory the process has required since it was started.")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7e18d-701">获取或设置关联进程允许的最大工作集大小（以字节为单位）。</span><span class="sxs-lookup"><span data-stu-id="7e18d-701">Gets or sets the maximum allowable working set size, in bytes, for the associated process.</span></span></summary>
        <value><span data-ttu-id="7e18d-702">内存中允许的进程的最大工作集大小（以字节为单位）。</span><span class="sxs-lookup"><span data-stu-id="7e18d-702">The maximum working set size that is allowed in memory for the process, in bytes.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The working set of a process is the set of memory pages currently visible to the process in physical RAM memory. These pages are resident and available for an application to use without triggering a page fault.  
  
 The working set includes both shared and private data. <span data-ttu-id="7e18d-706">共享数据包括包含应用程序执行的所有说明的页面，包括 .dll 文件中的页面和 system.dll 的文件。</span><span class="sxs-lookup"><span data-stu-id="7e18d-706">The shared data includes the pages that contain all the instructions that your application executes, including the pages in your .dll files and the system.dll files.</span></span> <span data-ttu-id="7e18d-707">随着工作集大小的增加，内存需求也会增加。</span><span class="sxs-lookup"><span data-stu-id="7e18d-707">As the working set size increases, memory demand increases.</span></span>  
  
 <span data-ttu-id="7e18d-708">进程具有最小和最大工作集大小。</span><span class="sxs-lookup"><span data-stu-id="7e18d-708">A process has minimum and maximum working set sizes.</span></span> <span data-ttu-id="7e18d-709">每次创建进程资源时，系统会保留相当于进程的最小工作集大小的内存量。</span><span class="sxs-lookup"><span data-stu-id="7e18d-709">Each time a process resource is created, the system reserves an amount of memory equal to the minimum working set size for the process.</span></span> <span data-ttu-id="7e18d-710">当进程处于活动状态时，虚拟内存管理器将尝试至少保留最少的内存，但不会超过最大大小。</span><span class="sxs-lookup"><span data-stu-id="7e18d-710">The virtual memory manager attempts to keep at least the minimum amount of memory resident when the process is active, but it never keeps more than the maximum size.</span></span>  
  
 <span data-ttu-id="7e18d-711">系统设置默认的工作集大小。</span><span class="sxs-lookup"><span data-stu-id="7e18d-711">The system sets the default working set sizes.</span></span> <span data-ttu-id="7e18d-712">您可以使用和成员修改这些 <xref:System.Diagnostics.Process.MaxWorkingSet%2A> 大小 <xref:System.Diagnostics.Process.MinWorkingSet%2A> 。</span><span class="sxs-lookup"><span data-stu-id="7e18d-712">You can modify these sizes using the <xref:System.Diagnostics.Process.MaxWorkingSet%2A> and <xref:System.Diagnostics.Process.MinWorkingSet%2A> members.</span></span> <span data-ttu-id="7e18d-713">但是，设置这些值不能保证保留或驻留内存。</span><span class="sxs-lookup"><span data-stu-id="7e18d-713">However, setting these values does not guarantee that the memory will be reserved or resident.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7e18d-714">增大进程的工作集大小时，会从系统的其余部分中取出物理内存。</span><span class="sxs-lookup"><span data-stu-id="7e18d-714">When you increase the working set size of a process, you take physical memory away from the rest of the system.</span></span> <span data-ttu-id="7e18d-715">请确保未请求的最小或最大工作集大小太大，因为这样做可能会降低系统性能。</span><span class="sxs-lookup"><span data-stu-id="7e18d-715">Ensure that you do not request a minimum or maximum working set size that is too large, because doing so can degrade system performance.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="7e18d-716">最大的工作集大小无效。</span><span class="sxs-lookup"><span data-stu-id="7e18d-716">The maximum working set size is invalid.</span></span> <span data-ttu-id="7e18d-717">它必须大于或等于最小的工作集大小。</span><span class="sxs-lookup"><span data-stu-id="7e18d-717">It must be greater than or equal to the minimum working set size.</span></span></exception>
        <exception cref="T:System.ComponentModel.Win32Exception"><span data-ttu-id="7e18d-718">无法从关联的进程资源中检索工作集信息。</span><span class="sxs-lookup"><span data-stu-id="7e18d-718">Working set information cannot be retrieved from the associated process resource.</span></span>  
  
 <span data-ttu-id="7e18d-719">- 或 -</span><span class="sxs-lookup"><span data-stu-id="7e18d-719">-or-</span></span>  
  
 <span data-ttu-id="7e18d-720">进程标识符或进程句柄为零，因为尚未启动该进程。</span><span class="sxs-lookup"><span data-stu-id="7e18d-720">The process identifier or process handle is zero because the process has not been started.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="7e18d-721">你正尝试访问在远程计算机上运行的进程的 <see cref="P:System.Diagnostics.Process.MaxWorkingSet" /> 属性。</span><span class="sxs-lookup"><span data-stu-id="7e18d-721">You are trying to access the <see cref="P:System.Diagnostics.Process.MaxWorkingSet" /> property for a process that is running on a remote computer.</span></span> <span data-ttu-id="7e18d-722">此属性仅可用于本地计算机上运行的进程。</span><span class="sxs-lookup"><span data-stu-id="7e18d-722">This property is available only for processes that are running on the local computer.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="7e18d-723">进程 <see cref="P:System.Diagnostics.Process.Id" /> 不可用。</span><span class="sxs-lookup"><span data-stu-id="7e18d-723">The process <see cref="P:System.Diagnostics.Process.Id" /> is not available.</span></span>  
  
<span data-ttu-id="7e18d-724">- 或 -</span><span class="sxs-lookup"><span data-stu-id="7e18d-724">-or-</span></span> 
<span data-ttu-id="7e18d-725">该进程已退出。</span><span class="sxs-lookup"><span data-stu-id="7e18d-725">The process has exited.</span></span></exception>
        <altmember cref="P:System.Diagnostics.Process.MinWorkingSet" />
        <altmember cref="P:System.Diagnostics.Process.WorkingSet64" />
        <altmember cref="P:System.Diagnostics.Process.PeakWorkingSet64" />
      </Docs>
    </Member>
    <Member MemberName="MinWorkingSet">
      <MemberSignature Language="C#" Value="public IntPtr MinWorkingSet { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int MinWorkingSet" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.MinWorkingSet" />
      <MemberSignature Language="VB.NET" Value="Public Property MinWorkingSet As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IntPtr MinWorkingSet { IntPtr get(); void set(IntPtr value); };" />
      <MemberSignature Language="F#" Value="member this.MinWorkingSet : nativeint with get, set" Usage="System.Diagnostics.Process.MinWorkingSet" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.Diagnostics.MonitoringDescription("ProcessMinWorkingSet")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.MonitoringDescription("ProcessMinWorkingSet")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Diagnostics.MonitoringDescription("The minimum amount of physical memory the process has required since it was started.")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.MonitoringDescription("The minimum amount of physical memory the process has required since it was started.")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7e18d-726">获取或设置关联进程允许的最小工作集大小（以字节为单位）。</span><span class="sxs-lookup"><span data-stu-id="7e18d-726">Gets or sets the minimum allowable working set size, in bytes, for the associated process.</span></span></summary>
        <value><span data-ttu-id="7e18d-727">内存中进程所需的最小工作集大小（以字节为单位）。</span><span class="sxs-lookup"><span data-stu-id="7e18d-727">The minimum working set size that is required in memory for the process, in bytes.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The working set of a process is the set of memory pages currently visible to the process in physical RAM memory. These pages are resident and available for an application to use without triggering a page fault.  
  
 The working set includes both shared and private data. <span data-ttu-id="7e18d-731">共享数据包括包含应用程序执行的所有说明的页面，包括 .dll 文件中的页面和 system.dll 的文件。</span><span class="sxs-lookup"><span data-stu-id="7e18d-731">The shared data includes the pages that contain all the instructions that your application executes, including the pages in your .dll files and the system.dll files.</span></span> <span data-ttu-id="7e18d-732">随着工作集大小的增加，内存需求也会增加。</span><span class="sxs-lookup"><span data-stu-id="7e18d-732">As the working set size increases, memory demand increases.</span></span>  
  
 <span data-ttu-id="7e18d-733">进程具有最小和最大工作集大小。</span><span class="sxs-lookup"><span data-stu-id="7e18d-733">A process has minimum and maximum working set sizes.</span></span> <span data-ttu-id="7e18d-734">每次创建进程资源时，系统会保留相当于进程的最小工作集大小的内存量。</span><span class="sxs-lookup"><span data-stu-id="7e18d-734">Each time a process resource is created, the system reserves an amount of memory equal to the minimum working set size for the process.</span></span> <span data-ttu-id="7e18d-735">当进程处于活动状态时，虚拟内存管理器将尝试至少保留最少的内存，但不会超过最大大小。</span><span class="sxs-lookup"><span data-stu-id="7e18d-735">The virtual memory manager attempts to keep at least the minimum amount of memory resident when the process is active, but it never keeps more than the maximum size.</span></span>  
  
 <span data-ttu-id="7e18d-736">系统设置默认的工作集大小。</span><span class="sxs-lookup"><span data-stu-id="7e18d-736">The system sets the default working set sizes.</span></span> <span data-ttu-id="7e18d-737">您可以使用和成员修改这些 <xref:System.Diagnostics.Process.MaxWorkingSet%2A> 大小 <xref:System.Diagnostics.Process.MinWorkingSet%2A> 。</span><span class="sxs-lookup"><span data-stu-id="7e18d-737">You can modify these sizes using the <xref:System.Diagnostics.Process.MaxWorkingSet%2A> and <xref:System.Diagnostics.Process.MinWorkingSet%2A> members.</span></span> <span data-ttu-id="7e18d-738">但是，设置这些值不能保证保留或驻留内存。</span><span class="sxs-lookup"><span data-stu-id="7e18d-738">However, setting these values does not guarantee that the memory will be reserved or resident.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7e18d-739">增大进程的工作集大小时，会从系统的其余部分中取出物理内存。</span><span class="sxs-lookup"><span data-stu-id="7e18d-739">When you increase the working set size of a process, you take physical memory away from the rest of the system.</span></span> <span data-ttu-id="7e18d-740">请确保未请求的最小或最大工作集大小太大，因为这样做可能会降低系统性能。</span><span class="sxs-lookup"><span data-stu-id="7e18d-740">Ensure that you do not request a minimum or maximum working set size that is too large, because doing so can degrade system performance.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="7e18d-741">最小工作集大小无效。</span><span class="sxs-lookup"><span data-stu-id="7e18d-741">The minimum working set size is invalid.</span></span> <span data-ttu-id="7e18d-742">它必须小于或等于最大工作集大小。</span><span class="sxs-lookup"><span data-stu-id="7e18d-742">It must be less than or equal to the maximum working set size.</span></span></exception>
        <exception cref="T:System.ComponentModel.Win32Exception"><span data-ttu-id="7e18d-743">无法从关联的进程资源中检索工作集信息。</span><span class="sxs-lookup"><span data-stu-id="7e18d-743">Working set information cannot be retrieved from the associated process resource.</span></span>  
  
 <span data-ttu-id="7e18d-744">- 或 -</span><span class="sxs-lookup"><span data-stu-id="7e18d-744">-or-</span></span>  
  
 <span data-ttu-id="7e18d-745">进程标识符或进程句柄为零，因为尚未启动该进程。</span><span class="sxs-lookup"><span data-stu-id="7e18d-745">The process identifier or process handle is zero because the process has not been started.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="7e18d-746">你正尝试访问在远程计算机上运行的进程的 <see cref="P:System.Diagnostics.Process.MinWorkingSet" /> 属性。</span><span class="sxs-lookup"><span data-stu-id="7e18d-746">You are trying to access the <see cref="P:System.Diagnostics.Process.MinWorkingSet" /> property for a process that is running on a remote computer.</span></span> <span data-ttu-id="7e18d-747">此属性仅可用于本地计算机上运行的进程。</span><span class="sxs-lookup"><span data-stu-id="7e18d-747">This property is available only for processes that are running on the local computer.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="7e18d-748">进程 <see cref="P:System.Diagnostics.Process.Id" /> 不可用。</span><span class="sxs-lookup"><span data-stu-id="7e18d-748">The process <see cref="P:System.Diagnostics.Process.Id" /> is not available.</span></span>  
  
<span data-ttu-id="7e18d-749">- 或 -</span><span class="sxs-lookup"><span data-stu-id="7e18d-749">-or-</span></span> 
<span data-ttu-id="7e18d-750">该进程已退出。</span><span class="sxs-lookup"><span data-stu-id="7e18d-750">The process has exited.</span></span></exception>
        <altmember cref="P:System.Diagnostics.Process.MaxWorkingSet" />
        <altmember cref="P:System.Diagnostics.Process.WorkingSet64" />
        <altmember cref="P:System.Diagnostics.Process.PeakWorkingSet64" />
      </Docs>
    </Member>
    <Member MemberName="Modules">
      <MemberSignature Language="C#" Value="public System.Diagnostics.ProcessModuleCollection Modules { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Diagnostics.ProcessModuleCollection Modules" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.Modules" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Modules As ProcessModuleCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Diagnostics::ProcessModuleCollection ^ Modules { System::Diagnostics::ProcessModuleCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Modules : System.Diagnostics.ProcessModuleCollection" Usage="System.Diagnostics.Process.Modules" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.Diagnostics.MonitoringDescription("ProcessModules")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.MonitoringDescription("ProcessModules")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Diagnostics.MonitoringDescription("The modules that are loaded as part of this process.")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.MonitoringDescription("The modules that are loaded as part of this process.")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Diagnostics.ProcessModuleCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7e18d-751">获取已由关联进程加载的模块。</span><span class="sxs-lookup"><span data-stu-id="7e18d-751">Gets the modules that have been loaded by the associated process.</span></span></summary>
        <value><span data-ttu-id="7e18d-752">类型 <see cref="T:System.Diagnostics.ProcessModule" /> 的数组，表示已由关联进程加载的模块。</span><span class="sxs-lookup"><span data-stu-id="7e18d-752">An array of type <see cref="T:System.Diagnostics.ProcessModule" /> that represents the modules that have been loaded by the associated process.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A process module represents a.dll or .exe file that is loaded into a particular process. A <ph id="ph1">&lt;xref:System.Diagnostics.ProcessModule&gt;</ph> instance lets you view information about a module, including the module name, file name, and module memory details.  
  
 A process can load multiple modules into memory. <span data-ttu-id="7e18d-756">例如，加载其他 .dll 文件的 .exe 文件具有多个模块。</span><span class="sxs-lookup"><span data-stu-id="7e18d-756">For example,.exe files that load additional .dll files have multiple modules.</span></span>  
  
 <span data-ttu-id="7e18d-757">启动进程后，在系统加载进程之前，此集合为空。</span><span class="sxs-lookup"><span data-stu-id="7e18d-757">After starting the process, this collection is empty until the system has loaded the process.</span></span> <span data-ttu-id="7e18d-758">如果进程具有主窗口，您可以在 <xref:System.Diagnostics.Process.WaitForInputIdle%2A> 检索此属性之前调用，以确保获取列表时该集合是非空的。</span><span class="sxs-lookup"><span data-stu-id="7e18d-758">If the process has a main window, you can call <xref:System.Diagnostics.Process.WaitForInputIdle%2A> before retrieving this property to ensure that the collection is nonempty when you get the list.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="7e18d-759">你正试图访问在远程计算机上运行的进程的 <see cref="P:System.Diagnostics.Process.Modules" /> 属性。</span><span class="sxs-lookup"><span data-stu-id="7e18d-759">You are attempting to access the <see cref="P:System.Diagnostics.Process.Modules" /> property for a process that is running on a remote computer.</span></span> <span data-ttu-id="7e18d-760">此属性仅可用于本地计算机上运行的进程。</span><span class="sxs-lookup"><span data-stu-id="7e18d-760">This property is available only for processes that are running on the local computer.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="7e18d-761">进程 <see cref="P:System.Diagnostics.Process.Id" /> 不可用。</span><span class="sxs-lookup"><span data-stu-id="7e18d-761">The process <see cref="P:System.Diagnostics.Process.Id" /> is not available.</span></span></exception>
        <exception cref="T:System.ComponentModel.Win32Exception"><span data-ttu-id="7e18d-762">您尝试访问系统进程或 Idle 进程的 <see cref="P:System.Diagnostics.Process.Modules" /> 属性。</span><span class="sxs-lookup"><span data-stu-id="7e18d-762">You are attempting to access the <see cref="P:System.Diagnostics.Process.Modules" /> property for either the system process or the idle process.</span></span> <span data-ttu-id="7e18d-763">这些进程没有模块。</span><span class="sxs-lookup"><span data-stu-id="7e18d-763">These processes do not have modules.</span></span></exception>
        <altmember cref="T:System.Diagnostics.ProcessModule" />
      </Docs>
    </Member>
    <Member MemberName="NonpagedSystemMemorySize">
      <MemberSignature Language="C#" Value="public int NonpagedSystemMemorySize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 NonpagedSystemMemorySize" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.NonpagedSystemMemorySize" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property NonpagedSystemMemorySize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int NonpagedSystemMemorySize { int get(); };" />
      <MemberSignature Language="F#" Value="member this.NonpagedSystemMemorySize : int" Usage="System.Diagnostics.Process.NonpagedSystemMemorySize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0">
          <AttributeName Language="C#">[System.Obsolete("This property has been deprecated.  Please use System.Diagnostics.Process.NonpagedSystemMemorySize64 instead.  http://go.microsoft.com/fwlink/?linkid=14202")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("This property has been deprecated.  Please use System.Diagnostics.Process.NonpagedSystemMemorySize64 instead.  http://go.microsoft.com/fwlink/?linkid=14202")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-3.0;netcore-3.1;netstandard-2.1">
          <AttributeName Language="C#">[System.Obsolete("This property has been deprecated.  Please use System.Diagnostics.Process.NonpagedSystemMemorySize64 instead.  https://go.microsoft.com/fwlink/?linkid=14202")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("This property has been deprecated.  Please use System.Diagnostics.Process.NonpagedSystemMemorySize64 instead.  https://go.microsoft.com/fwlink/?linkid=14202")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.Diagnostics.MonitoringDescription("ProcessNonpagedSystemMemorySize")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.MonitoringDescription("ProcessNonpagedSystemMemorySize")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Diagnostics.MonitoringDescription("The number of bytes that are not pageable.")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.MonitoringDescription("The number of bytes that are not pageable.")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.MonoTODO]</AttributeName>
          <AttributeName Language="F#">[&lt;System.MonoTODO&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Obsolete("Use NonpagedSystemMemorySize64")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("Use NonpagedSystemMemorySize64")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7e18d-764">获取为关联的进程分配的非分页系统内存量（以字节为单位）。</span><span class="sxs-lookup"><span data-stu-id="7e18d-764">Gets the amount of nonpaged system memory, in bytes, allocated for the associated process.</span></span></summary>
        <value><span data-ttu-id="7e18d-765">系统已为无法写入到虚拟内存分页文件的关联进程分配的内存量（以字节为单位）。</span><span class="sxs-lookup"><span data-stu-id="7e18d-765">The amount of memory, in bytes, the system has allocated for the associated process that cannot be written to the virtual memory paging file.</span></span></value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Diagnostics.Process.NonpagedSystemMemorySize64" />
      </Docs>
    </Member>
    <Member MemberName="NonpagedSystemMemorySize64">
      <MemberSignature Language="C#" Value="public long NonpagedSystemMemorySize64 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 NonpagedSystemMemorySize64" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.NonpagedSystemMemorySize64" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property NonpagedSystemMemorySize64 As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long NonpagedSystemMemorySize64 { long get(); };" />
      <MemberSignature Language="F#" Value="member this.NonpagedSystemMemorySize64 : int64" Usage="System.Diagnostics.Process.NonpagedSystemMemorySize64" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.Diagnostics.MonitoringDescription("ProcessNonpagedSystemMemorySize")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.MonitoringDescription("ProcessNonpagedSystemMemorySize")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Runtime.InteropServices.ComVisible(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.ComVisible(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Diagnostics.MonitoringDescription("The number of bytes that are not pageable.")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.MonitoringDescription("The number of bytes that are not pageable.")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.MonoTODO]</AttributeName>
          <AttributeName Language="F#">[&lt;System.MonoTODO&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7e18d-766">获取为关联的进程分配的非分页系统内存量（以字节为单位）。</span><span class="sxs-lookup"><span data-stu-id="7e18d-766">Gets the amount of nonpaged system memory, in bytes, allocated for the associated process.</span></span></summary>
        <value><span data-ttu-id="7e18d-767">为关联的进程分配的、不能写入虚拟内存分页文件中的系统内存量（以字节为单位）。</span><span class="sxs-lookup"><span data-stu-id="7e18d-767">The amount of system memory, in bytes, allocated for the associated process that cannot be written to the virtual memory paging file.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The value returned by this property represents the current size of nonpaged system memory used by the process, in bytes. System memory is the physical memory used by the operating system, and is divided into paged and nonpaged pools. Nonpaged memory allocations remain in system memory and are not paged out to the virtual memory paging file.  
  
 <span data-ttu-id="7e18d-771">此属性可用于监视包含32位处理器或64位处理器的计算机上的内存使用情况。</span><span class="sxs-lookup"><span data-stu-id="7e18d-771">This property can be used to monitor memory usage on computers with 32-bit processors or 64-bit processors.</span></span> <span data-ttu-id="7e18d-772">属性值等效于进程的 " **池非分页字节数** " 性能计数器。</span><span class="sxs-lookup"><span data-stu-id="7e18d-772">The property value is equivalent to the **Pool Nonpaged Bytes** performance counter for the process.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7e18d-773">下面的代码示例启动记事本应用程序的实例。</span><span class="sxs-lookup"><span data-stu-id="7e18d-773">The following code example starts an instance of the Notepad application.</span></span> <span data-ttu-id="7e18d-774">然后，该示例检索并显示关联进程的各种属性。</span><span class="sxs-lookup"><span data-stu-id="7e18d-774">The example then retrieves and displays various properties of the associated process.</span></span> <span data-ttu-id="7e18d-775">该示例在进程退出时进行检测，并显示其退出代码和高峰内存统计信息。</span><span class="sxs-lookup"><span data-stu-id="7e18d-775">The example detects when the process exits, and displays its exit code and peak memory statistics.</span></span>  
  
 [!code-cpp[Diag_Process_MemoryProperties64#1](~/samples/snippets/cpp/VS_Snippets_CLR/Diag_Process_MemoryProperties64/CPP/source.cpp#1)]
 [!code-csharp[Diag_Process_MemoryProperties64#1](~/samples/snippets/csharp/VS_Snippets_CLR/Diag_Process_MemoryProperties64/CS/source.cs#1)]
 [!code-vb[Diag_Process_MemoryProperties64#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Diag_Process_MemoryProperties64/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.Process.PagedSystemMemorySize64" />
      </Docs>
    </Member>
    <Member MemberName="OnExited">
      <MemberSignature Language="C#" Value="protected void OnExited ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void OnExited() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Process.OnExited" />
      <MemberSignature Language="VB.NET" Value="Protected Sub OnExited ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void OnExited();" />
      <MemberSignature Language="F#" Value="member this.OnExited : unit -&gt; unit" Usage="process.OnExited " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7e18d-776">引发 <see cref="E:System.Diagnostics.Process.Exited" /> 事件。</span><span class="sxs-lookup"><span data-stu-id="7e18d-776">Raises the <see cref="E:System.Diagnostics.Process.Exited" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <ph id="ph1">&lt;xref:System.Diagnostics.Process.OnExited%2A&gt;</ph> is the API method that raises the <ph id="ph2">&lt;xref:System.Diagnostics.Process.Exited&gt;</ph> event. Calling <ph id="ph1">&lt;xref:System.Diagnostics.Process.OnExited%2A&gt;</ph> causes the <ph id="ph2">&lt;xref:System.Diagnostics.Process.Exited&gt;</ph> event to occur and is the only way to raise the event using the <ph id="ph3">&lt;xref:System.Diagnostics.Process&gt;</ph> component. <ph id="ph1">&lt;xref:System.Diagnostics.Process.OnExited%2A&gt;</ph> is primarily used when deriving classes from the component.  
  
 <span data-ttu-id="7e18d-780">作为的替代方法 <xref:System.Diagnostics.Process.OnExited%2A> ，您可以编写自己的事件处理程序。</span><span class="sxs-lookup"><span data-stu-id="7e18d-780">As an alternative to <xref:System.Diagnostics.Process.OnExited%2A>, you can write your own event handler.</span></span> <span data-ttu-id="7e18d-781">创建自己的事件处理程序委托和自己的事件处理方法。</span><span class="sxs-lookup"><span data-stu-id="7e18d-781">You create your own event handler delegate and your own event-handling method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7e18d-782">如果你使用的是 Visual Studio 环境，则在将 <xref:System.Diagnostics.Process> 组件拖到窗体上并双击图标时，将为你创建一个事件处理程序委托 (AddOnExited) 和一个事件处理方法 (Process1_Exited) 。</span><span class="sxs-lookup"><span data-stu-id="7e18d-782">If you are using the Visual Studio environment, an event handler delegate (AddOnExited) and an event-handling method (Process1_Exited) are created for you when you drag a <xref:System.Diagnostics.Process> component onto a form and double-click the icon.</span></span> <span data-ttu-id="7e18d-783">在事件发生时创建的代码 <xref:System.Diagnostics.Process.Exited> 将输入到 Process1_Exited 过程中。</span><span class="sxs-lookup"><span data-stu-id="7e18d-783">The code you create to run when the <xref:System.Diagnostics.Process.Exited> event occurs is entered into the Process1_Exited procedure.</span></span> <span data-ttu-id="7e18d-784">您无需创建 <xref:System.Diagnostics.Process.OnExited%2A> 成员，因为它是为您实现的。</span><span class="sxs-lookup"><span data-stu-id="7e18d-784">You do not need to create the <xref:System.Diagnostics.Process.OnExited%2A> member, because it is implemented for you.</span></span>  
  
 <span data-ttu-id="7e18d-785">引发事件时，将通过委托调用事件处理程序。</span><span class="sxs-lookup"><span data-stu-id="7e18d-785">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="7e18d-786">有关概述，请参阅 [处理和引发事件](/dotnet/standard/events/)。</span><span class="sxs-lookup"><span data-stu-id="7e18d-786">For an overview, see [Handling and Raising Events](/dotnet/standard/events/).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7e18d-787">下面的示例演示如何使用 <xref:System.Diagnostics.Process.OnExited%2A> 派生类中的方法。</span><span class="sxs-lookup"><span data-stu-id="7e18d-787">The following example shows how to use the <xref:System.Diagnostics.Process.OnExited%2A> method in a derived class.</span></span>  
  
 [!code-csharp[OnExitSample#1](~/samples/snippets/csharp/VS_Snippets_CLR/onexitsample/cs/program.cs#1)]
 [!code-vb[OnExitSample#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/onexitsample/vb/program.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Diagnostics.Process.Exited" />
      </Docs>
    </Member>
    <Member MemberName="OutputDataReceived">
      <MemberSignature Language="C#" Value="public event System.Diagnostics.DataReceivedEventHandler OutputDataReceived;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Diagnostics.DataReceivedEventHandler OutputDataReceived" />
      <MemberSignature Language="DocId" Value="E:System.Diagnostics.Process.OutputDataReceived" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event OutputDataReceived As DataReceivedEventHandler " FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Diagnostics::DataReceivedEventHandler ^ OutputDataReceived;" />
      <MemberSignature Language="F#" Value="member this.OutputDataReceived : System.Diagnostics.DataReceivedEventHandler " Usage="member this.OutputDataReceived : System.Diagnostics.DataReceivedEventHandler " />
      <MemberSignature Language="VB.NET" Value="Public Event OutputDataReceived As DataReceivedEventHandler " FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.ComponentModel.Browsable(true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(true)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.Diagnostics.MonitoringDescription("ProcessAssociated")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.MonitoringDescription("ProcessAssociated")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Diagnostics.MonitoringDescription("Indicates if the process component is associated with a real process.")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.MonitoringDescription("Indicates if the process component is associated with a real process.")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Diagnostics.DataReceivedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7e18d-788">每次应用程序向其重定向 <see cref="P:System.Diagnostics.Process.StandardOutput" /> 流中写入行时发生。</span><span class="sxs-lookup"><span data-stu-id="7e18d-788">Occurs each time an application writes a line to its redirected <see cref="P:System.Diagnostics.Process.StandardOutput" /> stream.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <ph id="ph1">&lt;xref:System.Diagnostics.Process.OutputDataReceived&gt;</ph> event indicates that the associated <ph id="ph2">&lt;xref:System.Diagnostics.Process&gt;</ph> has written a line that's terminated with a newline (carriage return (CR), line feed (LF), or CR+LF) to its redirected <ph id="ph3">&lt;xref:System.Diagnostics.Process.StandardOutput%2A&gt;</ph> stream.
  
 The event is enabled during asynchronous read operations on <ph id="ph1">&lt;xref:System.Diagnostics.Process.StandardOutput%2A&gt;</ph>. To start asynchronous read operations, you must redirect the <ph id="ph1">&lt;xref:System.Diagnostics.Process.StandardOutput%2A&gt;</ph> stream of a <ph id="ph2">&lt;xref:System.Diagnostics.Process&gt;</ph>, add your event handler to the <ph id="ph3">&lt;xref:System.Diagnostics.Process.OutputDataReceived&gt;</ph> event, and call <ph id="ph4">&lt;xref:System.Diagnostics.Process.BeginOutputReadLine%2A&gt;</ph>. <span data-ttu-id="7e18d-792">此后， <xref:System.Diagnostics.Process.OutputDataReceived> 每次进程将行写入重定向的流时，都会发出事件信号 <xref:System.Diagnostics.Process.StandardOutput%2A> ，直到进程退出或调用 <xref:System.Diagnostics.Process.CancelOutputRead%2A> 。</span><span class="sxs-lookup"><span data-stu-id="7e18d-792">Thereafter, the <xref:System.Diagnostics.Process.OutputDataReceived> event signals each time the process writes a line to the redirected <xref:System.Diagnostics.Process.StandardOutput%2A> stream, until the process exits or calls <xref:System.Diagnostics.Process.CancelOutputRead%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7e18d-793">处理异步输出的应用程序应调用 <xref:System.Diagnostics.Process.WaitForExit%2A> 方法，以确保刷新了输出缓冲区。</span><span class="sxs-lookup"><span data-stu-id="7e18d-793">The application that is processing the asynchronous output should call the <xref:System.Diagnostics.Process.WaitForExit%2A> method to ensure that the output buffer has been flushed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7e18d-794">下面的示例演示如何在命令的重定向流上执行异步读取操作 <xref:System.Diagnostics.Process.StandardOutput%2A> `ipconfig` 。</span><span class="sxs-lookup"><span data-stu-id="7e18d-794">The following example illustrates how to perform asynchronous read operations on the redirected <xref:System.Diagnostics.Process.StandardOutput%2A> stream of the `ipconfig` command.</span></span>  
  
 <span data-ttu-id="7e18d-795">该示例创建 `OutputHandler` 事件处理程序的事件委托，并将其与事件相关联 <xref:System.Diagnostics.Process.OutputDataReceived> 。</span><span class="sxs-lookup"><span data-stu-id="7e18d-795">The example creates an event delegate for the `OutputHandler` event handler and associates it with the <xref:System.Diagnostics.Process.OutputDataReceived> event.</span></span> <span data-ttu-id="7e18d-796">该事件处理程序从重定向的流接收文本行 <xref:System.Diagnostics.Process.StandardOutput%2A> ，设置文本的格式，并将其保存在稍后显示在该示例的控制台窗口中的输出字符串中。</span><span class="sxs-lookup"><span data-stu-id="7e18d-796">The event handler receives text lines from the redirected <xref:System.Diagnostics.Process.StandardOutput%2A> stream, formats the text, and saves it in an output string that's later shown in the example's console window.</span></span>  
  
 [!code-cpp[Process_AsyncStreams#4](~/samples/snippets/cpp/VS_Snippets_CLR/process_asyncstreams/CPP/datareceivedevent.cpp#4)]
 [!code-csharp[Process_AsyncStreams#4](~/samples/snippets/csharp/VS_Snippets_CLR/process_asyncstreams/CS/datareceivedevent.cs#4)]
 [!code-vb[Process_AsyncStreams#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/process_asyncstreams/VB/datareceivedevent.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardOutput" />
        <altmember cref="P:System.Diagnostics.Process.StandardOutput" />
        <altmember cref="M:System.Diagnostics.Process.BeginOutputReadLine" />
        <altmember cref="M:System.Diagnostics.Process.CancelOutputRead" />
        <altmember cref="T:System.Diagnostics.DataReceivedEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="PagedMemorySize">
      <MemberSignature Language="C#" Value="public int PagedMemorySize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 PagedMemorySize" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.PagedMemorySize" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PagedMemorySize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int PagedMemorySize { int get(); };" />
      <MemberSignature Language="F#" Value="member this.PagedMemorySize : int" Usage="System.Diagnostics.Process.PagedMemorySize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0">
          <AttributeName Language="C#">[System.Obsolete("This property has been deprecated.  Please use System.Diagnostics.Process.PagedMemorySize64 instead.  http://go.microsoft.com/fwlink/?linkid=14202")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("This property has been deprecated.  Please use System.Diagnostics.Process.PagedMemorySize64 instead.  http://go.microsoft.com/fwlink/?linkid=14202")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-3.0;netcore-3.1;netstandard-2.1">
          <AttributeName Language="C#">[System.Obsolete("This property has been deprecated.  Please use System.Diagnostics.Process.PagedMemorySize64 instead.  https://go.microsoft.com/fwlink/?linkid=14202")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("This property has been deprecated.  Please use System.Diagnostics.Process.PagedMemorySize64 instead.  https://go.microsoft.com/fwlink/?linkid=14202")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.Diagnostics.MonitoringDescription("ProcessPagedMemorySize")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.MonitoringDescription("ProcessPagedMemorySize")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Diagnostics.MonitoringDescription("The number of bytes that are paged.")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.MonitoringDescription("The number of bytes that are paged.")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Obsolete("Use PagedMemorySize64")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("Use PagedMemorySize64")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7e18d-797">获取为关联的进程分配的分页内存量（以字节为单位）。</span><span class="sxs-lookup"><span data-stu-id="7e18d-797">Gets the amount of paged memory, in bytes, allocated for the associated process.</span></span></summary>
        <value><span data-ttu-id="7e18d-798">由可写入到虚拟内存分页文件的关联进程分配的内存量（以字节为单位）。</span><span class="sxs-lookup"><span data-stu-id="7e18d-798">The amount of memory, in bytes, allocated by the associated process that can be written to the virtual memory paging file.</span></span></value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Diagnostics.Process.PagedMemorySize64" />
      </Docs>
    </Member>
    <Member MemberName="PagedMemorySize64">
      <MemberSignature Language="C#" Value="public long PagedMemorySize64 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 PagedMemorySize64" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.PagedMemorySize64" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PagedMemorySize64 As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long PagedMemorySize64 { long get(); };" />
      <MemberSignature Language="F#" Value="member this.PagedMemorySize64 : int64" Usage="System.Diagnostics.Process.PagedMemorySize64" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.Diagnostics.MonitoringDescription("ProcessPagedMemorySize")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.MonitoringDescription("ProcessPagedMemorySize")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Runtime.InteropServices.ComVisible(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.ComVisible(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Diagnostics.MonitoringDescription("The number of bytes that are paged.")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.MonitoringDescription("The number of bytes that are paged.")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7e18d-799">获取为关联的进程分配的分页内存量（以字节为单位）。</span><span class="sxs-lookup"><span data-stu-id="7e18d-799">Gets the amount of paged memory, in bytes, allocated for the associated process.</span></span></summary>
        <value><span data-ttu-id="7e18d-800">在虚拟内存分页文件中为关联进程分配的内存量(以字节为单位)。</span><span class="sxs-lookup"><span data-stu-id="7e18d-800">The amount of memory, in bytes, allocated in the virtual memory paging file for the associated process.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The value returned by this property represents the current size of memory in the virtual memory paging file used by the process, in bytes. The operating system uses the virtual memory paging file in conjunction with physical memory to manage the virtual address space for each process. When pageable memory is not in use, it can be transferred to the virtual memory paging file on disk. <span data-ttu-id="7e18d-804">若要获取由操作系统为进程使用的内存大小，请使用 <xref:System.Diagnostics.Process.PagedSystemMemorySize64%2A> 属性。</span><span class="sxs-lookup"><span data-stu-id="7e18d-804">To obtain the size of memory used by the operating system for the process, use the <xref:System.Diagnostics.Process.PagedSystemMemorySize64%2A> property.</span></span>  
  
 <span data-ttu-id="7e18d-805">此属性可用于监视包含32位处理器或64位处理器的计算机上的内存使用情况。</span><span class="sxs-lookup"><span data-stu-id="7e18d-805">This property can be used to monitor memory usage on computers with 32-bit processors or 64-bit processors.</span></span> <span data-ttu-id="7e18d-806">属性值等效于进程的 **Page File Bytes** 性能计数器。</span><span class="sxs-lookup"><span data-stu-id="7e18d-806">The property value is equivalent to the **Page File Bytes** performance counter for the process.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7e18d-807">下面的代码示例启动记事本应用程序的实例，然后检索并显示关联进程的各种属性。</span><span class="sxs-lookup"><span data-stu-id="7e18d-807">The following code example starts an instance of the Notepad application, and then retrieves and displays various properties of the associated process.</span></span> <span data-ttu-id="7e18d-808">该示例在进程退出时进行检测，并显示其退出代码和高峰内存统计信息。</span><span class="sxs-lookup"><span data-stu-id="7e18d-808">The example detects when the process exits, and displays its exit code and peak memory statistics.</span></span>  
  
 [!code-cpp[Diag_Process_MemoryProperties64#1](~/samples/snippets/cpp/VS_Snippets_CLR/Diag_Process_MemoryProperties64/CPP/source.cpp#1)]
 [!code-csharp[Diag_Process_MemoryProperties64#1](~/samples/snippets/csharp/VS_Snippets_CLR/Diag_Process_MemoryProperties64/CS/source.cs#1)]
 [!code-vb[Diag_Process_MemoryProperties64#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Diag_Process_MemoryProperties64/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.Process.PeakPagedMemorySize64" />
        <altmember cref="P:System.Diagnostics.Process.PagedSystemMemorySize64" />
      </Docs>
    </Member>
    <Member MemberName="PagedSystemMemorySize">
      <MemberSignature Language="C#" Value="public int PagedSystemMemorySize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 PagedSystemMemorySize" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.PagedSystemMemorySize" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PagedSystemMemorySize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int PagedSystemMemorySize { int get(); };" />
      <MemberSignature Language="F#" Value="member this.PagedSystemMemorySize : int" Usage="System.Diagnostics.Process.PagedSystemMemorySize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0">
          <AttributeName Language="C#">[System.Obsolete("This property has been deprecated.  Please use System.Diagnostics.Process.PagedSystemMemorySize64 instead.  http://go.microsoft.com/fwlink/?linkid=14202")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("This property has been deprecated.  Please use System.Diagnostics.Process.PagedSystemMemorySize64 instead.  http://go.microsoft.com/fwlink/?linkid=14202")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-3.0;netcore-3.1;netstandard-2.1">
          <AttributeName Language="C#">[System.Obsolete("This property has been deprecated.  Please use System.Diagnostics.Process.PagedSystemMemorySize64 instead.  https://go.microsoft.com/fwlink/?linkid=14202")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("This property has been deprecated.  Please use System.Diagnostics.Process.PagedSystemMemorySize64 instead.  https://go.microsoft.com/fwlink/?linkid=14202")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.Diagnostics.MonitoringDescription("ProcessPagedSystemMemorySize")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.MonitoringDescription("ProcessPagedSystemMemorySize")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Diagnostics.MonitoringDescription("The amount of paged system memory in bytes.")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.MonitoringDescription("The amount of paged system memory in bytes.")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Obsolete("Use PagedSystemMemorySize64")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("Use PagedSystemMemorySize64")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7e18d-809">获取为关联进程分配的可分页系统内存量（以字节为单位）。</span><span class="sxs-lookup"><span data-stu-id="7e18d-809">Gets the amount of pageable system memory, in bytes, allocated for the associated process.</span></span></summary>
        <value><span data-ttu-id="7e18d-810">系统已为可写入到虚拟内存页面文件的关联进程分配的内存量(以字节为单位)。</span><span class="sxs-lookup"><span data-stu-id="7e18d-810">The amount of memory, in bytes, the system has allocated for the associated process that can be written to the virtual memory paging file.</span></span></value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Diagnostics.Process.PagedSystemMemorySize64" />
      </Docs>
    </Member>
    <Member MemberName="PagedSystemMemorySize64">
      <MemberSignature Language="C#" Value="public long PagedSystemMemorySize64 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 PagedSystemMemorySize64" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.PagedSystemMemorySize64" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PagedSystemMemorySize64 As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long PagedSystemMemorySize64 { long get(); };" />
      <MemberSignature Language="F#" Value="member this.PagedSystemMemorySize64 : int64" Usage="System.Diagnostics.Process.PagedSystemMemorySize64" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.Diagnostics.MonitoringDescription("ProcessPagedSystemMemorySize")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.MonitoringDescription("ProcessPagedSystemMemorySize")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Runtime.InteropServices.ComVisible(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.ComVisible(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Diagnostics.MonitoringDescription("The amount of paged system memory in bytes.")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.MonitoringDescription("The amount of paged system memory in bytes.")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7e18d-811">获取为关联进程分配的可分页系统内存量（以字节为单位）。</span><span class="sxs-lookup"><span data-stu-id="7e18d-811">Gets the amount of pageable system memory, in bytes, allocated for the associated process.</span></span></summary>
        <value><span data-ttu-id="7e18d-812">为可写入虚拟内存分页文件的关联内存分配的系统内存量（以字节为单位）。</span><span class="sxs-lookup"><span data-stu-id="7e18d-812">The amount of system memory, in bytes, allocated for the associated process that can be written to the virtual memory paging file.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The value returned by this property value represents the current size of pageable system memory used by the process, in bytes. System memory is the physical memory used by the operating system, and is divided into paged and nonpaged pools. When pageable memory is not in use, it can be transferred to the virtual memory paging file on disk. <span data-ttu-id="7e18d-816">若要获取进程使用的应用程序内存大小，请使用 <xref:System.Diagnostics.Process.PagedMemorySize64%2A> 属性。</span><span class="sxs-lookup"><span data-stu-id="7e18d-816">To obtain the size of the application memory used by the process, use the <xref:System.Diagnostics.Process.PagedMemorySize64%2A> property.</span></span>  
  
 <span data-ttu-id="7e18d-817">此属性可用于监视包含32位处理器或64位处理器的计算机上的内存使用情况。</span><span class="sxs-lookup"><span data-stu-id="7e18d-817">This property can be used to monitor memory usage on computers with 32-bit processors or 64-bit processors.</span></span> <span data-ttu-id="7e18d-818">属性值等效于进程的 " **池分页字节数** " 性能计数器。</span><span class="sxs-lookup"><span data-stu-id="7e18d-818">The property value is equivalent to the **Pool Paged Bytes** performance counter for the process.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7e18d-819">下面的代码示例启动记事本应用程序的实例。</span><span class="sxs-lookup"><span data-stu-id="7e18d-819">The following code example starts an instance of the Notepad application.</span></span> <span data-ttu-id="7e18d-820">然后，该示例检索并显示关联进程的各种属性。</span><span class="sxs-lookup"><span data-stu-id="7e18d-820">The example then retrieves and displays various properties of the associated process.</span></span> <span data-ttu-id="7e18d-821">该示例在进程退出时进行检测，并显示其退出代码和高峰内存统计信息。</span><span class="sxs-lookup"><span data-stu-id="7e18d-821">The example detects when the process exits, and displays its exit code and peak memory statistics.</span></span>  
  
 [!code-cpp[Diag_Process_MemoryProperties64#1](~/samples/snippets/cpp/VS_Snippets_CLR/Diag_Process_MemoryProperties64/CPP/source.cpp#1)]
 [!code-csharp[Diag_Process_MemoryProperties64#1](~/samples/snippets/csharp/VS_Snippets_CLR/Diag_Process_MemoryProperties64/CS/source.cs#1)]
 [!code-vb[Diag_Process_MemoryProperties64#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Diag_Process_MemoryProperties64/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.Process.PagedSystemMemorySize64" />
        <altmember cref="P:System.Diagnostics.Process.NonpagedSystemMemorySize64" />
      </Docs>
    </Member>
    <Member MemberName="PeakPagedMemorySize">
      <MemberSignature Language="C#" Value="public int PeakPagedMemorySize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 PeakPagedMemorySize" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.PeakPagedMemorySize" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PeakPagedMemorySize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int PeakPagedMemorySize { int get(); };" />
      <MemberSignature Language="F#" Value="member this.PeakPagedMemorySize : int" Usage="System.Diagnostics.Process.PeakPagedMemorySize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0">
          <AttributeName Language="C#">[System.Obsolete("This property has been deprecated.  Please use System.Diagnostics.Process.PeakPagedMemorySize64 instead.  http://go.microsoft.com/fwlink/?linkid=14202")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("This property has been deprecated.  Please use System.Diagnostics.Process.PeakPagedMemorySize64 instead.  http://go.microsoft.com/fwlink/?linkid=14202")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-3.0;netcore-3.1;netstandard-2.1">
          <AttributeName Language="C#">[System.Obsolete("This property has been deprecated.  Please use System.Diagnostics.Process.PeakPagedMemorySize64 instead.  https://go.microsoft.com/fwlink/?linkid=14202")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("This property has been deprecated.  Please use System.Diagnostics.Process.PeakPagedMemorySize64 instead.  https://go.microsoft.com/fwlink/?linkid=14202")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.Diagnostics.MonitoringDescription("ProcessPeakPagedMemorySize")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.MonitoringDescription("ProcessPeakPagedMemorySize")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Diagnostics.MonitoringDescription("The maximum amount of paged memory used by this process.")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.MonitoringDescription("The maximum amount of paged memory used by this process.")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.MonoTODO]</AttributeName>
          <AttributeName Language="F#">[&lt;System.MonoTODO&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Obsolete("Use PeakPagedMemorySize64")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("Use PeakPagedMemorySize64")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7e18d-822">获取关联的进程使用的虚拟内存分页文件中的最大内存量（以字节为单位）。</span><span class="sxs-lookup"><span data-stu-id="7e18d-822">Gets the maximum amount of memory in the virtual memory paging file, in bytes, used by the associated process.</span></span></summary>
        <value><span data-ttu-id="7e18d-823">由可写入到虚拟内存分页文件的关联进程分配的最大内存量（以字节为单位）。</span><span class="sxs-lookup"><span data-stu-id="7e18d-823">The maximum amount of memory, in bytes, allocated by the associated process that could be written to the virtual memory paging file.</span></span></value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Diagnostics.Process.PeakPagedMemorySize64" />
      </Docs>
    </Member>
    <Member MemberName="PeakPagedMemorySize64">
      <MemberSignature Language="C#" Value="public long PeakPagedMemorySize64 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 PeakPagedMemorySize64" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.PeakPagedMemorySize64" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PeakPagedMemorySize64 As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long PeakPagedMemorySize64 { long get(); };" />
      <MemberSignature Language="F#" Value="member this.PeakPagedMemorySize64 : int64" Usage="System.Diagnostics.Process.PeakPagedMemorySize64" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.Diagnostics.MonitoringDescription("ProcessPeakPagedMemorySize")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.MonitoringDescription("ProcessPeakPagedMemorySize")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Runtime.InteropServices.ComVisible(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.ComVisible(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Diagnostics.MonitoringDescription("The maximum amount of paged memory used by this process.")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.MonitoringDescription("The maximum amount of paged memory used by this process.")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.MonoTODO]</AttributeName>
          <AttributeName Language="F#">[&lt;System.MonoTODO&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7e18d-824">获取关联的进程使用的虚拟内存分页文件中的最大内存量（以字节为单位）。</span><span class="sxs-lookup"><span data-stu-id="7e18d-824">Gets the maximum amount of memory in the virtual memory paging file, in bytes, used by the associated process.</span></span></summary>
        <value><span data-ttu-id="7e18d-825">从启动关联的进程以来在为虚拟内存分页文件中关联进程分配的最大内存量（以字节为单位）。</span><span class="sxs-lookup"><span data-stu-id="7e18d-825">The maximum amount of memory, in bytes, allocated in the virtual memory paging file for the associated process since it was started.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The value returned by this property value represents the maximum size of memory in the virtual memory paging file used by the process since it started, in bytes. The operating system uses the virtual memory paging file in conjunction with physical memory to manage the virtual address space for each process. When pageable memory is not in use, it can be transferred to the virtual memory paging file on disk.  
  
 <span data-ttu-id="7e18d-829">此属性可用于监视包含32位处理器或64位处理器的计算机上的内存使用情况。</span><span class="sxs-lookup"><span data-stu-id="7e18d-829">This property can be used to monitor memory usage on computers with 32-bit processors or 64-bit processors.</span></span> <span data-ttu-id="7e18d-830">属性值等效于进程的 " **页文件字节峰值** " 性能计数器。</span><span class="sxs-lookup"><span data-stu-id="7e18d-830">The property value is equivalent to the **Page File Bytes Peak** performance counter for the process.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7e18d-831">下面的代码示例启动记事本应用程序的实例。</span><span class="sxs-lookup"><span data-stu-id="7e18d-831">The following code example starts an instance of the Notepad application.</span></span> <span data-ttu-id="7e18d-832">然后，该示例检索并显示关联进程的各种属性。</span><span class="sxs-lookup"><span data-stu-id="7e18d-832">The example then retrieves and displays various properties of the associated process.</span></span> <span data-ttu-id="7e18d-833">该示例在进程退出时进行检测，并显示其退出代码和高峰内存统计信息。</span><span class="sxs-lookup"><span data-stu-id="7e18d-833">The example detects when the process exits, and displays its exit code and peak memory statistics.</span></span>  
  
 [!code-cpp[Diag_Process_MemoryProperties64#1](~/samples/snippets/cpp/VS_Snippets_CLR/Diag_Process_MemoryProperties64/CPP/source.cpp#1)]
 [!code-csharp[Diag_Process_MemoryProperties64#1](~/samples/snippets/csharp/VS_Snippets_CLR/Diag_Process_MemoryProperties64/CS/source.cs#1)]
 [!code-vb[Diag_Process_MemoryProperties64#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Diag_Process_MemoryProperties64/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.Process.PagedMemorySize64" />
      </Docs>
    </Member>
    <Member MemberName="PeakVirtualMemorySize">
      <MemberSignature Language="C#" Value="public int PeakVirtualMemorySize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 PeakVirtualMemorySize" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.PeakVirtualMemorySize" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PeakVirtualMemorySize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int PeakVirtualMemorySize { int get(); };" />
      <MemberSignature Language="F#" Value="member this.PeakVirtualMemorySize : int" Usage="System.Diagnostics.Process.PeakVirtualMemorySize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0">
          <AttributeName Language="C#">[System.Obsolete("This property has been deprecated.  Please use System.Diagnostics.Process.PeakVirtualMemorySize64 instead.  http://go.microsoft.com/fwlink/?linkid=14202")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("This property has been deprecated.  Please use System.Diagnostics.Process.PeakVirtualMemorySize64 instead.  http://go.microsoft.com/fwlink/?linkid=14202")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-3.0;netcore-3.1;netstandard-2.1">
          <AttributeName Language="C#">[System.Obsolete("This property has been deprecated.  Please use System.Diagnostics.Process.PeakVirtualMemorySize64 instead.  https://go.microsoft.com/fwlink/?linkid=14202")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("This property has been deprecated.  Please use System.Diagnostics.Process.PeakVirtualMemorySize64 instead.  https://go.microsoft.com/fwlink/?linkid=14202")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.Diagnostics.MonitoringDescription("ProcessPeakVirtualMemorySize")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.MonitoringDescription("ProcessPeakVirtualMemorySize")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Diagnostics.MonitoringDescription("The maximum amount of virtual memory used by this process.")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.MonitoringDescription("The maximum amount of virtual memory used by this process.")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Obsolete("Use PeakVirtualMemorySize64")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("Use PeakVirtualMemorySize64")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7e18d-834">获取关联进程使用的最大虚拟内存量（以字节为单位）。</span><span class="sxs-lookup"><span data-stu-id="7e18d-834">Gets the maximum amount of virtual memory, in bytes, used by the associated process.</span></span></summary>
        <value><span data-ttu-id="7e18d-835">关联进程请求的最大虚拟内存量（以字节为单位）。</span><span class="sxs-lookup"><span data-stu-id="7e18d-835">The maximum amount of virtual memory, in bytes, that the associated process has requested.</span></span></value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Diagnostics.Process.PeakVirtualMemorySize64" />
      </Docs>
    </Member>
    <Member MemberName="PeakVirtualMemorySize64">
      <MemberSignature Language="C#" Value="public long PeakVirtualMemorySize64 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 PeakVirtualMemorySize64" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.PeakVirtualMemorySize64" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PeakVirtualMemorySize64 As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long PeakVirtualMemorySize64 { long get(); };" />
      <MemberSignature Language="F#" Value="member this.PeakVirtualMemorySize64 : int64" Usage="System.Diagnostics.Process.PeakVirtualMemorySize64" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.Diagnostics.MonitoringDescription("ProcessPeakVirtualMemorySize")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.MonitoringDescription("ProcessPeakVirtualMemorySize")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Runtime.InteropServices.ComVisible(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.ComVisible(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Diagnostics.MonitoringDescription("The maximum amount of virtual memory used by this process.")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.MonitoringDescription("The maximum amount of virtual memory used by this process.")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7e18d-836">获取关联进程使用的最大虚拟内存量（以字节为单位）。</span><span class="sxs-lookup"><span data-stu-id="7e18d-836">Gets the maximum amount of virtual memory, in bytes, used by the associated process.</span></span></summary>
        <value><span data-ttu-id="7e18d-837">从关联进程启动以来为关联进程分配的最大虚拟内存量（以字节为单位）。</span><span class="sxs-lookup"><span data-stu-id="7e18d-837">The maximum amount of virtual memory, in bytes, allocated for the associated process since it was started.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The value returned by this property represents the maximum size of virtual memory used by the process since it started, in bytes. The operating system maps the virtual address space for each process either to pages loaded in physical memory, or to pages stored in the virtual memory paging file on disk.  
  
 This property can be used to monitor memory usage on computers with 32-bit processors or 64-bit processors. <span data-ttu-id="7e18d-841">属性值等效于进程的 " **虚拟字节峰值** " 性能计数器。</span><span class="sxs-lookup"><span data-stu-id="7e18d-841">The property value is equivalent to the **Virtual Bytes Peak** performance counter for the process.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7e18d-842">下面的代码示例启动记事本应用程序的实例。</span><span class="sxs-lookup"><span data-stu-id="7e18d-842">The following code example starts an instance of the Notepad application.</span></span> <span data-ttu-id="7e18d-843">然后，该示例检索并显示关联进程的各种属性。</span><span class="sxs-lookup"><span data-stu-id="7e18d-843">The example then retrieves and displays various properties of the associated process.</span></span> <span data-ttu-id="7e18d-844">该示例在进程退出时进行检测，并显示其退出代码和高峰内存统计信息。</span><span class="sxs-lookup"><span data-stu-id="7e18d-844">The example detects when the process exits, and displays its exit code and peak memory statistics.</span></span>  
  
 [!code-cpp[Diag_Process_MemoryProperties64#1](~/samples/snippets/cpp/VS_Snippets_CLR/Diag_Process_MemoryProperties64/CPP/source.cpp#1)]
 [!code-csharp[Diag_Process_MemoryProperties64#1](~/samples/snippets/csharp/VS_Snippets_CLR/Diag_Process_MemoryProperties64/CS/source.cs#1)]
 [!code-vb[Diag_Process_MemoryProperties64#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Diag_Process_MemoryProperties64/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.Process.VirtualMemorySize64" />
      </Docs>
    </Member>
    <Member MemberName="PeakWorkingSet">
      <MemberSignature Language="C#" Value="public int PeakWorkingSet { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 PeakWorkingSet" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.PeakWorkingSet" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PeakWorkingSet As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int PeakWorkingSet { int get(); };" />
      <MemberSignature Language="F#" Value="member this.PeakWorkingSet : int" Usage="System.Diagnostics.Process.PeakWorkingSet" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0">
          <AttributeName Language="C#">[System.Obsolete("This property has been deprecated.  Please use System.Diagnostics.Process.PeakWorkingSet64 instead.  http://go.microsoft.com/fwlink/?linkid=14202")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("This property has been deprecated.  Please use System.Diagnostics.Process.PeakWorkingSet64 instead.  http://go.microsoft.com/fwlink/?linkid=14202")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-3.0;netcore-3.1;netstandard-2.1">
          <AttributeName Language="C#">[System.Obsolete("This property has been deprecated.  Please use System.Diagnostics.Process.PeakWorkingSet64 instead.  https://go.microsoft.com/fwlink/?linkid=14202")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("This property has been deprecated.  Please use System.Diagnostics.Process.PeakWorkingSet64 instead.  https://go.microsoft.com/fwlink/?linkid=14202")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.Diagnostics.MonitoringDescription("ProcessPeakWorkingSet")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.MonitoringDescription("ProcessPeakWorkingSet")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Diagnostics.MonitoringDescription("The maximum amount of system memory used by this process.")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.MonitoringDescription("The maximum amount of system memory used by this process.")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Obsolete("Use PeakWorkingSet64")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("Use PeakWorkingSet64")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7e18d-845">获取关联进程的峰值工作集大小（以字节为单位）。</span><span class="sxs-lookup"><span data-stu-id="7e18d-845">Gets the peak working set size for the associated process, in bytes.</span></span></summary>
        <value><span data-ttu-id="7e18d-846">关联进程一次所需的最大物理内存量（以字节为单位）。</span><span class="sxs-lookup"><span data-stu-id="7e18d-846">The maximum amount of physical memory that the associated process has required all at once, in bytes.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The working set of a process is the set of memory pages currently visible to the process in physical RAM memory. These pages are resident and available for an application to use without triggering a page fault.  
  
 The working set includes both shared and private data. <span data-ttu-id="7e18d-850">共享数据包括包含进程执行的所有说明的页面，包括进程模块和系统库。</span><span class="sxs-lookup"><span data-stu-id="7e18d-850">The shared data includes the pages that contain all the instructions that the process executes, including process modules and the system libraries.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.Process.WorkingSet64" />
        <altmember cref="P:System.Diagnostics.Process.MinWorkingSet" />
        <altmember cref="P:System.Diagnostics.Process.MaxWorkingSet" />
        <altmember cref="P:System.Diagnostics.Process.PeakWorkingSet64" />
      </Docs>
    </Member>
    <Member MemberName="PeakWorkingSet64">
      <MemberSignature Language="C#" Value="public long PeakWorkingSet64 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 PeakWorkingSet64" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.PeakWorkingSet64" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PeakWorkingSet64 As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long PeakWorkingSet64 { long get(); };" />
      <MemberSignature Language="F#" Value="member this.PeakWorkingSet64 : int64" Usage="System.Diagnostics.Process.PeakWorkingSet64" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.Diagnostics.MonitoringDescription("ProcessPeakWorkingSet")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.MonitoringDescription("ProcessPeakWorkingSet")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Runtime.InteropServices.ComVisible(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.ComVisible(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Diagnostics.MonitoringDescription("The maximum amount of system memory used by this process.")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.MonitoringDescription("The maximum amount of system memory used by this process.")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7e18d-851">获取关联进程使用的最大物理内存量（以字节为单位）。</span><span class="sxs-lookup"><span data-stu-id="7e18d-851">Gets the maximum amount of physical memory, in bytes, used by the associated process.</span></span></summary>
        <value><span data-ttu-id="7e18d-852">从启动关联进程以来为关联进程分配的最大物理内存量（以字节为单位）。</span><span class="sxs-lookup"><span data-stu-id="7e18d-852">The maximum amount of physical memory, in bytes, allocated for the associated process since it was started.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The value returned by this property represents the maximum size of working set memory used by the process since it started, in bytes. The working set of a process is the set of memory pages currently visible to the process in physical RAM memory. These pages are resident and available for an application to use without triggering a page fault.  
  
 <span data-ttu-id="7e18d-856">工作集包括共享数据和私人数据。</span><span class="sxs-lookup"><span data-stu-id="7e18d-856">The working set includes both shared and private data.</span></span> <span data-ttu-id="7e18d-857">共享数据包括包含进程所执行的所有指令的页面，包括进程模块和系统库中的说明。</span><span class="sxs-lookup"><span data-stu-id="7e18d-857">The shared data includes the pages that contain all the instructions that the process executes, including instructions from the process modules and the system libraries.</span></span>  
  
 <span data-ttu-id="7e18d-858">此属性可用于监视包含32位处理器或64位处理器的计算机上的内存使用情况。</span><span class="sxs-lookup"><span data-stu-id="7e18d-858">This property can be used to monitor memory usage on computers with 32-bit processors or 64-bit processors.</span></span> <span data-ttu-id="7e18d-859">属性值等效于进程的 " **工作集峰值** " 性能计数器。</span><span class="sxs-lookup"><span data-stu-id="7e18d-859">The property value is equivalent to the **Working Set Peak** performance counter for the process.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7e18d-860">下面的代码示例启动记事本应用程序的实例。</span><span class="sxs-lookup"><span data-stu-id="7e18d-860">The following code example starts an instance of the Notepad application.</span></span> <span data-ttu-id="7e18d-861">然后，该示例检索并显示关联进程的各种属性。</span><span class="sxs-lookup"><span data-stu-id="7e18d-861">The example then retrieves and displays various properties of the associated process.</span></span> <span data-ttu-id="7e18d-862">该示例在进程退出时进行检测，并显示其退出代码和高峰内存统计信息。</span><span class="sxs-lookup"><span data-stu-id="7e18d-862">The example detects when the process exits, and displays its exit code and peak memory statistics.</span></span>  
  
 [!code-cpp[Diag_Process_MemoryProperties64#1](~/samples/snippets/cpp/VS_Snippets_CLR/Diag_Process_MemoryProperties64/CPP/source.cpp#1)]
 [!code-csharp[Diag_Process_MemoryProperties64#1](~/samples/snippets/csharp/VS_Snippets_CLR/Diag_Process_MemoryProperties64/CS/source.cs#1)]
 [!code-vb[Diag_Process_MemoryProperties64#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Diag_Process_MemoryProperties64/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.Process.WorkingSet64" />
        <altmember cref="P:System.Diagnostics.Process.MinWorkingSet" />
        <altmember cref="P:System.Diagnostics.Process.MaxWorkingSet" />
      </Docs>
    </Member>
    <Member MemberName="PriorityBoostEnabled">
      <MemberSignature Language="C#" Value="public bool PriorityBoostEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool PriorityBoostEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.PriorityBoostEnabled" />
      <MemberSignature Language="VB.NET" Value="Public Property PriorityBoostEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool PriorityBoostEnabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.PriorityBoostEnabled : bool with get, set" Usage="System.Diagnostics.Process.PriorityBoostEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.Diagnostics.MonitoringDescription("ProcessPriorityBoostEnabled")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.MonitoringDescription("ProcessPriorityBoostEnabled")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Diagnostics.MonitoringDescription("Process will be of higher priority while it is actively used.")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.MonitoringDescription("Process will be of higher priority while it is actively used.")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.MonoTODO]</AttributeName>
          <AttributeName Language="F#">[&lt;System.MonoTODO&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7e18d-863">获取或设置一个值，该值指示主窗口拥有焦点时是否应由操作系统暂时提升关联进程优先级。</span><span class="sxs-lookup"><span data-stu-id="7e18d-863">Gets or sets a value indicating whether the associated process priority should temporarily be boosted by the operating system when the main window has the focus.</span></span></summary>
        <value><span data-ttu-id="7e18d-864">如果进程离开等待状态时应动态提升进程优先级别，则为<see langword="true" /> ；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="7e18d-864"><see langword="true" /> if dynamic boosting of the process priority should take place for a process when it is taken out of the wait state; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="7e18d-865">默认值为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="7e18d-865">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When a thread runs in a process for which the priority class has one of the dynamic priority enumeration values (<ph id="ph1">&lt;xref:System.Diagnostics.ProcessPriorityClass.Normal&gt;</ph>, <ph id="ph2">&lt;xref:System.Diagnostics.ProcessPriorityClass.High&gt;</ph>, or <ph id="ph3">&lt;xref:System.Diagnostics.ProcessPriorityClass.RealTime&gt;</ph>), the system temporarily boosts the thread's priority when it is taken out of a wait state. This action prevents other processes from interrupting the processing of the current thread. The <ph id="ph1">&lt;xref:System.Diagnostics.Process.PriorityBoostEnabled%2A&gt;</ph> setting affects all the existing threads and any threads subsequently created by the process. <span data-ttu-id="7e18d-869">若要还原正常行为，请将 <xref:System.Diagnostics.Process.PriorityBoostEnabled%2A> 属性设置为 `false` 。</span><span class="sxs-lookup"><span data-stu-id="7e18d-869">To restore normal behavior, set the <xref:System.Diagnostics.Process.PriorityBoostEnabled%2A> property to `false`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7e18d-870">提升优先级过高可能会耗尽基本操作系统和网络功能的资源，导致其他操作系统任务出现问题。</span><span class="sxs-lookup"><span data-stu-id="7e18d-870">Boosting the priority too high can drain resources from essential operating system and network functions, causing problems with other operating system tasks.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception"><span data-ttu-id="7e18d-871">未能从关联的进程资源检索到优先级提升信息。</span><span class="sxs-lookup"><span data-stu-id="7e18d-871">Priority boost information could not be retrieved from the associated process resource.</span></span></exception>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="7e18d-872">进程标识符或进程句柄为零。</span><span class="sxs-lookup"><span data-stu-id="7e18d-872">The process identifier or process handle is zero.</span></span> <span data-ttu-id="7e18d-873">（进程尚未启动。）</span><span class="sxs-lookup"><span data-stu-id="7e18d-873">(The process has not been started.)</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="7e18d-874">你正试图访问在远程计算机上运行的进程的 <see cref="P:System.Diagnostics.Process.PriorityBoostEnabled" /> 属性。</span><span class="sxs-lookup"><span data-stu-id="7e18d-874">You are attempting to access the <see cref="P:System.Diagnostics.Process.PriorityBoostEnabled" /> property for a process that is running on a remote computer.</span></span> <span data-ttu-id="7e18d-875">此属性仅可用于本地计算机上运行的进程。</span><span class="sxs-lookup"><span data-stu-id="7e18d-875">This property is available only for processes that are running on the local computer.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="7e18d-876">进程 <see cref="P:System.Diagnostics.Process.Id" /> 不可用。</span><span class="sxs-lookup"><span data-stu-id="7e18d-876">The process <see cref="P:System.Diagnostics.Process.Id" /> is not available.</span></span></exception>
        <altmember cref="P:System.Diagnostics.Process.PriorityClass" />
        <altmember cref="P:System.Diagnostics.Process.BasePriority" />
      </Docs>
    </Member>
    <Member MemberName="PriorityClass">
      <MemberSignature Language="C#" Value="public System.Diagnostics.ProcessPriorityClass PriorityClass { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Diagnostics.ProcessPriorityClass PriorityClass" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.PriorityClass" />
      <MemberSignature Language="VB.NET" Value="Public Property PriorityClass As ProcessPriorityClass" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Diagnostics::ProcessPriorityClass PriorityClass { System::Diagnostics::ProcessPriorityClass get(); void set(System::Diagnostics::ProcessPriorityClass value); };" />
      <MemberSignature Language="F#" Value="member this.PriorityClass : System.Diagnostics.ProcessPriorityClass with get, set" Usage="System.Diagnostics.Process.PriorityClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.Diagnostics.MonitoringDescription("ProcessPriorityClass")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.MonitoringDescription("ProcessPriorityClass")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Diagnostics.MonitoringDescription("The priority that the threads in the process run relative to.")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.MonitoringDescription("The priority that the threads in the process run relative to.")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Diagnostics.ProcessPriorityClass</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7e18d-877">获取或设置关联进程的总体优先级类别。</span><span class="sxs-lookup"><span data-stu-id="7e18d-877">Gets or sets the overall priority category for the associated process.</span></span></summary>
        <value><span data-ttu-id="7e18d-878">关联进程的优先级类别，可从该类别计算进程的 <see cref="P:System.Diagnostics.Process.BasePriority" />。</span><span class="sxs-lookup"><span data-stu-id="7e18d-878">The priority category for the associated process, from which the <see cref="P:System.Diagnostics.Process.BasePriority" /> of the process is calculated.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A process priority class encompasses a range of thread priority levels. Threads with different priorities that are running in the process run relative to the priority class of the process. Win32 uses four priority classes with seven base priority levels per class. <span data-ttu-id="7e18d-882">这些进程优先级类在枚举中捕获 <xref:System.Diagnostics.ProcessPriorityClass> ，这使你可以将进程优先级设置为 <xref:System.Diagnostics.ProcessPriorityClass.Idle> 、、、 <xref:System.Diagnostics.ProcessPriorityClass.Normal> <xref:System.Diagnostics.ProcessPriorityClass.High> <xref:System.Diagnostics.ProcessPriorityClass.AboveNormal> 、 <xref:System.Diagnostics.ProcessPriorityClass.BelowNormal> 或 <xref:System.Diagnostics.ProcessPriorityClass.RealTime> 。</span><span class="sxs-lookup"><span data-stu-id="7e18d-882">These process priority classes are captured in the <xref:System.Diagnostics.ProcessPriorityClass> enumeration, which lets you set the process priority to <xref:System.Diagnostics.ProcessPriorityClass.Idle>, <xref:System.Diagnostics.ProcessPriorityClass.Normal>, <xref:System.Diagnostics.ProcessPriorityClass.High>, <xref:System.Diagnostics.ProcessPriorityClass.AboveNormal>, <xref:System.Diagnostics.ProcessPriorityClass.BelowNormal>, or <xref:System.Diagnostics.ProcessPriorityClass.RealTime>.</span></span> <span data-ttu-id="7e18d-883">根据所用的时间或其他提升，操作系统在需要将进程移到其他进程以访问处理器时，可以更改基本优先级级别。</span><span class="sxs-lookup"><span data-stu-id="7e18d-883">Based on the time elapsed or other boosts, the base priority level can be changed by the operating system when a process needs to be put ahead of others for access to the processor.</span></span> <span data-ttu-id="7e18d-884">此外，你还可以将设置 <xref:System.Diagnostics.Process.PriorityBoostEnabled%2A> 为暂时提升已从等待状态中执行的线程的优先级级别。</span><span class="sxs-lookup"><span data-stu-id="7e18d-884">In addition, you can set the <xref:System.Diagnostics.Process.PriorityBoostEnabled%2A> to temporarily boost the priority level of threads that have been taken out of the wait state.</span></span> <span data-ttu-id="7e18d-885">当进程返回到等待状态时，将重置此优先级。</span><span class="sxs-lookup"><span data-stu-id="7e18d-885">The priority is reset when the process returns to the wait state.</span></span>  
  
 <span data-ttu-id="7e18d-886">使用 <xref:System.Diagnostics.Process.BasePriority%2A> 属性可以查看分配给进程的启动优先级。</span><span class="sxs-lookup"><span data-stu-id="7e18d-886">The <xref:System.Diagnostics.Process.BasePriority%2A> property lets you view the starting priority that is assigned to a process.</span></span> <span data-ttu-id="7e18d-887">但是，因为它是只读的，所以不能使用 <xref:System.Diagnostics.Process.BasePriority%2A> 属性设置进程的优先级。</span><span class="sxs-lookup"><span data-stu-id="7e18d-887">However, because it is read-only, you cannot use the <xref:System.Diagnostics.Process.BasePriority%2A> property to set the priority of a process.</span></span> <span data-ttu-id="7e18d-888">若要更改优先级，请使用 <xref:System.Diagnostics.Process.PriorityClass%2A> 属性，该属性可获取或设置进程的总体优先级类别。</span><span class="sxs-lookup"><span data-stu-id="7e18d-888">To change the priority, use the <xref:System.Diagnostics.Process.PriorityClass%2A> property, which gets or sets the overall priority category for the process.</span></span>  
  
 <span data-ttu-id="7e18d-889">无法使用系统监视器查看优先级类。</span><span class="sxs-lookup"><span data-stu-id="7e18d-889">The priority class cannot be viewed using System Monitor.</span></span> <span data-ttu-id="7e18d-890">下表显示了和值之间的 <xref:System.Diagnostics.Process.BasePriority%2A> 关系 <xref:System.Diagnostics.Process.PriorityClass%2A> 。</span><span class="sxs-lookup"><span data-stu-id="7e18d-890">The following table shows the relationship between the <xref:System.Diagnostics.Process.BasePriority%2A> and <xref:System.Diagnostics.Process.PriorityClass%2A> values.</span></span>  
  
|<span data-ttu-id="7e18d-891">BasePriority</span><span class="sxs-lookup"><span data-stu-id="7e18d-891">BasePriority</span></span>|<span data-ttu-id="7e18d-892">PriorityClass</span><span class="sxs-lookup"><span data-stu-id="7e18d-892">PriorityClass</span></span>|  
|------------------|-------------------|  
|<span data-ttu-id="7e18d-893">4</span><span class="sxs-lookup"><span data-stu-id="7e18d-893">4</span></span>|<xref:System.Diagnostics.ProcessPriorityClass.Idle>|  
|<span data-ttu-id="7e18d-894">8</span><span class="sxs-lookup"><span data-stu-id="7e18d-894">8</span></span>|<xref:System.Diagnostics.ProcessPriorityClass.Normal>|  
|<span data-ttu-id="7e18d-895">13</span><span class="sxs-lookup"><span data-stu-id="7e18d-895">13</span></span>|<xref:System.Diagnostics.ProcessPriorityClass.High>|  
|<span data-ttu-id="7e18d-896">24</span><span class="sxs-lookup"><span data-stu-id="7e18d-896">24</span></span>|<xref:System.Diagnostics.ProcessPriorityClass.RealTime>|  
  
   
  
## Examples  
 <span data-ttu-id="7e18d-897">下面的示例启动记事本的实例。</span><span class="sxs-lookup"><span data-stu-id="7e18d-897">The following example starts an instance of Notepad.</span></span> <span data-ttu-id="7e18d-898">然后，该示例检索并显示关联进程的各种属性。</span><span class="sxs-lookup"><span data-stu-id="7e18d-898">The example then retrieves and displays various properties of the associated process.</span></span> <span data-ttu-id="7e18d-899">该示例在进程退出时进行检测，并显示该进程的退出代码。</span><span class="sxs-lookup"><span data-stu-id="7e18d-899">The example detects when the process exits, and displays the process's exit code.</span></span>  
  
 [!code-cpp[Diag_Process_MemoryProperties64#1](~/samples/snippets/cpp/VS_Snippets_CLR/Diag_Process_MemoryProperties64/CPP/source.cpp#1)]
 [!code-csharp[Diag_Process_MemoryProperties64#1](~/samples/snippets/csharp/VS_Snippets_CLR/Diag_Process_MemoryProperties64/CS/source.cs#1)]
 [!code-vb[Diag_Process_MemoryProperties64#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Diag_Process_MemoryProperties64/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception"><span data-ttu-id="7e18d-900">无法从关联的进程资源中设置或检索进程优先级信息。</span><span class="sxs-lookup"><span data-stu-id="7e18d-900">Process priority information could not be set or retrieved from the associated process resource.</span></span>  
  
 <span data-ttu-id="7e18d-901">- 或 -</span><span class="sxs-lookup"><span data-stu-id="7e18d-901">-or-</span></span>  
  
 <span data-ttu-id="7e18d-902">进程标识符或进程句柄为零。</span><span class="sxs-lookup"><span data-stu-id="7e18d-902">The process identifier or process handle is zero.</span></span> <span data-ttu-id="7e18d-903">（进程尚未启动。）</span><span class="sxs-lookup"><span data-stu-id="7e18d-903">(The process has not been started.)</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="7e18d-904">你正试图访问在远程计算机上运行的进程的 <see cref="P:System.Diagnostics.Process.PriorityClass" /> 属性。</span><span class="sxs-lookup"><span data-stu-id="7e18d-904">You are attempting to access the <see cref="P:System.Diagnostics.Process.PriorityClass" /> property for a process that is running on a remote computer.</span></span> <span data-ttu-id="7e18d-905">此属性仅可用于本地计算机上运行的进程。</span><span class="sxs-lookup"><span data-stu-id="7e18d-905">This property is available only for processes that are running on the local computer.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="7e18d-906">进程 <see cref="P:System.Diagnostics.Process.Id" /> 不可用。</span><span class="sxs-lookup"><span data-stu-id="7e18d-906">The process <see cref="P:System.Diagnostics.Process.Id" /> is not available.</span></span></exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><span data-ttu-id="7e18d-907">无法设置优先级类，因为它不使用有效的值，如 <see cref="T:System.Diagnostics.ProcessPriorityClass" /> 枚举中所定义。</span><span class="sxs-lookup"><span data-stu-id="7e18d-907">Priority class cannot be set because it does not use a valid value, as defined in the <see cref="T:System.Diagnostics.ProcessPriorityClass" /> enumeration.</span></span></exception>
        <altmember cref="P:System.Diagnostics.Process.BasePriority" />
        <altmember cref="P:System.Diagnostics.Process.PriorityBoostEnabled" />
      </Docs>
    </Member>
    <Member MemberName="PrivateMemorySize">
      <MemberSignature Language="C#" Value="public int PrivateMemorySize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 PrivateMemorySize" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.PrivateMemorySize" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PrivateMemorySize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int PrivateMemorySize { int get(); };" />
      <MemberSignature Language="F#" Value="member this.PrivateMemorySize : int" Usage="System.Diagnostics.Process.PrivateMemorySize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0">
          <AttributeName Language="C#">[System.Obsolete("This property has been deprecated.  Please use System.Diagnostics.Process.PrivateMemorySize64 instead.  http://go.microsoft.com/fwlink/?linkid=14202")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("This property has been deprecated.  Please use System.Diagnostics.Process.PrivateMemorySize64 instead.  http://go.microsoft.com/fwlink/?linkid=14202")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-3.0;netcore-3.1;netstandard-2.1">
          <AttributeName Language="C#">[System.Obsolete("This property has been deprecated.  Please use System.Diagnostics.Process.PrivateMemorySize64 instead.  https://go.microsoft.com/fwlink/?linkid=14202")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("This property has been deprecated.  Please use System.Diagnostics.Process.PrivateMemorySize64 instead.  https://go.microsoft.com/fwlink/?linkid=14202")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.Diagnostics.MonitoringDescription("ProcessPrivateMemorySize")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.MonitoringDescription("ProcessPrivateMemorySize")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Diagnostics.MonitoringDescription("The amount of memory exclusively used by this process.")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.MonitoringDescription("The amount of memory exclusively used by this process.")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Obsolete("Use PrivateMemorySize64")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("Use PrivateMemorySize64")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7e18d-908">获取为关联的进程分配的专用内存量（以字节为单位）。</span><span class="sxs-lookup"><span data-stu-id="7e18d-908">Gets the amount of private memory, in bytes, allocated for the associated process.</span></span></summary>
        <value><span data-ttu-id="7e18d-909">由关联的进程分配的、不能与其他进程共享的字节数。</span><span class="sxs-lookup"><span data-stu-id="7e18d-909">The number of bytes allocated by the associated process that cannot be shared with other processes.</span></span></value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Diagnostics.Process.PrivateMemorySize64" />
      </Docs>
    </Member>
    <Member MemberName="PrivateMemorySize64">
      <MemberSignature Language="C#" Value="public long PrivateMemorySize64 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 PrivateMemorySize64" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.PrivateMemorySize64" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PrivateMemorySize64 As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long PrivateMemorySize64 { long get(); };" />
      <MemberSignature Language="F#" Value="member this.PrivateMemorySize64 : int64" Usage="System.Diagnostics.Process.PrivateMemorySize64" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.Diagnostics.MonitoringDescription("ProcessPrivateMemorySize")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.MonitoringDescription("ProcessPrivateMemorySize")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Runtime.InteropServices.ComVisible(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.ComVisible(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Diagnostics.MonitoringDescription("The amount of memory exclusively used by this process.")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.MonitoringDescription("The amount of memory exclusively used by this process.")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7e18d-910">获取为关联的进程分配的专用内存量（以字节为单位）。</span><span class="sxs-lookup"><span data-stu-id="7e18d-910">Gets the amount of private memory, in bytes, allocated for the associated process.</span></span></summary>
        <value><span data-ttu-id="7e18d-911">为关联进程分配的不能与其他进程共享的内存量（以字节为单位）。</span><span class="sxs-lookup"><span data-stu-id="7e18d-911">The amount of memory, in bytes, allocated for the associated process that cannot be shared with other processes.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The value returned by this property represents the current size of memory used by the process, in bytes, that cannot be shared with other processes.  
  
 This property can be used to monitor memory usage on computers with 32-bit processors or 64-bit processors. The property value is equivalent to the <bpt id="p1">**</bpt>Private Bytes<ept id="p1">**</ept> performance counter for the process.  
  
   
  
## Examples  
 <span data-ttu-id="7e18d-915">下面的代码示例启动记事本应用程序的实例。</span><span class="sxs-lookup"><span data-stu-id="7e18d-915">The following code example starts an instance of the Notepad application.</span></span> <span data-ttu-id="7e18d-916">然后，该示例检索并显示关联进程的各种属性。</span><span class="sxs-lookup"><span data-stu-id="7e18d-916">The example then retrieves and displays various properties of the associated process.</span></span> <span data-ttu-id="7e18d-917">该示例在进程退出时进行检测，并显示其退出代码和高峰内存统计信息。</span><span class="sxs-lookup"><span data-stu-id="7e18d-917">The example detects when the process exits, and displays its exit code and peak memory statistics.</span></span>  
  
 [!code-cpp[Diag_Process_MemoryProperties64#1](~/samples/snippets/cpp/VS_Snippets_CLR/Diag_Process_MemoryProperties64/CPP/source.cpp#1)]
 [!code-csharp[Diag_Process_MemoryProperties64#1](~/samples/snippets/csharp/VS_Snippets_CLR/Diag_Process_MemoryProperties64/CS/source.cs#1)]
 [!code-vb[Diag_Process_MemoryProperties64#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Diag_Process_MemoryProperties64/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PrivilegedProcessorTime">
      <MemberSignature Language="C#" Value="public TimeSpan PrivilegedProcessorTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan PrivilegedProcessorTime" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.PrivilegedProcessorTime" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PrivilegedProcessorTime As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan PrivilegedProcessorTime { TimeSpan get(); };" />
      <MemberSignature Language="F#" Value="member this.PrivilegedProcessorTime : TimeSpan" Usage="System.Diagnostics.Process.PrivilegedProcessorTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.Diagnostics.MonitoringDescription("ProcessPrivilegedProcessorTime")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.MonitoringDescription("ProcessPrivilegedProcessorTime")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Diagnostics.MonitoringDescription("The amount of CPU time the process spent inside the operating system core.")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.MonitoringDescription("The amount of CPU time the process spent inside the operating system core.")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7e18d-918">获取此进程的特权处理器时间。</span><span class="sxs-lookup"><span data-stu-id="7e18d-918">Gets the privileged processor time for this process.</span></span></summary>
        <value><span data-ttu-id="7e18d-919"><see cref="T:System.TimeSpan" />，它指示进程在操作系统内核中运行代码所用的时间。</span><span class="sxs-lookup"><span data-stu-id="7e18d-919">A <see cref="T:System.TimeSpan" /> that indicates the amount of time that the process has spent running code inside the operating system core.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example starts an instance of Notepad. The example then retrieves and displays various properties of the associated process. The example detects when the process exits, and displays the process's exit code.  
  
 [!code-cpp[Diag_Process_MemoryProperties64#1](~/samples/snippets/cpp/VS_Snippets_CLR/Diag_Process_MemoryProperties64/CPP/source.cpp#1)]
 [!code-csharp[Diag_Process_MemoryProperties64#1](~/samples/snippets/csharp/VS_Snippets_CLR/Diag_Process_MemoryProperties64/CS/source.cs#1)]
 [!code-vb[Diag_Process_MemoryProperties64#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Diag_Process_MemoryProperties64/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="7e18d-923">你正试图访问在远程计算机上运行的进程的 <see cref="P:System.Diagnostics.Process.PrivilegedProcessorTime" /> 属性。</span><span class="sxs-lookup"><span data-stu-id="7e18d-923">You are attempting to access the <see cref="P:System.Diagnostics.Process.PrivilegedProcessorTime" /> property for a process that is running on a remote computer.</span></span> <span data-ttu-id="7e18d-924">此属性仅可用于本地计算机上运行的进程。</span><span class="sxs-lookup"><span data-stu-id="7e18d-924">This property is available only for processes that are running on the local computer.</span></span></exception>
        <altmember cref="P:System.Diagnostics.Process.UserProcessorTime" />
        <altmember cref="P:System.Diagnostics.Process.PrivilegedProcessorTime" />
      </Docs>
    </Member>
    <Member MemberName="ProcessName">
      <MemberSignature Language="C#" Value="public string ProcessName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ProcessName" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.ProcessName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ProcessName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ProcessName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ProcessName : string" Usage="System.Diagnostics.Process.ProcessName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.Diagnostics.MonitoringDescription("ProcessProcessName")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.MonitoringDescription("ProcessProcessName")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Diagnostics.MonitoringDescription("The name of this process.")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.MonitoringDescription("The name of this process.")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7e18d-925">获取该进程的名称。</span><span class="sxs-lookup"><span data-stu-id="7e18d-925">Gets the name of the process.</span></span></summary>
        <value><span data-ttu-id="7e18d-926">系统用以向用户标识该进程的名称。</span><span class="sxs-lookup"><span data-stu-id="7e18d-926">The name that the system uses to identify the process to the user.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <ph id="ph1">&lt;xref:System.Diagnostics.Process.ProcessName%2A&gt;</ph> property holds an executable file name, such as Outlook, that does not include the .exe extension or the path. It is helpful for getting and manipulating all the processes that are associated with the same executable file.  
  
> [!NOTE]
>  On <ph id="ph1">[!INCLUDE[Win2kFamily](~/includes/win2kfamily-md.md)]</ph> operating systems, the <ph id="ph2">&lt;xref:System.Diagnostics.Process.ProcessName%2A&gt;</ph> property may be truncated to 15 characters if the process module information cannot be obtained.  
  
 <span data-ttu-id="7e18d-930">您可以调用 <xref:System.Diagnostics.Process.GetProcessesByName%2A> ，并向其传递可执行文件的名称，以检索包含指定计算机上每个正在运行的实例的数组。</span><span class="sxs-lookup"><span data-stu-id="7e18d-930">You can call <xref:System.Diagnostics.Process.GetProcessesByName%2A>, passing it an executable file name, to retrieve an array that contains every running instance on the specified computer.</span></span> <span data-ttu-id="7e18d-931">例如，你可以使用此数组关闭可执行文件的所有正在运行的实例。</span><span class="sxs-lookup"><span data-stu-id="7e18d-931">You can use this array, for example, to shut down all the running instances of the executable file.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="7e18d-932">进程没有标识符，或者没有与 <see cref="T:System.Diagnostics.Process" /> 关联的进程。</span><span class="sxs-lookup"><span data-stu-id="7e18d-932">The process does not have an identifier, or no process is associated with the <see cref="T:System.Diagnostics.Process" />.</span></span>  
  
<span data-ttu-id="7e18d-933">- 或 -</span><span class="sxs-lookup"><span data-stu-id="7e18d-933">-or-</span></span> 
<span data-ttu-id="7e18d-934">关联进程已退出。</span><span class="sxs-lookup"><span data-stu-id="7e18d-934">The associated process has exited.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="7e18d-935">进程不在此计算机上。</span><span class="sxs-lookup"><span data-stu-id="7e18d-935">The process is not on this computer.</span></span></exception>
        <altmember cref="M:System.Diagnostics.Process.GetProcessesByName(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="ProcessorAffinity">
      <MemberSignature Language="C#" Value="public IntPtr ProcessorAffinity { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ProcessorAffinity" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.ProcessorAffinity" />
      <MemberSignature Language="VB.NET" Value="Public Property ProcessorAffinity As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IntPtr ProcessorAffinity { IntPtr get(); void set(IntPtr value); };" />
      <MemberSignature Language="F#" Value="member this.ProcessorAffinity : nativeint with get, set" Usage="System.Diagnostics.Process.ProcessorAffinity" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.Diagnostics.MonitoringDescription("ProcessProcessorAffinity")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.MonitoringDescription("ProcessProcessorAffinity")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Diagnostics.MonitoringDescription("Allowed processor that can be used by this process.")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.MonitoringDescription("Allowed processor that can be used by this process.")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.MonoTODO]</AttributeName>
          <AttributeName Language="F#">[&lt;System.MonoTODO&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7e18d-936">获取或设置一些处理器，此进程中的线程可以按计划在这些处理器上运行。</span><span class="sxs-lookup"><span data-stu-id="7e18d-936">Gets or sets the processors on which the threads in this process can be scheduled to run.</span></span></summary>
        <value><span data-ttu-id="7e18d-937">位掩码，表示关联进程内的线程可以在其上运行的处理器。</span><span class="sxs-lookup"><span data-stu-id="7e18d-937">A bitmask representing the processors that the threads in the associated process can run on.</span></span> <span data-ttu-id="7e18d-938">默认值取决于计算机上的处理器数。</span><span class="sxs-lookup"><span data-stu-id="7e18d-938">The default depends on the number of processors on the computer.</span></span> The default value is 2 <bpt id="p1">&lt;sup&gt;</bpt>n<ept id="p1">&lt;/sup&gt;</ept> -1, where n is the number of processors.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In Windows 2000 and later, a thread in a process can migrate from processor to processor, with each migration reloading the processor cache. Under heavy system loads, specifying which processor should run a specific thread can improve performance by reducing the number of times the processor cache is reloaded. <span data-ttu-id="7e18d-942">处理器和线程之间的关联称为处理器关联。</span><span class="sxs-lookup"><span data-stu-id="7e18d-942">The association between a processor and a thread is called the processor affinity.</span></span>  
  
 <span data-ttu-id="7e18d-943">每个处理器都表示为一个位。</span><span class="sxs-lookup"><span data-stu-id="7e18d-943">Each processor is represented as a bit.</span></span> <span data-ttu-id="7e18d-944">位0为 processor one，位1为 processor 2，依此类推。</span><span class="sxs-lookup"><span data-stu-id="7e18d-944">Bit 0 is processor one, bit 1 is processor two, and so forth.</span></span> <span data-ttu-id="7e18d-945">如果将某个位设置为值1，则会为线程分配选择相应的处理器。</span><span class="sxs-lookup"><span data-stu-id="7e18d-945">If you set a bit to the value 1, the corresponding processor is selected for thread assignment.</span></span> <span data-ttu-id="7e18d-946">如果将此 <xref:System.Diagnostics.Process.ProcessorAffinity%2A> 值设置为零，则操作系统的计划算法会设置线程的关联。</span><span class="sxs-lookup"><span data-stu-id="7e18d-946">When you set the <xref:System.Diagnostics.Process.ProcessorAffinity%2A> value to zero, the operating system's scheduling algorithms set the thread's affinity.</span></span> <span data-ttu-id="7e18d-947">如果 <xref:System.Diagnostics.Process.ProcessorAffinity%2A> 将该值设置为任何非零值，则该值将被解释为指定可供选择的处理器的位掩码。</span><span class="sxs-lookup"><span data-stu-id="7e18d-947">When the <xref:System.Diagnostics.Process.ProcessorAffinity%2A> value is set to any nonzero value, the value is interpreted as a bitmask that specifies those processors eligible for selection.</span></span>  
  
 <span data-ttu-id="7e18d-948">下表显示了对 <xref:System.Diagnostics.Process.ProcessorAffinity%2A> 八处理器系统的值的选择。</span><span class="sxs-lookup"><span data-stu-id="7e18d-948">The following table shows a selection of <xref:System.Diagnostics.Process.ProcessorAffinity%2A> values for an eight-processor system.</span></span>  
  
|<span data-ttu-id="7e18d-949">位掩码</span><span class="sxs-lookup"><span data-stu-id="7e18d-949">Bitmask</span></span>|<span data-ttu-id="7e18d-950">二进制值</span><span class="sxs-lookup"><span data-stu-id="7e18d-950">Binary value</span></span>|<span data-ttu-id="7e18d-951">合格处理器</span><span class="sxs-lookup"><span data-stu-id="7e18d-951">Eligible processors</span></span>|  
|-------------|------------------|-------------------------|  
|<span data-ttu-id="7e18d-952">0x0001</span><span class="sxs-lookup"><span data-stu-id="7e18d-952">0x0001</span></span>|<span data-ttu-id="7e18d-953">00000000 00000001</span><span class="sxs-lookup"><span data-stu-id="7e18d-953">00000000 00000001</span></span>|<span data-ttu-id="7e18d-954">1</span><span class="sxs-lookup"><span data-stu-id="7e18d-954">1</span></span>|  
|<span data-ttu-id="7e18d-955">0x0003</span><span class="sxs-lookup"><span data-stu-id="7e18d-955">0x0003</span></span>|<span data-ttu-id="7e18d-956">00000000 00000011</span><span class="sxs-lookup"><span data-stu-id="7e18d-956">00000000 00000011</span></span>|<span data-ttu-id="7e18d-957">1和2</span><span class="sxs-lookup"><span data-stu-id="7e18d-957">1 and 2</span></span>|  
|<span data-ttu-id="7e18d-958">0x0007</span><span class="sxs-lookup"><span data-stu-id="7e18d-958">0x0007</span></span>|<span data-ttu-id="7e18d-959">00000000 00000111</span><span class="sxs-lookup"><span data-stu-id="7e18d-959">00000000 00000111</span></span>|<span data-ttu-id="7e18d-960">1、2 和 3</span><span class="sxs-lookup"><span data-stu-id="7e18d-960">1, 2 and 3</span></span>|  
|<span data-ttu-id="7e18d-961">0x0009</span><span class="sxs-lookup"><span data-stu-id="7e18d-961">0x0009</span></span>|<span data-ttu-id="7e18d-962">00000000 00001001</span><span class="sxs-lookup"><span data-stu-id="7e18d-962">00000000 00001001</span></span>|<span data-ttu-id="7e18d-963">1和4</span><span class="sxs-lookup"><span data-stu-id="7e18d-963">1 and 4</span></span>|  
|<span data-ttu-id="7e18d-964">0x007F</span><span class="sxs-lookup"><span data-stu-id="7e18d-964">0x007F</span></span>|<span data-ttu-id="7e18d-965">00000000 01111111</span><span class="sxs-lookup"><span data-stu-id="7e18d-965">00000000 01111111</span></span>|<span data-ttu-id="7e18d-966">1、2、3、4、5、6和7</span><span class="sxs-lookup"><span data-stu-id="7e18d-966">1, 2, 3, 4, 5, 6 and 7</span></span>|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception"><span data-ttu-id="7e18d-967">未能从关联的进程资源设置或检索 <see cref="P:System.Diagnostics.Process.ProcessorAffinity" /> 信息。</span><span class="sxs-lookup"><span data-stu-id="7e18d-967"><see cref="P:System.Diagnostics.Process.ProcessorAffinity" /> information could not be set or retrieved from the associated process resource.</span></span>  
  
<span data-ttu-id="7e18d-968">- 或 -</span><span class="sxs-lookup"><span data-stu-id="7e18d-968">-or-</span></span> 
<span data-ttu-id="7e18d-969">进程标识符或进程句柄为零。</span><span class="sxs-lookup"><span data-stu-id="7e18d-969">The process identifier or process handle is zero.</span></span> <span data-ttu-id="7e18d-970">（进程尚未启动。）</span><span class="sxs-lookup"><span data-stu-id="7e18d-970">(The process has not been started.)</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="7e18d-971">你正试图访问在远程计算机上运行的进程的 <see cref="P:System.Diagnostics.Process.ProcessorAffinity" /> 属性。</span><span class="sxs-lookup"><span data-stu-id="7e18d-971">You are attempting to access the <see cref="P:System.Diagnostics.Process.ProcessorAffinity" /> property for a process that is running on a remote computer.</span></span> <span data-ttu-id="7e18d-972">此属性仅可用于本地计算机上运行的进程。</span><span class="sxs-lookup"><span data-stu-id="7e18d-972">This property is available only for processes that are running on the local computer.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="7e18d-973">进程 <see cref="P:System.Diagnostics.Process.Id" /> 不可用。</span><span class="sxs-lookup"><span data-stu-id="7e18d-973">The process <see cref="P:System.Diagnostics.Process.Id" /> was not available.</span></span>  
  
<span data-ttu-id="7e18d-974">- 或 -</span><span class="sxs-lookup"><span data-stu-id="7e18d-974">-or-</span></span> 
<span data-ttu-id="7e18d-975">该进程已退出。</span><span class="sxs-lookup"><span data-stu-id="7e18d-975">The process has exited.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Refresh">
      <MemberSignature Language="C#" Value="public void Refresh ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Refresh() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Process.Refresh" />
      <MemberSignature Language="VB.NET" Value="Public Sub Refresh ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Refresh();" />
      <MemberSignature Language="F#" Value="member this.Refresh : unit -&gt; unit" Usage="process.Refresh " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7e18d-976">放弃已缓存到进程组件的关联仅存的任何相关信息。</span><span class="sxs-lookup"><span data-stu-id="7e18d-976">Discards any information about the associated process that has been cached inside the process component.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 After <ph id="ph1">&lt;xref:System.Diagnostics.Process.Refresh%2A&gt;</ph> is called, the first request for information about each property causes the process component to obtain a new value from the associated process.  
  
 When a <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> component is associated with a process resource, the property values of the <ph id="ph2">&lt;xref:System.Diagnostics.Process&gt;</ph> are immediately populated according to the status of the associated process. If the information about the associated process subsequently changes, those changes are not reflected in the <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> component's cached values. <span data-ttu-id="7e18d-980"><xref:System.Diagnostics.Process>组件是进程资源关联时的快照。</span><span class="sxs-lookup"><span data-stu-id="7e18d-980">The <xref:System.Diagnostics.Process> component is a snapshot of the process resource at the time they are associated.</span></span> <span data-ttu-id="7e18d-981">若要查看关联进程的当前值，请调用 <xref:System.Diagnostics.Process.Refresh%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="7e18d-981">To view the current values for the associated process, call the <xref:System.Diagnostics.Process.Refresh%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7e18d-982">下面的示例启动记事本的实例。</span><span class="sxs-lookup"><span data-stu-id="7e18d-982">The following example starts an instance of Notepad.</span></span> <span data-ttu-id="7e18d-983">然后，它以2秒的间隔检索关联进程的物理内存使用率，最大值为10秒。</span><span class="sxs-lookup"><span data-stu-id="7e18d-983">It then retrieves the physical memory usage of the associated process at 2 second intervals for a maximum of 10 seconds.</span></span> <span data-ttu-id="7e18d-984">该示例检测进程是否在10秒后退出。</span><span class="sxs-lookup"><span data-stu-id="7e18d-984">The example detects whether the process exits before 10 seconds have elapsed.</span></span> <span data-ttu-id="7e18d-985">如果10秒后仍在运行，则此示例将关闭进程。</span><span class="sxs-lookup"><span data-stu-id="7e18d-985">The example closes the process if it is still running after 10 seconds.</span></span>  
  
 [!code-cpp[process_refresh#1](~/samples/snippets/cpp/VS_Snippets_CLR/process_refresh/CPP/process_refresh.cpp#1)]
 [!code-csharp[process_refresh#1](~/samples/snippets/csharp/VS_Snippets_CLR/process_refresh/CS/process_refresh.cs#1)]
 [!code-vb[process_refresh#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/process_refresh/VB/process_refresh.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Responding">
      <MemberSignature Language="C#" Value="public bool Responding { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Responding" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.Responding" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Responding As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Responding { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.Responding : bool" Usage="System.Diagnostics.Process.Responding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.Diagnostics.MonitoringDescription("ProcessResponding")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.MonitoringDescription("ProcessResponding")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Diagnostics.MonitoringDescription("Is this process responsive.")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.MonitoringDescription("Is this process responsive.")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.MonoTODO]</AttributeName>
          <AttributeName Language="F#">[&lt;System.MonoTODO&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7e18d-986">获取指示进程的用户界面当前是否响应的值。</span><span class="sxs-lookup"><span data-stu-id="7e18d-986">Gets a value indicating whether the user interface of the process is responding.</span></span></summary>
        <value><span data-ttu-id="7e18d-987">如果关联进程的用户界面当前响应系统，则为<see langword="true" /> ；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="7e18d-987"><see langword="true" /> if the user interface of the associated process is responding to the system; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If a process has a user interface, the <ph id="ph1">&lt;xref:System.Diagnostics.Process.Responding%2A&gt;</ph> property contacts the user interface to determine whether the process is responding to user input. If the interface does not respond immediately, the <ph id="ph1">&lt;xref:System.Diagnostics.Process.Responding%2A&gt;</ph> property returns <ph id="ph2">`false`</ph>. Use this property to determine whether the interface of the associated process has stopped responding.  
  
 <span data-ttu-id="7e18d-991">如果该进程没有 <xref:System.Diagnostics.Process.MainWindowHandle%2A> ，则此属性返回 `true` 。</span><span class="sxs-lookup"><span data-stu-id="7e18d-991">If the process does not have a <xref:System.Diagnostics.Process.MainWindowHandle%2A>, this property returns `true`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7e18d-992">下面的示例启动记事本的实例。</span><span class="sxs-lookup"><span data-stu-id="7e18d-992">The following example starts an instance of Notepad.</span></span> <span data-ttu-id="7e18d-993">然后，该示例检索并显示关联进程的各种属性。</span><span class="sxs-lookup"><span data-stu-id="7e18d-993">The example then retrieves and displays various properties of the associated process.</span></span> <span data-ttu-id="7e18d-994">该示例在进程退出时进行检测，并显示该进程的退出代码。</span><span class="sxs-lookup"><span data-stu-id="7e18d-994">The example detects when the process exits, and displays the process's exit code.</span></span>  
  
 [!code-cpp[Diag_Process_MemoryProperties64#1](~/samples/snippets/cpp/VS_Snippets_CLR/Diag_Process_MemoryProperties64/CPP/source.cpp#1)]
 [!code-csharp[Diag_Process_MemoryProperties64#1](~/samples/snippets/csharp/VS_Snippets_CLR/Diag_Process_MemoryProperties64/CS/source.cs#1)]
 [!code-vb[Diag_Process_MemoryProperties64#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Diag_Process_MemoryProperties64/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="7e18d-995">没有与此 <see cref="T:System.Diagnostics.Process" /> 对象关联的进程。</span><span class="sxs-lookup"><span data-stu-id="7e18d-995">There is no process associated with this <see cref="T:System.Diagnostics.Process" /> object.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="7e18d-996">你正试图访问在远程计算机上运行的进程的 <see cref="P:System.Diagnostics.Process.Responding" /> 属性。</span><span class="sxs-lookup"><span data-stu-id="7e18d-996">You are attempting to access the <see cref="P:System.Diagnostics.Process.Responding" /> property for a process that is running on a remote computer.</span></span> <span data-ttu-id="7e18d-997">此属性仅可用于本地计算机上运行的进程。</span><span class="sxs-lookup"><span data-stu-id="7e18d-997">This property is available only for processes that are running on the local computer.</span></span></exception>
        <altmember cref="P:System.Diagnostics.Process.MainWindowHandle" />
      </Docs>
    </Member>
    <Member MemberName="SafeHandle">
      <MemberSignature Language="C#" Value="public Microsoft.Win32.SafeHandles.SafeProcessHandle SafeHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Win32.SafeHandles.SafeProcessHandle SafeHandle" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.SafeHandle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SafeHandle As SafeProcessHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Win32::SafeHandles::SafeProcessHandle ^ SafeHandle { Microsoft::Win32::SafeHandles::SafeProcessHandle ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SafeHandle : Microsoft.Win32.SafeHandles.SafeProcessHandle" Usage="System.Diagnostics.Process.SafeHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Win32.SafeHandles.SafeProcessHandle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7e18d-998">获取此进程的本机句柄。</span><span class="sxs-lookup"><span data-stu-id="7e18d-998">Gets the native handle to this process.</span></span></summary>
        <value><span data-ttu-id="7e18d-999">此进程的本机句柄。</span><span class="sxs-lookup"><span data-stu-id="7e18d-999">The native handle to this process.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The handle is only available if the calling component started the process.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SessionId">
      <MemberSignature Language="C#" Value="public int SessionId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 SessionId" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.SessionId" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SessionId As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int SessionId { int get(); };" />
      <MemberSignature Language="F#" Value="member this.SessionId : int" Usage="System.Diagnostics.Process.SessionId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.Diagnostics.MonitoringDescription("ProcessSessionId")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.MonitoringDescription("ProcessSessionId")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Diagnostics.MonitoringDescription("The session ID for this process.")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.MonitoringDescription("The session ID for this process.")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.MonoNotSupported("")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.MonoNotSupported("")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7e18d-1001">获取关联进程的终端服务会话标识符。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1001">Gets the Terminal Services session identifier for the associated process.</span></span></summary>
        <value><span data-ttu-id="7e18d-1002">关联进程的终端服务会话标识符。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1002">The Terminal Services session identifier for the associated process.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <ph id="ph1">&lt;xref:System.Diagnostics.Process.SessionId%2A&gt;</ph> property identifies the session in which the application is currently running.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NullReferenceException"><span data-ttu-id="7e18d-1004">没有与此进程关联的会话。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1004">There is no session associated with this process.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="7e18d-1005">没有与此会话标识符关联的进程。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1005">There is no process associated with this session identifier.</span></span>  
  
 <span data-ttu-id="7e18d-1006">- 或 -</span><span class="sxs-lookup"><span data-stu-id="7e18d-1006">-or-</span></span>  
  
 <span data-ttu-id="7e18d-1007">关联的进程不在此计算机上。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1007">The associated process is not on this machine.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="StandardError">
      <MemberSignature Language="C#" Value="public System.IO.StreamReader StandardError { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IO.StreamReader StandardError" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.StandardError" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property StandardError As StreamReader" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IO::StreamReader ^ StandardError { System::IO::StreamReader ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.StandardError : System.IO.StreamReader" Usage="System.Diagnostics.Process.StandardError" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.Diagnostics.MonitoringDescription("ProcessStandardError")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.MonitoringDescription("ProcessStandardError")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Diagnostics.MonitoringDescription("Standard error stream of the process.")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.MonitoringDescription("Standard error stream of the process.")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.StreamReader</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7e18d-1008">获取用于读取应用程序错误输出的流。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1008">Gets a stream used to read the error output of the application.</span></span></summary>
        <value><span data-ttu-id="7e18d-1009">可用于读取应用程序的标准错误流的 <see cref="T:System.IO.StreamReader" />。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1009">A <see cref="T:System.IO.StreamReader" /> that can be used to read the standard error stream of the application.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When a <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> writes text to its standard error stream, that text is normally displayed on the console. By redirecting the <ph id="ph1">&lt;xref:System.Diagnostics.Process.StandardError%2A&gt;</ph> stream, you can manipulate or suppress the error output of a process. For example, you can filter the text, format it differently, or write the output to both the console and a designated log file.  
  
> [!NOTE]
>  <span data-ttu-id="7e18d-1013">若要使用 <xref:System.Diagnostics.Process.StandardError%2A> ，必须将设置 <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A?displayProperty=nameWithType> 为 `false` ，并且必须将设置 <xref:System.Diagnostics.ProcessStartInfo.RedirectStandardError%2A?displayProperty=nameWithType> 为 `true` 。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1013">To use <xref:System.Diagnostics.Process.StandardError%2A>, you must set <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A?displayProperty=nameWithType> to `false`, and you must set <xref:System.Diagnostics.ProcessStartInfo.RedirectStandardError%2A?displayProperty=nameWithType> to `true`.</span></span> <span data-ttu-id="7e18d-1014">否则，从流中读取会 <xref:System.Diagnostics.Process.StandardError%2A> 引发异常。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1014">Otherwise, reading from the <xref:System.Diagnostics.Process.StandardError%2A> stream throws an exception.</span></span>  
  
 <span data-ttu-id="7e18d-1015">重定向的 <xref:System.Diagnostics.Process.StandardError%2A> 流可以同步或异步读取。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1015">The redirected <xref:System.Diagnostics.Process.StandardError%2A> stream can be read synchronously or asynchronously.</span></span> <span data-ttu-id="7e18d-1016">方法（如 <xref:System.IO.StreamReader.Read%2A> 、 <xref:System.IO.StreamReader.ReadLine%2A> 和）对 <xref:System.IO.StreamReader.ReadToEnd%2A> 进程的错误输出流执行同步读取操作。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1016">Methods such as <xref:System.IO.StreamReader.Read%2A>, <xref:System.IO.StreamReader.ReadLine%2A>, and <xref:System.IO.StreamReader.ReadToEnd%2A> perform synchronous read operations on the error output stream of the process.</span></span> <span data-ttu-id="7e18d-1017">在对 <xref:System.Diagnostics.Process> 其流进行关联的写入或关闭流之前，这些同步读取操作不会完成 <xref:System.Diagnostics.Process.StandardError%2A> 。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1017">These synchronous read operations do not complete until the associated <xref:System.Diagnostics.Process> writes to its <xref:System.Diagnostics.Process.StandardError%2A> stream, or closes the stream.</span></span>  
  
 <span data-ttu-id="7e18d-1018">与此相反， <xref:System.Diagnostics.Process.BeginErrorReadLine%2A> 对流启动异步读取操作 <xref:System.Diagnostics.Process.StandardError%2A> 。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1018">In contrast, <xref:System.Diagnostics.Process.BeginErrorReadLine%2A> starts asynchronous read operations on the <xref:System.Diagnostics.Process.StandardError%2A> stream.</span></span> <span data-ttu-id="7e18d-1019">此方法将为流输出启用指定的事件处理程序，并立即返回到调用方，当流输出定向到事件处理程序时，该处理程序可以执行其他操作。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1019">This method enables a designated event handler for the stream output and immediately returns to the caller, which can perform other work while the stream output is directed to the event handler.</span></span>  
  
 <span data-ttu-id="7e18d-1020">同步读取操作介绍了从流读取的调用方 <xref:System.Diagnostics.Process.StandardError%2A> 与写入到该流的子进程之间的依赖关系。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1020">Synchronous read operations introduce a dependency between the caller reading from the <xref:System.Diagnostics.Process.StandardError%2A> stream and the child process writing to that stream.</span></span> <span data-ttu-id="7e18d-1021">这些依赖项可能会导致死锁情况。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1021">These dependencies can result in deadlock conditions.</span></span> <span data-ttu-id="7e18d-1022">当调用方从子进程的重定向流中进行读取时，它依赖于子进程。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1022">When the caller reads from the redirected stream of a child process, it is dependent on the child.</span></span> <span data-ttu-id="7e18d-1023">调用方等待读取操作，直到子级写入流或关闭流为止。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1023">The caller waits on the read operation until the child writes to the stream or closes the stream.</span></span> <span data-ttu-id="7e18d-1024">当子进程写入足够的数据以填充其重定向流时，它依赖于父进程。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1024">When the child process writes enough data to fill its redirected stream, it is dependent on the parent.</span></span> <span data-ttu-id="7e18d-1025">子进程将在下一次写入操作之前等待，直到父进程从整个流中读取或关闭流为止。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1025">The child process waits on the next write operation until the parent reads from the full stream or closes the stream.</span></span> <span data-ttu-id="7e18d-1026">当调用方和子进程等待彼此完成操作时，会发生死锁条件，并且这两个情况都无法继续。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1026">The deadlock condition results when the caller and child process wait on each other to complete an operation, and neither can proceed.</span></span> <span data-ttu-id="7e18d-1027">您可以通过计算调用方和子进程之间的依赖关系来避免死锁。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1027">You can avoid deadlocks by evaluating dependencies between the caller and child process.</span></span>  

<span data-ttu-id="7e18d-1028">本节中的最后两个示例使用 <xref:System.Diagnostics.Process.Start%2A> 方法来启动名为 *Write500Lines.exe*的可执行文件。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1028">The last two examples in this section use the <xref:System.Diagnostics.Process.Start%2A> method to launch an executable named *Write500Lines.exe*.</span></span> <span data-ttu-id="7e18d-1029">下面的示例包含它的源代码。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1029">The following example contains its source code.</span></span>

[!code-csharp[Executable launched by Process.Start](~/samples/snippets/csharp/api/system.diagnostics/process/standardoutput/write500lines.cs)]
[!code-vb[Executable launched by Process.Start](~/samples/snippets/visualbasic/api/system.diagnostics/process/standardoutput/write500lines.vb)]

<span data-ttu-id="7e18d-1030">下面的示例演示如何从重定向的错误流中读取并等待子进程退出。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1030">The following example shows how to read from a redirected error stream and wait for the child process to exit.</span></span> <span data-ttu-id="7e18d-1031">它通过调用 before 来避免死锁情况 `p.StandardError.ReadToEnd` `p.WaitForExit` 。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1031">It avoids a deadlock condition by calling `p.StandardError.ReadToEnd` before `p.WaitForExit`.</span></span> <span data-ttu-id="7e18d-1032">如果父进程 `p.WaitForExit` 在之前调用 `p.StandardError.ReadToEnd` ，并且子进程写入足够多的文本以填充重定向的流，则会导致死锁情况。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1032">A deadlock condition can result if the parent process calls `p.WaitForExit` before `p.StandardError.ReadToEnd` and the child process writes enough text to fill the redirected stream.</span></span> <span data-ttu-id="7e18d-1033">父进程会无限期地等待子进程退出。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1033">The parent process would wait indefinitely for the child process to exit.</span></span> <span data-ttu-id="7e18d-1034">子进程会无限期地等待父进程从整个流中读取 <xref:System.Diagnostics.Process.StandardError%2A> 。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1034">The child process would wait indefinitely for the parent to read from the full <xref:System.Diagnostics.Process.StandardError%2A> stream.</span></span>   

[!code-csharp[Reading from the error stream](~/samples/snippets/csharp/api/system.diagnostics/process/standarderror/stderror-sync.cs)]
[!code-vb[Reading from the error stream](~/samples/snippets/visualbasic/api/system.diagnostics/process/standarderror/stderror-sync.vb)]  

<span data-ttu-id="7e18d-1035">从标准输出和标准错误流中读取所有文本时，会出现类似的问题。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1035">There is a similar issue when you read all text from both the standard output and standard error streams.</span></span> <span data-ttu-id="7e18d-1036">下面的示例对两个流执行读取操作。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1036">The following example performs a read operation on both streams.</span></span> <span data-ttu-id="7e18d-1037">它通过对流执行异步读取操作来避免死锁情况 <xref:System.Diagnostics.Process.StandardError%2A> 。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1037">It avoids the deadlock condition by performing asynchronous read operations on the <xref:System.Diagnostics.Process.StandardError%2A> stream.</span></span> <span data-ttu-id="7e18d-1038">如果父进程调用 `p.StandardOutput.ReadToEnd` 后跟 `p.StandardError.ReadToEnd` ，并且子进程写入足够的文本来填充其错误流，则会导致死锁情况。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1038">A deadlock condition results if the parent process calls `p.StandardOutput.ReadToEnd` followed by `p.StandardError.ReadToEnd` and the child process writes enough text to fill its error stream.</span></span> <span data-ttu-id="7e18d-1039">父进程会无限期地等待子进程关闭其 <xref:System.Diagnostics.Process.StandardOutput%2A> 流。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1039">The parent process would wait indefinitely for the child process to close its <xref:System.Diagnostics.Process.StandardOutput%2A> stream.</span></span> <span data-ttu-id="7e18d-1040">子进程会无限期地等待父进程从整个流中读取 <xref:System.Diagnostics.Process.StandardError%2A> 。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1040">The child process would wait indefinitely for the parent to read from the full <xref:System.Diagnostics.Process.StandardError%2A> stream.</span></span>  
[!code-csharp[Reading from both streams](~/samples/snippets/csharp/api/system.diagnostics/process/standardoutput/stdoutput-async.cs)]
[!code-vb[Reading from both streams](~/samples/snippets/visualbasic/api/system.diagnostics/process/standardoutput/stdoutput-async.vb)]  

<span data-ttu-id="7e18d-1041">您可以使用异步读取操作来避免这些依赖项及其死锁。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1041">You can use asynchronous read operations to avoid these dependencies and their deadlock potential.</span></span> <span data-ttu-id="7e18d-1042">或者，您可以通过创建两个线程并在单独的线程上读取每个流的输出来避免出现死锁情况。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1042">Alternately, you can avoid the deadlock condition by creating two threads and reading the output of each stream on a separate thread.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7e18d-1043">不能对重定向的流混合使用异步和同步读取操作。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1043">You cannot mix asynchronous and synchronous read operations on a redirected stream.</span></span> <span data-ttu-id="7e18d-1044"><xref:System.Diagnostics.Process>在异步或同步模式下打开的重定向流后，对该流进行的所有进一步读取操作都必须处于同一模式。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1044">Once the redirected stream of a <xref:System.Diagnostics.Process> is opened in either asynchronous or synchronous mode, all further read operations on that stream must be in the same mode.</span></span> <span data-ttu-id="7e18d-1045">例如，不要在 <xref:System.Diagnostics.Process.BeginErrorReadLine%2A> <xref:System.IO.StreamReader.ReadLine%2A> 对流上调用， <xref:System.Diagnostics.Process.StandardError%2A> 反之亦然。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1045">For example, do not follow <xref:System.Diagnostics.Process.BeginErrorReadLine%2A> with a call to <xref:System.IO.StreamReader.ReadLine%2A> on the <xref:System.Diagnostics.Process.StandardError%2A> stream, or vice versa.</span></span> <span data-ttu-id="7e18d-1046">但是，可以在不同模式下读取两个不同的流。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1046">However, you can read two different streams in different modes.</span></span> <span data-ttu-id="7e18d-1047">例如，可以调用 <xref:System.Diagnostics.Process.BeginOutputReadLine%2A> ，然后调用流的 <xref:System.IO.StreamReader.ReadLine%2A> <xref:System.Diagnostics.Process.StandardError%2A> 。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1047">For example, you can call <xref:System.Diagnostics.Process.BeginOutputReadLine%2A> and then call <xref:System.IO.StreamReader.ReadLine%2A> for the <xref:System.Diagnostics.Process.StandardError%2A> stream.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7e18d-1048">以下示例 `net use` 结合使用命令和用户提供的参数来映射网络资源。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1048">The following example uses the `net use` command together with a user supplied argument to map a network resource.</span></span> <span data-ttu-id="7e18d-1049">然后，它读取 net 命令的标准错误流并将其写入控制台。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1049">It then reads the standard error stream of the net command and writes it to console.</span></span>  
  
 [!code-cpp[Process_StandardError#1](~/samples/snippets/cpp/VS_Snippets_CLR/Process_StandardError/CPP/source.cpp#1)]
 [!code-csharp[Process_StandardError#1](~/samples/snippets/csharp/VS_Snippets_CLR/Process_StandardError/CS/source.cs#1)]
 [!code-vb[Process_StandardError#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Process_StandardError/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="7e18d-1050">尚未对 <see cref="P:System.Diagnostics.Process.StandardError" /> 流进行重定向定义；请确保 <see cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardError" /> 设置为 <see langword="true" /> 且 <see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" /> 设置为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1050">The <see cref="P:System.Diagnostics.Process.StandardError" /> stream has not been defined for redirection; ensure <see cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardError" /> is set to <see langword="true" /> and <see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" /> is set to <see langword="false" />.</span></span>  
  
<span data-ttu-id="7e18d-1051">- 或 -</span><span class="sxs-lookup"><span data-stu-id="7e18d-1051">-or-</span></span> 
<span data-ttu-id="7e18d-1052">已打开 <see cref="P:System.Diagnostics.Process.StandardError" /> 流，以使用 <see cref="M:System.Diagnostics.Process.BeginErrorReadLine" /> 进行异步读取操作。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1052">The <see cref="P:System.Diagnostics.Process.StandardError" /> stream has been opened for asynchronous read operations with <see cref="M:System.Diagnostics.Process.BeginErrorReadLine" />.</span></span></exception>
        <altmember cref="P:System.Diagnostics.Process.StandardInput" />
        <altmember cref="P:System.Diagnostics.Process.StandardOutput" />
        <altmember cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardError" />
      </Docs>
    </Member>
    <Member MemberName="StandardInput">
      <MemberSignature Language="C#" Value="public System.IO.StreamWriter StandardInput { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IO.StreamWriter StandardInput" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.StandardInput" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property StandardInput As StreamWriter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IO::StreamWriter ^ StandardInput { System::IO::StreamWriter ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.StandardInput : System.IO.StreamWriter" Usage="System.Diagnostics.Process.StandardInput" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.Diagnostics.MonitoringDescription("ProcessStandardInput")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.MonitoringDescription("ProcessStandardInput")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Diagnostics.MonitoringDescription("Standard input stream of the process.")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.MonitoringDescription("Standard input stream of the process.")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.StreamWriter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7e18d-1053">获取用于写入应用程序输入的流。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1053">Gets a stream used to write the input of the application.</span></span></summary>
        <value><span data-ttu-id="7e18d-1054"><see cref="T:System.IO.StreamWriter" />，可用于写入应用程序的标准输入流。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1054">A <see cref="T:System.IO.StreamWriter" /> that can be used to write the standard input stream of the application.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> can read input text from its standard input stream, typically the keyboard. By redirecting the <ph id="ph1">&lt;xref:System.Diagnostics.Process.StandardInput%2A&gt;</ph> stream, you can programmatically specify the input. For example, instead of using keyboard input, you can provide text from the contents of a designated file or output from another application.  
  
> [!NOTE]
>  <span data-ttu-id="7e18d-1058">若要使用 <xref:System.Diagnostics.Process.StandardInput%2A> ，必须将设置 <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A?displayProperty=nameWithType> 为 `false` ，并且必须将设置 <xref:System.Diagnostics.ProcessStartInfo.RedirectStandardInput%2A?displayProperty=nameWithType> 为 `true` 。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1058">To use <xref:System.Diagnostics.Process.StandardInput%2A>, you must set <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A?displayProperty=nameWithType> to `false`, and you must set <xref:System.Diagnostics.ProcessStartInfo.RedirectStandardInput%2A?displayProperty=nameWithType> to `true`.</span></span> <span data-ttu-id="7e18d-1059">否则，写入 <xref:System.Diagnostics.Process.StandardInput%2A> 流时将引发异常。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1059">Otherwise, writing to the <xref:System.Diagnostics.Process.StandardInput%2A> stream throws an exception.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7e18d-1060">下面的示例演示如何重定向 <xref:System.Diagnostics.Process.StandardInput%2A> 进程流。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1060">The following example illustrates how to redirect the <xref:System.Diagnostics.Process.StandardInput%2A> stream of a process.</span></span> <span data-ttu-id="7e18d-1061">该示例启动 `sort` 带有重定向输入的命令。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1061">The example starts the `sort` command with redirected input.</span></span> <span data-ttu-id="7e18d-1062">然后，它会提示用户输入文本，并 `sort` 通过重定向流将其传递到进程 <xref:System.Diagnostics.Process.StandardInput%2A> 。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1062">It then prompts the user for text, and passes that to the `sort` process by means of the redirected <xref:System.Diagnostics.Process.StandardInput%2A> stream.</span></span> <span data-ttu-id="7e18d-1063">在 `sort` 控制台上向用户显示结果。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1063">The `sort` results are displayed to the user on the console.</span></span>  
  
 [!code-cpp[Process_StandardInput#1](~/samples/snippets/cpp/VS_Snippets_CLR/Process_StandardInput/CPP/process_standardinput.cpp#1)]
 [!code-csharp[Process_StandardInput#1](~/samples/snippets/csharp/VS_Snippets_CLR/Process_StandardInput/CS/process_standardinput.cs#1)]
 [!code-vb[Process_StandardInput#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Process_StandardInput/VB/process_standardinput.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="7e18d-1064"><see cref="P:System.Diagnostics.Process.StandardInput" /> 流尚未定义，因为 <see cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardInput" /> 设置为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1064">The <see cref="P:System.Diagnostics.Process.StandardInput" /> stream has not been defined because <see cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardInput" /> is set to <see langword="false" />.</span></span></exception>
        <altmember cref="P:System.Diagnostics.Process.StandardOutput" />
        <altmember cref="P:System.Diagnostics.Process.StandardError" />
        <altmember cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardInput" />
      </Docs>
    </Member>
    <Member MemberName="StandardOutput">
      <MemberSignature Language="C#" Value="public System.IO.StreamReader StandardOutput { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IO.StreamReader StandardOutput" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.StandardOutput" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property StandardOutput As StreamReader" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IO::StreamReader ^ StandardOutput { System::IO::StreamReader ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.StandardOutput : System.IO.StreamReader" Usage="System.Diagnostics.Process.StandardOutput" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.Diagnostics.MonitoringDescription("ProcessStandardOutput")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.MonitoringDescription("ProcessStandardOutput")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Diagnostics.MonitoringDescription("Standard output stream of the process.")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.MonitoringDescription("Standard output stream of the process.")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.StreamReader</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7e18d-1065">获取用于读取应用程序文本输出的流。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1065">Gets a stream used to read the textual output of the application.</span></span></summary>
        <value><span data-ttu-id="7e18d-1066"><see cref="T:System.IO.StreamReader" />，可用于读取应用程序的标准输出流。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1066">A <see cref="T:System.IO.StreamReader" /> that can be used to read the standard output stream of the application.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When a <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> writes text to its standard stream, that text is normally displayed on the console. By redirecting the <ph id="ph1">&lt;xref:System.Diagnostics.Process.StandardOutput%2A&gt;</ph> stream, you can manipulate or suppress the output of a process. For example, you can filter the text, format it differently, or write the output to both the console and a designated log file.  
  
> [!NOTE]
>  <span data-ttu-id="7e18d-1070">若要使用 <xref:System.Diagnostics.Process.StandardOutput%2A> ，必须将设置 <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A?displayProperty=nameWithType> 为 `false` ，并且必须将设置 <xref:System.Diagnostics.ProcessStartInfo.RedirectStandardOutput%2A?displayProperty=nameWithType> 为 `true` 。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1070">To use <xref:System.Diagnostics.Process.StandardOutput%2A>, you must set <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A?displayProperty=nameWithType> to `false`, and you must set <xref:System.Diagnostics.ProcessStartInfo.RedirectStandardOutput%2A?displayProperty=nameWithType> to `true`.</span></span> <span data-ttu-id="7e18d-1071">否则，从流中读取会 <xref:System.Diagnostics.Process.StandardOutput%2A> 引发异常。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1071">Otherwise, reading from the <xref:System.Diagnostics.Process.StandardOutput%2A> stream throws an exception.</span></span>  
  
 <span data-ttu-id="7e18d-1072">重定向的 <xref:System.Diagnostics.Process.StandardOutput%2A> 流可以同步或异步读取。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1072">The redirected <xref:System.Diagnostics.Process.StandardOutput%2A> stream can be read synchronously or asynchronously.</span></span> <span data-ttu-id="7e18d-1073">方法（如 <xref:System.IO.StreamReader.Read%2A> 、 <xref:System.IO.StreamReader.ReadLine%2A> 和） <xref:System.IO.StreamReader.ReadToEnd%2A> 在进程的输出流上执行同步读取操作。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1073">Methods such as <xref:System.IO.StreamReader.Read%2A>, <xref:System.IO.StreamReader.ReadLine%2A>, and <xref:System.IO.StreamReader.ReadToEnd%2A> perform synchronous read operations on the output stream of the process.</span></span> <span data-ttu-id="7e18d-1074">在对 <xref:System.Diagnostics.Process> 其流进行关联的写入或关闭流之前，这些同步读取操作不会完成 <xref:System.Diagnostics.Process.StandardOutput%2A> 。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1074">These synchronous read operations do not complete until the associated <xref:System.Diagnostics.Process> writes to its <xref:System.Diagnostics.Process.StandardOutput%2A> stream, or closes the stream.</span></span>  
  
 <span data-ttu-id="7e18d-1075">与此相反， <xref:System.Diagnostics.Process.BeginOutputReadLine%2A> 对流启动异步读取操作 <xref:System.Diagnostics.Process.StandardOutput%2A> 。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1075">In contrast, <xref:System.Diagnostics.Process.BeginOutputReadLine%2A> starts asynchronous read operations on the <xref:System.Diagnostics.Process.StandardOutput%2A> stream.</span></span> <span data-ttu-id="7e18d-1076">此方法将为流输出启用指定的事件处理程序，并立即返回到调用方，当流输出定向到事件处理程序时，该处理程序可以执行其他操作。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1076">This method enables a designated event handler for the stream output and immediately returns to the caller, which can perform other work while the stream output is directed to the event handler.</span></span>  
  
 <span data-ttu-id="7e18d-1077">同步读取操作介绍了从流读取的调用方 <xref:System.Diagnostics.Process.StandardOutput%2A> 与写入到该流的子进程之间的依赖关系。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1077">Synchronous read operations introduce a dependency between the caller reading from the <xref:System.Diagnostics.Process.StandardOutput%2A> stream and the child process writing to that stream.</span></span> <span data-ttu-id="7e18d-1078">这些依赖项可能会导致死锁情况。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1078">These dependencies can result in deadlock conditions.</span></span> <span data-ttu-id="7e18d-1079">当调用方从子进程的重定向流中进行读取时，它依赖于子进程。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1079">When the caller reads from the redirected stream of a child process, it is dependent on the child.</span></span> <span data-ttu-id="7e18d-1080">调用方等待读取操作，直到子级写入流或关闭流为止。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1080">The caller waits on the read operation until the child writes to the stream or closes the stream.</span></span> <span data-ttu-id="7e18d-1081">当子进程写入足够的数据以填充其重定向流时，它依赖于父进程。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1081">When the child process writes enough data to fill its redirected stream, it is dependent on the parent.</span></span> <span data-ttu-id="7e18d-1082">子进程将在下一次写入操作之前等待，直到父进程从整个流中读取或关闭流为止。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1082">The child process waits on the next write operation until the parent reads from the full stream or closes the stream.</span></span> <span data-ttu-id="7e18d-1083">当调用方和子进程等待彼此完成操作时，会发生死锁条件，并且这两个情况都无法继续。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1083">The deadlock condition results when the caller and child process wait on each other to complete an operation, and neither can proceed.</span></span> <span data-ttu-id="7e18d-1084">您可以通过计算调用方和子进程之间的依赖关系来避免死锁。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1084">You can avoid deadlocks by evaluating dependencies between the caller and child process.</span></span>  

<span data-ttu-id="7e18d-1085">本节中的最后两个示例使用 <xref:System.Diagnostics.Process.Start%2A> 方法来启动名为 *Write500Lines.exe*的可执行文件。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1085">The last two examples in this section use the <xref:System.Diagnostics.Process.Start%2A> method to launch an executable named *Write500Lines.exe*.</span></span> <span data-ttu-id="7e18d-1086">下面的示例包含它的源代码。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1086">The following example contains its source code.</span></span>

[!code-csharp[Executable launched by Process.Start](~/samples/snippets/csharp/api/system.diagnostics/process/standardoutput/write500lines.cs)]
[!code-vb[Executable launched by Process.Start](~/samples/snippets/visualbasic/api/system.diagnostics/process/standardoutput/write500lines.vb)]

<span data-ttu-id="7e18d-1087">下面的示例演示如何从重定向流中读取并等待子进程退出。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1087">The following example shows how to read from a redirected stream and wait for the child process to exit.</span></span> <span data-ttu-id="7e18d-1088">该示例通过调用之前来避免死锁情况 `p.StandardOutput.ReadToEnd` `p.WaitForExit` 。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1088">The example avoids a deadlock condition by calling `p.StandardOutput.ReadToEnd` before `p.WaitForExit`.</span></span> <span data-ttu-id="7e18d-1089">如果父进程 `p.WaitForExit` 在之前调用 `p.StandardOutput.ReadToEnd` ，并且子进程写入足够多的文本以填充重定向的流，则会导致死锁情况。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1089">A deadlock condition can result if the parent process calls `p.WaitForExit` before `p.StandardOutput.ReadToEnd` and the child process writes enough text to fill the redirected stream.</span></span> <span data-ttu-id="7e18d-1090">父进程会无限期地等待子进程退出。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1090">The parent process would wait indefinitely for the child process to exit.</span></span> <span data-ttu-id="7e18d-1091">子进程会无限期地等待父进程从整个流中读取 <xref:System.Diagnostics.Process.StandardOutput%2A> 。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1091">The child process would wait indefinitely for the parent to read from the full <xref:System.Diagnostics.Process.StandardOutput%2A> stream.</span></span>  

[!code-csharp[Reading synchronously from a redirected output stream](~/samples/snippets/csharp/api/system.diagnostics/process/standardoutput/stdoutput-sync.cs)]  
[!code-vb[Reading synchronously from a redirected output stream](~/samples/snippets/visualbasic/api/system.diagnostics/process/standardoutput/stdoutput-sync.vb)]  

<span data-ttu-id="7e18d-1092">从标准输出和标准错误流中读取所有文本时，会出现类似的问题。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1092">There is a similar issue when you read all text from both the standard output and standard error streams.</span></span> <span data-ttu-id="7e18d-1093">下面的示例对两个流执行读取操作。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1093">The following example performs a read operation on both streams.</span></span> <span data-ttu-id="7e18d-1094">它通过对流执行异步读取操作来避免死锁情况 <xref:System.Diagnostics.Process.StandardError%2A> 。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1094">It avoids the deadlock condition by performing asynchronous read operations on the <xref:System.Diagnostics.Process.StandardError%2A> stream.</span></span> <span data-ttu-id="7e18d-1095">如果父进程调用 `p.StandardOutput.ReadToEnd` 后跟 `p.StandardError.ReadToEnd` ，并且子进程写入足够的文本来填充其错误流，则会导致死锁情况。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1095">A deadlock condition results if the parent process calls `p.StandardOutput.ReadToEnd` followed by `p.StandardError.ReadToEnd` and the child process writes enough text to fill its error stream.</span></span> <span data-ttu-id="7e18d-1096">父进程会无限期地等待子进程关闭其 <xref:System.Diagnostics.Process.StandardOutput%2A> 流。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1096">The parent process would wait indefinitely for the child process to close its <xref:System.Diagnostics.Process.StandardOutput%2A> stream.</span></span> <span data-ttu-id="7e18d-1097">子进程会无限期地等待父进程从整个流中读取 <xref:System.Diagnostics.Process.StandardError%2A> 。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1097">The child process would wait indefinitely for the parent to read from the full <xref:System.Diagnostics.Process.StandardError%2A> stream.</span></span>   
[!code-csharp[Reading from a redirected output and error stream](~/samples/snippets/csharp/api/system.diagnostics/process/standardoutput/stdoutput-async.cs)]  
[!code-vb[Reading from a redirected output and error stream](~/samples/snippets/visualbasic/api/system.diagnostics/process/standardoutput/stdoutput-async.vb)]    
  
 <span data-ttu-id="7e18d-1098">您可以使用异步读取操作来避免这些依赖项及其死锁。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1098">You can use asynchronous read operations to avoid these dependencies and their deadlock potential.</span></span> <span data-ttu-id="7e18d-1099">或者，您可以通过创建两个线程并在单独的线程上读取每个流的输出来避免出现死锁情况。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1099">Alternately, you can avoid the deadlock condition by creating two threads and reading the output of each stream on a separate thread.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7e18d-1100">不能对重定向的流混合使用异步和同步读取操作。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1100">You cannot mix asynchronous and synchronous read operations on a redirected stream.</span></span> <span data-ttu-id="7e18d-1101"><xref:System.Diagnostics.Process>在异步或同步模式下打开的重定向流后，对该流进行的所有进一步读取操作都必须处于同一模式。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1101">Once the redirected stream of a <xref:System.Diagnostics.Process> is opened in either asynchronous or synchronous mode, all further read operations on that stream must be in the same mode.</span></span> <span data-ttu-id="7e18d-1102">例如，不要在 <xref:System.Diagnostics.Process.BeginOutputReadLine%2A> <xref:System.IO.StreamReader.ReadLine%2A> 对流上调用， <xref:System.Diagnostics.Process.StandardOutput%2A> 反之亦然。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1102">For example, do not follow <xref:System.Diagnostics.Process.BeginOutputReadLine%2A> with a call to <xref:System.IO.StreamReader.ReadLine%2A> on the <xref:System.Diagnostics.Process.StandardOutput%2A> stream, or vice versa.</span></span> <span data-ttu-id="7e18d-1103">但是，可以在不同模式下读取两个不同的流。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1103">However, you can read two different streams in different modes.</span></span> <span data-ttu-id="7e18d-1104">例如，可以调用 <xref:System.Diagnostics.Process.BeginOutputReadLine%2A> ，然后调用流的 <xref:System.IO.StreamReader.ReadLine%2A> <xref:System.Diagnostics.Process.StandardError%2A> 。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1104">For example, you can call <xref:System.Diagnostics.Process.BeginOutputReadLine%2A> and then call <xref:System.IO.StreamReader.ReadLine%2A> for the <xref:System.Diagnostics.Process.StandardError%2A> stream.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7e18d-1105">下面的示例运行 ipconfig.exe 命令，并将其标准输出重定向到该示例的控制台窗口。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1105">The following example runs the ipconfig.exe command and redirects its standard output to the example's console window.</span></span>  
  
 [!code-cpp[Process_StandardOutput#2](~/samples/snippets/cpp/VS_Snippets_CLR/Process_StandardOutput/CPP/process_standardoutput.cpp)]
 [!code-csharp[Process_StandardOutput#2](~/samples/snippets/csharp/VS_Snippets_CLR/Process_StandardOutput/CS/process_standardoutput.cs)]
 [!code-vb[Process_StandardOutput#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/Process_StandardOutput/VB/process_standardoutput.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="7e18d-1106">尚未对 <see cref="P:System.Diagnostics.Process.StandardOutput" /> 流进行重定向定义；请确保 <see cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardOutput" /> 设置为 <see langword="true" /> 且 <see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" /> 设置为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1106">The <see cref="P:System.Diagnostics.Process.StandardOutput" /> stream has not been defined for redirection; ensure <see cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardOutput" /> is set to <see langword="true" /> and <see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" /> is set to <see langword="false" />.</span></span>  
  
<span data-ttu-id="7e18d-1107">- 或 -</span><span class="sxs-lookup"><span data-stu-id="7e18d-1107">-or-</span></span> 
<span data-ttu-id="7e18d-1108">已打开 <see cref="P:System.Diagnostics.Process.StandardOutput" /> 流，以使用 <see cref="M:System.Diagnostics.Process.BeginOutputReadLine" /> 进行异步读取操作。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1108">The <see cref="P:System.Diagnostics.Process.StandardOutput" /> stream has been opened for asynchronous read operations with <see cref="M:System.Diagnostics.Process.BeginOutputReadLine" />.</span></span></exception>
        <altmember cref="P:System.Diagnostics.Process.StandardInput" />
        <altmember cref="P:System.Diagnostics.Process.StandardError" />
        <altmember cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardOutput" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Start">
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="7e18d-1109">启动进程资源并将其与 <see cref="T:System.Diagnostics.Process" /> 组件关联。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1109">Starts a process resource and associates it with a <see cref="T:System.Diagnostics.Process" /> component.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public bool Start ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Start() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Process.Start" />
      <MemberSignature Language="VB.NET" Value="Public Function Start () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Start();" />
      <MemberSignature Language="F#" Value="member this.Start : unit -&gt; bool" Usage="process.Start " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7e18d-1110">启动(或重用)此 <see cref="T:System.Diagnostics.Process" /> 组件的 <see cref="P:System.Diagnostics.Process.StartInfo" /> 属性指定的进程资源，并将其与该组件关联。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1110">Starts (or reuses) the process resource that is specified by the <see cref="P:System.Diagnostics.Process.StartInfo" /> property of this <see cref="T:System.Diagnostics.Process" /> component and associates it with the component.</span></span></summary>
        <returns><span data-ttu-id="7e18d-1111">如果启动了进程资源，则为 <see langword="true" />；如果没有启动新的进程资源(例如，如果重用了现有进程)，则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1111"><see langword="true" /> if a process resource is started; <see langword="false" /> if no new process resource is started (for example, if an existing process is reused).</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use this overload to start a process resource and associate it with the current <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> component. The return value <ph id="ph1">`true`</ph> indicates that a new process resource was started. If the process resource specified by the <ph id="ph1">&lt;xref:System.Diagnostics.ProcessStartInfo.FileName%2A&gt;</ph> member of the <ph id="ph2">&lt;xref:System.Diagnostics.Process.StartInfo%2A&gt;</ph> property is already running on the computer, no additional process resource is started. <span data-ttu-id="7e18d-1115">相反，将重用正在运行的进程资源并 `false` 返回。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1115">Instead, the running process resource is reused and `false` is returned.</span></span>  
  
 <span data-ttu-id="7e18d-1116">可以通过指定位置 (例如，最初在其中安装应用程序的 Web 地址) 来启动 ClickOnce 应用程序。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1116">You can start a ClickOnce application by specifying the location (for example, a Web address) from which you originally installed the application.</span></span> <span data-ttu-id="7e18d-1117">不要通过在硬盘驱动器上指定其安装位置来启动 ClickOnce 应用程序。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1117">Do not start a ClickOnce application by specifying its installed location on your hard drive.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7e18d-1118">如果使用的是 Visual Studio，则方法的此重载 <xref:System.Diagnostics.Process.Start%2A> 是在将 <xref:System.Diagnostics.Process> 组件拖到设计器上后插入到代码中的方法。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1118">If you are using Visual Studio, this overload of the <xref:System.Diagnostics.Process.Start%2A> method is the one that you insert into your code after you drag a <xref:System.Diagnostics.Process> component onto the designer.</span></span> <span data-ttu-id="7e18d-1119">使用 `Properties` 窗口展开 `StartInfo` 类别，并将适当的值写入 `FileName` 属性。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1119">Use the `Properties` window to expand the `StartInfo` category and write the appropriate value into the `FileName` property.</span></span> <span data-ttu-id="7e18d-1120">您所做的更改将显示在窗体的 `InitializeComponent` 过程中。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1120">Your changes will appear in the form's `InitializeComponent` procedure.</span></span>  
  
 <span data-ttu-id="7e18d-1121">的此重载 <xref:System.Diagnostics.Process.Start%2A> 不是 `static` 方法。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1121">This overload of <xref:System.Diagnostics.Process.Start%2A> is not a `static` method.</span></span> <span data-ttu-id="7e18d-1122">必须从类的实例调用它 <xref:System.Diagnostics.Process> 。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1122">You must call it from an instance of the <xref:System.Diagnostics.Process> class.</span></span> <span data-ttu-id="7e18d-1123">在调用之前 <xref:System.Diagnostics.Process.Start%2A> ，必须首先指定 <xref:System.Diagnostics.Process.StartInfo%2A> 此实例的属性信息 <xref:System.Diagnostics.Process> ，因为该信息用于确定要启动的进程资源。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1123">Before calling <xref:System.Diagnostics.Process.Start%2A>, you must first specify <xref:System.Diagnostics.Process.StartInfo%2A> property information for this <xref:System.Diagnostics.Process> instance, because that information is used to determine the process resource to start.</span></span>  
  
 <span data-ttu-id="7e18d-1124">方法的其他重载 <xref:System.Diagnostics.Process.Start%2A> 是 `static` 成员。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1124">The other overloads of the <xref:System.Diagnostics.Process.Start%2A> method are `static` members.</span></span> <span data-ttu-id="7e18d-1125">在 <xref:System.Diagnostics.Process> 调用方法的重载之前，无需创建组件的实例。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1125">You do not need to create an instance of the <xref:System.Diagnostics.Process> component before you call those overloads of the method.</span></span> <span data-ttu-id="7e18d-1126">相反，你可以 <xref:System.Diagnostics.Process.Start%2A> 为 <xref:System.Diagnostics.Process> 类本身调用，并在 <xref:System.Diagnostics.Process> 进程启动时创建新的组件。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1126">Instead, you can call <xref:System.Diagnostics.Process.Start%2A> for the <xref:System.Diagnostics.Process> class itself, and a new <xref:System.Diagnostics.Process> component is created if the process was started.</span></span> <span data-ttu-id="7e18d-1127">`null`如果重用了进程，则返回或。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1127">Or, `null` is returned if a process was reused.</span></span> <span data-ttu-id="7e18d-1128">进程资源与方法返回的新组件自动关联 <xref:System.Diagnostics.Process> <xref:System.Diagnostics.Process.Start%2A> 。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1128">The process resource is automatically associated with the new <xref:System.Diagnostics.Process> component that is returned by the <xref:System.Diagnostics.Process.Start%2A> method.</span></span>  
  
 <span data-ttu-id="7e18d-1129"><xref:System.Diagnostics.Process.StartInfo%2A>成员可用于复制 `Run` Windows 菜单对话框的功能 `Start` 。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1129">The <xref:System.Diagnostics.Process.StartInfo%2A> members can be used to duplicate the functionality of the `Run` dialog box of the Windows `Start` menu.</span></span> <span data-ttu-id="7e18d-1130">可以通过在属性中设置相应的值来启动可键入到命令行中的任何内容 <xref:System.Diagnostics.Process.StartInfo%2A> 。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1130">Anything that can be typed into a command line can be started by setting the appropriate values in the <xref:System.Diagnostics.Process.StartInfo%2A> property.</span></span> <span data-ttu-id="7e18d-1131"><xref:System.Diagnostics.Process.StartInfo%2A>必须设置的唯一属性是 <xref:System.Diagnostics.ProcessStartInfo.FileName%2A> 属性。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1131">The only <xref:System.Diagnostics.Process.StartInfo%2A> property that must be set is the <xref:System.Diagnostics.ProcessStartInfo.FileName%2A> property.</span></span> <span data-ttu-id="7e18d-1132"><xref:System.Diagnostics.ProcessStartInfo.FileName%2A>属性不必是可执行文件。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1132">The <xref:System.Diagnostics.ProcessStartInfo.FileName%2A> property does not have to be an executable file.</span></span> <span data-ttu-id="7e18d-1133">它可以是其扩展插件与系统上安装的应用程序关联的任何文件类型。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1133">It can be of any file type for which the extension has been associated with an application that is installed on the system.</span></span> <span data-ttu-id="7e18d-1134">例如，如果您 <xref:System.Diagnostics.ProcessStartInfo.FileName%2A> 已将文本文件与一个编辑器（如记事本）关联，则该属性可以具有 .txt 扩展名; 如果您已将 .doc 文件与 word 处理工具（如 Microsoft word）关联，则该属性可能具有 .doc 扩展名。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1134">For example, the <xref:System.Diagnostics.ProcessStartInfo.FileName%2A> property can have a .txt extension if you have associated text files with an editor, such as Notepad, or it can have a .doc extension if you have associated .doc files with a word processing tool, such as Microsoft Word.</span></span>  
  
 <span data-ttu-id="7e18d-1135">在命令行中，可以指定要对某些类型的文件执行的操作。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1135">In the command line, you can specify actions to take for certain types of files.</span></span> <span data-ttu-id="7e18d-1136">例如，可以打印文档或编辑文本文件。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1136">For example, you can print documents or edit text files.</span></span> <span data-ttu-id="7e18d-1137">使用属性的成员指定这些操作 <xref:System.Diagnostics.ProcessStartInfo.Verb%2A> <xref:System.Diagnostics.Process.StartInfo%2A> 。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1137">Specify these actions using the <xref:System.Diagnostics.ProcessStartInfo.Verb%2A> member of the <xref:System.Diagnostics.Process.StartInfo%2A> property.</span></span> <span data-ttu-id="7e18d-1138">对于其他类型的文件，您可以在从对话框启动文件时指定命令行参数 `Run` 。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1138">For other types of files, you can specify command-line arguments when you start the file from the `Run` dialog box.</span></span> <span data-ttu-id="7e18d-1139">例如，如果将浏览器指定为，则可以将 URL 作为参数传递 <xref:System.Diagnostics.ProcessStartInfo.FileName%2A> 。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1139">For example, you can pass a URL as an argument if you specify your browser as the <xref:System.Diagnostics.ProcessStartInfo.FileName%2A>.</span></span> <span data-ttu-id="7e18d-1140">可以在属性成员中指定这些参数 <xref:System.Diagnostics.Process.StartInfo%2A> <xref:System.Diagnostics.ProcessStartInfo.Arguments%2A> 。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1140">These arguments can be specified in the <xref:System.Diagnostics.Process.StartInfo%2A> property's <xref:System.Diagnostics.ProcessStartInfo.Arguments%2A> member.</span></span>  
  
 <span data-ttu-id="7e18d-1141">如果在系统中使用引号声明了路径变量，则在启动在该位置找到的任何进程时必须完全限定该路径。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1141">If you have a path variable declared in your system using quotes, you must fully qualify that path when starting any process found in that location.</span></span> <span data-ttu-id="7e18d-1142">否则，系统将找不到该路径。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1142">Otherwise, the system will not find the path.</span></span> <span data-ttu-id="7e18d-1143">例如，如果不 `c:\mypath` 在你的路径中，且你使用引号添加它： `path = %path%;"c:\mypath"` ，则在启动时，你必须完全限定中的任何进程 `c:\mypath` 。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1143">For example, if `c:\mypath` is not in your path, and you add it using quotation marks: `path = %path%;"c:\mypath"`, you must fully qualify any process in `c:\mypath` when starting it.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7e18d-1144">ASP.NET 网页和服务器控制代码在 Web 服务器上的 ASP.NET 工作进程上下文中执行。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1144">ASP.NET Web page and server control code executes in the context of the ASP.NET worker process on the Web server.</span></span>  <span data-ttu-id="7e18d-1145">如果在 ASP.NET 网页 <xref:System.Diagnostics.Process.Start%2A> 或服务器控件中使用方法，则新进程将在具有受限权限的 Web 服务器上执行。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1145">If you use the <xref:System.Diagnostics.Process.Start%2A> method in an ASP.NET Web page or server control, the new process executes on the Web server with restricted permissions.</span></span> <span data-ttu-id="7e18d-1146">该进程不会在与客户端浏览器相同的上下文中启动，也不能访问用户桌面。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1146">The process does not start in the same context as the client browser, and does not have access to the user desktop.</span></span>  
  
 <span data-ttu-id="7e18d-1147">当你使用 <xref:System.Diagnostics.Process.Start%2A> 启动某个进程时，你可能需要将其关闭或丢失系统资源的风险。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1147">Whenever you use <xref:System.Diagnostics.Process.Start%2A> to start a process, you might need to close it or you risk losing system resources.</span></span> <span data-ttu-id="7e18d-1148">使用或关闭 <xref:System.Diagnostics.Process.CloseMainWindow%2A> 进程 <xref:System.Diagnostics.Process.Kill%2A> 。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1148">Close processes using <xref:System.Diagnostics.Process.CloseMainWindow%2A> or <xref:System.Diagnostics.Process.Kill%2A>.</span></span> <span data-ttu-id="7e18d-1149">您可以使用其属性来检查进程是否已关闭 <xref:System.Diagnostics.Process.HasExited%2A> 。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1149">You can check whether a process has already been closed by using its <xref:System.Diagnostics.Process.HasExited%2A> property.</span></span>  
  
 <span data-ttu-id="7e18d-1150">此处需要有关托管线程中的单元状态的说明。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1150">A note about apartment states in managed threads is necessary here.</span></span> <span data-ttu-id="7e18d-1151">当 <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A> 位于 `true` 进程组件的属性上时 <xref:System.Diagnostics.Process.StartInfo%2A> ，请确保已通过设置方法上的属性设置了应用程序的线程模型 `[STAThread]` `main()` 。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1151">When <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A> is `true` on the process component's <xref:System.Diagnostics.Process.StartInfo%2A> property, make sure you have set a threading model on your application by setting the attribute `[STAThread]` on the `main()` method.</span></span> <span data-ttu-id="7e18d-1152">否则，托管线程可以处于 `unknown` 状态或处于 `MTA` 状态，后者与发生冲突 <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A> `true` 。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1152">Otherwise, a managed thread can be in an `unknown` state or put in the `MTA` state, the latter of which conflicts with <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A> being `true`.</span></span> <span data-ttu-id="7e18d-1153">某些方法要求单元状态不为 `unknown` 。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1153">Some methods require that the apartment state not be `unknown`.</span></span> <span data-ttu-id="7e18d-1154">如果未显式设置状态，则当应用程序遇到此类方法时，它默认为 `MTA` ，一旦设置，将无法更改单元状态。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1154">If the state is not explicitly set, when the application encounters such a method, it defaults to `MTA`, and once set, the apartment state cannot be changed.</span></span> <span data-ttu-id="7e18d-1155">但是， `MTA` 当操作系统 shell 管理线程时，将导致引发异常。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1155">However, `MTA` causes an exception to be thrown when the operating system shell is managing the thread.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7e18d-1156">下面的示例使用类的实例 <xref:System.Diagnostics.Process> 来启动进程。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1156">The following example uses an instance of the <xref:System.Diagnostics.Process> class to start a process.</span></span>  
  
 [!code-cpp[Process.Start_instance#1](~/samples/snippets/cpp/VS_Snippets_CLR/Process.Start_instance/CPP/processstart.cpp#1)]
 [!code-csharp[Process.Start_instance#1](~/samples/snippets/csharp/VS_Snippets_CLR/Process.Start_instance/CS/processstart.cs#1)]
 [!code-vb[Process.Start_instance#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Process.Start_instance/VB/processstart.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="7e18d-1157">在 <see cref="T:System.Diagnostics.Process" /> 组件的 <see cref="P:System.Diagnostics.Process.StartInfo" /> 中未指定任何文件名。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1157">No file name was specified in the <see cref="T:System.Diagnostics.Process" /> component's <see cref="P:System.Diagnostics.Process.StartInfo" />.</span></span>

<span data-ttu-id="7e18d-1158">- 或 -</span><span class="sxs-lookup"><span data-stu-id="7e18d-1158">-or-</span></span>

<span data-ttu-id="7e18d-1159">当 <see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" /> 、 <see cref="P:System.Diagnostics.Process.StartInfo" /> 或 <see langword="true" /> 的值为 <see cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardInput" />时， <see cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardOutput" />属性的 <see cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardError" /> 成员的值为 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1159">The <see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" /> member of the <see cref="P:System.Diagnostics.Process.StartInfo" /> property is <see langword="true" /> while <see cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardInput" />, <see cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardOutput" />, or <see cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardError" /> is <see langword="true" />.</span></span></exception>
        <exception cref="T:System.ComponentModel.Win32Exception"><span data-ttu-id="7e18d-1160">打开关联的文件时出错。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1160">There was an error in opening the associated file.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="7e18d-1161">已释放此进程对象。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1161">The process object has already been disposed.</span></span></exception>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="7e18d-1162">不支持 shell 的操作系统（如，仅适用于.NET Core 的 Nano Server）不支持此方法。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1162">Method not supported on operating systems without shell support such as Nano Server (.NET Core only).</span></span></exception>
        <altmember cref="P:System.Diagnostics.Process.StartInfo" />
        <altmember cref="P:System.Diagnostics.ProcessStartInfo.FileName" />
        <altmember cref="T:System.Diagnostics.ProcessStartInfo" />
        <altmember cref="M:System.Diagnostics.Process.CloseMainWindow" />
        <altmember cref="M:System.Diagnostics.Process.Kill" />
      </Docs>
    </Member>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public static System.Diagnostics.Process? Start (System.Diagnostics.ProcessStartInfo startInfo);" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Diagnostics.Process Start(class System.Diagnostics.ProcessStartInfo startInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Process.Start(System.Diagnostics.ProcessStartInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Start (startInfo As ProcessStartInfo) As Process" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Diagnostics::Process ^ Start(System::Diagnostics::ProcessStartInfo ^ startInfo);" />
      <MemberSignature Language="F#" Value="static member Start : System.Diagnostics.ProcessStartInfo -&gt; System.Diagnostics.Process" Usage="System.Diagnostics.Process.Start startInfo" />
      <MemberSignature Language="C#" Value="public static System.Diagnostics.Process Start (System.Diagnostics.ProcessStartInfo startInfo);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.Process</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startInfo" Type="System.Diagnostics.ProcessStartInfo" />
      </Parameters>
      <Docs>
        <param name="startInfo"><span data-ttu-id="7e18d-1163"><see cref="T:System.Diagnostics.ProcessStartInfo" />，包含用于启动进程的信息(包括文件名和任何命令行参数)。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1163">The <see cref="T:System.Diagnostics.ProcessStartInfo" /> that contains the information that is used to start the process, including the file name and any command-line arguments.</span></span></param>
        <summary><span data-ttu-id="7e18d-1164">启动由包含进程启动信息(例如，要启动的进程的文件名)的参数指定的进程资源，并将该资源与新的 <see cref="T:System.Diagnostics.Process" /> 组件关联。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1164">Starts the process resource that is specified by the parameter containing process start information (for example, the file name of the process to start) and associates the resource with a new <see cref="T:System.Diagnostics.Process" /> component.</span></span></summary>
        <returns><span data-ttu-id="7e18d-1165">与进程资源关联的新 <see cref="T:System.Diagnostics.Process" />，如果未启动进程资源，则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1165">A new <see cref="T:System.Diagnostics.Process" /> that is associated with the process resource, or <see langword="null" /> if no process resource is started.</span></span> <span data-ttu-id="7e18d-1166">请注意，伴随同一进程中已运行的实例而启动的新进程将独立于其他进程。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1166">Note that a new process that's started alongside already running instances of the same process will be independent from the others.</span></span> <span data-ttu-id="7e18d-1167">此外，启动可能返回一个 <see cref="P:System.Diagnostics.Process.HasExited" /> 属性已设置为 <see langword="true" /> 的非 null 进程。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1167">In addition, Start may return a non-null Process with its <see cref="P:System.Diagnostics.Process.HasExited" /> property already set to <see langword="true" />.</span></span> <span data-ttu-id="7e18d-1168">在这种情况下，启动的进程可能已激活现有实例自身，然后退出。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1168">In this case, the started process may have activated an existing instance of itself and then exited.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use this overload to start a process resource by specifying a <ph id="ph1">&lt;xref:System.Diagnostics.ProcessStartInfo&gt;</ph> instance. The overload associates the resource with a new <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> object.  
  
> [!NOTE]
>  If the address of the executable file to start is a URL, the process is not started and <ph id="ph1">`null`</ph> is returned.  
  
 <span data-ttu-id="7e18d-1172">此重载使你可以在不先创建新实例的情况下启动进程 <xref:System.Diagnostics.Process> 。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1172">This overload lets you start a process without first creating a new <xref:System.Diagnostics.Process> instance.</span></span> <span data-ttu-id="7e18d-1173">将此重载与参数一起使用 <xref:System.Diagnostics.ProcessStartInfo> 是创建新 <xref:System.Diagnostics.Process> 实例、设置其 <xref:System.Diagnostics.Process.StartInfo%2A> 属性和调用实例的显式步骤的替代方法 <xref:System.Diagnostics.Process.Start%2A> <xref:System.Diagnostics.Process> 。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1173">Using this overload with a <xref:System.Diagnostics.ProcessStartInfo> parameter is an alternative to the explicit steps of creating a new <xref:System.Diagnostics.Process> instance, setting its <xref:System.Diagnostics.Process.StartInfo%2A> properties, and calling <xref:System.Diagnostics.Process.Start%2A> for the <xref:System.Diagnostics.Process> instance.</span></span>  
  
 <span data-ttu-id="7e18d-1174">使用 <xref:System.Diagnostics.ProcessStartInfo> 实例作为参数，可以使用 <xref:System.Diagnostics.Process.Start%2A> 最大程度控制传递到调用中的内容来启动进程。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1174">Using a <xref:System.Diagnostics.ProcessStartInfo> instance as the parameter lets you call <xref:System.Diagnostics.Process.Start%2A> with the most control over what is passed into the call to start the process.</span></span> <span data-ttu-id="7e18d-1175">如果需要只传递文件名或文件名和参数，则无需创建新的 <xref:System.Diagnostics.ProcessStartInfo> 实例，尽管这是一个选项。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1175">If you need to pass only a file name or a file name and arguments, it is not necessary to create a new <xref:System.Diagnostics.ProcessStartInfo> instance, although that is an option.</span></span> <span data-ttu-id="7e18d-1176"><xref:System.Diagnostics.Process.StartInfo%2A?displayProperty=nameWithType>必须设置的唯一属性是 <xref:System.Diagnostics.ProcessStartInfo.FileName%2A> 属性。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1176">The only <xref:System.Diagnostics.Process.StartInfo%2A?displayProperty=nameWithType> property that must be set is the <xref:System.Diagnostics.ProcessStartInfo.FileName%2A> property.</span></span> <span data-ttu-id="7e18d-1177"><xref:System.Diagnostics.ProcessStartInfo.FileName%2A>属性不需要表示可执行文件。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1177">The <xref:System.Diagnostics.ProcessStartInfo.FileName%2A> property does not need to represent an executable file.</span></span> <span data-ttu-id="7e18d-1178">它可以是其扩展插件与系统上安装的应用程序关联的任何文件类型。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1178">It can be of any file type for which the extension has been associated with an application that is installed on the system.</span></span> <span data-ttu-id="7e18d-1179">例如，如果您 <xref:System.Diagnostics.ProcessStartInfo.FileName%2A> 已将文本文件与一个编辑器（如记事本）关联，则该属性可以具有 .txt 扩展名; 如果您已将 .doc 文件与 word 处理工具（如 Microsoft word）关联，则该属性可能具有 .doc 扩展名。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1179">For example, the <xref:System.Diagnostics.ProcessStartInfo.FileName%2A> property can have a .txt extension if you have associated text files with an editor, such as Notepad, or it can have a .doc extension if you have associated .doc files with a word processing tool, such as Microsoft Word.</span></span>  
  
 <span data-ttu-id="7e18d-1180">可以通过指定位置 (例如，最初在其中安装应用程序的 Web 地址) 来启动 ClickOnce 应用程序。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1180">You can start a ClickOnce application by specifying the location (for example, a Web address) from which you originally installed the application.</span></span> <span data-ttu-id="7e18d-1181">不要通过在硬盘驱动器上指定其安装位置来启动 ClickOnce 应用程序。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1181">Do not start a ClickOnce application by specifying its installed location on your hard drive.</span></span>  
  
 <span data-ttu-id="7e18d-1182">如果 <xref:System.Diagnostics.ProcessStartInfo.UserName%2A?displayProperty=nameWithType> <xref:System.Diagnostics.ProcessStartInfo.Password%2A?displayProperty=nameWithType> 设置实例的和属性 <xref:System.Diagnostics.Process.StartInfo%2A> ，将调用非托管 `CreateProcessWithLogonW` 函数，这将在新窗口中启动该进程，即使 <xref:System.Diagnostics.ProcessStartInfo.CreateNoWindow%2A?displayProperty=nameWithType> 属性值为 `true` 或 <xref:System.Diagnostics.ProcessStartInfo.WindowStyle%2A?displayProperty=nameWithType> 属性值为 <xref:System.Diagnostics.ProcessWindowStyle.Hidden?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1182">If the <xref:System.Diagnostics.ProcessStartInfo.UserName%2A?displayProperty=nameWithType> and <xref:System.Diagnostics.ProcessStartInfo.Password%2A?displayProperty=nameWithType> properties of the <xref:System.Diagnostics.Process.StartInfo%2A> instance are set, the unmanaged `CreateProcessWithLogonW` function is called, which starts the process in a new window even if the <xref:System.Diagnostics.ProcessStartInfo.CreateNoWindow%2A?displayProperty=nameWithType> property value is `true` or the <xref:System.Diagnostics.ProcessStartInfo.WindowStyle%2A?displayProperty=nameWithType> property value is <xref:System.Diagnostics.ProcessWindowStyle.Hidden?displayProperty=nameWithType>.</span></span> <span data-ttu-id="7e18d-1183">如果 <xref:System.Diagnostics.ProcessStartInfo.Domain%2A?displayProperty=nameWithType> 属性为 `null` ，则 <xref:System.Diagnostics.ProcessStartInfo.UserName%2A?displayProperty=nameWithType> 属性必须为 UPN 格式，即*user* @ *DNS_domain_name*。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1183">If the <xref:System.Diagnostics.ProcessStartInfo.Domain%2A?displayProperty=nameWithType> property is `null`, the <xref:System.Diagnostics.ProcessStartInfo.UserName%2A?displayProperty=nameWithType> property must be in UPN format, *user*@*DNS_domain_name*.</span></span>   
  
 <span data-ttu-id="7e18d-1184">与其他重载不同，没有参数的重载 <xref:System.Diagnostics.Process.Start%2A> 不是 `static` 成员。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1184">Unlike the other overloads, the overload of <xref:System.Diagnostics.Process.Start%2A> that has no parameters is not a `static` member.</span></span> <span data-ttu-id="7e18d-1185">如果已创建 <xref:System.Diagnostics.Process> 实例，并且指定了 (包含文件名) 的开始信息，并且想要启动进程资源并将其与现有的实例关联，请使用此重载 <xref:System.Diagnostics.Process> 。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1185">Use that overload when you have already created a <xref:System.Diagnostics.Process> instance and specified start information (including the file name), and you want to start a process resource and associate it with the existing <xref:System.Diagnostics.Process> instance.</span></span> <span data-ttu-id="7e18d-1186">`static`如果要创建新 <xref:System.Diagnostics.Process> 组件而不是为现有组件启动进程，请使用其中一个重载。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1186">Use one of the `static` overloads when you want to create a new <xref:System.Diagnostics.Process> component rather than start a process for an existing component.</span></span> <span data-ttu-id="7e18d-1187">此重载和没有参数的重载都允许使用实例指定进程资源的启动信息 <xref:System.Diagnostics.ProcessStartInfo> 。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1187">Both this overload and the overload that has no parameters allow you to specify the start information for the process resource by using a <xref:System.Diagnostics.ProcessStartInfo> instance.</span></span>  
  
 <span data-ttu-id="7e18d-1188">如果在系统中使用引号声明了路径变量，则在启动在该位置找到的任何进程时必须完全限定该路径。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1188">If you have a path variable declared in your system using quotes, you must fully qualify that path when starting any process found in that location.</span></span> <span data-ttu-id="7e18d-1189">否则，系统将找不到该路径。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1189">Otherwise, the system will not find the path.</span></span> <span data-ttu-id="7e18d-1190">例如，如果不 `c:\mypath` 在你的路径中，且你使用引号添加它： `path = %path%;"c:\mypath"` ，则在启动时，你必须完全限定中的任何进程 `c:\mypath` 。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1190">For example, if `c:\mypath` is not in your path, and you add it using quotation marks: `path = %path%;"c:\mypath"`, you must fully qualify any process in `c:\mypath` when starting it.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7e18d-1191">ASP.NET 网页和服务器控制代码在 Web 服务器上的 ASP.NET 工作进程上下文中执行。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1191">ASP.NET Web page and server control code executes in the context of the ASP.NET worker process on the Web server.</span></span>  <span data-ttu-id="7e18d-1192">如果在 ASP.NET 网页 <xref:System.Diagnostics.Process.Start%2A> 或服务器控件中使用方法，则新进程将在具有受限权限的 Web 服务器上执行。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1192">If you use the <xref:System.Diagnostics.Process.Start%2A> method in an ASP.NET Web page or server control, the new process executes on the Web server with restricted permissions.</span></span> <span data-ttu-id="7e18d-1193">该进程不会在与客户端浏览器相同的上下文中启动，也不能访问用户桌面。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1193">The process does not start in the same context as the client browser, and does not have access to the user desktop.</span></span>  
  
 <span data-ttu-id="7e18d-1194">当你使用 <xref:System.Diagnostics.Process.Start%2A> 启动某个进程时，你可能需要将其关闭或丢失系统资源的风险。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1194">Whenever you use <xref:System.Diagnostics.Process.Start%2A> to start a process, you might need to close it or you risk losing system resources.</span></span> <span data-ttu-id="7e18d-1195">使用或关闭 <xref:System.Diagnostics.Process.CloseMainWindow%2A> 进程 <xref:System.Diagnostics.Process.Kill%2A> 。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1195">Close processes using <xref:System.Diagnostics.Process.CloseMainWindow%2A> or <xref:System.Diagnostics.Process.Kill%2A>.</span></span> <span data-ttu-id="7e18d-1196">您可以使用其属性来检查进程是否已关闭 <xref:System.Diagnostics.Process.HasExited%2A> 。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1196">You can check whether a process has already been closed by using its <xref:System.Diagnostics.Process.HasExited%2A> property.</span></span>  
  
 <span data-ttu-id="7e18d-1197">此处需要有关托管线程中的单元状态的说明。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1197">A note about apartment states in managed threads is necessary here.</span></span> <span data-ttu-id="7e18d-1198">当 <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A> 位于 `true` 参数上时 `startInfo` ，请确保已通过设置方法上的属性设置了应用程序的线程模型 `[STAThread]` `main()` 。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1198">When <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A> is `true` on the `startInfo` parameter, make sure you have set a threading model on your application by setting the attribute `[STAThread]` on the `main()` method.</span></span> <span data-ttu-id="7e18d-1199">否则，托管线程可以处于 `unknown` 状态或处于 `MTA` 状态，后者与发生冲突 <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A> `true` 。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1199">Otherwise, a managed thread can be in an `unknown` state or put in the `MTA` state, the latter of which conflicts with <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A> being `true`.</span></span> <span data-ttu-id="7e18d-1200">某些方法要求单元状态不为 `unknown` 。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1200">Some methods require that the apartment state not be `unknown`.</span></span> <span data-ttu-id="7e18d-1201">如果未显式设置状态，则当应用程序遇到此类方法时，它默认为 `MTA` ，一旦设置，将无法更改单元状态。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1201">If the state is not explicitly set, when the application encounters such a method, it defaults to `MTA`, and once set, the apartment state cannot be changed.</span></span> <span data-ttu-id="7e18d-1202">但是， `MTA` 当操作系统 shell 管理线程时，将导致引发异常。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1202">However, `MTA` causes an exception to be thrown when the operating system shell is managing the thread.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7e18d-1203">下面的示例首先生成 Internet Explorer 的一个实例，并在浏览器中显示 "收藏夹" 文件夹的内容。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1203">The following example first spawns an instance of Internet Explorer and displays the contents of the Favorites folder in the browser.</span></span> <span data-ttu-id="7e18d-1204">然后，它将启动其他一些 Internet Explorer 实例，并显示某些特定页面或站点。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1204">It then starts some other instances of Internet Explorer and displays some specific pages or sites.</span></span> <span data-ttu-id="7e18d-1205">最后，当导航到特定站点时，它会在窗口最小化时启动 Internet Explorer。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1205">Finally it starts Internet Explorer with the window being minimized while navigating to a specific site.</span></span>  
  
 <span data-ttu-id="7e18d-1206">有关此方法的其他用法的其他示例，请参阅类的各个属性 <xref:System.Diagnostics.ProcessStartInfo> 。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1206">For additional examples of other uses of this method, refer to the individual properties of the <xref:System.Diagnostics.ProcessStartInfo> class.</span></span>  
  
 [!code-cpp[Process.Start_static#1](~/samples/snippets/cpp/VS_Snippets_CLR/Process.Start_static/CPP/processstartstatic.cpp)]
 [!code-csharp[Process.Start_static#1](~/samples/snippets/csharp/VS_Snippets_CLR/Process.Start_static/CS/processstartstatic.cs)]
 [!code-vb[Process.Start_static#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Process.Start_static/VB/processstartstatic.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="7e18d-1207">在 <paramref name="startInfo" /> 参数的 <see cref="P:System.Diagnostics.ProcessStartInfo.FileName" /> 属性中未指定任何文件名。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1207">No file name was specified in the <paramref name="startInfo" /> parameter's <see cref="P:System.Diagnostics.ProcessStartInfo.FileName" /> property.</span></span>  
  
<span data-ttu-id="7e18d-1208">- 或 -</span><span class="sxs-lookup"><span data-stu-id="7e18d-1208">-or-</span></span> 
<span data-ttu-id="7e18d-1209"><paramref name="startInfo" /> 参数的 <see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" /> 属性值为 <see langword="true" />，且 <see cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardInput" />、<see cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardOutput" /> 或 <see cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardError" /> 属性的值也为 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1209">The <see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" /> property of the <paramref name="startInfo" /> parameter is <see langword="true" /> and the <see cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardInput" />, <see cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardOutput" />, or <see cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardError" /> property is also <see langword="true" />.</span></span>  
  
<span data-ttu-id="7e18d-1210">- 或 -</span><span class="sxs-lookup"><span data-stu-id="7e18d-1210">-or-</span></span> 
<span data-ttu-id="7e18d-1211"><paramref name="startInfo" /> 参数的 <see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" /> 属性值为 <see langword="true" />，且 <see cref="P:System.Diagnostics.ProcessStartInfo.UserName" /> 属性值不为 <see langword="null" /> 或空，或者 <see cref="P:System.Diagnostics.ProcessStartInfo.Password" /> 属性值不为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1211">The <see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" /> property of the <paramref name="startInfo" /> parameter is <see langword="true" /> and the <see cref="P:System.Diagnostics.ProcessStartInfo.UserName" /> property is not <see langword="null" /> or empty or the <see cref="P:System.Diagnostics.ProcessStartInfo.Password" /> property is not <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7e18d-1212"><paramref name="startInfo" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1212">The <paramref name="startInfo" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="7e18d-1213">已释放此进程对象。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1213">The process object has already been disposed.</span></span></exception>
        <exception cref="T:System.ComponentModel.Win32Exception"><span data-ttu-id="7e18d-1214">打开关联的文件时出错。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1214">An error occurred when opening the associated file.</span></span>  

<span data-ttu-id="7e18d-1215">- 或 -</span><span class="sxs-lookup"><span data-stu-id="7e18d-1215">-or-</span></span> 
<span data-ttu-id="7e18d-1216">在 <paramref name="startInfo" /> 参数的 <see cref="P:System.Diagnostics.ProcessStartInfo.FileName" /> 属性中指定的文件未找到。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1216">The file specified in the <paramref name="startInfo" /> parameter's <see cref="P:System.Diagnostics.ProcessStartInfo.FileName" /> property could not be found.</span></span>
          
<span data-ttu-id="7e18d-1217">- 或 -</span><span class="sxs-lookup"><span data-stu-id="7e18d-1217">-or-</span></span> 
<span data-ttu-id="7e18d-1218">参数的长度与该进程的完整路径的长度的总和超过了 2080。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1218">The sum of the length of the arguments and the length of the full path to the process exceeds 2080.</span></span> <span data-ttu-id="7e18d-1219">与此异常关联的错误消息可能为以下消息之一：“传递到系统调用的数据区域太小。”</span><span class="sxs-lookup"><span data-stu-id="7e18d-1219">The error message associated with this exception can be one of the following: "The data area passed to a system call is too small."</span></span> <span data-ttu-id="7e18d-1220">或“拒绝访问。”</span><span class="sxs-lookup"><span data-stu-id="7e18d-1220">or "Access is denied."</span></span></exception>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="7e18d-1221">不支持 shell 的操作系统（如，仅适用于.NET Core 的 Nano Server）不支持此方法。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1221">Method not supported on operating systems without shell support such as Nano Server (.NET Core only).</span></span></exception>
        <altmember cref="P:System.Diagnostics.Process.StartInfo" />
        <altmember cref="P:System.Diagnostics.ProcessStartInfo.FileName" />
        <altmember cref="T:System.Diagnostics.ProcessStartInfo" />
        <altmember cref="M:System.Diagnostics.Process.CloseMainWindow" />
        <altmember cref="M:System.Diagnostics.Process.Kill" />
      </Docs>
    </Member>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public static System.Diagnostics.Process Start (string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Diagnostics.Process Start(string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Process.Start(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Start (fileName As String) As Process" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Diagnostics::Process ^ Start(System::String ^ fileName);" />
      <MemberSignature Language="F#" Value="static member Start : string -&gt; System.Diagnostics.Process" Usage="System.Diagnostics.Process.Start fileName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.Process</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileName"><span data-ttu-id="7e18d-1222">要在进程中运行的文档或应用程序文件的名称。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1222">The name of a document or application file to run in the process.</span></span></param>
        <summary><span data-ttu-id="7e18d-1223">通过指定文档或应用程序文件的名称来启动进程资源，并将资源与新的 <see cref="T:System.Diagnostics.Process" /> 组件关联。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1223">Starts a process resource by specifying the name of a document or application file and associates the resource with a new <see cref="T:System.Diagnostics.Process" /> component.</span></span></summary>
        <returns><span data-ttu-id="7e18d-1224">与进程资源关联的新 <see cref="T:System.Diagnostics.Process" />，如果未启动进程资源，则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1224">A new <see cref="T:System.Diagnostics.Process" /> that is associated with the process resource, or <see langword="null" /> if no process resource is started.</span></span> <span data-ttu-id="7e18d-1225">请注意，伴随同一进程中已运行的实例而启动的新进程将独立于其他进程。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1225">Note that a new process that's started alongside already running instances of the same process will be independent from the others.</span></span> <span data-ttu-id="7e18d-1226">此外，启动可能返回一个 <see cref="P:System.Diagnostics.Process.HasExited" /> 属性已设置为 <see langword="true" /> 的非 null 进程。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1226">In addition, Start may return a non-null Process with its <see cref="P:System.Diagnostics.Process.HasExited" /> property already set to <see langword="true" />.</span></span> <span data-ttu-id="7e18d-1227">在这种情况下，启动的进程可能已激活现有实例自身，然后退出。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1227">In this case, the started process may have activated an existing instance of itself and then exited.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use this overload to start a process resource by specifying its file name. The overload associates the resource with a new <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> object.  
  
> [!NOTE]
>  If the address of the executable file to start is a URL, the process is not started and <ph id="ph1">`null`</ph> is returned.  
  
 <span data-ttu-id="7e18d-1231">此重载使你可以在不先创建新实例的情况下启动进程 <xref:System.Diagnostics.Process> 。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1231">This overload lets you start a process without first creating a new <xref:System.Diagnostics.Process> instance.</span></span> <span data-ttu-id="7e18d-1232">重载是一种替代方法，用于创建新的 <xref:System.Diagnostics.Process> 实例、设置 <xref:System.Diagnostics.ProcessStartInfo.FileName%2A> 属性的成员 <xref:System.Diagnostics.Process.StartInfo%2A> 以及 <xref:System.Diagnostics.Process.Start%2A> 为实例调用 <xref:System.Diagnostics.Process> 。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1232">The overload is an alternative to the explicit steps of creating a new <xref:System.Diagnostics.Process> instance, setting the <xref:System.Diagnostics.ProcessStartInfo.FileName%2A> member of the <xref:System.Diagnostics.Process.StartInfo%2A> property, and calling <xref:System.Diagnostics.Process.Start%2A> for the <xref:System.Diagnostics.Process> instance.</span></span>  
  
 <span data-ttu-id="7e18d-1233">可以通过将参数设置为位置来启动 ClickOnce 应用程序 `fileName` (例如，最初在其中安装应用程序的 Web 地址) 。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1233">You can start a ClickOnce application by setting the `fileName` parameter to the location (for example, a Web address) from which you originally installed the application.</span></span> <span data-ttu-id="7e18d-1234">不要通过在硬盘驱动器上指定其安装位置来启动 ClickOnce 应用程序。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1234">Do not start a ClickOnce application by specifying its installed location on your hard drive.</span></span>  
  
 <span data-ttu-id="7e18d-1235">通过指定其文件名来启动进程类似于在 Windows 菜单的对话框中键入信息 `Run` `Start` 。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1235">Starting a process by specifying its file name is similar to typing the information in the `Run` dialog box of the Windows `Start` menu.</span></span> <span data-ttu-id="7e18d-1236">因此，文件名不需要表示可执行文件。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1236">Therefore, the file name does not need to represent an executable file.</span></span> <span data-ttu-id="7e18d-1237">它可以是与系统上安装的应用程序关联的任何文件类型。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1237">It can be of any file type for which the extension has been associated with an application installed on the system.</span></span> <span data-ttu-id="7e18d-1238">例如，如果您已将文本文件与一个编辑器（如记事本）关联，则文件名可以具有 .txt 扩展名; 如果您已将 .doc 文件与 word 处理工具（如 Microsoft Word）相关联，则它可能具有 .doc。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1238">For example the file name can have a .txt extension if you have associated text files with an editor, such as Notepad, or it can have a .doc if you have associated .doc files with a word processing tool, such as Microsoft Word.</span></span> <span data-ttu-id="7e18d-1239">同样， `Run` 与对话框可以接受带有或不带 .exe 扩展名的可执行文件名一样，.exe 扩展名在参数中是可选的。 `fileName`</span><span class="sxs-lookup"><span data-stu-id="7e18d-1239">Similarly, in the same way that the `Run` dialog box can accept an executable file name with or without the .exe extension, the .exe extension is optional in the `fileName` parameter.</span></span> <span data-ttu-id="7e18d-1240">例如，可以将 `fileName` 参数设置为 "Notepad.exe" 或 "Notepad"。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1240">For example, you can set the `fileName` parameter to either "Notepad.exe" or "Notepad".</span></span>  
  
 <span data-ttu-id="7e18d-1241">此重载不允许进程的命令行参数。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1241">This overload does not allow command-line arguments for the process.</span></span> <span data-ttu-id="7e18d-1242">如果需要为进程指定一个或多个命令行参数，请使用 <xref:System.Diagnostics.Process.Start%28System.Diagnostics.ProcessStartInfo%29?displayProperty=nameWithType> 或 <xref:System.Diagnostics.Process.Start%28System.String%2CSystem.String%29?displayProperty=nameWithType> 重载。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1242">If you need to specify one or more command-line arguments for the process, use the <xref:System.Diagnostics.Process.Start%28System.Diagnostics.ProcessStartInfo%29?displayProperty=nameWithType> or <xref:System.Diagnostics.Process.Start%28System.String%2CSystem.String%29?displayProperty=nameWithType> overloads.</span></span>  
  
 <span data-ttu-id="7e18d-1243">与其他重载不同，没有参数的重载 <xref:System.Diagnostics.Process.Start%2A> 不是 `static` 成员。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1243">Unlike the other overloads, the overload of <xref:System.Diagnostics.Process.Start%2A> that has no parameters is not a `static` member.</span></span> <span data-ttu-id="7e18d-1244">如果已创建 <xref:System.Diagnostics.Process> 实例，并且指定了 (包含文件名) 的开始信息，并且想要启动进程资源并将其与现有的实例关联，请使用此重载 <xref:System.Diagnostics.Process> 。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1244">Use that overload when you have already created a <xref:System.Diagnostics.Process> instance and specified start information (including the file name), and you want to start a process resource and associate it with the existing <xref:System.Diagnostics.Process> instance.</span></span> <span data-ttu-id="7e18d-1245">`static`如果要创建新 <xref:System.Diagnostics.Process> 组件而不是为现有组件启动进程，请使用其中一个重载。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1245">Use one of the `static` overloads when you want to create a new <xref:System.Diagnostics.Process> component rather than start a process for an existing component.</span></span> <span data-ttu-id="7e18d-1246">此重载和没有参数的重载都允许您指定要启动的进程资源的文件名。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1246">Both this overload and the overload that has no parameters allow you to specify the file name of the process resource to start.</span></span>  
  
 <span data-ttu-id="7e18d-1247">如果在系统中使用引号声明了路径变量，则在启动在该位置找到的任何进程时必须完全限定该路径。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1247">If you have a path variable declared in your system using quotes, you must fully qualify that path when starting any process found in that location.</span></span> <span data-ttu-id="7e18d-1248">否则，系统将找不到该路径。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1248">Otherwise, the system will not find the path.</span></span> <span data-ttu-id="7e18d-1249">例如，如果不 `c:\mypath` 在你的路径中，且你使用引号添加它： `path = %path%;"c:\mypath"` ，则在启动时，你必须完全限定中的任何进程 `c:\mypath` 。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1249">For example, if `c:\mypath` is not in your path, and you add it using quotation marks: `path = %path%;"c:\mypath"`, you must fully qualify any process in `c:\mypath` when starting it.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7e18d-1250">ASP.NET 网页和服务器控制代码在 Web 服务器上的 ASP.NET 工作进程上下文中执行。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1250">ASP.NET Web page and server control code executes in the context of the ASP.NET worker process on the Web server.</span></span>  <span data-ttu-id="7e18d-1251">如果在 ASP.NET 网页 <xref:System.Diagnostics.Process.Start%2A> 或服务器控件中使用方法，则新进程将在具有受限权限的 Web 服务器上执行。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1251">If you use the <xref:System.Diagnostics.Process.Start%2A> method in an ASP.NET Web page or server control, the new process executes on the Web server with restricted permissions.</span></span> <span data-ttu-id="7e18d-1252">该进程不会在与客户端浏览器相同的上下文中启动，也不能访问用户桌面。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1252">The process does not start in the same context as the client browser, and does not have access to the user desktop.</span></span>  
  
 <span data-ttu-id="7e18d-1253">当你使用 <xref:System.Diagnostics.Process.Start%2A> 启动某个进程时，你可能需要将其关闭或丢失系统资源的风险。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1253">Whenever you use <xref:System.Diagnostics.Process.Start%2A> to start a process, you might need to close it or you risk losing system resources.</span></span> <span data-ttu-id="7e18d-1254">使用或关闭 <xref:System.Diagnostics.Process.CloseMainWindow%2A> 进程 <xref:System.Diagnostics.Process.Kill%2A> 。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1254">Close processes using <xref:System.Diagnostics.Process.CloseMainWindow%2A> or <xref:System.Diagnostics.Process.Kill%2A>.</span></span> <span data-ttu-id="7e18d-1255">您可以使用其属性来检查进程是否已关闭 <xref:System.Diagnostics.Process.HasExited%2A> 。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1255">You can check whether a process has already been closed by using its <xref:System.Diagnostics.Process.HasExited%2A> property.</span></span>  
  
 <span data-ttu-id="7e18d-1256">此处需要有关托管线程中的单元状态的说明。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1256">A note about apartment states in managed threads is necessary here.</span></span> <span data-ttu-id="7e18d-1257">当 <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A> 位于 `true` 进程组件的属性上时 <xref:System.Diagnostics.Process.StartInfo%2A> ，请确保已通过设置方法上的属性设置了应用程序的线程模型 `[STAThread]` `main()` 。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1257">When <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A> is `true` on the process component's <xref:System.Diagnostics.Process.StartInfo%2A> property, make sure you have set a threading model on your application by setting the attribute `[STAThread]` on the `main()` method.</span></span> <span data-ttu-id="7e18d-1258">否则，托管线程可以处于 `unknown` 状态或处于 `MTA` 状态，后者与发生冲突 <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A> `true` 。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1258">Otherwise, a managed thread can be in an `unknown` state or put in the `MTA` state, the latter of which conflicts with <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A> being `true`.</span></span> <span data-ttu-id="7e18d-1259">某些方法要求单元状态不为 `unknown` 。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1259">Some methods require that the apartment state not be `unknown`.</span></span> <span data-ttu-id="7e18d-1260">如果未显式设置状态，则当应用程序遇到此类方法时，它默认为 `MTA` ，一旦设置，将无法更改单元状态。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1260">If the state is not explicitly set, when the application encounters such a method, it defaults to `MTA`, and once set, the apartment state cannot be changed.</span></span> <span data-ttu-id="7e18d-1261">但是， `MTA` 当操作系统 shell 管理线程时，将导致引发异常。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1261">However, `MTA` causes an exception to be thrown when the operating system shell is managing the thread.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7e18d-1262">下面的示例首先生成 Internet Explorer 的一个实例，并在浏览器中显示 "收藏夹" 文件夹的内容。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1262">The following example first spawns an instance of Internet Explorer and displays the contents of the Favorites folder in the browser.</span></span> <span data-ttu-id="7e18d-1263">然后，它将启动其他一些 Internet Explorer 实例，并显示某些特定页面或站点。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1263">It then starts some other instances of Internet Explorer and displays some specific pages or sites.</span></span> <span data-ttu-id="7e18d-1264">最后，当导航到特定站点时，它会在窗口最小化时启动 Internet Explorer。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1264">Finally it starts Internet Explorer with the window being minimized while navigating to a specific site.</span></span>  
  
 [!code-cpp[Process.Start_static#1](~/samples/snippets/cpp/VS_Snippets_CLR/Process.Start_static/CPP/processstartstatic.cpp)]
 [!code-csharp[Process.Start_static#1](~/samples/snippets/csharp/VS_Snippets_CLR/Process.Start_static/CS/processstartstatic.cs)]
 [!code-vb[Process.Start_static#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Process.Start_static/VB/processstartstatic.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception"><span data-ttu-id="7e18d-1265">打开关联的文件时出错。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1265">An error occurred when opening the associated file.</span></span>

<span data-ttu-id="7e18d-1266">- 或 -</span><span class="sxs-lookup"><span data-stu-id="7e18d-1266">-or-</span></span>

<span data-ttu-id="7e18d-1267">找不到 <paramref name="fileName" /> 中指定的文件。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1267">The file specified in the <paramref name="fileName" /> could not be found.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="7e18d-1268">已释放此进程对象。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1268">The process object has already been disposed.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="7e18d-1269">PATH 环境变量具有一个包含引号的字符串。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1269">The PATH environment variable has a string containing quotes.</span></span></exception>
        <altmember cref="P:System.Diagnostics.ProcessStartInfo.FileName" />
        <altmember cref="P:System.Diagnostics.Process.StartInfo" />
        <altmember cref="M:System.Diagnostics.Process.CloseMainWindow" />
        <altmember cref="M:System.Diagnostics.Process.Kill" />
      </Docs>
    </Member>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public static System.Diagnostics.Process Start (string fileName, string arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Diagnostics.Process Start(string fileName, string arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Process.Start(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Start (fileName As String, arguments As String) As Process" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Diagnostics::Process ^ Start(System::String ^ fileName, System::String ^ arguments);" />
      <MemberSignature Language="F#" Value="static member Start : string * string -&gt; System.Diagnostics.Process" Usage="System.Diagnostics.Process.Start (fileName, arguments)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.Process</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="arguments" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileName"><span data-ttu-id="7e18d-1270">要在进程中运行的应用程序文件的名称。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1270">The name of an application file to run in the process.</span></span></param>
        <param name="arguments"><span data-ttu-id="7e18d-1271">启动该进程时传递的命令行参数。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1271">Command-line arguments to pass when starting the process.</span></span></param>
        <summary><span data-ttu-id="7e18d-1272">通过指定应用程序的名称和一组命令行参数来启动一个进程资源，并将该资源与新的 <see cref="T:System.Diagnostics.Process" /> 组件相关联。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1272">Starts a process resource by specifying the name of an application and a set of command-line arguments, and associates the resource with a new <see cref="T:System.Diagnostics.Process" /> component.</span></span></summary>
        <returns><span data-ttu-id="7e18d-1273">与进程资源关联的新 <see cref="T:System.Diagnostics.Process" />，如果未启动进程资源，则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1273">A new <see cref="T:System.Diagnostics.Process" /> that is associated with the process resource, or <see langword="null" /> if no process resource is started.</span></span> <span data-ttu-id="7e18d-1274">请注意，伴随同一进程中已运行的实例而启动的新进程将独立于其他进程。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1274">Note that a new process that's started alongside already running instances of the same process will be independent from the others.</span></span> <span data-ttu-id="7e18d-1275">此外，启动可能返回一个 <see cref="P:System.Diagnostics.Process.HasExited" /> 属性已设置为 <see langword="true" /> 的非 null 进程。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1275">In addition, Start may return a non-null Process with its <see cref="P:System.Diagnostics.Process.HasExited" /> property already set to <see langword="true" />.</span></span> <span data-ttu-id="7e18d-1276">在这种情况下，启动的进程可能已激活现有实例自身，然后退出。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1276">In this case, the started process may have activated an existing instance of itself and then exited.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use this overload to start a process resource by specifying its file name and command-line arguments. The overload associates the resource with a new <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> object.  
  
> [!NOTE]
>  If the address of the executable file to start is a URL, the process is not started and <ph id="ph1">`null`</ph> is returned.  
  
 <span data-ttu-id="7e18d-1280">此重载使你可以在不先创建新实例的情况下启动进程 <xref:System.Diagnostics.Process> 。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1280">This overload lets you start a process without first creating a new <xref:System.Diagnostics.Process> instance.</span></span> <span data-ttu-id="7e18d-1281">重载是创建新 <xref:System.Diagnostics.Process> 实例、设置 <xref:System.Diagnostics.ProcessStartInfo.FileName%2A> 属性的和 <xref:System.Diagnostics.ProcessStartInfo.Arguments%2A> 成员以及 <xref:System.Diagnostics.Process.StartInfo%2A> <xref:System.Diagnostics.Process.Start%2A> 为实例调用 <xref:System.Diagnostics.Process> 的显式步骤的替代方法。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1281">The overload is an alternative to the explicit steps of creating a new <xref:System.Diagnostics.Process> instance, setting the <xref:System.Diagnostics.ProcessStartInfo.FileName%2A> and <xref:System.Diagnostics.ProcessStartInfo.Arguments%2A> members of the <xref:System.Diagnostics.Process.StartInfo%2A> property, and calling <xref:System.Diagnostics.Process.Start%2A> for the <xref:System.Diagnostics.Process> instance.</span></span>  
  
 <span data-ttu-id="7e18d-1282">通过指定其文件名和参数启动进程类似于在 Windows 菜单的对话框中键入文件名和命令行参数 `Run` `Start` 。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1282">Starting a process by specifying its file name and arguments is similar to typing the file name and command-line arguments in the `Run` dialog box of the Windows `Start` menu.</span></span> <span data-ttu-id="7e18d-1283">因此，文件名不需要表示可执行文件。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1283">Therefore, the file name does not need to represent an executable file.</span></span> <span data-ttu-id="7e18d-1284">它可以是与系统上安装的应用程序关联的任何文件类型。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1284">It can be of any file type for which the extension has been associated with an application installed on the system.</span></span> <span data-ttu-id="7e18d-1285">例如，如果您已将文本文件与一个编辑器（如记事本）关联，则文件名可以具有 .txt 扩展名; 如果您已将 .doc 文件与 word 处理工具（如 Microsoft Word）相关联，则它可能具有 .doc。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1285">For example the file name can have a .txt extension if you have associated text files with an editor, such as Notepad, or it can have a .doc if you have associated .doc files with a word processing tool, such as Microsoft Word.</span></span> <span data-ttu-id="7e18d-1286">同样， `Run` 与对话框可以接受带有或不带 .exe 扩展名的可执行文件名一样，.exe 扩展名在参数中是可选的。 `fileName`</span><span class="sxs-lookup"><span data-stu-id="7e18d-1286">Similarly, in the same way that the `Run` dialog box can accept an executable file name with or without the .exe extension, the .exe extension is optional in the `fileName` parameter.</span></span> <span data-ttu-id="7e18d-1287">例如，可以将 `fileName` 参数设置为 "Notepad.exe" 或 "Notepad"。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1287">For example, you can set the `fileName` parameter to either "Notepad.exe" or "Notepad".</span></span> <span data-ttu-id="7e18d-1288">如果 `fileName` 参数表示一个可执行文件，则该 `arguments` 参数可能表示要对其执行操作的文件，例如中的文本文件 `Notepad.exe myfile.txt` 。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1288">If the `fileName` parameter represents an executable file, the `arguments` parameter might represent a file to act upon, such as the text file in `Notepad.exe myfile.txt`.</span></span> <span data-ttu-id="7e18d-1289">如果 `fileName` 参数表示命令 ( .cmd) 文件，则 `arguments` 参数必须包括 " `/c` " 或 " `/k` " 参数，以指定命令窗口是在完成后退出还是保留。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1289">If the `fileName` parameter represents a command (.cmd) file, the `arguments` parameter must include either a "`/c`" or "`/k`" argument to specify whether the command window exits or remains after completion.</span></span>  
  
 <span data-ttu-id="7e18d-1290">与其他重载不同，没有参数的重载 <xref:System.Diagnostics.Process.Start%2A> 不是 `static` 成员。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1290">Unlike the other overloads, the overload of <xref:System.Diagnostics.Process.Start%2A> that has no parameters is not a `static` member.</span></span> <span data-ttu-id="7e18d-1291">如果已创建 <xref:System.Diagnostics.Process> 实例，并且指定了 (包含文件名) 的开始信息，并且想要启动进程资源并将其与现有的实例关联，请使用此重载 <xref:System.Diagnostics.Process> 。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1291">Use that overload when you have already created a <xref:System.Diagnostics.Process> instance and specified start information (including the file name), and you want to start a process resource and associate it with the existing <xref:System.Diagnostics.Process> instance.</span></span> <span data-ttu-id="7e18d-1292">`static`如果要创建新 <xref:System.Diagnostics.Process> 组件而不是为现有组件启动进程，请使用其中一个重载。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1292">Use one of the `static` overloads when you want to create a new <xref:System.Diagnostics.Process> component rather than start a process for an existing component.</span></span> <span data-ttu-id="7e18d-1293">此重载和没有参数的重载都允许您指定要启动的进程资源的文件名以及要传递的命令行参数。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1293">Both this overload and the overload that has no parameters allow you to specify the file name of the process resource to start and command-line arguments to pass.</span></span>  
  
 <span data-ttu-id="7e18d-1294">如果在系统中使用引号声明了路径变量，则在启动在该位置找到的任何进程时必须完全限定该路径。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1294">If you have a path variable declared in your system using quotes, you must fully qualify that path when starting any process found in that location.</span></span> <span data-ttu-id="7e18d-1295">否则，系统将找不到该路径。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1295">Otherwise, the system will not find the path.</span></span> <span data-ttu-id="7e18d-1296">例如，如果不 `c:\mypath` 在你的路径中，且你使用引号添加它： `path = %path%;"c:\mypath"` ，则在启动时，你必须完全限定中的任何进程 `c:\mypath` 。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1296">For example, if `c:\mypath` is not in your path, and you add it using quotation marks: `path = %path%;"c:\mypath"`, you must fully qualify any process in `c:\mypath` when starting it.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7e18d-1297">ASP.NET 网页和服务器控制代码在 Web 服务器上的 ASP.NET 工作进程上下文中执行。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1297">ASP.NET Web page and server control code executes in the context of the ASP.NET worker process on the Web server.</span></span>  <span data-ttu-id="7e18d-1298">如果在 ASP.NET 网页 <xref:System.Diagnostics.Process.Start%2A> 或服务器控件中使用方法，则新进程将在具有受限权限的 Web 服务器上执行。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1298">If you use the <xref:System.Diagnostics.Process.Start%2A> method in an ASP.NET Web page or server control, the new process executes on the Web server with restricted permissions.</span></span> <span data-ttu-id="7e18d-1299">该进程不会在与客户端浏览器相同的上下文中启动，也不能访问用户桌面。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1299">The process does not start in the same context as the client browser, and does not have access to the user desktop.</span></span>  
  
 <span data-ttu-id="7e18d-1300">当你使用 <xref:System.Diagnostics.Process.Start%2A> 启动某个进程时，你可能需要将其关闭或丢失系统资源的风险。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1300">Whenever you use <xref:System.Diagnostics.Process.Start%2A> to start a process, you might need to close it or you risk losing system resources.</span></span> <span data-ttu-id="7e18d-1301">使用或关闭 <xref:System.Diagnostics.Process.CloseMainWindow%2A> 进程 <xref:System.Diagnostics.Process.Kill%2A> 。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1301">Close processes using <xref:System.Diagnostics.Process.CloseMainWindow%2A> or <xref:System.Diagnostics.Process.Kill%2A>.</span></span> <span data-ttu-id="7e18d-1302">您可以使用其属性来检查进程是否已关闭 <xref:System.Diagnostics.Process.HasExited%2A> 。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1302">You can check whether a process has already been closed by using its <xref:System.Diagnostics.Process.HasExited%2A> property.</span></span> 
  
 <span data-ttu-id="7e18d-1303">此处需要有关托管线程中的单元状态的说明。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1303">A note about apartment states in managed threads is necessary here.</span></span> <span data-ttu-id="7e18d-1304">当 <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A> 位于 `true` 进程组件的属性上时 <xref:System.Diagnostics.Process.StartInfo%2A> ，请确保已通过设置方法上的属性设置了应用程序的线程模型 `[STAThread]` `main()` 。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1304">When <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A> is `true` on the process component's <xref:System.Diagnostics.Process.StartInfo%2A> property, make sure you have set a threading model on your application by setting the attribute `[STAThread]` on the `main()` method.</span></span> <span data-ttu-id="7e18d-1305">否则，托管线程可以处于 `unknown` 状态或处于 `MTA` 状态，后者与发生冲突 <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A> `true` 。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1305">Otherwise, a managed thread can be in an `unknown` state or put in the `MTA` state, the latter of which conflicts with <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A> being `true`.</span></span> <span data-ttu-id="7e18d-1306">某些方法要求单元状态不为 `unknown` 。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1306">Some methods require that the apartment state not be `unknown`.</span></span> <span data-ttu-id="7e18d-1307">如果未显式设置状态，则当应用程序遇到此类方法时，它默认为 `MTA` ，一旦设置，将无法更改单元状态。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1307">If the state is not explicitly set, when the application encounters such a method, it defaults to `MTA`, and once set, the apartment state cannot be changed.</span></span> <span data-ttu-id="7e18d-1308">但是， `MTA` 当操作系统 shell 管理线程时，将导致引发异常。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1308">However, `MTA` causes an exception to be thrown when the operating system shell is managing the thread.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7e18d-1309">下面的示例首先生成 Internet Explorer 的一个实例，并在浏览器中显示 "收藏夹" 文件夹的内容。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1309">The following example first spawns an instance of Internet Explorer and displays the contents of the Favorites folder in the browser.</span></span> <span data-ttu-id="7e18d-1310">然后，它将启动其他一些 Internet Explorer 实例，并显示某些特定页面或站点。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1310">It then starts some other instances of Internet Explorer and displays some specific pages or sites.</span></span> <span data-ttu-id="7e18d-1311">最后，当导航到特定站点时，它会在窗口最小化时启动 Internet Explorer。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1311">Finally it starts Internet Explorer with the window being minimized while navigating to a specific site.</span></span>  
  
 [!code-cpp[Process.Start_static#1](~/samples/snippets/cpp/VS_Snippets_CLR/Process.Start_static/CPP/processstartstatic.cpp)]
 [!code-csharp[Process.Start_static#1](~/samples/snippets/csharp/VS_Snippets_CLR/Process.Start_static/CS/processstartstatic.cs)]
 [!code-vb[Process.Start_static#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Process.Start_static/VB/processstartstatic.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="7e18d-1312"><paramref name="fileName" /> 或 <paramref name="arguments" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1312">The <paramref name="fileName" /> or <paramref name="arguments" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ComponentModel.Win32Exception"><span data-ttu-id="7e18d-1313">打开关联的文件时出错。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1313">An error occurred when opening the associated file.</span></span>  

<span data-ttu-id="7e18d-1314">- 或 -</span><span class="sxs-lookup"><span data-stu-id="7e18d-1314">-or-</span></span>

<span data-ttu-id="7e18d-1315">找不到 <paramref name="fileName" /> 中指定的文件。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1315">The file specified in the <paramref name="fileName" /> could not be found.</span></span>
  
<span data-ttu-id="7e18d-1316">- 或 -</span><span class="sxs-lookup"><span data-stu-id="7e18d-1316">-or-</span></span> 
<span data-ttu-id="7e18d-1317">参数的长度与该进程的完整路径的长度的总和超过了 2080。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1317">The sum of the length of the arguments and the length of the full path to the process exceeds 2080.</span></span> <span data-ttu-id="7e18d-1318">与此异常关联的错误消息可能为以下消息之一：“传递到系统调用的数据区域太小。”</span><span class="sxs-lookup"><span data-stu-id="7e18d-1318">The error message associated with this exception can be one of the following: "The data area passed to a system call is too small."</span></span> <span data-ttu-id="7e18d-1319">或“拒绝访问。”</span><span class="sxs-lookup"><span data-stu-id="7e18d-1319">or "Access is denied."</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="7e18d-1320">已释放此进程对象。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1320">The process object has already been disposed.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="7e18d-1321">PATH 环境变量具有一个包含引号的字符串。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1321">The PATH environment variable has a string containing quotes.</span></span></exception>
        <altmember cref="P:System.Diagnostics.ProcessStartInfo.FileName" />
        <altmember cref="P:System.Diagnostics.Process.StartInfo" />
        <altmember cref="T:System.Diagnostics.ProcessStartInfo" />
        <altmember cref="M:System.Diagnostics.Process.CloseMainWindow" />
        <altmember cref="M:System.Diagnostics.Process.Kill" />
      </Docs>
    </Member>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public static System.Diagnostics.Process Start (string fileName, string userName, System.Security.SecureString password, string domain);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Diagnostics.Process Start(string fileName, string userName, class System.Security.SecureString password, string domain) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Process.Start(System.String,System.String,System.Security.SecureString,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Start (fileName As String, userName As String, password As SecureString, domain As String) As Process" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Diagnostics::Process ^ Start(System::String ^ fileName, System::String ^ userName, System::Security::SecureString ^ password, System::String ^ domain);" />
      <MemberSignature Language="F#" Value="static member Start : string * string * System.Security.SecureString * string -&gt; System.Diagnostics.Process" Usage="System.Diagnostics.Process.Start (fileName, userName, password, domain)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.1">
          <AttributeName Language="C#">[System.CLSCompliant(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.CLSCompliant(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Diagnostics.Process</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="userName" Type="System.String" Index="1" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="password" Type="System.Security.SecureString" Index="2" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="domain" Type="System.String" Index="3" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="fileName"><span data-ttu-id="7e18d-1322">要在进程中运行的应用程序文件的名称。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1322">The name of an application file to run in the process.</span></span></param>
        <param name="userName"><span data-ttu-id="7e18d-1323">启动进程时使用的用户名。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1323">The user name to use when starting the process.</span></span></param>
        <param name="password"><span data-ttu-id="7e18d-1324">包含启动进程时要使用的密码的 <see cref="T:System.Security.SecureString" />。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1324">A <see cref="T:System.Security.SecureString" /> that contains the password to use when starting the process.</span></span></param>
        <param name="domain"><span data-ttu-id="7e18d-1325">启动进程时要使用的域。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1325">The domain to use when starting the process.</span></span></param>
        <summary><span data-ttu-id="7e18d-1326">通过指定应用程序的名称、用户名、密码和域来启动一个进程资源，并将该资源与新的 <see cref="T:System.Diagnostics.Process" /> 组件关联起来。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1326">Starts a process resource by specifying the name of an application, a user name, a password, and a domain and associates the resource with a new <see cref="T:System.Diagnostics.Process" /> component.</span></span></summary>
        <returns><span data-ttu-id="7e18d-1327">与进程资源关联的新 <see cref="T:System.Diagnostics.Process" />，如果未启动进程资源，则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1327">A new <see cref="T:System.Diagnostics.Process" /> that is associated with the process resource, or <see langword="null" /> if no process resource is started.</span></span> <span data-ttu-id="7e18d-1328">请注意，伴随同一进程中已运行的实例而启动的新进程将独立于其他进程。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1328">Note that a new process that's started alongside already running instances of the same process will be independent from the others.</span></span> <span data-ttu-id="7e18d-1329">此外，启动可能返回一个 <see cref="P:System.Diagnostics.Process.HasExited" /> 属性已设置为 <see langword="true" /> 的非 null 进程。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1329">In addition, Start may return a non-null Process with its <see cref="P:System.Diagnostics.Process.HasExited" /> property already set to <see langword="true" />.</span></span> <span data-ttu-id="7e18d-1330">在这种情况下，启动的进程可能已激活现有实例自身，然后退出。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1330">In this case, the started process may have activated an existing instance of itself and then exited.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use this overload to create a new process and its primary thread by specifying its file name, user name, password, and domain. The new process then runs the specified executable file in the security context of the specified credentials (user, domain, and password).  
  
> [!NOTE]
>  When the executable file is located on a remote drive, you must identify the network share by using a uniform resource identifier (URI), not a linked drive letter.  
  
> [!NOTE]
>  <span data-ttu-id="7e18d-1334">如果要启动的可执行文件的地址是 URL，则该进程将不会启动并 `null` 返回。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1334">If the address of the executable file to start is a URL, the process is not started and `null` is returned.</span></span>  
  
 <span data-ttu-id="7e18d-1335">此重载使你可以在不先创建新实例的情况下启动进程 <xref:System.Diagnostics.Process> 。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1335">This overload lets you start a process without first creating a new <xref:System.Diagnostics.Process> instance.</span></span> <span data-ttu-id="7e18d-1336">重载是创建新 <xref:System.Diagnostics.Process> 实例、设置 <xref:System.Diagnostics.ProcessStartInfo.FileName%2A> 属性的、、 <xref:System.Diagnostics.ProcessStartInfo.UserName%2A> <xref:System.Diagnostics.ProcessStartInfo.Password%2A> 和属性以及 <xref:System.Diagnostics.ProcessStartInfo.Domain%2A> <xref:System.Diagnostics.Process.StartInfo%2A> <xref:System.Diagnostics.Process.Start%2A> 对实例调用 <xref:System.Diagnostics.Process> 的显式步骤的替代方法。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1336">The overload is an alternative to the explicit steps of creating a new <xref:System.Diagnostics.Process> instance, setting the <xref:System.Diagnostics.ProcessStartInfo.FileName%2A>, <xref:System.Diagnostics.ProcessStartInfo.UserName%2A>, <xref:System.Diagnostics.ProcessStartInfo.Password%2A>, and <xref:System.Diagnostics.ProcessStartInfo.Domain%2A> properties of the <xref:System.Diagnostics.Process.StartInfo%2A> property, and calling <xref:System.Diagnostics.Process.Start%2A> for the <xref:System.Diagnostics.Process> instance.</span></span>  
  
 <span data-ttu-id="7e18d-1337">同样，与 "**运行**" 对话框可以接受带有或不带 .exe 扩展名的可执行文件名一样，.exe 扩展名在参数中是可选的。 `fileName`</span><span class="sxs-lookup"><span data-stu-id="7e18d-1337">Similarly, in the same way that the **Run** dialog box can accept an executable file name with or without the .exe extension, the .exe extension is optional in the `fileName` parameter.</span></span> <span data-ttu-id="7e18d-1338">例如，可以将 `fileName` 参数设置为 "Notepad.exe" 或 "Notepad"。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1338">For example, you can set the `fileName` parameter to either "Notepad.exe" or "Notepad".</span></span> <span data-ttu-id="7e18d-1339">如果 `fileName` 参数表示一个可执行文件，则该 `arguments` 参数可能表示要对其执行操作的文件，例如中的文本文件 `Notepad.exe myfile.txt` 。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1339">If the `fileName` parameter represents an executable file, the `arguments` parameter might represent a file to act upon, such as the text file in `Notepad.exe myfile.txt`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7e18d-1340">文件名必须在 <xref:System.Diagnostics.Process.Start%2A> 具有 `userName` 、和参数的重载中表示可执行文件 `password` `domain` 。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1340">The file name must represent an executable file in the <xref:System.Diagnostics.Process.Start%2A> overloads that have `userName`, `password`, and `domain` parameters.</span></span>  
  
 <span data-ttu-id="7e18d-1341">当你使用 <xref:System.Diagnostics.Process.Start%2A> 启动某个进程时，你可能需要将其关闭或丢失系统资源的风险。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1341">Whenever you use <xref:System.Diagnostics.Process.Start%2A> to start a process, you might need to close it or you risk losing system resources.</span></span> <span data-ttu-id="7e18d-1342">使用或关闭 <xref:System.Diagnostics.Process.CloseMainWindow%2A> 进程 <xref:System.Diagnostics.Process.Kill%2A> 。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1342">Close processes using <xref:System.Diagnostics.Process.CloseMainWindow%2A> or <xref:System.Diagnostics.Process.Kill%2A>.</span></span> <span data-ttu-id="7e18d-1343">您可以使用其属性来检查进程是否已关闭 <xref:System.Diagnostics.Process.HasExited%2A> 。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1343">You can check whether a process has already been closed by using its <xref:System.Diagnostics.Process.HasExited%2A> property.</span></span> 
  
   
  
## Examples  
 <span data-ttu-id="7e18d-1344">下面的代码示例演示如何使用此重载来启动可执行文件，并演示 <xref:System.ComponentModel.Win32Exception> 当尝试启动与不可执行文件关联的应用程序时的引发。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1344">The following code example shows the use of this overload to start an executable file and also demonstrates the throwing of a <xref:System.ComponentModel.Win32Exception> when an attempt is made to start an application associated with a nonexecutable file.</span></span>  
  
 [!code-csharp[System.Diagnostics.Process.Start#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.Process.Start/CS/program.cs#1)]
 [!code-vb[System.Diagnostics.Process.Start#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.Process.Start/VB/program.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="7e18d-1345">未指定文件名。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1345">No file name was specified.</span></span></exception>
        <exception cref="T:System.ComponentModel.Win32Exception"><span data-ttu-id="7e18d-1346">打开关联的文件时出错。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1346">There was an error in opening the associated file.</span></span>

<span data-ttu-id="7e18d-1347">- 或 -</span><span class="sxs-lookup"><span data-stu-id="7e18d-1347">-or-</span></span>

<span data-ttu-id="7e18d-1348">找不到 <paramref name="fileName" /> 中指定的文件。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1348">The file specified in the <paramref name="fileName" /> could not be found.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="7e18d-1349">已释放此进程对象。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1349">The process object has already been disposed.</span></span></exception>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="7e18d-1350">Linux 或 macOS（仅适用于.NET Core）不支持此成员。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1350">This member is not supported on Linux or macOS (.NET Core only).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public static System.Diagnostics.Process Start (string fileName, string arguments, string userName, System.Security.SecureString password, string domain);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Diagnostics.Process Start(string fileName, string arguments, string userName, class System.Security.SecureString password, string domain) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Process.Start(System.String,System.String,System.String,System.Security.SecureString,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Start (fileName As String, arguments As String, userName As String, password As SecureString, domain As String) As Process" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Diagnostics::Process ^ Start(System::String ^ fileName, System::String ^ arguments, System::String ^ userName, System::Security::SecureString ^ password, System::String ^ domain);" />
      <MemberSignature Language="F#" Value="static member Start : string * string * string * System.Security.SecureString * string -&gt; System.Diagnostics.Process" Usage="System.Diagnostics.Process.Start (fileName, arguments, userName, password, domain)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.1">
          <AttributeName Language="C#">[System.CLSCompliant(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.CLSCompliant(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Diagnostics.Process</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="arguments" Type="System.String" Index="1" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="userName" Type="System.String" Index="2" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="password" Type="System.Security.SecureString" Index="3" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="domain" Type="System.String" Index="4" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="fileName"><span data-ttu-id="7e18d-1351">要在进程中运行的应用程序文件的名称。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1351">The name of an application file to run in the process.</span></span></param>
        <param name="arguments"><span data-ttu-id="7e18d-1352">启动该进程时传递的命令行参数。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1352">Command-line arguments to pass when starting the process.</span></span></param>
        <param name="userName"><span data-ttu-id="7e18d-1353">启动进程时使用的用户名。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1353">The user name to use when starting the process.</span></span></param>
        <param name="password"><span data-ttu-id="7e18d-1354">包含启动进程时要使用的密码的 <see cref="T:System.Security.SecureString" />。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1354">A <see cref="T:System.Security.SecureString" /> that contains the password to use when starting the process.</span></span></param>
        <param name="domain"><span data-ttu-id="7e18d-1355">启动进程时要使用的域。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1355">The domain to use when starting the process.</span></span></param>
        <summary><span data-ttu-id="7e18d-1356">通过指定应用程序的名称、一组命令行自变量、用户名、密码和域来启动一个进程资源，并将该资源与新的 <see cref="T:System.Diagnostics.Process" /> 组件关联起来。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1356">Starts a process resource by specifying the name of an application, a set of command-line arguments, a user name, a password, and a domain and associates the resource with a new <see cref="T:System.Diagnostics.Process" /> component.</span></span></summary>
        <returns><span data-ttu-id="7e18d-1357">与进程资源关联的新 <see cref="T:System.Diagnostics.Process" />，如果未启动进程资源，则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1357">A new <see cref="T:System.Diagnostics.Process" /> that is associated with the process resource, or <see langword="null" /> if no process resource is started.</span></span> <span data-ttu-id="7e18d-1358">请注意，伴随同一进程中已运行的实例而启动的新进程将独立于其他进程。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1358">Note that a new process that's started alongside already running instances of the same process will be independent from the others.</span></span> <span data-ttu-id="7e18d-1359">此外，启动可能返回一个 <see cref="P:System.Diagnostics.Process.HasExited" /> 属性已设置为 <see langword="true" /> 的非 null 进程。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1359">In addition, Start may return a non-null Process with its <see cref="P:System.Diagnostics.Process.HasExited" /> property already set to <see langword="true" />.</span></span> <span data-ttu-id="7e18d-1360">在这种情况下，启动的进程可能已激活现有实例自身，然后退出。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1360">In this case, the started process may have activated an existing instance of itself and then exited.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use this overload to create a new process and its primary thread by specifying its file name, command-line arguments, user name, password, and domain. The new process then runs the specified executable file in the security context of the specified credentials (user, domain, and password).  
  
> [!NOTE]
>  When the executable file is located on a remote drive, you must identify the network share by using a uniform resource identifier (URI), not a linked drive letter.  
  
> [!NOTE]
>  <span data-ttu-id="7e18d-1364">如果要启动的可执行文件的地址是 URL，则该进程将不会启动并 `null` 返回。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1364">If the address of the executable file to start is a URL, the process is not started and `null` is returned.</span></span>  
  
 <span data-ttu-id="7e18d-1365">此重载使你可以在不先创建新实例的情况下启动进程 <xref:System.Diagnostics.Process> 。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1365">This overload lets you start a process without first creating a new <xref:System.Diagnostics.Process> instance.</span></span> <span data-ttu-id="7e18d-1366">重载是创建新 <xref:System.Diagnostics.Process> 实例、设置属性的、、、 <xref:System.Diagnostics.ProcessStartInfo.FileName%2A> <xref:System.Diagnostics.ProcessStartInfo.Arguments%2A> <xref:System.Diagnostics.ProcessStartInfo.UserName%2A> <xref:System.Diagnostics.ProcessStartInfo.Password%2A> 和 <xref:System.Diagnostics.ProcessStartInfo.Domain%2A> 属性以及 <xref:System.Diagnostics.Process.StartInfo%2A> <xref:System.Diagnostics.Process.Start%2A> 为实例调用 <xref:System.Diagnostics.Process> 的显式步骤的替代方法。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1366">The overload is an alternative to the explicit steps of creating a new <xref:System.Diagnostics.Process> instance, setting the <xref:System.Diagnostics.ProcessStartInfo.FileName%2A>, <xref:System.Diagnostics.ProcessStartInfo.Arguments%2A>, <xref:System.Diagnostics.ProcessStartInfo.UserName%2A>, <xref:System.Diagnostics.ProcessStartInfo.Password%2A>, and <xref:System.Diagnostics.ProcessStartInfo.Domain%2A> properties of the <xref:System.Diagnostics.Process.StartInfo%2A> property, and calling <xref:System.Diagnostics.Process.Start%2A> for the <xref:System.Diagnostics.Process> instance.</span></span>  
  
 <span data-ttu-id="7e18d-1367">同样，与 "**运行**" 对话框可以接受带有或不带 .exe 扩展名的可执行文件名一样，.exe 扩展名在参数中是可选的。 `fileName`</span><span class="sxs-lookup"><span data-stu-id="7e18d-1367">Similarly, in the same way that the **Run** dialog box can accept an executable file name with or without the .exe extension, the .exe extension is optional in the `fileName` parameter.</span></span> <span data-ttu-id="7e18d-1368">例如，可以将 `fileName` 参数设置为 "Notepad.exe" 或 "Notepad"。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1368">For example, you can set the `fileName` parameter to either "Notepad.exe" or "Notepad".</span></span> <span data-ttu-id="7e18d-1369">如果 `fileName` 参数表示一个可执行文件，则该 `arguments` 参数可能表示要对其执行操作的文件，例如中的文本文件 `Notepad.exe myfile.txt` 。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1369">If the `fileName` parameter represents an executable file, the `arguments` parameter might represent a file to act upon, such as the text file in `Notepad.exe myfile.txt`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7e18d-1370">文件名必须在 <xref:System.Diagnostics.Process.Start%2A> 具有 `userName` 、和参数的重载中表示可执行文件 `password` `domain` 。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1370">The file name must represent an executable file in the <xref:System.Diagnostics.Process.Start%2A> overloads that have `userName`, `password`, and `domain` parameters.</span></span>  
  
 <span data-ttu-id="7e18d-1371">当你使用 <xref:System.Diagnostics.Process.Start%2A> 启动某个进程时，你可能需要将其关闭或丢失系统资源的风险。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1371">Whenever you use <xref:System.Diagnostics.Process.Start%2A> to start a process, you might need to close it or you risk losing system resources.</span></span> <span data-ttu-id="7e18d-1372">使用或关闭 <xref:System.Diagnostics.Process.CloseMainWindow%2A> 进程 <xref:System.Diagnostics.Process.Kill%2A> 。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1372">Close processes using <xref:System.Diagnostics.Process.CloseMainWindow%2A> or <xref:System.Diagnostics.Process.Kill%2A>.</span></span> <span data-ttu-id="7e18d-1373">您可以使用其属性来检查进程是否已关闭 <xref:System.Diagnostics.Process.HasExited%2A> 。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1373">You can check whether a process has already been closed by using its <xref:System.Diagnostics.Process.HasExited%2A> property.</span></span> 
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="7e18d-1374">未指定文件名。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1374">No file name was specified.</span></span></exception>
        <exception cref="T:System.ComponentModel.Win32Exception"><span data-ttu-id="7e18d-1375">打开关联的文件时出错。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1375">An error occurred when opening the associated file.</span></span>  

<span data-ttu-id="7e18d-1376">- 或 -</span><span class="sxs-lookup"><span data-stu-id="7e18d-1376">-or-</span></span>

<span data-ttu-id="7e18d-1377">找不到 <paramref name="fileName" /> 中指定的文件。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1377">The file specified in the <paramref name="fileName" /> could not be found.</span></span>
  
<span data-ttu-id="7e18d-1378">- 或 -</span><span class="sxs-lookup"><span data-stu-id="7e18d-1378">-or-</span></span> 
<span data-ttu-id="7e18d-1379">参数的长度与该关联文件的完整路径的长度的总和超过了 2080。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1379">The sum of the length of the arguments and the length of the full path to the associated file exceeds 2080.</span></span> <span data-ttu-id="7e18d-1380">与此异常关联的错误消息可能为以下消息之一：“传递到系统调用的数据区域太小。”</span><span class="sxs-lookup"><span data-stu-id="7e18d-1380">The error message associated with this exception can be one of the following: "The data area passed to a system call is too small."</span></span> <span data-ttu-id="7e18d-1381">或“拒绝访问。”</span><span class="sxs-lookup"><span data-stu-id="7e18d-1381">or "Access is denied."</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="7e18d-1382">已释放此进程对象。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1382">The process object has already been disposed.</span></span></exception>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="7e18d-1383">Linux 或 macOS（仅适用于.NET Core）不支持此成员。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1383">This member is not supported on Linux or macOS (.NET Core only).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="StartInfo">
      <MemberSignature Language="C#" Value="public System.Diagnostics.ProcessStartInfo StartInfo { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Diagnostics.ProcessStartInfo StartInfo" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.StartInfo" />
      <MemberSignature Language="VB.NET" Value="Public Property StartInfo As ProcessStartInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Diagnostics::ProcessStartInfo ^ StartInfo { System::Diagnostics::ProcessStartInfo ^ get(); void set(System::Diagnostics::ProcessStartInfo ^ value); };" />
      <MemberSignature Language="F#" Value="member this.StartInfo : System.Diagnostics.ProcessStartInfo with get, set" Usage="System.Diagnostics.Process.StartInfo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.Diagnostics.MonitoringDescription("ProcessStartInfo")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.MonitoringDescription("ProcessStartInfo")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Diagnostics.MonitoringDescription("Specifies information used to start a process.")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.MonitoringDescription("Specifies information used to start a process.")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Diagnostics.ProcessStartInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7e18d-1384">获取或设置要传递给 <see cref="M:System.Diagnostics.Process.Start" /> 的 <see cref="T:System.Diagnostics.Process" /> 方法的属性。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1384">Gets or sets the properties to pass to the <see cref="M:System.Diagnostics.Process.Start" /> method of the <see cref="T:System.Diagnostics.Process" />.</span></span></summary>
        <value><span data-ttu-id="7e18d-1385">表示启动进程时要使用的数据的 <see cref="T:System.Diagnostics.ProcessStartInfo" />。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1385">The <see cref="T:System.Diagnostics.ProcessStartInfo" /> that represents the data with which to start the process.</span></span> <span data-ttu-id="7e18d-1386">这些自变量包括用于启动该进程的可执行文件或文档的名称。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1386">These arguments include the name of the executable file or document used to start the process.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <ph id="ph1">&lt;xref:System.Diagnostics.Process.StartInfo%2A&gt;</ph> represents the set of parameters to use to start a process. When <ph id="ph1">&lt;xref:System.Diagnostics.Process.Start%2A&gt;</ph> is called, the <ph id="ph2">&lt;xref:System.Diagnostics.Process.StartInfo%2A&gt;</ph> is used to specify the process to start. The only necessary <ph id="ph1">&lt;xref:System.Diagnostics.Process.StartInfo%2A&gt;</ph> member to set is the <ph id="ph2">&lt;xref:System.Diagnostics.ProcessStartInfo.FileName%2A&gt;</ph> property. <span data-ttu-id="7e18d-1390">通过指定属性启动进程 <xref:System.Diagnostics.ProcessStartInfo.FileName%2A> 类似于在 Windows "**开始**" 菜单的 "**运行**" 对话框中键入信息。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1390">Starting a process by specifying the <xref:System.Diagnostics.ProcessStartInfo.FileName%2A> property is similar to typing the information in the **Run** dialog box of the Windows **Start** menu.</span></span> <span data-ttu-id="7e18d-1391">因此， <xref:System.Diagnostics.ProcessStartInfo.FileName%2A> 属性不需要表示可执行文件。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1391">Therefore, the <xref:System.Diagnostics.ProcessStartInfo.FileName%2A> property does not need to represent an executable file.</span></span> <span data-ttu-id="7e18d-1392">它可以是与系统上安装的应用程序关联的任何文件类型。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1392">It can be of any file type for which the extension has been associated with an application installed on the system.</span></span> <span data-ttu-id="7e18d-1393">例如， <xref:System.Diagnostics.ProcessStartInfo.FileName%2A> 如果您已将文本文件与一个编辑器（如记事本）关联，则可以具有 .txt 扩展名; 如果您已将 .doc 文件与 word 处理工具（如 Microsoft word）相关联，则它可能具有 .doc。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1393">For example the <xref:System.Diagnostics.ProcessStartInfo.FileName%2A> can have a .txt extension if you have associated text files with an editor, such as Notepad, or it can have a .doc if you have associated .doc files with a word processing tool, such as Microsoft Word.</span></span> <span data-ttu-id="7e18d-1394">同样，与 "**运行**" 对话框可以接受带有或不带 .exe 扩展名的可执行文件名一样，.exe 扩展在成员中是可选的。 <xref:System.Diagnostics.ProcessStartInfo.FileName%2A></span><span class="sxs-lookup"><span data-stu-id="7e18d-1394">Similarly, in the same way that the **Run** dialog box can accept an executable file name with or without the .exe extension, the .exe extension is optional in the <xref:System.Diagnostics.ProcessStartInfo.FileName%2A> member.</span></span> <span data-ttu-id="7e18d-1395">例如，可以将 <xref:System.Diagnostics.ProcessStartInfo.FileName%2A> 属性设置为 "Notepad.exe" 或 "Notepad"。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1395">For example, you can set the <xref:System.Diagnostics.ProcessStartInfo.FileName%2A> property to either "Notepad.exe" or "Notepad".</span></span>  
  
 <span data-ttu-id="7e18d-1396">可以通过将属性设置为位置来启动 ClickOnce 应用程序 <xref:System.Diagnostics.ProcessStartInfo.FileName%2A> (例如，最初在其中安装应用程序的 Web 地址) 。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1396">You can start a ClickOnce application by setting the <xref:System.Diagnostics.ProcessStartInfo.FileName%2A> property to the location (for example, a Web address) from which you originally installed the application.</span></span> <span data-ttu-id="7e18d-1397">不要通过在硬盘驱动器上指定其安装位置来启动 ClickOnce 应用程序。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1397">Do not start a ClickOnce application by specifying its installed location on your hard drive.</span></span>  
  
 <span data-ttu-id="7e18d-1398">如果文件名涉及不可执行的文件（如 .doc 文件），则可以包含谓词来指定要对文件执行的操作。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1398">If the file name involves a nonexecutable file, such as a .doc file, you can include a verb specifying what action to take on the file.</span></span> <span data-ttu-id="7e18d-1399">例如，可以将 <xref:System.Diagnostics.ProcessStartInfo.Verb%2A> 以 .doc 扩展名结尾的文件的设置为 "Print"。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1399">For example, you could set the <xref:System.Diagnostics.ProcessStartInfo.Verb%2A> to "Print" for a file ending in the .doc extension.</span></span> <span data-ttu-id="7e18d-1400">如果手动输入属性的值，则在属性中指定的文件名 <xref:System.Diagnostics.ProcessStartInfo.FileName%2A> 不需要具有扩展名 <xref:System.Diagnostics.ProcessStartInfo.Verb%2A> 。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1400">The file name specified in the <xref:System.Diagnostics.ProcessStartInfo.FileName%2A> property does not need to have an extension if you manually enter a value for the <xref:System.Diagnostics.ProcessStartInfo.Verb%2A> property.</span></span> <span data-ttu-id="7e18d-1401">但是，如果使用 <xref:System.Diagnostics.ProcessStartInfo.Verbs%2A> 属性来确定哪些谓词可用，则必须包含扩展名。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1401">However, if you use the <xref:System.Diagnostics.ProcessStartInfo.Verbs%2A> property to determine what verbs are available, you must include the extension.</span></span>  
  
 <span data-ttu-id="7e18d-1402">你可以将属性中指定的参数更改 <xref:System.Diagnostics.Process.StartInfo%2A> 为对进程调用方法的时间 <xref:System.Diagnostics.Process.Start%2A> 。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1402">You can change the parameters specified in the <xref:System.Diagnostics.Process.StartInfo%2A> property up to the time that you call the <xref:System.Diagnostics.Process.Start%2A> method on the process.</span></span> <span data-ttu-id="7e18d-1403">开始该过程后，更改值不 <xref:System.Diagnostics.Process.StartInfo%2A> 会影响或重启关联的进程。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1403">After you start the process, changing the <xref:System.Diagnostics.Process.StartInfo%2A> values does not affect or restart the associated process.</span></span> <span data-ttu-id="7e18d-1404">如果在设置了和属性的情况下调用方法，则将 <xref:System.Diagnostics.Process.Start%28System.Diagnostics.ProcessStartInfo%29> <xref:System.Diagnostics.ProcessStartInfo.UserName%2A?displayProperty=nameWithType> <xref:System.Diagnostics.ProcessStartInfo.Password%2A?displayProperty=nameWithType> 调用非托管 `CreateProcessWithLogonW` 函数，这将在新窗口中启动该进程，即使 <xref:System.Diagnostics.ProcessStartInfo.CreateNoWindow%2A> 属性值为 `true` 或 <xref:System.Diagnostics.ProcessStartInfo.WindowStyle%2A> 属性值为 <xref:System.Diagnostics.ProcessWindowStyle.Hidden> 。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1404">If you call the <xref:System.Diagnostics.Process.Start%28System.Diagnostics.ProcessStartInfo%29> method with the <xref:System.Diagnostics.ProcessStartInfo.UserName%2A?displayProperty=nameWithType> and <xref:System.Diagnostics.ProcessStartInfo.Password%2A?displayProperty=nameWithType> properties set, the unmanaged `CreateProcessWithLogonW` function is called, which starts the process in a new window even if the <xref:System.Diagnostics.ProcessStartInfo.CreateNoWindow%2A> property value is `true` or the <xref:System.Diagnostics.ProcessStartInfo.WindowStyle%2A> property value is <xref:System.Diagnostics.ProcessWindowStyle.Hidden>.</span></span>  
  
 <span data-ttu-id="7e18d-1405">只应访问 <xref:System.Diagnostics.Process.StartInfo%2A> <xref:System.Diagnostics.Process> 由方法返回的对象的属性 <xref:System.Diagnostics.Process.Start%2A> 。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1405">You should only access the <xref:System.Diagnostics.Process.StartInfo%2A> property on a <xref:System.Diagnostics.Process> object returned by the <xref:System.Diagnostics.Process.Start%2A> method.</span></span> <span data-ttu-id="7e18d-1406">例如，不应访问 <xref:System.Diagnostics.Process.StartInfo%2A> 返回的对象的属性 <xref:System.Diagnostics.Process> <xref:System.Diagnostics.Process.GetProcesses%2A> 。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1406">For example, you should not access the <xref:System.Diagnostics.Process.StartInfo%2A> property on a <xref:System.Diagnostics.Process> object returned by <xref:System.Diagnostics.Process.GetProcesses%2A>.</span></span> <span data-ttu-id="7e18d-1407">否则，在 .NET Core 上， <xref:System.Diagnostics.Process.StartInfo%2A> 属性将引发 <xref:System.InvalidOperationException> 并在 .NET Framework 它将返回虚拟 <xref:System.Diagnostics.ProcessStartInfo> 对象。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1407">Otherwise, on .NET Core the <xref:System.Diagnostics.Process.StartInfo%2A> property will throw an <xref:System.InvalidOperationException> and on .NET Framework it will return a dummy <xref:System.Diagnostics.ProcessStartInfo> object.</span></span>
  
 <span data-ttu-id="7e18d-1408">当进程启动时，文件名为填充 (只读) 属性的文件 <xref:System.Diagnostics.Process.MainModule%2A> 。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1408">When the process is started, the file name is the file that populates the (read-only) <xref:System.Diagnostics.Process.MainModule%2A> property.</span></span> <span data-ttu-id="7e18d-1409">如果要在启动进程后检索与进程关联的可执行文件，请使用 <xref:System.Diagnostics.Process.MainModule%2A> 属性。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1409">If you want to retrieve the executable file that is associated with the process after the process has started, use the <xref:System.Diagnostics.Process.MainModule%2A> property.</span></span> <span data-ttu-id="7e18d-1410">如果要设置 <xref:System.Diagnostics.Process> 未启动关联进程的实例的可执行文件，请使用 <xref:System.Diagnostics.Process.StartInfo%2A> 属性的 <xref:System.Diagnostics.ProcessStartInfo.FileName%2A> 成员。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1410">If you want to set the executable file of a <xref:System.Diagnostics.Process> instance for which an associated process has not been started, use the <xref:System.Diagnostics.Process.StartInfo%2A> property's <xref:System.Diagnostics.ProcessStartInfo.FileName%2A> member.</span></span> <span data-ttu-id="7e18d-1411">由于属性的成员 <xref:System.Diagnostics.Process.StartInfo%2A> 是传递给 <xref:System.Diagnostics.Process.Start%2A> 进程的方法的参数，因此，在 <xref:System.Diagnostics.ProcessStartInfo.FileName%2A> 关联进程开始后更改属性将不会重置该 <xref:System.Diagnostics.Process.MainModule%2A> 属性。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1411">Because the members of the <xref:System.Diagnostics.Process.StartInfo%2A> property are arguments that are passed to the <xref:System.Diagnostics.Process.Start%2A> method of a process, changing the <xref:System.Diagnostics.ProcessStartInfo.FileName%2A> property after the associated process has started will not reset the <xref:System.Diagnostics.Process.MainModule%2A> property.</span></span> <span data-ttu-id="7e18d-1412">这些属性仅用于初始化关联的进程。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1412">These properties are used only to initialize the associated process.</span></span>
  
## Examples  
 <span data-ttu-id="7e18d-1413">下面的示例 <xref:System.Diagnostics.Process.StartInfo%2A> 使用要执行的文件、对其执行的操作以及是否应显示用户界面来填充。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1413">The following example populates a <xref:System.Diagnostics.Process.StartInfo%2A> with the file to execute, the action performed on it and whether it should displays a user interface.</span></span> <span data-ttu-id="7e18d-1414">有关其他示例，请参阅类的属性的参考页 <xref:System.Diagnostics.ProcessStartInfo> 。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1414">For additional examples, refer to the reference pages for properties of the <xref:System.Diagnostics.ProcessStartInfo> class.</span></span>  
  
 [!code-cpp[Process.Start_instance#1](~/samples/snippets/cpp/VS_Snippets_CLR/Process.Start_instance/CPP/processstart.cpp#1)]
 [!code-csharp[Process.Start_instance#1](~/samples/snippets/csharp/VS_Snippets_CLR/Process.Start_instance/CS/processstart.cs#1)]
 [!code-vb[Process.Start_instance#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Process.Start_instance/VB/processstart.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7e18d-1415">指定 <see cref="P:System.Diagnostics.Process.StartInfo" /> 的值为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1415">The value that specifies the <see cref="P:System.Diagnostics.Process.StartInfo" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="7e18d-1416">仅限 .NET Core：<see cref="M:System.Diagnostics.Process.Start" /> 方法未用于启动进程。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1416">.NET Core only: The <see cref="M:System.Diagnostics.Process.Start" /> method was not used to start the process.</span></span></exception>
        <altmember cref="M:System.Diagnostics.Process.Start" />
        <altmember cref="P:System.Diagnostics.ProcessStartInfo.FileName" />
      </Docs>
    </Member>
    <Member MemberName="StartTime">
      <MemberSignature Language="C#" Value="public DateTime StartTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime StartTime" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.StartTime" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property StartTime As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTime StartTime { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.StartTime : DateTime" Usage="System.Diagnostics.Process.StartTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.Diagnostics.MonitoringDescription("ProcessStartTime")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.MonitoringDescription("ProcessStartTime")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Diagnostics.MonitoringDescription("The time at which the process was started.")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.MonitoringDescription("The time at which the process was started.")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7e18d-1417">获取关联进程启动的时间。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1417">Gets the time that the associated process was started.</span></span></summary>
        <value><span data-ttu-id="7e18d-1418">指示进程启动的时间的对象。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1418">An object  that indicates when the process started.</span></span> <span data-ttu-id="7e18d-1419">如果进程未运行，将会引发异常。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1419">An exception is thrown if the process is not running.</span></span></value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="7e18d-1420">你正试图访问在远程计算机上运行的进程的 <see cref="P:System.Diagnostics.Process.StartTime" /> 属性。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1420">You are attempting to access the <see cref="P:System.Diagnostics.Process.StartTime" /> property for a process that is running on a remote computer.</span></span> <span data-ttu-id="7e18d-1421">此属性仅可用于本地计算机上运行的进程。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1421">This property is available only for processes that are running on the local computer.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="7e18d-1422">该进程已退出。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1422">The process has exited.</span></span>  
  
 <span data-ttu-id="7e18d-1423">- 或 -</span><span class="sxs-lookup"><span data-stu-id="7e18d-1423">-or-</span></span>  
  
 <span data-ttu-id="7e18d-1424">该进程尚未启动。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1424">The process has not been started.</span></span></exception>
        <exception cref="T:System.ComponentModel.Win32Exception"><span data-ttu-id="7e18d-1425">调用 Windows 函数时出错。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1425">An error occurred in the call to the Windows function.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SynchronizingObject">
      <MemberSignature Language="C#" Value="public System.ComponentModel.ISynchronizeInvoke? SynchronizingObject { get; set; }" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ComponentModel.ISynchronizeInvoke SynchronizingObject" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.SynchronizingObject" />
      <MemberSignature Language="VB.NET" Value="Public Property SynchronizingObject As ISynchronizeInvoke" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ComponentModel::ISynchronizeInvoke ^ SynchronizingObject { System::ComponentModel::ISynchronizeInvoke ^ get(); void set(System::ComponentModel::ISynchronizeInvoke ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SynchronizingObject : System.ComponentModel.ISynchronizeInvoke with get, set" Usage="System.Diagnostics.Process.SynchronizingObject" />
      <MemberSignature Language="C#" Value="public System.ComponentModel.ISynchronizeInvoke SynchronizingObject { get; set; }" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(null)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(null)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.Diagnostics.MonitoringDescription("ProcessSynchronizingObject")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.MonitoringDescription("ProcessSynchronizingObject")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Diagnostics.MonitoringDescription("The object used to marshal the event handler calls issued as a result of a Process exit.")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.MonitoringDescription("The object used to marshal the event handler calls issued as a result of a Process exit.")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ComponentModel.ISynchronizeInvoke</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7e18d-1426">获取或设置用于封送由于进程退出事件而发出的事件处理程序调用的对象。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1426">Gets or sets the object used to marshal the event handler calls that are issued as a result of a process exit event.</span></span></summary>
        <value><span data-ttu-id="7e18d-1427"><see cref="T:System.ComponentModel.ISynchronizeInvoke" />，它用于封送由于进程上的 <see cref="E:System.Diagnostics.Process.Exited" /> 事件而发出的事件处理程序调用。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1427">The <see cref="T:System.ComponentModel.ISynchronizeInvoke" /> used to marshal event handler calls that are issued as a result of an <see cref="E:System.Diagnostics.Process.Exited" /> event on the process.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When <ph id="ph1">&lt;xref:System.Diagnostics.EventLog.SynchronizingObject%2A&gt;</ph> is <ph id="ph2">`null`</ph>, methods that handle the <ph id="ph3">&lt;xref:System.Diagnostics.Process.Exited&gt;</ph> event are called on a thread from the system thread pool. For more information about system thread pools, see <ph id="ph1">&lt;xref:System.Threading.ThreadPool&gt;</ph>.  
  
 When the <ph id="ph1">&lt;xref:System.Diagnostics.Process.Exited&gt;</ph> event is handled by a visual Windows Forms component, such as a <ph id="ph2">&lt;xref:System.Windows.Forms.Button&gt;</ph>, accessing the component through the system thread pool might not work, or might result in an exception. <span data-ttu-id="7e18d-1431">通过将设置 <xref:System.Diagnostics.Process.SynchronizingObject%2A> 为 Windows 窗体组件来避免此问题，这会导致处理 <xref:System.Diagnostics.Process.Exited> 事件的方法在创建该组件的同一线程上进行调用。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1431">Avoid this by setting <xref:System.Diagnostics.Process.SynchronizingObject%2A> to a Windows Forms component, which causes the methods handling the <xref:System.Diagnostics.Process.Exited> event to be called on the same thread on which the component was created.</span></span>  
  
 <span data-ttu-id="7e18d-1432">如果 <xref:System.Diagnostics.Process> [!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)] 在 Windows 窗体设计器内使用， <xref:System.Diagnostics.Process.SynchronizingObject%2A> 则将自动设置为包含的控件 <xref:System.Diagnostics.Process> 。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1432">If the <xref:System.Diagnostics.Process> is used inside [!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)] in a Windows Forms designer, <xref:System.Diagnostics.Process.SynchronizingObject%2A> is automatically set to the control that contains the <xref:System.Diagnostics.Process>.</span></span> <span data-ttu-id="7e18d-1433">例如，如果 <xref:System.Diagnostics.Process> 在的设计器上放置 `Form1`) 从继承的 (， <xref:System.Windows.Forms.Form> <xref:System.Diagnostics.Process.SynchronizingObject%2A> <xref:System.Diagnostics.Process> 则会将的属性设置为的实例 `Form1` ：</span><span class="sxs-lookup"><span data-stu-id="7e18d-1433">For example, if you place a <xref:System.Diagnostics.Process> on a designer for `Form1` (which inherits from <xref:System.Windows.Forms.Form>) the <xref:System.Diagnostics.Process.SynchronizingObject%2A> property of <xref:System.Diagnostics.Process> is set to the instance of `Form1`:</span></span>  
  
 [!code-cpp[Process_SynchronizingObject#2](~/samples/snippets/cpp/VS_Snippets_CLR/Process_SynchronizingObject/CPP/remarks.cpp#2)]
 [!code-csharp[Process_SynchronizingObject#2](~/samples/snippets/csharp/VS_Snippets_CLR/Process_SynchronizingObject/CS/remarks.cs#2)]
 [!code-vb[Process_SynchronizingObject#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/Process_SynchronizingObject/VB/remarks.vb#2)]  
  
 <span data-ttu-id="7e18d-1434">通常，当组件置于控件或窗体内时，将设置此属性，因为这些组件绑定到特定线程。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1434">Typically, this property is set when the component is placed inside a control or form, because those components are bound to a specific thread.</span></span>  
  
   
  
## Examples  
 [!code-cpp[Process_SynchronizingObject#1](~/samples/snippets/cpp/VS_Snippets_CLR/Process_SynchronizingObject/CPP/process_synchronizingobject.cpp#1)]
 [!code-csharp[Process_SynchronizingObject#1](~/samples/snippets/csharp/VS_Snippets_CLR/Process_SynchronizingObject/CS/process_synchronizingobject.cs#1)]
 [!code-vb[Process_SynchronizingObject#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Process_SynchronizingObject/VB/process_synchronizingobject.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.Process.SynchronizingObject" />
      </Docs>
    </Member>
    <Member MemberName="Threads">
      <MemberSignature Language="C#" Value="public System.Diagnostics.ProcessThreadCollection Threads { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Diagnostics.ProcessThreadCollection Threads" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.Threads" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Threads As ProcessThreadCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Diagnostics::ProcessThreadCollection ^ Threads { System::Diagnostics::ProcessThreadCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Threads : System.Diagnostics.ProcessThreadCollection" Usage="System.Diagnostics.Process.Threads" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1">
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.Diagnostics.MonitoringDescription("ProcessThreads")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.MonitoringDescription("ProcessThreads")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Diagnostics.MonitoringDescription("The number of threads of this process.")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.MonitoringDescription("The number of threads of this process.")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.MonoTODO]</AttributeName>
          <AttributeName Language="F#">[&lt;System.MonoTODO&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Diagnostics.ProcessThreadCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7e18d-1435">获取在关联进程中运行的一组线程。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1435">Gets the set of threads that are running in the associated process.</span></span></summary>
        <value><span data-ttu-id="7e18d-1436">类型 <see cref="T:System.Diagnostics.ProcessThread" /> 的数组，表示当前在关联进程中运行的操作系统线程。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1436">An array of type <see cref="T:System.Diagnostics.ProcessThread" /> representing the operating system threads currently running in the associated process.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A thread executes code in a process. Each process is started with a single thread, its primary thread. Any thread can create additional threads. <span data-ttu-id="7e18d-1440">进程中的线程共享进程的地址空间。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1440">Threads within a process share the address space of the process.</span></span>  
  
 <span data-ttu-id="7e18d-1441">使用 <xref:System.Diagnostics.ProcessThread> 获取与当前进程关联的所有线程。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1441">Use <xref:System.Diagnostics.ProcessThread> to get all the threads associated with the current process.</span></span> <span data-ttu-id="7e18d-1442">主线程不一定是数组中的索引零。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1442">The primary thread is not necessarily at index zero in the array.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.SystemException"><span data-ttu-id="7e18d-1443">进程没有 <see cref="P:System.Diagnostics.Process.Id" />，或者没有与 <see cref="T:System.Diagnostics.Process" /> 实例关联的进程。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1443">The process does not have an <see cref="P:System.Diagnostics.Process.Id" />, or no process is associated with the <see cref="T:System.Diagnostics.Process" /> instance.</span></span>  
  
<span data-ttu-id="7e18d-1444">- 或 -</span><span class="sxs-lookup"><span data-stu-id="7e18d-1444">-or-</span></span> 
<span data-ttu-id="7e18d-1445">关联进程已退出。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1445">The associated process has exited.</span></span></exception>
        <altmember cref="T:System.Diagnostics.ProcessThread" />
        <altmember cref="P:System.Diagnostics.Process.BasePriority" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Process.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="process.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7e18d-1446">如果适用，则将进程的名称格式化为字符串，并与父组件类型组合。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1446">Formats the process's name as a string, combined with the parent component type, if applicable.</span></span></summary>
        <returns><span data-ttu-id="7e18d-1447"><see cref="P:System.Diagnostics.Process.ProcessName" />，与基组件的 <see cref="M:System.Object.ToString" /> 返回值组合。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1447">The <see cref="P:System.Diagnostics.Process.ProcessName" />, combined with the base component's <see cref="M:System.Object.ToString" /> return value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example starts an instance of Notepad. The example then retrieves and displays various properties of the associated process. The example detects when the process exits, and displays the process's exit code.  
  
 [!code-cpp[Diag_Process_MemoryProperties64#1](~/samples/snippets/cpp/VS_Snippets_CLR/Diag_Process_MemoryProperties64/CPP/source.cpp#1)]
 [!code-csharp[Diag_Process_MemoryProperties64#1](~/samples/snippets/csharp/VS_Snippets_CLR/Diag_Process_MemoryProperties64/CS/source.cs#1)]
 [!code-vb[Diag_Process_MemoryProperties64#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Diag_Process_MemoryProperties64/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TotalProcessorTime">
      <MemberSignature Language="C#" Value="public TimeSpan TotalProcessorTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan TotalProcessorTime" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.TotalProcessorTime" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TotalProcessorTime As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan TotalProcessorTime { TimeSpan get(); };" />
      <MemberSignature Language="F#" Value="member this.TotalProcessorTime : TimeSpan" Usage="System.Diagnostics.Process.TotalProcessorTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.Diagnostics.MonitoringDescription("ProcessTotalProcessorTime")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.MonitoringDescription("ProcessTotalProcessorTime")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Diagnostics.MonitoringDescription("The amount of CPU time the process has used.")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.MonitoringDescription("The amount of CPU time the process has used.")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7e18d-1451">获取此进程的总的处理器时间。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1451">Gets the total processor time for this process.</span></span></summary>
        <value><span data-ttu-id="7e18d-1452"><see cref="T:System.TimeSpan" />，它指示关联进程使用 CPU 的时间。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1452">A <see cref="T:System.TimeSpan" /> that indicates the amount of time that the associated process has spent utilizing the CPU.</span></span> <span data-ttu-id="7e18d-1453">此值是 <see cref="P:System.Diagnostics.Process.UserProcessorTime" /> 和 <see cref="P:System.Diagnostics.Process.PrivilegedProcessorTime" /> 的和。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1453">This value is the sum of the <see cref="P:System.Diagnostics.Process.UserProcessorTime" /> and the <see cref="P:System.Diagnostics.Process.PrivilegedProcessorTime" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example starts an instance of Notepad. The example then retrieves and displays various properties of the associated process. The example detects when the process exits, and displays the process's exit code.  
  
 [!code-cpp[Diag_Process_MemoryProperties64#1](~/samples/snippets/cpp/VS_Snippets_CLR/Diag_Process_MemoryProperties64/CPP/source.cpp#1)]
 [!code-csharp[Diag_Process_MemoryProperties64#1](~/samples/snippets/csharp/VS_Snippets_CLR/Diag_Process_MemoryProperties64/CS/source.cs#1)]
 [!code-vb[Diag_Process_MemoryProperties64#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Diag_Process_MemoryProperties64/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="7e18d-1457">你正试图访问在远程计算机上运行的进程的 <see cref="P:System.Diagnostics.Process.TotalProcessorTime" /> 属性。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1457">You are attempting to access the <see cref="P:System.Diagnostics.Process.TotalProcessorTime" /> property for a process that is running on a remote computer.</span></span> <span data-ttu-id="7e18d-1458">此属性仅可用于本地计算机上运行的进程。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1458">This property is available only for processes that are running on the local computer.</span></span></exception>
        <altmember cref="P:System.Diagnostics.Process.UserProcessorTime" />
        <altmember cref="P:System.Diagnostics.Process.PrivilegedProcessorTime" />
      </Docs>
    </Member>
    <Member MemberName="UserProcessorTime">
      <MemberSignature Language="C#" Value="public TimeSpan UserProcessorTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan UserProcessorTime" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.UserProcessorTime" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UserProcessorTime As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan UserProcessorTime { TimeSpan get(); };" />
      <MemberSignature Language="F#" Value="member this.UserProcessorTime : TimeSpan" Usage="System.Diagnostics.Process.UserProcessorTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.Diagnostics.MonitoringDescription("ProcessUserProcessorTime")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.MonitoringDescription("ProcessUserProcessorTime")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Diagnostics.MonitoringDescription("The amount of CPU time the process spent outside the operating system core.")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.MonitoringDescription("The amount of CPU time the process spent outside the operating system core.")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7e18d-1459">获取此进程的用户处理器时间。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1459">Gets the user processor time for this process.</span></span></summary>
        <value><span data-ttu-id="7e18d-1460"><see cref="T:System.TimeSpan" />，它指示关联进程在该进程的应用程序部分内(而不是在操作系统内核中)运行代码所用的时间。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1460">A <see cref="T:System.TimeSpan" /> that indicates the amount of time that the associated process has spent running code inside the application portion of the process (not inside the operating system core).</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example starts an instance of Notepad. The example then retrieves and displays various properties of the associated process. The example detects when the process exits, and displays the process's exit code.  
  
 [!code-cpp[Diag_Process_MemoryProperties64#1](~/samples/snippets/cpp/VS_Snippets_CLR/Diag_Process_MemoryProperties64/CPP/source.cpp#1)]
 [!code-csharp[Diag_Process_MemoryProperties64#1](~/samples/snippets/csharp/VS_Snippets_CLR/Diag_Process_MemoryProperties64/CS/source.cs#1)]
 [!code-vb[Diag_Process_MemoryProperties64#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Diag_Process_MemoryProperties64/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="7e18d-1464">你正试图访问在远程计算机上运行的进程的 <see cref="P:System.Diagnostics.Process.UserProcessorTime" /> 属性。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1464">You are attempting to access the <see cref="P:System.Diagnostics.Process.UserProcessorTime" /> property for a process that is running on a remote computer.</span></span> <span data-ttu-id="7e18d-1465">此属性仅可用于本地计算机上运行的进程。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1465">This property is available only for processes that are running on the local computer.</span></span></exception>
        <altmember cref="P:System.Diagnostics.Process.UserProcessorTime" />
        <altmember cref="P:System.Diagnostics.Process.PrivilegedProcessorTime" />
      </Docs>
    </Member>
    <Member MemberName="VirtualMemorySize">
      <MemberSignature Language="C#" Value="public int VirtualMemorySize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 VirtualMemorySize" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.VirtualMemorySize" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property VirtualMemorySize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int VirtualMemorySize { int get(); };" />
      <MemberSignature Language="F#" Value="member this.VirtualMemorySize : int" Usage="System.Diagnostics.Process.VirtualMemorySize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0">
          <AttributeName Language="C#">[System.Obsolete("This property has been deprecated.  Please use System.Diagnostics.Process.VirtualMemorySize64 instead.  http://go.microsoft.com/fwlink/?linkid=14202")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("This property has been deprecated.  Please use System.Diagnostics.Process.VirtualMemorySize64 instead.  http://go.microsoft.com/fwlink/?linkid=14202")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-3.0;netcore-3.1;netstandard-2.1">
          <AttributeName Language="C#">[System.Obsolete("This property has been deprecated.  Please use System.Diagnostics.Process.VirtualMemorySize64 instead.  https://go.microsoft.com/fwlink/?linkid=14202")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("This property has been deprecated.  Please use System.Diagnostics.Process.VirtualMemorySize64 instead.  https://go.microsoft.com/fwlink/?linkid=14202")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.Diagnostics.MonitoringDescription("ProcessVirtualMemorySize")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.MonitoringDescription("ProcessVirtualMemorySize")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Diagnostics.MonitoringDescription("The amount of virtual memory currently used for this process.")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.MonitoringDescription("The amount of virtual memory currently used for this process.")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Obsolete("Use VirtualMemorySize64")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("Use VirtualMemorySize64")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7e18d-1466">获取进程的虚拟内存大小（以字节为单位）。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1466">Gets the size of the process's virtual memory, in bytes.</span></span></summary>
        <value><span data-ttu-id="7e18d-1467">关联进程请求的虚拟内存量（以字节为单位）。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1467">The amount of virtual memory, in bytes, that the associated process has requested.</span></span></value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Diagnostics.Process.VirtualMemorySize64" />
        <altmember cref="P:System.Diagnostics.Process.PeakVirtualMemorySize64" />
      </Docs>
    </Member>
    <Member MemberName="VirtualMemorySize64">
      <MemberSignature Language="C#" Value="public long VirtualMemorySize64 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 VirtualMemorySize64" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.VirtualMemorySize64" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property VirtualMemorySize64 As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long VirtualMemorySize64 { long get(); };" />
      <MemberSignature Language="F#" Value="member this.VirtualMemorySize64 : int64" Usage="System.Diagnostics.Process.VirtualMemorySize64" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.Diagnostics.MonitoringDescription("ProcessVirtualMemorySize")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.MonitoringDescription("ProcessVirtualMemorySize")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Runtime.InteropServices.ComVisible(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.ComVisible(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Diagnostics.MonitoringDescription("The amount of virtual memory currently used for this process.")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.MonitoringDescription("The amount of virtual memory currently used for this process.")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7e18d-1468">获取为关联进程分配的虚拟内存量（以字节为单位）。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1468">Gets the amount of the virtual memory, in bytes, allocated for the associated process.</span></span></summary>
        <value><span data-ttu-id="7e18d-1469">为关联进程分配的虚拟内存量（以字节为单位）。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1469">The amount of virtual memory, in bytes, allocated for the associated process.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The value returned by this property represents the current size of virtual memory used by the process, in bytes. The operating system maps the virtual address space for each process either to pages loaded in physical memory, or to pages stored in the virtual memory paging file on disk.  
  
 This property can be used to monitor memory usage on computers with 32-bit processors or 64-bit processors. <span data-ttu-id="7e18d-1473">属性值等效于进程的 **虚拟字节** 性能计数器。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1473">The property value is equivalent to the **Virtual Bytes** performance counter for the process.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7e18d-1474">下面的代码示例启动记事本应用程序的实例。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1474">The following code example starts an instance of the Notepad application.</span></span> <span data-ttu-id="7e18d-1475">然后，该示例检索并显示关联进程的各种属性。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1475">The example then retrieves and displays various properties of the associated process.</span></span> <span data-ttu-id="7e18d-1476">该示例在进程退出时进行检测，并显示其退出代码和高峰内存统计信息。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1476">The example detects when the process exits, and displays its exit code and peak memory statistics.</span></span>  
  
 [!code-cpp[Diag_Process_MemoryProperties64#1](~/samples/snippets/cpp/VS_Snippets_CLR/Diag_Process_MemoryProperties64/CPP/source.cpp#1)]
 [!code-csharp[Diag_Process_MemoryProperties64#1](~/samples/snippets/csharp/VS_Snippets_CLR/Diag_Process_MemoryProperties64/CS/source.cs#1)]
 [!code-vb[Diag_Process_MemoryProperties64#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Diag_Process_MemoryProperties64/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.Process.PeakVirtualMemorySize64" />
      </Docs>
    </Member>
    <MemberGroup MemberName="WaitForExit">
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="7e18d-1477">设置等待关联进程退出的时间段，并在该段时间结束前或该进程退出前，阻止当前线程执行。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1477">Sets the period of time to wait for the associated process to exit, and blocks the current thread of execution until the time has elapsed or the process has exited.</span></span> <span data-ttu-id="7e18d-1478">若要避免妨碍当前线程，请使用 <see cref="E:System.Diagnostics.Process.Exited" /> 事件。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1478">To avoid blocking the current thread, use the <see cref="E:System.Diagnostics.Process.Exited" /> event.</span></span>  
  
<span data-ttu-id="7e18d-1479">有关代码示例，请参阅 <see cref="P:System.Diagnostics.Process.StandardError" /> 和 <see cref="P:System.Diagnostics.Process.ExitCode" /> 属性参考页。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1479">For code examples, see the <see cref="P:System.Diagnostics.Process.StandardError" /> and the <see cref="P:System.Diagnostics.Process.ExitCode" /> property reference pages.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WaitForExit">
      <MemberSignature Language="C#" Value="public void WaitForExit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WaitForExit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Process.WaitForExit" />
      <MemberSignature Language="VB.NET" Value="Public Sub WaitForExit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WaitForExit();" />
      <MemberSignature Language="F#" Value="member this.WaitForExit : unit -&gt; unit" Usage="process.WaitForExit " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7e18d-1480">指示 <see cref="T:System.Diagnostics.Process" /> 组件无限期地等待关联进程退出。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1480">Instructs the <see cref="T:System.Diagnostics.Process" /> component to wait indefinitely for the associated process to exit.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <ph id="ph1">&lt;xref:System.Diagnostics.Process.WaitForExit&gt;</ph> makes the current thread wait until the associated process terminates.  It should be called after all other methods are called on the process. <span data-ttu-id="7e18d-1483">若要避免妨碍当前线程，请使用 <xref:System.Diagnostics.Process.Exited> 事件。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1483">To avoid blocking the current thread, use the <xref:System.Diagnostics.Process.Exited> event.</span></span>  
  
 This method instructs the <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> component to wait an infinite amount of time for the process and event handlers to exit. <span data-ttu-id="7e18d-1485">这可能导致应用程序停止响应。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1485">This can cause an application to stop responding.</span></span> <span data-ttu-id="7e18d-1486">例如，如果调用 <xref:System.Diagnostics.Process.CloseMainWindow%2A> 具有用户界面的进程，则在将进程写入到从不进入其消息循环的情况下，将不会处理对操作系统的终止关联进程的请求。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1486">For example, if you call <xref:System.Diagnostics.Process.CloseMainWindow%2A> for a process that has a user interface, the request to the operating system to terminate the associated process might not be handled if the process is written to never enter its message loop.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7e18d-1487">在 [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 和早期版本中， <xref:System.Diagnostics.Process.WaitForExit> 重载等待 <xref:System.Int32.MaxValue> 毫秒 (大约24天) ，而不是无限期等待。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1487">In the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] and earlier versions, the <xref:System.Diagnostics.Process.WaitForExit> overload waited for <xref:System.Int32.MaxValue> milliseconds (approximately 24 days), not indefinitely.</span></span> <span data-ttu-id="7e18d-1488">此外，如果已达到完全时间，则以前的版本不会等待事件处理程序退出 <xref:System.Int32.MaxValue> 。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1488">Also, previous versions did not wait for the event handlers to exit if the full <xref:System.Int32.MaxValue> time was reached.</span></span>  
  
 <span data-ttu-id="7e18d-1489">此重载确保所有处理都已完成，包括处理重定向标准输出的异步事件。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1489">This overload ensures that all processing has been completed, including the handling of asynchronous events for redirected standard output.</span></span> <span data-ttu-id="7e18d-1490"><xref:System.Diagnostics.Process.WaitForExit%28System.Int32%29>在将标准输出重定向到异步事件处理程序时，应在调用重载后使用此重载。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1490">You should use this overload after a call to the <xref:System.Diagnostics.Process.WaitForExit%28System.Int32%29> overload when standard output has been redirected to asynchronous event handlers.</span></span>  
  
 <span data-ttu-id="7e18d-1491">当关联进程退出 (即，当它通过正常或异常终止) 关闭时，系统将存储有关进程的管理信息并返回到已调用的组件 <xref:System.Diagnostics.Process.WaitForExit> 。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1491">When an associated process exits (that is, when it is shut down by the operation system through a normal or abnormal termination), the system stores administrative information about the process and returns to the component that had called <xref:System.Diagnostics.Process.WaitForExit>.</span></span> <span data-ttu-id="7e18d-1492">然后，该 <xref:System.Diagnostics.Process> 组件可 <xref:System.Diagnostics.Process.ExitTime%2A> 通过使用退出过程来访问包括的信息 <xref:System.Diagnostics.Process.Handle%2A> 。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1492">The <xref:System.Diagnostics.Process> component can then access the information, which includes the <xref:System.Diagnostics.Process.ExitTime%2A>, by using the <xref:System.Diagnostics.Process.Handle%2A> to the exited process.</span></span>  
  
 <span data-ttu-id="7e18d-1493">由于关联进程已退出，因此该 <xref:System.Diagnostics.Process.Handle%2A> 组件的属性不再指向现有进程资源。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1493">Because the associated process has exited, the <xref:System.Diagnostics.Process.Handle%2A> property of the component no longer points to an existing process resource.</span></span> <span data-ttu-id="7e18d-1494">相反，句柄只能用来访问操作系统有关进程资源的信息。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1494">Instead, the handle can be used only to access the operating system's information about the process resource.</span></span> <span data-ttu-id="7e18d-1495">系统知道组件尚未发布的已退出进程的句柄 <xref:System.Diagnostics.Process> ，因此它将 <xref:System.Diagnostics.Process.ExitTime%2A> 和 <xref:System.Diagnostics.Process.Handle%2A> 信息保留在内存中，直到 <xref:System.Diagnostics.Process> 组件专门释放资源。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1495">The system is aware of handles to exited processes that have not been released by <xref:System.Diagnostics.Process> components, so it keeps the <xref:System.Diagnostics.Process.ExitTime%2A> and <xref:System.Diagnostics.Process.Handle%2A> information in memory until the <xref:System.Diagnostics.Process> component specifically frees the resources.</span></span> <span data-ttu-id="7e18d-1496">出于此原因，只要调用了 <xref:System.Diagnostics.Process.Start%2A> 某个实例，就会在 <xref:System.Diagnostics.Process> <xref:System.Diagnostics.Process.Close%2A> 关联进程终止后调用，而不再需要有关它的任何管理信息。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1496">For this reason, any time you call <xref:System.Diagnostics.Process.Start%2A> for a <xref:System.Diagnostics.Process> instance, call <xref:System.Diagnostics.Process.Close%2A> when the associated process has terminated and you no longer need any administrative information about it.</span></span> <span data-ttu-id="7e18d-1497"><xref:System.Diagnostics.Process.Close%2A> 释放分配给退出进程的内存。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1497"><xref:System.Diagnostics.Process.Close%2A> frees the memory allocated to the exited process.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7e18d-1498">请参阅 "属性引用" 页的 "备注" 部分 <xref:System.Diagnostics.Process.StandardError%2A> 。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1498">See the Remarks section of the <xref:System.Diagnostics.Process.StandardError%2A> property reference page.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception"><span data-ttu-id="7e18d-1499">无法访问等待设置。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1499">The wait setting could not be accessed.</span></span></exception>
        <exception cref="T:System.SystemException"><span data-ttu-id="7e18d-1500">尚未设置进程 <see cref="P:System.Diagnostics.Process.Id" />，而且不存在可从其确定 <see cref="P:System.Diagnostics.Process.Id" /> 属性的 <see cref="P:System.Diagnostics.Process.Handle" />。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1500">No process <see cref="P:System.Diagnostics.Process.Id" /> has been set, and a <see cref="P:System.Diagnostics.Process.Handle" /> from which the <see cref="P:System.Diagnostics.Process.Id" /> property can be determined does not exist.</span></span>  
  
<span data-ttu-id="7e18d-1501">- 或 -</span><span class="sxs-lookup"><span data-stu-id="7e18d-1501">-or-</span></span> 
<span data-ttu-id="7e18d-1502">没有与此 <see cref="T:System.Diagnostics.Process" /> 对象关联的进程。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1502">There is no process associated with this <see cref="T:System.Diagnostics.Process" /> object.</span></span>  
  
<span data-ttu-id="7e18d-1503">- 或 -</span><span class="sxs-lookup"><span data-stu-id="7e18d-1503">-or-</span></span> 
<span data-ttu-id="7e18d-1504">你正尝试为远程计算机上运行的进程调用 <see cref="M:System.Diagnostics.Process.WaitForExit" /> 。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1504">You are attempting to call <see cref="M:System.Diagnostics.Process.WaitForExit" /> for a process that is running on a remote computer.</span></span> <span data-ttu-id="7e18d-1505">此方法仅对本地计算机上运行的进程可用。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1505">This method is available only for processes that are running on the local computer.</span></span></exception>
        <altmember cref="M:System.Diagnostics.Process.CloseMainWindow" />
        <altmember cref="M:System.Diagnostics.Process.Kill" />
        <altmember cref="P:System.Diagnostics.Process.Handle" />
        <altmember cref="P:System.Diagnostics.Process.ExitTime" />
        <altmember cref="P:System.Diagnostics.Process.EnableRaisingEvents" />
        <altmember cref="P:System.Diagnostics.Process.HasExited" />
        <altmember cref="E:System.Diagnostics.Process.Exited" />
      </Docs>
    </Member>
    <Member MemberName="WaitForExit">
      <MemberSignature Language="C#" Value="public bool WaitForExit (int milliseconds);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool WaitForExit(int32 milliseconds) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Process.WaitForExit(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function WaitForExit (milliseconds As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool WaitForExit(int milliseconds);" />
      <MemberSignature Language="F#" Value="member this.WaitForExit : int -&gt; bool" Usage="process.WaitForExit milliseconds" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="milliseconds" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="milliseconds"><span data-ttu-id="7e18d-1506">等待关联进程退出的时间(以毫秒为单位)。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1506">The amount of time, in milliseconds, to wait for the associated process to exit.</span></span> <span data-ttu-id="7e18d-1507">最大值为 32 位整数的最大可能值，这对于操作系统而言表示无限大。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1507">The maximum is the largest possible value of a 32-bit integer, which represents infinity to the operating system.</span></span></param>
        <summary><span data-ttu-id="7e18d-1508">指示 <see cref="T:System.Diagnostics.Process" /> 组件在指定的毫秒数内等待关联进程退出。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1508">Instructs the <see cref="T:System.Diagnostics.Process" /> component to wait the specified number of milliseconds for the associated process to exit.</span></span></summary>
        <returns><span data-ttu-id="7e18d-1509">如果关联进程已退出，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1509"><see langword="true" /> if the associated process has exited; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <ph id="ph1">&lt;xref:System.Diagnostics.Process.WaitForExit%28System.Int32%29&gt;</ph> makes the current thread wait until the associated process terminates. It should be called after all other methods are called on the process. <span data-ttu-id="7e18d-1512">若要避免妨碍当前线程，请使用 <xref:System.Diagnostics.Process.Exited> 事件。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1512">To avoid blocking the current thread, use the <xref:System.Diagnostics.Process.Exited> event.</span></span>  
  
 This method instructs the <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> component to wait a finite amount of time for the process to exit. <span data-ttu-id="7e18d-1514">如果在间隔结束时关联的进程未退出，因为终止请求被拒绝， `false` 则返回到调用过程。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1514">If the associated process does not exit by the end of the interval because the request to terminate is denied, `false` is returned to the calling procedure.</span></span> <span data-ttu-id="7e18d-1515">你可以 <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType> 为指定 `milliseconds` ，并 <xref:System.Diagnostics.Process.WaitForExit%28System.Int32%29?displayProperty=nameWithType> 将与重载的行为相同 <xref:System.Diagnostics.Process.WaitForExit> 。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1515">You can specify <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType> for `milliseconds`, and <xref:System.Diagnostics.Process.WaitForExit%28System.Int32%29?displayProperty=nameWithType> will behave the same as the <xref:System.Diagnostics.Process.WaitForExit> overload.</span></span> <span data-ttu-id="7e18d-1516">如果将 0 (零) 传递给方法，则它 `true` 仅在进程已退出时返回; 否则，它将立即返回 `false` 。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1516">If you pass 0 (zero) to the method, it returns `true` only if the process has already exited; otherwise, it immediately returns `false`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7e18d-1517">在 [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 和早期版本中，如果 `milliseconds` 为-1，则 <xref:System.Diagnostics.Process.WaitForExit%28System.Int32%29> 重载等待 <xref:System.Int32.MaxValue> 毫秒 (大约24天) ，而不是无限期等待。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1517">In the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] and earlier versions, if `milliseconds` was -1, the <xref:System.Diagnostics.Process.WaitForExit%28System.Int32%29> overload waited for <xref:System.Int32.MaxValue> milliseconds (approximately 24 days), not indefinitely.</span></span>  
  
 <span data-ttu-id="7e18d-1518">将标准输出重定向到异步事件处理程序后，在此方法返回时输出处理可能不会完成。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1518">When standard output has been redirected to asynchronous event handlers, it is possible that output processing will not have completed when this method returns.</span></span> <span data-ttu-id="7e18d-1519">若要确保异步事件处理已完成，请在从此 <xref:System.Diagnostics.Process.WaitForExit> 重载接收后调用不带任何参数的重载 `true` 。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1519">To ensure that asynchronous event handling has been completed, call the <xref:System.Diagnostics.Process.WaitForExit> overload that takes no parameter after receiving a `true` from this overload.</span></span> <span data-ttu-id="7e18d-1520">若要帮助确保 <xref:System.Diagnostics.Process.Exited> 在 Windows 窗体应用程序中正确地处理事件，请设置 <xref:System.Diagnostics.Process.SynchronizingObject%2A> 属性。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1520">To help ensure that the <xref:System.Diagnostics.Process.Exited> event is handled correctly in Windows Forms applications, set the <xref:System.Diagnostics.Process.SynchronizingObject%2A> property.</span></span>  
  
 <span data-ttu-id="7e18d-1521">如果关联进程退出 (由操作系统通过正常或异常终止) 关闭，系统会存储有关进程的管理信息并返回到已调用的组件 <xref:System.Diagnostics.Process.WaitForExit%28System.Int32%29> 。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1521">When an associated process exits (is shut down by the operating system through a normal or abnormal termination), the system stores administrative information about the process and returns to the component that had called <xref:System.Diagnostics.Process.WaitForExit%28System.Int32%29>.</span></span> <span data-ttu-id="7e18d-1522">然后，该 <xref:System.Diagnostics.Process> 组件可 <xref:System.Diagnostics.Process.ExitTime%2A> 通过使用退出过程来访问包括的信息 <xref:System.Diagnostics.Process.Handle%2A> 。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1522">The <xref:System.Diagnostics.Process> component can then access the information, which includes the <xref:System.Diagnostics.Process.ExitTime%2A>, by using the <xref:System.Diagnostics.Process.Handle%2A> to the exited process.</span></span>  
  
 <span data-ttu-id="7e18d-1523">由于关联进程已退出，因此该 <xref:System.Diagnostics.Process.Handle%2A> 组件的属性不再指向现有进程资源。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1523">Because the associated process has exited, the <xref:System.Diagnostics.Process.Handle%2A> property of the component no longer points to an existing process resource.</span></span> <span data-ttu-id="7e18d-1524">相反，句柄只能用来访问操作系统有关进程资源的信息。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1524">Instead, the handle can be used only to access the operating system's information about the process resource.</span></span> <span data-ttu-id="7e18d-1525">系统知道组件尚未发布的已退出进程的句柄 <xref:System.Diagnostics.Process> ，因此它将 <xref:System.Diagnostics.Process.ExitTime%2A> 和 <xref:System.Diagnostics.Process.Handle%2A> 信息保留在内存中，直到 <xref:System.Diagnostics.Process> 组件专门释放资源。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1525">The system is aware of handles to exited processes that have not been released by <xref:System.Diagnostics.Process> components, so it keeps the <xref:System.Diagnostics.Process.ExitTime%2A> and <xref:System.Diagnostics.Process.Handle%2A> information in memory until the <xref:System.Diagnostics.Process> component specifically frees the resources.</span></span> <span data-ttu-id="7e18d-1526">出于此原因，只要调用了 <xref:System.Diagnostics.Process.Start%2A> 某个实例，就会在 <xref:System.Diagnostics.Process> <xref:System.Diagnostics.Process.Close%2A> 关联进程终止后调用，而不再需要有关它的任何管理信息。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1526">For this reason, any time you call <xref:System.Diagnostics.Process.Start%2A> for a <xref:System.Diagnostics.Process> instance, call <xref:System.Diagnostics.Process.Close%2A> when the associated process has terminated and you no longer need any administrative information about it.</span></span> <span data-ttu-id="7e18d-1527"><xref:System.Diagnostics.Process.Close%2A> 释放分配给退出进程的内存。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1527"><xref:System.Diagnostics.Process.Close%2A> frees the memory allocated to the exited process.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7e18d-1528">请参阅属性的代码示例 <xref:System.Diagnostics.Process.ExitCode%2A> 。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1528">See the code example for the <xref:System.Diagnostics.Process.ExitCode%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception"><span data-ttu-id="7e18d-1529">无法访问等待设置。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1529">The wait setting could not be accessed.</span></span></exception>
        <exception cref="T:System.SystemException"><span data-ttu-id="7e18d-1530">尚未设置进程 <see cref="P:System.Diagnostics.Process.Id" />，而且不存在可从其确定 <see cref="P:System.Diagnostics.Process.Id" /> 属性的 <see cref="P:System.Diagnostics.Process.Handle" />。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1530">No process <see cref="P:System.Diagnostics.Process.Id" /> has been set, and a <see cref="P:System.Diagnostics.Process.Handle" /> from which the <see cref="P:System.Diagnostics.Process.Id" /> property can be determined does not exist.</span></span>  
  
<span data-ttu-id="7e18d-1531">- 或 -</span><span class="sxs-lookup"><span data-stu-id="7e18d-1531">-or-</span></span> 
<span data-ttu-id="7e18d-1532">没有与此 <see cref="T:System.Diagnostics.Process" /> 对象关联的进程。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1532">There is no process associated with this <see cref="T:System.Diagnostics.Process" /> object.</span></span>  
  
<span data-ttu-id="7e18d-1533">- 或 -</span><span class="sxs-lookup"><span data-stu-id="7e18d-1533">-or-</span></span> 
<span data-ttu-id="7e18d-1534">你正尝试为远程计算机上运行的进程调用 <see cref="M:System.Diagnostics.Process.WaitForExit(System.Int32)" /> 。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1534">You are attempting to call <see cref="M:System.Diagnostics.Process.WaitForExit(System.Int32)" /> for a process that is running on a remote computer.</span></span> <span data-ttu-id="7e18d-1535">此方法仅对本地计算机上运行的进程可用。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1535">This method is available only for processes that are running on the local computer.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="7e18d-1536"><paramref name="milliseconds" /> 是一个非 -1 的负数，而 -1 表示无限期超时。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1536"><paramref name="milliseconds" /> is a negative number other than -1, which represents an infinite time-out.</span></span></exception>
        <altmember cref="M:System.Diagnostics.Process.CloseMainWindow" />
        <altmember cref="M:System.Diagnostics.Process.Kill" />
        <altmember cref="P:System.Diagnostics.Process.Handle" />
        <altmember cref="P:System.Diagnostics.Process.ExitTime" />
        <altmember cref="P:System.Diagnostics.Process.EnableRaisingEvents" />
        <altmember cref="P:System.Diagnostics.Process.HasExited" />
        <altmember cref="E:System.Diagnostics.Process.Exited" />
        <altmember cref="P:System.Diagnostics.Process.SynchronizingObject" />
      </Docs>
    </Member>
    <Member MemberName="WaitForExitAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WaitForExitAsync (System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WaitForExitAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Process.WaitForExitAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function WaitForExitAsync (Optional cancellationToken As CancellationToken = Nothing) As Task" />
      <MemberSignature Language="F#" Value="member this.WaitForExitAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="process.WaitForExitAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="0" FrameworkAlternate="net-5.0" />
      </Parameters>
      <Docs>
        <param name="cancellationToken"><span data-ttu-id="7e18d-1537">用于取消异步操作的可选令牌。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1537">An optional token to cancel the asynchronous operation.</span></span></param>
        <summary><span data-ttu-id="7e18d-1538">指示进程组件等待关联进程退出，或指示等待 <paramref name="cancellationToken" /> 被取消。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1538">Instructs the process component to wait for the associated process to exit, or for the <paramref name="cancellationToken" /> to be cancelled.</span></span></summary>
        <returns><span data-ttu-id="7e18d-1539">将在已退出进程、已请求取消或出现错误时完成的任务。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1539">A task that will complete when the process has exited, cancellation has been requested, or an error occurs.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

Calling this method will set <ph id="ph1">&lt;xref:System.Diagnostics.Process.EnableRaisingEvents&gt;</ph> to <ph id="ph2">`true`</ph>.

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="WaitForInputIdle">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="7e18d-1541">使 <see cref="T:System.Diagnostics.Process" /> 组件等待关联进程进入空闲状态。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1541">Causes the <see cref="T:System.Diagnostics.Process" /> component to wait for the associated process to enter an idle state.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WaitForInputIdle">
      <MemberSignature Language="C#" Value="public bool WaitForInputIdle ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool WaitForInputIdle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Process.WaitForInputIdle" />
      <MemberSignature Language="VB.NET" Value="Public Function WaitForInputIdle () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool WaitForInputIdle();" />
      <MemberSignature Language="F#" Value="member this.WaitForInputIdle : unit -&gt; bool" Usage="process.WaitForInputIdle " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7e18d-1542">使 <see cref="T:System.Diagnostics.Process" /> 组件无限期地等待关联进程进入空闲状态。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1542">Causes the <see cref="T:System.Diagnostics.Process" /> component to wait indefinitely for the associated process to enter an idle state.</span></span> <span data-ttu-id="7e18d-1543">此重载仅适用于具有用户界面并因此具有消息循环的进程。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1543">This overload applies only to processes with a user interface and, therefore, a message loop.</span></span></summary>
        <returns><span data-ttu-id="7e18d-1544">如果关联进程已经达到空闲状态，则为 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1544"><see langword="true" /> if the associated process has reached an idle state.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use <ph id="ph1">&lt;xref:System.Diagnostics.Process.WaitForInputIdle&gt;</ph> to force the processing of your application to wait until the message loop has returned to the idle state. When a process with a user interface is executing, its message loop executes every time a Windows message is sent to the process by the operating system. The process then returns to the message loop. <span data-ttu-id="7e18d-1548">如果进程正在等待消息循环内的消息，则称该进程处于空闲状态。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1548">A process is said to be in an idle state when it is waiting for messages inside of a message loop.</span></span> <span data-ttu-id="7e18d-1549">此状态非常有用，例如，当应用程序需要等待启动进程完成创建其主窗口之前，应用程序才能与该窗口通信。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1549">This state is useful, for example, when your application needs to wait for a starting process to finish creating its main window before the application communicates with that window.</span></span>  
  
 <span data-ttu-id="7e18d-1550">如果进程没有消息循环， <xref:System.Diagnostics.Process.WaitForInputIdle> 则会引发 <xref:System.InvalidOperationException> 。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1550">If a process does not have a message loop, <xref:System.Diagnostics.Process.WaitForInputIdle> throws an <xref:System.InvalidOperationException>.</span></span>  
  
 <span data-ttu-id="7e18d-1551"><xref:System.Diagnostics.Process.WaitForInputIdle>重载指示 <xref:System.Diagnostics.Process> 组件无限期地等待进程在消息循环中处于空闲状态。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1551">The <xref:System.Diagnostics.Process.WaitForInputIdle> overload instructs the <xref:System.Diagnostics.Process> component to wait indefinitely for the process to become idle in the message loop.</span></span> <span data-ttu-id="7e18d-1552">此指令可能导致应用程序停止响应。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1552">This instruction can cause an application to stop responding.</span></span> <span data-ttu-id="7e18d-1553">例如，如果将进程编写为始终立即退出其消息循环，如代码段中所示 `while(true)` 。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1553">For example, if the process is written to always exit its message loop immediately, as in the code fragment `while(true)`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="7e18d-1554">进程不具有图形界面。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1554">The process does not have a graphical interface.</span></span>  
  
<span data-ttu-id="7e18d-1555">- 或 -</span><span class="sxs-lookup"><span data-stu-id="7e18d-1555">-or-</span></span> 
<span data-ttu-id="7e18d-1556">发生未知错误。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1556">An unknown error occurred.</span></span> <span data-ttu-id="7e18d-1557">进程无法进入空闲状态。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1557">The process failed to enter an idle state.</span></span>  
  
<span data-ttu-id="7e18d-1558">- 或 -</span><span class="sxs-lookup"><span data-stu-id="7e18d-1558">-or-</span></span> 
<span data-ttu-id="7e18d-1559">已经退出该进程。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1559">The process has already exited.</span></span>  
  
<span data-ttu-id="7e18d-1560">- 或 -</span><span class="sxs-lookup"><span data-stu-id="7e18d-1560">-or-</span></span> 
<span data-ttu-id="7e18d-1561">没有与此 <see cref="T:System.Diagnostics.Process" /> 对象关联的进程。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1561">No process is associated with this <see cref="T:System.Diagnostics.Process" /> object.</span></span></exception>
        <altmember cref="M:System.Diagnostics.Process.Start" />
        <altmember cref="M:System.Diagnostics.Process.CloseMainWindow" />
      </Docs>
    </Member>
    <Member MemberName="WaitForInputIdle">
      <MemberSignature Language="C#" Value="public bool WaitForInputIdle (int milliseconds);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool WaitForInputIdle(int32 milliseconds) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Process.WaitForInputIdle(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function WaitForInputIdle (milliseconds As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool WaitForInputIdle(int milliseconds);" />
      <MemberSignature Language="F#" Value="member this.WaitForInputIdle : int -&gt; bool" Usage="process.WaitForInputIdle milliseconds" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="milliseconds" Type="System.Int32" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="milliseconds"><span data-ttu-id="7e18d-1562">1 到 <see cref="F:System.Int32.MaxValue" /> 的值以毫秒为单位指定了等待关联进程变为空闲状态的时间量。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1562">A value of 1 to <see cref="F:System.Int32.MaxValue" /> that specifies the amount of time, in milliseconds, to wait for the associated process to become idle.</span></span> <span data-ttu-id="7e18d-1563">0 值指定立即返回，而 -1 值则指定无限期等待。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1563">A value of 0 specifies an immediate return, and a value of -1 specifies an infinite wait.</span></span></param>
        <summary><span data-ttu-id="7e18d-1564">使 <see cref="T:System.Diagnostics.Process" /> 组件在指定的毫秒数内等待关联进程进入空闲状态。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1564">Causes the <see cref="T:System.Diagnostics.Process" /> component to wait the specified number of milliseconds for the associated process to enter an idle state.</span></span> <span data-ttu-id="7e18d-1565">此重载仅适用于具有用户界面并因此具有消息循环的进程。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1565">This overload applies only to processes with a user interface and, therefore, a message loop.</span></span></summary>
        <returns><span data-ttu-id="7e18d-1566">如果关联进程已经达到空闲状态，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1566"><see langword="true" /> if the associated process has reached an idle state; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use <ph id="ph1">&lt;xref:System.Diagnostics.Process.WaitForInputIdle%28System.Int32%29&gt;</ph> to force the processing of your application to wait until the message loop has returned to the idle state. When a process with a user interface is executing, its message loop executes every time a Windows message is sent to the process by the operating system. The process then returns to the message loop. <span data-ttu-id="7e18d-1570">如果进程正在等待消息循环内的消息，则称该进程处于空闲状态。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1570">A process is said to be in an idle state when it is waiting for messages inside of a message loop.</span></span> <span data-ttu-id="7e18d-1571">此状态非常有用，例如，当应用程序需要等待启动进程完成创建其主窗口之前，应用程序才能与该窗口通信。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1571">This state is useful, for example, when your application needs to wait for a starting process to finish creating its main window before the application communicates with that window.</span></span>  
  
 <span data-ttu-id="7e18d-1572">如果进程没有消息循环， <xref:System.Diagnostics.Process.WaitForInputIdle%28System.Int32%29> 则会引发 <xref:System.InvalidOperationException> 。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1572">If a process does not have a message loop, <xref:System.Diagnostics.Process.WaitForInputIdle%28System.Int32%29> throws an <xref:System.InvalidOperationException>.</span></span>  
  
 <span data-ttu-id="7e18d-1573"><xref:System.Diagnostics.Process.WaitForInputIdle%28System.Int32%29>重载指示 <xref:System.Diagnostics.Process> 组件等待一定的时间，以便进程在消息循环中处于空闲状态。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1573">The <xref:System.Diagnostics.Process.WaitForInputIdle%28System.Int32%29> overload instructs the <xref:System.Diagnostics.Process> component to wait a finite amount of time for the process to become idle in the message loop.</span></span> <span data-ttu-id="7e18d-1574">如果在间隔结束时关联的进程未处于空闲状态，因为循环仍在处理消息， `false` 则将返回到调用过程。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1574">If the associated process has not become idle by the end of the interval because the loop is still processing messages, `false` is returned to the calling procedure.</span></span>  
  
 <span data-ttu-id="7e18d-1575">有关处理事件的详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1575">For more information about handling events, see [Handling and Raising Events](/dotnet/standard/events/).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="7e18d-1576">进程不具有图形界面。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1576">The process does not have a graphical interface.</span></span>  
  
<span data-ttu-id="7e18d-1577">- 或 -</span><span class="sxs-lookup"><span data-stu-id="7e18d-1577">-or-</span></span> 
<span data-ttu-id="7e18d-1578">发生未知错误。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1578">An unknown error occurred.</span></span> <span data-ttu-id="7e18d-1579">进程无法进入空闲状态。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1579">The process failed to enter an idle state.</span></span>  
  
<span data-ttu-id="7e18d-1580">- 或 -</span><span class="sxs-lookup"><span data-stu-id="7e18d-1580">-or-</span></span> 
<span data-ttu-id="7e18d-1581">已经退出该进程。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1581">The process has already exited.</span></span>  
  
<span data-ttu-id="7e18d-1582">- 或 -</span><span class="sxs-lookup"><span data-stu-id="7e18d-1582">-or-</span></span> 
<span data-ttu-id="7e18d-1583">没有与此 <see cref="T:System.Diagnostics.Process" /> 对象关联的进程。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1583">No process is associated with this <see cref="T:System.Diagnostics.Process" /> object.</span></span></exception>
        <altmember cref="M:System.Diagnostics.Process.Start" />
        <altmember cref="M:System.Diagnostics.Process.CloseMainWindow" />
      </Docs>
    </Member>
    <Member MemberName="WorkingSet">
      <MemberSignature Language="C#" Value="public int WorkingSet { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 WorkingSet" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.WorkingSet" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property WorkingSet As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int WorkingSet { int get(); };" />
      <MemberSignature Language="F#" Value="member this.WorkingSet : int" Usage="System.Diagnostics.Process.WorkingSet" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0">
          <AttributeName Language="C#">[System.Obsolete("This property has been deprecated.  Please use System.Diagnostics.Process.WorkingSet64 instead.  http://go.microsoft.com/fwlink/?linkid=14202")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("This property has been deprecated.  Please use System.Diagnostics.Process.WorkingSet64 instead.  http://go.microsoft.com/fwlink/?linkid=14202")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-3.0;netcore-3.1;netstandard-2.1">
          <AttributeName Language="C#">[System.Obsolete("This property has been deprecated.  Please use System.Diagnostics.Process.WorkingSet64 instead.  https://go.microsoft.com/fwlink/?linkid=14202")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("This property has been deprecated.  Please use System.Diagnostics.Process.WorkingSet64 instead.  https://go.microsoft.com/fwlink/?linkid=14202")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.Diagnostics.MonitoringDescription("ProcessWorkingSet")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.MonitoringDescription("ProcessWorkingSet")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Diagnostics.MonitoringDescription("The amount of physical memory currently used for this process.")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.MonitoringDescription("The amount of physical memory currently used for this process.")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Obsolete("Use WorkingSet64")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("Use WorkingSet64")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7e18d-1584">获取关联进程的物理内存使用量（以字节为单位）。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1584">Gets the associated process's physical memory usage, in bytes.</span></span></summary>
        <value><span data-ttu-id="7e18d-1585">关联进程当前使用的物理内存总量（以字节为单位）。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1585">The total amount of physical memory the associated process is using, in bytes.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The value returned by this property represents the current size of working set memory used by the process, in bytes. The working set of a process is the set of memory pages currently visible to the process in physical RAM memory. These pages are resident and available for an application to use without triggering a page fault.  
  
 <span data-ttu-id="7e18d-1589">工作集包括共享数据和私人数据。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1589">The working set includes both shared and private data.</span></span> <span data-ttu-id="7e18d-1590">共享数据包括包含进程执行的所有说明的页面，包括进程模块和系统库。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1590">The shared data includes the pages that contain all the instructions that the process executes, including the process modules and the system libraries.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7e18d-1591">下面的示例启动记事本的实例。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1591">The following example starts an instance of Notepad.</span></span> <span data-ttu-id="7e18d-1592">然后，该示例检索并显示关联进程的各种属性。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1592">The example then retrieves and displays various properties of the associated process.</span></span> <span data-ttu-id="7e18d-1593">该示例在进程退出时进行检测，并显示进程的退出代码。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1593">The example detects when the process exits, and displays the process' exit code.</span></span>  
  
 [!code-cpp[process_sample#1](~/samples/snippets/cpp/VS_Snippets_CLR/process_sample/CPP/process_sample.cpp#1)]
 [!code-csharp[process_sample#1](~/samples/snippets/csharp/VS_Snippets_CLR/process_sample/CS/process_sample.cs#1)]
 [!code-vb[process_sample#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/process_sample/VB/process_sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.Process.MinWorkingSet" />
        <altmember cref="P:System.Diagnostics.Process.MaxWorkingSet" />
        <altmember cref="P:System.Diagnostics.Process.PeakWorkingSet" />
        <altmember cref="P:System.Diagnostics.Process.PeakWorkingSet64" />
        <altmember cref="P:System.Diagnostics.Process.WorkingSet64" />
      </Docs>
    </Member>
    <Member MemberName="WorkingSet64">
      <MemberSignature Language="C#" Value="public long WorkingSet64 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 WorkingSet64" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.WorkingSet64" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property WorkingSet64 As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long WorkingSet64 { long get(); };" />
      <MemberSignature Language="F#" Value="member this.WorkingSet64 : int64" Usage="System.Diagnostics.Process.WorkingSet64" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.Diagnostics.MonitoringDescription("ProcessWorkingSet")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.MonitoringDescription("ProcessWorkingSet")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Runtime.InteropServices.ComVisible(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.ComVisible(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Diagnostics.MonitoringDescription("The amount of physical memory currently used for this process.")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.MonitoringDescription("The amount of physical memory currently used for this process.")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7e18d-1594">获取为关联的进程分配的物理内存量（以字节为单位）。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1594">Gets the amount of physical memory, in bytes, allocated for the associated process.</span></span></summary>
        <value><span data-ttu-id="7e18d-1595">为关的进程分配的物理内存量(以字节为单位)。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1595">The amount of physical memory, in bytes, allocated for the associated process.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The value returned by this property represents the current size of working set memory used by the process, in bytes. The working set of a process is the set of memory pages currently visible to the process in physical RAM memory. These pages are resident and available for an application to use without triggering a page fault.  
  
 <span data-ttu-id="7e18d-1599">工作集包括共享数据和私人数据。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1599">The working set includes both shared and private data.</span></span> <span data-ttu-id="7e18d-1600">共享数据包括包含进程执行的所有说明的页面，包括进程模块和系统库中的说明。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1600">The shared data includes the pages that contain all the instructions that the process executes, including instructions in the process modules and the system libraries.</span></span>  
  
 <span data-ttu-id="7e18d-1601">此属性可用于监视包含32位处理器或64位处理器的计算机上的内存使用情况。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1601">This property can be used to monitor memory usage on computers with 32-bit processors or 64-bit processors.</span></span> <span data-ttu-id="7e18d-1602">属性值等效于进程的 **工作集** 性能计数器。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1602">The property value is equivalent to the **Working Set** performance counter for the process.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7e18d-1603">下面的代码示例启动记事本应用程序的实例。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1603">The following code example starts an instance of the Notepad application.</span></span> <span data-ttu-id="7e18d-1604">然后，该示例检索并显示关联进程的各种属性。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1604">The example then retrieves and displays various properties of the associated process.</span></span> <span data-ttu-id="7e18d-1605">该示例在进程退出时进行检测，并显示其退出代码和高峰内存统计信息。</span><span class="sxs-lookup"><span data-stu-id="7e18d-1605">The example detects when the process exits, and displays its exit code and peak memory statistics.</span></span>  
  
 [!code-cpp[Diag_Process_MemoryProperties64#1](~/samples/snippets/cpp/VS_Snippets_CLR/Diag_Process_MemoryProperties64/CPP/source.cpp#1)]
 [!code-csharp[Diag_Process_MemoryProperties64#1](~/samples/snippets/csharp/VS_Snippets_CLR/Diag_Process_MemoryProperties64/CS/source.cs#1)]
 [!code-vb[Diag_Process_MemoryProperties64#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Diag_Process_MemoryProperties64/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.Process.MinWorkingSet" />
        <altmember cref="P:System.Diagnostics.Process.MaxWorkingSet" />
        <altmember cref="P:System.Diagnostics.Process.PeakWorkingSet64" />
      </Docs>
    </Member>
  </Members>
</Type>
