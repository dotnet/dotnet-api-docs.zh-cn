<Type Name="PerformanceCounterCategory" FullName="System.Diagnostics.PerformanceCounterCategory">
  <Metadata><Meta Name="ms.openlocfilehash" Value="844cde0836e2e0e108faff34ddcf4c2101198959" /><Meta Name="ms.sourcegitcommit" Value="9506e50ec7beb4fa30206b9840dc546b035a6600" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/23/2020" /><Meta Name="ms.locfileid" Value="86986188" /></Metadata><TypeSignature Language="C#" Value="public sealed class PerformanceCounterCategory" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit PerformanceCounterCategory extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.PerformanceCounterCategory" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class PerformanceCounterCategory" />
  <TypeSignature Language="C++ CLI" Value="public ref class PerformanceCounterCategory sealed" />
  <TypeSignature Language="F#" Value="type PerformanceCounterCategory = class" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Diagnostics.PerformanceCounter</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
    <AssemblyVersion>4.0.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>表示性能对象，它定义性能计数器的类别。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  创建或删除性能计数器需要使用已命名的 mutex 同步基础代码。 如果高度特权的应用程序锁定了已命名的互斥体，则尝试创建或删除性能计数器将导致应用程序停止响应，直到锁被释放。 若要避免此问题，请不要向 <xref:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode> 不受信任的代码授予权限。 此外， <xref:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode> 权限可能会允许绕过其他权限，只应授予高度受信任的代码。  
  
 <xref:System.Diagnostics.PerformanceCounterCategory>实例的 <xref:System.Diagnostics.PerformanceCounterCategory.CategoryName%2A> 属性将显示在 "性能查看器" 应用程序的 "添加计数器" 对话框的 "性能对象" 字段中。  
  
 <xref:System.Diagnostics.PerformanceCounterCategory>类提供若干方法，用于与计算机上的计数器和类别交互。 使用 <xref:System.Diagnostics.PerformanceCounterCategory.Create%2A> 方法可以定义自定义类别。 <xref:System.Diagnostics.PerformanceCounterCategory.Delete%2A>方法提供了一种从计算机中删除类别的方法。 <xref:System.Diagnostics.PerformanceCounterCategory.GetCategories%2A>使用方法可以查看类别列表，同时 <xref:System.Diagnostics.PerformanceCounterCategory.ReadCategory%2A> 检索与单个类别关联的所有计数器和实例数据。  
  
 性能计数器发布有关应用程序的性能数据。 类别包括物理组件 (如处理器、磁盘和内存) 和系统对象 (如进程和线程) 。 与相同性能对象相关的系统计数器将分组到一个指示它们常见焦点的类别。 当您创建类的实例时 <xref:System.Diagnostics.PerformanceCounter> ，您首先指示组件将与之交互的类别，然后从该类别中选择一个计数器。  
  
 例如，一个 Windows 计数器类别为内存类别。 此类别中的系统计数器跟踪内存数据，如可用字节数和缓存的字节数。 如果要处理缓存在应用程序中的字节，则需创建组件的实例 <xref:System.Diagnostics.PerformanceCounter> ，将其连接到内存类别，然后选择相应的计数器 (在本例中，从该类别缓存的字节) 。  
  
 尽管你的系统提供了更多的计数器类别，但你可能会经常与之交互的类别包括缓存、内存、对象、PhysicalDisk、进程、处理器、服务器、系统和线程类别。  
  
> [!IMPORTANT]
>  <xref:System.Diagnostics.PerformanceCounter.RemoveInstance%2A>类中的方法 <xref:System.Diagnostics.PerformanceCounter> 将释放计数器，并且如果为该类别选择了 "重复使用" 选项，则会重复使用计数器的实例。 如果其他进程或代码的其他部分正在尝试写入计数器实例，这可能会导致争用情况。  
  
> [!NOTE]
>  强烈建议在安装应用程序期间（而不是在应用程序执行期间）创建新的性能计数器类别。 这样，操作系统就可以刷新其已注册性能计数器类别的列表。 如果尚未刷新列表，尝试使用类别将失败。  
  
> [!NOTE]
>  随一起安装的性能计数器类别 [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)] 使用单独的共享内存，每个性能计数器类别都有自己的内存。 可以通过在注册表项 HKEY_LOCAL_MACHINE \SYSTEM\CurrentControlSet\Services \Performance. 中创建一个名为 FileMappingSize 的 DWORD 来指定单独共享内存的大小。 \\ *\<category name>* FileMappingSize 值设置为类别的共享内存大小。 默认大小为131072。 如果 FileMappingSize 值不存在，则 `fileMappingSize` `performanceCounters` 使用 Machine.config 文件中指定的元素的属性值，从而导致配置文件处理出现额外的开销。 可以通过在注册表中设置文件映射大小来实现对应用程序启动的性能改进。 有关文件映射大小的详细信息，请参阅[ &lt; performanceCounters &gt; ](/dotnet/framework/configure-apps/file-schema/trace-debug/performancecounters-element)。  
  
   
  
## Examples  
 下面的代码示例将确定是否 <xref:System.Diagnostics.PerformanceCounter> <xref:System.Diagnostics.PerformanceCounterCategory> 存在于本地计算机上或另一台计算机上。 如果这些对象不存在于本地计算机上，则该示例可选择创建这些对象。 它使用 <xref:System.Diagnostics.PerformanceCounterCategory.Exists%2A> 方法来确定是否 <xref:System.Diagnostics.PerformanceCounterCategory> 存在。  如果不 <xref:System.Diagnostics.PerformanceCounterCategory> 存在并且未指定计数器名称，或者计算机是远程计算机，则此示例将退出。  
  
 如果 <xref:System.Diagnostics.PerformanceCounter> 提供了名称，该示例将使用 <xref:System.Diagnostics.PerformanceCounterCategory.CounterExists%2A> 方法并向用户显示结果。 如果不 <xref:System.Diagnostics.PerformanceCounter> 存在，则用户可以删除并重新创建 <xref:System.Diagnostics.PerformanceCounterCategory> 新的 <xref:System.Diagnostics.PerformanceCounter> 。 如果用户这样做，则使用方法删除类别 <xref:System.Diagnostics.PerformanceCounterCategory.Delete%2A> 。  
  
 如果请求，则该示例现在使用方法创建新的 <xref:System.Diagnostics.PerformanceCounterCategory> 并 <xref:System.Diagnostics.PerformanceCounter> 使用 <xref:System.Diagnostics.PerformanceCounterCategory.Create%2A> 方法。 如果指定了实例名称，则此示例将使用 <xref:System.Diagnostics.PerformanceCounterCategory.InstanceExists%2A> 方法并显示结果。  
  
 [!code-csharp[System.Diagnostics.PerformanceCounterCategory.Class#27](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.PerformanceCounterCategory.Class/CS/perfcountercatcreateexist.cs#27)]
 [!code-vb[System.Diagnostics.PerformanceCounterCategory.Class#27](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.PerformanceCounterCategory.Class/VB/perfcountercatcreateexist.vb#27)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Diagnostics.PerformanceCounter" />
    <altmember cref="T:System.Diagnostics.CounterCreationDataCollection" />
    <altmember cref="T:System.Diagnostics.CounterSample" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Diagnostics.PerformanceCounterCategory" /> 类的新实例。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PerformanceCounterCategory ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.PerformanceCounterCategory.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PerformanceCounterCategory();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.PerformanceCounter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Diagnostics.PerformanceCounterCategory" /> 类的新实例，让 <see cref="P:System.Diagnostics.PerformanceCounterCategory.CategoryName" /> 属性保持为空，并将 <see cref="P:System.Diagnostics.PerformanceCounterCategory.MachineName" /> 属性设置为本地计算机。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在将 <xref:System.Diagnostics.PerformanceCounterCategory.CategoryName%2A> 此 <xref:System.Diagnostics.PerformanceCounterCategory> 实例与服务器上的性能对象关联之前，必须先设置属性。 否则会引发异常。  
  
   
  
## Examples  
 下面的代码示例 <xref:System.Diagnostics.PerformanceCounterCategory> 从命令行接受名称和计算机名称。  它 <xref:System.Diagnostics.PerformanceCounterCategory> 使用适用于所提供的参数数目的构造函数重载来创建，然后显示其属性。  
  
 [!code-csharp[System.Diagnostics.PerformanceCounterCategory.OtherMembers#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.PerformanceCounterCategory.OtherMembers/CS/perfcountercatctor.cs#4)]
 [!code-vb[System.Diagnostics.PerformanceCounterCategory.OtherMembers#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.PerformanceCounterCategory.OtherMembers/VB/perfcountercatctor.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.PerformanceCounterCategory.CategoryName" />
        <altmember cref="P:System.Diagnostics.PerformanceCounterCategory.MachineName" />
        <altmember cref="T:System.Diagnostics.PerformanceCounter" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PerformanceCounterCategory (string categoryName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string categoryName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.PerformanceCounterCategory.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (categoryName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PerformanceCounterCategory(System::String ^ categoryName);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.PerformanceCounterCategory : string -&gt; System.Diagnostics.PerformanceCounterCategory" Usage="new System.Diagnostics.PerformanceCounterCategory categoryName" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.PerformanceCounter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="categoryName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="categoryName">性能计数器类别的名称或性能对象，此 <see cref="T:System.Diagnostics.PerformanceCounterCategory" /> 实例将与之关联。</param>
        <summary>初始化 <see cref="T:System.Diagnostics.PerformanceCounterCategory" /> 类的新实例，将 <see cref="P:System.Diagnostics.PerformanceCounterCategory.CategoryName" /> 属性设置为指定的值，并将 <see cref="P:System.Diagnostics.PerformanceCounterCategory.MachineName" /> 属性设置为本地计算机。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例 <xref:System.Diagnostics.PerformanceCounterCategory> 从命令行接受名称和计算机名称。 它 <xref:System.Diagnostics.PerformanceCounterCategory> 使用适用于所提供的参数数目的构造函数重载来创建，然后显示其属性。  
  
 [!code-csharp[System.Diagnostics.PerformanceCounterCategory.OtherMembers#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.PerformanceCounterCategory.OtherMembers/CS/perfcountercatctor.cs#4)]
 [!code-vb[System.Diagnostics.PerformanceCounterCategory.OtherMembers#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.PerformanceCounterCategory.OtherMembers/VB/perfcountercatctor.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="categoryName" /> 是空字符串 ("")。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="categoryName" /> 为 <see langword="null" />。</exception>
        <altmember cref="P:System.Diagnostics.PerformanceCounterCategory.CategoryName" />
        <altmember cref="P:System.Diagnostics.PerformanceCounterCategory.MachineName" />
        <altmember cref="T:System.Diagnostics.PerformanceCounter" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PerformanceCounterCategory (string categoryName, string machineName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string categoryName, string machineName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.PerformanceCounterCategory.#ctor(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (categoryName As String, machineName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PerformanceCounterCategory(System::String ^ categoryName, System::String ^ machineName);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.PerformanceCounterCategory : string * string -&gt; System.Diagnostics.PerformanceCounterCategory" Usage="new System.Diagnostics.PerformanceCounterCategory (categoryName, machineName)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.PerformanceCounter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="categoryName" Type="System.String" />
        <Parameter Name="machineName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="categoryName">性能计数器类别的名称或性能对象，此 <see cref="T:System.Diagnostics.PerformanceCounterCategory" /> 实例将与之关联。</param>
        <param name="machineName">性能计数器类别及其关联的计数器所在的计算机。</param>
        <summary>初始化 <see cref="T:System.Diagnostics.PerformanceCounterCategory" /> 类的新实例，并将 <see cref="P:System.Diagnostics.PerformanceCounterCategory.CategoryName" /> 和 <see cref="P:System.Diagnostics.PerformanceCounterCategory.MachineName" /> 属性设置为指定的值。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例 <xref:System.Diagnostics.PerformanceCounterCategory> 从命令行接受名称和计算机名称。 它 <xref:System.Diagnostics.PerformanceCounterCategory> 使用适用于所提供的参数数目的构造函数重载来创建，然后显示其属性。  
  
 [!code-csharp[System.Diagnostics.PerformanceCounterCategory.OtherMembers#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.PerformanceCounterCategory.OtherMembers/CS/perfcountercatctor.cs#4)]
 [!code-vb[System.Diagnostics.PerformanceCounterCategory.OtherMembers#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.PerformanceCounterCategory.OtherMembers/VB/perfcountercatctor.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="categoryName" /> 是空字符串 ("")。  
  
- 或 - 
<paramref name="machineName" /> 语法无效。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="categoryName" /> 为 <see langword="null" />。</exception>
        <altmember cref="P:System.Diagnostics.PerformanceCounterCategory.CategoryName" />
        <altmember cref="P:System.Diagnostics.PerformanceCounterCategory.MachineName" />
        <altmember cref="T:System.Diagnostics.PerformanceCounter" />
      </Docs>
    </Member>
    <Member MemberName="CategoryHelp">
      <MemberSignature Language="C#" Value="public string CategoryHelp { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CategoryHelp" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.PerformanceCounterCategory.CategoryHelp" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CategoryHelp As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ CategoryHelp { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CategoryHelp : string" Usage="System.Diagnostics.PerformanceCounterCategory.CategoryHelp" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.PerformanceCounter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取类别的帮助文字。</summary>
        <value>对此类别测量的性能对象所作的说明。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例使用创建一个 <xref:System.Diagnostics.PerformanceCounterCategory> <xref:System.Diagnostics.PerformanceCounterCategory.%23ctor> 。 它将提示用户输入 <xref:System.Diagnostics.PerformanceCounterCategory> 和计算机名称，然后 <xref:System.Diagnostics.PerformanceCounterCategory.CategoryName%2A> <xref:System.Diagnostics.PerformanceCounterCategory.MachineName%2A> 从输入的值中设置和属性。 然后，它显示 <xref:System.Diagnostics.PerformanceCounterCategory.CategoryName%2A> 、 <xref:System.Diagnostics.PerformanceCounterCategory.MachineName%2A> 和属性的值 <xref:System.Diagnostics.PerformanceCounterCategory.CategoryHelp%2A> ，如果无法访问，则显示一条错误消息 <xref:System.Diagnostics.PerformanceCounterCategory> 。  
  
 [!code-csharp[System.Diagnostics.PerformanceCounterCategory.OtherMembers#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.PerformanceCounterCategory.OtherMembers/CS/perfCounterCatProps.cs#8)]
 [!code-vb[System.Diagnostics.PerformanceCounterCategory.OtherMembers#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.PerformanceCounterCategory.OtherMembers/VB/perfcountercatprops.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="P:System.Diagnostics.PerformanceCounterCategory.CategoryName" /> 属性为 <see langword="null" />。 必须在获取类别帮助前设置类别名称。</exception>
        <exception cref="T:System.ComponentModel.Win32Exception">对基础系统 API 的调用失败。</exception>
        <altmember cref="P:System.Diagnostics.PerformanceCounterCategory.CategoryName" />
        <altmember cref="P:System.Diagnostics.PerformanceCounterCategory.MachineName" />
        <altmember cref="T:System.Diagnostics.PerformanceCounter" />
        <altmember cref="P:System.Diagnostics.PerformanceCounter.CounterHelp" />
      </Docs>
    </Member>
    <Member MemberName="CategoryName">
      <MemberSignature Language="C#" Value="public string CategoryName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CategoryName" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.PerformanceCounterCategory.CategoryName" />
      <MemberSignature Language="VB.NET" Value="Public Property CategoryName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ CategoryName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CategoryName : string with get, set" Usage="System.Diagnostics.PerformanceCounterCategory.CategoryName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.PerformanceCounter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置定义此类别的性能对象的名称。</summary>
        <value>性能计数器类别的名称或性能对象，此 <see cref="T:System.Diagnostics.PerformanceCounterCategory" /> 实例将与之关联。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例使用创建一个 <xref:System.Diagnostics.PerformanceCounterCategory> <xref:System.Diagnostics.PerformanceCounterCategory.%23ctor> 。 它将提示用户输入 <xref:System.Diagnostics.PerformanceCounterCategory> 和计算机名称，然后 <xref:System.Diagnostics.PerformanceCounterCategory.CategoryName%2A> <xref:System.Diagnostics.PerformanceCounterCategory.MachineName%2A> 从输入的值中设置和属性。 然后，它显示 <xref:System.Diagnostics.PerformanceCounterCategory.CategoryName%2A> 、 <xref:System.Diagnostics.PerformanceCounterCategory.MachineName%2A> 和属性的值 <xref:System.Diagnostics.PerformanceCounterCategory.CategoryHelp%2A> ，如果无法访问，则显示一条错误消息 <xref:System.Diagnostics.PerformanceCounterCategory> 。  
  
 [!code-csharp[System.Diagnostics.PerformanceCounterCategory.OtherMembers#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.PerformanceCounterCategory.OtherMembers/CS/perfCounterCatProps.cs#8)]
 [!code-vb[System.Diagnostics.PerformanceCounterCategory.OtherMembers#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.PerformanceCounterCategory.OtherMembers/VB/perfcountercatprops.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><see cref="P:System.Diagnostics.PerformanceCounterCategory.CategoryName" /> 是空字符串 ("")。</exception>
        <exception cref="T:System.ArgumentNullException"><see cref="P:System.Diagnostics.PerformanceCounterCategory.CategoryName" /> 为 <see langword="null" />。</exception>
        <altmember cref="P:System.Diagnostics.PerformanceCounterCategory.MachineName" />
        <altmember cref="T:System.Diagnostics.PerformanceCounter" />
      </Docs>
    </Member>
    <Member MemberName="CategoryType">
      <MemberSignature Language="C#" Value="public System.Diagnostics.PerformanceCounterCategoryType CategoryType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Diagnostics.PerformanceCounterCategoryType CategoryType" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.PerformanceCounterCategory.CategoryType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CategoryType As PerformanceCounterCategoryType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Diagnostics::PerformanceCounterCategoryType CategoryType { System::Diagnostics::PerformanceCounterCategoryType get(); };" />
      <MemberSignature Language="F#" Value="member this.CategoryType : System.Diagnostics.PerformanceCounterCategoryType" Usage="System.Diagnostics.PerformanceCounterCategory.CategoryType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.PerformanceCounter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.PerformanceCounterCategoryType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取性能计数器类别类型。</summary>
        <value><see cref="T:System.Diagnostics.PerformanceCounterCategoryType" /> 值之一。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Diagnostics.PerformanceCounterCategory.CategoryType%2A>属性指示 <xref:System.Diagnostics.PerformanceCounterCategory> 对象是否可以有多个实例。 可能的值为 <xref:System.Diagnostics.PerformanceCounterCategoryType.MultiInstance> 、 <xref:System.Diagnostics.PerformanceCounterCategoryType.SingleInstance> 或 <xref:System.Diagnostics.PerformanceCounterCategoryType.Unknown> 。  
  
 有两种类型的性能计数器类别：单实例和多实例。 默认情况下，在创建一个类别时，类别为单实例，并在添加另一个实例时变为多实例。 类别是在设置应用程序时创建的，实例是在运行时添加的。 在 .NET Framework 版本1.0 和1.1 中，无需了解性能计数器类别为多实例或单实例。 在中 [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)] ， <xref:System.Diagnostics.PerformanceCounterCategoryType> 枚举用于指示性能计数器是否可以有多个实例。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="CounterExists">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>确定是否向特定的类别注册了指定的计数器。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CounterExists">
      <MemberSignature Language="C#" Value="public bool CounterExists (string counterName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CounterExists(string counterName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.PerformanceCounterCategory.CounterExists(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function CounterExists (counterName As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CounterExists(System::String ^ counterName);" />
      <MemberSignature Language="F#" Value="member this.CounterExists : string -&gt; bool" Usage="performanceCounterCategory.CounterExists counterName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.PerformanceCounter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="counterName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="counterName">要查找的性能计数器的名称。</param>
        <summary>确定是否向此类别注册了指定的计数器，这由 <see cref="P:System.Diagnostics.PerformanceCounterCategory.CategoryName" /> 和 <see cref="P:System.Diagnostics.PerformanceCounterCategory.MachineName" /> 属性指示。</summary>
        <returns>如果向 <see cref="P:System.Diagnostics.PerformanceCounterCategory.CategoryName" /> 和 <see cref="P:System.Diagnostics.PerformanceCounterCategory.MachineName" /> 属性指定的类别注册了该计数器，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 必须 <xref:System.Diagnostics.PerformanceCounterCategory.CategoryName%2A> 先设置属性，然后才能调用此方法。 否则会引发异常。  
  
 如果尚未设置 <xref:System.Diagnostics.PerformanceCounterCategory.MachineName%2A> 属性，则此方法使用本地计算机 ( "。) 。  
  
> [!NOTE]
>  若要从 Windows Vista 和更高版本、Windows XP Professional x64 Edition 或 Windows Server 2003 中的非交互式登录会话读取性能计数器，你必须是 "性能监视器用户" 组的成员或具有管理权限。  
>   
>  若要避免在 Windows Vista 和更高版本中提升权限来访问性能计数器，请将自己添加到性能监视器用户组。  
>   
>  在 Windows Vista 或更高版本中，用户帐户控制 (UAC) 决定用户的特权。 如果您是内置的 Administrators 组的成员，将为您分配两个运行时访问令牌：一个标准用户访问令牌和一个管理员访问令牌。 默认情况下，您拥有标准用户角色。 若要执行访问性能计数器的代码，必须首先将你的特权从标准用户提升到管理员。 你可以通过以下方式执行此操作：右键单击应用程序图标并指示需以管理员身份运行。  
  
   
  
## Examples  
 下面的代码示例确定是否 <xref:System.Diagnostics.PerformanceCounter> 存在。 它从命令行获取类别名称、计数器名称和计算机名称（如果已提供）。 它 <xref:System.Diagnostics.PerformanceCounterCategory> 使用适当的创建对象 <xref:System.Diagnostics.PerformanceCounterCategory.%23ctor%2A> 。 然后，它使用 <xref:System.Diagnostics.PerformanceCounterCategory.CounterExists%28System.String%29> 方法来确定指定的是否 <xref:System.Diagnostics.PerformanceCounter> 存在，并通知用户。  
  
 [!code-csharp[System.Diagnostics.PerformanceCounterCategory.ExistMembers#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.PerformanceCounterCategory.ExistMembers/CS/perfcountercatobjexists.cs#4)]
 [!code-vb[System.Diagnostics.PerformanceCounterCategory.ExistMembers#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.PerformanceCounterCategory.ExistMembers/VB/perfcountercatobjcountexists.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="counterName" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.InvalidOperationException">尚未设置 <see cref="P:System.Diagnostics.PerformanceCounterCategory.CategoryName" /> 属性。</exception>
        <exception cref="T:System.ComponentModel.Win32Exception">对基础系统 API 的调用失败。</exception>
        <exception cref="T:System.UnauthorizedAccessException">以不具有管理特权的用户身份正在执行的代码尝试读取性能计数器。</exception>
        <altmember cref="P:System.Diagnostics.PerformanceCounterCategory.CategoryName" />
        <altmember cref="M:System.Diagnostics.PerformanceCounterCategory.Exists(System.String)" />
        <altmember cref="M:System.Diagnostics.PerformanceCounterCategory.InstanceExists(System.String)" />
        <altmember cref="T:System.Diagnostics.PerformanceCounter" />
      </Docs>
    </Member>
    <Member MemberName="CounterExists">
      <MemberSignature Language="C#" Value="public static bool CounterExists (string counterName, string categoryName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool CounterExists(string counterName, string categoryName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.PerformanceCounterCategory.CounterExists(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CounterExists (counterName As String, categoryName As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool CounterExists(System::String ^ counterName, System::String ^ categoryName);" />
      <MemberSignature Language="F#" Value="static member CounterExists : string * string -&gt; bool" Usage="System.Diagnostics.PerformanceCounterCategory.CounterExists (counterName, categoryName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.PerformanceCounter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="counterName" Type="System.String" />
        <Parameter Name="categoryName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="counterName">要查找的性能计数器的名称。</param>
        <param name="categoryName">性能计数器类别的名称或性能对象，指定的性能计数器与之关联。</param>
        <summary>确定是否向本地计算机上的指定类别注册了指定的计数器。</summary>
        <returns>如果向本地计算机上的指定类别注册了该计数器，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  若要从 Windows Vista 和更高版本、Windows XP Professional x64 Edition 或 Windows Server 2003 中的非交互式登录会话读取性能计数器，你必须是 "性能监视器用户" 组的成员或具有管理权限。  
>   
>  若要避免在 Windows Vista 和更高版本中提升权限来访问性能计数器，请将自己添加到性能监视器用户组。  
>   
>  在 Windows Vista 或更高版本中，用户帐户控制 (UAC) 决定用户的特权。 如果您是内置的 Administrators 组的成员，将为您分配两个运行时访问令牌：一个标准用户访问令牌和一个管理员访问令牌。 默认情况下，您拥有标准用户角色。 若要执行访问性能计数器的代码，必须首先将你的特权从标准用户提升到管理员。 你可以通过以下方式执行此操作：右键单击应用程序图标并指示需以管理员身份运行。  
  
   
  
## Examples  
 下面的代码示例确定是否 <xref:System.Diagnostics.PerformanceCounter> 存在。 它从命令行获取类别名称、计数器名称和计算机名称（如果已提供）。 它使用方法的静态重载 <xref:System.Diagnostics.PerformanceCounterCategory.CounterExists%2A> 来确定中是否存在指定的 <xref:System.Diagnostics.PerformanceCounter> 名称 <xref:System.Diagnostics.PerformanceCounterCategory> 。 根据是否提供了计算机名来选择重载。  
  
 [!code-csharp[System.Diagnostics.PerformanceCounterCategory.ExistMembers#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.PerformanceCounterCategory.ExistMembers/CS/perfcountercatstatcounterexists.cs#8)]
 [!code-vb[System.Diagnostics.PerformanceCounterCategory.ExistMembers#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.PerformanceCounterCategory.ExistMembers/VB/perfcountercatstatcountexists.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="categoryName" /> 为 <see langword="null" />。  
  
- 或 - 
<paramref name="counterName" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="categoryName" /> 是空字符串 ("")。</exception>
        <exception cref="T:System.InvalidOperationException">类别名称不存在。</exception>
        <exception cref="T:System.ComponentModel.Win32Exception">对基础系统 API 的调用失败。</exception>
        <exception cref="T:System.UnauthorizedAccessException">以不具有管理特权的用户身份正在执行的代码尝试读取性能计数器。</exception>
        <altmember cref="M:System.Diagnostics.PerformanceCounterCategory.Exists(System.String)" />
        <altmember cref="M:System.Diagnostics.PerformanceCounterCategory.InstanceExists(System.String)" />
        <altmember cref="T:System.Diagnostics.PerformanceCounter" />
      </Docs>
    </Member>
    <Member MemberName="CounterExists">
      <MemberSignature Language="C#" Value="public static bool CounterExists (string counterName, string categoryName, string machineName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool CounterExists(string counterName, string categoryName, string machineName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.PerformanceCounterCategory.CounterExists(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CounterExists (counterName As String, categoryName As String, machineName As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool CounterExists(System::String ^ counterName, System::String ^ categoryName, System::String ^ machineName);" />
      <MemberSignature Language="F#" Value="static member CounterExists : string * string * string -&gt; bool" Usage="System.Diagnostics.PerformanceCounterCategory.CounterExists (counterName, categoryName, machineName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.PerformanceCounter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="counterName" Type="System.String" />
        <Parameter Name="categoryName" Type="System.String" />
        <Parameter Name="machineName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="counterName">要查找的性能计数器的名称。</param>
        <param name="categoryName">性能计数器类别的名称或性能对象，指定的性能计数器与之关联。</param>
        <param name="machineName">性能计数器类别及其关联计数器所在的计算机的名称。</param>
        <summary>确定是否向远程计算机上的指定类别注册了指定的计数器。</summary>
        <returns>如果向指定计算机上的指定类别注册了该计数器，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  若要从 Windows Vista 和更高版本、Windows XP Professional x64 Edition 或 Windows Server 2003 中的非交互式登录会话读取性能计数器，你必须是 "性能监视器用户" 组的成员或具有管理权限。  
>   
>  若要避免在 Windows Vista 和更高版本中提升权限来访问性能计数器，请将自己添加到性能监视器用户组。  
>   
>  在 Windows Vista 或更高版本中，用户帐户控制 (UAC) 决定用户的特权。 如果您是内置的 Administrators 组的成员，将为您分配两个运行时访问令牌：一个标准用户访问令牌和一个管理员访问令牌。 默认情况下，您拥有标准用户角色。 若要执行访问性能计数器的代码，必须首先将你的特权从标准用户提升到管理员。 你可以通过以下方式执行此操作：右键单击应用程序图标并指示需以管理员身份运行。  
  
   
  
## Examples  
 下面的代码示例确定是否 <xref:System.Diagnostics.PerformanceCounter> 存在。 它从命令行获取类别名称、计数器名称和计算机名称（如果已提供）。 它使用方法的静态重载 <xref:System.Diagnostics.PerformanceCounterCategory.CounterExists%2A> 来确定中是否存在指定的 <xref:System.Diagnostics.PerformanceCounter> 名称 <xref:System.Diagnostics.PerformanceCounterCategory> 。 根据是否提供了计算机名来选择重载。  
  
 [!code-csharp[System.Diagnostics.PerformanceCounterCategory.ExistMembers#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.PerformanceCounterCategory.ExistMembers/CS/perfcountercatstatcounterexists.cs#8)]
 [!code-vb[System.Diagnostics.PerformanceCounterCategory.ExistMembers#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.PerformanceCounterCategory.ExistMembers/VB/perfcountercatstatcountexists.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="categoryName" /> 为 <see langword="null" />。  
  
- 或 - 
<paramref name="counterName" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="categoryName" /> 是空字符串 ("")。  
  
- 或 - 
<paramref name="machineName" /> 无效。</exception>
        <exception cref="T:System.InvalidOperationException">类别名称不存在。</exception>
        <exception cref="T:System.ComponentModel.Win32Exception">对基础系统 API 的调用失败。</exception>
        <exception cref="T:System.UnauthorizedAccessException">以不具有管理特权的用户身份正在执行的代码尝试读取性能计数器。</exception>
        <altmember cref="M:System.Diagnostics.PerformanceCounterCategory.Exists(System.String)" />
        <altmember cref="M:System.Diagnostics.PerformanceCounterCategory.InstanceExists(System.String)" />
        <altmember cref="T:System.Diagnostics.PerformanceCounter" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Create">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>向系统注册自定义性能计数器类别和一个或多个计数器。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Diagnostics.PerformanceCounterCategory Create (string categoryName, string categoryHelp, System.Diagnostics.CounterCreationDataCollection counterData);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Diagnostics.PerformanceCounterCategory Create(string categoryName, string categoryHelp, class System.Diagnostics.CounterCreationDataCollection counterData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.PerformanceCounterCategory.Create(System.String,System.String,System.Diagnostics.CounterCreationDataCollection)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (categoryName As String, categoryHelp As String, counterData As CounterCreationDataCollection) As PerformanceCounterCategory" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Diagnostics::PerformanceCounterCategory ^ Create(System::String ^ categoryName, System::String ^ categoryHelp, System::Diagnostics::CounterCreationDataCollection ^ counterData);" />
      <MemberSignature Language="F#" Value="static member Create : string * string * System.Diagnostics.CounterCreationDataCollection -&gt; System.Diagnostics.PerformanceCounterCategory" Usage="System.Diagnostics.PerformanceCounterCategory.Create (categoryName, categoryHelp, counterData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.PerformanceCounter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.Obsolete("This method has been deprecated.  Please use System.Diagnostics.PerformanceCounterCategory.Create(string categoryName, string categoryHelp, PerformanceCounterCategoryType categoryType, CounterCreationDataCollection counterData) instead.  http://go.microsoft.com/fwlink/?linkid=14202")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("This method has been deprecated.  Please use System.Diagnostics.PerformanceCounterCategory.Create(string categoryName, string categoryHelp, PerformanceCounterCategoryType categoryType, CounterCreationDataCollection counterData) instead.  http://go.microsoft.com/fwlink/?linkid=14202")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1">
          <AttributeName Language="C#">[System.Obsolete("This method has been deprecated.  Please use System.Diagnostics.PerformanceCounterCategory.Create(string categoryName, string categoryHelp, PerformanceCounterCategoryType categoryType, CounterCreationDataCollection counterData) instead.  https://go.microsoft.com/fwlink/?linkid=14202")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("This method has been deprecated.  Please use System.Diagnostics.PerformanceCounterCategory.Create(string categoryName, string categoryHelp, PerformanceCounterCategoryType categoryType, CounterCreationDataCollection counterData) instead.  https://go.microsoft.com/fwlink/?linkid=14202")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinmac-3.0">
          <AttributeName Language="C#">[System.Obsolete("Use another overload that uses PerformanceCounterCategoryType instead")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("Use another overload that uses PerformanceCounterCategoryType instead")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Diagnostics.PerformanceCounterCategory</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="categoryName" Type="System.String" />
        <Parameter Name="categoryHelp" Type="System.String" />
        <Parameter Name="counterData" Type="System.Diagnostics.CounterCreationDataCollection" />
      </Parameters>
      <Docs>
        <param name="categoryName">要创建并注册到系统的自定义性能计数器类别的名称。</param>
        <param name="categoryHelp">自定义类别的说明。</param>
        <param name="counterData">一个 <see cref="T:System.Diagnostics.CounterCreationDataCollection" />，它指定要作为新类别的一部分创建的计数器。</param>
        <summary>在本地计算机上注册包含指定计数器的自定义性能计数器类别。</summary>
        <returns>与新的自定义类别或性能对象关联的 <see cref="T:System.Diagnostics.PerformanceCounterCategory" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  若要从 Windows Vista 和更高版本、Windows XP Professional x64 Edition 或 Windows Server 2003 中的非交互式登录会话读取性能计数器，你必须是 "性能监视器用户" 组的成员或具有管理权限。  
>   
>  若要避免在 Windows Vista 和更高版本中提升权限来访问性能计数器，请将自己添加到性能监视器用户组。  
>   
>  在 Windows Vista 或更高版本中，用户帐户控制 (UAC) 决定用户的特权。 如果您是内置的 Administrators 组的成员，将为您分配两个运行时访问令牌：一个标准用户访问令牌和一个管理员访问令牌。 默认情况下，您拥有标准用户角色。 若要执行访问性能计数器的代码，必须首先将你的特权从标准用户提升到管理员。 你可以通过以下方式执行此操作：右键单击应用程序图标并指示需以管理员身份运行。  
  
   
  
## Examples  
 下面的代码示例确定是否 <xref:System.Diagnostics.PerformanceCounterCategory> 存在名为 "orders" 的对象。 如果不是，则它 <xref:System.Diagnostics.PerformanceCounterCategory> 通过使用 <xref:System.Diagnostics.CounterCreationDataCollection> 包含两个性能计数器的对象来创建对象。  
  
 [!code-cpp[PerfCounter_ccd#1](~/samples/snippets/cpp/VS_Snippets_CLR/PerfCounter_ccd/CPP/ccd.cpp#1)]
 [!code-csharp[PerfCounter_ccd#1](~/samples/snippets/csharp/VS_Snippets_CLR/PerfCounter_ccd/CS/ccd.cs#1)]
 [!code-vb[PerfCounter_ccd#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/PerfCounter_ccd/VB/ccd.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">在 <paramref name="counterData" /> 集合内指定的某计数器名称为 <see langword="null" /> 或空字符串 ("")。  
  
- 或 - 
在 <paramref name="counterData" /> 集合内指定的某计数器已经存在。  
  
- 或 - 
<paramref name="counterName" /> 参数的语法无效。 它可能包含反斜杠字符（“\\”）或者长度大于 80 个字符。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="categoryName" /> 参数为 <see langword="null" />。</exception>
        <exception cref="T:System.InvalidOperationException">该类别已存在于本地计算机上。  
  
- 或 - 
<paramref name="counterData" /> 集合的布局对于基本计数器不正确。 <see langword="AverageCount64" />、<see langword="AverageTimer32" />、<see langword="CounterMultiTimer" />、<see langword="CounterMultiTimerInverse" />、<see langword="CounterMultiTimer100Ns" />、<see langword="CounterMultiTimer100NsInverse" />、<see langword="RawFraction" />、<see langword="SampleFraction" /> 或 <see langword="SampleCounter" /> 类型的计数器的后面必须紧跟基本计数器类型之一（<see langword="AverageBase" />、<see langword="MultiBase" />、<see langword="RawBase" /> 或 <see langword="SampleBase" />）。</exception>
        <exception cref="T:System.ComponentModel.Win32Exception">对基础系统 API 的调用失败。</exception>
        <exception cref="T:System.UnauthorizedAccessException">以不具有管理特权的用户身份正在执行的代码尝试读取性能计数器。</exception>
        <altmember cref="M:System.Diagnostics.PerformanceCounterCategory.Delete(System.String)" />
        <altmember cref="M:System.Diagnostics.PerformanceCounterCategory.Exists(System.String)" />
        <altmember cref="T:System.Diagnostics.PerformanceCounter" />
        <altmember cref="T:System.Diagnostics.CounterCreationDataCollection" />
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Diagnostics.PerformanceCounterCategory Create (string categoryName, string categoryHelp, System.Diagnostics.PerformanceCounterCategoryType categoryType, System.Diagnostics.CounterCreationDataCollection counterData);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Diagnostics.PerformanceCounterCategory Create(string categoryName, string categoryHelp, valuetype System.Diagnostics.PerformanceCounterCategoryType categoryType, class System.Diagnostics.CounterCreationDataCollection counterData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.PerformanceCounterCategory.Create(System.String,System.String,System.Diagnostics.PerformanceCounterCategoryType,System.Diagnostics.CounterCreationDataCollection)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (categoryName As String, categoryHelp As String, categoryType As PerformanceCounterCategoryType, counterData As CounterCreationDataCollection) As PerformanceCounterCategory" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Diagnostics::PerformanceCounterCategory ^ Create(System::String ^ categoryName, System::String ^ categoryHelp, System::Diagnostics::PerformanceCounterCategoryType categoryType, System::Diagnostics::CounterCreationDataCollection ^ counterData);" />
      <MemberSignature Language="F#" Value="static member Create : string * string * System.Diagnostics.PerformanceCounterCategoryType * System.Diagnostics.CounterCreationDataCollection -&gt; System.Diagnostics.PerformanceCounterCategory" Usage="System.Diagnostics.PerformanceCounterCategory.Create (categoryName, categoryHelp, categoryType, counterData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.PerformanceCounter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.PerformanceCounterCategory</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="categoryName" Type="System.String" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="categoryHelp" Type="System.String" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="categoryType" Type="System.Diagnostics.PerformanceCounterCategoryType" Index="2" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="counterData" Type="System.Diagnostics.CounterCreationDataCollection" Index="3" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="categoryName">要创建并注册到系统的自定义性能计数器类别的名称。</param>
        <param name="categoryHelp">自定义类别的说明。</param>
        <param name="categoryType"><see cref="T:System.Diagnostics.PerformanceCounterCategoryType" /> 值之一。</param>
        <param name="counterData">一个 <see cref="T:System.Diagnostics.CounterCreationDataCollection" />，它指定要作为新类别的一部分创建的计数器。</param>
        <summary>在本地计算机上注册包含指定计数器的自定义性能计数器类别。</summary>
        <returns>与新的自定义类别或性能对象关联的 <see cref="T:System.Diagnostics.PerformanceCounterCategory" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `categoryType`参数指定性能计数器类别是单实例还是多实例。 默认情况下，在创建一个类别时，类别为单实例，并在添加另一个实例时变为多实例。 类别是在设置应用程序时创建的，实例是在运行时添加的。 在 .NET Framework 版本1.0 和1.1 中，无需了解性能计数器类别为多实例或单实例。 在中 [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)] ， <xref:System.Diagnostics.PerformanceCounterCategoryType> 枚举用于指示性能计数器是否可以有多个实例。  
  
 随一起安装的性能计数器类别 [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)] 使用单独的共享内存，每个性能计数器类别都有自己的内存。  可以通过在注册表项 HKEY_LOCAL_MACHINE \SYSTEM\CurrentControlSet\Services \Performance. 中创建一个名为 FileMappingSize 的 DWORD 来指定单独共享内存的大小。 \\ *\<category name>* FileMappingSize 值设置为类别的共享内存大小。 默认大小为131072。 如果 FileMappingSize 值不存在，则 `fileMappingSize` `performanceCounters` 使用 Machine.config 文件中指定的元素的属性值，从而导致配置文件处理出现额外的开销。 可以通过在注册表中设置文件映射大小来实现对应用程序启动的性能改进。  
  
> [!NOTE]
>  强烈建议在安装应用程序期间（而不是在应用程序执行期间）创建新的性能计数器类别。 这样，操作系统就可以刷新其已注册性能计数器类别的列表。 如果尚未刷新列表，尝试使用类别将失败。  
  
> [!NOTE]
>  若要从 Windows Vista 和更高版本、Windows XP Professional x64 Edition 或 Windows Server 2003 中的非交互式登录会话读取性能计数器，你必须是 "性能监视器用户" 组的成员或具有管理权限。  
>   
>  若要避免在 Windows Vista 和更高版本中提升权限来访问性能计数器，请将自己添加到性能监视器用户组。  
>   
>  在 Windows Vista 或更高版本中，用户帐户控制 (UAC) 决定用户的特权。 如果您是内置的 Administrators 组的成员，将为您分配两个运行时访问令牌：一个标准用户访问令牌和一个管理员访问令牌。 默认情况下，您拥有标准用户角色。 若要执行访问性能计数器的代码，必须首先将你的特权从标准用户提升到管理员。 你可以通过以下方式执行此操作：右键单击应用程序图标并指示需以管理员身份运行。  
  
   
  
## Examples  
 下面的代码示例演示方法的用法 <xref:System.Diagnostics.PerformanceCounterCategory.Create%2A> 。 该示例演示如何为每秒订单数创建自定义多实例性能计数器类别。  
  
 [!code-csharp[System.Diagnostics.PerformanceCounterCategoryType#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.PerformanceCounterCategoryType/CS/program.cs#2)]
 [!code-vb[System.Diagnostics.PerformanceCounterCategoryType#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.PerformanceCounterCategoryType/VB/program.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">在 <paramref name="counterData" /> 集合内指定的某计数器名称为 <see langword="null" /> 或空字符串 ("")。  
  
- 或 - 
在 <paramref name="counterData" /> 集合内指定的某计数器已经存在。  
  
- 或 - 
 <paramref name="counterName" /> 含有无效语法。 它可能包含反斜杠字符（“\\”）或者长度大于 80 个字符。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="categoryName" /> 为 <see langword="null" />。  
  
- 或 - 
 <paramref name="counterData" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="categoryType" /> 值不在以下值范围内：<see langword="MultiInstance" />、<see langword="SingleInstance" /> 或 <see langword="Unknown" />。</exception>
        <exception cref="T:System.InvalidOperationException">该类别已存在于本地计算机上。  
  
- 或 - 
<paramref name="counterData" /> 集合的布局对于基本计数器不正确。 <see langword="AverageCount64" />、<see langword="AverageTimer32" />、<see langword="CounterMultiTimer" />、<see langword="CounterMultiTimerInverse" />、<see langword="CounterMultiTimer100Ns" />、<see langword="CounterMultiTimer100NsInverse" />、<see langword="RawFraction" />、<see langword="SampleFraction" /> 或 <see langword="SampleCounter" /> 类型的计数器的后面必须紧跟基本计数器类型之一（<see langword="AverageBase" />、<see langword="MultiBase" />、<see langword="RawBase" /> 或 <see langword="SampleBase" />）。</exception>
        <exception cref="T:System.ComponentModel.Win32Exception">对基础系统 API 的调用失败。</exception>
        <exception cref="T:System.UnauthorizedAccessException">以不具有管理特权的用户身份正在执行的代码尝试读取性能计数器。</exception>
        <altmember cref="M:System.Diagnostics.PerformanceCounterCategory.Delete(System.String)" />
        <altmember cref="M:System.Diagnostics.PerformanceCounterCategory.Exists(System.String)" />
        <altmember cref="T:System.Diagnostics.PerformanceCounter" />
        <altmember cref="T:System.Diagnostics.CounterCreationDataCollection" />
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Diagnostics.PerformanceCounterCategory Create (string categoryName, string categoryHelp, string counterName, string counterHelp);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Diagnostics.PerformanceCounterCategory Create(string categoryName, string categoryHelp, string counterName, string counterHelp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.PerformanceCounterCategory.Create(System.String,System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (categoryName As String, categoryHelp As String, counterName As String, counterHelp As String) As PerformanceCounterCategory" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Diagnostics::PerformanceCounterCategory ^ Create(System::String ^ categoryName, System::String ^ categoryHelp, System::String ^ counterName, System::String ^ counterHelp);" />
      <MemberSignature Language="F#" Value="static member Create : string * string * string * string -&gt; System.Diagnostics.PerformanceCounterCategory" Usage="System.Diagnostics.PerformanceCounterCategory.Create (categoryName, categoryHelp, counterName, counterHelp)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.PerformanceCounter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.Obsolete("This method has been deprecated.  Please use System.Diagnostics.PerformanceCounterCategory.Create(string categoryName, string categoryHelp, PerformanceCounterCategoryType categoryType, string counterName, string counterHelp) instead.  http://go.microsoft.com/fwlink/?linkid=14202")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("This method has been deprecated.  Please use System.Diagnostics.PerformanceCounterCategory.Create(string categoryName, string categoryHelp, PerformanceCounterCategoryType categoryType, string counterName, string counterHelp) instead.  http://go.microsoft.com/fwlink/?linkid=14202")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1">
          <AttributeName Language="C#">[System.Obsolete("This method has been deprecated.  Please use System.Diagnostics.PerformanceCounterCategory.Create(string categoryName, string categoryHelp, PerformanceCounterCategoryType categoryType, string counterName, string counterHelp) instead.  https://go.microsoft.com/fwlink/?linkid=14202")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("This method has been deprecated.  Please use System.Diagnostics.PerformanceCounterCategory.Create(string categoryName, string categoryHelp, PerformanceCounterCategoryType categoryType, string counterName, string counterHelp) instead.  https://go.microsoft.com/fwlink/?linkid=14202")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinmac-3.0">
          <AttributeName Language="C#">[System.Obsolete("Use another overload that uses PerformanceCounterCategoryType instead")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("Use another overload that uses PerformanceCounterCategoryType instead")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Diagnostics.PerformanceCounterCategory</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="categoryName" Type="System.String" />
        <Parameter Name="categoryHelp" Type="System.String" />
        <Parameter Name="counterName" Type="System.String" />
        <Parameter Name="counterHelp" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="categoryName">要创建并注册到系统的自定义性能计数器类别的名称。</param>
        <param name="categoryHelp">自定义类别的说明。</param>
        <param name="counterName">要作为新类别的一部分创建的、<see langword="NumberOfItems32" /> 类型的新计数器的名称。</param>
        <param name="counterHelp">对与新的自定义类别关联的计数器所作的说明。</param>
        <summary>在本地计算机上注册包含 <see langword="NumberOfItems32" /> 类型的单个计数器的自定义性能计数器类别。</summary>
        <returns>与新的系统类别或性能对象关联的 <see cref="T:System.Diagnostics.PerformanceCounterCategory" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  若要从 Windows Vista 和更高版本、Windows XP Professional x64 Edition 或 Windows Server 2003 中的非交互式登录会话读取性能计数器，你必须是 "性能监视器用户" 组的成员或具有管理权限。  
>   
>  若要避免在 Windows Vista 和更高版本中提升权限来访问性能计数器，请将自己添加到性能监视器用户组。  
>   
>  在 Windows Vista 或更高版本中，用户帐户控制 (UAC) 决定用户的特权。 如果您是内置的 Administrators 组的成员，将为您分配两个运行时访问令牌：一个标准用户访问令牌和一个管理员访问令牌。 默认情况下，您拥有标准用户角色。 若要执行访问性能计数器的代码，必须首先将你的特权从标准用户提升到管理员。 你可以通过以下方式执行此操作：右键单击应用程序图标并指示需以管理员身份运行。  
  
   
  
## Examples  
 下面的代码示例 <xref:System.Diagnostics.PerformanceCounterCategory> <xref:System.Diagnostics.PerformanceCounter> 使用方法为每个创建一个和一个带有帮助文本的 <xref:System.Diagnostics.PerformanceCounterCategory.Create%28System.String%2CSystem.String%2CSystem.String%2CSystem.String%29> 。  
  
 [!code-csharp[System.Diagnostics.PerformanceCounterCategory.OtherMembers#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.PerformanceCounterCategory.OtherMembers/CS/perfcountercatcreate.cs#2)]
 [!code-vb[System.Diagnostics.PerformanceCounterCategory.OtherMembers#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.PerformanceCounterCategory.OtherMembers/VB/perfcountercatcreate.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="counterName" /> 为 <see langword="null" /> 或是一个空字符串 ("")。  
  
- 或 - 
由 <paramref name="counterName" /> 指定的计数器已经存在。  
  
- 或 - 
 <paramref name="counterName" /> 含有无效语法。 它可能包含反斜杠字符（“\\”）或者长度大于 80 个字符。</exception>
        <exception cref="T:System.InvalidOperationException">该类别已存在于本地计算机上。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="categoryName" /> 为 <see langword="null" />。  
  
- 或 - 
 <paramref name="counterHelp" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ComponentModel.Win32Exception">对基础系统 API 的调用失败。</exception>
        <exception cref="T:System.UnauthorizedAccessException">以不具有管理特权的用户身份正在执行的代码尝试读取性能计数器。</exception>
        <altmember cref="M:System.Diagnostics.PerformanceCounterCategory.Delete(System.String)" />
        <altmember cref="M:System.Diagnostics.PerformanceCounterCategory.Exists(System.String)" />
        <altmember cref="T:System.Diagnostics.PerformanceCounter" />
        <altmember cref="P:System.Diagnostics.PerformanceCounter.CounterHelp" />
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Diagnostics.PerformanceCounterCategory Create (string categoryName, string categoryHelp, System.Diagnostics.PerformanceCounterCategoryType categoryType, string counterName, string counterHelp);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Diagnostics.PerformanceCounterCategory Create(string categoryName, string categoryHelp, valuetype System.Diagnostics.PerformanceCounterCategoryType categoryType, string counterName, string counterHelp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.PerformanceCounterCategory.Create(System.String,System.String,System.Diagnostics.PerformanceCounterCategoryType,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (categoryName As String, categoryHelp As String, categoryType As PerformanceCounterCategoryType, counterName As String, counterHelp As String) As PerformanceCounterCategory" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Diagnostics::PerformanceCounterCategory ^ Create(System::String ^ categoryName, System::String ^ categoryHelp, System::Diagnostics::PerformanceCounterCategoryType categoryType, System::String ^ counterName, System::String ^ counterHelp);" />
      <MemberSignature Language="F#" Value="static member Create : string * string * System.Diagnostics.PerformanceCounterCategoryType * string * string -&gt; System.Diagnostics.PerformanceCounterCategory" Usage="System.Diagnostics.PerformanceCounterCategory.Create (categoryName, categoryHelp, categoryType, counterName, counterHelp)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.PerformanceCounter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.PerformanceCounterCategory</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="categoryName" Type="System.String" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="categoryHelp" Type="System.String" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="categoryType" Type="System.Diagnostics.PerformanceCounterCategoryType" Index="2" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="counterName" Type="System.String" Index="3" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="counterHelp" Type="System.String" Index="4" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="categoryName">要创建并注册到系统的自定义性能计数器类别的名称。</param>
        <param name="categoryHelp">自定义类别的说明。</param>
        <param name="categoryType"><see cref="T:System.Diagnostics.PerformanceCounterCategoryType" /> 值之一，指定类别为 <see cref="F:System.Diagnostics.PerformanceCounterCategoryType.MultiInstance" />、<see cref="F:System.Diagnostics.PerformanceCounterCategoryType.SingleInstance" /> 还是 <see cref="F:System.Diagnostics.PerformanceCounterCategoryType.Unknown" />。</param>
        <param name="counterName">要创建为新类别的一部分的新计数器的名称。</param>
        <param name="counterHelp">对与新的自定义类别关联的计数器所作的说明。</param>
        <summary>在本地计算机上注册包含 <see cref="F:System.Diagnostics.PerformanceCounterType.NumberOfItems32" /> 类型的单个计数器的自定义性能计数器类别。</summary>
        <returns>与新的系统类别或性能对象关联的 <see cref="T:System.Diagnostics.PerformanceCounterCategory" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `categoryType`参数指定性能计数器类别是单实例还是多实例。 默认情况下，在创建一个类别时，类别为单实例，并在添加另一个实例时变为多实例。 类别是在设置应用程序时创建的，实例是在运行时添加的。 在 .NET Framework 版本1.0 和1.1 中，无需了解性能计数器类别为多实例或单实例。 在中 [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)] ， <xref:System.Diagnostics.PerformanceCounterCategoryType> 枚举用于指示性能计数器是否可以有多个实例。  
  
 随一起安装的性能计数器类别 [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)] 使用单独的共享内存，每个性能计数器类别都有自己的内存。 可以通过在注册表项 HKEY_LOCAL_MACHINE \SYSTEM\CurrentControlSet\Services \Performance. 中创建一个名为 FileMappingSize 的 DWORD 来指定单独共享内存的大小。 \\ *\<category name>* FileMappingSize 值设置为类别的共享内存大小。 默认大小为131072。 如果 FileMappingSize 值不存在，则 `fileMappingSize` `performanceCounters` 使用 Machine.config 文件中指定的元素的属性值，从而导致配置文件处理出现额外的开销。 可以通过在注册表中设置文件映射大小来实现对应用程序启动的性能改进。  
  
> [!NOTE]
>  强烈建议在安装应用程序期间（而不是在应用程序执行期间）创建新的性能计数器类别。 这样，操作系统就可以刷新其已注册性能计数器类别的列表。 如果尚未刷新列表，尝试使用类别将失败。  
  
> [!NOTE]
>  若要从 Windows Vista 和更高版本、Windows XP Professional x64 Edition 或 Windows Server 2003 中的非交互式登录会话读取性能计数器，你必须是 "性能监视器用户" 组的成员或具有管理权限。  
>   
>  若要避免在 Windows Vista 和更高版本中提升权限来访问性能计数器，请将自己添加到性能监视器用户组。  
>   
>  在 Windows Vista 或更高版本中，用户帐户控制 (UAC) 决定用户的特权。 如果您是内置的 Administrators 组的成员，将为您分配两个运行时访问令牌：一个标准用户访问令牌和一个管理员访问令牌。 默认情况下，您拥有标准用户角色。 若要执行访问性能计数器的代码，必须首先将你的特权从标准用户提升到管理员。 你可以通过以下方式执行此操作：右键单击应用程序图标并指示需以管理员身份运行。  
  
   
  
## Examples  
 下面的代码示例演示方法的用法 <xref:System.Diagnostics.PerformanceCounterCategory.Create%2A> 。 该示例演示如何创建自定义的单实例性能计数器类别。  
  
 [!code-csharp[System.Diagnostics.PerformanceCounterCategoryType#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.PerformanceCounterCategoryType/CS/program.cs#3)]
 [!code-vb[System.Diagnostics.PerformanceCounterCategoryType#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.PerformanceCounterCategoryType/VB/program.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="counterName" /> 为 <see langword="null" /> 或是一个空字符串 ("")。  
  
- 或 - 
由 <paramref name="counterName" /> 指定的计数器已经存在。  
  
- 或 - 
 <paramref name="counterName" /> 含有无效语法。 它可能包含反斜杠字符（“\\”）或者长度大于 80 个字符。</exception>
        <exception cref="T:System.InvalidOperationException">该类别已存在于本地计算机上。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="categoryName" /> 为 <see langword="null" />。  
  
- 或 - 
 <paramref name="counterHelp" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ComponentModel.Win32Exception">对基础系统 API 的调用失败。</exception>
        <exception cref="T:System.UnauthorizedAccessException">以不具有管理特权的用户身份正在执行的代码尝试读取性能计数器。</exception>
        <altmember cref="M:System.Diagnostics.PerformanceCounterCategory.Delete(System.String)" />
        <altmember cref="M:System.Diagnostics.PerformanceCounterCategory.Exists(System.String)" />
        <altmember cref="T:System.Diagnostics.PerformanceCounter" />
        <altmember cref="T:System.Diagnostics.CounterCreationDataCollection" />
      </Docs>
    </Member>
    <Member MemberName="Delete">
      <MemberSignature Language="C#" Value="public static void Delete (string categoryName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Delete(string categoryName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.PerformanceCounterCategory.Delete(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Delete (categoryName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Delete(System::String ^ categoryName);" />
      <MemberSignature Language="F#" Value="static member Delete : string -&gt; unit" Usage="System.Diagnostics.PerformanceCounterCategory.Delete categoryName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.PerformanceCounter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="categoryName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="categoryName">要删除的自定义性能计数器类别的名称。</param>
        <summary>从本地计算机移除类别及其关联的计数器。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您只能从系统中删除自定义性能计数器类别。 不能从类别中删除计数器。 为此，请删除该类别，然后用要保留的计数器重新创建该类别。 若要避免出现异常，请在尝试删除之前确认该类别是否存在。  
  
> [!NOTE]
>  若要从 Windows Vista 和更高版本、Windows XP Professional x64 Edition 或 Windows Server 2003 中的非交互式登录会话读取性能计数器，你必须是 "性能监视器用户" 组的成员或具有管理权限。  
>   
>  若要避免在 Windows Vista 和更高版本中提升权限来访问性能计数器，请将自己添加到性能监视器用户组。  
>   
>  在 Windows Vista 或更高版本中，用户帐户控制 (UAC) 决定用户的特权。 如果您是内置的 Administrators 组的成员，将为您分配两个运行时访问令牌：一个标准用户访问令牌和一个管理员访问令牌。 默认情况下，您拥有标准用户角色。 若要执行访问性能计数器的代码，必须首先将你的特权从标准用户提升到管理员。 你可以通过以下方式执行此操作：右键单击应用程序图标并指示需以管理员身份运行。  
  
   
  
## Examples  
 下面的代码示例使用 <xref:System.Diagnostics.PerformanceCounterCategory.Delete%2A> 方法来删除 <xref:System.Diagnostics.PerformanceCounterCategory> 及其 <xref:System.Diagnostics.PerformanceCounter> 包含的对象。  
  
 [!code-csharp[System.Diagnostics.PerformanceCounterCategory.OtherMembers#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.PerformanceCounterCategory.OtherMembers/CS/perfCounterCatDelete.cs#6)]
 [!code-vb[System.Diagnostics.PerformanceCounterCategory.OtherMembers#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.PerformanceCounterCategory.OtherMembers/VB/perfcountercatdelete.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="categoryName" /> 参数为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="categoryName" /> 参数的语法无效。 它可能包含反斜杠字符（“\\”）或者长度大于 80 个字符。</exception>
        <exception cref="T:System.ComponentModel.Win32Exception">对基础系统 API 的调用失败。</exception>
        <exception cref="T:System.InvalidOperationException">不能删除该类别，因为它不是自定义类别。</exception>
        <exception cref="T:System.UnauthorizedAccessException">以不具有管理特权的用户身份正在执行的代码尝试读取性能计数器。</exception>
        <altmember cref="M:System.Diagnostics.PerformanceCounterCategory.Create(System.String,System.String,System.Diagnostics.CounterCreationDataCollection)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Exists">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>确定是否在系统上注册了该类别。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Exists">
      <MemberSignature Language="C#" Value="public static bool Exists (string categoryName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Exists(string categoryName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.PerformanceCounterCategory.Exists(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Exists (categoryName As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Exists(System::String ^ categoryName);" />
      <MemberSignature Language="F#" Value="static member Exists : string -&gt; bool" Usage="System.Diagnostics.PerformanceCounterCategory.Exists categoryName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.PerformanceCounter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="categoryName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="categoryName">要查找的性能计数器类别的名称。</param>
        <summary>确定是否在本地计算机上注册了该类别。</summary>
        <returns>如果已注册该类别，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用 <xref:System.Diagnostics.PerformanceCounterCategory.Exists%2A> 方法可能会导致性能明显下降，同时会检查计算机上的所有性能计数器的可用性。 如果只是写入性能计数器，则可以通过在安装应用程序时创建性能计数器，并假定在访问计数器时存在类别，来避免全局搜索性能计数器。 从性能计数器读取时，无法避免性能计数器搜索。  
  
> [!NOTE]
>  若要从 Windows Vista 和更高版本、Windows XP Professional x64 Edition 或 Windows Server 2003 中的非交互式登录会话读取性能计数器，你必须是 "性能监视器用户" 组的成员或具有管理权限。  
>   
>  若要避免在 Windows Vista 和更高版本中提升权限来访问性能计数器，请将自己添加到性能监视器用户组。  
>   
>  在 Windows Vista 或更高版本中，用户帐户控制 (UAC) 决定用户的特权。 如果您是内置的 Administrators 组的成员，将为您分配两个运行时访问令牌：一个标准用户访问令牌和一个管理员访问令牌。 默认情况下，您拥有标准用户角色。 若要执行访问性能计数器的代码，必须首先将你的特权从标准用户提升到管理员。 你可以通过以下方式执行此操作：右键单击应用程序图标并指示需以管理员身份运行。  
  
   
  
## Examples  
 下面的代码示例确定是否 <xref:System.Diagnostics.PerformanceCounterCategory> 存在名为 "orders" 的对象。 如果不是，则它 <xref:System.Diagnostics.PerformanceCounterCategory> 通过使用 <xref:System.Diagnostics.CounterCreationDataCollection> 包含两个性能计数器的对象来创建对象。  
  
 [!code-cpp[PerfCounter_ccd#1](~/samples/snippets/cpp/VS_Snippets_CLR/PerfCounter_ccd/CPP/ccd.cpp#1)]
 [!code-csharp[PerfCounter_ccd#1](~/samples/snippets/csharp/VS_Snippets_CLR/PerfCounter_ccd/CS/ccd.cs#1)]
 [!code-vb[PerfCounter_ccd#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/PerfCounter_ccd/VB/ccd.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="categoryName" /> 参数为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="categoryName" /> 参数为空字符串 ("")。</exception>
        <exception cref="T:System.ComponentModel.Win32Exception">对基础系统 API 的调用失败。</exception>
        <exception cref="T:System.UnauthorizedAccessException">以不具有管理特权的用户身份正在执行的代码尝试读取性能计数器。</exception>
        <altmember cref="M:System.Diagnostics.PerformanceCounterCategory.CounterExists(System.String)" />
        <altmember cref="M:System.Diagnostics.PerformanceCounterCategory.InstanceExists(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Exists">
      <MemberSignature Language="C#" Value="public static bool Exists (string categoryName, string machineName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Exists(string categoryName, string machineName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.PerformanceCounterCategory.Exists(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Exists (categoryName As String, machineName As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Exists(System::String ^ categoryName, System::String ^ machineName);" />
      <MemberSignature Language="F#" Value="static member Exists : string * string -&gt; bool" Usage="System.Diagnostics.PerformanceCounterCategory.Exists (categoryName, machineName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.PerformanceCounter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="categoryName" Type="System.String" />
        <Parameter Name="machineName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="categoryName">要查找的性能计数器类别的名称。</param>
        <param name="machineName">要为该类别检查的计算机的名称。</param>
        <summary>确定是否在指定的计算机上注册了该类别。</summary>
        <returns>如果已注册该类别，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用 <xref:System.Diagnostics.PerformanceCounterCategory.Exists%2A> 方法可能会导致性能明显下降，同时会检查计算机上的所有性能计数器的可用性。 如果只是写入性能计数器，则可以通过在安装应用程序时创建性能计数器，并假定在访问计数器时存在类别，来避免全局搜索性能计数器。 从性能计数器读取时，无法避免性能计数器搜索。  
  
> [!NOTE]
>  若要从 Windows Vista 和更高版本、Windows XP Professional x64 Edition 或 Windows Server 2003 中的非交互式登录会话读取性能计数器，你必须是 "性能监视器用户" 组的成员或具有管理权限。  
>   
>  若要避免在 Windows Vista 和更高版本中提升权限来访问性能计数器，请将自己添加到性能监视器用户组。  
>   
>  在 Windows Vista 或更高版本中，用户帐户控制 (UAC) 决定用户的特权。 如果您是内置的 Administrators 组的成员，将为您分配两个运行时访问令牌：一个标准用户访问令牌和一个管理员访问令牌。 默认情况下，您拥有标准用户角色。 若要执行访问性能计数器的代码，必须首先将你的特权从标准用户提升到管理员。 你可以通过以下方式执行此操作：右键单击应用程序图标并指示需以管理员身份运行。  
  
   
  
## Examples  
 下面的示例确定 <xref:System.Diagnostics.PerformanceCounterCategory> 名为的对象是否 `Orders` 存在。 如果该对象不存在，则该示例 <xref:System.Diagnostics.PerformanceCounterCategory> 通过使用 <xref:System.Diagnostics.CounterCreationDataCollection> 包含两个性能计数器的对象来创建对象。  
  
 [!code-cpp[PerfCounter_ccd#1](~/samples/snippets/cpp/VS_Snippets_CLR/PerfCounter_ccd/CPP/ccd.cpp#1)]
 [!code-csharp[PerfCounter_ccd#1](~/samples/snippets/csharp/VS_Snippets_CLR/PerfCounter_ccd/CS/ccd.cs#1)]
 [!code-vb[PerfCounter_ccd#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/PerfCounter_ccd/VB/ccd.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="categoryName" /> 参数为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="categoryName" /> 参数为空字符串 ("")。  
  
- 或 - 
<paramref name="machineName" /> 参数无效。</exception>
        <exception cref="T:System.ComponentModel.Win32Exception">对基础系统 API 的调用失败。</exception>
        <exception cref="T:System.IO.IOException">无法找到网络路径。</exception>
        <exception cref="T:System.UnauthorizedAccessException">调用方没有所要求的权限。  
  
 - 或 -  
  
 以不具有管理特权的用户身份正在执行的代码尝试读取性能计数器。</exception>
        <altmember cref="M:System.Diagnostics.PerformanceCounterCategory.CounterExists(System.String)" />
        <altmember cref="M:System.Diagnostics.PerformanceCounterCategory.InstanceExists(System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetCategories">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>检索计算机上注册的性能计数器类别的列表。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetCategories">
      <MemberSignature Language="C#" Value="public static System.Diagnostics.PerformanceCounterCategory[] GetCategories ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Diagnostics.PerformanceCounterCategory[] GetCategories() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.PerformanceCounterCategory.GetCategories" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetCategories () As PerformanceCounterCategory()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::Diagnostics::PerformanceCounterCategory ^&gt; ^ GetCategories();" />
      <MemberSignature Language="F#" Value="static member GetCategories : unit -&gt; System.Diagnostics.PerformanceCounterCategory[]" Usage="System.Diagnostics.PerformanceCounterCategory.GetCategories " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.PerformanceCounter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Diagnostics.PerformanceCounterCategory[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>检索本地计算机上注册的性能计数器类别的列表。</summary>
        <returns><see cref="T:System.Diagnostics.PerformanceCounterCategory" /> 对象的数组，这些对象指示本地计算机上注册的类别。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  若要从 Windows Vista 和更高版本、Windows XP Professional x64 Edition 或 Windows Server 2003 中的非交互式登录会话读取性能计数器，你必须是 "性能监视器用户" 组的成员或具有管理权限。  
>   
>  若要避免在 Windows Vista 和更高版本中提升权限来访问性能计数器，请将自己添加到性能监视器用户组。  
>   
>  在 Windows Vista 或更高版本中，用户帐户控制 (UAC) 决定用户的特权。 如果您是内置的 Administrators 组的成员，将为您分配两个运行时访问令牌：一个标准用户访问令牌和一个管理员访问令牌。 默认情况下，您拥有标准用户角色。 若要执行访问性能计数器的代码，必须首先将你的特权从标准用户提升到管理员。 你可以通过以下方式执行此操作：右键单击应用程序图标并指示需以管理员身份运行。  
  
   
  
## Examples  
 下面的代码示例使用 <xref:System.Diagnostics.PerformanceCounterCategory.GetCategories%2A> 方法 <xref:System.Diagnostics.PerformanceCounterCategory> 从本地计算机或指定计算机返回对象的数组。 它将 <xref:System.Diagnostics.PerformanceCounterCategory> 数组转换为类别名称的数组，并为用户排序并显示该数组。 <xref:System.Diagnostics.PerformanceCounterCategory.GetCategories%2A>根据是否指定了计算机名来选择重载。  
  
 [!code-cpp[System.Diagnostics.PerformanceCounterCategory.GetMembers#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Diagnostics.PerformanceCounterCategory.GetMembers/cpp/perfcountergetcat.cpp#2)]
 [!code-csharp[System.Diagnostics.PerformanceCounterCategory.GetMembers#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.PerformanceCounterCategory.GetMembers/CS/perfcountergetcat.cs#2)]
 [!code-vb[System.Diagnostics.PerformanceCounterCategory.GetMembers#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.PerformanceCounterCategory.GetMembers/VB/perfcountercatgetcat.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception">对基础系统 API 的调用失败。</exception>
        <exception cref="T:System.UnauthorizedAccessException">以不具有管理特权的用户身份正在执行的代码尝试读取性能计数器。</exception>
        <altmember cref="T:System.Diagnostics.PerformanceCounter" />
      </Docs>
    </Member>
    <Member MemberName="GetCategories">
      <MemberSignature Language="C#" Value="public static System.Diagnostics.PerformanceCounterCategory[] GetCategories (string machineName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Diagnostics.PerformanceCounterCategory[] GetCategories(string machineName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.PerformanceCounterCategory.GetCategories(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetCategories (machineName As String) As PerformanceCounterCategory()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::Diagnostics::PerformanceCounterCategory ^&gt; ^ GetCategories(System::String ^ machineName);" />
      <MemberSignature Language="F#" Value="static member GetCategories : string -&gt; System.Diagnostics.PerformanceCounterCategory[]" Usage="System.Diagnostics.PerformanceCounterCategory.GetCategories machineName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.PerformanceCounter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.PerformanceCounterCategory[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="machineName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="machineName">要查看的计算机。</param>
        <summary>检索指定计算机上注册的性能计数器类别的列表。</summary>
        <returns><see cref="T:System.Diagnostics.PerformanceCounterCategory" /> 对象的数组，这些对象指示指定计算机上注册的类别。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要检索本地计算机上的类别，请使用另一个重载，或将 "." 作为 `machineName` 参数传递。  
  
> [!NOTE]
>  若要从 Windows Vista 和更高版本、Windows XP Professional x64 Edition 或 Windows Server 2003 中的非交互式登录会话读取性能计数器，你必须是 "性能监视器用户" 组的成员或具有管理权限。  
>   
>  若要避免在 Windows Vista 和更高版本中提升权限来访问性能计数器，请将自己添加到性能监视器用户组。  
>   
>  在 Windows Vista 或更高版本中，用户帐户控制 (UAC) 决定用户的特权。 如果您是内置的 Administrators 组的成员，将为您分配两个运行时访问令牌：一个标准用户访问令牌和一个管理员访问令牌。 默认情况下，您拥有标准用户角色。 若要执行访问性能计数器的代码，必须首先将你的特权从标准用户提升到管理员。 你可以通过以下方式执行此操作：右键单击应用程序图标并指示需以管理员身份运行。  
  
   
  
## Examples  
 下面的代码示例使用 <xref:System.Diagnostics.PerformanceCounterCategory.GetCategories%2A> 方法 <xref:System.Diagnostics.PerformanceCounterCategory> 从本地计算机或指定计算机返回对象的数组。 它将 <xref:System.Diagnostics.PerformanceCounterCategory> 数组转换为类别名称的数组，并为用户排序并显示该数组。 <xref:System.Diagnostics.PerformanceCounterCategory.GetCategories%2A>根据是否指定了计算机名来选择重载。  
  
 [!code-cpp[System.Diagnostics.PerformanceCounterCategory.GetMembers#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Diagnostics.PerformanceCounterCategory.GetMembers/cpp/perfcountergetcat.cpp#2)]
 [!code-csharp[System.Diagnostics.PerformanceCounterCategory.GetMembers#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.PerformanceCounterCategory.GetMembers/CS/perfcountergetcat.cs#2)]
 [!code-vb[System.Diagnostics.PerformanceCounterCategory.GetMembers#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.PerformanceCounterCategory.GetMembers/VB/perfcountercatgetcat.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="machineName" /> 参数无效。</exception>
        <exception cref="T:System.ComponentModel.Win32Exception">对基础系统 API 的调用失败。</exception>
        <exception cref="T:System.UnauthorizedAccessException">以不具有管理特权的用户身份正在执行的代码尝试读取性能计数器。</exception>
        <altmember cref="T:System.Diagnostics.PerformanceCounter" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetCounters">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>检索此性能计数器类别中的计数器列表。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetCounters">
      <MemberSignature Language="C#" Value="public System.Diagnostics.PerformanceCounter[] GetCounters ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Diagnostics.PerformanceCounter[] GetCounters() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.PerformanceCounterCategory.GetCounters" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCounters () As PerformanceCounter()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Diagnostics::PerformanceCounter ^&gt; ^ GetCounters();" />
      <MemberSignature Language="F#" Value="member this.GetCounters : unit -&gt; System.Diagnostics.PerformanceCounter[]" Usage="performanceCounterCategory.GetCounters " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.PerformanceCounter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.PerformanceCounter[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>检索正好包含一个实例的某性能计数器类别中的计数器列表。</summary>
        <returns><see cref="T:System.Diagnostics.PerformanceCounter" /> 对象的数组，这些对象指示与此单实例性能计数器类别关联的计数器。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关性能对象实例的详细信息，请参阅 <xref:System.Diagnostics.PerformanceCounter> 类概述。  
  
> [!NOTE]
>  若要从 Windows Vista 和更高版本、Windows XP Professional x64 Edition 或 Windows Server 2003 中的非交互式登录会话读取性能计数器，你必须是 "性能监视器用户" 组的成员或具有管理权限。  
>   
>  若要避免在 Windows Vista 和更高版本中提升权限来访问性能计数器，请将自己添加到性能监视器用户组。  
>   
>  在 Windows Vista 或更高版本中，用户帐户控制 (UAC) 决定用户的特权。 如果您是内置的 Administrators 组的成员，将为您分配两个运行时访问令牌：一个标准用户访问令牌和一个管理员访问令牌。 默认情况下，您拥有标准用户角色。 若要执行访问性能计数器的代码，必须首先将你的特权从标准用户提升到管理员。 你可以通过以下方式执行此操作：右键单击应用程序图标并指示需以管理员身份运行。  
  
   
  
## Examples  
 下面的代码示例获取中对象的列表 <xref:System.Diagnostics.PerformanceCounter> <xref:System.Diagnostics.PerformanceCounterCategory> 。 它首先 <xref:System.Diagnostics.PerformanceCounterCategory> 基于是否指定了计算机名称，创建一个具有适当构造函数的。 然后，它使用 <xref:System.Diagnostics.PerformanceCounterCategory.GetCounters%2A> 方法返回对象的数组 <xref:System.Diagnostics.PerformanceCounter> ， <xref:System.Diagnostics.PerformanceCounterCategory.GetCounters%2A> 根据是否指定了实例名称选择重载。  
  
 此 <xref:System.Diagnostics.PerformanceCounterCategory.GetCounters> 重载失败，除非它与单实例类别一起使用。  
  
 [!code-cpp[System.Diagnostics.PerformanceCounterCategory.GetMembers#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Diagnostics.PerformanceCounterCategory.GetMembers/cpp/perfcountercatgetcount.cpp#4)]
 [!code-csharp[System.Diagnostics.PerformanceCounterCategory.GetMembers#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.PerformanceCounterCategory.GetMembers/CS/perfcountercatgetcount.cs#4)]
 [!code-vb[System.Diagnostics.PerformanceCounterCategory.GetMembers#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.PerformanceCounterCategory.GetMembers/VB/perfcountercatgetcount.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">该类别不是单个实例。</exception>
        <exception cref="T:System.ComponentModel.Win32Exception">对基础系统 API 的调用失败。</exception>
        <exception cref="T:System.InvalidOperationException">没有与该类别关联的实例。</exception>
        <exception cref="T:System.UnauthorizedAccessException">以不具有管理特权的用户身份正在执行的代码尝试读取性能计数器。</exception>
        <altmember cref="T:System.Diagnostics.PerformanceCounter" />
      </Docs>
    </Member>
    <Member MemberName="GetCounters">
      <MemberSignature Language="C#" Value="public System.Diagnostics.PerformanceCounter[] GetCounters (string instanceName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Diagnostics.PerformanceCounter[] GetCounters(string instanceName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.PerformanceCounterCategory.GetCounters(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCounters (instanceName As String) As PerformanceCounter()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Diagnostics::PerformanceCounter ^&gt; ^ GetCounters(System::String ^ instanceName);" />
      <MemberSignature Language="F#" Value="member this.GetCounters : string -&gt; System.Diagnostics.PerformanceCounter[]" Usage="performanceCounterCategory.GetCounters instanceName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.PerformanceCounter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.PerformanceCounter[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="instanceName">要为其检索关联计数器列表的性能对象实例。</param>
        <summary>检索包含一个或多个实例的某性能计数器类别中的计数器列表。</summary>
        <returns><see cref="T:System.Diagnostics.PerformanceCounter" /> 对象的数组，这些对象指示与此性能计数器类别的指定对象实例关联的计数器。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要表示单实例类别，请为参数传递空字符串 ( "" ) `instanceName` 。  
  
 有关性能对象实例的详细信息，请参阅 <xref:System.Diagnostics.PerformanceCounter> 类概述。  
  
> [!NOTE]
>  若要从 Windows Vista 和更高版本、Windows XP Professional x64 Edition 或 Windows Server 2003 中的非交互式登录会话读取性能计数器，你必须是 "性能监视器用户" 组的成员或具有管理权限。  
>   
>  若要避免在 Windows Vista 和更高版本中提升权限来访问性能计数器，请将自己添加到性能监视器用户组。  
>   
>  在 Windows Vista 或更高版本中，用户帐户控制 (UAC) 决定用户的特权。 如果您是内置的 Administrators 组的成员，将为您分配两个运行时访问令牌：一个标准用户访问令牌和一个管理员访问令牌。 默认情况下，您拥有标准用户角色。 若要执行访问性能计数器的代码，必须首先将你的特权从标准用户提升到管理员。 你可以通过以下方式执行此操作：右键单击应用程序图标并指示需以管理员身份运行。  
  
   
  
## Examples  
 下面的代码示例获取中对象的列表 <xref:System.Diagnostics.PerformanceCounter> <xref:System.Diagnostics.PerformanceCounterCategory> 。 它首先 <xref:System.Diagnostics.PerformanceCounterCategory> 基于是否指定了计算机名称，创建一个具有适当构造函数的。 然后，它使用 <xref:System.Diagnostics.PerformanceCounterCategory.GetCounters%2A> 方法返回对象的数组 <xref:System.Diagnostics.PerformanceCounter> ， <xref:System.Diagnostics.PerformanceCounterCategory.GetCounters%2A> 根据是否指定了实例名称选择重载。  
  
 此 <xref:System.Diagnostics.PerformanceCounterCategory.GetCounters%28System.String%29> 重载失败，除非它与包含实例的类别一起使用。  
  
 [!code-cpp[System.Diagnostics.PerformanceCounterCategory.GetMembers#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Diagnostics.PerformanceCounterCategory.GetMembers/cpp/perfcountercatgetcount.cpp#4)]
 [!code-csharp[System.Diagnostics.PerformanceCounterCategory.GetMembers#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.PerformanceCounterCategory.GetMembers/CS/perfcountercatgetcount.cs#4)]
 [!code-vb[System.Diagnostics.PerformanceCounterCategory.GetMembers#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.PerformanceCounterCategory.GetMembers/VB/perfcountercatgetcount.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="instanceName" /> 参数为 <see langword="null" />。</exception>
        <exception cref="T:System.InvalidOperationException">尚未设置此 <see cref="P:System.Diagnostics.PerformanceCounterCategory.CategoryName" /> 实例的 <see cref="T:System.Diagnostics.PerformanceCounterCategory" /> 属性。  
  
- 或 - 
该类别不包含由 <paramref name="instanceName" /> 参数指定的实例。</exception>
        <exception cref="T:System.ComponentModel.Win32Exception">对基础系统 API 的调用失败。</exception>
        <exception cref="T:System.UnauthorizedAccessException">以不具有管理特权的用户身份正在执行的代码尝试读取性能计数器。</exception>
        <altmember cref="T:System.Diagnostics.PerformanceCounter" />
      </Docs>
    </Member>
    <Member MemberName="GetInstanceNames">
      <MemberSignature Language="C#" Value="public string[] GetInstanceNames ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] GetInstanceNames() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.PerformanceCounterCategory.GetInstanceNames" />
      <MemberSignature Language="VB.NET" Value="Public Function GetInstanceNames () As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ GetInstanceNames();" />
      <MemberSignature Language="F#" Value="member this.GetInstanceNames : unit -&gt; string[]" Usage="performanceCounterCategory.GetInstanceNames " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.PerformanceCounter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>检索与此类别关联的性能对象实例列表。</summary>
        <returns>字符串的数组，这些字符串表示与此类别关联的性能对象实例名称；或者，如果该类别仅包含一个性能对象实例，则为包含空字符串 ("") 的单项数组。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  若要从 Windows Vista 和更高版本、Windows XP Professional x64 Edition 或 Windows Server 2003 中的非交互式登录会话读取性能计数器，你必须是 "性能监视器用户" 组的成员或具有管理权限。  
>   
>  若要避免在 Windows Vista 和更高版本中提升权限来访问性能计数器，请将自己添加到性能监视器用户组。  
>   
>  在 Windows Vista 或更高版本中，用户帐户控制 (UAC) 决定用户的特权。 如果您是内置的 Administrators 组的成员，将为您分配两个运行时访问令牌：一个标准用户访问令牌和一个管理员访问令牌。 默认情况下，您拥有标准用户角色。 若要执行访问性能计数器的代码，必须首先将你的特权从标准用户提升到管理员。 你可以通过以下方式执行此操作：右键单击应用程序图标并指示需以管理员身份运行。  
  
   
  
## Examples  
 下面的代码示例获取中对象的列表 <xref:System.Diagnostics.PerformanceCounter> <xref:System.Diagnostics.PerformanceCounterCategory> 。 它首先 <xref:System.Diagnostics.PerformanceCounterCategory> 基于是否指定了计算机名称，使用适当的构造函数创建对象。 然后，它使用 <xref:System.Diagnostics.PerformanceCounterCategory.GetInstanceNames%2A> 将实例名称返回为数组 <xref:System.String> ，并对其进行排序和显示。  
  
 [!code-cpp[System.Diagnostics.PerformanceCounterCategory.GetMembers#6](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Diagnostics.PerformanceCounterCategory.GetMembers/cpp/perfcountercatgetinst.cpp#6)]
 [!code-csharp[System.Diagnostics.PerformanceCounterCategory.GetMembers#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.PerformanceCounterCategory.GetMembers/CS/perfcountercatgetinst.cs#6)]
 [!code-vb[System.Diagnostics.PerformanceCounterCategory.GetMembers#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.PerformanceCounterCategory.GetMembers/VB/perfcountercatgetinst.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="P:System.Diagnostics.PerformanceCounterCategory.CategoryName" /> 属性为 <see langword="null" />。 可能尚未设置该属性。  
  
- 或 - 
没有与该类别关联的实例。</exception>
        <exception cref="T:System.ComponentModel.Win32Exception">对基础系统 API 的调用失败。</exception>
        <exception cref="T:System.UnauthorizedAccessException">以不具有管理特权的用户身份正在执行的代码尝试读取性能计数器。</exception>
        <altmember cref="P:System.Diagnostics.PerformanceCounterCategory.CategoryName" />
        <altmember cref="P:System.Diagnostics.PerformanceCounter.InstanceName" />
        <altmember cref="T:System.Diagnostics.PerformanceCounter" />
      </Docs>
    </Member>
    <MemberGroup MemberName="InstanceExists">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>确定该类别是否包含指定的性能对象实例。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="InstanceExists">
      <MemberSignature Language="C#" Value="public bool InstanceExists (string instanceName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool InstanceExists(string instanceName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.PerformanceCounterCategory.InstanceExists(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function InstanceExists (instanceName As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool InstanceExists(System::String ^ instanceName);" />
      <MemberSignature Language="F#" Value="member this.InstanceExists : string -&gt; bool" Usage="performanceCounterCategory.InstanceExists instanceName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.PerformanceCounter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="instanceName">要搜索的此性能计数器类别中的性能对象实例。</param>
        <summary>确定由此 <see cref="T:System.Diagnostics.PerformanceCounterCategory" /> 对象的 <see cref="P:System.Diagnostics.PerformanceCounterCategory.CategoryName" /> 属性标识的类别中是否存在指定的性能对象实例。</summary>
        <returns>如果该类别包含指定的性能对象实例，则为 <see langword="true" />；否则，为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Diagnostics.PerformanceCounterCategory.InstanceExists%2A>不是的此重载 `static` 。 它要求您创建一个 <xref:System.Diagnostics.PerformanceCounterCategory> 对象并设置 <xref:System.Diagnostics.PerformanceCounterCategory.CategoryName%2A> 属性。  
  
> [!NOTE]
>  若要从 Windows Vista 和更高版本、Windows XP Professional x64 Edition 或 Windows Server 2003 中的非交互式登录会话读取性能计数器，你必须是 "性能监视器用户" 组的成员或具有管理权限。  
>   
>  若要避免在 Windows Vista 和更高版本中提升权限来访问性能计数器，请将自己添加到性能监视器用户组。  
>   
>  在 Windows Vista 或更高版本中，用户帐户控制 (UAC) 决定用户的特权。 如果您是内置的 Administrators 组的成员，将为您分配两个运行时访问令牌：一个标准用户访问令牌和一个管理员访问令牌。 默认情况下，您拥有标准用户角色。 若要执行访问性能计数器的代码，必须首先将你的特权从标准用户提升到管理员。 你可以通过以下方式执行此操作：右键单击应用程序图标并指示需以管理员身份运行。  
  
   
  
## Examples  
 下面的代码示例确定中是否 <xref:System.Diagnostics.PerformanceCounter> 存在实例 <xref:System.Diagnostics.PerformanceCounterCategory> 。 它首先 <xref:System.Diagnostics.PerformanceCounterCategory> 基于是否指定了计算机名称，使用适当的构造函数创建对象。 然后，它使用 <xref:System.Diagnostics.PerformanceCounterCategory.InstanceExists%28System.String%29> 确定指定的实例是否存在，并通知用户。 如果未指定实例名称，则该示例使用默认的单实例名称。  
  
 [!code-csharp[System.Diagnostics.PerformanceCounterCategory.ExistMembers#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.PerformanceCounterCategory.ExistMembers/CS/perfcounterobjinstexists.cs#2)]
 [!code-vb[System.Diagnostics.PerformanceCounterCategory.ExistMembers#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.PerformanceCounterCategory.ExistMembers/VB/perfcountercatobjinstexists.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="P:System.Diagnostics.PerformanceCounterCategory.CategoryName" /> 属性为 <see langword="null" />。 可能尚未设置该属性。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="instanceName" /> 参数为 <see langword="null" />。</exception>
        <exception cref="T:System.ComponentModel.Win32Exception">对基础系统 API 的调用失败。</exception>
        <exception cref="T:System.UnauthorizedAccessException">以不具有管理特权的用户身份正在执行的代码尝试读取性能计数器。</exception>
        <altmember cref="P:System.Diagnostics.PerformanceCounterCategory.CategoryName" />
        <altmember cref="P:System.Diagnostics.PerformanceCounter.InstanceName" />
        <altmember cref="M:System.Diagnostics.PerformanceCounterCategory.CounterExists(System.String)" />
        <altmember cref="M:System.Diagnostics.PerformanceCounterCategory.Exists(System.String)" />
        <altmember cref="T:System.Diagnostics.PerformanceCounter" />
      </Docs>
    </Member>
    <Member MemberName="InstanceExists">
      <MemberSignature Language="C#" Value="public static bool InstanceExists (string instanceName, string categoryName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool InstanceExists(string instanceName, string categoryName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.PerformanceCounterCategory.InstanceExists(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function InstanceExists (instanceName As String, categoryName As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool InstanceExists(System::String ^ instanceName, System::String ^ categoryName);" />
      <MemberSignature Language="F#" Value="static member InstanceExists : string * string -&gt; bool" Usage="System.Diagnostics.PerformanceCounterCategory.InstanceExists (instanceName, categoryName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.PerformanceCounter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceName" Type="System.String" />
        <Parameter Name="categoryName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="instanceName">要搜索的性能对象实例。</param>
        <param name="categoryName">要搜索的性能计数器类别。</param>
        <summary>确定本地计算机上指定的类别是否包含指定的性能对象实例。</summary>
        <returns>如果该类别包含指定的性能对象实例，则为 <see langword="true" />；否则，为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 不能确定计算机上是否存在性能对象实例，而无需指定要查找的特定类别。  
  
> [!NOTE]
>  若要从 Windows Vista 和更高版本、Windows XP Professional x64 Edition 或 Windows Server 2003 中的非交互式登录会话读取性能计数器，你必须是 "性能监视器用户" 组的成员或具有管理权限。  
>   
>  若要避免在 Windows Vista 和更高版本中提升权限来访问性能计数器，请将自己添加到性能监视器用户组。  
>   
>  在 Windows Vista 或更高版本中，用户帐户控制 (UAC) 决定用户的特权。 如果您是内置的 Administrators 组的成员，将为您分配两个运行时访问令牌：一个标准用户访问令牌和一个管理员访问令牌。 默认情况下，您拥有标准用户角色。 若要执行访问性能计数器的代码，必须首先将你的特权从标准用户提升到管理员。 你可以通过以下方式执行此操作：右键单击应用程序图标并指示需以管理员身份运行。  
  
   
  
## Examples  
 下面的代码示例使用的静态重载 <xref:System.Diagnostics.PerformanceCounterCategory.InstanceExists%2A> 来确定中是否存在给定的 <xref:System.Diagnostics.PerformanceCounter> 实例 <xref:System.Diagnostics.PerformanceCounterCategory> 。 根据是否指定了计算机名来选择重载。 如果未指定实例名称，则该示例使用默认的单实例名称。  
  
 [!code-csharp[System.Diagnostics.PerformanceCounterCategory.ExistMembers#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.PerformanceCounterCategory.ExistMembers/CS/perfcountercatstatinstexists.cs#10)]
 [!code-vb[System.Diagnostics.PerformanceCounterCategory.ExistMembers#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.PerformanceCounterCategory.ExistMembers/VB/perfcountercatstatinstexists.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="instanceName" /> 参数为 <see langword="null" />。  
  
- 或 - 
<paramref name="categoryName" /> 参数为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="categoryName" /> 参数为空字符串 ("")。</exception>
        <exception cref="T:System.ComponentModel.Win32Exception">对基础系统 API 的调用失败。</exception>
        <exception cref="T:System.UnauthorizedAccessException">以不具有管理特权的用户身份正在执行的代码尝试读取性能计数器。</exception>
        <altmember cref="P:System.Diagnostics.PerformanceCounter.InstanceName" />
        <altmember cref="M:System.Diagnostics.PerformanceCounterCategory.CounterExists(System.String)" />
        <altmember cref="M:System.Diagnostics.PerformanceCounterCategory.Exists(System.String)" />
        <altmember cref="T:System.Diagnostics.PerformanceCounter" />
      </Docs>
    </Member>
    <Member MemberName="InstanceExists">
      <MemberSignature Language="C#" Value="public static bool InstanceExists (string instanceName, string categoryName, string machineName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool InstanceExists(string instanceName, string categoryName, string machineName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.PerformanceCounterCategory.InstanceExists(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function InstanceExists (instanceName As String, categoryName As String, machineName As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool InstanceExists(System::String ^ instanceName, System::String ^ categoryName, System::String ^ machineName);" />
      <MemberSignature Language="F#" Value="static member InstanceExists : string * string * string -&gt; bool" Usage="System.Diagnostics.PerformanceCounterCategory.InstanceExists (instanceName, categoryName, machineName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.PerformanceCounter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceName" Type="System.String" />
        <Parameter Name="categoryName" Type="System.String" />
        <Parameter Name="machineName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="instanceName">要搜索的性能对象实例。</param>
        <param name="categoryName">要搜索的性能计数器类别。</param>
        <param name="machineName">要在其上查找该类别实例对的计算机的名称。</param>
        <summary>确定指定计算机上的指定类别是否包含指定的性能对象实例。</summary>
        <returns>如果该类别包含指定的性能对象实例，则为 <see langword="true" />；否则，为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 不能确定计算机上是否存在性能对象实例，而无需指定要查找的特定类别。  
  
 您可以使用 "." 来指定本地计算机。  
  
> [!NOTE]
>  若要从 Windows Vista 和更高版本、Windows XP Professional x64 Edition 或 Windows Server 2003 中的非交互式登录会话读取性能计数器，你必须是 "性能监视器用户" 组的成员或具有管理权限。  
>   
>  若要避免在 Windows Vista 和更高版本中提升权限来访问性能计数器，请将自己添加到性能监视器用户组。  
>   
>  在 Windows Vista 或更高版本中，用户帐户控制 (UAC) 决定用户的特权。 如果您是内置的 Administrators 组的成员，将为您分配两个运行时访问令牌：一个标准用户访问令牌和一个管理员访问令牌。 默认情况下，您拥有标准用户角色。 若要执行访问性能计数器的代码，必须首先将你的特权从标准用户提升到管理员。 你可以通过以下方式执行此操作：右键单击应用程序图标并指示需以管理员身份运行。  
  
   
  
## Examples  
 下面的代码示例使用的静态重载 <xref:System.Diagnostics.PerformanceCounterCategory.InstanceExists%2A> 来确定中是否存在给定的 <xref:System.Diagnostics.PerformanceCounter> 实例 <xref:System.Diagnostics.PerformanceCounterCategory> 。 根据是否指定了计算机名来选择重载。 如果未指定实例名称，则该示例使用默认的单实例名称。  
  
 [!code-csharp[System.Diagnostics.PerformanceCounterCategory.ExistMembers#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.PerformanceCounterCategory.ExistMembers/CS/perfcountercatstatinstexists.cs#10)]
 [!code-vb[System.Diagnostics.PerformanceCounterCategory.ExistMembers#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.PerformanceCounterCategory.ExistMembers/VB/perfcountercatstatinstexists.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="instanceName" /> 参数为 <see langword="null" />。  
  
- 或 - 
<paramref name="categoryName" /> 参数为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="categoryName" /> 参数为空字符串 ("")。  
  
- 或 - 
<paramref name="machineName" /> 参数无效。</exception>
        <exception cref="T:System.ComponentModel.Win32Exception">对基础系统 API 的调用失败。</exception>
        <exception cref="T:System.UnauthorizedAccessException">以不具有管理特权的用户身份正在执行的代码尝试读取性能计数器。</exception>
        <altmember cref="P:System.Diagnostics.PerformanceCounter.InstanceName" />
        <altmember cref="M:System.Diagnostics.PerformanceCounterCategory.CounterExists(System.String)" />
        <altmember cref="M:System.Diagnostics.PerformanceCounterCategory.Exists(System.String)" />
        <altmember cref="T:System.Diagnostics.PerformanceCounter" />
      </Docs>
    </Member>
    <Member MemberName="MachineName">
      <MemberSignature Language="C#" Value="public string MachineName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string MachineName" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.PerformanceCounterCategory.MachineName" />
      <MemberSignature Language="VB.NET" Value="Public Property MachineName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ MachineName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.MachineName : string with get, set" Usage="System.Diagnostics.PerformanceCounterCategory.MachineName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.PerformanceCounter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置此类别所在的计算机的名称。</summary>
        <value>性能计数器类别及其关联计数器所在的计算机的名称。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例 <xref:System.Diagnostics.PerformanceCounterCategory> 使用 <xref:System.Diagnostics.PerformanceCounterCategory.%23ctor> 构造函数创建一个。 它将提示用户输入 <xref:System.Diagnostics.PerformanceCounterCategory> 和计算机名称，然后 <xref:System.Diagnostics.PerformanceCounterCategory.CategoryName%2A> <xref:System.Diagnostics.PerformanceCounterCategory.MachineName%2A> 从输入的值中设置和属性。 然后，它显示 <xref:System.Diagnostics.PerformanceCounterCategory.CategoryName%2A> 、 <xref:System.Diagnostics.PerformanceCounterCategory.MachineName%2A> 和属性的值 <xref:System.Diagnostics.PerformanceCounterCategory.CategoryHelp%2A> ，如果无法访问，则显示一条错误消息 <xref:System.Diagnostics.PerformanceCounterCategory> 。  
  
 [!code-csharp[System.Diagnostics.PerformanceCounterCategory.OtherMembers#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.PerformanceCounterCategory.OtherMembers/CS/perfCounterCatProps.cs#8)]
 [!code-vb[System.Diagnostics.PerformanceCounterCategory.OtherMembers#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.PerformanceCounterCategory.OtherMembers/VB/perfcountercatprops.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><see cref="P:System.Diagnostics.PerformanceCounterCategory.MachineName" /> 语法无效。</exception>
        <altmember cref="P:System.Diagnostics.PerformanceCounterCategory.CategoryName" />
        <altmember cref="T:System.Diagnostics.PerformanceCounter" />
      </Docs>
    </Member>
    <Member MemberName="ReadCategory">
      <MemberSignature Language="C#" Value="public System.Diagnostics.InstanceDataCollectionCollection ReadCategory ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Diagnostics.InstanceDataCollectionCollection ReadCategory() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.PerformanceCounterCategory.ReadCategory" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadCategory () As InstanceDataCollectionCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Diagnostics::InstanceDataCollectionCollection ^ ReadCategory();" />
      <MemberSignature Language="F#" Value="member this.ReadCategory : unit -&gt; System.Diagnostics.InstanceDataCollectionCollection" Usage="performanceCounterCategory.ReadCategory " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.PerformanceCounter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinmac-3.0">
          <AttributeName Language="C#">[System.MonoTODO]</AttributeName>
          <AttributeName Language="F#">[&lt;System.MonoTODO&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Diagnostics.InstanceDataCollectionCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>读取与此性能计数器类别关联的所有计数器和性能对象实例数据。</summary>
        <returns>一个 <see cref="T:System.Diagnostics.InstanceDataCollectionCollection" />，它包含类别的计数器和性能对象实例数据。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 必须在 <xref:System.Diagnostics.PerformanceCounterCategory.CategoryName%2A> 调用之前设置属性 <xref:System.Diagnostics.PerformanceCounterCategory.ReadCategory%2A> 。  
  
 由于系统提供数据的方式的原因，一次读取整个类别的工作方式与读取单个计数器一样高效。  
  
> [!NOTE]
>  若要从 Windows Vista 和更高版本、Windows XP Professional x64 Edition 或 Windows Server 2003 中的非交互式登录会话读取性能计数器，你必须是 "性能监视器用户" 组的成员或具有管理权限。  
>   
>  若要避免在 Windows Vista 和更高版本中提升权限来访问性能计数器，请将自己添加到性能监视器用户组。  
>   
>  在 Windows Vista 或更高版本中，用户帐户控制 (UAC) 决定用户的特权。 如果您是内置的 Administrators 组的成员，将为您分配两个运行时访问令牌：一个标准用户访问令牌和一个管理员访问令牌。 默认情况下，您拥有标准用户角色。 若要执行访问性能计数器的代码，必须首先将你的特权从标准用户提升到管理员。 你可以通过以下方式执行此操作：右键单击应用程序图标并指示需以管理员身份运行。  
  
   
  
## Examples  
 下面的代码示例 <xref:System.Diagnostics.PerformanceCounterCategory> 为指定的名称创建一个 <xref:System.Diagnostics.PerformanceCounterCategory> 。 然后，它使用 <xref:System.Diagnostics.PerformanceCounterCategory.ReadCategory%2A> 返回 <xref:System.Diagnostics.InstanceDataCollectionCollection> ，其中包含中的所有对象实例的实例数据 <xref:System.Diagnostics.PerformanceCounter> <xref:System.Diagnostics.PerformanceCounterCategory> 。  
  
 [!code-csharp[System.Diagnostics.InstanceData.CopyTo#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.InstanceData.CopyTo/CS/instdatacopyto.cs#6)]
 [!code-vb[System.Diagnostics.InstanceData.CopyTo#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.InstanceData.CopyTo/VB/instdatacopyto.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="P:System.Diagnostics.PerformanceCounterCategory.CategoryName" /> 属性为 <see langword="null" />。 可能尚未设置该属性。</exception>
        <exception cref="T:System.ComponentModel.Win32Exception">对基础系统 API 的调用失败。</exception>
        <exception cref="T:System.UnauthorizedAccessException">以不具有管理特权的用户身份正在执行的代码尝试读取性能计数器。</exception>
        <altmember cref="T:System.Diagnostics.InstanceDataCollectionCollection" />
        <altmember cref="T:System.Diagnostics.InstanceDataCollection" />
        <altmember cref="T:System.Diagnostics.InstanceData" />
      </Docs>
    </Member>
  </Members>
</Type>
