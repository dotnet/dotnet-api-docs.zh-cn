<Type Name="SrgsDocument" FullName="System.Speech.Recognition.SrgsGrammar.SrgsDocument">
  <Metadata><Meta Name="ms.openlocfilehash" Value="f1b92b86311af2b15be60e4acdc7447f95b9af8f" /><Meta Name="ms.sourcegitcommit" Value="b53d35b4a410c949742abd4c6a989d1af5357bca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="86827160" /></Metadata><TypeSignature Language="C#" Value="public class SrgsDocument" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit SrgsDocument extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />
  <TypeSignature Language="VB.NET" Value="Public Class SrgsDocument" />
  <TypeSignature Language="C++ CLI" Value="public ref class SrgsDocument" />
  <TypeSignature Language="F#" Value="type SrgsDocument = class" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[System.Serializable]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Serializable&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>定义用于生成强类型的运行时语法的设计时对象，符合<see href="https://www.w3.org/TR/speech-grammar/">语音识别语法规范 (SRGS) 1.0 版</see>。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 可以构造一个空 <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> 的实例并通过添加表示 SRGS 元素的类的实例（如、、、 <xref:System.Speech.Recognition.SrgsGrammar.SrgsRule> <xref:System.Speech.Recognition.SrgsGrammar.SrgsOneOf> <xref:System.Speech.Recognition.SrgsGrammar.SrgsItem> <xref:System.Speech.Recognition.SrgsGrammar.SrgsRuleRef> 、 <xref:System.Speech.Recognition.SrgsGrammar.SrgsSemanticInterpretationTag> 和 <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken> ）来生成语法。 您还可以从现有的与 <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> SRGS 兼容的 XML 语法文件、实例 <xref:System.Speech.Recognition.SrgsGrammar.SrgsRule> 或实例构造实例 <xref:System.Speech.Recognition.GrammarBuilder> 。  
  
 <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument>创建对象后，可以将其加载到 <xref:System.Speech.Recognition.Grammar> 对象或由编译 <xref:System.Speech.Recognition.SrgsGrammar.SrgsGrammarCompiler> ，使其能够被 <xref:System.Speech.Recognition.Grammar> 对象读取。  
  
 有关详细信息和示例，请参阅在[系统语音编程 .NET Framework 指南](https://docs.microsoft.com/previous-versions/office/developer/speech-technologies/hh361625(v%3doffice.14))中[使用 SrgsGrammar 创建语法](https://docs.microsoft.com/previous-versions/office/developer/speech-technologies/hh361680(v%3doffice.14))。  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Speech.Recognition.Grammar" />
    <altmember cref="T:System.Speech.Recognition.SrgsGrammar.SrgsGrammarCompiler" />
    <related type="Article" href="https://docs.microsoft.com/previous-versions/office/developer/speech-technologies/hh361680(v%3doffice.14)">使用 SrgsGrammar 创建语法</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 通过使用类的构造函数 <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> ，您可以从 <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> 一个 <xref:System.Speech.Recognition.GrammarBuilder> 、或对象创建一个 <xref:System.Speech.Recognition.SrgsGrammar.SrgsRule> <xref:System.Xml.XmlReader> 包含 XML 格式语法路径的字符串，也可以启动的空白实例 <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> 。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SrgsDocument ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SrgsGrammar.SrgsDocument.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SrgsDocument();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此构造函数创建一个空的 <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> 实例。 若要在空的实例中生成语法 <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> ，请添加表示 SRGS 元素的类的实例，例如 <xref:System.Speech.Recognition.SrgsGrammar.SrgsRule> 、、 <xref:System.Speech.Recognition.SrgsGrammar.SrgsRuleRef> <xref:System.Speech.Recognition.SrgsGrammar.SrgsOneOf> 和 <xref:System.Speech.Recognition.SrgsGrammar.SrgsItem> 。  
  
   
  
## Examples  
 下面的示例创建一个 <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> 对象，然后创建一个名为的公共规则 `winnerRule` 。 然后创建一个 <xref:System.Speech.Recognition.SrgsGrammar.SrgsItem> ，它包含字符串 "已赢得世界杯的国家/地区"，并将此项添加到规则的属性中 <xref:System.Speech.Recognition.SrgsGrammar.SrgsRule.Elements%2A> 。 然后，该示例创建两个规则 (`ruleEurope` 和 `ruleSAmerica`) ，其中每个规则都是 <xref:System.Speech.Recognition.SrgsGrammar.SrgsOneOf> 包含三个对象的对象 <xref:System.Speech.Recognition.SrgsGrammar.SrgsItem> 。 然后，创建另一个 <xref:System.Speech.Recognition.SrgsGrammar.SrgsOneOf> 对象，该对象包含 <xref:System.Speech.Recognition.SrgsGrammar.SrgsRuleRef> 引用和的 `ruleEurope` 对象 `ruleSAmerica` 。 然后，新的 <xref:System.Speech.Recognition.SrgsGrammar.SrgsOneOf> 对象将添加到的 <xref:System.Speech.Recognition.SrgsGrammar.SrgsRule.Elements%2A> 属性中 `winnerRule` 。 此后，所有三个规则 (`winnerRule` 、 `ruleEurope` 和 `ruleSAmerica`) 都添加到的 <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Rules%2A> 属性中 <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> 。 最后，三个规则编译为语法的二进制表示形式。  
  
```csharp  
public void WorldSoccerWinners ()  
{  
  
  // Create an SrgsDocument, create a new rule  
  // and set its scope to public.  
  SrgsDocument document = new SrgsDocument();  
  SrgsRule winnerRule = new SrgsRule("WorldCupWinner");  
  winnerRule.Scope = SrgsRuleScope.Public;  
  
  // Add the introduction.  
  winnerRule.Elements.Add(new SrgsItem("A nation that has won the World Cup is: "));  
  
  // Create the rule for the European nations.  
  SrgsOneOf oneOfEurope = new SrgsOneOf(new SrgsItem[] {new SrgsItem("England"),   
    new SrgsItem("France"), new SrgsItem("Germany"), new SrgsItem("Italy")});  
  SrgsRule ruleEurope = (new SrgsRule("EuropeanNations", new SrgsElement[] {oneOfEurope}));  
  
  // Create the rule for the South American nations.  
  SrgsOneOf oneOfSAmerica = new SrgsOneOf(new SrgsItem[] {new SrgsItem("Argentina"),   
    new SrgsItem("Brazil"), new SrgsItem("Uruguay")});  
  SrgsRule ruleSAmerica = (new SrgsRule("SouthAmericanNations", new SrgsElement[] {oneOfSAmerica}));  
  
  // Add references to winnerRule for ruleEurope and ruleSAmerica.  
  winnerRule.Elements.Add(new SrgsOneOf(new SrgsItem[] {(new SrgsItem   
    (new SrgsRuleRef(ruleEurope))), new SrgsItem(new SrgsRuleRef(ruleSAmerica))}));  
  
  // Add all the rules to the document and make winnerRule   
  // the root rule of the document.  
  document.Rules.Add(new SrgsRule[] {winnerRule, ruleEurope, ruleSAmerica});  
  document.Root = winnerRule;  
  
  String fileName = Path.GetTempFileName();  
  using (FileStream stream = new FileStream(fileName, FileMode.Create))   
  {   
  
    // Compile the grammar to a binary format.  
    SrgsGrammarCompiler.Compile(document, stream);   
  }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SrgsDocument (System.Speech.Recognition.GrammarBuilder builder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Speech.Recognition.GrammarBuilder builder) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SrgsGrammar.SrgsDocument.#ctor(System.Speech.Recognition.GrammarBuilder)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (builder As GrammarBuilder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SrgsDocument(System::Speech::Recognition::GrammarBuilder ^ builder);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.SrgsGrammar.SrgsDocument : System.Speech.Recognition.GrammarBuilder -&gt; System.Speech.Recognition.SrgsGrammar.SrgsDocument" Usage="new System.Speech.Recognition.SrgsGrammar.SrgsDocument builder" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="builder" Type="System.Speech.Recognition.GrammarBuilder" />
      </Parameters>
      <Docs>
        <param name="builder">用于创建此 <see cref="T:System.Speech.Recognition.GrammarBuilder" /> 实例的 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> 对象。</param>
        <summary>从 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> 对象初始化 <see cref="T:System.Speech.Recognition.GrammarBuilder" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的示例 <xref:System.Speech.Recognition.GrammarBuilder> 使用对象在实例中生成语法 <xref:System.Speech.Recognition.Choices> 。 然后，它 <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> 从对象创建 <xref:System.Speech.Recognition.GrammarBuilder> 。  
  
```csharp  
GrammarBuilder builder = null;  
  
// Create new Choices objects and add countries/regions, and create GrammarBuilder objects.  
Choices choicesEurope = new Choices(new string[] { "England", "France", "Germany", "Italy" });  
GrammarBuilder europe = new GrammarBuilder(choicesEurope);  
  
Choices choicesSAmerica = new Choices(new string[] { "Argentina", "Brazil", "Uruguay" });  
GrammarBuilder sAmerica = new GrammarBuilder(choicesSAmerica);  
  
Choices worldCupWinnerChoices = new Choices(new GrammarBuilder[] {choicesEurope, choicesSAmerica});  
  
// Create new GrammarBuilder from a Choices object.  
builder = new GrammarBuilder(worldCupWinnerChoices);  
  
// Create an SrgsDocument object from a GrammarBuilder object.  
SrgsDocument document = new SrgsDocument(builder);  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="builder" /> 为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SrgsDocument (System.Speech.Recognition.SrgsGrammar.SrgsRule grammarRootRule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Speech.Recognition.SrgsGrammar.SrgsRule grammarRootRule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SrgsGrammar.SrgsDocument.#ctor(System.Speech.Recognition.SrgsGrammar.SrgsRule)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (grammarRootRule As SrgsRule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SrgsDocument(System::Speech::Recognition::SrgsGrammar::SrgsRule ^ grammarRootRule);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.SrgsGrammar.SrgsDocument : System.Speech.Recognition.SrgsGrammar.SrgsRule -&gt; System.Speech.Recognition.SrgsGrammar.SrgsDocument" Usage="new System.Speech.Recognition.SrgsGrammar.SrgsDocument grammarRootRule" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="grammarRootRule" Type="System.Speech.Recognition.SrgsGrammar.SrgsRule" />
      </Parameters>
      <Docs>
        <param name="grammarRootRule"><see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> 对象中的 <see langword="root rule" />。</param>
        <summary>初始化 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> 类的新实例并指定一个  <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsRule" /> 对象成为语法的根规则。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此构造函数将指定规则添加到 <xref:System.Speech.Recognition.SrgsGrammar.SrgsRulesCollection> 对象的， <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> 并将其设置为 <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Root%2A> 语法规则。  
  
   
  
## Examples  
 下面的示例创建两个规则 (`chooseCities` 并 `destCities`) 为航班选择源和目标城市。 此示例 <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> 使用 `chooseCities` 规则作为参数来初始化实例。 该示例将规则集合的内容和根规则的名称写入控制台。  
  
```csharp  
// Create a rule that contains a list of destination cities.  
SrgsRule destCities = new SrgsRule("Destination");  
SrgsOneOf toCities = new SrgsOneOf(new string[] { "New York", "Seattle", "Denver" });  
destCities.Add(toCities);  
  
// Create a list of origin cities and supporting phrases.  
SrgsOneOf fromCities = new SrgsOneOf(new SrgsItem[] {   
  new SrgsItem("Dallas"), new SrgsItem("Miami"), new SrgsItem("Chicago") });  
SrgsItem intro = new SrgsItem("I want to fly from");  
SrgsItem to = new SrgsItem("to");  
  
// Create the root rule of the grammar, and assemble the components.  
SrgsRule chooseCities = new SrgsRule("Trip");  
chooseCities.Add(intro);  
chooseCities.Add(fromCities);  
chooseCities.Add(to);  
chooseCities.Add(new SrgsRuleRef(destCities));  
  
// Create the SrgsDocument and specify the root rule to add.  
SrgsDocument bookFlight = new SrgsDocument(chooseCities);  
  
// Add the rule for the destination cities to the document's rule collection.  
bookFlight.Rules.Add(new SrgsRule[] { destCities });  
  
// Display the contents of the Rules collection and the name of the root rule.  
foreach (SrgsRule rule in bookFlight.Rules)  
{  
  Console.WriteLine("Rule " + rule.Id + " is in the rules collection");  
}  
Console.WriteLine("Root Rule " + bookFlight.Root.Id);  
  
// Create a Grammar object and load it to the recognizer.  
Grammar g = new Grammar(bookFlight);  
g.Name = ("City Chooser");  
recognizer.LoadGrammarAsync(g);  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="grammarRootRule" /> 为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SrgsDocument (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SrgsGrammar.SrgsDocument.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SrgsDocument(System::String ^ path);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.SrgsGrammar.SrgsDocument : string -&gt; System.Speech.Recognition.SrgsGrammar.SrgsDocument" Usage="new System.Speech.Recognition.SrgsGrammar.SrgsDocument path" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">SRGS XML 文件的位置。</param>
        <summary>初始化指定填充 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> 实例的 XML 文档的位置的  <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的示例 <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> 从名为 "srgsDocumentFile.xml" 的文件中创建一个新的。  
  
```csharp  
string srgsDocumentFile = Path.Combine(Path.GetTempPath(), "srgsDocumentFile.xml");  
SrgsDocument document = null;  
  
if (File.Exists(srgsDocumentFile))  
   document = new SrgsDocument(srgsDocumentFile);  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="path" /> 是一个空字符串。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SrgsDocument (System.Xml.XmlReader srgsGrammar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Xml.XmlReader srgsGrammar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SrgsGrammar.SrgsDocument.#ctor(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (srgsGrammar As XmlReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SrgsDocument(System::Xml::XmlReader ^ srgsGrammar);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.SrgsGrammar.SrgsDocument : System.Xml.XmlReader -&gt; System.Speech.Recognition.SrgsGrammar.SrgsDocument" Usage="new System.Speech.Recognition.SrgsGrammar.SrgsDocument srgsGrammar" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="srgsGrammar" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="srgsGrammar">与 XML <see cref="T:System.Xml.XmlReader" /> 实例创建的 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> 对象。</param>
        <summary>初始化 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> 类的新实例，该类来自引用 XML 格式语法文件的  <see cref="T:System.Xml.XmlReader" /> 的实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的示例 <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> 从 <xref:System.Xml.XmlReader> 引用文件 "srgsDocumentFile.xml" 的实例创建的一个新实例。  
  
```csharp  
string srgsDocumentFile = Path.Combine(Path.GetTempPath(), "srgsDocumentFile.xml");  
SrgsDocument document = null;  
  
if (File.Exists(srgsDocumentFile))  
{  
  XmlReader reader = XmlReader.Create(srgsDocumentFile);  
  document = new SrgsDocument(reader);  
  reader.Close();  
}  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="srgsGrammar" /> 为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="AssemblyReferences">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.Collection&lt;string&gt; AssemblyReferences { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.Collection`1&lt;string&gt; AssemblyReferences" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.AssemblyReferences" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AssemblyReferences As Collection(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::ObjectModel::Collection&lt;System::String ^&gt; ^ AssemblyReferences { System::Collections::ObjectModel::Collection&lt;System::String ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AssemblyReferences : System.Collections.ObjectModel.Collection&lt;string&gt;" Usage="System.Speech.Recognition.SrgsGrammar.SrgsDocument.AssemblyReferences" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.Collection&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> 的程序集引用信息。</summary>
        <value><see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.AssemblyReferences" /> 属性返回包含程序集列表的字符串集合引用。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CodeBehind">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.Collection&lt;string&gt; CodeBehind { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.Collection`1&lt;string&gt; CodeBehind" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.CodeBehind" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CodeBehind As Collection(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::ObjectModel::Collection&lt;System::String ^&gt; ^ CodeBehind { System::Collections::ObjectModel::Collection&lt;System::String ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CodeBehind : System.Collections.ObjectModel.Collection&lt;string&gt;" Usage="System.Speech.Recognition.SrgsGrammar.SrgsDocument.CodeBehind" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.Collection&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> 实例的代码隐藏信息。</summary>
        <value><see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.CodeBehind" /> 属性返回之后包含列表代码文档的字符串集合。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Culture">
      <MemberSignature Language="C#" Value="public System.Globalization.CultureInfo Culture { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.CultureInfo Culture" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Culture" />
      <MemberSignature Language="VB.NET" Value="Public Property Culture As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Globalization::CultureInfo ^ Culture { System::Globalization::CultureInfo ^ get(); void set(System::Globalization::CultureInfo ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Culture : System.Globalization.CultureInfo with get, set" Usage="System.Speech.Recognition.SrgsGrammar.SrgsDocument.Culture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> 的区域性信息。</summary>
        <value>包含有关当前区域性信息的 <see cref="T:System.Globalization.CultureInfo" /> 的 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> 对象。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Microsoft Windows 和 Speech API 接受所有有效的语言-国家/地区代码。 若要使用属性中指定的语言执行语音识别 <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Culture%2A> ，则必须安装支持该语言-国家/地区代码的语音识别引擎。 Microsoft Windows 7 随附的语音识别引擎使用以下语言-国家/地区代码。  
  
-   半 GB。 英语（英国）  
  
-   en-us。 英语（美国）  
  
-   取消。 德语（德国）  
  
-   es。 西班牙语（西班牙）  
  
-   fr-fr。 法语（法国）  
  
-   ja-jp。 日语（日本）  
  
-   zh-chs-CN。 中文（中国）  
  
-   zh-chs-幼圆。 中文（台湾）  
  
 还允许使用两个字母的语言代码，例如 "en"、"fr" 或 "es"。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">赋予 <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Culture" /> 的值为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">赋予 <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Culture" /> 的值为 <see cref="P:System.Globalization.CultureInfo.InvariantCulture" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="Debug">
      <MemberSignature Language="C#" Value="public bool Debug { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Debug" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Debug" />
      <MemberSignature Language="VB.NET" Value="Public Property Debug As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Debug { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Debug : bool with get, set" Usage="System.Speech.Recognition.SrgsGrammar.SrgsDocument.Debug" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置行号是否应添加至内联脚本。</summary>
        <value>如果行号应将添加在用于调试目的， <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Debug" /> 属性返回 <see langword="true" /> ;否则该属性返回 <see langword="false" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImportNamespaces">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.Collection&lt;string&gt; ImportNamespaces { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.Collection`1&lt;string&gt; ImportNamespaces" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.ImportNamespaces" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ImportNamespaces As Collection(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::ObjectModel::Collection&lt;System::String ^&gt; ^ ImportNamespaces { System::Collections::ObjectModel::Collection&lt;System::String ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ImportNamespaces : System.Collections.ObjectModel.Collection&lt;string&gt;" Usage="System.Speech.Recognition.SrgsGrammar.SrgsDocument.ImportNamespaces" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.Collection&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取当前 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> 实例的相关命名空间。</summary>
        <value><see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.ImportNamespaces" />实例中，<see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> 属性返回之后包含列表代码文档的字符串集合。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Language">
      <MemberSignature Language="C#" Value="public string Language { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Language" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Language" />
      <MemberSignature Language="VB.NET" Value="Public Property Language As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Language { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Language : string with get, set" Usage="System.Speech.Recognition.SrgsGrammar.SrgsDocument.Language" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置用于 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> 类中的内联代码的编程语言。</summary>
        <value><see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Language" /> 属性返回 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> 当前设置的编程语言。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Mode">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.SrgsGrammar.SrgsGrammarMode Mode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Speech.Recognition.SrgsGrammar.SrgsGrammarMode Mode" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Mode" />
      <MemberSignature Language="VB.NET" Value="Public Property Mode As SrgsGrammarMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Speech::Recognition::SrgsGrammar::SrgsGrammarMode Mode { System::Speech::Recognition::SrgsGrammar::SrgsGrammarMode get(); void set(System::Speech::Recognition::SrgsGrammar::SrgsGrammarMode value); };" />
      <MemberSignature Language="F#" Value="member this.Mode : System.Speech.Recognition.SrgsGrammar.SrgsGrammarMode with get, set" Usage="System.Speech.Recognition.SrgsGrammar.SrgsDocument.Mode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.SrgsGrammar.SrgsGrammarMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> 类的模式。</summary>
        <value><see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />的标识模式。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Mode%2A>属性返回的成员，该成员 <xref:System.Speech.Recognition.SrgsGrammar.SrgsGrammarMode> 确定需要的输入类型 <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> 。 这两个可能的值 `Voice` 用于语音输入，并 `Dtmf` 用于输入通常与电话关联的双色调多频率 (DTMF) 音。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.SrgsGrammar.SrgsGrammarMode" />
      </Docs>
    </Member>
    <Member MemberName="Namespace">
      <MemberSignature Language="C#" Value="public string Namespace { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Namespace" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Namespace" />
      <MemberSignature Language="VB.NET" Value="Public Property Namespace As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Namespace { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Namespace : string with get, set" Usage="System.Speech.Recognition.SrgsGrammar.SrgsDocument.Namespace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> 类的命名空间。</summary>
        <value><see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Namespace" /> 属性返回当前 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> 的命名空间。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PhoneticAlphabet">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.SrgsGrammar.SrgsPhoneticAlphabet PhoneticAlphabet { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Speech.Recognition.SrgsGrammar.SrgsPhoneticAlphabet PhoneticAlphabet" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.PhoneticAlphabet" />
      <MemberSignature Language="VB.NET" Value="Public Property PhoneticAlphabet As SrgsPhoneticAlphabet" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Speech::Recognition::SrgsGrammar::SrgsPhoneticAlphabet PhoneticAlphabet { System::Speech::Recognition::SrgsGrammar::SrgsPhoneticAlphabet get(); void set(System::Speech::Recognition::SrgsGrammar::SrgsPhoneticAlphabet value); };" />
      <MemberSignature Language="F#" Value="member this.PhoneticAlphabet : System.Speech.Recognition.SrgsGrammar.SrgsPhoneticAlphabet with get, set" Usage="System.Speech.Recognition.SrgsGrammar.SrgsDocument.PhoneticAlphabet" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.SrgsGrammar.SrgsPhoneticAlphabet</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> 类的注音字母表。</summary>
        <value>返回必须用于在 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsToken" /> 对象中指定自定义发音的语音字母表。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 拼音字母由电话组成，这些电话包括字母、数字或字符，有时也会组合在一起。 每个音素描述独特的语音。 这与拉丁字母不同，其中任何字母都可能表示多个口述声音。 想像一下单词“candy”和“cease”中字母“c”的不同发音，或者字母组合“th”在单词“thing”和“those”中的不同发音。  
  
 在 IPA 中，可以使用三种拼音字母表中的任意一种来指定自定义发音：国际电话字母表 (") "、"通用"、" (通用"、") " 或 "SAPI" 电话集。 指定的拼音字母表确定将使用哪一电话号码来定义对象的内嵌发音 <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken> 。 中指定的电话 <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Pronunciation%2A> 必须与中指定的拼音字母匹配 <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument.PhoneticAlphabet%2A> 。  
  
 有关详细信息，请参阅 [词典和拼音字母表](https://docs.microsoft.com/previous-versions/office/developer/speech-technologies/hh378335(v%3doffice.14)) 。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Root">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.SrgsGrammar.SrgsRule Root { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Speech.Recognition.SrgsGrammar.SrgsRule Root" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Root" />
      <MemberSignature Language="VB.NET" Value="Public Property Root As SrgsRule" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Speech::Recognition::SrgsGrammar::SrgsRule ^ Root { System::Speech::Recognition::SrgsGrammar::SrgsRule ^ get(); void set(System::Speech::Recognition::SrgsGrammar::SrgsRule ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Root : System.Speech.Recognition.SrgsGrammar.SrgsRule with get, set" Usage="System.Speech.Recognition.SrgsGrammar.SrgsDocument.Root" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.SrgsGrammar.SrgsRule</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> 的根规则。</summary>
        <value>返回指定为 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> 的根规则的规则。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在 <xref:System.Speech.Recognition.SrgsGrammar.SrgsRule> <xref:System.Speech.Recognition.SrgsGrammar.SrgsRulesCollection> 将对象设置为 **根规则**之前，该对象必须已在文档中。  
  
 还可以 <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> 通过使用 <xref:System.Speech.Recognition.SrgsGrammar.SrgsRule> 对象作为构造函数的参数来设置对象的根规则 <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> 。  
  
   
  
## Examples  
 下面的示例创建一个名为的规则 `winnerRule` ，然后创建一个 <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> 名为的对象 `document` 。 然后，该示例调用 <xref:System.Speech.Recognition.SrgsGrammar.SrgsRulesCollection.Add%2A> 方法将规则添加到文档中。 最后，该示例将文档的 <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Root%2A> 属性设置为 `winnerRule` ，从而使其成为 `root rule` 由对象定义的语法 <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> 。  
  
```csharp  
SrgsRule winnerRule = new SrgsRule("WorldCupWinner");  
winnerRule.Scope = SrgsRuleScope.Public;  
  
SrgsDocument document = new SrgsDocument();  
  
document.Rules.Add(winnerRule);  
document.Root = winnerRule;   
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.SrgsGrammar.SrgsRule" />
      </Docs>
    </Member>
    <Member MemberName="Rules">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.SrgsGrammar.SrgsRulesCollection Rules { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Speech.Recognition.SrgsGrammar.SrgsRulesCollection Rules" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Rules" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Rules As SrgsRulesCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Speech::Recognition::SrgsGrammar::SrgsRulesCollection ^ Rules { System::Speech::Recognition::SrgsGrammar::SrgsRulesCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Rules : System.Speech.Recognition.SrgsGrammar.SrgsRulesCollection" Usage="System.Speech.Recognition.SrgsGrammar.SrgsDocument.Rules" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.SrgsGrammar.SrgsRulesCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取目前已为 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> 类定义的规则的集合。</summary>
        <value>返回为 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> 对象定义的规则。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以 <xref:System.Speech.Recognition.SrgsGrammar.SrgsRule> <xref:System.Speech.Recognition.SrgsGrammar.SrgsRulesCollection> 通过对属性使用方法，将对象添加到中 <xref:System.Speech.Recognition.SrgsGrammar.SrgsRulesCollection.Add%2A> <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Rules%2A> 。 如果初始化 <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> 对象并将 <xref:System.Speech.Recognition.SrgsGrammar.SrgsRule> 对象指定为参数，则会自动将 <xref:System.Speech.Recognition.SrgsGrammar.SrgsRule> 添加到的 <xref:System.Speech.Recognition.SrgsGrammar.SrgsRulesCollection> <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> 。  
  
   
  
## Examples  
 下面的示例创建一个语法，用于识别 "已赢得世界杯的国家" 的短语，后跟赢得世界杯的国家/地区的名称。 该示例创建一个 <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> 对象，然后创建一个名为的公共规则 `winnerRule` 。 将字符串添加到规则后 `winnerRule` ，该示例将创建另外两个规则 (`ruleEurope` 和 `ruleSAmerica`) ，每个规则包含一个国家/地区列表。 使用 <xref:System.Speech.Recognition.SrgsGrammar.SrgsRulesCollection.Add%2A> 方法，此示例将所有三个规则 (`winnerRule` 、 `ruleEurope` 和 `ruleSAmerica`) 添加到 <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Rules%2A> 的属性 <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> 。  
  
```csharp  
public void WorldSoccerWinners ()  
{  
  
  // Create an SrgsDocument, create a new rule  
  // and set its scope to public.  
  SrgsDocument document = new SrgsDocument();  
  SrgsRule winnerRule = new SrgsRule("WorldCupWinner");  
  winnerRule.Scope = SrgsRuleScope.Public;  
  
  // Add the introduction.  
  winnerRule.Elements.Add(new SrgsItem("A nation that has won the World Cup is: "));  
  
  // Create the rule for the European nations.  
  SrgsOneOf oneOfEurope = new SrgsOneOf(new SrgsItem[] {new SrgsItem("England"),   
    new SrgsItem("France"), new SrgsItem("Germany"), new SrgsItem("Italy")});  
  SrgsRule ruleEurope = (new SrgsRule("EuropeanNations", new SrgsElement[] {oneOfEurope}));  
  
  // Create the rule for the South American nations.  
  SrgsOneOf oneOfSAmerica = new SrgsOneOf(new SrgsItem[] {new SrgsItem("Argentina"),   
    new SrgsItem("Brazil"), new SrgsItem("Uruguay")});  
  SrgsRule ruleSAmerica = (new SrgsRule("SouthAmericanNations", new SrgsElement[] {oneOfSAmerica}));  
  
  // Add references to winnerRule for ruleEurope and ruleSAmerica.  
  winnerRule.Elements.Add(new SrgsOneOf(new SrgsItem[] {(new SrgsItem   
    (new SrgsRuleRef(ruleEurope))), new SrgsItem(new SrgsRuleRef(ruleSAmerica))}));  
  
  // Add all the rules to the document and make winnerRule   
  // the root rule of the document.  
  document.Rules.Add(new SrgsRule[] {winnerRule, ruleEurope, ruleSAmerica});  
  document.Root = winnerRule;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.SrgsGrammar.SrgsRulesCollection" />
      </Docs>
    </Member>
    <Member MemberName="Script">
      <MemberSignature Language="C#" Value="public string Script { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Script" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Script" />
      <MemberSignature Language="VB.NET" Value="Public Property Script As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Script { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Script : string with get, set" Usage="System.Speech.Recognition.SrgsGrammar.SrgsDocument.Script" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置  <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> 类的 .NET 脚本语音。</summary>
        <value>对于 <see langword="Script" /> 类，<see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> 属性始终返回当前的.NET 脚本语言。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  此属性已弃用。 不再建议使用它。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">已尝试将该属性设置为空 <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Script" />。</exception>
        <exception cref="T:System.ArgumentException">试图将 <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Script" /> 属性设置为空字符串。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteSrgs">
      <MemberSignature Language="C#" Value="public void WriteSrgs (System.Xml.XmlWriter srgsGrammar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteSrgs(class System.Xml.XmlWriter srgsGrammar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SrgsGrammar.SrgsDocument.WriteSrgs(System.Xml.XmlWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteSrgs (srgsGrammar As XmlWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteSrgs(System::Xml::XmlWriter ^ srgsGrammar);" />
      <MemberSignature Language="F#" Value="member this.WriteSrgs : System.Xml.XmlWriter -&gt; unit" Usage="srgsDocument.WriteSrgs srgsGrammar" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="srgsGrammar" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="srgsGrammar">用于编写 <see cref="T:System.Xml.XmlWriter" /> 实例的 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />。</param>
        <summary>将 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> 对象的内容写入符合[语音识别语法规范 (SRGS) 1.0 版](https://go.microsoft.com/fwlink/?LinkId=201761)的 XML 格式语法文件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的示例创建一个 <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> 对象，然后创建一个名为的公共规则 `winnerRule` 。 然后创建一个 <xref:System.Speech.Recognition.SrgsGrammar.SrgsItem> ，它包含字符串 "已赢得世界杯的国家/地区"，并将此项添加到规则的属性中 <xref:System.Speech.Recognition.SrgsGrammar.SrgsRule.Elements%2A> 。 然后，该示例创建两个规则 (`ruleEurope` 和 `ruleSAmerica`) ，其中每个规则都是 <xref:System.Speech.Recognition.SrgsGrammar.SrgsOneOf> 包含三个对象的对象 <xref:System.Speech.Recognition.SrgsGrammar.SrgsItem> 。 然后，创建另一个 <xref:System.Speech.Recognition.SrgsGrammar.SrgsOneOf> 对象，该对象包含 <xref:System.Speech.Recognition.SrgsGrammar.SrgsRuleRef> 引用和的 `ruleEurope` 对象 `ruleSAmerica` 。 然后，新的 <xref:System.Speech.Recognition.SrgsGrammar.SrgsOneOf> 对象将添加到的 <xref:System.Speech.Recognition.SrgsGrammar.SrgsRule.Elements%2A> 属性中 `winnerRule` 。 此后，所有三个规则 (`winnerRule` 、 `ruleEurope` 和 `ruleSAmerica`) 都将添加到 <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Rules%2A> 的属性中 <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> 。 最后，此示例将创建一个空的 XML 文件和一个的实例 <xref:System.Xml.XmlWriter> 。  <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument.WriteSrgs%2A>方法使用实例将 <xref:System.Xml.XmlWriter> 的内容写入 <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> XML 文件。  
  
```csharp  
public void WorldSoccerWinners ()  
{  
  
  // Create an SrgsDocument, create a new rule  
  // and set its scope to public.  
  SrgsDocument document = new SrgsDocument();  
  SrgsRule winnerRule = new SrgsRule("WorldCupWinner");  
  winnerRule.Scope = SrgsRuleScope.Public;  
  
  // Add the introduction.  
  winnerRule.Elements.Add(new SrgsItem("A nation that has won the World Cup is: "));  
  
  // Create the rule for the European nations.  
  SrgsOneOf oneOfEurope = new SrgsOneOf(new SrgsItem[] {new SrgsItem("England"),   
    new SrgsItem("France"), new SrgsItem("Germany"), new SrgsItem("Italy")});  
  SrgsRule ruleEurope = (new SrgsRule("EuropeanNations", new SrgsElement[] {oneOfEurope}));  
  
  // Create the rule for the South American nations.  
  SrgsOneOf oneOfSAmerica = new SrgsOneOf(new SrgsItem[] {new SrgsItem("Argentina"),   
    new SrgsItem("Brazil"), new SrgsItem("Uruguay")});  
  SrgsRule ruleSAmerica = (new SrgsRule("SouthAmericanNations", new SrgsElement[] {oneOfSAmerica}));  
  
  // Add references to winnerRule for ruleEurope and ruleSAmerica.  
  winnerRule.Elements.Add(new SrgsOneOf(new SrgsItem[] {(new SrgsItem   
    (new SrgsRuleRef(ruleEurope))), new SrgsItem(new SrgsRuleRef(ruleSAmerica))}));  
  
  // Add all the rules to the document and make winnerRule   
  // the root rule of the document.  
  document.Rules.Add(new SrgsRule[] {winnerRule, ruleEurope, ruleSAmerica});  
  document.Root = winnerRule;  
  
  // Create a string object with the path to the file to use.  
  string srgsDocumentFile = Path.Combine(Path.GetTempPath(), "srgsDocumentFile.xml");  
  
  // Create an XmlWriter object and pass the file path.  
  XmlWriter writer = XmlWriter.Create(srgsDocumentFile);  
  
  // Write the contents of the XmlWriter object to an SRGS-compatible XML file.  
  document.WriteSrgs(writer);  
  writer.Close();  
}  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="srgsGrammar" /> 为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="XmlBase">
      <MemberSignature Language="C#" Value="public Uri XmlBase { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Uri XmlBase" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.XmlBase" />
      <MemberSignature Language="VB.NET" Value="Public Property XmlBase As Uri" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Uri ^ XmlBase { Uri ^ get(); void set(Uri ^ value); };" />
      <MemberSignature Language="F#" Value="member this.XmlBase : Uri with get, set" Usage="System.Speech.Recognition.SrgsGrammar.SrgsDocument.XmlBase" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Uri</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> 的基 URL 类。</summary>
        <value><see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> 的当前基 URI。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument.XmlBase%2A> 属性获取用于解析对象中的相对 Uri 的值 <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> 。 假设的值 <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument.XmlBase%2A> 为 `http://www.contoso.com/` ，并且 <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> 包含对其他文档的相对规则引用，例如 `SrgsRuleRef("ExternalGrammar.grxml")` 。 这会创建外部文档的以下绝对路径： `http://www.contoso.com/ExternalGrammar.grxml` 。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
