<Type Name="Directory" FullName="System.IO.Directory">
  <Metadata><Meta Name="ms.openlocfilehash" Value="5bd2ea312013f1f185c26ffb70d89f9038caf829" /><Meta Name="ms.sourcegitcommit" Value="11d168140aa8fade0768c2a9dde3e3bcacfdfb7d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="05/27/2020" /><Meta Name="ms.locfileid" Value="83959278" /></Metadata><TypeSignature Language="C#" Value="public static class Directory" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit Directory extends System.Object" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="DocId" Value="T:System.IO.Directory" />
  <TypeSignature Language="VB.NET" Value="Public Class Directory" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="C++ CLI" Value="public ref class Directory abstract sealed" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="F#" Value="type Directory = class" />
  <TypeSignature Language="C#" Value="public sealed class Directory" FrameworkAlternate="netframework-1.1" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Directory extends System.Object" FrameworkAlternate="netframework-1.1" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Directory" FrameworkAlternate="netframework-1.1" />
  <TypeSignature Language="C++ CLI" Value="public ref class Directory sealed" FrameworkAlternate="netframework-1.1" />
  <AssemblyInfo>
    <AssemblyName>System.IO.FileSystem</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.IO.FileSystem" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>公开用于通过目录和子目录进行创建、移动和枚举的静态方法。 无法继承此类。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用 <xref:System.IO.Directory> 类执行典型操作，例如复制、移动、重命名、创建和删除目录。  
  
-   若要创建目录，请使用 <xref:System.IO.Directory.CreateDirectory%2A> 方法之一。  
  
-   若要删除目录，请使用 <xref:System.IO.Directory.Delete%2A> 方法之一。  
  
-   若要获取或设置应用程序的当前目录，请使用 <xref:System.IO.Directory.GetCurrentDirectory%2A> 或 <xref:System.IO.Directory.SetCurrentDirectory%2A> 方法。  
  
-   若要操作与创建、访问和写入目录有关的 <xref:System.DateTime> 信息，请使用 <xref:System.IO.Directory.SetLastAccessTime%2A> 和 <xref:System.IO.Directory.SetCreationTime%2A>等方法。  
  
 <xref:System.IO.Directory> 类的静态方法对所有方法执行安全检查。 如果要多次重用某个对象，请考虑使用 <xref:System.IO.DirectoryInfo> 的相应实例方法，因为并不总是需要安全检查。  
  
 如果只执行一个与目录相关的操作，则使用静态 <xref:System.IO.Directory> 方法（而不是相应的 <xref:System.IO.DirectoryInfo> 实例方法）可能更有效。 大多数 <xref:System.IO.Directory> 方法都需要正在操作的目录的路径。  
  
> [!NOTE]
>  在接受字符串 `path` 参数的成员中，该路径必须格式正确，否则会引发异常。 例如，如果路径是完全限定的，但以空格（"c：\temp"）开头，则路径字符串不会被剪裁，因此路径被视为格式不正确，并引发异常。 此外，路径或路径的组合不能完全限定两次。 例如，"c：\temp c：\windows" 也会引发异常。 使用接受路径字符串的方法时，请确保路径格式正确。 有关详细信息，请参阅<xref:System.IO.Path>.  
  
 在接受路径的成员中，路径可以引用文件或目录。 你可以使用服务器和共享名称的完整路径、相对路径或通用命名约定（UNC）路径。 例如，以下所有内容都是可接受的路径：  
  
-   Visual Basic 中的 "c：\\C#\MyDir" 或 "c:\MyDir"。  
  
-   Visual Basic 中的 "MyDir\\C#\MySubdir" 或 "MyDir\MySubDir"。  
  
-   \\中的 "\\\\\\\MyServer\\C#\MyShare" 或 "Visual Basic \MyServer\MyShare"。  
  
 默认情况下，将向所有用户授予对新目录的完全读/写访问权限。 但是，应用必须具有正确的安全性才能访问现有目录。  
  
 若要请求目录及其所有子目录的权限，请使用目录分隔符结束路径字符串。 （例如，"C：\Temp\\" 授予对 C:\Temp\ 及其所有子目录的访问权限。）若要只请求特定目录的权限，请以句点结束路径字符串。 （例如，"C：\Temp\\"。 仅向 C：\Temp\\（而不是其子目录）授予访问权限。）  
  
 在接受 `searchPattern` 参数的成员中，搜索字符串可以是原义字符和两个通配符的任意组合;\* 和？。 此参数不能识别正则表达式。 有关详细信息，请参阅 <xref:System.IO.Directory.EnumerateDirectories%28System.String%2CSystem.String%29> 方法或使用 `searchPattern` 参数的任何其他方法。  
  
 有关常见 i/o 任务的列表，请参阅[常见 I/o 任务](/dotnet/standard/io/common-i-o-tasks)。  
  
 <xref:System.IO.Directory> 和 <xref:System.IO.DirectoryInfo> 不支持在 [!INCLUDE[win8_appstore_long](~/includes/win8-appstore-long-md.md)] 应用中使用。 有关如何访问 [!INCLUDE[win8_appstore_long](~/includes/win8-appstore-long-md.md)] 应用中的文件和文件夹的信息，请参阅[访问数据和文件（Windows 应用商店应用）](https://msdn.microsoft.com/library/windows/apps/hh758319.aspx)。  
  
   
  
## Examples  
 以下示例演示了如何从目录中检索所有文本文件，并将其移动到新目录。 文件移动后，它们将不再存在于原始目录中。  
  
 [!code-csharp[System.IO.Directory#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Directory/CS/class2.cs#10)]
 [!code-vb[System.IO.Directory#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Directory/VB/class2.vb#10)]  
  
 下面的示例演示如何使用 <xref:System.IO.Directory.EnumerateFiles%2A> 方法从目录中检索文本文件的集合，然后在查询中使用该集合查找包含 "Example" 的所有行。  
  
 [!code-csharp[System.IO.Directory#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Directory/CS/class3.cs#11)]
 [!code-vb[System.IO.Directory#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Directory/VB/class3.vb#11)]  
  
 下面的示例演示如何将目录及其所有文件移动到新目录。 移动原始目录后，原始目录将不再存在。  
  
 [!code-csharp[System.IO.Directory#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Directory/CS/class6.cs#14)]
 [!code-vb[System.IO.Directory#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Directory/VB/class6.vb#14)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.IO.DriveInfo" />
    <altmember cref="T:System.IO.File" />
    <altmember cref="T:System.IO.DirectoryInfo" />
    <altmember cref="T:System.IO.FileInfo" />
    <altmember cref="T:System.IO.FileSystemWatcher" />
    <related type="Article" href="/dotnet/standard/io/">文件和流 I/O</related>
    <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file">如何：从文件读取文本</related>
    <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file">如何：向文件写入文本</related>
    <related type="Article" href="/dotnet/standard/io/how-to-read-and-write-to-a-newly-created-data-file">如何：对新建的数据文件进行读取和写入</related>
  </Docs>
  <Members>
    <MemberGroup MemberName="CreateDirectory">
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>在指定路径中创建所有目录。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateDirectory">
      <MemberSignature Language="C#" Value="public static System.IO.DirectoryInfo CreateDirectory (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.DirectoryInfo CreateDirectory(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.CreateDirectory(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateDirectory (path As String) As DirectoryInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::DirectoryInfo ^ CreateDirectory(System::String ^ path);" />
      <MemberSignature Language="F#" Value="static member CreateDirectory : string -&gt; System.IO.DirectoryInfo" Usage="System.IO.Directory.CreateDirectory path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.DirectoryInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">要创建的目录。</param>
        <summary>在指定路径中创建所有目录和子目录，除非它们已经存在。</summary>
        <returns>一个表示在指定路径的目录的对象。 无论指定路径的目录是否已经存在，都将返回此对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 将创建 `path` 中指定的任何和所有目录，除非它们已经存在或者 `path` 的某些部分无效。 如果该目录已存在，则此方法不会创建新目录，但会返回现有目录的 <xref:System.IO.DirectoryInfo> 对象。  
  
 `path` 参数指定目录路径而不是文件路径。  
  
 创建目录之前，从 `path` 参数的末尾删除尾随空格。  
  
 你可以在远程计算机上创建一个目录，该目录位于你对其具有写访问权限的共享上。 支持 UNC 路径;例如，你可以在 Visual Basic 中指定以下 `path`： `\\2009\Archives\December`，并在中C#指定 `\\\\2009\\Archives\\December`。  
  
 创建仅带有冒号字符的目录（:)不受支持，将导致引发 `NotSupportedException`。  
  
 在 Unix 系统上，使用正斜杠（/）作为路径分隔符。  
  
## Examples  
 
下面的示例创建并删除指定的目录：
  
[!code-cpp[Dir_CreateDir#1](~/samples/snippets/cpp/VS_Snippets_CLR/Dir_CreateDir/CPP/dir_createdir.cpp#1)]
[!code-csharp[Dir_CreateDir#1](~/samples/snippets/csharp/VS_Snippets_CLR/Dir_CreateDir/CS/dir_createdir.cs#1)]
[!code-vb[Dir_CreateDir#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Dir_CreateDir/VB/dir_createdir.vb#1)]  
  
若要在当前目录为*C:\Users\User1*时创建目录*C:\Users\User1\Public\Html* ，请使用以下任意调用来确保正确解释反斜杠：
  
```vb  
Directory.CreateDirectory("Public\Html")   
Directory.CreateDirectory("\Users\User1\Public\Html")   
Directory.CreateDirectory("c:\Users\User1\Public\Html")  
```  

```csharp  
Directory.CreateDirectory("Public\\Html");  
Directory.CreateDirectory("\\Users\\User1\\Public\\Html");  
Directory.CreateDirectory("c:\\Users\\User1\\Public\\Html");  
```  
  
```cpp
Directory::CreateDirectory("Public\\Html");  
Directory::CreateDirectory("\\Users\\User1\\Public\\Html");  
Directory::CreateDirectory("c:\\Users\\User1\\Public\\Html");  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><paramref name="path" /> 指定的目录是文件。  
  
-或- 
网络名称未知。</exception>
        <exception cref="T:System.UnauthorizedAccessException">调用方没有所要求的权限。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="path" /> 为长度为零的字符串，仅包含空格，或包含一个或多个无效字符。 你可以使用 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 方法查询无效字符。  
  
-或- 
 <paramref name="path" /> 的前缀仅为（或只包含）一个冒号字符 (:)。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定的路径和/或文件名超过了系统定义的最大长度。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">指定的路径无效（例如，它位于未映射的驱动器上）。</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="path" /> 包含不是驱动器标签（“C:\\”）的一部分的冒号字符 (:)。</exception>
        <altmember cref="T:System.IO.DirectoryInfo" />
        <related type="Article" href="/dotnet/standard/io/">文件和流 I/O</related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file">如何：从文件读取文本</related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file">如何：向文件写入文本</related>
      </Docs>
    </Member>
    <Member MemberName="CreateDirectory">
      <MemberSignature Language="C#" Value="public static System.IO.DirectoryInfo CreateDirectory (string path, System.Security.AccessControl.DirectorySecurity directorySecurity);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.DirectoryInfo CreateDirectory(string path, class System.Security.AccessControl.DirectorySecurity directorySecurity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.CreateDirectory(System.String,System.Security.AccessControl.DirectorySecurity)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateDirectory (path As String, directorySecurity As DirectorySecurity) As DirectoryInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::DirectoryInfo ^ CreateDirectory(System::String ^ path, System::Security::AccessControl::DirectorySecurity ^ directorySecurity);" />
      <MemberSignature Language="F#" Value="static member CreateDirectory : string * System.Security.AccessControl.DirectorySecurity -&gt; System.IO.DirectoryInfo" Usage="System.IO.Directory.CreateDirectory (path, directorySecurity)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.DirectoryInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="directorySecurity" Type="System.Security.AccessControl.DirectorySecurity" Index="1" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="path">要创建的目录。</param>
        <param name="directorySecurity">要应用于此目录的访问控制。</param>
        <summary>在指定路径中创建所有目录（除非已存在），并应用指定的 Windows 安全性。</summary>
        <returns>一个表示在指定路径的目录的对象。 无论指定路径的目录是否已经存在，都将返回此对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用此方法重载来创建具有访问控制的目录，因此在应用安全之前，无法访问该目录。  
  
 将创建 `path` 参数中指定的任何和所有目录，除非它们已经存在或 `path` 的某些部分无效。 `path` 参数指定目录路径而不是文件路径。 如果该目录已存在，则此方法不会创建新目录，但会返回现有目录的 <xref:System.IO.DirectoryInfo> 对象。  
  
 创建目录之前，从 `path` 参数的末尾删除尾随空格。  
  
 你可以在远程计算机上创建一个目录，该目录位于你对其具有写访问权限的共享上。 支持 UNC 路径;例如，你可以在 Visual Basic 中指定以下 `path`： `\\2009\Archives\December`，并在中C#指定 `\\\\2009\\Archives\\December`。  
  
 创建仅带有冒号字符的目录（:)不支持，并导致引发 `NotSupportedException`。  
  
   
  
## Examples  
 下面的示例创建一个新目录，其中包含两个用户帐户的访问规则。  
  
 [!code-csharp[System.IO.Directory#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Directory/CS/class7.cs#15)]
 [!code-vb[System.IO.Directory#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Directory/VB/class7.vb#15)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><paramref name="path" /> 指定的目录是文件。  
  
-或- 
网络名称未知。</exception>
        <exception cref="T:System.UnauthorizedAccessException">调用方没有所要求的权限。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="path" /> 为长度为零的字符串，仅包含空格，或包含一个或多个无效字符。 你可以使用 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 方法查询无效字符。  
  
-或- 
 <paramref name="path" /> 的前缀仅为（或只包含）一个冒号字符 (:)。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定的路径和/或文件名超过了系统定义的最大长度。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">指定的路径无效（例如，它位于未映射的驱动器上）。</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="path" /> 包含不是驱动器标签（“C:\\”）的一部分的冒号字符 (:)。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Delete">
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>删除指定目录及（可选地）删除其任意子目录。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Delete">
      <MemberSignature Language="C#" Value="public static void Delete (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Delete(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.Delete(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Delete (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Delete(System::String ^ path);" />
      <MemberSignature Language="F#" Value="static member Delete : string -&gt; unit" Usage="System.IO.Directory.Delete path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">要移除的空目录的名称。 此目录必须可写且为空。</param>
        <summary>从指定路径删除空目录。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法的行为与 <xref:System.IO.Directory.Delete%28System.String%2CSystem.Boolean%29> 为第二个参数指定的 `false` 的行为相同。  
  
 `path` 参数可以指定相对或绝对路径信息。 相对路径信息被解释为相对于当前工作目录。 若要获取当前工作目录，请参阅 <xref:System.IO.Directory.GetCurrentDirectory%2A>。  
  
 删除目录之前，从 `path` 参数的末尾删除尾随空格。  
  
 如果在 `path` 参数中指定的目录包含文件或子目录，则此方法会引发 <xref:System.IO.IOException>。  
  
 `path` 参数不区分大小写。  
  
 在某些情况下，如果在文件资源管理器中打开指定的目录，则 <xref:System.IO.Directory.Delete%2A> 方法可能无法将其删除。  
  
   
  
## Examples  
 下面的示例演示如何创建新的目录和子目录，然后仅删除子目录。  
  
 [!code-csharp[System.IO.Directory.Delete#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.directory.delete/cs/class1.cs#1)]
 [!code-vb[System.IO.Directory.Delete#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.directory.delete/vb/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">存在具有相同名称和 <paramref name="path" /> 指定的位置的文件。  
  
-或- 
该目录是应用程序的当前工作目录。  
  
-或- 
<paramref name="path" /> 指定的目录不为空。  
  
-或- 
该目录为只读或包含一个只读文件。  
  
-或- 
另一个进程正在使用该目录。</exception>
        <exception cref="T:System.UnauthorizedAccessException">调用方没有所要求的权限。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="path" /> 为长度为零的字符串，仅包含空格，或包含一个或多个无效字符。 你可以使用 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 方法查询无效字符。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定的路径和/或文件名超过了系统定义的最大长度。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">不存在或找不到 <paramref name="path" />。  
  
-或- 
指定的路径无效（例如，它位于未映射的驱动器上）。</exception>
        <related type="Article" href="/dotnet/standard/io/">文件和流 I/O</related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file">如何：从文件读取文本</related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file">如何：向文件写入文本</related>
      </Docs>
    </Member>
    <Member MemberName="Delete">
      <MemberSignature Language="C#" Value="public static void Delete (string path, bool recursive);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Delete(string path, bool recursive) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.Delete(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Delete (path As String, recursive As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Delete(System::String ^ path, bool recursive);" />
      <MemberSignature Language="F#" Value="static member Delete : string * bool -&gt; unit" Usage="System.IO.Directory.Delete (path, recursive)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="recursive" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="path">要删除的目录的名称。</param>
        <param name="recursive">若要删除 <paramref name="path" /> 中的目录、子目录和文件，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
        <summary>删除指定的目录，并删除该目录中的所有子目录和文件（如果表示）。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `path` 参数可以指定相对或绝对路径信息。 相对路径信息被解释为相对于当前工作目录。 若要获取当前工作目录，请参阅 <xref:System.IO.Directory.GetCurrentDirectory%2A>。  
  
 删除目录之前，从 `path` 参数的末尾删除尾随空格。  
  
 `path` 参数不区分大小写。  
  
 如果 `recursive` 参数 `true`，则用户必须对当前目录以及所有子目录具有写入权限。  
  
 删除包含重分析点的目录（如符号链接或装入点）时，此方法的行为稍有不同。 如果重新分析点是目录（如装入点），则会将其卸载，并删除装入点。 此方法不会通过重新分析点进行递归。 如果重新分析点是文件的符号链接，则将删除重新分析点，而不是符号链接的目标。  
  
 在某些情况下，如果在文件资源管理器中打开指定的目录，则 <xref:System.IO.Directory.Delete%2A> 方法可能无法将其删除。  
  
   
  
## Examples  
 下面的示例演示如何在子目录中创建新的目录、子目录和文件，然后以递归方式删除所有新项。  
  
 [!code-csharp[System.IO.Directory.Delete#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.directory.delete/cs/class2.cs#2)]
 [!code-vb[System.IO.Directory.Delete#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.directory.delete/vb/class2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">存在具有相同名称和 <paramref name="path" /> 指定的位置的文件。  
  
-或- 
<paramref name="path" /> 指定的目录为只读，或者 <paramref name="recursive" /> 的值为 <see langword="false" />，且 <paramref name="path" /> 不是空目录。  
  
-或- 
该目录是应用程序的当前工作目录。  
  
-或- 
该目录包含一个只读文件。  
  
-或- 
另一个进程正在使用该目录。</exception>
        <exception cref="T:System.UnauthorizedAccessException">调用方没有所要求的权限。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="path" /> 为长度为零的字符串，仅包含空格，或包含一个或多个无效字符。 你可以使用 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 方法查询无效字符。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定的路径和/或文件名超过了系统定义的最大长度。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">不存在或找不到 <paramref name="path" />。  
  
-或- 
指定的路径无效（例如，它位于未映射的驱动器上）。</exception>
        <related type="Article" href="/dotnet/standard/io/">文件和流 I/O</related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file">如何：从文件读取文本</related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file">如何：向文件写入文本</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="EnumerateDirectories">
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>返回满足指定条件的目录完整名称的可枚举集合。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="EnumerateDirectories">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;string&gt; EnumerateDirectories (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;string&gt; EnumerateDirectories(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.EnumerateDirectories(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EnumerateDirectories (path As String) As IEnumerable(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::IEnumerable&lt;System::String ^&gt; ^ EnumerateDirectories(System::String ^ path);" />
      <MemberSignature Language="F#" Value="static member EnumerateDirectories : string -&gt; seq&lt;string&gt;" Usage="System.IO.Directory.EnumerateDirectories path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="path">要搜索的目录的相对或绝对路径。 此字符串不区分大小写。</param>
        <summary>返回指定路径中的目录完整名称的可枚举集合。</summary>
        <returns>一个可枚举集合，它包含目录中由 <paramref name="path" /> 指定的目录的完整名称（包括路径）。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 可以在 `path` 参数中指定相对或绝对路径信息。 相对路径信息被解释为相对于当前工作目录，您可以使用 <xref:System.IO.Directory.GetCurrentDirectory%2A> 方法来确定。 返回的目录名称以你在 `path` 参数中提供的值为前缀。 例如，如果在 `path` 参数中提供了相对路径，则返回的目录名称将包含相对路径。  
  
 <xref:System.IO.Directory.EnumerateDirectories%2A> 和 <xref:System.IO.Directory.GetDirectories%2A> 方法的区别如下：使用 <xref:System.IO.Directory.EnumerateDirectories%2A>时，可以在返回整个集合之前开始枚举名称的集合;使用 <xref:System.IO.Directory.GetDirectories%2A>时，必须等待返回整个名称数组，然后才能访问数组。 因此，在处理多个文件和目录时，<xref:System.IO.Directory.EnumerateDirectories%2A> 可能更高效。  
  
 未缓存返回的集合;对集合中的 <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> 的每个调用都将启动一个新枚举。  
  
   
  
## Examples  
 下面的示例枚举指定路径中的顶层目录。  
  
 [!code-csharp[System.IO.EnumDirs1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.enumdirs1/cs/program.cs#1)]
 [!code-vb[System.IO.EnumDirs1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.enumdirs1/vb/program.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="path" /> 是一个长度为零的字符串，仅包含空格，或包含无效字符。 你可以使用 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 方法查询无效字符。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path" /> 无效，如引用未映射的驱动器。</exception>
        <exception cref="T:System.IO.IOException"><paramref name="path" /> 是一个文件名。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定的路径和/或文件名超过了系统定义的最大长度。</exception>
        <exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。</exception>
        <exception cref="T:System.UnauthorizedAccessException">调用方没有所要求的权限。</exception>
      </Docs>
    </Member>
    <Member MemberName="EnumerateDirectories">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;string&gt; EnumerateDirectories (string path, string searchPattern);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;string&gt; EnumerateDirectories(string path, string searchPattern) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.EnumerateDirectories(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EnumerateDirectories (path As String, searchPattern As String) As IEnumerable(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::IEnumerable&lt;System::String ^&gt; ^ EnumerateDirectories(System::String ^ path, System::String ^ searchPattern);" />
      <MemberSignature Language="F#" Value="static member EnumerateDirectories : string * string -&gt; seq&lt;string&gt;" Usage="System.IO.Directory.EnumerateDirectories (path, searchPattern)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="searchPattern" Type="System.String" Index="1" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="path">要搜索的目录的相对或绝对路径。 此字符串不区分大小写。</param>
        <param name="searchPattern">要与 <paramref name="path" /> 中的目录名称匹配的搜索字符串成。  此参数可以包含有效文本路径和通配符（* 和 ?）的组合，但不支持正则表达式。</param>
        <summary>返回指定路径中与搜索模式匹配的目录完整名称的可枚举集合。</summary>
        <returns><paramref name="path" /> 指定且与指定的搜索模式相匹配的目录中的文件的全名（包括路径）的可枚举集合。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `searchPattern` 可以是文字和通配符的组合，但不支持正则表达式。 `searchPattern`中允许使用以下通配符说明符。  
  
|通配符说明符|匹配|  
|------------------------|-------------|  
|\* （星号）|此位置中的零个或多个字符。|  
|? （问号）|此位置中的零个或一个字符。|  
  
 通配符以外的字符为原义字符。 例如，`searchPattern` 字符串 "\*t" 搜索 `path` 以字母 "t" 结尾的所有名称。 `searchPattern` 字符串 "s\*" 搜索 `path` 以字母 "s" 开头的所有名称。  
  
 `searchPattern` 不能以两个句点（"..."）结束或包含两个句点（"..."），后跟 <xref:System.IO.Path.DirectorySeparatorChar> 或 <xref:System.IO.Path.AltDirectorySeparatorChar>，也不能包含任何无效字符。 你可以使用 <xref:System.IO.Path.GetInvalidPathChars%2A> 方法查询无效字符。  
  
 可以在 `path` 参数中指定相对或绝对路径信息。 相对路径信息被解释为相对于当前工作目录，您可以使用 <xref:System.IO.Directory.GetCurrentDirectory%2A> 方法来确定。 返回的目录名称以你在 `path` 参数中提供的值为前缀。 例如，如果在 `path` 参数中提供了相对路径，则返回的目录名称将包含相对路径。  
  
 <xref:System.IO.Directory.EnumerateDirectories%2A> 和 <xref:System.IO.Directory.GetDirectories%2A> 方法的区别如下：使用 <xref:System.IO.Directory.EnumerateDirectories%2A>时，可以在返回整个集合之前开始枚举名称的集合;使用 <xref:System.IO.Directory.GetDirectories%2A>时，必须等待返回整个名称数组，然后才能访问数组。 因此，在处理多个文件和目录时，<xref:System.IO.Directory.EnumerateDirectories%2A> 可能更高效。  
  
 未缓存返回的集合;对集合中的 <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> 的每个调用都将启动一个新枚举。  
  
   
  
## Examples  
 下面的示例在指定路径中枚举与指定的搜索模式匹配的顶层目录。  
  
 [!code-csharp[System.IO.EnumDirs2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.enumdirs2/cs/program.cs#1)]
 [!code-vb[System.IO.EnumDirs2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.enumdirs2/vb/program.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="path" /> 是一个长度为零的字符串，仅包含空格，或包含无效字符。 你可以使用 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 方法查询无效字符。  
  
-或- 
 <paramref name="searchPattern" /> 不包含有效模式。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> 为 <see langword="null" />。  
  
-或- 
 <paramref name="searchPattern" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path" /> 无效，如引用未映射的驱动器。</exception>
        <exception cref="T:System.IO.IOException"><paramref name="path" /> 是一个文件名。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定的路径和/或文件名超过了系统定义的最大长度。</exception>
        <exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。</exception>
        <exception cref="T:System.UnauthorizedAccessException">调用方没有所要求的权限。</exception>
      </Docs>
    </Member>
    <Member MemberName="EnumerateDirectories">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;string&gt; EnumerateDirectories (string path, string searchPattern, System.IO.EnumerationOptions enumerationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;string&gt; EnumerateDirectories(string path, string searchPattern, class System.IO.EnumerationOptions enumerationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.EnumerateDirectories(System.String,System.String,System.IO.EnumerationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EnumerateDirectories (path As String, searchPattern As String, enumerationOptions As EnumerationOptions) As IEnumerable(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::IEnumerable&lt;System::String ^&gt; ^ EnumerateDirectories(System::String ^ path, System::String ^ searchPattern, System::IO::EnumerationOptions ^ enumerationOptions);" />
      <MemberSignature Language="F#" Value="static member EnumerateDirectories : string * string * System.IO.EnumerationOptions -&gt; seq&lt;string&gt;" Usage="System.IO.Directory.EnumerateDirectories (path, searchPattern, enumerationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="searchPattern" Type="System.String" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="enumerationOptions" Type="System.IO.EnumerationOptions" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="path">要搜索的目录的相对或绝对路径。 此字符串不区分大小写。</param>
        <param name="searchPattern">要与 <paramref name="path" /> 中的目录名称匹配的搜索字符串成。  此参数可以包含有效文本路径和通配符（* 和 ?）的组合，但不支持正则表达式。</param>
        <param name="enumerationOptions">描述要使用的搜索和枚举配置的对象。</param>
        <summary>返回指定路径中与搜索模式匹配的目录完整名称的可枚举集合，还可搜索子目录。</summary>
        <returns>一个可枚举集合，它包含 <paramref name="path" /> 指定的目录中与指定的搜索模式和枚举选项匹配的目录的完整名称（包括路径）。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `searchPattern` 可以是文字和通配符的组合，但不支持正则表达式。 `searchPattern`中允许使用以下通配符说明符。

|通配符说明符|匹配|
|------------------------|-------------|
|\* （星号）|此位置中的零个或多个字符。|
|? （问号）|此位置正好有一个字符。|

 通配符以外的字符为原义字符。 例如，`searchPattern` 字符串 "\*t" 搜索 `path` 以字母 "t" 结尾的所有名称。 `searchPattern` 字符串 "s\*" 搜索 `path` 以字母 "s" 开头的所有名称。

 `searchPattern` 不能以两个句点（"..."）结束或包含两个句点（"..."），后跟 <xref:System.IO.Path.DirectorySeparatorChar> 或 <xref:System.IO.Path.AltDirectorySeparatorChar>，也不能包含任何无效字符。 你可以使用 <xref:System.IO.Path.GetInvalidPathChars%2A> 方法查询无效字符。

 可以在 `path` 参数中指定相对或绝对路径信息。 相对路径信息被解释为相对于当前工作目录，您可以使用 <xref:System.IO.Directory.GetCurrentDirectory%2A> 方法来确定。 返回的目录名称以你在 `path` 参数中提供的值为前缀。 例如，如果在 `path` 参数中提供了相对路径，则返回的目录名称将包含相对路径。

 <xref:System.IO.Directory.EnumerateDirectories%2A> 和 <xref:System.IO.Directory.GetDirectories%2A> 方法的区别如下：使用 <xref:System.IO.Directory.EnumerateDirectories%2A>时，可以在返回整个集合之前开始枚举名称的集合;使用 <xref:System.IO.Directory.GetDirectories%2A>时，必须等待返回整个名称数组，然后才能访问数组。 因此，在处理多个文件和目录时，<xref:System.IO.Directory.EnumerateDirectories%2A> 可能更高效。

 未缓存返回的集合;对集合中的 <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> 的每个调用都将启动一个新枚举。
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="path" /> 是一个长度为零的字符串，仅包含空格，或包含无效字符。 你可以使用 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 方法查询无效字符。  
  
-或- 
 <paramref name="searchPattern" /> 不包含有效模式。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> 或 <paramref name="searchPattern" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="searchOption" /> 不是有效的 <see cref="T:System.IO.SearchOption" /> 值。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path" /> 无效，如引用未映射的驱动器。</exception>
        <exception cref="T:System.IO.IOException"><paramref name="path" /> 是一个文件名。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定的路径和/或文件名超过了系统定义的最大长度。</exception>
        <exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。</exception>
        <exception cref="T:System.UnauthorizedAccessException">调用方没有所要求的权限。</exception>
      </Docs>
    </Member>
    <Member MemberName="EnumerateDirectories">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;string&gt; EnumerateDirectories (string path, string searchPattern, System.IO.SearchOption searchOption);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;string&gt; EnumerateDirectories(string path, string searchPattern, valuetype System.IO.SearchOption searchOption) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.EnumerateDirectories(System.String,System.String,System.IO.SearchOption)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EnumerateDirectories (path As String, searchPattern As String, searchOption As SearchOption) As IEnumerable(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::IEnumerable&lt;System::String ^&gt; ^ EnumerateDirectories(System::String ^ path, System::String ^ searchPattern, System::IO::SearchOption searchOption);" />
      <MemberSignature Language="F#" Value="static member EnumerateDirectories : string * string * System.IO.SearchOption -&gt; seq&lt;string&gt;" Usage="System.IO.Directory.EnumerateDirectories (path, searchPattern, searchOption)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="searchPattern" Type="System.String" Index="1" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="searchOption" Type="System.IO.SearchOption" Index="2" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="path">要搜索的目录的相对或绝对路径。 此字符串不区分大小写。</param>
        <param name="searchPattern">要与 <paramref name="path" /> 中的目录名称匹配的搜索字符串成。  此参数可以包含有效文本路径和通配符（* 和 ?）的组合，但不支持正则表达式。</param>
        <param name="searchOption">指定搜索操作是应仅包含当前目录还是应包含所有子目录的枚举值之一。 默认值是 <see cref="F:System.IO.SearchOption.TopDirectoryOnly" />。</param>
        <summary>返回指定路径中与搜索模式匹配的目录完整名称的可枚举集合，还可搜索子目录。</summary>
        <returns>一个可枚举集合，它包含 <paramref name="path" /> 指定的目录中与指定的搜索模式和搜索选项匹配的目录的完整名称（包括路径）。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `searchPattern` 可以是文字和通配符的组合，但不支持正则表达式。 `searchPattern`中允许使用以下通配符说明符。  
  
|通配符说明符|匹配|  
|------------------------|-------------|  
|\* （星号）|此位置中的零个或多个字符。|  
|? （问号）|此位置正好有一个字符。|  
  
 通配符以外的字符为原义字符。 例如，`searchPattern` 字符串 "\*t" 搜索 `path` 以字母 "t" 结尾的所有名称。 `searchPattern` 字符串 "s\*" 搜索 `path` 以字母 "s" 开头的所有名称。  
  
 `searchPattern` 不能以两个句点（"..."）结束或包含两个句点（"..."），后跟 <xref:System.IO.Path.DirectorySeparatorChar> 或 <xref:System.IO.Path.AltDirectorySeparatorChar>，也不能包含任何无效字符。 你可以使用 <xref:System.IO.Path.GetInvalidPathChars%2A> 方法查询无效字符。  
  
 可以在 `path` 参数中指定相对或绝对路径信息。 相对路径信息被解释为相对于当前工作目录，您可以使用 <xref:System.IO.Directory.GetCurrentDirectory%2A> 方法来确定。 返回的目录名称以你在 `path` 参数中提供的值为前缀。 例如，如果在 `path` 参数中提供了相对路径，则返回的目录名称将包含相对路径。  
  
 <xref:System.IO.Directory.EnumerateDirectories%2A> 和 <xref:System.IO.Directory.GetDirectories%2A> 方法的区别如下：使用 <xref:System.IO.Directory.EnumerateDirectories%2A>时，可以在返回整个集合之前开始枚举名称的集合;使用 <xref:System.IO.Directory.GetDirectories%2A>时，必须等待返回整个名称数组，然后才能访问数组。 因此，在处理多个文件和目录时，<xref:System.IO.Directory.EnumerateDirectories%2A> 可能更高效。  
  
 未缓存返回的集合;对集合中的 <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> 的每个调用都将启动一个新枚举。  
  
   
  
## Examples  
 下面的示例在指定路径中枚举与指定的搜索模式匹配的目录。 它使用 `searchOption` 参数来指定搜索中应包括所有子目录。  
  
 [!code-csharp[System.IO.EnumDirs3#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.enumdirs3/cs/program.cs#1)]
 [!code-vb[System.IO.EnumDirs3#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.enumdirs3/vb/program.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="path" /> 是一个长度为零的字符串，仅包含空格，或包含无效字符。 你可以使用 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 方法查询无效字符。  
  
-或- 
 <paramref name="searchPattern" /> 不包含有效模式。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> 为 <see langword="null" />。  
  
-或- 
 <paramref name="searchPattern" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="searchOption" /> 不是有效的 <see cref="T:System.IO.SearchOption" /> 值。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path" /> 无效，如引用未映射的驱动器。</exception>
        <exception cref="T:System.IO.IOException"><paramref name="path" /> 是一个文件名。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定的路径和/或文件名超过了系统定义的最大长度。</exception>
        <exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。</exception>
        <exception cref="T:System.UnauthorizedAccessException">调用方没有所要求的权限。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="EnumerateFiles">
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>返回满足指定条件的完整文件名的可枚举集合。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="EnumerateFiles">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;string&gt; EnumerateFiles (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;string&gt; EnumerateFiles(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.EnumerateFiles(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EnumerateFiles (path As String) As IEnumerable(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::IEnumerable&lt;System::String ^&gt; ^ EnumerateFiles(System::String ^ path);" />
      <MemberSignature Language="F#" Value="static member EnumerateFiles : string -&gt; seq&lt;string&gt;" Usage="System.IO.Directory.EnumerateFiles path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="path">要搜索的目录的相对或绝对路径。 此字符串不区分大小写。</param>
        <summary>返回指定路径中的完整文件名的可枚举集合。</summary>
        <returns>一个可枚举集合，它包含目录中 <paramref name="path" /> 指定的文件的完整名称（包括路径）。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 可以指定具有 `path` 参数的相对路径信息。 相对路径信息被解释为相对于当前工作目录，您可以使用 <xref:System.IO.Directory.GetCurrentDirectory%2A> 方法来确定。  
  
 <xref:System.IO.Directory.EnumerateFiles%2A> 和 <xref:System.IO.Directory.GetFiles%2A> 方法的区别如下：使用 <xref:System.IO.Directory.EnumerateFiles%2A>时，可以在返回整个集合之前开始枚举名称的集合;使用 <xref:System.IO.Directory.GetFiles%2A>时，必须等待返回整个名称数组，然后才能访问数组。 因此，在处理多个文件和目录时，<xref:System.IO.Directory.EnumerateFiles%2A> 可能更高效。  
  
 未缓存返回的集合;对集合中的 <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> 的每个调用都将启动一个新枚举。  
  
   
  
## Examples  
 下面的示例演示如何检索目录中的所有文件并将其移到新目录。 文件移动后，它们将不再存在于原始目录中。  
  
 [!code-csharp[System.IO.Directory#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Directory/CS/class4.cs#12)]
 [!code-vb[System.IO.Directory#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Directory/VB/class4.vb#12)]  
  
 下面的示例将枚举指定目录中的文件，读取文件的每一行，并在包含字符串 "欧洲" 时显示行。  
  
 [!code-csharp[System.IO.Directory.EnumFiles#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.directory.enumfiles/cs/program.cs#1)]
 [!code-vb[System.IO.Directory.EnumFiles#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.directory.enumfiles/vb/module1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="path" /> 是一个长度为零的字符串，仅包含空格，或包含无效字符。 你可以使用 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 方法查询无效字符。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path" /> 无效，如引用未映射的驱动器。</exception>
        <exception cref="T:System.IO.IOException"><paramref name="path" /> 是一个文件名。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定的路径和/或文件名超过了系统定义的最大长度。</exception>
        <exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。</exception>
        <exception cref="T:System.UnauthorizedAccessException">调用方没有所要求的权限。</exception>
      </Docs>
    </Member>
    <Member MemberName="EnumerateFiles">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;string&gt; EnumerateFiles (string path, string searchPattern);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;string&gt; EnumerateFiles(string path, string searchPattern) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.EnumerateFiles(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EnumerateFiles (path As String, searchPattern As String) As IEnumerable(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::IEnumerable&lt;System::String ^&gt; ^ EnumerateFiles(System::String ^ path, System::String ^ searchPattern);" />
      <MemberSignature Language="F#" Value="static member EnumerateFiles : string * string -&gt; seq&lt;string&gt;" Usage="System.IO.Directory.EnumerateFiles (path, searchPattern)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="searchPattern" Type="System.String" Index="1" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="path">要搜索的目录的相对或绝对路径。 此字符串不区分大小写。</param>
        <param name="searchPattern">要与 <paramref name="path" /> 中的文件名匹配的搜索字符串。  此参数可以包含有效文本路径和通配符（* 和 ?）的组合，但不支持正则表达式。</param>
        <summary>返回指定路径中与搜索模式匹配的完整文件名的可枚举集合。</summary>
        <returns><paramref name="path" /> 指定且与指定的搜索模式相匹配的目录中的文件的全名（包括路径）的可枚举集合。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `searchPattern` 可以是文字和通配符的组合，但不支持正则表达式。 `searchPattern`中允许使用以下通配符说明符。  
  
|通配符说明符|匹配|  
|------------------------|-------------|  
|\* （星号）|此位置中的零个或多个字符。|  
|? （问号）|此位置中的零个或一个字符。|  
  
 通配符以外的字符为原义字符。 例如，`searchPattern` 字符串 "\*t" 搜索 `path` 以字母 "t" 结尾的所有名称。 `searchPattern` 字符串 "s\*" 搜索 `path` 以字母 "s" 开头的所有名称。  
  
> [!NOTE]
>  如果在 `searchPattern` 如 "\*.txt" 中使用星号通配符，则指定扩展中的字符数将影响搜索，如下所示：  
>   
> -   如果指定的扩展长度恰好为三个字符，则该方法将返回扩展名以指定扩展名开头的文件。 例如，"\*.xls" 同时返回 "node.js" 和 "node.js"。  
> -   在所有其他情况下，该方法将返回完全与指定扩展名匹配的文件。 例如，"\*" 将返回 "file.ai"，而不是 "node.js"。  
>   
>  使用问号通配符时，此方法只返回与指定文件扩展名匹配的文件。 例如，给定两个文件： "file1" 和 "txtother"，在目录中，"文件？" 的搜索模式。txt "只返回第一个文件，而" file\*.txt "的搜索模式返回这两个文件。  
  
 `searchPattern` 不能以两个句点（"..."）结束或包含两个句点（"..."），后跟 <xref:System.IO.Path.DirectorySeparatorChar> 或 <xref:System.IO.Path.AltDirectorySeparatorChar>，也不能包含任何无效字符。 你可以使用 <xref:System.IO.Path.GetInvalidPathChars%2A> 方法查询无效字符。  
  
 可以指定具有 `path` 参数的相对路径信息。 相对路径信息被解释为相对于当前工作目录，您可以使用 <xref:System.IO.Directory.GetCurrentDirectory%2A> 方法来确定。  
  
 <xref:System.IO.Directory.EnumerateFiles%2A> 和 <xref:System.IO.Directory.GetFiles%2A> 方法的区别如下：使用 <xref:System.IO.Directory.EnumerateFiles%2A>时，可以在返回整个集合之前开始枚举名称的集合;使用 <xref:System.IO.Directory.GetFiles%2A>时，必须等待返回整个名称数组，然后才能访问数组。 因此，在处理多个文件和目录时，<xref:System.IO.Directory.EnumerateFiles%2A> 可能更高效。  
  
 未缓存返回的集合;对集合中的 <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> 的每个调用都将启动一个新枚举。  
  
   
  
## Examples  
 下面的示例演示如何检索目录中的所有文本文件，并将其移动到新目录。 文件移动后，它们将不再存在于原始目录中。  
  
 [!code-csharp[System.IO.Directory#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Directory/CS/class2.cs#10)]
 [!code-vb[System.IO.Directory#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Directory/VB/class2.vb#10)]  
  
 下面的示例将枚举具有 .txt 扩展名的指定目录中的文件，并读取该文件的每一行，如果该行包含字符串 "欧洲"，则会显示该行。  
  
 [!code-csharp[System.IO.Directory.EnumFiles2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.directory.enumfiles2/cs/program.cs#1)]
 [!code-vb[System.IO.Directory.EnumFiles2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.directory.enumfiles2/vb/module1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="path" /> 是一个长度为零的字符串，仅包含空格，或包含无效字符。 你可以使用 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 方法查询无效字符。  
  
-或- 
 <paramref name="searchPattern" /> 不包含有效模式。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> 为 <see langword="null" />。  
  
-或- 
 <paramref name="searchPattern" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path" /> 无效，如引用未映射的驱动器。</exception>
        <exception cref="T:System.IO.IOException"><paramref name="path" /> 是一个文件名。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定的路径和/或文件名超过了系统定义的最大长度。</exception>
        <exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。</exception>
        <exception cref="T:System.UnauthorizedAccessException">调用方没有所要求的权限。</exception>
      </Docs>
    </Member>
    <Member MemberName="EnumerateFiles">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;string&gt; EnumerateFiles (string path, string searchPattern, System.IO.EnumerationOptions enumerationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;string&gt; EnumerateFiles(string path, string searchPattern, class System.IO.EnumerationOptions enumerationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.EnumerateFiles(System.String,System.String,System.IO.EnumerationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EnumerateFiles (path As String, searchPattern As String, enumerationOptions As EnumerationOptions) As IEnumerable(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::IEnumerable&lt;System::String ^&gt; ^ EnumerateFiles(System::String ^ path, System::String ^ searchPattern, System::IO::EnumerationOptions ^ enumerationOptions);" />
      <MemberSignature Language="F#" Value="static member EnumerateFiles : string * string * System.IO.EnumerationOptions -&gt; seq&lt;string&gt;" Usage="System.IO.Directory.EnumerateFiles (path, searchPattern, enumerationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="searchPattern" Type="System.String" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="enumerationOptions" Type="System.IO.EnumerationOptions" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="path">要搜索的目录的相对或绝对路径。 此字符串不区分大小写。</param>
        <param name="searchPattern">要与 <paramref name="path" /> 中的文件名匹配的搜索字符串。  此参数可以包含有效文本路径和通配符（* 和 ?）的组合，但不支持正则表达式。</param>
        <param name="enumerationOptions">描述要使用的搜索和枚举配置的对象。</param>
        <summary>返回指定路径中与搜索模式和枚举选项匹配的完整文件名的可枚举集合，还可以搜索子目录。</summary>
        <returns>一个可枚举集合，它包含 <paramref name="path" /> 指定的目录中与指定的搜索模式和枚举选项匹配的文件的完整名称（包括路径）。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `searchPattern` 可以是文字和通配符的组合，但不支持正则表达式。 `searchPattern`中允许使用以下通配符说明符。

|通配符说明符|匹配|
|------------------------|-------------|
|\* （星号）|此位置中的零个或多个字符。|
|? （问号）|此位置中的零个或一个字符。|

 通配符以外的字符为原义字符。 例如，`searchPattern` 字符串 "\*t" 搜索 `path` 以字母 "t" 结尾的所有名称。 `searchPattern` 字符串 "s\*" 搜索 `path` 以字母 "s" 开头的所有名称。

> [!NOTE]
>  如果在 `searchPattern` 如 "\*.txt" 中使用星号通配符，则指定扩展中的字符数将影响搜索，如下所示：
> 
> -   如果指定的扩展长度恰好为三个字符，则该方法将返回扩展名以指定扩展名开头的文件。 例如，"\*.xls" 同时返回 "node.js" 和 "node.js"。
> -   在所有其他情况下，该方法将返回完全与指定扩展名匹配的文件。 例如，"\*" 将返回 "file.ai"，而不是 "node.js"。
> 
>  使用问号通配符时，此方法只返回与指定文件扩展名匹配的文件。 例如，给定两个文件： "file1" 和 "txtother"，在目录中，"文件？" 的搜索模式。txt "只返回第一个文件，而" file\*.txt "的搜索模式返回这两个文件。

 `searchPattern` 不能以两个句点（"..."）结束或包含两个句点（"..."），后跟 <xref:System.IO.Path.DirectorySeparatorChar> 或 <xref:System.IO.Path.AltDirectorySeparatorChar>，也不能包含任何无效字符。 你可以使用 <xref:System.IO.Path.GetInvalidPathChars%2A> 方法查询无效字符。

 可以指定具有 `path` 参数的相对路径信息。 相对路径信息被解释为相对于当前工作目录，您可以使用 <xref:System.IO.Directory.GetCurrentDirectory%2A> 方法来确定。

 <xref:System.IO.Directory.EnumerateFiles%2A> 和 <xref:System.IO.Directory.GetFiles%2A> 方法的区别如下：使用 <xref:System.IO.Directory.EnumerateFiles%2A>时，可以在返回整个集合之前开始枚举名称的集合;使用 <xref:System.IO.Directory.GetFiles%2A>时，必须等待返回整个名称数组，然后才能访问数组。 因此，在处理多个文件和目录时，<xref:System.IO.Directory.EnumerateFiles%2A> 可能更高效。

 未缓存返回的集合;对集合中的 <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> 的每个调用都将启动一个新枚举。
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="path" /> 是一个长度为零的字符串，仅包含空格，或包含无效字符。 你可以使用 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 方法查询无效字符。  
  
-或- 
 <paramref name="searchPattern" /> 不包含有效模式。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> 为 <see langword="null" />。  
  
-或- 
 <paramref name="searchPattern" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="searchOption" /> 不是有效的 <see cref="T:System.IO.SearchOption" /> 值。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path" /> 无效，如引用未映射的驱动器。</exception>
        <exception cref="T:System.IO.IOException"><paramref name="path" /> 是一个文件名。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定的路径和/或文件名超过了系统定义的最大长度。</exception>
        <exception cref="T:System.UnauthorizedAccessException">调用方没有所要求的权限。</exception>
      </Docs>
    </Member>
    <Member MemberName="EnumerateFiles">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;string&gt; EnumerateFiles (string path, string searchPattern, System.IO.SearchOption searchOption);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;string&gt; EnumerateFiles(string path, string searchPattern, valuetype System.IO.SearchOption searchOption) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.EnumerateFiles(System.String,System.String,System.IO.SearchOption)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EnumerateFiles (path As String, searchPattern As String, searchOption As SearchOption) As IEnumerable(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::IEnumerable&lt;System::String ^&gt; ^ EnumerateFiles(System::String ^ path, System::String ^ searchPattern, System::IO::SearchOption searchOption);" />
      <MemberSignature Language="F#" Value="static member EnumerateFiles : string * string * System.IO.SearchOption -&gt; seq&lt;string&gt;" Usage="System.IO.Directory.EnumerateFiles (path, searchPattern, searchOption)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="searchPattern" Type="System.String" Index="1" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="searchOption" Type="System.IO.SearchOption" Index="2" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="path">要搜索的目录的相对或绝对路径。 此字符串不区分大小写。</param>
        <param name="searchPattern">要与 <paramref name="path" /> 中的文件名匹配的搜索字符串。  此参数可以包含有效文本路径和通配符（* 和 ?）的组合，但不支持正则表达式。</param>
        <param name="searchOption">指定搜索操作是应仅包含当前目录还是应包含所有子目录的枚举值之一。 默认值是 <see cref="F:System.IO.SearchOption.TopDirectoryOnly" />。</param>
        <summary>返回指定路径中与搜索模式匹配的完整文件名的可枚举集合，还可以搜索子目录。</summary>
        <returns>一个可枚举集合，它包含 <paramref name="path" /> 指定的目录中与指定的搜索模式和搜索选项匹配的文件的完整名称（包括路径）。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `searchPattern` 可以是文字和通配符的组合，但不支持正则表达式。 `searchPattern`中允许使用以下通配符说明符。  
  
|通配符说明符|匹配|  
|------------------------|-------------|  
|\* （星号）|此位置中的零个或多个字符。|  
|? （问号）|此位置中的零个或一个字符。|  
  
 通配符以外的字符为原义字符。 例如，`searchPattern` 字符串 "\*t" 搜索 `path` 以字母 "t" 结尾的所有名称。 `searchPattern` 字符串 "s\*" 搜索 `path` 以字母 "s" 开头的所有名称。  
  
> [!NOTE]
>  如果在 `searchPattern` 如 "\*.txt" 中使用星号通配符，则指定扩展中的字符数将影响搜索，如下所示：  
>   
> -   如果指定的扩展长度恰好为三个字符，则该方法将返回扩展名以指定扩展名开头的文件。 例如，"\*.xls" 同时返回 "node.js" 和 "node.js"。  
> -   在所有其他情况下，该方法将返回完全与指定扩展名匹配的文件。 例如，"\*" 将返回 "file.ai"，而不是 "node.js"。  
>   
>  使用问号通配符时，此方法只返回与指定文件扩展名匹配的文件。 例如，给定两个文件： "file1" 和 "txtother"，在目录中，"文件？" 的搜索模式。txt "只返回第一个文件，而" file\*.txt "的搜索模式返回这两个文件。  
  
 `searchPattern` 不能以两个句点（"..."）结束或包含两个句点（"..."），后跟 <xref:System.IO.Path.DirectorySeparatorChar> 或 <xref:System.IO.Path.AltDirectorySeparatorChar>，也不能包含任何无效字符。 你可以使用 <xref:System.IO.Path.GetInvalidPathChars%2A> 方法查询无效字符。  
  
 可以指定具有 `path` 参数的相对路径信息。 相对路径信息被解释为相对于当前工作目录，您可以使用 <xref:System.IO.Directory.GetCurrentDirectory%2A> 方法来确定。  
  
 <xref:System.IO.Directory.EnumerateFiles%2A> 和 <xref:System.IO.Directory.GetFiles%2A> 方法的区别如下：使用 <xref:System.IO.Directory.EnumerateFiles%2A>时，可以在返回整个集合之前开始枚举名称的集合;使用 <xref:System.IO.Directory.GetFiles%2A>时，必须等待返回整个名称数组，然后才能访问数组。 因此，在处理多个文件和目录时，<xref:System.IO.Directory.EnumerateFiles%2A> 可能更高效。  
  
 未缓存返回的集合;对集合中的 <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> 的每个调用都将启动一个新枚举。  
  
   
  
## Examples  
 下面的示例演示如何检索目录及其子目录中的所有文本文件，并将其移动到新目录。 文件移动后，它们将不再存在于原始目录中。  
  
 [!code-csharp[System.IO.Directory#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Directory/CS/class5.cs#13)]
 [!code-vb[System.IO.Directory#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Directory/VB/class5.vb#13)]  
  
 下面的示例以递归方式枚举具有 .txt 扩展名的所有文件，读取文件的每一行，并在包含字符串 "Microsoft" 时显示行。  
  
 [!code-csharp[System.IO.Directory.EnumerateFiles#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.directory.enumeratefiles/cs/program.cs#1)]
 [!code-vb[System.IO.Directory.EnumerateFiles#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.directory.enumeratefiles/vb/program.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="path" /> 是一个长度为零的字符串，仅包含空格，或包含无效字符。 你可以使用 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 方法查询无效字符。  
  
-或- 
 <paramref name="searchPattern" /> 不包含有效模式。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> 为 <see langword="null" />。  
  
-或- 
 <paramref name="searchPattern" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="searchOption" /> 不是有效的 <see cref="T:System.IO.SearchOption" /> 值。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path" /> 无效，如引用未映射的驱动器。</exception>
        <exception cref="T:System.IO.IOException"><paramref name="path" /> 是一个文件名。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定的路径和/或文件名超过了系统定义的最大长度。</exception>
        <exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。</exception>
        <exception cref="T:System.UnauthorizedAccessException">调用方没有所要求的权限。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="EnumerateFileSystemEntries">
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>返回满足指定条件的文件系统项的可枚举集合。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="EnumerateFileSystemEntries">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;string&gt; EnumerateFileSystemEntries (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;string&gt; EnumerateFileSystemEntries(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.EnumerateFileSystemEntries(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EnumerateFileSystemEntries (path As String) As IEnumerable(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::IEnumerable&lt;System::String ^&gt; ^ EnumerateFileSystemEntries(System::String ^ path);" />
      <MemberSignature Language="F#" Value="static member EnumerateFileSystemEntries : string -&gt; seq&lt;string&gt;" Usage="System.IO.Directory.EnumerateFileSystemEntries path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="path">要搜索的目录的相对或绝对路径。 此字符串不区分大小写。</param>
        <summary>返回指定路径中的文件名和目录名的可枚举集合。</summary>
        <returns><paramref name="path" /> 指定的目录中的文件系统条目的可枚举集合。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 可以指定具有 `path` 参数的相对路径信息。 相对路径信息被解释为相对于当前工作目录，您可以使用 <xref:System.IO.Directory.GetCurrentDirectory%2A> 方法来确定。

 <xref:System.IO.Directory.EnumerateFileSystemEntries%2A> 和 <xref:System.IO.Directory.GetFileSystemEntries%2A> 方法的区别如下：使用 <xref:System.IO.Directory.EnumerateFileSystemEntries%2A>时，可以在返回整个集合之前，开始枚举条目的集合;使用 <xref:System.IO.Directory.GetFileSystemEntries%2A>时，必须等待返回整个项数组，然后才能访问数组。 因此，在处理多个文件和目录时，<xref:System.IO.Directory.EnumerateFiles%2A> 可能更高效。

 未缓存返回的集合;对集合中的 <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> 的每个调用都将启动一个新枚举。
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="path" /> 是一个长度为零的字符串，仅包含空格，或包含无效字符。 你可以使用 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 方法查询无效字符。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path" /> 无效，如引用未映射的驱动器。</exception>
        <exception cref="T:System.IO.IOException"><paramref name="path" /> 是一个文件名。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定的路径和/或文件名超过了系统定义的最大长度。</exception>
        <exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。</exception>
        <exception cref="T:System.UnauthorizedAccessException">调用方没有所要求的权限。</exception>
      </Docs>
    </Member>
    <Member MemberName="EnumerateFileSystemEntries">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;string&gt; EnumerateFileSystemEntries (string path, string searchPattern);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;string&gt; EnumerateFileSystemEntries(string path, string searchPattern) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.EnumerateFileSystemEntries(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EnumerateFileSystemEntries (path As String, searchPattern As String) As IEnumerable(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::IEnumerable&lt;System::String ^&gt; ^ EnumerateFileSystemEntries(System::String ^ path, System::String ^ searchPattern);" />
      <MemberSignature Language="F#" Value="static member EnumerateFileSystemEntries : string * string -&gt; seq&lt;string&gt;" Usage="System.IO.Directory.EnumerateFileSystemEntries (path, searchPattern)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="searchPattern" Type="System.String" Index="1" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="path">要搜索的目录的相对或绝对路径。 此字符串不区分大小写。</param>
        <param name="searchPattern">要与 <paramref name="path" /> 中的文件系统条目的名称进行匹配的搜索字符串。  此参数可以包含有效文本路径和通配符（* 和 ?）的组合，但不支持正则表达式。</param>
        <summary>返回指定路径中与搜索模式匹配的文件名和目录名的可枚举集合。</summary>
        <returns>由 <paramref name="path" /> 指定且与指定的搜索模式匹配的目录中的文件系统条目的可枚举集合。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `searchPattern` 可以是文字和通配符的组合，但不支持正则表达式。 `searchPattern`中允许使用以下通配符说明符。 
  
|通配符说明符|匹配|  
|------------------------|-------------|  
|\* （星号）|此位置中的零个或多个字符。|  
|? （问号）|此位置中的零个或一个字符。|  
  
 通配符以外的字符为原义字符。 例如，`searchPattern` 字符串 "\*t" 搜索 `path` 以字母 "t" 结尾的所有名称。 `searchPattern` 字符串 "s\*" 搜索 `path` 以字母 "s" 开头的所有名称。  
  
> [!NOTE]
>  如果在 `searchPattern` 如 "\*.txt" 中使用星号通配符，则指定扩展中的字符数将影响搜索，如下所示：  
>   
> -   如果指定的扩展长度恰好为三个字符，则该方法将返回扩展名以指定扩展名开头的文件。 例如，"\*.xls" 同时返回 "node.js" 和 "node.js"。  
> -   在所有其他情况下，该方法将返回完全与指定扩展名匹配的文件。 例如，"\*" 将返回 "file.ai"，而不是 "node.js"。  
>   
>  使用问号通配符时，此方法只返回与指定文件扩展名匹配的文件。 例如，给定两个文件： "file1" 和 "txtother"，在目录中，"文件？" 的搜索模式。txt "只返回第一个文件，而" file\*.txt "的搜索模式返回这两个文件。  
  
 `searchPattern` 不能以两个句点（"..."）结束或包含两个句点（"..."），后跟 <xref:System.IO.Path.DirectorySeparatorChar> 或 <xref:System.IO.Path.AltDirectorySeparatorChar>，也不能包含任何无效字符。 你可以使用 <xref:System.IO.Path.GetInvalidPathChars%2A> 方法查询无效字符。  
  
 可以指定具有 `path` 参数的相对路径信息。 相对路径信息被解释为相对于当前工作目录，您可以使用 <xref:System.IO.Directory.GetCurrentDirectory%2A> 方法来确定。  
  
 <xref:System.IO.Directory.EnumerateFileSystemEntries%2A> 和 <xref:System.IO.Directory.GetFileSystemEntries%2A> 方法的区别如下：使用 <xref:System.IO.Directory.EnumerateFileSystemEntries%2A>时，可以在返回整个集合之前，开始枚举条目的集合;使用 <xref:System.IO.Directory.GetFileSystemEntries%2A>时，必须等待返回整个项数组，然后才能访问数组。 因此，在处理多个文件和目录时，<xref:System.IO.Directory.EnumerateFiles%2A> 可能更高效。  
  
 未缓存返回的集合;对集合中的 <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> 的每个调用都将启动一个新枚举。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="path" /> 是一个长度为零的字符串，仅包含空格，或包含无效字符。 你可以使用 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 方法查询无效字符。  
  
-或- 
 <paramref name="searchPattern" /> 不包含有效模式。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> 为 <see langword="null" />。  
  
-或- 
 <paramref name="searchPattern" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path" /> 无效，如引用未映射的驱动器。</exception>
        <exception cref="T:System.IO.IOException"><paramref name="path" /> 是一个文件名。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定的路径和/或文件名超过了系统定义的最大长度。</exception>
        <exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。</exception>
        <exception cref="T:System.UnauthorizedAccessException">调用方没有所要求的权限。</exception>
      </Docs>
    </Member>
    <Member MemberName="EnumerateFileSystemEntries">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;string&gt; EnumerateFileSystemEntries (string path, string searchPattern, System.IO.EnumerationOptions enumerationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;string&gt; EnumerateFileSystemEntries(string path, string searchPattern, class System.IO.EnumerationOptions enumerationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.EnumerateFileSystemEntries(System.String,System.String,System.IO.EnumerationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EnumerateFileSystemEntries (path As String, searchPattern As String, enumerationOptions As EnumerationOptions) As IEnumerable(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::IEnumerable&lt;System::String ^&gt; ^ EnumerateFileSystemEntries(System::String ^ path, System::String ^ searchPattern, System::IO::EnumerationOptions ^ enumerationOptions);" />
      <MemberSignature Language="F#" Value="static member EnumerateFileSystemEntries : string * string * System.IO.EnumerationOptions -&gt; seq&lt;string&gt;" Usage="System.IO.Directory.EnumerateFileSystemEntries (path, searchPattern, enumerationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="searchPattern" Type="System.String" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="enumerationOptions" Type="System.IO.EnumerationOptions" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="path">要搜索的目录的相对或绝对路径。 此字符串不区分大小写。</param>
        <param name="searchPattern">要与 <paramref name="path" /> 中的子目录的名称匹配的搜索字符串。 此参数可以包含有效文本和通配符的组合，但不支持正则表达式。</param>
        <param name="enumerationOptions">描述要使用的搜索和枚举配置的对象。</param>
        <summary>返回指定路径中与搜索模式和枚举选项匹配的文件名和目录名的可枚举集合。</summary>
        <returns>一个可枚举集合，它包含 <paramref name="path" /> 指定的目录中与指定搜索模式和指定枚举选项匹配的文件系统项。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `searchPattern` 可以是文字和通配符的组合，但不支持正则表达式。 `searchPattern`中允许使用以下通配符说明符。

|通配符说明符|匹配|
|------------------------|-------------|
|\* （星号）|此位置中的零个或多个字符。|
|? （问号）|此位置中的零个或一个字符。|

 通配符以外的字符为原义字符。 例如，`searchPattern` 字符串 "\*t" 搜索 `path` 以字母 "t" 结尾的所有名称。 `searchPattern` 字符串 "s\*" 搜索 `path` 以字母 "s" 开头的所有名称。

> [!NOTE]
>  如果在 `searchPattern` 如 "\*.txt" 中使用星号通配符，则指定扩展中的字符数将影响搜索，如下所示：
> 
> -   如果指定的扩展长度恰好为三个字符，则该方法将返回扩展名以指定扩展名开头的文件。 例如，"\*.xls" 同时返回 "node.js" 和 "node.js"。
> -   在所有其他情况下，该方法将返回完全与指定扩展名匹配的文件。 例如，"\*" 将返回 "file.ai"，而不是 "node.js"。
> 
>  使用问号通配符时，此方法只返回与指定文件扩展名匹配的文件。 例如，给定两个文件： "file1" 和 "txtother"，在目录中，"文件？" 的搜索模式。txt "只返回第一个文件，而" file\*.txt "的搜索模式返回这两个文件。

 `searchPattern` 不能以两个句点（"..."）结束或包含两个句点（"..."），后跟 <xref:System.IO.Path.DirectorySeparatorChar> 或 <xref:System.IO.Path.AltDirectorySeparatorChar>，也不能包含任何无效字符。 你可以使用 <xref:System.IO.Path.GetInvalidPathChars%2A> 方法查询无效字符。

 可以指定具有 `path` 参数的相对路径信息。 相对路径信息被解释为相对于当前工作目录，您可以使用 <xref:System.IO.Directory.GetCurrentDirectory%2A> 方法来确定。

 <xref:System.IO.Directory.EnumerateFileSystemEntries%2A> 和 <xref:System.IO.Directory.GetFileSystemEntries%2A> 方法的区别如下：使用 <xref:System.IO.Directory.EnumerateFileSystemEntries%2A>时，可以在返回整个集合之前，开始枚举条目的集合;使用 <xref:System.IO.Directory.GetFileSystemEntries%2A>时，必须等待返回整个项数组，然后才能访问数组。 因此，在处理多个文件和目录时，<xref:System.IO.Directory.EnumerateFiles%2A> 可能更高效。

 未缓存返回的集合;对集合中的 <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> 的每个调用都将启动一个新枚举。
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="path" /> 是一个长度为零的字符串，仅包含空格，或包含无效字符。 你可以使用 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 方法查询无效字符。  
  
-或- 
 <paramref name="searchPattern" /> 不包含有效模式。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> 为 <see langword="null" />。  
  
-或- 
 <paramref name="searchPattern" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="searchOption" /> 不是有效的 <see cref="T:System.IO.SearchOption" /> 值。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path" /> 无效，如引用未映射的驱动器。</exception>
        <exception cref="T:System.IO.IOException"><paramref name="path" /> 是一个文件名。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定的路径和/或文件名超过了系统定义的最大长度。</exception>
        <exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。</exception>
        <exception cref="T:System.UnauthorizedAccessException">调用方没有所要求的权限。</exception>
      </Docs>
    </Member>
    <Member MemberName="EnumerateFileSystemEntries">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;string&gt; EnumerateFileSystemEntries (string path, string searchPattern, System.IO.SearchOption searchOption);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;string&gt; EnumerateFileSystemEntries(string path, string searchPattern, valuetype System.IO.SearchOption searchOption) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.EnumerateFileSystemEntries(System.String,System.String,System.IO.SearchOption)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EnumerateFileSystemEntries (path As String, searchPattern As String, searchOption As SearchOption) As IEnumerable(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::IEnumerable&lt;System::String ^&gt; ^ EnumerateFileSystemEntries(System::String ^ path, System::String ^ searchPattern, System::IO::SearchOption searchOption);" />
      <MemberSignature Language="F#" Value="static member EnumerateFileSystemEntries : string * string * System.IO.SearchOption -&gt; seq&lt;string&gt;" Usage="System.IO.Directory.EnumerateFileSystemEntries (path, searchPattern, searchOption)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="searchPattern" Type="System.String" Index="1" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="searchOption" Type="System.IO.SearchOption" Index="2" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="path">要搜索的目录的相对或绝对路径。 此字符串不区分大小写。</param>
        <param name="searchPattern">要与 <paramref name="path" /> 中的文件系统项匹配的搜索字符串。  此参数可以包含有效文本路径和通配符（* 和 ?）的组合，但不支持正则表达式。</param>
        <param name="searchOption">指定搜索操作是应仅包含当前目录还是应包含所有子目录的枚举值之一。 默认值是 <see cref="F:System.IO.SearchOption.TopDirectoryOnly" />。</param>
        <summary>返回指定路径中与搜索模式匹配的文件名称和目录名的可枚举集合，还可以搜索子目录。</summary>
        <returns>由 <paramref name="path" /> 指定的目录中与指定搜索模式和选项匹配的文件系统项的可枚举集合。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `searchPattern` 可以是文字和通配符的组合，但不支持正则表达式。 `searchPattern`中允许使用以下通配符说明符。  
  
|通配符说明符|匹配|  
|------------------------|-------------|  
|\* （星号）|此位置中的零个或多个字符。|  
|? （问号）|此位置中的零个或一个字符。|  
  
 通配符以外的字符为原义字符。 例如，`searchPattern` 字符串 "\*t" 搜索 `path` 以字母 "t" 结尾的所有名称。 `searchPattern` 字符串 "s\*" 搜索 `path` 以字母 "s" 开头的所有名称。  
  
> [!NOTE]
>  如果在 `searchPattern` 如 "\*.txt" 中使用星号通配符，则指定扩展中的字符数将影响搜索，如下所示：  
>   
> -   如果指定的扩展长度恰好为三个字符，则该方法将返回扩展名以指定扩展名开头的文件。 例如，"\*.xls" 同时返回 "node.js" 和 "node.js"。  
> -   在所有其他情况下，该方法将返回完全与指定扩展名匹配的文件。 例如，"\*" 将返回 "file.ai"，而不是 "node.js"。  
>   
>  使用问号通配符时，此方法只返回与指定文件扩展名匹配的文件。 例如，给定两个文件： "file1" 和 "txtother"，在目录中，"文件？" 的搜索模式。txt "只返回第一个文件，而" file\*.txt "的搜索模式返回这两个文件。  
  
 `searchPattern` 不能以两个句点（"..."）结束或包含两个句点（"..."），后跟 <xref:System.IO.Path.DirectorySeparatorChar> 或 <xref:System.IO.Path.AltDirectorySeparatorChar>，也不能包含任何无效字符。 你可以使用 <xref:System.IO.Path.GetInvalidPathChars%2A> 方法查询无效字符。  
  
 可以指定具有 `path` 参数的相对路径信息。 相对路径信息被解释为相对于当前工作目录，您可以使用 <xref:System.IO.Directory.GetCurrentDirectory%2A> 方法来确定。  
  
 <xref:System.IO.Directory.EnumerateFileSystemEntries%2A> 和 <xref:System.IO.Directory.GetFileSystemEntries%2A> 方法的区别如下：使用 <xref:System.IO.Directory.EnumerateFileSystemEntries%2A>时，可以在返回整个集合之前，开始枚举条目的集合;使用 <xref:System.IO.Directory.GetFileSystemEntries%2A>时，必须等待返回整个项数组，然后才能访问数组。 因此，在处理多个文件和目录时，<xref:System.IO.Directory.EnumerateFiles%2A> 可能更高效。  
  
 未缓存返回的集合;对集合中的 <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> 的每个调用都将启动一个新枚举。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="path" /> 是一个长度为零的字符串，仅包含空格，或包含无效字符。 你可以使用 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 方法查询无效字符。  
  
-或- 
 <paramref name="searchPattern" /> 不包含有效模式。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> 为 <see langword="null" />。  
  
-或- 
 <paramref name="searchPattern" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="searchOption" /> 不是有效的 <see cref="T:System.IO.SearchOption" /> 值。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path" /> 无效，如引用未映射的驱动器。</exception>
        <exception cref="T:System.IO.IOException"><paramref name="path" /> 是一个文件名。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定的路径和/或文件名超过了系统定义的最大长度。</exception>
        <exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。</exception>
        <exception cref="T:System.UnauthorizedAccessException">调用方没有所要求的权限。</exception>
      </Docs>
    </Member>
    <Member MemberName="Exists">
      <MemberSignature Language="C#" Value="public static bool Exists (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Exists(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.Exists(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Exists (path As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Exists(System::String ^ path);" />
      <MemberSignature Language="F#" Value="static member Exists : string -&gt; bool" Usage="System.IO.Directory.Exists path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">要测试的路径。</param>
        <summary>确定给定路径是否引用磁盘上的现有目录。</summary>
        <returns>如果 <paramref name="path" /> 指向现有目录，则为 <see langword="true" />；如果该目录不存在或者在尝试确定指定目录是否存在时出错，则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 允许 `path` 参数指定相对或绝对路径信息。 相对路径信息被解释为相对于当前工作目录。  
  
 检查目录是否存在之前，从 `path` 参数的末尾删除尾随空格。  
  
 `path` 参数不区分大小写。  
  
 如果没有目录的最小只读权限，<xref:System.IO.Directory.Exists%2A> 方法将返回 `false`。  
  
 如果在尝试确定指定文件是否存在时出现任何错误，则 <xref:System.IO.Directory.Exists%2A> 方法返回 `false`。 这种情况可能发生在引发异常的情况，例如，传递包含无效字符或太多字符的文件名、出现故障或缺失的磁盘，或者如果调用方没有读取文件的权限。  
  
   
  
## Examples  
 下面的示例使用命令行中的一个文件或目录名数组，确定它的名称类型，并对其进行适当的处理。  
  
 [!code-cpp[Recursive file finder#2](~/samples/snippets/cpp/VS_Snippets_CLR/Recursive file finder/CPP/directorylisting.cpp#2)]
 [!code-csharp[Recursive file finder#2](~/samples/snippets/csharp/VS_Snippets_CLR/Recursive file finder/CS/directorylisting.cs#2)]
 [!code-vb[Recursive file finder#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/Recursive file finder/VB/directorylisting.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.DirectoryInfo" />
        <related type="Article" href="/dotnet/standard/io/">文件和流 I/O</related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file">如何：从文件读取文本</related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file">如何：向文件写入文本</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetAccessControl">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>返回某个目录的 Windows 访问控制列表 (ACL)。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetAccessControl">
      <MemberSignature Language="C#" Value="public static System.Security.AccessControl.DirectorySecurity GetAccessControl (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Security.AccessControl.DirectorySecurity GetAccessControl(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.GetAccessControl(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetAccessControl (path As String) As DirectorySecurity" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Security::AccessControl::DirectorySecurity ^ GetAccessControl(System::String ^ path);" />
      <MemberSignature Language="F#" Value="static member GetAccessControl : string -&gt; System.Security.AccessControl.DirectorySecurity" Usage="System.IO.Directory.GetAccessControl path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.AccessControl.DirectorySecurity</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="path">包含 <see cref="T:System.Security.AccessControl.DirectorySecurity" /> 对象的目录路径，该对象描述文件的访问控制列表 (ACL) 信息。</param>
        <summary>获取 <see cref="T:System.Security.AccessControl.DirectorySecurity" /> 对象，该对象封装指定目录的访问控制列表 (ACL) 项。</summary>
        <returns>封装由 <paramref name="path" /> 参数描述的文件的访问控制规则的对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用 <xref:System.IO.Directory.GetAccessControl%2A> 方法可以检索目录的访问控制列表（ACL）项。  
  
 ACL 描述对给定文件或目录具有或没有特定操作权限的个人和/或组。 有关详细信息，请参阅[如何：添加或移除访问控制列表项](/dotnet/standard/io/how-to-add-or-remove-access-control-list-entries)。  
  
 在 NTFS 环境下，如果用户对父文件夹具有 <xref:System.Security.AccessControl.FileSystemRights.ListDirectory> 权限，则会向用户授予 <xref:System.Security.AccessControl.FileSystemRights.ReadAttributes> 和 <xref:System.Security.AccessControl.FileSystemRights.ReadExtendedAttributes>。 若要拒绝 <xref:System.Security.AccessControl.FileSystemRights.ReadAttributes> 和 <xref:System.Security.AccessControl.FileSystemRights.ReadExtendedAttributes>，请拒绝父目录中的 <xref:System.Security.AccessControl.FileSystemRights.ListDirectory>。  
  
   
  
## Examples  
 下面的示例使用 <xref:System.IO.Directory.GetAccessControl%2A> 和 <xref:System.IO.Directory.SetAccessControl%2A> 方法添加访问控制列表（ACL）条目，然后从目录中删除 ACL 条目。  你必须提供有效的用户或组帐户以运行此示例。  
  
 [!code-cpp[IO.DiretoryInfo.GetAccessControl-SetAccessControl#1](~/samples/snippets/cpp/VS_Snippets_CLR/IO.DiretoryInfo.GetAccessControl-SetAccessControl/cpp/sample.cpp#1)]
 [!code-csharp[IO.DiretoryInfo.GetAccessControl-SetAccessControl#1](~/samples/snippets/csharp/VS_Snippets_CLR/IO.DiretoryInfo.GetAccessControl-SetAccessControl/CS/sample.cs#1)]
 [!code-vb[IO.DiretoryInfo.GetAccessControl-SetAccessControl#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/IO.DiretoryInfo.GetAccessControl-SetAccessControl/VB/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> 参数为 <see langword="null" />。</exception>
        <exception cref="T:System.IO.IOException">打开目录时发生 I/O 错误。</exception>
        <exception cref="T:System.SystemException">出现系统级别错误，如找不到目录。 特定异常可能是 <see cref="T:System.SystemException" /> 的子类。</exception>
        <exception cref="T:System.UnauthorizedAccessException"><paramref name="path" /> 参数指定只读的目录。  
  
-或- 
当前平台不支持此操作。  
  
-或- 
调用方没有所要求的权限。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetAccessControl">
      <MemberSignature Language="C#" Value="public static System.Security.AccessControl.DirectorySecurity GetAccessControl (string path, System.Security.AccessControl.AccessControlSections includeSections);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Security.AccessControl.DirectorySecurity GetAccessControl(string path, valuetype System.Security.AccessControl.AccessControlSections includeSections) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.GetAccessControl(System.String,System.Security.AccessControl.AccessControlSections)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetAccessControl (path As String, includeSections As AccessControlSections) As DirectorySecurity" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Security::AccessControl::DirectorySecurity ^ GetAccessControl(System::String ^ path, System::Security::AccessControl::AccessControlSections includeSections);" />
      <MemberSignature Language="F#" Value="static member GetAccessControl : string * System.Security.AccessControl.AccessControlSections -&gt; System.Security.AccessControl.DirectorySecurity" Usage="System.IO.Directory.GetAccessControl (path, includeSections)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.AccessControl.DirectorySecurity</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="includeSections" Type="System.Security.AccessControl.AccessControlSections" Index="1" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="path">包含 <see cref="T:System.Security.AccessControl.DirectorySecurity" /> 对象的目录路径，该对象描述文件的访问控制列表 (ACL) 信息。</param>
        <param name="includeSections"><see cref="T:System.Security.AccessControl.AccessControlSections" /> 值之一，它指定要接收的访问控制列表 (ACL) 信息的类型。</param>
        <summary>获取一个 <see cref="T:System.Security.AccessControl.DirectorySecurity" /> 对象，它封装指定目录的指定类型的访问控制列表 (ACL) 条目。</summary>
        <returns>封装由 <paramref name="path" /> 参数描述的文件的访问控制规则的对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用 <xref:System.IO.Directory.GetAccessControl%2A> 方法可以检索目录的访问控制列表（ACL）项。  
  
 ACL 描述对给定文件或目录具有或没有特定操作权限的个人和/或组。 有关详细信息，请参阅[如何：添加或移除访问控制列表项](/dotnet/standard/io/how-to-add-or-remove-access-control-list-entries)。  
  
 在 NTFS 环境下，如果用户对父文件夹具有 <xref:System.Security.AccessControl.FileSystemRights.ListDirectory> 权限，则会向用户授予 <xref:System.Security.AccessControl.FileSystemRights.ReadAttributes> 和 <xref:System.Security.AccessControl.FileSystemRights.ReadExtendedAttributes>。 若要拒绝 <xref:System.Security.AccessControl.FileSystemRights.ReadAttributes> 和 <xref:System.Security.AccessControl.FileSystemRights.ReadExtendedAttributes>，请拒绝父目录中的 <xref:System.Security.AccessControl.FileSystemRights.ListDirectory>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> 参数为 <see langword="null" />。</exception>
        <exception cref="T:System.IO.IOException">打开目录时发生 I/O 错误。</exception>
        <exception cref="T:System.SystemException">出现系统级别错误，如找不到目录。 特定异常可能是 <see cref="T:System.SystemException" /> 的子类。</exception>
        <exception cref="T:System.UnauthorizedAccessException"><paramref name="path" /> 参数指定只读的目录。  
  
-或- 
当前平台不支持此操作。  
  
-或- 
调用方没有所要求的权限。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetCreationTime">
      <MemberSignature Language="C#" Value="public static DateTime GetCreationTime (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime GetCreationTime(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.GetCreationTime(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetCreationTime (path As String) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime GetCreationTime(System::String ^ path);" />
      <MemberSignature Language="F#" Value="static member GetCreationTime : string -&gt; DateTime" Usage="System.IO.Directory.GetCreationTime path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">目录的路径。</param>
        <summary>获取目录的创建日期和时间。</summary>
        <returns>一个设置为指定目录的创建日期和时间的结构。 该值用本地时间表示。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  此方法可能会返回不准确的值，因为它使用的本机函数的值可能不会持续由操作系统进行更新。  
  
 此方法等效于 <xref:System.IO.File.GetCreationTime%2A?displayProperty=nameWithType>。  
  
 如果 `path` 参数中所述的目录不存在，则此方法将返回12:00 年1月 1601 1 日午夜 公元协调世界时（UTC），调整为本地时间。  
  
 允许 `path` 参数指定相对或绝对路径信息。 相对路径信息被解释为相对于当前工作目录。 若要获取当前工作目录，请参阅 <xref:System.IO.Directory.GetCurrentDirectory%2A>。  
  
 `path` 参数不区分大小写。  
  
 有关常见 i/o 任务的列表，请参阅[常见 I/o 任务](/dotnet/standard/io/common-i-o-tasks)。  
  
   
  
## Examples  
 下面的示例获取指定目录的创建时间。  
  
 [!code-cpp[Dir_GetCreation#1](~/samples/snippets/cpp/VS_Snippets_CLR/Dir_GetCreation/CPP/dir_getcreation.cpp#1)]
 [!code-csharp[Dir_GetCreation#1](~/samples/snippets/csharp/VS_Snippets_CLR/Dir_GetCreation/CS/dir_getcreation.cs#1)]
 [!code-vb[Dir_GetCreation#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Dir_GetCreation/VB/dir_getcreation.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException">调用方没有所要求的权限。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="path" /> 为长度为零的字符串，仅包含空格，或包含一个或多个无效字符。 你可以使用 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 方法查询无效字符。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定的路径和/或文件名超过了系统定义的最大长度。</exception>
        <altmember cref="T:System.IO.FileSystemWatcher" />
        <related type="Article" href="/dotnet/standard/io/">文件和流 I/O</related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file">如何：从文件读取文本</related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file">如何：向文件写入文本</related>
      </Docs>
    </Member>
    <Member MemberName="GetCreationTimeUtc">
      <MemberSignature Language="C#" Value="public static DateTime GetCreationTimeUtc (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime GetCreationTimeUtc(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.GetCreationTimeUtc(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetCreationTimeUtc (path As String) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime GetCreationTimeUtc(System::String ^ path);" />
      <MemberSignature Language="F#" Value="static member GetCreationTimeUtc : string -&gt; DateTime" Usage="System.IO.Directory.GetCreationTimeUtc path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">目录的路径。</param>
        <summary>获取目录创建的日期和时间，其格式为协调通用时 (UTC)。</summary>
        <returns>一个设置为指定目录的创建日期和时间的结构。 该值用 UTC 时间表示。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  此方法可能会返回不准确的值，因为它使用的本机函数的值可能不会持续由操作系统进行更新。  
  
 如果 `path` 参数中所述的目录不存在，则此方法将返回12:00 年1月 1601 1 日午夜 公元协调世界时（UTC）。  
  
 使用此方法可以基于协调世界时（UTC）获取目录的创建时间。  
  
   
  
## Examples  
 下面的示例演示使用协调世界时（UTC）输出时的输出差异。  
  
 [!code-cpp[System.IO.UTCExample#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.UTCExample/CPP/example.cpp#1)]
 [!code-csharp[System.IO.UTCExample#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.UTCExample/CS/example.cs#1)]
 [!code-vb[System.IO.UTCExample#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.UTCExample/VB/example.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException">调用方没有所要求的权限。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="path" /> 为长度为零的字符串，仅包含空格，或包含一个或多个无效字符。 你可以使用 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 方法查询无效字符。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定的路径和/或文件名超过了系统定义的最大长度。</exception>
        <altmember cref="T:System.IO.FileSystemWatcher" />
        <related type="Article" href="/dotnet/standard/io/">文件和流 I/O</related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file">如何：从文件读取文本</related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file">如何：向文件写入文本</related>
      </Docs>
    </Member>
    <Member MemberName="GetCurrentDirectory">
      <MemberSignature Language="C#" Value="public static string GetCurrentDirectory ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetCurrentDirectory() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.GetCurrentDirectory" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetCurrentDirectory () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ GetCurrentDirectory();" />
      <MemberSignature Language="F#" Value="static member GetCurrentDirectory : unit -&gt; string" Usage="System.IO.Directory.GetCurrentDirectory " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>获取应用程序的当前工作目录。</summary>
        <returns>一个字符串，该字符串包含当前工作目录的绝对路径且不以反斜杠 (\\) 结尾。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当前目录不同于原始目录，该目录是启动进程的目录。  
  
 有关常见 i/o 任务的列表，请参阅[常见 I/o 任务](/dotnet/standard/io/common-i-o-tasks)。  
  
   
  
## Examples  
 下面的示例演示如何使用 `GetCurrentDirectory` 方法。  
  
 [!code-cpp[Dir_GetCurDir#1](~/samples/snippets/cpp/VS_Snippets_CLR/Dir_GetCurDir/CPP/dir_getcurdir.cpp#1)]
 [!code-csharp[Dir_GetCurDir#1](~/samples/snippets/csharp/VS_Snippets_CLR/Dir_GetCurDir/CS/dir_getcurdir.cs#1)]
 [!code-vb[Dir_GetCurDir#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Dir_GetCurDir/VB/dir_getcurdir.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException">调用方没有所要求的权限。</exception>
        <exception cref="T:System.NotSupportedException">此操作系统为 Windows CE，该系统不具有当前目录功能。  
  
 此方法在 .NET Compact Framework 中可用，但当前不支持。</exception>
        <related type="Article" href="/dotnet/standard/io/">文件和流 I/O</related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file">如何：从文件读取文本</related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file">如何：向文件写入文本</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetDirectories">
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>返回满足指定条件的子目录的名称。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetDirectories">
      <MemberSignature Language="C#" Value="public static string[] GetDirectories (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string[] GetDirectories(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.GetDirectories(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetDirectories (path As String) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::String ^&gt; ^ GetDirectories(System::String ^ path);" />
      <MemberSignature Language="F#" Value="static member GetDirectories : string -&gt; string[]" Usage="System.IO.Directory.GetDirectories path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">要搜索的目录的相对或绝对路径。 此字符串不区分大小写。</param>
        <summary>返回指定目录中的子目录的名称（包括其路径）。</summary>
        <returns>指定路径中子目录的完整名称（包含路径）的数组；如果未找到任何目录，则为空数组。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法等同于将星号（\*）指定为搜索模式的 <xref:System.IO.Directory.GetDirectories%28System.String%2CSystem.String%29>，因此它将返回所有子目录。 如果需要搜索子目录，请使用 <xref:System.IO.Directory.GetDirectories%28System.String%2CSystem.String%2CSystem.IO.SearchOption%29> 方法，该方法使你能够使用 `searchOption` 参数指定子目录搜索。  
  
 <xref:System.IO.Directory.EnumerateDirectories%2A> 和 <xref:System.IO.Directory.GetDirectories%2A> 方法的区别如下：使用 <xref:System.IO.Directory.EnumerateDirectories%2A>时，可以在返回整个集合之前开始枚举名称的集合;使用 <xref:System.IO.Directory.GetDirectories%2A>时，必须等待返回整个名称数组，然后才能访问数组。 因此，在处理多个文件和目录时，<xref:System.IO.Directory.EnumerateDirectories%2A> 可能更高效。  
  
 `path` 参数可以指定相对或绝对路径信息。 相对路径信息被解释为相对于当前工作目录。 若要获取当前工作目录，请参阅 <xref:System.IO.Directory.GetCurrentDirectory%2A>。  
  
 此方法返回的名称以 `path`中提供的目录信息为前缀。  
  
 `path` 参数不区分大小写。  
  
 有关常见 i/o 任务的列表，请参阅[常见 I/o 任务](/dotnet/standard/io/common-i-o-tasks)。  
  
   
  
## Examples  
 下面的示例使用命令行中的一个文件或目录名数组，确定它的名称类型，并对其进行适当的处理。  
  
 [!code-cpp[Recursive file finder#1](~/samples/snippets/cpp/VS_Snippets_CLR/Recursive file finder/CPP/directorylisting.cpp#1)]
 [!code-csharp[Recursive file finder#1](~/samples/snippets/csharp/VS_Snippets_CLR/Recursive file finder/CS/directorylisting.cs#1)]
 [!code-vb[Recursive file finder#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Recursive file finder/VB/directorylisting.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException">调用方没有所要求的权限。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="path" /> 为长度为零的字符串，仅包含空格，或包含一个或多个无效字符。 你可以使用 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 方法查询无效字符。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定的路径和/或文件名超过了系统定义的最大长度。</exception>
        <exception cref="T:System.IO.IOException"><paramref name="path" /> 是一个文件名。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">指定的路径无效（例如，它位于未映射的驱动器上）。</exception>
        <altmember cref="M:System.IO.Directory.GetCurrentDirectory" />
        <related type="Article" href="/dotnet/standard/io/">文件和流 I/O</related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file">如何：从文件读取文本</related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file">如何：向文件写入文本</related>
      </Docs>
    </Member>
    <Member MemberName="GetDirectories">
      <MemberSignature Language="C#" Value="public static string[] GetDirectories (string path, string searchPattern);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string[] GetDirectories(string path, string searchPattern) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.GetDirectories(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetDirectories (path As String, searchPattern As String) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::String ^&gt; ^ GetDirectories(System::String ^ path, System::String ^ searchPattern);" />
      <MemberSignature Language="F#" Value="static member GetDirectories : string * string -&gt; string[]" Usage="System.IO.Directory.GetDirectories (path, searchPattern)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="searchPattern" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">要搜索的目录的相对或绝对路径。 此字符串不区分大小写。</param>
        <param name="searchPattern">要与 <paramref name="path" /> 中的子目录的名称匹配的搜索字符串。 此参数可以包含有效文本和通配符的组合，但不支持正则表达式。</param>
        <summary>返回指定目录中与指定的搜索模式匹配的子目录的名称（包括其路径）。</summary>
        <returns>指定目录中与搜索模式匹配的子目录的完整名称（包含路径）的数组；如果未找到任何文件，则为空数组。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法返回与指定的搜索模式匹配的指定目录下的所有子目录。 如果指定的目录没有子目录，或者没有与 `searchPattern` 参数匹配的子目录，则此方法将返回一个空数组。 仅搜索顶级目录。 如果还想要搜索子目录，请使用 <xref:System.IO.Directory.GetDirectories%28System.String%2CSystem.String%2CSystem.IO.SearchOption%29> 方法，并在 `searchOption` 参数中指定 <xref:System.IO.SearchOption.AllDirectories>。  
  
 `searchPattern` 可以是文字和通配符的组合，但不支持正则表达式。 `searchPattern`中允许使用以下通配符说明符。  
  
|通配符说明符|匹配|  
|------------------------|-------------|  
|\* （星号）|此位置中的零个或多个字符。|  
|? （问号）|此位置中的零个或一个字符。|  
  
 通配符以外的字符为原义字符。 例如，`searchPattern` 字符串 "\*t" 搜索 `path` 以字母 "t" 结尾的所有名称。 `searchPattern` 字符串 "s\*" 搜索 `path` 以字母 "s" 开头的所有名称。  
  
 `searchPattern` 不能以两个句点（"..."）结束或包含两个句点（"..."），后跟 <xref:System.IO.Path.DirectorySeparatorChar> 或 <xref:System.IO.Path.AltDirectorySeparatorChar>，也不能包含任何无效字符。 你可以使用 <xref:System.IO.Path.GetInvalidPathChars%2A> 方法查询无效字符。  
  
 `path` 参数可以指定相对或绝对路径信息，并且不区分大小写。  相对路径信息被解释为相对于当前工作目录。 若要获取当前工作目录，请参阅 <xref:System.IO.Directory.GetCurrentDirectory%2A>。  
  
 <xref:System.IO.Directory.EnumerateDirectories%2A> 和 <xref:System.IO.Directory.GetDirectories%2A> 方法的区别如下：使用 <xref:System.IO.Directory.EnumerateDirectories%2A>时，可以在返回整个集合之前开始枚举名称的集合;使用 <xref:System.IO.Directory.GetDirectories%2A>时，必须等待返回整个名称数组，然后才能访问数组。 因此，在处理多个文件和目录时，<xref:System.IO.Directory.EnumerateDirectories%2A> 可能更高效。  
  
 有关常见 i/o 任务的列表，请参阅[常见 I/o 任务](/dotnet/standard/io/common-i-o-tasks)。  
  
   
  
## Examples  
 下面的示例对路径中以指定字母开头的目录的数目进行计数。  
  
 [!code-cpp[Dir_GetDirs2#1](~/samples/snippets/cpp/VS_Snippets_CLR/Dir_GetDirs2/CPP/dir_getdirs2.cpp#1)]
 [!code-csharp[Dir_GetDirs2#1](~/samples/snippets/csharp/VS_Snippets_CLR/Dir_GetDirs2/CS/dir_getdirs2.cs#1)]
 [!code-vb[Dir_GetDirs2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Dir_GetDirs2/VB/dir_getdirs2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException">调用方没有所要求的权限。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="path" /> 为长度为零的字符串，仅包含空格，或包含一个或多个无效字符。 可以通过使用 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 查询无效的字符。  
  
-或- 
 <paramref name="searchPattern" /> 不包含有效的模式。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> 或 <paramref name="searchPattern" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定的路径和/或文件名超过了系统定义的最大长度。</exception>
        <exception cref="T:System.IO.IOException"><paramref name="path" /> 是一个文件名。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">指定的路径无效（例如，它位于未映射的驱动器上）。</exception>
        <altmember cref="M:System.IO.Directory.GetCurrentDirectory" />
        <related type="Article" href="/dotnet/standard/io/">文件和流 I/O</related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file">如何：从文件读取文本</related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file">如何：向文件写入文本</related>
      </Docs>
    </Member>
    <Member MemberName="GetDirectories">
      <MemberSignature Language="C#" Value="public static string[] GetDirectories (string path, string searchPattern, System.IO.EnumerationOptions enumerationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string[] GetDirectories(string path, string searchPattern, class System.IO.EnumerationOptions enumerationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.GetDirectories(System.String,System.String,System.IO.EnumerationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetDirectories (path As String, searchPattern As String, enumerationOptions As EnumerationOptions) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::String ^&gt; ^ GetDirectories(System::String ^ path, System::String ^ searchPattern, System::IO::EnumerationOptions ^ enumerationOptions);" />
      <MemberSignature Language="F#" Value="static member GetDirectories : string * string * System.IO.EnumerationOptions -&gt; string[]" Usage="System.IO.Directory.GetDirectories (path, searchPattern, enumerationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="searchPattern" Type="System.String" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="enumerationOptions" Type="System.IO.EnumerationOptions" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="path">要搜索的目录的相对或绝对路径。 此字符串不区分大小写。</param>
        <param name="searchPattern">要与 <paramref name="path" /> 中的子目录的名称匹配的搜索字符串。 此参数可以包含有效文本和通配符的组合，但不支持正则表达式。</param>
        <param name="enumerationOptions">描述要使用的搜索和枚举配置的对象。</param>
        <summary>返回指定目录中与指定的搜索模式和枚举选项匹配的子目录的名称（包括其路径）。</summary>
        <returns>一个数组，它包含指定目录中与搜索模式和枚举选项匹配的子目录的完整名称（包含路径）；如果未找到任何文件，则为空数组。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法返回与指定的搜索模式匹配的指定目录下的所有子目录。 如果指定的目录没有子目录，或者没有与 `searchPattern` 参数匹配的子目录，则此方法将返回一个空数组。 仅搜索顶级目录。 如果还想要搜索子目录，请使用 <xref:System.IO.Directory.GetDirectories%28System.String%2CSystem.String%2CSystem.IO.SearchOption%29> 方法，并在 `searchOption` 参数中指定 <xref:System.IO.SearchOption.AllDirectories>。

 `searchPattern` 可以是文字和通配符的组合，但不支持正则表达式。 `searchPattern`中允许使用以下通配符说明符。

|通配符说明符|匹配|
|------------------------|-------------|
|\* （星号）|此位置中的零个或多个字符。|
|? （问号）|此位置中的零个或一个字符。|

 通配符以外的字符为原义字符。 例如，`searchPattern` 字符串 "\*t" 搜索 `path` 以字母 "t" 结尾的所有名称。 `searchPattern` 字符串 "s\*" 搜索 `path` 以字母 "s" 开头的所有名称。

 `searchPattern` 不能以两个句点（"..."）结束或包含两个句点（"..."），后跟 <xref:System.IO.Path.DirectorySeparatorChar> 或 <xref:System.IO.Path.AltDirectorySeparatorChar>，也不能包含任何无效字符。 你可以使用 <xref:System.IO.Path.GetInvalidPathChars%2A> 方法查询无效字符。

 `path` 参数可以指定相对或绝对路径信息，并且不区分大小写。  相对路径信息被解释为相对于当前工作目录。 若要获取当前工作目录，请参阅 <xref:System.IO.Directory.GetCurrentDirectory%2A>。

 <xref:System.IO.Directory.EnumerateDirectories%2A> 和 <xref:System.IO.Directory.GetDirectories%2A> 方法的区别如下：使用 <xref:System.IO.Directory.EnumerateDirectories%2A>时，可以在返回整个集合之前开始枚举名称的集合;使用 <xref:System.IO.Directory.GetDirectories%2A>时，必须等待返回整个名称数组，然后才能访问数组。 因此，在处理多个文件和目录时，<xref:System.IO.Directory.EnumerateDirectories%2A> 可能更高效。

 有关常见 i/o 任务的列表，请参阅[常见 I/o 任务](/dotnet/standard/io/common-i-o-tasks)。
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException">调用方没有所要求的权限。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="path" /> 为长度为零的字符串，仅包含空格，或包含一个或多个无效字符。 可以通过使用 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 查询无效的字符。  
  
-或- 
 <paramref name="searchPattern" /> 不包含有效的模式。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> 或 <paramref name="searchPattern" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定的路径和/或文件名超过了系统定义的最大长度。</exception>
        <exception cref="T:System.IO.IOException"><paramref name="path" /> 是一个文件名。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">指定的路径无效（例如，它位于未映射的驱动器上）。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetDirectories">
      <MemberSignature Language="C#" Value="public static string[] GetDirectories (string path, string searchPattern, System.IO.SearchOption searchOption);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string[] GetDirectories(string path, string searchPattern, valuetype System.IO.SearchOption searchOption) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.GetDirectories(System.String,System.String,System.IO.SearchOption)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetDirectories (path As String, searchPattern As String, searchOption As SearchOption) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::String ^&gt; ^ GetDirectories(System::String ^ path, System::String ^ searchPattern, System::IO::SearchOption searchOption);" />
      <MemberSignature Language="F#" Value="static member GetDirectories : string * string * System.IO.SearchOption -&gt; string[]" Usage="System.IO.Directory.GetDirectories (path, searchPattern, searchOption)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="searchPattern" Type="System.String" Index="1" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="searchOption" Type="System.IO.SearchOption" Index="2" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="path">要搜索的目录的相对或绝对路径。 此字符串不区分大小写。</param>
        <param name="searchPattern">要与 <paramref name="path" /> 中的子目录的名称匹配的搜索字符串。 此参数可以包含有效文本和通配符的组合，但不支持正则表达式。</param>
        <param name="searchOption">用于指定搜索操作是应包含所有子目录还是仅包含当前目录的枚举值之一。</param>
        <summary>返回与在指定目录中的指定搜索模式匹配的子目录的名称（包括其路径），还可以选择地搜索子目录。</summary>
        <returns>与指定条件匹配的子目录的完整名称（包含路径）的数组；如果未找到任何目录，则为空数组。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `path` 参数可以指定相对或绝对路径信息，并且不区分大小写。 相对路径信息被解释为相对于当前工作目录。 若要获取当前工作目录，请参阅 <xref:System.IO.Directory.GetCurrentDirectory%2A>。  
  
 `searchPattern` 可以是文字和通配符的组合，但不支持正则表达式。 `searchPattern`中允许使用以下通配符说明符。  
  
|通配符说明符|匹配|  
|------------------------|-------------|  
|\* （星号）|此位置中的零个或多个字符。|  
|? （问号）|此位置中的零个或一个字符。|  
  
 通配符以外的字符为原义字符。 例如，`searchPattern` 字符串 "\*t" 搜索 `path` 以字母 "t" 结尾的所有名称。 `searchPattern` 字符串 "s\*" 搜索 `path` 以字母 "s" 开头的所有名称。  
  
 `searchPattern` 不能以两个句点（"..."）结束或包含两个句点（"..."），后跟 <xref:System.IO.Path.DirectorySeparatorChar> 或 <xref:System.IO.Path.AltDirectorySeparatorChar>，也不能包含任何无效字符。 你可以使用 <xref:System.IO.Path.GetInvalidPathChars%2A> 方法查询无效字符。  
  
 <xref:System.IO.Directory.EnumerateDirectories%2A> 和 <xref:System.IO.Directory.GetDirectories%2A> 方法的区别如下：使用 <xref:System.IO.Directory.EnumerateDirectories%2A>时，可以在返回整个集合之前开始枚举名称的集合;使用 <xref:System.IO.Directory.GetDirectories%2A>时，必须等待返回整个名称数组，然后才能访问数组。 因此，在处理多个文件和目录时，<xref:System.IO.Directory.EnumerateDirectories%2A> 可能更高效。  
  
 有关常见 i/o 任务的列表，请参阅[常见 I/o 任务](/dotnet/standard/io/common-i-o-tasks)。  
  
   
  
## Examples  
 下面的示例对路径中以指定字母开头的目录的数目进行计数。 仅搜索顶级目录。  
  
 [!code-csharp[Dir_GetDirs2#2](~/samples/snippets/csharp/VS_Snippets_CLR/Dir_GetDirs2/CS/dir_getdirs3.cs#2)]
 [!code-vb[Dir_GetDirs2#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/Dir_GetDirs2/VB/dir_getdirs3.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="path" /> 为长度为零的字符串，仅包含空格，或包含一个或多个无效字符。 你可以使用 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 方法查询无效字符。  
  
-或- 
 <paramref name="searchPattern" /> 不包含有效模式。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> 或 <paramref name="searchPattern" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="searchOption" /> 不是有效的 <see cref="T:System.IO.SearchOption" /> 值。</exception>
        <exception cref="T:System.UnauthorizedAccessException">调用方没有所要求的权限。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定的路径和/或文件名超过了系统定义的最大长度。</exception>
        <exception cref="T:System.IO.IOException"><paramref name="path" /> 是一个文件名。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">指定的路径无效（例如，它位于未映射的驱动器上）。</exception>
        <altmember cref="M:System.IO.Directory.GetCurrentDirectory" />
        <related type="Article" href="/dotnet/standard/io/">文件和流 I/O</related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file">如何：从文件读取文本</related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file">如何：向文件写入文本</related>
      </Docs>
    </Member>
    <Member MemberName="GetDirectoryRoot">
      <MemberSignature Language="C#" Value="public static string GetDirectoryRoot (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetDirectoryRoot(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.GetDirectoryRoot(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetDirectoryRoot (path As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ GetDirectoryRoot(System::String ^ path);" />
      <MemberSignature Language="F#" Value="static member GetDirectoryRoot : string -&gt; string" Usage="System.IO.Directory.GetDirectoryRoot path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">文件或目录的路径。</param>
        <summary>返回指定路径的卷信息、根信息或两者同时返回。</summary>
        <returns>包含指定路径的卷信息、根信息或同时包括这两者的字符串。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法获取 `path`的完全限定路径名称（由 <xref:System.IO.Path.GetFullPath%2A>返回），并返回根目录信息。 指定的路径不需要存在。  
  
 允许 `path` 参数指定相对或绝对路径信息。 相对路径信息被解释为相对于当前工作目录。 若要获取当前工作目录，请参阅 <xref:System.IO.Directory.GetCurrentDirectory%2A>。  
  
 `path` 参数不区分大小写。  
  
 有关常见 i/o 任务的列表，请参阅[常见 I/o 任务](/dotnet/standard/io/common-i-o-tasks)。  
  
   
  
## Examples  
 下面的示例演示如何设置当前目录并显示目录根。  
  
 [!code-cpp[System.IO.DirectoryRoot#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.DirectoryRoot/CPP/example.cpp#1)]
 [!code-csharp[System.IO.DirectoryRoot#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.DirectoryRoot/CS/example.cs#1)]
 [!code-vb[System.IO.DirectoryRoot#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.DirectoryRoot/VB/example.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException">调用方没有所要求的权限。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="path" /> 为长度为零的字符串，仅包含空格，或包含一个或多个无效字符。 你可以使用 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 查询无效字符。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定的路径和/或文件名超过了系统定义的最大长度。</exception>
        <related type="Article" href="/dotnet/standard/io/">文件和流 I/O</related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file">如何：从文件读取文本</related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file">如何：向文件写入文本</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetFiles">
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>返回满足指定条件的文件的名称。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetFiles">
      <MemberSignature Language="C#" Value="public static string[] GetFiles (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string[] GetFiles(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.GetFiles(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetFiles (path As String) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::String ^&gt; ^ GetFiles(System::String ^ path);" />
      <MemberSignature Language="F#" Value="static member GetFiles : string -&gt; string[]" Usage="System.IO.Directory.GetFiles path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">要搜索的目录的相对或绝对路径。 此字符串不区分大小写。</param>
        <summary>返回指定目录中文件的名称（包括其路径）。</summary>
        <returns>一个包含指定目录中的文件的完整名称（包含路径）的数组，如果未找到任何文件，则为空数组。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Directory.EnumerateFiles%2A> 和 <xref:System.IO.Directory.GetFiles%2A> 方法的区别如下：使用 <xref:System.IO.Directory.EnumerateFiles%2A>时，可以在返回整个集合之前开始枚举名称的集合;使用 <xref:System.IO.Directory.GetFiles%2A>时，必须等待返回整个名称数组，然后才能访问数组。 因此，在处理多个文件和目录时，<xref:System.IO.Directory.EnumerateFiles%2A> 可能更高效。  
  
 返回的文件名将追加到提供的 `path` 参数中。  
  
 此方法等同于将星号（\*）指定为搜索模式的 <xref:System.IO.Directory.GetFiles%28System.String%2CSystem.String%29>。  
  
 `path` 参数可以指定相对或绝对路径信息。 相对路径信息被解释为相对于当前工作目录。 若要获取当前工作目录，请参阅 <xref:System.IO.Directory.GetCurrentDirectory%2A>。  
  
 不保证返回的文件名的顺序;如果需要特定的排序顺序，请使用 <xref:System.Array.Sort%2A> 方法。  
  
 `path` 参数不区分大小写。  
  
 有关常见 i/o 任务的列表，请参阅[常见 I/o 任务](/dotnet/standard/io/common-i-o-tasks)。  
  
   
  
## Examples  
 下面的示例演示如何使用 <xref:System.IO.Directory.GetFiles%2A> 方法从用户指定的位置返回文件名。 该示例配置为捕获此方法通用的所有错误。  
  
 [!code-cpp[Recursive file finder#1](~/samples/snippets/cpp/VS_Snippets_CLR/Recursive file finder/CPP/directorylisting.cpp#1)]
 [!code-csharp[Recursive file finder#1](~/samples/snippets/csharp/VS_Snippets_CLR/Recursive file finder/CS/directorylisting.cs#1)]
 [!code-vb[Recursive file finder#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Recursive file finder/VB/directorylisting.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><paramref name="path" /> 是一个文件名。  
  
-或- 
发生了网络错误。</exception>
        <exception cref="T:System.UnauthorizedAccessException">调用方没有所要求的权限。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="path" /> 为长度为零的字符串，仅包含空格，或包含一个或多个无效字符。 你可以使用 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 方法查询无效字符。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定的路径和/或文件名超过了系统定义的最大长度。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">指定的路径未找到或无效（例如，它在未映射的驱动器上）。</exception>
        <related type="Article" href="/dotnet/standard/io/">文件和流 I/O</related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file">如何：从文件读取文本</related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file">如何：向文件写入文本</related>
      </Docs>
    </Member>
    <Member MemberName="GetFiles">
      <MemberSignature Language="C#" Value="public static string[] GetFiles (string path, string searchPattern);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string[] GetFiles(string path, string searchPattern) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.GetFiles(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetFiles (path As String, searchPattern As String) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::String ^&gt; ^ GetFiles(System::String ^ path, System::String ^ searchPattern);" />
      <MemberSignature Language="F#" Value="static member GetFiles : string * string -&gt; string[]" Usage="System.IO.Directory.GetFiles (path, searchPattern)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="searchPattern" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">要搜索的目录的相对或绝对路径。 此字符串不区分大小写。</param>
        <param name="searchPattern">要与 <paramref name="path" /> 中的文件名匹配的搜索字符串。  此参数可以包含有效文本路径和通配符（* 和 ?）的组合，但不支持正则表达式。</param>
        <summary>返回指定目录中与指定的搜索模式匹配的文件的名称（包含其路径）。</summary>
        <returns>指定目录中与指定的搜索模式匹配的文件的完整名称（包含路径）的数组；如果未找到任何文件，则为空数组。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 返回的文件名将追加到所提供的 `path` 参数上，并且不保证返回的文件名的顺序。如果需要特定的排序顺序，请使用 <xref:System.Array.Sort%2A> 方法。  
  
 `searchPattern` 可以是文字和通配符的组合，但不支持正则表达式。 `searchPattern`中允许使用以下通配符说明符。  
  
|通配符说明符|匹配|  
|------------------------|-------------|  
|\* （星号）|此位置中的零个或多个字符。|  
|? （问号）|此位置中的零个或一个字符。|  
  
 通配符以外的字符为原义字符。 例如，`searchPattern` 字符串 "\*t" 搜索 `path` 以字母 "t" 结尾的所有名称。 `searchPattern` 字符串 "s\*" 搜索 `path` 以字母 "s" 开头的所有名称。  
  
 `searchPattern` 不能以两个句点（"..."）结束或包含两个句点（"..."），后跟 <xref:System.IO.Path.DirectorySeparatorChar> 或 <xref:System.IO.Path.AltDirectorySeparatorChar>，也不能包含任何无效字符。 你可以使用 <xref:System.IO.Path.GetInvalidPathChars%2A> 方法查询无效字符。  
  
> [!NOTE]
>  如果在 `searchPattern` 如 "\*.txt" 中使用星号通配符，则指定扩展中的字符数将影响搜索，如下所示：  
>   
> -   如果指定的扩展长度恰好为三个字符，则该方法将返回扩展名以指定扩展名开头的文件。 例如，"\*.xls" 同时返回 "node.js" 和 "node.js"。  
> -   在所有其他情况下，该方法将返回完全与指定扩展名匹配的文件。 例如，"\*" 将返回 "file.ai"，而不是 "node.js"。  
>   
>  使用问号通配符时，此方法只返回与指定文件扩展名匹配的文件。 例如，给定两个文件： "file1" 和 "txtother"，在目录中，"文件？" 的搜索模式。txt "只返回第一个文件，而" file\*.txt "的搜索模式返回这两个文件。  
  
> [!NOTE]
>  由于此方法使用8.3 文件名格式和长文件名格式的文件名进行检查，因此类似于 "\*1\*.txt" 的搜索模式可能会返回意外的文件名。 例如，使用搜索模式 "\*1\*.txt" 将返回 "longfilename"，因为等效的8.3 文件名格式为 "LONGFI ~ 1 .TXT"。  
  
 <xref:System.IO.Directory.EnumerateFiles%2A> 和 <xref:System.IO.Directory.GetFiles%2A> 方法的区别如下：使用 <xref:System.IO.Directory.EnumerateFiles%2A>时，可以在返回整个集合之前开始枚举名称的集合;使用 <xref:System.IO.Directory.GetFiles%2A>时，必须等待返回整个名称数组，然后才能访问数组。 因此，在处理多个文件和目录时，<xref:System.IO.Directory.EnumerateFiles%2A> 可能更高效。  
  
 `path` 参数可以指定相对或绝对路径信息。 相对路径信息被解释为相对于当前工作目录。 若要获取当前工作目录，请参阅 <xref:System.IO.Directory.GetCurrentDirectory%2A>。  
  
 `path` 参数不区分大小写。  
  
 有关常见 i/o 任务的列表，请参阅[常见 I/o 任务](/dotnet/standard/io/common-i-o-tasks)。  
  
   
  
## Examples  
 下面的示例计算以指定字母开头的文件的数目。  
  
 [!code-cpp[Dir_GetFiles2#1](~/samples/snippets/cpp/VS_Snippets_CLR/Dir_GetFiles2/CPP/dir_getfiles2.cpp#1)]
 [!code-csharp[Dir_GetFiles2#1](~/samples/snippets/csharp/VS_Snippets_CLR/Dir_GetFiles2/CS/dir_getfiles2.cs#1)]
 [!code-vb[Dir_GetFiles2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Dir_GetFiles2/VB/dir_getfiles2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><paramref name="path" /> 是一个文件名。  
  
-或- 
发生了网络错误。</exception>
        <exception cref="T:System.UnauthorizedAccessException">调用方没有所要求的权限。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="path" /> 为长度为零的字符串，仅包含空格，或包含一个或多个无效字符。 可以通过使用 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 查询无效的字符。  
  
-或- 
 <paramref name="searchPattern" /> 不包含有效的模式。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> 或 <paramref name="searchPattern" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定的路径和/或文件名超过了系统定义的最大长度。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">指定的路径未找到或无效（例如，它在未映射的驱动器上）。</exception>
        <related type="Article" href="/dotnet/standard/io/">文件和流 I/O</related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file">如何：从文件读取文本</related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file">如何：向文件写入文本</related>
      </Docs>
    </Member>
    <Member MemberName="GetFiles">
      <MemberSignature Language="C#" Value="public static string[] GetFiles (string path, string searchPattern, System.IO.EnumerationOptions enumerationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string[] GetFiles(string path, string searchPattern, class System.IO.EnumerationOptions enumerationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.GetFiles(System.String,System.String,System.IO.EnumerationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetFiles (path As String, searchPattern As String, enumerationOptions As EnumerationOptions) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::String ^&gt; ^ GetFiles(System::String ^ path, System::String ^ searchPattern, System::IO::EnumerationOptions ^ enumerationOptions);" />
      <MemberSignature Language="F#" Value="static member GetFiles : string * string * System.IO.EnumerationOptions -&gt; string[]" Usage="System.IO.Directory.GetFiles (path, searchPattern, enumerationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="searchPattern" Type="System.String" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="enumerationOptions" Type="System.IO.EnumerationOptions" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="path">要搜索的目录的相对或绝对路径。 此字符串不区分大小写。</param>
        <param name="searchPattern">要与 <paramref name="path" /> 中的子目录的名称匹配的搜索字符串。 此参数可以包含有效文本和通配符的组合，但不支持正则表达式。</param>
        <param name="enumerationOptions">描述要使用的搜索和枚举配置的对象。</param>
        <summary>返回指定目录中与指定的搜索模式和枚举选项匹配的文件的名称（包括其路径）。</summary>
        <returns>一个数组，它包含指定目录中与指定的搜索模式和枚举选项匹配的文件的完整名称（包含路径）；如果未找到任何文件，则为空数组。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 返回的文件名将追加到所提供的 `path` 参数上，并且不保证返回的文件名的顺序。如果需要特定的排序顺序，请使用 <xref:System.Array.Sort%2A> 方法。

 `searchPattern` 可以是文字和通配符的组合，但不支持正则表达式。 `searchPattern`中允许使用以下通配符说明符。

|通配符说明符|匹配|
|------------------------|-------------|
|\* （星号）|此位置中的零个或多个字符。|
|? （问号）|此位置中的零个或一个字符。|

 通配符以外的字符为原义字符。 例如，`searchPattern` 字符串 "\*t" 搜索 `path` 以字母 "t" 结尾的所有名称。 `searchPattern` 字符串 "s\*" 搜索 `path` 以字母 "s" 开头的所有名称。

 `searchPattern` 不能以两个句点（"..."）结束或包含两个句点（"..."），后跟 <xref:System.IO.Path.DirectorySeparatorChar> 或 <xref:System.IO.Path.AltDirectorySeparatorChar>，也不能包含任何无效字符。 你可以使用 <xref:System.IO.Path.GetInvalidPathChars%2A> 方法查询无效字符。

> [!NOTE]
>  如果在 `searchPattern` 如 "\*.txt" 中使用星号通配符，则指定扩展中的字符数将影响搜索，如下所示：
> 
> -   如果指定的扩展长度恰好为三个字符，则该方法将返回扩展名以指定扩展名开头的文件。 例如，"\*.xls" 同时返回 "node.js" 和 "node.js"。
> -   在所有其他情况下，该方法将返回完全与指定扩展名匹配的文件。 例如，"\*" 将返回 "file.ai"，而不是 "node.js"。
> 
>  使用问号通配符时，此方法只返回与指定文件扩展名匹配的文件。 例如，给定两个文件： "file1" 和 "txtother"，在目录中，"文件？" 的搜索模式。txt "只返回第一个文件，而" file\*.txt "的搜索模式返回这两个文件。

> [!NOTE]
>  由于此方法使用8.3 文件名格式和长文件名格式的文件名进行检查，因此类似于 "\*1\*.txt" 的搜索模式可能会返回意外的文件名。 例如，使用搜索模式 "\*1\*.txt" 将返回 "longfilename"，因为等效的8.3 文件名格式为 "LONGFI ~ 1 .TXT"。

 <xref:System.IO.Directory.EnumerateFiles%2A> 和 <xref:System.IO.Directory.GetFiles%2A> 方法的区别如下：使用 <xref:System.IO.Directory.EnumerateFiles%2A>时，可以在返回整个集合之前开始枚举名称的集合;使用 <xref:System.IO.Directory.GetFiles%2A>时，必须等待返回整个名称数组，然后才能访问数组。 因此，在处理多个文件和目录时，<xref:System.IO.Directory.EnumerateFiles%2A> 可能更高效。

 `path` 参数可以指定相对或绝对路径信息。 相对路径信息被解释为相对于当前工作目录。 若要获取当前工作目录，请参阅 <xref:System.IO.Directory.GetCurrentDirectory%2A>。

 `path` 参数不区分大小写。

 有关常见 i/o 任务的列表，请参阅[常见 I/o 任务](/dotnet/standard/io/common-i-o-tasks)。
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><paramref name="path" /> 是一个文件名。  
  
-或- 
发生了网络错误。</exception>
        <exception cref="T:System.UnauthorizedAccessException">调用方没有所要求的权限。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="path" /> 为长度为零的字符串，仅包含空格，或包含一个或多个无效字符。 可以通过使用 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 查询无效的字符。  
  
-或- 
 <paramref name="searchPattern" /> 不包含有效的模式。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> 或 <paramref name="searchPattern" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定的路径和/或文件名超过了系统定义的最大长度。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">指定的路径未找到或无效（例如，它在未映射的驱动器上）。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetFiles">
      <MemberSignature Language="C#" Value="public static string[] GetFiles (string path, string searchPattern, System.IO.SearchOption searchOption);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string[] GetFiles(string path, string searchPattern, valuetype System.IO.SearchOption searchOption) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.GetFiles(System.String,System.String,System.IO.SearchOption)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetFiles (path As String, searchPattern As String, searchOption As SearchOption) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::String ^&gt; ^ GetFiles(System::String ^ path, System::String ^ searchPattern, System::IO::SearchOption searchOption);" />
      <MemberSignature Language="F#" Value="static member GetFiles : string * string * System.IO.SearchOption -&gt; string[]" Usage="System.IO.Directory.GetFiles (path, searchPattern, searchOption)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="searchPattern" Type="System.String" Index="1" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="searchOption" Type="System.IO.SearchOption" Index="2" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="path">要搜索的目录的相对或绝对路径。 此字符串不区分大小写。</param>
        <param name="searchPattern">要与 <paramref name="path" /> 中的文件名匹配的搜索字符串。  此参数可以包含有效文本路径和通配符（* 和 ?）的组合，但不支持正则表达式。</param>
        <param name="searchOption">用于指定搜索操作是应包含所有子目录还是仅包含当前目录的枚举值之一。</param>
        <summary>返回指定目录中与指定的搜索模式匹配的文件的名称（包含其路径），使用某个值确定是否要搜索子目录。</summary>
        <returns>指定目录中与指定的搜索模式和选项匹配的文件的完整名称（包含路径）的数组；如果未找到任何文件，则为空数组。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 返回的文件名将追加到所提供的参数 `path` 并且不保证返回的文件名的顺序。如果需要特定的排序顺序，请使用 <xref:System.Array.Sort%2A> 方法。  
  
 `searchPattern` 可以是文字和通配符的组合，但不支持正则表达式。 `searchPattern`中允许使用以下通配符说明符。  
  
|通配符说明符|匹配|  
|------------------------|-------------|  
|\* （星号）|此位置中的零个或多个字符。|  
|? （问号）|此位置中的零个或一个字符。|  
  
 通配符以外的字符为原义字符。 例如，`searchPattern` 字符串 "\*t" 搜索 `path` 以字母 "t" 结尾的所有名称。 `searchPattern` 字符串 "s\*" 搜索 `path` 以字母 "s" 开头的所有名称。  
  
 `searchPattern` 不能以两个句点（"..."）结束或包含两个句点（"..."），后跟 <xref:System.IO.Path.DirectorySeparatorChar> 或 <xref:System.IO.Path.AltDirectorySeparatorChar>，也不能包含任何无效字符。 你可以使用 <xref:System.IO.Path.GetInvalidPathChars%2A> 方法查询无效字符。  
  
> [!NOTE]
>  如果在 `searchPattern` 如 "\*.txt" 中使用星号通配符，则指定扩展中的字符数将影响搜索，如下所示：  
>   
> -   如果指定的扩展长度恰好为三个字符，则该方法将返回扩展名以指定扩展名开头的文件。 例如，"\*.xls" 同时返回 "node.js" 和 "node.js"。  
> -   在所有其他情况下，该方法将返回完全与指定扩展名匹配的文件。 例如，"\*" 将返回 "file.ai"，而不是 "node.js"。  
>   
>  使用问号通配符时，此方法只返回与指定文件扩展名匹配的文件。 例如，给定两个文件： "file1" 和 "txtother"，在目录中，"文件？" 的搜索模式。txt "只返回第一个文件，而" file* "的搜索模式返回这两个文件。  
  
> [!NOTE]
>  由于此方法使用8.3 文件名格式和长文件名格式的文件名进行检查，因此类似于 "\*1\*.txt" 的搜索模式可能会返回意外的文件名。 例如，使用搜索模式 "\*1\*.txt" 将返回 "longfilename"，因为等效的8.3 文件名格式为 "LONGFI ~ 1 .TXT"。  
  
 <xref:System.IO.Directory.EnumerateFiles%2A> 和 <xref:System.IO.Directory.GetFiles%2A> 方法的区别如下：使用 <xref:System.IO.Directory.EnumerateFiles%2A>时，可以在返回整个集合之前开始枚举名称的集合;使用 <xref:System.IO.Directory.GetFiles%2A>时，必须等待返回整个名称数组，然后才能访问数组。 因此，在处理多个文件和目录时，<xref:System.IO.Directory.EnumerateFiles%2A> 可能更高效。  
  
 文件名包含完整路径。  
  
 `path` 参数可以指定相对或绝对路径信息。 相对路径信息被解释为相对于当前工作目录。 若要获取当前工作目录，请参阅 <xref:System.IO.Directory.GetCurrentDirectory%2A>。  
  
 `path` 参数不区分大小写。  
  
 有关常见 i/o 任务的列表，请参阅[常见 I/o 任务](/dotnet/standard/io/common-i-o-tasks)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="path" /> 为长度为零的字符串，仅包含空格，或包含一个或多个无效字符。 你可以使用 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 方法查询无效字符。  
  
-或- 
 <paramref name="searchPattern" /> 不包含有效模式。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> 或 <paramref name="searchpattern" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="searchOption" /> 不是有效的 <see cref="T:System.IO.SearchOption" /> 值。</exception>
        <exception cref="T:System.UnauthorizedAccessException">调用方没有所要求的权限。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">指定的路径未找到或无效（例如，它在未映射的驱动器上）。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定的路径和/或文件名超过了系统定义的最大长度。</exception>
        <exception cref="T:System.IO.IOException"><paramref name="path" /> 是一个文件名。  
  
-或- 
发生了网络错误。</exception>
        <related type="Article" href="/dotnet/standard/io/">文件和流 I/O</related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file">如何：从文件读取文本</related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file">如何：向文件写入文本</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetFileSystemEntries">
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>返回满足指定条件的所有文件和子目录的名称。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetFileSystemEntries">
      <MemberSignature Language="C#" Value="public static string[] GetFileSystemEntries (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string[] GetFileSystemEntries(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.GetFileSystemEntries(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetFileSystemEntries (path As String) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::String ^&gt; ^ GetFileSystemEntries(System::String ^ path);" />
      <MemberSignature Language="F#" Value="static member GetFileSystemEntries : string -&gt; string[]" Usage="System.IO.Directory.GetFileSystemEntries path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">要搜索的目录的相对或绝对路径。 此字符串不区分大小写。</param>
        <summary>返回指定路径中的所有文件和子目录的名称。</summary>
        <returns>指定目录中的文件和子目录的名称的数组；如果找不到任何文件或子目录，则为空数组。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 不保证返回的文件和目录名称的顺序。如果需要特定的排序顺序，请使用 <xref:System.Array.Sort%2A> 方法。  
  
 <xref:System.IO.Directory.EnumerateFileSystemEntries%2A> 和 <xref:System.IO.Directory.GetFileSystemEntries%2A> 方法的区别如下：使用 <xref:System.IO.Directory.EnumerateFileSystemEntries%2A>时，可以在返回整个集合之前，开始枚举条目的集合;使用 <xref:System.IO.Directory.GetFileSystemEntries%2A>时，必须等待返回整个项数组，然后才能访问数组。 因此，在处理多个文件和目录时，<xref:System.IO.Directory.EnumerateFiles%2A> 可能更高效。  
  
 此方法等同于将星号（\*）指定为搜索模式的 <xref:System.IO.Directory.GetFileSystemEntries%2A>。  
  
 允许 `path` 参数指定相对或绝对路径信息。 相对路径信息被解释为相对于当前工作目录。 若要获取当前工作目录，请参阅 <xref:System.IO.Directory.GetCurrentDirectory%2A>。  
  
 `path` 参数不区分大小写。  
  
 有关常见 i/o 任务的列表，请参阅[常见 I/o 任务](/dotnet/standard/io/common-i-o-tasks)。  
  
   
  
## Examples  
 下面的示例使用 <xref:System.IO.Directory.GetFileSystemEntries%2A> 方法，用用户指定的位置中所有文件和子目录的名称填充字符串数组，并将数组中的每个字符串打印到控制台。 该示例配置为捕获此方法通用的所有错误。  
  
 [!code-cpp[System.IO.Directory#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.Directory/CPP/class1.cpp#1)]
 [!code-csharp[System.IO.Directory#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Directory/CS/class1.cs#1)]
 [!code-vb[System.IO.Directory#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Directory/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException">调用方没有所要求的权限。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="path" /> 为长度为零的字符串，仅包含空格，或包含一个或多个无效字符。 你可以使用 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 查询无效字符。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定的路径和/或文件名超过了系统定义的最大长度。</exception>
        <exception cref="T:System.IO.IOException"><paramref name="path" /> 是一个文件名。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">指定的路径无效（例如，它位于未映射的驱动器上）。</exception>
        <altmember cref="T:System.IO.FileSystemWatcher" />
        <altmember cref="T:System.IO.FileSystemInfo" />
        <related type="Article" href="/dotnet/standard/io/">文件和流 I/O</related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file">如何：从文件读取文本</related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file">如何：向文件写入文本</related>
      </Docs>
    </Member>
    <Member MemberName="GetFileSystemEntries">
      <MemberSignature Language="C#" Value="public static string[] GetFileSystemEntries (string path, string searchPattern);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string[] GetFileSystemEntries(string path, string searchPattern) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.GetFileSystemEntries(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetFileSystemEntries (path As String, searchPattern As String) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::String ^&gt; ^ GetFileSystemEntries(System::String ^ path, System::String ^ searchPattern);" />
      <MemberSignature Language="F#" Value="static member GetFileSystemEntries : string * string -&gt; string[]" Usage="System.IO.Directory.GetFileSystemEntries (path, searchPattern)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="searchPattern" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">要搜索的目录的相对或绝对路径。 此字符串不区分大小写。</param>
        <param name="searchPattern">要与 <paramref name="path" /> 中的文件和目录的名称匹配的搜索字符串。  此参数可以包含有效文本路径和通配符（* 和 ?）的组合，但不支持正则表达式。</param>
        <summary>返回一个数组，其中包含与指定路径中的搜索模式相匹配的文件名和目录名称。</summary>
        <returns>与指定的搜索条件匹配的文件名和目录名的数组；如果找不到任何文件或目录，则为空数组。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 不保证返回的文件和目录名称的顺序。如果需要特定的排序顺序，请使用 <xref:System.Array.Sort%2A> 方法。  
  
 `searchPattern` 可以是文字和通配符的组合，但不支持正则表达式。 `searchPattern`中允许使用以下通配符说明符。  
  
|通配符说明符|匹配|  
|------------------------|-------------|  
|\* （星号）|此位置中的零个或多个字符。|  
|? （问号）|此位置中的零个或一个字符。|  
  
 通配符以外的字符为原义字符。 例如，`searchPattern` 字符串 "\*t" 搜索 `path` 以字母 "t" 结尾的所有名称。 `searchPattern` 字符串 "s\*" 搜索 `path` 以字母 "s" 开头的所有名称。  
  
 `searchPattern` 不能以两个句点（"..."）结束或包含两个句点（"..."），后跟 <xref:System.IO.Path.DirectorySeparatorChar> 或 <xref:System.IO.Path.AltDirectorySeparatorChar>，也不能包含任何无效字符。 你可以使用 <xref:System.IO.Path.GetInvalidPathChars%2A> 方法查询无效字符。  
  
> [!NOTE]
>  如果在 `searchPattern` 如 "\*.txt" 中使用星号通配符，则指定扩展中的字符数将影响搜索，如下所示：  
>   
> -   如果指定的扩展长度恰好为三个字符，则该方法将返回扩展名以指定扩展名开头的文件。 例如，"\*.xls" 同时返回 "node.js" 和 "node.js"。  
> -   在所有其他情况下，该方法将返回完全与指定扩展名匹配的文件。 例如，"\*" 将返回 "file.ai"，而不是 "node.js"。  
>   
>  使用问号通配符时，此方法只返回与指定文件扩展名匹配的文件。 例如，给定两个文件： "file1" 和 "txtother"，在目录中，"文件？" 的搜索模式。txt "只返回第一个文件，而" file\*.txt "的搜索模式返回这两个文件。  
  
 允许 `path` 参数指定相对或绝对路径信息。 相对路径信息被解释为相对于当前工作目录。 若要获取当前工作目录，请参阅 <xref:System.IO.Directory.GetCurrentDirectory%2A>。  
  
 `path` 参数不区分大小写。  
  
 有关常见 i/o 任务的列表，请参阅[常见 I/o 任务](/dotnet/standard/io/common-i-o-tasks)。  
  
   
  
## Examples  
 下面的示例使用 <xref:System.IO.Directory.GetFileSystemEntries%2A> 方法，使用与特定位置中的用户指定筛选器匹配的所有文件的名称填充字符串数组，并将数组中的每个字符串打印到控制台。 该示例配置为捕获此方法通用的所有错误。  
  
 [!code-cpp[System.IO.Directory#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.Directory/CPP/class1.cpp#2)]
 [!code-csharp[System.IO.Directory#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Directory/CS/class1.cs#2)]
 [!code-vb[System.IO.Directory#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Directory/VB/class1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException">调用方没有所要求的权限。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="path" /> 为长度为零的字符串，仅包含空格，或包含一个或多个无效字符。 你可以使用 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 方法查询无效字符。  
  
-或- 
 <paramref name="searchPattern" /> 不包含有效模式。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> 或 <paramref name="searchPattern" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定的路径和/或文件名超过了系统定义的最大长度。</exception>
        <exception cref="T:System.IO.IOException"><paramref name="path" /> 是一个文件名。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">指定的路径无效（例如，它位于未映射的驱动器上）。</exception>
        <altmember cref="T:System.IO.FileSystemInfo" />
        <altmember cref="T:System.IO.FileSystemWatcher" />
        <related type="Article" href="/dotnet/standard/io/">文件和流 I/O</related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file">如何：从文件读取文本</related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file">如何：向文件写入文本</related>
      </Docs>
    </Member>
    <Member MemberName="GetFileSystemEntries">
      <MemberSignature Language="C#" Value="public static string[] GetFileSystemEntries (string path, string searchPattern, System.IO.EnumerationOptions enumerationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string[] GetFileSystemEntries(string path, string searchPattern, class System.IO.EnumerationOptions enumerationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.GetFileSystemEntries(System.String,System.String,System.IO.EnumerationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetFileSystemEntries (path As String, searchPattern As String, enumerationOptions As EnumerationOptions) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::String ^&gt; ^ GetFileSystemEntries(System::String ^ path, System::String ^ searchPattern, System::IO::EnumerationOptions ^ enumerationOptions);" />
      <MemberSignature Language="F#" Value="static member GetFileSystemEntries : string * string * System.IO.EnumerationOptions -&gt; string[]" Usage="System.IO.Directory.GetFileSystemEntries (path, searchPattern, enumerationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="searchPattern" Type="System.String" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="enumerationOptions" Type="System.IO.EnumerationOptions" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="path">要搜索的目录的相对或绝对路径。 此字符串不区分大小写。</param>
        <param name="searchPattern">要与 <paramref name="path" /> 中的子目录的名称匹配的搜索字符串。 此参数可以包含有效文本和通配符的组合，但不支持正则表达式。</param>
        <param name="enumerationOptions">描述要使用的搜索和枚举配置的对象。</param>
        <summary>返回指定路径中与搜索模式和枚举选项匹配的文件名和目录名的数组。</summary>
        <returns>一个数组，它包含与指定的搜索模式和枚举选项匹配的文件名和目录名；如果找不到任何文件或目录，则为空数组。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 不保证返回的文件和目录名称的顺序。如果需要特定的排序顺序，请使用 <xref:System.Array.Sort%2A> 方法。

 `searchPattern` 可以是文字和通配符的组合，但不支持正则表达式。 `searchPattern`中允许使用以下通配符说明符。

|通配符说明符|匹配|
|------------------------|-------------|
|\* （星号）|此位置中的零个或多个字符。|
|? （问号）|此位置中的零个或一个字符。|

 通配符以外的字符为原义字符。 例如，`searchPattern` 字符串 "\*t" 搜索 `path` 以字母 "t" 结尾的所有名称。 `searchPattern` 字符串 "s\*" 搜索 `path` 以字母 "s" 开头的所有名称。

 `searchPattern` 不能以两个句点（"..."）结束或包含两个句点（"..."），后跟 <xref:System.IO.Path.DirectorySeparatorChar> 或 <xref:System.IO.Path.AltDirectorySeparatorChar>，也不能包含任何无效字符。 你可以使用 <xref:System.IO.Path.GetInvalidPathChars%2A> 方法查询无效字符。

> [!NOTE]
>  如果在 `searchPattern` 如 "\*.txt" 中使用星号通配符，则指定扩展中的字符数将影响搜索，如下所示：
> 
> -   如果指定的扩展长度恰好为三个字符，则该方法将返回扩展名以指定扩展名开头的文件。 例如，"\*.xls" 同时返回 "node.js" 和 "node.js"。
> -   在所有其他情况下，该方法将返回完全与指定扩展名匹配的文件。 例如，"\*" 将返回 "file.ai"，而不是 "node.js"。
> 
>  使用问号通配符时，此方法只返回与指定文件扩展名匹配的文件。 例如，给定两个文件： "file1" 和 "txtother"，在目录中，"文件？" 的搜索模式。txt "只返回第一个文件，而" file\*.txt "的搜索模式返回这两个文件。

 允许 `path` 参数指定相对或绝对路径信息。 相对路径信息被解释为相对于当前工作目录。 若要获取当前工作目录，请参阅 <xref:System.IO.Directory.GetCurrentDirectory%2A>。

 `path` 参数不区分大小写。

 有关常见 i/o 任务的列表，请参阅[常见 I/o 任务](/dotnet/standard/io/common-i-o-tasks)。

          ]]></format>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException">调用方没有所要求的权限。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="path" /> 为长度为零的字符串，仅包含空格，或包含一个或多个无效字符。 你可以使用 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 方法查询无效字符。

-或-

<paramref name="searchPattern" /> 不包含有效模式。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> 或 <paramref name="searchPattern" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定的路径和/或文件名超过了系统定义的最大长度。</exception>
        <exception cref="T:System.IO.IOException"><paramref name="path" /> 是一个文件名。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">指定的路径无效（例如，它位于未映射的驱动器上）。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetFileSystemEntries">
      <MemberSignature Language="C#" Value="public static string[] GetFileSystemEntries (string path, string searchPattern, System.IO.SearchOption searchOption);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string[] GetFileSystemEntries(string path, string searchPattern, valuetype System.IO.SearchOption searchOption) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.GetFileSystemEntries(System.String,System.String,System.IO.SearchOption)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetFileSystemEntries (path As String, searchPattern As String, searchOption As SearchOption) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::String ^&gt; ^ GetFileSystemEntries(System::String ^ path, System::String ^ searchPattern, System::IO::SearchOption searchOption);" />
      <MemberSignature Language="F#" Value="static member GetFileSystemEntries : string * string * System.IO.SearchOption -&gt; string[]" Usage="System.IO.Directory.GetFileSystemEntries (path, searchPattern, searchOption)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="searchPattern" Type="System.String" Index="1" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="searchOption" Type="System.IO.SearchOption" Index="2" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="path">要搜索的目录的相对或绝对路径。 此字符串不区分大小写。</param>
        <param name="searchPattern">要与 <paramref name="path" /> 中的文件和目录的名称匹配的搜索字符串。  此参数可以包含有效文本路径和通配符（* 和 ?）的组合，但不支持正则表达式。</param>
        <param name="searchOption">指定搜索操作是应仅包含当前目录还是应包含所有子目录的枚举值之一。 默认值是 <see cref="F:System.IO.SearchOption.TopDirectoryOnly" />。</param>
        <summary>返回指定路径中与搜索模式匹配的所有文件名和目录名的数组，还可以搜索子目录。</summary>
        <returns>与指定的搜索条件匹配的文件名和目录名的数组；如果找不到任何文件或目录，则为空数组。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 不保证返回的文件和目录名称的顺序。如果需要特定的排序顺序，请使用 <xref:System.Array.Sort%2A> 方法。  
  
 `searchPattern` 可以是文字和通配符的组合，但不支持正则表达式。 `searchPattern`中允许使用以下通配符说明符。  
  
|通配符说明符|匹配|  
|------------------------|-------------|  
|\* （星号）|此位置中的零个或多个字符。|  
|? （问号）|此位置中的零个或一个字符。|  
  
 通配符以外的字符为原义字符。 例如，`searchPattern` 字符串 "\*t" 搜索 `path` 以字母 "t" 结尾的所有名称。 `searchPattern` 字符串 "s\*" 搜索 `path` 以字母 "s" 开头的所有名称。  
  
 `searchPattern` 不能以两个句点（"..."）结束或包含两个句点（"..."），后跟 <xref:System.IO.Path.DirectorySeparatorChar> 或 <xref:System.IO.Path.AltDirectorySeparatorChar>，也不能包含任何无效字符。 你可以使用 <xref:System.IO.Path.GetInvalidPathChars%2A> 方法查询无效字符。  
  
> [!NOTE]
>  如果在 `searchPattern` 如 "\*.txt" 中使用星号通配符，则指定扩展中的字符数将影响搜索，如下所示：  
>   
> -   如果指定的扩展长度恰好为三个字符，则该方法将返回扩展名以指定扩展名开头的文件。 例如，"\*.xls" 同时返回 "node.js" 和 "node.js"。  
> -   在所有其他情况下，该方法将返回完全与指定扩展名匹配的文件。 例如，"\*" 将返回 "file.ai"，而不是 "node.js"。  
>   
>  使用问号通配符时，此方法只返回与指定文件扩展名匹配的文件。 例如，给定两个文件： "file1" 和 "txtother"，在目录中，"文件？" 的搜索模式。txt "只返回第一个文件，而" file\*.txt "的搜索模式返回这两个文件。  
  
 <xref:System.IO.Directory.EnumerateFileSystemEntries%2A> 和 <xref:System.IO.Directory.GetFileSystemEntries%2A> 方法的区别如下：使用 <xref:System.IO.Directory.EnumerateFileSystemEntries%2A>时，可以在返回整个集合之前，开始枚举条目的集合;使用 <xref:System.IO.Directory.GetFileSystemEntries%2A>时，必须等待返回整个项数组，然后才能访问数组。 因此，在处理多个文件和目录时，<xref:System.IO.Directory.EnumerateFiles%2A> 可能更高效。  
  
 可以指定具有 `path` 参数的相对路径信息。 相对路径信息被解释为相对于当前工作目录，您可以使用 <xref:System.IO.Directory.GetCurrentDirectory%2A> 方法来确定。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="path" /> 是一个长度为零的字符串，仅包含空格，或包含无效字符。 你可以使用 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 方法查询无效字符。  
  
-或- 
 <paramref name="searchPattern" /> 不包含有效模式。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> 为 <see langword="null" />。  
  
-或- 
 <paramref name="searchPattern" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="searchOption" /> 不是有效的 <see cref="T:System.IO.SearchOption" /> 值。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path" /> 无效，如引用未映射的驱动器。</exception>
        <exception cref="T:System.IO.IOException"><paramref name="path" /> 是一个文件名。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定的路径和/或文件名超过了系统定义的最大长度。</exception>
        <exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。</exception>
        <exception cref="T:System.UnauthorizedAccessException">调用方没有所要求的权限。</exception>
        <altmember cref="T:System.IO.FileSystemWatcher" />
      </Docs>
    </Member>
    <Member MemberName="GetLastAccessTime">
      <MemberSignature Language="C#" Value="public static DateTime GetLastAccessTime (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime GetLastAccessTime(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.GetLastAccessTime(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetLastAccessTime (path As String) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime GetLastAccessTime(System::String ^ path);" />
      <MemberSignature Language="F#" Value="static member GetLastAccessTime : string -&gt; DateTime" Usage="System.IO.Directory.GetLastAccessTime path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">要获取其访问日期和时间信息的文件或目录。</param>
        <summary>返回上次访问指定文件或目录的日期和时间。</summary>
        <returns>一个结构，它被设置为上次访问指定文件或目录的日期和时间。 该值用本地时间表示。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  此方法可能会返回不准确的值，因为它使用的本机函数的值可能不会持续由操作系统进行更新。  
  
 此方法与 <xref:System.IO.File.GetLastAccessTime%2A?displayProperty=nameWithType>完全相同。  
  
 如果 `path` 参数中所述的目录不存在，则此方法将返回12:00 年1月 1601 1 日午夜 公元协调世界时（UTC），调整为本地时间。  
  
 允许 `path` 参数指定相对或绝对路径信息。 相对路径信息被解释为相对于当前工作目录。 若要获取当前工作目录，请参阅 <xref:System.IO.Directory.GetCurrentDirectory%2A>。  
  
 `path` 参数不区分大小写。  
  
 有关常见 i/o 任务的列表，请参阅[常见 I/o 任务](/dotnet/standard/io/common-i-o-tasks)。  
  
   
  
## Examples  
 下面的示例演示如何使用 `GetLastAccessTime`。  
  
 [!code-cpp[Dir_GetLastAccess#1](~/samples/snippets/cpp/VS_Snippets_CLR/Dir_GetLastAccess/CPP/dir_getlastaccess.cpp#1)]
 [!code-csharp[Dir_GetLastAccess#1](~/samples/snippets/csharp/VS_Snippets_CLR/Dir_GetLastAccess/CS/dir_getlastaccess.cs#1)]
 [!code-vb[Dir_GetLastAccess#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Dir_GetLastAccess/VB/dir_getlastaccess.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException">调用方没有所要求的权限。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="path" /> 为长度为零的字符串，仅包含空格，或包含一个或多个无效字符。 你可以使用 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 方法查询无效字符。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定的路径和/或文件名超过了系统定义的最大长度。</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="path" /> 参数格式无效。</exception>
        <altmember cref="T:System.IO.FileSystemWatcher" />
        <related type="Article" href="/dotnet/standard/io/">文件和流 I/O</related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file">如何：从文件读取文本</related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file">如何：向文件写入文本</related>
      </Docs>
    </Member>
    <Member MemberName="GetLastAccessTimeUtc">
      <MemberSignature Language="C#" Value="public static DateTime GetLastAccessTimeUtc (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime GetLastAccessTimeUtc(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.GetLastAccessTimeUtc(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetLastAccessTimeUtc (path As String) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime GetLastAccessTimeUtc(System::String ^ path);" />
      <MemberSignature Language="F#" Value="static member GetLastAccessTimeUtc : string -&gt; DateTime" Usage="System.IO.Directory.GetLastAccessTimeUtc path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">要获取其访问日期和时间信息的文件或目录。</param>
        <summary>返回上次访问指定文件或目录的日期和时间，其格式为协调通用时 (UTC)。</summary>
        <returns>一个结构，它被设置为上次访问指定文件或目录的日期和时间。 该值用 UTC 时间表示。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  此方法可能会返回不准确的值，因为它使用的本机函数的值可能不会持续由操作系统进行更新。  
  
 如果 `path` 参数中所述的目录不存在，则此方法将返回12:00 年1月 1601 1 日午夜 公元协调世界时（UTC）。  
  
 有关常见 i/o 任务的列表，请参阅[常见 I/o 任务](/dotnet/standard/io/common-i-o-tasks)。  
  
   
  
## Examples  
 下面的示例演示使用协调世界时（UTC）输出时的输出差异。  
  
 [!code-cpp[System.IO.UTCExample#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.UTCExample/CPP/example.cpp#1)]
 [!code-csharp[System.IO.UTCExample#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.UTCExample/CS/example.cs#1)]
 [!code-vb[System.IO.UTCExample#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.UTCExample/VB/example.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException">调用方没有所要求的权限。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="path" /> 为长度为零的字符串，仅包含空格，或包含一个或多个无效字符。 你可以使用 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 方法查询无效字符。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定的路径和/或文件名超过了系统定义的最大长度。</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="path" /> 参数格式无效。</exception>
        <altmember cref="T:System.IO.FileSystemWatcher" />
        <related type="Article" href="/dotnet/standard/io/">文件和流 I/O</related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file">如何：从文件读取文本</related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file">如何：向文件写入文本</related>
      </Docs>
    </Member>
    <Member MemberName="GetLastWriteTime">
      <MemberSignature Language="C#" Value="public static DateTime GetLastWriteTime (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime GetLastWriteTime(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.GetLastWriteTime(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetLastWriteTime (path As String) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime GetLastWriteTime(System::String ^ path);" />
      <MemberSignature Language="F#" Value="static member GetLastWriteTime : string -&gt; DateTime" Usage="System.IO.Directory.GetLastWriteTime path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">要获取其修改日期和时间信息的文件或目录。</param>
        <summary>返回上次写入指定文件或目录的日期和时间。</summary>
        <returns>一个结构，它被设置为上次写入指定文件或目录的日期和时间。 该值用本地时间表示。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  此方法可能会返回不准确的值，因为它使用的本机函数的值可能不会持续由操作系统进行更新。  
  
 如果 `path` 参数中所述的目录不存在，则此方法将返回12:00 年1月 1601 1 日午夜 公元协调世界时（UTC），调整为本地时间。  
  
 允许 `path` 参数指定相对或绝对路径信息。 相对路径信息被解释为相对于当前工作目录。 若要获取当前工作目录，请参阅 <xref:System.IO.Directory.GetCurrentDirectory%2A>。  
  
 `path` 参数不区分大小写。  
  
 有关常见 i/o 任务的列表，请参阅[常见 I/o 任务](/dotnet/standard/io/common-i-o-tasks)。  
  
   
  
## Examples  
 下面的示例演示如何使用 `GetLastWriteTime`。  
  
 [!code-cpp[Dir_GetLastWrite#1](~/samples/snippets/cpp/VS_Snippets_CLR/Dir_GetLastWrite/CPP/dir_getlastwrite.cpp#1)]
 [!code-csharp[Dir_GetLastWrite#1](~/samples/snippets/csharp/VS_Snippets_CLR/Dir_GetLastWrite/CS/dir_getlastwrite.cs#1)]
 [!code-vb[Dir_GetLastWrite#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Dir_GetLastWrite/VB/dir_getlastwrite.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException">调用方没有所要求的权限。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="path" /> 为长度为零的字符串，仅包含空格，或包含一个或多个无效字符。 你可以使用 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 方法查询无效字符。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定的路径和/或文件名超过了系统定义的最大长度。</exception>
        <altmember cref="T:System.IO.FileSystemWatcher" />
        <related type="Article" href="/dotnet/standard/io/">文件和流 I/O</related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file">如何：从文件读取文本</related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file">如何：向文件写入文本</related>
      </Docs>
    </Member>
    <Member MemberName="GetLastWriteTimeUtc">
      <MemberSignature Language="C#" Value="public static DateTime GetLastWriteTimeUtc (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime GetLastWriteTimeUtc(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.GetLastWriteTimeUtc(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetLastWriteTimeUtc (path As String) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime GetLastWriteTimeUtc(System::String ^ path);" />
      <MemberSignature Language="F#" Value="static member GetLastWriteTimeUtc : string -&gt; DateTime" Usage="System.IO.Directory.GetLastWriteTimeUtc path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">要获取其修改日期和时间信息的文件或目录。</param>
        <summary>返回上次写入指定文件或目录的日期和时间，其格式为协调通用时 (UTC)。</summary>
        <returns>一个结构，它被设置为上次写入指定文件或目录的日期和时间。 该值用 UTC 时间表示。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  此方法可能会返回不准确的值，因为它使用的本机函数的值可能不会持续由操作系统进行更新。  
  
 如果 `path` 参数中所述的目录不存在，则此方法将返回12:00 年1月 1601 1 日午夜 公元协调世界时（UTC）。  
  
 有关常见 i/o 任务的列表，请参阅[常见 I/o 任务](/dotnet/standard/io/common-i-o-tasks)。  
  
   
  
## Examples  
 下面的示例演示使用协调世界时（UTC）输出时的输出差异。  
  
 [!code-cpp[System.IO.UTCExample#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.UTCExample/CPP/example.cpp#1)]
 [!code-csharp[System.IO.UTCExample#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.UTCExample/CS/example.cs#1)]
 [!code-vb[System.IO.UTCExample#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.UTCExample/VB/example.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException">调用方没有所要求的权限。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="path" /> 为长度为零的字符串，仅包含空格，或包含一个或多个无效字符。 你可以使用 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 方法查询无效字符。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定的路径和/或文件名超过了系统定义的最大长度。</exception>
        <altmember cref="T:System.IO.FileSystemWatcher" />
        <related type="Article" href="/dotnet/standard/io/">文件和流 I/O</related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file">如何：从文件读取文本</related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file">如何：向文件写入文本</related>
      </Docs>
    </Member>
    <Member MemberName="GetLogicalDrives">
      <MemberSignature Language="C#" Value="public static string[] GetLogicalDrives ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string[] GetLogicalDrives() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.GetLogicalDrives" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetLogicalDrives () As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::String ^&gt; ^ GetLogicalDrives();" />
      <MemberSignature Language="F#" Value="static member GetLogicalDrives : unit -&gt; string[]" Usage="System.IO.Directory.GetLogicalDrives " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>检索此计算机上格式为“&lt;drive letter&gt;:\\”的逻辑驱动器的名称。</summary>
        <returns>此计算机上的逻辑驱动器。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 GetLogicalDrives 返回特定计算机上的所有可访问驱动器，包括软盘驱动器和所有光驱。  
  
 有关常见 i/o 任务的列表，请参阅[常见 I/o 任务](/dotnet/standard/io/common-i-o-tasks)。  
  
   
  
## Examples  
 下面的示例使用 <xref:System.IO.Directory.GetLogicalDrives%2A> 方法将调用计算机上每个驱动器的名称分配给一个字符串数组。 然后，将此字符串数组中的每个成员打印到控制台。 该示例配置为捕获此方法通用的所有错误。  
  
 [!code-cpp[System.IO.Directory#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.Directory/CPP/class1.cpp#3)]
 [!code-csharp[System.IO.Directory#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Directory/CS/class1.cs#3)]
 [!code-vb[System.IO.Directory#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Directory/VB/class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">发生了 I/O 错误（例如，磁盘错误）。</exception>
        <exception cref="T:System.UnauthorizedAccessException">调用方没有所要求的权限。</exception>
        <related type="Article" href="/dotnet/standard/io/">文件和流 I/O</related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file">如何：从文件读取文本</related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file">如何：向文件写入文本</related>
      </Docs>
    </Member>
    <Member MemberName="GetParent">
      <MemberSignature Language="C#" Value="public static System.IO.DirectoryInfo GetParent (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.DirectoryInfo GetParent(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.GetParent(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetParent (path As String) As DirectoryInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::DirectoryInfo ^ GetParent(System::String ^ path);" />
      <MemberSignature Language="F#" Value="static member GetParent : string -&gt; System.IO.DirectoryInfo" Usage="System.IO.Directory.GetParent path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.DirectoryInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">要为其检索父目录的路径。</param>
        <summary>检索指定路径的父目录，包括绝对路径和相对路径。</summary>
        <returns>父目录，如果 <paramref name="path" /> 是根目录，包括 UNC 服务器或共享名的根，则为 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `path` 参数可以指定相对或绝对路径信息。 相对路径信息被解释为相对于当前工作目录。 若要获取当前工作目录，请参阅 <xref:System.IO.Directory.GetCurrentDirectory%2A>。  
  
 获取目录之前，从 `path` 参数的末尾删除尾随空格。  
  
 此方法返回的字符串包含路径中的所有字符，直到最后一个 <xref:System.IO.Path.DirectorySeparatorChar> 或 <xref:System.IO.Path.AltDirectorySeparatorChar>为止。 例如，将路径 "C:\Directory\SubDirectory\test.txt" 传递到 <xref:System.IO.Directory.GetParent%2A> 将返回 "C:\Directory\SubDirectory"。 传递 "C:\Directory\SubDirectory" 将返回 "C:\Directory"。 不过，传递 "C:\Directory\SubDirectory\\" 将返回 "C:\Directory\SubDirectory"，因为结束目录分隔符在 "子目录" 之后。  
  
 `path` 参数不区分大小写。  
  
 有关常见 i/o 任务的列表，请参阅[常见 I/o 任务](/dotnet/standard/io/common-i-o-tasks)。  
  
   
  
## Examples  
 下面的示例演示如何使用 <xref:System.IO.Directory.GetParent%2A> 方法检索用户指定位置 "path" 的父目录。 然后，将 <xref:System.IO.Directory.GetParent%2A> 方法返回的值输出到控制台。 该示例配置为捕获此方法通用的所有错误。  
  
 [!code-cpp[System.IO.Directory#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.Directory/CPP/class1.cpp#4)]
 [!code-csharp[System.IO.Directory#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Directory/CS/class1.cs#4)]
 [!code-vb[System.IO.Directory#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Directory/VB/class1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><paramref name="path" /> 指定的目录为只读。</exception>
        <exception cref="T:System.UnauthorizedAccessException">调用方没有所要求的权限。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="path" /> 为长度为零的字符串，仅包含空格，或包含一个或多个无效字符。 你可以使用 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 方法查询无效字符。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定的路径和/或文件名超过了系统定义的最大长度。 有关详细信息，请参阅<see cref="T:System.IO.PathTooLongException" />主题。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">未找到指定路径。</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="path" /> 的格式无效。</exception>
        <exception cref="T:System.Security.SecurityException">仅限 .NET Framework：调用方没有所需的权限。</exception>
        <altmember cref="T:System.IO.DirectoryInfo" />
        <related type="Article" href="/dotnet/standard/io/">文件和流 I/O</related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file">如何：从文件读取文本</related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file">如何：向文件写入文本</related>
      </Docs>
    </Member>
    <Member MemberName="Move">
      <MemberSignature Language="C#" Value="public static void Move (string sourceDirName, string destDirName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Move(string sourceDirName, string destDirName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.Move(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Move (sourceDirName As String, destDirName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Move(System::String ^ sourceDirName, System::String ^ destDirName);" />
      <MemberSignature Language="F#" Value="static member Move : string * string -&gt; unit" Usage="System.IO.Directory.Move (sourceDirName, destDirName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceDirName" Type="System.String" />
        <Parameter Name="destDirName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="sourceDirName">要移动的文件或目录的路径。</param>
        <param name="destDirName"><paramref name="sourceDirName" /> 的新位置的路径。 如果 <paramref name="sourceDirName" /> 是文件，那么 <paramref name="destDirName" /> 也必须是文件名。</param>
        <summary>将文件或目录及其内容移到新位置。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法使用 `destDirName` 指定的名称创建一个新目录，并将 `sourceDirName` 的内容移到新创建的目标目录。 如果尝试将目录移动到已存在的目录，将会出现 <xref:System.IO.IOException>。 例如，如果尝试将 c:\mydir 移动到 c:\public，并且 c:\public 已存在，则会出现异常。 另外，还可以指定 "c：\\\ 公用\\\mydir" 作为 `destDirName` 参数，前提是 "mydir" 在 "c：\\\ 公用" 下不存在，或指定新目录名称，如 "c：\\\newdir"。  
  
 允许 `sourceDirName` 和 `destDirName` 参数指定相对或绝对路径信息。 相对路径信息被解释为相对于当前工作目录。 若要获取当前工作目录，请参阅 <xref:System.IO.Directory.GetCurrentDirectory%2A>。  
  
 移动目录之前，会从路径参数的末尾删除尾随空格。  
  
 有关常见 i/o 任务的列表，请参阅[常见 I/o 任务](/dotnet/standard/io/common-i-o-tasks)。  


> [!NOTE]
>  从 .NET Core 3.0 开始，当 `destDirName` 已经存在时，`Move` 方法将引发所有平台中的 <xref:System.IO.IOException>。 在 .NET Core 2.2 和早期版本中，仅在 Windows 上引发异常，其他平台可能会失败或覆盖 `destDirName`。 请参阅[ C++重命名](https://linux.die.net/man/2/rename)。
   
  
## Examples  
 下面的示例演示如何将目录及其所有文件移动到新目录。 移动原始目录后，原始目录将不再存在。  
  
 [!code-csharp[System.IO.Directory#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Directory/CS/class6.cs#14)]
 [!code-vb[System.IO.Directory#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Directory/VB/class6.vb#14)]  

 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">尝试将目录移动到不同的卷。
  
-或- 
 <paramref name="destDirName" /> 已存在。 请参阅“备注”部分中的“说明”。
  
-或- 
<paramref name="sourceDirName" /> 和 <paramref name="destDirName" /> 参数引用同一个文件或目录。  
  
-或- 
另一个进程正在使用目录或其中一个文件。</exception>
        <exception cref="T:System.UnauthorizedAccessException">调用方没有所要求的权限。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="sourceDirName" /> 或 <paramref name="destDirName" /> 是一个长度为零的字符串，仅包含空格，或者包含一个或多个无效字符。 你可以使用 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 方法查询无效字符。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="sourceDirName" /> 或 <paramref name="destDirName" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定的路径和/或文件名超过了系统定义的最大长度。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="sourceDirName" /> 指定的路径无效（例如，它位于未映射的驱动器上）。</exception>
        <related type="Article" href="/dotnet/standard/io/">文件和流 I/O</related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file">如何：从文件读取文本</related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file">如何：向文件写入文本</related>
      </Docs>
    </Member>
    <Member MemberName="SetAccessControl">
      <MemberSignature Language="C#" Value="public static void SetAccessControl (string path, System.Security.AccessControl.DirectorySecurity directorySecurity);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetAccessControl(string path, class System.Security.AccessControl.DirectorySecurity directorySecurity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.SetAccessControl(System.String,System.Security.AccessControl.DirectorySecurity)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetAccessControl (path As String, directorySecurity As DirectorySecurity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetAccessControl(System::String ^ path, System::Security::AccessControl::DirectorySecurity ^ directorySecurity);" />
      <MemberSignature Language="F#" Value="static member SetAccessControl : string * System.Security.AccessControl.DirectorySecurity -&gt; unit" Usage="System.IO.Directory.SetAccessControl (path, directorySecurity)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="directorySecurity" Type="System.Security.AccessControl.DirectorySecurity" Index="1" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="path">要从中添加或移除访问控制列表 (ACL) 项的目录。</param>
        <param name="directorySecurity">一个 <see cref="T:System.Security.AccessControl.DirectorySecurity" /> 对象，描述要应用于 <paramref name="path" /> 参数所描述的目录的 ACL 项。</param>
        <summary>将 <see cref="T:System.Security.AccessControl.DirectorySecurity" /> 对象描述的访问控制列表 (ACL) 项应用于指定的目录。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Directory.SetAccessControl%2A> 方法将访问控制列表（ACL）项应用于表示 noninherited ACL 列表的文件。  
  
> [!CAUTION]
>  为 `directorySecurity` 参数指定的 ACL 将替换目录的现有 ACL。 若要为新用户添加权限，请使用 <xref:System.IO.Directory.GetAccessControl%2A> 方法获取现有 ACL 并进行修改。  
  
 ACL 描述对给定文件或目录具有或没有特定操作权限的个人和/或组。 有关详细信息，请参阅[如何：添加或移除访问控制列表项](/dotnet/standard/io/how-to-add-or-remove-access-control-list-entries)。  
  
 <xref:System.IO.Directory.SetAccessControl%2A> 方法仅保留在对象创建后修改的 <xref:System.Security.AccessControl.DirectorySecurity> 对象。  如果 <xref:System.Security.AccessControl.DirectorySecurity> 对象尚未修改，则不会将其保存到文件中。  因此，无法从一个文件中检索 <xref:System.Security.AccessControl.DirectorySecurity> 的对象，并将相同的对象重新应用到另一个文件。  
  
 若要将 ACL 信息从一个文件复制到另一个文件：  
  
1.  使用 <xref:System.IO.Directory.GetAccessControl%2A> 方法可以从源文件中检索 <xref:System.Security.AccessControl.DirectorySecurity> 对象。  
  
2.  为目标文件创建新的 <xref:System.Security.AccessControl.DirectorySecurity> 对象。  
  
3.  使用源 <xref:System.Security.AccessControl.DirectorySecurity> 对象的 <xref:System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorBinaryForm%2A> 或 <xref:System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorSddlForm%2A> 方法来检索 ACL 信息。  
  
4.  使用 <xref:System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorBinaryForm%2A> 或 <xref:System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorSddlForm%2A> 方法将在步骤3中检索到的信息复制到目标 <xref:System.Security.AccessControl.DirectorySecurity> 对象。  
  
5.  使用 <xref:System.IO.Directory.SetAccessControl%2A> 方法将目标 <xref:System.Security.AccessControl.DirectorySecurity> 对象设置为目标文件。  
  
 在 NTFS 环境下，如果用户对父文件夹具有 <xref:System.Security.AccessControl.FileSystemRights.ListDirectory> 权限，则会向用户授予 <xref:System.Security.AccessControl.FileSystemRights.ReadAttributes> 和 <xref:System.Security.AccessControl.FileSystemRights.ReadExtendedAttributes>。 若要拒绝 <xref:System.Security.AccessControl.FileSystemRights.ReadAttributes> 和 <xref:System.Security.AccessControl.FileSystemRights.ReadExtendedAttributes>，请拒绝父目录中的 <xref:System.Security.AccessControl.FileSystemRights.ListDirectory>。  
  
   
  
## Examples  
 下面的示例使用 <xref:System.IO.Directory.GetAccessControl%2A> 和 <xref:System.IO.Directory.SetAccessControl%2A> 方法添加访问控制列表（ACL）条目，然后从目录中删除 ACL 条目。  你必须提供有效的用户或组帐户以运行此示例。  
  
 [!code-cpp[IO.DiretoryInfo.GetAccessControl-SetAccessControl#1](~/samples/snippets/cpp/VS_Snippets_CLR/IO.DiretoryInfo.GetAccessControl-SetAccessControl/cpp/sample.cpp#1)]
 [!code-csharp[IO.DiretoryInfo.GetAccessControl-SetAccessControl#1](~/samples/snippets/csharp/VS_Snippets_CLR/IO.DiretoryInfo.GetAccessControl-SetAccessControl/CS/sample.cs#1)]
 [!code-vb[IO.DiretoryInfo.GetAccessControl-SetAccessControl#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/IO.DiretoryInfo.GetAccessControl-SetAccessControl/VB/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="directorySecurity" /> 参数为 <see langword="null" />。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">找不到该目录。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="path" /> 无效。</exception>
        <exception cref="T:System.UnauthorizedAccessException">当前进程无法访问 <paramref name="path" /> 指定的目录。  
  
-或- 
当前进程没有足够的特权来设置 ACL 项。</exception>
        <altmember cref="T:System.IO.FileSystemWatcher" />
      </Docs>
    </Member>
    <Member MemberName="SetCreationTime">
      <MemberSignature Language="C#" Value="public static void SetCreationTime (string path, DateTime creationTime);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetCreationTime(string path, valuetype System.DateTime creationTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.SetCreationTime(System.String,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetCreationTime (path As String, creationTime As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetCreationTime(System::String ^ path, DateTime creationTime);" />
      <MemberSignature Language="F#" Value="static member SetCreationTime : string * DateTime -&gt; unit" Usage="System.IO.Directory.SetCreationTime (path, creationTime)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="creationTime" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="path">要设置其创建日期和时间信息的文件或目录。</param>
        <param name="creationTime">上次写入到文件或目录的日期和时间。 该值用本地时间表示。</param>
        <summary>为指定的文件或目录设置创建日期和时间。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 允许 `path` 参数指定相对或绝对路径信息。 相对路径信息被解释为相对于当前工作目录。 若要获取当前工作目录，请参阅 <xref:System.IO.Directory.GetCurrentDirectory%2A>。  
  
 `path` 参数不区分大小写。  
  
   
  
## Examples  
 下面的示例演示使用协调世界时（UTC）输出时的输出差异。  
  
 [!code-cpp[System.IO.UTCExample#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.UTCExample/CPP/example.cpp#1)]
 [!code-csharp[System.IO.UTCExample#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.UTCExample/CS/example.cs#1)]
 [!code-vb[System.IO.UTCExample#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.UTCExample/VB/example.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.FileNotFoundException">未找到指定路径。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="path" /> 为长度为零的字符串，仅包含空格，或包含一个或多个无效字符。 你可以使用 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 方法查询无效字符。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定的路径和/或文件名超过了系统定义的最大长度。</exception>
        <exception cref="T:System.UnauthorizedAccessException">调用方没有所要求的权限。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="creationTime" /> 指定一个超出该操作允许的日期或时间范围的值。</exception>
        <exception cref="T:System.PlatformNotSupportedException">当前操作系统不是 Windows NT 或更高版本。</exception>
        <altmember cref="T:System.IO.FileSystemWatcher" />
        <related type="Article" href="/dotnet/standard/io/">文件和流 I/O</related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file">如何：从文件读取文本</related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file">如何：向文件写入文本</related>
      </Docs>
    </Member>
    <Member MemberName="SetCreationTimeUtc">
      <MemberSignature Language="C#" Value="public static void SetCreationTimeUtc (string path, DateTime creationTimeUtc);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetCreationTimeUtc(string path, valuetype System.DateTime creationTimeUtc) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.SetCreationTimeUtc(System.String,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetCreationTimeUtc (path As String, creationTimeUtc As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetCreationTimeUtc(System::String ^ path, DateTime creationTimeUtc);" />
      <MemberSignature Language="F#" Value="static member SetCreationTimeUtc : string * DateTime -&gt; unit" Usage="System.IO.Directory.SetCreationTimeUtc (path, creationTimeUtc)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="creationTimeUtc" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="path">要设置其创建日期和时间信息的文件或目录。</param>
        <param name="creationTimeUtc">目录或文件的创建日期和时间。 该值用本地时间表示。</param>
        <summary>设置指定文件或目录的创建日期和时间，其格式为协调通用时 (UTC)。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 允许 `path` 参数指定相对或绝对路径信息。 相对路径信息被解释为相对于当前工作目录。 若要获取当前工作目录，请参阅 <xref:System.IO.Directory.GetCurrentDirectory%2A>。  
  
 `path` 参数不区分大小写。  
  
 有关常见 i/o 任务的列表，请参阅[常见 I/o 任务](/dotnet/standard/io/common-i-o-tasks)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.FileNotFoundException">未找到指定路径。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="path" /> 为长度为零的字符串，仅包含空格，或包含一个或多个无效字符。 你可以使用 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 方法查询无效字符。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定的路径和/或文件名超过了系统定义的最大长度。</exception>
        <exception cref="T:System.UnauthorizedAccessException">调用方没有所要求的权限。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="creationTime" /> 指定一个超出该操作允许的日期或时间范围的值。</exception>
        <exception cref="T:System.PlatformNotSupportedException">当前操作系统不是 Windows NT 或更高版本。</exception>
        <altmember cref="T:System.IO.FileSystemWatcher" />
        <related type="Article" href="/dotnet/standard/io/">文件和流 I/O</related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file">如何：从文件读取文本</related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file">如何：向文件写入文本</related>
      </Docs>
    </Member>
    <Member MemberName="SetCurrentDirectory">
      <MemberSignature Language="C#" Value="public static void SetCurrentDirectory (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetCurrentDirectory(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.SetCurrentDirectory(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetCurrentDirectory (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetCurrentDirectory(System::String ^ path);" />
      <MemberSignature Language="F#" Value="static member SetCurrentDirectory : string -&gt; unit" Usage="System.IO.Directory.SetCurrentDirectory path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">设置为当前工作目录的路径。</param>
        <summary>将应用程序的当前工作目录设置为指定的目录。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当应用程序终止时，工作目录将还原到其原始位置（启动进程的目录）。  
  
 允许 `path` 参数指定相对或绝对路径信息。 相对路径信息被解释为相对于当前工作目录。 若要获取当前工作目录，请参阅 <xref:System.IO.Directory.GetCurrentDirectory%2A>。  
  
 设置目录之前，从 `path` 参数的末尾删除尾随空格。  
  
 `path` 参数不区分大小写。  
  
 如果要将目录设置为具有可移动媒体的驱动器（例如，"E：" 表示 USB 闪存驱动器），可以通过使用 <xref:System.IO.DriveInfo.IsReady%2A> 属性来确定驱动器是否已准备就绪。  
  
   
  
## Examples  
 下面的示例演示如何设置当前目录并显示目录根。  
  
 [!code-cpp[System.IO.DirectoryRoot#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.DirectoryRoot/CPP/example.cpp#1)]
 [!code-csharp[System.IO.DirectoryRoot#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.DirectoryRoot/CS/example.cs#1)]
 [!code-vb[System.IO.DirectoryRoot#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.DirectoryRoot/VB/example.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="path" /> 为长度为零的字符串，仅包含空格，或包含一个或多个无效字符。 你可以使用 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 方法查询无效字符。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定的路径和/或文件名超过了系统定义的最大长度。</exception>
        <exception cref="T:System.Security.SecurityException">调用方没有访问非托管代码所需的权限。</exception>
        <exception cref="T:System.IO.FileNotFoundException">未找到指定路径。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">未找到指定目录。</exception>
        <altmember cref="T:System.IO.FileSystemWatcher" />
        <related type="Article" href="/dotnet/standard/io/">文件和流 I/O</related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file">如何：从文件读取文本</related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file">如何：向文件写入文本</related>
      </Docs>
    </Member>
    <Member MemberName="SetLastAccessTime">
      <MemberSignature Language="C#" Value="public static void SetLastAccessTime (string path, DateTime lastAccessTime);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetLastAccessTime(string path, valuetype System.DateTime lastAccessTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.SetLastAccessTime(System.String,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetLastAccessTime (path As String, lastAccessTime As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetLastAccessTime(System::String ^ path, DateTime lastAccessTime);" />
      <MemberSignature Language="F#" Value="static member SetLastAccessTime : string * DateTime -&gt; unit" Usage="System.IO.Directory.SetLastAccessTime (path, lastAccessTime)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="lastAccessTime" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="path">要设置其访问日期和时间信息的文件或目录。</param>
        <param name="lastAccessTime">一个对象，它包含要为 <paramref name="path" /> 的访问日期和时间设置的值。 该值用本地时间表示。</param>
        <summary>设置上次访问指定文件或目录的日期和时间。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 允许 `path` 参数指定相对或绝对路径信息。 相对路径信息被解释为相对于当前工作目录。 若要获取当前工作目录，请参阅 <xref:System.IO.Directory.GetCurrentDirectory%2A>。  
  
 `path` 参数不区分大小写。  
  
 有关常见 i/o 任务的列表，请参阅[常见 I/o 任务](/dotnet/standard/io/common-i-o-tasks)。  
  
   
  
## Examples  
 下面的示例演示如何使用 `SetLastAccessTime`。  
  
 [!code-cpp[Dir_SetLastAccess#1](~/samples/snippets/cpp/VS_Snippets_CLR/Dir_SetLastAccess/CPP/dir_setlastaccess.cpp#1)]
 [!code-csharp[Dir_SetLastAccess#1](~/samples/snippets/csharp/VS_Snippets_CLR/Dir_SetLastAccess/CS/dir_setlastaccess.cs#1)]
 [!code-vb[Dir_SetLastAccess#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Dir_SetLastAccess/VB/dir_setlastaccess.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.FileNotFoundException">未找到指定路径。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="path" /> 为长度为零的字符串，仅包含空格，或包含一个或多个无效字符。 你可以使用 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 方法查询无效字符。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定的路径和/或文件名超过了系统定义的最大长度。</exception>
        <exception cref="T:System.UnauthorizedAccessException">调用方没有所要求的权限。</exception>
        <exception cref="T:System.PlatformNotSupportedException">当前操作系统不是 Windows NT 或更高版本。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="lastAccessTime" /> 指定一个超出该操作允许的日期或时间范围的值。</exception>
        <altmember cref="T:System.IO.FileSystemWatcher" />
        <related type="Article" href="/dotnet/standard/io/">文件和流 I/O</related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file">如何：从文件读取文本</related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file">如何：向文件写入文本</related>
      </Docs>
    </Member>
    <Member MemberName="SetLastAccessTimeUtc">
      <MemberSignature Language="C#" Value="public static void SetLastAccessTimeUtc (string path, DateTime lastAccessTimeUtc);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetLastAccessTimeUtc(string path, valuetype System.DateTime lastAccessTimeUtc) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.SetLastAccessTimeUtc(System.String,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetLastAccessTimeUtc (path As String, lastAccessTimeUtc As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetLastAccessTimeUtc(System::String ^ path, DateTime lastAccessTimeUtc);" />
      <MemberSignature Language="F#" Value="static member SetLastAccessTimeUtc : string * DateTime -&gt; unit" Usage="System.IO.Directory.SetLastAccessTimeUtc (path, lastAccessTimeUtc)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="lastAccessTimeUtc" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="path">要设置其访问日期和时间信息的文件或目录。</param>
        <param name="lastAccessTimeUtc">一个对象，它包含要为 <paramref name="path" /> 的访问日期和时间设置的值。 该值用 UTC 时间表示。</param>
        <summary>设置上次访问指定文件或目录的日期和时间，其格式为协调通用时 (UTC)。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 允许 `path` 参数指定相对或绝对路径信息。 相对路径信息被解释为相对于当前工作目录。 若要获取当前工作目录，请参阅 <xref:System.IO.Directory.GetCurrentDirectory%2A>。  
  
 `path` 参数不区分大小写。  
  
 有关常见 i/o 任务的列表，请参阅[常见 I/o 任务](/dotnet/standard/io/common-i-o-tasks)。  
  
   
  
## Examples  
 下面的示例演示使用协调世界时（UTC）输出时的输出差异。  
  
 [!code-cpp[System.IO.UTCExample#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.UTCExample/CPP/example.cpp#1)]
 [!code-csharp[System.IO.UTCExample#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.UTCExample/CS/example.cs#1)]
 [!code-vb[System.IO.UTCExample#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.UTCExample/VB/example.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.FileNotFoundException">未找到指定路径。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="path" /> 为长度为零的字符串，仅包含空格，或包含一个或多个无效字符。 你可以使用 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 方法查询无效字符。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定的路径和/或文件名超过了系统定义的最大长度。</exception>
        <exception cref="T:System.UnauthorizedAccessException">调用方没有所要求的权限。</exception>
        <exception cref="T:System.PlatformNotSupportedException">当前操作系统不是 Windows NT 或更高版本。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="lastAccessTimeUtc" /> 指定一个超出该操作允许的日期或时间范围的值。</exception>
        <altmember cref="T:System.IO.FileSystemWatcher" />
        <related type="Article" href="/dotnet/standard/io/">文件和流 I/O</related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file">如何：从文件读取文本</related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file">如何：向文件写入文本</related>
      </Docs>
    </Member>
    <Member MemberName="SetLastWriteTime">
      <MemberSignature Language="C#" Value="public static void SetLastWriteTime (string path, DateTime lastWriteTime);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetLastWriteTime(string path, valuetype System.DateTime lastWriteTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.SetLastWriteTime(System.String,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetLastWriteTime (path As String, lastWriteTime As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetLastWriteTime(System::String ^ path, DateTime lastWriteTime);" />
      <MemberSignature Language="F#" Value="static member SetLastWriteTime : string * DateTime -&gt; unit" Usage="System.IO.Directory.SetLastWriteTime (path, lastWriteTime)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="lastWriteTime" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="path">目录的路径。</param>
        <param name="lastWriteTime">上次写入目录的日期和时间。 该值用本地时间表示。</param>
        <summary>设置上次写入目录的日期和时间。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 允许 `path` 参数指定相对或绝对路径信息。 相对路径信息被解释为相对于当前工作目录。 若要获取当前工作目录，请参阅 <xref:System.IO.Directory.GetCurrentDirectory%2A>。  
  
 `path` 参数不区分大小写。  
  
 有关常见 i/o 任务的列表，请参阅[常见 I/o 任务](/dotnet/standard/io/common-i-o-tasks)。  
  
   
  
## Examples  
 下面的示例演示如何使用 `SetLastWriteTime`。  
  
 [!code-cpp[Dir_SetLastWrite#1](~/samples/snippets/cpp/VS_Snippets_CLR/Dir_SetLastWrite/CPP/dir_setlastwrite.cpp#1)]
 [!code-csharp[Dir_SetLastWrite#1](~/samples/snippets/csharp/VS_Snippets_CLR/Dir_SetLastWrite/CS/dir_setlastwrite.cs#1)]
 [!code-vb[Dir_SetLastWrite#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Dir_SetLastWrite/VB/dir_setlastwrite.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.FileNotFoundException">找不到 <paramref name="path" />（例如，目录不存在或在未映射的驱动器上）。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">找不到 <paramref name="path" />（例如，目录不存在或在未映射的驱动器上）。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="path" /> 为长度为零的字符串，仅包含空格，或包含一个或多个无效字符。 你可以使用 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 方法查询无效字符。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定的路径和/或文件名超过了系统定义的最大长度。</exception>
        <exception cref="T:System.UnauthorizedAccessException">调用方没有所要求的权限。</exception>
        <exception cref="T:System.PlatformNotSupportedException">当前操作系统不是 Windows NT 或更高版本。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="lastWriteTime" /> 指定一个超出该操作允许的日期或时间范围的值。</exception>
        <altmember cref="T:System.IO.FileSystemWatcher" />
        <related type="Article" href="/dotnet/standard/io/">文件和流 I/O</related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file">如何：从文件读取文本</related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file">如何：向文件写入文本</related>
      </Docs>
    </Member>
    <Member MemberName="SetLastWriteTimeUtc">
      <MemberSignature Language="C#" Value="public static void SetLastWriteTimeUtc (string path, DateTime lastWriteTimeUtc);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetLastWriteTimeUtc(string path, valuetype System.DateTime lastWriteTimeUtc) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Directory.SetLastWriteTimeUtc(System.String,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetLastWriteTimeUtc (path As String, lastWriteTimeUtc As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetLastWriteTimeUtc(System::String ^ path, DateTime lastWriteTimeUtc);" />
      <MemberSignature Language="F#" Value="static member SetLastWriteTimeUtc : string * DateTime -&gt; unit" Usage="System.IO.Directory.SetLastWriteTimeUtc (path, lastWriteTimeUtc)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="lastWriteTimeUtc" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="path">目录的路径。</param>
        <param name="lastWriteTimeUtc">上次写入目录的日期和时间。 该值用 UTC 时间表示。</param>
        <summary>设置上次写入某个目录的日期和时间，其格式为协调通用时 (UTC)。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 允许 `path` 参数指定相对或绝对路径信息。 相对路径信息被解释为相对于当前工作目录。 若要获取当前工作目录，请参阅 <xref:System.IO.Directory.GetCurrentDirectory%2A>。  
  
 `path` 参数不区分大小写。  
  
 有关常见 i/o 任务的列表，请参阅[常见 I/o 任务](/dotnet/standard/io/common-i-o-tasks)。  
  
   
  
## Examples  
 下面的示例演示使用协调世界时（UTC）输出时的输出差异。  
  
 [!code-cpp[System.IO.UTCExample#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.UTCExample/CPP/example.cpp#1)]
 [!code-csharp[System.IO.UTCExample#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.UTCExample/CS/example.cs#1)]
 [!code-vb[System.IO.UTCExample#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.UTCExample/VB/example.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.FileNotFoundException">找不到 <paramref name="path" />（例如，目录不存在或在未映射的驱动器上）。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">找不到 <paramref name="path" />（例如，目录不存在或在未映射的驱动器上）。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="path" /> 为长度为零的字符串，仅包含空格，或包含一个或多个无效字符。 你可以使用 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 方法查询无效字符。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定的路径和/或文件名超过了系统定义的最大长度。</exception>
        <exception cref="T:System.UnauthorizedAccessException">调用方没有所要求的权限。</exception>
        <exception cref="T:System.PlatformNotSupportedException">当前操作系统不是 Windows NT 或更高版本。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="lastWriteTimeUtc" /> 指定一个超出该操作允许的日期或时间范围的值。</exception>
        <altmember cref="T:System.IO.FileSystemWatcher" />
        <related type="Article" href="/dotnet/standard/io/">文件和流 I/O</related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file">如何：从文件读取文本</related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file">如何：向文件写入文本</related>
      </Docs>
    </Member>
  </Members>
</Type>
