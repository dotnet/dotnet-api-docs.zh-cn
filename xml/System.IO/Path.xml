<Type Name="Path" FullName="System.IO.Path">
  <Metadata><Meta Name="ms.openlocfilehash" Value="ce0284176095101aca5fd59b0d3c6374f819010e" /><Meta Name="ms.sourcegitcommit" Value="1fa2c0427e25fa9a43f9ddb13597e15452878d33" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="03/13/2021" /><Meta Name="ms.locfileid" Value="103420786" /></Metadata><TypeSignature Language="C#" Value="public static class Path" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit Path extends System.Object" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1" />
  <TypeSignature Language="DocId" Value="T:System.IO.Path" />
  <TypeSignature Language="VB.NET" Value="Public Class Path" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="C++ CLI" Value="public ref class Path abstract sealed" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="F#" Value="type Path = class" />
  <TypeSignature Language="C#" Value="public sealed class Path" FrameworkAlternate="netframework-1.1" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Path extends System.Object" FrameworkAlternate="netframework-1.1" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Path" FrameworkAlternate="netframework-1.1" />
  <TypeSignature Language="C++ CLI" Value="public ref class Path sealed" FrameworkAlternate="netframework-1.1" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed Path extends System.Object" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Extensions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="mscorlib" FromVersion="4.0.0.0" To="System.Runtime.Extensions" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0" />
    <TypeForwarding From="mscorlib" FromVersion="4.0.0.0" To="System.Runtime" ToVersion="0.0.0.0" FrameworkAlternate="net-5.0" />
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Runtime" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
    <TypeForwarding From="System.Runtime.Extensions" FromVersion="5.0.0.0" To="System.Runtime" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName Language="C#">[System.Runtime.InteropServices.ComVisible(true)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.ComVisible(true)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="de775-101">对包含文件或目录路径信息的 <see cref="T:System.String" /> 实例执行操作。</span><span class="sxs-lookup"><span data-stu-id="de775-101">Performs operations on <see cref="T:System.String" /> instances that contain file or directory path information.</span></span> <span data-ttu-id="de775-102">这些操作是以跨平台的方式执行的。</span><span class="sxs-lookup"><span data-stu-id="de775-102">These operations are performed in a cross-platform manner.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
 <span data-ttu-id="de775-103">路径是提供文件或目录的位置的字符串。</span><span class="sxs-lookup"><span data-stu-id="de775-103">A path is a string that provides the location of a file or directory.</span></span> <span data-ttu-id="de775-104">路径不一定指向磁盘上的位置;例如，路径可能映射到内存中或设备上的某个位置。</span><span class="sxs-lookup"><span data-stu-id="de775-104">A path does not necessarily point to a location on disk; for example, a path might map to a location in memory or on a device.</span></span> <span data-ttu-id="de775-105">路径的准确格式由当前平台决定。</span><span class="sxs-lookup"><span data-stu-id="de775-105">The exact format of a path is determined by the current platform.</span></span> <span data-ttu-id="de775-106">例如，在某些系统中，路径可以从驱动器或卷号开始，而此元素在其他系统中不存在。</span><span class="sxs-lookup"><span data-stu-id="de775-106">For example, on some systems, a path can start with a drive or volume letter, while this element is not present in other systems.</span></span> <span data-ttu-id="de775-107">在某些系统上，文件路径可以包含扩展，这表示文件中存储的信息的类型。</span><span class="sxs-lookup"><span data-stu-id="de775-107">On some systems, file paths can contain extensions, which indicate the type of information stored in the file.</span></span> <span data-ttu-id="de775-108">文件扩展名的格式依赖于平台;例如，某些系统限制了三个字符的扩展 (例如，在光学媒体) 上使用的较小闪存存储和较旧版本的 ISO 9660 上通常使用 FAT16，而其他系统则不限制。</span><span class="sxs-lookup"><span data-stu-id="de775-108">The format of a file name extension is platform-dependent; for example, some systems limit extensions to three characters (such as FAT16 commonly used on smaller flash storage and older versions of ISO 9660 used on optical media), and others do not.</span></span> <span data-ttu-id="de775-109">当前平台还决定了用于分隔路径中的元素的字符集，以及指定路径时不能使用的字符集。</span><span class="sxs-lookup"><span data-stu-id="de775-109">The current platform also determines the set of characters used to separate the elements of a path, and the set of characters that cannot be used when specifying paths.</span></span> <span data-ttu-id="de775-110">由于这些差异，类的字段以及 `Path` 类的某些成员的确切行为 `Path` 取决于平台。</span><span class="sxs-lookup"><span data-stu-id="de775-110">Because of these differences, the fields of the `Path` class as well as the exact behavior of some members of the `Path` class are platform-dependent.</span></span>  
  
 <span data-ttu-id="de775-111">路径可以包含绝对或相对位置信息。</span><span class="sxs-lookup"><span data-stu-id="de775-111">A path can contain absolute or relative location information.</span></span> <span data-ttu-id="de775-112">绝对路径完全指定位置：可以唯一地标识文件或目录，而不考虑当前位置。</span><span class="sxs-lookup"><span data-stu-id="de775-112">Absolute paths fully specify a location: the file or directory can be uniquely identified regardless of the current location.</span></span> <span data-ttu-id="de775-113">相对路径指定部分位置：在定位使用相对路径指定的文件时，当前位置用作起始点。</span><span class="sxs-lookup"><span data-stu-id="de775-113">Relative paths specify a partial location: the current location is used as the starting point when locating a file specified with a relative path.</span></span> <span data-ttu-id="de775-114">若要确定当前目录，请调用 <xref:System.IO.Directory.GetCurrentDirectory%2A?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="de775-114">To determine the current directory, call <xref:System.IO.Directory.GetCurrentDirectory%2A?displayProperty=nameWithType>.</span></span>  

 <span data-ttu-id="de775-115">.NET Core 1.1 及更高版本和 .NET Framework 4.6.2 及更高版本还支持访问作为设备名称的文件系统对象，例如 " \\ ？ \c： \" 。</span><span class="sxs-lookup"><span data-stu-id="de775-115">.NET Core 1.1 and later versions and .NET Framework 4.6.2 and later versions also support access to file system objects that are device names, such as "\\?\C:\".</span></span>

<span data-ttu-id="de775-116">有关 Windows 上的文件路径格式的详细信息，请参阅 [windows 系统上的文件路径格式](/dotnet/standard/io/file-path-formats)。</span><span class="sxs-lookup"><span data-stu-id="de775-116">For more information on file path formats on Windows, see [File path formats on Windows systems](/dotnet/standard/io/file-path-formats).</span></span>

 <span data-ttu-id="de775-117">该类的大多数成员 `Path` 不与文件系统进行交互，并且不验证路径字符串指定的文件是否存在。</span><span class="sxs-lookup"><span data-stu-id="de775-117">Most members of the `Path` class do not interact with the file system and do not verify the existence of the file specified by a path string.</span></span> <span data-ttu-id="de775-118">`Path` 修改路径字符串的类成员（如 <xref:System.IO.Path.ChangeExtension%2A> ）不会影响文件系统中的文件名称。</span><span class="sxs-lookup"><span data-stu-id="de775-118">`Path` class members that modify a path string, such as <xref:System.IO.Path.ChangeExtension%2A>, have no effect on names of files in the file system.</span></span>
 
 <span data-ttu-id="de775-119">某些 `Path` 成员确实验证指定路径字符串的内容， <xref:System.ArgumentException> 如果字符串包含在路径字符串中无效的字符，则会引发，如方法返回的字符中所定义 <xref:System.IO.Path.GetInvalidPathChars%2A> 。</span><span class="sxs-lookup"><span data-stu-id="de775-119">Some `Path` members do validate the contents of a specified path string, and throw an <xref:System.ArgumentException> if the string contains characters that are not valid in path strings, as defined in the characters returned from the <xref:System.IO.Path.GetInvalidPathChars%2A> method.</span></span> <span data-ttu-id="de775-120">例如，在基于 Windows 的桌面平台上，无效路径字符可能包括引号 ( ") ，小于 (\<), greater than (>) ，管道 (&#124;) ，backspace ( \b) ，null ( \ 0) ，Unicode 字符为16到18，介于20到25之间。</span><span class="sxs-lookup"><span data-stu-id="de775-120">For example, on Windows-based desktop platforms, invalid path characters might include quote ("), less than (\<), greater than (>), pipe (&#124;), backspace (\b), null (\0), and Unicode characters 16 through 18 and 20 through 25.</span></span> <span data-ttu-id="de775-121">这种验证行为在 .NET 版本之间有所不同：</span><span class="sxs-lookup"><span data-stu-id="de775-121">This validation behavior varies between .NET versions:</span></span>
 
 - <span data-ttu-id="de775-122">在 .NET Framework 和低于2.1 的 .NET Core 版本上： `Path` 采用路径作为参数的所有成员将在 <xref:System.ArgumentException> 检测到无效路径字符时引发。</span><span class="sxs-lookup"><span data-stu-id="de775-122">On .NET Framework and .NET Core versions older than 2.1: All `Path` members that take a path as an argument throw an <xref:System.ArgumentException> if they detect invalid path characters.</span></span>
 
 - <span data-ttu-id="de775-123">在 .NET Core 2.1 及更高版本上： <xref:System.IO.Path.GetFullPath%2A> 是唯一的成员， <xref:System.ArgumentException> 如果字符串包含无效的路径字符，则会引发。</span><span class="sxs-lookup"><span data-stu-id="de775-123">On .NET Core 2.1 and later versions: <xref:System.IO.Path.GetFullPath%2A> is the only member that throws an <xref:System.ArgumentException> if the string contains invalid path characters.</span></span>
  
 <span data-ttu-id="de775-124">类的成员 `Path` 使你能够快速轻松地执行常见操作，例如确定文件扩展名是否为路径的一部分，以及将两个字符串组合为一个路径名。</span><span class="sxs-lookup"><span data-stu-id="de775-124">The members of the `Path` class enable you to quickly and easily perform common operations such as determining whether a file name extension is part of a path, and combining two strings into one path name.</span></span>  
  
 <span data-ttu-id="de775-125">类的所有成员 `Path` 都是静态的，因此可以在没有路径实例的情况下调用。</span><span class="sxs-lookup"><span data-stu-id="de775-125">All members of the `Path` class are static and can therefore be called without having an instance of a path.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="de775-126">在接受路径作为输入字符串的成员中，该路径必须格式正确，否则会引发异常。</span><span class="sxs-lookup"><span data-stu-id="de775-126">In members that accept a path as an input string, that path must be well-formed or an exception is raised.</span></span> <span data-ttu-id="de775-127">例如，如果路径是完全限定的，但以空格开头，则不会在类的方法中剪裁路径。</span><span class="sxs-lookup"><span data-stu-id="de775-127">For example, if a path is fully qualified but begins with a space, the path is not trimmed in methods of the class.</span></span> <span data-ttu-id="de775-128">因此，路径格式不正确，并引发异常。</span><span class="sxs-lookup"><span data-stu-id="de775-128">Therefore, the path is malformed and an exception is raised.</span></span> <span data-ttu-id="de775-129">同样，路径或路径的组合不能完全限定两次。</span><span class="sxs-lookup"><span data-stu-id="de775-129">Similarly, a path or a combination of paths cannot be fully qualified twice.</span></span> <span data-ttu-id="de775-130">例如，在大多数情况下，"c：\temp c：\windows" 也会引发异常。</span><span class="sxs-lookup"><span data-stu-id="de775-130">For example, "c:\temp c:\windows" also raises an exception in most cases.</span></span> <span data-ttu-id="de775-131">使用接受路径字符串的方法时，请确保路径格式正确。</span><span class="sxs-lookup"><span data-stu-id="de775-131">Ensure that your paths are well-formed when using methods that accept a path string.</span></span>  
  
 <span data-ttu-id="de775-132">在接受路径的成员中，路径可以引用文件或只引用目录。</span><span class="sxs-lookup"><span data-stu-id="de775-132">In members that accept a path, the path can refer to a file or just a directory.</span></span> <span data-ttu-id="de775-133">指定的路径还可以引用服务器的相对路径或通用命名约定 (UNC) 路径和共享名称。</span><span class="sxs-lookup"><span data-stu-id="de775-133">The specified path can also refer to a relative path or a Universal Naming Convention (UNC) path for a server and share name.</span></span> <span data-ttu-id="de775-134">例如，以下所有内容都是可接受的路径：</span><span class="sxs-lookup"><span data-stu-id="de775-134">For example, all the following are acceptable paths:</span></span>  
  
-   <span data-ttu-id="de775-135">c # 中的 "c： \\ \MyDir \\\MyFile.txt" 或 Visual Basic 中的 "c:\MyDir\MyFile.txt"。</span><span class="sxs-lookup"><span data-stu-id="de775-135">"c:\\\MyDir\\\MyFile.txt" in C#, or "c:\MyDir\MyFile.txt" in Visual Basic.</span></span>  
  
-   <span data-ttu-id="de775-136">c # 中的 "c： \\ \MyDir" 或 Visual Basic 中的 "c:\MyDir"。</span><span class="sxs-lookup"><span data-stu-id="de775-136">"c:\\\MyDir" in C#, or "c:\MyDir" in Visual Basic.</span></span>  
  
-   <span data-ttu-id="de775-137">Visual Basic 中的 "MyDir \\ \MySubdir" 或 "MyDir\MySubDir"。</span><span class="sxs-lookup"><span data-stu-id="de775-137">"MyDir\\\MySubdir" in C#, or "MyDir\MySubDir" in Visual Basic.</span></span>  
  
-   <span data-ttu-id="de775-138">\\ \\ \\ Visual Basic 中的 "\MyServer \\ \MyShare" 或 " \\ \MyServer\MyShare"。</span><span class="sxs-lookup"><span data-stu-id="de775-138">"\\\\\\\MyServer\\\MyShare" in C#, or "\\\MyServer\MyShare" in Visual Basic.</span></span>  
  
 <span data-ttu-id="de775-139">由于所有这些操作都是针对字符串执行的，因此无法验证结果在所有方案中是否有效。</span><span class="sxs-lookup"><span data-stu-id="de775-139">Because all these operations are performed on strings, it is impossible to verify that the results are valid in all scenarios.</span></span> <span data-ttu-id="de775-140">例如，方法会 <xref:System.IO.Path.GetExtension%2A> 分析你传递给它的字符串，并返回该字符串的扩展名。</span><span class="sxs-lookup"><span data-stu-id="de775-140">For example, the <xref:System.IO.Path.GetExtension%2A> method parses a string that you pass to it and returns the extension from that string.</span></span> <span data-ttu-id="de775-141">但是，这并不意味着磁盘上存在具有该扩展名的文件。</span><span class="sxs-lookup"><span data-stu-id="de775-141">However, this does not mean that a file with that extension exists on the disk.</span></span>  
  
 <span data-ttu-id="de775-142">有关常见 i/o 任务的列表，请参阅 [常见 I/o 任务](/dotnet/standard/io/common-i-o-tasks)。</span><span class="sxs-lookup"><span data-stu-id="de775-142">For a list of common I/O tasks, see [Common I/O Tasks](/dotnet/standard/io/common-i-o-tasks).</span></span>   
  
## Examples  
 <span data-ttu-id="de775-143">下面的示例演示了类的一些主要成员 `Path` 。</span><span class="sxs-lookup"><span data-stu-id="de775-143">The following example demonstrates some of the main members of the `Path` class.</span></span>  
  
 [!code-cpp[path class#1](~/samples/snippets/cpp/VS_Snippets_CLR/Path Class/CPP/path class.cpp#1)]
 [!code-csharp[path class#1](~/samples/snippets/csharp/VS_Snippets_CLR/Path Class/CS/path class.cs#1)]
 [!code-vb[path class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Path Class/VB/path class.vb#1)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="/dotnet/standard/io/"><span data-ttu-id="de775-144">文件和流 I/O</span><span class="sxs-lookup"><span data-stu-id="de775-144">File and Stream I/O</span></span></related>
    <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file"><span data-ttu-id="de775-145">如何：从文件中读取文本</span><span class="sxs-lookup"><span data-stu-id="de775-145">How to: Read Text from a File</span></span></related>
    <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file"><span data-ttu-id="de775-146">如何：将文本写入文件</span><span class="sxs-lookup"><span data-stu-id="de775-146">How to: Write Text to a File</span></span></related>
    <related type="Article" href="/dotnet/standard/io/how-to-read-and-write-to-a-newly-created-data-file"><span data-ttu-id="de775-147">如何：对新建的数据文件进行读取和写入</span><span class="sxs-lookup"><span data-stu-id="de775-147">How to: Read and Write to a Newly Created Data File</span></span></related>
    <related type="Article" href="/dotnet/standard/io/file-path-formats"><span data-ttu-id="de775-148">Windows 系统中的文件路径格式</span><span class="sxs-lookup"><span data-stu-id="de775-148">File path formats on Windows systems</span></span></related>
  </Docs>
  <Members>
    <Member MemberName="AltDirectorySeparatorChar">
      <MemberSignature Language="C#" Value="public static readonly char AltDirectorySeparatorChar;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly char AltDirectorySeparatorChar" />
      <MemberSignature Language="DocId" Value="F:System.IO.Path.AltDirectorySeparatorChar" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly AltDirectorySeparatorChar As Char " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly char AltDirectorySeparatorChar;" />
      <MemberSignature Language="F#" Value=" staticval mutable AltDirectorySeparatorChar : char" Usage="System.IO.Path.AltDirectorySeparatorChar" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="de775-149">提供平台特定的替换字符，该替换字符用于在反映分层文件系统组织的路径字符串中分隔目录级别。</span><span class="sxs-lookup"><span data-stu-id="de775-149">Provides a platform-specific alternate character used to separate directory levels in a path string that reflects a hierarchical file system organization.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 
<span data-ttu-id="de775-150">此字段的值可以与相同 <xref:System.IO.Path.DirectorySeparatorChar> 。</span><span class="sxs-lookup"><span data-stu-id="de775-150">This field can have the same value as <xref:System.IO.Path.DirectorySeparatorChar>.</span></span> <span data-ttu-id="de775-151">`AltDirectorySeparatorChar` 和 <xref:System.IO.Path.DirectorySeparatorChar> 都适用于在路径字符串中分隔目录级别。</span><span class="sxs-lookup"><span data-stu-id="de775-151">`AltDirectorySeparatorChar` and <xref:System.IO.Path.DirectorySeparatorChar> are both valid for separating directory levels in a path string.</span></span>  
  
<span data-ttu-id="de775-152">此字段的值是在基于 Windows 和 Unix 的操作系统上 ) 斜杠 ( "/"。</span><span class="sxs-lookup"><span data-stu-id="de775-152">The value of this field is a slash ('/') on both Windows and Unix-based operating systems.</span></span>  
  
## Examples  

<span data-ttu-id="de775-153">下面的示例显示 <xref:System.IO.Path> Windows 和基于 Unix 的系统上的字段值。</span><span class="sxs-lookup"><span data-stu-id="de775-153">The following example displays <xref:System.IO.Path> field values on Windows and on Unix-based systems.</span></span> <span data-ttu-id="de775-154">请注意，Windows 支持由字段返回的正斜杠 (<xref:System.IO.Path.AltDirectorySeparatorChar>) 或由 <xref:System.IO.Path.DirectorySeparatorChar> 字段) 为路径分隔符字符返回的反斜杠 (，而基于 Unix 的系统则仅支持正斜杠。</span><span class="sxs-lookup"><span data-stu-id="de775-154">Note that Windows supports either the forward slash (which is returned by the <xref:System.IO.Path.AltDirectorySeparatorChar> field) or the backslash (which is returned by the <xref:System.IO.Path.DirectorySeparatorChar> field) as path separator characters, while Unix-based systems support only the forward slash.</span></span>

[!code-csharp[DirectorySeparatorChar](~/samples/snippets/csharp/api/system.io/path/directoryseparatorchar/program.cs)]
[!code-vb[DirectorySeparatorChar](~/samples/snippets/visualbasic/api/system.io/path/directoryseparatorchar/program.vb)]
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/standard/io/"><span data-ttu-id="de775-155">文件和流 I/O</span><span class="sxs-lookup"><span data-stu-id="de775-155">File and Stream I/O</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file"><span data-ttu-id="de775-156">如何：从文件中读取文本</span><span class="sxs-lookup"><span data-stu-id="de775-156">How to: Read Text from a File</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file"><span data-ttu-id="de775-157">如何：将文本写入文件</span><span class="sxs-lookup"><span data-stu-id="de775-157">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ChangeExtension">
      <MemberSignature Language="C#" Value="public static string ChangeExtension (string path, string extension);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ChangeExtension(string path, string extension) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.ChangeExtension(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ChangeExtension (path As String, extension As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ChangeExtension(System::String ^ path, System::String ^ extension);" />
      <MemberSignature Language="F#" Value="static member ChangeExtension : string * string -&gt; string" Usage="System.IO.Path.ChangeExtension (path, extension)" />
      <MemberSignature Language="C#" Value="public static string? ChangeExtension (string? path, string? extension);" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="extension" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="de775-158">要修改的路径信息。</span><span class="sxs-lookup"><span data-stu-id="de775-158">The path information to modify.</span></span></param>
        <param name="extension"><span data-ttu-id="de775-159">新的扩展名（有或没有前导句点）。</span><span class="sxs-lookup"><span data-stu-id="de775-159">The new extension (with or without a leading period).</span></span> <span data-ttu-id="de775-160">指定 <see langword="null" /> 以从 <paramref name="path" /> 移除现有扩展名。</span><span class="sxs-lookup"><span data-stu-id="de775-160">Specify <see langword="null" /> to remove an existing extension from <paramref name="path" />.</span></span></param>
        <summary><span data-ttu-id="de775-161">更改路径字符串的扩展名。</span><span class="sxs-lookup"><span data-stu-id="de775-161">Changes the extension of a path string.</span></span></summary>
        <returns><span data-ttu-id="de775-162">已修改的路径信息。</span><span class="sxs-lookup"><span data-stu-id="de775-162">The modified path information.</span></span>  
  
<span data-ttu-id="de775-163">在基于 Windows 的桌面平台上，如果 <paramref name="path" /> 是 <see langword="null" /> 或空字符串 (“”)，则返回的路径信息是未修改的。</span><span class="sxs-lookup"><span data-stu-id="de775-163">On Windows-based desktop platforms, if <paramref name="path" /> is <see langword="null" /> or an empty string (""), the path information is returned unmodified.</span></span> <span data-ttu-id="de775-164">如果 <paramref name="extension" /> 为 <see langword="null" />，则返回的字符串包含指定的路径（其扩展名已移除）。</span><span class="sxs-lookup"><span data-stu-id="de775-164">If <paramref name="extension" /> is <see langword="null" />, the returned string contains the specified path with its extension removed.</span></span> <span data-ttu-id="de775-165">如果 <paramref name="path" /> 不具有扩展名且 <paramref name="extension" /> 不为 <see langword="null" />，则返回的路径字符串包含追加到 <paramref name="path" /> 结尾的 <paramref name="extension" />。</span><span class="sxs-lookup"><span data-stu-id="de775-165">If <paramref name="path" /> has no extension, and <paramref name="extension" /> is not <see langword="null" />, the returned path string contains <paramref name="extension" /> appended to the end of <paramref name="path" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="de775-166">如果和都不 `path` `extension` 包含句点 ( ) ， `ChangeExtension` 则添加句点。</span><span class="sxs-lookup"><span data-stu-id="de775-166">If neither `path` nor `extension` contains a period (.), `ChangeExtension` adds the period.</span></span>  
  
 <span data-ttu-id="de775-167">`extension`参数可包含多个句点和任意有效的路径字符，可以为任意长度。</span><span class="sxs-lookup"><span data-stu-id="de775-167">The `extension` parameter can contain multiple periods and any valid path characters, and can be any length.</span></span> <span data-ttu-id="de775-168">如果 `extension` 为 `null` ，则返回的字符串将包含的内容，其中包含 `path` 上一个句点以及删除后的所有字符。</span><span class="sxs-lookup"><span data-stu-id="de775-168">If `extension` is `null`, the returned string contains the contents of `path` with the last period and all characters following it removed.</span></span>  
  
 <span data-ttu-id="de775-169">如果 `extension` 是一个空字符串，则返回的路径字符串包含的内容， `path` 其中包含上一个句点之后的任何字符。</span><span class="sxs-lookup"><span data-stu-id="de775-169">If `extension` is an empty string, the returned path string contains the contents of `path` with any characters following the last period removed.</span></span>  
  
 <span data-ttu-id="de775-170">如果不 `path` 具有扩展名且不 `extension` 为，则 `null` 返回的字符串 `path` 后跟 `extension` 。</span><span class="sxs-lookup"><span data-stu-id="de775-170">If `path` does not have an extension and `extension` is not `null`, the returned string contains `path` followed by `extension`.</span></span>  
  
 <span data-ttu-id="de775-171">如果不 `extension` 是 `null` 并且不包含前导句点，则添加句点。</span><span class="sxs-lookup"><span data-stu-id="de775-171">If `extension` is not `null` and does not contain a leading period, the period is added.</span></span>  
  
 <span data-ttu-id="de775-172">如果 `path` 包含由多个句点分隔的多个扩展，则返回的字符串将包含的内容， `path` 其最后一个句点和后的所有字符都将替换为 `extension` 。</span><span class="sxs-lookup"><span data-stu-id="de775-172">If `path` contains a multiple extension separated by multiple periods, the returned string contains the contents of `path` with the last period and all characters following it replaced by `extension`.</span></span> <span data-ttu-id="de775-173">例如，如果 `path` 是 "\Dir1\examples\pathtests.csx.txt"，并且 `extension` 是 "cs"，则修改后的路径为 "\Dir1\examples\pathtests.csx.cs"。</span><span class="sxs-lookup"><span data-stu-id="de775-173">For example, if `path` is "\Dir1\examples\pathtests.csx.txt" and `extension` is "cs", the modified path is "\Dir1\examples\pathtests.csx.cs".</span></span>  
  
 <span data-ttu-id="de775-174">不能验证返回的结果在所有方案中都有效。</span><span class="sxs-lookup"><span data-stu-id="de775-174">It is not possible to verify that the returned results are valid in all scenarios.</span></span> <span data-ttu-id="de775-175">例如，如果 `path` 为空， `extension` 则追加。</span><span class="sxs-lookup"><span data-stu-id="de775-175">For example, if `path` is empty, `extension` is appended.</span></span>  
  
 <span data-ttu-id="de775-176">有关常见 i/o 任务的列表，请参阅 [常见 I/o 任务](/dotnet/standard/io/common-i-o-tasks)。</span><span class="sxs-lookup"><span data-stu-id="de775-176">For a list of common I/O tasks, see [Common I/O Tasks](/dotnet/standard/io/common-i-o-tasks).</span></span>  
  
## Examples  
 <span data-ttu-id="de775-177">下面的示例演示方法的用法 `ChangeExtension` 。</span><span class="sxs-lookup"><span data-stu-id="de775-177">The following example demonstrates a use of the `ChangeExtension` method.</span></span>  
  
 [!code-cpp[System.IO.Path Members#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.Path Members/CPP/pathmembers.cpp#1)]
 [!code-csharp[System.IO.Path Members#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Path Members/CS/pathmembers.cs#1)]
 [!code-vb[System.IO.Path Members#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Path Members/VB/pathmembers.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="de775-178">.NET Framework 和 .NET Core 版本早于2.1： <paramref name="path" /> 包含中定义的一个或多个无效字符 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 。</span><span class="sxs-lookup"><span data-stu-id="de775-178">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars" />.</span></span></exception>
        <related type="Article" href="/dotnet/standard/io/file-path-formats"><span data-ttu-id="de775-179">Windows 系统中的文件路径格式</span><span class="sxs-lookup"><span data-stu-id="de775-179">File path formats on Windows systems</span></span></related>
        <related type="Article" href="/dotnet/standard/io/"><span data-ttu-id="de775-180">文件和流 I/O</span><span class="sxs-lookup"><span data-stu-id="de775-180">File and Stream I/O</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file"><span data-ttu-id="de775-181">如何：从文件中读取文本</span><span class="sxs-lookup"><span data-stu-id="de775-181">How to: Read Text from a File</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file"><span data-ttu-id="de775-182">如何：将文本写入文件</span><span class="sxs-lookup"><span data-stu-id="de775-182">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Combine">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="de775-183">将多个字符串组合成一个路径。</span><span class="sxs-lookup"><span data-stu-id="de775-183">Combines strings into a path.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
 
## Remarks  

<span data-ttu-id="de775-184">此方法旨在将各个字符串连接到表示文件路径的单个字符串。</span><span class="sxs-lookup"><span data-stu-id="de775-184">This method is intended to concatenate individual strings into a single string that represents a file path.</span></span> <span data-ttu-id="de775-185">但是，如果第一个参数不包含一个根路径，则将忽略以前的任何路径组件，并且返回的字符串将以该根路径组件开头。</span><span class="sxs-lookup"><span data-stu-id="de775-185">However, if an argument other than the first contains a rooted path, any previous path components are ignored, and the returned string begins with that rooted path component.</span></span> <span data-ttu-id="de775-186">作为方法的替代 `Combine` 方法，请考虑使用 <xref:System.IO.Path.Join%2A> 或 <xref:System.IO.Path.TryJoin%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="de775-186">As an alternative to the `Combine` method, consider using the <xref:System.IO.Path.Join%2A> or <xref:System.IO.Path.TryJoin%2A> methods.</span></span>

> [!IMPORTANT]
> <span data-ttu-id="de775-187">此方法假定第一个参数是一个绝对路径，并且以下参数或参数是相对路径。</span><span class="sxs-lookup"><span data-stu-id="de775-187">This method assumes that the first argument is an absolute path and that the following argument or arguments are relative paths.</span></span> <span data-ttu-id="de775-188">如果不是这种情况，尤其是在任何后续参数都是用户输入的字符串时，请 <xref:System.IO.Path.Join%2A> 改为调用或 <xref:System.IO.Path.TryJoin%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="de775-188">If this is not the case, and particularly if any subsequent arguments are strings input by the user, call the <xref:System.IO.Path.Join%2A> or <xref:System.IO.Path.TryJoin%2A> method instead.</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Combine">
      <MemberSignature Language="C#" Value="public static string Combine (params string[] paths);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Combine(string[] paths) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.Combine(System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Combine (ParamArray paths As String()) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Combine(... cli::array &lt;System::String ^&gt; ^ paths);" />
      <MemberSignature Language="F#" Value="static member Combine : string[] -&gt; string" Usage="System.IO.Path.Combine paths" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="paths" Type="System.String[]" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <Attributes>
            <Attribute FrameworkAlternate="dotnet-uwp-10.0">
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="paths"><span data-ttu-id="de775-189">由路径的各部分构成的数组。</span><span class="sxs-lookup"><span data-stu-id="de775-189">An array of parts of the path.</span></span></param>
        <summary><span data-ttu-id="de775-190">将字符串数组组合成一个路径。</span><span class="sxs-lookup"><span data-stu-id="de775-190">Combines an array of strings into a path.</span></span></summary>
        <returns><span data-ttu-id="de775-191">已组合的路径。</span><span class="sxs-lookup"><span data-stu-id="de775-191">The combined paths.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks

<span data-ttu-id="de775-192">`paths` 应为要组合的路径部分的数组。</span><span class="sxs-lookup"><span data-stu-id="de775-192">`paths` should be an array of the parts of the path to combine.</span></span> <span data-ttu-id="de775-193">如果其中一个后续路径是绝对路径，则合并操作将从该绝对路径开始重置，同时丢弃以前的所有组合路径。</span><span class="sxs-lookup"><span data-stu-id="de775-193">If the one of the subsequent paths is an absolute path, then the combine operation resets starting with that absolute path, discarding all previous combined paths.</span></span>  

<span data-ttu-id="de775-194">如果中的任何元素不是驱动器，并且不是以 `paths` <xref:System.IO.Path.DirectorySeparatorChar> 或 <xref:System.IO.Path.AltDirectorySeparatorChar> 字符结尾，则 `Combine` 方法将在 <xref:System.IO.Path.DirectorySeparatorChar> 该元素和下一个元素之间添加一个字符。</span><span class="sxs-lookup"><span data-stu-id="de775-194">If any element in `paths` but the last one is not a drive and does not end with either the <xref:System.IO.Path.DirectorySeparatorChar> or the <xref:System.IO.Path.AltDirectorySeparatorChar> character, the `Combine` method adds a <xref:System.IO.Path.DirectorySeparatorChar> character between that element and the next one.</span></span> <span data-ttu-id="de775-195">请注意，如果元素以与目标平台不适用的路径分隔符结尾，则该 `Combine` 方法将保留原始路径分隔符并附加受支持的字符分隔符。</span><span class="sxs-lookup"><span data-stu-id="de775-195">Note that, if the element ends in a path separator character that is not appropriate for the target platform, the `Combine` method preserves the original path separator character and appends a supported one.</span></span> <span data-ttu-id="de775-196">下面的示例将反斜杠用作路径分隔符时，比较基于 Windows 和 Unix 的系统上的结果。</span><span class="sxs-lookup"><span data-stu-id="de775-196">The following example compares the result on Windows and Unix-based systems when the backslash is used as a path separator character.</span></span>

[!code-csharp[Combine and path separator characters](~/samples/snippets/csharp/api/system.io/path/combine/program.cs#1)]
[!code-vb[Combine and path separator characters](~/samples/snippets/visualbasic/api/system.io/path/combine/program.vb#1)]  

 <span data-ttu-id="de775-197">将从组合路径中省略长度为零的字符串。</span><span class="sxs-lookup"><span data-stu-id="de775-197">Zero-length strings are omitted from the combined path.</span></span>  
  
 <span data-ttu-id="de775-198">如果参数有空白，则不会对其进行分析。</span><span class="sxs-lookup"><span data-stu-id="de775-198">The parameters are not parsed if they have white space.</span></span>  
  
 <span data-ttu-id="de775-199">.NET Framework 和 .NET Core 版本早于2.1：对于目录和文件名，不是所有无效字符都被解释为不可接受的 `Combine` ，因为您可以使用这些字符搜索通配符。</span><span class="sxs-lookup"><span data-stu-id="de775-199">.NET Framework and .NET Core versions older than 2.1: Not all invalid characters for directory and file names are interpreted as unacceptable by the `Combine` method, because you can use these characters for search wildcard characters.</span></span> <span data-ttu-id="de775-200">例如， `Path.Combine("c:\\", "*.txt")` 如果您要通过创建文件，则它可能会无效，它是搜索字符串的有效方法。</span><span class="sxs-lookup"><span data-stu-id="de775-200">For example, while `Path.Combine("c:\\", "*.txt")` might be invalid if you were to create a file from it, it is valid as a search string.</span></span> <span data-ttu-id="de775-201">因此，该方法成功解释了此 `Combine` 方法。</span><span class="sxs-lookup"><span data-stu-id="de775-201">It is therefore successfully interpreted by the `Combine` method.</span></span>  
  
## Examples  
 <span data-ttu-id="de775-202">下面的示例将字符串数组合并到路径中。</span><span class="sxs-lookup"><span data-stu-id="de775-202">The following example combines an array of strings into a path.</span></span>  
  
 [!code-csharp[System.IO.Path.Combine#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.path.combine/cs/program.cs#3)]
 [!code-vb[System.IO.Path.Combine#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.path.combine/vb/program.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="de775-203">.NET Framework 和 .NET Core 版本早于2.1：数组中的一个字符串包含中定义的一个或多个无效字符 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 。</span><span class="sxs-lookup"><span data-stu-id="de775-203">.NET Framework and .NET Core versions older than 2.1: One of the strings in the array contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars" />.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="de775-204">数组中的一个字符串为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="de775-204">One of the strings in the array is <see langword="null" />.</span></span></exception>
        <related type="Article" href="/dotnet/standard/io/file-path-formats"><span data-ttu-id="de775-205">Windows 系统中的文件路径格式</span><span class="sxs-lookup"><span data-stu-id="de775-205">File path formats on Windows systems</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Combine">
      <MemberSignature Language="C#" Value="public static string Combine (string path1, string path2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Combine(string path1, string path2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.Combine(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Combine (path1 As String, path2 As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Combine(System::String ^ path1, System::String ^ path2);" />
      <MemberSignature Language="F#" Value="static member Combine : string * string -&gt; string" Usage="System.IO.Path.Combine (path1, path2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path1" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="path2" Type="System.String" Index="1" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="path1"><span data-ttu-id="de775-206">要组合的第一个路径。</span><span class="sxs-lookup"><span data-stu-id="de775-206">The first path to combine.</span></span></param>
        <param name="path2"><span data-ttu-id="de775-207">要组合的第二个路径。</span><span class="sxs-lookup"><span data-stu-id="de775-207">The second path to combine.</span></span></param>
        <summary><span data-ttu-id="de775-208">将两个字符串组合成一个路径。</span><span class="sxs-lookup"><span data-stu-id="de775-208">Combines two strings into a path.</span></span></summary>
        <returns><span data-ttu-id="de775-209">已组合的路径。</span><span class="sxs-lookup"><span data-stu-id="de775-209">The combined paths.</span></span> <span data-ttu-id="de775-210">如果指定的路径之一是零长度字符串，则该方法返回其他路径。</span><span class="sxs-lookup"><span data-stu-id="de775-210">If one of the specified paths is a zero-length string, this method returns the other path.</span></span> <span data-ttu-id="de775-211">如果 <paramref name="path2" /> 包含绝对路径，则该方法返回 <paramref name="path2" />。</span><span class="sxs-lookup"><span data-stu-id="de775-211">If <paramref name="path2" /> contains an absolute path, this method returns <paramref name="path2" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="de775-212">如果不是 `path1` 驱动器引用 (即，"C：" 或 "D：" ) 并且不以、或中定义的有效分隔符结尾，则在 <xref:System.IO.Path.DirectorySeparatorChar> <xref:System.IO.Path.AltDirectorySeparatorChar> <xref:System.IO.Path.VolumeSeparatorChar> <xref:System.IO.Path.DirectorySeparatorChar> `path1` 串联前追加到。</span><span class="sxs-lookup"><span data-stu-id="de775-212">If `path1` is not a drive reference (that is, "C:" or "D:") and does not end with a valid separator character as defined in <xref:System.IO.Path.DirectorySeparatorChar>, <xref:System.IO.Path.AltDirectorySeparatorChar>, or <xref:System.IO.Path.VolumeSeparatorChar>, <xref:System.IO.Path.DirectorySeparatorChar> is appended to `path1` before concatenation.</span></span> <span data-ttu-id="de775-213">请注意，如果以 `path1` 不适合目标平台的路径分隔符结尾，则该 `Combine` 方法将保留原始路径分隔符并附加受支持的字符分隔符。</span><span class="sxs-lookup"><span data-stu-id="de775-213">Note that if `path1` ends in a path separator character that is not appropriate for the target platform, the `Combine` method preserves the original path separator character and appends a supported one.</span></span> <span data-ttu-id="de775-214">下面的示例将反斜杠用作路径分隔符时，比较基于 Windows 和 Unix 的系统上的结果。</span><span class="sxs-lookup"><span data-stu-id="de775-214">The following example compares the result on Windows and Unix-based systems when the backslash is used as a path separator character.</span></span>  
  
[!code-csharp[Combine and path separator characters](~/samples/snippets/csharp/api/system.io/path/combine/program.cs#2)]
[!code-vb[Combine and path separator characters](~/samples/snippets/visualbasic/api/system.io/path/combine/program.vb#2)]  

 <span data-ttu-id="de775-215">如果不 `path2` 包括根 (例如，如果不 `path2` 以分隔符字符或驱动器规范开头) ，则结果将是两个路径的串联，其中包含一个介入分隔符。</span><span class="sxs-lookup"><span data-stu-id="de775-215">If `path2` does not include a root (for example, if `path2` does not start with a separator character or a drive specification), the result is a concatenation of the two paths, with an intervening separator character.</span></span> <span data-ttu-id="de775-216">如果 `path2` 包含一个根， `path2` 则返回。</span><span class="sxs-lookup"><span data-stu-id="de775-216">If `path2` includes a root, `path2` is returned.</span></span>  
  
 <span data-ttu-id="de775-217">如果参数有空白，则不会对其进行分析。</span><span class="sxs-lookup"><span data-stu-id="de775-217">The parameters are not parsed if they have white space.</span></span> <span data-ttu-id="de775-218">因此，如果 `path2` 包括空格 (例如，"\file.txt" ) ，则该 <xref:System.IO.Path.Combine%2A> 方法将追加 `path2` 到 `path1` 而不是仅返回 `path2` 。</span><span class="sxs-lookup"><span data-stu-id="de775-218">Therefore, if `path2` includes white space (for example, " \file.txt "), the <xref:System.IO.Path.Combine%2A> method appends `path2` to `path1` instead of returning only `path2`.</span></span>  
  
 <span data-ttu-id="de775-219">.NET Framework 和 .NET Core 版本早于2.1：对于目录和文件名，不是所有无效字符都被解释为不可接受的 `Combine` ，因为您可以使用这些字符搜索通配符。</span><span class="sxs-lookup"><span data-stu-id="de775-219">.NET Framework and .NET Core versions older than 2.1: Not all invalid characters for directory and file names are interpreted as unacceptable by the `Combine` method, because you can use these characters for search wildcard characters.</span></span> <span data-ttu-id="de775-220">例如， `Path.Combine("c:\\", "*.txt")` 如果您要通过创建文件，则它可能会无效，它是搜索字符串的有效方法。</span><span class="sxs-lookup"><span data-stu-id="de775-220">For example, while `Path.Combine("c:\\", "*.txt")` might be invalid if you were to create a file from it, it is valid as a search string.</span></span> <span data-ttu-id="de775-221">因此，该方法成功解释了此 `Combine` 方法。</span><span class="sxs-lookup"><span data-stu-id="de775-221">It is therefore successfully interpreted by the `Combine` method.</span></span>  
  
 <span data-ttu-id="de775-222">有关常见 i/o 任务的列表，请参阅 [常见 I/o 任务](/dotnet/standard/io/common-i-o-tasks)。</span><span class="sxs-lookup"><span data-stu-id="de775-222">For a list of common I/O tasks, see [Common I/O Tasks](/dotnet/standard/io/common-i-o-tasks).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="de775-223">下面的示例演示如何 `Combine` 在基于 Windows 的桌面平台上使用方法。</span><span class="sxs-lookup"><span data-stu-id="de775-223">The following example demonstrates using the `Combine` method on a Windows-based desktop platform.</span></span>  
  
 [!code-cpp[pathcombine#1](~/samples/snippets/cpp/VS_Snippets_CLR/pathcombine/CPP/pathcombine.cpp#1)]
 [!code-csharp[pathcombine#1](~/samples/snippets/csharp/VS_Snippets_CLR/pathcombine/CS/pathcombine.cs#1)]
 [!code-vb[pathcombine#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/pathcombine/VB/pathcombine.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="de775-224">.NET Framework 和 .NET Core 版本超过2.1： <paramref name="path1" /> 或 <paramref name="path2" /> 包含中定义的一个或多个无效字符 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 。</span><span class="sxs-lookup"><span data-stu-id="de775-224">.NET Framework and .NET Core versions older than 2.1: <paramref name="path1" /> or <paramref name="path2" /> contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars" />.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="de775-225"><paramref name="path1" /> 或 <paramref name="path2" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="de775-225"><paramref name="path1" /> or <paramref name="path2" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="/dotnet/standard/io/file-path-formats"><span data-ttu-id="de775-226">Windows 系统中的文件路径格式</span><span class="sxs-lookup"><span data-stu-id="de775-226">File path formats on Windows systems</span></span></related>
        <related type="Article" href="/dotnet/standard/io/"><span data-ttu-id="de775-227">文件和流 I/O</span><span class="sxs-lookup"><span data-stu-id="de775-227">File and Stream I/O</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file"><span data-ttu-id="de775-228">如何：从文件中读取文本</span><span class="sxs-lookup"><span data-stu-id="de775-228">How to: Read Text from a File</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file"><span data-ttu-id="de775-229">如何：将文本写入文件</span><span class="sxs-lookup"><span data-stu-id="de775-229">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Combine">
      <MemberSignature Language="C#" Value="public static string Combine (string path1, string path2, string path3);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Combine(string path1, string path2, string path3) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.Combine(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Combine (path1 As String, path2 As String, path3 As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Combine(System::String ^ path1, System::String ^ path2, System::String ^ path3);" />
      <MemberSignature Language="F#" Value="static member Combine : string * string * string -&gt; string" Usage="System.IO.Path.Combine (path1, path2, path3)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path1" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="path2" Type="System.String" Index="1" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="path3" Type="System.String" Index="2" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="path1"><span data-ttu-id="de775-230">要组合的第一个路径。</span><span class="sxs-lookup"><span data-stu-id="de775-230">The first path to combine.</span></span></param>
        <param name="path2"><span data-ttu-id="de775-231">要组合的第二个路径。</span><span class="sxs-lookup"><span data-stu-id="de775-231">The second path to combine.</span></span></param>
        <param name="path3"><span data-ttu-id="de775-232">要组合的第三个路径。</span><span class="sxs-lookup"><span data-stu-id="de775-232">The third path to combine.</span></span></param>
        <summary><span data-ttu-id="de775-233">将三个字符串组合成一个路径。</span><span class="sxs-lookup"><span data-stu-id="de775-233">Combines three strings into a path.</span></span></summary>
        <returns><span data-ttu-id="de775-234">已组合的路径。</span><span class="sxs-lookup"><span data-stu-id="de775-234">The combined paths.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="de775-235">`path1` 应为绝对路径 (例如，"d:\archives" 或 " \\ \archives\public" ) 。</span><span class="sxs-lookup"><span data-stu-id="de775-235">`path1` should be an absolute path (for example, "d:\archives" or "\\\archives\public").</span></span> <span data-ttu-id="de775-236">如果 `path2` 或 `path3` 也是绝对路径，则合并操作将放弃所有以前合并的路径，并重置为该绝对路径。</span><span class="sxs-lookup"><span data-stu-id="de775-236">If `path2` or `path3` is also an absolute path, the combine operation discards all previously combined paths and resets to that absolute path.</span></span>  
  
 <span data-ttu-id="de775-237">将从组合路径中省略长度为零的字符串。</span><span class="sxs-lookup"><span data-stu-id="de775-237">Zero-length strings are omitted from the combined path.</span></span>  
  
 <span data-ttu-id="de775-238">如果 `path1` 或不 `path2` 是驱动器引用 (即，"C：" 或 "D：" ) 并且不以、或中定义的有效分隔符结尾， <xref:System.IO.Path.DirectorySeparatorChar> <xref:System.IO.Path.AltDirectorySeparatorChar> <xref:System.IO.Path.VolumeSeparatorChar> <xref:System.IO.Path.DirectorySeparatorChar> 则将在串联后附加 `path1` 或 `path2` 。</span><span class="sxs-lookup"><span data-stu-id="de775-238">If `path1` or `path2` is not a drive reference (that is, "C:" or "D:") and does not end with a valid separator character as defined in <xref:System.IO.Path.DirectorySeparatorChar>, <xref:System.IO.Path.AltDirectorySeparatorChar>, or <xref:System.IO.Path.VolumeSeparatorChar>, <xref:System.IO.Path.DirectorySeparatorChar> is appended to `path1` or `path2` before concatenation.</span></span> <span data-ttu-id="de775-239">请注意，如果 `path1` 或以 `path2` 不适合目标平台的路径分隔符字符结束，则该方法将 `Combine` 保留原始路径分隔符并追加一个受支持的字符分隔符。</span><span class="sxs-lookup"><span data-stu-id="de775-239">Note that if `path1` or `path2` ends in a path separator character that is not appropriate for the target platform, the `Combine` method preserves the original path separator character and appends a supported one.</span></span> <span data-ttu-id="de775-240">下面的示例将反斜杠用作路径分隔符时，比较基于 Windows 和 Unix 的系统上的结果。</span><span class="sxs-lookup"><span data-stu-id="de775-240">The following example compares the result on Windows and Unix-based systems when the backslash is used as a path separator character.</span></span> 

[!code-csharp[Combine and path separator characters](~/samples/snippets/csharp/api/system.io/path/combine/program.cs#3)]
[!code-vb[Combine and path separator characters](~/samples/snippets/visualbasic/api/system.io/path/combine/program.vb#3)]  

 <span data-ttu-id="de775-241">如果不 `path2` 包括根 (例如，如果不 `path2` 以分隔符字符或驱动器规范开头) ，则结果将是两个路径的串联，其中包含一个介入分隔符。</span><span class="sxs-lookup"><span data-stu-id="de775-241">If `path2` does not include a root (for example, if `path2` does not start with a separator character or a drive specification), the result is a concatenation of the two paths, with an intervening separator character.</span></span> <span data-ttu-id="de775-242">如果 `path2` 包含一个根， `path2` 则返回。</span><span class="sxs-lookup"><span data-stu-id="de775-242">If `path2` includes a root, `path2` is returned.</span></span>  
  
 <span data-ttu-id="de775-243">如果参数有空白，则不会对其进行分析。</span><span class="sxs-lookup"><span data-stu-id="de775-243">The parameters are not parsed if they have white space.</span></span> <span data-ttu-id="de775-244">因此，如果 `path2` 包括空格 (例如，"\file.txt" ) ，则该 <xref:System.IO.Path.Combine%2A> 方法将追加 `path2` 到 `path1` 。</span><span class="sxs-lookup"><span data-stu-id="de775-244">Therefore, if `path2` includes white space (for example, " \file.txt "), the <xref:System.IO.Path.Combine%2A> method appends `path2` to `path1`.</span></span>  
  
 <span data-ttu-id="de775-245">.NET Framework 和 .NET Core 版本早于2.1：对于目录和文件名，不是所有无效字符都被解释为不可接受的 `Combine` ，因为您可以使用这些字符搜索通配符。</span><span class="sxs-lookup"><span data-stu-id="de775-245">.NET Framework and .NET Core versions older than 2.1: Not all invalid characters for directory and file names are interpreted as unacceptable by the `Combine` method, because you can use these characters for search wildcard characters.</span></span> <span data-ttu-id="de775-246">例如， `Path.Combine("c:\\", "*.txt")` 如果您要通过创建文件，则它可能会无效，它是搜索字符串的有效方法。</span><span class="sxs-lookup"><span data-stu-id="de775-246">For example, while `Path.Combine("c:\\", "*.txt")` might be invalid if you were to create a file from it, it is valid as a search string.</span></span> <span data-ttu-id="de775-247">因此，该方法成功解释了此 `Combine` 方法。</span><span class="sxs-lookup"><span data-stu-id="de775-247">It is therefore successfully interpreted by the `Combine` method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="de775-248">下面的示例将三个路径组合在一起。</span><span class="sxs-lookup"><span data-stu-id="de775-248">The following example combines three paths.</span></span>  
  
 [!code-csharp[System.IO.Path.Combine#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.path.combine/cs/program.cs#1)]
 [!code-vb[System.IO.Path.Combine#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.path.combine/vb/program.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="de775-249">.NET Framework 和 .NET Core 版本早于2.1： <paramref name="path1" /> 、 <paramref name="path2" /> 或 <paramref name="path3" /> 包含中定义的一个或多个无效字符 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 。</span><span class="sxs-lookup"><span data-stu-id="de775-249">.NET Framework and .NET Core versions older than 2.1: <paramref name="path1" />, <paramref name="path2" />, or <paramref name="path3" /> contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars" />.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="de775-250"><paramref name="path1" />、<paramref name="path2" /> 或 <paramref name="path3" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="de775-250"><paramref name="path1" />, <paramref name="path2" />, or <paramref name="path3" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="/dotnet/standard/io/file-path-formats"><span data-ttu-id="de775-251">Windows 系统中的文件路径格式</span><span class="sxs-lookup"><span data-stu-id="de775-251">File path formats on Windows systems</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Combine">
      <MemberSignature Language="C#" Value="public static string Combine (string path1, string path2, string path3, string path4);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Combine(string path1, string path2, string path3, string path4) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.Combine(System.String,System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Combine (path1 As String, path2 As String, path3 As String, path4 As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Combine(System::String ^ path1, System::String ^ path2, System::String ^ path3, System::String ^ path4);" />
      <MemberSignature Language="F#" Value="static member Combine : string * string * string * string -&gt; string" Usage="System.IO.Path.Combine (path1, path2, path3, path4)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path1" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="path2" Type="System.String" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="path3" Type="System.String" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="path4" Type="System.String" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="path1"><span data-ttu-id="de775-252">要组合的第一个路径。</span><span class="sxs-lookup"><span data-stu-id="de775-252">The first path to combine.</span></span></param>
        <param name="path2"><span data-ttu-id="de775-253">要组合的第二个路径。</span><span class="sxs-lookup"><span data-stu-id="de775-253">The second path to combine.</span></span></param>
        <param name="path3"><span data-ttu-id="de775-254">要组合的第三个路径。</span><span class="sxs-lookup"><span data-stu-id="de775-254">The third path to combine.</span></span></param>
        <param name="path4"><span data-ttu-id="de775-255">要组合的第四个路径。</span><span class="sxs-lookup"><span data-stu-id="de775-255">The fourth path to combine.</span></span></param>
        <summary><span data-ttu-id="de775-256">将四个字符串组合成一个路径。</span><span class="sxs-lookup"><span data-stu-id="de775-256">Combines four strings into a path.</span></span></summary>
        <returns><span data-ttu-id="de775-257">已组合的路径。</span><span class="sxs-lookup"><span data-stu-id="de775-257">The combined paths.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="de775-258">`path1` 应为绝对路径 (例如，"d:\archives" 或 " \\ \archives\public" ) 。</span><span class="sxs-lookup"><span data-stu-id="de775-258">`path1` should be an absolute path (for example, "d:\archives" or "\\\archives\public").</span></span> <span data-ttu-id="de775-259">如果其中一个后续路径也是绝对路径，则合并操作会丢弃所有以前合并的路径，并重置为该绝对路径。</span><span class="sxs-lookup"><span data-stu-id="de775-259">If one of the subsequent paths is also an absolute path, the combine operation discards all previously combined paths and resets to that absolute path.</span></span>  
  
 <span data-ttu-id="de775-260">将从组合路径中省略长度为零的字符串。</span><span class="sxs-lookup"><span data-stu-id="de775-260">Zero-length strings are omitted from the combined path.</span></span>  
  
 <span data-ttu-id="de775-261">如果 `path1` 、 `path2` 或不是 `path3` 驱动器引用 (即，"C：" 或 "D：" ) ，并且不是以、或中定义的有效分隔符结尾， <xref:System.IO.Path.DirectorySeparatorChar> <xref:System.IO.Path.AltDirectorySeparatorChar> <xref:System.IO.Path.VolumeSeparatorChar> <xref:System.IO.Path.DirectorySeparatorChar> 则会在串联前追加。</span><span class="sxs-lookup"><span data-stu-id="de775-261">If `path1`, `path2`, or `path3` is not a drive reference (that is, "C:" or "D:") and does not end with a valid separator character as defined in <xref:System.IO.Path.DirectorySeparatorChar>, <xref:System.IO.Path.AltDirectorySeparatorChar>, or <xref:System.IO.Path.VolumeSeparatorChar>, <xref:System.IO.Path.DirectorySeparatorChar> is appended to it before concatenation.</span></span> <span data-ttu-id="de775-262">请注意，如果 `path1` 、 `path2` 或以 `path3` 不适合目标平台的路径分隔符结尾，则该 `Combine` 方法将保留原始路径分隔符并附加受支持的字符分隔符。</span><span class="sxs-lookup"><span data-stu-id="de775-262">Note that if `path1`, `path2`, or `path3` ends in a path separator character that is not appropriate for the target platform, the `Combine` method preserves the original path separator character and appends a supported one.</span></span> <span data-ttu-id="de775-263">下面的示例将反斜杠用作路径分隔符时，比较基于 Windows 和 Unix 的系统上的结果。</span><span class="sxs-lookup"><span data-stu-id="de775-263">The following example compares the result on Windows and Unix-based systems when the backslash is used as a path separator character.</span></span> 

[!code-csharp[Combine and path separator characters](~/samples/snippets/csharp/api/system.io/path/combine/program.cs#4)]
[!code-vb[Combine and path separator characters](~/samples/snippets/visualbasic/api/system.io/path/combine/program.vb#4)]   
  
 <span data-ttu-id="de775-264">如果不 `path2` 包括根 (例如，如果不 `path2` 以分隔符字符或驱动器规范开头) ，则结果将是两个路径的串联，其中包含一个介入分隔符。</span><span class="sxs-lookup"><span data-stu-id="de775-264">If `path2` does not include a root (for example, if `path2` does not start with a separator character or a drive specification), the result is a concatenation of the two paths, with an intervening separator character.</span></span> <span data-ttu-id="de775-265">如果 `path2` 包含一个根， `path2` 则返回。</span><span class="sxs-lookup"><span data-stu-id="de775-265">If `path2` includes a root, `path2` is returned.</span></span>  
  
 <span data-ttu-id="de775-266">如果参数有空白，则不会对其进行分析。</span><span class="sxs-lookup"><span data-stu-id="de775-266">The parameters are not parsed if they have white space.</span></span> <span data-ttu-id="de775-267">因此，如果 `path2` 包括空格 (例如，"\file.txt" ) ，则该 <xref:System.IO.Path.Combine%2A> 方法将追加 `path2` 到 `path1` 。</span><span class="sxs-lookup"><span data-stu-id="de775-267">Therefore, if `path2` includes white space (for example, " \file.txt "), the <xref:System.IO.Path.Combine%2A> method appends `path2` to `path1`.</span></span>  
  
 <span data-ttu-id="de775-268">.NET Framework 和 .NET Core 版本早于2.1：对于目录和文件名，不是所有无效字符都被解释为不可接受的 `Combine` ，因为您可以使用这些字符搜索通配符。</span><span class="sxs-lookup"><span data-stu-id="de775-268">.NET Framework and .NET Core versions older than 2.1: Not all invalid characters for directory and file names are interpreted as unacceptable by the `Combine` method, because you can use these characters for search wildcard characters.</span></span> <span data-ttu-id="de775-269">例如， `Path.Combine("c:\\", "*.txt")` 如果您要通过创建文件，则它可能会无效，它是搜索字符串的有效方法。</span><span class="sxs-lookup"><span data-stu-id="de775-269">For example, while `Path.Combine("c:\\", "*.txt")` might be invalid if you were to create a file from it, it is valid as a search string.</span></span> <span data-ttu-id="de775-270">因此，该方法成功解释了此 `Combine` 方法。</span><span class="sxs-lookup"><span data-stu-id="de775-270">It is therefore successfully interpreted by the `Combine` method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="de775-271">下面的示例将四个路径组合在一起。</span><span class="sxs-lookup"><span data-stu-id="de775-271">The following example combines four paths.</span></span>  
  
 [!code-csharp[System.IO.Path.Combine#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.path.combine/cs/program.cs#2)]
 [!code-vb[System.IO.Path.Combine#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.path.combine/vb/program.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="de775-272">.NET Framework 和 .net Core 版本早于2.1： <paramref name="path1" /> 、 <paramref name="path2" /> 、 <paramref name="path3" /> 或 <paramref name="path4" /> 包含中定义的一个或多个无效字符 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 。</span><span class="sxs-lookup"><span data-stu-id="de775-272">.NET Framework and .NET Core versions older than 2.1: <paramref name="path1" />, <paramref name="path2" />, <paramref name="path3" />, or <paramref name="path4" /> contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars" />.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="de775-273"><paramref name="path1" />、<paramref name="path2" />、<paramref name="path3" /> 或 <paramref name="path4" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="de775-273"><paramref name="path1" />, <paramref name="path2" />, <paramref name="path3" />, or <paramref name="path4" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="/dotnet/standard/io/file-path-formats"><span data-ttu-id="de775-274">Windows 系统中的文件路径格式</span><span class="sxs-lookup"><span data-stu-id="de775-274">File path formats on Windows systems</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="DirectorySeparatorChar">
      <MemberSignature Language="C#" Value="public static readonly char DirectorySeparatorChar;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly char DirectorySeparatorChar" />
      <MemberSignature Language="DocId" Value="F:System.IO.Path.DirectorySeparatorChar" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DirectorySeparatorChar As Char " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly char DirectorySeparatorChar;" />
      <MemberSignature Language="F#" Value=" staticval mutable DirectorySeparatorChar : char" Usage="System.IO.Path.DirectorySeparatorChar" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="de775-275">提供平台特定的字符，该字符用于在反映分层文件系统组织的路径字符串中分隔目录级别。</span><span class="sxs-lookup"><span data-stu-id="de775-275">Provides a platform-specific character used to separate directory levels in a path string that reflects a hierarchical file system organization.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks

<span data-ttu-id="de775-276"><xref:System.IO.Path.AltDirectorySeparatorChar> 和 `DirectorySeparatorChar` 都适用于在路径字符串中分隔目录级别。</span><span class="sxs-lookup"><span data-stu-id="de775-276"><xref:System.IO.Path.AltDirectorySeparatorChar> and `DirectorySeparatorChar` are both valid for separating directory levels in a path string.</span></span>  
  
<span data-ttu-id="de775-277">使用 .NET Core 开发在多个平台上运行的应用程序时：</span><span class="sxs-lookup"><span data-stu-id="de775-277">When you are using .NET Core to develop applications that run on multiple platforms:</span></span>

- <span data-ttu-id="de775-278">如果你想要对目录分隔符进行硬编码，则应使用正斜杠 (`/`) 字符。</span><span class="sxs-lookup"><span data-stu-id="de775-278">If you prefer to hard-code the directory separator character, you should use the forward slash (`/`) character.</span></span> <span data-ttu-id="de775-279">它是 Unix 系统上唯一可识别的目录分隔符，如示例的输出所示，在 <xref:System.IO.Path.AltDirectorySeparatorChar> Windows 上是。</span><span class="sxs-lookup"><span data-stu-id="de775-279">It is the only recognized directory separator character on Unix systems, as the output from the example shows, and is the <xref:System.IO.Path.AltDirectorySeparatorChar> on Windows.</span></span>

- <span data-ttu-id="de775-280">使用字符串串联在运行时动态检索路径分隔符，并将其合并到文件系统路径中。</span><span class="sxs-lookup"><span data-stu-id="de775-280">Use string concatenation to dynamically retrieve the path separator character at runtime and incorporate it into file system paths.</span></span> <span data-ttu-id="de775-281">例如，应用于对象的</span><span class="sxs-lookup"><span data-stu-id="de775-281">For example,</span></span> 

   ```csharp
   separator = Path.DirectorySeparatorChar;
   path = $"{separator}users{separator}user1{separator}";
   ```

   ```vb
   separator = Path.DirectorySeparatorChar
   path = $"{separator}users{separator}user1{separator}"
   ``` 

   <span data-ttu-id="de775-282">你还可以从属性中检索值 <xref:System.IO.Path.AltDirectorySeparatorChar> ，因为它在基于 Windows 和 Unix 的系统上是相同的。</span><span class="sxs-lookup"><span data-stu-id="de775-282">You can also retrieve the value from the <xref:System.IO.Path.AltDirectorySeparatorChar> property, since it is the same on both Windows and Unix-based systems.</span></span>

- <span data-ttu-id="de775-283">检索 <xref:System.IO.Path.AltDirectorySeparatorChar> 属性</span><span class="sxs-lookup"><span data-stu-id="de775-283">Retrieve the <xref:System.IO.Path.AltDirectorySeparatorChar> property</span></span>

<span data-ttu-id="de775-284">如果你的应用程序不是跨平台的，你可以使用适用于你的系统的分隔符。</span><span class="sxs-lookup"><span data-stu-id="de775-284">If your application is not cross-platform, you can use the separator appropriate for your system.</span></span>

## Examples  

<span data-ttu-id="de775-285">下面的示例显示 <xref:System.IO.Path> Windows 和基于 Unix 的系统上的字段值。</span><span class="sxs-lookup"><span data-stu-id="de775-285">The following example displays <xref:System.IO.Path> field values on Windows and on Unix-based systems.</span></span> <span data-ttu-id="de775-286">请注意，Windows 支持由字段返回的正斜杠 (<xref:System.IO.Path.AltDirectorySeparatorChar>) 或由 <xref:System.IO.Path.DirectorySeparatorChar> 字段) 为路径分隔符字符返回的反斜杠 (，而基于 Unix 的系统则仅支持正斜杠。</span><span class="sxs-lookup"><span data-stu-id="de775-286">Note that Windows supports either the forward slash (which is returned by the <xref:System.IO.Path.AltDirectorySeparatorChar> field) or the backslash (which is returned by the <xref:System.IO.Path.DirectorySeparatorChar> field) as path separator characters, while Unix-based systems support only the forward slash.</span></span>  

[!code-csharp[DirectorySeparatorChar](~/samples/snippets/csharp/api/system.io/path/directoryseparatorchar/program.cs)]
[!code-vb[DirectorySeparatorChar](~/samples/snippets/visualbasic/api/system.io/path/directoryseparatorchar/program.vb)]
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/standard/io/"><span data-ttu-id="de775-287">文件和流 I/O</span><span class="sxs-lookup"><span data-stu-id="de775-287">File and Stream I/O</span></span></related>
        <related type="Article" href="/dotnet/standard/io/file-path-formats"><span data-ttu-id="de775-288">Windows 系统中的文件路径格式</span><span class="sxs-lookup"><span data-stu-id="de775-288">File path formats on Windows systems</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file"><span data-ttu-id="de775-289">如何：从文件中读取文本</span><span class="sxs-lookup"><span data-stu-id="de775-289">How to: Read Text from a File</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file"><span data-ttu-id="de775-290">如何：将文本写入文件</span><span class="sxs-lookup"><span data-stu-id="de775-290">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="EndsInDirectorySeparator">
      <MemberSignature Language="C#" Value="public static bool EndsInDirectorySeparator (ReadOnlySpan&lt;char&gt; path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool EndsInDirectorySeparator(valuetype System.ReadOnlySpan`1&lt;char&gt; path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.EndsInDirectorySeparator(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EndsInDirectorySeparator (path As ReadOnlySpan(Of Char)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool EndsInDirectorySeparator(ReadOnlySpan&lt;char&gt; path);" />
      <MemberSignature Language="F#" Value="static member EndsInDirectorySeparator : ReadOnlySpan&lt;char&gt; -&gt; bool" Usage="System.IO.Path.EndsInDirectorySeparator path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="de775-291">要分析的路径。</span><span class="sxs-lookup"><span data-stu-id="de775-291">The path to analyze.</span></span></param>
        <summary><span data-ttu-id="de775-292">返回一个值，该值指示指定为只读范围的路径是否以目录分隔符结尾。</span><span class="sxs-lookup"><span data-stu-id="de775-292">Returns a value that indicates whether the path, specified as a read-only span, ends in a directory separator.</span></span></summary>
        <returns><span data-ttu-id="de775-293">如果该路径以目录分隔符结尾，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="de775-293"><see langword="true" /> if the path ends in a directory separator; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndsInDirectorySeparator">
      <MemberSignature Language="C#" Value="public static bool EndsInDirectorySeparator (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool EndsInDirectorySeparator(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.EndsInDirectorySeparator(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EndsInDirectorySeparator (path As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool EndsInDirectorySeparator(System::String ^ path);" />
      <MemberSignature Language="F#" Value="static member EndsInDirectorySeparator : string -&gt; bool" Usage="System.IO.Path.EndsInDirectorySeparator path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="de775-294">要分析的路径。</span><span class="sxs-lookup"><span data-stu-id="de775-294">The path to analyze.</span></span></param>
        <summary><span data-ttu-id="de775-295">返回一个值，该值指示指定的路径是否以目录分隔符结尾。</span><span class="sxs-lookup"><span data-stu-id="de775-295">Returns a value that indicates whether the specified path ends in a directory separator.</span></span></summary>
        <returns><span data-ttu-id="de775-296">如果该路径以目录分隔符结尾，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="de775-296"><see langword="true" /> if the path ends in a directory separator; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDirectoryName">
      <MemberSignature Language="C#" Value="public static ReadOnlySpan&lt;char&gt; GetDirectoryName (ReadOnlySpan&lt;char&gt; path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ReadOnlySpan`1&lt;char&gt; GetDirectoryName(valuetype System.ReadOnlySpan`1&lt;char&gt; path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.GetDirectoryName(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetDirectoryName (path As ReadOnlySpan(Of Char)) As ReadOnlySpan(Of Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static ReadOnlySpan&lt;char&gt; GetDirectoryName(ReadOnlySpan&lt;char&gt; path);" />
      <MemberSignature Language="F#" Value="static member GetDirectoryName : ReadOnlySpan&lt;char&gt; -&gt; ReadOnlySpan&lt;char&gt;" Usage="System.IO.Path.GetDirectoryName path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;System.Char&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="de775-297">要从中检索目录信息的路径。</span><span class="sxs-lookup"><span data-stu-id="de775-297">The path to retrieve the directory information from.</span></span></param>
        <summary><span data-ttu-id="de775-298">返回由字符范围表示的指定路径的目录信息。</span><span class="sxs-lookup"><span data-stu-id="de775-298">Returns the directory information for the specified path represented by a character span.</span></span></summary>
        <returns><span data-ttu-id="de775-299"><paramref name="path" /> 的目录信息，如果 <paramref name="path" /> 为 <see langword="null" />空范围或根（例如 \,C: 或\\server\share），则为空跨度。</span><span class="sxs-lookup"><span data-stu-id="de775-299">Directory information for <paramref name="path" />, or an empty span if <paramref name="path" /> is <see langword="null" />, an empty span, or a root (such as \, C:, or \\server\share).</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="de775-300">与字符串重载不同，此方法不会将目录分隔符标准化。</span><span class="sxs-lookup"><span data-stu-id="de775-300">Unlike the string overload, this method doesn't normalize directory separators.</span></span>

          ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/standard/io/file-path-formats"><span data-ttu-id="de775-301">Windows 系统中的文件路径格式</span><span class="sxs-lookup"><span data-stu-id="de775-301">File path formats on Windows systems</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetDirectoryName">
      <MemberSignature Language="C#" Value="public static string GetDirectoryName (string path);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetDirectoryName(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.GetDirectoryName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetDirectoryName (path As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ GetDirectoryName(System::String ^ path);" />
      <MemberSignature Language="F#" Value="static member GetDirectoryName : string -&gt; string" Usage="System.IO.Path.GetDirectoryName path" />
      <MemberSignature Language="C#" Value="public static string? GetDirectoryName (string? path);" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="de775-302">文件或目录的路径。</span><span class="sxs-lookup"><span data-stu-id="de775-302">The path of a file or directory.</span></span></param>
        <summary><span data-ttu-id="de775-303">返回指定路径的目录信息。</span><span class="sxs-lookup"><span data-stu-id="de775-303">Returns the directory information for the specified path.</span></span></summary>
        <returns><span data-ttu-id="de775-304"><paramref name="path" /> 的目录信息；如果 <paramref name="path" /> 表示根目录或为 null，则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="de775-304">Directory information for <paramref name="path" />, or <see langword="null" /> if <paramref name="path" /> denotes a root directory or is null.</span></span> <span data-ttu-id="de775-305">如果 <paramref name="path" /> 不包含目录信息，则返回 <see cref="F:System.String.Empty" />。</span><span class="sxs-lookup"><span data-stu-id="de775-305">Returns <see cref="F:System.String.Empty" /> if <paramref name="path" /> does not contain directory information.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks

<span data-ttu-id="de775-306">在大多数情况下，此方法返回的字符串包含路径中的所有字符，但不包括最后一个目录分隔符 (s) 。</span><span class="sxs-lookup"><span data-stu-id="de775-306">In most cases, the string returned by this method consists of all characters in the path up to, but not including, the last directory separator character(s).</span></span> <span data-ttu-id="de775-307">目录分隔符可以是 <xref:System.IO.Path.DirectorySeparatorChar> 或 <xref:System.IO.Path.AltDirectorySeparatorChar> 。</span><span class="sxs-lookup"><span data-stu-id="de775-307">A directory separator character can be either <xref:System.IO.Path.DirectorySeparatorChar> or <xref:System.IO.Path.AltDirectorySeparatorChar>.</span></span> <span data-ttu-id="de775-308">如果路径包含根目录（如 "c： \\ "）， `null` 则返回。</span><span class="sxs-lookup"><span data-stu-id="de775-308">If the path consists of a root directory, such as "c:\\", `null` is returned.</span></span>

<span data-ttu-id="de775-309">此方法不支持使用 "file：" 的路径。</span><span class="sxs-lookup"><span data-stu-id="de775-309">This method does not support paths using "file:".</span></span>

<span data-ttu-id="de775-310">由于返回的路径不包括) 的最后一个目录 (分隔符，因此将返回的路径传递回方法会 <xref:System.IO.Path.GetDirectoryName%2A> 在对结果路径的每个后续调用中截断一个文件夹级别。</span><span class="sxs-lookup"><span data-stu-id="de775-310">Because the returned path does not include the last directory separator character(s), passing the returned path back into the <xref:System.IO.Path.GetDirectoryName%2A> method truncates one folder level per subsequent call on the result path.</span></span> <span data-ttu-id="de775-311">例如，将路径 "C:\Directory\SubDirectory\test.txt" 传递到将 <xref:System.IO.Path.GetDirectoryName%2A> 返回 "C:\Directory\SubDirectory"。</span><span class="sxs-lookup"><span data-stu-id="de775-311">For example, passing the path "C:\Directory\SubDirectory\test.txt" into <xref:System.IO.Path.GetDirectoryName%2A> returns "C:\Directory\SubDirectory".</span></span> <span data-ttu-id="de775-312">将该路径 "C:\Directory\SubDirectory" 传递到将 <xref:System.IO.Path.GetDirectoryName%2A> 返回 "C:\Directory"。</span><span class="sxs-lookup"><span data-stu-id="de775-312">Passing that path, "C:\Directory\SubDirectory", into <xref:System.IO.Path.GetDirectoryName%2A> returns "C:\Directory".</span></span>

<span data-ttu-id="de775-313">有关常见 i/o 任务的列表，请参阅 [常见 i/o 任务](/dotnet/standard/io/common-i-o-tasks)。</span><span class="sxs-lookup"><span data-stu-id="de775-313">For a list of common I/O tasks, see [Common I/O tasks](/dotnet/standard/io/common-i-o-tasks).</span></span>

## Examples  
 <span data-ttu-id="de775-314">下面的示例演示如何 `GetDirectoryName` 在基于 Windows 的桌面平台上使用方法。</span><span class="sxs-lookup"><span data-stu-id="de775-314">The following example demonstrates using the `GetDirectoryName` method on a Windows-based desktop platform.</span></span>  
  
 [!code-cpp[System.IO.Path Members#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.Path Members/CPP/pathmembers.cpp#3)]
 [!code-csharp[System.IO.Path Members#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Path Members/CS/pathmembers.cs#3)]
 [!code-vb[System.IO.Path Members#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Path Members/VB/pathmembers.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="de775-315">.NET Framework 和 .NET Core 版本早于2.1： <paramref name="path" /> 参数包含无效字符、为空或仅包含空格。</span><span class="sxs-lookup"><span data-stu-id="de775-315">.NET Framework and .NET Core versions older than 2.1: The <paramref name="path" /> parameter contains invalid characters, is empty, or contains only white spaces.</span></span></exception>
        <exception cref="T:System.IO.PathTooLongException"><block subset="none" type="note">
            <para>  
 <span data-ttu-id="de775-316">在<see href="https://docs.microsoft.com/previous-versions/br230232(v=vs.110)">适用于 Windows 应用商店应用的 .NET</see> 或<see href="https://docs.microsoft.com/dotnet/standard/cross-platform/cross-platform-development-with-the-portable-class-library">可移植类库</see>中，改为捕获基类异常 <see cref="T:System.IO.IOException" />。</span><span class="sxs-lookup"><span data-stu-id="de775-316">In <see href="https://docs.microsoft.com/previous-versions/br230232(v=vs.110)">.NET for Windows Store apps</see> or the <see href="https://docs.microsoft.com/dotnet/standard/cross-platform/cross-platform-development-with-the-portable-class-library">Portable Class Library</see>, catch the base class exception, <see cref="T:System.IO.IOException" />, instead.</span></span>  
  
</para>
          </block>  
  
 <span data-ttu-id="de775-317"><paramref name="path" /> 参数超过系统定义的最大长度。</span><span class="sxs-lookup"><span data-stu-id="de775-317">The <paramref name="path" /> parameter is longer than the system-defined maximum length.</span></span></exception>
        <related type="Article" href="/dotnet/standard/io/file-path-formats"><span data-ttu-id="de775-318">Windows 系统中的文件路径格式</span><span class="sxs-lookup"><span data-stu-id="de775-318">File path formats on Windows systems</span></span></related>
        <related type="Article" href="/dotnet/standard/io/"><span data-ttu-id="de775-319">文件和流 I/O</span><span class="sxs-lookup"><span data-stu-id="de775-319">File and Stream I/O</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file"><span data-ttu-id="de775-320">如何：从文件中读取文本</span><span class="sxs-lookup"><span data-stu-id="de775-320">How to: Read Text from a File</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file"><span data-ttu-id="de775-321">如何：将文本写入文件</span><span class="sxs-lookup"><span data-stu-id="de775-321">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetExtension">
      <MemberSignature Language="C#" Value="public static ReadOnlySpan&lt;char&gt; GetExtension (ReadOnlySpan&lt;char&gt; path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ReadOnlySpan`1&lt;char&gt; GetExtension(valuetype System.ReadOnlySpan`1&lt;char&gt; path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.GetExtension(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetExtension (path As ReadOnlySpan(Of Char)) As ReadOnlySpan(Of Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static ReadOnlySpan&lt;char&gt; GetExtension(ReadOnlySpan&lt;char&gt; path);" />
      <MemberSignature Language="F#" Value="static member GetExtension : ReadOnlySpan&lt;char&gt; -&gt; ReadOnlySpan&lt;char&gt;" Usage="System.IO.Path.GetExtension path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;System.Char&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="de775-322">从中获取扩展名的文件路径。</span><span class="sxs-lookup"><span data-stu-id="de775-322">The file path from which to get the extension.</span></span></param>
        <summary><span data-ttu-id="de775-323">返回由只读字符范围表示的文件路径的扩展名。</span><span class="sxs-lookup"><span data-stu-id="de775-323">Returns the extension of a file path that is represented by a read-only character span.</span></span></summary>
        <returns><span data-ttu-id="de775-324">指定路径的扩展名（包括句点“.”）；如果 <paramref name="path" /> 没有扩展信息，则为 <see cref="P:System.ReadOnlySpan`1.Empty" />。</span><span class="sxs-lookup"><span data-stu-id="de775-324">The extension of the specified path (including the period, "."), or <see cref="P:System.ReadOnlySpan`1.Empty" /> if <paramref name="path" /> does not have extension information.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  

<span data-ttu-id="de775-325">此方法 `path` 通过搜索 `path` 句点 ( "。) ，从只读范围中的最后一个字符开始直到其第一个字符。</span><span class="sxs-lookup"><span data-stu-id="de775-325">This method obtains the extension of `path` by searching `path` for a period ("."), starting from the last character in the read-only span and continuing toward its first character.</span></span> <span data-ttu-id="de775-326">如果在或字符之前找到句点 <xref:System.IO.Path.DirectorySeparatorChar> <xref:System.IO.Path.AltDirectorySeparatorChar> ，则返回的只读范围将包含句点和后面的字符; 否则 <xref:System.ReadOnlySpan%601.Empty?displayProperty=nameWithType> 返回。</span><span class="sxs-lookup"><span data-stu-id="de775-326">If a period is found before a <xref:System.IO.Path.DirectorySeparatorChar> or <xref:System.IO.Path.AltDirectorySeparatorChar> character, the returned read-only span contains the period and the characters after it; otherwise, <xref:System.ReadOnlySpan%601.Empty?displayProperty=nameWithType> is returned.</span></span>  

         ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/standard/io/file-path-formats"><span data-ttu-id="de775-327">Windows 系统中的文件路径格式</span><span class="sxs-lookup"><span data-stu-id="de775-327">File path formats on Windows systems</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetExtension">
      <MemberSignature Language="C#" Value="public static string GetExtension (string path);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetExtension(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.GetExtension(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetExtension (path As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ GetExtension(System::String ^ path);" />
      <MemberSignature Language="F#" Value="static member GetExtension : string -&gt; string" Usage="System.IO.Path.GetExtension path" />
      <MemberSignature Language="C#" Value="public static string? GetExtension (string? path);" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="de775-328">从中获取扩展名的路径字符串。</span><span class="sxs-lookup"><span data-stu-id="de775-328">The path string from which to get the extension.</span></span></param>
        <summary><span data-ttu-id="de775-329">返回指定路径字符串的扩展名（包括句点“.”）。</span><span class="sxs-lookup"><span data-stu-id="de775-329">Returns the extension (including the period ".") of the specified path string.</span></span></summary>
        <returns><span data-ttu-id="de775-330">指定路径的扩展名（包含句点“.”）、或 <see langword="null" />、或 <see cref="F:System.String.Empty" />。</span><span class="sxs-lookup"><span data-stu-id="de775-330">The extension of the specified path (including the period "."), or <see langword="null" />, or <see cref="F:System.String.Empty" />.</span></span> <span data-ttu-id="de775-331">如果 <paramref name="path" /> 为 <see langword="null" />，则 <see cref="M:System.IO.Path.GetExtension(System.String)" /> 返回 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="de775-331">If <paramref name="path" /> is <see langword="null" />, <see cref="M:System.IO.Path.GetExtension(System.String)" /> returns <see langword="null" />.</span></span> <span data-ttu-id="de775-332">如果 <paramref name="path" /> 不具有扩展名信息，则 <see cref="M:System.IO.Path.GetExtension(System.String)" /> 返回 <see cref="F:System.String.Empty" />。</span><span class="sxs-lookup"><span data-stu-id="de775-332">If <paramref name="path" /> does not have extension information, <see cref="M:System.IO.Path.GetExtension(System.String)" /> returns <see cref="F:System.String.Empty" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="de775-333">此方法 `path` 通过搜索句点 ( 获取扩展 `path` 。 ) ，从中的最后一个字符开始，一直到 `path` 第一个字符。</span><span class="sxs-lookup"><span data-stu-id="de775-333">This method obtains the extension of `path` by searching `path` for a period (.), starting with the last character in `path` and continuing toward the first character.</span></span> <span data-ttu-id="de775-334">如果在或字符之前找到句点 <xref:System.IO.Path.DirectorySeparatorChar> <xref:System.IO.Path.AltDirectorySeparatorChar> ，则返回的字符串将包含句点和后面的字符; 否则 <xref:System.String.Empty?displayProperty=nameWithType> 返回。</span><span class="sxs-lookup"><span data-stu-id="de775-334">If a period is found before a <xref:System.IO.Path.DirectorySeparatorChar> or <xref:System.IO.Path.AltDirectorySeparatorChar> character, the returned string contains the period and the characters after it; otherwise, <xref:System.String.Empty?displayProperty=nameWithType> is returned.</span></span>  
  
 <span data-ttu-id="de775-335">有关常见 i/o 任务的列表，请参阅 [常见 I/o 任务](/dotnet/standard/io/common-i-o-tasks)。</span><span class="sxs-lookup"><span data-stu-id="de775-335">For a list of common I/O tasks, see [Common I/O Tasks](/dotnet/standard/io/common-i-o-tasks).</span></span>
 
## Examples  
 <span data-ttu-id="de775-336">下面的示例演示如何 `GetExtension` 在基于 Windows 的桌面平台上使用方法。</span><span class="sxs-lookup"><span data-stu-id="de775-336">The following example demonstrates using the `GetExtension` method on a Windows-based desktop platform.</span></span>  
  
 [!code-cpp[System.IO.Path Members#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.Path Members/CPP/pathmembers.cpp#4)]
 [!code-csharp[System.IO.Path Members#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Path Members/CS/pathmembers.cs#4)]
 [!code-vb[System.IO.Path Members#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Path Members/VB/pathmembers.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="de775-337">.NET Framework 和 .NET Core 版本早于2.1： <paramref name="path" /> 包含中定义的一个或多个无效字符 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 。</span><span class="sxs-lookup"><span data-stu-id="de775-337">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars" />.</span></span></exception>
        <related type="Article" href="/dotnet/standard/io/file-path-formats"><span data-ttu-id="de775-338">Windows 系统中的文件路径格式</span><span class="sxs-lookup"><span data-stu-id="de775-338">File path formats on Windows systems</span></span></related>
        <related type="Article" href="/dotnet/standard/io/"><span data-ttu-id="de775-339">文件和流 I/O</span><span class="sxs-lookup"><span data-stu-id="de775-339">File and Stream I/O</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file"><span data-ttu-id="de775-340">如何：从文件中读取文本</span><span class="sxs-lookup"><span data-stu-id="de775-340">How to: Read Text from a File</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file"><span data-ttu-id="de775-341">如何：将文本写入文件</span><span class="sxs-lookup"><span data-stu-id="de775-341">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetFileName">
      <MemberSignature Language="C#" Value="public static ReadOnlySpan&lt;char&gt; GetFileName (ReadOnlySpan&lt;char&gt; path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ReadOnlySpan`1&lt;char&gt; GetFileName(valuetype System.ReadOnlySpan`1&lt;char&gt; path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.GetFileName(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetFileName (path As ReadOnlySpan(Of Char)) As ReadOnlySpan(Of Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static ReadOnlySpan&lt;char&gt; GetFileName(ReadOnlySpan&lt;char&gt; path);" />
      <MemberSignature Language="F#" Value="static member GetFileName : ReadOnlySpan&lt;char&gt; -&gt; ReadOnlySpan&lt;char&gt;" Usage="System.IO.Path.GetFileName path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;System.Char&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="de775-342">一个只读范围，包含从中获取文件名和扩展名的路径。</span><span class="sxs-lookup"><span data-stu-id="de775-342">A read-only span that contains the path from which to obtain the file name and extension.</span></span></param>
        <summary><span data-ttu-id="de775-343">返回由只读字符范围表示的文件路径的文件名和扩展名。</span><span class="sxs-lookup"><span data-stu-id="de775-343">Returns the file name and extension of a file path that is represented by a read-only character span.</span></span></summary>
        <returns><span data-ttu-id="de775-344"><paramref name="path" /> 中最后的目录分隔符后的字符。</span><span class="sxs-lookup"><span data-stu-id="de775-344">The characters after the last directory separator character in <paramref name="path" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  

<span data-ttu-id="de775-345">返回的只读范围包含路径中位于最后一个分隔符后面的字符 `path` 。</span><span class="sxs-lookup"><span data-stu-id="de775-345">The returned read-only span contains the characters of the path that follow the last separator in `path`.</span></span> <span data-ttu-id="de775-346">如果中的最后一个字符 `path` 是一个卷或目录分隔符字符，则该方法将返回 <xref:System.ReadOnlySpan%601.Empty?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="de775-346">If the last character in `path` is a volume or directory separator character, the method returns <xref:System.ReadOnlySpan%601.Empty?displayProperty=nameWithType>.</span></span> <span data-ttu-id="de775-347">如果 `path` 不包含分隔符，该方法将返回 `path` 。</span><span class="sxs-lookup"><span data-stu-id="de775-347">If `path` contains no separator character, the method returns `path`.</span></span>

         ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/standard/io/file-path-formats"><span data-ttu-id="de775-348">Windows 系统中的文件路径格式</span><span class="sxs-lookup"><span data-stu-id="de775-348">File path formats on Windows systems</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetFileName">
      <MemberSignature Language="C#" Value="public static string GetFileName (string path);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetFileName(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.GetFileName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetFileName (path As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ GetFileName(System::String ^ path);" />
      <MemberSignature Language="F#" Value="static member GetFileName : string -&gt; string" Usage="System.IO.Path.GetFileName path" />
      <MemberSignature Language="C#" Value="public static string? GetFileName (string? path);" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="de775-349">从中获取文件名和扩展名的路径字符串。</span><span class="sxs-lookup"><span data-stu-id="de775-349">The path string from which to obtain the file name and extension.</span></span></param>
        <summary><span data-ttu-id="de775-350">返回指定路径字符串的文件名和扩展名。</span><span class="sxs-lookup"><span data-stu-id="de775-350">Returns the file name and extension of the specified path string.</span></span></summary>
        <returns><span data-ttu-id="de775-351"><paramref name="path" /> 中最后的目录分隔符后的字符。</span><span class="sxs-lookup"><span data-stu-id="de775-351">The characters after the last directory separator character in <paramref name="path" />.</span></span> <span data-ttu-id="de775-352">如果 <paramref name="path" /> 的最后一个字符是目录或卷分隔符，则此方法返回 <see cref="F:System.String.Empty" />。</span><span class="sxs-lookup"><span data-stu-id="de775-352">If the last character of <paramref name="path" /> is a directory or volume separator character, this method returns <see cref="F:System.String.Empty" />.</span></span> <span data-ttu-id="de775-353">如果 <paramref name="path" /> 为 <see langword="null" />，则此方法返回 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="de775-353">If <paramref name="path" /> is <see langword="null" />, this method returns <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="de775-354">`null`如果文件路径为，则返回值为 `null` 。</span><span class="sxs-lookup"><span data-stu-id="de775-354">The returned value is `null` if the file path is `null`.</span></span>  
  
<span data-ttu-id="de775-355">用于确定文件名开头的分隔符是 <xref:System.IO.Path.DirectorySeparatorChar> 和 <xref:System.IO.Path.AltDirectorySeparatorChar> 。</span><span class="sxs-lookup"><span data-stu-id="de775-355">The separator characters used to determine the start of the file name are <xref:System.IO.Path.DirectorySeparatorChar> and <xref:System.IO.Path.AltDirectorySeparatorChar>.</span></span>  

<span data-ttu-id="de775-356">由于 *\\* 是 unix 上的合法文件名，因此 `GetFileName` 在基于 unix 的平台下运行时，不能从基于 windows 的路径（如 *C： \\ mydir \\ myfile.txt*）正确返回文件名，但 `GetFileName` 在基于 windows 的平台下运行可以正确地从基于 unix 的路径（如 */tmp/myfile.ext*）返回文件名，因此该方法的行为在 `GetFileName` 基于 unix 和基于 Windows 的平台上并不完全相同。</span><span class="sxs-lookup"><span data-stu-id="de775-356">Because *\\* is a legal file name on Unix, `GetFileName` running under Unix-based platforms cannot correctly return the file name from a Windows-based path like *C:\\mydir\\myfile.ext*, but `GetFileName` running under Windows-based platforms can correctly return the file name from a Unix-based path like */tmp/myfile.ext*, so the behavior of the `GetFileName` method is not strictly the same on Unix-based and Windows-based platforms.</span></span>

<span data-ttu-id="de775-357">有关常见 i/o 任务的列表，请参阅 [常见 I/o 任务](/dotnet/standard/io/common-i-o-tasks)。</span><span class="sxs-lookup"><span data-stu-id="de775-357">For a list of common I/O tasks, see [Common I/O Tasks](/dotnet/standard/io/common-i-o-tasks).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="de775-358">下面的示例演示了 `GetFileName` 在基于 Windows 的桌面平台上的方法的行为。</span><span class="sxs-lookup"><span data-stu-id="de775-358">The following example demonstrates the behavior of the `GetFileName` method on a Windows-based desktop platform.</span></span>  
  
 [!code-cpp[System.IO.Path Members#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.Path Members/CPP/pathmembers.cpp#5)]
 [!code-csharp[System.IO.Path Members#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Path Members/CS/pathmembers.cs#5)]
 [!code-vb[System.IO.Path Members#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Path Members/VB/pathmembers.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="de775-359">.NET Framework 和 .NET Core 版本早于2.1： <paramref name="path" /> 包含中定义的一个或多个无效字符 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 。</span><span class="sxs-lookup"><span data-stu-id="de775-359">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars" />.</span></span></exception>
        <related type="Article" href="/dotnet/standard/io/file-path-formats"><span data-ttu-id="de775-360">Windows 系统中的文件路径格式</span><span class="sxs-lookup"><span data-stu-id="de775-360">File path formats on Windows systems</span></span></related>
        <related type="Article" href="/dotnet/standard/io/"><span data-ttu-id="de775-361">文件和流 I/O</span><span class="sxs-lookup"><span data-stu-id="de775-361">File and Stream I/O</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file"><span data-ttu-id="de775-362">如何：从文件中读取文本</span><span class="sxs-lookup"><span data-stu-id="de775-362">How to: Read Text from a File</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file"><span data-ttu-id="de775-363">如何：将文本写入文件</span><span class="sxs-lookup"><span data-stu-id="de775-363">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetFileNameWithoutExtension">
      <MemberSignature Language="C#" Value="public static ReadOnlySpan&lt;char&gt; GetFileNameWithoutExtension (ReadOnlySpan&lt;char&gt; path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ReadOnlySpan`1&lt;char&gt; GetFileNameWithoutExtension(valuetype System.ReadOnlySpan`1&lt;char&gt; path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.GetFileNameWithoutExtension(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetFileNameWithoutExtension (path As ReadOnlySpan(Of Char)) As ReadOnlySpan(Of Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static ReadOnlySpan&lt;char&gt; GetFileNameWithoutExtension(ReadOnlySpan&lt;char&gt; path);" />
      <MemberSignature Language="F#" Value="static member GetFileNameWithoutExtension : ReadOnlySpan&lt;char&gt; -&gt; ReadOnlySpan&lt;char&gt;" Usage="System.IO.Path.GetFileNameWithoutExtension path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;System.Char&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="de775-364">一个只读范围，包含从中获取没有扩展名的文件名的路径。</span><span class="sxs-lookup"><span data-stu-id="de775-364">A read-only span that contains the path from which to obtain the file name without the extension.</span></span></param>
        <summary><span data-ttu-id="de775-365">返回文件名，该文件名不带由只读字符范围表示的文件路径扩展名。</span><span class="sxs-lookup"><span data-stu-id="de775-365">Returns the file name without the extension of a file path that is represented by a read-only character span.</span></span></summary>
        <returns><span data-ttu-id="de775-366">由 <see cref="M:System.IO.Path.GetFileName(System.ReadOnlySpan{System.Char})" /> 返回的只读范围中的字符，但不包括最后一个句点 (.) 及其后面的所有字符。</span><span class="sxs-lookup"><span data-stu-id="de775-366">The characters in the read-only span returned by <see cref="M:System.IO.Path.GetFileName(System.ReadOnlySpan{System.Char})" />, minus the last period (.) and all characters following it.</span></span></returns>
        <remarks>To be added.</remarks>
        <related type="Article" href="/dotnet/standard/io/file-path-formats"><span data-ttu-id="de775-367">Windows 系统中的文件路径格式</span><span class="sxs-lookup"><span data-stu-id="de775-367">File path formats on Windows systems</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetFileNameWithoutExtension">
      <MemberSignature Language="C#" Value="public static string GetFileNameWithoutExtension (string path);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetFileNameWithoutExtension(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.GetFileNameWithoutExtension(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetFileNameWithoutExtension (path As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ GetFileNameWithoutExtension(System::String ^ path);" />
      <MemberSignature Language="F#" Value="static member GetFileNameWithoutExtension : string -&gt; string" Usage="System.IO.Path.GetFileNameWithoutExtension path" />
      <MemberSignature Language="C#" Value="public static string? GetFileNameWithoutExtension (string? path);" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="de775-368">文件的路径。</span><span class="sxs-lookup"><span data-stu-id="de775-368">The path of the file.</span></span></param>
        <summary><span data-ttu-id="de775-369">返回不具有扩展名的指定路径字符串的文件名。</span><span class="sxs-lookup"><span data-stu-id="de775-369">Returns the file name of the specified path string without the extension.</span></span></summary>
        <returns><span data-ttu-id="de775-370">由 <see cref="M:System.IO.Path.GetFileName(System.ReadOnlySpan{System.Char})" /> 返回的字符串，但不包括最后的句点 (.) 以及之后的所有字符。</span><span class="sxs-lookup"><span data-stu-id="de775-370">The string returned by <see cref="M:System.IO.Path.GetFileName(System.ReadOnlySpan{System.Char})" />, minus the last period (.) and all characters following it.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="de775-371">此方法不会验证路径或文件名是否存在。</span><span class="sxs-lookup"><span data-stu-id="de775-371">This method does not verify that the path or file name exists.</span></span>  
  
 <span data-ttu-id="de775-372">有关常见 i/o 任务的列表，请参阅 [常见 I/o 任务](/dotnet/standard/io/common-i-o-tasks)。</span><span class="sxs-lookup"><span data-stu-id="de775-372">For a list of common I/O tasks, see [Common I/O Tasks](/dotnet/standard/io/common-i-o-tasks).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="de775-373">下面的示例演示方法的用法 `GetFileNameWithoutExtension` 。</span><span class="sxs-lookup"><span data-stu-id="de775-373">The following example demonstrates a use of the `GetFileNameWithoutExtension` method.</span></span>  
  
 [!code-cpp[System.IO.Path Members#6](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.Path Members/CPP/pathmembers.cpp#6)]
 [!code-csharp[System.IO.Path Members#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Path Members/CS/pathmembers.cs#6)]
 [!code-vb[System.IO.Path Members#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Path Members/VB/pathmembers.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="de775-374">.NET Framework 和 .NET Core 版本早于2.1： <paramref name="path" /> 包含中定义的一个或多个无效字符 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 。</span><span class="sxs-lookup"><span data-stu-id="de775-374">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars" />.</span></span></exception>
        <related type="Article" href="/dotnet/standard/io/file-path-formats"><span data-ttu-id="de775-375">Windows 系统中的文件路径格式</span><span class="sxs-lookup"><span data-stu-id="de775-375">File path formats on Windows systems</span></span></related>
        <related type="Article" href="/dotnet/standard/io/"><span data-ttu-id="de775-376">文件和流 I/O</span><span class="sxs-lookup"><span data-stu-id="de775-376">File and Stream I/O</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file"><span data-ttu-id="de775-377">如何：从文件中读取文本</span><span class="sxs-lookup"><span data-stu-id="de775-377">How to: Read Text from a File</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file"><span data-ttu-id="de775-378">如何：将文本写入文件</span><span class="sxs-lookup"><span data-stu-id="de775-378">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetFullPath">
      <MemberSignature Language="C#" Value="public static string GetFullPath (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetFullPath(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.GetFullPath(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetFullPath (path As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ GetFullPath(System::String ^ path);" />
      <MemberSignature Language="F#" Value="static member GetFullPath : string -&gt; string" Usage="System.IO.Path.GetFullPath path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="de775-379">要获取其绝对路径信息的文件或目录。</span><span class="sxs-lookup"><span data-stu-id="de775-379">The file or directory for which to obtain absolute path information.</span></span></param>
        <summary><span data-ttu-id="de775-380">返回指定路径字符串的绝对路径。</span><span class="sxs-lookup"><span data-stu-id="de775-380">Returns the absolute path for the specified path string.</span></span></summary>
        <returns><span data-ttu-id="de775-381"><paramref name="path" /> 的完全限定的位置，例如“C:\MyFile.txt”。</span><span class="sxs-lookup"><span data-stu-id="de775-381">The fully qualified location of <paramref name="path" />, such as "C:\MyFile.txt".</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
 <span data-ttu-id="de775-382">绝对路径包含定位系统中的文件或目录所需的所有信息。</span><span class="sxs-lookup"><span data-stu-id="de775-382">The absolute path includes all information required to locate a file or directory on a system.</span></span>  
  
 <span data-ttu-id="de775-383">指定的文件或目录 `path` 不存在。</span><span class="sxs-lookup"><span data-stu-id="de775-383">The file or directory specified by `path` is not required to exist.</span></span> <span data-ttu-id="de775-384">例如，如果 *c:\temp\newdir* 为当前目录，则 `GetFullPath` 对文件名调用（如 *test.txt* 将返回 *c:\temp\newdir\test.txt*。</span><span class="sxs-lookup"><span data-stu-id="de775-384">For example, if *c:\temp\newdir* is the current directory, calling `GetFullPath` on a file name such as *test.txt* returns *c:\temp\newdir\test.txt*.</span></span> <span data-ttu-id="de775-385">文件不需要存在。</span><span class="sxs-lookup"><span data-stu-id="de775-385">The file need not exist.</span></span>  

> [!IMPORTANT]
> <span data-ttu-id="de775-386">如果 `path` 是相对路径，则此重载返回可基于当前驱动器和当前目录的完全限定路径。</span><span class="sxs-lookup"><span data-stu-id="de775-386">If `path` is a relative path, this overload returns a fully qualified path that can be based on the current drive and current directory.</span></span> <span data-ttu-id="de775-387">当应用程序执行时，当前驱动器和当前目录可以随时更改。</span><span class="sxs-lookup"><span data-stu-id="de775-387">The current drive and current directory can change at any time as an application executes.</span></span> <span data-ttu-id="de775-388">因此，不能提前确定此重载返回的路径。</span><span class="sxs-lookup"><span data-stu-id="de775-388">As a result, the path returned by this overload cannot be determined in advance.</span></span> <span data-ttu-id="de775-389">若要返回确定性路径，请调用 <xref:System.IO.Path.GetFullPath(System.String,System.String)> 重载。</span><span class="sxs-lookup"><span data-stu-id="de775-389">To return a deterministic path, call the <xref:System.IO.Path.GetFullPath(System.String,System.String)> overload.</span></span> <span data-ttu-id="de775-390">还可以调用 <xref:System.IO.Path.IsPathFullyQualified%2A> 方法来确定路径是完全限定路径还是相对路径，从而确定是否 `GetFullPath` 需要调用。</span><span class="sxs-lookup"><span data-stu-id="de775-390">You can also call the <xref:System.IO.Path.IsPathFullyQualified%2A> method to determine whether a path is fully qualified or relative and therefore whether a call to `GetFullPath` is necessary.</span></span>

 <span data-ttu-id="de775-391">但是，如果 `path` 存在，则调用方必须具有获取的路径信息的权限 `path` 。</span><span class="sxs-lookup"><span data-stu-id="de775-391">However, if `path` does exist, the caller must have permission to obtain path information for `path`.</span></span> <span data-ttu-id="de775-392">请注意，与类的大多数成员不同 <xref:System.IO.Path> ，此方法访问文件系统。</span><span class="sxs-lookup"><span data-stu-id="de775-392">Note that unlike most members of the <xref:System.IO.Path> class, this method accesses the file system.</span></span>  
  
 <span data-ttu-id="de775-393">此方法使用当前目录和当前卷信息来完全限定 `path` 。</span><span class="sxs-lookup"><span data-stu-id="de775-393">This method uses the current directory and current volume information to fully qualify `path`.</span></span> <span data-ttu-id="de775-394">如果仅在中指定文件名，则 `path` 将 `GetFullPath` 返回当前目录的完全限定路径。</span><span class="sxs-lookup"><span data-stu-id="de775-394">If you specify a file name only in `path`, `GetFullPath` returns the fully qualified path of the current directory.</span></span>  
  
 <span data-ttu-id="de775-395">如果传入短文件名，则会将其扩展到长文件名。</span><span class="sxs-lookup"><span data-stu-id="de775-395">If you pass in a short file name, it is expanded to a long file name.</span></span>  
  
 <span data-ttu-id="de775-396">如果路径不包含有效字符，则无效，除非它包含一个或多个 "." 字符，后跟任意数量的空格;然后，它将被分析为 "." 或 "..."。</span><span class="sxs-lookup"><span data-stu-id="de775-396">If a path contains no significant characters, it is invalid unless it contains one or more "." characters followed by any number of spaces; then it will be parsed as either "." or "..".</span></span>  

<span data-ttu-id="de775-397">.NET Core 1.1 及更高版本和 .NET Framework 4.6.2 及更高版本还支持包含设备名称的路径，例如 " \\ ？ \c： \" 。</span><span class="sxs-lookup"><span data-stu-id="de775-397">.NET Core 1.1 and later versions and .NET Framework 4.6.2 and later versions also support paths that include device names, such as "\\?\C:\".</span></span>

<span data-ttu-id="de775-398">有关 Windows 上的文件路径格式的详细信息，请参阅 [windows 系统上的文件路径格式](/dotnet/standard/io/file-path-formats)。</span><span class="sxs-lookup"><span data-stu-id="de775-398">For more information on file path formats on Windows, see [File path formats on Windows systems](/dotnet/standard/io/file-path-formats).</span></span> <span data-ttu-id="de775-399">有关常见 i/o 任务的列表，请参阅 [常见 I/o 任务](/dotnet/standard/io/common-i-o-tasks)。</span><span class="sxs-lookup"><span data-stu-id="de775-399">For a list of common I/O tasks, see [Common I/O Tasks](/dotnet/standard/io/common-i-o-tasks).</span></span>
  
## Examples  
 <span data-ttu-id="de775-400">下面的示例演示 `GetFullPath` 基于 Windows 的桌面平台上的方法。</span><span class="sxs-lookup"><span data-stu-id="de775-400">The following example demonstrates the `GetFullPath` method on a Windows-based desktop platform.</span></span>  
  
 [!code-cpp[System.IO.Path Members#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.Path Members/CPP/pathmembers.cpp#7)]
 [!code-csharp[System.IO.Path Members#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Path Members/CS/pathmembers.cs#7)]
 [!code-vb[System.IO.Path Members#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Path Members/VB/pathmembers.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="de775-401"><paramref name="path" /> 是一个零长度字符串，仅包含空格或者包含 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 中已定义一个或多个无效字符。</span><span class="sxs-lookup"><span data-stu-id="de775-401"><paramref name="path" /> is a zero-length string, contains only white space, or contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars" />.</span></span>

<span data-ttu-id="de775-402">- 或 -</span><span class="sxs-lookup"><span data-stu-id="de775-402">-or-</span></span>

<span data-ttu-id="de775-403">系统无法检索绝对路径。</span><span class="sxs-lookup"><span data-stu-id="de775-403">The system could not retrieve the absolute path.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="de775-404">调用方没有所需的权限。</span><span class="sxs-lookup"><span data-stu-id="de775-404">The caller does not have the required permissions.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="de775-405"><paramref name="path" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="de775-405"><paramref name="path" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="de775-406"><paramref name="path" /> 包含一个冒号（“:”），此冒号不是卷标识符（如，“c:\\”）的一部分。</span><span class="sxs-lookup"><span data-stu-id="de775-406"><paramref name="path" /> contains a colon (":") that is not part of a volume identifier (for example, "c:\\").</span></span></exception>
        <exception cref="T:System.IO.PathTooLongException"><span data-ttu-id="de775-407">指定的路径和/或文件名超过了系统定义的最大长度。</span><span class="sxs-lookup"><span data-stu-id="de775-407">The specified path, file name, or both exceed the system-defined maximum length.</span></span></exception>
        <related type="Article" href="/dotnet/standard/io/file-path-formats"><span data-ttu-id="de775-408">Windows 系统中的文件路径格式</span><span class="sxs-lookup"><span data-stu-id="de775-408">File path formats on Windows systems</span></span></related>
        <related type="Article" href="/dotnet/standard/io/"><span data-ttu-id="de775-409">文件和流 I/O</span><span class="sxs-lookup"><span data-stu-id="de775-409">File and Stream I/O</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file"><span data-ttu-id="de775-410">如何：从文件中读取文本</span><span class="sxs-lookup"><span data-stu-id="de775-410">How to: Read Text from a File</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file"><span data-ttu-id="de775-411">如何：将文本写入文件</span><span class="sxs-lookup"><span data-stu-id="de775-411">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetFullPath">
      <MemberSignature Language="C#" Value="public static string GetFullPath (string path, string basePath);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetFullPath(string path, string basePath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.GetFullPath(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetFullPath (path As String, basePath As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ GetFullPath(System::String ^ path, System::String ^ basePath);" />
      <MemberSignature Language="F#" Value="static member GetFullPath : string * string -&gt; string" Usage="System.IO.Path.GetFullPath (path, basePath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="basePath" Type="System.String" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="de775-412">连接到 <paramref name="basePath" /> 的相对路径。</span><span class="sxs-lookup"><span data-stu-id="de775-412">A relative path to concatenate to <paramref name="basePath" />.</span></span></param>
        <param name="basePath"><span data-ttu-id="de775-413">完全限定路径的开头。</span><span class="sxs-lookup"><span data-stu-id="de775-413">The beginning of a fully qualified path.</span></span></param>
        <summary><span data-ttu-id="de775-414">从完全限定的基路径和相对路径返回绝对路径。</span><span class="sxs-lookup"><span data-stu-id="de775-414">Returns an absolute path from a relative path and a fully qualified base path.</span></span></summary>
        <returns><span data-ttu-id="de775-415">绝对路径。</span><span class="sxs-lookup"><span data-stu-id="de775-415">The absolute path.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="de775-416">如果 `path` 是一个空路径，则该方法返回 `basePath` 。</span><span class="sxs-lookup"><span data-stu-id="de775-416">If `path` is an empty path, the method returns `basePath`.</span></span> <span data-ttu-id="de775-417">如果 `path` 是完全限定的路径，则该方法将传递 `path` 给 <xref:System.IO.Path.GetFullPath(System.String)> 方法并返回结果。</span><span class="sxs-lookup"><span data-stu-id="de775-417">If `path` is a fully qualified path, the method passes `path` to the <xref:System.IO.Path.GetFullPath(System.String)> method and returns the result.</span></span>

<span data-ttu-id="de775-418">使用相对路径时，使用此方法可基于指定的卷和根目录返回确定性路径。</span><span class="sxs-lookup"><span data-stu-id="de775-418">Use this method to return a deterministic path based on a specified volume and rooted directory when you're using relative paths.</span></span> <span data-ttu-id="de775-419">根据当前驱动器目录使用预定义的 `basePath` （而不是一个），防止当前驱动器和目录中的意外更改引起的不需要的文件路径。</span><span class="sxs-lookup"><span data-stu-id="de775-419">Using a predefined `basePath` rather than one based on the current drive directory guards against unwanted file paths caused by unexpected changes in the current drive and directory.</span></span> 

## Examples

<span data-ttu-id="de775-420">下面的示例定义了一个变量， `basePath` 用于表示应用程序的当前目录。</span><span class="sxs-lookup"><span data-stu-id="de775-420">The following example defines a variable, `basePath`, to represent an application's current directory.</span></span> <span data-ttu-id="de775-421">然后，将其传递给 `GetFullPath` 方法以获取应用程序的数据目录的完全限定路径。</span><span class="sxs-lookup"><span data-stu-id="de775-421">It then passes it to the `GetFullPath` method to get a fully qualified path to the application's data directory.</span></span>

[!code-csharp[Path.GetFullPath(String,String)](~/samples/snippets/csharp/api/system.io/path/getfullpath/program.cs)] 
[!code-vb[Path.GetFullPath(String,String)](~/samples/snippets/visualbasic/api/system.io/path/getfullpath/program.vb)] 

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="de775-422"><paramref name="path" /> 或 <paramref name="basePath" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="de775-422"><paramref name="path" /> or <paramref name="basePath" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="de775-423"><paramref name="basePath" /> 不是完全限定的路径。</span><span class="sxs-lookup"><span data-stu-id="de775-423"><paramref name="basePath" /> is not a fully qualified path.</span></span>

<span data-ttu-id="de775-424">- 或 -</span><span class="sxs-lookup"><span data-stu-id="de775-424">-or-</span></span>

<span data-ttu-id="de775-425"><paramref name="path" /> 或 <paramref name="basePath" /> 包含一个或多个在 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 中定义的无效字符。</span><span class="sxs-lookup"><span data-stu-id="de775-425"><paramref name="path" /> or <paramref name="basePath" /> contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetInvalidFileNameChars">
      <MemberSignature Language="C#" Value="public static char[] GetInvalidFileNameChars ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char[] GetInvalidFileNameChars() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.GetInvalidFileNameChars" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetInvalidFileNameChars () As Char()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;char&gt; ^ GetInvalidFileNameChars();" />
      <MemberSignature Language="F#" Value="static member GetInvalidFileNameChars : unit -&gt; char[]" Usage="System.IO.Path.GetInvalidFileNameChars " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="de775-426">获取包含不允许在文件名中使用的字符的数组。</span><span class="sxs-lookup"><span data-stu-id="de775-426">Gets an array containing the characters that are not allowed in file names.</span></span></summary>
        <returns><span data-ttu-id="de775-427">包含不允许在文件名中使用的字符的数组。</span><span class="sxs-lookup"><span data-stu-id="de775-427">An array containing the characters that are not allowed in file names.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="de775-428">从此方法返回的数组不保证包含在文件和目录名称中无效的完整字符集。</span><span class="sxs-lookup"><span data-stu-id="de775-428">The array returned from this method is not guaranteed to contain the complete set of characters that are invalid in file and directory names.</span></span> <span data-ttu-id="de775-429">完整的无效字符集可能因文件系统而异。</span><span class="sxs-lookup"><span data-stu-id="de775-429">The full set of invalid characters can vary by file system.</span></span> <span data-ttu-id="de775-430">例如，在基于 Windows 的桌面平台上，无效路径字符可能包括 ASCII/Unicode 字符1到31、引号 ( ") 、小于 (\<), greater than (>) 、管道 (&#124;) 、backspace ( \b) 、null ( \ 0) 和 tab ( \t) 。</span><span class="sxs-lookup"><span data-stu-id="de775-430">For example, on Windows-based desktop platforms, invalid path characters might include ASCII/Unicode characters 1 through 31, as well as quote ("), less than (\<), greater than (>), pipe (&#124;), backspace (\b), null (\0) and tab (\t).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="de775-431">下面的示例演示了 <xref:System.IO.Path.GetInvalidFileNameChars%2A> <xref:System.IO.Path.GetInvalidPathChars%2A> 用于检索无效字符的方法和方法。</span><span class="sxs-lookup"><span data-stu-id="de775-431">The following example demonstrates the <xref:System.IO.Path.GetInvalidFileNameChars%2A> method and the <xref:System.IO.Path.GetInvalidPathChars%2A> method to retrieve invalid characters.</span></span>  
  
 [!code-cpp[IO.Path.GetInvalidFile-PathChars#1](~/samples/snippets/cpp/VS_Snippets_CLR/IO.Path.GetInvalidFile-PathChars/cpp/example.cpp#1)]
 [!code-csharp[IO.Path.GetInvalidFile-PathChars#1](~/samples/snippets/csharp/VS_Snippets_CLR/IO.Path.GetInvalidFile-PathChars/CS/example.cs#1)]
 [!code-vb[IO.Path.GetInvalidFile-PathChars#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/IO.Path.GetInvalidFile-PathChars/VB/example.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetInvalidPathChars">
      <MemberSignature Language="C#" Value="public static char[] GetInvalidPathChars ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char[] GetInvalidPathChars() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.GetInvalidPathChars" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetInvalidPathChars () As Char()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;char&gt; ^ GetInvalidPathChars();" />
      <MemberSignature Language="F#" Value="static member GetInvalidPathChars : unit -&gt; char[]" Usage="System.IO.Path.GetInvalidPathChars " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="de775-432">获取包含不允许在路径名中使用的字符的数组。</span><span class="sxs-lookup"><span data-stu-id="de775-432">Gets an array containing the characters that are not allowed in path names.</span></span></summary>
        <returns><span data-ttu-id="de775-433">包含不允许在路径名中使用的字符的数组。</span><span class="sxs-lookup"><span data-stu-id="de775-433">An array containing the characters that are not allowed in path names.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="de775-434">从此方法返回的数组不保证包含在文件和目录名称中无效的完整字符集。</span><span class="sxs-lookup"><span data-stu-id="de775-434">The array returned from this method is not guaranteed to contain the complete set of characters that are invalid in file and directory names.</span></span> <span data-ttu-id="de775-435">完整的无效字符集可能因文件系统而异。</span><span class="sxs-lookup"><span data-stu-id="de775-435">The full set of invalid characters can vary by file system.</span></span> <span data-ttu-id="de775-436">例如，在基于 Windows 的桌面平台上，无效路径字符可能包括 ASCII/Unicode 字符1到31以及管道 (&#124;) 和 null ( \ 0) 。</span><span class="sxs-lookup"><span data-stu-id="de775-436">For example, on Windows-based desktop platforms, invalid path characters might include ASCII/Unicode characters 1 through 31, as well as pipe (&#124;) and null (\0).</span></span>

## Examples  
 <span data-ttu-id="de775-437">下面的示例演示了 <xref:System.IO.Path.GetInvalidFileNameChars%2A> <xref:System.IO.Path.GetInvalidPathChars%2A> 用于检索无效字符的方法和方法。</span><span class="sxs-lookup"><span data-stu-id="de775-437">The following example demonstrates the <xref:System.IO.Path.GetInvalidFileNameChars%2A> method and the <xref:System.IO.Path.GetInvalidPathChars%2A> method to retrieve invalid characters.</span></span>  
  
 [!code-cpp[IO.Path.GetInvalidFile-PathChars#1](~/samples/snippets/cpp/VS_Snippets_CLR/IO.Path.GetInvalidFile-PathChars/cpp/example.cpp#1)]
 [!code-csharp[IO.Path.GetInvalidFile-PathChars#1](~/samples/snippets/csharp/VS_Snippets_CLR/IO.Path.GetInvalidFile-PathChars/CS/example.cs#1)]
 [!code-vb[IO.Path.GetInvalidFile-PathChars#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/IO.Path.GetInvalidFile-PathChars/VB/example.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPathRoot">
      <MemberSignature Language="C#" Value="public static ReadOnlySpan&lt;char&gt; GetPathRoot (ReadOnlySpan&lt;char&gt; path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ReadOnlySpan`1&lt;char&gt; GetPathRoot(valuetype System.ReadOnlySpan`1&lt;char&gt; path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.GetPathRoot(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetPathRoot (path As ReadOnlySpan(Of Char)) As ReadOnlySpan(Of Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static ReadOnlySpan&lt;char&gt; GetPathRoot(ReadOnlySpan&lt;char&gt; path);" />
      <MemberSignature Language="F#" Value="static member GetPathRoot : ReadOnlySpan&lt;char&gt; -&gt; ReadOnlySpan&lt;char&gt;" Usage="System.IO.Path.GetPathRoot path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;System.Char&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="de775-438">字符的只读范围，包含要从中获取根目录信息的路径。</span><span class="sxs-lookup"><span data-stu-id="de775-438">A read-only span of characters containing the path from which to obtain root directory information.</span></span></param>
        <summary><span data-ttu-id="de775-439">从指定字符范围包含的路径中获取根目录信息。</span><span class="sxs-lookup"><span data-stu-id="de775-439">Gets the root directory information from the path contained in the specified character span.</span></span></summary>
        <returns><span data-ttu-id="de775-440">字符的只读范围，包含 <paramref name="path" /> 的根目录。</span><span class="sxs-lookup"><span data-stu-id="de775-440">A read-only span of characters containing the root directory of <paramref name="path" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="de775-441">此方法不会验证路径或文件是否存在。</span><span class="sxs-lookup"><span data-stu-id="de775-441">This method does not verify that the path or file exists.</span></span>

<span data-ttu-id="de775-442">与字符串重载不同，此方法不会将目录分隔符标准化。</span><span class="sxs-lookup"><span data-stu-id="de775-442">Unlike the string overload, this method doesn't normalize directory separators.</span></span>

<span data-ttu-id="de775-443">如果为，则为 `ReadOnlySpan<System.Char>` "有效空"：</span><span class="sxs-lookup"><span data-stu-id="de775-443">A `ReadOnlySpan<System.Char>` is "effectively empty" if:</span></span>

- <span data-ttu-id="de775-444">在 Windows 中， <xref:System.ReadOnlySpan%601.IsEmpty?displayProperty=nameWithType> 对此范围内的字符的调用 `true` 将返回，或者其所有字符均为空格 ( "" ) 。</span><span class="sxs-lookup"><span data-stu-id="de775-444">In Windows, calling <xref:System.ReadOnlySpan%601.IsEmpty?displayProperty=nameWithType> on this span of characters returns `true`, or all its characters are spaces (' ').</span></span>
- <span data-ttu-id="de775-445">在 Unix 中， <xref:System.ReadOnlySpan%601.IsEmpty?displayProperty=nameWithType> 对此范围内的调用将返回 `true` 。</span><span class="sxs-lookup"><span data-stu-id="de775-445">In Unix, calling <xref:System.ReadOnlySpan%601.IsEmpty?displayProperty=nameWithType> on this span of characters returns `true`.</span></span>

<span data-ttu-id="de775-446">此方法返回的只读字符范围的可能模式如下所示：</span><span class="sxs-lookup"><span data-stu-id="de775-446">Possible patterns for the read-only character span returned by this method are as follows:</span></span>

- <span data-ttu-id="de775-447"><xref:System.ReadOnlySpan%601.Empty?displayProperty=nameWithType> (`path` 为 <xref:System.ReadOnlySpan%601.Empty?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="de775-447"><xref:System.ReadOnlySpan%601.Empty?displayProperty=nameWithType> (`path` was <xref:System.ReadOnlySpan%601.Empty?displayProperty=nameWithType>.</span></span>

- <span data-ttu-id="de775-448"><xref:System.ReadOnlySpan%601.Empty?displayProperty=nameWithType> (在 `path` 当前驱动器或卷) 上指定了相对路径。</span><span class="sxs-lookup"><span data-stu-id="de775-448"><xref:System.ReadOnlySpan%601.Empty?displayProperty=nameWithType> (`path` specified a relative path on the current drive or volume).</span></span>

- <span data-ttu-id="de775-449">"/" (Unix： `path` 在当前驱动器) 上指定了绝对路径。</span><span class="sxs-lookup"><span data-stu-id="de775-449">"/" (Unix: `path` specified an absolute path on the current drive).</span></span>

- <span data-ttu-id="de775-450">"X：" (Windows： `path` 指定驱动器上的相对路径，其中 *X* 表示驱动器或卷号) 。</span><span class="sxs-lookup"><span data-stu-id="de775-450">"X:" (Windows: `path` specified a relative path on a drive, where *X* represents a drive or volume letter).</span></span>

- <span data-ttu-id="de775-451">"X： \" (Windows： `path` 在给定驱动器上指定了绝对路径) 。</span><span class="sxs-lookup"><span data-stu-id="de775-451">"X:\" (Windows: `path` specified an absolute path on a given drive).</span></span>

- <span data-ttu-id="de775-452">" \\ \ComputerName\SharedFolder" (Windows： UNC 路径) 。</span><span class="sxs-lookup"><span data-stu-id="de775-452">"\\\ComputerName\SharedFolder" (Windows: a UNC path).</span></span>

- <span data-ttu-id="de775-453">" \\ \\ \? \C：" (Windows： DOS 设备路径，在 .net Core 1.1 及更高版本中受支持，并且在 .NET Framework 4.6.2 及更高版本) 中。</span><span class="sxs-lookup"><span data-stu-id="de775-453">"\\\\\?\C:" (Windows: a DOS device path, supported in .NET Core 1.1 and later versions, and in .NET Framework 4.6.2 and later versions).</span></span>
 
<span data-ttu-id="de775-454">有关 Windows 上的文件路径的详细信息，请参阅 [windows 系统上的文件路径格式](/dotnet/standard/io/file-path-formats)。</span><span class="sxs-lookup"><span data-stu-id="de775-454">For more information on file paths on Windows, see [File path formats on Windows systems](/dotnet/standard/io/file-path-formats).</span></span> <span data-ttu-id="de775-455">有关常见 i/o 任务的列表，请参阅 [常见 I/o 任务](/dotnet/standard/io/common-i-o-tasks)。</span><span class="sxs-lookup"><span data-stu-id="de775-455">For a list of common I/O tasks, see [Common I/O Tasks](/dotnet/standard/io/common-i-o-tasks).</span></span>


          ]]></format>
        </remarks>
        <related type="article" href="/dotnet/standard/io/file-path-formats"><span data-ttu-id="de775-456">Windows 系统中的文件路径格式</span><span class="sxs-lookup"><span data-stu-id="de775-456">File path formats on Windows systems</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetPathRoot">
      <MemberSignature Language="C#" Value="public static string GetPathRoot (string path);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetPathRoot(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.GetPathRoot(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetPathRoot (path As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ GetPathRoot(System::String ^ path);" />
      <MemberSignature Language="F#" Value="static member GetPathRoot : string -&gt; string" Usage="System.IO.Path.GetPathRoot path" />
      <MemberSignature Language="C#" Value="public static string? GetPathRoot (string? path);" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="de775-457">一个字符串，包含要从中获取根目录信息的路径。</span><span class="sxs-lookup"><span data-stu-id="de775-457">A string containing the path from which to obtain root directory information.</span></span></param>
        <summary><span data-ttu-id="de775-458">从指定字符串包含的路径中获取根目录信息。</span><span class="sxs-lookup"><span data-stu-id="de775-458">Gets the root directory information from the path contained in the specified string.</span></span></summary>
        <returns><span data-ttu-id="de775-459">如果为根路径，则为 <paramref name="path" /> 的根目录。</span><span class="sxs-lookup"><span data-stu-id="de775-459">The root directory of <paramref name="path" /> if it is rooted.</span></span>

<span data-ttu-id="de775-460">- 或 -</span><span class="sxs-lookup"><span data-stu-id="de775-460">-or-</span></span> 
<span data-ttu-id="de775-461">如果 <paramref name="path" /> 不包含根目录信息，则为 <see cref="F:System.String.Empty" />。</span><span class="sxs-lookup"><span data-stu-id="de775-461"><see cref="F:System.String.Empty" /> if <paramref name="path" /> does not contain root directory information.</span></span>

<span data-ttu-id="de775-462">- 或 -</span><span class="sxs-lookup"><span data-stu-id="de775-462">-or-</span></span> 
<span data-ttu-id="de775-463">如果 <paramref name="path" /> 为 <see langword="null" /> 或实际上为空，则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="de775-463"><see langword="null" /> if <paramref name="path" /> is <see langword="null" /> or is effectively empty.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="de775-464">此方法不会验证路径或文件是否存在。</span><span class="sxs-lookup"><span data-stu-id="de775-464">This method does not verify that the path or file exists.</span></span>

<span data-ttu-id="de775-465">此方法将规范化目录分隔符。</span><span class="sxs-lookup"><span data-stu-id="de775-465">This method will normalize directory separators.</span></span>

<span data-ttu-id="de775-466">如果是以下情况，则字符串为 "有效空"：</span><span class="sxs-lookup"><span data-stu-id="de775-466">A string is "effectively empty" if:</span></span>

- <span data-ttu-id="de775-467">在 Windows 中， `IsEmpty` 对此字符串的调用 `true` 将返回，或者其所有字符均为空格 ( "" ) 。</span><span class="sxs-lookup"><span data-stu-id="de775-467">In Windows, calling `IsEmpty` on this string returns `true`, or all its characters are spaces (' ').</span></span>
- <span data-ttu-id="de775-468">在 Unix 中， <xref:System.String.IsNullOrEmpty%2A> 对此字符串调用将返回 `true` 。</span><span class="sxs-lookup"><span data-stu-id="de775-468">In Unix, calling <xref:System.String.IsNullOrEmpty%2A> on this string returns `true`.</span></span>

<span data-ttu-id="de775-469">此方法返回的字符串的可能模式如下所示：</span><span class="sxs-lookup"><span data-stu-id="de775-469">Possible patterns for the string returned by this method are as follows:</span></span>

- <span data-ttu-id="de775-470">`null` (为 `path` null 或) 为空字符串。</span><span class="sxs-lookup"><span data-stu-id="de775-470">`null` (`path` was null or an empty string).</span></span>

- <span data-ttu-id="de775-471"> (在 `path` 当前驱动器或卷) 上指定了相对路径，则为空字符串。</span><span class="sxs-lookup"><span data-stu-id="de775-471">An empty string (`path` specified a relative path on the current drive or volume).</span></span>

- <span data-ttu-id="de775-472">"/" (Unix： `path` 在当前驱动器) 上指定了绝对路径。</span><span class="sxs-lookup"><span data-stu-id="de775-472">"/" (Unix: `path` specified an absolute path on the current drive).</span></span>

- <span data-ttu-id="de775-473">"X：" (Windows： `path` 指定驱动器上的相对路径，其中 *X* 表示驱动器或卷号) 。</span><span class="sxs-lookup"><span data-stu-id="de775-473">"X:" (Windows: `path` specified a relative path on a drive, where *X* represents a drive or volume letter).</span></span>

- <span data-ttu-id="de775-474">"X： \" (Windows： `path` 在给定驱动器上指定了绝对路径) 。</span><span class="sxs-lookup"><span data-stu-id="de775-474">"X:\" (Windows: `path` specified an absolute path on a given drive).</span></span>

- <span data-ttu-id="de775-475">" \\ \ComputerName\SharedFolder" (Windows： UNC 路径) 。</span><span class="sxs-lookup"><span data-stu-id="de775-475">"\\\ComputerName\SharedFolder" (Windows: a UNC path).</span></span>

- <span data-ttu-id="de775-476">" \\ \\ \? \C：" (Windows： DOS 设备路径，在 .net Core 1.1 及更高版本中受支持，并且在 .NET Framework 4.6.2 及更高版本) 中。</span><span class="sxs-lookup"><span data-stu-id="de775-476">"\\\\\?\C:" (Windows: a DOS device path, supported in .NET Core 1.1 and later versions, and in .NET Framework 4.6.2 and later versions).</span></span>
 
<span data-ttu-id="de775-477">有关 Windows 上的文件路径的详细信息，请参阅 [windows 系统上的文件路径格式](/dotnet/standard/io/file-path-formats)。</span><span class="sxs-lookup"><span data-stu-id="de775-477">For more information on file paths on Windows, see [File path formats on Windows systems](/dotnet/standard/io/file-path-formats).</span></span> <span data-ttu-id="de775-478">有关常见 i/o 任务的列表，请参阅 [常见 I/o 任务](/dotnet/standard/io/common-i-o-tasks)。</span><span class="sxs-lookup"><span data-stu-id="de775-478">For a list of common I/O tasks, see [Common I/O Tasks](/dotnet/standard/io/common-i-o-tasks).</span></span>

## Examples
<span data-ttu-id="de775-479">下面的示例演示方法的用法 `GetPathRoot` 。</span><span class="sxs-lookup"><span data-stu-id="de775-479">The following example demonstrates a use of the `GetPathRoot` method.</span></span>

[!code-cpp[System.IO.Path Members#8](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.Path Members/CPP/pathmembers.cpp#8)]
[!code-csharp[System.IO.Path Members#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Path Members/CS/pathmembers.cs#8)]
[!code-vb[System.IO.Path Members#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Path Members/VB/pathmembers.vb#8)]

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="de775-480">.NET Framework 和 .NET Core 版本早于2.1： <paramref name="path" /> 包含中定义的一个或多个无效字符 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 。</span><span class="sxs-lookup"><span data-stu-id="de775-480">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars" />.</span></span>

<span data-ttu-id="de775-481">- 或 -</span><span class="sxs-lookup"><span data-stu-id="de775-481">-or-</span></span>

<span data-ttu-id="de775-482">仅限 .NET Framework：<see cref="F:System.String.Empty" /> 已传递给 <paramref name="path" />。</span><span class="sxs-lookup"><span data-stu-id="de775-482">.NET Framework only: <see cref="F:System.String.Empty" /> was passed to <paramref name="path" />.</span></span></exception>
        <related type="Article" href="/dotnet/standard/io/file-path-formats"><span data-ttu-id="de775-483">Windows 系统中的文件路径格式</span><span class="sxs-lookup"><span data-stu-id="de775-483">File path formats on Windows systems</span></span></related>
        <related type="Article" href="/dotnet/standard/io/"><span data-ttu-id="de775-484">文件和流 I/O</span><span class="sxs-lookup"><span data-stu-id="de775-484">File and Stream I/O</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file"><span data-ttu-id="de775-485">如何：从文件中读取文本</span><span class="sxs-lookup"><span data-stu-id="de775-485">How to: Read Text from a File</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file"><span data-ttu-id="de775-486">如何：将文本写入文件</span><span class="sxs-lookup"><span data-stu-id="de775-486">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetRandomFileName">
      <MemberSignature Language="C#" Value="public static string GetRandomFileName ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetRandomFileName() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.GetRandomFileName" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetRandomFileName () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ GetRandomFileName();" />
      <MemberSignature Language="F#" Value="static member GetRandomFileName : unit -&gt; string" Usage="System.IO.Path.GetRandomFileName " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="de775-487">返回随机文件夹名或文件名。</span><span class="sxs-lookup"><span data-stu-id="de775-487">Returns a random folder name or file name.</span></span></summary>
        <returns><span data-ttu-id="de775-488">随机文件夹名或文件名。</span><span class="sxs-lookup"><span data-stu-id="de775-488">A random folder name or file name.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="de775-489">与不同 <xref:System.IO.Path.GetTempFileName%2A> ，不 <xref:System.IO.Path.GetRandomFileName%2A> 创建文件。</span><span class="sxs-lookup"><span data-stu-id="de775-489">Unlike <xref:System.IO.Path.GetTempFileName%2A>, <xref:System.IO.Path.GetRandomFileName%2A> does not create a file.</span></span>
   
  
## Examples  
 <span data-ttu-id="de775-490">下面的示例显示了方法的输出 <xref:System.IO.Path.GetRandomFileName%2A> 。</span><span class="sxs-lookup"><span data-stu-id="de775-490">The following example show output from the <xref:System.IO.Path.GetRandomFileName%2A> method.</span></span>  
  
 [!code-csharp[System.IO.Path Members#20](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Path Members/CS/pathmembers20.cs#20)]
 [!code-vb[System.IO.Path Members#20](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Path Members/VB/pathmembers20.vb#20)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRelativePath">
      <MemberSignature Language="C#" Value="public static string GetRelativePath (string relativeTo, string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetRelativePath(string relativeTo, string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.GetRelativePath(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetRelativePath (relativeTo As String, path As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ GetRelativePath(System::String ^ relativeTo, System::String ^ path);" />
      <MemberSignature Language="F#" Value="static member GetRelativePath : string * string -&gt; string" Usage="System.IO.Path.GetRelativePath (relativeTo, path)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="relativeTo" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="path" Type="System.String" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="relativeTo"><span data-ttu-id="de775-491">相对于结果的源路径。</span><span class="sxs-lookup"><span data-stu-id="de775-491">The source path the result should be relative to.</span></span> <span data-ttu-id="de775-492">此路径始终被视为目录。</span><span class="sxs-lookup"><span data-stu-id="de775-492">This path is always considered to be a directory.</span></span></param>
        <param name="path"><span data-ttu-id="de775-493">目标路径。</span><span class="sxs-lookup"><span data-stu-id="de775-493">The destination path.</span></span></param>
        <summary><span data-ttu-id="de775-494">返回从一个路径到另一个路径的相对路径。</span><span class="sxs-lookup"><span data-stu-id="de775-494">Returns a relative path from one path to another.</span></span></summary>
        <returns><span data-ttu-id="de775-495">相对路径，如果路径不共享同一根，则为 <paramref name="path" />。</span><span class="sxs-lookup"><span data-stu-id="de775-495">The relative path, or <paramref name="path" /> if the paths don't share the same root.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  

<span data-ttu-id="de775-496">在计算差之前，可以通过调用方法解析路径 <xref:System.IO.Path.GetFullPath%2A> 。</span><span class="sxs-lookup"><span data-stu-id="de775-496">Paths are resolved by calling the <xref:System.IO.Path.GetFullPath%2A> method before calculating the difference.</span></span> <span data-ttu-id="de775-497">方法使用适用于 Windows 的当前平台 (<xref:System.StringComparison.OrdinalIgnoreCase?displayProperty=nameWithType> 和 <xref:System.StringComparison.Ordinal?displayProperty=nameWithType> 适用于 Linux 的 MacOs 的默认文件路径比较。</span><span class="sxs-lookup"><span data-stu-id="de775-497">The method uses the default file path comparison for the current platform (<xref:System.StringComparison.OrdinalIgnoreCase?displayProperty=nameWithType> for Windows and MacOs, <xref:System.StringComparison.Ordinal?displayProperty=nameWithType> for Linux.</span></span> 

         ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="de775-498"><paramref name="relativeTo" /> 或 <paramref name="path" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="de775-498"><paramref name="relativeTo" /> or <paramref name="path" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="de775-499"><paramref name="relativeTo" /> 或 <paramref name="path" /> 实际上为空。</span><span class="sxs-lookup"><span data-stu-id="de775-499"><paramref name="relativeTo" /> or <paramref name="path" /> is effectively empty.</span></span></exception>
        <related type="article" href="/dotnet/standard/io/file-path-formats"><span data-ttu-id="de775-500">Windows 系统中的文件路径格式</span><span class="sxs-lookup"><span data-stu-id="de775-500">File path formats on Windows systems</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetTempFileName">
      <MemberSignature Language="C#" Value="public static string GetTempFileName ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetTempFileName() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.GetTempFileName" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetTempFileName () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ GetTempFileName();" />
      <MemberSignature Language="F#" Value="static member GetTempFileName : unit -&gt; string" Usage="System.IO.Path.GetTempFileName " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="de775-501">在磁盘上创建一个唯一命名的零字节临时文件，并返回该文件的完整路径。</span><span class="sxs-lookup"><span data-stu-id="de775-501">Creates a uniquely named, zero-byte temporary file on disk and returns the full path of that file.</span></span></summary>
        <returns><span data-ttu-id="de775-502">临时文件的完整路径。</span><span class="sxs-lookup"><span data-stu-id="de775-502">The full path of the temporary file.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="de775-503">此方法创建一个文件扩展名为 .TMP 的临时文件。</span><span class="sxs-lookup"><span data-stu-id="de775-503">This method creates a temporary file with a .TMP file extension.</span></span> <span data-ttu-id="de775-504">该临时文件创建于用户的临时文件夹中，该文件夹是 <xref:System.IO.Path.GetTempPath%2A> 方法返回的路径。</span><span class="sxs-lookup"><span data-stu-id="de775-504">The temporary file is created within the user's temporary folder, which is the path returned by the <xref:System.IO.Path.GetTempPath%2A> method.</span></span>  
  
 <span data-ttu-id="de775-505"><xref:System.IO.Path.GetTempFileName%2A> <xref:System.IO.IOException> 如果用于创建超过65535个文件而不删除以前的临时文件，该方法将引发。</span><span class="sxs-lookup"><span data-stu-id="de775-505">The <xref:System.IO.Path.GetTempFileName%2A> method will raise an <xref:System.IO.IOException> if it is used to create more than 65535 files without deleting previous temporary files.</span></span>  
  
 <span data-ttu-id="de775-506"><xref:System.IO.Path.GetTempFileName%2A> <xref:System.IO.IOException> 如果没有可用的唯一临时文件名，则方法将引发。</span><span class="sxs-lookup"><span data-stu-id="de775-506">The <xref:System.IO.Path.GetTempFileName%2A> method will raise an <xref:System.IO.IOException> if no unique temporary file name is available.</span></span> <span data-ttu-id="de775-507">若要解决此错误，请删除所有不需要的临时文件。</span><span class="sxs-lookup"><span data-stu-id="de775-507">To resolve this error, delete all unneeded temporary files.</span></span>  
  
 <span data-ttu-id="de775-508">有关常见 i/o 任务的列表，请参阅 [常见 I/o 任务](/dotnet/standard/io/common-i-o-tasks)。</span><span class="sxs-lookup"><span data-stu-id="de775-508">For a list of common I/O tasks, see [Common I/O Tasks](/dotnet/standard/io/common-i-o-tasks).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="de775-509">发生 I/O 错误，例如没有提供唯一的临时文件名。</span><span class="sxs-lookup"><span data-stu-id="de775-509">An I/O error occurs, such as no unique temporary file name is available.</span></span>  
  
<span data-ttu-id="de775-510">- 或 -</span><span class="sxs-lookup"><span data-stu-id="de775-510">-or-</span></span>
  
 <span data-ttu-id="de775-511">此方法无法创建临时文件。</span><span class="sxs-lookup"><span data-stu-id="de775-511">This method was unable to create a temporary file.</span></span></exception>
        <related type="Article" href="/dotnet/standard/io/"><span data-ttu-id="de775-512">文件和流 I/O</span><span class="sxs-lookup"><span data-stu-id="de775-512">File and Stream I/O</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file"><span data-ttu-id="de775-513">如何：从文件中读取文本</span><span class="sxs-lookup"><span data-stu-id="de775-513">How to: Read Text from a File</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file"><span data-ttu-id="de775-514">如何：将文本写入文件</span><span class="sxs-lookup"><span data-stu-id="de775-514">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetTempPath">
      <MemberSignature Language="C#" Value="public static string GetTempPath ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetTempPath() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.GetTempPath" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetTempPath () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ GetTempPath();" />
      <MemberSignature Language="F#" Value="static member GetTempPath : unit -&gt; string" Usage="System.IO.Path.GetTempPath " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="de775-515">返回当前用户的临时文件夹的路径。</span><span class="sxs-lookup"><span data-stu-id="de775-515">Returns the path of the current user's temporary folder.</span></span></summary>
        <returns><span data-ttu-id="de775-516">临时文件夹的路径，以反斜杠结尾。</span><span class="sxs-lookup"><span data-stu-id="de775-516">The path to the temporary folder, ending with a backslash.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="de775-517">此方法按以下顺序检查环境变量是否存在，并使用找到的第一个路径：</span><span class="sxs-lookup"><span data-stu-id="de775-517">This method checks for the existence of environment variables in the following order and uses the first path found:</span></span>  

# <a name="windows"></a>[<span data-ttu-id="de775-518">Windows</span><span class="sxs-lookup"><span data-stu-id="de775-518">Windows</span></span>](#tab/windows)

1.  <span data-ttu-id="de775-519">TMP 环境变量指定的路径。</span><span class="sxs-lookup"><span data-stu-id="de775-519">The path specified by the TMP environment variable.</span></span>   
  
2.  <span data-ttu-id="de775-520">由 TEMP 环境变量指定的路径。</span><span class="sxs-lookup"><span data-stu-id="de775-520">The path specified by the TEMP environment variable.</span></span>  
  
3.  <span data-ttu-id="de775-521">USERPROFILE 环境变量指定的路径。</span><span class="sxs-lookup"><span data-stu-id="de775-521">The path specified by the USERPROFILE environment variable.</span></span>  
  
4.  <span data-ttu-id="de775-522">Windows 目录。</span><span class="sxs-lookup"><span data-stu-id="de775-522">The Windows directory.</span></span>  

# <a name="linux"></a>[<span data-ttu-id="de775-523">Linux</span><span class="sxs-lookup"><span data-stu-id="de775-523">Linux</span></span>](#tab/linux)

1. <span data-ttu-id="de775-524">TMPDIR 环境变量指定的路径。</span><span class="sxs-lookup"><span data-stu-id="de775-524">The path specified by the TMPDIR environment variable.</span></span> <span data-ttu-id="de775-525">如果未在环境变量中指定路径 `TMPDIR` ，则使用默认路径 `/tmp/` 。</span><span class="sxs-lookup"><span data-stu-id="de775-525">If the path is not specified in the `TMPDIR` environment variable, the default path `/tmp/` is used.</span></span>   

---

## Examples  
 <span data-ttu-id="de775-526">下面的代码演示如何调用 <xref:System.IO.Path.GetTempPath%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="de775-526">The following code shows how to call the <xref:System.IO.Path.GetTempPath%2A> method.</span></span>  
  
```vb  
Dim result As String = Path.GetTempPath()  
Console.WriteLine(result)  
```  
  
```csharp  
string result = Path.GetTempPath();  
Console.WriteLine(result);  
```  
  
 <span data-ttu-id="de775-527">此示例生成与下面类似的输出。</span><span class="sxs-lookup"><span data-stu-id="de775-527">This example produces output similar to the following.</span></span>  
  
```  
C:\Users\UserName\AppData\Local\Temp\  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="de775-528">调用方没有所需的权限。</span><span class="sxs-lookup"><span data-stu-id="de775-528">The caller does not have the required permissions.</span></span></exception>
        <related type="Article" href="/dotnet/standard/io/"><span data-ttu-id="de775-529">文件和流 I/O</span><span class="sxs-lookup"><span data-stu-id="de775-529">File and Stream I/O</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file"><span data-ttu-id="de775-530">如何：从文件中读取文本</span><span class="sxs-lookup"><span data-stu-id="de775-530">How to: Read Text from a File</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file"><span data-ttu-id="de775-531">如何：将文本写入文件</span><span class="sxs-lookup"><span data-stu-id="de775-531">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="HasExtension">
      <MemberSignature Language="C#" Value="public static bool HasExtension (ReadOnlySpan&lt;char&gt; path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool HasExtension(valuetype System.ReadOnlySpan`1&lt;char&gt; path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.HasExtension(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function HasExtension (path As ReadOnlySpan(Of Char)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool HasExtension(ReadOnlySpan&lt;char&gt; path);" />
      <MemberSignature Language="F#" Value="static member HasExtension : ReadOnlySpan&lt;char&gt; -&gt; bool" Usage="System.IO.Path.HasExtension path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="de775-532">用于搜索扩展名的路径。</span><span class="sxs-lookup"><span data-stu-id="de775-532">The path to search for an extension.</span></span></param>
        <summary><span data-ttu-id="de775-533">确定指定字符范围表示的路径是否包含文件扩展名。</span><span class="sxs-lookup"><span data-stu-id="de775-533">Determines whether the path represented by the specified character span includes a file name extension.</span></span></summary>
        <returns><span data-ttu-id="de775-534">如果路径中最后一个目录分隔符或卷分隔符之后的字符包括句点 (.)，并且后面跟有一个或多个字符，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="de775-534"><see langword="true" /> if the characters that follow the last directory separator character or volume separator in the path include a period (".") followed by one or more characters; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  

<span data-ttu-id="de775-535">中的尾随句点 `path` 不被视为扩展。</span><span class="sxs-lookup"><span data-stu-id="de775-535">A trailing period in `path` is not considered an extension.</span></span>

         ]]></format>
        </remarks>
        <related type="article" href="/dotnet/standard/io/file-path-formats"><span data-ttu-id="de775-536">Windows 系统中的文件路径格式</span><span class="sxs-lookup"><span data-stu-id="de775-536">File path formats on Windows systems</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="HasExtension">
      <MemberSignature Language="C#" Value="public static bool HasExtension (string path);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool HasExtension(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.HasExtension(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function HasExtension (path As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool HasExtension(System::String ^ path);" />
      <MemberSignature Language="F#" Value="static member HasExtension : string -&gt; bool" Usage="System.IO.Path.HasExtension path" />
      <MemberSignature Language="C#" Value="public static bool HasExtension (string? path);" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="de775-537">用于搜索扩展名的路径。</span><span class="sxs-lookup"><span data-stu-id="de775-537">The path to search for an extension.</span></span></param>
        <summary><span data-ttu-id="de775-538">确定路径是否包括文件扩展名。</span><span class="sxs-lookup"><span data-stu-id="de775-538">Determines whether a path includes a file name extension.</span></span></summary>
        <returns><span data-ttu-id="de775-539">如果路径中最后一个目录分隔符（\\\ 或 /）或卷分隔符 (:) 之后的字符包括句点 (.)，并且后面跟有一个或多个字符，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="de775-539"><see langword="true" /> if the characters that follow the last directory separator (\\\ or /) or volume separator (:) in the path include a period (.) followed by one or more characters; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="de775-540">从的结尾开始 `path` ，此方法会搜索一个句点 (。 ) 后跟至少一个字符。</span><span class="sxs-lookup"><span data-stu-id="de775-540">Starting from the end of `path`, this method searches for a period (.) followed by at least one character.</span></span> <span data-ttu-id="de775-541">如果在 <xref:System.IO.Path.DirectorySeparatorChar> 遇到、或字符之前找到此模式 <xref:System.IO.Path.AltDirectorySeparatorChar> ，则 <xref:System.IO.Path.VolumeSeparatorChar> 此方法返回 `true` 。</span><span class="sxs-lookup"><span data-stu-id="de775-541">If this pattern is found before a <xref:System.IO.Path.DirectorySeparatorChar>, <xref:System.IO.Path.AltDirectorySeparatorChar>, or <xref:System.IO.Path.VolumeSeparatorChar> character is encountered, this method returns `true`.</span></span>  
  
 <span data-ttu-id="de775-542">有关常见 i/o 任务的列表，请参阅 [常见 I/o 任务](/dotnet/standard/io/common-i-o-tasks)。</span><span class="sxs-lookup"><span data-stu-id="de775-542">For a list of common I/O tasks, see [Common I/O Tasks](/dotnet/standard/io/common-i-o-tasks).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="de775-543">下面的示例演示 `HasExtension` 方法的用法。</span><span class="sxs-lookup"><span data-stu-id="de775-543">The following example demonstrates the use of the `HasExtension` method.</span></span>  
  
 [!code-cpp[System.IO.Path Members#11](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.Path Members/CPP/pathmembers.cpp#11)]
 [!code-csharp[System.IO.Path Members#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Path Members/CS/pathmembers.cs#11)]
 [!code-vb[System.IO.Path Members#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Path Members/VB/pathmembers.vb#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="de775-544">.NET Framework 和 .NET Core 版本早于2.1： <paramref name="path" /> 包含中定义的一个或多个无效字符 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 。</span><span class="sxs-lookup"><span data-stu-id="de775-544">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars" />.</span></span></exception>
        <related type="article" href="/dotnet/standard/io/file-path-formats"><span data-ttu-id="de775-545">Windows 系统中的文件路径格式</span><span class="sxs-lookup"><span data-stu-id="de775-545">File path formats on Windows systems</span></span></related>
        <related type="Article" href="/dotnet/standard/io/"><span data-ttu-id="de775-546">文件和流 I/O</span><span class="sxs-lookup"><span data-stu-id="de775-546">File and Stream I/O</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file"><span data-ttu-id="de775-547">如何：从文件中读取文本</span><span class="sxs-lookup"><span data-stu-id="de775-547">How to: Read Text from a File</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file"><span data-ttu-id="de775-548">如何：将文本写入文件</span><span class="sxs-lookup"><span data-stu-id="de775-548">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="InvalidPathChars">
      <MemberSignature Language="C#" Value="public static readonly char[] InvalidPathChars;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly char[] InvalidPathChars" />
      <MemberSignature Language="DocId" Value="F:System.IO.Path.InvalidPathChars" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly InvalidPathChars As Char() " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly cli::array &lt;char&gt; ^ InvalidPathChars;" />
      <MemberSignature Language="F#" Value=" staticval mutable InvalidPathChars : char[]" Usage="System.IO.Path.InvalidPathChars" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1">
          <AttributeName Language="C#">[System.Obsolete("Please use GetInvalidPathChars or GetInvalidFileNameChars instead.")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("Please use GetInvalidPathChars or GetInvalidFileNameChars instead.")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Obsolete("see GetInvalidPathChars and GetInvalidFileNameChars methods.")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("see GetInvalidPathChars and GetInvalidFileNameChars methods.")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Char[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="de775-549">提供平台特定的字符数组，这些字符不能在传递到 <see cref="T:System.IO.Path" /> 类的成员的路径字符串自变量中指定。</span><span class="sxs-lookup"><span data-stu-id="de775-549">Provides a platform-specific array of characters that cannot be specified in path string arguments passed to members of the <see cref="T:System.IO.Path" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="de775-550">从此方法返回的数组不保证包含在文件和目录名称中无效的完整字符集。</span><span class="sxs-lookup"><span data-stu-id="de775-550">The array returned from this method is not guaranteed to contain the complete set of characters that are invalid in file and directory names.</span></span> <span data-ttu-id="de775-551">完整的无效字符集可能因文件系统而异。</span><span class="sxs-lookup"><span data-stu-id="de775-551">The full set of invalid characters can vary by file system.</span></span> <span data-ttu-id="de775-552">请参阅 " <xref:System.IO.Path.GetInvalidPathChars> 备注" 以了解此字段返回的字符集。</span><span class="sxs-lookup"><span data-stu-id="de775-552">Refer to the <xref:System.IO.Path.GetInvalidPathChars> remarks to learn what the set of characters returned by this field is.</span></span>
  
> [!CAUTION]
>  <span data-ttu-id="de775-553"><xref:System.IO.Path.InvalidPathChars>如果你认为你的代码可能在不受信任的代码所在的应用程序域中执行，请不要使用。</span><span class="sxs-lookup"><span data-stu-id="de775-553">Do not use <xref:System.IO.Path.InvalidPathChars> if you think your code might execute in the same application domain as untrusted code.</span></span> <span data-ttu-id="de775-554"><xref:System.IO.Path.InvalidPathChars> 是一个数组，因此可以覆盖其元素。</span><span class="sxs-lookup"><span data-stu-id="de775-554"><xref:System.IO.Path.InvalidPathChars> is an array, so its elements can be overwritten.</span></span> <span data-ttu-id="de775-555">如果不受信任的代码覆盖的元素 <xref:System.IO.Path.InvalidPathChars> ，则可能会导致你的代码以可利用的方式出现故障。</span><span class="sxs-lookup"><span data-stu-id="de775-555">If untrusted code overwrites elements of <xref:System.IO.Path.InvalidPathChars>, it might cause your code to malfunction in ways that could be exploited.</span></span>  

## Examples  
 <span data-ttu-id="de775-556">下面的示例演示属性的用法 `InvalidPathChars` 。</span><span class="sxs-lookup"><span data-stu-id="de775-556">The following example demonstrates the use of the `InvalidPathChars` property.</span></span>  
  
 [!code-cpp[System.IO.Path Members#13](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.Path Members/CPP/pathmembers.cpp#13)]
 [!code-csharp[System.IO.Path Members#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Path Members/CS/pathmembers.cs#13)]
 [!code-vb[System.IO.Path Members#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Path Members/VB/pathmembers.vb#13)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/standard/io/"><span data-ttu-id="de775-557">文件和流 I/O</span><span class="sxs-lookup"><span data-stu-id="de775-557">File and Stream I/O</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file"><span data-ttu-id="de775-558">如何：从文件中读取文本</span><span class="sxs-lookup"><span data-stu-id="de775-558">How to: Read Text from a File</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file"><span data-ttu-id="de775-559">如何：将文本写入文件</span><span class="sxs-lookup"><span data-stu-id="de775-559">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="IsPathFullyQualified">
      <Docs>
        <summary><span data-ttu-id="de775-560">返回一个值，指示文件路径是否完全限定。</span><span class="sxs-lookup"><span data-stu-id="de775-560">Returns a value that indicates whether a file path is fully qualified.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
 
## Remarks  

<span data-ttu-id="de775-561">方法的重载 `IsPathFullyQualified` 可处理同时使用和字符的路径 <xref:System.IO.Path.DirectorySeparatorChar> <xref:System.IO.Path.AltDirectorySeparatorChar> 。</span><span class="sxs-lookup"><span data-stu-id="de775-561">The overloads of the `IsPathFullyQualified` method handle paths that use both the <xref:System.IO.Path.DirectorySeparatorChar> and the <xref:System.IO.Path.AltDirectorySeparatorChar> characters.</span></span> <span data-ttu-id="de775-562">它不会对作为参数传递给它的路径执行任何验证。</span><span class="sxs-lookup"><span data-stu-id="de775-562">It does not perform any validation on the path that is passed to it as an argument.</span></span> <span data-ttu-id="de775-563">因此，Uri 被解释为相对路径，并返回 `false` 。</span><span class="sxs-lookup"><span data-stu-id="de775-563">As a result, URIs are interpreted as relative paths and return `false`.</span></span> 

<span data-ttu-id="de775-564">由方法) 指定的完全限定路径 (`IsPathFullyQualified` ， () 的方法所指示的根路径 <xref:System.IO.Path.IsPathRooted%2A> 。</span><span class="sxs-lookup"><span data-stu-id="de775-564">There is a difference between a fully qualified path (as indicated by the `IsPathFullyQualified` method) and a rooted path (as indicated by the <xref:System.IO.Path.IsPathRooted%2A> method).</span></span> <span data-ttu-id="de775-565">*完全限定的路径* 或 *绝对路径* 始终定义从特定驱动器或设备到目标文件或目录的准确路径，而不依赖于当前驱动器或当前目录。</span><span class="sxs-lookup"><span data-stu-id="de775-565">A *fully qualified path* or *absolute path* always defines an exact path from a particular drive or device to a target file or directory, and does not depend on the current drive or current directory.</span></span> <span data-ttu-id="de775-566">例如，在 Windows 系统上， *C：/users/user1/documents/reports/2019/一月/highlights.pdf* 定义从 C：驱动器的根目录到目标文件的绝对路径， *highlights.pdf*。</span><span class="sxs-lookup"><span data-stu-id="de775-566">For example, on Windows systems, *C:/users/user1/documents/reports/2019/january/highlights.pdf* defines an absolute path from the root of the C: drive to the target file, *highlights.pdf*.</span></span> <span data-ttu-id="de775-567">*根路径* 指定起始驱动器或根目录，但取决于当前目录 (如果它是指定驱动器的根路径) 或者当前驱动器 (（如果它是根目录) 的根驱动器）。</span><span class="sxs-lookup"><span data-stu-id="de775-567">A *rooted path* specifies either a starting drive or root directory, but depends on either the current directory (if it is rooted by a specified drive) or the current drive (if it is rooted by the root directory).</span></span> <span data-ttu-id="de775-568">下面的示例演示完全限定的路径和根路径之间的差异。</span><span class="sxs-lookup"><span data-stu-id="de775-568">The following example illustrates the difference between fully qualified paths and rooted paths.</span></span>

[!code-csharp[IsPathRooted](~/samples/snippets/csharp/api/system.IO/Path/IsPathRooted/program.cs)]
[!code-vb[IsPathRooted](~/samples/snippets/visualbasic/api/system.IO/Path/IsPathRooted/program.vb)]

         ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsPathFullyQualified">
      <MemberSignature Language="C#" Value="public static bool IsPathFullyQualified (ReadOnlySpan&lt;char&gt; path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsPathFullyQualified(valuetype System.ReadOnlySpan`1&lt;char&gt; path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.IsPathFullyQualified(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsPathFullyQualified (path As ReadOnlySpan(Of Char)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsPathFullyQualified(ReadOnlySpan&lt;char&gt; path);" />
      <MemberSignature Language="F#" Value="static member IsPathFullyQualified : ReadOnlySpan&lt;char&gt; -&gt; bool" Usage="System.IO.Path.IsPathFullyQualified path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="de775-569">文件路径。</span><span class="sxs-lookup"><span data-stu-id="de775-569">A file path.</span></span></param>
        <summary><span data-ttu-id="de775-570">返回一个值，该值指示由指定字符范围表示的文件路径是否固定到特定驱动器或 UNC 路径。</span><span class="sxs-lookup"><span data-stu-id="de775-570">Returns a value that indicates whether the file path represented by the specified character span is fixed to a specific drive or UNC path.</span></span></summary>
        <returns><span data-ttu-id="de775-571">如果路径固定到特定驱动器或 UNC 路径，为 <see langword="true" />；如果路径相对于当前驱动器或工作目录，则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="de775-571"><see langword="true" /> if the path is fixed to a specific drive or UNC path; <see langword="false" /> if the path is relative to the current drive or working directory.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  


         ]]></format>
        </remarks>
        <related type="article" href="/dotnet/standard/io/file-path-formats"><span data-ttu-id="de775-572">Windows 系统中的文件路径格式</span><span class="sxs-lookup"><span data-stu-id="de775-572">File path formats on Windows systems</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IsPathFullyQualified">
      <MemberSignature Language="C#" Value="public static bool IsPathFullyQualified (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsPathFullyQualified(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.IsPathFullyQualified(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsPathFullyQualified (path As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsPathFullyQualified(System::String ^ path);" />
      <MemberSignature Language="F#" Value="static member IsPathFullyQualified : string -&gt; bool" Usage="System.IO.Path.IsPathFullyQualified path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="de775-573">文件路径。</span><span class="sxs-lookup"><span data-stu-id="de775-573">A file path.</span></span></param>
        <summary><span data-ttu-id="de775-574">返回一个值，该值指示指定的文件路径是否固定到特定驱动器或 UNC 路径。</span><span class="sxs-lookup"><span data-stu-id="de775-574">Returns a value that indicates whether the specified file path is fixed to a specific drive or UNC path.</span></span></summary>
        <returns><span data-ttu-id="de775-575">如果路径固定到特定驱动器或 UNC 路径，为 <see langword="true" />；如果路径相对于当前驱动器或工作目录，则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="de775-575"><see langword="true" /> if the path is fixed to a specific drive or UNC path; <see langword="false" /> if the path is relative to the current drive or working directory.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="de775-576">此方法处理使用备用目录分隔符的路径。</span><span class="sxs-lookup"><span data-stu-id="de775-576">This method handles paths that use the alternate directory separator.</span></span> <span data-ttu-id="de775-577">通常，假设根路径 (<xref:System.IO.Path.IsPathRooted(System.String)>) 不是相对路径。</span><span class="sxs-lookup"><span data-stu-id="de775-577">It's a frequent mistake to assume that rooted paths (<xref:System.IO.Path.IsPathRooted(System.String)>) aren't relative.</span></span> <span data-ttu-id="de775-578">例如，"C:a" 是驱动器相关的，也就是说，它是针对 C： (根的当前目录进行解析，但相对) 。</span><span class="sxs-lookup"><span data-stu-id="de775-578">For example, "C:a" is drive relative, that is, it's resolved against the current directory for C: (rooted, but relative).</span></span> <span data-ttu-id="de775-579">"C:\a" 是根路径而不是相对路径，也就是说，当前目录不用于修改路径。</span><span class="sxs-lookup"><span data-stu-id="de775-579">"C:\a" is rooted and not relative, that is, the current directory isn't used to modify the path.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="de775-580"><paramref name="path" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="de775-580"><paramref name="path" /> is <see langword="null" />.</span></span></exception>
        <related type="article" href="/dotnet/standard/io/file-path-formats"><span data-ttu-id="de775-581">Windows 系统中的文件路径格式</span><span class="sxs-lookup"><span data-stu-id="de775-581">File path formats on Windows systems</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="IsPathRooted">
      <Docs>
        <summary><span data-ttu-id="de775-582">返回一个值，指示文件路径是否包含根。</span><span class="sxs-lookup"><span data-stu-id="de775-582">Returns a value that indicates whether a file path contains a root.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
 
## Remarks  

<span data-ttu-id="de775-583">**根路径** 是固定到特定驱动器或 UNIC 路径的文件路径;它与相对于当前驱动器或工作目录的路径相比较。</span><span class="sxs-lookup"><span data-stu-id="de775-583">A **rooted path** is file path that is fixed to a specific drive or UNIC path; it contrasts with a path that is relative to the current drive or working directory.</span></span> <span data-ttu-id="de775-584">例如，在 Windows 系统上，以反斜杠开头的根路径 (例如，"\Documents" ) 或驱动器号和冒号 (例如，"C:Documents" ) 。</span><span class="sxs-lookup"><span data-stu-id="de775-584">For example, on Windows systems, a rooted path begins with a backslash (for example, "\Documents") or a drive letter and colon (for example, "C:Documents").</span></span> 

<span data-ttu-id="de775-585">请注意，根路径可以是绝对的，也可以是完全限定的) 或相对路径 (。</span><span class="sxs-lookup"><span data-stu-id="de775-585">Note that rooted paths can be either absolute (that is, fully qualified) or relative.</span></span> <span data-ttu-id="de775-586">绝对根路径是从驱动器根目录到特定目录的完全限定路径。</span><span class="sxs-lookup"><span data-stu-id="de775-586">An absolute rooted path is a fully qualified path from the root of a drive to a specific directory.</span></span> <span data-ttu-id="de775-587">相对 root 路径指定驱动器，但将根据当前目录解析其完全限定路径。</span><span class="sxs-lookup"><span data-stu-id="de775-587">A relative rooted path specifies a drive, but its fully qualified path is resolved against the current directory.</span></span> <span data-ttu-id="de775-588">以下示例演示了差异。</span><span class="sxs-lookup"><span data-stu-id="de775-588">The following example illustrates the difference.</span></span>

[!code-csharp[IsPathRooted](~/samples/snippets/csharp/api/system.IO/Path/IsPathRooted/program.cs)]
[!code-vb[IsPathRooted](~/samples/snippets/visualbasic/api/system.IO/Path/IsPathRooted/program.vb)]

         ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsPathRooted">
      <MemberSignature Language="C#" Value="public static bool IsPathRooted (ReadOnlySpan&lt;char&gt; path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsPathRooted(valuetype System.ReadOnlySpan`1&lt;char&gt; path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.IsPathRooted(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsPathRooted (path As ReadOnlySpan(Of Char)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsPathRooted(ReadOnlySpan&lt;char&gt; path);" />
      <MemberSignature Language="F#" Value="static member IsPathRooted : ReadOnlySpan&lt;char&gt; -&gt; bool" Usage="System.IO.Path.IsPathRooted path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="de775-589">要测试的路径。</span><span class="sxs-lookup"><span data-stu-id="de775-589">The path to test.</span></span></param>
        <summary><span data-ttu-id="de775-590">返回一个值，该值指示表示文件路径的指定字符范围是否包含根。</span><span class="sxs-lookup"><span data-stu-id="de775-590">Returns a value that indicates whether the specified character span that represents a file path contains a root.</span></span></summary>
        <returns><span data-ttu-id="de775-591">如果 <paramref name="path" /> 包含一个根，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="de775-591"><see langword="true" /> if <paramref name="path" /> contains a root; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <related type="article" href="/dotnet/standard/io/file-path-formats"><span data-ttu-id="de775-592">Windows 系统中的文件路径格式</span><span class="sxs-lookup"><span data-stu-id="de775-592">File path formats on Windows systems</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IsPathRooted">
      <MemberSignature Language="C#" Value="public static bool IsPathRooted (string path);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsPathRooted(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.IsPathRooted(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsPathRooted (path As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsPathRooted(System::String ^ path);" />
      <MemberSignature Language="F#" Value="static member IsPathRooted : string -&gt; bool" Usage="System.IO.Path.IsPathRooted path" />
      <MemberSignature Language="C#" Value="public static bool IsPathRooted (string? path);" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="de775-593">要测试的路径。</span><span class="sxs-lookup"><span data-stu-id="de775-593">The path to test.</span></span></param>
        <summary><span data-ttu-id="de775-594">返回一个值，该值指示指定的路径字符串是否包含根。</span><span class="sxs-lookup"><span data-stu-id="de775-594">Returns a value indicating whether the specified path string contains a root.</span></span></summary>
        <returns><span data-ttu-id="de775-595">如果 <paramref name="path" /> 包含一个根，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="de775-595"><see langword="true" /> if <paramref name="path" /> contains a root; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="de775-596"><xref:System.IO.Path.IsPathRooted%2A> `true` 如果第一个字符是目录分隔符（如 " \\ "），或者如果路径以驱动器号和冒号开头 (： ) ，则此方法返回。</span><span class="sxs-lookup"><span data-stu-id="de775-596">The <xref:System.IO.Path.IsPathRooted%2A> method returns `true` if the first character is a directory separator character such as "\\", or if the path starts with a drive letter and colon (:).</span></span> <span data-ttu-id="de775-597">例如， `true` 对于 `path` " \\ \MyDir \\\MyFile.txt"、"C： \\ \MyDir" 或 "C:MyDir" 之类的字符串，它将返回。</span><span class="sxs-lookup"><span data-stu-id="de775-597">For example, it returns `true` for `path` strings such as "\\\MyDir\\\MyFile.txt", "C:\\\MyDir", or "C:MyDir".</span></span> <span data-ttu-id="de775-598">它将 `false` 返回 `path` "MyDir" 等字符串。</span><span class="sxs-lookup"><span data-stu-id="de775-598">It returns `false` for `path` strings such as "MyDir".</span></span>  
  
 <span data-ttu-id="de775-599">此方法不会验证路径或文件名是否存在。</span><span class="sxs-lookup"><span data-stu-id="de775-599">This method does not verify that the path or file name exists.</span></span>  
  
 <span data-ttu-id="de775-600">有关常见 i/o 任务的列表，请参阅 [常见 I/o 任务](/dotnet/standard/io/common-i-o-tasks)。</span><span class="sxs-lookup"><span data-stu-id="de775-600">For a list of common I/O tasks, see [Common I/O Tasks](/dotnet/standard/io/common-i-o-tasks).</span></span>  

## Examples  
 <span data-ttu-id="de775-601">下面的示例演示如何 `IsPathRooted` 使用方法来测试三个字符串。</span><span class="sxs-lookup"><span data-stu-id="de775-601">The following example demonstrates how the `IsPathRooted` method can be used to test three strings.</span></span>  
  
 [!code-cpp[System.IO.Path Members#12](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.Path Members/CPP/pathmembers.cpp#12)]
 [!code-csharp[System.IO.Path Members#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Path Members/CS/pathmembers.cs#12)]
 [!code-vb[System.IO.Path Members#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Path Members/VB/pathmembers.vb#12)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="de775-602">.NET Framework 和 .NET Core 版本早于2.1： <paramref name="path" /> 包含中定义的一个或多个无效字符 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 。</span><span class="sxs-lookup"><span data-stu-id="de775-602">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars" />.</span></span></exception>
        <related type="article" href="/dotnet/standard/io/file-path-formats"><span data-ttu-id="de775-603">Windows 系统中的文件路径格式</span><span class="sxs-lookup"><span data-stu-id="de775-603">File path formats on Windows systems</span></span></related>
        <related type="Article" href="/dotnet/standard/io/"><span data-ttu-id="de775-604">文件和流 I/O</span><span class="sxs-lookup"><span data-stu-id="de775-604">File and Stream I/O</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file"><span data-ttu-id="de775-605">如何：从文件中读取文本</span><span class="sxs-lookup"><span data-stu-id="de775-605">How to: Read Text from a File</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file"><span data-ttu-id="de775-606">如何：将文本写入文件</span><span class="sxs-lookup"><span data-stu-id="de775-606">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Join">
      <MemberSignature Language="C#" Value="public static string Join (params string?[] paths);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Join(string[] paths) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.Join(System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Join (ParamArray paths As String()) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Join(... cli::array &lt;System::String ^&gt; ^ paths);" />
      <MemberSignature Language="F#" Value="static member Join : string[] -&gt; string" Usage="System.IO.Path.Join paths" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="paths" Type="System.String[]" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;net-5.0">
          <Attributes>
            <Attribute FrameworkAlternate="netcore-3.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="paths"><span data-ttu-id="de775-607">路径的数组。</span><span class="sxs-lookup"><span data-stu-id="de775-607">An array of paths.</span></span></param>
        <summary><span data-ttu-id="de775-608">将路径数组连接到一个路径中。</span><span class="sxs-lookup"><span data-stu-id="de775-608">Concatenates an array of paths into a single path.</span></span></summary>
        <returns><span data-ttu-id="de775-609">连接的路径。</span><span class="sxs-lookup"><span data-stu-id="de775-609">The concatenated path.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="de775-610">此方法只是将中的所有字符串连接在中 `paths` ，并在任何路径组件之间添加目录分隔符（如果尚未存在）。</span><span class="sxs-lookup"><span data-stu-id="de775-610">This method simply concatenates all the strings in `paths` and adds a directory separator character between any of the path components if one is not already present.</span></span> <span data-ttu-id="de775-611">如果 <xref:System.String.Length> 中任何路径的 `paths` 均为零，则该方法将连接剩余的参数。</span><span class="sxs-lookup"><span data-stu-id="de775-611">If the <xref:System.String.Length> of any of the paths in `paths` is zero, the method concatenates the remaining arguments.</span></span> <span data-ttu-id="de775-612">如果生成的串联字符串的长度为零，则该方法将返回 <xref:System.String.Empty?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="de775-612">If the resulting concatenated string's length is zero, the method returns <xref:System.String.Empty?displayProperty=nameWithType>.</span></span>

<span data-ttu-id="de775-613">如果中的任何路径 `paths` （除最后一个路径外）都以路径分隔符字符结尾，而该路径分隔符不适合目标平台，则该 `Join` 方法将保留原始路径分隔符并追加支持的路径分隔符。</span><span class="sxs-lookup"><span data-stu-id="de775-613">If any of the paths in `paths`, except for the last one, ends in a path separator character that is not appropriate for the target platform, the `Join` method preserves the original path separator character and appends the supported one.</span></span> <span data-ttu-id="de775-614">此问题在使用 Windows 反斜杠的硬编码路径 ( " \\ " ) 字符，该字符在基于 Unix 的系统上未被识别为路径分隔符。</span><span class="sxs-lookup"><span data-stu-id="de775-614">This issue arises in hard-coded paths that use the Windows backslash ("\\") character, which is not recognized as a path separator on Unix-based systems.</span></span> <span data-ttu-id="de775-615">若要解决此问题，可以：</span><span class="sxs-lookup"><span data-stu-id="de775-615">To work around this issue, you can:</span></span>

- <span data-ttu-id="de775-616">检索属性的值， <xref:System.IO.Path.DirectorySeparatorChar?displayProperty=nameWithType> 而不是对目录分隔符进行硬编码。</span><span class="sxs-lookup"><span data-stu-id="de775-616">Retrieve the value of the <xref:System.IO.Path.DirectorySeparatorChar?displayProperty=nameWithType> property rather than hard-coding a directory separator character.</span></span>

- <span data-ttu-id="de775-617">使用正斜杠 ( "/" ) 作为目录分隔符。</span><span class="sxs-lookup"><span data-stu-id="de775-617">Use a forward slash ("/") as the directory separator character.</span></span> <span data-ttu-id="de775-618">此字符由 <xref:System.IO.Path.DirectorySeparatorChar?displayProperty=nameWithType> 基于 Unix 的系统上的属性和 <xref:System.IO.Path.AltDirectorySeparatorChar?displayProperty=nameWithType> Windows 系统上的属性返回。</span><span class="sxs-lookup"><span data-stu-id="de775-618">This character is returned by the <xref:System.IO.Path.DirectorySeparatorChar?displayProperty=nameWithType> property on Unix-based systems and by the <xref:System.IO.Path.AltDirectorySeparatorChar?displayProperty=nameWithType> property on Windows systems.</span></span>

<span data-ttu-id="de775-619">与 <xref:System.IO.Path.Combine%2A> 方法不同， <xref:System.IO.Path.Join%2A> 方法不会尝试将返回的路径作为根。</span><span class="sxs-lookup"><span data-stu-id="de775-619">Unlike the <xref:System.IO.Path.Combine%2A> method, the <xref:System.IO.Path.Join%2A> method does not attempt to root the returned path.</span></span> <span data-ttu-id="de775-620"> (也就是说，如果中的任何路径 `paths` （最后一个路径除外）都是绝对路径，则该方法不 `Join` 会丢弃先前的路径，因为 <xref:System.IO.Path.Combine%2A> 方法会。</span><span class="sxs-lookup"><span data-stu-id="de775-620">(That is, if any of the paths in `paths`, except for the last one, is an absolute path, the `Join` method does not discard the previous paths as the <xref:System.IO.Path.Combine%2A> method does.</span></span>

<span data-ttu-id="de775-621">不是对目录和文件名无效的所有字符都解释为可接受的 `Join` 方法，因为您可以使用这些字符搜索通配符。</span><span class="sxs-lookup"><span data-stu-id="de775-621">Not all invalid characters for directory and file names are interpreted as unacceptable by the `Join` method, because you can use these characters for search wildcard characters.</span></span> <span data-ttu-id="de775-622">例如，在 `Path.Join("c:\\", "temp", "*.txt")` 创建文件时，可能会无效，但它可以作为搜索字符串有效。</span><span class="sxs-lookup"><span data-stu-id="de775-622">For example, while `Path.Join("c:\\", "temp", "*.txt")` might be invalid when creating a file, it is valid as a search string.</span></span> <span data-ttu-id="de775-623">因此，该 `Join` 方法成功解释了此方法。</span><span class="sxs-lookup"><span data-stu-id="de775-623">The `Join` method therefore successfully interprets it.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Join">
      <MemberSignature Language="C#" Value="public static string Join (ReadOnlySpan&lt;char&gt; path1, ReadOnlySpan&lt;char&gt; path2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Join(valuetype System.ReadOnlySpan`1&lt;char&gt; path1, valuetype System.ReadOnlySpan`1&lt;char&gt; path2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.Join(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Join (path1 As ReadOnlySpan(Of Char), path2 As ReadOnlySpan(Of Char)) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Join(ReadOnlySpan&lt;char&gt; path1, ReadOnlySpan&lt;char&gt; path2);" />
      <MemberSignature Language="F#" Value="static member Join : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;char&gt; -&gt; string" Usage="System.IO.Path.Join (path1, path2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path1" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="path2" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="path1"><span data-ttu-id="de775-624">包含要加入的第一个路径的字符范围。</span><span class="sxs-lookup"><span data-stu-id="de775-624">A character span that contains the first path to join.</span></span></param>
        <param name="path2"><span data-ttu-id="de775-625">包含要加入的第二个路径的字符范围。</span><span class="sxs-lookup"><span data-stu-id="de775-625">A character span that contains the second path to join.</span></span></param>
        <summary><span data-ttu-id="de775-626">将两个路径组件连接到一个路径中。</span><span class="sxs-lookup"><span data-stu-id="de775-626">Concatenates two path components into a single path.</span></span></summary>
        <returns><span data-ttu-id="de775-627">已组合的路径。</span><span class="sxs-lookup"><span data-stu-id="de775-627">The combined paths.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 
<span data-ttu-id="de775-628">此方法只是连接 `path` 和在 `path2` 两个路径组件之间添加目录分隔符（如果在或开头处不存在一个） `path1` `path2` 。</span><span class="sxs-lookup"><span data-stu-id="de775-628">This method simply concatenates `path` and `path2` and adds a directory separator character between the two path components if one is not already present at the end of `path1` or the beginning of `path2`.</span></span> <span data-ttu-id="de775-629">如果 <xref:System.ReadOnlySpan%601.Length> `path1` 或的 `path2` 为零，则该方法返回其他路径。</span><span class="sxs-lookup"><span data-stu-id="de775-629">If the <xref:System.ReadOnlySpan%601.Length> of either `path1` or `path2` is zero, the method returns the other path.</span></span> <span data-ttu-id="de775-630">如果 <xref:System.ReadOnlySpan%601.Length> 和的均 `path1` `path2` 为零，则该方法返回 <xref:System.String.Empty?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="de775-630">If the <xref:System.ReadOnlySpan%601.Length> of both `path1` and `path2` is zero, the method returns <xref:System.String.Empty?displayProperty=nameWithType>.</span></span> 

<span data-ttu-id="de775-631">如果 `path1` 在不适合目标平台的路径分隔符中结束，则该 `Join` 方法将保留原始路径分隔符并追加受支持的字符分隔符。</span><span class="sxs-lookup"><span data-stu-id="de775-631">If `path1` ends in a path separator character that is not appropriate for the target platform, the `Join` method preserves the original path separator character and appends the supported one.</span></span> <span data-ttu-id="de775-632">此问题在使用 Windows 反斜杠的硬编码路径 ( " \\ " ) 字符，该字符在基于 Unix 的系统上未被识别为路径分隔符。</span><span class="sxs-lookup"><span data-stu-id="de775-632">This issue arises in hard-coded paths that use the Windows backslash ("\\") character, which is not recognized as a path separator on Unix-based systems.</span></span> <span data-ttu-id="de775-633">若要解决此问题，可以：</span><span class="sxs-lookup"><span data-stu-id="de775-633">To work around this issue, you can:</span></span>

- <span data-ttu-id="de775-634">检索属性的值， <xref:System.IO.Path.DirectorySeparatorChar?displayProperty=nameWithType> 而不是对目录分隔符进行硬编码。</span><span class="sxs-lookup"><span data-stu-id="de775-634">Retrieve the value of the <xref:System.IO.Path.DirectorySeparatorChar?displayProperty=nameWithType> property rather than hard-coding a directory separator character.</span></span>

- <span data-ttu-id="de775-635">使用正斜杠 ( "/" ) 作为目录分隔符。</span><span class="sxs-lookup"><span data-stu-id="de775-635">Use a forward slash ("/") as the directory separator character.</span></span> <span data-ttu-id="de775-636">此字符由 <xref:System.IO.Path.DirectorySeparatorChar?displayProperty=nameWithType> 基于 Unix 的系统上的属性和 <xref:System.IO.Path.AltDirectorySeparatorChar?displayProperty=nameWithType> Windows 系统上的属性返回。</span><span class="sxs-lookup"><span data-stu-id="de775-636">This character is returned by the <xref:System.IO.Path.DirectorySeparatorChar?displayProperty=nameWithType> property on Unix-based systems and by the <xref:System.IO.Path.AltDirectorySeparatorChar?displayProperty=nameWithType> property on Windows systems.</span></span> 

<span data-ttu-id="de775-637">与 <xref:System.IO.Path.Combine%2A> 方法不同， <xref:System.IO.Path.Join%2A> 方法不会尝试将返回的路径作为根。</span><span class="sxs-lookup"><span data-stu-id="de775-637">Unlike the <xref:System.IO.Path.Combine%2A> method, the <xref:System.IO.Path.Join%2A> method does not attempt to root the returned path.</span></span> <span data-ttu-id="de775-638"> (也就是说，如果 `path2` 是绝对路径，则该 `Join` 方法不会丢弃 `path1` 并返回， `path2` 因为 <xref:System.IO.Path.Combine%2A> 方法确实如此。 ) 下面的示例阐释了这两种方法返回的路径之间的差异。</span><span class="sxs-lookup"><span data-stu-id="de775-638">(That is, if `path2` is an absolute path, the `Join` method does not discard `path1` and return `path2` as the <xref:System.IO.Path.Combine%2A> method does.) The following example illustrates the difference in the paths returned by the two methods.</span></span> <span data-ttu-id="de775-639">如果的源 `path2` 是用户输入，则此 <xref:System.IO.Path.Combine%2A> 方法使用户可以访问文件系统资源 (如 *C：/Users/User1/Documents/金融/* 在示例) ，因为应用程序不打算使其无法访问。</span><span class="sxs-lookup"><span data-stu-id="de775-639">If the source of `path2` is user input, the <xref:System.IO.Path.Combine%2A> method makes it possible for a user to access a file system resource (such as *C:/Users/User1/Documents/Financial/* in the case of the example) that the application did not intend to make accessible.</span></span>  

<span data-ttu-id="de775-640">不是对目录和文件名无效的所有字符都解释为可接受的 `Join` 方法，因为您可以使用这些字符搜索通配符。</span><span class="sxs-lookup"><span data-stu-id="de775-640">Not all invalid characters for directory and file names are interpreted as unacceptable by the `Join` method, because you can use these characters for search wildcard characters.</span></span> <span data-ttu-id="de775-641">例如，在 `Path.Join("c:\\", "*.txt")` 创建文件时，可能会无效，但它可以作为搜索字符串有效。</span><span class="sxs-lookup"><span data-stu-id="de775-641">For example, while `Path.Join("c:\\", "*.txt")` might be invalid when creating a file, it is valid as a search string.</span></span> <span data-ttu-id="de775-642">因此，该 `Join` 方法成功解释了此方法。</span><span class="sxs-lookup"><span data-stu-id="de775-642">The `Join` method therefore successfully interprets it.</span></span> 

## Examples

<span data-ttu-id="de775-643">下面的示例演示了和方法返回的路径之间的 <xref:System.IO.Path.Join(System.ReadOnlySpan%7BSystem.Char%7D,System.ReadOnlySpan%7BSystem.Char%7D)?displayProperty=nameWithType> 差异 <xref:System.IO.Path.Combine(System.String,System.String)?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="de775-643">The following example illustrates the difference in the paths returned by the <xref:System.IO.Path.Join(System.ReadOnlySpan%7BSystem.Char%7D,System.ReadOnlySpan%7BSystem.Char%7D)?displayProperty=nameWithType> and <xref:System.IO.Path.Combine(System.String,System.String)?displayProperty=nameWithType> methods.</span></span> <span data-ttu-id="de775-644">如果第一个字符串是包含驱动器和根目录的完全限定路径，第二个字符串是第一个路径的相对路径，则这两个方法将产生相同的结果。</span><span class="sxs-lookup"><span data-stu-id="de775-644">When the first string is an fully qualified path that includes a drive and root directory and the second is a relative path from the first path, the two methods produce identical results.</span></span> <span data-ttu-id="de775-645">在第二次和第三次调用 `ShowPathInformation` 方法时，两个方法返回的字符串分叉。</span><span class="sxs-lookup"><span data-stu-id="de775-645">In the second and third calls to the `ShowPathInformation` method, the strings returned by the two methods diverge.</span></span> <span data-ttu-id="de775-646">在第二个方法调用中，第一个字符串参数是驱动器，而第二个参数是根目录。</span><span class="sxs-lookup"><span data-stu-id="de775-646">In the second method call, the first string argument is a drive, while the second is a rooted directory.</span></span> <span data-ttu-id="de775-647">`Join`方法将两个字符串连接在一起，并保留重复的路径分隔符。</span><span class="sxs-lookup"><span data-stu-id="de775-647">The `Join` method concatenates the two strings and preserves duplicate path separators.</span></span> <span data-ttu-id="de775-648">`Combine`方法会放弃驱动器并返回当前驱动器上的根目录。</span><span class="sxs-lookup"><span data-stu-id="de775-648">The `Combine` method abandons the drive and returns a rooted directory on the current drive.</span></span> <span data-ttu-id="de775-649">如果应用程序的当前驱动器为 C：\该字符串用于访问目录中的一个或一些文件，它将访问 C：而不是 d：</span><span class="sxs-lookup"><span data-stu-id="de775-649">If the application's current drive is C:\ and the string is used to access a file or files in the directory, it would access C: instead of D:.</span></span> <span data-ttu-id="de775-650">最后，由于第三次调用中的两个参数 `ShowPathInformation` 均为根参数，该 `Join` 方法只会附加它们以创建过程文件路径，而 `Combine` 方法会丢弃第一个字符串并返回第二个字符串。</span><span class="sxs-lookup"><span data-stu-id="de775-650">Finally, because both arguments in the third call to `ShowPathInformation` are rooted, the `Join` method simply appends them to create a nonsensical file path, while the `Combine` method discards the first string and returns the second.</span></span> <span data-ttu-id="de775-651">使用此字符串进行文件访问可能会给应用程序带来对敏感文件的意外访问权限。</span><span class="sxs-lookup"><span data-stu-id="de775-651">Using this string for file access could give the application unintended access to sensitive files.</span></span>  

[!code-csharp[Path.Join(String,String)](~/samples/snippets/csharp/api/system.io/path/combine2/program.cs)]
[!code-vb[Path.Join(String,String)](~/samples/snippets/visualbasic/api/system.io/path/combine2/program.vb)]


       ]]></format>
        </remarks>
        <related type="article" href="/dotnet/standard/io/file-path-formats"><span data-ttu-id="de775-652">Windows 系统中的文件路径格式</span><span class="sxs-lookup"><span data-stu-id="de775-652">File path formats on Windows systems</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Join">
      <MemberSignature Language="C#" Value="public static string Join (string? path1, string? path2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Join(string path1, string path2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.Join(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Join (path1 As String, path2 As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Join(System::String ^ path1, System::String ^ path2);" />
      <MemberSignature Language="F#" Value="static member Join : string * string -&gt; string" Usage="System.IO.Path.Join (path1, path2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path1" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;net-5.0" />
        <Parameter Name="path2" Type="System.String" Index="1" FrameworkAlternate="netcore-3.0;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="path1"><span data-ttu-id="de775-653">要联接的第一个路径。</span><span class="sxs-lookup"><span data-stu-id="de775-653">The first path to join.</span></span></param>
        <param name="path2"><span data-ttu-id="de775-654">要联接的第二个路径。</span><span class="sxs-lookup"><span data-stu-id="de775-654">The second path to join.</span></span></param>
        <summary><span data-ttu-id="de775-655">将两个路径连接到一个路径中。</span><span class="sxs-lookup"><span data-stu-id="de775-655">Concatenates two paths into a single path.</span></span></summary>
        <returns><span data-ttu-id="de775-656">连接的路径。</span><span class="sxs-lookup"><span data-stu-id="de775-656">The concatenated path.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="de775-657">此方法只连接 `path` 并在 `path2` 任何路径组件之间添加目录分隔符（如果尚未存在）。</span><span class="sxs-lookup"><span data-stu-id="de775-657">This method simply concatenates `path` and `path2` and adds a directory separator character between any of the path components if one is not already present.</span></span> <span data-ttu-id="de775-658">如果或的长度 `path1` `path2` 为零，则该方法将连接剩余的参数。</span><span class="sxs-lookup"><span data-stu-id="de775-658">If the length of either `path1` or `path2` is zero, the method concatenates the remaining argument.</span></span> <span data-ttu-id="de775-659">如果生成的串联字符串的长度为零，则该方法将返回 <xref:System.String.Empty?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="de775-659">If the length of the resulting concatenated string is zero, the method returns <xref:System.String.Empty?displayProperty=nameWithType>.</span></span>

<span data-ttu-id="de775-660">如果 `path1` 在不适合目标平台的路径分隔符中结束，则该 `Join` 方法将保留原始路径分隔符并追加受支持的字符分隔符。</span><span class="sxs-lookup"><span data-stu-id="de775-660">If `path1` ends in a path separator character that is not appropriate for the target platform, the `Join` method preserves the original path separator character and appends the supported one.</span></span> <span data-ttu-id="de775-661">此问题在使用 Windows 反斜杠的硬编码路径 ( " \\ " ) 字符，该字符在基于 Unix 的系统上未被识别为路径分隔符。</span><span class="sxs-lookup"><span data-stu-id="de775-661">This issue arises in hard-coded paths that use the Windows backslash ("\\") character, which is not recognized as a path separator on Unix-based systems.</span></span> <span data-ttu-id="de775-662">若要解决此问题，可以：</span><span class="sxs-lookup"><span data-stu-id="de775-662">To work around this issue, you can:</span></span>

- <span data-ttu-id="de775-663">检索属性的值， <xref:System.IO.Path.DirectorySeparatorChar?displayProperty=nameWithType> 而不是对目录分隔符进行硬编码。</span><span class="sxs-lookup"><span data-stu-id="de775-663">Retrieve the value of the <xref:System.IO.Path.DirectorySeparatorChar?displayProperty=nameWithType> property rather than hard-coding a directory separator character.</span></span>

- <span data-ttu-id="de775-664">使用正斜杠 ( "/" ) 作为目录分隔符。</span><span class="sxs-lookup"><span data-stu-id="de775-664">Use a forward slash ("/") as the directory separator character.</span></span> <span data-ttu-id="de775-665">此字符由 <xref:System.IO.Path.DirectorySeparatorChar?displayProperty=nameWithType> 基于 Unix 的系统上的属性和 <xref:System.IO.Path.AltDirectorySeparatorChar?displayProperty=nameWithType> Windows 系统上的属性返回。</span><span class="sxs-lookup"><span data-stu-id="de775-665">This character is returned by the <xref:System.IO.Path.DirectorySeparatorChar?displayProperty=nameWithType> property on Unix-based systems and by the <xref:System.IO.Path.AltDirectorySeparatorChar?displayProperty=nameWithType> property on Windows systems.</span></span>

<span data-ttu-id="de775-666">与 <xref:System.IO.Path.Combine%2A> 方法不同， <xref:System.IO.Path.Join%2A> 方法不会尝试将返回的路径作为根。</span><span class="sxs-lookup"><span data-stu-id="de775-666">Unlike the <xref:System.IO.Path.Combine%2A> method, the <xref:System.IO.Path.Join%2A> method does not attempt to root the returned path.</span></span> <span data-ttu-id="de775-667"> (也就是说，如果 `path2` 是绝对路径，则该 `Join` 方法将不会丢弃先前的路径，因为 <xref:System.IO.Path.Combine%2A> 方法会。</span><span class="sxs-lookup"><span data-stu-id="de775-667">(That is, if `path2` is an absolute path, the `Join` method does not discard the previous paths as the <xref:System.IO.Path.Combine%2A> method does.</span></span>

<span data-ttu-id="de775-668">不是对目录和文件名无效的所有字符都解释为可接受的 `Join` 方法，因为您可以使用这些字符搜索通配符。</span><span class="sxs-lookup"><span data-stu-id="de775-668">Not all invalid characters for directory and file names are interpreted as unacceptable by the `Join` method, because you can use these characters for search wildcard characters.</span></span> <span data-ttu-id="de775-669">例如，在 `Path.Join("c:\\", "temp", "*.txt")` 创建文件时，可能会无效，但它可以作为搜索字符串有效。</span><span class="sxs-lookup"><span data-stu-id="de775-669">For example, while `Path.Join("c:\\", "temp", "*.txt")` might be invalid when creating a file, it is valid as a search string.</span></span> <span data-ttu-id="de775-670">因此，该 `Join` 方法成功解释了此方法。</span><span class="sxs-lookup"><span data-stu-id="de775-670">The `Join` method therefore successfully interprets it.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Join">
      <MemberSignature Language="C#" Value="public static string Join (ReadOnlySpan&lt;char&gt; path1, ReadOnlySpan&lt;char&gt; path2, ReadOnlySpan&lt;char&gt; path3);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Join(valuetype System.ReadOnlySpan`1&lt;char&gt; path1, valuetype System.ReadOnlySpan`1&lt;char&gt; path2, valuetype System.ReadOnlySpan`1&lt;char&gt; path3) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.Join(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Join (path1 As ReadOnlySpan(Of Char), path2 As ReadOnlySpan(Of Char), path3 As ReadOnlySpan(Of Char)) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Join(ReadOnlySpan&lt;char&gt; path1, ReadOnlySpan&lt;char&gt; path2, ReadOnlySpan&lt;char&gt; path3);" />
      <MemberSignature Language="F#" Value="static member Join : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;char&gt; -&gt; string" Usage="System.IO.Path.Join (path1, path2, path3)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path1" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="path2" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="path3" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="path1"><span data-ttu-id="de775-671">包含要加入的第一个路径的字符范围。</span><span class="sxs-lookup"><span data-stu-id="de775-671">A character span that contains the first path to join.</span></span></param>
        <param name="path2"><span data-ttu-id="de775-672">包含要加入的第二个路径的字符范围。</span><span class="sxs-lookup"><span data-stu-id="de775-672">A character span that contains the second path to join.</span></span></param>
        <param name="path3"><span data-ttu-id="de775-673">包含要加入的第三个路径的字符范围。</span><span class="sxs-lookup"><span data-stu-id="de775-673">A character span that contains the third path to join.</span></span></param>
        <summary><span data-ttu-id="de775-674">将三个路径组件连接到一个路径中。</span><span class="sxs-lookup"><span data-stu-id="de775-674">Concatenates three path components into a single path.</span></span></summary>
        <returns><span data-ttu-id="de775-675">连接的路径。</span><span class="sxs-lookup"><span data-stu-id="de775-675">The concatenated path.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 
<span data-ttu-id="de775-676">此方法只连接 `path` 、 `path2` 和， `path3` 然后在任何路径组件之间添加目录分隔符（如果尚未提供）。</span><span class="sxs-lookup"><span data-stu-id="de775-676">This method simply concatenates `path`, `path2`, and `path3` and adds a directory separator character between any of the path components if one is not already present.</span></span> <span data-ttu-id="de775-677">如果 <xref:System.ReadOnlySpan%601.Length> `path1` 、或参数的任何 `path2` `path3` 均为零，则该方法将连接剩余的参数。</span><span class="sxs-lookup"><span data-stu-id="de775-677">If the <xref:System.ReadOnlySpan%601.Length> of any of `path1`, `path2`, or `path3` arguments is zero, the method concatenates the remaining arguments.</span></span> <span data-ttu-id="de775-678">如果 <xref:System.ReadOnlySpan%601.Length?displayProperty=nameWithType> 所有组件的均为零，则该方法返回 <xref:System.String.Empty?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="de775-678">If the <xref:System.ReadOnlySpan%601.Length?displayProperty=nameWithType> of all components is zero, the method returns <xref:System.String.Empty?displayProperty=nameWithType>.</span></span>

<span data-ttu-id="de775-679">如果 `path1` 或以 `path2` 不适合目标平台的路径分隔符结尾，则该 `Join` 方法将保留原始路径分隔符并追加受支持的字符分隔符。</span><span class="sxs-lookup"><span data-stu-id="de775-679">If `path1` or `path2` ends in a path separator character that is not appropriate for the target platform, the `Join` method preserves the original path separator character and appends the supported one.</span></span> <span data-ttu-id="de775-680">此问题在使用 Windows 反斜杠的硬编码路径 ( " \\ " ) 字符，该字符在基于 Unix 的系统上未被识别为路径分隔符。</span><span class="sxs-lookup"><span data-stu-id="de775-680">This issue arises in hard-coded paths that use the Windows backslash ("\\") character, which is not recognized as a path separator on Unix-based systems.</span></span> <span data-ttu-id="de775-681">若要解决此问题，可以：</span><span class="sxs-lookup"><span data-stu-id="de775-681">To work around this issue, you can:</span></span>

- <span data-ttu-id="de775-682">检索属性的值， <xref:System.IO.Path.DirectorySeparatorChar?displayProperty=nameWithType> 而不是对目录分隔符进行硬编码。</span><span class="sxs-lookup"><span data-stu-id="de775-682">Retrieve the value of the <xref:System.IO.Path.DirectorySeparatorChar?displayProperty=nameWithType> property rather than hard-coding a directory separator character.</span></span>

- <span data-ttu-id="de775-683">使用正斜杠 ( "/" ) 作为目录分隔符。</span><span class="sxs-lookup"><span data-stu-id="de775-683">Use a forward slash ("/") as the directory separator character.</span></span> <span data-ttu-id="de775-684">此字符由 <xref:System.IO.Path.DirectorySeparatorChar?displayProperty=nameWithType> 基于 Unix 的系统上的属性和 <xref:System.IO.Path.AltDirectorySeparatorChar?displayProperty=nameWithType> Windows 系统上的属性返回。</span><span class="sxs-lookup"><span data-stu-id="de775-684">This character is returned by the <xref:System.IO.Path.DirectorySeparatorChar?displayProperty=nameWithType> property on Unix-based systems and by the <xref:System.IO.Path.AltDirectorySeparatorChar?displayProperty=nameWithType> property on Windows systems.</span></span>

<span data-ttu-id="de775-685">与 <xref:System.IO.Path.Combine%2A> 方法不同， <xref:System.IO.Path.Join%2A> 方法不会尝试将返回的路径作为根。</span><span class="sxs-lookup"><span data-stu-id="de775-685">Unlike the <xref:System.IO.Path.Combine%2A> method, the <xref:System.IO.Path.Join%2A> method does not attempt to root the returned path.</span></span> <span data-ttu-id="de775-686"> (也就是说，如果 `path2` 或 `path2` 是绝对路径，则该 `Join` 方法将不会丢弃先前的路径，因为 <xref:System.IO.Path.Combine%2A> 方法会。</span><span class="sxs-lookup"><span data-stu-id="de775-686">(That is, if `path2` or `path2` is an absolute path, the `Join` method does not discard the previous paths as the <xref:System.IO.Path.Combine%2A> method does.</span></span>
  
<span data-ttu-id="de775-687">不是对目录和文件名无效的所有字符都解释为可接受的 `Join` 方法，因为您可以使用这些字符搜索通配符。</span><span class="sxs-lookup"><span data-stu-id="de775-687">Not all invalid characters for directory and file names are interpreted as unacceptable by the `Join` method, because you can use these characters for search wildcard characters.</span></span> <span data-ttu-id="de775-688">例如，在 `Path.Join("c:\\", "temp", "*.txt")` 创建文件时，可能会无效，但它可以作为搜索字符串有效。</span><span class="sxs-lookup"><span data-stu-id="de775-688">For example, while `Path.Join("c:\\", "temp", "*.txt")` might be invalid when creating a file, it is valid as a search string.</span></span> <span data-ttu-id="de775-689">因此，该 `Join` 方法成功解释了此方法。</span><span class="sxs-lookup"><span data-stu-id="de775-689">The `Join` method therefore successfully interprets it.</span></span>

## Examples

<span data-ttu-id="de775-690">下面的示例演示了和方法返回的路径之间的 <xref:System.IO.Path.Join(System.ReadOnlySpan%7BSystem.Char%7D,System.ReadOnlySpan%7BSystem.Char%7D,System.ReadOnlySpan%7BSystem.Char%7D)?displayProperty=nameWithType> 差异 <xref:System.IO.Path.Combine(System.String,System.String,System.String)?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="de775-690">The following example illustrates the difference in the paths returned by the <xref:System.IO.Path.Join(System.ReadOnlySpan%7BSystem.Char%7D,System.ReadOnlySpan%7BSystem.Char%7D,System.ReadOnlySpan%7BSystem.Char%7D)?displayProperty=nameWithType> and <xref:System.IO.Path.Combine(System.String,System.String,System.String)?displayProperty=nameWithType> methods.</span></span> <span data-ttu-id="de775-691">如果第一个字符串是包含驱动器和根目录的完全限定路径，第二个字符串是第一个路径的相对路径，则这两个方法将产生相同的结果。</span><span class="sxs-lookup"><span data-stu-id="de775-691">When the first string is a fully qualified path that includes a drive and root directory and the second is a relative path from the first path, the two methods produce identical results.</span></span> <span data-ttu-id="de775-692">在第二次和第三次调用 `ShowPathInformation` 方法时，两个方法返回的字符串分叉。</span><span class="sxs-lookup"><span data-stu-id="de775-692">In the second and third calls to the `ShowPathInformation` method, the strings returned by the two methods diverge.</span></span> <span data-ttu-id="de775-693">在第二个方法调用中，第一个字符串参数是驱动器，而第二个参数是根目录。</span><span class="sxs-lookup"><span data-stu-id="de775-693">In the second method call, the first string argument is a drive, while the second is a rooted directory.</span></span> <span data-ttu-id="de775-694">`Join`方法将两个字符串连接在一起，并保留重复的路径分隔符。</span><span class="sxs-lookup"><span data-stu-id="de775-694">The `Join` method concatenates the two strings and preserves duplicate path separators.</span></span> <span data-ttu-id="de775-695">对方法的调用 <xref:System.IO.Path.GetFullPath%2A> 将消除重复。</span><span class="sxs-lookup"><span data-stu-id="de775-695">A call to the <xref:System.IO.Path.GetFullPath%2A> method would eliminate the duplication.</span></span> <span data-ttu-id="de775-696">`Combine`方法会放弃驱动器并返回当前驱动器上的根目录。</span><span class="sxs-lookup"><span data-stu-id="de775-696">The `Combine` method abandons the drive and returns a rooted directory on the current drive.</span></span> <span data-ttu-id="de775-697">如果应用程序的当前驱动器为 C：\该字符串用于访问目录中的一个或一些文件，它将访问 C：而不是 d：</span><span class="sxs-lookup"><span data-stu-id="de775-697">If the application's current drive is C:\ and the string is used to access a file or files in the directory, it would access C: instead of D:.</span></span> <span data-ttu-id="de775-698">最后，由于第三次调用中的最后一个参数 `ShowPathInformation` 是根参数，该 `Join` 方法只是将其追加到前两个自变量以创建过程文件路径，而 `Combine` 方法会丢弃前两个字符串并返回第三个字符串。</span><span class="sxs-lookup"><span data-stu-id="de775-698">Finally, because the final argument in the third call to `ShowPathInformation` are rooted, the `Join` method simply appends it to the first two arguments to create a nonsensical file path, while the `Combine` method discards the first two strings and returns the third.</span></span> <span data-ttu-id="de775-699">使用此字符串进行文件访问可能会给应用程序带来对敏感文件的意外访问权限。</span><span class="sxs-lookup"><span data-stu-id="de775-699">Using this string for file access could give the application unintended access to sensitive files.</span></span>

[!code-csharp[Path.Join(String,String,String)](~/samples/snippets/csharp/api/system.io/path/combine3/program.cs)]
[!code-vb[Path.Join(String,String,String)](~/samples/snippets/visualbasic/api/system.io/path/combine3/program.vb)]

       ]]></format>
        </remarks>
        <related type="article" href="/dotnet/standard/io/file-path-formats"><span data-ttu-id="de775-700">Windows 系统中的文件路径格式</span><span class="sxs-lookup"><span data-stu-id="de775-700">File path formats on Windows systems</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Join">
      <MemberSignature Language="C#" Value="public static string Join (string? path1, string? path2, string? path3);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Join(string path1, string path2, string path3) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.Join(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Join (path1 As String, path2 As String, path3 As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Join(System::String ^ path1, System::String ^ path2, System::String ^ path3);" />
      <MemberSignature Language="F#" Value="static member Join : string * string * string -&gt; string" Usage="System.IO.Path.Join (path1, path2, path3)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path1" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;net-5.0" />
        <Parameter Name="path2" Type="System.String" Index="1" FrameworkAlternate="netcore-3.0;netcore-3.1;net-5.0" />
        <Parameter Name="path3" Type="System.String" Index="2" FrameworkAlternate="netcore-3.0;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="path1"><span data-ttu-id="de775-701">要联接的第一个路径。</span><span class="sxs-lookup"><span data-stu-id="de775-701">The first path to join.</span></span></param>
        <param name="path2"><span data-ttu-id="de775-702">要联接的第二个路径。</span><span class="sxs-lookup"><span data-stu-id="de775-702">The second path to join.</span></span></param>
        <param name="path3"><span data-ttu-id="de775-703">要联接的第三个路径。</span><span class="sxs-lookup"><span data-stu-id="de775-703">The third path to join.</span></span></param>
        <summary><span data-ttu-id="de775-704">将三个路径连接到一个路径中。</span><span class="sxs-lookup"><span data-stu-id="de775-704">Concatenates three paths into a single path.</span></span></summary>
        <returns><span data-ttu-id="de775-705">连接的路径。</span><span class="sxs-lookup"><span data-stu-id="de775-705">The concatenated path.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="de775-706">此方法只连接 `path` 、 `path2` 和， `path3` 然后在任何路径组件之间添加目录分隔符（如果尚未提供）。</span><span class="sxs-lookup"><span data-stu-id="de775-706">This method simply concatenates `path`, `path2`, and `path3` and adds a directory separator character between any of the path components if one is not already present.</span></span> <span data-ttu-id="de775-707">如果 `path1` 、 `path2` 或参数的长度 `path3` 为零，则该方法将连接剩余的参数。</span><span class="sxs-lookup"><span data-stu-id="de775-707">If the length of any of `path1`, `path2` or `path3` argument is zero, the method concatenates the remaining arguments.</span></span> <span data-ttu-id="de775-708">如果生成的串联字符串的长度为零，则该方法将返回 <xref:System.String.Empty?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="de775-708">If the length of the resulting concatenated string is zero, the method returns <xref:System.String.Empty?displayProperty=nameWithType>.</span></span>

<span data-ttu-id="de775-709">如果 `path1` 或以 `path2` 不适合目标平台的路径分隔符结尾，则该 `Join` 方法将保留原始路径分隔符并追加受支持的字符分隔符。</span><span class="sxs-lookup"><span data-stu-id="de775-709">If `path1` or `path2` ends in a path separator character that is not appropriate for the target platform, the `Join` method preserves the original path separator character and appends the supported one.</span></span> <span data-ttu-id="de775-710">此问题在使用 Windows 反斜杠的硬编码路径 ( " \\ " ) 字符，该字符在基于 Unix 的系统上未被识别为路径分隔符。</span><span class="sxs-lookup"><span data-stu-id="de775-710">This issue arises in hard-coded paths that use the Windows backslash ("\\") character, which is not recognized as a path separator on Unix-based systems.</span></span> <span data-ttu-id="de775-711">若要解决此问题，可以：</span><span class="sxs-lookup"><span data-stu-id="de775-711">To work around this issue, you can:</span></span>

- <span data-ttu-id="de775-712">检索属性的值， <xref:System.IO.Path.DirectorySeparatorChar?displayProperty=nameWithType> 而不是对目录分隔符进行硬编码。</span><span class="sxs-lookup"><span data-stu-id="de775-712">Retrieve the value of the <xref:System.IO.Path.DirectorySeparatorChar?displayProperty=nameWithType> property rather than hard-coding a directory separator character.</span></span>

- <span data-ttu-id="de775-713">使用正斜杠 ( "/" ) 作为目录分隔符。</span><span class="sxs-lookup"><span data-stu-id="de775-713">Use a forward slash ("/") as the directory separator character.</span></span> <span data-ttu-id="de775-714">此字符由 <xref:System.IO.Path.DirectorySeparatorChar?displayProperty=nameWithType> 基于 Unix 的系统上的属性和 <xref:System.IO.Path.AltDirectorySeparatorChar?displayProperty=nameWithType> Windows 系统上的属性返回。</span><span class="sxs-lookup"><span data-stu-id="de775-714">This character is returned by the <xref:System.IO.Path.DirectorySeparatorChar?displayProperty=nameWithType> property on Unix-based systems and by the <xref:System.IO.Path.AltDirectorySeparatorChar?displayProperty=nameWithType> property on Windows systems.</span></span>

<span data-ttu-id="de775-715">与 <xref:System.IO.Path.Combine%2A> 方法不同， <xref:System.IO.Path.Join%2A> 方法不会尝试将返回的路径作为根。</span><span class="sxs-lookup"><span data-stu-id="de775-715">Unlike the <xref:System.IO.Path.Combine%2A> method, the <xref:System.IO.Path.Join%2A> method does not attempt to root the returned path.</span></span> <span data-ttu-id="de775-716"> (也就是说，如果 `path2` 或 `path2` 是绝对路径，则该 `Join` 方法将不会丢弃先前的路径，因为 <xref:System.IO.Path.Combine%2A> 方法会。</span><span class="sxs-lookup"><span data-stu-id="de775-716">(That is, if `path2` or `path2` is an absolute path, the `Join` method does not discard the previous paths as the <xref:System.IO.Path.Combine%2A> method does.</span></span>

<span data-ttu-id="de775-717">不是对目录和文件名无效的所有字符都解释为可接受的 `Join` 方法，因为您可以使用这些字符搜索通配符。</span><span class="sxs-lookup"><span data-stu-id="de775-717">Not all invalid characters for directory and file names are interpreted as unacceptable by the `Join` method, because you can use these characters for search wildcard characters.</span></span> <span data-ttu-id="de775-718">例如，在 `Path.Join("c:\\", "temp", "*.txt")` 创建文件时，可能会无效，但它可以作为搜索字符串有效。</span><span class="sxs-lookup"><span data-stu-id="de775-718">For example, while `Path.Join("c:\\", "temp", "*.txt")` might be invalid when creating a file, it is valid as a search string.</span></span> <span data-ttu-id="de775-719">因此，该 `Join` 方法成功解释了此方法。</span><span class="sxs-lookup"><span data-stu-id="de775-719">The `Join` method therefore successfully interprets it.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Join">
      <MemberSignature Language="C#" Value="public static string Join (ReadOnlySpan&lt;char&gt; path1, ReadOnlySpan&lt;char&gt; path2, ReadOnlySpan&lt;char&gt; path3, ReadOnlySpan&lt;char&gt; path4);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Join(valuetype System.ReadOnlySpan`1&lt;char&gt; path1, valuetype System.ReadOnlySpan`1&lt;char&gt; path2, valuetype System.ReadOnlySpan`1&lt;char&gt; path3, valuetype System.ReadOnlySpan`1&lt;char&gt; path4) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.Join(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Join (path1 As ReadOnlySpan(Of Char), path2 As ReadOnlySpan(Of Char), path3 As ReadOnlySpan(Of Char), path4 As ReadOnlySpan(Of Char)) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Join(ReadOnlySpan&lt;char&gt; path1, ReadOnlySpan&lt;char&gt; path2, ReadOnlySpan&lt;char&gt; path3, ReadOnlySpan&lt;char&gt; path4);" />
      <MemberSignature Language="F#" Value="static member Join : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;char&gt; -&gt; string" Usage="System.IO.Path.Join (path1, path2, path3, path4)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path1" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;net-5.0" />
        <Parameter Name="path2" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="1" FrameworkAlternate="netcore-3.0;netcore-3.1;net-5.0" />
        <Parameter Name="path3" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="2" FrameworkAlternate="netcore-3.0;netcore-3.1;net-5.0" />
        <Parameter Name="path4" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="3" FrameworkAlternate="netcore-3.0;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="path1"><span data-ttu-id="de775-720">包含要加入的第一个路径的字符范围。</span><span class="sxs-lookup"><span data-stu-id="de775-720">A character span that contains the first path to join.</span></span></param>
        <param name="path2"><span data-ttu-id="de775-721">包含要加入的第二个路径的字符范围。</span><span class="sxs-lookup"><span data-stu-id="de775-721">A character span that contains the second path to join.</span></span></param>
        <param name="path3"><span data-ttu-id="de775-722">包含要加入的第三个路径的字符范围。</span><span class="sxs-lookup"><span data-stu-id="de775-722">A character span that contains the third path to join.</span></span></param>
        <param name="path4"><span data-ttu-id="de775-723">包含要联接的第四个路径的字符跨度。</span><span class="sxs-lookup"><span data-stu-id="de775-723">A character span that contains the fourth path to join.</span></span></param>
        <summary><span data-ttu-id="de775-724">将四个路径组件连接到一个路径中。</span><span class="sxs-lookup"><span data-stu-id="de775-724">Concatenates four path components into a single path.</span></span></summary>
        <returns><span data-ttu-id="de775-725">连接的路径。</span><span class="sxs-lookup"><span data-stu-id="de775-725">The concatenated path.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="de775-726">此方法只连接 `path` 、 `path2` `path3` 和， `path4` 然后在任何路径组件之间添加目录分隔符（如果尚未提供）。</span><span class="sxs-lookup"><span data-stu-id="de775-726">This method simply concatenates `path`, `path2`, `path3` and `path4` and adds a directory separator character between any of the path components if one is not already present.</span></span> <span data-ttu-id="de775-727">如果 <xref:System.ReadOnlySpan%601.Length> `path1` 、或参数的任何 `path2` `path3` `path4` 均为零，则该方法将连接剩余的参数。</span><span class="sxs-lookup"><span data-stu-id="de775-727">If the <xref:System.ReadOnlySpan%601.Length> of any of `path1`, `path2`, `path3` or `path4` argument is zero, the method concatenates the remaining arguments.</span></span> <span data-ttu-id="de775-728">如果 <xref:System.ReadOnlySpan%601.Length?displayProperty=nameWithType> 所有组件的均为零，则该方法返回 <xref:System.String.Empty?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="de775-728">If the <xref:System.ReadOnlySpan%601.Length?displayProperty=nameWithType> of all components is zero, the method returns <xref:System.String.Empty?displayProperty=nameWithType>.</span></span>

<span data-ttu-id="de775-729">如果 `path1` 或 `path2` 以 `path3` 不适合目标平台的路径分隔符结尾，则该 `Join` 方法将保留原始路径分隔符并追加受支持的字符分隔符。</span><span class="sxs-lookup"><span data-stu-id="de775-729">If `path1` or `path2` or `path3` ends in a path separator character that is not appropriate for the target platform, the `Join` method preserves the original path separator character and appends the supported one.</span></span> <span data-ttu-id="de775-730">此问题在使用 Windows 反斜杠的硬编码路径 ( " \\ " ) 字符，该字符在基于 Unix 的系统上未被识别为路径分隔符。</span><span class="sxs-lookup"><span data-stu-id="de775-730">This issue arises in hard-coded paths that use the Windows backslash ("\\") character, which is not recognized as a path separator on Unix-based systems.</span></span> <span data-ttu-id="de775-731">若要解决此问题，可以：</span><span class="sxs-lookup"><span data-stu-id="de775-731">To work around this issue, you can:</span></span>

- <span data-ttu-id="de775-732">检索属性的值， <xref:System.IO.Path.DirectorySeparatorChar?displayProperty=nameWithType> 而不是对目录分隔符进行硬编码。</span><span class="sxs-lookup"><span data-stu-id="de775-732">Retrieve the value of the <xref:System.IO.Path.DirectorySeparatorChar?displayProperty=nameWithType> property rather than hard-coding a directory separator character.</span></span>

- <span data-ttu-id="de775-733">使用正斜杠 ( "/" ) 作为目录分隔符。</span><span class="sxs-lookup"><span data-stu-id="de775-733">Use a forward slash ("/") as the directory separator character.</span></span> <span data-ttu-id="de775-734">此字符由 <xref:System.IO.Path.DirectorySeparatorChar?displayProperty=nameWithType> 基于 Unix 的系统上的属性和 <xref:System.IO.Path.AltDirectorySeparatorChar?displayProperty=nameWithType> Windows 系统上的属性返回。</span><span class="sxs-lookup"><span data-stu-id="de775-734">This character is returned by the <xref:System.IO.Path.DirectorySeparatorChar?displayProperty=nameWithType> property on Unix-based systems and by the <xref:System.IO.Path.AltDirectorySeparatorChar?displayProperty=nameWithType> property on Windows systems.</span></span>

<span data-ttu-id="de775-735">与 <xref:System.IO.Path.Combine%2A> 方法不同， <xref:System.IO.Path.Join%2A> 方法不会尝试将返回的路径作为根。</span><span class="sxs-lookup"><span data-stu-id="de775-735">Unlike the <xref:System.IO.Path.Combine%2A> method, the <xref:System.IO.Path.Join%2A> method does not attempt to root the returned path.</span></span> <span data-ttu-id="de775-736"> (也就是说，如果 `path2` 或 `path2` 或 `path3` 是绝对路径，则该方法将 `Join` 不会丢弃先前的路径，因为 <xref:System.IO.Path.Combine%2A> 方法会。</span><span class="sxs-lookup"><span data-stu-id="de775-736">(That is, if `path2` or `path2` or `path3` is an absolute path, the `Join` method does not discard the previous paths as the <xref:System.IO.Path.Combine%2A> method does.</span></span>

<span data-ttu-id="de775-737">不是对目录和文件名无效的所有字符都解释为可接受的 `Join` 方法，因为您可以使用这些字符搜索通配符。</span><span class="sxs-lookup"><span data-stu-id="de775-737">Not all invalid characters for directory and file names are interpreted as unacceptable by the `Join` method, because you can use these characters for search wildcard characters.</span></span> <span data-ttu-id="de775-738">例如，在 `Path.Join("c:\\", "temp", "*.txt")` 创建文件时，可能会无效，但它可以作为搜索字符串有效。</span><span class="sxs-lookup"><span data-stu-id="de775-738">For example, while `Path.Join("c:\\", "temp", "*.txt")` might be invalid when creating a file, it is valid as a search string.</span></span> <span data-ttu-id="de775-739">因此，该 `Join` 方法成功解释了此方法。</span><span class="sxs-lookup"><span data-stu-id="de775-739">The `Join` method therefore successfully interprets it.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Join">
      <MemberSignature Language="C#" Value="public static string Join (string? path1, string? path2, string? path3, string? path4);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Join(string path1, string path2, string path3, string path4) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.Join(System.String,System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Join (path1 As String, path2 As String, path3 As String, path4 As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Join(System::String ^ path1, System::String ^ path2, System::String ^ path3, System::String ^ path4);" />
      <MemberSignature Language="F#" Value="static member Join : string * string * string * string -&gt; string" Usage="System.IO.Path.Join (path1, path2, path3, path4)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path1" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;net-5.0" />
        <Parameter Name="path2" Type="System.String" Index="1" FrameworkAlternate="netcore-3.0;netcore-3.1;net-5.0" />
        <Parameter Name="path3" Type="System.String" Index="2" FrameworkAlternate="netcore-3.0;netcore-3.1;net-5.0" />
        <Parameter Name="path4" Type="System.String" Index="3" FrameworkAlternate="netcore-3.0;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="path1"><span data-ttu-id="de775-740">要联接的第一个路径。</span><span class="sxs-lookup"><span data-stu-id="de775-740">The first path to join.</span></span></param>
        <param name="path2"><span data-ttu-id="de775-741">要联接的第二个路径。</span><span class="sxs-lookup"><span data-stu-id="de775-741">The second path to join.</span></span></param>
        <param name="path3"><span data-ttu-id="de775-742">要联接的第三个路径。</span><span class="sxs-lookup"><span data-stu-id="de775-742">The third path to join.</span></span></param>
        <param name="path4"><span data-ttu-id="de775-743">要联接的第四个路径。</span><span class="sxs-lookup"><span data-stu-id="de775-743">The fourth path to join.</span></span></param>
        <summary><span data-ttu-id="de775-744">将四个路径连接到一个路径中。</span><span class="sxs-lookup"><span data-stu-id="de775-744">Concatenates four paths into a single path.</span></span></summary>
        <returns><span data-ttu-id="de775-745">连接的路径。</span><span class="sxs-lookup"><span data-stu-id="de775-745">The concatenated path.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="de775-746">此方法只连接 `path` 、 `path2` `path3` 和， `path4` 然后在任何路径组件之间添加目录分隔符（如果尚未提供）。</span><span class="sxs-lookup"><span data-stu-id="de775-746">This method simply concatenates `path`, `path2`, `path3` and `path4` and adds a directory separator character between any of the path components if one is not already present.</span></span> <span data-ttu-id="de775-747">如果 `path1` 、 `path2` 、 `path3` 或参数的长度 `path4` 为零，则该方法将连接剩余的参数。</span><span class="sxs-lookup"><span data-stu-id="de775-747">If the length of any of `path1`, `path2`, `path3` or `path4` argument is zero, the method concatenates the remaining arguments.</span></span> <span data-ttu-id="de775-748">如果生成的串联字符串的长度为零，则该方法将返回 <xref:System.String.Empty?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="de775-748">If the length of the resulting concatenated string is zero, the method returns <xref:System.String.Empty?displayProperty=nameWithType>.</span></span>

<span data-ttu-id="de775-749">如果 `path1` 或 `path2` 以 `path3` 不适合目标平台的路径分隔符结尾，则该 `Join` 方法将保留原始路径分隔符并追加受支持的字符分隔符。</span><span class="sxs-lookup"><span data-stu-id="de775-749">If `path1` or `path2` or `path3` ends in a path separator character that is not appropriate for the target platform, the `Join` method preserves the original path separator character and appends the supported one.</span></span> <span data-ttu-id="de775-750">此问题在使用 Windows 反斜杠的硬编码路径 ( " \\ " ) 字符，该字符在基于 Unix 的系统上未被识别为路径分隔符。</span><span class="sxs-lookup"><span data-stu-id="de775-750">This issue arises in hard-coded paths that use the Windows backslash ("\\") character, which is not recognized as a path separator on Unix-based systems.</span></span> <span data-ttu-id="de775-751">若要解决此问题，可以：</span><span class="sxs-lookup"><span data-stu-id="de775-751">To work around this issue, you can:</span></span>

- <span data-ttu-id="de775-752">检索属性的值， <xref:System.IO.Path.DirectorySeparatorChar?displayProperty=nameWithType> 而不是对目录分隔符进行硬编码。</span><span class="sxs-lookup"><span data-stu-id="de775-752">Retrieve the value of the <xref:System.IO.Path.DirectorySeparatorChar?displayProperty=nameWithType> property rather than hard-coding a directory separator character.</span></span>

- <span data-ttu-id="de775-753">使用正斜杠 ( "/" ) 作为目录分隔符。</span><span class="sxs-lookup"><span data-stu-id="de775-753">Use a forward slash ("/") as the directory separator character.</span></span> <span data-ttu-id="de775-754">此字符由 <xref:System.IO.Path.DirectorySeparatorChar?displayProperty=nameWithType> 基于 Unix 的系统上的属性和 <xref:System.IO.Path.AltDirectorySeparatorChar?displayProperty=nameWithType> Windows 系统上的属性返回。</span><span class="sxs-lookup"><span data-stu-id="de775-754">This character is returned by the <xref:System.IO.Path.DirectorySeparatorChar?displayProperty=nameWithType> property on Unix-based systems and by the <xref:System.IO.Path.AltDirectorySeparatorChar?displayProperty=nameWithType> property on Windows systems.</span></span>

<span data-ttu-id="de775-755">与 <xref:System.IO.Path.Combine%2A> 方法不同， <xref:System.IO.Path.Join%2A> 方法不会尝试将返回的路径作为根。</span><span class="sxs-lookup"><span data-stu-id="de775-755">Unlike the <xref:System.IO.Path.Combine%2A> method, the <xref:System.IO.Path.Join%2A> method does not attempt to root the returned path.</span></span> <span data-ttu-id="de775-756"> (也就是说，如果 `path2` 或 `path2` 或 `path3` 是绝对路径，则该方法将 `Join` 不会丢弃先前的路径，因为 <xref:System.IO.Path.Combine%2A> 方法会。</span><span class="sxs-lookup"><span data-stu-id="de775-756">(That is, if `path2` or `path2` or `path3` is an absolute path, the `Join` method does not discard the previous paths as the <xref:System.IO.Path.Combine%2A> method does.</span></span>

<span data-ttu-id="de775-757">不是对目录和文件名无效的所有字符都解释为可接受的 `Join` 方法，因为您可以使用这些字符搜索通配符。</span><span class="sxs-lookup"><span data-stu-id="de775-757">Not all invalid characters for directory and file names are interpreted as unacceptable by the `Join` method, because you can use these characters for search wildcard characters.</span></span> <span data-ttu-id="de775-758">例如，在 `Path.Join("c:\\", "temp", "*.txt")` 创建文件时，可能会无效，但它可以作为搜索字符串有效。</span><span class="sxs-lookup"><span data-stu-id="de775-758">For example, while `Path.Join("c:\\", "temp", "*.txt")` might be invalid when creating a file, it is valid as a search string.</span></span> <span data-ttu-id="de775-759">因此，该 `Join` 方法成功解释了此方法。</span><span class="sxs-lookup"><span data-stu-id="de775-759">The `Join` method therefore successfully interprets it.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PathSeparator">
      <MemberSignature Language="C#" Value="public static readonly char PathSeparator;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly char PathSeparator" />
      <MemberSignature Language="DocId" Value="F:System.IO.Path.PathSeparator" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PathSeparator As Char " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly char PathSeparator;" />
      <MemberSignature Language="F#" Value=" staticval mutable PathSeparator : char" Usage="System.IO.Path.PathSeparator" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="de775-760">用于在环境变量中分隔路径字符串的平台特定的分隔符。</span><span class="sxs-lookup"><span data-stu-id="de775-760">A platform-specific separator character used to separate path strings in environment variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="de775-761">在基于 Windows 的桌面平台上，此字段的值为分号 (; 默认情况下 ) ，但在其他平台上可能会有所不同。</span><span class="sxs-lookup"><span data-stu-id="de775-761">On Windows-based desktop platforms, the value of this field is the semicolon (;) by default, but might vary on other platforms.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="de775-762">下面的示例演示如何使用 `PathSeparator` 字段。</span><span class="sxs-lookup"><span data-stu-id="de775-762">The following example demonstrates the use of the `PathSeparator` field.</span></span>  
  
 [!code-cpp[System.IO.Path Members#13](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.Path Members/CPP/pathmembers.cpp#13)]
 [!code-csharp[System.IO.Path Members#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Path Members/CS/pathmembers.cs#13)]
 [!code-vb[System.IO.Path Members#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Path Members/VB/pathmembers.vb#13)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/standard/io/"><span data-ttu-id="de775-763">文件和流 I/O</span><span class="sxs-lookup"><span data-stu-id="de775-763">File and Stream I/O</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file"><span data-ttu-id="de775-764">如何：从文件中读取文本</span><span class="sxs-lookup"><span data-stu-id="de775-764">How to: Read Text from a File</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file"><span data-ttu-id="de775-765">如何：将文本写入文件</span><span class="sxs-lookup"><span data-stu-id="de775-765">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="TrimEndingDirectorySeparator">
      <MemberSignature Language="C#" Value="public static ReadOnlySpan&lt;char&gt; TrimEndingDirectorySeparator (ReadOnlySpan&lt;char&gt; path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ReadOnlySpan`1&lt;char&gt; TrimEndingDirectorySeparator(valuetype System.ReadOnlySpan`1&lt;char&gt; path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.TrimEndingDirectorySeparator(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TrimEndingDirectorySeparator (path As ReadOnlySpan(Of Char)) As ReadOnlySpan(Of Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static ReadOnlySpan&lt;char&gt; TrimEndingDirectorySeparator(ReadOnlySpan&lt;char&gt; path);" />
      <MemberSignature Language="F#" Value="static member TrimEndingDirectorySeparator : ReadOnlySpan&lt;char&gt; -&gt; ReadOnlySpan&lt;char&gt;" Usage="System.IO.Path.TrimEndingDirectorySeparator path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;System.Char&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="de775-766">要剪裁的路径。</span><span class="sxs-lookup"><span data-stu-id="de775-766">The path to trim.</span></span></param>
        <summary><span data-ttu-id="de775-767">剪裁一个超出指定路径根目录的尾随目录分隔符。</span><span class="sxs-lookup"><span data-stu-id="de775-767">Trims one trailing directory separator beyond the root of the specified path.</span></span></summary>
        <returns><span data-ttu-id="de775-768">不带任何尾随目录分隔符的 <paramref name="path" />。</span><span class="sxs-lookup"><span data-stu-id="de775-768">The <paramref name="path" /> without any trailing directory separators.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TrimEndingDirectorySeparator">
      <MemberSignature Language="C#" Value="public static string TrimEndingDirectorySeparator (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string TrimEndingDirectorySeparator(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.TrimEndingDirectorySeparator(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TrimEndingDirectorySeparator (path As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ TrimEndingDirectorySeparator(System::String ^ path);" />
      <MemberSignature Language="F#" Value="static member TrimEndingDirectorySeparator : string -&gt; string" Usage="System.IO.Path.TrimEndingDirectorySeparator path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="de775-769">要剪裁的路径。</span><span class="sxs-lookup"><span data-stu-id="de775-769">The path to trim.</span></span></param>
        <summary><span data-ttu-id="de775-770">剪裁一个超出指定路径根目录的尾随目录分隔符。</span><span class="sxs-lookup"><span data-stu-id="de775-770">Trims one trailing directory separator beyond the root of the specified path.</span></span></summary>
        <returns><span data-ttu-id="de775-771">不带任何尾随目录分隔符的 <paramref name="path" />。</span><span class="sxs-lookup"><span data-stu-id="de775-771">The <paramref name="path" /> without any trailing directory separators.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="TryJoin">
      <Docs>
        <summary><span data-ttu-id="de775-772">尝试将各个路径组件连接到预分配的字符范围，并返回一个值指示操作是否成功。</span><span class="sxs-lookup"><span data-stu-id="de775-772">Attempts to concatenate individual path components to a preallocated character span, and returns a value that indicates whether the operation succeeded.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
 
## Remarks  

<span data-ttu-id="de775-773">目标字符跨度必须足够大才能容纳连接的路径。</span><span class="sxs-lookup"><span data-stu-id="de775-773">The destination character span must be large enough to hold the concatenated path.</span></span> <span data-ttu-id="de775-774">然后，可以通过调用方法来检索串联路径 <xref:System.Span%601.Slice%2A?displayProperty=nameWithType> ，如下面的示例所示。</span><span class="sxs-lookup"><span data-stu-id="de775-774">You can then retrieve the concatenated path by calling the <xref:System.Span%601.Slice%2A?displayProperty=nameWithType> method, as the following example illustrates.</span></span>

[!code-csharp[IsPathRooted](~/samples/snippets/csharp/api/system.IO/Path/TryJoin/program.cs)]

         ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="TryJoin">
      <MemberSignature Language="C#" Value="public static bool TryJoin (ReadOnlySpan&lt;char&gt; path1, ReadOnlySpan&lt;char&gt; path2, Span&lt;char&gt; destination, out int charsWritten);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryJoin(valuetype System.ReadOnlySpan`1&lt;char&gt; path1, valuetype System.ReadOnlySpan`1&lt;char&gt; path2, valuetype System.Span`1&lt;char&gt; destination, [out] int32&amp; charsWritten) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.TryJoin(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.Span{System.Char},System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryJoin (path1 As ReadOnlySpan(Of Char), path2 As ReadOnlySpan(Of Char), destination As Span(Of Char), ByRef charsWritten As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryJoin(ReadOnlySpan&lt;char&gt; path1, ReadOnlySpan&lt;char&gt; path2, Span&lt;char&gt; destination, [Runtime::InteropServices::Out] int % charsWritten);" />
      <MemberSignature Language="F#" Value="static member TryJoin : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;char&gt; * Span&lt;char&gt; * int -&gt; bool" Usage="System.IO.Path.TryJoin (path1, path2, destination, charsWritten)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path1" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="path2" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="destination" Type="System.Span&lt;System.Char&gt;" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="charsWritten" Type="System.Int32" RefType="out" Index="3" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="path1"><span data-ttu-id="de775-775">包含要加入的第一个路径的字符范围。</span><span class="sxs-lookup"><span data-stu-id="de775-775">A character span that contains the first path to join.</span></span></param>
        <param name="path2"><span data-ttu-id="de775-776">包含要加入的第二个路径的字符范围。</span><span class="sxs-lookup"><span data-stu-id="de775-776">A character span that contains the second path to join.</span></span></param>
        <param name="destination"><span data-ttu-id="de775-777">用于保存连接的路径的字符范围。</span><span class="sxs-lookup"><span data-stu-id="de775-777">A character span to hold the concatenated path.</span></span></param>
        <param name="charsWritten"><span data-ttu-id="de775-778">方法返回时，为一个指示写入 <paramref name="destination" /> 的字符数的值。</span><span class="sxs-lookup"><span data-stu-id="de775-778">When the method returns, a value that indicates the number of characters written to the <paramref name="destination" />.</span></span></param>
        <summary><span data-ttu-id="de775-779">尝试将两个路径组件连接到一个预分配的字符范围，并返回一个值，该值指示操作是否成功。</span><span class="sxs-lookup"><span data-stu-id="de775-779">Attempts to concatenate two path components to a single preallocated character span, and returns a value that indicates whether the operation succeeded.</span></span></summary>
        <returns><span data-ttu-id="de775-780">如果此串联运算成功，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="de775-780"><see langword="true" /> if the concatenation operation is successful; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  

## Remarks

<span data-ttu-id="de775-781">`destination` 必须足够大才能容纳连接的路径。</span><span class="sxs-lookup"><span data-stu-id="de775-781">`destination` must be large enough to hold the concatenated path.</span></span> <span data-ttu-id="de775-782">然后，可以通过调用方法来检索串联路径 <xref:System.Span%601.Slice%2A?displayProperty=nameWithType> ，如示例所示。</span><span class="sxs-lookup"><span data-stu-id="de775-782">You can then retrieve the concatenated path by calling the <xref:System.Span%601.Slice%2A?displayProperty=nameWithType> method, as the example illustrates.</span></span>

         ]]></format>
        </remarks>
        <related type="article" href="/dotnet/standard/io/file-path-formats"><span data-ttu-id="de775-783">Windows 系统中的文件路径格式</span><span class="sxs-lookup"><span data-stu-id="de775-783">File path formats on Windows systems</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="TryJoin">
      <MemberSignature Language="C#" Value="public static bool TryJoin (ReadOnlySpan&lt;char&gt; path1, ReadOnlySpan&lt;char&gt; path2, ReadOnlySpan&lt;char&gt; path3, Span&lt;char&gt; destination, out int charsWritten);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryJoin(valuetype System.ReadOnlySpan`1&lt;char&gt; path1, valuetype System.ReadOnlySpan`1&lt;char&gt; path2, valuetype System.ReadOnlySpan`1&lt;char&gt; path3, valuetype System.Span`1&lt;char&gt; destination, [out] int32&amp; charsWritten) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Path.TryJoin(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.Span{System.Char},System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryJoin (path1 As ReadOnlySpan(Of Char), path2 As ReadOnlySpan(Of Char), path3 As ReadOnlySpan(Of Char), destination As Span(Of Char), ByRef charsWritten As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryJoin(ReadOnlySpan&lt;char&gt; path1, ReadOnlySpan&lt;char&gt; path2, ReadOnlySpan&lt;char&gt; path3, Span&lt;char&gt; destination, [Runtime::InteropServices::Out] int % charsWritten);" />
      <MemberSignature Language="F#" Value="static member TryJoin : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;char&gt; * Span&lt;char&gt; * int -&gt; bool" Usage="System.IO.Path.TryJoin (path1, path2, path3, destination, charsWritten)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path1" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="path2" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="path3" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="destination" Type="System.Span&lt;System.Char&gt;" Index="3" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="charsWritten" Type="System.Int32" RefType="out" Index="4" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="path1"><span data-ttu-id="de775-784">包含要加入的第一个路径的字符范围。</span><span class="sxs-lookup"><span data-stu-id="de775-784">A character span that contains the first path to join.</span></span></param>
        <param name="path2"><span data-ttu-id="de775-785">包含要加入的第二个路径的字符范围。</span><span class="sxs-lookup"><span data-stu-id="de775-785">A character span that contains the second path to join.</span></span></param>
        <param name="path3"><span data-ttu-id="de775-786">包含要加入的第三个路径的字符范围。</span><span class="sxs-lookup"><span data-stu-id="de775-786">A character span that contains the third path to join.</span></span></param>
        <param name="destination"><span data-ttu-id="de775-787">用于保存连接的路径的字符范围。</span><span class="sxs-lookup"><span data-stu-id="de775-787">A character span to hold the concatenated path.</span></span></param>
        <param name="charsWritten"><span data-ttu-id="de775-788">方法返回时，为一个指示写入 <paramref name="destination" /> 的字符数的值。</span><span class="sxs-lookup"><span data-stu-id="de775-788">When the method returns, a value that indicates the number of characters written to the <paramref name="destination" />.</span></span></param>
        <summary><span data-ttu-id="de775-789">尝试将两个路径组件连接到一个预分配的字符范围，并返回一个值，该值指示操作是否成功。</span><span class="sxs-lookup"><span data-stu-id="de775-789">Attempts to concatenate two path components to a single preallocated character span, and returns a value that indicates whether the operation succeeded.</span></span></summary>
        <returns><span data-ttu-id="de775-790">如果此串联运算成功，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="de775-790"><see langword="true" /> if the concatenation operation is successful; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  

## Remarks

<span data-ttu-id="de775-791">`destination` 必须足够大才能容纳连接的路径。</span><span class="sxs-lookup"><span data-stu-id="de775-791">`destination` must be large enough to hold the concatenated path.</span></span> <span data-ttu-id="de775-792">然后，可以通过调用方法来检索串联路径 <xref:System.Span%601.Slice%2A?displayProperty=nameWithType> ，如示例所示。</span><span class="sxs-lookup"><span data-stu-id="de775-792">You can then retrieve the concatenated path by calling the <xref:System.Span%601.Slice%2A?displayProperty=nameWithType> method, as the example illustrates.</span></span>

         ]]></format>
        </remarks>
        <related type="article" href="/dotnet/standard/io/file-path-formats"><span data-ttu-id="de775-793">Windows 系统中的文件路径格式</span><span class="sxs-lookup"><span data-stu-id="de775-793">File path formats on Windows systems</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="VolumeSeparatorChar">
      <MemberSignature Language="C#" Value="public static readonly char VolumeSeparatorChar;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly char VolumeSeparatorChar" />
      <MemberSignature Language="DocId" Value="F:System.IO.Path.VolumeSeparatorChar" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly VolumeSeparatorChar As Char " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly char VolumeSeparatorChar;" />
      <MemberSignature Language="F#" Value=" staticval mutable VolumeSeparatorChar : char" Usage="System.IO.Path.VolumeSeparatorChar" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="de775-794">提供平台特定的卷分隔符。</span><span class="sxs-lookup"><span data-stu-id="de775-794">Provides a platform-specific volume separator character.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="de775-795">此字段的值是一个冒号 (：在 Windows 和 Macintosh 上 ) ，以及 UNIX 操作系统上的斜杠 (/) 。</span><span class="sxs-lookup"><span data-stu-id="de775-795">The value of this field is a colon (:) on Windows and Macintosh, and a slash (/) on UNIX operating systems.</span></span> <span data-ttu-id="de775-796">这对于分析路径（如 "c：\windows" 或 "MacVolume： System Folder"）最为有用。</span><span class="sxs-lookup"><span data-stu-id="de775-796">This is most useful for parsing paths such as "c:\windows" or "MacVolume:System Folder".</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="de775-797">下面的示例演示如何使用 `VolumeSeparatorChar` 字段。</span><span class="sxs-lookup"><span data-stu-id="de775-797">The following example demonstrates the use of the `VolumeSeparatorChar` field.</span></span>  
  
 [!code-cpp[System.IO.Path Members#13](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.Path Members/CPP/pathmembers.cpp#13)]
 [!code-csharp[System.IO.Path Members#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Path Members/CS/pathmembers.cs#13)]
 [!code-vb[System.IO.Path Members#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Path Members/VB/pathmembers.vb#13)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/standard/io/"><span data-ttu-id="de775-798">文件和流 I/O</span><span class="sxs-lookup"><span data-stu-id="de775-798">File and Stream I/O</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file"><span data-ttu-id="de775-799">如何：从文件中读取文本</span><span class="sxs-lookup"><span data-stu-id="de775-799">How to: Read Text from a File</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file"><span data-ttu-id="de775-800">如何：将文本写入文件</span><span class="sxs-lookup"><span data-stu-id="de775-800">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>
