<Type Name="BinaryReader" FullName="System.IO.BinaryReader">
  <Metadata><Meta Name="ms.openlocfilehash" Value="b48c367a7d4b3268e956e60ddb0dfb632a54517a" /><Meta Name="ms.sourcegitcommit" Value="c982ad9e10a242d90f1e631b5981570f9e5d9f34" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/10/2020" /><Meta Name="ms.locfileid" Value="89994588" /></Metadata><TypeSignature Language="C#" Value="public class BinaryReader : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit BinaryReader extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.IO.BinaryReader" />
  <TypeSignature Language="VB.NET" Value="Public Class BinaryReader&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class BinaryReader : IDisposable" />
  <TypeSignature Language="F#" Value="type BinaryReader = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.IO</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Extensions</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="mscorlib" FromVersion="4.0.0.0" To="System.IO" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0" />
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Runtime" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
    <TypeForwarding From="System.IO" FromVersion="5.0.0.0" To="System.Runtime" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
    <TypeForwarding From="System.Runtime.Extensions" FromVersion="5.0.0.0" To="System.Runtime" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
    <TypeForwarding From="System.IO" FromVersion="4.2.0.0" To="System.Runtime.Extensions" ToVersion="4.2.0.0" FrameworkAlternate="netcore-2.0" />
    <TypeForwarding From="System.IO" FromVersion="4.2.1.0" To="System.Runtime.Extensions" ToVersion="4.2.1.0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0" />
    <TypeForwarding From="System.IO" FromVersion="4.2.2.0" To="System.Runtime.Extensions" ToVersion="4.2.2.0" FrameworkAlternate="netcore-3.1" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName Language="C#">[System.Runtime.InteropServices.ComVisible(true)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.ComVisible(true)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="b67fc-101">用特定的编码将基元数据类型读作二进制值。</span><span class="sxs-lookup"><span data-stu-id="b67fc-101">Reads primitive data types as binary values in a specific encoding.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b67fc-102"><xref:System.IO.BinaryReader>类提供简化从流中读取基元数据类型的方法。</span><span class="sxs-lookup"><span data-stu-id="b67fc-102">The <xref:System.IO.BinaryReader> class provides methods that simplify reading primitive data types from a stream.</span></span> <span data-ttu-id="b67fc-103">例如，可以使用 <xref:System.IO.BinaryReader.ReadBoolean%2A> 方法将下一个字节作为布尔值读取，并将流中的当前位置提升一个字节。</span><span class="sxs-lookup"><span data-stu-id="b67fc-103">For example, you can use the <xref:System.IO.BinaryReader.ReadBoolean%2A> method to read the next byte as a Boolean value and advance the current position in the stream by one byte.</span></span> <span data-ttu-id="b67fc-104">类包含支持不同数据类型的 read 方法。</span><span class="sxs-lookup"><span data-stu-id="b67fc-104">The class includes read methods that support different data types.</span></span>  
  
 <span data-ttu-id="b67fc-105">在创建类的新实例时 <xref:System.IO.BinaryReader> ，提供从中读取的流，还可以选择指定编码的类型以及是否在释放对象后保持流处于打开状态 <xref:System.IO.BinaryReader> 。</span><span class="sxs-lookup"><span data-stu-id="b67fc-105">When you create a new instance of the <xref:System.IO.BinaryReader> class, you provide the stream to read from, and optionally specify the type of encoding and whether to leave the stream open after disposing the <xref:System.IO.BinaryReader> object.</span></span> <span data-ttu-id="b67fc-106">如果未指定编码类型，将使用 UTF-8。</span><span class="sxs-lookup"><span data-stu-id="b67fc-106">If you do not specify an encoding type, UTF-8 is used.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="b67fc-107">此类型实现 <xref:System.IDisposable> 接口。</span><span class="sxs-lookup"><span data-stu-id="b67fc-107">This type implements the <xref:System.IDisposable> interface.</span></span> <span data-ttu-id="b67fc-108">在使用完类型后，您应直接或间接释放类型。</span><span class="sxs-lookup"><span data-stu-id="b67fc-108">When you have finished using the type, you should dispose of it either directly or indirectly.</span></span> <span data-ttu-id="b67fc-109">若要直接释放类型，请在 `try`/`catch` 块中调用其 <xref:System.IDisposable.Dispose%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="b67fc-109">To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block.</span></span> <span data-ttu-id="b67fc-110">若要间接释放类型，请使用 `using`（在 C# 中）或 `Using`（在 Visual Basic 中）等语言构造。</span><span class="sxs-lookup"><span data-stu-id="b67fc-110">To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic).</span></span> <span data-ttu-id="b67fc-111">有关详细信息，请参阅 <xref:System.IDisposable> 接口主题中的“使用实现 IDisposable 的对象”一节。</span><span class="sxs-lookup"><span data-stu-id="b67fc-111">For more information, see the "Using an Object that Implements IDisposable" section in the <xref:System.IDisposable> interface topic.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b67fc-112">下面的代码示例演示如何在文件中存储和检索应用程序设置。</span><span class="sxs-lookup"><span data-stu-id="b67fc-112">The following code example demonstrates how to store and retrieve application settings in a file.</span></span>  
  
 [!code-csharp[System.IO.BinaryReaderWriter#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter/CS/source.cs#1)]
 [!code-vb[System.IO.BinaryReaderWriter#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="/dotnet/standard/io/how-to-read-and-write-to-a-newly-created-data-file"><span data-ttu-id="b67fc-113">如何：对新建的数据文件进行读取和写入</span><span class="sxs-lookup"><span data-stu-id="b67fc-113">How to: Read and Write to a Newly Created Data File</span></span></related>
    <related type="Article" href="/dotnet/standard/io/"><span data-ttu-id="b67fc-114">文件和流 I/O</span><span class="sxs-lookup"><span data-stu-id="b67fc-114">File and Stream I/O</span></span></related>
    <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file"><span data-ttu-id="b67fc-115">如何：从文件中读取文本</span><span class="sxs-lookup"><span data-stu-id="b67fc-115">How to: Read Text from a File</span></span></related>
    <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file"><span data-ttu-id="b67fc-116">如何：将文本写入文件</span><span class="sxs-lookup"><span data-stu-id="b67fc-116">How to: Write Text to a File</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b67fc-117">初始化 <see cref="T:System.IO.BinaryReader" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="b67fc-117">Initializes a new instance of the <see cref="T:System.IO.BinaryReader" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BinaryReader (System.IO.Stream input);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream input) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.BinaryReader.#ctor(System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (input As Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; BinaryReader(System::IO::Stream ^ input);" />
      <MemberSignature Language="F#" Value="new System.IO.BinaryReader : System.IO.Stream -&gt; System.IO.BinaryReader" Usage="new System.IO.BinaryReader input" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="input" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="input"><span data-ttu-id="b67fc-118">输入流。</span><span class="sxs-lookup"><span data-stu-id="b67fc-118">The input stream.</span></span></param>
        <summary><span data-ttu-id="b67fc-119">基于所指定的流和特定的 UTF-8 编码，初始化 <see cref="T:System.IO.BinaryReader" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="b67fc-119">Initializes a new instance of the <see cref="T:System.IO.BinaryReader" /> class based on the specified stream and using UTF-8 encoding.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b67fc-120">有关常见 i/o 任务的列表，请参阅 [常见 I/o 任务](/dotnet/standard/io/common-i-o-tasks)。</span><span class="sxs-lookup"><span data-stu-id="b67fc-120">For a list of common I/O tasks, see [Common I/O Tasks](/dotnet/standard/io/common-i-o-tasks).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b67fc-121">下面的代码示例演示如何在文件中存储和检索应用程序设置。</span><span class="sxs-lookup"><span data-stu-id="b67fc-121">The following code example demonstrates how to store and retrieve application settings in a file.</span></span>  
  
 [!code-csharp[System.IO.BinaryReaderWriter#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter/CS/source.cs#1)]
 [!code-vb[System.IO.BinaryReaderWriter#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b67fc-122">该流不支持读取，为<see langword="null" /> 或已关闭。</span><span class="sxs-lookup"><span data-stu-id="b67fc-122">The stream does not support reading, is <see langword="null" />, or is already closed.</span></span></exception>
        <altmember cref="T:System.Text.UTF8Encoding" />
        <related type="Article" href="/dotnet/standard/io/"><span data-ttu-id="b67fc-123">文件和流 I/O</span><span class="sxs-lookup"><span data-stu-id="b67fc-123">File and Stream I/O</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file"><span data-ttu-id="b67fc-124">如何：从文件中读取文本</span><span class="sxs-lookup"><span data-stu-id="b67fc-124">How to: Read Text from a File</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file"><span data-ttu-id="b67fc-125">如何：将文本写入文件</span><span class="sxs-lookup"><span data-stu-id="b67fc-125">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BinaryReader (System.IO.Stream input, System.Text.Encoding encoding);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream input, class System.Text.Encoding encoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.BinaryReader.#ctor(System.IO.Stream,System.Text.Encoding)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (input As Stream, encoding As Encoding)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; BinaryReader(System::IO::Stream ^ input, System::Text::Encoding ^ encoding);" />
      <MemberSignature Language="F#" Value="new System.IO.BinaryReader : System.IO.Stream * System.Text.Encoding -&gt; System.IO.BinaryReader" Usage="new System.IO.BinaryReader (input, encoding)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="input" Type="System.IO.Stream" />
        <Parameter Name="encoding" Type="System.Text.Encoding" />
      </Parameters>
      <Docs>
        <param name="input"><span data-ttu-id="b67fc-126">输入流。</span><span class="sxs-lookup"><span data-stu-id="b67fc-126">The input stream.</span></span></param>
        <param name="encoding"><span data-ttu-id="b67fc-127">要使用的字符编码。</span><span class="sxs-lookup"><span data-stu-id="b67fc-127">The character encoding to use.</span></span></param>
        <summary><span data-ttu-id="b67fc-128">基于所指定的流和特定的字符编码，初始化 <see cref="T:System.IO.BinaryReader" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="b67fc-128">Initializes a new instance of the <see cref="T:System.IO.BinaryReader" /> class based on the specified stream and character encoding.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b67fc-129">有关常见 i/o 任务的列表，请参阅 [常见 I/o 任务](/dotnet/standard/io/common-i-o-tasks)。</span><span class="sxs-lookup"><span data-stu-id="b67fc-129">For a list of common I/O tasks, see [Common I/O Tasks](/dotnet/standard/io/common-i-o-tasks).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b67fc-130">该流不支持读取，为<see langword="null" /> 或已关闭。</span><span class="sxs-lookup"><span data-stu-id="b67fc-130">The stream does not support reading, is <see langword="null" />, or is already closed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b67fc-131"><paramref name="encoding" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b67fc-131"><paramref name="encoding" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="/dotnet/standard/io/"><span data-ttu-id="b67fc-132">文件和流 I/O</span><span class="sxs-lookup"><span data-stu-id="b67fc-132">File and Stream I/O</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file"><span data-ttu-id="b67fc-133">如何：从文件中读取文本</span><span class="sxs-lookup"><span data-stu-id="b67fc-133">How to: Read Text from a File</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file"><span data-ttu-id="b67fc-134">如何：将文本写入文件</span><span class="sxs-lookup"><span data-stu-id="b67fc-134">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BinaryReader (System.IO.Stream input, System.Text.Encoding encoding, bool leaveOpen);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream input, class System.Text.Encoding encoding, bool leaveOpen) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.BinaryReader.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (input As Stream, encoding As Encoding, leaveOpen As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; BinaryReader(System::IO::Stream ^ input, System::Text::Encoding ^ encoding, bool leaveOpen);" />
      <MemberSignature Language="F#" Value="new System.IO.BinaryReader : System.IO.Stream * System.Text.Encoding * bool -&gt; System.IO.BinaryReader" Usage="new System.IO.BinaryReader (input, encoding, leaveOpen)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="input" Type="System.IO.Stream" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="encoding" Type="System.Text.Encoding" Index="1" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="leaveOpen" Type="System.Boolean" Index="2" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="input"><span data-ttu-id="b67fc-135">输入流。</span><span class="sxs-lookup"><span data-stu-id="b67fc-135">The input stream.</span></span></param>
        <param name="encoding"><span data-ttu-id="b67fc-136">要使用的字符编码。</span><span class="sxs-lookup"><span data-stu-id="b67fc-136">The character encoding to use.</span></span></param>
        <param name="leaveOpen"><span data-ttu-id="b67fc-137">如果在释放 <see cref="T:System.IO.BinaryReader" /> 对象后保持流处于打开状态，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="b67fc-137"><see langword="true" /> to leave the stream open after the <see cref="T:System.IO.BinaryReader" /> object is disposed; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="b67fc-138">基于所提供的流和特定的字符编码，初始化 <see cref="T:System.IO.BinaryReader" /> 类的新实例，有选择性的打开流。</span><span class="sxs-lookup"><span data-stu-id="b67fc-138">Initializes a new instance of the <see cref="T:System.IO.BinaryReader" /> class based on the specified stream and character encoding, and optionally leaves the stream open.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b67fc-139">该流不支持读取，为<see langword="null" /> 或已关闭。</span><span class="sxs-lookup"><span data-stu-id="b67fc-139">The stream does not support reading, is <see langword="null" />, or is already closed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b67fc-140"><paramref name="encoding" /> 或 <paramref name="input" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b67fc-140"><paramref name="encoding" /> or <paramref name="input" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="/dotnet/standard/io/"><span data-ttu-id="b67fc-141">文件和流 I/O</span><span class="sxs-lookup"><span data-stu-id="b67fc-141">File and Stream I/O</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file"><span data-ttu-id="b67fc-142">如何：从文件中读取文本</span><span class="sxs-lookup"><span data-stu-id="b67fc-142">How to: Read Text from a File</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file"><span data-ttu-id="b67fc-143">如何：将文本写入文件</span><span class="sxs-lookup"><span data-stu-id="b67fc-143">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="BaseStream">
      <MemberSignature Language="C#" Value="public virtual System.IO.Stream BaseStream { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IO.Stream BaseStream" />
      <MemberSignature Language="DocId" Value="P:System.IO.BinaryReader.BaseStream" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property BaseStream As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::IO::Stream ^ BaseStream { System::IO::Stream ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.BaseStream : System.IO.Stream" Usage="System.IO.BinaryReader.BaseStream" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b67fc-144">公开对 <see cref="T:System.IO.BinaryReader" /> 的基础流的访问。</span><span class="sxs-lookup"><span data-stu-id="b67fc-144">Exposes access to the underlying stream of the <see cref="T:System.IO.BinaryReader" />.</span></span></summary>
        <value><span data-ttu-id="b67fc-145">与 <see langword="BinaryReader" /> 关联的基础流。</span><span class="sxs-lookup"><span data-stu-id="b67fc-145">The underlying stream associated with the <see langword="BinaryReader" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!CAUTION]
>  <span data-ttu-id="b67fc-146">在读取或使用时使用基础流 `BinaryReader` 可能会导致数据丢失和损坏。</span><span class="sxs-lookup"><span data-stu-id="b67fc-146">Using the underlying stream while reading or while using the `BinaryReader` can cause data loss and corruption.</span></span> <span data-ttu-id="b67fc-147">例如，可能会多次读取相同的字节，可能会跳过字节或字符读取。</span><span class="sxs-lookup"><span data-stu-id="b67fc-147">For example, the same bytes might be read more than once, bytes might be skipped, or character reading might become unpredictable.</span></span>  
  
 <span data-ttu-id="b67fc-148">有关常见 i/o 任务的列表，请参阅 [常见 I/o 任务](/dotnet/standard/io/common-i-o-tasks)。</span><span class="sxs-lookup"><span data-stu-id="b67fc-148">For a list of common I/O tasks, see [Common I/O Tasks](/dotnet/standard/io/common-i-o-tasks).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b67fc-149">下面的代码示例演示如何使用类的和类，在内存中读取和写入 `Double` 数据 `BinaryReader` <xref:System.IO.BinaryWriter> <xref:System.IO.MemoryStream> 。</span><span class="sxs-lookup"><span data-stu-id="b67fc-149">The following code example shows how to read and write `Double` data to memory by using the `BinaryReader` and <xref:System.IO.BinaryWriter> classes on top of the <xref:System.IO.MemoryStream> class.</span></span> <span data-ttu-id="b67fc-150">`MemoryStream` 仅读取和写入 `Byte` 数据。</span><span class="sxs-lookup"><span data-stu-id="b67fc-150">`MemoryStream` only reads and writes `Byte` data.</span></span>  
  
 [!code-cpp[System.IO.BinaryReaderWriter.RWDouble#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter.RWDouble/CPP/rwdouble.cpp#1)]
 [!code-csharp[System.IO.BinaryReaderWriter.RWDouble#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter.RWDouble/CS/rwdouble.cs#1)]
 [!code-vb[System.IO.BinaryReaderWriter.RWDouble#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter.RWDouble/VB/rwdouble.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/standard/io/"><span data-ttu-id="b67fc-151">文件和流 I/O</span><span class="sxs-lookup"><span data-stu-id="b67fc-151">File and Stream I/O</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file"><span data-ttu-id="b67fc-152">如何：从文件中读取文本</span><span class="sxs-lookup"><span data-stu-id="b67fc-152">How to: Read Text from a File</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file"><span data-ttu-id="b67fc-153">如何：将文本写入文件</span><span class="sxs-lookup"><span data-stu-id="b67fc-153">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public virtual void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.BinaryReader.Close" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Close();" />
      <MemberSignature Language="F#" Value="abstract member Close : unit -&gt; unit&#xA;override this.Close : unit -&gt; unit" Usage="binaryReader.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b67fc-154">关闭当前阅读器及基础流。</span><span class="sxs-lookup"><span data-stu-id="b67fc-154">Closes the current reader and the underlying stream.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b67fc-155">的这一实现 `Close` 调用 <xref:System.IO.BinaryReader.Dispose%2A> 传递值的方法 `true` 。</span><span class="sxs-lookup"><span data-stu-id="b67fc-155">This implementation of `Close` calls the <xref:System.IO.BinaryReader.Dispose%2A> method passing a `true` value.</span></span>  
  
 <span data-ttu-id="b67fc-156">除非显式调用或，否则刷新流将不会刷新其基础编码器 <xref:System.IO.Stream.Flush%2A> `Close` 。</span><span class="sxs-lookup"><span data-stu-id="b67fc-156">Flushing the stream will not flush its underlying encoder unless you explicitly call <xref:System.IO.Stream.Flush%2A> or `Close`.</span></span> <span data-ttu-id="b67fc-157">如果设置为，则 <xref:System.IO.StreamWriter.AutoFlush%2A> `true` 表示将数据从缓冲区刷新到流，但不会刷新编码器状态。</span><span class="sxs-lookup"><span data-stu-id="b67fc-157">Setting <xref:System.IO.StreamWriter.AutoFlush%2A> to `true` means that data will be flushed from the buffer to the stream, but the encoder state will not be flushed.</span></span> <span data-ttu-id="b67fc-158">这样，编码器就可以将其状态保留 (部分字符) 以便它能够正确地编码下一个字符块。</span><span class="sxs-lookup"><span data-stu-id="b67fc-158">This allows the encoder to keep its state (partial characters) so that it can encode the next block of characters correctly.</span></span> <span data-ttu-id="b67fc-159">此方案影响 UTF8 和 UTF7，其中某些字符只能在编码器接收到相邻字符后编码。</span><span class="sxs-lookup"><span data-stu-id="b67fc-159">This scenario affects UTF8 and UTF7 where certain characters can only be encoded after the encoder receives the adjacent character or characters.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/standard/io/"><span data-ttu-id="b67fc-160">文件和流 I/O</span><span class="sxs-lookup"><span data-stu-id="b67fc-160">File and Stream I/O</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file"><span data-ttu-id="b67fc-161">如何：从文件中读取文本</span><span class="sxs-lookup"><span data-stu-id="b67fc-161">How to: Read Text from a File</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file"><span data-ttu-id="b67fc-162">如何：将文本写入文件</span><span class="sxs-lookup"><span data-stu-id="b67fc-162">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b67fc-163">释放 <see cref="T:System.IO.BinaryReader" /> 类使用的资源。</span><span class="sxs-lookup"><span data-stu-id="b67fc-163">Releases the resources used by the <see cref="T:System.IO.BinaryReader" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.BinaryReader.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="binaryReader.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b67fc-164">释放 <see cref="T:System.IO.BinaryReader" /> 类的当前实例所使用的所有资源。</span><span class="sxs-lookup"><span data-stu-id="b67fc-164">Releases all resources used by the current instance of the <see cref="T:System.IO.BinaryReader" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b67fc-165">在完成使用 `Dispose` 后，应调用 <xref:System.IO.BinaryReader>。</span><span class="sxs-lookup"><span data-stu-id="b67fc-165">Call `Dispose` when you are finished using the <xref:System.IO.BinaryReader>.</span></span> <span data-ttu-id="b67fc-166">`Dispose` 方法使 <xref:System.IO.BinaryReader> 处于不可用状态。</span><span class="sxs-lookup"><span data-stu-id="b67fc-166">The `Dispose` method leaves the <xref:System.IO.BinaryReader> in an unusable state.</span></span> <span data-ttu-id="b67fc-167">调用后 `Dispose` ，必须释放对的所有引用， <xref:System.IO.BinaryReader> 以便垃圾回收器能够回收占用的内存 <xref:System.IO.BinaryReader> 。</span><span class="sxs-lookup"><span data-stu-id="b67fc-167">After calling `Dispose`, you must release all references to the <xref:System.IO.BinaryReader> so the garbage collector can reclaim the memory that the <xref:System.IO.BinaryReader> was occupying.</span></span>  
  
 <span data-ttu-id="b67fc-168">有关详细信息，请参阅 [清理非托管资源](/dotnet/standard/garbage-collection/unmanaged) 和 [实现 Dispose 方法](/dotnet/standard/garbage-collection/implementing-dispose)。</span><span class="sxs-lookup"><span data-stu-id="b67fc-168">For more information, see [Cleaning Up Unmanaged Resources](/dotnet/standard/garbage-collection/unmanaged) and [Implementing a Dispose Method](/dotnet/standard/garbage-collection/implementing-dispose).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b67fc-169">每次释放对 `Dispose` 的最后一个引用前，均应调用 <xref:System.IO.BinaryReader>。</span><span class="sxs-lookup"><span data-stu-id="b67fc-169">Always call `Dispose` before you release your last reference to the <xref:System.IO.BinaryReader>.</span></span> <span data-ttu-id="b67fc-170">否则，在垃圾回收器调用 <xref:System.IO.BinaryReader> 对象的 `Finalize` 方法之前，该对象正在使用的资源不会被释放。</span><span class="sxs-lookup"><span data-stu-id="b67fc-170">Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.IO.BinaryReader> object's `Finalize` method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.BinaryReader.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="binaryReader.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing"><span data-ttu-id="b67fc-171">若要释放托管资源和非托管资源，则为 <see langword="true" />；若仅释放非托管资源，则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="b67fc-171"><see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</span></span></param>
        <summary><span data-ttu-id="b67fc-172">释放 <see cref="T:System.IO.BinaryReader" /> 类使用的非托管资源，并可以选择释放托管资源。</span><span class="sxs-lookup"><span data-stu-id="b67fc-172">Releases the unmanaged resources used by the <see cref="T:System.IO.BinaryReader" /> class and optionally releases the managed resources.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b67fc-173">此方法由和调用 `Dispose` <xref:System.Object.Finalize%2A> 。</span><span class="sxs-lookup"><span data-stu-id="b67fc-173">This method is called by `Dispose` and <xref:System.Object.Finalize%2A>.</span></span> <span data-ttu-id="b67fc-174">默认情况下，此方法将 `disposing` 参数指定为 `true` 。</span><span class="sxs-lookup"><span data-stu-id="b67fc-174">By default, this method specifies the `disposing` parameter as `true`.</span></span> <span data-ttu-id="b67fc-175"><xref:System.Object.Finalize%2A> 指定 `disposing` 参数为 `false` 。</span><span class="sxs-lookup"><span data-stu-id="b67fc-175"><xref:System.Object.Finalize%2A> specifies the `disposing` parameter as `false`.</span></span>  
  
 <span data-ttu-id="b67fc-176">当 `disposing` 参数为 `true` 时，此方法释放该 <xref:System.IO.BinaryReader> 引用的、由任何托管对象持有的全部资源。</span><span class="sxs-lookup"><span data-stu-id="b67fc-176">When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.IO.BinaryReader> references.</span></span> <span data-ttu-id="b67fc-177">此方法将调用每个被引用对象的 `Dispose` 方法。</span><span class="sxs-lookup"><span data-stu-id="b67fc-177">This method invokes the `Dispose` method of each referenced object.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="b67fc-178">
            <see cref="M:System.IO.BinaryReader.Dispose(System.Boolean)" /> 可以由其他对象多次调用。</span><span class="sxs-lookup"><span data-stu-id="b67fc-178">
            <see cref="M:System.IO.BinaryReader.Dispose(System.Boolean)" /> can be called multiple times by other objects.</span></span> <span data-ttu-id="b67fc-179">重写此方法时，请注意不要引用先前在调用时已释放的对象 <see langword="Dispose" /> 。</span><span class="sxs-lookup"><span data-stu-id="b67fc-179">When overriding this method, be careful not to reference objects that have been previously disposed of in an earlier call to <see langword="Dispose" />.</span></span> <span data-ttu-id="b67fc-180">有关如何实现此方法的详细信息，请参阅 [实现 Dispose 方法](/dotnet/standard/garbage-collection/implementing-dispose)。</span><span class="sxs-lookup"><span data-stu-id="b67fc-180">For more information about how to implement this method, see [Implementing a Dispose Method](/dotnet/standard/garbage-collection/implementing-dispose).</span></span>  
  
<span data-ttu-id="b67fc-181">有关和的详细 <see cref="M:System.IDisposable.Dispose" /> 信息 <see cref="M:System.Object.Finalize" /> ，请参阅 [清理非托管资源](/dotnet/standard/garbage-collection/unmanaged)。</span><span class="sxs-lookup"><span data-stu-id="b67fc-181">For more information about <see cref="M:System.IDisposable.Dispose" /> and <see cref="M:System.Object.Finalize" />, see [Cleaning Up Unmanaged Resources](/dotnet/standard/garbage-collection/unmanaged).</span></span></para></block>
        <related type="Article" href="/dotnet/standard/io/"><span data-ttu-id="b67fc-182">文件和流 I/O</span><span class="sxs-lookup"><span data-stu-id="b67fc-182">File and Stream I/O</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file"><span data-ttu-id="b67fc-183">如何：从文件中读取文本</span><span class="sxs-lookup"><span data-stu-id="b67fc-183">How to: Read Text from a File</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file"><span data-ttu-id="b67fc-184">如何：将文本写入文件</span><span class="sxs-lookup"><span data-stu-id="b67fc-184">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FillBuffer">
      <MemberSignature Language="C#" Value="protected virtual void FillBuffer (int numBytes);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void FillBuffer(int32 numBytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.BinaryReader.FillBuffer(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub FillBuffer (numBytes As Integer)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void FillBuffer(int numBytes);" />
      <MemberSignature Language="F#" Value="abstract member FillBuffer : int -&gt; unit&#xA;override this.FillBuffer : int -&gt; unit" Usage="binaryReader.FillBuffer numBytes" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="numBytes" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="numBytes"><span data-ttu-id="b67fc-185">要读取的字节数。</span><span class="sxs-lookup"><span data-stu-id="b67fc-185">The number of bytes to be read.</span></span></param>
        <summary><span data-ttu-id="b67fc-186">用从流中读取的指定字节数填充内部缓冲区。</span><span class="sxs-lookup"><span data-stu-id="b67fc-186">Fills the internal buffer with the specified number of bytes read from the stream.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b67fc-187">内部缓冲区大小是16与为指定编码返回的值之间较大的值 <xref:System.Text.Encoding.GetMaxByteCount%2A> 。</span><span class="sxs-lookup"><span data-stu-id="b67fc-187">The internal buffer size is the larger value between 16 and the value returned by <xref:System.Text.Encoding.GetMaxByteCount%2A> for the specified encoding.</span></span>  
  
 <span data-ttu-id="b67fc-188">有关常见 i/o 任务的列表，请参阅 [常见 I/o 任务](/dotnet/standard/io/common-i-o-tasks)。</span><span class="sxs-lookup"><span data-stu-id="b67fc-188">For a list of common I/O tasks, see [Common I/O Tasks](/dotnet/standard/io/common-i-o-tasks).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.EndOfStreamException"><span data-ttu-id="b67fc-189">在可以读取 <paramref name="numBytes" /> 之前到达了流的末尾。</span><span class="sxs-lookup"><span data-stu-id="b67fc-189">The end of the stream is reached before <paramref name="numBytes" /> could be read.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="b67fc-190">出现 I/O 错误。</span><span class="sxs-lookup"><span data-stu-id="b67fc-190">An I/O error occurred.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="b67fc-191">请求的 <paramref name="numBytes" /> 大于内部缓冲区大小。</span><span class="sxs-lookup"><span data-stu-id="b67fc-191">Requested <paramref name="numBytes" /> is larger than the internal buffer size.</span></span></exception>
        <related type="Article" href="/dotnet/standard/io/"><span data-ttu-id="b67fc-192">文件和流 I/O</span><span class="sxs-lookup"><span data-stu-id="b67fc-192">File and Stream I/O</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file"><span data-ttu-id="b67fc-193">如何：从文件中读取文本</span><span class="sxs-lookup"><span data-stu-id="b67fc-193">How to: Read Text from a File</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file"><span data-ttu-id="b67fc-194">如何：将文本写入文件</span><span class="sxs-lookup"><span data-stu-id="b67fc-194">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="PeekChar">
      <MemberSignature Language="C#" Value="public virtual int PeekChar ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 PeekChar() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.BinaryReader.PeekChar" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function PeekChar () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int PeekChar();" />
      <MemberSignature Language="F#" Value="abstract member PeekChar : unit -&gt; int&#xA;override this.PeekChar : unit -&gt; int" Usage="binaryReader.PeekChar " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b67fc-195">返回下一个可用的字符，并且不提升字节或字符的位置。</span><span class="sxs-lookup"><span data-stu-id="b67fc-195">Returns the next available character and does not advance the byte or character position.</span></span></summary>
        <returns><span data-ttu-id="b67fc-196">下一个可用的字符，或者，如果没有可用字符或者流不支持查找时为 -1。</span><span class="sxs-lookup"><span data-stu-id="b67fc-196">The next available character, or -1 if no more characters are available or the stream does not support seeking.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b67fc-197">如果流中应有代理项字符 <xref:System.IO.BinaryReader.ReadChars%2A> ，请使用方法，然后将流设置回原始位置。</span><span class="sxs-lookup"><span data-stu-id="b67fc-197">If surrogate characters can be expected in the stream use the <xref:System.IO.BinaryReader.ReadChars%2A> method, then set the stream back to the original position.</span></span>  
  
 <span data-ttu-id="b67fc-198">有关常见 i/o 任务的列表，请参阅 [常见 I/o 任务](/dotnet/standard/io/common-i-o-tasks)。</span><span class="sxs-lookup"><span data-stu-id="b67fc-198">For a list of common I/O tasks, see [Common I/O Tasks](/dotnet/standard/io/common-i-o-tasks).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="b67fc-199">出现 I/O 错误。</span><span class="sxs-lookup"><span data-stu-id="b67fc-199">An I/O error occurred.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b67fc-200">当前字符无法通过使用为该流选择的 <see cref="T:System.Text.Encoding" /> 解码到内部字符缓冲区中。</span><span class="sxs-lookup"><span data-stu-id="b67fc-200">The current character cannot be decoded into the internal character buffer by using the <see cref="T:System.Text.Encoding" /> selected for the stream.</span></span></exception>
        <related type="Article" href="/dotnet/standard/io/"><span data-ttu-id="b67fc-201">文件和流 I/O</span><span class="sxs-lookup"><span data-stu-id="b67fc-201">File and Stream I/O</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file"><span data-ttu-id="b67fc-202">如何：从文件中读取文本</span><span class="sxs-lookup"><span data-stu-id="b67fc-202">How to: Read Text from a File</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file"><span data-ttu-id="b67fc-203">如何：将文本写入文件</span><span class="sxs-lookup"><span data-stu-id="b67fc-203">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Read">
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b67fc-204">从基础流中读取字节，并将流的当前位置前移。</span><span class="sxs-lookup"><span data-stu-id="b67fc-204">Reads bytes from the underlying stream and advances the current position of the stream.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public virtual int Read ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Read() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.BinaryReader.Read" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Read () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int Read();" />
      <MemberSignature Language="F#" Value="abstract member Read : unit -&gt; int&#xA;override this.Read : unit -&gt; int" Usage="binaryReader.Read " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b67fc-205">从基础流中读取字符，并根据所使用的 <see langword="Encoding" /> 和从流中读取的特定字符，提升流的当前位置。</span><span class="sxs-lookup"><span data-stu-id="b67fc-205">Reads characters from the underlying stream and advances the current position of the stream in accordance with the <see langword="Encoding" /> used and the specific character being read from the stream.</span></span></summary>
        <returns><span data-ttu-id="b67fc-206">输入流中的下一个字符，如果当前无可用字符则为 -1。</span><span class="sxs-lookup"><span data-stu-id="b67fc-206">The next character from the input stream, or -1 if no characters are currently available.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b67fc-207"><xref:System.IO.BinaryReader> 读取失败后不还原文件位置。</span><span class="sxs-lookup"><span data-stu-id="b67fc-207"><xref:System.IO.BinaryReader> does not restore the file position after an unsuccessful read.</span></span>  
  
 <span data-ttu-id="b67fc-208">有关常见 i/o 任务的列表，请参阅 [常见 I/o 任务](/dotnet/standard/io/common-i-o-tasks)。</span><span class="sxs-lookup"><span data-stu-id="b67fc-208">For a list of common I/O tasks, see [Common I/O Tasks](/dotnet/standard/io/common-i-o-tasks).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b67fc-209">下面的示例演示如何使用内存作为后备存储来读取和写入数据。</span><span class="sxs-lookup"><span data-stu-id="b67fc-209">The following example shows how to read and write data using memory as a backing store.</span></span> <span data-ttu-id="b67fc-210">此示例显示控制台的无效文件路径字符列表。</span><span class="sxs-lookup"><span data-stu-id="b67fc-210">This example displays a list of invalid file path characters to the console.</span></span> <span data-ttu-id="b67fc-211">尽管代码尝试显示所有无效文件路径字符的列表，但并不是所有字符都在可显示的字符集中。</span><span class="sxs-lookup"><span data-stu-id="b67fc-211">Although the code tries to display a list of all invalid file path characters, not all of the characters are within the displayable set of characters.</span></span> <span data-ttu-id="b67fc-212">因为无效字符的列表可能因系统而异，所以此代码的输出也可能有所不同。</span><span class="sxs-lookup"><span data-stu-id="b67fc-212">Because the list of invalid characters can vary based on the system, output for this code may also vary.</span></span>  
  
 [!code-cpp[System.IO.BinaryReaderWriter.RWChar2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter.RWChar2/CPP/rwreadchar.cpp#1)]
 [!code-csharp[System.IO.BinaryReaderWriter.RWChar2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter.RWChar2/CS/rwreadchar.cs#1)]
 [!code-vb[System.IO.BinaryReaderWriter.RWChar2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter.RWChar2/VB/rwreadchar.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="b67fc-213">出现 I/O 错误。</span><span class="sxs-lookup"><span data-stu-id="b67fc-213">An I/O error occurred.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="b67fc-214">流已关闭。</span><span class="sxs-lookup"><span data-stu-id="b67fc-214">The stream is closed.</span></span></exception>
        <altmember cref="T:System.Text.Encoding" />
        <related type="Article" href="/dotnet/standard/io/"><span data-ttu-id="b67fc-215">文件和流 I/O</span><span class="sxs-lookup"><span data-stu-id="b67fc-215">File and Stream I/O</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file"><span data-ttu-id="b67fc-216">如何：从文件中读取文本</span><span class="sxs-lookup"><span data-stu-id="b67fc-216">How to: Read Text from a File</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file"><span data-ttu-id="b67fc-217">如何：将文本写入文件</span><span class="sxs-lookup"><span data-stu-id="b67fc-217">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public virtual int Read (Span&lt;byte&gt; buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Read(valuetype System.Span`1&lt;unsigned int8&gt; buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.BinaryReader.Read(System.Span{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Read (buffer As Span(Of Byte)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int Read(Span&lt;System::Byte&gt; buffer);" />
      <MemberSignature Language="F#" Value="abstract member Read : Span&lt;byte&gt; -&gt; int&#xA;override this.Read : Span&lt;byte&gt; -&gt; int" Usage="binaryReader.Read buffer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Span&lt;System.Byte&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="buffer"><span data-ttu-id="b67fc-218">内存的区域。</span><span class="sxs-lookup"><span data-stu-id="b67fc-218">A region of memory.</span></span> <span data-ttu-id="b67fc-219">当此方法返回时，此区域的内容将替换为从当前源读取的字节。</span><span class="sxs-lookup"><span data-stu-id="b67fc-219">When this method returns, the contents of this region are replaced by the bytes read from the current source.</span></span></param>
        <summary><span data-ttu-id="b67fc-220">从当前流读取字节序列，并将流中的位置向前移动读取的字节数。</span><span class="sxs-lookup"><span data-stu-id="b67fc-220">Reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.</span></span></summary>
        <returns><span data-ttu-id="b67fc-221">读入缓冲区中的总字节数。</span><span class="sxs-lookup"><span data-stu-id="b67fc-221">The total number of bytes read into the buffer.</span></span> <span data-ttu-id="b67fc-222">如果很多字节当前不可用，则这可小于在缓冲区中分配的字节数；如果已到达流结尾，则为零 (0)。</span><span class="sxs-lookup"><span data-stu-id="b67fc-222">This can be less than the number of bytes allocated in the buffer if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="b67fc-223">流已关闭。</span><span class="sxs-lookup"><span data-stu-id="b67fc-223">The stream is closed.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="b67fc-224">出现 I/O 错误。</span><span class="sxs-lookup"><span data-stu-id="b67fc-224">An I/O error occurred.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public virtual int Read (Span&lt;char&gt; buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Read(valuetype System.Span`1&lt;char&gt; buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.BinaryReader.Read(System.Span{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Read (buffer As Span(Of Char)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int Read(Span&lt;char&gt; buffer);" />
      <MemberSignature Language="F#" Value="abstract member Read : Span&lt;char&gt; -&gt; int&#xA;override this.Read : Span&lt;char&gt; -&gt; int" Usage="binaryReader.Read buffer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Span&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="buffer"><span data-ttu-id="b67fc-225">字符范围。</span><span class="sxs-lookup"><span data-stu-id="b67fc-225">A span of characters.</span></span> <span data-ttu-id="b67fc-226">当此方法返回时，此区域的内容将替换为从当前源读取的字符。</span><span class="sxs-lookup"><span data-stu-id="b67fc-226">When this method returns, the contents of this region are replaced by the characters read from the current source.</span></span></param>
        <summary><span data-ttu-id="b67fc-227">从当前流中读取与提供的缓冲区长度相同的字符数，将其写入提供的缓冲区，然后根据所使用的 <see langword="Encoding" /> 和从流中读取的特定字符，将当前位置前移。</span><span class="sxs-lookup"><span data-stu-id="b67fc-227">Reads, from the current stream, the same number of characters as the length of the provided buffer, writes them in the provided buffer, and advances the current position in accordance with the <see langword="Encoding" /> used and the specific character being read from the stream.</span></span></summary>
        <returns><span data-ttu-id="b67fc-228">读入缓冲区的总字符数。</span><span class="sxs-lookup"><span data-stu-id="b67fc-228">The total number of characters read into the buffer.</span></span> <span data-ttu-id="b67fc-229">如果当前可用的字节没有请求的那么多，此数可能小于所请求的字符数；如果到达了流的末尾，此数可能为零。</span><span class="sxs-lookup"><span data-stu-id="b67fc-229">This might be less than the number of characters requested if that many characters are not currently available, or it might be zero if the end of the stream is reached.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="b67fc-230">流已关闭。</span><span class="sxs-lookup"><span data-stu-id="b67fc-230">The stream is closed.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="b67fc-231">出现 I/O 错误。</span><span class="sxs-lookup"><span data-stu-id="b67fc-231">An I/O error occurred.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public virtual int Read (byte[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Read(unsigned int8[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.BinaryReader.Read(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Read (buffer As Byte(), index As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int Read(cli::array &lt;System::Byte&gt; ^ buffer, int index, int count);" />
      <MemberSignature Language="F#" Value="abstract member Read : byte[] * int * int -&gt; int&#xA;override this.Read : byte[] * int * int -&gt; int" Usage="binaryReader.Read (buffer, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer"><span data-ttu-id="b67fc-232">将数据读入的缓冲区。</span><span class="sxs-lookup"><span data-stu-id="b67fc-232">The buffer to read data into.</span></span></param>
        <param name="index"><span data-ttu-id="b67fc-233">缓冲区中的起始点，在该处开始读入缓冲区。</span><span class="sxs-lookup"><span data-stu-id="b67fc-233">The starting point in the buffer at which to begin reading into the buffer.</span></span></param>
        <param name="count"><span data-ttu-id="b67fc-234">要读取的字节数。</span><span class="sxs-lookup"><span data-stu-id="b67fc-234">The number of bytes to read.</span></span></param>
        <summary><span data-ttu-id="b67fc-235">从字节数组中的指定点开始，从流中读取指定的字节数。</span><span class="sxs-lookup"><span data-stu-id="b67fc-235">Reads the specified number of bytes from the stream, starting from a specified point in the byte array.</span></span></summary>
        <returns><span data-ttu-id="b67fc-236">读入 <paramref name="buffer" /> 的字节数。</span><span class="sxs-lookup"><span data-stu-id="b67fc-236">The number of bytes read into <paramref name="buffer" />.</span></span> <span data-ttu-id="b67fc-237">如果可用的字节没有请求的那么多，此数可能小于所请求的字节数；如果到达了流的末尾，此数可能为零。</span><span class="sxs-lookup"><span data-stu-id="b67fc-237">This might be less than the number of bytes requested if that many bytes are not available, or it might be zero if the end of the stream is reached.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b67fc-238"><xref:System.IO.BinaryReader> 读操作失败后不会还原文件位置。</span><span class="sxs-lookup"><span data-stu-id="b67fc-238"><xref:System.IO.BinaryReader> does not restore the file position after an unsuccessful read operation.</span></span>  
  
 <span data-ttu-id="b67fc-239">有关常见 i/o 任务的列表，请参阅 [常见 I/o 任务](/dotnet/standard/io/common-i-o-tasks)。</span><span class="sxs-lookup"><span data-stu-id="b67fc-239">For a list of common I/O tasks, see [Common I/O Tasks](/dotnet/standard/io/common-i-o-tasks).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b67fc-240">下面的示例演示如何使用内存作为后备存储来编写二进制数据。</span><span class="sxs-lookup"><span data-stu-id="b67fc-240">The following example shows how to write binary data by using memory as a backing store.</span></span> <span data-ttu-id="b67fc-241">它向控制台显示一条消息，指示是否已正确写入数据。</span><span class="sxs-lookup"><span data-stu-id="b67fc-241">It displays a message to the console that indicates whether the data was written correctly.</span></span>  
  
 [!code-csharp[System.IO.BinaryReaderWriter.RWBytes2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter.RWBytes2/CS/rwreadbytes.cs#1)]
 [!code-vb[System.IO.BinaryReaderWriter.RWBytes2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter.RWBytes2/VB/rwreadbytes.vb#1)]  
  
 <span data-ttu-id="b67fc-242">此示例读取文件的内容，并以16列格式显示每个字节的数字值。</span><span class="sxs-lookup"><span data-stu-id="b67fc-242">This example reads the contents of a file and displays each byte's numeric value in 16-column format.</span></span> <span data-ttu-id="b67fc-243">当方法返回零字节时，将检测正在读取的文件的结尾 <xref:System.IO.BinaryReader.Read%2A> 。</span><span class="sxs-lookup"><span data-stu-id="b67fc-243">The end of the file that is being read is detected when the <xref:System.IO.BinaryReader.Read%2A> method returns zero bytes.</span></span>  
  
 [!code-csharp[System.IO.BinaryReaderWriter#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter/CS/source5.cs#6)]
 [!code-vb[System.IO.BinaryReaderWriter#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter/VB/source5.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b67fc-244">缓冲区长度减去 <paramref name="index" /> 小于 <paramref name="count" />。</span><span class="sxs-lookup"><span data-stu-id="b67fc-244">The buffer length minus <paramref name="index" /> is less than <paramref name="count" />.</span></span>  
  
<span data-ttu-id="b67fc-245">- 或 -</span><span class="sxs-lookup"><span data-stu-id="b67fc-245">-or-</span></span> 
<span data-ttu-id="b67fc-246">要读取的解码字符数大于 <paramref name="count" />。</span><span class="sxs-lookup"><span data-stu-id="b67fc-246">The number of decoded characters to read is greater than <paramref name="count" />.</span></span> <span data-ttu-id="b67fc-247">如果 Unicode 解码器返回回退字符或代理项对，则可能发生此情况。</span><span class="sxs-lookup"><span data-stu-id="b67fc-247">This can happen if a Unicode decoder returns fallback characters or a surrogate pair.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b67fc-248"><paramref name="buffer" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b67fc-248"><paramref name="buffer" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="b67fc-249"><paramref name="index" /> 或 <paramref name="count" /> 为负数。</span><span class="sxs-lookup"><span data-stu-id="b67fc-249"><paramref name="index" /> or <paramref name="count" /> is negative.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="b67fc-250">流已关闭。</span><span class="sxs-lookup"><span data-stu-id="b67fc-250">The stream is closed.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="b67fc-251">出现 I/O 错误。</span><span class="sxs-lookup"><span data-stu-id="b67fc-251">An I/O error occurred.</span></span></exception>
        <related type="Article" href="/dotnet/standard/io/"><span data-ttu-id="b67fc-252">文件和流 I/O</span><span class="sxs-lookup"><span data-stu-id="b67fc-252">File and Stream I/O</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file"><span data-ttu-id="b67fc-253">如何：从文件中读取文本</span><span class="sxs-lookup"><span data-stu-id="b67fc-253">How to: Read Text from a File</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file"><span data-ttu-id="b67fc-254">如何：将文本写入文件</span><span class="sxs-lookup"><span data-stu-id="b67fc-254">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public virtual int Read (char[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Read(char[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.BinaryReader.Read(System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Read (buffer As Char(), index As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int Read(cli::array &lt;char&gt; ^ buffer, int index, int count);" />
      <MemberSignature Language="F#" Value="abstract member Read : char[] * int * int -&gt; int&#xA;override this.Read : char[] * int * int -&gt; int" Usage="binaryReader.Read (buffer, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer"><span data-ttu-id="b67fc-255">将数据读入的缓冲区。</span><span class="sxs-lookup"><span data-stu-id="b67fc-255">The buffer to read data into.</span></span></param>
        <param name="index"><span data-ttu-id="b67fc-256">缓冲区中的起始点，在该处开始读入缓冲区。</span><span class="sxs-lookup"><span data-stu-id="b67fc-256">The starting point in the buffer at which to begin reading into the buffer.</span></span></param>
        <param name="count"><span data-ttu-id="b67fc-257">要读取的字符数。</span><span class="sxs-lookup"><span data-stu-id="b67fc-257">The number of characters to read.</span></span></param>
        <summary><span data-ttu-id="b67fc-258">从字符数组中的指定点开始，从流中读取指定的字符数。</span><span class="sxs-lookup"><span data-stu-id="b67fc-258">Reads the specified number of characters from the stream, starting from a specified point in the character array.</span></span></summary>
        <returns><span data-ttu-id="b67fc-259">读入缓冲区的总字符数。</span><span class="sxs-lookup"><span data-stu-id="b67fc-259">The total number of characters read into the buffer.</span></span> <span data-ttu-id="b67fc-260">如果当前可用的字节没有请求的那么多，此数可能小于所请求的字符数；如果到达了流的末尾，此数可能为零。</span><span class="sxs-lookup"><span data-stu-id="b67fc-260">This might be less than the number of characters requested if that many characters are not currently available, or it might be zero if the end of the stream is reached.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b67fc-261"><xref:System.IO.BinaryReader> 读操作失败后不会还原文件位置。</span><span class="sxs-lookup"><span data-stu-id="b67fc-261"><xref:System.IO.BinaryReader> does not restore the file position after an unsuccessful read operation.</span></span>  
  
 <span data-ttu-id="b67fc-262">有关常见 i/o 任务的列表，请参阅 [常见 I/o 任务](/dotnet/standard/io/common-i-o-tasks)。</span><span class="sxs-lookup"><span data-stu-id="b67fc-262">For a list of common I/O tasks, see [Common I/O Tasks](/dotnet/standard/io/common-i-o-tasks).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b67fc-263">下面的示例演示如何使用内存作为后备存储来读取和写入数据。</span><span class="sxs-lookup"><span data-stu-id="b67fc-263">The following example shows how to read and write data using memory as a backing store.</span></span> <span data-ttu-id="b67fc-264">此示例显示控制台的无效文件路径字符列表。</span><span class="sxs-lookup"><span data-stu-id="b67fc-264">This example displays a list of invalid file path characters to the console.</span></span> <span data-ttu-id="b67fc-265">尽管代码尝试显示所有无效文件路径字符的列表，但并不是所有字符都在可显示的字符集中。</span><span class="sxs-lookup"><span data-stu-id="b67fc-265">Although the code tries to display a list of all invalid file path characters, not all of the characters are within the displayable set of characters.</span></span> <span data-ttu-id="b67fc-266">因为无效字符的列表可能因系统而异，所以此代码的输出也可能有所不同。</span><span class="sxs-lookup"><span data-stu-id="b67fc-266">Because the list of invalid characters can vary based on the system, output for this code may also vary.</span></span>  
  
 [!code-cpp[System.IO.BinaryReaderWriter.RWChars2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter.RWChars2/CPP/rwreadchars.cpp#1)]
 [!code-csharp[System.IO.BinaryReaderWriter.RWChars2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter.RWChars2/CS/rwreadchars.cs#1)]
 [!code-vb[System.IO.BinaryReaderWriter.RWChars2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter.RWChars2/VB/rwreadchars.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b67fc-267">缓冲区长度减去 <paramref name="index" /> 小于 <paramref name="count" />。</span><span class="sxs-lookup"><span data-stu-id="b67fc-267">The buffer length minus <paramref name="index" /> is less than <paramref name="count" />.</span></span>  
  
<span data-ttu-id="b67fc-268">- 或 -</span><span class="sxs-lookup"><span data-stu-id="b67fc-268">-or-</span></span> 
<span data-ttu-id="b67fc-269">要读取的解码字符数大于 <paramref name="count" />。</span><span class="sxs-lookup"><span data-stu-id="b67fc-269">The number of decoded characters to read is greater than <paramref name="count" />.</span></span> <span data-ttu-id="b67fc-270">如果 Unicode 解码器返回回退字符或代理项对，则可能发生此情况。</span><span class="sxs-lookup"><span data-stu-id="b67fc-270">This can happen if a Unicode decoder returns fallback characters or a surrogate pair.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b67fc-271"><paramref name="buffer" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="b67fc-271"><paramref name="buffer" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="b67fc-272"><paramref name="index" /> 或 <paramref name="count" /> 为负数。</span><span class="sxs-lookup"><span data-stu-id="b67fc-272"><paramref name="index" /> or <paramref name="count" /> is negative.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="b67fc-273">流已关闭。</span><span class="sxs-lookup"><span data-stu-id="b67fc-273">The stream is closed.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="b67fc-274">出现 I/O 错误。</span><span class="sxs-lookup"><span data-stu-id="b67fc-274">An I/O error occurred.</span></span></exception>
        <related type="Article" href="/dotnet/standard/io/"><span data-ttu-id="b67fc-275">文件和流 I/O</span><span class="sxs-lookup"><span data-stu-id="b67fc-275">File and Stream I/O</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file"><span data-ttu-id="b67fc-276">如何：从文件中读取文本</span><span class="sxs-lookup"><span data-stu-id="b67fc-276">How to: Read Text from a File</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file"><span data-ttu-id="b67fc-277">如何：将文本写入文件</span><span class="sxs-lookup"><span data-stu-id="b67fc-277">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Read7BitEncodedInt">
      <MemberSignature Language="C#" Value="protected internal int Read7BitEncodedInt ();" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance int32 Read7BitEncodedInt() cil managed" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="DocId" Value="M:System.IO.BinaryReader.Read7BitEncodedInt" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Function Read7BitEncodedInt () As Integer" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; int Read7BitEncodedInt();" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="member this.Read7BitEncodedInt : unit -&gt; int" Usage="binaryReader.Read7BitEncodedInt " />
      <MemberSignature Language="C#" Value="public int Read7BitEncodedInt ();" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Read7BitEncodedInt() cil managed" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="VB.NET" Value="Public Function Read7BitEncodedInt () As Integer" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Read7BitEncodedInt();" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="C#" Value="protected int Read7BitEncodedInt ();" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance int32 Read7BitEncodedInt() cil managed" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="VB.NET" Value="Protected Function Read7BitEncodedInt () As Integer" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; int Read7BitEncodedInt();" FrameworkAlternate="netframework-1.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b67fc-278">以压缩格式读入 32 位整数。</span><span class="sxs-lookup"><span data-stu-id="b67fc-278">Reads in a 32-bit integer in compressed format.</span></span></summary>
        <returns><span data-ttu-id="b67fc-279">压缩格式的 32 位整数。</span><span class="sxs-lookup"><span data-stu-id="b67fc-279">A 32-bit integer in compressed format.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b67fc-280"><xref:System.IO.BinaryReader> 读取失败后不还原文件位置。</span><span class="sxs-lookup"><span data-stu-id="b67fc-280"><xref:System.IO.BinaryReader> does not restore the file position after an unsuccessful read.</span></span>  
  
 <span data-ttu-id="b67fc-281">如果整数适合7位，则此整数仅使用一个字节的空间。</span><span class="sxs-lookup"><span data-stu-id="b67fc-281">If the integer will fit in seven bits, the integer takes only one byte of space.</span></span> <span data-ttu-id="b67fc-282">应通过写入整数 <xref:System.IO.BinaryWriter.Write7BitEncodedInt%2A?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="b67fc-282">The integer is expected to have been written through <xref:System.IO.BinaryWriter.Write7BitEncodedInt%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="b67fc-283">有关常见 i/o 任务的列表，请参阅 [常见 I/o 任务](/dotnet/standard/io/common-i-o-tasks)。</span><span class="sxs-lookup"><span data-stu-id="b67fc-283">For a list of common I/O tasks, see [Common I/O Tasks](/dotnet/standard/io/common-i-o-tasks).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.EndOfStreamException"><span data-ttu-id="b67fc-284">已到达流的末尾。</span><span class="sxs-lookup"><span data-stu-id="b67fc-284">The end of the stream is reached.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="b67fc-285">流已关闭。</span><span class="sxs-lookup"><span data-stu-id="b67fc-285">The stream is closed.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="b67fc-286">出现 I/O 错误。</span><span class="sxs-lookup"><span data-stu-id="b67fc-286">An I/O error occurred.</span></span></exception>
        <exception cref="T:System.FormatException"><span data-ttu-id="b67fc-287">流已损坏。</span><span class="sxs-lookup"><span data-stu-id="b67fc-287">The stream is corrupted.</span></span></exception>
        <related type="Article" href="/dotnet/standard/io/"><span data-ttu-id="b67fc-288">文件和流 I/O</span><span class="sxs-lookup"><span data-stu-id="b67fc-288">File and Stream I/O</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file"><span data-ttu-id="b67fc-289">如何：从文件中读取文本</span><span class="sxs-lookup"><span data-stu-id="b67fc-289">How to: Read Text from a File</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file"><span data-ttu-id="b67fc-290">如何：将文本写入文件</span><span class="sxs-lookup"><span data-stu-id="b67fc-290">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Read7BitEncodedInt64">
      <MemberSignature Language="C#" Value="public long Read7BitEncodedInt64 ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 Read7BitEncodedInt64() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.BinaryReader.Read7BitEncodedInt64" />
      <MemberSignature Language="VB.NET" Value="Public Function Read7BitEncodedInt64 () As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long Read7BitEncodedInt64();" />
      <MemberSignature Language="F#" Value="member this.Read7BitEncodedInt64 : unit -&gt; int64" Usage="binaryReader.Read7BitEncodedInt64 " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b67fc-291">一次读取一个 7 位数字。</span><span class="sxs-lookup"><span data-stu-id="b67fc-291">Reads a number 7 bits at a time.</span></span></summary>
        <returns><span data-ttu-id="b67fc-292">从此二进制读取器实例中读取的数字。</span><span class="sxs-lookup"><span data-stu-id="b67fc-292">The number that is read from this binary reader instance.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadBoolean">
      <MemberSignature Language="C#" Value="public virtual bool ReadBoolean ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ReadBoolean() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.BinaryReader.ReadBoolean" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReadBoolean () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool ReadBoolean();" />
      <MemberSignature Language="F#" Value="abstract member ReadBoolean : unit -&gt; bool&#xA;override this.ReadBoolean : unit -&gt; bool" Usage="binaryReader.ReadBoolean " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b67fc-293">从当前流中读取 <see langword="Boolean" /> 值，并使该流的当前位置提升 1 个字节。</span><span class="sxs-lookup"><span data-stu-id="b67fc-293">Reads a <see langword="Boolean" /> value from the current stream and advances the current position of the stream by one byte.</span></span></summary>
        <returns><span data-ttu-id="b67fc-294">如果字节为非零则为 <see langword="true" />，否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="b67fc-294"><see langword="true" /> if the byte is nonzero; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b67fc-295"><xref:System.IO.BinaryReader> 读取失败后不还原文件位置。</span><span class="sxs-lookup"><span data-stu-id="b67fc-295"><xref:System.IO.BinaryReader> does not restore the file position after an unsuccessful read.</span></span>  
  
 <span data-ttu-id="b67fc-296">有关常见 i/o 任务的列表，请参阅 [常见 I/o 任务](/dotnet/standard/io/common-i-o-tasks)。</span><span class="sxs-lookup"><span data-stu-id="b67fc-296">For a list of common I/O tasks, see [Common I/O Tasks](/dotnet/standard/io/common-i-o-tasks).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b67fc-297">下面的代码示例演示如何在文件中存储和检索应用程序设置。</span><span class="sxs-lookup"><span data-stu-id="b67fc-297">The following code example demonstrates how to store and retrieve application settings in a file.</span></span>  
  
 [!code-csharp[System.IO.BinaryReaderWriter#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter/CS/source.cs#1)]
 [!code-vb[System.IO.BinaryReaderWriter#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.EndOfStreamException"><span data-ttu-id="b67fc-298">已到达流的末尾。</span><span class="sxs-lookup"><span data-stu-id="b67fc-298">The end of the stream is reached.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="b67fc-299">流已关闭。</span><span class="sxs-lookup"><span data-stu-id="b67fc-299">The stream is closed.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="b67fc-300">出现 I/O 错误。</span><span class="sxs-lookup"><span data-stu-id="b67fc-300">An I/O error occurred.</span></span></exception>
        <related type="Article" href="/dotnet/standard/io/"><span data-ttu-id="b67fc-301">文件和流 I/O</span><span class="sxs-lookup"><span data-stu-id="b67fc-301">File and Stream I/O</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file"><span data-ttu-id="b67fc-302">如何：从文件中读取文本</span><span class="sxs-lookup"><span data-stu-id="b67fc-302">How to: Read Text from a File</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file"><span data-ttu-id="b67fc-303">如何：将文本写入文件</span><span class="sxs-lookup"><span data-stu-id="b67fc-303">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ReadByte">
      <MemberSignature Language="C#" Value="public virtual byte ReadByte ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance unsigned int8 ReadByte() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.BinaryReader.ReadByte" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReadByte () As Byte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Byte ReadByte();" />
      <MemberSignature Language="F#" Value="abstract member ReadByte : unit -&gt; byte&#xA;override this.ReadByte : unit -&gt; byte" Usage="binaryReader.ReadByte " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b67fc-304">从当前流中读取下一个字节，并使流的当前位置提升 1 个字节。</span><span class="sxs-lookup"><span data-stu-id="b67fc-304">Reads the next byte from the current stream and advances the current position of the stream by one byte.</span></span></summary>
        <returns><span data-ttu-id="b67fc-305">从当前流中读取的下一个字节。</span><span class="sxs-lookup"><span data-stu-id="b67fc-305">The next byte read from the current stream.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b67fc-306"><xref:System.IO.BinaryReader> 读取失败后不还原文件位置。</span><span class="sxs-lookup"><span data-stu-id="b67fc-306"><xref:System.IO.BinaryReader> does not restore the file position after an unsuccessful read.</span></span>  
  
 <span data-ttu-id="b67fc-307">由于存在数据格式冲突，因此不建议将此方法用于以下编码：</span><span class="sxs-lookup"><span data-stu-id="b67fc-307">Because of data formatting conflicts, using this method with the following encodings is not recommended:</span></span>  
  
-   <span data-ttu-id="b67fc-308">UTF-7</span><span class="sxs-lookup"><span data-stu-id="b67fc-308">UTF-7</span></span>  
  
-   <span data-ttu-id="b67fc-309">ISO-2022-日本</span><span class="sxs-lookup"><span data-stu-id="b67fc-309">ISO-2022-JP</span></span>  
  
-   <span data-ttu-id="b67fc-310">ISCII</span><span class="sxs-lookup"><span data-stu-id="b67fc-310">ISCII</span></span>  
  
 <span data-ttu-id="b67fc-311">有关常见 i/o 任务的列表，请参阅 [常见 I/o 任务](/dotnet/standard/io/common-i-o-tasks)。</span><span class="sxs-lookup"><span data-stu-id="b67fc-311">For a list of common I/O tasks, see [Common I/O Tasks](/dotnet/standard/io/common-i-o-tasks).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b67fc-312">下面的代码示例演示如何使用内存作为后备存储来编写二进制数据，然后验证是否已正确写入数据。</span><span class="sxs-lookup"><span data-stu-id="b67fc-312">The following code example shows how to write binary data using memory as a backing store, and then verify that the data was written correctly.</span></span>  
  
 [!code-cpp[System.IO.BinaryReaderWriter.RWByte#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter.RWByte/CPP/rwbyte.cpp#1)]
 [!code-csharp[System.IO.BinaryReaderWriter.RWByte#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter.RWByte/CS/rwbyte.cs#1)]
 [!code-vb[System.IO.BinaryReaderWriter.RWByte#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter.RWByte/VB/rwbyte.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.EndOfStreamException"><span data-ttu-id="b67fc-313">已到达流的末尾。</span><span class="sxs-lookup"><span data-stu-id="b67fc-313">The end of the stream is reached.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="b67fc-314">流已关闭。</span><span class="sxs-lookup"><span data-stu-id="b67fc-314">The stream is closed.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="b67fc-315">出现 I/O 错误。</span><span class="sxs-lookup"><span data-stu-id="b67fc-315">An I/O error occurred.</span></span></exception>
        <related type="Article" href="/dotnet/standard/io/"><span data-ttu-id="b67fc-316">文件和流 I/O</span><span class="sxs-lookup"><span data-stu-id="b67fc-316">File and Stream I/O</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file"><span data-ttu-id="b67fc-317">如何：从文件中读取文本</span><span class="sxs-lookup"><span data-stu-id="b67fc-317">How to: Read Text from a File</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file"><span data-ttu-id="b67fc-318">如何：将文本写入文件</span><span class="sxs-lookup"><span data-stu-id="b67fc-318">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ReadBytes">
      <MemberSignature Language="C#" Value="public virtual byte[] ReadBytes (int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance unsigned int8[] ReadBytes(int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.BinaryReader.ReadBytes(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReadBytes (count As Integer) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Byte&gt; ^ ReadBytes(int count);" />
      <MemberSignature Language="F#" Value="abstract member ReadBytes : int -&gt; byte[]&#xA;override this.ReadBytes : int -&gt; byte[]" Usage="binaryReader.ReadBytes count" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="count"><span data-ttu-id="b67fc-319">要读取的字节数。</span><span class="sxs-lookup"><span data-stu-id="b67fc-319">The number of bytes to read.</span></span> <span data-ttu-id="b67fc-320">此值必须为 0 或非负数字，否则将出现异常。</span><span class="sxs-lookup"><span data-stu-id="b67fc-320">This value must be 0 or a non-negative number or an exception will occur.</span></span></param>
        <summary><span data-ttu-id="b67fc-321">从当前流中读取指定的字节数以写入字节数组中，并将当前位置前移相应的字节数。</span><span class="sxs-lookup"><span data-stu-id="b67fc-321">Reads the specified number of bytes from the current stream into a byte array and advances the current position by that number of bytes.</span></span></summary>
        <returns><span data-ttu-id="b67fc-322">包含从基础流中读取的数据的字节数组。</span><span class="sxs-lookup"><span data-stu-id="b67fc-322">A byte array containing data read from the underlying stream.</span></span> <span data-ttu-id="b67fc-323">如果到达了流的末尾，则该字节数组可能小于所请求的字节数。</span><span class="sxs-lookup"><span data-stu-id="b67fc-323">This might be less than the number of bytes requested if the end of the stream is reached.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b67fc-324"><xref:System.IO.BinaryReader> 读操作失败后不会还原文件位置。</span><span class="sxs-lookup"><span data-stu-id="b67fc-324"><xref:System.IO.BinaryReader> does not restore the file position after an unsuccessful read operation.</span></span>  
  
 <span data-ttu-id="b67fc-325">有关常见 i/o 任务的列表，请参阅 [常见 I/o 任务](/dotnet/standard/io/common-i-o-tasks)。</span><span class="sxs-lookup"><span data-stu-id="b67fc-325">For a list of common I/O tasks, see [Common I/O Tasks](/dotnet/standard/io/common-i-o-tasks).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b67fc-326">下面的代码示例演示如何使用内存作为后备存储来编写二进制数据，然后验证是否已正确写入数据。</span><span class="sxs-lookup"><span data-stu-id="b67fc-326">The following code example shows how to write binary data using memory as a backing store, and then verify that the data was written correctly.</span></span>  
  
 [!code-cpp[System.IO.BinaryReaderWriter.RWBytes1#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter.RWBytes1/CPP/rwbytes.cpp#1)]
 [!code-csharp[System.IO.BinaryReaderWriter.RWBytes1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter.RWBytes1/CS/rwbytes.cs#1)]
 [!code-vb[System.IO.BinaryReaderWriter.RWBytes1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter.RWBytes1/VB/rwbytes.vb#1)]  
  
 <span data-ttu-id="b67fc-327">此示例读取文件的内容，并将其作为转储文本显示到控制台。</span><span class="sxs-lookup"><span data-stu-id="b67fc-327">This example reads the contents of a file and displays it to the console as dump text.</span></span> <span data-ttu-id="b67fc-328">当 <xref:System.Byte> 从返回的数组的长度为零时，将检测到读取的文件的结尾 <xref:System.IO.BinaryReader.ReadBytes%2A> 。</span><span class="sxs-lookup"><span data-stu-id="b67fc-328">The end of the file that is being read is detected when the length of the <xref:System.Byte> array returned from <xref:System.IO.BinaryReader.ReadBytes%2A> is zero.</span></span>  
  
 [!code-csharp[System.IO.BinaryReaderWriter#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter/CS/source5.cs#6)]
 [!code-vb[System.IO.BinaryReaderWriter#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter/VB/source5.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b67fc-329">要读取的解码字符数大于 <paramref name="count" />。</span><span class="sxs-lookup"><span data-stu-id="b67fc-329">The number of decoded characters to read is greater than <paramref name="count" />.</span></span> <span data-ttu-id="b67fc-330">如果 Unicode 解码器返回回退字符或代理项对，则可能发生此情况。</span><span class="sxs-lookup"><span data-stu-id="b67fc-330">This can happen if a Unicode decoder returns fallback characters or a surrogate pair.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="b67fc-331">出现 I/O 错误。</span><span class="sxs-lookup"><span data-stu-id="b67fc-331">An I/O error occurred.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="b67fc-332">流已关闭。</span><span class="sxs-lookup"><span data-stu-id="b67fc-332">The stream is closed.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="b67fc-333"><paramref name="count" /> 为负数。</span><span class="sxs-lookup"><span data-stu-id="b67fc-333"><paramref name="count" /> is negative.</span></span></exception>
        <related type="Article" href="/dotnet/standard/io/"><span data-ttu-id="b67fc-334">文件和流 I/O</span><span class="sxs-lookup"><span data-stu-id="b67fc-334">File and Stream I/O</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file"><span data-ttu-id="b67fc-335">如何：从文件中读取文本</span><span class="sxs-lookup"><span data-stu-id="b67fc-335">How to: Read Text from a File</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file"><span data-ttu-id="b67fc-336">如何：将文本写入文件</span><span class="sxs-lookup"><span data-stu-id="b67fc-336">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ReadChar">
      <MemberSignature Language="C#" Value="public virtual char ReadChar ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance char ReadChar() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.BinaryReader.ReadChar" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReadChar () As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual char ReadChar();" />
      <MemberSignature Language="F#" Value="abstract member ReadChar : unit -&gt; char&#xA;override this.ReadChar : unit -&gt; char" Usage="binaryReader.ReadChar " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b67fc-337">从当前流中读取下一个字符，并根据所使用的 <see langword="Encoding" /> 和从流中读取的特定字符，提升流的当前位置。</span><span class="sxs-lookup"><span data-stu-id="b67fc-337">Reads the next character from the current stream and advances the current position of the stream in accordance with the <see langword="Encoding" /> used and the specific character being read from the stream.</span></span></summary>
        <returns><span data-ttu-id="b67fc-338">从当前流中读取的字符。</span><span class="sxs-lookup"><span data-stu-id="b67fc-338">A character read from the current stream.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b67fc-339">如果该 <xref:System.IO.BinaryReader.ReadChar%2A> 方法尝试读取流中的代理项字符，则会引发异常，并将提升流中的位置。</span><span class="sxs-lookup"><span data-stu-id="b67fc-339">If the <xref:System.IO.BinaryReader.ReadChar%2A> method attempts to read a surrogate character in the stream an exception will be raised and the position in the stream will advance.</span></span> <span data-ttu-id="b67fc-340">如果流可查找，则在调用之前将位置还原到原始位置 <xref:System.IO.BinaryReader.ReadChar%2A> ; 但是，如果流为 unseekable，则不会更正位置。</span><span class="sxs-lookup"><span data-stu-id="b67fc-340">The position is restored to the original location before <xref:System.IO.BinaryReader.ReadChar%2A> was called if the stream is seekable; however, if the stream is unseekable, the position will not be corrected.</span></span> <span data-ttu-id="b67fc-341">如果流中应有代理项字符，请改用 <xref:System.IO.BinaryReader.ReadChars%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="b67fc-341">If surrogate characters can be expected in the stream, use the <xref:System.IO.BinaryReader.ReadChars%2A> method instead.</span></span>  
  
 <span data-ttu-id="b67fc-342">由于存在数据格式冲突，因此不建议将此方法用于以下编码：</span><span class="sxs-lookup"><span data-stu-id="b67fc-342">Because of data formatting conflicts, using this method with the following encodings is not recommended:</span></span>  
  
-   <span data-ttu-id="b67fc-343">UTF-7</span><span class="sxs-lookup"><span data-stu-id="b67fc-343">UTF-7</span></span>  
  
-   <span data-ttu-id="b67fc-344">ISO-2022-日本</span><span class="sxs-lookup"><span data-stu-id="b67fc-344">ISO-2022-JP</span></span>  
  
-   <span data-ttu-id="b67fc-345">ISCII</span><span class="sxs-lookup"><span data-stu-id="b67fc-345">ISCII</span></span>  
  
 <span data-ttu-id="b67fc-346">有关常见 i/o 任务的列表，请参阅 [常见 I/o 任务](/dotnet/standard/io/common-i-o-tasks)。</span><span class="sxs-lookup"><span data-stu-id="b67fc-346">For a list of common I/O tasks, see [Common I/O Tasks](/dotnet/standard/io/common-i-o-tasks).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b67fc-347">下面的代码示例演示如何使用内存作为后备存储来读取和写入数据。</span><span class="sxs-lookup"><span data-stu-id="b67fc-347">The following code example shows how to read and write data using memory as a backing store.</span></span>  
  
 [!code-cpp[System.IO.BinaryReaderWriter.RWChar1#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter.RWChar1/CPP/rwchar.cpp#1)]
 [!code-csharp[System.IO.BinaryReaderWriter.RWChar1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter.RWChar1/CS/rwchar.cs#1)]
 [!code-vb[System.IO.BinaryReaderWriter.RWChar1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter.RWChar1/VB/rwchar.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.EndOfStreamException"><span data-ttu-id="b67fc-348">已到达流的末尾。</span><span class="sxs-lookup"><span data-stu-id="b67fc-348">The end of the stream is reached.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="b67fc-349">流已关闭。</span><span class="sxs-lookup"><span data-stu-id="b67fc-349">The stream is closed.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="b67fc-350">出现 I/O 错误。</span><span class="sxs-lookup"><span data-stu-id="b67fc-350">An I/O error occurred.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b67fc-351">读取了一个代理项字符。</span><span class="sxs-lookup"><span data-stu-id="b67fc-351">A surrogate character was read.</span></span></exception>
        <altmember cref="T:System.Text.Encoding" />
        <related type="Article" href="/dotnet/standard/io/"><span data-ttu-id="b67fc-352">文件和流 I/O</span><span class="sxs-lookup"><span data-stu-id="b67fc-352">File and Stream I/O</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file"><span data-ttu-id="b67fc-353">如何：从文件中读取文本</span><span class="sxs-lookup"><span data-stu-id="b67fc-353">How to: Read Text from a File</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file"><span data-ttu-id="b67fc-354">如何：将文本写入文件</span><span class="sxs-lookup"><span data-stu-id="b67fc-354">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ReadChars">
      <MemberSignature Language="C#" Value="public virtual char[] ReadChars (int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance char[] ReadChars(int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.BinaryReader.ReadChars(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReadChars (count As Integer) As Char()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;char&gt; ^ ReadChars(int count);" />
      <MemberSignature Language="F#" Value="abstract member ReadChars : int -&gt; char[]&#xA;override this.ReadChars : int -&gt; char[]" Usage="binaryReader.ReadChars count" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Char[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="count"><span data-ttu-id="b67fc-355">要读取的字符数。</span><span class="sxs-lookup"><span data-stu-id="b67fc-355">The number of characters to read.</span></span></param>
        <summary><span data-ttu-id="b67fc-356">从当前流中读取指定的字符数，并以字符数组的形式返回数据，然后根据所使用的 <see langword="Encoding" /> 和从流中读取的特定字符，将当前位置前移。</span><span class="sxs-lookup"><span data-stu-id="b67fc-356">Reads the specified number of characters from the current stream, returns the data in a character array, and advances the current position in accordance with the <see langword="Encoding" /> used and the specific character being read from the stream.</span></span></summary>
        <returns><span data-ttu-id="b67fc-357">包含从基础流中读取的数据的字节数组。</span><span class="sxs-lookup"><span data-stu-id="b67fc-357">A character array containing data read from the underlying stream.</span></span> <span data-ttu-id="b67fc-358">如果到达了流的末尾，则该字符数组可能小于所请求的字符数。</span><span class="sxs-lookup"><span data-stu-id="b67fc-358">This might be less than the number of characters requested if the end of the stream is reached.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b67fc-359"><xref:System.IO.BinaryReader> 读操作失败后不会还原文件位置。</span><span class="sxs-lookup"><span data-stu-id="b67fc-359"><xref:System.IO.BinaryReader> does not restore the file position after an unsuccessful read operation.</span></span>  
  
 <span data-ttu-id="b67fc-360">从网络流中读取时， <xref:System.IO.BinaryReader.ReadChars%2A> 如果 <xref:System.IO.BinaryReader> 使用 Unicode 编码构造，则该方法可能会从流中读取额外的字符。</span><span class="sxs-lookup"><span data-stu-id="b67fc-360">When reading from network streams, in some rare cases, the <xref:System.IO.BinaryReader.ReadChars%2A> method might read an extra character from the stream if the <xref:System.IO.BinaryReader> was constructed with Unicode encoding.</span></span> <span data-ttu-id="b67fc-361">如果出现这种情况，可以使用 <xref:System.IO.BinaryReader.ReadBytes%2A> 方法读取固定长度的字节数组，然后将该数组传递给 <xref:System.IO.BinaryReader.ReadChars%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="b67fc-361">If this occurs, you can use the <xref:System.IO.BinaryReader.ReadBytes%2A> method to read a fixed-length byte array, and then pass that array to the <xref:System.IO.BinaryReader.ReadChars%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b67fc-362">下面的代码示例演示如何使用内存作为后备存储来读取和写入数据。</span><span class="sxs-lookup"><span data-stu-id="b67fc-362">The following code example shows how to read and write data using memory as a backing store.</span></span>  
  
 [!code-cpp[System.IO.BinaryReaderWriter.RWChars1#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter.RWChars1/CPP/rwchars.cpp#1)]
 [!code-csharp[System.IO.BinaryReaderWriter.RWChars1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter.RWChars1/CS/rwchars.cs#1)]
 [!code-vb[System.IO.BinaryReaderWriter.RWChars1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter.RWChars1/VB/rwchars.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b67fc-363">要读取的解码字符数大于 <paramref name="count" />。</span><span class="sxs-lookup"><span data-stu-id="b67fc-363">The number of decoded characters to read is greater than <paramref name="count" />.</span></span> <span data-ttu-id="b67fc-364">如果 Unicode 解码器返回回退字符或代理项对，则可能发生此情况。</span><span class="sxs-lookup"><span data-stu-id="b67fc-364">This can happen if a Unicode decoder returns fallback characters or a surrogate pair.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="b67fc-365">流已关闭。</span><span class="sxs-lookup"><span data-stu-id="b67fc-365">The stream is closed.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="b67fc-366">出现 I/O 错误。</span><span class="sxs-lookup"><span data-stu-id="b67fc-366">An I/O error occurred.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="b67fc-367"><paramref name="count" /> 为负数。</span><span class="sxs-lookup"><span data-stu-id="b67fc-367"><paramref name="count" /> is negative.</span></span></exception>
        <altmember cref="T:System.Text.Encoding" />
        <related type="Article" href="/dotnet/standard/io/"><span data-ttu-id="b67fc-368">文件和流 I/O</span><span class="sxs-lookup"><span data-stu-id="b67fc-368">File and Stream I/O</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file"><span data-ttu-id="b67fc-369">如何：从文件中读取文本</span><span class="sxs-lookup"><span data-stu-id="b67fc-369">How to: Read Text from a File</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file"><span data-ttu-id="b67fc-370">如何：将文本写入文件</span><span class="sxs-lookup"><span data-stu-id="b67fc-370">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ReadDecimal">
      <MemberSignature Language="C#" Value="public virtual decimal ReadDecimal ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Decimal ReadDecimal() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.BinaryReader.ReadDecimal" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReadDecimal () As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Decimal ReadDecimal();" />
      <MemberSignature Language="F#" Value="abstract member ReadDecimal : unit -&gt; decimal&#xA;override this.ReadDecimal : unit -&gt; decimal" Usage="binaryReader.ReadDecimal " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b67fc-371">从当前流中读取十进制数值，并将该流的当前位置提升十六个字节。</span><span class="sxs-lookup"><span data-stu-id="b67fc-371">Reads a decimal value from the current stream and advances the current position of the stream by sixteen bytes.</span></span></summary>
        <returns><span data-ttu-id="b67fc-372">从当前流中读取的十进制数值。</span><span class="sxs-lookup"><span data-stu-id="b67fc-372">A decimal value read from the current stream.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b67fc-373"><xref:System.IO.BinaryReader> 读取失败后不还原文件位置。</span><span class="sxs-lookup"><span data-stu-id="b67fc-373"><xref:System.IO.BinaryReader> does not restore the file position after an unsuccessful read.</span></span>  
  
 <span data-ttu-id="b67fc-374">有关常见 i/o 任务的列表，请参阅 [常见 I/o 任务](/dotnet/standard/io/common-i-o-tasks)。</span><span class="sxs-lookup"><span data-stu-id="b67fc-374">For a list of common I/O tasks, see [Common I/O Tasks](/dotnet/standard/io/common-i-o-tasks).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.EndOfStreamException"><span data-ttu-id="b67fc-375">已到达流的末尾。</span><span class="sxs-lookup"><span data-stu-id="b67fc-375">The end of the stream is reached.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="b67fc-376">流已关闭。</span><span class="sxs-lookup"><span data-stu-id="b67fc-376">The stream is closed.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="b67fc-377">出现 I/O 错误。</span><span class="sxs-lookup"><span data-stu-id="b67fc-377">An I/O error occurred.</span></span></exception>
        <related type="Article" href="/dotnet/standard/io/"><span data-ttu-id="b67fc-378">文件和流 I/O</span><span class="sxs-lookup"><span data-stu-id="b67fc-378">File and Stream I/O</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file"><span data-ttu-id="b67fc-379">如何：从文件中读取文本</span><span class="sxs-lookup"><span data-stu-id="b67fc-379">How to: Read Text from a File</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file"><span data-ttu-id="b67fc-380">如何：将文本写入文件</span><span class="sxs-lookup"><span data-stu-id="b67fc-380">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ReadDouble">
      <MemberSignature Language="C#" Value="public virtual double ReadDouble ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ReadDouble() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.BinaryReader.ReadDouble" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReadDouble () As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual double ReadDouble();" />
      <MemberSignature Language="F#" Value="abstract member ReadDouble : unit -&gt; double&#xA;override this.ReadDouble : unit -&gt; double" Usage="binaryReader.ReadDouble " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b67fc-381">从当前流中读取 8 字节浮点值，并使流的当前位置提升 8 个字节。</span><span class="sxs-lookup"><span data-stu-id="b67fc-381">Reads an 8-byte floating point value from the current stream and advances the current position of the stream by eight bytes.</span></span></summary>
        <returns><span data-ttu-id="b67fc-382">从当前流中读取的 8 字节浮点值。</span><span class="sxs-lookup"><span data-stu-id="b67fc-382">An 8-byte floating point value read from the current stream.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b67fc-383"><xref:System.IO.BinaryReader> 读取失败后不还原文件位置。</span><span class="sxs-lookup"><span data-stu-id="b67fc-383"><xref:System.IO.BinaryReader> does not restore the file position after an unsuccessful read.</span></span>  
  
 <span data-ttu-id="b67fc-384">`BinaryReader` 以小字节序格式读取此数据类型。</span><span class="sxs-lookup"><span data-stu-id="b67fc-384">`BinaryReader` reads this data type in little-endian format.</span></span>  
  
 <span data-ttu-id="b67fc-385">有关常见 i/o 任务的列表，请参阅 [常见 I/o 任务](/dotnet/standard/io/common-i-o-tasks)。</span><span class="sxs-lookup"><span data-stu-id="b67fc-385">For a list of common I/O tasks, see [Common I/O Tasks](/dotnet/standard/io/common-i-o-tasks).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b67fc-386">下面的代码示例演示如何使用类的和类，在内存中读取和写入 `Double` 数据 `BinaryReader` <xref:System.IO.BinaryWriter> <xref:System.IO.MemoryStream> 。</span><span class="sxs-lookup"><span data-stu-id="b67fc-386">The following code example shows how to read and write `Double` data to memory by using the `BinaryReader` and <xref:System.IO.BinaryWriter> classes on top of the <xref:System.IO.MemoryStream> class.</span></span> <span data-ttu-id="b67fc-387">`MemoryStream` 仅读取和写入 `Byte` 数据。</span><span class="sxs-lookup"><span data-stu-id="b67fc-387">`MemoryStream` only reads and writes `Byte` data.</span></span>  
  
 [!code-cpp[System.IO.BinaryReaderWriter.RWDouble#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter.RWDouble/CPP/rwdouble.cpp#1)]
 [!code-csharp[System.IO.BinaryReaderWriter.RWDouble#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter.RWDouble/CS/rwdouble.cs#1)]
 [!code-vb[System.IO.BinaryReaderWriter.RWDouble#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter.RWDouble/VB/rwdouble.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.EndOfStreamException"><span data-ttu-id="b67fc-388">已到达流的末尾。</span><span class="sxs-lookup"><span data-stu-id="b67fc-388">The end of the stream is reached.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="b67fc-389">流已关闭。</span><span class="sxs-lookup"><span data-stu-id="b67fc-389">The stream is closed.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="b67fc-390">出现 I/O 错误。</span><span class="sxs-lookup"><span data-stu-id="b67fc-390">An I/O error occurred.</span></span></exception>
        <related type="Article" href="/dotnet/standard/io/"><span data-ttu-id="b67fc-391">文件和流 I/O</span><span class="sxs-lookup"><span data-stu-id="b67fc-391">File and Stream I/O</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file"><span data-ttu-id="b67fc-392">如何：从文件中读取文本</span><span class="sxs-lookup"><span data-stu-id="b67fc-392">How to: Read Text from a File</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file"><span data-ttu-id="b67fc-393">如何：将文本写入文件</span><span class="sxs-lookup"><span data-stu-id="b67fc-393">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ReadInt16">
      <MemberSignature Language="C#" Value="public virtual short ReadInt16 ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int16 ReadInt16() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.BinaryReader.ReadInt16" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReadInt16 () As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual short ReadInt16();" />
      <MemberSignature Language="F#" Value="abstract member ReadInt16 : unit -&gt; int16&#xA;override this.ReadInt16 : unit -&gt; int16" Usage="binaryReader.ReadInt16 " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b67fc-394">从当前流中读取 2 字节有符号整数，并使流的当前位置提升 2 个字节。</span><span class="sxs-lookup"><span data-stu-id="b67fc-394">Reads a 2-byte signed integer from the current stream and advances the current position of the stream by two bytes.</span></span></summary>
        <returns><span data-ttu-id="b67fc-395">从当前流中读取的 2 字节有符号整数。</span><span class="sxs-lookup"><span data-stu-id="b67fc-395">A 2-byte signed integer read from the current stream.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b67fc-396"><xref:System.IO.BinaryReader> 读取失败后不还原文件位置。</span><span class="sxs-lookup"><span data-stu-id="b67fc-396"><xref:System.IO.BinaryReader> does not restore the file position after an unsuccessful read.</span></span>  
  
 <span data-ttu-id="b67fc-397">`BinaryReader` 以小字节序格式读取此数据类型。</span><span class="sxs-lookup"><span data-stu-id="b67fc-397">`BinaryReader` reads this data type in little-endian format.</span></span>  
  
 <span data-ttu-id="b67fc-398">有关常见 i/o 任务的列表，请参阅 [常见 I/o 任务](/dotnet/standard/io/common-i-o-tasks)。</span><span class="sxs-lookup"><span data-stu-id="b67fc-398">For a list of common I/O tasks, see [Common I/O Tasks](/dotnet/standard/io/common-i-o-tasks).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.EndOfStreamException"><span data-ttu-id="b67fc-399">已到达流的末尾。</span><span class="sxs-lookup"><span data-stu-id="b67fc-399">The end of the stream is reached.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="b67fc-400">流已关闭。</span><span class="sxs-lookup"><span data-stu-id="b67fc-400">The stream is closed.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="b67fc-401">出现 I/O 错误。</span><span class="sxs-lookup"><span data-stu-id="b67fc-401">An I/O error occurred.</span></span></exception>
        <related type="Article" href="/dotnet/standard/io/"><span data-ttu-id="b67fc-402">文件和流 I/O</span><span class="sxs-lookup"><span data-stu-id="b67fc-402">File and Stream I/O</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file"><span data-ttu-id="b67fc-403">如何：从文件中读取文本</span><span class="sxs-lookup"><span data-stu-id="b67fc-403">How to: Read Text from a File</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file"><span data-ttu-id="b67fc-404">如何：将文本写入文件</span><span class="sxs-lookup"><span data-stu-id="b67fc-404">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ReadInt32">
      <MemberSignature Language="C#" Value="public virtual int ReadInt32 ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 ReadInt32() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.BinaryReader.ReadInt32" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReadInt32 () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int ReadInt32();" />
      <MemberSignature Language="F#" Value="abstract member ReadInt32 : unit -&gt; int&#xA;override this.ReadInt32 : unit -&gt; int" Usage="binaryReader.ReadInt32 " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b67fc-405">从当前流中读取 4 字节有符号整数，并使流的当前位置提升 4 个字节。</span><span class="sxs-lookup"><span data-stu-id="b67fc-405">Reads a 4-byte signed integer from the current stream and advances the current position of the stream by four bytes.</span></span></summary>
        <returns><span data-ttu-id="b67fc-406">从当前流中读取的 2 字节有符号整数。</span><span class="sxs-lookup"><span data-stu-id="b67fc-406">A 4-byte signed integer read from the current stream.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b67fc-407"><xref:System.IO.BinaryReader> 读取失败后不还原文件位置。</span><span class="sxs-lookup"><span data-stu-id="b67fc-407"><xref:System.IO.BinaryReader> does not restore the file position after an unsuccessful read.</span></span>  
  
 <span data-ttu-id="b67fc-408"><xref:System.IO.BinaryReader> 以小字节序格式读取此数据类型。</span><span class="sxs-lookup"><span data-stu-id="b67fc-408"><xref:System.IO.BinaryReader> reads this data type in little-endian format.</span></span>  
  
 <span data-ttu-id="b67fc-409">有关常见 i/o 任务的列表，请参阅 [常见 I/o 任务](/dotnet/standard/io/common-i-o-tasks)。</span><span class="sxs-lookup"><span data-stu-id="b67fc-409">For a list of common I/O tasks, see [Common I/O Tasks](/dotnet/standard/io/common-i-o-tasks).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b67fc-410">下面的代码示例演示如何在文件中存储和检索应用程序设置。</span><span class="sxs-lookup"><span data-stu-id="b67fc-410">The following code example demonstrates how to store and retrieve application settings in a file.</span></span>  
  
 [!code-csharp[System.IO.BinaryReaderWriter#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter/CS/source.cs#1)]
 [!code-vb[System.IO.BinaryReaderWriter#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.EndOfStreamException"><span data-ttu-id="b67fc-411">已到达流的末尾。</span><span class="sxs-lookup"><span data-stu-id="b67fc-411">The end of the stream is reached.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="b67fc-412">流已关闭。</span><span class="sxs-lookup"><span data-stu-id="b67fc-412">The stream is closed.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="b67fc-413">出现 I/O 错误。</span><span class="sxs-lookup"><span data-stu-id="b67fc-413">An I/O error occurred.</span></span></exception>
        <related type="Article" href="/dotnet/standard/io/"><span data-ttu-id="b67fc-414">文件和流 I/O</span><span class="sxs-lookup"><span data-stu-id="b67fc-414">File and Stream I/O</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file"><span data-ttu-id="b67fc-415">如何：从文件中读取文本</span><span class="sxs-lookup"><span data-stu-id="b67fc-415">How to: Read Text from a File</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file"><span data-ttu-id="b67fc-416">如何：将文本写入文件</span><span class="sxs-lookup"><span data-stu-id="b67fc-416">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ReadInt64">
      <MemberSignature Language="C#" Value="public virtual long ReadInt64 ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int64 ReadInt64() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.BinaryReader.ReadInt64" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReadInt64 () As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual long ReadInt64();" />
      <MemberSignature Language="F#" Value="abstract member ReadInt64 : unit -&gt; int64&#xA;override this.ReadInt64 : unit -&gt; int64" Usage="binaryReader.ReadInt64 " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b67fc-417">从当前流中读取 8 字节有符号整数，并使流的当前位置提升 8 个字节。</span><span class="sxs-lookup"><span data-stu-id="b67fc-417">Reads an 8-byte signed integer from the current stream and advances the current position of the stream by eight bytes.</span></span></summary>
        <returns><span data-ttu-id="b67fc-418">从当前流中读取的 8 字节有符号整数。</span><span class="sxs-lookup"><span data-stu-id="b67fc-418">An 8-byte signed integer read from the current stream.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b67fc-419"><xref:System.IO.BinaryReader> 读取失败后不还原文件位置。</span><span class="sxs-lookup"><span data-stu-id="b67fc-419"><xref:System.IO.BinaryReader> does not restore the file position after an unsuccessful read.</span></span>  
  
 <span data-ttu-id="b67fc-420">`BinaryReader` 以小字节序格式读取此数据类型。</span><span class="sxs-lookup"><span data-stu-id="b67fc-420">`BinaryReader` reads this data type in little-endian format.</span></span>  
  
 <span data-ttu-id="b67fc-421">有关常见 i/o 任务的列表，请参阅 [常见 I/o 任务](/dotnet/standard/io/common-i-o-tasks)。</span><span class="sxs-lookup"><span data-stu-id="b67fc-421">For a list of common I/O tasks, see [Common I/O Tasks](/dotnet/standard/io/common-i-o-tasks).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.EndOfStreamException"><span data-ttu-id="b67fc-422">已到达流的末尾。</span><span class="sxs-lookup"><span data-stu-id="b67fc-422">The end of the stream is reached.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="b67fc-423">流已关闭。</span><span class="sxs-lookup"><span data-stu-id="b67fc-423">The stream is closed.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="b67fc-424">出现 I/O 错误。</span><span class="sxs-lookup"><span data-stu-id="b67fc-424">An I/O error occurred.</span></span></exception>
        <related type="Article" href="/dotnet/standard/io/"><span data-ttu-id="b67fc-425">文件和流 I/O</span><span class="sxs-lookup"><span data-stu-id="b67fc-425">File and Stream I/O</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file"><span data-ttu-id="b67fc-426">如何：从文件中读取文本</span><span class="sxs-lookup"><span data-stu-id="b67fc-426">How to: Read Text from a File</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file"><span data-ttu-id="b67fc-427">如何：将文本写入文件</span><span class="sxs-lookup"><span data-stu-id="b67fc-427">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ReadSByte">
      <MemberSignature Language="C#" Value="public virtual sbyte ReadSByte ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int8 ReadSByte() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.BinaryReader.ReadSByte" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReadSByte () As SByte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::SByte ReadSByte();" />
      <MemberSignature Language="F#" Value="abstract member ReadSByte : unit -&gt; sbyte&#xA;override this.ReadSByte : unit -&gt; sbyte" Usage="binaryReader.ReadSByte " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.CLSCompliant(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.CLSCompliant(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b67fc-428">从此流中读取 1 个有符号字节，并使流的当前位置提升 1 个字节。</span><span class="sxs-lookup"><span data-stu-id="b67fc-428">Reads a signed byte from this stream and advances the current position of the stream by one byte.</span></span></summary>
        <returns><span data-ttu-id="b67fc-429">从当前流中读取的一个有符号字节。</span><span class="sxs-lookup"><span data-stu-id="b67fc-429">A signed byte read from the current stream.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b67fc-430"><xref:System.IO.BinaryReader> 读取失败后不还原文件位置。</span><span class="sxs-lookup"><span data-stu-id="b67fc-430"><xref:System.IO.BinaryReader> does not restore the file position after an unsuccessful read.</span></span>  
  
 <span data-ttu-id="b67fc-431">有关常见 i/o 任务的列表，请参阅 [常见 I/o 任务](/dotnet/standard/io/common-i-o-tasks)。</span><span class="sxs-lookup"><span data-stu-id="b67fc-431">For a list of common I/O tasks, see [Common I/O Tasks](/dotnet/standard/io/common-i-o-tasks).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.EndOfStreamException"><span data-ttu-id="b67fc-432">已到达流的末尾。</span><span class="sxs-lookup"><span data-stu-id="b67fc-432">The end of the stream is reached.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="b67fc-433">流已关闭。</span><span class="sxs-lookup"><span data-stu-id="b67fc-433">The stream is closed.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="b67fc-434">出现 I/O 错误。</span><span class="sxs-lookup"><span data-stu-id="b67fc-434">An I/O error occurred.</span></span></exception>
        <related type="Article" href="/dotnet/standard/io/"><span data-ttu-id="b67fc-435">文件和流 I/O</span><span class="sxs-lookup"><span data-stu-id="b67fc-435">File and Stream I/O</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file"><span data-ttu-id="b67fc-436">如何：从文件中读取文本</span><span class="sxs-lookup"><span data-stu-id="b67fc-436">How to: Read Text from a File</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file"><span data-ttu-id="b67fc-437">如何：将文本写入文件</span><span class="sxs-lookup"><span data-stu-id="b67fc-437">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ReadSingle">
      <MemberSignature Language="C#" Value="public virtual float ReadSingle ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float32 ReadSingle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.BinaryReader.ReadSingle" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReadSingle () As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual float ReadSingle();" />
      <MemberSignature Language="F#" Value="abstract member ReadSingle : unit -&gt; single&#xA;override this.ReadSingle : unit -&gt; single" Usage="binaryReader.ReadSingle " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b67fc-438">从当前流中读取 4 字节浮点值，并使流的当前位置提升 4 个字节。</span><span class="sxs-lookup"><span data-stu-id="b67fc-438">Reads a 4-byte floating point value from the current stream and advances the current position of the stream by four bytes.</span></span></summary>
        <returns><span data-ttu-id="b67fc-439">从当前流中读取的 4 字节浮点值。</span><span class="sxs-lookup"><span data-stu-id="b67fc-439">A 4-byte floating point value read from the current stream.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b67fc-440"><xref:System.IO.BinaryReader> 读取失败后不还原文件位置。</span><span class="sxs-lookup"><span data-stu-id="b67fc-440"><xref:System.IO.BinaryReader> does not restore the file position after an unsuccessful read.</span></span>  
  
 <span data-ttu-id="b67fc-441">`BinaryReader` 以小字节序格式读取此数据类型。</span><span class="sxs-lookup"><span data-stu-id="b67fc-441">`BinaryReader` reads this data type in little-endian format.</span></span>  
  
 <span data-ttu-id="b67fc-442">有关常见 i/o 任务的列表，请参阅 [常见 I/o 任务](/dotnet/standard/io/common-i-o-tasks)。</span><span class="sxs-lookup"><span data-stu-id="b67fc-442">For a list of common I/O tasks, see [Common I/O Tasks](/dotnet/standard/io/common-i-o-tasks).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b67fc-443">下面的代码示例演示如何在文件中存储和检索应用程序设置。</span><span class="sxs-lookup"><span data-stu-id="b67fc-443">The following code example demonstrates how to store and retrieve application settings in a file.</span></span>  
  
 [!code-csharp[System.IO.BinaryReaderWriter#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter/CS/source.cs#1)]
 [!code-vb[System.IO.BinaryReaderWriter#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.EndOfStreamException"><span data-ttu-id="b67fc-444">已到达流的末尾。</span><span class="sxs-lookup"><span data-stu-id="b67fc-444">The end of the stream is reached.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="b67fc-445">流已关闭。</span><span class="sxs-lookup"><span data-stu-id="b67fc-445">The stream is closed.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="b67fc-446">出现 I/O 错误。</span><span class="sxs-lookup"><span data-stu-id="b67fc-446">An I/O error occurred.</span></span></exception>
        <related type="Article" href="/dotnet/standard/io/"><span data-ttu-id="b67fc-447">文件和流 I/O</span><span class="sxs-lookup"><span data-stu-id="b67fc-447">File and Stream I/O</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file"><span data-ttu-id="b67fc-448">如何：从文件中读取文本</span><span class="sxs-lookup"><span data-stu-id="b67fc-448">How to: Read Text from a File</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file"><span data-ttu-id="b67fc-449">如何：将文本写入文件</span><span class="sxs-lookup"><span data-stu-id="b67fc-449">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ReadString">
      <MemberSignature Language="C#" Value="public virtual string ReadString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ReadString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.BinaryReader.ReadString" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReadString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ReadString();" />
      <MemberSignature Language="F#" Value="abstract member ReadString : unit -&gt; string&#xA;override this.ReadString : unit -&gt; string" Usage="binaryReader.ReadString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b67fc-450">从当前流中读取一个字符串。</span><span class="sxs-lookup"><span data-stu-id="b67fc-450">Reads a string from the current stream.</span></span> <span data-ttu-id="b67fc-451">字符串有长度前缀，一次 7 位地被编码为整数。</span><span class="sxs-lookup"><span data-stu-id="b67fc-451">The string is prefixed with the length, encoded as an integer seven bits at a time.</span></span></summary>
        <returns><span data-ttu-id="b67fc-452">正被读取的字符串。</span><span class="sxs-lookup"><span data-stu-id="b67fc-452">The string being read.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b67fc-453"><xref:System.IO.BinaryReader> 读取失败后不还原文件位置。</span><span class="sxs-lookup"><span data-stu-id="b67fc-453"><xref:System.IO.BinaryReader> does not restore the file position after an unsuccessful read.</span></span>  
  
 <span data-ttu-id="b67fc-454">有关常见 i/o 任务的列表，请参阅 [常见 I/o 任务](/dotnet/standard/io/common-i-o-tasks)。</span><span class="sxs-lookup"><span data-stu-id="b67fc-454">For a list of common I/O tasks, see [Common I/O Tasks](/dotnet/standard/io/common-i-o-tasks).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b67fc-455">下面的代码示例演示如何在文件中存储和检索应用程序设置。</span><span class="sxs-lookup"><span data-stu-id="b67fc-455">The following code example demonstrates how to store and retrieve application settings in a file.</span></span>  
  
 [!code-csharp[System.IO.BinaryReaderWriter#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter/CS/source.cs#1)]
 [!code-vb[System.IO.BinaryReaderWriter#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.EndOfStreamException"><span data-ttu-id="b67fc-456">已到达流的末尾。</span><span class="sxs-lookup"><span data-stu-id="b67fc-456">The end of the stream is reached.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="b67fc-457">流已关闭。</span><span class="sxs-lookup"><span data-stu-id="b67fc-457">The stream is closed.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="b67fc-458">出现 I/O 错误。</span><span class="sxs-lookup"><span data-stu-id="b67fc-458">An I/O error occurred.</span></span></exception>
        <related type="Article" href="/dotnet/standard/io/"><span data-ttu-id="b67fc-459">文件和流 I/O</span><span class="sxs-lookup"><span data-stu-id="b67fc-459">File and Stream I/O</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file"><span data-ttu-id="b67fc-460">如何：从文件中读取文本</span><span class="sxs-lookup"><span data-stu-id="b67fc-460">How to: Read Text from a File</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file"><span data-ttu-id="b67fc-461">如何：将文本写入文件</span><span class="sxs-lookup"><span data-stu-id="b67fc-461">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ReadUInt16">
      <MemberSignature Language="C#" Value="public virtual ushort ReadUInt16 ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance unsigned int16 ReadUInt16() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.BinaryReader.ReadUInt16" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReadUInt16 () As UShort" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::UInt16 ReadUInt16();" />
      <MemberSignature Language="F#" Value="abstract member ReadUInt16 : unit -&gt; uint16&#xA;override this.ReadUInt16 : unit -&gt; uint16" Usage="binaryReader.ReadUInt16 " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.CLSCompliant(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.CLSCompliant(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b67fc-462">使用 Little-Endian 编码从当前流中读取 2 字节无符号整数，并将流的位置提升 2 个字节。</span><span class="sxs-lookup"><span data-stu-id="b67fc-462">Reads a 2-byte unsigned integer from the current stream using little-endian encoding and advances the position of the stream by two bytes.</span></span></summary>
        <returns><span data-ttu-id="b67fc-463">从该流中读取的 2 字节无符号整数。</span><span class="sxs-lookup"><span data-stu-id="b67fc-463">A 2-byte unsigned integer read from this stream.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b67fc-464"><xref:System.IO.BinaryReader> 读取失败后不还原文件位置。</span><span class="sxs-lookup"><span data-stu-id="b67fc-464"><xref:System.IO.BinaryReader> does not restore the file position after an unsuccessful read.</span></span>  
  
 <span data-ttu-id="b67fc-465">`BinaryReader` 以小字节序格式读取此数据类型。</span><span class="sxs-lookup"><span data-stu-id="b67fc-465">`BinaryReader` reads this data type in little-endian format.</span></span>  
  
 <span data-ttu-id="b67fc-466">有关常见 i/o 任务的列表，请参阅 [常见 I/o 任务](/dotnet/standard/io/common-i-o-tasks)。</span><span class="sxs-lookup"><span data-stu-id="b67fc-466">For a list of common I/O tasks, see [Common I/O Tasks](/dotnet/standard/io/common-i-o-tasks).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.EndOfStreamException"><span data-ttu-id="b67fc-467">已到达流的末尾。</span><span class="sxs-lookup"><span data-stu-id="b67fc-467">The end of the stream is reached.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="b67fc-468">流已关闭。</span><span class="sxs-lookup"><span data-stu-id="b67fc-468">The stream is closed.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="b67fc-469">出现 I/O 错误。</span><span class="sxs-lookup"><span data-stu-id="b67fc-469">An I/O error occurred.</span></span></exception>
        <related type="Article" href="/dotnet/standard/io/"><span data-ttu-id="b67fc-470">文件和流 I/O</span><span class="sxs-lookup"><span data-stu-id="b67fc-470">File and Stream I/O</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file"><span data-ttu-id="b67fc-471">如何：从文件中读取文本</span><span class="sxs-lookup"><span data-stu-id="b67fc-471">How to: Read Text from a File</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file"><span data-ttu-id="b67fc-472">如何：将文本写入文件</span><span class="sxs-lookup"><span data-stu-id="b67fc-472">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ReadUInt32">
      <MemberSignature Language="C#" Value="public virtual uint ReadUInt32 ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance unsigned int32 ReadUInt32() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.BinaryReader.ReadUInt32" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReadUInt32 () As UInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::UInt32 ReadUInt32();" />
      <MemberSignature Language="F#" Value="abstract member ReadUInt32 : unit -&gt; uint32&#xA;override this.ReadUInt32 : unit -&gt; uint32" Usage="binaryReader.ReadUInt32 " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.CLSCompliant(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.CLSCompliant(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b67fc-473">从当前流中读取 4 字节无符号整数并使流的当前位置提升 4 个字节。</span><span class="sxs-lookup"><span data-stu-id="b67fc-473">Reads a 4-byte unsigned integer from the current stream and advances the position of the stream by four bytes.</span></span></summary>
        <returns><span data-ttu-id="b67fc-474">从该流中读取的 4 字节无符号整数。</span><span class="sxs-lookup"><span data-stu-id="b67fc-474">A 4-byte unsigned integer read from this stream.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b67fc-475"><xref:System.IO.BinaryReader> 读取失败后不还原文件位置。</span><span class="sxs-lookup"><span data-stu-id="b67fc-475"><xref:System.IO.BinaryReader> does not restore the file position after an unsuccessful read.</span></span>  
  
 <span data-ttu-id="b67fc-476">`BinaryReader` 以小字节序格式读取此数据类型。</span><span class="sxs-lookup"><span data-stu-id="b67fc-476">`BinaryReader` reads this data type in little-endian format.</span></span>  
  
 <span data-ttu-id="b67fc-477">有关常见 i/o 任务的列表，请参阅 [常见 I/o 任务](/dotnet/standard/io/common-i-o-tasks)。</span><span class="sxs-lookup"><span data-stu-id="b67fc-477">For a list of common I/O tasks, see [Common I/O Tasks](/dotnet/standard/io/common-i-o-tasks).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.EndOfStreamException"><span data-ttu-id="b67fc-478">已到达流的末尾。</span><span class="sxs-lookup"><span data-stu-id="b67fc-478">The end of the stream is reached.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="b67fc-479">流已关闭。</span><span class="sxs-lookup"><span data-stu-id="b67fc-479">The stream is closed.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="b67fc-480">出现 I/O 错误。</span><span class="sxs-lookup"><span data-stu-id="b67fc-480">An I/O error occurred.</span></span></exception>
        <related type="Article" href="/dotnet/standard/io/"><span data-ttu-id="b67fc-481">文件和流 I/O</span><span class="sxs-lookup"><span data-stu-id="b67fc-481">File and Stream I/O</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file"><span data-ttu-id="b67fc-482">如何：从文件中读取文本</span><span class="sxs-lookup"><span data-stu-id="b67fc-482">How to: Read Text from a File</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file"><span data-ttu-id="b67fc-483">如何：将文本写入文件</span><span class="sxs-lookup"><span data-stu-id="b67fc-483">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ReadUInt64">
      <MemberSignature Language="C#" Value="public virtual ulong ReadUInt64 ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance unsigned int64 ReadUInt64() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.BinaryReader.ReadUInt64" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReadUInt64 () As ULong" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::UInt64 ReadUInt64();" />
      <MemberSignature Language="F#" Value="abstract member ReadUInt64 : unit -&gt; uint64&#xA;override this.ReadUInt64 : unit -&gt; uint64" Usage="binaryReader.ReadUInt64 " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.CLSCompliant(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.CLSCompliant(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b67fc-484">从当前流中读取 8 字节无符号整数并使流的当前位置提升 8 个字节。</span><span class="sxs-lookup"><span data-stu-id="b67fc-484">Reads an 8-byte unsigned integer from the current stream and advances the position of the stream by eight bytes.</span></span></summary>
        <returns><span data-ttu-id="b67fc-485">从该流中读取的 8 字节无符号整数。</span><span class="sxs-lookup"><span data-stu-id="b67fc-485">An 8-byte unsigned integer read from this stream.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b67fc-486"><xref:System.IO.BinaryReader> 读取失败后不还原文件位置。</span><span class="sxs-lookup"><span data-stu-id="b67fc-486"><xref:System.IO.BinaryReader> does not restore the file position after an unsuccessful read.</span></span>  
  
 <span data-ttu-id="b67fc-487">`BinaryReader` 以小字节序格式读取此数据类型。</span><span class="sxs-lookup"><span data-stu-id="b67fc-487">`BinaryReader` reads this data type in little-endian format.</span></span>  
  
 <span data-ttu-id="b67fc-488">有关常见 i/o 任务的列表，请参阅 [常见 I/o 任务](/dotnet/standard/io/common-i-o-tasks)。</span><span class="sxs-lookup"><span data-stu-id="b67fc-488">For a list of common I/O tasks, see [Common I/O Tasks](/dotnet/standard/io/common-i-o-tasks).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.EndOfStreamException"><span data-ttu-id="b67fc-489">已到达流的末尾。</span><span class="sxs-lookup"><span data-stu-id="b67fc-489">The end of the stream is reached.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="b67fc-490">出现 I/O 错误。</span><span class="sxs-lookup"><span data-stu-id="b67fc-490">An I/O error occurred.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="b67fc-491">流已关闭。</span><span class="sxs-lookup"><span data-stu-id="b67fc-491">The stream is closed.</span></span></exception>
        <related type="Article" href="/dotnet/standard/io/"><span data-ttu-id="b67fc-492">文件和流 I/O</span><span class="sxs-lookup"><span data-stu-id="b67fc-492">File and Stream I/O</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file"><span data-ttu-id="b67fc-493">如何：从文件中读取文本</span><span class="sxs-lookup"><span data-stu-id="b67fc-493">How to: Read Text from a File</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file"><span data-ttu-id="b67fc-494">如何：将文本写入文件</span><span class="sxs-lookup"><span data-stu-id="b67fc-494">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="System.IDisposable.Dispose">
      <MemberSignature Language="C#" Value="void IDisposable.Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.IDisposable.Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.BinaryReader.System#IDisposable#Dispose" />
      <MemberSignature Language="VB.NET" Value="Sub Dispose () Implements IDisposable.Dispose" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.IDisposable.Dispose() = IDisposable::Dispose;" />
      <MemberSignature Language="F#" Value="abstract member System.IDisposable.Dispose : unit -&gt; unit&#xA;override this.System.IDisposable.Dispose : unit -&gt; unit" Usage="binaryReader.System.IDisposable.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b67fc-495">释放由 <see cref="T:System.IO.BinaryReader" /> 使用的所有资源。</span><span class="sxs-lookup"><span data-stu-id="b67fc-495">Releases all resources used by the <see cref="T:System.IO.BinaryReader" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
<span data-ttu-id="b67fc-496">调用 <xref:System.IO.BinaryReader.Dispose%2A> 会允许出于其他目的重新分配所使用的资源 <xref:System.IO.BinaryReader> 。</span><span class="sxs-lookup"><span data-stu-id="b67fc-496">Calling <xref:System.IO.BinaryReader.Dispose%2A> allows the resources used by the <xref:System.IO.BinaryReader> to be reallocated for other purposes.</span></span> <span data-ttu-id="b67fc-497">有关的详细信息 <xref:System.IO.BinaryReader.Dispose%2A> ，请参阅 [清理非托管资源](/dotnet/standard/garbage-collection/unmanaged)。</span><span class="sxs-lookup"><span data-stu-id="b67fc-497">For more information about <xref:System.IO.BinaryReader.Dispose%2A>, see [Cleaning Up Unmanaged Resources](/dotnet/standard/garbage-collection/unmanaged).</span></span>

]]></format>
        </remarks>
        <forInternalUseOnly />
        <related type="Article" href="/dotnet/standard/io/"><span data-ttu-id="b67fc-498">文件和流 I/O</span><span class="sxs-lookup"><span data-stu-id="b67fc-498">File and Stream I/O</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file"><span data-ttu-id="b67fc-499">如何：从文件中读取文本</span><span class="sxs-lookup"><span data-stu-id="b67fc-499">How to: Read Text from a File</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file"><span data-ttu-id="b67fc-500">如何：将文本写入文件</span><span class="sxs-lookup"><span data-stu-id="b67fc-500">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>
