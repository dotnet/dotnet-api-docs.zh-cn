<Type Name="TextWriter" FullName="System.IO.TextWriter">
  <Metadata><Meta Name="ms.openlocfilehash" Value="9e5ebb0d3ef232263b371eeb1699ac8d404f5df7" /><Meta Name="ms.sourcegitcommit" Value="a8ca33e500a87229bed50d12e09b1347df519648" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="10/09/2020" /><Meta Name="ms.locfileid" Value="91913913" /></Metadata><TypeSignature Language="C#" Value="public abstract class TextWriter : IDisposable" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit TextWriter extends System.Object implements class System.IDisposable" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6" />
  <TypeSignature Language="DocId" Value="T:System.IO.TextWriter" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class TextWriter&#xA;Implements IDisposable" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6" />
  <TypeSignature Language="C++ CLI" Value="public ref class TextWriter abstract : IDisposable" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6" />
  <TypeSignature Language="F#" Value="type TextWriter = class&#xA;    interface IDisposable" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6" />
  <TypeSignature Language="C#" Value="public abstract class TextWriter : MarshalByRefObject, IAsyncDisposable, IDisposable" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netstandard-2.1" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit TextWriter extends System.MarshalByRefObject implements class System.IAsyncDisposable, class System.IDisposable" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netstandard-2.1" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class TextWriter&#xA;Inherits MarshalByRefObject&#xA;Implements IAsyncDisposable, IDisposable" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netstandard-2.1" />
  <TypeSignature Language="C++ CLI" Value="public ref class TextWriter abstract : MarshalByRefObject, IAsyncDisposable, IDisposable" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netstandard-2.1" />
  <TypeSignature Language="F#" Value="type TextWriter = class&#xA;    inherit MarshalByRefObject&#xA;    interface IAsyncDisposable&#xA;    interface IDisposable" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netstandard-2.1" />
  <TypeSignature Language="C#" Value="public abstract class TextWriter : MarshalByRefObject, IDisposable" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit TextWriter extends System.MarshalByRefObject implements class System.IDisposable" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netstandard-2.0" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class TextWriter&#xA;Inherits MarshalByRefObject&#xA;Implements IDisposable" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="C++ CLI" Value="public ref class TextWriter abstract : MarshalByRefObject, IDisposable" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="F#" Value="type TextWriter = class&#xA;    inherit MarshalByRefObject&#xA;    interface IDisposable" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract serializable beforefieldinit TextWriter extends System.MarshalByRefObject implements class System.IDisposable" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <AssemblyInfo>
    <AssemblyName>System.IO</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Extensions</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="mscorlib" FromVersion="4.0.0.0" To="System.IO" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0" />
    <TypeForwarding From="mscorlib" FromVersion="4.0.0.0" To="System.Runtime" ToVersion="0.0.0.0" FrameworkAlternate="net-5.0" />
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Runtime" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
    <TypeForwarding From="System.IO" FromVersion="5.0.0.0" To="System.Runtime" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
    <TypeForwarding From="System.Runtime.Extensions" FromVersion="5.0.0.0" To="System.Runtime" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
    <TypeForwarding From="System.IO" FromVersion="4.2.0.0" To="System.Runtime.Extensions" ToVersion="4.2.0.0" FrameworkAlternate="netcore-2.0" />
    <TypeForwarding From="System.IO" FromVersion="4.2.1.0" To="System.Runtime.Extensions" ToVersion="4.2.1.0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0" />
    <TypeForwarding From="System.IO" FromVersion="4.2.2.0" To="System.Runtime.Extensions" ToVersion="4.2.2.0" FrameworkAlternate="netcore-3.1" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
    <BaseTypeName FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netstandard-2.1">
      <InterfaceName>System.IAsyncDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName Language="C#">[System.Serializable]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Serializable&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName Language="C#">[System.Runtime.InteropServices.ComVisible(true)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.ComVisible(true)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>表示可以编写一个有序字符系列的编写器。 此类为抽象类。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.TextWriter> 是和的抽象基类 <xref:System.IO.StreamWriter> <xref:System.IO.StringWriter> ，分别将字符写入流和字符串。 创建的实例 <xref:System.IO.TextWriter> ，将对象写入字符串，将字符串写入文件，或序列化 XML。 你还可以使用的实例将 <xref:System.IO.TextWriter> 文本写入自定义后备存储，方法是使用用于字符串或流的相同 api，或添加对文本格式的支持。  
  
 将 `Write` <xref:System.IO.TextWriter> 基元数据类型作为参数的所有方法都将值作为字符串写入。  
  
 默认情况下， <xref:System.IO.TextWriter> 不是线程安全的。 <xref:System.IO.TextWriter.Synchronized%2A?displayProperty=nameWithType>有关线程安全包装，请参阅。  
  
> [!IMPORTANT]
>  此类型实现 <xref:System.IDisposable> 接口。 当你完成使用从此类型派生的任何类型时，应直接或间接释放它。 若要直接释放类型，请在 `try`/`catch` 块中调用其 <xref:System.IO.TextWriter.Dispose%2A> 方法。 若要间接释放类型，请使用 `using`（在 C# 中）或 `Using`（在 Visual Basic 中）等语言构造。 有关详细信息，请参阅接口主题中的 Dispose 和 "使用实现 IDisposable 的对象" 一节 <xref:System.IDisposable> 。  
  
 有关常见 i/o 任务的列表，请参阅 [常见 I/o 任务](/dotnet/standard/io/common-i-o-tasks)。  
  
   
  
## Examples  
  类是一个抽象类。 因此，不要在代码中对其进行实例化。 <xref:System.IO.StreamWriter>类派生自 <xref:System.IO.TextWriter> ，并提供用于写入流的成员的实现。 下面的示例演示如何使用方法将包含字符串值的两行写入文本文件 <xref:System.IO.StreamWriter.WriteLineAsync%28System.String%29> 。  
  
 重写派生类中的 Dispose 以提供  
  
 [!code-csharp[System.IO.StreamWriter#23](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.StreamWriter/CS/example23.cs#23)]
 [!code-vb[System.IO.StreamWriter#23](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.StreamWriter/VB/example23.vb#23)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para>派生类必须至少实现 <see cref="M:System.IO.TextWriter.Write(System.Char)" /> 方法以生成有用的实例 <see cref="T:System.IO.TextWriter" /> 。</para></block>
    <altmember cref="T:System.IO.StreamWriter" />
    <altmember cref="T:System.IO.StringWriter" />
    <related type="Article" href="/dotnet/standard/io/">文件和流 I/O</related>
    <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file">如何：从文件中读取文本</related>
    <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file">如何：将文本写入文件</related>
    <related type="Article" href="/dotnet/standard/io/how-to-read-and-write-to-a-newly-created-data-file">如何：对新建的数据文件进行读取和写入</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.IO.TextWriter" /> 类的新实例。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected TextWriter ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; TextWriter();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.IO.TextWriter" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果您不希望为属性提供值，请使用此构造函数重载 <xref:System.IO.TextWriter.FormatProvider%2A> 。 当 <xref:System.IO.TextWriter.FormatProvider%2A> 属性为时 `null` ，当前线程的区域性用于格式设置。  
  
 将此构造函数用于派生类。  
  
 有关常见 i/o 任务的列表，请参阅 [常见 I/o 任务](/dotnet/standard/io/common-i-o-tasks)。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.StreamWriter" />
        <altmember cref="T:System.IO.StringWriter" />
        <related type="Article" href="/dotnet/standard/base-types/composite-formatting">复合格式设置</related>
        <related type="Article" href="/dotnet/standard/io/">文件和流 I/O</related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file">如何：从文件中读取文本</related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file">如何：将文本写入文件</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected TextWriter (IFormatProvider formatProvider);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.IFormatProvider formatProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.#ctor(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (formatProvider As IFormatProvider)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; TextWriter(IFormatProvider ^ formatProvider);" />
      <MemberSignature Language="F#" Value="new System.IO.TextWriter : IFormatProvider -&gt; System.IO.TextWriter" Usage="new System.IO.TextWriter formatProvider" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="formatProvider">控制格式设置的 <see cref="T:System.IFormatProvider" /> 对象。</param>
        <summary>使用指定的格式提供程序初始化 <see cref="T:System.IO.TextWriter" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用此构造函数重载提供属性的值 <xref:System.IO.TextWriter.FormatProvider%2A> 。 属性的值 <xref:System.IO.TextWriter.FormatProvider%2A> 指定调用和方法时使用的特定于区域性的格式设置 <xref:System.IO.TextWriter.Write%2A> <xref:System.IO.TextWriter.WriteLine%2A> 。 如果你不希望提供格式提供程序，可以使用构造函数创建一个实例 <xref:System.IO.TextWriter.%23ctor> ，该构造函数将属性设置 <xref:System.IO.TextWriter.FormatProvider%2A> 为 `null` 。 当 <xref:System.IO.TextWriter.FormatProvider%2A> 属性为时 `null` ，当前线程的区域性用于格式设置。  
  
 有关常见 i/o 任务的列表，请参阅 [常见 I/o 任务](/dotnet/standard/io/common-i-o-tasks)。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.StreamWriter" />
        <altmember cref="T:System.IO.StringWriter" />
        <related type="Article" href="/dotnet/standard/base-types/composite-formatting">复合格式设置</related>
        <related type="Article" href="/dotnet/standard/io/">文件和流 I/O</related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file">如何：从文件中读取文本</related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file">如何：将文本写入文件</related>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public virtual void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.Close" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Close();" />
      <MemberSignature Language="F#" Value="abstract member Close : unit -&gt; unit&#xA;override this.Close : unit -&gt; unit" Usage="textWriter.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>关闭当前编写器并释放任何与该编写器关联的系统资源。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此实现 `Close` 调用 <xref:System.IO.TextWriter.Dispose%28System.Boolean%29?displayProperty=nameWithType> 方法并向其传递一个 `true` 值。  
  
 除非显式调用或，否则刷新流将不会刷新其基础编码器 <xref:System.IO.TextWriter.Flush%2A> `Close` 。 如果将 <xref:System.IO.StreamWriter.AutoFlush%2A?displayProperty=nameWithType> 属性设置为，则 `true` 表示数据将从缓冲区刷新到流，但编码器状态不会被刷新。 这样，编码器就可以将其状态保留 (部分字符) 以便它能够正确地编码下一个字符块。 此方案影响 UTF8 和 UTF7，其中某些字符只能在编码器接收到相邻字符后进行编码。  
  
> [!NOTE]
>  在派生类中，不要重写 <xref:System.IO.TextWriter.Close%2A> 方法。 相反，重写 <xref:System.IO.TextWriter.Dispose%28System.Boolean%29?displayProperty=nameWithType> 方法以添加用于释放资源的代码。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/standard/io/">文件和流 I/O</related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file">如何：从文件中读取文本</related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file">如何：将文本写入文件</related>
      </Docs>
    </Member>
    <Member MemberName="CoreNewLine">
      <MemberSignature Language="C#" Value="protected char[] CoreNewLine;" />
      <MemberSignature Language="ILAsm" Value=".field family char[] CoreNewLine" />
      <MemberSignature Language="DocId" Value="F:System.IO.TextWriter.CoreNewLine" />
      <MemberSignature Language="VB.NET" Value="Protected CoreNewLine As Char() " />
      <MemberSignature Language="C++ CLI" Value="protected: cli::array &lt;char&gt; ^ CoreNewLine;" />
      <MemberSignature Language="F#" Value="val mutable CoreNewLine : char[]" Usage="System.IO.TextWriter.CoreNewLine" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>存储用于此 <see langword="TextWriter" /> 的换行符。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关常见 i/o 任务的列表，请参阅 [常见 I/o 任务](/dotnet/standard/io/common-i-o-tasks)。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.StreamWriter" />
        <altmember cref="T:System.IO.StringWriter" />
        <related type="Article" href="/dotnet/standard/io/">文件和流 I/O</related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file">如何：从文件中读取文本</related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file">如何：将文本写入文件</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>释放由 <see cref="T:System.IO.TextWriter" /> 对象使用的所有资源。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="textWriter.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>释放由 <see cref="T:System.IO.TextWriter" /> 对象使用的所有资源。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在完成使用 <xref:System.IO.TextWriter.Dispose%2A> 后，应调用 <xref:System.IO.TextWriter>。 <xref:System.IO.TextWriter.Dispose%2A> 方法使 <xref:System.IO.TextWriter> 处于不可用状态。 调用后 <xref:System.IO.TextWriter.Dispose%2A> ，必须释放对的所有引用， <xref:System.IO.TextWriter> 以便垃圾回收器能够回收占用的内存 <xref:System.IO.TextWriter> 。  
  
 有关详细信息，请参阅 [清理非托管资源](/dotnet/standard/garbage-collection/unmanaged) 和 [实现 Dispose 方法](/dotnet/standard/garbage-collection/implementing-dispose)。  
  
 **注意** 在 <xref:System.IO.TextWriter.Dispose%2A> 释放对的最后一个引用之前，始终调用 <xref:System.IO.TextWriter> 。 否则，在垃圾回收器调用 <xref:System.IO.TextWriter> 对象的 <xref:System.Object.Finalize%2A> 方法之前，该对象正在使用的资源不会被释放。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="textWriter.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">若要释放托管资源和非托管资源，则为 <see langword="true" />；若仅释放非托管资源，则为 <see langword="false" />。</param>
        <summary>释放由 <see cref="T:System.IO.TextWriter" /> 占用的非托管资源，还可以另外再释放托管资源。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法由和调用 `Dispose` <xref:System.Object.Finalize%2A> 。 默认情况下，此方法将 `disposing` 参数指定为 `true` 。 <xref:System.Object.Finalize%2A> 指定 `disposing` 参数为 `false` 。  
  
 当 `disposing` 参数为 `true` 时，此方法释放该 <xref:System.IO.TextWriter> 引用的、由任何托管对象持有的全部资源。 此方法将调用每个被引用对象的 `Dispose` 方法。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>
            <see cref="M:System.IO.TextWriter.Dispose(System.Boolean)" /> 可以由其他对象多次调用。 重写此方法时，请注意不要引用先前在调用时已释放的对象 <see langword="Dispose" /> 。 有关如何实现此方法的详细信息，请参阅 [实现 Dispose 方法](/dotnet/standard/garbage-collection/implementing-dispose)。  
  
有关和的详细 <see cref="M:System.IDisposable.Dispose" /> 信息 <see cref="M:System.Object.Finalize" /> ，请参阅 [清理非托管资源](/dotnet/standard/garbage-collection/unmanaged)。</para></block>
        <related type="Article" href="/dotnet/standard/io/">文件和流 I/O</related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file">如何：从文件中读取文本</related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file">如何：将文本写入文件</related>
      </Docs>
    </Member>
    <Member MemberName="DisposeAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.ValueTask DisposeAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Threading.Tasks.ValueTask DisposeAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.DisposeAsync" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DisposeAsync () As ValueTask" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::ValueTask DisposeAsync();" />
      <MemberSignature Language="F#" Value="abstract member DisposeAsync : unit -&gt; System.Threading.Tasks.ValueTask&#xA;override this.DisposeAsync : unit -&gt; System.Threading.Tasks.ValueTask" Usage="textWriter.DisposeAsync " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IAsyncDisposable.DisposeAsync</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>异步释放由 <see cref="T:System.IO.TextWriter" /> 对象使用的所有资源。</summary>
        <returns>一个表示异步释放操作的任务。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Encoding">
      <MemberSignature Language="C#" Value="public abstract System.Text.Encoding Encoding { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.Encoding Encoding" />
      <MemberSignature Language="DocId" Value="P:System.IO.TextWriter.Encoding" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Encoding As Encoding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Text::Encoding ^ Encoding { System::Text::Encoding ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Encoding : System.Text.Encoding" Usage="System.IO.TextWriter.Encoding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当在派生类中重写时，返回用来写输出的该字符编码。</summary>
        <value>用来写入输出的字符编码。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 对于必须编写包含所使用编码的标头的某些 XML 方案，此属性是必需的 `TextWriter` 。 这使得 XML 代码可以使用任意 `TextWriter` 并生成正确的 XML 标头。  
  
 有关常见 i/o 任务的列表，请参阅 [常见 I/o 任务](/dotnet/standard/io/common-i-o-tasks)。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.StreamWriter" />
        <altmember cref="T:System.IO.StringWriter" />
        <related type="Article" href="/dotnet/standard/io/">文件和流 I/O</related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file">如何：从文件中读取文本</related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file">如何：将文本写入文件</related>
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public virtual void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Flush() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.Flush" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Flush ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Flush();" />
      <MemberSignature Language="F#" Value="abstract member Flush : unit -&gt; unit&#xA;override this.Flush : unit -&gt; unit" Usage="textWriter.Flush " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>清理当前编写器的所有缓冲区，使所有缓冲数据写入基础设备。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此默认方法不执行任何操作，但派生的类可以重写方法以提供相应的功能。  
  
 除非显式调用或，否则刷新流将不会刷新其基础编码器 `Flush` <xref:System.IO.TextWriter.Close%2A> 。 如果设置为，则 <xref:System.IO.StreamWriter.AutoFlush%2A> `true` 表示将数据从缓冲区刷新到流，但不会刷新编码器状态。 这样，编码器就可以将其状态保留 (部分字符) 以便它能够正确地编码下一个字符块。 此方案影响 UTF8 和 UTF7，其中某些字符只能在编码器接收到相邻字符后编码。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.StreamWriter" />
        <altmember cref="T:System.IO.StringWriter" />
        <related type="Article" href="/dotnet/standard/io/">文件和流 I/O</related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file">如何：从文件中读取文本</related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file">如何：将文本写入文件</related>
      </Docs>
    </Member>
    <Member MemberName="FlushAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task FlushAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task FlushAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.FlushAsync" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function FlushAsync () As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ FlushAsync();" />
      <MemberSignature Language="F#" Value="abstract member FlushAsync : unit -&gt; System.Threading.Tasks.Task&#xA;override this.FlushAsync : unit -&gt; System.Threading.Tasks.Task" Usage="textWriter.FlushAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Runtime.InteropServices.ComVisible(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.ComVisible(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>异步清理当前编写器的所有缓冲区，使所有缓冲数据写入基础设备。</summary>
        <returns>表示异步刷新操作的任务。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">文本编写器已被释放。</exception>
        <exception cref="T:System.InvalidOperationException">编写器正在由其前一次写操作使用。</exception>
        <altmember cref="T:System.IO.StreamWriter" />
        <altmember cref="T:System.IO.StringWriter" />
      </Docs>
    </Member>
    <Member MemberName="FormatProvider">
      <MemberSignature Language="C#" Value="public virtual IFormatProvider FormatProvider { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IFormatProvider FormatProvider" />
      <MemberSignature Language="DocId" Value="P:System.IO.TextWriter.FormatProvider" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property FormatProvider As IFormatProvider" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property IFormatProvider ^ FormatProvider { IFormatProvider ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.FormatProvider : IFormatProvider" Usage="System.IO.TextWriter.FormatProvider" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IFormatProvider</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取控制格式设置的对象。</summary>
        <value>特定区域性的 <see cref="T:System.IFormatProvider" /> 对象，或者如果未指定任何其他区域性，则为当前区域性的格式设置。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 属性的值 <xref:System.IO.TextWriter.FormatProvider%2A> 指定调用和方法时使用的特定于区域性的格式设置 <xref:System.IO.TextWriter.Write%2A> <xref:System.IO.TextWriter.WriteLine%2A> 。 如果你不希望提供格式提供程序，可以使用构造函数创建一个实例 <xref:System.IO.TextWriter.%23ctor> ，该构造函数将属性设置 <xref:System.IO.TextWriter.FormatProvider%2A> 为 `null` 。 当 <xref:System.IO.TextWriter.FormatProvider%2A> 属性包含时 `null` ，当前线程的区域性用于格式设置。  
  
 有关创建文件和将文本写入文件的示例，请参阅 [如何：将文本写入文件](/dotnet/standard/io/how-to-write-text-to-a-file)。 有关从文件读取文本的示例，请参阅 [如何：从文件读取文本](/dotnet/standard/io/how-to-read-text-from-a-file)。 有关从二进制文件读取和写入二进制文件的示例，请参阅 [如何：读取和写入到新创建的数据文件](/dotnet/standard/io/how-to-read-and-write-to-a-newly-created-data-file)。  
  
 有关常见 i/o 任务的列表，请参阅 [常见 I/o 任务](/dotnet/standard/io/common-i-o-tasks)。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.StreamWriter" />
        <altmember cref="T:System.IO.StringWriter" />
        <related type="Article" href="/dotnet/standard/io/">文件和流 I/O</related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file">如何：从文件中读取文本</related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file">如何：将文本写入文件</related>
      </Docs>
    </Member>
    <Member MemberName="NewLine">
      <MemberSignature Language="C#" Value="public virtual string NewLine { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NewLine" />
      <MemberSignature Language="DocId" Value="P:System.IO.TextWriter.NewLine" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property NewLine As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ NewLine { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.NewLine : string with get, set" Usage="System.IO.TextWriter.NewLine" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置由当前 <see langword="TextWriter" /> 使用的行结束符字符串。</summary>
        <value>当前 <see langword="TextWriter" /> 的行结束符字符串。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 默认行终止符字符串是一个回车符后跟一个换行符 ( "\r\n" ) 。  
  
 当调用其中一种方法时，将行结束符字符串写入到文本流中 `WriteLine` 。 为了使由编写的文本可 `TextWriter` 供读取 <xref:System.IO.TextReader> ，只应将 "\n" 或 "\r\n" 用作终止符字符串。 如果 `NewLine` 设置为 `null` ，则改为使用默认换行字符。  
  
 有关常见 i/o 任务的列表，请参阅 [常见 I/o 任务](/dotnet/standard/io/common-i-o-tasks)。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.StreamWriter" />
        <altmember cref="T:System.IO.StringWriter" />
        <related type="Article" href="/dotnet/standard/io/">文件和流 I/O</related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file">如何：从文件中读取文本</related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file">如何：将文本写入文件</related>
      </Docs>
    </Member>
    <Member MemberName="Null">
      <MemberSignature Language="C#" Value="public static readonly System.IO.TextWriter Null;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.IO.TextWriter Null" />
      <MemberSignature Language="DocId" Value="F:System.IO.TextWriter.Null" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Null As TextWriter " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::IO::TextWriter ^ Null;" />
      <MemberSignature Language="F#" Value=" staticval mutable Null : System.IO.TextWriter" Usage="System.IO.TextWriter.Null" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.TextWriter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>提供 <see langword="TextWriter" />，它不带任何可写入但无法从中读取的后备存储。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用将 `Null` 输出重定向到不使用任何操作系统资源的流。  
  
 当 <xref:System.IO.TextWriter.Write%2A?displayProperty=nameWithType> 在上调用方法时 `Null` ，调用只会返回，而不会向任何后备存储写入任何数据。  
  
 有关常见 i/o 任务的列表，请参阅 [常见 I/o 任务](/dotnet/standard/io/common-i-o-tasks)。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.StreamWriter" />
        <altmember cref="T:System.IO.StringWriter" />
        <related type="Article" href="/dotnet/standard/io/">文件和流 I/O</related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file">如何：从文件中读取文本</related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file">如何：将文本写入文件</related>
      </Docs>
    </Member>
    <Member MemberName="Synchronized">
      <MemberSignature Language="C#" Value="public static System.IO.TextWriter Synchronized (System.IO.TextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.TextWriter Synchronized(class System.IO.TextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.Synchronized(System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Synchronized (writer As TextWriter) As TextWriter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::TextWriter ^ Synchronized(System::IO::TextWriter ^ writer);" />
      <MemberSignature Language="F#" Value="static member Synchronized : System.IO.TextWriter -&gt; System.IO.TextWriter" Usage="System.IO.TextWriter.Synchronized writer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.TextWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="writer">要同步的 <see langword="TextWriter" />。</param>
        <summary>在指定的 <see langword="TextWriter" /> 周围创建线程安全包装。</summary>
        <returns>线程安全包装。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 对返回的包装的所有写入操作都是线程安全的。 调用此方法可以确保一次只有一个线程可以在返回的实例上执行方法 <xref:System.IO.TextWriter> 。 有关同步和线程处理的详细信息，请参阅为 [多线程处理同步数据](/dotnet/standard/threading/synchronizing-data-for-multithreading)。  
  
 有关常见 i/o 任务的列表，请参阅 [常见 I/o 任务](/dotnet/standard/io/common-i-o-tasks)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="writer" /> 为 <see langword="null" />。</exception>
        <related type="Article" href="/dotnet/standard/io/">文件和流 I/O</related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file">如何：从文件中读取文本</related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file">如何：将文本写入文件</related>
      </Docs>
    </Member>
    <Member MemberName="System.IDisposable.Dispose">
      <MemberSignature Language="C#" Value="void IDisposable.Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.IDisposable.Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.System#IDisposable#Dispose" />
      <MemberSignature Language="VB.NET" Value="Sub Dispose () Implements IDisposable.Dispose" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.IDisposable.Dispose() = IDisposable::Dispose;" />
      <MemberSignature Language="F#" Value="abstract member System.IDisposable.Dispose : unit -&gt; unit&#xA;override this.System.IDisposable.Dispose : unit -&gt; unit" Usage="textWriter.System.IDisposable.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>有关此成员的说明，请参见 <see cref="M:System.IDisposable.Dispose" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
此成员是显式接口成员的实现。 它只能在 <xref:System.IO.TextWriter> 实例被强制转换为 <xref:System.IDisposable> 接口时使用。

]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Write">
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>将数据写入文本流。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public virtual void Write (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Write(bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.Write(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Write (value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Write(bool value);" />
      <MemberSignature Language="F#" Value="abstract member Write : bool -&gt; unit&#xA;override this.Write : bool -&gt; unit" Usage="textWriter.Write value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value">要写入的 <see langword="Boolean" /> 值。</param>
        <summary>将 <see langword="Boolean" /> 值的文本表示形式写入文本流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 通过调用方法来生成指定值的文本表示形式 <xref:System.Boolean.ToString%2A?displayProperty=nameWithType> 。  
  
 此方法输出 <xref:System.Boolean.TrueString?displayProperty=nameWithType> 或 <xref:System.Boolean.FalseString?displayProperty=nameWithType> 。  
  
 有关常见 i/o 任务的列表，请参阅 [常见 I/o 任务](/dotnet/standard/io/common-i-o-tasks)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.IO.TextWriter" /> 是关闭的。</exception>
        <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
        <altmember cref="T:System.IO.StreamWriter" />
        <altmember cref="T:System.IO.StringWriter" />
        <related type="Article" href="/dotnet/standard/io/">文件和流 I/O</related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file">如何：从文件中读取文本</related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file">如何：将文本写入文件</related>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public abstract void Write (char value);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Write(char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.Write(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub Write (value As Char)" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void Write(char value);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6" />
      <MemberSignature Language="F#" Value="abstract member Write : char -&gt; unit" Usage="textWriter.Write value" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6" />
      <MemberSignature Language="C#" Value="public virtual void Write (char value);" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Write (value As Char)" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Write(char value);" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="abstract member Write : char -&gt; unit&#xA;override this.Write : char -&gt; unit" Usage="textWriter.Write value" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="value">要写入文本流中的字符。</param>
        <summary>将字符写入文本流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此默认方法不执行任何操作，但派生的类可以重写方法以提供相应的功能。  
  
 有关常见 i/o 任务的列表，请参阅 [常见 I/o 任务](/dotnet/standard/io/common-i-o-tasks)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.IO.TextWriter" /> 是关闭的。</exception>
        <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
        <altmember cref="M:System.IO.StreamWriter.Write(System.Char)" />
        <altmember cref="M:System.IO.StringWriter.Write(System.Char)" />
        <related type="Article" href="/dotnet/standard/io/">文件和流 I/O</related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file">如何：从文件中读取文本</related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file">如何：将文本写入文件</related>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public virtual void Write (char[] buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Write(char[] buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.Write(System.Char[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Write (buffer As Char())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Write(cli::array &lt;char&gt; ^ buffer);" />
      <MemberSignature Language="F#" Value="abstract member Write : char[] -&gt; unit&#xA;override this.Write : char[] -&gt; unit" Usage="textWriter.Write buffer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
      </Parameters>
      <Docs>
        <param name="buffer">要写入文本流中的字符数组。</param>
        <summary>将字符数组写入文本流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法不会在指定字符串中搜索 (十六进制 0x000a) 的单个换行符，并将其替换为 <xref:System.IO.TextWriter.NewLine%2A> 。  
  
 此默认方法调用 <xref:System.IO.TextWriter.Write%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29> 方法并传递整个字符数组。 如果字符数组为 `null` ，则不写入任何内容。  
  
 有关常见 i/o 任务的列表，请参阅 [常见 I/o 任务](/dotnet/standard/io/common-i-o-tasks)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.IO.TextWriter" /> 是关闭的。</exception>
        <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
        <altmember cref="M:System.IO.StreamWriter.Write(System.Char[])" />
        <related type="Article" href="/dotnet/standard/io/">文件和流 I/O</related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file">如何：从文件中读取文本</related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file">如何：将文本写入文件</related>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public virtual void Write (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Write(valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.Write(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Write (value As Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Write(System::Decimal value);" />
      <MemberSignature Language="F#" Value="abstract member Write : decimal -&gt; unit&#xA;override this.Write : decimal -&gt; unit" Usage="textWriter.Write value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value">要写入的十进制值。</param>
        <summary>将小数值的文本表示形式写入文本流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.TextWriter.FormatProvider%2A>如果不是，则属性 `null` 指定区域性特定的格式设置。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.IO.TextWriter" /> 是关闭的。</exception>
        <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
        <altmember cref="T:System.IO.StreamWriter" />
        <altmember cref="T:System.IO.StringWriter" />
        <altmember cref="T:System.IFormatProvider" />
        <related type="Article" href="/dotnet/standard/io/">文件和流 I/O</related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file">如何：从文件中读取文本</related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file">如何：将文本写入文件</related>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public virtual void Write (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Write(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.Write(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Write (value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Write(double value);" />
      <MemberSignature Language="F#" Value="abstract member Write : double -&gt; unit&#xA;override this.Write : double -&gt; unit" Usage="textWriter.Write value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">要写入的 8 字节浮点值。</param>
        <summary>将 8 字节浮点值的文本表示形式写入文本流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 通过调用方法来生成指定值的文本表示形式 <xref:System.Double.ToString%2A?displayProperty=nameWithType> 。 <xref:System.IO.TextWriter.FormatProvider%2A?displayProperty=nameWithType>如果不是，则属性 `null` 指定区域性特定的格式设置。  
  
 有关常见 i/o 任务的列表，请参阅 [常见 I/o 任务](/dotnet/standard/io/common-i-o-tasks)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.IO.TextWriter" /> 是关闭的。</exception>
        <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
        <altmember cref="T:System.IO.StreamWriter" />
        <altmember cref="T:System.IO.StringWriter" />
        <altmember cref="T:System.IFormatProvider" />
        <related type="Article" href="/dotnet/standard/io/">文件和流 I/O</related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file">如何：从文件中读取文本</related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file">如何：将文本写入文件</related>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public virtual void Write (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Write(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.Write(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Write (value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Write(int value);" />
      <MemberSignature Language="F#" Value="abstract member Write : int -&gt; unit&#xA;override this.Write : int -&gt; unit" Usage="textWriter.Write value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">要写入的 4 字节有符号整数。</param>
        <summary>将 4 字节带符号整数的文本表示形式写入文本流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 通过调用方法来生成指定值的文本表示形式 <xref:System.Int32.ToString%2A?displayProperty=nameWithType> 。 <xref:System.IO.TextWriter.FormatProvider%2A?displayProperty=nameWithType>如果不是，则属性 `null` 指定区域性特定的格式设置。  
  
 有关常见 i/o 任务的列表，请参阅 [常见 I/o 任务](/dotnet/standard/io/common-i-o-tasks)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.IO.TextWriter" /> 是关闭的。</exception>
        <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
        <altmember cref="T:System.IO.StreamWriter" />
        <altmember cref="T:System.IO.StringWriter" />
        <altmember cref="T:System.IFormatProvider" />
        <related type="Article" href="/dotnet/standard/io/">文件和流 I/O</related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file">如何：从文件中读取文本</related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file">如何：将文本写入文件</related>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public virtual void Write (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Write(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.Write(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Write (value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Write(long value);" />
      <MemberSignature Language="F#" Value="abstract member Write : int64 -&gt; unit&#xA;override this.Write : int64 -&gt; unit" Usage="textWriter.Write value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">要写入的 8 字节有符号整数。</param>
        <summary>将 8 字节带符号整数的文本表示形式写入文本流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 通过调用方法来生成指定值的文本表示形式 <xref:System.Int64.ToString%2A?displayProperty=nameWithType> 。 <xref:System.IO.TextWriter.FormatProvider%2A?displayProperty=nameWithType>如果不是，则属性 `null` 指定区域性特定的格式设置。  
  
 有关常见 i/o 任务的列表，请参阅 [常见 I/o 任务](/dotnet/standard/io/common-i-o-tasks)。  
  
 [如何：将文本写入文件](/dotnet/standard/io/how-to-write-text-to-a-file)  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.IO.TextWriter" /> 是关闭的。</exception>
        <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
        <altmember cref="T:System.IO.StreamWriter" />
        <altmember cref="T:System.IO.StringWriter" />
        <altmember cref="T:System.IFormatProvider" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public virtual void Write (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Write(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.Write(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Write (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Write(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member Write : obj -&gt; unit&#xA;override this.Write : obj -&gt; unit" Usage="textWriter.Write value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">要写入的对象。</param>
        <summary>通过在对象上调用 <see langword="ToString" /> 方法将此对象的文本表示形式写入文本流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此重载等效于 <xref:System.IO.TextWriter.Write%28System.String%29> 重载。  
  
 如果指定的对象是 `null` ，则不执行任何操作，也不会引发异常。 否则，将调用对象的 `ToString` 方法来生成字符串表示形式，然后将生成的字符串写入输出流。 <xref:System.IO.TextWriter.FormatProvider%2A>如果不是，则属性 `null` 指定区域性特定的格式设置。  
  
 有关常见 i/o 任务的列表，请参阅 [常见 I/o 任务](/dotnet/standard/io/common-i-o-tasks)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.IO.TextWriter" /> 是关闭的。</exception>
        <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
        <altmember cref="T:System.IO.StreamWriter" />
        <altmember cref="T:System.IO.StringWriter" />
        <altmember cref="T:System.IFormatProvider" />
        <related type="Article" href="/dotnet/standard/io/">文件和流 I/O</related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file">如何：从文件中读取文本</related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file">如何：将文本写入文件</related>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public virtual void Write (ReadOnlySpan&lt;char&gt; buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Write(valuetype System.ReadOnlySpan`1&lt;char&gt; buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.Write(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Write (buffer As ReadOnlySpan(Of Char))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Write(ReadOnlySpan&lt;char&gt; buffer);" />
      <MemberSignature Language="F#" Value="abstract member Write : ReadOnlySpan&lt;char&gt; -&gt; unit&#xA;override this.Write : ReadOnlySpan&lt;char&gt; -&gt; unit" Usage="textWriter.Write buffer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="buffer">要写入的字符范围。</param>
        <summary>将字符范围写入文本流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

通过调用 ReadOnlySpan 生成指定值的文本表示形式 [ <Char> 。ToString](xref:System.ReadOnlySpan%601.ToString%2A) 方法。

有关常见 i/o 任务的列表，请参阅 [常见 I/o 任务](/dotnet/standard/io/common-i-o-tasks)。

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public virtual void Write (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Write(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.Write(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Write (value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Write(float value);" />
      <MemberSignature Language="F#" Value="abstract member Write : single -&gt; unit&#xA;override this.Write : single -&gt; unit" Usage="textWriter.Write value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value">要写入的 4 字节浮点值。</param>
        <summary>将 4 字节浮点值的文本表示形式写入文本流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 通过调用方法来生成指定值的文本表示形式 <xref:System.Single.ToString%2A?displayProperty=nameWithType> 。 <xref:System.IO.TextWriter.FormatProvider%2A?displayProperty=nameWithType>如果不是，则属性 `null` 指定区域性特定的格式设置。  
  
 有关常见 i/o 任务的列表，请参阅 [常见 I/o 任务](/dotnet/standard/io/common-i-o-tasks)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.IO.TextWriter" /> 是关闭的。</exception>
        <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
        <altmember cref="T:System.IO.StreamWriter" />
        <altmember cref="T:System.IO.StringWriter" />
        <altmember cref="T:System.IFormatProvider" />
        <related type="Article" href="/dotnet/standard/io/">文件和流 I/O</related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file">如何：从文件中读取文本</related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file">如何：将文本写入文件</related>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public virtual void Write (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Write(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.Write(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Write (value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Write(System::String ^ value);" />
      <MemberSignature Language="F#" Value="abstract member Write : string -&gt; unit&#xA;override this.Write : string -&gt; unit" Usage="textWriter.Write value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">要写入的字符串。</param>
        <summary>将字符串写入文本流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此重载等效于 <xref:System.IO.TextWriter.Write%28System.Char%5B%5D%29> 重载。  
  
 此方法不会在指定字符串中搜索 (十六进制 0x000a) 的单个换行符，并将其替换为 <xref:System.IO.TextWriter.NewLine%2A?displayProperty=nameWithType> 。  
  
 如果 `value` 为 `null`，则不会将任何内容写入文本流。  
  
 有关常见 i/o 任务的列表，请参阅 [常见 I/o 任务](/dotnet/standard/io/common-i-o-tasks)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.IO.TextWriter" /> 是关闭的。</exception>
        <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
        <altmember cref="M:System.IO.StreamWriter.Write(System.String)" />
        <altmember cref="M:System.IO.StringWriter.Write(System.String)" />
        <related type="Article" href="/dotnet/standard/io/">文件和流 I/O</related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file">如何：从文件中读取文本</related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file">如何：将文本写入文件</related>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public virtual void Write (System.Text.StringBuilder value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Write(class System.Text.StringBuilder value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.Write(System.Text.StringBuilder)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Write (value As StringBuilder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Write(System::Text::StringBuilder ^ value);" />
      <MemberSignature Language="F#" Value="abstract member Write : System.Text.StringBuilder -&gt; unit&#xA;override this.Write : System.Text.StringBuilder -&gt; unit" Usage="textWriter.Write value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Text.StringBuilder" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="value">要作为字符串生成器写入文本流的字符串。</param>
        <summary>将字符串生成器写入文本流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

此方法等效于 `Write(stringBuilder.ToString())` ，但它使用 <xref:System.Text.StringBuilder.GetChunks%2A?displayProperty=nameWithType>  方法来避免创建中间字符串。

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public virtual void Write (uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Write(unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.Write(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Write (value As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Write(System::UInt32 value);" />
      <MemberSignature Language="F#" Value="abstract member Write : uint32 -&gt; unit&#xA;override this.Write : uint32 -&gt; unit" Usage="textWriter.Write value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.CLSCompliant(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.CLSCompliant(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="value">要写入的 4 字节无符号整数。</param>
        <summary>将 4 字节无符号整数的文本表示形式写入文本流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 通过调用方法来生成指定值的文本表示形式 <xref:System.UInt32.ToString%2A?displayProperty=nameWithType> 。 <xref:System.IO.TextWriter.FormatProvider%2A?displayProperty=nameWithType>如果不是，则属性 `null` 指定区域性特定的格式设置。  
  
 有关常见 i/o 任务的列表，请参阅 [常见 I/o 任务](/dotnet/standard/io/common-i-o-tasks)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.IO.TextWriter" /> 是关闭的。</exception>
        <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
        <altmember cref="T:System.IO.StreamWriter" />
        <altmember cref="T:System.IO.StringWriter" />
        <altmember cref="T:System.IFormatProvider" />
        <related type="Article" href="/dotnet/standard/io/">文件和流 I/O</related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file">如何：从文件中读取文本</related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file">如何：将文本写入文件</related>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public virtual void Write (ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Write(unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.Write(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Write (value As ULong)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Write(System::UInt64 value);" />
      <MemberSignature Language="F#" Value="abstract member Write : uint64 -&gt; unit&#xA;override this.Write : uint64 -&gt; unit" Usage="textWriter.Write value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.CLSCompliant(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.CLSCompliant(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="value">要写入的 8 字节无符号整数。</param>
        <summary>将 8 字节无符号整数的文本表示形式写入文本流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 通过调用方法来生成指定值的文本表示形式 <xref:System.UInt64.ToString%2A?displayProperty=nameWithType> 。 <xref:System.IO.TextWriter.FormatProvider%2A?displayProperty=nameWithType>如果不是，则属性 `null` 指定区域性特定的格式设置。  
  
 有关常见 i/o 任务的列表，请参阅 [常见 I/o 任务](/dotnet/standard/io/common-i-o-tasks)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.IO.TextWriter" /> 是关闭的。</exception>
        <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
        <altmember cref="T:System.IO.StreamWriter" />
        <altmember cref="T:System.IO.StringWriter" />
        <altmember cref="T:System.IFormatProvider" />
        <related type="Article" href="/dotnet/standard/io/">文件和流 I/O</related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file">如何：从文件中读取文本</related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file">如何：将文本写入文件</related>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public virtual void Write (string format, object arg0);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Write(string format, object arg0) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.Write(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Write (format As String, arg0 As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Write(System::String ^ format, System::Object ^ arg0);" />
      <MemberSignature Language="F#" Value="abstract member Write : string * obj -&gt; unit&#xA;override this.Write : string * obj -&gt; unit" Usage="textWriter.Write (format, arg0)" />
      <MemberSignature Language="C#" Value="public virtual void Write (string format, object? arg0);" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="arg0" Type="System.Object" Index="1" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="format">复合格式字符串。</param>
        <param name="arg0">要格式化和写入的对象。</param>
        <summary>使用与 <see cref="M:System.String.Format(System.String,System.Object)" /> 方法相同的语义将格式化字符串写入文本流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法使用复合格式设置将对象的值转换为其字符串表示形式，并将该表示形式嵌入字符串。 .NET 提供广泛的格式支持，以下格式设置主题对此进行了更详细的介绍：  
  
-   有关复合格式设置功能的详细信息，请参阅 [复合格式设置](/dotnet/standard/base-types/composite-formatting)。  
  
-   有关数字格式说明符的详细信息，请参阅 [标准数字格式字符串](/dotnet/standard/base-types/standard-numeric-format-strings) 和 [自定义数字格式字符串](/dotnet/standard/base-types/custom-numeric-format-strings)。  
  
-   有关日期和时间格式说明符的详细信息，请参阅 [标准日期和时间格式字符串](/dotnet/standard/base-types/standard-date-and-time-format-strings) 和 [自定义日期和时间格式字符串](/dotnet/standard/base-types/custom-date-and-time-format-strings)。  
  
-   有关枚举格式说明符的详细信息，请参阅 [枚举格式字符串](/dotnet/standard/base-types/enumeration-format-strings)。  
  
-   有关格式设置的详细信息，请参阅 [格式设置类型](/dotnet/standard/base-types/formatting-types)。  
  
 `format`参数包含与零个或多个索引占位符（称为格式项）混合的零个或多个文本的运行，这些占位符与此方法的参数列表中的对象相对应。 格式设置过程将每个格式项替换为相应对象的值的字符串表示形式。  
  
 格式项的语法如下所示：  
  
 {*index*[，*length*] [：*格式字符串*]}  
  
 括号中的元素是可选的。 下表对每个元素进行了描述。 有关复合格式设置功能的详细信息（包括格式项的语法），请参阅 [复合格式设置](/dotnet/standard/base-types/composite-formatting)。  
  
|元素|说明|  
|-------------|-----------------|  
|索引|要设置格式的对象的参数列表中的从零开始的位置。 如果由 *index* 指定的对象为 `null` ，则会将格式项替换为 <xref:System.String.Empty?displayProperty=nameWithType> 。 因为此重载在其参数列表中只有一个对象，所以 *index* 的值必须始终为0。 如果 *索引* 位置中没有参数， <xref:System.FormatException> 则会引发。|  
|，*长度*|参数的字符串表示形式中的最小字符数。 如果为正，则参数为右对齐; 否则为。如果为负，则为左对齐。|  
|：*格式字符串*|要设置格式的对象支持的标准或自定义格式字符串。 *格式字符串*的可能值与对象的方法所支持的值相同 `ToString(string format)` 。 如果未指定 " *格式字符串* " 并且要设置其格式的对象实现 <xref:System.IFormattable> 接口， `null` 则将作为 `format` 用作格式字符串的参数的值传递 <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> 。|  
  
 需要 "{" 和 "}" 等前导和尾随大括号。 若要在中指定单个文本大括号字符 `format` ，请指定两个前导或尾随大括号字符，即 "{{" 或 "}}"。  
  
 此方法不会在指定字符串中搜索 (十六进制 0x000a) 的单个换行符，并将其替换为 <xref:System.IO.TextWriter.NewLine%2A?displayProperty=nameWithType> 。  
  
 如果在格式字符串中未引用指定的对象，则会将其忽略。  
  
 有关常见 i/o 任务的列表，请参阅 [常见 I/o 任务](/dotnet/standard/io/common-i-o-tasks)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="format" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.IO.TextWriter" /> 是关闭的。</exception>
        <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
        <exception cref="T:System.FormatException"><paramref name="format" /> 不是有效的复合格式字符串。  
  
- 或 - 
格式项的索引小于 0 （0）、或大于或等于要设置格式的对象数 (用于该方法重载，为一)。</exception>
        <altmember cref="T:System.IO.StreamWriter" />
        <altmember cref="T:System.IO.StringWriter" />
        <altmember cref="T:System.IFormatProvider" />
        <related type="Article" href="/dotnet/standard/io/">文件和流 I/O</related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file">如何：从文件中读取文本</related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file">如何：将文本写入文件</related>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public virtual void Write (string format, params object[] arg);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Write(string format, object[] arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.Write(System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Write (format As String, ParamArray arg As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Write(System::String ^ format, ... cli::array &lt;System::Object ^&gt; ^ arg);" />
      <MemberSignature Language="F#" Value="abstract member Write : string * obj[] -&gt; unit&#xA;override this.Write : string * obj[] -&gt; unit" Usage="textWriter.Write (format, arg)" />
      <MemberSignature Language="C#" Value="public virtual void Write (string format, params object[]? arg);" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="dotnet-uwp-10.0">
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="format">复合格式字符串。</param>
        <param name="arg">一个对象数组，其中包含零个或多个要设置格式和写入的对象。</param>
        <summary>使用与 <see cref="M:System.String.Format(System.String,System.Object[])" /> 方法相同的语义将格式化字符串写入文本流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法使用复合格式设置将对象的值转换为其字符串表示形式，并将该表示形式嵌入字符串。 .NET 提供广泛的格式支持，以下格式设置主题对此进行了更详细的介绍：  
  
-   有关复合格式设置功能的详细信息，请参阅 [复合格式设置](/dotnet/standard/base-types/composite-formatting)。  
  
-   有关数字格式说明符的详细信息，请参阅 [标准数字格式字符串](/dotnet/standard/base-types/standard-numeric-format-strings) 和 [自定义数字格式字符串](/dotnet/standard/base-types/custom-numeric-format-strings)。  
  
-   有关日期和时间格式说明符的详细信息，请参阅 [标准日期和时间格式字符串](/dotnet/standard/base-types/standard-date-and-time-format-strings) 和 [自定义日期和时间格式字符串](/dotnet/standard/base-types/custom-date-and-time-format-strings)。  
  
-   有关枚举格式说明符的详细信息，请参阅 [枚举格式字符串](/dotnet/standard/base-types/enumeration-format-strings)。  
  
-   有关格式设置的详细信息，请参阅 [格式设置类型](/dotnet/standard/base-types/formatting-types)。  
  
 `format`参数包含与零个或多个索引占位符（称为格式项）混合的零个或多个文本的运行，这些占位符与此方法的参数列表中的对象相对应。 格式设置过程将每个格式项替换为相应对象的值的字符串表示形式。  
  
 格式项的语法如下所示：  
  
 {*index*[，*length*] [：*格式字符串*]}  
  
 括号中的元素是可选的。 下表对每个元素进行了描述。 有关复合格式设置功能的详细信息（包括格式项的语法），请参阅 [复合格式设置](/dotnet/standard/base-types/composite-formatting)。  
  
|元素|说明|  
|-------------|-----------------|  
|索引|要设置格式的对象的参数列表中的从零开始的位置。 如果由 *index* 指定的对象为 `null` ，则会将格式项替换为 <xref:System.String.Empty?displayProperty=nameWithType> 。 由于此重载在其参数列表中具有数组，因此 *index* 的值必须始终小于数组的长度。 如果 *索引* 位置中没有参数， <xref:System.FormatException> 则会引发。|  
|，*长度*|参数的字符串表示形式中的最小字符数。 如果为正，则参数为右对齐; 否则为。如果为负，则为左对齐。|  
|：*格式字符串*|要设置格式的对象支持的标准或自定义格式字符串。 *格式字符串*的可能值与对象的方法所支持的值相同 `ToString(string format)` 。 如果未指定 " *格式字符串* " 并且要设置其格式的对象实现 <xref:System.IFormattable> 接口， `null` 则将作为 `format` 用作格式字符串的参数的值传递 <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> 。|  
  
 需要 "{" 和 "}" 等前导和尾随大括号。 若要在中指定单个文本大括号字符 `format` ，请指定两个前导或尾随大括号字符，即 "{{" 或 "}}"。  
  
 此方法不会在指定字符串中搜索 (十六进制 0x000a) 的单个换行符，并将其替换为 <xref:System.IO.TextWriter.NewLine%2A?displayProperty=nameWithType> 。  
  
 如果在格式字符串中未引用指定的对象，则会将其忽略。  
  
 有关常见 i/o 任务的列表，请参阅 [常见 I/o 任务](/dotnet/standard/io/common-i-o-tasks)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="format" /> 或 <paramref name="arg" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.IO.TextWriter" /> 是关闭的。</exception>
        <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
        <exception cref="T:System.FormatException"><paramref name="format" /> 不是有效的复合格式字符串。  
  
- 或 - 
格式项的索引小于 0（零），或者大于或等于 <paramref name="arg" /> 数组的长度。</exception>
        <altmember cref="T:System.IO.StreamWriter" />
        <altmember cref="T:System.IO.StringWriter" />
        <altmember cref="T:System.IFormatProvider" />
        <related type="Article" href="/dotnet/standard/io/">文件和流 I/O</related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file">如何：从文件中读取文本</related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file">如何：将文本写入文件</related>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public virtual void Write (char[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Write(char[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.Write(System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Write (buffer As Char(), index As Integer, count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Write(cli::array &lt;char&gt; ^ buffer, int index, int count);" />
      <MemberSignature Language="F#" Value="abstract member Write : char[] * int * int -&gt; unit&#xA;override this.Write : char[] * int * int -&gt; unit" Usage="textWriter.Write (buffer, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">要从中写出数据的字符数组。</param>
        <param name="index">在开始接收数据时缓存中的字符位置。</param>
        <param name="count">要写入的字符数。</param>
        <summary>将字符的子数组写入文本流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法将 `count` 数据 `TextWriter` 从 `buffer` 位置开始的字符数组写入到此中 `index` 。  
  
 此重载等效于 <xref:System.IO.TextWriter.Write%28System.Char%5B%5D%29> `buffer` `index` 和 () 之间的每个字符的重载 `index`  +  `count` 。  
  
 有关常见 i/o 任务的列表，请参阅 [常见 I/o 任务](/dotnet/standard/io/common-i-o-tasks)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">缓冲区长度减去 <paramref name="index" /> 小于 <paramref name="count" />。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="buffer" /> 参数为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" /> 或 <paramref name="count" /> 为负数。</exception>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.IO.TextWriter" /> 是关闭的。</exception>
        <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
        <altmember cref="M:System.IO.StreamWriter.Write(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.IO.StringWriter.Write(System.Char[],System.Int32,System.Int32)" />
        <related type="Article" href="/dotnet/standard/io/">文件和流 I/O</related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file">如何：从文件中读取文本</related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file">如何：将文本写入文件</related>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public virtual void Write (string format, object arg0, object arg1);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Write(string format, object arg0, object arg1) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.Write(System.String,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Write (format As String, arg0 As Object, arg1 As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Write(System::String ^ format, System::Object ^ arg0, System::Object ^ arg1);" />
      <MemberSignature Language="F#" Value="abstract member Write : string * obj * obj -&gt; unit&#xA;override this.Write : string * obj * obj -&gt; unit" Usage="textWriter.Write (format, arg0, arg1)" />
      <MemberSignature Language="C#" Value="public virtual void Write (string? format, object arg0, object arg1);" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="arg0" Type="System.Object" Index="1" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="arg1" Type="System.Object" Index="2" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="format">复合格式字符串。</param>
        <param name="arg0">要格式化和写入的第一个对象。</param>
        <param name="arg1">要格式化和写入的第二个对象。</param>
        <summary>使用与 <see cref="M:System.String.Format(System.String,System.Object,System.Object)" /> 方法相同的语义将格式化字符串写入文本流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法使用复合格式设置将对象的值转换为其字符串表示形式，并将该表示形式嵌入字符串。 .NET 提供广泛的格式支持，以下格式设置主题对此进行了更详细的介绍：  
  
-   有关复合格式设置功能的详细信息，请参阅 [复合格式设置](/dotnet/standard/base-types/composite-formatting)。  
  
-   有关数字格式说明符的详细信息，请参阅 [标准数字格式字符串](/dotnet/standard/base-types/standard-numeric-format-strings) 和 [自定义数字格式字符串](/dotnet/standard/base-types/custom-numeric-format-strings)。  
  
-   有关日期和时间格式说明符的详细信息，请参阅 [标准日期和时间格式字符串](/dotnet/standard/base-types/standard-date-and-time-format-strings) 和 [自定义日期和时间格式字符串](/dotnet/standard/base-types/custom-date-and-time-format-strings)。  
  
-   有关枚举格式说明符的详细信息，请参阅 [枚举格式字符串](/dotnet/standard/base-types/enumeration-format-strings)。  
  
-   有关格式设置的详细信息，请参阅 [格式设置类型](/dotnet/standard/base-types/formatting-types)。  
  
 `format`参数包含与零个或多个索引占位符（称为格式项）混合的零个或多个文本的运行，这些占位符与此方法的参数列表中的对象相对应。 格式设置过程将每个格式项替换为相应对象的值的字符串表示形式。  
  
 格式项的语法如下所示：  
  
 {*index*[，*length*] [：*格式字符串*]}  
  
 括号中的元素是可选的。 下表对每个元素进行了描述。 有关复合格式设置功能的详细信息（包括格式项的语法），请参阅 [复合格式设置](/dotnet/standard/base-types/composite-formatting)。  
  
|元素|说明|  
|-------------|-----------------|  
|索引|要设置格式的对象的参数列表中的从零开始的位置。 如果由 *index* 指定的对象为 `null` ，则会将格式项替换为 <xref:System.String.Empty?displayProperty=nameWithType> 。 由于此重载在其参数列表中有两个对象，因此 *index* 的值必须始终为0或1。 如果 *索引* 位置中没有参数， <xref:System.FormatException> 则会引发。|  
|，*长度*|参数的字符串表示形式中的最小字符数。 如果为正，则参数为右对齐; 否则为。如果为负，则为左对齐。|  
|：*格式字符串*|要设置格式的对象支持的标准或自定义格式字符串。 *格式字符串*的可能值与对象的方法所支持的值相同 `ToString(string format)` 。 如果未指定 " *格式字符串* " 并且要设置其格式的对象实现 <xref:System.IFormattable> 接口， `null` 则将作为 `format` 用作格式字符串的参数的值传递 <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> 。|  
  
 需要 "{" 和 "}" 等前导和尾随大括号。 若要在中指定单个文本大括号字符 `format` ，请指定两个前导或尾随大括号字符，即 "{{" 或 "}}"。  
  
 此方法不会在指定字符串中搜索 (十六进制 0x000a) 的单个换行符，并将其替换为 <xref:System.IO.TextWriter.NewLine%2A?displayProperty=nameWithType> 。  
  
 如果在格式字符串中未引用指定的对象，则会将其忽略。  
  
 有关常见 i/o 任务的列表，请参阅 [常见 I/o 任务](/dotnet/standard/io/common-i-o-tasks)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="format" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.IO.TextWriter" /> 是关闭的。</exception>
        <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
        <exception cref="T:System.FormatException"><paramref name="format" /> 不是有效的复合格式字符串。  
  
- 或 - 
格式项的索引小于 0 （0） 或大于或等于要设置格式的对象数 (用于该方法重载，为二)。</exception>
        <altmember cref="T:System.IO.StreamWriter" />
        <altmember cref="T:System.IO.StringWriter" />
        <altmember cref="T:System.IFormatProvider" />
        <related type="Article" href="/dotnet/standard/io/">文件和流 I/O</related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file">如何：从文件中读取文本</related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file">如何：将文本写入文件</related>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public virtual void Write (string format, object arg0, object arg1, object arg2);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Write(string format, object arg0, object arg1, object arg2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.Write(System.String,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Write (format As String, arg0 As Object, arg1 As Object, arg2 As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Write(System::String ^ format, System::Object ^ arg0, System::Object ^ arg1, System::Object ^ arg2);" />
      <MemberSignature Language="F#" Value="abstract member Write : string * obj * obj * obj -&gt; unit&#xA;override this.Write : string * obj * obj * obj -&gt; unit" Usage="textWriter.Write (format, arg0, arg1, arg2)" />
      <MemberSignature Language="C#" Value="public virtual void Write (string? format, object arg0, object arg1, object arg2);" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="arg0" Type="System.Object" Index="1" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="arg1" Type="System.Object" Index="2" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="arg2" Type="System.Object" Index="3" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="format">复合格式字符串。</param>
        <param name="arg0">要格式化和写入的第一个对象。</param>
        <param name="arg1">要格式化和写入的第二个对象。</param>
        <param name="arg2">要设置格式和写入的第三个对象。</param>
        <summary>使用与 <see cref="M:System.String.Format(System.String,System.Object,System.Object,System.Object)" /> 方法相同的语义将格式化字符串写入文本流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法使用复合格式设置将对象的值转换为其字符串表示形式，并将该表示形式嵌入字符串。 .NET 提供广泛的格式支持，以下格式设置主题对此进行了更详细的介绍：  
  
-   有关复合格式设置功能的详细信息，请参阅 [复合格式设置](/dotnet/standard/base-types/composite-formatting)。  
  
-   有关数字格式说明符的详细信息，请参阅 [标准数字格式字符串](/dotnet/standard/base-types/standard-numeric-format-strings) 和 [自定义数字格式字符串](/dotnet/standard/base-types/custom-numeric-format-strings)。  
  
-   有关日期和时间格式说明符的详细信息，请参阅 [标准日期和时间格式字符串](/dotnet/standard/base-types/standard-date-and-time-format-strings) 和 [自定义日期和时间格式字符串](/dotnet/standard/base-types/custom-date-and-time-format-strings)。  
  
-   有关枚举格式说明符的详细信息，请参阅 [枚举格式字符串](/dotnet/standard/base-types/enumeration-format-strings)。  
  
-   有关格式设置的详细信息，请参阅 [格式设置类型](/dotnet/standard/base-types/formatting-types)。  
  
 `format`参数包含与零个或多个索引占位符（称为格式项）混合的零个或多个文本的运行，这些占位符与此方法的参数列表中的对象相对应。 格式设置过程将每个格式项替换为相应对象的值的字符串表示形式。  
  
 格式项的语法如下所示：  
  
 {*index*[，*length*] [：*格式字符串*]}  
  
 括号中的元素是可选的。 下表对每个元素进行了描述。 有关复合格式设置功能的详细信息（包括格式项的语法），请参阅 [复合格式设置](/dotnet/standard/base-types/composite-formatting)。  
  
|元素|说明|  
|-------------|-----------------|  
|索引|要设置格式的对象的参数列表中的从零开始的位置。 如果由 *index* 指定的对象为 `null` ，则会将格式项替换为 <xref:System.String.Empty?displayProperty=nameWithType> 。 因为此重载在其参数列表中有三个对象，所以 *index* 的值必须始终是0、1或2。 如果 *索引* 位置中没有参数， <xref:System.FormatException> 则会引发。|  
|，*长度*|参数的字符串表示形式中的最小字符数。 如果为正，则参数为右对齐; 否则为。如果为负，则为左对齐。|  
|：*格式字符串*|要设置格式的对象支持的标准或自定义格式字符串。 *格式字符串*的可能值与对象的方法所支持的值相同 `ToString(string format)` 。 如果未指定 " *格式字符串* " 并且要设置其格式的对象实现 <xref:System.IFormattable> 接口， `null` 则将作为 `format` 用作格式字符串的参数的值传递 <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> 。|  
  
 需要 "{" 和 "}" 等前导和尾随大括号。 若要在中指定单个文本大括号字符 `format` ，请指定两个前导或尾随大括号字符，即 "{{" 或 "}}"。  
  
 此方法不会在指定字符串中搜索 (十六进制 0x000a) 的单个换行符，并将其替换为 <xref:System.IO.TextWriter.NewLine%2A?displayProperty=nameWithType> 。  
  
 如果在格式字符串中未引用指定的对象，则会将其忽略。  
  
 有关常见 i/o 任务的列表，请参阅 [常见 I/o 任务](/dotnet/standard/io/common-i-o-tasks)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="format" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.IO.TextWriter" /> 是关闭的。</exception>
        <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
        <exception cref="T:System.FormatException"><paramref name="format" /> 不是有效的复合格式字符串。  
  
- 或 - 
格式项的索引小于 0 （0）、或大于或等于要设置格式的对象数 (用于该方法重载，为三)。</exception>
        <altmember cref="T:System.IO.StreamWriter" />
        <altmember cref="T:System.IO.StringWriter" />
        <altmember cref="T:System.IFormatProvider" />
        <related type="Article" href="/dotnet/standard/io/">文件和流 I/O</related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file">如何：从文件中读取文本</related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file">如何：将文本写入文件</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteAsync">
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>将数据异步写入文本流。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteAsync (char value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteAsync(char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.WriteAsync(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WriteAsync (value As Char) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ WriteAsync(char value);" />
      <MemberSignature Language="F#" Value="abstract member WriteAsync : char -&gt; System.Threading.Tasks.Task&#xA;override this.WriteAsync : char -&gt; System.Threading.Tasks.Task" Usage="textWriter.WriteAsync value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Runtime.InteropServices.ComVisible(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.ComVisible(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="value">要写入文本流中的字符。</param>
        <summary>将字符异步写入文本流。</summary>
        <returns>表示异步写入操作的任务。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  类是一个抽象类。 因此，不要在代码中对其进行实例化。 有关使用方法的示例 <xref:System.IO.TextWriter.WriteAsync%2A> ，请参见 <xref:System.IO.StreamWriter.WriteAsync%2A?displayProperty=nameWithType> 方法。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">文本编写器已被释放。</exception>
        <exception cref="T:System.InvalidOperationException">文本编写器正在由其前一次写操作使用。</exception>
        <altmember cref="M:System.IO.StreamWriter.WriteAsync(System.Char)" />
        <altmember cref="M:System.IO.StringWriter.WriteAsync(System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="WriteAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteAsync (char[] buffer);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteAsync(char[] buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.WriteAsync(System.Char[])" />
      <MemberSignature Language="VB.NET" Value="Public Function WriteAsync (buffer As Char()) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteAsync(cli::array &lt;char&gt; ^ buffer);" />
      <MemberSignature Language="F#" Value="member this.WriteAsync : char[] -&gt; System.Threading.Tasks.Task" Usage="textWriter.WriteAsync buffer" />
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteAsync (char[]? buffer);" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Runtime.InteropServices.ComVisible(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.ComVisible(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="buffer">要写入文本流中的字符数组。 如果 <paramref name="buffer" /> 为 <see langword="null" />，则不写入任何内容。</param>
        <summary>将字符数组异步写入文本流。</summary>
        <returns>表示异步写入操作的任务。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">文本编写器已被释放。</exception>
        <exception cref="T:System.InvalidOperationException">文本编写器正在由其前一次写操作使用。</exception>
        <altmember cref="T:System.IO.StreamWriter" />
        <altmember cref="T:System.IO.StringWriter" />
      </Docs>
    </Member>
    <Member MemberName="WriteAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteAsync (string value);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteAsync(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.WriteAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WriteAsync (value As String) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ WriteAsync(System::String ^ value);" />
      <MemberSignature Language="F#" Value="abstract member WriteAsync : string -&gt; System.Threading.Tasks.Task&#xA;override this.WriteAsync : string -&gt; System.Threading.Tasks.Task" Usage="textWriter.WriteAsync value" />
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteAsync (string? value);" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Runtime.InteropServices.ComVisible(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.ComVisible(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="value">要写入的字符串。 如果 <paramref name="value" /> 为 <see langword="null" />，则不会将任何内容写入文本流。</param>
        <summary>将字符串异步写入文本流。</summary>
        <returns>表示异步写入操作的任务。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  类是一个抽象类。 因此，不要在代码中对其进行实例化。 有关使用方法的示例 <xref:System.IO.TextWriter.WriteAsync%2A> ，请参见 <xref:System.IO.StreamWriter.WriteAsync%2A?displayProperty=nameWithType> 方法。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">文本编写器已被释放。</exception>
        <exception cref="T:System.InvalidOperationException">文本编写器正在由其前一次写操作使用。</exception>
        <altmember cref="M:System.IO.StreamWriter.WriteAsync(System.String)" />
        <altmember cref="M:System.IO.StringWriter.WriteAsync(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="WriteAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task? WriteAsync (ReadOnlyMemory&lt;char&gt; buffer, System.Threading.CancellationToken cancellationToken = default);" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteAsync(valuetype System.ReadOnlyMemory`1&lt;char&gt; buffer, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.WriteAsync(System.ReadOnlyMemory{System.Char},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WriteAsync (buffer As ReadOnlyMemory(Of Char), Optional cancellationToken As CancellationToken = Nothing) As Task" />
      <MemberSignature Language="F#" Value="abstract member WriteAsync : ReadOnlyMemory&lt;char&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.WriteAsync : ReadOnlyMemory&lt;char&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="textWriter.WriteAsync (buffer, cancellationToken)" />
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteAsync (ReadOnlyMemory&lt;char&gt; buffer, System.Threading.CancellationToken cancellationToken = default);" FrameworkAlternate="netcore-2.1;netcore-2.2;netstandard-2.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.ReadOnlyMemory&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="buffer">要写入文本流中的字符内存区域。</param>
        <param name="cancellationToken">要监视取消请求的标记。 默认值是 <see cref="P:System.Threading.CancellationToken.None" />。</param>
        <summary>以异步形式将字符内存区域写入文本流。</summary>
        <returns>表示异步写入操作的任务。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteAsync (System.Text.StringBuilder? value, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteAsync(class System.Text.StringBuilder value, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.WriteAsync(System.Text.StringBuilder,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WriteAsync (value As StringBuilder, Optional cancellationToken As CancellationToken = Nothing) As Task" />
      <MemberSignature Language="F#" Value="abstract member WriteAsync : System.Text.StringBuilder * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.WriteAsync : System.Text.StringBuilder * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="textWriter.WriteAsync (value, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Text.StringBuilder" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;net-5.0" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="netcore-3.0;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="value">要作为字符串生成器写入文本流的字符串。</param>
        <param name="cancellationToken">要监视取消请求的标记。 默认值是 <see cref="P:System.Threading.CancellationToken.None" />。</param>
        <summary>以异步形式将字符串生成器写入文本流。</summary>
        <returns>表示异步写入操作的任务。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  

此方法等效于调用 `WriteAsync(stringBuilder.ToString())` ，但是，它使用 <xref:System.Text.StringBuilder.GetChunks?displayProperty=nameWithType> 方法来避免创建中间字符串。

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteAsync (char[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteAsync(char[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.WriteAsync(System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WriteAsync (buffer As Char(), index As Integer, count As Integer) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ WriteAsync(cli::array &lt;char&gt; ^ buffer, int index, int count);" />
      <MemberSignature Language="F#" Value="abstract member WriteAsync : char[] * int * int -&gt; System.Threading.Tasks.Task&#xA;override this.WriteAsync : char[] * int * int -&gt; System.Threading.Tasks.Task" Usage="textWriter.WriteAsync (buffer, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Runtime.InteropServices.ComVisible(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.ComVisible(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="index" Type="System.Int32" Index="1" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="count" Type="System.Int32" Index="2" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="buffer">要从中写出数据的字符数组。</param>
        <param name="index">在开始接收数据时缓存中的字符位置。</param>
        <param name="count">要写入的字符数。</param>
        <summary>以异步形式将字符的子数组写入文本流。</summary>
        <returns>表示异步写入操作的任务。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  类是一个抽象类。 因此，不要在代码中对其进行实例化。 有关使用方法的示例 <xref:System.IO.TextWriter.WriteAsync%2A> ，请参见 <xref:System.IO.StreamWriter.WriteAsync%2A?displayProperty=nameWithType> 方法。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="buffer" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="index" /> 加 <paramref name="count" /> 大于缓冲区长度。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" /> 或 <paramref name="count" /> 为负数。</exception>
        <exception cref="T:System.ObjectDisposedException">文本编写器已被释放。</exception>
        <exception cref="T:System.InvalidOperationException">文本编写器正在由其前一次写操作使用。</exception>
        <altmember cref="M:System.IO.StreamWriter.WriteAsync(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.IO.StringWriter.WriteAsync(System.Char[],System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteLine">
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>将数据写入文本流，后跟行终止符。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public virtual void WriteLine ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteLine() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.WriteLine" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteLine ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteLine();" />
      <MemberSignature Language="F#" Value="abstract member WriteLine : unit -&gt; unit&#xA;override this.WriteLine : unit -&gt; unit" Usage="textWriter.WriteLine " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>将行终止符写入文本流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

行终止符由 <xref:System.IO.TextWriter.CoreNewLine> 字段定义。

有关常见 i/o 任务的列表，请参阅 [常见 I/o 任务](/dotnet/standard/io/common-i-o-tasks)。

          ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.IO.TextWriter" /> 是关闭的。</exception>
        <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
        <altmember cref="T:System.IO.StreamWriter" />
        <altmember cref="T:System.IO.StringWriter" />
        <related type="Article" href="/dotnet/standard/io/">文件和流 I/O</related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file">如何：从文件中读取文本</related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file">如何：将文本写入文件</related>
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public virtual void WriteLine (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteLine(bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.WriteLine(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteLine (value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteLine(bool value);" />
      <MemberSignature Language="F#" Value="abstract member WriteLine : bool -&gt; unit&#xA;override this.WriteLine : bool -&gt; unit" Usage="textWriter.WriteLine value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value">要写入的 <see langword="Boolean" /> 值。</param>
        <summary>将 <see langword="Boolean" /> 值的文本表示形式写入文本流，后跟行终止符。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 通过调用方法来生成指定值的文本表示形式 <xref:System.Boolean.ToString%2A?displayProperty=nameWithType> 。  
  
 此方法输出 <xref:System.Boolean.TrueString?displayProperty=nameWithType> 或 <xref:System.Boolean.FalseString?displayProperty=nameWithType> 。  
  
 行终止符由 <xref:System.IO.TextWriter.CoreNewLine> 字段定义。  
  
 有关常见 i/o 任务的列表，请参阅 [常见 I/o 任务](/dotnet/standard/io/common-i-o-tasks)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.IO.TextWriter" /> 是关闭的。</exception>
        <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
        <altmember cref="T:System.IO.StreamWriter" />
        <altmember cref="T:System.IO.StringWriter" />
        <related type="Article" href="/dotnet/standard/io/">文件和流 I/O</related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file">如何：从文件中读取文本</related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file">如何：将文本写入文件</related>
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public virtual void WriteLine (char value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteLine(char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.WriteLine(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteLine (value As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteLine(char value);" />
      <MemberSignature Language="F#" Value="abstract member WriteLine : char -&gt; unit&#xA;override this.WriteLine : char -&gt; unit" Usage="textWriter.WriteLine value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="value">要写入文本流中的字符。</param>
        <summary>将字符写入文本流，后跟行终止符。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此重载等效于 <xref:System.IO.TextWriter.Write%28System.Char%29> 后跟 <xref:System.IO.TextWriter.WriteLine> 。  
  
 行终止符由 <xref:System.IO.TextWriter.CoreNewLine> 字段定义。  
  
 有关常见 i/o 任务的列表，请参阅 [常见 I/o 任务](/dotnet/standard/io/common-i-o-tasks)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.IO.TextWriter" /> 是关闭的。</exception>
        <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
        <altmember cref="T:System.IO.StreamWriter" />
        <altmember cref="T:System.IO.StringWriter" />
        <related type="Article" href="/dotnet/standard/io/">文件和流 I/O</related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file">如何：从文件中读取文本</related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file">如何：将文本写入文件</related>
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public virtual void WriteLine (char[] buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteLine(char[] buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.WriteLine(System.Char[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteLine (buffer As Char())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteLine(cli::array &lt;char&gt; ^ buffer);" />
      <MemberSignature Language="F#" Value="abstract member WriteLine : char[] -&gt; unit&#xA;override this.WriteLine : char[] -&gt; unit" Usage="textWriter.WriteLine buffer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
      </Parameters>
      <Docs>
        <param name="buffer">从其读取数据的字符数组。</param>
        <summary>将字符数组写入文本流，后跟行终止符。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 中的所有字符 `buffer` 都将写入基础流。 如果字符数组为 `null`，则仅写入行结束符。  
  
 此重载等效于 <xref:System.IO.TextWriter.Write%28System.Char%5B%5D%29> 后跟 <xref:System.IO.TextWriter.WriteLine> 。  
  
 行终止符由 <xref:System.IO.TextWriter.CoreNewLine> 字段定义。  
  
 有关常见 i/o 任务的列表，请参阅 [常见 I/o 任务](/dotnet/standard/io/common-i-o-tasks)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.IO.TextWriter" /> 是关闭的。</exception>
        <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
        <altmember cref="T:System.IO.StreamWriter" />
        <altmember cref="T:System.IO.StringWriter" />
        <related type="Article" href="/dotnet/standard/io/">文件和流 I/O</related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file">如何：从文件中读取文本</related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file">如何：将文本写入文件</related>
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public virtual void WriteLine (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteLine(valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.WriteLine(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteLine (value As Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteLine(System::Decimal value);" />
      <MemberSignature Language="F#" Value="abstract member WriteLine : decimal -&gt; unit&#xA;override this.WriteLine : decimal -&gt; unit" Usage="textWriter.WriteLine value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value">要写入的十进制值。</param>
        <summary>将小数值的文本表示形式写入文本流，后跟行终止符。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.TextWriter.FormatProvider%2A>如果不是，则属性 `null` 指定区域性特定的格式设置。 有关常见 i/o 任务的列表，请参阅 [常见 I/o 任务](/dotnet/standard/io/common-i-o-tasks)。  
  
 行终止符由 <xref:System.IO.TextWriter.CoreNewLine> 字段定义。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.IO.TextWriter" /> 是关闭的。</exception>
        <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
        <altmember cref="T:System.IO.StreamWriter" />
        <altmember cref="T:System.IO.StringWriter" />
        <altmember cref="T:System.IFormatProvider" />
        <related type="Article" href="/dotnet/standard/io/">文件和流 I/O</related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file">如何：从文件中读取文本</related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file">如何：将文本写入文件</related>
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public virtual void WriteLine (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteLine(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.WriteLine(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteLine (value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteLine(double value);" />
      <MemberSignature Language="F#" Value="abstract member WriteLine : double -&gt; unit&#xA;override this.WriteLine : double -&gt; unit" Usage="textWriter.WriteLine value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">要写入的 8 字节浮点值。</param>
        <summary>将 8 字节浮点值的文本表示形式写入文本流，后跟行终止符。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.TextWriter.FormatProvider%2A>如果不是，则属性 `null` 指定区域性特定的格式设置。 有关常见 i/o 任务的列表，请参阅 [常见 I/o 任务](/dotnet/standard/io/common-i-o-tasks)。  
  
 行终止符由 <xref:System.IO.TextWriter.CoreNewLine> 字段定义。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.IO.TextWriter" /> 是关闭的。</exception>
        <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
        <altmember cref="T:System.IO.StreamWriter" />
        <altmember cref="T:System.IO.StringWriter" />
        <altmember cref="T:System.IFormatProvider" />
        <related type="Article" href="/dotnet/standard/io/">文件和流 I/O</related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file">如何：从文件中读取文本</related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file">如何：将文本写入文件</related>
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public virtual void WriteLine (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteLine(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.WriteLine(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteLine (value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteLine(int value);" />
      <MemberSignature Language="F#" Value="abstract member WriteLine : int -&gt; unit&#xA;override this.WriteLine : int -&gt; unit" Usage="textWriter.WriteLine value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">要写入的 4 字节有符号整数。</param>
        <summary>将 4 字节带符号整数的文本表示形式写入文本流，后跟行终止符。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 通过调用方法来生成指定值的文本表示形式 <xref:System.Int32.ToString%2A?displayProperty=nameWithType> 。 <xref:System.IO.TextWriter.FormatProvider%2A?displayProperty=nameWithType>如果不是，则属性 `null` 指定区域性特定的格式设置。  
  
 行终止符由 <xref:System.IO.TextWriter.CoreNewLine> 字段定义。  
  
 有关常见 i/o 任务的列表，请参阅 [常见 I/o 任务](/dotnet/standard/io/common-i-o-tasks)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.IO.TextWriter" /> 是关闭的。</exception>
        <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
        <altmember cref="T:System.IO.StreamWriter" />
        <altmember cref="T:System.IO.StringWriter" />
        <altmember cref="T:System.IFormatProvider" />
        <related type="Article" href="/dotnet/standard/io/">文件和流 I/O</related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file">如何：从文件中读取文本</related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file">如何：将文本写入文件</related>
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public virtual void WriteLine (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteLine(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.WriteLine(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteLine (value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteLine(long value);" />
      <MemberSignature Language="F#" Value="abstract member WriteLine : int64 -&gt; unit&#xA;override this.WriteLine : int64 -&gt; unit" Usage="textWriter.WriteLine value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">要写入的 8 字节有符号整数。</param>
        <summary>将 8 字节带符号整数的文本表示形式写入文本流，后跟行终止符。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 通过调用方法来生成指定值的文本表示形式 <xref:System.Int64.ToString%2A?displayProperty=nameWithType> 。 <xref:System.IO.TextWriter.FormatProvider%2A?displayProperty=nameWithType>如果不是，则属性 `null` 指定区域性特定的格式设置。  
  
 行终止符由 <xref:System.IO.TextWriter.CoreNewLine> 字段定义。  
  
 有关常见 i/o 任务的列表，请参阅 [常见 I/o 任务](/dotnet/standard/io/common-i-o-tasks)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.IO.TextWriter" /> 是关闭的。</exception>
        <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
        <altmember cref="T:System.IO.StreamWriter" />
        <altmember cref="T:System.IO.StringWriter" />
        <altmember cref="T:System.IFormatProvider" />
        <related type="Article" href="/dotnet/standard/io/">文件和流 I/O</related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file">如何：从文件中读取文本</related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file">如何：将文本写入文件</related>
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public virtual void WriteLine (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteLine(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.WriteLine(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteLine (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteLine(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member WriteLine : obj -&gt; unit&#xA;override this.WriteLine : obj -&gt; unit" Usage="textWriter.WriteLine value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">要写入的对象。 如果 <paramref name="value" /> 为 <see langword="null" />，则只写入行终止符。</param>
        <summary>通过在对象上调用 <see langword="ToString" /> 方法将此对象的文本表示形式写入文本流，后跟行终止符。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  

## Remarks

此重载等效于 <xref:System.IO.TextWriter.Write%28System.String%2CSystem.Object%29> 重载。 <xref:System.IO.TextWriter.FormatProvider%2A>如果不是，则属性 `null` 指定区域性特定的格式设置。

行终止符由 <xref:System.IO.TextWriter.CoreNewLine> 字段定义。

有关常见 i/o 任务的列表，请参阅 [常见 I/o 任务](/dotnet/standard/io/common-i-o-tasks)。

 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.IO.TextWriter" /> 是关闭的。</exception>
        <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
        <altmember cref="T:System.IO.StreamWriter" />
        <altmember cref="T:System.IO.StringWriter" />
        <altmember cref="T:System.IFormatProvider" />
        <related type="Article" href="/dotnet/standard/io/">文件和流 I/O</related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file">如何：从文件中读取文本</related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file">如何：将文本写入文件</related>
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public virtual void WriteLine (ReadOnlySpan&lt;char&gt; buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteLine(valuetype System.ReadOnlySpan`1&lt;char&gt; buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.WriteLine(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteLine (buffer As ReadOnlySpan(Of Char))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteLine(ReadOnlySpan&lt;char&gt; buffer);" />
      <MemberSignature Language="F#" Value="abstract member WriteLine : ReadOnlySpan&lt;char&gt; -&gt; unit&#xA;override this.WriteLine : ReadOnlySpan&lt;char&gt; -&gt; unit" Usage="textWriter.WriteLine buffer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="buffer">要写入文本流中的字符范围值。</param>
        <summary>将字符范围的文本表示形式写入文本流，后跟行终止符。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  

## Remarks

通过调用 ReadOnlySpan 生成指定值的文本表示形式 [ <Char> 。ToString](xref:System.ReadOnlySpan%601.ToString%2A) 方法。

行终止符由 <xref:System.IO.TextWriter.CoreNewLine> 字段定义。

有关常见 i/o 任务的列表，请参阅 [常见 I/o 任务](/dotnet/standard/io/common-i-o-tasks)。

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public virtual void WriteLine (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteLine(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.WriteLine(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteLine (value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteLine(float value);" />
      <MemberSignature Language="F#" Value="abstract member WriteLine : single -&gt; unit&#xA;override this.WriteLine : single -&gt; unit" Usage="textWriter.WriteLine value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value">要写入的 4 字节浮点值。</param>
        <summary>将 4 字节浮点值的文本表示形式写入文本流，后跟行终止符。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

 <xref:System.IO.TextWriter.FormatProvider%2A>如果不是，则属性 `null` 指定区域性特定的格式设置。 有关常见 i/o 任务的列表，请参阅 [常见 I/o 任务](/dotnet/standard/io/common-i-o-tasks)。

 行终止符由 <xref:System.IO.TextWriter.CoreNewLine> 字段定义。

          ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.IO.TextWriter" /> 是关闭的。</exception>
        <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
        <altmember cref="T:System.IO.StreamWriter" />
        <altmember cref="T:System.IO.StringWriter" />
        <altmember cref="T:System.IFormatProvider" />
        <related type="Article" href="/dotnet/standard/io/">文件和流 I/O</related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file">如何：从文件中读取文本</related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file">如何：将文本写入文件</related>
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public virtual void WriteLine (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteLine(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.WriteLine(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteLine (value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteLine(System::String ^ value);" />
      <MemberSignature Language="F#" Value="abstract member WriteLine : string -&gt; unit&#xA;override this.WriteLine : string -&gt; unit" Usage="textWriter.WriteLine value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">要写入的字符串。 如果 <paramref name="value" /> 为 <see langword="null" />，则只写入行终止符。</param>
        <summary>将字符串写入文本流，后跟行终止符。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

此重载等效于 <xref:System.IO.TextWriter.Write%28System.Char%5B%5D%29> 重载。

行终止符由 <xref:System.IO.TextWriter.CoreNewLine> 字段定义。

此方法不会在指定字符串中搜索 (十六进制 0x000a) 的单个换行符，并将其替换为 <xref:System.IO.TextWriter.NewLine%2A> 。

有关常见 i/o 任务的列表，请参阅 [常见 I/o 任务](/dotnet/standard/io/common-i-o-tasks)。

          ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.IO.TextWriter" /> 是关闭的。</exception>
        <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
        <altmember cref="T:System.IO.StreamWriter" />
        <altmember cref="T:System.IO.StringWriter" />
        <related type="Article" href="/dotnet/standard/io/">文件和流 I/O</related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file">如何：从文件中读取文本</related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file">如何：将文本写入文件</related>
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public virtual void WriteLine (System.Text.StringBuilder value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteLine(class System.Text.StringBuilder value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.WriteLine(System.Text.StringBuilder)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteLine (value As StringBuilder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteLine(System::Text::StringBuilder ^ value);" />
      <MemberSignature Language="F#" Value="abstract member WriteLine : System.Text.StringBuilder -&gt; unit&#xA;override this.WriteLine : System.Text.StringBuilder -&gt; unit" Usage="textWriter.WriteLine value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Text.StringBuilder" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="value">要作为字符串生成器写入文本流的字符串。</param>
        <summary>将字符串生成器的文本表示形式写入文本流，后跟行终止符。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  

## Remarks

通过调用方法来生成指定值的文本表示形式 <xref:System.Text.StringBuilder.ToString%2A?displayProperty=nameWithType> 。

行终止符由 <xref:System.IO.TextWriter.CoreNewLine> 字段定义。

有关常见 i/o 任务的列表，请参阅 [常见 I/o 任务](/dotnet/standard/io/common-i-o-tasks)。

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public virtual void WriteLine (uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteLine(unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.WriteLine(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteLine (value As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteLine(System::UInt32 value);" />
      <MemberSignature Language="F#" Value="abstract member WriteLine : uint32 -&gt; unit&#xA;override this.WriteLine : uint32 -&gt; unit" Usage="textWriter.WriteLine value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.CLSCompliant(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.CLSCompliant(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="value">要写入的 4 字节无符号整数。</param>
        <summary>将 4 字节无符号整数的文本表示形式写入文本流，后跟行终止符。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 通过调用方法来生成指定值的文本表示形式 <xref:System.UInt32.ToString%2A?displayProperty=nameWithType> 。 <xref:System.IO.TextWriter.FormatProvider%2A>如果不是，则属性 `null` 指定区域性特定的格式设置。  
  
 行终止符由 <xref:System.IO.TextWriter.CoreNewLine> 字段定义。  
  
 有关常见 i/o 任务的列表，请参阅 [常见 I/o 任务](/dotnet/standard/io/common-i-o-tasks)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.IO.TextWriter" /> 是关闭的。</exception>
        <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
        <altmember cref="T:System.IO.StreamWriter" />
        <altmember cref="T:System.IO.StringWriter" />
        <altmember cref="T:System.IFormatProvider" />
        <related type="Article" href="/dotnet/standard/io/">文件和流 I/O</related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file">如何：从文件中读取文本</related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file">如何：将文本写入文件</related>
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public virtual void WriteLine (ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteLine(unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.WriteLine(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteLine (value As ULong)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteLine(System::UInt64 value);" />
      <MemberSignature Language="F#" Value="abstract member WriteLine : uint64 -&gt; unit&#xA;override this.WriteLine : uint64 -&gt; unit" Usage="textWriter.WriteLine value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.CLSCompliant(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.CLSCompliant(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="value">要写入的 8 字节无符号整数。</param>
        <summary>将 8 字节无符号整数的文本表示形式写入文本流，后跟行终止符。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 通过调用方法来生成指定值的文本表示形式 <xref:System.UInt64.ToString%2A?displayProperty=nameWithType> 。 <xref:System.IO.TextWriter.FormatProvider%2A>如果不是，则属性 `null` 指定区域性特定的格式设置。  
  
 行终止符由 <xref:System.IO.TextWriter.CoreNewLine> 字段定义。  
  
 有关常见 i/o 任务的列表，请参阅 [常见 I/o 任务](/dotnet/standard/io/common-i-o-tasks)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.IO.TextWriter" /> 是关闭的。</exception>
        <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
        <altmember cref="T:System.IO.StreamWriter" />
        <altmember cref="T:System.IO.StringWriter" />
        <altmember cref="T:System.IFormatProvider" />
        <related type="Article" href="/dotnet/standard/io/">文件和流 I/O</related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file">如何：从文件中读取文本</related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file">如何：将文本写入文件</related>
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public virtual void WriteLine (string format, object arg0);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteLine(string format, object arg0) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.WriteLine(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteLine (format As String, arg0 As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteLine(System::String ^ format, System::Object ^ arg0);" />
      <MemberSignature Language="F#" Value="abstract member WriteLine : string * obj -&gt; unit&#xA;override this.WriteLine : string * obj -&gt; unit" Usage="textWriter.WriteLine (format, arg0)" />
      <MemberSignature Language="C#" Value="public virtual void WriteLine (string format, object? arg0);" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="arg0" Type="System.Object" Index="1" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="format">复合格式字符串。</param>
        <param name="arg0">要格式化和写入的对象。</param>
        <summary>使用与 <see cref="M:System.String.Format(System.String,System.Object)" /> 方法相同的语义将格式化字符串和新行写入文本流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法使用复合格式设置将对象的值转换为其字符串表示形式，并将该表示形式嵌入字符串。 .NET 提供广泛的格式支持，以下格式设置主题对此进行了更详细的介绍：  
  
-   有关复合格式设置功能的详细信息，请参阅 [复合格式设置](/dotnet/standard/base-types/composite-formatting)。  
  
-   有关数字格式说明符的详细信息，请参阅 [标准数字格式字符串](/dotnet/standard/base-types/standard-numeric-format-strings) 和 [自定义数字格式字符串](/dotnet/standard/base-types/custom-numeric-format-strings)。  
  
-   有关日期和时间格式说明符的详细信息，请参阅 [标准日期和时间格式字符串](/dotnet/standard/base-types/standard-date-and-time-format-strings) 和 [自定义日期和时间格式字符串](/dotnet/standard/base-types/custom-date-and-time-format-strings)。  
  
-   有关枚举格式说明符的详细信息，请参阅 [枚举格式字符串](/dotnet/standard/base-types/enumeration-format-strings)。  
  
-   有关格式设置的详细信息，请参阅 [格式设置类型](/dotnet/standard/base-types/formatting-types)。  
  
 `format`参数包含与零个或多个索引占位符（称为格式项）混合的零个或多个文本的运行，这些占位符与此方法的参数列表中的对象相对应。 格式设置过程将每个格式项替换为相应对象的值的字符串表示形式。  
  
 格式项的语法如下所示：  
  
 {*index*[，*length*] [：*格式字符串*]}  
  
 括号中的元素是可选的。 下表对每个元素进行了描述。 有关复合格式设置功能的详细信息（包括格式项的语法），请参阅 [复合格式设置](/dotnet/standard/base-types/composite-formatting)。  
  
|元素|说明|  
|-------------|-----------------|  
|索引|要设置格式的对象的参数列表中的从零开始的位置。 如果由 *index* 指定的对象为 `null` ，则会将格式项替换为 <xref:System.String.Empty?displayProperty=nameWithType> 。 因为此重载在其参数列表中只有一个对象，所以 *index* 的值必须始终为0。 如果 *索引* 位置中没有参数， <xref:System.FormatException> 则会引发。|  
|，*长度*|参数的字符串表示形式中的最小字符数。 如果为正，则参数为右对齐; 否则为。如果为负，则为左对齐。|  
|：*格式字符串*|要设置格式的对象支持的标准或自定义格式字符串。 *格式字符串*的可能值与对象的方法所支持的值相同 `ToString(string format)` 。 如果未指定 " *格式字符串* " 并且要设置其格式的对象实现 <xref:System.IFormattable> 接口， `null` 则将作为 `format` 用作格式字符串的参数的值传递 <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> 。|  
  
 需要 "{" 和 "}" 等前导和尾随大括号。 若要在中指定单个文本大括号字符 `format` ，请指定两个前导或尾随大括号字符，即 "{{" 或 "}}"。  
  
 此方法不会在指定字符串中搜索 (十六进制 0x000a) 的单个换行符，并将其替换为 <xref:System.IO.TextWriter.NewLine%2A> 。  
  
 如果在格式字符串中未引用指定的对象，则会将其忽略。  
  
 行终止符由 <xref:System.IO.TextWriter.CoreNewLine> 字段定义。  
  
 有关常见 i/o 任务的列表，请参阅 [常见 I/o 任务](/dotnet/standard/io/common-i-o-tasks)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="format" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.IO.TextWriter" /> 是关闭的。</exception>
        <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
        <exception cref="T:System.FormatException"><paramref name="format" /> 不是有效的复合格式字符串。  
  
- 或 - 
格式项的索引小于 0 （0）、或大于或等于要设置格式的对象数 (用于该方法重载，为一)。</exception>
        <altmember cref="T:System.IO.StreamWriter" />
        <altmember cref="T:System.IO.StringWriter" />
        <altmember cref="T:System.IFormatProvider" />
        <related type="Article" href="/dotnet/standard/io/">文件和流 I/O</related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file">如何：从文件中读取文本</related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file">如何：将文本写入文件</related>
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public virtual void WriteLine (string format, params object[] arg);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteLine(string format, object[] arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.WriteLine(System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteLine (format As String, ParamArray arg As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteLine(System::String ^ format, ... cli::array &lt;System::Object ^&gt; ^ arg);" />
      <MemberSignature Language="F#" Value="abstract member WriteLine : string * obj[] -&gt; unit&#xA;override this.WriteLine : string * obj[] -&gt; unit" Usage="textWriter.WriteLine (format, arg)" />
      <MemberSignature Language="C#" Value="public virtual void WriteLine (string format, params object[]? arg);" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="dotnet-uwp-10.0">
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="format">复合格式字符串。</param>
        <param name="arg">一个对象数组，其中包含零个或多个要设置格式和写入的对象。</param>
        <summary>使用与 <see cref="M:System.String.Format(System.String,System.Object)" /> 相同的语义将格式化字符串和新行写入文本流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法使用复合格式设置将对象的值转换为其字符串表示形式，并将该表示形式嵌入字符串。 .NET 提供广泛的格式支持，以下格式设置主题对此进行了更详细的介绍：  
  
-   有关复合格式设置功能的详细信息，请参阅 [复合格式设置](/dotnet/standard/base-types/composite-formatting)。  
  
-   有关数字格式说明符的详细信息，请参阅 [标准数字格式字符串](/dotnet/standard/base-types/standard-numeric-format-strings) 和 [自定义数字格式字符串](/dotnet/standard/base-types/custom-numeric-format-strings)。  
  
-   有关日期和时间格式说明符的详细信息，请参阅 [标准日期和时间格式字符串](/dotnet/standard/base-types/standard-date-and-time-format-strings) 和 [自定义日期和时间格式字符串](/dotnet/standard/base-types/custom-date-and-time-format-strings)。  
  
-   有关枚举格式说明符的详细信息，请参阅 [枚举格式字符串](/dotnet/standard/base-types/enumeration-format-strings)。  
  
-   有关格式设置的详细信息，请参阅 [格式设置类型](/dotnet/standard/base-types/formatting-types)。  
  
 `format`参数包含与零个或多个索引占位符（称为格式项）混合的零个或多个文本的运行，这些占位符与此方法的参数列表中的对象相对应。 格式设置过程将每个格式项替换为相应对象的值的字符串表示形式。  
  
 格式项的语法如下所示：  
  
 {*index*[，*length*] [：*格式字符串*]}  
  
 括号中的元素是可选的。 下表对每个元素进行了描述。 有关复合格式设置功能的详细信息（包括格式项的语法），请参阅 [复合格式设置](/dotnet/standard/base-types/composite-formatting)。  
  
|元素|说明|  
|-------------|-----------------|  
|索引|要设置格式的对象的参数列表中的从零开始的位置。 如果由 *index* 指定的对象为 `null` ，则会将格式项替换为 <xref:System.String.Empty?displayProperty=nameWithType> 。 由于此重载在其参数列表中具有数组，因此 *index* 的值必须始终小于数组的长度。 如果 *索引* 位置中没有参数， <xref:System.FormatException> 则会引发。|  
|，*长度*|参数的字符串表示形式中的最小字符数。 如果为正，则参数为右对齐; 否则为。如果为负，则为左对齐。|  
|：*格式字符串*|要设置格式的对象支持的标准或自定义格式字符串。 *格式字符串*的可能值与对象的方法所支持的值相同 `ToString(string format)` 。 如果未指定 " *格式字符串* " 并且要设置其格式的对象实现 <xref:System.IFormattable> 接口， `null` 则将作为 `format` 用作格式字符串的参数的值传递 <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> 。|  
  
 需要 "{" 和 "}" 等前导和尾随大括号。 若要在中指定单个文本大括号字符 `format` ，请指定两个前导或尾随大括号字符，即 "{{" 或 "}}"。  
  
 此方法不会在指定字符串中搜索 (十六进制 0x000a) 的单个换行符，并将其替换为 <xref:System.IO.TextWriter.NewLine%2A> 。  
  
 如果在格式字符串中未引用指定的对象，则会将其忽略。  
  
 行终止符由 <xref:System.IO.TextWriter.CoreNewLine> 字段定义。  
  
 有关常见 i/o 任务的列表，请参阅 [常见 I/o 任务](/dotnet/standard/io/common-i-o-tasks)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">字符串或对象作为 <see langword="null" /> 传入。</exception>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.IO.TextWriter" /> 是关闭的。</exception>
        <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
        <exception cref="T:System.FormatException"><paramref name="format" /> 不是有效的复合格式字符串。  
  
- 或 - 
格式项的索引小于 0（零），或者大于或等于 <paramref name="arg" /> 数组的长度。</exception>
        <altmember cref="T:System.IO.StreamWriter" />
        <altmember cref="T:System.IO.StringWriter" />
        <altmember cref="T:System.IFormatProvider" />
        <related type="Article" href="/dotnet/standard/io/">文件和流 I/O</related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file">如何：从文件中读取文本</related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file">如何：将文本写入文件</related>
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public virtual void WriteLine (char[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteLine(char[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.WriteLine(System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteLine (buffer As Char(), index As Integer, count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteLine(cli::array &lt;char&gt; ^ buffer, int index, int count);" />
      <MemberSignature Language="F#" Value="abstract member WriteLine : char[] * int * int -&gt; unit&#xA;override this.WriteLine : char[] * int * int -&gt; unit" Usage="textWriter.WriteLine (buffer, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">从其读取数据的字符数组。</param>
        <param name="index">在开始读取数据时 <paramref name="buffer" /> 中的字符位置。</param>
        <param name="count">要写入的最大字符数。</param>
        <summary>将字符子数组写入文本流，后跟行终止符。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法将 `count` 数据 `TextWriter` 从 `buffer` 位置开始的字符数组写入到此中 `index` 。  
  
 此重载等效于调用 <xref:System.IO.TextWriter.Write%28System.Char%5B%5D%29> 方法，后跟 <xref:System.IO.TextWriter.WriteLine%2A> `buffer` `index` 和 () 之间的每个字符 `index`  +  `count` 。  
  
 行终止符由 <xref:System.IO.TextWriter.CoreNewLine> 字段定义。  
  
 有关常见 i/o 任务的列表，请参阅 [常见 I/o 任务](/dotnet/standard/io/common-i-o-tasks)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">缓冲区长度减去 <paramref name="index" /> 小于 <paramref name="count" />。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="buffer" /> 参数为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" /> 或 <paramref name="count" /> 为负数。</exception>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.IO.TextWriter" /> 是关闭的。</exception>
        <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
        <altmember cref="T:System.IO.StreamWriter" />
        <altmember cref="T:System.IO.StringWriter" />
        <related type="Article" href="/dotnet/standard/io/">文件和流 I/O</related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file">如何：从文件中读取文本</related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file">如何：将文本写入文件</related>
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public virtual void WriteLine (string format, object arg0, object arg1);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteLine(string format, object arg0, object arg1) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.WriteLine(System.String,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteLine (format As String, arg0 As Object, arg1 As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteLine(System::String ^ format, System::Object ^ arg0, System::Object ^ arg1);" />
      <MemberSignature Language="F#" Value="abstract member WriteLine : string * obj * obj -&gt; unit&#xA;override this.WriteLine : string * obj * obj -&gt; unit" Usage="textWriter.WriteLine (format, arg0, arg1)" />
      <MemberSignature Language="C#" Value="public virtual void WriteLine (string? format, object arg0, object arg1);" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="arg0" Type="System.Object" Index="1" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="arg1" Type="System.Object" Index="2" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="format">复合格式字符串。</param>
        <param name="arg0">要格式化和写入的第一个对象。</param>
        <param name="arg1">要格式化和写入的第二个对象。</param>
        <summary>使用与 <see cref="M:System.String.Format(System.String,System.Object,System.Object)" /> 方法相同的语义将格式化字符串和新行写入文本流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法使用复合格式设置将对象的值转换为其字符串表示形式，并将该表示形式嵌入字符串。 .NET 提供广泛的格式支持，以下格式设置主题对此进行了更详细的介绍：  
  
-   有关复合格式设置功能的详细信息，请参阅 [复合格式设置](/dotnet/standard/base-types/composite-formatting)。  
  
-   有关数字格式说明符的详细信息，请参阅 [标准数字格式字符串](/dotnet/standard/base-types/standard-numeric-format-strings) 和 [自定义数字格式字符串](/dotnet/standard/base-types/custom-numeric-format-strings)。  
  
-   有关日期和时间格式说明符的详细信息，请参阅 [标准日期和时间格式字符串](/dotnet/standard/base-types/standard-date-and-time-format-strings) 和 [自定义日期和时间格式字符串](/dotnet/standard/base-types/custom-date-and-time-format-strings)。  
  
-   有关枚举格式说明符的详细信息，请参阅 [枚举格式字符串](/dotnet/standard/base-types/enumeration-format-strings)。  
  
-   有关格式设置的详细信息，请参阅 [格式设置类型](/dotnet/standard/base-types/formatting-types)。  
  
 `format`参数包含与零个或多个索引占位符（称为格式项）混合的零个或多个文本的运行，这些占位符与此方法的参数列表中的对象相对应。 格式设置过程将每个格式项替换为相应对象的值的字符串表示形式。  
  
 格式项的语法如下所示：  
  
 {*index*[，*length*] [：*格式字符串*]}  
  
 括号中的元素是可选的。 下表对每个元素进行了描述。 有关复合格式设置功能的详细信息（包括格式项的语法），请参阅 [复合格式设置](/dotnet/standard/base-types/composite-formatting)。  
  
|元素|说明|  
|-------------|-----------------|  
|索引|要设置格式的对象的参数列表中的从零开始的位置。 如果由 *index* 指定的对象为 `null` ，则会将格式项替换为 <xref:System.String.Empty?displayProperty=nameWithType> 。 由于此重载在其参数列表中有两个对象，因此 *index* 的值必须始终为0或1。 如果 *索引* 位置中没有参数， <xref:System.FormatException> 则会引发。|  
|，*长度*|参数的字符串表示形式中的最小字符数。 如果为正，则参数为右对齐; 否则为。如果为负，则为左对齐。|  
|：*格式字符串*|要设置格式的对象支持的标准或自定义格式字符串。 *格式字符串*的可能值与对象的方法所支持的值相同 `ToString(string format)` 。 如果未指定 " *格式字符串* " 并且要设置其格式的对象实现 <xref:System.IFormattable> 接口， `null` 则将作为 `format` 用作格式字符串的参数的值传递 <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> 。|  
  
 需要 "{" 和 "}" 等前导和尾随大括号。 若要在中指定单个文本大括号字符 `format` ，请指定两个前导或尾随大括号字符，即 "{{" 或 "}}"。  
  
 此方法不会在指定字符串中搜索 (十六进制 0x000a) 的单个换行符，并将其替换为 <xref:System.IO.TextWriter.NewLine%2A> 。  
  
 如果在格式字符串中未引用指定的对象，则会将其忽略。  
  
 行终止符由 <xref:System.IO.TextWriter.CoreNewLine> 字段定义。  
  
 有关常见 i/o 任务的列表，请参阅 [常见 I/o 任务](/dotnet/standard/io/common-i-o-tasks)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="format" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.IO.TextWriter" /> 是关闭的。</exception>
        <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
        <exception cref="T:System.FormatException"><paramref name="format" /> 不是有效的复合格式字符串。  
  
- 或 - 
格式项的索引小于 0 （0）、或大于或等于要设置格式的对象数 (用于该方法重载，为二)。</exception>
        <altmember cref="T:System.IO.StreamWriter" />
        <altmember cref="T:System.IO.StringWriter" />
        <altmember cref="T:System.IFormatProvider" />
        <related type="Article" href="/dotnet/standard/io/">文件和流 I/O</related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file">如何：从文件中读取文本</related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file">如何：将文本写入文件</related>
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public virtual void WriteLine (string format, object arg0, object arg1, object arg2);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteLine(string format, object arg0, object arg1, object arg2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.WriteLine(System.String,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteLine (format As String, arg0 As Object, arg1 As Object, arg2 As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteLine(System::String ^ format, System::Object ^ arg0, System::Object ^ arg1, System::Object ^ arg2);" />
      <MemberSignature Language="F#" Value="abstract member WriteLine : string * obj * obj * obj -&gt; unit&#xA;override this.WriteLine : string * obj * obj * obj -&gt; unit" Usage="textWriter.WriteLine (format, arg0, arg1, arg2)" />
      <MemberSignature Language="C#" Value="public virtual void WriteLine (string? format, object arg0, object arg1, object arg2);" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="arg0" Type="System.Object" Index="1" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="arg1" Type="System.Object" Index="2" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="arg2" Type="System.Object" Index="3" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="format">复合格式字符串。</param>
        <param name="arg0">要格式化和写入的第一个对象。</param>
        <param name="arg1">要格式化和写入的第二个对象。</param>
        <param name="arg2">要设置格式和写入的第三个对象。</param>
        <summary>使用与 <see cref="M:System.String.Format(System.String,System.Object)" /> 相同的语义将格式化字符串和新行写入文本流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法使用复合格式设置将对象的值转换为其字符串表示形式，并将该表示形式嵌入字符串。 .NET 提供广泛的格式支持，以下格式设置主题对此进行了更详细的介绍：  
  
-   有关复合格式设置功能的详细信息，请参阅 [复合格式设置](/dotnet/standard/base-types/composite-formatting)。  
  
-   有关数字格式说明符的详细信息，请参阅 [标准数字格式字符串](/dotnet/standard/base-types/standard-numeric-format-strings) 和 [自定义数字格式字符串](/dotnet/standard/base-types/custom-numeric-format-strings)。  
  
-   有关日期和时间格式说明符的详细信息，请参阅 [标准日期和时间格式字符串](/dotnet/standard/base-types/standard-date-and-time-format-strings) 和 [自定义日期和时间格式字符串](/dotnet/standard/base-types/custom-date-and-time-format-strings)。  
  
-   有关枚举格式说明符的详细信息，请参阅 [枚举格式字符串](/dotnet/standard/base-types/enumeration-format-strings)。  
  
-   有关格式设置的详细信息，请参阅 [格式设置类型](/dotnet/standard/base-types/formatting-types)。  
  
 `format`参数包含与零个或多个索引占位符（称为格式项）混合的零个或多个文本的运行，这些占位符与此方法的参数列表中的对象相对应。 格式设置过程将每个格式项替换为相应对象的值的字符串表示形式。  
  
 格式项的语法如下所示：  
  
 {*index*[，*length*] [：*格式字符串*]}  
  
 括号中的元素是可选的。 下表对每个元素进行了描述。 有关复合格式设置功能的详细信息（包括格式项的语法），请参阅 [复合格式设置](/dotnet/standard/base-types/composite-formatting)。  
  
|元素|说明|  
|-------------|-----------------|  
|索引|要设置格式的对象的参数列表中的从零开始的位置。 如果由 *index* 指定的对象为 `null` ，则会将格式项替换为 <xref:System.String.Empty?displayProperty=nameWithType> 。 因为此重载在其参数列表中有三个对象，所以 *index* 的值必须始终是0、1或2。 如果 *索引* 位置中没有参数， <xref:System.FormatException> 则会引发。|  
|，*长度*|参数的字符串表示形式中的最小字符数。 如果为正，则参数为右对齐; 否则为。如果为负，则为左对齐。|  
|：*格式字符串*|要设置格式的对象支持的标准或自定义格式字符串。 *格式字符串*的可能值与对象的方法所支持的值相同 `ToString(string format)` 。 如果未指定 " *格式字符串* " 并且要设置其格式的对象实现 <xref:System.IFormattable> 接口， `null` 则将作为 `format` 用作格式字符串的参数的值传递 <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> 。|  
  
 需要 "{" 和 "}" 等前导和尾随大括号。 若要在中指定单个文本大括号字符 `format` ，请指定两个前导或尾随大括号字符，即 "{{" 或 "}}"。  
  
 此方法不会在指定字符串中搜索 (十六进制 0x000a) 的单个换行符，并将其替换为 <xref:System.IO.TextWriter.NewLine%2A> 。  
  
 如果在格式字符串中未引用指定的对象，则会将其忽略。  
  
 行终止符由 <xref:System.IO.TextWriter.CoreNewLine> 字段定义。  
  
 有关常见 i/o 任务的列表，请参阅 [常见 I/o 任务](/dotnet/standard/io/common-i-o-tasks)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="format" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.IO.TextWriter" /> 是关闭的。</exception>
        <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
        <exception cref="T:System.FormatException"><paramref name="format" /> 不是有效的复合格式字符串。  
  
- 或 - 
格式项的索引小于 0 （0）、或大于或等于要设置格式的对象数 (用于该方法重载，为三)。</exception>
        <altmember cref="T:System.IO.StreamWriter" />
        <altmember cref="T:System.IO.StringWriter" />
        <altmember cref="T:System.IFormatProvider" />
        <related type="Article" href="/dotnet/standard/io/">文件和流 I/O</related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file">如何：从文件中读取文本</related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file">如何：将文本写入文件</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteLineAsync">
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>以异步形式将数据写入文本流，后跟行终止符。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

 类是一个抽象类。 因此，不要在代码中对其进行实例化。 有关使用方法的示例 <xref:System.IO.TextWriter.WriteLineAsync%2A> ，请参见 <xref:System.IO.StreamWriter.WriteLineAsync%2A?displayProperty=nameWithType> 方法。

            ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteLineAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteLineAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteLineAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.WriteLineAsync" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WriteLineAsync () As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ WriteLineAsync();" />
      <MemberSignature Language="F#" Value="abstract member WriteLineAsync : unit -&gt; System.Threading.Tasks.Task&#xA;override this.WriteLineAsync : unit -&gt; System.Threading.Tasks.Task" Usage="textWriter.WriteLineAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Runtime.InteropServices.ComVisible(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.ComVisible(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>以异步形式将行终止符写入文本流。</summary>
        <returns>表示异步写入操作的任务。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

行终止符由 <xref:System.IO.TextWriter.CoreNewLine> 字段定义。

          ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">文本编写器已被释放。</exception>
        <exception cref="T:System.InvalidOperationException">文本编写器正在由其前一次写操作使用。</exception>
        <altmember cref="M:System.IO.StreamWriter.WriteLineAsync" />
      </Docs>
    </Member>
    <Member MemberName="WriteLineAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteLineAsync (char value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteLineAsync(char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.WriteLineAsync(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WriteLineAsync (value As Char) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ WriteLineAsync(char value);" />
      <MemberSignature Language="F#" Value="abstract member WriteLineAsync : char -&gt; System.Threading.Tasks.Task&#xA;override this.WriteLineAsync : char -&gt; System.Threading.Tasks.Task" Usage="textWriter.WriteLineAsync value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Runtime.InteropServices.ComVisible(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.ComVisible(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="value">要写入文本流中的字符。</param>
        <summary>以异步形式将字符写入文本流，后跟行终止符。</summary>
        <returns>表示异步写入操作的任务。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 行终止符由 <xref:System.IO.TextWriter.CoreNewLine> 字段定义。  
  
  类是一个抽象类。 因此，不要在代码中对其进行实例化。 有关使用方法的示例 <xref:System.IO.TextWriter.WriteLineAsync%2A> ，请参见 <xref:System.IO.StreamWriter.WriteLineAsync%2A?displayProperty=nameWithType> 方法。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">文本编写器已被释放。</exception>
        <exception cref="T:System.InvalidOperationException">文本编写器正在由其前一次写操作使用。</exception>
        <altmember cref="M:System.IO.StreamWriter.WriteLineAsync(System.Char)" />
        <altmember cref="M:System.IO.StringWriter.WriteLineAsync(System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="WriteLineAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteLineAsync (char[] buffer);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteLineAsync(char[] buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.WriteLineAsync(System.Char[])" />
      <MemberSignature Language="VB.NET" Value="Public Function WriteLineAsync (buffer As Char()) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteLineAsync(cli::array &lt;char&gt; ^ buffer);" />
      <MemberSignature Language="F#" Value="member this.WriteLineAsync : char[] -&gt; System.Threading.Tasks.Task" Usage="textWriter.WriteLineAsync buffer" />
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteLineAsync (char[]? buffer);" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Runtime.InteropServices.ComVisible(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.ComVisible(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="buffer">要写入文本流中的字符数组。 如果字符数组为 <see langword="null" />，则仅写入行结束符。</param>
        <summary>以异步形式将字符数组写入文本流，后跟行终止符。</summary>
        <returns>表示异步写入操作的任务。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 行终止符由 <xref:System.IO.TextWriter.CoreNewLine> 字段定义。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">文本编写器已被释放。</exception>
        <exception cref="T:System.InvalidOperationException">文本编写器正在由其前一次写操作使用。</exception>
        <altmember cref="T:System.IO.StreamWriter" />
        <altmember cref="T:System.IO.StringWriter" />
      </Docs>
    </Member>
    <Member MemberName="WriteLineAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteLineAsync (string value);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteLineAsync(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.WriteLineAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WriteLineAsync (value As String) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ WriteLineAsync(System::String ^ value);" />
      <MemberSignature Language="F#" Value="abstract member WriteLineAsync : string -&gt; System.Threading.Tasks.Task&#xA;override this.WriteLineAsync : string -&gt; System.Threading.Tasks.Task" Usage="textWriter.WriteLineAsync value" />
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteLineAsync (string? value);" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Runtime.InteropServices.ComVisible(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.ComVisible(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="value">要写入的字符串。 如果值为 <see langword="null" />，则只写入行终止符。</param>
        <summary>以异步形式将字符串写入文本流，后跟行终止符。</summary>
        <returns>表示异步写入操作的任务。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 行终止符由 <xref:System.IO.TextWriter.CoreNewLine> 字段定义。  
  
  类是一个抽象类。 因此，不要在代码中对其进行实例化。 有关使用方法的示例 <xref:System.IO.TextWriter.WriteLineAsync%2A> ，请参见 <xref:System.IO.StreamWriter.WriteLineAsync%2A?displayProperty=nameWithType> 方法。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">文本编写器已被释放。</exception>
        <exception cref="T:System.InvalidOperationException">文本编写器正在由其前一次写操作使用。</exception>
        <altmember cref="M:System.IO.StreamWriter.WriteLineAsync(System.String)" />
        <altmember cref="M:System.IO.StringWriter.WriteLineAsync(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="WriteLineAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task? WriteLineAsync (ReadOnlyMemory&lt;char&gt; buffer, System.Threading.CancellationToken cancellationToken = default);" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteLineAsync(valuetype System.ReadOnlyMemory`1&lt;char&gt; buffer, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.WriteLineAsync(System.ReadOnlyMemory{System.Char},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WriteLineAsync (buffer As ReadOnlyMemory(Of Char), Optional cancellationToken As CancellationToken = Nothing) As Task" />
      <MemberSignature Language="F#" Value="abstract member WriteLineAsync : ReadOnlyMemory&lt;char&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.WriteLineAsync : ReadOnlyMemory&lt;char&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="textWriter.WriteLineAsync (buffer, cancellationToken)" />
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteLineAsync (ReadOnlyMemory&lt;char&gt; buffer, System.Threading.CancellationToken cancellationToken = default);" FrameworkAlternate="netcore-2.1;netcore-2.2;netstandard-2.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.ReadOnlyMemory&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="buffer">要写入文本流中的字符内存区域。</param>
        <param name="cancellationToken">要监视取消请求的标记。 默认值是 <see cref="P:System.Threading.CancellationToken.None" />。</param>
        <summary>以异步形式将字符内存区域的文本表示形式写入文本流，后跟行终止符。</summary>
        <returns>表示异步写入操作的任务。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  

## Remarks

行终止符由 <xref:System.IO.TextWriter.CoreNewLine> 字段定义。
 
          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteLineAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteLineAsync (System.Text.StringBuilder? value, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteLineAsync(class System.Text.StringBuilder value, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.WriteLineAsync(System.Text.StringBuilder,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WriteLineAsync (value As StringBuilder, Optional cancellationToken As CancellationToken = Nothing) As Task" />
      <MemberSignature Language="F#" Value="abstract member WriteLineAsync : System.Text.StringBuilder * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.WriteLineAsync : System.Text.StringBuilder * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="textWriter.WriteLineAsync (value, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Text.StringBuilder" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;net-5.0" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="netcore-3.0;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="value">要作为字符串生成器写入文本流的字符串。</param>
        <param name="cancellationToken">要监视取消请求的标记。 默认值是 <see cref="P:System.Threading.CancellationToken.None" />。</param>
        <summary>以异步形式将字符串生成器的文本表示形式写入文本流，后跟行终止符。</summary>
        <returns>表示异步写入操作的任务。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

行终止符由 <xref:System.IO.TextWriter.CoreNewLine> 字段定义。
 
          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteLineAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteLineAsync (char[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteLineAsync(char[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.WriteLineAsync(System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WriteLineAsync (buffer As Char(), index As Integer, count As Integer) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ WriteLineAsync(cli::array &lt;char&gt; ^ buffer, int index, int count);" />
      <MemberSignature Language="F#" Value="abstract member WriteLineAsync : char[] * int * int -&gt; System.Threading.Tasks.Task&#xA;override this.WriteLineAsync : char[] * int * int -&gt; System.Threading.Tasks.Task" Usage="textWriter.WriteLineAsync (buffer, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Runtime.InteropServices.ComVisible(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.ComVisible(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="index" Type="System.Int32" Index="1" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="count" Type="System.Int32" Index="2" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="buffer">要从中写出数据的字符数组。</param>
        <param name="index">在开始接收数据时缓存中的字符位置。</param>
        <param name="count">要写入的字符数。</param>
        <summary>以异步形式将字符子数组写入文本流，后跟行终止符。</summary>
        <returns>表示异步写入操作的任务。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

行终止符由 <xref:System.IO.TextWriter.CoreNewLine> 字段定义。

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="buffer" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="index" /> 加 <paramref name="count" /> 大于缓冲区长度。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" /> 或 <paramref name="count" /> 为负数。</exception>
        <exception cref="T:System.ObjectDisposedException">文本编写器已被释放。</exception>
        <exception cref="T:System.InvalidOperationException">文本编写器正在由其前一次写操作使用。</exception>
        <altmember cref="M:System.IO.StreamWriter.WriteLineAsync(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.IO.StringWriter.WriteLineAsync(System.Char[],System.Int32,System.Int32)" />
      </Docs>
    </Member>
  </Members>
</Type>
