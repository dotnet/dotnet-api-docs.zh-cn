<Type Name="BinaryWriter" FullName="System.IO.BinaryWriter">
  <Metadata><Meta Name="ms.openlocfilehash" Value="7663e5d57eb1410671e429ddcb60c9faa5d33c13" /><Meta Name="ms.sourcegitcommit" Value="11d168140aa8fade0768c2a9dde3e3bcacfdfb7d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="05/27/2020" /><Meta Name="ms.locfileid" Value="83961444" /></Metadata><TypeSignature Language="C#" Value="public class BinaryWriter : IDisposable" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit BinaryWriter extends System.Object implements class System.IDisposable" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0" />
  <TypeSignature Language="DocId" Value="T:System.IO.BinaryWriter" />
  <TypeSignature Language="VB.NET" Value="Public Class BinaryWriter&#xA;Implements IDisposable" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="C++ CLI" Value="public ref class BinaryWriter : IDisposable" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="F#" Value="type BinaryWriter = class&#xA;    interface IDisposable" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="C#" Value="public class BinaryWriter : IAsyncDisposable, IDisposable" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netstandard-2.1" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit BinaryWriter extends System.Object implements class System.IAsyncDisposable, class System.IDisposable" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netstandard-2.1" />
  <TypeSignature Language="VB.NET" Value="Public Class BinaryWriter&#xA;Implements IAsyncDisposable, IDisposable" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netstandard-2.1" />
  <TypeSignature Language="C++ CLI" Value="public ref class BinaryWriter : IAsyncDisposable, IDisposable" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netstandard-2.1" />
  <TypeSignature Language="F#" Value="type BinaryWriter = class&#xA;    interface IAsyncDisposable&#xA;    interface IDisposable" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netstandard-2.1" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit BinaryWriter extends System.Object implements class System.IDisposable" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <AssemblyInfo>
    <AssemblyName>System.IO</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Extensions</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="mscorlib" FromVersion="4.0.0.0" To="System.IO" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0" />
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Runtime" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
    <TypeForwarding From="System.IO" FromVersion="5.0.0.0" To="System.Runtime" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
    <TypeForwarding From="System.Runtime.Extensions" FromVersion="5.0.0.0" To="System.Runtime" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
    <TypeForwarding From="System.IO" FromVersion="4.2.0.0" To="System.Runtime.Extensions" ToVersion="4.2.0.0" FrameworkAlternate="netcore-2.0" />
    <TypeForwarding From="System.IO" FromVersion="4.2.1.0" To="System.Runtime.Extensions" ToVersion="4.2.1.0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0" />
    <TypeForwarding From="System.IO" FromVersion="4.2.2.0" To="System.Runtime.Extensions" ToVersion="4.2.2.0" FrameworkAlternate="netcore-3.1" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="f865c-101">将二进制中的基元类型写入流并支持用特定的编码写入字符串。</span><span class="sxs-lookup"><span data-stu-id="f865c-101">Writes primitive types in binary to a stream and supports writing strings in a specific encoding.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f865c-102"><xref:System.IO.BinaryWriter> 类提供简化将基元数据类型写入流的方法。</span><span class="sxs-lookup"><span data-stu-id="f865c-102">The <xref:System.IO.BinaryWriter> class provides methods that simplify writing primitive data types to a stream.</span></span> <span data-ttu-id="f865c-103">例如，可以使用 <xref:System.IO.BinaryWriter.Write%2A> 方法将布尔值作为单字节值写入流。</span><span class="sxs-lookup"><span data-stu-id="f865c-103">For example, you can use the <xref:System.IO.BinaryWriter.Write%2A> method to write a Boolean value to the stream as a one-byte value.</span></span> <span data-ttu-id="f865c-104">类包含支持不同数据类型的写入方法。</span><span class="sxs-lookup"><span data-stu-id="f865c-104">The class includes write methods that support different data types.</span></span>  
  
 <span data-ttu-id="f865c-105">当你创建 <xref:System.IO.BinaryWriter> 类的新实例时，你提供要写入的流，并根据需要指定编码的类型以及在释放 <xref:System.IO.BinaryWriter> 对象后是否将流保持打开状态。</span><span class="sxs-lookup"><span data-stu-id="f865c-105">When you create a new instance of the <xref:System.IO.BinaryWriter> class, you provide the stream to write to, and optionally specify the type of encoding and whether to leave the stream open after disposing the <xref:System.IO.BinaryWriter> object.</span></span> <span data-ttu-id="f865c-106">如果未指定编码类型，将使用 UTF-8。</span><span class="sxs-lookup"><span data-stu-id="f865c-106">If you do not specify an encoding type, UTF-8 is used.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f865c-107">此类型实现 <xref:System.IDisposable> 接口。</span><span class="sxs-lookup"><span data-stu-id="f865c-107">This type implements the <xref:System.IDisposable> interface.</span></span> <span data-ttu-id="f865c-108">在使用完类型后，您应直接或间接释放类型。</span><span class="sxs-lookup"><span data-stu-id="f865c-108">When you have finished using the type, you should dispose of it either directly or indirectly.</span></span> <span data-ttu-id="f865c-109">若要直接释放类型，请在 `try`/`catch` 块中调用其 <xref:System.IDisposable.Dispose%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="f865c-109">To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block.</span></span> <span data-ttu-id="f865c-110">若要间接释放类型，请使用 `using`（在 C# 中）或 `Using`（在 Visual Basic 中）等语言构造。</span><span class="sxs-lookup"><span data-stu-id="f865c-110">To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic).</span></span> <span data-ttu-id="f865c-111">有关详细信息，请参阅 <xref:System.IDisposable> 接口主题中的“使用实现 IDisposable 的对象”一节。</span><span class="sxs-lookup"><span data-stu-id="f865c-111">For more information, see the "Using an Object that Implements IDisposable" section in the <xref:System.IDisposable> interface topic.</span></span>  
  
 <span data-ttu-id="f865c-112">派生类可以重写此类的方法以指定唯一的字符编码。</span><span class="sxs-lookup"><span data-stu-id="f865c-112">A derived class can override the methods of this class to give unique character encodings.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f865c-113">下面的代码示例演示如何在文件中存储和检索应用程序设置。</span><span class="sxs-lookup"><span data-stu-id="f865c-113">The following code example demonstrates how to store and retrieve application settings in a file.</span></span>  
  
 [!code-csharp[System.IO.BinaryReaderWriter#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter/CS/source.cs#1)]
 [!code-vb[System.IO.BinaryReaderWriter#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Text.Encoding" />
    <related type="Article" href="/dotnet/standard/io/how-to-read-and-write-to-a-newly-created-data-file"><span data-ttu-id="f865c-114">如何：对新建的数据文件进行读取和写入</span><span class="sxs-lookup"><span data-stu-id="f865c-114">How to: Read and Write to a Newly Created Data File</span></span></related>
    <related type="Article" href="/dotnet/standard/io/"><span data-ttu-id="f865c-115">文件和流 I/O</span><span class="sxs-lookup"><span data-stu-id="f865c-115">File and Stream I/O</span></span></related>
    <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file"><span data-ttu-id="f865c-116">如何：从文件读取文本</span><span class="sxs-lookup"><span data-stu-id="f865c-116">How to: Read Text from a File</span></span></related>
    <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file"><span data-ttu-id="f865c-117">如何：向文件写入文本</span><span class="sxs-lookup"><span data-stu-id="f865c-117">How to: Write Text to a File</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="f865c-118">初始化写入流的 <see cref="T:System.IO.BinaryWriter" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="f865c-118">Initializes a new instance of the <see cref="T:System.IO.BinaryWriter" /> class that writes to a stream.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected BinaryWriter ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.BinaryWriter.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; BinaryWriter();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f865c-119">初始化写入流的 <see cref="T:System.IO.BinaryWriter" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="f865c-119">Initializes a new instance of the <see cref="T:System.IO.BinaryWriter" /> class that writes to a stream.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f865c-120">有关常见 i/o 任务的列表，请参阅[常见 I/o 任务](/dotnet/standard/io/common-i-o-tasks)。</span><span class="sxs-lookup"><span data-stu-id="f865c-120">For a list of common I/O tasks, see [Common I/O Tasks](/dotnet/standard/io/common-i-o-tasks).</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/standard/io/"><span data-ttu-id="f865c-121">文件和流 I/O</span><span class="sxs-lookup"><span data-stu-id="f865c-121">File and Stream I/O</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file"><span data-ttu-id="f865c-122">如何：从文件读取文本</span><span class="sxs-lookup"><span data-stu-id="f865c-122">How to: Read Text from a File</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file"><span data-ttu-id="f865c-123">如何：向文件写入文本</span><span class="sxs-lookup"><span data-stu-id="f865c-123">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BinaryWriter (System.IO.Stream output);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.BinaryWriter.#ctor(System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (output As Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; BinaryWriter(System::IO::Stream ^ output);" />
      <MemberSignature Language="F#" Value="new System.IO.BinaryWriter : System.IO.Stream -&gt; System.IO.BinaryWriter" Usage="new System.IO.BinaryWriter output" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="output" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="output"><span data-ttu-id="f865c-124">输出流。</span><span class="sxs-lookup"><span data-stu-id="f865c-124">The output stream.</span></span></param>
        <summary><span data-ttu-id="f865c-125">基于所指定的流和特定的 UTF-8 编码，初始化 <see cref="T:System.IO.BinaryWriter" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="f865c-125">Initializes a new instance of the <see cref="T:System.IO.BinaryWriter" /> class based on the specified stream and using UTF-8 encoding.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f865c-126">有关常见 i/o 任务的列表，请参阅[常见 I/o 任务](/dotnet/standard/io/common-i-o-tasks)。</span><span class="sxs-lookup"><span data-stu-id="f865c-126">For a list of common I/O tasks, see [Common I/O Tasks](/dotnet/standard/io/common-i-o-tasks).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f865c-127">下面的代码示例演示如何在文件中存储和检索应用程序设置。</span><span class="sxs-lookup"><span data-stu-id="f865c-127">The following code example demonstrates how to store and retrieve application settings in a file.</span></span>  
  
 [!code-csharp[System.IO.BinaryReaderWriter#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter/CS/source.cs#1)]
 [!code-vb[System.IO.BinaryReaderWriter#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f865c-128">该流不支持写入或者该流已关闭。</span><span class="sxs-lookup"><span data-stu-id="f865c-128">The stream does not support writing or is already closed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f865c-129"><paramref name="output" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="f865c-129"><paramref name="output" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="P:System.Text.Encoding.UTF8" />
        <related type="Article" href="/dotnet/standard/io/"><span data-ttu-id="f865c-130">文件和流 I/O</span><span class="sxs-lookup"><span data-stu-id="f865c-130">File and Stream I/O</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file"><span data-ttu-id="f865c-131">如何：从文件读取文本</span><span class="sxs-lookup"><span data-stu-id="f865c-131">How to: Read Text from a File</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file"><span data-ttu-id="f865c-132">如何：向文件写入文本</span><span class="sxs-lookup"><span data-stu-id="f865c-132">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BinaryWriter (System.IO.Stream output, System.Text.Encoding encoding);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream output, class System.Text.Encoding encoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.BinaryWriter.#ctor(System.IO.Stream,System.Text.Encoding)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (output As Stream, encoding As Encoding)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; BinaryWriter(System::IO::Stream ^ output, System::Text::Encoding ^ encoding);" />
      <MemberSignature Language="F#" Value="new System.IO.BinaryWriter : System.IO.Stream * System.Text.Encoding -&gt; System.IO.BinaryWriter" Usage="new System.IO.BinaryWriter (output, encoding)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="output" Type="System.IO.Stream" />
        <Parameter Name="encoding" Type="System.Text.Encoding" />
      </Parameters>
      <Docs>
        <param name="output"><span data-ttu-id="f865c-133">输出流。</span><span class="sxs-lookup"><span data-stu-id="f865c-133">The output stream.</span></span></param>
        <param name="encoding"><span data-ttu-id="f865c-134">要使用的字符编码。</span><span class="sxs-lookup"><span data-stu-id="f865c-134">The character encoding to use.</span></span></param>
        <summary><span data-ttu-id="f865c-135">基于所指定的流和特定的字符编码，初始化 <see cref="T:System.IO.BinaryWriter" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="f865c-135">Initializes a new instance of the <see cref="T:System.IO.BinaryWriter" /> class based on the specified stream and character encoding.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f865c-136">有关常见 i/o 任务的列表，请参阅[常见 I/o 任务](/dotnet/standard/io/common-i-o-tasks)。</span><span class="sxs-lookup"><span data-stu-id="f865c-136">For a list of common I/O tasks, see [Common I/O Tasks](/dotnet/standard/io/common-i-o-tasks).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f865c-137">该流不支持写入或者该流已关闭。</span><span class="sxs-lookup"><span data-stu-id="f865c-137">The stream does not support writing or is already closed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f865c-138"><paramref name="output" /> 或 <paramref name="encoding" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="f865c-138"><paramref name="output" /> or <paramref name="encoding" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Text.Encoding" />
        <related type="Article" href="/dotnet/standard/io/"><span data-ttu-id="f865c-139">文件和流 I/O</span><span class="sxs-lookup"><span data-stu-id="f865c-139">File and Stream I/O</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file"><span data-ttu-id="f865c-140">如何：从文件读取文本</span><span class="sxs-lookup"><span data-stu-id="f865c-140">How to: Read Text from a File</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file"><span data-ttu-id="f865c-141">如何：向文件写入文本</span><span class="sxs-lookup"><span data-stu-id="f865c-141">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BinaryWriter (System.IO.Stream output, System.Text.Encoding encoding, bool leaveOpen);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream output, class System.Text.Encoding encoding, bool leaveOpen) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.BinaryWriter.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (output As Stream, encoding As Encoding, leaveOpen As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; BinaryWriter(System::IO::Stream ^ output, System::Text::Encoding ^ encoding, bool leaveOpen);" />
      <MemberSignature Language="F#" Value="new System.IO.BinaryWriter : System.IO.Stream * System.Text.Encoding * bool -&gt; System.IO.BinaryWriter" Usage="new System.IO.BinaryWriter (output, encoding, leaveOpen)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="output" Type="System.IO.Stream" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="encoding" Type="System.Text.Encoding" Index="1" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="leaveOpen" Type="System.Boolean" Index="2" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="output"><span data-ttu-id="f865c-142">输出流。</span><span class="sxs-lookup"><span data-stu-id="f865c-142">The output stream.</span></span></param>
        <param name="encoding"><span data-ttu-id="f865c-143">要使用的字符编码。</span><span class="sxs-lookup"><span data-stu-id="f865c-143">The character encoding to use.</span></span></param>
        <param name="leaveOpen"><span data-ttu-id="f865c-144">如果在释放 <see cref="T:System.IO.BinaryWriter" /> 对象后保持流处于打开状态，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="f865c-144"><see langword="true" /> to leave the stream open after the <see cref="T:System.IO.BinaryWriter" /> object is disposed; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="f865c-145">基于所提供的流和特定的字符编码，初始化 <see cref="T:System.IO.BinaryWriter" /> 类的新实例，有选择性的打开流。</span><span class="sxs-lookup"><span data-stu-id="f865c-145">Initializes a new instance of the <see cref="T:System.IO.BinaryWriter" /> class based on the specified stream and character encoding, and optionally leaves the stream open.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f865c-146">该流不支持写入或者该流已关闭。</span><span class="sxs-lookup"><span data-stu-id="f865c-146">The stream does not support writing or is already closed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f865c-147"><paramref name="output" /> 或 <paramref name="encoding" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="f865c-147"><paramref name="output" /> or <paramref name="encoding" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Text.Encoding" />
        <related type="Article" href="/dotnet/standard/io/"><span data-ttu-id="f865c-148">文件和流 I/O</span><span class="sxs-lookup"><span data-stu-id="f865c-148">File and Stream I/O</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file"><span data-ttu-id="f865c-149">如何：从文件读取文本</span><span class="sxs-lookup"><span data-stu-id="f865c-149">How to: Read Text from a File</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file"><span data-ttu-id="f865c-150">如何：向文件写入文本</span><span class="sxs-lookup"><span data-stu-id="f865c-150">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="BaseStream">
      <MemberSignature Language="C#" Value="public virtual System.IO.Stream BaseStream { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IO.Stream BaseStream" />
      <MemberSignature Language="DocId" Value="P:System.IO.BinaryWriter.BaseStream" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property BaseStream As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::IO::Stream ^ BaseStream { System::IO::Stream ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.BaseStream : System.IO.Stream" Usage="System.IO.BinaryWriter.BaseStream" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f865c-151">获取 <see cref="T:System.IO.BinaryWriter" /> 的基础流。</span><span class="sxs-lookup"><span data-stu-id="f865c-151">Gets the underlying stream of the <see cref="T:System.IO.BinaryWriter" />.</span></span></summary>
        <value><span data-ttu-id="f865c-152">与 <see langword="BinaryWriter" /> 关联的基础流。</span><span class="sxs-lookup"><span data-stu-id="f865c-152">The underlying stream associated with the <see langword="BinaryWriter" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f865c-153">有关常见 i/o 任务的列表，请参阅[常见 I/o 任务](/dotnet/standard/io/common-i-o-tasks)。</span><span class="sxs-lookup"><span data-stu-id="f865c-153">For a list of common I/O tasks, see [Common I/O Tasks](/dotnet/standard/io/common-i-o-tasks).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f865c-154">下面的代码示例演示如何使用 <xref:System.IO.MemoryStream> 类顶部 <xref:System.IO.BinaryReader> 和 `BinaryWriter` 类，在内存中读取和写入 `Double` 数据。</span><span class="sxs-lookup"><span data-stu-id="f865c-154">The following code example shows how to read and write `Double` data to memory by using the <xref:System.IO.BinaryReader> and `BinaryWriter` classes on top of the <xref:System.IO.MemoryStream> class.</span></span> <span data-ttu-id="f865c-155">仅 `MemoryStream` 读取和写入 `Byte` 的数据。</span><span class="sxs-lookup"><span data-stu-id="f865c-155">`MemoryStream` only reads and writes `Byte` data.</span></span>  
  
 [!code-cpp[System.IO.BinaryReaderWriter.RWDouble#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter.RWDouble/CPP/rwdouble.cpp#1)]
 [!code-csharp[System.IO.BinaryReaderWriter.RWDouble#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter.RWDouble/CS/rwdouble.cs#1)]
 [!code-vb[System.IO.BinaryReaderWriter.RWDouble#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter.RWDouble/VB/rwdouble.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/standard/io/"><span data-ttu-id="f865c-156">文件和流 I/O</span><span class="sxs-lookup"><span data-stu-id="f865c-156">File and Stream I/O</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file"><span data-ttu-id="f865c-157">如何：从文件读取文本</span><span class="sxs-lookup"><span data-stu-id="f865c-157">How to: Read Text from a File</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file"><span data-ttu-id="f865c-158">如何：向文件写入文本</span><span class="sxs-lookup"><span data-stu-id="f865c-158">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public virtual void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.BinaryWriter.Close" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Close();" />
      <MemberSignature Language="F#" Value="abstract member Close : unit -&gt; unit&#xA;override this.Close : unit -&gt; unit" Usage="binaryWriter.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f865c-159">关闭当前的 <see cref="T:System.IO.BinaryWriter" /> 和基础流。</span><span class="sxs-lookup"><span data-stu-id="f865c-159">Closes the current <see cref="T:System.IO.BinaryWriter" /> and the underlying stream.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f865c-160">此 `Close` 实现调用传递 `true` 值的 <xref:System.IO.BinaryWriter.Dispose%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="f865c-160">This implementation of `Close` calls the <xref:System.IO.BinaryWriter.Dispose%2A> method passing a `true` value.</span></span>  
  
 <span data-ttu-id="f865c-161">除非显式调用 <xref:System.IO.BinaryWriter.Flush%2A> 或 `Close`，否则刷新流将不会刷新其基础编码器。</span><span class="sxs-lookup"><span data-stu-id="f865c-161">Flushing the stream will not flush its underlying encoder unless you explicitly call <xref:System.IO.BinaryWriter.Flush%2A> or `Close`.</span></span> <span data-ttu-id="f865c-162">将 <xref:System.IO.StreamWriter.AutoFlush%2A> 设置为 `true` 表示将数据从缓冲区刷新到流，但编码器状态不会被刷新。</span><span class="sxs-lookup"><span data-stu-id="f865c-162">Setting <xref:System.IO.StreamWriter.AutoFlush%2A> to `true` means that data will be flushed from the buffer to the stream, but the encoder state will not be flushed.</span></span> <span data-ttu-id="f865c-163">这允许编码器保留其状态（部分字符），以使其能够正确编码下一个字符块。</span><span class="sxs-lookup"><span data-stu-id="f865c-163">This allows the encoder to keep its state (partial characters) so that it can encode the next block of characters correctly.</span></span> <span data-ttu-id="f865c-164">此方案影响 UTF8 和 UTF7，其中某些字符只能在编码器接收到相邻字符后编码。</span><span class="sxs-lookup"><span data-stu-id="f865c-164">This scenario affects UTF8 and UTF7 where certain characters can only be encoded after the encoder receives the adjacent character or characters.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/standard/io/"><span data-ttu-id="f865c-165">文件和流 I/O</span><span class="sxs-lookup"><span data-stu-id="f865c-165">File and Stream I/O</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file"><span data-ttu-id="f865c-166">如何：从文件读取文本</span><span class="sxs-lookup"><span data-stu-id="f865c-166">How to: Read Text from a File</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file"><span data-ttu-id="f865c-167">如何：向文件写入文本</span><span class="sxs-lookup"><span data-stu-id="f865c-167">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="f865c-168">释放 <see cref="T:System.IO.BinaryWriter" /> 使用的资源。</span><span class="sxs-lookup"><span data-stu-id="f865c-168">Releases the resources used by the <see cref="T:System.IO.BinaryWriter" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.BinaryWriter.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="binaryWriter.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f865c-169">释放由 <see cref="T:System.IO.BinaryWriter" /> 类的当前实例占用的所有资源。</span><span class="sxs-lookup"><span data-stu-id="f865c-169">Releases all resources used by the current instance of the <see cref="T:System.IO.BinaryWriter" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.BinaryWriter.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="binaryWriter.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing"><span data-ttu-id="f865c-170">如果为 <see langword="true" />，则托管及非托管资源都释放；如果为 <see langword="false" />，则仅释放非托管资源。</span><span class="sxs-lookup"><span data-stu-id="f865c-170"><see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</span></span></param>
        <summary><span data-ttu-id="f865c-171">释放 <see cref="T:System.IO.BinaryWriter" /> 使用的非托管资源，并选择性地释放托管资源。</span><span class="sxs-lookup"><span data-stu-id="f865c-171">Releases the unmanaged resources used by the <see cref="T:System.IO.BinaryWriter" /> and optionally releases the managed resources.</span></span></summary>
        <remarks>To be added.</remarks>
        <related type="Article" href="/dotnet/standard/io/"><span data-ttu-id="f865c-172">文件和流 I/O</span><span class="sxs-lookup"><span data-stu-id="f865c-172">File and Stream I/O</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file"><span data-ttu-id="f865c-173">如何：从文件读取文本</span><span class="sxs-lookup"><span data-stu-id="f865c-173">How to: Read Text from a File</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file"><span data-ttu-id="f865c-174">如何：向文件写入文本</span><span class="sxs-lookup"><span data-stu-id="f865c-174">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="DisposeAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.ValueTask DisposeAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Threading.Tasks.ValueTask DisposeAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.BinaryWriter.DisposeAsync" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DisposeAsync () As ValueTask" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::ValueTask DisposeAsync();" />
      <MemberSignature Language="F#" Value="abstract member DisposeAsync : unit -&gt; System.Threading.Tasks.ValueTask&#xA;override this.DisposeAsync : unit -&gt; System.Threading.Tasks.ValueTask" Usage="binaryWriter.DisposeAsync " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IAsyncDisposable.DisposeAsync</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f865c-175">异步释放 <see cref="T:System.IO.BinaryWriter" /> 类的当前实例所使用的所有资源。</span><span class="sxs-lookup"><span data-stu-id="f865c-175">Asynchronously releases all resources used by the current instance of the <see cref="T:System.IO.BinaryWriter" /> class.</span></span></summary>
        <returns><span data-ttu-id="f865c-176">一个表示异步释放操作的任务。</span><span class="sxs-lookup"><span data-stu-id="f865c-176">A task that represents the asynchronous dispose operation.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public virtual void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Flush() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.BinaryWriter.Flush" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Flush ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Flush();" />
      <MemberSignature Language="F#" Value="abstract member Flush : unit -&gt; unit&#xA;override this.Flush : unit -&gt; unit" Usage="binaryWriter.Flush " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f865c-177">清理当前编写器的所有缓冲区，使所有缓冲数据写入基础设备。</span><span class="sxs-lookup"><span data-stu-id="f865c-177">Clears all buffers for the current writer and causes any buffered data to be written to the underlying device.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f865c-178">所有派生类都应该重写 `Flush`，以确保所有缓冲的数据都发送到流中。</span><span class="sxs-lookup"><span data-stu-id="f865c-178">All derived classes should override `Flush` to ensure that all buffered data is sent to the stream.</span></span>  
  
 <span data-ttu-id="f865c-179">除非显式调用 `Flush` 或 <xref:System.IO.BinaryWriter.Close%2A>，否则刷新流将不会刷新其基础编码器。</span><span class="sxs-lookup"><span data-stu-id="f865c-179">Flushing the stream will not flush its underlying encoder unless you explicitly call `Flush` or <xref:System.IO.BinaryWriter.Close%2A>.</span></span> <span data-ttu-id="f865c-180">将 <xref:System.IO.StreamWriter.AutoFlush%2A> 设置为 `true` 表示将数据从缓冲区刷新到流，但编码器状态不会被刷新。</span><span class="sxs-lookup"><span data-stu-id="f865c-180">Setting <xref:System.IO.StreamWriter.AutoFlush%2A> to `true` means that data will be flushed from the buffer to the stream, but the encoder state will not be flushed.</span></span> <span data-ttu-id="f865c-181">这允许编码器保留其状态（部分字符），以使其能够正确编码下一个字符块。</span><span class="sxs-lookup"><span data-stu-id="f865c-181">This allows the encoder to keep its state (partial characters) so that it can encode the next block of characters correctly.</span></span> <span data-ttu-id="f865c-182">此方案影响 UTF8 和 UTF7，其中某些字符只能在编码器接收到相邻字符后编码。</span><span class="sxs-lookup"><span data-stu-id="f865c-182">This scenario affects UTF8 and UTF7 where certain characters can only be encoded after the encoder receives the adjacent character or characters.</span></span>  
  
 <span data-ttu-id="f865c-183">有关常见 i/o 任务的列表，请参阅[常见 I/o 任务](/dotnet/standard/io/common-i-o-tasks)。</span><span class="sxs-lookup"><span data-stu-id="f865c-183">For a list of common I/O tasks, see [Common I/O Tasks](/dotnet/standard/io/common-i-o-tasks).</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/standard/io/"><span data-ttu-id="f865c-184">文件和流 I/O</span><span class="sxs-lookup"><span data-stu-id="f865c-184">File and Stream I/O</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file"><span data-ttu-id="f865c-185">如何：从文件读取文本</span><span class="sxs-lookup"><span data-stu-id="f865c-185">How to: Read Text from a File</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file"><span data-ttu-id="f865c-186">如何：向文件写入文本</span><span class="sxs-lookup"><span data-stu-id="f865c-186">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Null">
      <MemberSignature Language="C#" Value="public static readonly System.IO.BinaryWriter Null;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.IO.BinaryWriter Null" />
      <MemberSignature Language="DocId" Value="F:System.IO.BinaryWriter.Null" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Null As BinaryWriter " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::IO::BinaryWriter ^ Null;" />
      <MemberSignature Language="F#" Value=" staticval mutable Null : System.IO.BinaryWriter" Usage="System.IO.BinaryWriter.Null" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.BinaryWriter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f865c-187">指定无后备存储的 <see cref="T:System.IO.BinaryWriter" />。</span><span class="sxs-lookup"><span data-stu-id="f865c-187">Specifies a <see cref="T:System.IO.BinaryWriter" /> with no backing store.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f865c-188">有关常见 i/o 任务的列表，请参阅[常见 I/o 任务](/dotnet/standard/io/common-i-o-tasks)。</span><span class="sxs-lookup"><span data-stu-id="f865c-188">For a list of common I/O tasks, see [Common I/O Tasks](/dotnet/standard/io/common-i-o-tasks).</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/standard/io/"><span data-ttu-id="f865c-189">文件和流 I/O</span><span class="sxs-lookup"><span data-stu-id="f865c-189">File and Stream I/O</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file"><span data-ttu-id="f865c-190">如何：从文件读取文本</span><span class="sxs-lookup"><span data-stu-id="f865c-190">How to: Read Text from a File</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file"><span data-ttu-id="f865c-191">如何：向文件写入文本</span><span class="sxs-lookup"><span data-stu-id="f865c-191">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="OutStream">
      <MemberSignature Language="C#" Value="protected System.IO.Stream OutStream;" />
      <MemberSignature Language="ILAsm" Value=".field family class System.IO.Stream OutStream" />
      <MemberSignature Language="DocId" Value="F:System.IO.BinaryWriter.OutStream" />
      <MemberSignature Language="VB.NET" Value="Protected OutStream As Stream " />
      <MemberSignature Language="C++ CLI" Value="protected: System::IO::Stream ^ OutStream;" />
      <MemberSignature Language="F#" Value="val mutable OutStream : System.IO.Stream" Usage="System.IO.BinaryWriter.OutStream" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f865c-192">包含基础流。</span><span class="sxs-lookup"><span data-stu-id="f865c-192">Holds the underlying stream.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f865c-193">有关常见 i/o 任务的列表，请参阅[常见 I/o 任务](/dotnet/standard/io/common-i-o-tasks)。</span><span class="sxs-lookup"><span data-stu-id="f865c-193">For a list of common I/O tasks, see [Common I/O Tasks](/dotnet/standard/io/common-i-o-tasks).</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/standard/io/"><span data-ttu-id="f865c-194">文件和流 I/O</span><span class="sxs-lookup"><span data-stu-id="f865c-194">File and Stream I/O</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file"><span data-ttu-id="f865c-195">如何：从文件读取文本</span><span class="sxs-lookup"><span data-stu-id="f865c-195">How to: Read Text from a File</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file"><span data-ttu-id="f865c-196">如何：向文件写入文本</span><span class="sxs-lookup"><span data-stu-id="f865c-196">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Seek">
      <MemberSignature Language="C#" Value="public virtual long Seek (int offset, System.IO.SeekOrigin origin);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int64 Seek(int32 offset, valuetype System.IO.SeekOrigin origin) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.BinaryWriter.Seek(System.Int32,System.IO.SeekOrigin)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Seek (offset As Integer, origin As SeekOrigin) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual long Seek(int offset, System::IO::SeekOrigin origin);" />
      <MemberSignature Language="F#" Value="abstract member Seek : int * System.IO.SeekOrigin -&gt; int64&#xA;override this.Seek : int * System.IO.SeekOrigin -&gt; int64" Usage="binaryWriter.Seek (offset, origin)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="origin" Type="System.IO.SeekOrigin" />
      </Parameters>
      <Docs>
        <param name="offset"><span data-ttu-id="f865c-197">相对于 <paramref name="origin" /> 的字节偏移量。</span><span class="sxs-lookup"><span data-stu-id="f865c-197">A byte offset relative to <paramref name="origin" />.</span></span></param>
        <param name="origin"><span data-ttu-id="f865c-198"><see cref="T:System.IO.SeekOrigin" /> 的一个字段，指示获取新位置所依据的参考点。</span><span class="sxs-lookup"><span data-stu-id="f865c-198">A field of <see cref="T:System.IO.SeekOrigin" /> indicating the reference point from which the new position is to be obtained.</span></span></param>
        <summary><span data-ttu-id="f865c-199">设置当前流中的位置。</span><span class="sxs-lookup"><span data-stu-id="f865c-199">Sets the position within the current stream.</span></span></summary>
        <returns><span data-ttu-id="f865c-200">包含当前流的位置。</span><span class="sxs-lookup"><span data-stu-id="f865c-200">The position with the current stream.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f865c-201">有关常见 i/o 任务的列表，请参阅[常见 I/o 任务](/dotnet/standard/io/common-i-o-tasks)。</span><span class="sxs-lookup"><span data-stu-id="f865c-201">For a list of common I/O tasks, see [Common I/O Tasks](/dotnet/standard/io/common-i-o-tasks).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f865c-202">下面的示例将一系列字节值写入文件。</span><span class="sxs-lookup"><span data-stu-id="f865c-202">The following example writes a series of byte values to a file.</span></span> <span data-ttu-id="f865c-203">该示例使用 <xref:System.IO.BinaryWriter.Seek%2A> 移动到文件中的各个位置，然后使用 <xref:System.IO.BinaryWriter.Write%2A> 方法写入标记字节。</span><span class="sxs-lookup"><span data-stu-id="f865c-203">The example uses <xref:System.IO.BinaryWriter.Seek%2A> to move to various locations in the file, and then writes marker bytes by using the <xref:System.IO.BinaryWriter.Write%2A> method.</span></span>  
  
 [!code-cpp[System.IO.BinaryReaderWriter#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter/CPP/source3.cpp#5)]
 [!code-csharp[System.IO.BinaryReaderWriter#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter/CS/source3.cs#5)]
 [!code-vb[System.IO.BinaryReaderWriter#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter/VB/source3.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f865c-204">文件指针被移到无效位置。</span><span class="sxs-lookup"><span data-stu-id="f865c-204">The file pointer was moved to an invalid location.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f865c-205"><see cref="T:System.IO.SeekOrigin" /> 值无效。</span><span class="sxs-lookup"><span data-stu-id="f865c-205">The <see cref="T:System.IO.SeekOrigin" /> value is invalid.</span></span></exception>
        <related type="Article" href="/dotnet/standard/io/"><span data-ttu-id="f865c-206">文件和流 I/O</span><span class="sxs-lookup"><span data-stu-id="f865c-206">File and Stream I/O</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file"><span data-ttu-id="f865c-207">如何：从文件读取文本</span><span class="sxs-lookup"><span data-stu-id="f865c-207">How to: Read Text from a File</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file"><span data-ttu-id="f865c-208">如何：向文件写入文本</span><span class="sxs-lookup"><span data-stu-id="f865c-208">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="System.IDisposable.Dispose">
      <MemberSignature Language="C#" Value="void IDisposable.Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.IDisposable.Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.BinaryWriter.System#IDisposable#Dispose" />
      <MemberSignature Language="VB.NET" Value="Sub Dispose () Implements IDisposable.Dispose" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.IDisposable.Dispose() = IDisposable::Dispose;" />
      <MemberSignature Language="F#" Value="abstract member System.IDisposable.Dispose : unit -&gt; unit&#xA;override this.System.IDisposable.Dispose : unit -&gt; unit" Usage="binaryWriter.System.IDisposable.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f865c-209">释放 <see cref="T:System.IO.BinaryWriter" /> 使用的非托管资源，并选择性地释放托管资源。</span><span class="sxs-lookup"><span data-stu-id="f865c-209">Releases the unmanaged resources used by the <see cref="T:System.IO.BinaryWriter" /> and optionally releases the managed resources.</span></span></summary>
        <remarks>To be added.</remarks>
        <related type="Article" href="/dotnet/standard/io/"><span data-ttu-id="f865c-210">文件和流 I/O</span><span class="sxs-lookup"><span data-stu-id="f865c-210">File and Stream I/O</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file"><span data-ttu-id="f865c-211">如何：从文件读取文本</span><span class="sxs-lookup"><span data-stu-id="f865c-211">How to: Read Text from a File</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file"><span data-ttu-id="f865c-212">如何：向文件写入文本</span><span class="sxs-lookup"><span data-stu-id="f865c-212">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Write">
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="f865c-213">将值写入当前流。</span><span class="sxs-lookup"><span data-stu-id="f865c-213">Writes a value to the current stream.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public virtual void Write (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Write(bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.BinaryWriter.Write(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Write (value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Write(bool value);" />
      <MemberSignature Language="F#" Value="abstract member Write : bool -&gt; unit&#xA;override this.Write : bool -&gt; unit" Usage="binaryWriter.Write value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="f865c-214">要写入的 <see langword="Boolean" /> 值（0 或 1）。</span><span class="sxs-lookup"><span data-stu-id="f865c-214">The <see langword="Boolean" /> value to write (0 or 1).</span></span></param>
        <summary><span data-ttu-id="f865c-215">将单字节 <see langword="Boolean" /> 值写入当前流，其中 0 表示 <see langword="false" />，1 表示 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="f865c-215">Writes a one-byte <see langword="Boolean" /> value to the current stream, with 0 representing <see langword="false" /> and 1 representing <see langword="true" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f865c-216">有关常见 i/o 任务的列表，请参阅[常见 I/o 任务](/dotnet/standard/io/common-i-o-tasks)。</span><span class="sxs-lookup"><span data-stu-id="f865c-216">For a list of common I/O tasks, see [Common I/O Tasks](/dotnet/standard/io/common-i-o-tasks).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f865c-217">下面的代码示例演示如何在文件中存储和检索应用程序设置。</span><span class="sxs-lookup"><span data-stu-id="f865c-217">The following code example demonstrates how to store and retrieve application settings in a file.</span></span>  
  
 [!code-csharp[System.IO.BinaryReaderWriter#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter/CS/source.cs#1)]
 [!code-vb[System.IO.BinaryReaderWriter#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f865c-218">出现 I/O 错误。</span><span class="sxs-lookup"><span data-stu-id="f865c-218">An I/O error occurs.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="f865c-219">流已关闭。</span><span class="sxs-lookup"><span data-stu-id="f865c-219">The stream is closed.</span></span></exception>
        <related type="Article" href="/dotnet/standard/io/"><span data-ttu-id="f865c-220">文件和流 I/O</span><span class="sxs-lookup"><span data-stu-id="f865c-220">File and Stream I/O</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file"><span data-ttu-id="f865c-221">如何：从文件读取文本</span><span class="sxs-lookup"><span data-stu-id="f865c-221">How to: Read Text from a File</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file"><span data-ttu-id="f865c-222">如何：向文件写入文本</span><span class="sxs-lookup"><span data-stu-id="f865c-222">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public virtual void Write (byte value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Write(unsigned int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.BinaryWriter.Write(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Write (value As Byte)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Write(System::Byte value);" />
      <MemberSignature Language="F#" Value="abstract member Write : byte -&gt; unit&#xA;override this.Write : byte -&gt; unit" Usage="binaryWriter.Write value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="f865c-223">要写入的无符号字节。</span><span class="sxs-lookup"><span data-stu-id="f865c-223">The unsigned byte to write.</span></span></param>
        <summary><span data-ttu-id="f865c-224">将一个无符号字节写入当前流，并将流的位置提升 1 个字节。</span><span class="sxs-lookup"><span data-stu-id="f865c-224">Writes an unsigned byte to the current stream and advances the stream position by one byte.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f865c-225">由于存在数据格式冲突，因此不建议将此方法用于以下编码：</span><span class="sxs-lookup"><span data-stu-id="f865c-225">Because of data formatting conflicts, using this method with the following encodings is not recommended:</span></span>  
  
-   <span data-ttu-id="f865c-226">UTF-7</span><span class="sxs-lookup"><span data-stu-id="f865c-226">UTF-7</span></span>  
  
-   <span data-ttu-id="f865c-227">ISO-2022-JP</span><span class="sxs-lookup"><span data-stu-id="f865c-227">ISO-2022-JP</span></span>  
  
-   <span data-ttu-id="f865c-228">ISCII</span><span class="sxs-lookup"><span data-stu-id="f865c-228">ISCII</span></span>  
  
 <span data-ttu-id="f865c-229">有关常见 i/o 任务的列表，请参阅[常见 I/o 任务](/dotnet/standard/io/common-i-o-tasks)。</span><span class="sxs-lookup"><span data-stu-id="f865c-229">For a list of common I/O tasks, see [Common I/O Tasks](/dotnet/standard/io/common-i-o-tasks).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f865c-230">下面的代码示例演示如何使用内存作为后备存储来编写二进制数据，然后验证是否已正确写入数据。</span><span class="sxs-lookup"><span data-stu-id="f865c-230">The following code example shows how to write binary data using memory as a backing store, and then verify that the data was written correctly.</span></span>  
  
 [!code-cpp[System.IO.BinaryReaderWriter.RWByte#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter.RWByte/CPP/rwbyte.cpp#1)]
 [!code-csharp[System.IO.BinaryReaderWriter.RWByte#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter.RWByte/CS/rwbyte.cs#1)]
 [!code-vb[System.IO.BinaryReaderWriter.RWByte#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter.RWByte/VB/rwbyte.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f865c-231">出现 I/O 错误。</span><span class="sxs-lookup"><span data-stu-id="f865c-231">An I/O error occurs.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="f865c-232">流已关闭。</span><span class="sxs-lookup"><span data-stu-id="f865c-232">The stream is closed.</span></span></exception>
        <related type="Article" href="/dotnet/standard/io/"><span data-ttu-id="f865c-233">文件和流 I/O</span><span class="sxs-lookup"><span data-stu-id="f865c-233">File and Stream I/O</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file"><span data-ttu-id="f865c-234">如何：从文件读取文本</span><span class="sxs-lookup"><span data-stu-id="f865c-234">How to: Read Text from a File</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file"><span data-ttu-id="f865c-235">如何：向文件写入文本</span><span class="sxs-lookup"><span data-stu-id="f865c-235">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public virtual void Write (byte[] buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Write(unsigned int8[] buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.BinaryWriter.Write(System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Write (buffer As Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Write(cli::array &lt;System::Byte&gt; ^ buffer);" />
      <MemberSignature Language="F#" Value="abstract member Write : byte[] -&gt; unit&#xA;override this.Write : byte[] -&gt; unit" Usage="binaryWriter.Write buffer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="buffer"><span data-ttu-id="f865c-236">包含要写入的数据的字节数组。</span><span class="sxs-lookup"><span data-stu-id="f865c-236">A byte array containing the data to write.</span></span></param>
        <summary><span data-ttu-id="f865c-237">将字节数组写入基础流。</span><span class="sxs-lookup"><span data-stu-id="f865c-237">Writes a byte array to the underlying stream.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f865c-238">有关常见 i/o 任务的列表，请参阅[常见 I/o 任务](/dotnet/standard/io/common-i-o-tasks)。</span><span class="sxs-lookup"><span data-stu-id="f865c-238">For a list of common I/O tasks, see [Common I/O Tasks](/dotnet/standard/io/common-i-o-tasks).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f865c-239">下面的代码示例演示如何使用内存作为后备存储来编写二进制数据，然后验证是否已正确写入数据。</span><span class="sxs-lookup"><span data-stu-id="f865c-239">The following code example shows how to write binary data using memory as a backing store, and then verify that the data was written correctly.</span></span>  
  
 [!code-cpp[System.IO.BinaryReaderWriter.RWBytes1#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter.RWBytes1/CPP/rwbytes.cpp#1)]
 [!code-csharp[System.IO.BinaryReaderWriter.RWBytes1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter.RWBytes1/CS/rwbytes.cs#1)]
 [!code-vb[System.IO.BinaryReaderWriter.RWBytes1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter.RWBytes1/VB/rwbytes.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f865c-240">出现 I/O 错误。</span><span class="sxs-lookup"><span data-stu-id="f865c-240">An I/O error occurs.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="f865c-241">流已关闭。</span><span class="sxs-lookup"><span data-stu-id="f865c-241">The stream is closed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f865c-242"><paramref name="buffer" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="f865c-242"><paramref name="buffer" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="/dotnet/standard/io/"><span data-ttu-id="f865c-243">文件和流 I/O</span><span class="sxs-lookup"><span data-stu-id="f865c-243">File and Stream I/O</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file"><span data-ttu-id="f865c-244">如何：从文件读取文本</span><span class="sxs-lookup"><span data-stu-id="f865c-244">How to: Read Text from a File</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file"><span data-ttu-id="f865c-245">如何：向文件写入文本</span><span class="sxs-lookup"><span data-stu-id="f865c-245">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public virtual void Write (char ch);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Write(char ch) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.BinaryWriter.Write(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Write (ch As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Write(char ch);" />
      <MemberSignature Language="F#" Value="abstract member Write : char -&gt; unit&#xA;override this.Write : char -&gt; unit" Usage="binaryWriter.Write ch" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ch" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="ch"><span data-ttu-id="f865c-246">要写入的非代理项 Unicode 字符。</span><span class="sxs-lookup"><span data-stu-id="f865c-246">The non-surrogate, Unicode character to write.</span></span></param>
        <summary><span data-ttu-id="f865c-247">将 Unicode 字符写入当前流，并根据所使用的 <see langword="Encoding" /> 和向流中写入的特定字符，提升流的当前位置。</span><span class="sxs-lookup"><span data-stu-id="f865c-247">Writes a Unicode character to the current stream and advances the current position of the stream in accordance with the <see langword="Encoding" /> used and the specific characters being written to the stream.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f865c-248">由于存在数据格式冲突，因此不建议将此方法用于以下编码：</span><span class="sxs-lookup"><span data-stu-id="f865c-248">Because of data formatting conflicts, using this method with the following encodings is not recommended:</span></span>  
  
-   <span data-ttu-id="f865c-249">UTF-7</span><span class="sxs-lookup"><span data-stu-id="f865c-249">UTF-7</span></span>  
  
-   <span data-ttu-id="f865c-250">ISO-2022-JP</span><span class="sxs-lookup"><span data-stu-id="f865c-250">ISO-2022-JP</span></span>  
  
-   <span data-ttu-id="f865c-251">ISCII</span><span class="sxs-lookup"><span data-stu-id="f865c-251">ISCII</span></span>  
  
 <span data-ttu-id="f865c-252">有关常见 i/o 任务的列表，请参阅[常见 I/o 任务](/dotnet/standard/io/common-i-o-tasks)。</span><span class="sxs-lookup"><span data-stu-id="f865c-252">For a list of common I/O tasks, see [Common I/O Tasks](/dotnet/standard/io/common-i-o-tasks).</span></span>  
  
 <span data-ttu-id="f865c-253">Unicode 代理项字符必须在同一调用中同时写出，而不是单独写出。</span><span class="sxs-lookup"><span data-stu-id="f865c-253">Unicode surrogate characters must be written out as pairs together in the same call, not individually.</span></span> <span data-ttu-id="f865c-254">如果在应用程序中需要对代理项对的支持，请考虑使用字符数组和 <xref:System.IO.BinaryWriter.Write%2A> 方法重载。</span><span class="sxs-lookup"><span data-stu-id="f865c-254">If you require support for surrogate pairs in your application, consider using a character array and the <xref:System.IO.BinaryWriter.Write%2A> method overload.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f865c-255">下面的代码示例演示如何使用内存作为后备存储来读取和写入数据。</span><span class="sxs-lookup"><span data-stu-id="f865c-255">The following code example shows how to read and write data using memory as a backing store.</span></span>  
  
 [!code-cpp[System.IO.BinaryReaderWriter.RWChar1#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter.RWChar1/CPP/rwchar.cpp#1)]
 [!code-csharp[System.IO.BinaryReaderWriter.RWChar1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter.RWChar1/CS/rwchar.cs#1)]
 [!code-vb[System.IO.BinaryReaderWriter.RWChar1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter.RWChar1/VB/rwchar.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f865c-256">出现 I/O 错误。</span><span class="sxs-lookup"><span data-stu-id="f865c-256">An I/O error occurs.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="f865c-257">流已关闭。</span><span class="sxs-lookup"><span data-stu-id="f865c-257">The stream is closed.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f865c-258"><paramref name="ch" /> 是单一代理项字符。</span><span class="sxs-lookup"><span data-stu-id="f865c-258"><paramref name="ch" /> is a single surrogate character.</span></span></exception>
        <altmember cref="T:System.Text.Encoding" />
        <related type="Article" href="/dotnet/standard/io/"><span data-ttu-id="f865c-259">文件和流 I/O</span><span class="sxs-lookup"><span data-stu-id="f865c-259">File and Stream I/O</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file"><span data-ttu-id="f865c-260">如何：从文件读取文本</span><span class="sxs-lookup"><span data-stu-id="f865c-260">How to: Read Text from a File</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file"><span data-ttu-id="f865c-261">如何：向文件写入文本</span><span class="sxs-lookup"><span data-stu-id="f865c-261">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public virtual void Write (char[] chars);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Write(char[] chars) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.BinaryWriter.Write(System.Char[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Write (chars As Char())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Write(cli::array &lt;char&gt; ^ chars);" />
      <MemberSignature Language="F#" Value="abstract member Write : char[] -&gt; unit&#xA;override this.Write : char[] -&gt; unit" Usage="binaryWriter.Write chars" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.Char[]" />
      </Parameters>
      <Docs>
        <param name="chars"><span data-ttu-id="f865c-262">包含要写入的数据的字符数组。</span><span class="sxs-lookup"><span data-stu-id="f865c-262">A character array containing the data to write.</span></span></param>
        <summary><span data-ttu-id="f865c-263">将字符数组写入当前流，并根据所使用的 <see langword="Encoding" /> 和向流中写入的特定字符，提升流的当前位置。</span><span class="sxs-lookup"><span data-stu-id="f865c-263">Writes a character array to the current stream and advances the current position of the stream in accordance with the <see langword="Encoding" /> used and the specific characters being written to the stream.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f865c-264">下表列出了其他典型或相关 i/o 任务的示例。</span><span class="sxs-lookup"><span data-stu-id="f865c-264">The following table lists examples of other typical or related I/O tasks.</span></span>  
  
|<span data-ttu-id="f865c-265">为此，请执行以下操作...</span><span class="sxs-lookup"><span data-stu-id="f865c-265">To do this...</span></span>|<span data-ttu-id="f865c-266">请参见本主题中的示例...</span><span class="sxs-lookup"><span data-stu-id="f865c-266">See the example in this topic...</span></span>|  
|-------------------|--------------------------------------|  
|<span data-ttu-id="f865c-267">创建文本文件。</span><span class="sxs-lookup"><span data-stu-id="f865c-267">Create a text file.</span></span>|[<span data-ttu-id="f865c-268">如何：向文件写入文本</span><span class="sxs-lookup"><span data-stu-id="f865c-268">How to: Write Text to a File</span></span>](/dotnet/standard/io/how-to-write-text-to-a-file)|  
|<span data-ttu-id="f865c-269">写入文本文件。</span><span class="sxs-lookup"><span data-stu-id="f865c-269">Write to a text file.</span></span>|[<span data-ttu-id="f865c-270">如何：向文件写入文本</span><span class="sxs-lookup"><span data-stu-id="f865c-270">How to: Write Text to a File</span></span>](/dotnet/standard/io/how-to-write-text-to-a-file)|  
|<span data-ttu-id="f865c-271">读取文本文件。</span><span class="sxs-lookup"><span data-stu-id="f865c-271">Read from a text file.</span></span>|[<span data-ttu-id="f865c-272">如何：从文件读取文本</span><span class="sxs-lookup"><span data-stu-id="f865c-272">How to: Read Text from a File</span></span>](/dotnet/standard/io/how-to-read-text-from-a-file)|  
|<span data-ttu-id="f865c-273">向文件追加文本。</span><span class="sxs-lookup"><span data-stu-id="f865c-273">Append text to a file.</span></span>|[<span data-ttu-id="f865c-274">如何：打开并追加到日志文件</span><span class="sxs-lookup"><span data-stu-id="f865c-274">How to: Open and Append to a Log File</span></span>](/dotnet/standard/io/how-to-open-and-append-to-a-log-file)<br /><br /> <xref:System.IO.File.AppendText%2A?displayProperty=nameWithType><br /><br /> <xref:System.IO.FileInfo.AppendText%2A?displayProperty=nameWithType>|  
|<span data-ttu-id="f865c-275">获取文件的大小。</span><span class="sxs-lookup"><span data-stu-id="f865c-275">Get the size of a file.</span></span>|<xref:System.IO.FileInfo.Length%2A?displayProperty=nameWithType>|  
|<span data-ttu-id="f865c-276">获取文件的属性。</span><span class="sxs-lookup"><span data-stu-id="f865c-276">Get the attributes of a file.</span></span>|<xref:System.IO.File.GetAttributes%2A?displayProperty=nameWithType>|  
|<span data-ttu-id="f865c-277">设置文件的属性。</span><span class="sxs-lookup"><span data-stu-id="f865c-277">Set the attributes of a file.</span></span>|<xref:System.IO.File.SetAttributes%2A?displayProperty=nameWithType>|  
|<span data-ttu-id="f865c-278">确定文件是否存在。</span><span class="sxs-lookup"><span data-stu-id="f865c-278">Determine if a file exists.</span></span>|<xref:System.IO.File.Exists%2A?displayProperty=nameWithType>|  
|<span data-ttu-id="f865c-279">从二进制文件中读取。</span><span class="sxs-lookup"><span data-stu-id="f865c-279">Read from a binary file.</span></span>|[<span data-ttu-id="f865c-280">如何：对新建的数据文件进行读取和写入</span><span class="sxs-lookup"><span data-stu-id="f865c-280">How to: Read and Write to a Newly Created Data File</span></span>](/dotnet/standard/io/how-to-read-and-write-to-a-newly-created-data-file)|  
|<span data-ttu-id="f865c-281">写入二进制文件。</span><span class="sxs-lookup"><span data-stu-id="f865c-281">Write to a binary file.</span></span>|[<span data-ttu-id="f865c-282">如何：对新建的数据文件进行读取和写入</span><span class="sxs-lookup"><span data-stu-id="f865c-282">How to: Read and Write to a Newly Created Data File</span></span>](/dotnet/standard/io/how-to-read-and-write-to-a-newly-created-data-file)|  
  
   
  
## Examples  
 <span data-ttu-id="f865c-283">下面的代码示例演示如何使用内存作为后备存储来读取和写入数据。</span><span class="sxs-lookup"><span data-stu-id="f865c-283">The following code example shows how to read and write data using memory as a backing store.</span></span>  
  
 [!code-cpp[System.IO.BinaryReaderWriter.RWChars1#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter.RWChars1/CPP/rwchars.cpp#1)]
 [!code-csharp[System.IO.BinaryReaderWriter.RWChars1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter.RWChars1/CS/rwchars.cs#1)]
 [!code-vb[System.IO.BinaryReaderWriter.RWChars1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter.RWChars1/VB/rwchars.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f865c-284"><paramref name="chars" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="f865c-284"><paramref name="chars" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="f865c-285">流已关闭。</span><span class="sxs-lookup"><span data-stu-id="f865c-285">The stream is closed.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f865c-286">出现 I/O 错误。</span><span class="sxs-lookup"><span data-stu-id="f865c-286">An I/O error occurs.</span></span></exception>
        <altmember cref="T:System.Text.Encoding" />
        <related type="Article" href="/dotnet/standard/io/"><span data-ttu-id="f865c-287">文件和流 I/O</span><span class="sxs-lookup"><span data-stu-id="f865c-287">File and Stream I/O</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file"><span data-ttu-id="f865c-288">如何：从文件读取文本</span><span class="sxs-lookup"><span data-stu-id="f865c-288">How to: Read Text from a File</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file"><span data-ttu-id="f865c-289">如何：向文件写入文本</span><span class="sxs-lookup"><span data-stu-id="f865c-289">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public virtual void Write (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Write(valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.BinaryWriter.Write(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Write (value As Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Write(System::Decimal value);" />
      <MemberSignature Language="F#" Value="abstract member Write : decimal -&gt; unit&#xA;override this.Write : decimal -&gt; unit" Usage="binaryWriter.Write value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="f865c-290">要写入的十进制值。</span><span class="sxs-lookup"><span data-stu-id="f865c-290">The decimal value to write.</span></span></param>
        <summary><span data-ttu-id="f865c-291">将一个十进制值写入当前流，并将流位置提升十六个字节。</span><span class="sxs-lookup"><span data-stu-id="f865c-291">Writes a decimal value to the current stream and advances the stream position by sixteen bytes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f865c-292">下表列出了其他典型或相关 i/o 任务的示例。</span><span class="sxs-lookup"><span data-stu-id="f865c-292">The following table lists examples of other typical or related I/O tasks.</span></span>  
  
|<span data-ttu-id="f865c-293">为此，请执行以下操作...</span><span class="sxs-lookup"><span data-stu-id="f865c-293">To do this...</span></span>|<span data-ttu-id="f865c-294">请参见本主题中的示例...</span><span class="sxs-lookup"><span data-stu-id="f865c-294">See the example in this topic...</span></span>|  
|-------------------|--------------------------------------|  
|<span data-ttu-id="f865c-295">创建文本文件。</span><span class="sxs-lookup"><span data-stu-id="f865c-295">Create a text file.</span></span>|[<span data-ttu-id="f865c-296">如何：向文件写入文本</span><span class="sxs-lookup"><span data-stu-id="f865c-296">How to: Write Text to a File</span></span>](/dotnet/standard/io/how-to-write-text-to-a-file)|  
|<span data-ttu-id="f865c-297">写入文本文件。</span><span class="sxs-lookup"><span data-stu-id="f865c-297">Write to a text file.</span></span>|[<span data-ttu-id="f865c-298">如何：向文件写入文本</span><span class="sxs-lookup"><span data-stu-id="f865c-298">How to: Write Text to a File</span></span>](/dotnet/standard/io/how-to-write-text-to-a-file)|  
|<span data-ttu-id="f865c-299">读取文本文件。</span><span class="sxs-lookup"><span data-stu-id="f865c-299">Read from a text file.</span></span>|[<span data-ttu-id="f865c-300">如何：从文件读取文本</span><span class="sxs-lookup"><span data-stu-id="f865c-300">How to: Read Text from a File</span></span>](/dotnet/standard/io/how-to-read-text-from-a-file)|  
|<span data-ttu-id="f865c-301">向文件追加文本。</span><span class="sxs-lookup"><span data-stu-id="f865c-301">Append text to a file.</span></span>|[<span data-ttu-id="f865c-302">如何：打开并追加到日志文件</span><span class="sxs-lookup"><span data-stu-id="f865c-302">How to: Open and Append to a Log File</span></span>](/dotnet/standard/io/how-to-open-and-append-to-a-log-file)<br /><br /> <xref:System.IO.File.AppendText%2A?displayProperty=nameWithType><br /><br /> <xref:System.IO.FileInfo.AppendText%2A?displayProperty=nameWithType>|  
|<span data-ttu-id="f865c-303">获取文件的大小。</span><span class="sxs-lookup"><span data-stu-id="f865c-303">Get the size of a file.</span></span>|<xref:System.IO.FileInfo.Length%2A?displayProperty=nameWithType>|  
|<span data-ttu-id="f865c-304">获取文件的属性。</span><span class="sxs-lookup"><span data-stu-id="f865c-304">Get the attributes of a file.</span></span>|<xref:System.IO.File.GetAttributes%2A?displayProperty=nameWithType>|  
|<span data-ttu-id="f865c-305">设置文件的属性。</span><span class="sxs-lookup"><span data-stu-id="f865c-305">Set the attributes of a file.</span></span>|<xref:System.IO.File.SetAttributes%2A?displayProperty=nameWithType>|  
|<span data-ttu-id="f865c-306">确定文件是否存在。</span><span class="sxs-lookup"><span data-stu-id="f865c-306">Determine if a file exists.</span></span>|<xref:System.IO.File.Exists%2A?displayProperty=nameWithType>|  
|<span data-ttu-id="f865c-307">从二进制文件中读取。</span><span class="sxs-lookup"><span data-stu-id="f865c-307">Read from a binary file.</span></span>|[<span data-ttu-id="f865c-308">如何：对新建的数据文件进行读取和写入</span><span class="sxs-lookup"><span data-stu-id="f865c-308">How to: Read and Write to a Newly Created Data File</span></span>](/dotnet/standard/io/how-to-read-and-write-to-a-newly-created-data-file)|  
|<span data-ttu-id="f865c-309">写入二进制文件。</span><span class="sxs-lookup"><span data-stu-id="f865c-309">Write to a binary file.</span></span>|[<span data-ttu-id="f865c-310">如何：对新建的数据文件进行读取和写入</span><span class="sxs-lookup"><span data-stu-id="f865c-310">How to: Read and Write to a Newly Created Data File</span></span>](/dotnet/standard/io/how-to-read-and-write-to-a-newly-created-data-file)|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f865c-311">出现 I/O 错误。</span><span class="sxs-lookup"><span data-stu-id="f865c-311">An I/O error occurs.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="f865c-312">流已关闭。</span><span class="sxs-lookup"><span data-stu-id="f865c-312">The stream is closed.</span></span></exception>
        <related type="Article" href="/dotnet/standard/io/"><span data-ttu-id="f865c-313">文件和流 I/O</span><span class="sxs-lookup"><span data-stu-id="f865c-313">File and Stream I/O</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file"><span data-ttu-id="f865c-314">如何：从文件读取文本</span><span class="sxs-lookup"><span data-stu-id="f865c-314">How to: Read Text from a File</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file"><span data-ttu-id="f865c-315">如何：向文件写入文本</span><span class="sxs-lookup"><span data-stu-id="f865c-315">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public virtual void Write (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Write(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.BinaryWriter.Write(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Write (value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Write(double value);" />
      <MemberSignature Language="F#" Value="abstract member Write : double -&gt; unit&#xA;override this.Write : double -&gt; unit" Usage="binaryWriter.Write value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="f865c-316">要写入的 8 字节浮点值。</span><span class="sxs-lookup"><span data-stu-id="f865c-316">The eight-byte floating-point value to write.</span></span></param>
        <summary><span data-ttu-id="f865c-317">将 8 字节浮点值写入当前流，并将流的位置提升 8 个字节。</span><span class="sxs-lookup"><span data-stu-id="f865c-317">Writes an eight-byte floating-point value to the current stream and advances the stream position by eight bytes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f865c-318">有关常见 i/o 任务的列表，请参阅[常见 I/o 任务](/dotnet/standard/io/common-i-o-tasks)。</span><span class="sxs-lookup"><span data-stu-id="f865c-318">For a list of common I/O tasks, see [Common I/O Tasks](/dotnet/standard/io/common-i-o-tasks).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f865c-319">下面的代码示例演示如何使用 <xref:System.IO.MemoryStream> 类顶部 <xref:System.IO.BinaryReader> 和 `BinaryWriter` 类，在内存中读取和写入 `Double` 数据。</span><span class="sxs-lookup"><span data-stu-id="f865c-319">The following code example shows how to read and write `Double` data to memory by using the <xref:System.IO.BinaryReader> and `BinaryWriter` classes on top of the <xref:System.IO.MemoryStream> class.</span></span> <span data-ttu-id="f865c-320">仅 `MemoryStream` 读取和写入 `Byte` 的数据。</span><span class="sxs-lookup"><span data-stu-id="f865c-320">`MemoryStream` only reads and writes `Byte` data.</span></span>  
  
 [!code-cpp[System.IO.BinaryReaderWriter.RWDouble#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter.RWDouble/CPP/rwdouble.cpp#1)]
 [!code-csharp[System.IO.BinaryReaderWriter.RWDouble#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter.RWDouble/CS/rwdouble.cs#1)]
 [!code-vb[System.IO.BinaryReaderWriter.RWDouble#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter.RWDouble/VB/rwdouble.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f865c-321">出现 I/O 错误。</span><span class="sxs-lookup"><span data-stu-id="f865c-321">An I/O error occurs.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="f865c-322">流已关闭。</span><span class="sxs-lookup"><span data-stu-id="f865c-322">The stream is closed.</span></span></exception>
        <related type="Article" href="/dotnet/standard/io/"><span data-ttu-id="f865c-323">文件和流 I/O</span><span class="sxs-lookup"><span data-stu-id="f865c-323">File and Stream I/O</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file"><span data-ttu-id="f865c-324">如何：从文件读取文本</span><span class="sxs-lookup"><span data-stu-id="f865c-324">How to: Read Text from a File</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file"><span data-ttu-id="f865c-325">如何：向文件写入文本</span><span class="sxs-lookup"><span data-stu-id="f865c-325">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public virtual void Write (short value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Write(int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.BinaryWriter.Write(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Write (value As Short)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Write(short value);" />
      <MemberSignature Language="F#" Value="abstract member Write : int16 -&gt; unit&#xA;override this.Write : int16 -&gt; unit" Usage="binaryWriter.Write value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="f865c-326">要写入的 2 字节带符号整数。</span><span class="sxs-lookup"><span data-stu-id="f865c-326">The two-byte signed integer to write.</span></span></param>
        <summary><span data-ttu-id="f865c-327">将 2 字节带符号整数写入当前流，并将流的位置提升 2 个字节。</span><span class="sxs-lookup"><span data-stu-id="f865c-327">Writes a two-byte signed integer to the current stream and advances the stream position by two bytes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f865c-328">`BinaryWriter` 以 little endian 格式存储该数据类型。</span><span class="sxs-lookup"><span data-stu-id="f865c-328">`BinaryWriter` stores this data type in little endian format.</span></span>  
  
 <span data-ttu-id="f865c-329">下表列出了其他典型或相关 i/o 任务的示例。</span><span class="sxs-lookup"><span data-stu-id="f865c-329">The following table lists examples of other typical or related I/O tasks.</span></span>  
  
|<span data-ttu-id="f865c-330">为此，请执行以下操作...</span><span class="sxs-lookup"><span data-stu-id="f865c-330">To do this...</span></span>|<span data-ttu-id="f865c-331">请参见本主题中的示例...</span><span class="sxs-lookup"><span data-stu-id="f865c-331">See the example in this topic...</span></span>|  
|-------------------|--------------------------------------|  
|<span data-ttu-id="f865c-332">创建文本文件。</span><span class="sxs-lookup"><span data-stu-id="f865c-332">Create a text file.</span></span>|[<span data-ttu-id="f865c-333">如何：向文件写入文本</span><span class="sxs-lookup"><span data-stu-id="f865c-333">How to: Write Text to a File</span></span>](/dotnet/standard/io/how-to-write-text-to-a-file)|  
|<span data-ttu-id="f865c-334">写入文本文件。</span><span class="sxs-lookup"><span data-stu-id="f865c-334">Write to a text file.</span></span>|[<span data-ttu-id="f865c-335">如何：向文件写入文本</span><span class="sxs-lookup"><span data-stu-id="f865c-335">How to: Write Text to a File</span></span>](/dotnet/standard/io/how-to-write-text-to-a-file)|  
|<span data-ttu-id="f865c-336">读取文本文件。</span><span class="sxs-lookup"><span data-stu-id="f865c-336">Read from a text file.</span></span>|[<span data-ttu-id="f865c-337">如何：从文件读取文本</span><span class="sxs-lookup"><span data-stu-id="f865c-337">How to: Read Text from a File</span></span>](/dotnet/standard/io/how-to-read-text-from-a-file)|  
|<span data-ttu-id="f865c-338">向文件追加文本。</span><span class="sxs-lookup"><span data-stu-id="f865c-338">Append text to a file.</span></span>|[<span data-ttu-id="f865c-339">如何：打开并追加到日志文件</span><span class="sxs-lookup"><span data-stu-id="f865c-339">How to: Open and Append to a Log File</span></span>](/dotnet/standard/io/how-to-open-and-append-to-a-log-file)<br /><br /> <xref:System.IO.File.AppendText%2A?displayProperty=nameWithType><br /><br /> <xref:System.IO.FileInfo.AppendText%2A?displayProperty=nameWithType>|  
|<span data-ttu-id="f865c-340">获取文件的大小。</span><span class="sxs-lookup"><span data-stu-id="f865c-340">Get the size of a file.</span></span>|<xref:System.IO.FileInfo.Length%2A?displayProperty=nameWithType>|  
|<span data-ttu-id="f865c-341">获取文件的属性。</span><span class="sxs-lookup"><span data-stu-id="f865c-341">Get the attributes of a file.</span></span>|<xref:System.IO.File.GetAttributes%2A?displayProperty=nameWithType>|  
|<span data-ttu-id="f865c-342">设置文件的属性。</span><span class="sxs-lookup"><span data-stu-id="f865c-342">Set the attributes of a file.</span></span>|<xref:System.IO.File.SetAttributes%2A?displayProperty=nameWithType>|  
|<span data-ttu-id="f865c-343">确定文件是否存在。</span><span class="sxs-lookup"><span data-stu-id="f865c-343">Determine if a file exists.</span></span>|<xref:System.IO.File.Exists%2A?displayProperty=nameWithType>|  
|<span data-ttu-id="f865c-344">从二进制文件中读取。</span><span class="sxs-lookup"><span data-stu-id="f865c-344">Read from a binary file.</span></span>|[<span data-ttu-id="f865c-345">如何：对新建的数据文件进行读取和写入</span><span class="sxs-lookup"><span data-stu-id="f865c-345">How to: Read and Write to a Newly Created Data File</span></span>](/dotnet/standard/io/how-to-read-and-write-to-a-newly-created-data-file)|  
|<span data-ttu-id="f865c-346">写入二进制文件。</span><span class="sxs-lookup"><span data-stu-id="f865c-346">Write to a binary file.</span></span>|[<span data-ttu-id="f865c-347">如何：对新建的数据文件进行读取和写入</span><span class="sxs-lookup"><span data-stu-id="f865c-347">How to: Read and Write to a Newly Created Data File</span></span>](/dotnet/standard/io/how-to-read-and-write-to-a-newly-created-data-file)|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f865c-348">出现 I/O 错误。</span><span class="sxs-lookup"><span data-stu-id="f865c-348">An I/O error occurs.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="f865c-349">流已关闭。</span><span class="sxs-lookup"><span data-stu-id="f865c-349">The stream is closed.</span></span></exception>
        <related type="Article" href="/dotnet/standard/io/"><span data-ttu-id="f865c-350">文件和流 I/O</span><span class="sxs-lookup"><span data-stu-id="f865c-350">File and Stream I/O</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file"><span data-ttu-id="f865c-351">如何：从文件读取文本</span><span class="sxs-lookup"><span data-stu-id="f865c-351">How to: Read Text from a File</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file"><span data-ttu-id="f865c-352">如何：向文件写入文本</span><span class="sxs-lookup"><span data-stu-id="f865c-352">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public virtual void Write (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Write(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.BinaryWriter.Write(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Write (value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Write(int value);" />
      <MemberSignature Language="F#" Value="abstract member Write : int -&gt; unit&#xA;override this.Write : int -&gt; unit" Usage="binaryWriter.Write value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="f865c-353">要写入的 4 字节带符号整数。</span><span class="sxs-lookup"><span data-stu-id="f865c-353">The four-byte signed integer to write.</span></span></param>
        <summary><span data-ttu-id="f865c-354">将 4 字节带符号整数写入当前流，并将流的位置提升 4 个字节。</span><span class="sxs-lookup"><span data-stu-id="f865c-354">Writes a four-byte signed integer to the current stream and advances the stream position by four bytes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f865c-355">`BinaryWriter` 以 little endian 格式存储该数据类型。</span><span class="sxs-lookup"><span data-stu-id="f865c-355">`BinaryWriter` stores this data type in little endian format.</span></span>  
  
 <span data-ttu-id="f865c-356">有关常见 i/o 任务的列表，请参阅[常见 I/o 任务](/dotnet/standard/io/common-i-o-tasks)。</span><span class="sxs-lookup"><span data-stu-id="f865c-356">For a list of common I/O tasks, see [Common I/O Tasks](/dotnet/standard/io/common-i-o-tasks).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f865c-357">下面的代码示例演示如何在文件中存储和检索应用程序设置。</span><span class="sxs-lookup"><span data-stu-id="f865c-357">The following code example demonstrates how to store and retrieve application settings in a file.</span></span>  
  
 [!code-csharp[System.IO.BinaryReaderWriter#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter/CS/source.cs#1)]
 [!code-vb[System.IO.BinaryReaderWriter#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f865c-358">出现 I/O 错误。</span><span class="sxs-lookup"><span data-stu-id="f865c-358">An I/O error occurs.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="f865c-359">流已关闭。</span><span class="sxs-lookup"><span data-stu-id="f865c-359">The stream is closed.</span></span></exception>
        <related type="Article" href="/dotnet/standard/io/"><span data-ttu-id="f865c-360">文件和流 I/O</span><span class="sxs-lookup"><span data-stu-id="f865c-360">File and Stream I/O</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file"><span data-ttu-id="f865c-361">如何：从文件读取文本</span><span class="sxs-lookup"><span data-stu-id="f865c-361">How to: Read Text from a File</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file"><span data-ttu-id="f865c-362">如何：向文件写入文本</span><span class="sxs-lookup"><span data-stu-id="f865c-362">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public virtual void Write (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Write(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.BinaryWriter.Write(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Write (value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Write(long value);" />
      <MemberSignature Language="F#" Value="abstract member Write : int64 -&gt; unit&#xA;override this.Write : int64 -&gt; unit" Usage="binaryWriter.Write value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="f865c-363">要写入的 8 字节带符号整数。</span><span class="sxs-lookup"><span data-stu-id="f865c-363">The eight-byte signed integer to write.</span></span></param>
        <summary><span data-ttu-id="f865c-364">将 8 字节带符号整数写入当前流，并将流的位置提升 8 个字节。</span><span class="sxs-lookup"><span data-stu-id="f865c-364">Writes an eight-byte signed integer to the current stream and advances the stream position by eight bytes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f865c-365">`BinaryWriter` 以 little endian 格式存储该数据类型。</span><span class="sxs-lookup"><span data-stu-id="f865c-365">`BinaryWriter` stores this data type in little endian format.</span></span>  
  
 <span data-ttu-id="f865c-366">有关常见 i/o 任务的列表，请参阅[常见 I/o 任务](/dotnet/standard/io/common-i-o-tasks)。</span><span class="sxs-lookup"><span data-stu-id="f865c-366">For a list of common I/O tasks, see [Common I/O Tasks](/dotnet/standard/io/common-i-o-tasks).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f865c-367">出现 I/O 错误。</span><span class="sxs-lookup"><span data-stu-id="f865c-367">An I/O error occurs.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="f865c-368">流已关闭。</span><span class="sxs-lookup"><span data-stu-id="f865c-368">The stream is closed.</span></span></exception>
        <related type="Article" href="/dotnet/standard/io/"><span data-ttu-id="f865c-369">文件和流 I/O</span><span class="sxs-lookup"><span data-stu-id="f865c-369">File and Stream I/O</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file"><span data-ttu-id="f865c-370">如何：从文件读取文本</span><span class="sxs-lookup"><span data-stu-id="f865c-370">How to: Read Text from a File</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file"><span data-ttu-id="f865c-371">如何：向文件写入文本</span><span class="sxs-lookup"><span data-stu-id="f865c-371">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public virtual void Write (ReadOnlySpan&lt;byte&gt; buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Write(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.BinaryWriter.Write(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Write (buffer As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Write(ReadOnlySpan&lt;System::Byte&gt; buffer);" />
      <MemberSignature Language="F#" Value="abstract member Write : ReadOnlySpan&lt;byte&gt; -&gt; unit&#xA;override this.Write : ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="binaryWriter.Write buffer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.ReadOnlySpan&lt;System.Byte&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="buffer"><span data-ttu-id="f865c-372">要写入的字节范围。</span><span class="sxs-lookup"><span data-stu-id="f865c-372">The span of bytes to write.</span></span></param>
        <summary><span data-ttu-id="f865c-373">将字节范围写入当前流。</span><span class="sxs-lookup"><span data-stu-id="f865c-373">Writes a span of bytes to the current stream.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public virtual void Write (ReadOnlySpan&lt;char&gt; chars);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Write(valuetype System.ReadOnlySpan`1&lt;char&gt; chars) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.BinaryWriter.Write(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Write (chars As ReadOnlySpan(Of Char))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Write(ReadOnlySpan&lt;char&gt; chars);" />
      <MemberSignature Language="F#" Value="abstract member Write : ReadOnlySpan&lt;char&gt; -&gt; unit&#xA;override this.Write : ReadOnlySpan&lt;char&gt; -&gt; unit" Usage="binaryWriter.Write chars" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="chars"><span data-ttu-id="f865c-374">要写入的一个字符范围。</span><span class="sxs-lookup"><span data-stu-id="f865c-374">A span of chars to write.</span></span></param>
        <summary><span data-ttu-id="f865c-375">将一段字符写入当前流，并根据所使用的 <see langword="Encoding" />（可能还根据向流中写入的特定字符），提升流的当前位置。</span><span class="sxs-lookup"><span data-stu-id="f865c-375">Writes a span of characters to the current stream, and advances the current position of the stream in accordance with the <see langword="Encoding" /> used and perhaps the specific characters being written to the stream.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public virtual void Write (sbyte value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Write(int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.BinaryWriter.Write(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Write (value As SByte)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Write(System::SByte value);" />
      <MemberSignature Language="F#" Value="abstract member Write : sbyte -&gt; unit&#xA;override this.Write : sbyte -&gt; unit" Usage="binaryWriter.Write value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="f865c-376">要写入的带符号字节。</span><span class="sxs-lookup"><span data-stu-id="f865c-376">The signed byte to write.</span></span></param>
        <summary><span data-ttu-id="f865c-377">将一个带符号字节写入当前流，并将流的位置提升 1 个字节。</span><span class="sxs-lookup"><span data-stu-id="f865c-377">Writes a signed byte to the current stream and advances the stream position by one byte.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f865c-378">有关常见 i/o 任务的列表，请参阅[常见 I/o 任务](/dotnet/standard/io/common-i-o-tasks)。</span><span class="sxs-lookup"><span data-stu-id="f865c-378">For a list of common I/O tasks, see [Common I/O Tasks](/dotnet/standard/io/common-i-o-tasks).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f865c-379">出现 I/O 错误。</span><span class="sxs-lookup"><span data-stu-id="f865c-379">An I/O error occurs.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="f865c-380">流已关闭。</span><span class="sxs-lookup"><span data-stu-id="f865c-380">The stream is closed.</span></span></exception>
        <related type="Article" href="/dotnet/standard/io/"><span data-ttu-id="f865c-381">文件和流 I/O</span><span class="sxs-lookup"><span data-stu-id="f865c-381">File and Stream I/O</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file"><span data-ttu-id="f865c-382">如何：从文件读取文本</span><span class="sxs-lookup"><span data-stu-id="f865c-382">How to: Read Text from a File</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file"><span data-ttu-id="f865c-383">如何：向文件写入文本</span><span class="sxs-lookup"><span data-stu-id="f865c-383">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public virtual void Write (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Write(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.BinaryWriter.Write(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Write (value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Write(float value);" />
      <MemberSignature Language="F#" Value="abstract member Write : single -&gt; unit&#xA;override this.Write : single -&gt; unit" Usage="binaryWriter.Write value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="f865c-384">要写入的 4 字节浮点值。</span><span class="sxs-lookup"><span data-stu-id="f865c-384">The four-byte floating-point value to write.</span></span></param>
        <summary><span data-ttu-id="f865c-385">将 4 字节浮点值写入当前流，并将流的位置提升 4 个字节。</span><span class="sxs-lookup"><span data-stu-id="f865c-385">Writes a four-byte floating-point value to the current stream and advances the stream position by four bytes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f865c-386">`BinaryWriter` 以 little endian 格式存储该数据类型。</span><span class="sxs-lookup"><span data-stu-id="f865c-386">`BinaryWriter` stores this data type in little endian format.</span></span>  
  
 <span data-ttu-id="f865c-387">有关常见 i/o 任务的列表，请参阅[常见 I/o 任务](/dotnet/standard/io/common-i-o-tasks)。</span><span class="sxs-lookup"><span data-stu-id="f865c-387">For a list of common I/O tasks, see [Common I/O Tasks](/dotnet/standard/io/common-i-o-tasks).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f865c-388">下面的代码示例演示如何在文件中存储和检索应用程序设置。</span><span class="sxs-lookup"><span data-stu-id="f865c-388">The following code example demonstrates how to store and retrieve application settings in a file.</span></span>  
  
 [!code-csharp[System.IO.BinaryReaderWriter#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter/CS/source.cs#1)]
 [!code-vb[System.IO.BinaryReaderWriter#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f865c-389">出现 I/O 错误。</span><span class="sxs-lookup"><span data-stu-id="f865c-389">An I/O error occurs.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="f865c-390">流已关闭。</span><span class="sxs-lookup"><span data-stu-id="f865c-390">The stream is closed.</span></span></exception>
        <related type="Article" href="/dotnet/standard/io/"><span data-ttu-id="f865c-391">文件和流 I/O</span><span class="sxs-lookup"><span data-stu-id="f865c-391">File and Stream I/O</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file"><span data-ttu-id="f865c-392">如何：从文件读取文本</span><span class="sxs-lookup"><span data-stu-id="f865c-392">How to: Read Text from a File</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file"><span data-ttu-id="f865c-393">如何：向文件写入文本</span><span class="sxs-lookup"><span data-stu-id="f865c-393">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public virtual void Write (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Write(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.BinaryWriter.Write(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Write (value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Write(System::String ^ value);" />
      <MemberSignature Language="F#" Value="abstract member Write : string -&gt; unit&#xA;override this.Write : string -&gt; unit" Usage="binaryWriter.Write value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="f865c-394">要写入的值。</span><span class="sxs-lookup"><span data-stu-id="f865c-394">The value to write.</span></span></param>
        <summary><span data-ttu-id="f865c-395">将有长度前缀的字符串按 <see cref="T:System.IO.BinaryWriter" /> 的当前编码写入此流，并根据所使用的编码和写入流的特定字符，提升流的当前位置。</span><span class="sxs-lookup"><span data-stu-id="f865c-395">Writes a length-prefixed string to this stream in the current encoding of the <see cref="T:System.IO.BinaryWriter" />, and advances the current position of the stream in accordance with the encoding used and the specific characters being written to the stream.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f865c-396">长度为前缀的意味着此方法首先写入字符串的长度（以字节为单位），同时用 <xref:System.IO.BinaryWriter> 实例的当前编码传输到流。</span><span class="sxs-lookup"><span data-stu-id="f865c-396">Length-prefixed means that this method first writes the length of the string, in bytes, when encoded with the <xref:System.IO.BinaryWriter> instance's current encoding to the stream.</span></span> <span data-ttu-id="f865c-397">此值以无符号整数形式写入。</span><span class="sxs-lookup"><span data-stu-id="f865c-397">This value is written as an unsigned integer.</span></span> <span data-ttu-id="f865c-398">然后，此方法会将该多个字节写入流。</span><span class="sxs-lookup"><span data-stu-id="f865c-398">This method then writes that many bytes to the stream.</span></span>  
  
 <span data-ttu-id="f865c-399">例如，字符串 "A" 的长度为1，但使用 UTF-16 进行编码时为;长度为2个字节，因此，用前缀编写的值是2，3个字节写入流，包括前缀。</span><span class="sxs-lookup"><span data-stu-id="f865c-399">For example, the string "A" has a length of 1, but when encoded with UTF-16; the length is 2 bytes, so the value written in the prefix is 2, and 3 bytes are written to the stream, including the prefix.</span></span>  
  
 <span data-ttu-id="f865c-400">有关常见 i/o 任务的列表，请参阅[常见 I/o 任务](/dotnet/standard/io/common-i-o-tasks)。</span><span class="sxs-lookup"><span data-stu-id="f865c-400">For a list of common I/O tasks, see [Common I/O Tasks](/dotnet/standard/io/common-i-o-tasks).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f865c-401">下面的代码示例演示如何在文件中存储和检索应用程序设置。</span><span class="sxs-lookup"><span data-stu-id="f865c-401">The following code example demonstrates how to store and retrieve application settings in a file.</span></span>  
  
 [!code-csharp[System.IO.BinaryReaderWriter#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter/CS/source.cs#1)]
 [!code-vb[System.IO.BinaryReaderWriter#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f865c-402">出现 I/O 错误。</span><span class="sxs-lookup"><span data-stu-id="f865c-402">An I/O error occurs.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f865c-403"><paramref name="value" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="f865c-403"><paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="f865c-404">流已关闭。</span><span class="sxs-lookup"><span data-stu-id="f865c-404">The stream is closed.</span></span></exception>
        <altmember cref="T:System.Text.Encoding" />
        <related type="Article" href="/dotnet/standard/io/"><span data-ttu-id="f865c-405">文件和流 I/O</span><span class="sxs-lookup"><span data-stu-id="f865c-405">File and Stream I/O</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file"><span data-ttu-id="f865c-406">如何：从文件读取文本</span><span class="sxs-lookup"><span data-stu-id="f865c-406">How to: Read Text from a File</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file"><span data-ttu-id="f865c-407">如何：向文件写入文本</span><span class="sxs-lookup"><span data-stu-id="f865c-407">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public virtual void Write (ushort value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Write(unsigned int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.BinaryWriter.Write(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Write (value As UShort)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Write(System::UInt16 value);" />
      <MemberSignature Language="F#" Value="abstract member Write : uint16 -&gt; unit&#xA;override this.Write : uint16 -&gt; unit" Usage="binaryWriter.Write value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="f865c-408">要写入的 2 字节无符号整数。</span><span class="sxs-lookup"><span data-stu-id="f865c-408">The two-byte unsigned integer to write.</span></span></param>
        <summary><span data-ttu-id="f865c-409">将 2 字节无符号整数写入当前流，并将流的位置提升 2 个字节。</span><span class="sxs-lookup"><span data-stu-id="f865c-409">Writes a two-byte unsigned integer to the current stream and advances the stream position by two bytes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f865c-410">`BinaryWriter` 以 little endian 格式存储该数据类型。</span><span class="sxs-lookup"><span data-stu-id="f865c-410">`BinaryWriter` stores this data type in little endian format.</span></span>  
  
 <span data-ttu-id="f865c-411">有关常见 i/o 任务的列表，请参阅[常见 I/o 任务](/dotnet/standard/io/common-i-o-tasks)。</span><span class="sxs-lookup"><span data-stu-id="f865c-411">For a list of common I/O tasks, see [Common I/O Tasks](/dotnet/standard/io/common-i-o-tasks).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f865c-412">出现 I/O 错误。</span><span class="sxs-lookup"><span data-stu-id="f865c-412">An I/O error occurs.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="f865c-413">流已关闭。</span><span class="sxs-lookup"><span data-stu-id="f865c-413">The stream is closed.</span></span></exception>
        <related type="Article" href="/dotnet/standard/io/"><span data-ttu-id="f865c-414">文件和流 I/O</span><span class="sxs-lookup"><span data-stu-id="f865c-414">File and Stream I/O</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file"><span data-ttu-id="f865c-415">如何：从文件读取文本</span><span class="sxs-lookup"><span data-stu-id="f865c-415">How to: Read Text from a File</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file"><span data-ttu-id="f865c-416">如何：向文件写入文本</span><span class="sxs-lookup"><span data-stu-id="f865c-416">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public virtual void Write (uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Write(unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.BinaryWriter.Write(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Write (value As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Write(System::UInt32 value);" />
      <MemberSignature Language="F#" Value="abstract member Write : uint32 -&gt; unit&#xA;override this.Write : uint32 -&gt; unit" Usage="binaryWriter.Write value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="f865c-417">要写入的 4 字节无符号整数。</span><span class="sxs-lookup"><span data-stu-id="f865c-417">The four-byte unsigned integer to write.</span></span></param>
        <summary><span data-ttu-id="f865c-418">将 4 字节无符号整数写入当前流，并将流的位置提升 4 个字节。</span><span class="sxs-lookup"><span data-stu-id="f865c-418">Writes a four-byte unsigned integer to the current stream and advances the stream position by four bytes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f865c-419">`BinaryWriter` 以 little endian 格式存储该数据类型。</span><span class="sxs-lookup"><span data-stu-id="f865c-419">`BinaryWriter` stores this data type in little endian format.</span></span>  
  
 <span data-ttu-id="f865c-420">有关常见 i/o 任务的列表，请参阅[常见 I/o 任务](/dotnet/standard/io/common-i-o-tasks)。</span><span class="sxs-lookup"><span data-stu-id="f865c-420">For a list of common I/O tasks, see [Common I/O Tasks](/dotnet/standard/io/common-i-o-tasks).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f865c-421">出现 I/O 错误。</span><span class="sxs-lookup"><span data-stu-id="f865c-421">An I/O error occurs.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="f865c-422">流已关闭。</span><span class="sxs-lookup"><span data-stu-id="f865c-422">The stream is closed.</span></span></exception>
        <related type="Article" href="/dotnet/standard/io/"><span data-ttu-id="f865c-423">文件和流 I/O</span><span class="sxs-lookup"><span data-stu-id="f865c-423">File and Stream I/O</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file"><span data-ttu-id="f865c-424">如何：从文件读取文本</span><span class="sxs-lookup"><span data-stu-id="f865c-424">How to: Read Text from a File</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file"><span data-ttu-id="f865c-425">如何：向文件写入文本</span><span class="sxs-lookup"><span data-stu-id="f865c-425">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public virtual void Write (ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Write(unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.BinaryWriter.Write(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Write (value As ULong)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Write(System::UInt64 value);" />
      <MemberSignature Language="F#" Value="abstract member Write : uint64 -&gt; unit&#xA;override this.Write : uint64 -&gt; unit" Usage="binaryWriter.Write value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="f865c-426">要写入的 8 字节无符号整数。</span><span class="sxs-lookup"><span data-stu-id="f865c-426">The eight-byte unsigned integer to write.</span></span></param>
        <summary><span data-ttu-id="f865c-427">将 8 字节无符号整数写入当前流，并将流的位置提升 8 个字节。</span><span class="sxs-lookup"><span data-stu-id="f865c-427">Writes an eight-byte unsigned integer to the current stream and advances the stream position by eight bytes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f865c-428">`BinaryWriter` 以 little endian 格式存储该数据类型。</span><span class="sxs-lookup"><span data-stu-id="f865c-428">`BinaryWriter` stores this data type in little endian format.</span></span>  
  
 <span data-ttu-id="f865c-429">有关常见 i/o 任务的列表，请参阅[常见 I/o 任务](/dotnet/standard/io/common-i-o-tasks)。</span><span class="sxs-lookup"><span data-stu-id="f865c-429">For a list of common I/O tasks, see [Common I/O Tasks](/dotnet/standard/io/common-i-o-tasks).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f865c-430">出现 I/O 错误。</span><span class="sxs-lookup"><span data-stu-id="f865c-430">An I/O error occurs.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="f865c-431">流已关闭。</span><span class="sxs-lookup"><span data-stu-id="f865c-431">The stream is closed.</span></span></exception>
        <related type="Article" href="/dotnet/standard/io/"><span data-ttu-id="f865c-432">文件和流 I/O</span><span class="sxs-lookup"><span data-stu-id="f865c-432">File and Stream I/O</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file"><span data-ttu-id="f865c-433">如何：从文件读取文本</span><span class="sxs-lookup"><span data-stu-id="f865c-433">How to: Read Text from a File</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file"><span data-ttu-id="f865c-434">如何：向文件写入文本</span><span class="sxs-lookup"><span data-stu-id="f865c-434">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public virtual void Write (byte[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Write(unsigned int8[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.BinaryWriter.Write(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Write (buffer As Byte(), index As Integer, count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Write(cli::array &lt;System::Byte&gt; ^ buffer, int index, int count);" />
      <MemberSignature Language="F#" Value="abstract member Write : byte[] * int * int -&gt; unit&#xA;override this.Write : byte[] * int * int -&gt; unit" Usage="binaryWriter.Write (buffer, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer"><span data-ttu-id="f865c-435">包含要写入的数据的字节数组。</span><span class="sxs-lookup"><span data-stu-id="f865c-435">A byte array containing the data to write.</span></span></param>
        <param name="index"><span data-ttu-id="f865c-436">要从 <paramref name="buffer" /> 中读取且要写入流的第一个字节的索引。</span><span class="sxs-lookup"><span data-stu-id="f865c-436">The index of the first byte to read from <paramref name="buffer" /> and to write to the stream.</span></span></param>
        <param name="count"><span data-ttu-id="f865c-437">要从 <paramref name="buffer" /> 中读取且要写入流的字节数。</span><span class="sxs-lookup"><span data-stu-id="f865c-437">The number of bytes to read from <paramref name="buffer" /> and to write to the stream.</span></span></param>
        <summary><span data-ttu-id="f865c-438">将字节数组区域写入当前流。</span><span class="sxs-lookup"><span data-stu-id="f865c-438">Writes a region of a byte array to the current stream.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f865c-439">有关常见 i/o 任务的列表，请参阅[常见 I/o 任务](/dotnet/standard/io/common-i-o-tasks)。</span><span class="sxs-lookup"><span data-stu-id="f865c-439">For a list of common I/O tasks, see [Common I/O Tasks](/dotnet/standard/io/common-i-o-tasks).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f865c-440">下面的代码示例演示如何使用内存作为后备存储来编写二进制数据，然后验证是否已正确写入数据。</span><span class="sxs-lookup"><span data-stu-id="f865c-440">The following code example shows how to write binary data using memory as a backing store, and then verify that the data was written correctly.</span></span>  
  
 [!code-csharp[System.IO.BinaryReaderWriter.RWBytes2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter.RWBytes2/CS/rwreadbytes.cs#1)]
 [!code-vb[System.IO.BinaryReaderWriter.RWBytes2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter.RWBytes2/VB/rwreadbytes.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f865c-441">缓冲区长度减去 <paramref name="index" /> 小于 <paramref name="count" />。</span><span class="sxs-lookup"><span data-stu-id="f865c-441">The buffer length minus <paramref name="index" /> is less than <paramref name="count" />.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f865c-442"><paramref name="buffer" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="f865c-442"><paramref name="buffer" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="f865c-443"><paramref name="index" /> 或 <paramref name="count" /> 为负数。</span><span class="sxs-lookup"><span data-stu-id="f865c-443"><paramref name="index" /> or <paramref name="count" /> is negative.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f865c-444">出现 I/O 错误。</span><span class="sxs-lookup"><span data-stu-id="f865c-444">An I/O error occurs.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="f865c-445">流已关闭。</span><span class="sxs-lookup"><span data-stu-id="f865c-445">The stream is closed.</span></span></exception>
        <related type="Article" href="/dotnet/standard/io/"><span data-ttu-id="f865c-446">文件和流 I/O</span><span class="sxs-lookup"><span data-stu-id="f865c-446">File and Stream I/O</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file"><span data-ttu-id="f865c-447">如何：从文件读取文本</span><span class="sxs-lookup"><span data-stu-id="f865c-447">How to: Read Text from a File</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file"><span data-ttu-id="f865c-448">如何：向文件写入文本</span><span class="sxs-lookup"><span data-stu-id="f865c-448">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public virtual void Write (char[] chars, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Write(char[] chars, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.BinaryWriter.Write(System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Write (chars As Char(), index As Integer, count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Write(cli::array &lt;char&gt; ^ chars, int index, int count);" />
      <MemberSignature Language="F#" Value="abstract member Write : char[] * int * int -&gt; unit&#xA;override this.Write : char[] * int * int -&gt; unit" Usage="binaryWriter.Write (chars, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.Char[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="chars"><span data-ttu-id="f865c-449">包含要写入的数据的字符数组。</span><span class="sxs-lookup"><span data-stu-id="f865c-449">A character array containing the data to write.</span></span></param>
        <param name="index"><span data-ttu-id="f865c-450">要从 <paramref name="chars" /> 中读取且要写入流的第一个字符的索引。</span><span class="sxs-lookup"><span data-stu-id="f865c-450">The index of the first character to read from <paramref name="chars" /> and to write to the stream.</span></span></param>
        <param name="count"><span data-ttu-id="f865c-451">要从 <paramref name="chars" /> 中读取且要写入流的字符数。</span><span class="sxs-lookup"><span data-stu-id="f865c-451">The number of characters to read from <paramref name="chars" /> and to write to the stream.</span></span></param>
        <summary><span data-ttu-id="f865c-452">将字符数组部分写入当前流，并根据所使用的 <see langword="Encoding" />（可能还根据向流中写入的特定字符），提升流的当前位置。</span><span class="sxs-lookup"><span data-stu-id="f865c-452">Writes a section of a character array to the current stream, and advances the current position of the stream in accordance with the <see langword="Encoding" /> used and perhaps the specific characters being written to the stream.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f865c-453">有关常见 i/o 任务的列表，请参阅[常见 I/o 任务](/dotnet/standard/io/common-i-o-tasks)。</span><span class="sxs-lookup"><span data-stu-id="f865c-453">For a list of common I/O tasks, see [Common I/O Tasks](/dotnet/standard/io/common-i-o-tasks).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f865c-454">下面的代码示例演示如何使用内存作为后备存储来读取和写入数据。</span><span class="sxs-lookup"><span data-stu-id="f865c-454">The following code example shows how to read and write data using memory as a backing store.</span></span>  
  
 [!code-cpp[System.IO.BinaryReaderWriter.RWChars2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter.RWChars2/CPP/rwreadchars.cpp#1)]
 [!code-csharp[System.IO.BinaryReaderWriter.RWChars2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter.RWChars2/CS/rwreadchars.cs#1)]
 [!code-vb[System.IO.BinaryReaderWriter.RWChars2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter.RWChars2/VB/rwreadchars.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f865c-455">缓冲区长度减去 <paramref name="index" /> 小于 <paramref name="count" />。</span><span class="sxs-lookup"><span data-stu-id="f865c-455">The buffer length minus <paramref name="index" /> is less than <paramref name="count" />.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f865c-456"><paramref name="chars" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="f865c-456"><paramref name="chars" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="f865c-457"><paramref name="index" /> 或 <paramref name="count" /> 为负数。</span><span class="sxs-lookup"><span data-stu-id="f865c-457"><paramref name="index" /> or <paramref name="count" /> is negative.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f865c-458">出现 I/O 错误。</span><span class="sxs-lookup"><span data-stu-id="f865c-458">An I/O error occurs.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="f865c-459">流已关闭。</span><span class="sxs-lookup"><span data-stu-id="f865c-459">The stream is closed.</span></span></exception>
        <altmember cref="T:System.Text.Encoding" />
        <related type="Article" href="/dotnet/standard/io/"><span data-ttu-id="f865c-460">文件和流 I/O</span><span class="sxs-lookup"><span data-stu-id="f865c-460">File and Stream I/O</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-read-text-from-a-file"><span data-ttu-id="f865c-461">如何：从文件读取文本</span><span class="sxs-lookup"><span data-stu-id="f865c-461">How to: Read Text from a File</span></span></related>
        <related type="Article" href="/dotnet/standard/io/how-to-write-text-to-a-file"><span data-ttu-id="f865c-462">如何：向文件写入文本</span><span class="sxs-lookup"><span data-stu-id="f865c-462">How to: Write Text to a File</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Write7BitEncodedInt">
      <MemberSignature Language="C#" Value="protected void Write7BitEncodedInt (int value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void Write7BitEncodedInt(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.BinaryWriter.Write7BitEncodedInt(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub Write7BitEncodedInt (value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void Write7BitEncodedInt(int value);" />
      <MemberSignature Language="F#" Value="member this.Write7BitEncodedInt : int -&gt; unit" Usage="binaryWriter.Write7BitEncodedInt value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="f865c-463">要写入的 32 位整数。</span><span class="sxs-lookup"><span data-stu-id="f865c-463">The 32-bit integer to be written.</span></span></param>
        <summary><span data-ttu-id="f865c-464">以压缩格式写入 32 位整数。</span><span class="sxs-lookup"><span data-stu-id="f865c-464">Writes a 32-bit integer in a compressed format.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f865c-465">`value` 参数的整数，一次写出7位，从七个最低有效位开始。</span><span class="sxs-lookup"><span data-stu-id="f865c-465">The integer of the `value` parameter is written out seven bits at a time, starting with the seven least-significant bits.</span></span> <span data-ttu-id="f865c-466">字节的高位指示在此后是否要写入更多的字节。</span><span class="sxs-lookup"><span data-stu-id="f865c-466">The high bit of a byte indicates whether there are more bytes to be written after this one.</span></span>  
  
 <span data-ttu-id="f865c-467">如果 `value` 将适合7位，则只需要一个字节的空间。</span><span class="sxs-lookup"><span data-stu-id="f865c-467">If `value` will fit in seven bits, it takes only one byte of space.</span></span> <span data-ttu-id="f865c-468">如果 `value` 不能容纳7位，则将在第一个字节上设置高位并写出。然后，`value` 将移位7位，并写入下一个字节。</span><span class="sxs-lookup"><span data-stu-id="f865c-468">If `value` will not fit in seven bits, the high bit is set on the first byte and written out. `value` is then shifted by seven bits and the next byte is written.</span></span> <span data-ttu-id="f865c-469">此过程将重复进行，直至写入整个整数。</span><span class="sxs-lookup"><span data-stu-id="f865c-469">This process is repeated until the entire integer has been written.</span></span>  
  
 <span data-ttu-id="f865c-470">有关常见 i/o 任务的列表，请参阅[常见 I/o 任务](/dotnet/standard/io/common-i-o-tasks)。</span><span class="sxs-lookup"><span data-stu-id="f865c-470">For a list of common I/O tasks, see [Common I/O Tasks](/dotnet/standard/io/common-i-o-tasks).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.EndOfStreamException"><span data-ttu-id="f865c-471">已到达流的末尾。</span><span class="sxs-lookup"><span data-stu-id="f865c-471">The end of the stream is reached.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="f865c-472">流已关闭。</span><span class="sxs-lookup"><span data-stu-id="f865c-472">The stream is closed.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f865c-473">流已关闭。</span><span class="sxs-lookup"><span data-stu-id="f865c-473">The stream is closed.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>
