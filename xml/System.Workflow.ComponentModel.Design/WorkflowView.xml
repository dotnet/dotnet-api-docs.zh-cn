<Type Name="WorkflowView" FullName="System.Workflow.ComponentModel.Design.WorkflowView">
  <Metadata><Meta Name="ms.openlocfilehash" Value="64a1c40e9e740629a6e3702f7ae0edea7cd2be23" /><Meta Name="ms.sourcegitcommit" Value="11d168140aa8fade0768c2a9dde3e3bcacfdfb7d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="05/27/2020" /><Meta Name="ms.locfileid" Value="83900873" /></Metadata><TypeSignature Language="C#" Value="public class WorkflowView : System.Windows.Forms.UserControl, IServiceProvider, System.Windows.Forms.IMessageFilter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit WorkflowView extends System.Windows.Forms.UserControl implements class System.IServiceProvider, class System.Windows.Forms.IMessageFilter" />
  <TypeSignature Language="DocId" Value="T:System.Workflow.ComponentModel.Design.WorkflowView" />
  <TypeSignature Language="VB.NET" Value="Public Class WorkflowView&#xA;Inherits UserControl&#xA;Implements IMessageFilter, IServiceProvider" />
  <TypeSignature Language="C++ CLI" Value="public ref class WorkflowView : System::Windows::Forms::UserControl, IServiceProvider, System::Windows::Forms::IMessageFilter" />
  <TypeSignature Language="F#" Value="type WorkflowView = class&#xA;    inherit UserControl&#xA;    interface IServiceProvider&#xA;    interface IMessageFilter" />
  <AssemblyInfo>
    <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Forms.UserControl</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IServiceProvider</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Windows.Forms.IMessageFilter</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.ToolboxItem(false)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Workflow.ComponentModel.Design.ActivityDesignerTheme(typeof(System.Workflow.ComponentModel.Design.AmbientTheme), Xml="&lt;AmbientTheme xmlns="http://schemas.microsoft.com/winfx/2006/xaml/workflow" ApplyTo="System.Workflow.ComponentModel.Design.WorkflowView" ShowConfigErrors="True" DrawShadow="False" DrawGrayscale="False" DropIndicatorColor="0xFF006400" SelectionForeColor="0xFF0000FF" SelectionPatternColor="0xFF606060" ForeColor="0xFF808080" BackColor="0xFFFFFFFF" ShowGrid="False" GridColor="0xFFC0C0C0" TextQuality="Aliased" DrawRounded="True" ShowDesignerBorder="True" /&gt;")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>提供设计图面，该设计图面呈现流程的可视表示形式。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  [!INCLUDE[DeprecatedContent](~/includes/deprecatedcontent-md.md)]  
  
 <xref:System.Workflow.ComponentModel.Design.WorkflowView> 是设计图面，该设计图面呈现在工作流标记中描述的流程的可视表示形式。 <xref:System.Workflow.ComponentModel.Design.WorkflowView> 提供一组丰富的用户界面功能，活动设计器需要这些功能来呈现和响应各种 Windows 生成的事件。 另外，<xref:System.Workflow.ComponentModel.Design.WorkflowView> 提供一组常用函数，所有设计器都可以使用这些函数执行特定的活动。  
  
   
  
## Examples  
 下面的代码示例演示如何使用 <xref:System.Workflow.ComponentModel.Design.WorkflowView> 方法来获取 <xref:System.ComponentModel.Design.IRootDesigner.GetView%2A> 类的实例。 代码随后设置若干 <xref:System.Workflow.ComponentModel.Design.WorkflowView> 属性，包括 <xref:System.Workflow.ComponentModel.Design.WorkflowView.HScrollBar%2A> 和 <xref:System.Workflow.ComponentModel.Design.WorkflowView.VScrollBar%2A>，然后调用 <xref:System.Workflow.ComponentModel.Design.WorkflowView.FitToScreenSize%2A> 方法。  
  
 此代码示例摘自 WorkflowDesignerControl.cs 文件中的工作流跟踪配置文件设计器 SDK 示例。 有关详细信息，请参阅[工作流跟踪配置文件设计器](https://docs.microsoft.com/previous-versions/dotnet/netframework-3.5/ms742004(v=vs.90))。  
  
 [!code-csharp[wf_samples#126](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets1.cs#126)]
 [!code-vb[wf_samples#126](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets1.vb#126)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="https://docs.microsoft.com/previous-versions/dotnet/netframework-3.5/ms742004(v=vs.90)">工作流跟踪配置文件设计器</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" /> 的一个实例。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WorkflowView ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.WorkflowView.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WorkflowView();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" /> 的一个实例。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WorkflowView (IServiceProvider serviceProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IServiceProvider serviceProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.WorkflowView.#ctor(System.IServiceProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (serviceProvider As IServiceProvider)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WorkflowView(IServiceProvider ^ serviceProvider);" />
      <MemberSignature Language="F#" Value="new System.Workflow.ComponentModel.Design.WorkflowView : IServiceProvider -&gt; System.Workflow.ComponentModel.Design.WorkflowView" Usage="new System.Workflow.ComponentModel.Design.WorkflowView serviceProvider" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="serviceProvider" Type="System.IServiceProvider" />
      </Parameters>
      <Docs>
        <param name="serviceProvider">一个实现 <see cref="T:System.IServiceProvider" /> 接口的对象。</param>
        <summary>使用指定的服务提供程序初始化 <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" /> 类的实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的示例演示如何创建 <xref:System.Workflow.ComponentModel.Design.WorkflowView> 对象。 在此示例中，创建一个新 <xref:System.ComponentModel.Design.DesignSurface> 对象，并且调用 `BeginLoad` 方法将 <xref:System.Workflow.ComponentModel.Design.WorkflowDesignerLoader> 对象作为参数传递。 在创建新的 <xref:System.Workflow.Activities.SequentialWorkflowActivity> 之后，使用先前创建的 <xref:System.Workflow.ComponentModel.Design.WorkflowView> 作为参数传递到构造函数来创建 <xref:System.ComponentModel.Design.DesignSurface> 对象。  
  
 此代码示例摘自 WorkflowViewWrapper.cs 文件中的 Outlook 工作流向导 SDK 示例。 有关详细信息，请参阅[Outlook 工作流向导示例](https://msdn.microsoft.com/library/7b2ba92b-8456-43f3-87fc-184ffdec4408)。  
  
 [!code-csharp[wf_samples#97](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets1.cs#97)]
 [!code-vb[wf_samples#97](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets1.vb#97)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/dotnet/netframework-3.5/ms741706(v=vs.90)">工作流监视器</related>
      </Docs>
    </Member>
    <Member MemberName="AddDesignerMessageFilter">
      <MemberSignature Language="C#" Value="public void AddDesignerMessageFilter (System.Workflow.ComponentModel.Design.WorkflowDesignerMessageFilter designerMessageFilter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddDesignerMessageFilter(class System.Workflow.ComponentModel.Design.WorkflowDesignerMessageFilter designerMessageFilter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.WorkflowView.AddDesignerMessageFilter(System.Workflow.ComponentModel.Design.WorkflowDesignerMessageFilter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddDesignerMessageFilter (designerMessageFilter As WorkflowDesignerMessageFilter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddDesignerMessageFilter(System::Workflow::ComponentModel::Design::WorkflowDesignerMessageFilter ^ designerMessageFilter);" />
      <MemberSignature Language="F#" Value="member this.AddDesignerMessageFilter : System.Workflow.ComponentModel.Design.WorkflowDesignerMessageFilter -&gt; unit" Usage="workflowView.AddDesignerMessageFilter designerMessageFilter" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="designerMessageFilter" Type="System.Workflow.ComponentModel.Design.WorkflowDesignerMessageFilter" />
      </Parameters>
      <Docs>
        <param name="designerMessageFilter">要添加到 <see cref="T:System.Workflow.ComponentModel.Design.WorkflowDesignerMessageFilter" /> 的 <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" />。</param>
        <summary>向 <see cref="T:System.Workflow.ComponentModel.Design.WorkflowDesignerMessageFilter" /> 中添加一个 <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Workflow.ComponentModel.Design.WorkflowDesignerMessageFilter> 是一个组件，它处理来自 <xref:System.Workflow.ComponentModel.Design.WorkflowView> 的消息。  
  
 使用 `Strategy` 设计模式，<xref:System.Workflow.ComponentModel.Design.WorkflowView> 会将消息传递到 <xref:System.Workflow.ComponentModel.Design.WorkflowDesignerMessageFilter> 以进行处理。  
  
 鼠标事件、键盘事件、绘画和布局事件传递到与 <xref:System.Workflow.ComponentModel.Design.WorkflowDesignerMessageFilter> 关联的 <xref:System.Workflow.ComponentModel.Design.WorkflowView>。  
  
   
  
## Examples  
 在下面的示例中，创建了一个 <xref:System.Workflow.ComponentModel.Design.WorkflowDesignerLoader>，并将 <xref:System.Workflow.ComponentModel.Design.WorkflowView> 对象与工作流设计图面相关联。 为了检索消息的通知，创建了一个 <xref:System.Workflow.ComponentModel.Design.WorkflowDesignerMessageFilter> 并将其添加到了 <xref:System.Workflow.ComponentModel.Design.WorkflowView> 对象。  
  
 此代码示例摘自 WorkflowViewWrapper.cs 文件中的 Outlook 工作流向导 SDK 示例。 有关详细信息，请参阅[Outlook 工作流向导示例](https://msdn.microsoft.com/library/7b2ba92b-8456-43f3-87fc-184ffdec4408)。  
  
 [!code-csharp[wf_Samples#102](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets1.cs#102)]
 [!code-vb[wf_Samples#102](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets1.vb#102)]  
  
 在上面的代码中创建的 `MessageFilter` 对象是从 <xref:System.Workflow.ComponentModel.Design.WorkflowDesignerMessageFilter> 类派生的。  通过重写此类的方法，只要在 <xref:System.Workflow.ComponentModel.Design.WorkflowView> 对象上发生用户界面事件，就会通知消息筛选器。  
  
 [!code-csharp[wf_samples#104](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets1.cs#104)]
 [!code-vb[wf_samples#104](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets1.vb#104)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClientPointToLogical">
      <MemberSignature Language="C#" Value="public System.Drawing.Point ClientPointToLogical (System.Drawing.Point clientPoint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.Point ClientPointToLogical(valuetype System.Drawing.Point clientPoint) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.WorkflowView.ClientPointToLogical(System.Drawing.Point)" />
      <MemberSignature Language="VB.NET" Value="Public Function ClientPointToLogical (clientPoint As Point) As Point" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::Point ClientPointToLogical(System::Drawing::Point clientPoint);" />
      <MemberSignature Language="F#" Value="member this.ClientPointToLogical : System.Drawing.Point -&gt; System.Drawing.Point" Usage="workflowView.ClientPointToLogical clientPoint" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Point</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="clientPoint" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="clientPoint">要从工作区坐标转换到逻辑坐标的 <see cref="T:System.Drawing.Point" />。</param>
        <summary>将 <see cref="T:System.Drawing.Point" /> 从工作区坐标转换到逻辑坐标。</summary>
        <returns>已从工作区坐标转换到逻辑坐标的 <see cref="T:System.Drawing.Point" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Workflow.ComponentModel.Design.WorkflowView> 使用两个坐标空间：逻辑和工作区：  
  
-   工作区坐标相对于 <xref:System.Workflow.ComponentModel.Design.WorkflowView> 的左上角。 左上角的坐标是 0,0；在可视区域中，x 和 y 坐标沿垂直和水平方向增加。 工作区坐标系统受 <xref:System.Workflow.ComponentModel.Design.WorkflowView> 的缩放级别和滚动条位置的影响。  
  
-   在逻辑坐标系统中，每个对象始终映射到 0,0。 该位置在垂直方向和水平方向不受缩放级别或滚动条位置的影响。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClientRectangleToLogical">
      <MemberSignature Language="C#" Value="public System.Drawing.Rectangle ClientRectangleToLogical (System.Drawing.Rectangle rectangle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.Rectangle ClientRectangleToLogical(valuetype System.Drawing.Rectangle rectangle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.WorkflowView.ClientRectangleToLogical(System.Drawing.Rectangle)" />
      <MemberSignature Language="VB.NET" Value="Public Function ClientRectangleToLogical (rectangle As Rectangle) As Rectangle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::Rectangle ClientRectangleToLogical(System::Drawing::Rectangle rectangle);" />
      <MemberSignature Language="F#" Value="member this.ClientRectangleToLogical : System.Drawing.Rectangle -&gt; System.Drawing.Rectangle" Usage="workflowView.ClientRectangleToLogical rectangle" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Rectangle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rectangle" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="rectangle">要从工作区坐标转换到逻辑坐标的 <see cref="T:System.Drawing.Rectangle" />。</param>
        <summary>将 <see cref="T:System.Drawing.Rectangle" /> 从工作区坐标转换到逻辑坐标。</summary>
        <returns>已从工作区坐标转换到逻辑坐标的 <see cref="T:System.Drawing.Rectangle" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Workflow.ComponentModel.Design.WorkflowView> 使用两个坐标空间：逻辑和工作区：  
  
-   工作区坐标相对于 <xref:System.Workflow.ComponentModel.Design.WorkflowView> 的左上角。 左上角的坐标是 0,0；在可视区域中，x 和 y 坐标沿垂直和水平方向增加。 工作区坐标系统受 <xref:System.Workflow.ComponentModel.Design.WorkflowView> 的缩放级别和滚动条位置的影响。  
  
 在逻辑坐标系统中，每个对象始终映射到 0,0。 该位置在垂直方向和水平方向不受缩放级别或滚动条位置的影响。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClientSizeToLogical">
      <MemberSignature Language="C#" Value="public System.Drawing.Size ClientSizeToLogical (System.Drawing.Size clientSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.Size ClientSizeToLogical(valuetype System.Drawing.Size clientSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.WorkflowView.ClientSizeToLogical(System.Drawing.Size)" />
      <MemberSignature Language="VB.NET" Value="Public Function ClientSizeToLogical (clientSize As Size) As Size" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::Size ClientSizeToLogical(System::Drawing::Size clientSize);" />
      <MemberSignature Language="F#" Value="member this.ClientSizeToLogical : System.Drawing.Size -&gt; System.Drawing.Size" Usage="workflowView.ClientSizeToLogical clientSize" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="clientSize" Type="System.Drawing.Size" />
      </Parameters>
      <Docs>
        <param name="clientSize">要从工作区坐标转换到逻辑坐标的 <see cref="T:System.Drawing.Size" />。</param>
        <summary>将 <see cref="T:System.Drawing.Size" /> 从工作区坐标转换到逻辑坐标。</summary>
        <returns>已从工作区坐标转换到逻辑坐标的 <see cref="T:System.Drawing.Size" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Workflow.ComponentModel.Design.WorkflowView> 使用两个坐标空间：逻辑和工作区：  
  
-   工作区坐标相对于 <xref:System.Workflow.ComponentModel.Design.WorkflowView> 的左上角。 左上角的坐标是 0,0；在可视区域中，x 和 y 坐标沿垂直和水平方向增加。 工作区坐标系统受 <xref:System.Workflow.ComponentModel.Design.WorkflowView> 的缩放级别和滚动条位置的影响。  
  
 在逻辑坐标系统中，每个对象始终映射到 0,0。 该位置在垂直方向和水平方向不受缩放级别或滚动条位置的影响。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateAccessibilityInstance">
      <MemberSignature Language="C#" Value="protected override System.Windows.Forms.AccessibleObject CreateAccessibilityInstance ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Forms.AccessibleObject CreateAccessibilityInstance() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.WorkflowView.CreateAccessibilityInstance" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CreateAccessibilityInstance () As AccessibleObject" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Forms::AccessibleObject ^ CreateAccessibilityInstance();" />
      <MemberSignature Language="F#" Value="override this.CreateAccessibilityInstance : unit -&gt; System.Windows.Forms.AccessibleObject" Usage="workflowView.CreateAccessibilityInstance " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.AccessibleObject</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>创建 <see cref="T:System.Windows.Forms.AccessibleObject" /> 的新 <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" />。</summary>
        <returns><see cref="T:System.Windows.Forms.AccessibleObject" /> 的新 <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果不显式调用 <xref:System.Workflow.ComponentModel.Design.WorkflowView.CreateAccessibilityInstance%2A> 方法，则在引用 <xref:System.Windows.Forms.AccessibleObject> 属性时将会调用此方法。  
  
> [!NOTE]
>  若要创建 <xref:System.Windows.Forms.AccessibleObject>，必须添加对与 .NET Framework 一起安装的 `Accessibility` 程序集的引用。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>在派生类中重写 <see cref="M:System.Workflow.ComponentModel.Design.WorkflowView.CreateAccessibilityInstance" /> 时，不应调用基类 <see cref="M:System.Workflow.ComponentModel.Design.WorkflowView.CreateAccessibilityInstance" /> 方法。</para></block>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.WorkflowView.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="workflowView.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">若要释放托管资源和非托管资源，则为 <see langword="true" />；若仅释放非托管资源，则为 <see langword="false" />。</param>
        <summary>释放由 <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" /> 占用的非托管资源，还可以另外再释放托管资源。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当处置参数为 `true` 时，此方法释放此 <xref:System.Workflow.ComponentModel.Design.WorkflowView> 引用的所有托管对象所持有的全部资源。 此方法调用每个引用对象的 `Dispose()` 方法。  
  
 有关 `Dispose` 和 `Finalize`的详细信息，请参阅[清理非托管资源](/dotnet/standard/garbage-collection/unmanaged)和[重写 Finalize 方法](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ddae83kx(v=vs.100))。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>
            <see langword="Dispose" /> 可以由其他对象多次调用。 重写 <see langword="Dispose(Boolean)" /> 时，请注意不要引用在以前调用 <see langword="Dispose" /> 时已释放的对象。 有关如何实现 <see langword="Dispose(Boolean)" />的详细信息，请参阅[实现 Dispose 方法](/dotnet/standard/garbage-collection/implementing-dispose)。</para></block>
      </Docs>
    </Member>
    <Member MemberName="EnableFitToScreen">
      <MemberSignature Language="C#" Value="public bool EnableFitToScreen { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableFitToScreen" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.ComponentModel.Design.WorkflowView.EnableFitToScreen" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableFitToScreen As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableFitToScreen { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnableFitToScreen : bool with get, set" Usage="System.Workflow.ComponentModel.Design.WorkflowView.EnableFitToScreen" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>启用设计图面上的按钮，在单击该按钮时会更改工作流设计图面的缩放级别，以便在 <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" /> 中显示整个工作流。</summary>
        <value>如果已启用该动态按钮，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的示例演示如何启用适应屏幕按钮。 此方法首先获取设计器的 <xref:System.ComponentModel.Design.IDesignerHost> 接口，然后在修改 <xref:System.Workflow.ComponentModel.Design.WorkflowView> 属性前使用 <xref:System.IServiceProvider.GetService%2A> 方法检索 <xref:System.Workflow.ComponentModel.Design.WorkflowView.EnableFitToScreen%2A> 对象。  
  
 [!code-csharp[wf_samples#50](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#50)]
 [!code-vb[wf_samples#50](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#50)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnsureVisible">
      <MemberSignature Language="C#" Value="public void EnsureVisible (object selectableObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnsureVisible(object selectableObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.WorkflowView.EnsureVisible(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub EnsureVisible (selectableObject As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnsureVisible(System::Object ^ selectableObject);" />
      <MemberSignature Language="F#" Value="member this.EnsureVisible : obj -&gt; unit" Usage="workflowView.EnsureVisible selectableObject" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="selectableObject" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="selectableObject">要使其可见的对象。</param>
        <summary>确保传递的 <see cref="T:System.Object" /> 可见，并在必要时展开父对象和滚动 <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在工作流中使用需要用户界面提示的对象时，可以使用 <xref:System.Workflow.ComponentModel.Design.WorkflowView.EnsureVisible%2A>。<xref:System.Workflow.ComponentModel.Design.WorkflowView.EnsureVisible%2A> 将在必要时展开父对象和滚动 <xref:System.Workflow.ComponentModel.Design.WorkflowView> 以使该对象在设计器上可见。  
  
   
  
## Examples  
 下面的示例使用 <xref:System.Workflow.ComponentModel.Design.WorkflowView.GetService%2A> 对象的 <xref:System.Workflow.ComponentModel.Design.WorkflowView> 方法返回 <xref:System.ComponentModel.Design.ISelectionService> 接口。 如果服务存在，则使用 <xref:System.Workflow.ComponentModel.Design.WorkflowView.EnsureVisible%2A> 对象的 `PrimarySelection` 属性调用 <xref:System.ComponentModel.Design.ISelectionService> 传递当前选择的活动。  
  
 [!code-csharp[wf_samples#64](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#64)]
 [!code-vb[wf_samples#64](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#64)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="selectableObject" /> 为空引用（在 Visual Basic 中为 <see langword="Nothing" />）。</exception>
      </Docs>
    </Member>
    <Member MemberName="FitToScreenSize">
      <MemberSignature Language="C#" Value="public void FitToScreenSize ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FitToScreenSize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.WorkflowView.FitToScreenSize" />
      <MemberSignature Language="VB.NET" Value="Public Sub FitToScreenSize ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FitToScreenSize();" />
      <MemberSignature Language="F#" Value="member this.FitToScreenSize : unit -&gt; unit" Usage="workflowView.FitToScreenSize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>更改工作流设计图面的缩放级别，以便在 <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" /> 中显示整个工作流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 实际的缩放级别取决于用户的工作流设计器的设置。  
  
   
  
## Examples  
 下面的示例演示如何启用适应屏幕按钮。 此方法首先获取设计器的 <xref:System.ComponentModel.Design.IDesignerHost> 接口，然后在修改 <xref:System.Workflow.ComponentModel.Design.WorkflowView> 属性前使用 <xref:System.IServiceProvider.GetService%2A> 方法检索 <xref:System.Workflow.ComponentModel.Design.WorkflowView.EnableFitToScreen%2A> 对象。 最后，调用 <xref:System.Workflow.ComponentModel.Design.WorkflowView.FitToScreenSize%2A> 方法在 <xref:System.Workflow.ComponentModel.Design.WorkflowView> 的可显示区域的边界之内显示整个工作流。  
  
 [!code-csharp[wf_samples#50](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#50)]
 [!code-vb[wf_samples#50](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#50)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/dotnet/netframework-3.5/ms742004(v=vs.90)">工作流跟踪配置文件设计器</related>
      </Docs>
    </Member>
    <Member MemberName="FitToWorkflowSize">
      <MemberSignature Language="C#" Value="public void FitToWorkflowSize ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FitToWorkflowSize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.WorkflowView.FitToWorkflowSize" />
      <MemberSignature Language="VB.NET" Value="Public Sub FitToWorkflowSize ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FitToWorkflowSize();" />
      <MemberSignature Language="F#" Value="member this.FitToWorkflowSize : unit -&gt; unit" Usage="workflowView.FitToWorkflowSize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>将缩放级别更改为百分之百以在 <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" /> 中显示工作流的完整大小。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的示例通过设置若干属性来初始化 <xref:System.Workflow.ComponentModel.Design.WorkflowView> 对象的属性。 <xref:System.Workflow.ComponentModel.Design.WorkflowView.FitToWorkflowSize%2A> 使 <xref:System.Workflow.ComponentModel.Design.WorkflowView> 对象在 <xref:System.Workflow.ComponentModel.Design.WorkflowView.ViewPortRectangle%2A> 中显示工作流的完整大小。  
  
 [!code-csharp[wf_samples#65](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#65)]
 [!code-vb[wf_samples#65](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#65)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetService">
      <MemberSignature Language="C#" Value="protected override object GetService (Type serviceType);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance object GetService(class System.Type serviceType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.WorkflowView.GetService(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function GetService (serviceType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Object ^ GetService(Type ^ serviceType);" />
      <MemberSignature Language="F#" Value="override this.GetService : Type -&gt; obj" Usage="workflowView.GetService serviceType" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IServiceProvider.GetService(System.Type)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="serviceType">要检索的服务的 <see cref="T:System.Type" />。</param>
        <summary>获取指定类型的服务对象（如果可用）。</summary>
        <returns>如果 <paramref name="serviceType" /> 是 <see langword="typeof(" /><see cref="T:System.ComponentModel.Design.CommandID" /><see langword=")" />，则 <see langword="GetService" /> 返回特定的 <see cref="T:System.ComponentModel.Design.CommandID" />；否则，<see langword="GetService" /> 返回实现所请求服务的 <see cref="T:System.Object" />，或在无法解析服务的情况下返回空引用（在 Visual Basic 中为 <see langword="Nothing" />）。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `GetService` 返回实现所请求服务的 <xref:System.Object>，或在无法解析服务的情况下返回空引用 (`Nothing`)。  
  
   
  
## Examples  
 下面的示例使用 <xref:System.Workflow.ComponentModel.Design.WorkflowView.GetService%2A> 对象的 <xref:System.Workflow.ComponentModel.Design.WorkflowView> 方法返回 <xref:System.ComponentModel.Design.ISelectionService> 接口。 如果服务存在，则使用 <xref:System.Workflow.ComponentModel.Design.WorkflowView.EnsureVisible%2A> 对象的 `PrimarySelection` 属性调用 <xref:System.ComponentModel.Design.ISelectionService> 传递当前选择的活动。  
  
 [!code-csharp[wf_samples#64](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#64)]
 [!code-vb[wf_samples#64](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#64)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HScrollBar">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HScrollBar HScrollBar { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.HScrollBar HScrollBar" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.ComponentModel.Design.WorkflowView.HScrollBar" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HScrollBar As HScrollBar" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::HScrollBar ^ HScrollBar { System::Windows::Forms::HScrollBar ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.HScrollBar : System.Windows.Forms.HScrollBar" Usage="System.Workflow.ComponentModel.Design.WorkflowView.HScrollBar" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HScrollBar</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" /> 的水平滚动条。</summary>
        <value>一个用于调整水平滚动条的设置和可见性的 <see cref="T:System.Windows.Forms.ScrollBar" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例演示如何获取 <xref:System.Workflow.ComponentModel.Design.WorkflowView> 类的实例。  代码随后设置若干 <xref:System.Workflow.ComponentModel.Design.WorkflowView> 属性，包括 <xref:System.Workflow.ComponentModel.Design.WorkflowView.HScrollBar%2A> 和 <xref:System.Workflow.ComponentModel.Design.WorkflowView.VScrollBar%2A>，然后调用 <xref:System.Workflow.ComponentModel.Design.WorkflowView.FitToWorkflowSize%2A> 方法。  
  
 [!code-csharp[Wf_samples#65](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#65)]
 [!code-vb[Wf_samples#65](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#65)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/dotnet/netframework-3.5/ms742004(v=vs.90)">工作流跟踪配置文件设计器</related>
      </Docs>
    </Member>
    <Member MemberName="Idle">
      <MemberSignature Language="C#" Value="public event EventHandler Idle;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Idle" />
      <MemberSignature Language="DocId" Value="E:System.Workflow.ComponentModel.Design.WorkflowView.Idle" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Idle As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Idle;" />
      <MemberSignature Language="F#" Value="member this.Idle : EventHandler " Usage="member this.Idle : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当 <see langword="WorkflowView" /> 完成处理并即将进入空闲状态时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果你有要在线程空闲以前执行的任务，请将它们附加到该事件。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvalidateClientRectangle">
      <MemberSignature Language="C#" Value="public void InvalidateClientRectangle (System.Drawing.Rectangle clientRectangle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvalidateClientRectangle(valuetype System.Drawing.Rectangle clientRectangle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.WorkflowView.InvalidateClientRectangle(System.Drawing.Rectangle)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvalidateClientRectangle (clientRectangle As Rectangle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvalidateClientRectangle(System::Drawing::Rectangle clientRectangle);" />
      <MemberSignature Language="F#" Value="member this.InvalidateClientRectangle : System.Drawing.Rectangle -&gt; unit" Usage="workflowView.InvalidateClientRectangle clientRectangle" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="clientRectangle" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="clientRectangle">在工作区坐标中，要使其无效并进行重绘的 <see cref="T:System.Drawing.Rectangle" />。</param>
        <summary>使指定的 <see cref="T:System.Drawing.Rectangle" /> 无效并进行重绘。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在工作区坐标中，使用 <xref:System.Workflow.ComponentModel.Design.WorkflowView.InvalidateClientRectangle%2A> 将 <xref:System.Drawing.Rectangle> 添加到更新区域。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvalidateLogicalRectangle">
      <MemberSignature Language="C#" Value="public void InvalidateLogicalRectangle (System.Drawing.Rectangle logicalRectangle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvalidateLogicalRectangle(valuetype System.Drawing.Rectangle logicalRectangle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.WorkflowView.InvalidateLogicalRectangle(System.Drawing.Rectangle)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvalidateLogicalRectangle (logicalRectangle As Rectangle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvalidateLogicalRectangle(System::Drawing::Rectangle logicalRectangle);" />
      <MemberSignature Language="F#" Value="member this.InvalidateLogicalRectangle : System.Drawing.Rectangle -&gt; unit" Usage="workflowView.InvalidateLogicalRectangle logicalRectangle" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="logicalRectangle" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="logicalRectangle">在逻辑坐标中，要使其无效并进行重绘的 <see cref="T:System.Drawing.Rectangle" />。</param>
        <summary>使指定的 <see cref="T:System.Drawing.Rectangle" /> 无效并进行重绘。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在逻辑坐标中，使用 <xref:System.Workflow.ComponentModel.Design.WorkflowView.InvalidateLogicalRectangle%2A> 将 <xref:System.Drawing.Rectangle> 添加到更新区域。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadViewState">
      <MemberSignature Language="C#" Value="public void LoadViewState (System.IO.Stream viewState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void LoadViewState(class System.IO.Stream viewState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.WorkflowView.LoadViewState(System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Sub LoadViewState (viewState As Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void LoadViewState(System::IO::Stream ^ viewState);" />
      <MemberSignature Language="F#" Value="member this.LoadViewState : System.IO.Stream -&gt; unit" Usage="workflowView.LoadViewState viewState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="viewState" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="viewState">一个 <see cref="T:System.IO.BinaryReader" />，用于还原视图状态。</param>
        <summary>从二进制流还原视图状态信息。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Workflow.ComponentModel.Design.WorkflowView.LoadViewState%2A> 还原以前通过调用 <xref:System.Workflow.ComponentModel.Design.WorkflowView.SaveViewState%2A> 方法保存的视图状态信息。  
  
 当需要自定义某个自定义设计器还原其视图状态的方式时可重写此方法。  
  
   
  
## Examples  
 下面的示例演示了如何通过创建具有 `FileMode.Open` 标志的 <xref:System.IO.FileStream> 对象并将其传递到 <xref:System.Workflow.ComponentModel.Design.WorkflowView.LoadViewState%2A> 方法来加载 <xref:System.Workflow.ComponentModel.Design.WorkflowView> 对象的视图状态。 视图状态文件是使用 <xref:System.Workflow.ComponentModel.Design.WorkflowView.SaveViewState%2A> 方法创建的。  
  
 [!code-csharp[wf_samples#60](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#60)]
 [!code-vb[wf_samples#60](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#60)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LogicalPointToClient">
      <MemberSignature Language="C#" Value="public System.Drawing.Point LogicalPointToClient (System.Drawing.Point logicalPoint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.Point LogicalPointToClient(valuetype System.Drawing.Point logicalPoint) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.WorkflowView.LogicalPointToClient(System.Drawing.Point)" />
      <MemberSignature Language="VB.NET" Value="Public Function LogicalPointToClient (logicalPoint As Point) As Point" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::Point LogicalPointToClient(System::Drawing::Point logicalPoint);" />
      <MemberSignature Language="F#" Value="member this.LogicalPointToClient : System.Drawing.Point -&gt; System.Drawing.Point" Usage="workflowView.LogicalPointToClient logicalPoint" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Point</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="logicalPoint" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="logicalPoint">要转换到工作区坐标的 <see cref="T:System.Drawing.Point" />。</param>
        <summary>将 <see cref="T:System.Drawing.Point" /> 从逻辑坐标转换到工作区坐标。</summary>
        <returns>已从逻辑坐标转换到工作区坐标的 <see cref="T:System.Drawing.Point" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Workflow.ComponentModel.Design.WorkflowView> 使用两个坐标空间：逻辑和工作区：  
  
-   工作区坐标相对于 <xref:System.Workflow.ComponentModel.Design.WorkflowView> 的左上角。 左上角的坐标是 0,0；在可视区域中，x 和 y 坐标沿垂直和水平方向增加。 工作区坐标系统受 <xref:System.Workflow.ComponentModel.Design.WorkflowView> 的缩放级别和滚动条位置的影响。  
  
 在逻辑坐标系统中，每个对象始终映射到 0,0。 该位置在垂直方向和水平方向不受缩放级别或滚动条位置的影响。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LogicalPointToScreen">
      <MemberSignature Language="C#" Value="public System.Drawing.Point LogicalPointToScreen (System.Drawing.Point logicalPoint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.Point LogicalPointToScreen(valuetype System.Drawing.Point logicalPoint) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.WorkflowView.LogicalPointToScreen(System.Drawing.Point)" />
      <MemberSignature Language="VB.NET" Value="Public Function LogicalPointToScreen (logicalPoint As Point) As Point" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::Point LogicalPointToScreen(System::Drawing::Point logicalPoint);" />
      <MemberSignature Language="F#" Value="member this.LogicalPointToScreen : System.Drawing.Point -&gt; System.Drawing.Point" Usage="workflowView.LogicalPointToScreen logicalPoint" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Point</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="logicalPoint" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="logicalPoint">要转换到屏幕坐标的 <see cref="T:System.Drawing.Point" />。</param>
        <summary>将 <see cref="T:System.Drawing.Point" /> 从逻辑坐标转换到屏幕坐标。</summary>
        <returns>已从逻辑坐标转换到屏幕坐标的 <see cref="T:System.Drawing.Point" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Workflow.ComponentModel.Design.WorkflowView> 使用两个坐标空间：逻辑和工作区：  
  
-   工作区坐标相对于 <xref:System.Workflow.ComponentModel.Design.WorkflowView> 的左上角。 左上角的坐标是 0,0；在可视区域中，x 和 y 坐标沿垂直和水平方向增加。 工作区坐标系统受 <xref:System.Workflow.ComponentModel.Design.WorkflowView> 的缩放级别和滚动条位置的影响。  
  
 在逻辑坐标系统中，每个对象始终映射到 0,0。 该位置在垂直方向和水平方向不受缩放级别或滚动条位置的影响。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LogicalRectangleToClient">
      <MemberSignature Language="C#" Value="public System.Drawing.Rectangle LogicalRectangleToClient (System.Drawing.Rectangle rectangle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.Rectangle LogicalRectangleToClient(valuetype System.Drawing.Rectangle rectangle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.WorkflowView.LogicalRectangleToClient(System.Drawing.Rectangle)" />
      <MemberSignature Language="VB.NET" Value="Public Function LogicalRectangleToClient (rectangle As Rectangle) As Rectangle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::Rectangle LogicalRectangleToClient(System::Drawing::Rectangle rectangle);" />
      <MemberSignature Language="F#" Value="member this.LogicalRectangleToClient : System.Drawing.Rectangle -&gt; System.Drawing.Rectangle" Usage="workflowView.LogicalRectangleToClient rectangle" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Rectangle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rectangle" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="rectangle">要转换到工作区坐标的 <see cref="T:System.Drawing.Rectangle" />。</param>
        <summary>将 <see cref="T:System.Drawing.Rectangle" /> 从逻辑坐标转换到工作区坐标。</summary>
        <returns>已从逻辑坐标转换到工作区坐标的 <see cref="T:System.Drawing.Rectangle" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Workflow.ComponentModel.Design.WorkflowView> 使用两个坐标空间：逻辑和工作区：  
  
-   工作区坐标相对于 <xref:System.Workflow.ComponentModel.Design.WorkflowView> 的左上角。 左上角的坐标是 0,0；在可视区域中，x 和 y 坐标沿垂直和水平方向增加。 工作区坐标系统受 <xref:System.Workflow.ComponentModel.Design.WorkflowView> 的缩放级别和滚动条位置的影响。  
  
 在逻辑坐标系统中，每个对象始终映射到 0,0。 该位置在垂直方向和水平方向不受缩放级别或滚动条位置的影响。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LogicalSizeToClient">
      <MemberSignature Language="C#" Value="public System.Drawing.Size LogicalSizeToClient (System.Drawing.Size logicalSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.Size LogicalSizeToClient(valuetype System.Drawing.Size logicalSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.WorkflowView.LogicalSizeToClient(System.Drawing.Size)" />
      <MemberSignature Language="VB.NET" Value="Public Function LogicalSizeToClient (logicalSize As Size) As Size" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::Size LogicalSizeToClient(System::Drawing::Size logicalSize);" />
      <MemberSignature Language="F#" Value="member this.LogicalSizeToClient : System.Drawing.Size -&gt; System.Drawing.Size" Usage="workflowView.LogicalSizeToClient logicalSize" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="logicalSize" Type="System.Drawing.Size" />
      </Parameters>
      <Docs>
        <param name="logicalSize">要转换到工作区坐标的 <see cref="T:System.Drawing.Size" />。</param>
        <summary>将 <see cref="T:System.Drawing.Size" /> 从逻辑坐标转换到工作区坐标。</summary>
        <returns>已从逻辑坐标转换到工作区坐标的 <see cref="T:System.Drawing.Size" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Workflow.ComponentModel.Design.WorkflowView> 使用两个坐标空间：逻辑和工作区：  
  
-   工作区坐标相对于 <xref:System.Workflow.ComponentModel.Design.WorkflowView> 的左上角。 左上角的坐标是 0,0；在可视区域中，x 和 y 坐标沿垂直和水平方向增加。 工作区坐标系统受 <xref:System.Workflow.ComponentModel.Design.WorkflowView> 的缩放级别和滚动条位置的影响。  
  
 在逻辑坐标系统中，每个对象始终映射到 0,0。 该位置在垂直方向和水平方向不受缩放级别或滚动条位置的影响。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnControlAdded">
      <MemberSignature Language="C#" Value="protected override void OnControlAdded (System.Windows.Forms.ControlEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnControlAdded(class System.Windows.Forms.ControlEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.WorkflowView.OnControlAdded(System.Windows.Forms.ControlEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnControlAdded (e As ControlEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnControlAdded(System::Windows::Forms::ControlEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnControlAdded : System.Windows.Forms.ControlEventArgs -&gt; unit" Usage="workflowView.OnControlAdded e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.ControlEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.Windows.Forms.ControlEventArgs" />。</param>
        <summary>在将控件添加到 <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" /> 时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 则在将子控件添加到 <xref:System.Workflow.ComponentModel.Design.WorkflowView.OnControlAdded%2A> 时将调用 <xref:System.Workflow.ComponentModel.Design.WorkflowView>。 子控件只允许为 <xref:System.Workflow.ComponentModel.Design.WorkflowView.HScrollBar%2A> 和 <xref:System.Workflow.ComponentModel.Design.WorkflowView.VScrollBar%2A> 控件。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">如果添加的控件不是 <see cref="P:System.Workflow.ComponentModel.Design.WorkflowView.HScrollBar" /> 或 <see cref="P:System.Workflow.ComponentModel.Design.WorkflowView.VScrollBar" />，</exception>
      </Docs>
    </Member>
    <Member MemberName="OnDragDrop">
      <MemberSignature Language="C#" Value="protected override void OnDragDrop (System.Windows.Forms.DragEventArgs dragEventArgs);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnDragDrop(class System.Windows.Forms.DragEventArgs dragEventArgs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.WorkflowView.OnDragDrop(System.Windows.Forms.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnDragDrop (dragEventArgs As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnDragDrop(System::Windows::Forms::DragEventArgs ^ dragEventArgs);" />
      <MemberSignature Language="F#" Value="override this.OnDragDrop : System.Windows.Forms.DragEventArgs -&gt; unit" Usage="workflowView.OnDragDrop dragEventArgs" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dragEventArgs" Type="System.Windows.Forms.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="dragEventArgs">为事件提供数据的 <see cref="T:System.Windows.Forms.DragEventArgs" />。</param>
        <summary>在将拖动的项放置到 <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" /> 上时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当用户在拖动操作过程中在 <xref:System.Workflow.ComponentModel.Design.WorkflowView.OnDragDrop%2A> 上释放鼠标按钮时发生 <xref:System.Workflow.ComponentModel.Design.WorkflowView>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnDragEnter">
      <MemberSignature Language="C#" Value="protected override void OnDragEnter (System.Windows.Forms.DragEventArgs dragEventArgs);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnDragEnter(class System.Windows.Forms.DragEventArgs dragEventArgs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.WorkflowView.OnDragEnter(System.Windows.Forms.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnDragEnter (dragEventArgs As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnDragEnter(System::Windows::Forms::DragEventArgs ^ dragEventArgs);" />
      <MemberSignature Language="F#" Value="override this.OnDragEnter : System.Windows.Forms.DragEventArgs -&gt; unit" Usage="workflowView.OnDragEnter dragEventArgs" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dragEventArgs" Type="System.Windows.Forms.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="dragEventArgs">为事件提供数据的 <see cref="T:System.Windows.Forms.DragEventArgs" />。</param>
        <summary>在将项拖入 <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" /> 边界时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当用户在拖动操作过程中首次将鼠标光标拖到 <xref:System.Workflow.ComponentModel.Design.WorkflowView.OnDragEnter%2A> 上时发生 <xref:System.Workflow.ComponentModel.Design.WorkflowView>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnDragLeave">
      <MemberSignature Language="C#" Value="protected override void OnDragLeave (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnDragLeave(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.WorkflowView.OnDragLeave(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnDragLeave (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnDragLeave(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnDragLeave : EventArgs -&gt; unit" Usage="workflowView.OnDragLeave e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">为事件提供数据的 <see cref="T:System.EventArgs" />。</param>
        <summary>当光标在拖动操作过程中离开 <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" /> 时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当用户在拖动操作过程中将鼠标光标拖出 <xref:System.Workflow.ComponentModel.Design.WorkflowView.OnDragLeave%2A> 时发生 <xref:System.Workflow.ComponentModel.Design.WorkflowView>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnDragOver">
      <MemberSignature Language="C#" Value="protected override void OnDragOver (System.Windows.Forms.DragEventArgs dragEventArgs);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnDragOver(class System.Windows.Forms.DragEventArgs dragEventArgs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.WorkflowView.OnDragOver(System.Windows.Forms.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnDragOver (dragEventArgs As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnDragOver(System::Windows::Forms::DragEventArgs ^ dragEventArgs);" />
      <MemberSignature Language="F#" Value="override this.OnDragOver : System.Windows.Forms.DragEventArgs -&gt; unit" Usage="workflowView.OnDragOver dragEventArgs" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dragEventArgs" Type="System.Windows.Forms.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="dragEventArgs">为事件提供数据的 <see cref="T:System.Windows.Forms.DragEventArgs" />。</param>
        <summary>当正在执行拖放操作且指针位于 <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" /> 边界内时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当鼠标光标在 <xref:System.Workflow.ComponentModel.Design.WorkflowView.OnDragOver%2A> 的边界内移动时发生 <xref:System.Workflow.ComponentModel.Design.WorkflowView>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnGiveFeedback">
      <MemberSignature Language="C#" Value="protected override void OnGiveFeedback (System.Windows.Forms.GiveFeedbackEventArgs gfbevent);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnGiveFeedback(class System.Windows.Forms.GiveFeedbackEventArgs gfbevent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.WorkflowView.OnGiveFeedback(System.Windows.Forms.GiveFeedbackEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnGiveFeedback (gfbevent As GiveFeedbackEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnGiveFeedback(System::Windows::Forms::GiveFeedbackEventArgs ^ gfbevent);" />
      <MemberSignature Language="F#" Value="override this.OnGiveFeedback : System.Windows.Forms.GiveFeedbackEventArgs -&gt; unit" Usage="workflowView.OnGiveFeedback gfbevent" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gfbevent" Type="System.Windows.Forms.GiveFeedbackEventArgs" />
      </Parameters>
      <Docs>
        <param name="gfbevent">为事件提供数据的 <see cref="T:System.Windows.Forms.GiveFeedbackEventArgs" />。</param>
        <summary>在执行拖动操作期间发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在拖动操作开始时发生 <xref:System.Workflow.ComponentModel.Design.WorkflowView.OnGiveFeedback%2A>。 <xref:System.Workflow.ComponentModel.Design.WorkflowView.OnGiveFeedback%2A> 使拖动操作源可以修改鼠标指针的外观，以便在拖动操作过程中为用户提供直观反馈。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnKeyDown">
      <MemberSignature Language="C#" Value="protected override void OnKeyDown (System.Windows.Forms.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnKeyDown(class System.Windows.Forms.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.WorkflowView.OnKeyDown(System.Windows.Forms.KeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnKeyDown (e As KeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnKeyDown(System::Windows::Forms::KeyEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnKeyDown : System.Windows.Forms.KeyEventArgs -&gt; unit" Usage="workflowView.OnKeyDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">为事件提供数据的 <see cref="T:System.Windows.Forms.KeyEventArgs" />。</param>
        <summary>在 <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" /> 具有焦点的情况下按下某个键时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在 <xref:System.Workflow.ComponentModel.Design.WorkflowView.OnKeyDown%2A> 具有焦点的情况下按下某个键时发生 <xref:System.Workflow.ComponentModel.Design.WorkflowView>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnKeyUp">
      <MemberSignature Language="C#" Value="protected override void OnKeyUp (System.Windows.Forms.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnKeyUp(class System.Windows.Forms.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.WorkflowView.OnKeyUp(System.Windows.Forms.KeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnKeyUp (e As KeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnKeyUp(System::Windows::Forms::KeyEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnKeyUp : System.Windows.Forms.KeyEventArgs -&gt; unit" Usage="workflowView.OnKeyUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">一个 <see cref="T:System.Windows.Forms.KeyEventArgs" />，它提供有关事件的数据。</param>
        <summary>在 <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" /> 具有焦点的情况下释放某个键时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在 <xref:System.Workflow.ComponentModel.Design.WorkflowView.OnKeyUp%2A> 具有焦点的情况下释放某个键时发生 <xref:System.Workflow.ComponentModel.Design.WorkflowView>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnLayout">
      <MemberSignature Language="C#" Value="protected override void OnLayout (System.Windows.Forms.LayoutEventArgs levent);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnLayout(class System.Windows.Forms.LayoutEventArgs levent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.WorkflowView.OnLayout(System.Windows.Forms.LayoutEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnLayout (levent As LayoutEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnLayout(System::Windows::Forms::LayoutEventArgs ^ levent);" />
      <MemberSignature Language="F#" Value="override this.OnLayout : System.Windows.Forms.LayoutEventArgs -&gt; unit" Usage="workflowView.OnLayout levent" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="levent" Type="System.Windows.Forms.LayoutEventArgs" />
      </Parameters>
      <Docs>
        <param name="levent">为事件提供数据的 <see cref="T:System.Windows.Forms.LayoutEventArgs" />。</param>
        <summary>在 <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" /> 应重新定位其子控件时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在添加或移除子控件、<xref:System.Workflow.ComponentModel.Design.WorkflowView.OnLayout%2A> 的边界改变以及在发生其他可影响 <xref:System.Workflow.ComponentModel.Design.WorkflowView> 布局的变化时，将发生 <xref:System.Workflow.ComponentModel.Design.WorkflowView>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseCaptureChanged">
      <MemberSignature Language="C#" Value="protected override void OnMouseCaptureChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnMouseCaptureChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.WorkflowView.OnMouseCaptureChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnMouseCaptureChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnMouseCaptureChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnMouseCaptureChanged : EventArgs -&gt; unit" Usage="workflowView.OnMouseCaptureChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">一个 <see cref="T:System.EventArgs" />，它提供有关事件的数据。</param>
        <summary>当通过拖动鼠标选择的项更改时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当用户使用鼠标进行的选择与任何现有的选择不同时发生 <xref:System.Workflow.ComponentModel.Design.WorkflowView.OnMouseCaptureChanged%2A>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseDoubleClick">
      <MemberSignature Language="C#" Value="protected override void OnMouseDoubleClick (System.Windows.Forms.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnMouseDoubleClick(class System.Windows.Forms.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.WorkflowView.OnMouseDoubleClick(System.Windows.Forms.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnMouseDoubleClick (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnMouseDoubleClick(System::Windows::Forms::MouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnMouseDoubleClick : System.Windows.Forms.MouseEventArgs -&gt; unit" Usage="workflowView.OnMouseDoubleClick e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">一个 <see cref="T:System.Windows.Forms.MouseEventArgs" />，包含有关事件的信息。</param>
        <summary>在双击 <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" /> 按钮时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 双击操作由操作系统的鼠标设置确定。 用户可以设置两次单击鼠标按钮之间的时间以便将这两次单击认为是双击而不是两次单击。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseDown">
      <MemberSignature Language="C#" Value="protected override void OnMouseDown (System.Windows.Forms.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnMouseDown(class System.Windows.Forms.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.WorkflowView.OnMouseDown(System.Windows.Forms.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnMouseDown (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnMouseDown(System::Windows::Forms::MouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnMouseDown : System.Windows.Forms.MouseEventArgs -&gt; unit" Usage="workflowView.OnMouseDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">一个 <see cref="T:System.Windows.Forms.MouseEventArgs" />，包含有关事件的信息。</param>
        <summary>当鼠标指针位于 <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" /> 之上且按下鼠标按钮时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 鼠标事件按下列顺序发生：  
  
 1.<xref:System.Workflow.ComponentModel.Design.WorkflowView.OnMouseEnter%2A>  
  
 2.<xref:System.Workflow.ComponentModel.Design.WorkflowView.OnMouseMove%2A>  
  
 3.<xref:System.Workflow.ComponentModel.Design.WorkflowView.OnMouseHover%2A>/ <xref:System.Workflow.ComponentModel.Design.WorkflowView.OnMouseDown%2A> 或 <xref:System.Workflow.ComponentModel.Design.WorkflowView.OnMouseWheel%2A>  
  
 4.<xref:System.Workflow.ComponentModel.Design.WorkflowView.OnMouseUp%2A>  
  
 5.<xref:System.Workflow.ComponentModel.Design.WorkflowView.OnMouseLeave%2A>  
  
 当鼠标指针进入 `OnMouseEnter` 时发生 <xref:System.Workflow.ComponentModel.Design.WorkflowView>。  
  
 当鼠标指针位于控件 `OnMouseDown` 上并按下鼠标键时发生 <xref:System.Workflow.ComponentModel.Design.WorkflowView>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseEnter">
      <MemberSignature Language="C#" Value="protected override void OnMouseEnter (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnMouseEnter(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.WorkflowView.OnMouseEnter(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnMouseEnter (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnMouseEnter(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnMouseEnter : EventArgs -&gt; unit" Usage="workflowView.OnMouseEnter e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">一个 <see cref="T:System.EventArgs" />，包含有关事件的信息。</param>
        <summary>当鼠标指针进入 <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" /> 时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 鼠标事件按下列顺序发生：  
  
 1.<xref:System.Workflow.ComponentModel.Design.WorkflowView.OnMouseEnter%2A>  
  
 2.<xref:System.Workflow.ComponentModel.Design.WorkflowView.OnMouseMove%2A>  
  
 3.<xref:System.Workflow.ComponentModel.Design.WorkflowView.OnMouseHover%2A> 或 <xref:System.Workflow.ComponentModel.Design.WorkflowView.OnMouseDown%2A> 或 <xref:System.Workflow.ComponentModel.Design.WorkflowView.OnMouseWheel%2A>  
  
 4.<xref:System.Workflow.ComponentModel.Design.WorkflowView.OnMouseUp%2A>  
  
 5.<xref:System.Workflow.ComponentModel.Design.WorkflowView.OnMouseLeave%2A>  
  
 当鼠标指针进入 <xref:System.Workflow.ComponentModel.Design.WorkflowView.OnMouseEnter%2A> 时发生 <xref:System.Workflow.ComponentModel.Design.WorkflowView>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseHover">
      <MemberSignature Language="C#" Value="protected override void OnMouseHover (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnMouseHover(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.WorkflowView.OnMouseHover(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnMouseHover (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnMouseHover(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnMouseHover : EventArgs -&gt; unit" Usage="workflowView.OnMouseHover e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">一个 <see cref="T:System.EventArgs" />，包含有关事件的信息。</param>
        <summary>当鼠标悬停在 <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" /> 上时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 鼠标事件按下列顺序发生：  
  
 1.<xref:System.Workflow.ComponentModel.Design.WorkflowView.OnMouseEnter%2A>  
  
 2.<xref:System.Workflow.ComponentModel.Design.WorkflowView.OnMouseMove%2A>  
  
 3.<xref:System.Workflow.ComponentModel.Design.WorkflowView.OnMouseHover%2A> 或 <xref:System.Workflow.ComponentModel.Design.WorkflowView.OnMouseDown%2A> 或 <xref:System.Workflow.ComponentModel.Design.WorkflowView.OnMouseWheel%2A>  
  
 4.<xref:System.Workflow.ComponentModel.Design.WorkflowView.OnMouseUp%2A>  
  
 5.<xref:System.Workflow.ComponentModel.Design.WorkflowView.OnMouseLeave%2A>  
  
 当鼠标悬停在 <xref:System.Workflow.ComponentModel.Design.WorkflowView.OnMouseHover%2A> 上时发生 <xref:System.Workflow.ComponentModel.Design.WorkflowView>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseLeave">
      <MemberSignature Language="C#" Value="protected override void OnMouseLeave (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnMouseLeave(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.WorkflowView.OnMouseLeave(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnMouseLeave (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnMouseLeave(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnMouseLeave : EventArgs -&gt; unit" Usage="workflowView.OnMouseLeave e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">一个 <see cref="T:System.EventArgs" />，包含有关事件的信息。</param>
        <summary>当鼠标指针离开 <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" /> 时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 鼠标事件按下列顺序发生：  
  
 1.<xref:System.Workflow.ComponentModel.Design.WorkflowView.OnMouseEnter%2A>  
  
 2.<xref:System.Workflow.ComponentModel.Design.WorkflowView.OnMouseMove%2A>  
  
 3.<xref:System.Workflow.ComponentModel.Design.WorkflowView.OnMouseHover%2A> 或 <xref:System.Workflow.ComponentModel.Design.WorkflowView.OnMouseDown%2A> 或 <xref:System.Workflow.ComponentModel.Design.WorkflowView.OnMouseWheel%2A>  
  
 4.<xref:System.Workflow.ComponentModel.Design.WorkflowView.OnMouseUp%2A>  
  
 5.<xref:System.Workflow.ComponentModel.Design.WorkflowView.OnMouseLeave%2A>  
  
 当鼠标指针离开 <xref:System.Workflow.ComponentModel.Design.WorkflowView.OnMouseLeave%2A> 时发生 <xref:System.Workflow.ComponentModel.Design.WorkflowView>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseMove">
      <MemberSignature Language="C#" Value="protected override void OnMouseMove (System.Windows.Forms.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnMouseMove(class System.Windows.Forms.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.WorkflowView.OnMouseMove(System.Windows.Forms.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnMouseMove (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnMouseMove(System::Windows::Forms::MouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnMouseMove : System.Windows.Forms.MouseEventArgs -&gt; unit" Usage="workflowView.OnMouseMove e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">一个 <see cref="T:System.Windows.Forms.MouseEventArgs" />，包含有关事件的信息。</param>
        <summary>当鼠标移动到 <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" /> 上时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 鼠标事件按下列顺序发生：  
  
 1.<xref:System.Workflow.ComponentModel.Design.WorkflowView.OnMouseEnter%2A>  
  
 2.<xref:System.Workflow.ComponentModel.Design.WorkflowView.OnMouseMove%2A>  
  
 3.<xref:System.Workflow.ComponentModel.Design.WorkflowView.OnMouseHover%2A> 或 <xref:System.Workflow.ComponentModel.Design.WorkflowView.OnMouseDown%2A> 或 <xref:System.Workflow.ComponentModel.Design.WorkflowView.OnMouseWheel%2A>  
  
 4.<xref:System.Workflow.ComponentModel.Design.WorkflowView.OnMouseUp%2A>  
  
 5.<xref:System.Workflow.ComponentModel.Design.WorkflowView.OnMouseLeave%2A>  
  
 当鼠标指针移动到 <xref:System.Workflow.ComponentModel.Design.WorkflowView.OnMouseMove%2A> 上时发生 <xref:System.Workflow.ComponentModel.Design.WorkflowView>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseUp">
      <MemberSignature Language="C#" Value="protected override void OnMouseUp (System.Windows.Forms.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnMouseUp(class System.Windows.Forms.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.WorkflowView.OnMouseUp(System.Windows.Forms.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnMouseUp (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnMouseUp(System::Windows::Forms::MouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnMouseUp : System.Windows.Forms.MouseEventArgs -&gt; unit" Usage="workflowView.OnMouseUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">一个 <see cref="T:System.Windows.Forms.MouseEventArgs" />，包含有关事件的信息。</param>
        <summary>在 <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" /> 上释放鼠标按钮时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 鼠标事件按下列顺序发生：  
  
 1.<xref:System.Workflow.ComponentModel.Design.WorkflowView.OnMouseEnter%2A>  
  
 2.<xref:System.Workflow.ComponentModel.Design.WorkflowView.OnMouseMove%2A>  
  
 3.<xref:System.Workflow.ComponentModel.Design.WorkflowView.OnMouseHover%2A> 或 <xref:System.Workflow.ComponentModel.Design.WorkflowView.OnMouseDown%2A> 或 <xref:System.Workflow.ComponentModel.Design.WorkflowView.OnMouseWheel%2A>  
  
 4.<xref:System.Workflow.ComponentModel.Design.WorkflowView.OnMouseUp%2A>  
  
 5.<xref:System.Workflow.ComponentModel.Design.WorkflowView.OnMouseLeave%2A>  
  
 当鼠标指针在 <xref:System.Workflow.ComponentModel.Design.WorkflowView.OnMouseUp%2A> 上并释放鼠标键时发生 <xref:System.Workflow.ComponentModel.Design.WorkflowView>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseWheel">
      <MemberSignature Language="C#" Value="protected override void OnMouseWheel (System.Windows.Forms.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnMouseWheel(class System.Windows.Forms.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.WorkflowView.OnMouseWheel(System.Windows.Forms.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnMouseWheel (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnMouseWheel(System::Windows::Forms::MouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnMouseWheel : System.Windows.Forms.MouseEventArgs -&gt; unit" Usage="workflowView.OnMouseWheel e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">一个 <see cref="T:System.Windows.Forms.MouseEventArgs" />，包含有关事件的信息。</param>
        <summary>在移动鼠标滚轮并且 <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" /> 具有焦点时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 鼠标事件按下列顺序发生：  
  
 1.<xref:System.Workflow.ComponentModel.Design.WorkflowView.OnMouseEnter%2A>  
  
 2.<xref:System.Workflow.ComponentModel.Design.WorkflowView.OnMouseMove%2A>  
  
 3.<xref:System.Workflow.ComponentModel.Design.WorkflowView.OnMouseHover%2A> 或 <xref:System.Workflow.ComponentModel.Design.WorkflowView.OnMouseDown%2A> 或 <xref:System.Workflow.ComponentModel.Design.WorkflowView.OnMouseWheel%2A>  
  
 4.<xref:System.Workflow.ComponentModel.Design.WorkflowView.OnMouseUp%2A>  
  
 5.<xref:System.Workflow.ComponentModel.Design.WorkflowView.OnMouseLeave%2A>  
  
 当鼠标滚轮移到 <xref:System.Workflow.ComponentModel.Design.WorkflowView.OnMouseWheel%2A> 上时发生 <xref:System.Workflow.ComponentModel.Design.WorkflowView>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPaint">
      <MemberSignature Language="C#" Value="protected override void OnPaint (System.Windows.Forms.PaintEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnPaint(class System.Windows.Forms.PaintEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.WorkflowView.OnPaint(System.Windows.Forms.PaintEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnPaint (e As PaintEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnPaint(System::Windows::Forms::PaintEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnPaint : System.Windows.Forms.PaintEventArgs -&gt; unit" Usage="workflowView.OnPaint e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.PaintEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">一个 <see cref="T:System.Windows.Forms.PaintEventArgs" />，包含有关事件的信息。</param>
        <summary>在重绘 <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" /> 时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在重绘 <xref:System.Workflow.ComponentModel.Design.WorkflowView.OnPaint%2A> 时发生 <xref:System.Workflow.ComponentModel.Design.WorkflowView>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnQueryContinueDrag">
      <MemberSignature Language="C#" Value="protected override void OnQueryContinueDrag (System.Windows.Forms.QueryContinueDragEventArgs qcdevent);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnQueryContinueDrag(class System.Windows.Forms.QueryContinueDragEventArgs qcdevent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.WorkflowView.OnQueryContinueDrag(System.Windows.Forms.QueryContinueDragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnQueryContinueDrag (qcdevent As QueryContinueDragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnQueryContinueDrag(System::Windows::Forms::QueryContinueDragEventArgs ^ qcdevent);" />
      <MemberSignature Language="F#" Value="override this.OnQueryContinueDrag : System.Windows.Forms.QueryContinueDragEventArgs -&gt; unit" Usage="workflowView.OnQueryContinueDrag qcdevent" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="qcdevent" Type="System.Windows.Forms.QueryContinueDragEventArgs" />
      </Parameters>
      <Docs>
        <param name="qcdevent">一个 <see cref="T:System.Windows.Forms.QueryContinueDragEventArgs" />，包含有关事件的信息。</param>
        <summary>在拖动操作期间发生，并且允许拖动源确定是否应取消拖动操作。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在拖动操作过程中，当键盘或鼠标按钮状态发生变化时，会引发 <xref:System.Workflow.ComponentModel.Design.WorkflowView.OnQueryContinueDrag%2A> 事件。 <xref:System.Workflow.ComponentModel.Design.WorkflowView.OnQueryContinueDrag%2A> 事件允许拖动源确定是否应取消拖放操作。  
  
 当控件是有效的放置目标时引发与拖动操作相关的事件。 以指定的拖动效果引发 <xref:System.Workflow.ComponentModel.Design.WorkflowView.OnGiveFeedback%2A> 事件。 有关拖动效果的列表，请参见 <xref:System.Windows.Forms.DragDropEffects> 枚举。  
  
 跟踪鼠标光标位置、键盘状态和鼠标按钮状态的更改。  
  
-   如果用户移出一个窗口，则引发 <xref:System.Workflow.ComponentModel.Design.WorkflowView.OnDragLeave%2A> 事件。  
  
-   如果鼠标进入另一个控件，则引发该控件的 <xref:System.Workflow.ComponentModel.Design.WorkflowView.OnDragEnter%2A>。  
  
-   如果鼠标移动但停留在同一个控件中，则引发 <xref:System.Workflow.ComponentModel.Design.WorkflowView.OnDragOver%2A> 事件。  
  
 如果键盘或鼠标按钮状态发生了更改，则引发 <xref:System.Workflow.ComponentModel.Design.WorkflowView.OnQueryContinueDrag%2A> 事件并根据事件 `Action` 的 <xref:System.Windows.Forms.QueryContinueDragEventArgs> 属性值确定是否继续拖动、放置数据或取消操作。  
  
 如果该值为 `DragAction.Continue`，则会引发 <xref:System.Workflow.ComponentModel.Design.WorkflowView.OnDragOver%2A> 事件以继续操作，并引发 <xref:System.Workflow.ComponentModel.Design.WorkflowView.OnGiveFeedback%2A> 事件以产生新效果，从而能够设置适当的视觉反馈。 有关有效放置效果的列表，请参见 <xref:System.Windows.Forms.DragDropEffects> 枚举。  
  
> [!NOTE]
>  <xref:System.Workflow.ComponentModel.Design.WorkflowView.OnDragOver%2A> 和 <xref:System.Workflow.ComponentModel.Design.WorkflowView.OnGiveFeedback%2A> 事件成对出现，从而当鼠标从放置目标上移动时，就能够为用户提供有关鼠标位置的最新反馈。  
  
 如果该值为 `DragAction.Drop`，则放置效果值将返回到源，以便源应用程序可以对源数据执行适当的操作；例如，如果是移动操作，则剪切数据。  
  
 如果该值为 `DragAction.Cancel`，则会引发 <xref:System.Workflow.ComponentModel.Design.WorkflowView.OnDragLeave%2A> 事件。  
  
 默认情况下，如果按 Esc 键，则 <xref:System.Workflow.ComponentModel.Design.WorkflowView.OnQueryContinueDrag%2A> 事件将 `Action` 设置为 `DragAction.Cancel`；如果按鼠标左键、中键或右键，则将 `Action` 设置为 `DragAction.Drop`。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnRootDesignerChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnRootDesignerChanged ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRootDesignerChanged() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.WorkflowView.OnRootDesignerChanged" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnRootDesignerChanged ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnRootDesignerChanged();" />
      <MemberSignature Language="F#" Value="abstract member OnRootDesignerChanged : unit -&gt; unit&#xA;override this.OnRootDesignerChanged : unit -&gt; unit" Usage="workflowView.OnRootDesignerChanged " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>在将其他设计器设置为设计图面的新根设计器时调用。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnZoomChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnZoomChanged ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnZoomChanged() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.WorkflowView.OnZoomChanged" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnZoomChanged ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnZoomChanged();" />
      <MemberSignature Language="F#" Value="abstract member OnZoomChanged : unit -&gt; unit&#xA;override this.OnZoomChanged : unit -&gt; unit" Usage="workflowView.OnZoomChanged " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>当缩放级别更改时调用。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PerformLayout">
      <MemberSignature Language="C#" Value="public void PerformLayout (bool immediateUpdate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void PerformLayout(bool immediateUpdate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.WorkflowView.PerformLayout(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub PerformLayout (immediateUpdate As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void PerformLayout(bool immediateUpdate);" />
      <MemberSignature Language="F#" Value="override this.PerformLayout : bool -&gt; unit" Usage="workflowView.PerformLayout immediateUpdate" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="immediateUpdate" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="immediateUpdate">如果让布局立即更新，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
        <summary>强制 <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" /> 将布局逻辑应用于其所有子控件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Workflow.ComponentModel.Design.WorkflowView.PerformLayout%2A> 更新 <xref:System.Workflow.ComponentModel.Design.WorkflowView> 中的所有子控件，根据需要移动它们和调整它们的大小。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PrintDocument">
      <MemberSignature Language="C#" Value="public System.Drawing.Printing.PrintDocument PrintDocument { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Drawing.Printing.PrintDocument PrintDocument" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.ComponentModel.Design.WorkflowView.PrintDocument" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PrintDocument As PrintDocument" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Printing::PrintDocument ^ PrintDocument { System::Drawing::Printing::PrintDocument ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.PrintDocument : System.Drawing.Printing.PrintDocument" Usage="System.Workflow.ComponentModel.Design.WorkflowView.PrintDocument" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Printing.PrintDocument</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取与 <see cref="T:System.Drawing.Printing.PrintDocument" /> 关联的 <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" />。</summary>
        <value>将输出发送到打印机的 <see cref="P:System.Workflow.ComponentModel.Design.WorkflowView.PrintDocument" /> 对象。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用 <xref:System.Workflow.ComponentModel.Design.WorkflowView.PrintDocument%2A> 对象设置描述打印方式的属性，然后调用 `Print` 方法开始打印进程。  
  
   
  
## Examples  
 下面的示例演示如何检索 <xref:System.Drawing.Printing.PrintDocument> 对象、显示 <xref:System.Windows.Forms.PrintDialog> 和关联用户在打印文档前选择的 <xref:System.Drawing.Printing.PrinterSettings>。  
  
 [!code-csharp[Wf_samples#56](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#56)]
 [!code-vb[Wf_samples#56](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#56)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PrintPreviewMode">
      <MemberSignature Language="C#" Value="public bool PrintPreviewMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool PrintPreviewMode" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.ComponentModel.Design.WorkflowView.PrintPreviewMode" />
      <MemberSignature Language="VB.NET" Value="Public Property PrintPreviewMode As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool PrintPreviewMode { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.PrintPreviewMode : bool with get, set" Usage="System.Workflow.ComponentModel.Design.WorkflowView.PrintPreviewMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" /> 的打印预览模式。</summary>
        <value>如果打印预览模式处于活动状态，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的示例演示如何更改 WorkflowView 对象，以便它在打印预览模式中显示当前的工作流。  
  
 [!code-csharp[wf_samples#57](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#57)]
 [!code-vb[wf_samples#57](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#57)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveDesignerMessageFilter">
      <MemberSignature Language="C#" Value="public void RemoveDesignerMessageFilter (System.Workflow.ComponentModel.Design.WorkflowDesignerMessageFilter designerMessageFilter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveDesignerMessageFilter(class System.Workflow.ComponentModel.Design.WorkflowDesignerMessageFilter designerMessageFilter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.WorkflowView.RemoveDesignerMessageFilter(System.Workflow.ComponentModel.Design.WorkflowDesignerMessageFilter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveDesignerMessageFilter (designerMessageFilter As WorkflowDesignerMessageFilter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveDesignerMessageFilter(System::Workflow::ComponentModel::Design::WorkflowDesignerMessageFilter ^ designerMessageFilter);" />
      <MemberSignature Language="F#" Value="member this.RemoveDesignerMessageFilter : System.Workflow.ComponentModel.Design.WorkflowDesignerMessageFilter -&gt; unit" Usage="workflowView.RemoveDesignerMessageFilter designerMessageFilter" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="designerMessageFilter" Type="System.Workflow.ComponentModel.Design.WorkflowDesignerMessageFilter" />
      </Parameters>
      <Docs>
        <param name="designerMessageFilter">要从 <see cref="T:System.Workflow.ComponentModel.Design.WorkflowDesignerMessageFilter" /> 移除的 <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" />。</param>
        <summary>移除关联的 <see cref="T:System.Workflow.ComponentModel.Design.WorkflowDesignerMessageFilter" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用 <xref:System.Workflow.ComponentModel.Design.WorkflowDesignerMessageFilter> 可以响应设计器事件（如拖动事件）。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RootDesigner">
      <MemberSignature Language="C#" Value="public System.Workflow.ComponentModel.Design.ActivityDesigner RootDesigner { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Workflow.ComponentModel.Design.ActivityDesigner RootDesigner" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.ComponentModel.Design.WorkflowView.RootDesigner" />
      <MemberSignature Language="VB.NET" Value="Public Property RootDesigner As ActivityDesigner" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Workflow::ComponentModel::Design::ActivityDesigner ^ RootDesigner { System::Workflow::ComponentModel::Design::ActivityDesigner ^ get(); void set(System::Workflow::ComponentModel::Design::ActivityDesigner ^ value); };" />
      <MemberSignature Language="F#" Value="member this.RootDesigner : System.Workflow.ComponentModel.Design.ActivityDesigner with get, set" Usage="System.Workflow.ComponentModel.Design.WorkflowView.RootDesigner" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.ComponentModel.Design.ActivityDesigner</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" /> 的根设计器。</summary>
        <value>与 <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> 关联的 <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 工作流的根设计器是与工作流的设计图面关联的设计器。 它包含所有子设计器，以及随后工作流中所有的活动。  
  
   
  
## Examples  
 下面的示例演示如何检索 WorkflowView 对象的 RootDesigner。 workflowPanel 字段包含一个名为 GetWorkflowView 的方法，该方法返回活动的 WorkflowView 实例。 然后，在对 RootDesigner 进行任何操作前将其转换为 SequentialWorkflowRootDesigner。  
  
 此代码示例摘自 DesignerShell.cs 文件中的基本 DesignerHosting SDK 示例。 有关详细信息，请参阅[基本设计器宿主示例](https://docs.microsoft.com/previous-versions/dotnet/netframework-3.5/ms741708(v=vs.90))。  
  
 [!code-csharp[wf_samples#236](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#236)]
 [!code-vb[wf_samples#236](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#236)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RootDesignerChanged">
      <MemberSignature Language="C#" Value="public event EventHandler RootDesignerChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler RootDesignerChanged" />
      <MemberSignature Language="DocId" Value="E:System.Workflow.ComponentModel.Design.WorkflowView.RootDesignerChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event RootDesignerChanged As EventHandler " FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ RootDesignerChanged;" />
      <MemberSignature Language="F#" Value="member this.RootDesignerChanged : EventHandler " Usage="member this.RootDesignerChanged : System.EventHandler " />
      <MemberSignature Language="VB.NET" Value="Public Event RootDesignerChanged As EventHandler " FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当更改根设计器时引发。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SaveViewState">
      <MemberSignature Language="C#" Value="public void SaveViewState (System.IO.Stream viewState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SaveViewState(class System.IO.Stream viewState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.WorkflowView.SaveViewState(System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SaveViewState (viewState As Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SaveViewState(System::IO::Stream ^ viewState);" />
      <MemberSignature Language="F#" Value="member this.SaveViewState : System.IO.Stream -&gt; unit" Usage="workflowView.SaveViewState viewState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="viewState" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="viewState">一个 <see cref="T:System.IO.BinaryReader" />，用于存储视图状态。</param>
        <summary>将视图状态保存到二进制流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 视图状态是视图的属性值和子控件的累计。 属性值在保存后保留到流中，可以使用 <xref:System.Workflow.ComponentModel.Design.WorkflowView.LoadViewState%2A> 方法将其还原。  
  
   
  
## Examples  
 下面的示例演示如何通过使用 <xref:System.Workflow.ComponentModel.Design.WorkflowView> 标志创建 <xref:System.IO.FileStream> 对象并将其传递给 `FileMode.Create` 方法来保存 <xref:System.Workflow.ComponentModel.Design.WorkflowView.SaveViewState%2A> 对象的视图状态。 若要在以后加载此视图状态，请参见 <xref:System.Workflow.ComponentModel.Design.WorkflowView.LoadViewState%2A>。  
  
 [!code-csharp[wf_samples#59](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#59)]
 [!code-vb[wf_samples#59](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#59)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="SaveWorkflowImage">
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>根据指定的图像格式保存 <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" /> 的图像。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SaveWorkflowImage">
      <MemberSignature Language="C#" Value="public void SaveWorkflowImage (System.IO.Stream stream, System.Drawing.Imaging.ImageFormat imageFormat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SaveWorkflowImage(class System.IO.Stream stream, class System.Drawing.Imaging.ImageFormat imageFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.WorkflowView.SaveWorkflowImage(System.IO.Stream,System.Drawing.Imaging.ImageFormat)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SaveWorkflowImage (stream As Stream, imageFormat As ImageFormat)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SaveWorkflowImage(System::IO::Stream ^ stream, System::Drawing::Imaging::ImageFormat ^ imageFormat);" />
      <MemberSignature Language="F#" Value="member this.SaveWorkflowImage : System.IO.Stream * System.Drawing.Imaging.ImageFormat -&gt; unit" Usage="workflowView.SaveWorkflowImage (stream, imageFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="imageFormat" Type="System.Drawing.Imaging.ImageFormat" />
      </Parameters>
      <Docs>
        <param name="stream">要将工作流视图图像保存到的 <see cref="T:System.IO.Stream" />。</param>
        <param name="imageFormat">用以保存工作流视图图像的 <see cref="T:System.Drawing.Imaging.ImageFormat" />。</param>
        <summary>使用指定的图像格式将 <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" /> 的图像保存到指定的流中。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 工作流视图图像以位图格式创建。  
  
   
  
## Examples  
 下面的示例演示如何使用 <xref:System.IO.Stream> 保存当前加载的工作流图像。 在此示例中，创建 <xref:System.Windows.Forms.SaveFileDialog> 以提示用户输入要保存图像的文件名。 然后，使用此文件名创建 <xref:System.IO.FileStream> 对象并随即将其传递到 <xref:System.Workflow.ComponentModel.Design.WorkflowView.SaveWorkflowImage%2A> 方法。  
  
 [!code-csharp[wf_samples#63](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#63)]
 [!code-vb[wf_samples#63](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#63)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="stream" /> 或 <paramref name="imageFormat" /> 包含空引用（在 Visual Basic 中为 <see langword="Nothing" />）。</exception>
      </Docs>
    </Member>
    <Member MemberName="SaveWorkflowImage">
      <MemberSignature Language="C#" Value="public void SaveWorkflowImage (string imageFile, System.Drawing.Imaging.ImageFormat imageFormat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SaveWorkflowImage(string imageFile, class System.Drawing.Imaging.ImageFormat imageFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.WorkflowView.SaveWorkflowImage(System.String,System.Drawing.Imaging.ImageFormat)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SaveWorkflowImage (imageFile As String, imageFormat As ImageFormat)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SaveWorkflowImage(System::String ^ imageFile, System::Drawing::Imaging::ImageFormat ^ imageFormat);" />
      <MemberSignature Language="F#" Value="member this.SaveWorkflowImage : string * System.Drawing.Imaging.ImageFormat -&gt; unit" Usage="workflowView.SaveWorkflowImage (imageFile, imageFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="imageFile" Type="System.String" />
        <Parameter Name="imageFormat" Type="System.Drawing.Imaging.ImageFormat" />
      </Parameters>
      <Docs>
        <param name="imageFile">在其中保存工作流视图图像的文件的路径。</param>
        <param name="imageFormat">用以保存工作流视图图像的 <see cref="T:System.Drawing.Imaging.ImageFormat" />。</param>
        <summary>使用指定的图像格式将 <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" /> 的图像保存到指定的文件中。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 工作流视图图像以位图格式创建。  
  
   
  
## Examples  
 下面的示例演示如何使用 <xref:System.String> 保存当前加载的工作流图像。 在此示例中，创建 <xref:System.Windows.Forms.SaveFileDialog> 以提示用户输入要保存图像的文件名。 然后，将文件名和 `ImageFormat.Bmp` 标志传递给 <xref:System.Workflow.ComponentModel.Design.WorkflowView.SaveWorkflowImage%2A> 方法。  
  
 [!code-csharp[wf_samples#62](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#62)]
 [!code-vb[wf_samples#62](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#62)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="imageFile" /> 或 <paramref name="imageFormat" /> 包含空引用（在 Visual Basic 中为 <see langword="Nothing" />）。</exception>
      </Docs>
    </Member>
    <Member MemberName="SaveWorkflowImageToClipboard">
      <MemberSignature Language="C#" Value="public void SaveWorkflowImageToClipboard ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SaveWorkflowImageToClipboard() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.WorkflowView.SaveWorkflowImageToClipboard" />
      <MemberSignature Language="VB.NET" Value="Public Sub SaveWorkflowImageToClipboard ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SaveWorkflowImageToClipboard();" />
      <MemberSignature Language="F#" Value="member this.SaveWorkflowImageToClipboard : unit -&gt; unit" Usage="workflowView.SaveWorkflowImageToClipboard " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>将 WorkflowView 的图像保存到剪贴板。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ScreenPointToLogical">
      <MemberSignature Language="C#" Value="public System.Drawing.Point ScreenPointToLogical (System.Drawing.Point screenPoint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.Point ScreenPointToLogical(valuetype System.Drawing.Point screenPoint) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.WorkflowView.ScreenPointToLogical(System.Drawing.Point)" />
      <MemberSignature Language="VB.NET" Value="Public Function ScreenPointToLogical (screenPoint As Point) As Point" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::Point ScreenPointToLogical(System::Drawing::Point screenPoint);" />
      <MemberSignature Language="F#" Value="member this.ScreenPointToLogical : System.Drawing.Point -&gt; System.Drawing.Point" Usage="workflowView.ScreenPointToLogical screenPoint" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Point</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="screenPoint" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="screenPoint">要从屏幕坐标转换到逻辑坐标的 <see cref="T:System.Drawing.Point" />。</param>
        <summary>将 <see cref="T:System.Drawing.Point" /> 从屏幕坐标转换到逻辑坐标。</summary>
        <returns>已从屏幕坐标转换到逻辑坐标的 <see cref="T:System.Drawing.Point" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Workflow.ComponentModel.Design.WorkflowView> 使用两个坐标空间：逻辑和工作区：  
  
 工作区坐标相对于 <xref:System.Workflow.ComponentModel.Design.WorkflowView> 的左上角。 左上角的坐标是 0,0；在可视区域中，x 和 y 坐标沿垂直和水平方向增加。 工作区坐标系统受 <xref:System.Workflow.ComponentModel.Design.WorkflowView> 的缩放级别和滚动条位置的影响。  
  
 在逻辑坐标系统中，每个对象始终映射到 0,0。 该位置在垂直方向和水平方向不受缩放级别或滚动条位置的影响。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ScrollPosition">
      <MemberSignature Language="C#" Value="public System.Drawing.Point ScrollPosition { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Point ScrollPosition" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.ComponentModel.Design.WorkflowView.ScrollPosition" />
      <MemberSignature Language="VB.NET" Value="Public Property ScrollPosition As Point" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Point ScrollPosition { System::Drawing::Point get(); void set(System::Drawing::Point value); };" />
      <MemberSignature Language="F#" Value="member this.ScrollPosition : System.Drawing.Point with get, set" Usage="System.Workflow.ComponentModel.Design.WorkflowView.ScrollPosition" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Point</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置滚动条在 <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" /> 上的位置。</summary>
        <value>描述屏幕坐标中滚动条位置的点。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用 <xref:System.Workflow.ComponentModel.Design.WorkflowView.ScrollPosition%2A> 可以获取或调节设计图面中滚动条的位置。  
  
   
  
## Examples  
 下面的示例演示如何设置 <xref:System.Windows.Forms.Panel> 控件的 OnMouseMove 方法的实现内的 ScrollPosition 属性。  此示例摘自“Outlook 工作流向导”SDK 示例。  有关详细信息，请参阅[Outlook 工作流向导示例](https://msdn.microsoft.com/library/7b2ba92b-8456-43f3-87fc-184ffdec4408)。  
  
 [!code-csharp[wf_samples#105](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets1.cs#105)]
 [!code-vb[wf_samples#105](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets1.vb#105)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShadowDepth">
      <MemberSignature Language="C#" Value="public int ShadowDepth { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ShadowDepth" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.ComponentModel.Design.WorkflowView.ShadowDepth" />
      <MemberSignature Language="VB.NET" Value="Public Property ShadowDepth As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ShadowDepth { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.ShadowDepth : int with get, set" Usage="System.Workflow.ComponentModel.Design.WorkflowView.ShadowDepth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="P:System.Workflow.ComponentModel.Design.WorkflowView.ShadowDepth" /> 的 <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" />。</summary>
        <value>阴影深度，以像素为单位。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用 <xref:System.Workflow.ComponentModel.Design.WorkflowView.ShadowDepth%2A> 可以获取或调节工作流设计图面上显示的文本的阴影深度。  
  
   
  
## Examples  
 下面的代码示例演示如何使用 <xref:System.Workflow.ComponentModel.Design.WorkflowView> 方法来获取 <xref:System.ComponentModel.Design.IRootDesigner.GetView%2A> 类的实例。 代码随后设置若干 <xref:System.Workflow.ComponentModel.Design.WorkflowView> 属性，包括 <xref:System.Workflow.ComponentModel.Design.WorkflowView.HScrollBar%2A> 和 <xref:System.Workflow.ComponentModel.Design.WorkflowView.VScrollBar%2A>、<xref:System.Workflow.ComponentModel.Design.WorkflowView.ShadowDepth%2A>，然后调用 <xref:System.Workflow.ComponentModel.Design.WorkflowView.FitToScreenSize%2A> 方法。  
  
 [!code-csharp[Wf_samples#48](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#48)]
 [!code-vb[Wf_samples#48](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#48)]  
  
 在上面的代码中调用的 `UnloadWorkflow` 方法移除当前加载的工作流以便加载新的工作流，实现方法如下：  
  
 [!code-csharp[Wf_samples#49](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#49)]
 [!code-vb[Wf_samples#49](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#49)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ShowInfoTip">
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>显示 <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" /> 的信息提示。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 显示 <xref:System.Workflow.ComponentModel.Design.WorkflowView> 的信息提示。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="ShowInfoTip">
      <MemberSignature Language="C#" Value="public void ShowInfoTip (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ShowInfoTip(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.WorkflowView.ShowInfoTip(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ShowInfoTip (text As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ShowInfoTip(System::String ^ text);" />
      <MemberSignature Language="F#" Value="member this.ShowInfoTip : string -&gt; unit" Usage="workflowView.ShowInfoTip text" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">要在信息提示上显示的文本。</param>
        <summary>用指定的文本显示 <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" /> 的信息提示。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 用指定的文本显示 <xref:System.Workflow.ComponentModel.Design.WorkflowView> 的信息提示。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="infoTipText" /> 为空引用（在 Visual Basic 中为 <see langword="Nothing" />）。</exception>
      </Docs>
    </Member>
    <Member MemberName="ShowInfoTip">
      <MemberSignature Language="C#" Value="public void ShowInfoTip (string title, string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ShowInfoTip(string title, string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.WorkflowView.ShowInfoTip(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ShowInfoTip (title As String, text As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ShowInfoTip(System::String ^ title, System::String ^ text);" />
      <MemberSignature Language="F#" Value="member this.ShowInfoTip : string * string -&gt; unit" Usage="workflowView.ShowInfoTip (title, text)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="title" Type="System.String" />
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="title">要显示的信息提示的标题。</param>
        <param name="text">要显示的信息提示的文本。</param>
        <summary>用指定的标题和文本显示 <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" /> 的信息提示。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 用指定的标题和文本显示 <xref:System.Workflow.ComponentModel.Design.WorkflowView> 的信息提示。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="title" /> 为空引用（在 Visual Basic 中为 <see langword="Nothing" />）。  
  
- 或 - 
 <paramref name="infoTipText" /> 为空引用 (<see langword="Nothing" />)。</exception>
      </Docs>
    </Member>
    <Member MemberName="ShowInPlaceToolTip">
      <MemberSignature Language="C#" Value="public void ShowInPlaceToolTip (string toolTipText, System.Drawing.Rectangle toolTipRectangle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ShowInPlaceToolTip(string toolTipText, valuetype System.Drawing.Rectangle toolTipRectangle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.WorkflowView.ShowInPlaceToolTip(System.String,System.Drawing.Rectangle)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ShowInPlaceToolTip (toolTipText As String, toolTipRectangle As Rectangle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ShowInPlaceToolTip(System::String ^ toolTipText, System::Drawing::Rectangle toolTipRectangle);" />
      <MemberSignature Language="F#" Value="member this.ShowInPlaceToolTip : string * System.Drawing.Rectangle -&gt; unit" Usage="workflowView.ShowInPlaceToolTip (toolTipText, toolTipRectangle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="toolTipText" Type="System.String" />
        <Parameter Name="toolTipRectangle" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="toolTipText">要显示的文本。</param>
        <param name="toolTipRectangle">指定放置 <see cref="T:System.Drawing.Rectangle" /> 的屏幕位置的 <see langword="ToolTip" />。</param>
        <summary>在指定的位置显示 <see langword="ToolTip" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `ToolTips` 是对用户很有帮助的说明，它显示有关指针下的对象的有用信息。  
  
 使用 <xref:System.Workflow.ComponentModel.Design.WorkflowView.ShowInPlaceToolTip%2A> 可以显示具有指定的文本和所需的位置的 `ToolTip`。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IServiceProvider.GetService">
      <MemberSignature Language="C#" Value="object IServiceProvider.GetService (Type serviceType);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object System.IServiceProvider.GetService(class System.Type serviceType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.WorkflowView.System#IServiceProvider#GetService(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Function GetService (serviceType As Type) As Object Implements IServiceProvider.GetService" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Object ^ System.IServiceProvider.GetService(Type ^ serviceType) = IServiceProvider::GetService;" />
      <MemberSignature Language="F#" Value="abstract member System.IServiceProvider.GetService : Type -&gt; obj&#xA;override this.System.IServiceProvider.GetService : Type -&gt; obj" Usage="workflowView.System.IServiceProvider.GetService serviceType" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IServiceProvider.GetService(System.Type)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="serviceType">要检索的服务的 <see cref="T:System.Type" />。</param>
        <summary>获取指定类型的服务（如果可用）。</summary>
        <returns>一个实现所请求服务的 <see cref="T:System.Object" />；如果无法解析该服务，则为空引用（在 Visual Basic 中为 <see langword="Nothing" />）。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果 `serviceType` 为 `CommandID`，则此方法将返回特定的 `CommandID`。 对于任何其他 `Type`，`GetService` 将返回实现所请求服务的对象；如果无法解析该服务，则返回空引用 (`Nothing`)。  
  
   
  
## Examples  
 下面的示例使用 <xref:System.Workflow.ComponentModel.Design.WorkflowView.GetService%2A> 对象的 <xref:System.Workflow.ComponentModel.Design.WorkflowView> 方法返回 <xref:System.ComponentModel.Design.ISelectionService> 接口。 如果服务存在，则使用 <xref:System.Workflow.ComponentModel.Design.WorkflowView.EnsureVisible%2A> 对象的 `PrimarySelection` 属性调用 <xref:System.ComponentModel.Design.ISelectionService> 传递当前选择的活动。  
  
 [!code-csharp[wf_samples#64](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#64)]
 [!code-vb[wf_samples#64](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#64)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Forms.IMessageFilter.PreFilterMessage">
      <MemberSignature Language="C#" Value="bool IMessageFilter.PreFilterMessage (ref System.Windows.Forms.Message m);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Windows.Forms.IMessageFilter.PreFilterMessage(valuetype System.Windows.Forms.Message&amp; m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.WorkflowView.System#Windows#Forms#IMessageFilter#PreFilterMessage(System.Windows.Forms.Message@)" />
      <MemberSignature Language="VB.NET" Value="Function PreFilterMessage (ByRef m As Message) As Boolean Implements IMessageFilter.PreFilterMessage" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Windows.Forms.IMessageFilter.PreFilterMessage(System::Windows::Forms::Message % m) = System::Windows::Forms::IMessageFilter::PreFilterMessage;" />
      <MemberSignature Language="F#" Value="abstract member System.Windows.Forms.IMessageFilter.PreFilterMessage : Message -&gt; bool&#xA;override this.System.Windows.Forms.IMessageFilter.PreFilterMessage : Message -&gt; bool" Usage="workflowView.System.Windows.Forms.IMessageFilter.PreFilterMessage m" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Forms.IMessageFilter.PreFilterMessage(System.Windows.Forms.Message@)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Windows.Forms.Message" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="m">要调度的消息。 无法修改此消息。</param>
        <summary>在调度消息之前将其筛选出来。</summary>
        <returns>如果筛选消息并禁止消息被调度，则为 <see langword="true" />；如果允许消息继续到达下一个筛选器或控件，则为 <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ViewPortRectangle">
      <MemberSignature Language="C#" Value="public System.Drawing.Rectangle ViewPortRectangle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Rectangle ViewPortRectangle" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.ComponentModel.Design.WorkflowView.ViewPortRectangle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ViewPortRectangle As Rectangle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Rectangle ViewPortRectangle { System::Drawing::Rectangle get(); };" />
      <MemberSignature Language="F#" Value="member this.ViewPortRectangle : System.Drawing.Rectangle" Usage="System.Workflow.ComponentModel.Design.WorkflowView.ViewPortRectangle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Rectangle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 <see cref="P:System.Workflow.ComponentModel.Design.WorkflowView.ViewPortRectangle" /> 的当前 <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" />。</summary>
        <value>描述屏幕上可见区域的 <see cref="T:System.Drawing.Rectangle" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Workflow.ComponentModel.Design.WorkflowView.ViewPortRectangle%2A> 包含工作流的可见区域。  
  
   
  
## Examples  
 下面的示例演示处理 <xref:System.Workflow.ComponentModel.Design.WorkflowView> 对象的 Paint 事件以直接在 <xref:System.Workflow.ComponentModel.Design.WorkflowView> 上绘制图像的方法。 <xref:System.Workflow.ComponentModel.Design.WorkflowView.ViewPortRectangle%2A> 属性返回设计图面的可视区域以正确约束正在绘制的图像。  
  
 [!code-csharp[wf_samples#58](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#58)]
 [!code-vb[wf_samples#58](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#58)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ViewPortSize">
      <MemberSignature Language="C#" Value="public System.Drawing.Size ViewPortSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Size ViewPortSize" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.ComponentModel.Design.WorkflowView.ViewPortSize" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ViewPortSize As Size" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Size ViewPortSize { System::Drawing::Size get(); };" />
      <MemberSignature Language="F#" Value="member this.ViewPortSize : System.Drawing.Size" Usage="System.Workflow.ComponentModel.Design.WorkflowView.ViewPortSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" /> 的可见区域的大小。</summary>
        <value>描述 <see langword="Size" /> 的可见区域的 <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 获取 <xref:System.Workflow.ComponentModel.Design.WorkflowView> 的可见区域的大小。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VScrollBar">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.VScrollBar VScrollBar { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.VScrollBar VScrollBar" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.ComponentModel.Design.WorkflowView.VScrollBar" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property VScrollBar As VScrollBar" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::VScrollBar ^ VScrollBar { System::Windows::Forms::VScrollBar ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.VScrollBar : System.Windows.Forms.VScrollBar" Usage="System.Workflow.ComponentModel.Design.WorkflowView.VScrollBar" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.VScrollBar</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取与 <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" /> 关联的垂直滚动条。</summary>
        <value>一个用于调整水平滚动条的设置和可见性的 <see cref="T:System.Windows.Forms.ScrollBar" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用 <xref:System.Workflow.ComponentModel.Design.WorkflowView.VScrollBar%2A> 可以获取 <xref:System.Workflow.ComponentModel.Design.WorkflowView> 上的垂直滚动条，可以使用它进行用户界面调整。  
  
   
  
## Examples  
 下面的代码示例演示如何获取 <xref:System.Workflow.ComponentModel.Design.WorkflowView> 类的实例。  代码随后设置若干 <xref:System.Workflow.ComponentModel.Design.WorkflowView> 属性，包括 <xref:System.Workflow.ComponentModel.Design.WorkflowView.HScrollBar%2A> 和 <xref:System.Workflow.ComponentModel.Design.WorkflowView.VScrollBar%2A>，然后调用 <xref:System.Workflow.ComponentModel.Design.WorkflowView.FitToWorkflowSize%2A> 方法。  
  
 [!code-csharp[Wf_samples#65](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#65)]
 [!code-vb[Wf_samples#65](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#65)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/dotnet/netframework-3.5/ms742004(v=vs.90)">工作流跟踪配置文件设计器</related>
      </Docs>
    </Member>
    <Member MemberName="WndProc">
      <MemberSignature Language="C#" Value="protected override void WndProc (ref System.Windows.Forms.Message m);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void WndProc(valuetype System.Windows.Forms.Message&amp; m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.WorkflowView.WndProc(System.Windows.Forms.Message@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub WndProc (ByRef m As Message)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void WndProc(System::Windows::Forms::Message % m);" />
      <MemberSignature Language="F#" Value="override this.WndProc : Message -&gt; unit" Usage="workflowView.WndProc m" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Windows.Forms.Message" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="m">要处理的 Windows 消息。</param>
        <summary>处理 Windows 消息。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 将所有消息传递给 <xref:System.Workflow.ComponentModel.Design.WorkflowView.WndProc%2A> 方法。  
  
 <xref:System.Workflow.ComponentModel.Design.WorkflowView.WndProc%2A> 方法与 Windows `WindowProc` 函数完全对应。 有关处理 Windows 消息的更多信息，请参见 MSDN Library 中的 Windows Platform SDK 参考中关于 `WindowProc` 函数的文档内容。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>派生类应调用基类 <see langword="WndProc" /> 方法以处理未被处理的任何消息。</para></block>
      </Docs>
    </Member>
    <Member MemberName="Zoom">
      <MemberSignature Language="C#" Value="public int Zoom { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Zoom" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.ComponentModel.Design.WorkflowView.Zoom" />
      <MemberSignature Language="VB.NET" Value="Public Property Zoom As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Zoom { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.Zoom : int with get, set" Usage="System.Workflow.ComponentModel.Design.WorkflowView.Zoom" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" /> 的缩放级别。</summary>
        <value><see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" /> 的缩放级别。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用缩放功能可以在 <xref:System.Workflow.ComponentModel.Design.WorkflowView> 内放大或缩小组件的大小。 <xref:System.Workflow.ComponentModel.Design.AmbientTheme> 设置 <xref:System.Workflow.ComponentModel.Design.WorkflowView> 的最小和最大缩放级别。  
  
   
  
## Examples  
 以下示例演示如何设置 <xref:System.Workflow.ComponentModel.Design.WorkflowView.Zoom%2A> 的 <xref:System.Workflow.ComponentModel.Design.WorkflowView> 属性。  
  
 此代码示例摘自 MainForm.cs 文件中的工作流监视器 SDK 示例。 有关详细信息，请参阅[工作流监视器示例](https://docs.microsoft.com/previous-versions/dotnet/netframework-3.5/ms741706(v=vs.90))。  
  
 [!code-csharp[wf_samples#138](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets1.cs#138)]
 [!code-vb[wf_samples#138](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets1.vb#138)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">如果缩放级别小于 <see cref="T:System.Workflow.ComponentModel.Design.AmbientTheme" /> 的最小缩放级别  
  
- 或 - 
如果缩放级别超过 <see cref="T:System.Workflow.ComponentModel.Design.AmbientTheme" /> 的最大缩放级别。</exception>
      </Docs>
    </Member>
    <Member MemberName="ZoomChanged">
      <MemberSignature Language="C#" Value="public event EventHandler ZoomChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler ZoomChanged" />
      <MemberSignature Language="DocId" Value="E:System.Workflow.ComponentModel.Design.WorkflowView.ZoomChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ZoomChanged As EventHandler " FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ ZoomChanged;" />
      <MemberSignature Language="F#" Value="member this.ZoomChanged : EventHandler " Usage="member this.ZoomChanged : System.EventHandler " />
      <MemberSignature Language="VB.NET" Value="Public Event ZoomChanged As EventHandler " FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当 <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" /> 的缩放设置更改时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 工作流视图图像以位图格式创建。  
  
   
  
## Examples  
 下面的代码示例演示如何为 <xref:System.Workflow.ComponentModel.Design.WorkflowView.ZoomChanged> 事件分配一个处理程序。  
  
 此代码示例摘自 ViewHost.cs 文件中的工作流监视器 SDK 示例。 有关详细信息，请参阅[工作流监视器](https://docs.microsoft.com/previous-versions/dotnet/netframework-3.5/ms741706(v=vs.90))。  
  
 [!code-csharp[wf_samples#136](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets1.cs#136)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/dotnet/netframework-3.5/ms741706(v=vs.90)">工作流监视器</related>
      </Docs>
    </Member>
  </Members>
</Type>
