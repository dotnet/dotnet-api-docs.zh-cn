<Type Name="IEnumerable" FullName="System.Collections.IEnumerable">
  <Metadata><Meta Name="ms.openlocfilehash" Value="a6a22bb662abda51ce28d30aac63890dcb9aef6d" /><Meta Name="ms.sourcegitcommit" Value="c982ad9e10a242d90f1e631b5981570f9e5d9f34" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/10/2020" /><Meta Name="ms.locfileid" Value="89996758" /></Metadata><TypeSignature Language="C#" Value="public interface IEnumerable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IEnumerable" />
  <TypeSignature Language="DocId" Value="T:System.Collections.IEnumerable" />
  <TypeSignature Language="VB.NET" Value="Public Interface IEnumerable" />
  <TypeSignature Language="C++ CLI" Value="public interface class IEnumerable" />
  <TypeSignature Language="F#" Value="type IEnumerable = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="mscorlib" FromVersion="4.0.0.0" To="System.Runtime" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0" />
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Runtime" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName Language="C#">[System.Runtime.InteropServices.Guid("496B0ABE-CDEE-11d3-88E8-00902754C43A")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.Guid("496B0ABE-CDEE-11d3-88E8-00902754C43A")&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName Language="C#">[System.Runtime.InteropServices.ComVisible(true)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.ComVisible(true)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="5c253-101">公开枚举数，该枚举数支持在非泛型集合上进行简单迭代。</span><span class="sxs-lookup"><span data-stu-id="5c253-101">Exposes an enumerator, which supports a simple iteration over a non-generic collection.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c253-102"><xref:System.Collections.IEnumerable> 是可枚举的所有非泛型集合的基接口。</span><span class="sxs-lookup"><span data-stu-id="5c253-102"><xref:System.Collections.IEnumerable> is the base interface for all non-generic collections that can be enumerated.</span></span> <span data-ttu-id="5c253-103">有关此接口的泛型版本，请参阅 <xref:System.Collections.Generic.IEnumerable%601?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="5c253-103">For the generic version of this interface see <xref:System.Collections.Generic.IEnumerable%601?displayProperty=nameWithType>.</span></span> <span data-ttu-id="5c253-104"><xref:System.Collections.IEnumerable> 包含一个方法， <xref:System.Collections.IEnumerable.GetEnumerator%2A> 该方法返回一个 <xref:System.Collections.IEnumerator> 。</span><span class="sxs-lookup"><span data-stu-id="5c253-104"><xref:System.Collections.IEnumerable> contains a single method, <xref:System.Collections.IEnumerable.GetEnumerator%2A>, which returns an <xref:System.Collections.IEnumerator>.</span></span> <span data-ttu-id="5c253-105"><xref:System.Collections.IEnumerator> 提供通过公开属性和方法来循环访问集合的功能 <xref:System.Collections.IEnumerator.Current%2A> <xref:System.Collections.IEnumerator.MoveNext%2A> <xref:System.Collections.IEnumerator.Reset%2A> 。</span><span class="sxs-lookup"><span data-stu-id="5c253-105"><xref:System.Collections.IEnumerator> provides the ability to iterate through the collection by exposing a <xref:System.Collections.IEnumerator.Current%2A> property and <xref:System.Collections.IEnumerator.MoveNext%2A> and <xref:System.Collections.IEnumerator.Reset%2A> methods.</span></span>  
  
 <span data-ttu-id="5c253-106">最佳做法是在 <xref:System.Collections.IEnumerable> <xref:System.Collections.IEnumerator> 集合类上实现和以启用 `foreach` `For Each` Visual Basic) 语法的 (，但 <xref:System.Collections.IEnumerable> 不需要实现。</span><span class="sxs-lookup"><span data-stu-id="5c253-106">It is a best practice to implement <xref:System.Collections.IEnumerable> and <xref:System.Collections.IEnumerator> on your collection classes to enable the `foreach` (`For Each` in Visual Basic) syntax, however implementing <xref:System.Collections.IEnumerable> is not required.</span></span> <span data-ttu-id="5c253-107">如果集合未实现 <xref:System.Collections.IEnumerable> ，则仍必须遵循迭代器模式来支持此语法，方法是提供 `GetEnumerator` 返回接口、类或结构的方法。</span><span class="sxs-lookup"><span data-stu-id="5c253-107">If your collection does not implement <xref:System.Collections.IEnumerable>, you must still follow the iterator pattern to support this syntax by providing a `GetEnumerator` method that returns an interface, class or struct.</span></span> <span data-ttu-id="5c253-108">使用 Visual Basic 时，必须提供 <xref:System.Collections.IEnumerator> 由返回的实现 `GetEnumerator` 。</span><span class="sxs-lookup"><span data-stu-id="5c253-108">When using Visual Basic, you must provide an <xref:System.Collections.IEnumerator> implementation, which is returned by `GetEnumerator`.</span></span> <span data-ttu-id="5c253-109">使用 c # 进行开发时，必须提供一个类，其中包含 `Current` `MoveNext` `Reset` 由描述的属性和方法， <xref:System.Collections.IEnumerator> 但类不必实现 <xref:System.Collections.IEnumerator> 。</span><span class="sxs-lookup"><span data-stu-id="5c253-109">When developing with C# you must provide a class that contains a `Current` property, and `MoveNext` and `Reset` methods as described by <xref:System.Collections.IEnumerator>, but the class does not have to implement <xref:System.Collections.IEnumerator>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5c253-110">下面的代码示例演示了通过实现和接口来循环访问自定义集合的最佳实践 <xref:System.Collections.IEnumerable> <xref:System.Collections.IEnumerator> 。</span><span class="sxs-lookup"><span data-stu-id="5c253-110">The following code example demonstrates the best practice for iterating a custom collection by implementing the <xref:System.Collections.IEnumerable> and <xref:System.Collections.IEnumerator> interfaces.</span></span> <span data-ttu-id="5c253-111">在此示例中，不会显式调用这些接口的成员，而是实现它们以支持使用 `foreach` `For Each` Visual Basic) 中的 (来循环访问集合。</span><span class="sxs-lookup"><span data-stu-id="5c253-111">In this example, members of these interfaces are not explicitly called, but they are implemented to support the use of `foreach` (`For Each` in Visual Basic) to iterate through the collection.</span></span> <span data-ttu-id="5c253-112">此示例是一个完整的控制台应用程序。</span><span class="sxs-lookup"><span data-stu-id="5c253-112">This example is a complete Console app.</span></span> <span data-ttu-id="5c253-113">若要编译 Visual Basic 应用，请在项目的 "**属性**" 页中将**启动对象**更改为**Sub Main** 。</span><span class="sxs-lookup"><span data-stu-id="5c253-113">To compile the Visual Basic app, change the **Startup object** to **Sub Main** in the project's **Properties** page.</span></span>  
  
 <span data-ttu-id="5c253-114">有关演示如何实现接口的示例 <xref:System.Collections.IEnumerable> ，请参阅 [在集合类中实现 IEnumerable 接口](https://code.msdn.microsoft.com/Implementing-the-e1708a24)</span><span class="sxs-lookup"><span data-stu-id="5c253-114">For a sample that shows how to implement the <xref:System.Collections.IEnumerable> interface, see [Implementing the IEnumerable Interface in a Collection Class](https://code.msdn.microsoft.com/Implementing-the-e1708a24)</span></span>  
  
 [!code-csharp[System.Collections_EnumeratorInterfaces#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections_EnumeratorInterfaces/cs/ienumerator.cs#1)]
 [!code-vb[System.Collections_EnumeratorInterfaces#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections_EnumeratorInterfaces/vb/ienumerator.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Collections.IEnumerator" />
    <altmember cref="T:System.Collections.Generic.IEnumerable`1" />
    <related type="Article" href="https://msdn.microsoft.com/library/f45331db-d595-46ec-9142-551d3d1eb1a7"><span data-ttu-id="5c253-115">迭代器（C# 和 Visual Basic）</span><span class="sxs-lookup"><span data-stu-id="5c253-115">Iterators (C# and Visual Basic)</span></span></related>
    <related type="ExternalDocumentation" href="https://code.msdn.microsoft.com/Implementing-the-e1708a24"><span data-ttu-id="5c253-116">在集合类中实现 IEnumerable 接口</span><span class="sxs-lookup"><span data-stu-id="5c253-116">Implementing the IEnumerable Interface in a Collection Class</span></span></related>
  </Docs>
  <Members>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.IEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IEnumerator GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.IEnumerable.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::IEnumerator ^ GetEnumerator();" />
      <MemberSignature Language="F#" Value="abstract member GetEnumerator : unit -&gt; System.Collections.IEnumerator" Usage="iEnumerable.GetEnumerator " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Runtime.InteropServices.DispId(-4)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.DispId(-4)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="5c253-117">返回循环访问集合的枚举数。</span><span class="sxs-lookup"><span data-stu-id="5c253-117">Returns an enumerator that iterates through a collection.</span></span></summary>
        <returns><span data-ttu-id="5c253-118">一个可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="5c253-118">An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c253-119">C# 语言的 `foreach` 语句（在 Visual Basic 中为 `For Each`）隐藏了枚举数的复杂性。</span><span class="sxs-lookup"><span data-stu-id="5c253-119">The `foreach` statement of the C# language (`For Each` in Visual Basic) hides the complexity of the enumerators.</span></span>  <span data-ttu-id="5c253-120">因此，建议使用 `foreach`，而不是直接操作枚举数。</span><span class="sxs-lookup"><span data-stu-id="5c253-120">Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.</span></span>  
  
 <span data-ttu-id="5c253-121">枚举器可用于读取集合中的数据，但不能用于修改基础集合。</span><span class="sxs-lookup"><span data-stu-id="5c253-121">Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</span></span>  
  
 <span data-ttu-id="5c253-122">最初，枚举数定位在集合中第一个元素的前面。</span><span class="sxs-lookup"><span data-stu-id="5c253-122">Initially, the enumerator is positioned before the first element in the collection.</span></span> <span data-ttu-id="5c253-123"><xref:System.Collections.IEnumerator.Reset%2A>方法还将枚举器恢复到此位置。</span><span class="sxs-lookup"><span data-stu-id="5c253-123">The <xref:System.Collections.IEnumerator.Reset%2A> method also brings the enumerator back to this position.</span></span>  <span data-ttu-id="5c253-124">在此位置， <xref:System.Collections.IEnumerator.Current%2A> 属性未定义。</span><span class="sxs-lookup"><span data-stu-id="5c253-124">At this position, the <xref:System.Collections.IEnumerator.Current%2A> property is undefined.</span></span> <span data-ttu-id="5c253-125">因此，在读取的值之前，必须调用 <xref:System.Collections.IEnumerator.MoveNext%2A> 方法，以将枚举器前进到集合的第一个元素 <xref:System.Collections.IEnumerator.Current%2A> 。</span><span class="sxs-lookup"><span data-stu-id="5c253-125">Therefore, you must call the <xref:System.Collections.IEnumerator.MoveNext%2A> method to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.</span></span>  
  
 <span data-ttu-id="5c253-126">在调用 <xref:System.Collections.IEnumerator.Current%2A> 或 <xref:System.Collections.IEnumerator.MoveNext%2A> 之前，<xref:System.Collections.IEnumerator.Reset%2A> 返回同一对象。</span><span class="sxs-lookup"><span data-stu-id="5c253-126"><xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called.</span></span> <span data-ttu-id="5c253-127"><xref:System.Collections.IEnumerator.MoveNext%2A> 将 <xref:System.Collections.IEnumerator.Current%2A> 设置为下一个元素。</span><span class="sxs-lookup"><span data-stu-id="5c253-127"><xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.</span></span>  
  
 <span data-ttu-id="5c253-128">如果 <xref:System.Collections.IEnumerator.MoveNext%2A> 越过集合的末尾，则枚举器将定位在集合中最后一个元素之后，并 <xref:System.Collections.IEnumerator.MoveNext%2A> 返回 `false` 。</span><span class="sxs-lookup"><span data-stu-id="5c253-128">If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`.</span></span> <span data-ttu-id="5c253-129">当枚举器位于此位置时，对的后续调用 <xref:System.Collections.IEnumerator.MoveNext%2A> 也将返回 `false` 。</span><span class="sxs-lookup"><span data-stu-id="5c253-129">When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`.</span></span> <span data-ttu-id="5c253-130">如果最后一次调用 <xref:System.Collections.IEnumerator.MoveNext%2A> 返回 `false` ， <xref:System.Collections.IEnumerator.Current%2A> 则未定义。</span><span class="sxs-lookup"><span data-stu-id="5c253-130">If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`, <xref:System.Collections.IEnumerator.Current%2A> is undefined.</span></span> <span data-ttu-id="5c253-131">若要再次将 <xref:System.Collections.IEnumerator.Current%2A> 设置为集合的第一个元素，可以调用 <xref:System.Collections.IEnumerator.Reset%2A> 并接着调用 <xref:System.Collections.IEnumerator.MoveNext%2A>。</span><span class="sxs-lookup"><span data-stu-id="5c253-131">To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.</span></span>  
  
 <span data-ttu-id="5c253-132">如果对集合所做的更改（如添加、修改或删除元素），则枚举器的行为是不确定的。</span><span class="sxs-lookup"><span data-stu-id="5c253-132">If changes are made to the collection, such as adding, modifying, or deleting elements, the behavior of the enumerator is undefined.</span></span>  
  
 <span data-ttu-id="5c253-133">枚举数没有对集合的独占访问权；因此，从头到尾对一个集合进行枚举在本质上不是一个线程安全的过程。</span><span class="sxs-lookup"><span data-stu-id="5c253-133">The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</span></span>  <span data-ttu-id="5c253-134">若要确保枚举过程中的线程安全性，可以在整个枚举过程中锁定集合。</span><span class="sxs-lookup"><span data-stu-id="5c253-134">To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</span></span>  <span data-ttu-id="5c253-135">若要允许多个线程访问集合以进行读写操作，则必须实现自己的同步。</span><span class="sxs-lookup"><span data-stu-id="5c253-135">To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5c253-136">下面的代码示例演示如何实现 <xref:System.Collections.IEnumerable> 自定义集合的接口。</span><span class="sxs-lookup"><span data-stu-id="5c253-136">The following code example demonstrates the implementation of the <xref:System.Collections.IEnumerable> interfaces for a custom collection.</span></span> <span data-ttu-id="5c253-137">在此示例中， <xref:System.Collections.IEnumerable.GetEnumerator%2A> 不会显式调用，而是实现它以支持 `foreach` `For Each` 在 Visual Basic) 中使用 (。</span><span class="sxs-lookup"><span data-stu-id="5c253-137">In this example, <xref:System.Collections.IEnumerable.GetEnumerator%2A> is not explicitly called, but it is implemented to support the use of `foreach` (`For Each` in Visual Basic).</span></span> <span data-ttu-id="5c253-138">此代码示例摘自一个更大的 <xref:System.Collections.IEnumerable> 接口示例。</span><span class="sxs-lookup"><span data-stu-id="5c253-138">This code example is part of a larger example for the <xref:System.Collections.IEnumerable> interface.</span></span>  
  
 [!code-csharp[System.Collections_EnumeratorInterfaces#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections_EnumeratorInterfaces/cs/ienumerator.cs#1)]
 [!code-vb[System.Collections_EnumeratorInterfaces#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections_EnumeratorInterfaces/vb/ienumerator.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.IEnumerator" />
        <related type="Article" href="https://msdn.microsoft.com/library/f45331db-d595-46ec-9142-551d3d1eb1a7"><span data-ttu-id="5c253-139">迭代器（C# 和 Visual Basic）</span><span class="sxs-lookup"><span data-stu-id="5c253-139">Iterators (C# and Visual Basic)</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>
