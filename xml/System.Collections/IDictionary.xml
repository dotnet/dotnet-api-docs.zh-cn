<Type Name="IDictionary" FullName="System.Collections.IDictionary">
  <Metadata><Meta Name="ms.openlocfilehash" Value="f62397d7dc53c0bcbc8bb3d3ad910cd79afc64b5" /><Meta Name="ms.sourcegitcommit" Value="9a0316374d19cc78674994106d073aa5ef1bd5f3" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="11/10/2020" /><Meta Name="ms.locfileid" Value="94476621" /></Metadata><TypeSignature Language="C#" Value="public interface IDictionary : System.Collections.ICollection" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDictionary implements class System.Collections.ICollection, class System.Collections.IEnumerable" />
  <TypeSignature Language="DocId" Value="T:System.Collections.IDictionary" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDictionary&#xA;Implements ICollection" />
  <TypeSignature Language="C++ CLI" Value="public interface class IDictionary : System::Collections::ICollection" />
  <TypeSignature Language="F#" Value="type IDictionary = interface&#xA;    interface ICollection&#xA;    interface IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="mscorlib" FromVersion="4.0.0.0" To="System.Runtime" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0" />
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Runtime" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.ICollection</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName Language="C#">[System.Runtime.InteropServices.ComVisible(true)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.ComVisible(true)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="4fc43-101">表示键/值对的非通用集合。</span><span class="sxs-lookup"><span data-stu-id="4fc43-101">Represents a nongeneric collection of key/value pairs.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4fc43-102"><xref:System.Collections.IDictionary>接口是键/值对的非泛型集合的基接口。</span><span class="sxs-lookup"><span data-stu-id="4fc43-102">The <xref:System.Collections.IDictionary> interface is the base interface for nongeneric collections of key/value pairs.</span></span> <span data-ttu-id="4fc43-103">有关此接口的泛型版本，请参阅 <xref:System.Collections.Generic.IDictionary%602?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="4fc43-103">For the generic version of this interface, see <xref:System.Collections.Generic.IDictionary%602?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="4fc43-104">每个元素都是存储在对象中的键/值对 <xref:System.Collections.DictionaryEntry> 。</span><span class="sxs-lookup"><span data-stu-id="4fc43-104">Each element is a key/value pair stored in a <xref:System.Collections.DictionaryEntry> object.</span></span>  
  
 <span data-ttu-id="4fc43-105">每个对都必须有一个唯一键。</span><span class="sxs-lookup"><span data-stu-id="4fc43-105">Each pair must have a unique key.</span></span> <span data-ttu-id="4fc43-106">实现在是否允许该键为空时可能有所不同。</span><span class="sxs-lookup"><span data-stu-id="4fc43-106">Implementations can vary in whether they allow the key to be null.</span></span>  <span data-ttu-id="4fc43-107">该值可以为 null，并且不必是唯一的。</span><span class="sxs-lookup"><span data-stu-id="4fc43-107">The value can be null and does not have to be unique.</span></span> <span data-ttu-id="4fc43-108"><xref:System.Collections.IDictionary>接口允许枚举包含的键和值，但不表示任何特定的排序顺序。</span><span class="sxs-lookup"><span data-stu-id="4fc43-108">The <xref:System.Collections.IDictionary> interface allows the contained keys and values to be enumerated, but it does not imply any particular sort order.</span></span>  
  
 <span data-ttu-id="4fc43-109"><xref:System.Collections.IDictionary> 实现分为三个类别：只读、固定大小、可变大小。</span><span class="sxs-lookup"><span data-stu-id="4fc43-109"><xref:System.Collections.IDictionary> implementations fall into three categories: read-only, fixed-size, variable-size.</span></span> <span data-ttu-id="4fc43-110"><xref:System.Collections.IDictionary>不能修改只读对象。</span><span class="sxs-lookup"><span data-stu-id="4fc43-110">A read-only <xref:System.Collections.IDictionary> object cannot be modified.</span></span> <span data-ttu-id="4fc43-111">固定大小的 <xref:System.Collections.IDictionary> 对象不允许添加或删除元素，但允许修改现有元素。</span><span class="sxs-lookup"><span data-stu-id="4fc43-111">A fixed-size <xref:System.Collections.IDictionary> object does not allow the addition or removal of elements, but does allow the modification of existing elements.</span></span> <span data-ttu-id="4fc43-112">可变大小 <xref:System.Collections.IDictionary> 对象允许添加、移除和修改元素。</span><span class="sxs-lookup"><span data-stu-id="4fc43-112">A variable-size <xref:System.Collections.IDictionary> object allows the addition, removal, and modification of elements.</span></span>  
  
 <span data-ttu-id="4fc43-113">`foreach`C # 语言 `For Each` 中 (Visual Basic) 的语句返回集合中元素的类型的对象。</span><span class="sxs-lookup"><span data-stu-id="4fc43-113">The `foreach` statement of the C# language (`For Each` in Visual Basic) returns an object of the type of the elements in the collection.</span></span> <span data-ttu-id="4fc43-114">由于对象的每个元素 <xref:System.Collections.IDictionary> 都是键/值对，因此元素类型不是键的类型或值的类型。</span><span class="sxs-lookup"><span data-stu-id="4fc43-114">Since each element of the <xref:System.Collections.IDictionary> object is a key/value pair, the element type is not the type of the key or the type of the value.</span></span> <span data-ttu-id="4fc43-115">相反，元素类型为 <xref:System.Collections.DictionaryEntry> 。</span><span class="sxs-lookup"><span data-stu-id="4fc43-115">Instead, the element type is <xref:System.Collections.DictionaryEntry>.</span></span> <span data-ttu-id="4fc43-116">例如：</span><span class="sxs-lookup"><span data-stu-id="4fc43-116">For example:</span></span>  
  
 [!code-cpp[Dictionary#14](~/samples/snippets/cpp/VS_Snippets_CLR/Dictionary/cpp/remarks.cpp#14)]
 [!code-csharp[Dictionary#14](~/samples/snippets/csharp/VS_Snippets_CLR/Dictionary/CS/remarks.cs#14)]
 [!code-vb[Dictionary#14](~/samples/snippets/visualbasic/VS_Snippets_CLR/Dictionary/VB/remarks.vb#14)]  
  
 <span data-ttu-id="4fc43-117">`foreach`语句是枚举器周围的包装器，它只允许读取但不允许写入到集合中。</span><span class="sxs-lookup"><span data-stu-id="4fc43-117">The `foreach` statement is a wrapper around the enumerator, which allows only reading from but not writing to the collection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4fc43-118">下面的代码示例演示如何定义一个实现接口的简单字典类 <xref:System.Collections.IDictionary> 。</span><span class="sxs-lookup"><span data-stu-id="4fc43-118">The following code example demonstrates how to define a simple dictionary class that implements the <xref:System.Collections.IDictionary> interface.</span></span>  
  
 [!code-cpp[Dictionary#1](~/samples/snippets/cpp/VS_Snippets_CLR/Dictionary/cpp/Dictionary.cpp#1)]
 [!code-csharp[Dictionary#1](~/samples/snippets/csharp/VS_Snippets_CLR/Dictionary/CS/Dictionary.cs#1)]
 [!code-vb[Dictionary#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Dictionary/VB/Dictionary.vb#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para><span data-ttu-id="4fc43-119">实现类必须有一种方法来比较键。</span><span class="sxs-lookup"><span data-stu-id="4fc43-119">The implementing class must have a means to compare keys.</span></span></para></block>
    <altmember cref="T:System.Collections.Hashtable" />
    <altmember cref="T:System.Collections.ICollection" />
  </Docs>
  <Members>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (object key, object value);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Add(object key, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.IDictionary.Add(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (key As Object, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Add(System::Object ^ key, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member Add : obj * obj -&gt; unit" Usage="iDictionary.Add (key, value)" />
      <MemberSignature Language="C#" Value="public void Add (object key, object? value);" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Object" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="4fc43-120">用作要添加的元素的键的 <see cref="T:System.Object" />。</span><span class="sxs-lookup"><span data-stu-id="4fc43-120">The <see cref="T:System.Object" /> to use as the key of the element to add.</span></span></param>
        <param name="value"><span data-ttu-id="4fc43-121">用作要添加的元素的键的 <see cref="T:System.Object" />。</span><span class="sxs-lookup"><span data-stu-id="4fc43-121">The <see cref="T:System.Object" /> to use as the value of the element to add.</span></span></param>
        <summary><span data-ttu-id="4fc43-122">在 <see cref="T:System.Collections.IDictionary" /> 对象中添加一个带有所提供的键和值的元素。</span><span class="sxs-lookup"><span data-stu-id="4fc43-122">Adds an element with the provided key and value to the <see cref="T:System.Collections.IDictionary" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4fc43-123">你还可以使用 <xref:System.Collections.IDictionary.Item%2A> 属性来添加新元素，方法是设置字典中不存在的键的值 (例如 `myCollection["myNonexistentKey"] = myValue`) 。</span><span class="sxs-lookup"><span data-stu-id="4fc43-123">You can also use the <xref:System.Collections.IDictionary.Item%2A> property to add new elements by setting the value of a key that does not exist in the dictionary (for example, `myCollection["myNonexistentKey"] = myValue`).</span></span> <span data-ttu-id="4fc43-124">但是，如果字典中已存在指定的键，则设置 <xref:System.Collections.IDictionary.Item%2A> 属性会覆盖旧值。</span><span class="sxs-lookup"><span data-stu-id="4fc43-124">However, if the specified key already exists in the dictionary, setting the <xref:System.Collections.IDictionary.Item%2A> property overwrites the old value.</span></span> <span data-ttu-id="4fc43-125">与此相反， <xref:System.Collections.IDictionary.Add%2A> 方法不会修改现有元素。</span><span class="sxs-lookup"><span data-stu-id="4fc43-125">In contrast, the <xref:System.Collections.IDictionary.Add%2A> method does not modify existing elements.</span></span>  
  
 <span data-ttu-id="4fc43-126">实现在是否允许键时可能有所不同 `null` 。</span><span class="sxs-lookup"><span data-stu-id="4fc43-126">Implementations can vary in whether they allow the key to be `null`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4fc43-127">下面的代码示例演示如何实现 <xref:System.Collections.IDictionary.Add%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="4fc43-127">The following code example demonstrates how to implement the <xref:System.Collections.IDictionary.Add%2A> method.</span></span> <span data-ttu-id="4fc43-128">此代码示例是为类提供的更大示例的一部分 <xref:System.Collections.IDictionary> 。</span><span class="sxs-lookup"><span data-stu-id="4fc43-128">This code example is part of a larger example provided for the <xref:System.Collections.IDictionary> class.</span></span>  
  
 [!code-cpp[Dictionary#9](~/samples/snippets/cpp/VS_Snippets_CLR/Dictionary/cpp/Dictionary.cpp#9)]
 [!code-csharp[Dictionary#9](~/samples/snippets/csharp/VS_Snippets_CLR/Dictionary/CS/Dictionary.cs#9)]
 [!code-vb[Dictionary#9](~/samples/snippets/visualbasic/VS_Snippets_CLR/Dictionary/VB/Dictionary.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4fc43-129"><paramref name="key" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4fc43-129"><paramref name="key" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4fc43-130"><see cref="T:System.Collections.IDictionary" /> 对象中已存在具有相同键的元素。</span><span class="sxs-lookup"><span data-stu-id="4fc43-130">An element with the same key already exists in the <see cref="T:System.Collections.IDictionary" /> object.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="4fc43-131"><see cref="T:System.Collections.IDictionary" /> 为只读。</span><span class="sxs-lookup"><span data-stu-id="4fc43-131">The <see cref="T:System.Collections.IDictionary" /> is read-only.</span></span>  
  
<span data-ttu-id="4fc43-132">- 或 -</span><span class="sxs-lookup"><span data-stu-id="4fc43-132">-or-</span></span> 
<span data-ttu-id="4fc43-133"><see cref="T:System.Collections.IDictionary" /> 具有固定的大小。</span><span class="sxs-lookup"><span data-stu-id="4fc43-133">The <see cref="T:System.Collections.IDictionary" /> has a fixed size.</span></span></exception>
        <altmember cref="P:System.Collections.IDictionary.Item(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.IDictionary.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Clear();" />
      <MemberSignature Language="F#" Value="abstract member Clear : unit -&gt; unit" Usage="iDictionary.Clear " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="4fc43-134">从 <see cref="T:System.Collections.IDictionary" /> 对象中移除所有元素。</span><span class="sxs-lookup"><span data-stu-id="4fc43-134">Removes all elements from the <see cref="T:System.Collections.IDictionary" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="4fc43-135">下面的代码示例演示如何实现 <xref:System.Collections.IDictionary.Clear%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="4fc43-135">The following code example demonstrates how to implement the <xref:System.Collections.IDictionary.Clear%2A> method.</span></span> <span data-ttu-id="4fc43-136">此代码示例是为类提供的更大示例的一部分 <xref:System.Collections.IDictionary> 。</span><span class="sxs-lookup"><span data-stu-id="4fc43-136">This code example is part of a larger example provided for the <xref:System.Collections.IDictionary> class.</span></span>  
  
 [!code-cpp[Dictionary#8](~/samples/snippets/cpp/VS_Snippets_CLR/Dictionary/cpp/Dictionary.cpp#8)]
 [!code-csharp[Dictionary#8](~/samples/snippets/csharp/VS_Snippets_CLR/Dictionary/CS/Dictionary.cs#8)]
 [!code-vb[Dictionary#8](~/samples/snippets/visualbasic/VS_Snippets_CLR/Dictionary/VB/Dictionary.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="4fc43-137"><see cref="T:System.Collections.IDictionary" /> 对象是只读的。</span><span class="sxs-lookup"><span data-stu-id="4fc43-137">The <see cref="T:System.Collections.IDictionary" /> object is read-only.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (object key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Contains(object key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.IDictionary.Contains(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (key As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Contains(System::Object ^ key);" />
      <MemberSignature Language="F#" Value="abstract member Contains : obj -&gt; bool" Usage="iDictionary.Contains key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="4fc43-138">要在 <see cref="T:System.Collections.IDictionary" /> 对象中查找的键。</span><span class="sxs-lookup"><span data-stu-id="4fc43-138">The key to locate in the <see cref="T:System.Collections.IDictionary" /> object.</span></span></param>
        <summary><span data-ttu-id="4fc43-139">确定 <see cref="T:System.Collections.IDictionary" /> 对象是否包含具有指定键的元素。</span><span class="sxs-lookup"><span data-stu-id="4fc43-139">Determines whether the <see cref="T:System.Collections.IDictionary" /> object contains an element with the specified key.</span></span></summary>
        <returns><span data-ttu-id="4fc43-140">如果 <see langword="true" /> 包含具有键的元素，则为 <see cref="T:System.Collections.IDictionary" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="4fc43-140"><see langword="true" /> if the <see cref="T:System.Collections.IDictionary" /> contains an element with the key; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4fc43-141">实现在是否允许键时可能有所不同 `null` 。</span><span class="sxs-lookup"><span data-stu-id="4fc43-141">Implementations can vary in whether they allow the key to be `null`.</span></span>  
  
 <span data-ttu-id="4fc43-142">从 .NET Framework 2.0 开始，此方法使用集合的对象的 <xref:System.Object.Equals%2A> 和 <xref:System.IComparable.CompareTo%2A> 方法 `item` 来确定是否 `item` 存在。</span><span class="sxs-lookup"><span data-stu-id="4fc43-142">Starting with the .NET Framework 2.0, this method uses the collection's objects' <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods on `item` to determine whether `item` exists.</span></span> <span data-ttu-id="4fc43-143">在 .NET Framework 的早期版本中，此决定是通过对 <xref:System.Object.Equals%2A> <xref:System.IComparable.CompareTo%2A> `item` 集合中的对象使用参数的和方法进行的。</span><span class="sxs-lookup"><span data-stu-id="4fc43-143">In the earlier versions of the .NET Framework, this determination was made by using the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the `item` parameter on the objects in the collection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4fc43-144">下面的代码示例演示如何实现 <xref:System.Collections.IDictionary.Contains%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="4fc43-144">The following code example demonstrates how to implement the <xref:System.Collections.IDictionary.Contains%2A> method.</span></span> <span data-ttu-id="4fc43-145">此代码示例是为类提供的更大示例的一部分 <xref:System.Collections.IDictionary> 。</span><span class="sxs-lookup"><span data-stu-id="4fc43-145">This code example is part of a larger example provided for the <xref:System.Collections.IDictionary> class.</span></span>  
  
 [!code-cpp[Dictionary#5](~/samples/snippets/cpp/VS_Snippets_CLR/Dictionary/cpp/Dictionary.cpp#5)]
 [!code-csharp[Dictionary#5](~/samples/snippets/csharp/VS_Snippets_CLR/Dictionary/CS/Dictionary.cs#5)]
 [!code-vb[Dictionary#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/Dictionary/VB/Dictionary.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4fc43-146"><paramref name="key" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4fc43-146"><paramref name="key" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.IDictionaryEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IDictionaryEnumerator GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.IDictionary.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IDictionaryEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::IDictionaryEnumerator ^ GetEnumerator();" />
      <MemberSignature Language="F#" Value="abstract member GetEnumerator : unit -&gt; System.Collections.IDictionaryEnumerator" Usage="iDictionary.GetEnumerator " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IDictionaryEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="4fc43-147">返回 <see cref="T:System.Collections.IDictionary" /> 对象的 <see cref="T:System.Collections.IDictionaryEnumerator" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="4fc43-147">Returns an <see cref="T:System.Collections.IDictionaryEnumerator" /> object for the <see cref="T:System.Collections.IDictionary" /> object.</span></span></summary>
        <returns><span data-ttu-id="4fc43-148"><see cref="T:System.Collections.IDictionaryEnumerator" /> 对象的 <see cref="T:System.Collections.IDictionary" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="4fc43-148">An <see cref="T:System.Collections.IDictionaryEnumerator" /> object for the <see cref="T:System.Collections.IDictionary" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

 <span data-ttu-id="4fc43-149">C# 语言的 `foreach` 语句（在 Visual Basic 中为 `for each`）隐藏了枚举数的复杂性。</span><span class="sxs-lookup"><span data-stu-id="4fc43-149">The `foreach` statement of the C# language (`for each` in Visual Basic) hides the complexity of the enumerators.</span></span>  <span data-ttu-id="4fc43-150">因此，建议使用， `foreach` 而不是直接操作枚举器。</span><span class="sxs-lookup"><span data-stu-id="4fc43-150">Therefore, using `foreach` is recommended instead of directly manipulating the enumerator.</span></span>  
  
 <span data-ttu-id="4fc43-151">枚举器可用于读取集合中的数据，但不能用于修改基础集合。</span><span class="sxs-lookup"><span data-stu-id="4fc43-151">Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</span></span>  
  
 <span data-ttu-id="4fc43-152">最初，枚举数定位在集合中第一个元素的前面。</span><span class="sxs-lookup"><span data-stu-id="4fc43-152">Initially, the enumerator is positioned before the first element in the collection.</span></span> <span data-ttu-id="4fc43-153"><xref:System.Collections.IEnumerator.Reset%2A> 也会将枚举器放回此位置。</span><span class="sxs-lookup"><span data-stu-id="4fc43-153"><xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position.</span></span>  <span data-ttu-id="4fc43-154">在此位置， <xref:System.Collections.IEnumerator.Current%2A> 属性未定义。</span><span class="sxs-lookup"><span data-stu-id="4fc43-154">At this position, the <xref:System.Collections.IEnumerator.Current%2A> property is undefined.</span></span> <span data-ttu-id="4fc43-155">因此，在读取 <xref:System.Collections.IEnumerator.MoveNext%2A> 的值之前，必须调用 <xref:System.Collections.IEnumerator.Current%2A> 将枚举器向前移动到集合的第一个元素。</span><span class="sxs-lookup"><span data-stu-id="4fc43-155">Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.</span></span>  
  
 <span data-ttu-id="4fc43-156">在调用 <xref:System.Collections.IEnumerator.Current%2A> 或 <xref:System.Collections.IEnumerator.MoveNext%2A> 之前，<xref:System.Collections.IEnumerator.Reset%2A> 返回同一对象。</span><span class="sxs-lookup"><span data-stu-id="4fc43-156"><xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called.</span></span> <span data-ttu-id="4fc43-157"><xref:System.Collections.IEnumerator.MoveNext%2A> 将 <xref:System.Collections.IEnumerator.Current%2A> 设置为下一个元素。</span><span class="sxs-lookup"><span data-stu-id="4fc43-157"><xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.</span></span>  
  
 <span data-ttu-id="4fc43-158">如果 <xref:System.Collections.IEnumerator.MoveNext%2A> 越过集合的末尾，则枚举器将定位在集合中最后一个元素之后，并 <xref:System.Collections.IEnumerator.MoveNext%2A> 返回 `false` 。</span><span class="sxs-lookup"><span data-stu-id="4fc43-158">If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`.</span></span> <span data-ttu-id="4fc43-159">当枚举器位于此位置时，对的后续调用 <xref:System.Collections.IEnumerator.MoveNext%2A> 也将返回 `false` 。</span><span class="sxs-lookup"><span data-stu-id="4fc43-159">When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`.</span></span> <span data-ttu-id="4fc43-160">如果最后一次调用 <xref:System.Collections.IEnumerator.MoveNext%2A> 返回 `false` ， <xref:System.Collections.IEnumerator.Current%2A> 则未定义。</span><span class="sxs-lookup"><span data-stu-id="4fc43-160">If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.IEnumerator.Current%2A> is undefined.</span></span> <span data-ttu-id="4fc43-161">若要再次将 <xref:System.Collections.IEnumerator.Current%2A> 设置为集合的第一个元素，可以调用 <xref:System.Collections.IEnumerator.Reset%2A> 并接着调用 <xref:System.Collections.IEnumerator.MoveNext%2A>。</span><span class="sxs-lookup"><span data-stu-id="4fc43-161">To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.</span></span>  
  
 <span data-ttu-id="4fc43-162">只要集合保持不变，枚举器就仍有效。</span><span class="sxs-lookup"><span data-stu-id="4fc43-162">An enumerator remains valid as long as the collection remains unchanged.</span></span> <span data-ttu-id="4fc43-163">如果对集合进行更改（如添加、修改或删除元素），则枚举数将失效且不可恢复，而且其行为是不确定的。</span><span class="sxs-lookup"><span data-stu-id="4fc43-163">If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.</span></span>  
  
 <span data-ttu-id="4fc43-164">枚举数没有对集合的独占访问权；因此，从头到尾对一个集合进行枚举在本质上不是一个线程安全的过程。</span><span class="sxs-lookup"><span data-stu-id="4fc43-164">The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</span></span>  <span data-ttu-id="4fc43-165">若要确保枚举过程中的线程安全性，可以在整个枚举过程中锁定集合。</span><span class="sxs-lookup"><span data-stu-id="4fc43-165">To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</span></span>  <span data-ttu-id="4fc43-166">若要允许多个线程访问集合以进行读写操作，则必须实现自己的同步。</span><span class="sxs-lookup"><span data-stu-id="4fc43-166">To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.IDictionaryEnumerator" />
        <altmember cref="T:System.Collections.IEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="IsFixedSize">
      <MemberSignature Language="C#" Value="public bool IsFixedSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsFixedSize" />
      <MemberSignature Language="DocId" Value="P:System.Collections.IDictionary.IsFixedSize" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsFixedSize As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsFixedSize { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsFixedSize : bool" Usage="System.Collections.IDictionary.IsFixedSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="4fc43-167">获取一个值，该值指示 <see cref="T:System.Collections.IDictionary" /> 对象是否具有固定大小。</span><span class="sxs-lookup"><span data-stu-id="4fc43-167">Gets a value indicating whether the <see cref="T:System.Collections.IDictionary" /> object has a fixed size.</span></span></summary>
        <value><span data-ttu-id="4fc43-168">如果 <see cref="T:System.Collections.IDictionary" /> 对象具有固定大小，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="4fc43-168"><see langword="true" /> if the <see cref="T:System.Collections.IDictionary" /> object has a fixed size; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4fc43-169">具有固定大小的集合不允许在创建集合后添加或删除元素，但允许修改现有元素。</span><span class="sxs-lookup"><span data-stu-id="4fc43-169">A collection with a fixed size does not allow the addition or removal of elements after the collection is created, but does allow the modification of existing elements.</span></span>  
  
 <span data-ttu-id="4fc43-170">具有固定大小的集合就是一个集合，其中包含阻止添加和移除元素的包装;因此，如果对基础集合进行了更改，包括添加或删除元素，则固定大小的集合将反映这些更改。</span><span class="sxs-lookup"><span data-stu-id="4fc43-170">A collection with a fixed size is simply a collection with a wrapper that prevents adding and removing elements; therefore, if changes are made to the underlying collection, including the addition or removal of elements, the fixed-size collection reflects those changes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4fc43-171">下面的代码示例演示如何实现 <xref:System.Collections.IDictionary.IsFixedSize%2A> 属性。</span><span class="sxs-lookup"><span data-stu-id="4fc43-171">The following code example demonstrates how to implement the <xref:System.Collections.IDictionary.IsFixedSize%2A> property.</span></span> <span data-ttu-id="4fc43-172">此代码示例是为类提供的更大示例的一部分 <xref:System.Collections.IDictionary> 。</span><span class="sxs-lookup"><span data-stu-id="4fc43-172">This code example is part of a larger example provided for the <xref:System.Collections.IDictionary> class.</span></span>  
  
 [!code-cpp[Dictionary#6](~/samples/snippets/cpp/VS_Snippets_CLR/Dictionary/cpp/Dictionary.cpp#6)]
 [!code-csharp[Dictionary#6](~/samples/snippets/csharp/VS_Snippets_CLR/Dictionary/CS/Dictionary.cs#6)]
 [!code-vb[Dictionary#6](~/samples/snippets/visualbasic/VS_Snippets_CLR/Dictionary/VB/Dictionary.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public bool IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Collections.IDictionary.IsReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsReadOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsReadOnly { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsReadOnly : bool" Usage="System.Collections.IDictionary.IsReadOnly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="4fc43-173">获取一个值，该值指示 <see cref="T:System.Collections.IDictionary" /> 对象是否为只读。</span><span class="sxs-lookup"><span data-stu-id="4fc43-173">Gets a value indicating whether the <see cref="T:System.Collections.IDictionary" /> object is read-only.</span></span></summary>
        <value><span data-ttu-id="4fc43-174">如果 <see cref="T:System.Collections.IDictionary" /> 对象为只读，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="4fc43-174"><see langword="true" /> if the <see cref="T:System.Collections.IDictionary" /> object is read-only; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4fc43-175">在创建只读集合后，该集合不允许添加、移除或修改元素。</span><span class="sxs-lookup"><span data-stu-id="4fc43-175">A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4fc43-176">下面的代码示例演示如何实现 <xref:System.Collections.IDictionary.IsReadOnly%2A> 属性。</span><span class="sxs-lookup"><span data-stu-id="4fc43-176">The following code example demonstrates how to implement the <xref:System.Collections.IDictionary.IsReadOnly%2A> property.</span></span> <span data-ttu-id="4fc43-177">此代码示例是为类提供的更大示例的一部分 <xref:System.Collections.IDictionary> 。</span><span class="sxs-lookup"><span data-stu-id="4fc43-177">This code example is part of a larger example provided for the <xref:System.Collections.IDictionary> class.</span></span>  
  
 [!code-cpp[Dictionary#4](~/samples/snippets/cpp/VS_Snippets_CLR/Dictionary/cpp/Dictionary.cpp#4)]
 [!code-csharp[Dictionary#4](~/samples/snippets/csharp/VS_Snippets_CLR/Dictionary/CS/Dictionary.cs#4)]
 [!code-vb[Dictionary#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/Dictionary/VB/Dictionary.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public object this[object key] { get; set; }" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".property instance object Item(object)" />
      <MemberSignature Language="DocId" Value="P:System.Collections.IDictionary.Item(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Default Public Property Item(key As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ default[System::Object ^] { System::Object ^ get(System::Object ^ key); void set(System::Object ^ key, System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Item(obj) : obj with get, set" Usage="System.Collections.IDictionary.Item" />
      <MemberSignature Language="C#" Value="public object? this[object key] { get; set; }" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="4fc43-178">要获取或设置的元素的键。</span><span class="sxs-lookup"><span data-stu-id="4fc43-178">The key of the element to get or set.</span></span></param>
        <summary><span data-ttu-id="4fc43-179">获取或设置具有指定键的元素。</span><span class="sxs-lookup"><span data-stu-id="4fc43-179">Gets or sets the element with the specified key.</span></span></summary>
        <value><span data-ttu-id="4fc43-180">具有指定键的元素；如果该键不存在，则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4fc43-180">The element with the specified key, or <see langword="null" /> if the key does not exist.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4fc43-181">通过此属性，可以使用以下语法来访问集合中的特定元素：`myCollection[key]`。</span><span class="sxs-lookup"><span data-stu-id="4fc43-181">This property provides the ability to access a specific element in the collection by using the following syntax: `myCollection[key]`.</span></span>  
  
 <span data-ttu-id="4fc43-182">你还可以使用 <xref:System.Collections.IDictionary.Item%2A> 属性来添加新元素，方法是设置字典中不存在的键的值 (例如 `myCollection["myNonexistentKey"] = myValue`) 。</span><span class="sxs-lookup"><span data-stu-id="4fc43-182">You can also use the <xref:System.Collections.IDictionary.Item%2A> property to add new elements by setting the value of a key that does not exist in the dictionary (for example, `myCollection["myNonexistentKey"] = myValue`).</span></span> <span data-ttu-id="4fc43-183">但是，如果字典中已存在指定的键，则设置 <xref:System.Collections.IDictionary.Item%2A> 属性会覆盖旧值。</span><span class="sxs-lookup"><span data-stu-id="4fc43-183">However, if the specified key already exists in the dictionary, setting the <xref:System.Collections.IDictionary.Item%2A> property overwrites the old value.</span></span> <span data-ttu-id="4fc43-184">与此相反， <xref:System.Collections.IDictionary.Add%2A> 方法不会修改现有元素。</span><span class="sxs-lookup"><span data-stu-id="4fc43-184">In contrast, the <xref:System.Collections.IDictionary.Add%2A> method does not modify existing elements.</span></span>  
  
 <span data-ttu-id="4fc43-185">实现在是否允许键时可能有所不同 `null` 。</span><span class="sxs-lookup"><span data-stu-id="4fc43-185">Implementations can vary in whether they allow the key to be `null`.</span></span>  
  
 <span data-ttu-id="4fc43-186">C # 语言使用 `this` [this](/dotnet/csharp/language-reference/keywords/this)关键字来定义索引器，而不是实现 <xref:System.Collections.IDictionary.Item%2A> 属性。</span><span class="sxs-lookup"><span data-stu-id="4fc43-186">The C# language uses the `this`[this](/dotnet/csharp/language-reference/keywords/this) keyword to define the indexers instead of implementing the <xref:System.Collections.IDictionary.Item%2A> property.</span></span> <span data-ttu-id="4fc43-187">Visual Basic 将 <xref:System.Collections.IDictionary.Item%2A> 实现为默认属性，该属性提供相同的索引功能。</span><span class="sxs-lookup"><span data-stu-id="4fc43-187">Visual Basic implements <xref:System.Collections.IDictionary.Item%2A> as a default property, which provides the same indexing functionality.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4fc43-188">下面的代码示例演示如何实现 <xref:System.Collections.IDictionary.Item%2A> 属性。</span><span class="sxs-lookup"><span data-stu-id="4fc43-188">The following code example demonstrates how to implement the <xref:System.Collections.IDictionary.Item%2A> property.</span></span> <span data-ttu-id="4fc43-189">此代码示例是为类提供的更大示例的一部分 <xref:System.Collections.IDictionary> 。</span><span class="sxs-lookup"><span data-stu-id="4fc43-189">This code example is part of a larger example provided for the <xref:System.Collections.IDictionary> class.</span></span>  
  
 [!code-cpp[Dictionary#13](~/samples/snippets/cpp/VS_Snippets_CLR/Dictionary/cpp/Dictionary.cpp#13)]
 [!code-csharp[Dictionary#13](~/samples/snippets/csharp/VS_Snippets_CLR/Dictionary/CS/Dictionary.cs#13)]
 [!code-vb[Dictionary#13](~/samples/snippets/visualbasic/VS_Snippets_CLR/Dictionary/VB/Dictionary.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4fc43-190"><paramref name="key" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4fc43-190"><paramref name="key" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="4fc43-191">设置该属性，而且 <see cref="T:System.Collections.IDictionary" /> 对象为只读。</span><span class="sxs-lookup"><span data-stu-id="4fc43-191">The property is set and the <see cref="T:System.Collections.IDictionary" /> object is read-only.</span></span>  
  
<span data-ttu-id="4fc43-192">- 或 -</span><span class="sxs-lookup"><span data-stu-id="4fc43-192">-or-</span></span> 
<span data-ttu-id="4fc43-193">设置了该属性，但 <paramref name="key" /> 不存在于集合中，且 <see cref="T:System.Collections.IDictionary" /> 具有固定的大小。</span><span class="sxs-lookup"><span data-stu-id="4fc43-193">The property is set, <paramref name="key" /> does not exist in the collection, and the <see cref="T:System.Collections.IDictionary" /> has a fixed size.</span></span></exception>
        <altmember cref="M:System.Collections.IDictionary.Add(System.Object,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Keys">
      <MemberSignature Language="C#" Value="public System.Collections.ICollection Keys { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ICollection Keys" />
      <MemberSignature Language="DocId" Value="P:System.Collections.IDictionary.Keys" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Keys As ICollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::ICollection ^ Keys { System::Collections::ICollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Keys : System.Collections.ICollection" Usage="System.Collections.IDictionary.Keys" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ICollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="4fc43-194">获取 <see cref="T:System.Collections.ICollection" /> 对象，它包含 <see cref="T:System.Collections.IDictionary" /> 对象的键。</span><span class="sxs-lookup"><span data-stu-id="4fc43-194">Gets an <see cref="T:System.Collections.ICollection" /> object containing the keys of the <see cref="T:System.Collections.IDictionary" /> object.</span></span></summary>
        <value><span data-ttu-id="4fc43-195"><see cref="T:System.Collections.ICollection" /> 对象，它包含 <see cref="T:System.Collections.IDictionary" /> 对象的键。</span><span class="sxs-lookup"><span data-stu-id="4fc43-195">An <see cref="T:System.Collections.ICollection" /> object containing the keys of the <see cref="T:System.Collections.IDictionary" /> object.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4fc43-196">返回的对象中的键顺序未 <xref:System.Collections.ICollection> 指定，但保证其顺序与属性返回的中的相应值顺序相同 <xref:System.Collections.ICollection> <xref:System.Collections.IDictionary.Values%2A> 。</span><span class="sxs-lookup"><span data-stu-id="4fc43-196">The order of the keys in the returned <xref:System.Collections.ICollection> object is unspecified, but is guaranteed to be the same order as the corresponding values in the <xref:System.Collections.ICollection> returned by the <xref:System.Collections.IDictionary.Values%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4fc43-197">下面的代码示例演示如何实现 <xref:System.Collections.IDictionary.Keys%2A> 属性。</span><span class="sxs-lookup"><span data-stu-id="4fc43-197">The following code example demonstrates how to implement the <xref:System.Collections.IDictionary.Keys%2A> property.</span></span> <span data-ttu-id="4fc43-198">此代码示例是为类提供的更大示例的一部分 <xref:System.Collections.IDictionary> 。</span><span class="sxs-lookup"><span data-stu-id="4fc43-198">This code example is part of a larger example provided for the <xref:System.Collections.IDictionary> class.</span></span>  
  
 [!code-cpp[Dictionary#10](~/samples/snippets/cpp/VS_Snippets_CLR/Dictionary/cpp/Dictionary.cpp#10)]
 [!code-csharp[Dictionary#10](~/samples/snippets/csharp/VS_Snippets_CLR/Dictionary/CS/Dictionary.cs#10)]
 [!code-vb[Dictionary#10](~/samples/snippets/visualbasic/VS_Snippets_CLR/Dictionary/VB/Dictionary.vb#10)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.ICollection" />
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove (object key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Remove(object key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.IDictionary.Remove(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Remove (key As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Remove(System::Object ^ key);" />
      <MemberSignature Language="F#" Value="abstract member Remove : obj -&gt; unit" Usage="iDictionary.Remove key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="4fc43-199">要移除的元素的键。</span><span class="sxs-lookup"><span data-stu-id="4fc43-199">The key of the element to remove.</span></span></param>
        <summary><span data-ttu-id="4fc43-200">从 <see cref="T:System.Collections.IDictionary" /> 对象中移除具有指定键的元素。</span><span class="sxs-lookup"><span data-stu-id="4fc43-200">Removes the element with the specified key from the <see cref="T:System.Collections.IDictionary" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4fc43-201">如果 <xref:System.Collections.IDictionary> 对象不包含具有指定键的元素，则 <xref:System.Collections.IDictionary> 保持不变。</span><span class="sxs-lookup"><span data-stu-id="4fc43-201">If the <xref:System.Collections.IDictionary> object does not contain an element with the specified key, the <xref:System.Collections.IDictionary> remains unchanged.</span></span> <span data-ttu-id="4fc43-202">不会引发异常。</span><span class="sxs-lookup"><span data-stu-id="4fc43-202">No exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4fc43-203">下面的代码示例演示如何实现 <xref:System.Collections.IDictionary.Remove%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="4fc43-203">The following code example demonstrates how to implement the <xref:System.Collections.IDictionary.Remove%2A> method.</span></span> <span data-ttu-id="4fc43-204">此代码示例是为类提供的更大示例的一部分 <xref:System.Collections.IDictionary> 。</span><span class="sxs-lookup"><span data-stu-id="4fc43-204">This code example is part of a larger example provided for the <xref:System.Collections.IDictionary> class.</span></span>  
  
 [!code-cpp[Dictionary#7](~/samples/snippets/cpp/VS_Snippets_CLR/Dictionary/cpp/Dictionary.cpp#7)]
 [!code-csharp[Dictionary#7](~/samples/snippets/csharp/VS_Snippets_CLR/Dictionary/CS/Dictionary.cs#7)]
 [!code-vb[Dictionary#7](~/samples/snippets/visualbasic/VS_Snippets_CLR/Dictionary/VB/Dictionary.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4fc43-205"><paramref name="key" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4fc43-205"><paramref name="key" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="4fc43-206"><see cref="T:System.Collections.IDictionary" /> 对象是只读的。</span><span class="sxs-lookup"><span data-stu-id="4fc43-206">The <see cref="T:System.Collections.IDictionary" /> object is read-only.</span></span>  
  
<span data-ttu-id="4fc43-207">- 或 -</span><span class="sxs-lookup"><span data-stu-id="4fc43-207">-or-</span></span> 
<span data-ttu-id="4fc43-208"><see cref="T:System.Collections.IDictionary" /> 具有固定的大小。</span><span class="sxs-lookup"><span data-stu-id="4fc43-208">The <see cref="T:System.Collections.IDictionary" /> has a fixed size.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Values">
      <MemberSignature Language="C#" Value="public System.Collections.ICollection Values { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ICollection Values" />
      <MemberSignature Language="DocId" Value="P:System.Collections.IDictionary.Values" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Values As ICollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::ICollection ^ Values { System::Collections::ICollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Values : System.Collections.ICollection" Usage="System.Collections.IDictionary.Values" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ICollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="4fc43-209">获取 <see cref="T:System.Collections.ICollection" /> 对象，它包含 <see cref="T:System.Collections.IDictionary" /> 对象中的值。</span><span class="sxs-lookup"><span data-stu-id="4fc43-209">Gets an <see cref="T:System.Collections.ICollection" /> object containing the values in the <see cref="T:System.Collections.IDictionary" /> object.</span></span></summary>
        <value><span data-ttu-id="4fc43-210"><see cref="T:System.Collections.ICollection" /> 对象，它包含 <see cref="T:System.Collections.IDictionary" /> 对象中的值。</span><span class="sxs-lookup"><span data-stu-id="4fc43-210">An <see cref="T:System.Collections.ICollection" /> object containing the values in the <see cref="T:System.Collections.IDictionary" /> object.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4fc43-211">返回的对象中的值的顺序未 <xref:System.Collections.ICollection> 指定，但保证其顺序与属性返回的中的对应键的顺序相同 <xref:System.Collections.ICollection> <xref:System.Collections.IDictionary.Keys%2A> 。</span><span class="sxs-lookup"><span data-stu-id="4fc43-211">The order of the values in the returned <xref:System.Collections.ICollection> object is unspecified, but is guaranteed to be the same order as the corresponding keys in the <xref:System.Collections.ICollection> returned by the <xref:System.Collections.IDictionary.Keys%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4fc43-212">下面的代码示例演示如何实现 <xref:System.Collections.IDictionary.Values%2A> 属性。</span><span class="sxs-lookup"><span data-stu-id="4fc43-212">The following code example demonstrates how to implement the <xref:System.Collections.IDictionary.Values%2A> property.</span></span> <span data-ttu-id="4fc43-213">此代码示例是为类提供的更大示例的一部分 <xref:System.Collections.IDictionary> 。</span><span class="sxs-lookup"><span data-stu-id="4fc43-213">This code example is part of a larger example provided for the <xref:System.Collections.IDictionary> class.</span></span>  
  
 [!code-cpp[Dictionary#11](~/samples/snippets/cpp/VS_Snippets_CLR/Dictionary/cpp/Dictionary.cpp#11)]
 [!code-csharp[Dictionary#11](~/samples/snippets/csharp/VS_Snippets_CLR/Dictionary/CS/Dictionary.cs#11)]
 [!code-vb[Dictionary#11](~/samples/snippets/visualbasic/VS_Snippets_CLR/Dictionary/VB/Dictionary.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.ICollection" />
      </Docs>
    </Member>
  </Members>
</Type>
