<Type Name="Queue" FullName="System.Collections.Queue">
  <Metadata><Meta Name="ms.openlocfilehash" Value="06c049ab9e5ce845bafda6af4d7e118b3efc1d39" /><Meta Name="ms.sourcegitcommit" Value="c982ad9e10a242d90f1e631b5981570f9e5d9f34" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/10/2020" /><Meta Name="ms.locfileid" Value="89972878" /></Metadata><TypeSignature Language="C#" Value="public class Queue : System.Collections.ICollection" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Queue extends System.Object implements class System.Collections.ICollection, class System.Collections.IEnumerable" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1" />
  <TypeSignature Language="DocId" Value="T:System.Collections.Queue" />
  <TypeSignature Language="VB.NET" Value="Public Class Queue&#xA;Implements ICollection" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1" />
  <TypeSignature Language="C++ CLI" Value="public ref class Queue : System::Collections::ICollection" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1" />
  <TypeSignature Language="F#" Value="type Queue = class&#xA;    interface ICollection&#xA;    interface IEnumerable" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1" />
  <TypeSignature Language="C#" Value="public class Queue : ICloneable, System.Collections.ICollection" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Queue extends System.Object implements class System.Collections.ICollection, class System.Collections.IEnumerable, class System.ICloneable" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.0;netstandard-2.1" />
  <TypeSignature Language="VB.NET" Value="Public Class Queue&#xA;Implements ICloneable, ICollection" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="C++ CLI" Value="public ref class Queue : ICloneable, System::Collections::ICollection" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="F#" Value="type Queue = class&#xA;    interface ICollection&#xA;    interface IEnumerable&#xA;    interface ICloneable" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit Queue extends System.Object implements class System.Collections.ICollection, class System.Collections.IEnumerable, class System.ICloneable" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="F#" Value="type Queue = class&#xA;    interface ICollection&#xA;    interface ICloneable&#xA;    interface IEnumerable" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <AssemblyInfo>
    <AssemblyName>System.Collections.NonGeneric</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Collections.NonGeneric" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.ICollection</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName Language="C#">[System.Serializable]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Serializable&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName Language="C#">[System.Diagnostics.DebuggerDisplay("Count = {Count}")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerDisplay("Count = {Count}")&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName Language="C#">[System.Diagnostics.DebuggerTypeProxy(typeof(System.Collections.Queue/QueueDebugView))]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerTypeProxy(typeof(System.Collections.Queue/QueueDebugView))&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName Language="C#">[System.Runtime.InteropServices.ComVisible(true)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.ComVisible(true)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="dfcdf-101">表示对象的先进先出集合。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-101">Represents a first-in, first-out collection of objects.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="dfcdf-102">此类将队列实现为循环数组。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-102">This class implements a queue as a circular array.</span></span> <span data-ttu-id="dfcdf-103">存储在中的对象 <xref:System.Collections.Queue> 将在一端插入并从另一个中删除。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-103">Objects stored in a <xref:System.Collections.Queue> are inserted at one end and removed from the other.</span></span>  

> [!IMPORTANT]
>  <span data-ttu-id="dfcdf-104">不建议使用 `Queue` 类进行新的开发。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-104">We don't recommend that you use the `Queue` class for new development.</span></span> <span data-ttu-id="dfcdf-105">相反，我们建议使用泛型 <xref:System.Collections.Generic.Queue%601> 类。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-105">Instead, we recommend that you use the generic <xref:System.Collections.Generic.Queue%601> class.</span></span> <span data-ttu-id="dfcdf-106">有关详细信息，请参阅 GitHub 上 [不应使用非泛型集合](https://github.com/dotnet/platform-compat/blob/master/docs/DE0006.md) 。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-106">For more information, see [Non-generic collections shouldn't be used](https://github.com/dotnet/platform-compat/blob/master/docs/DE0006.md) on GitHub.</span></span>

 <span data-ttu-id="dfcdf-107">如果需要临时存储信息，则队列和堆栈非常有用;也就是说，当你可能想要在检索元素值后丢弃该元素时。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-107">Queues and stacks are useful when you need temporary storage for information; that is, when you might want to discard an element after retrieving its value.</span></span> <span data-ttu-id="dfcdf-108"><xref:System.Collections.Queue>如果需要以存储在集合中的相同顺序访问该信息，请使用。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-108">Use <xref:System.Collections.Queue> if you need to access the information in the same order that it is stored in the collection.</span></span> <span data-ttu-id="dfcdf-109"><xref:System.Collections.Stack>如果需要按相反的顺序访问该信息，请使用。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-109">Use <xref:System.Collections.Stack> if you need to access the information in reverse order.</span></span> <span data-ttu-id="dfcdf-110"><xref:System.Collections.Concurrent.ConcurrentQueue%601> <xref:System.Collections.Concurrent.ConcurrentStack%601> 如果需要从多个线程同时访问集合，请使用或。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-110">Use <xref:System.Collections.Concurrent.ConcurrentQueue%601> or <xref:System.Collections.Concurrent.ConcurrentStack%601> if you need to access the collection from multiple threads concurrently.</span></span>  
  
 <span data-ttu-id="dfcdf-111">可以对及其元素执行三个主要操作 <xref:System.Collections.Queue> ：</span><span class="sxs-lookup"><span data-stu-id="dfcdf-111">Three main operations can be performed on a <xref:System.Collections.Queue> and its elements:</span></span>  
  
-   <span data-ttu-id="dfcdf-112"><xref:System.Collections.Queue.Enqueue%2A> 将一个元素添加到的末尾 <xref:System.Collections.Queue> 。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-112"><xref:System.Collections.Queue.Enqueue%2A> adds an element to the end of the <xref:System.Collections.Queue>.</span></span>  
  
-   <span data-ttu-id="dfcdf-113"><xref:System.Collections.Queue.Dequeue%2A> 从的开头移除最旧的元素 <xref:System.Collections.Queue> 。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-113"><xref:System.Collections.Queue.Dequeue%2A> removes the oldest element from the start of the <xref:System.Collections.Queue>.</span></span>  
  
-   <span data-ttu-id="dfcdf-114"><xref:System.Collections.Queue.Peek%2A> 返回位于开头的最早的元素，但不将 <xref:System.Collections.Queue> 其从中移除 <xref:System.Collections.Queue> 。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-114"><xref:System.Collections.Queue.Peek%2A> returns the oldest element that is at the start of the <xref:System.Collections.Queue> but does not remove it from the <xref:System.Collections.Queue>.</span></span>  
  
 <span data-ttu-id="dfcdf-115">的容量 <xref:System.Collections.Queue> 是可容纳的元素数 <xref:System.Collections.Queue> 。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-115">The capacity of a <xref:System.Collections.Queue> is the number of elements the <xref:System.Collections.Queue> can hold.</span></span> <span data-ttu-id="dfcdf-116">向添加元素时，会 <xref:System.Collections.Queue> 根据需要通过重新分配来自动增加容量。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-116">As elements are added to a <xref:System.Collections.Queue>, the capacity is automatically increased as required through reallocation.</span></span>  <span data-ttu-id="dfcdf-117">可以通过调用来减少容量 <xref:System.Collections.Queue.TrimToSize%2A> 。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-117">The capacity can be decreased by calling <xref:System.Collections.Queue.TrimToSize%2A>.</span></span>  
  
 <span data-ttu-id="dfcdf-118">增长系数是在需要更大容量时，当前容量乘以的数值。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-118">The growth factor is the number by which the current capacity is multiplied when a greater capacity is required.</span></span>  <span data-ttu-id="dfcdf-119">此增长因子是在构造时确定的 <xref:System.Collections.Queue> 。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-119">The growth factor is determined when the <xref:System.Collections.Queue> is constructed.</span></span> <span data-ttu-id="dfcdf-120">默认增长系数为2.0。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-120">The default growth factor is 2.0.</span></span> <span data-ttu-id="dfcdf-121"><xref:System.Collections.Queue>无论增长系数如何，的容量将始终至少增加四个。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-121">The capacity of the <xref:System.Collections.Queue> will always increase by at least a minimum of four, regardless of the growth factor.</span></span> <span data-ttu-id="dfcdf-122">例如， <xref:System.Collections.Queue> 如果需要更大的容量，则增长系数为1.0 的将始终增加四倍。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-122">For example, a <xref:System.Collections.Queue> with a growth factor of 1.0 will always increase in capacity by four when a greater capacity is required.</span></span>  
  
 <span data-ttu-id="dfcdf-123"><xref:System.Collections.Queue> 接受 `null` 作为有效值，并允许重复元素。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-123"><xref:System.Collections.Queue> accepts `null` as a valid value and allows duplicate elements.</span></span>  
  
 <span data-ttu-id="dfcdf-124">有关此集合的泛型版本，请参阅 <xref:System.Collections.Generic.Queue%601?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="dfcdf-124">For the generic version of this collection, see <xref:System.Collections.Generic.Queue%601?displayProperty=nameWithType></span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dfcdf-125">下面的示例演示如何创建值并将其添加到中 <xref:System.Collections.Queue> ，以及如何打印出其值。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-125">The following example shows how to create and add values to a <xref:System.Collections.Queue> and how to print out its values.</span></span>  
  
 [!code-cpp[Classic Queue Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Queue Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Queue Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Queue Example/CS/source.cs#1)]
 [!code-vb[Classic Queue Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Queue Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="dfcdf-126"><see langword="Shared" />此类型) 成员 Visual Basic 的公共静态 (是线程安全的。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-126">Public static (<see langword="Shared" /> in Visual Basic) members of this type are thread safe.</span></span> <span data-ttu-id="dfcdf-127">但不保证所有实例成员都是线程安全的。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-127">Any instance members are not guaranteed to be thread safe.</span></span>  
  
<span data-ttu-id="dfcdf-128">若要保证的线程安全 <see cref="T:System.Collections.Queue" /> ，必须通过方法返回的包装执行所有操作 <see cref="M:System.Collections.Queue.Synchronized(System.Collections.Queue)" /> 。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-128">To guarantee the thread safety of the <see cref="T:System.Collections.Queue" />, all operations must be done through the wrapper returned by the <see cref="M:System.Collections.Queue.Synchronized(System.Collections.Queue)" /> method.</span></span>  
  
<span data-ttu-id="dfcdf-129">枚举整个集合本质上不是一个线程安全的过程。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-129">Enumerating through a collection is intrinsically not a thread-safe procedure.</span></span> <span data-ttu-id="dfcdf-130">即使某个集合已同步，其他线程仍可以修改该集合，这会导致枚举数引发异常。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-130">Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</span></span> <span data-ttu-id="dfcdf-131">若要确保枚举过程中的线程安全性，可以在整个枚举期间锁定集合，或者捕获由其他线程进行的更改所导致的异常。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-131">To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</span></span></threadsafe>
    <altmember cref="T:System.Collections.Generic.Queue`1" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="dfcdf-132">初始化 <see cref="T:System.Collections.Queue" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-132">Initializes a new instance of the <see cref="T:System.Collections.Queue" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Queue ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Queue.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Queue();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="dfcdf-133">初始化 <see cref="T:System.Collections.Queue" /> 类的新实例，该实例为空，具有默认初始容量并使用默认增长因子。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-133">Initializes a new instance of the <see cref="T:System.Collections.Queue" /> class that is empty, has the default initial capacity, and uses the default growth factor.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dfcdf-134">的容量 <xref:System.Collections.Queue> 是可容纳的元素数 <xref:System.Collections.Queue> 。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-134">The capacity of a <xref:System.Collections.Queue> is the number of elements the <xref:System.Collections.Queue> can hold.</span></span>  <span data-ttu-id="dfcdf-135">向添加元素时，会 <xref:System.Collections.Queue> 根据需要通过重新分配来自动增加容量。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-135">As elements are added to a <xref:System.Collections.Queue>, the capacity is automatically increased as required through reallocation.</span></span>  <span data-ttu-id="dfcdf-136">可以通过调用来减少容量 <xref:System.Collections.Queue.TrimToSize%2A> 。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-136">The capacity can be decreased by calling <xref:System.Collections.Queue.TrimToSize%2A>.</span></span>  
  
 <span data-ttu-id="dfcdf-137">增长系数是在需要更大容量时，当前容量乘以的数值。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-137">The growth factor is the number by which the current capacity is multiplied when a greater capacity is required.</span></span>  <span data-ttu-id="dfcdf-138">此增长因子是在构造时确定的 <xref:System.Collections.Queue> 。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-138">The growth factor is determined when the <xref:System.Collections.Queue> is constructed.</span></span>  
  
 <span data-ttu-id="dfcdf-139">此构造函数是一种 `O(1)` 操作。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-139">This constructor is an `O(1)` operation.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Queue (System.Collections.ICollection col);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.ICollection col) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Queue.#ctor(System.Collections.ICollection)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (col As ICollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Queue(System::Collections::ICollection ^ col);" />
      <MemberSignature Language="F#" Value="new System.Collections.Queue : System.Collections.ICollection -&gt; System.Collections.Queue" Usage="new System.Collections.Queue col" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="col" Type="System.Collections.ICollection" />
      </Parameters>
      <Docs>
        <param name="col"><span data-ttu-id="dfcdf-140"><see cref="T:System.Collections.ICollection" />，从其中复制元素。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-140">The <see cref="T:System.Collections.ICollection" /> to copy elements from.</span></span></param>
        <summary><span data-ttu-id="dfcdf-141">初始化 <see cref="T:System.Collections.Queue" /> 类的新实例，该实例包含从指定集合复制的元素，具有与所复制的元素数相同的初始容量并使用默认增长因子。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-141">Initializes a new instance of the <see cref="T:System.Collections.Queue" /> class that contains elements copied from the specified collection, has the same initial capacity as the number of elements copied, and uses the default growth factor.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dfcdf-142">的容量 <xref:System.Collections.Queue> 是可容纳的元素数 <xref:System.Collections.Queue> 。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-142">The capacity of a <xref:System.Collections.Queue> is the number of elements the <xref:System.Collections.Queue> can hold.</span></span>  <span data-ttu-id="dfcdf-143">向添加元素时，会 <xref:System.Collections.Queue> 根据需要通过重新分配来自动增加容量。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-143">As elements are added to a <xref:System.Collections.Queue>, the capacity is automatically increased as required through reallocation.</span></span>  <span data-ttu-id="dfcdf-144">可以通过调用来减少容量 <xref:System.Collections.Queue.TrimToSize%2A> 。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-144">The capacity can be decreased by calling <xref:System.Collections.Queue.TrimToSize%2A>.</span></span>  
  
 <span data-ttu-id="dfcdf-145">增长系数是在需要更大容量时，当前容量乘以的数值。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-145">The growth factor is the number by which the current capacity is multiplied when a greater capacity is required.</span></span>  <span data-ttu-id="dfcdf-146">此增长因子是在构造时确定的 <xref:System.Collections.Queue> 。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-146">The growth factor is determined when the <xref:System.Collections.Queue> is constructed.</span></span>  
  
 <span data-ttu-id="dfcdf-147">将元素复制到，其 <xref:System.Collections.Queue> 顺序与的读取顺序相同 <xref:System.Collections.IEnumerator> <xref:System.Collections.ICollection> 。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-147">The elements are copied onto the <xref:System.Collections.Queue> in the same order they are read by the <xref:System.Collections.IEnumerator> of the <xref:System.Collections.ICollection>.</span></span>  
  
 <span data-ttu-id="dfcdf-148">此构造函数是一个 `O(n)` 操作，其中 `n` 是中的元素数 `col` 。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-148">This constructor is an `O(n)` operation, where `n` is the number of elements in `col`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="dfcdf-149"><paramref name="col" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-149"><paramref name="col" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Collections.ICollection" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Queue (int capacity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 capacity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Queue.#ctor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (capacity As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Queue(int capacity);" />
      <MemberSignature Language="F#" Value="new System.Collections.Queue : int -&gt; System.Collections.Queue" Usage="new System.Collections.Queue capacity" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="capacity" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="capacity"><span data-ttu-id="dfcdf-150"><see cref="T:System.Collections.Queue" /> 可包含的初始元素数。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-150">The initial number of elements that the <see cref="T:System.Collections.Queue" /> can contain.</span></span></param>
        <summary><span data-ttu-id="dfcdf-151">初始化 <see cref="T:System.Collections.Queue" /> 类的新实例，该实例为空，具有指定的初始容量并使用默认增长因子。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-151">Initializes a new instance of the <see cref="T:System.Collections.Queue" /> class that is empty, has the specified initial capacity, and uses the default growth factor.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dfcdf-152">的容量 <xref:System.Collections.Queue> 是可容纳的元素数 <xref:System.Collections.Queue> 。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-152">The capacity of a <xref:System.Collections.Queue> is the number of elements the <xref:System.Collections.Queue> can hold.</span></span>  <span data-ttu-id="dfcdf-153">向添加元素时，会 <xref:System.Collections.Queue> 根据需要通过重新分配来自动增加容量。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-153">As elements are added to a <xref:System.Collections.Queue>, the capacity is automatically increased as required through reallocation.</span></span>  <span data-ttu-id="dfcdf-154">可以通过调用来减少容量 <xref:System.Collections.Queue.TrimToSize%2A> 。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-154">The capacity can be decreased by calling <xref:System.Collections.Queue.TrimToSize%2A>.</span></span>  
  
 <span data-ttu-id="dfcdf-155">增长系数是在需要更大容量时，当前容量乘以的数值。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-155">The growth factor is the number by which the current capacity is multiplied when a greater capacity is required.</span></span>  <span data-ttu-id="dfcdf-156">此增长因子是在构造时确定的 <xref:System.Collections.Queue> 。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-156">The growth factor is determined when the <xref:System.Collections.Queue> is constructed.</span></span>  
  
 <span data-ttu-id="dfcdf-157">如果集合的大小可为估算值，则指定初始容量后，无需在将元素添加到时执行多个大小调整操作 <xref:System.Collections.Queue> 。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-157">If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Queue>.</span></span>  
  
 <span data-ttu-id="dfcdf-158">此构造函数是一个 `O(n)` 操作，其中 `n` 是 `capacity` 。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-158">This constructor is an `O(n)` operation, where `n` is `capacity`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="dfcdf-159"><paramref name="capacity" /> 小于零。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-159"><paramref name="capacity" /> is less than zero.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Queue (int capacity, float growFactor);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 capacity, float32 growFactor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Queue.#ctor(System.Int32,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (capacity As Integer, growFactor As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Queue(int capacity, float growFactor);" />
      <MemberSignature Language="F#" Value="new System.Collections.Queue : int * single -&gt; System.Collections.Queue" Usage="new System.Collections.Queue (capacity, growFactor)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="capacity" Type="System.Int32" />
        <Parameter Name="growFactor" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="capacity"><span data-ttu-id="dfcdf-160"><see cref="T:System.Collections.Queue" /> 可包含的初始元素数。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-160">The initial number of elements that the <see cref="T:System.Collections.Queue" /> can contain.</span></span></param>
        <param name="growFactor"><span data-ttu-id="dfcdf-161">扩展 <see cref="T:System.Collections.Queue" /> 容量要使用的因子。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-161">The factor by which the capacity of the <see cref="T:System.Collections.Queue" /> is expanded.</span></span></param>
        <summary><span data-ttu-id="dfcdf-162">初始化 <see cref="T:System.Collections.Queue" /> 类的新实例，该实例为空，具有指定的初始容量并使用指定的增长因子。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-162">Initializes a new instance of the <see cref="T:System.Collections.Queue" /> class that is empty, has the specified initial capacity, and uses the specified growth factor.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dfcdf-163">的容量 <xref:System.Collections.Queue> 是可容纳的元素数 <xref:System.Collections.Queue> 。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-163">The capacity of a <xref:System.Collections.Queue> is the number of elements the <xref:System.Collections.Queue> can hold.</span></span>  <span data-ttu-id="dfcdf-164">向添加元素时，会 <xref:System.Collections.Queue> 根据需要通过重新分配来自动增加容量。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-164">As elements are added to a <xref:System.Collections.Queue>, the capacity is automatically increased as required through reallocation.</span></span>  <span data-ttu-id="dfcdf-165">可以通过调用来减少容量 <xref:System.Collections.Queue.TrimToSize%2A> 。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-165">The capacity can be decreased by calling <xref:System.Collections.Queue.TrimToSize%2A>.</span></span>  
  
 <span data-ttu-id="dfcdf-166">增长系数是在需要更大容量时，当前容量乘以的数值。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-166">The growth factor is the number by which the current capacity is multiplied when a greater capacity is required.</span></span>  <span data-ttu-id="dfcdf-167">此增长因子是在构造时确定的 <xref:System.Collections.Queue> 。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-167">The growth factor is determined when the <xref:System.Collections.Queue> is constructed.</span></span> <span data-ttu-id="dfcdf-168">的容量 <xref:System.Collections.Queue> 始终按最小值增加，无论增长系数如何; 1.0 的增长系数都不会阻止 <xref:System.Collections.Queue> 增加大小。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-168">The capacity of the <xref:System.Collections.Queue> will always increase by a minimum value, regardless of the growth factor; a growth factor of 1.0 will not prevent the <xref:System.Collections.Queue> from increasing in size.</span></span>  
  
 <span data-ttu-id="dfcdf-169">如果集合的大小可为估算值，则指定初始容量后，无需在将元素添加到时执行多个大小调整操作 <xref:System.Collections.Queue> 。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-169">If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Queue>.</span></span>  
  
 <span data-ttu-id="dfcdf-170">此构造函数是一个 `O(n)` 操作，其中 `n` 是 `capacity` 。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-170">This constructor is an `O(n)` operation, where `n` is `capacity`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="dfcdf-171"><paramref name="capacity" /> 小于零。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-171"><paramref name="capacity" /> is less than zero.</span></span>  
  
<span data-ttu-id="dfcdf-172">- 或 -</span><span class="sxs-lookup"><span data-stu-id="dfcdf-172">-or-</span></span> 
 <span data-ttu-id="dfcdf-173"><paramref name="growFactor" /> 小于 1.0 或大于 10.0。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-173"><paramref name="growFactor" /> is less than 1.0 or greater than 10.0.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public virtual void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Queue.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Clear();" />
      <MemberSignature Language="F#" Value="abstract member Clear : unit -&gt; unit&#xA;override this.Clear : unit -&gt; unit" Usage="queue.Clear " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="dfcdf-174">从 <see cref="T:System.Collections.Queue" /> 中移除所有对象。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-174">Removes all objects from the <see cref="T:System.Collections.Queue" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dfcdf-175"><xref:System.Collections.Queue.Count%2A> 将设置为零，同时还会释放集合元素中其他对象的引用。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-175"><xref:System.Collections.Queue.Count%2A> is set to zero, and references to other objects from elements of the collection are also released.</span></span>  
  
 <span data-ttu-id="dfcdf-176">容量保持不变。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-176">The capacity remains unchanged.</span></span> <span data-ttu-id="dfcdf-177">若要重置的容量 <xref:System.Collections.Queue> ，请调用 <xref:System.Collections.Queue.TrimToSize%2A> 。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-177">To reset the capacity of the <xref:System.Collections.Queue>, call <xref:System.Collections.Queue.TrimToSize%2A>.</span></span> <span data-ttu-id="dfcdf-178">修整空会将的 <xref:System.Collections.Queue> 容量设置 <xref:System.Collections.Queue> 为默认容量。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-178">Trimming an empty <xref:System.Collections.Queue> sets the capacity of the <xref:System.Collections.Queue> to the default capacity.</span></span>  
  
 <span data-ttu-id="dfcdf-179">此方法是一个 `O(n)` 操作，其中 `n` 是 <xref:System.Collections.Queue.Count%2A> 。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-179">This method is an `O(n)` operation, where `n` is <xref:System.Collections.Queue.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dfcdf-180">下面的示例演示如何清除的值 <xref:System.Collections.Queue> 。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-180">The following example shows how to clear the values of the <xref:System.Collections.Queue>.</span></span>  
  
 [!code-cpp[Classic Queue.Clear Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Queue.Clear Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Queue.Clear Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Queue.Clear Example/CS/source.cs#1)]
 [!code-vb[Classic Queue.Clear Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Queue.Clear Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Queue.TrimToSize" />
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public virtual object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Queue.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Clone () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Clone();" />
      <MemberSignature Language="F#" Value="abstract member Clone : unit -&gt; obj&#xA;override this.Clone : unit -&gt; obj" Usage="queue.Clone " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">M:System.ICloneable.Clone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="dfcdf-181">创建 <see cref="T:System.Collections.Queue" /> 的浅表副本。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-181">Creates a shallow copy of the <see cref="T:System.Collections.Queue" />.</span></span></summary>
        <returns><span data-ttu-id="dfcdf-182"><see cref="T:System.Collections.Queue" /> 的浅表副本。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-182">A shallow copy of the <see cref="T:System.Collections.Queue" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dfcdf-183">集合的浅表副本仅复制集合的元素，无论它们是引用类型还是值类型，但不复制引用引用的对象。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-183">A shallow copy of a collection copies only the elements of the collection, whether they are reference types or value types, but it does not copy the objects that the references refer to.</span></span> <span data-ttu-id="dfcdf-184">新集合中的引用指向原始集合中的引用所指向的相同对象。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-184">The references in the new collection point to the same objects that the references in the original collection point to.</span></span>  
  
 <span data-ttu-id="dfcdf-185">与此相反，集合的深层副本会复制元素以及元素直接或间接引用的所有内容。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-185">In contrast, a deep copy of a collection copies the elements and everything directly or indirectly referenced by the elements.</span></span>  
  
 <span data-ttu-id="dfcdf-186">此方法是一个 `O(n)` 操作，其中 `n` 是 <xref:System.Collections.Queue.Count%2A> 。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-186">This method is an `O(n)` operation, where `n` is <xref:System.Collections.Queue.Count%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public virtual bool Contains (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Contains(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Queue.Contains(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Contains (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Contains(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="abstract member Contains : obj -&gt; bool&#xA;override this.Contains : obj -&gt; bool" Usage="queue.Contains obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="dfcdf-187">要在 <see cref="T:System.Object" /> 中定位的 <see cref="T:System.Collections.Queue" />。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-187">The <see cref="T:System.Object" /> to locate in the <see cref="T:System.Collections.Queue" />.</span></span> <span data-ttu-id="dfcdf-188">该值可以为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-188">The value can be <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="dfcdf-189">确定某元素是否在 <see cref="T:System.Collections.Queue" /> 中。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-189">Determines whether an element is in the <see cref="T:System.Collections.Queue" />.</span></span></summary>
        <returns><span data-ttu-id="dfcdf-190">如果在 <see langword="true" /> 中找到 <paramref name="obj" />，则为 <see cref="T:System.Collections.Queue" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-190"><see langword="true" /> if <paramref name="obj" /> is found in the <see cref="T:System.Collections.Queue" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dfcdf-191">此方法通过调用来确定相等性 <xref:System.Object.Equals%2A?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-191">This method determines equality by calling <xref:System.Object.Equals%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="dfcdf-192">此方法执行线性搜索;因此，此方法是一个 `O(n)` 操作，其中 `n` 是 <xref:System.Collections.Queue.Count%2A> 。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-192">This method performs a linear search; therefore, this method is an `O(n)` operation, where `n` is <xref:System.Collections.Queue.Count%2A>.</span></span>  
  
 <span data-ttu-id="dfcdf-193">从 .NET Framework 2.0 开始，此方法使用集合的对象的 <xref:System.Object.Equals%2A> 和 <xref:System.IComparable.CompareTo%2A> 方法 `obj` 来确定是否 `item` 存在。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-193">Starting with the .NET Framework 2.0, this method uses the collection's objects' <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods on `obj` to determine whether `item` exists.</span></span> <span data-ttu-id="dfcdf-194">在 .NET Framework 的早期版本中，此决定是通过对 <xref:System.Object.Equals%2A> <xref:System.IComparable.CompareTo%2A> `obj` 集合中的对象使用参数的和方法进行的。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-194">In the earlier versions of the .NET Framework, this determination was made by using the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the `obj` parameter on the objects in the collection.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/standard/globalization-localization/performing-culture-insensitive-string-operations"><span data-ttu-id="dfcdf-195">执行不区分区域性的字符串操作</span><span class="sxs-lookup"><span data-stu-id="dfcdf-195">Performing Culture-Insensitive String Operations</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public virtual void CopyTo (Array array, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CopyTo(class System.Array array, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Queue.CopyTo(System.Array,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub CopyTo (array As Array, index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void CopyTo(Array ^ array, int index);" />
      <MemberSignature Language="F#" Value="abstract member CopyTo : Array * int -&gt; unit&#xA;override this.CopyTo : Array * int -&gt; unit" Usage="queue.CopyTo (array, index)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="dfcdf-196">一维 <see cref="T:System.Array" />，它是从 <see cref="T:System.Collections.Queue" /> 复制的元素的目标。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-196">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.Queue" />.</span></span> <span data-ttu-id="dfcdf-197"><see cref="T:System.Array" /> 必须具有从零开始的索引。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-197">The <see cref="T:System.Array" /> must have zero-based indexing.</span></span></param>
        <param name="index"><span data-ttu-id="dfcdf-198"><paramref name="array" /> 中从零开始的索引，从此处开始复制。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-198">The zero-based index in <paramref name="array" /> at which copying begins.</span></span></param>
        <summary><span data-ttu-id="dfcdf-199">从指定数组索引开始将 <see cref="T:System.Collections.Queue" /> 元素复制到现有一维 <see cref="T:System.Array" /> 中。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-199">Copies the <see cref="T:System.Collections.Queue" /> elements to an existing one-dimensional <see cref="T:System.Array" />, starting at the specified array index.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dfcdf-200">元素 <xref:System.Array> 按枚举器循环访问的相同顺序复制到中 <xref:System.Collections.Queue> 。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-200">The elements are copied to the <xref:System.Array> in the same order in which the enumerator iterates through the <xref:System.Collections.Queue>.</span></span>  
  
 <span data-ttu-id="dfcdf-201">此方法是一个 `O(n)` 操作，其中 `n` 是 <xref:System.Collections.Queue.Count%2A> 。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-201">This method is an `O(n)` operation, where `n` is <xref:System.Collections.Queue.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dfcdf-202">下面的示例演示如何将复制 <xref:System.Collections.Queue> 到一维数组中。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-202">The following example shows how to copy a <xref:System.Collections.Queue> into a one-dimensional array.</span></span>  
  
 [!code-cpp[Classic Queue.CopyTo Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Queue.CopyTo Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Queue.CopyTo Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Queue.CopyTo Example/CS/source.cs#1)]
 [!code-vb[Classic Queue.CopyTo Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Queue.CopyTo Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="dfcdf-203"><paramref name="array" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-203"><paramref name="array" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="dfcdf-204"><paramref name="index" /> 小于零。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-204"><paramref name="index" /> is less than zero.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="dfcdf-205"><paramref name="array" /> 是多维的。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-205"><paramref name="array" /> is multidimensional.</span></span>  
  
<span data-ttu-id="dfcdf-206">- 或 -</span><span class="sxs-lookup"><span data-stu-id="dfcdf-206">-or-</span></span> 
<span data-ttu-id="dfcdf-207">源 <see cref="T:System.Collections.Queue" /> 中的元素个数大于从 <paramref name="index" /> 到目标 <paramref name="array" /> 末尾之间的可用空间。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-207">The number of elements in the source <see cref="T:System.Collections.Queue" /> is greater than the available space from <paramref name="index" /> to the end of the destination <paramref name="array" />.</span></span></exception>
        <exception cref="T:System.ArrayTypeMismatchException"><span data-ttu-id="dfcdf-208">无法自动将源 <see cref="T:System.Collections.Queue" /> 的类型转换为目标 <paramref name="array" /> 的类型。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-208">The type of the source <see cref="T:System.Collections.Queue" /> cannot be cast automatically to the type of the destination <paramref name="array" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public virtual int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Queue.Count" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int Count { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="System.Collections.Queue.Count" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="dfcdf-209">获取 <see cref="T:System.Collections.Queue" /> 中包含的元素数。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-209">Gets the number of elements contained in the <see cref="T:System.Collections.Queue" />.</span></span></summary>
        <value><span data-ttu-id="dfcdf-210"><see cref="T:System.Collections.Queue" /> 中包含的元素数。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-210">The number of elements contained in the <see cref="T:System.Collections.Queue" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dfcdf-211">的容量 <xref:System.Collections.Queue> 是可存储的元素数 <xref:System.Collections.Queue> 。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-211">The capacity of a <xref:System.Collections.Queue> is the number of elements that the <xref:System.Collections.Queue> can store.</span></span> <span data-ttu-id="dfcdf-212"><xref:System.Collections.Queue.Count%2A> 实际在中的元素的数目 <xref:System.Collections.Queue> 。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-212"><xref:System.Collections.Queue.Count%2A> is the number of elements that are actually in the <xref:System.Collections.Queue>.</span></span>  
  
 <span data-ttu-id="dfcdf-213">的容量 <xref:System.Collections.Queue> 始终大于或等于 <xref:System.Collections.Queue.Count%2A> 。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-213">The capacity of a <xref:System.Collections.Queue> is always greater than or equal to <xref:System.Collections.Queue.Count%2A>.</span></span> <span data-ttu-id="dfcdf-214">如果在 <xref:System.Collections.Queue.Count%2A> 添加元素时超出容量，则会自动重新分配内部数组，然后再复制旧元素并添加新元素，从而自动增加容量。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-214">If <xref:System.Collections.Queue.Count%2A> exceeds the capacity while adding elements, the capacity is automatically increased by reallocating the internal array before copying the old elements and adding the new elements.</span></span> <span data-ttu-id="dfcdf-215">新容量由当前容量乘以增长系数来确定，这是在构造时确定的 <xref:System.Collections.Queue> 。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-215">The new capacity is determined by multiplying the current capacity by the growth factor, which is determined when the <xref:System.Collections.Queue> is constructed.</span></span> <span data-ttu-id="dfcdf-216">的容量 <xref:System.Collections.Queue> 始终按最小值增加，无论增长系数如何; 1.0 的增长系数都不会阻止 <xref:System.Collections.Queue> 增加大小。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-216">The capacity of the <xref:System.Collections.Queue> will always increase by a minimum value, regardless of the growth factor; a growth factor of 1.0 will not prevent the <xref:System.Collections.Queue> from increasing in size.</span></span>  
  
 <span data-ttu-id="dfcdf-217">可以通过调用来减少容量 <xref:System.Collections.Queue.TrimToSize%2A> 。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-217">The capacity can be decreased by calling <xref:System.Collections.Queue.TrimToSize%2A>.</span></span>  
  
 <span data-ttu-id="dfcdf-218">检索此属性的值是一个 `O(1)` 运算。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-218">Retrieving the value of this property is an `O(1)` operation.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dequeue">
      <MemberSignature Language="C#" Value="public virtual object Dequeue ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Dequeue() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Queue.Dequeue" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Dequeue () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Dequeue();" />
      <MemberSignature Language="F#" Value="abstract member Dequeue : unit -&gt; obj&#xA;override this.Dequeue : unit -&gt; obj" Usage="queue.Dequeue " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="dfcdf-219">移除并返回位于 <see cref="T:System.Collections.Queue" /> 开始处的对象。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-219">Removes and returns the object at the beginning of the <see cref="T:System.Collections.Queue" />.</span></span></summary>
        <returns><span data-ttu-id="dfcdf-220">从 <see cref="T:System.Collections.Queue" /> 的开始处移除的对象。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-220">The object that is removed from the beginning of the <see cref="T:System.Collections.Queue" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dfcdf-221">此方法类似于 <xref:System.Collections.Queue.Peek%2A> 方法，但 <xref:System.Collections.Queue.Peek%2A> 不修改 <xref:System.Collections.Queue>。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-221">This method is similar to the <xref:System.Collections.Queue.Peek%2A> method, but <xref:System.Collections.Queue.Peek%2A> does not modify the <xref:System.Collections.Queue>.</span></span>  
  
 <span data-ttu-id="dfcdf-222">`null` 可以作为值添加到 <xref:System.Collections.Queue> 。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-222">`null` can be added to the <xref:System.Collections.Queue> as a value.</span></span> <span data-ttu-id="dfcdf-223">若要区分 null 值和的末尾 <xref:System.Collections.Queue> ，请检查 <xref:System.Collections.Queue.Count%2A> 属性或捕获 <xref:System.InvalidOperationException> ，这在 <xref:System.Collections.Queue> 为空时引发。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-223">To distinguish between a null value and the end of the <xref:System.Collections.Queue>, check the <xref:System.Collections.Queue.Count%2A> property or catch the <xref:System.InvalidOperationException>, which is thrown when the <xref:System.Collections.Queue> is empty.</span></span>  
  
 <span data-ttu-id="dfcdf-224">此方法是一种 `O(1)` 操作。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-224">This method is an `O(1)` operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dfcdf-225">下面的示例演示如何向中添加元素 <xref:System.Collections.Queue> ，如何从中移除元素 <xref:System.Collections.Queue> ，或查看的开头的元素 <xref:System.Collections.Queue> 。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-225">The following example shows how to add elements to the <xref:System.Collections.Queue>, remove elements from the <xref:System.Collections.Queue>, or view the element at the beginning of the <xref:System.Collections.Queue>.</span></span>  
  
 [!code-cpp[Classic Queue.Enqueue Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Queue.Enqueue Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Queue.Enqueue Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Queue.Enqueue Example/CS/source.cs#1)]
 [!code-vb[Classic Queue.Enqueue Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Queue.Enqueue Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="dfcdf-226"><see cref="T:System.Collections.Queue" /> 为空。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-226">The <see cref="T:System.Collections.Queue" /> is empty.</span></span></exception>
        <altmember cref="M:System.Collections.Queue.Enqueue(System.Object)" />
        <altmember cref="M:System.Collections.Queue.Peek" />
      </Docs>
    </Member>
    <Member MemberName="Enqueue">
      <MemberSignature Language="C#" Value="public virtual void Enqueue (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Enqueue(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Queue.Enqueue(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Enqueue (obj As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Enqueue(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="abstract member Enqueue : obj -&gt; unit&#xA;override this.Enqueue : obj -&gt; unit" Usage="queue.Enqueue obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="dfcdf-227">要添加到 <see cref="T:System.Collections.Queue" /> 的对象。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-227">The object to add to the <see cref="T:System.Collections.Queue" />.</span></span> <span data-ttu-id="dfcdf-228">该值可以为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-228">The value can be <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="dfcdf-229">将对象添加到 <see cref="T:System.Collections.Queue" /> 的结尾处。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-229">Adds an object to the end of the <see cref="T:System.Collections.Queue" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dfcdf-230">的容量 <xref:System.Collections.Queue> 是可容纳的元素数 <xref:System.Collections.Queue> 。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-230">The capacity of a <xref:System.Collections.Queue> is the number of elements the <xref:System.Collections.Queue> can hold.</span></span>  <span data-ttu-id="dfcdf-231">向添加元素时，会 <xref:System.Collections.Queue> 根据需要通过重新分配来自动增加容量。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-231">As elements are added to a <xref:System.Collections.Queue>, the capacity is automatically increased as required through reallocation.</span></span>  <span data-ttu-id="dfcdf-232">可以通过调用来减少容量 <xref:System.Collections.Queue.TrimToSize%2A> 。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-232">The capacity can be decreased by calling <xref:System.Collections.Queue.TrimToSize%2A>.</span></span>  
  
 <span data-ttu-id="dfcdf-233">增长系数是在需要更大容量时，当前容量乘以的数值。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-233">The growth factor is the number by which the current capacity is multiplied when a greater capacity is required.</span></span>  <span data-ttu-id="dfcdf-234">此增长因子是在构造时确定的 <xref:System.Collections.Queue> 。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-234">The growth factor is determined when the <xref:System.Collections.Queue> is constructed.</span></span> <span data-ttu-id="dfcdf-235">的容量 <xref:System.Collections.Queue> 始终按最小值增加，无论增长系数如何; 1.0 的增长系数都不会阻止 <xref:System.Collections.Queue> 增加大小。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-235">The capacity of the <xref:System.Collections.Queue> will always increase by a minimum value, regardless of the growth factor; a growth factor of 1.0 will not prevent the <xref:System.Collections.Queue> from increasing in size.</span></span>  
  
 <span data-ttu-id="dfcdf-236">如果 <xref:System.Collections.Queue.Count%2A> 小于内部数组的容量，则此方法为 `O(1)` 操作。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-236">If <xref:System.Collections.Queue.Count%2A> is less than the capacity of the internal array, this method is an `O(1)` operation.</span></span> <span data-ttu-id="dfcdf-237">如果需要重新分配内部数组以容纳新元素，则此方法将成为 `O(n)` 运算，其中 `n` 是 <xref:System.Collections.Queue.Count%2A> 。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-237">If the internal array needs to be reallocated to accommodate the new element, this method becomes an `O(n)` operation, where `n` is <xref:System.Collections.Queue.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dfcdf-238">下面的示例演示如何向中添加元素 <xref:System.Collections.Queue> ，如何从中移除元素 <xref:System.Collections.Queue> ，或查看的开头的元素 <xref:System.Collections.Queue> 。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-238">The following example shows how to add elements to the <xref:System.Collections.Queue>, remove elements from the <xref:System.Collections.Queue>, or view the element at the beginning of the <xref:System.Collections.Queue>.</span></span>  
  
 [!code-cpp[Classic Queue.Enqueue Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Queue.Enqueue Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Queue.Enqueue Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Queue.Enqueue Example/CS/source.cs#1)]
 [!code-vb[Classic Queue.Enqueue Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Queue.Enqueue Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Queue.Dequeue" />
        <altmember cref="M:System.Collections.Queue.Peek" />
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public virtual System.Collections.IEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IEnumerator GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Queue.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEnumerator () As IEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::IEnumerator ^ GetEnumerator();" />
      <MemberSignature Language="F#" Value="abstract member GetEnumerator : unit -&gt; System.Collections.IEnumerator&#xA;override this.GetEnumerator : unit -&gt; System.Collections.IEnumerator" Usage="queue.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="dfcdf-239">返回循环访问 <see cref="T:System.Collections.Queue" /> 的枚举数。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-239">Returns an enumerator that iterates through the <see cref="T:System.Collections.Queue" />.</span></span></summary>
        <returns><span data-ttu-id="dfcdf-240"><see cref="T:System.Collections.IEnumerator" /> 的一个 <see cref="T:System.Collections.Queue" />。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-240">An <see cref="T:System.Collections.IEnumerator" /> for the <see cref="T:System.Collections.Queue" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dfcdf-241">C# 语言的 `foreach` 语句（在 Visual Basic 中为 `for each`）隐藏了枚举数的复杂性。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-241">The `foreach` statement of the C# language (`for each` in Visual Basic) hides the complexity of the enumerators.</span></span>  <span data-ttu-id="dfcdf-242">因此，建议使用 `foreach`，而不是直接操作枚举数。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-242">Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.</span></span>  
  
 <span data-ttu-id="dfcdf-243">枚举器可用于读取集合中的数据，但不能用于修改基础集合。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-243">Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</span></span>  
  
 <span data-ttu-id="dfcdf-244">最初，枚举数定位在集合中第一个元素的前面。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-244">Initially, the enumerator is positioned before the first element in the collection.</span></span> <span data-ttu-id="dfcdf-245"><xref:System.Collections.IEnumerator.Reset%2A> 也会将枚举器放回此位置。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-245"><xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position.</span></span>  <span data-ttu-id="dfcdf-246">在此位置上，未定义 <xref:System.Collections.IEnumerator.Current%2A>。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-246">At this position, <xref:System.Collections.IEnumerator.Current%2A> is undefined.</span></span> <span data-ttu-id="dfcdf-247">因此，在读取 <xref:System.Collections.IEnumerator.MoveNext%2A> 的值之前，必须调用 <xref:System.Collections.IEnumerator.Current%2A> 将枚举器向前移动到集合的第一个元素。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-247">Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.</span></span>  
  
 <span data-ttu-id="dfcdf-248">在调用 <xref:System.Collections.IEnumerator.Current%2A> 或 <xref:System.Collections.IEnumerator.MoveNext%2A> 之前，<xref:System.Collections.IEnumerator.Reset%2A> 返回同一对象。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-248"><xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called.</span></span> <span data-ttu-id="dfcdf-249"><xref:System.Collections.IEnumerator.MoveNext%2A> 将 <xref:System.Collections.IEnumerator.Current%2A> 设置为下一个元素。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-249"><xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.</span></span>  
  
 <span data-ttu-id="dfcdf-250">如果 <xref:System.Collections.IEnumerator.MoveNext%2A> 越过集合的末尾，则枚举器将定位在集合中最后一个元素之后，并 <xref:System.Collections.IEnumerator.MoveNext%2A> 返回 `false` 。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-250">If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`.</span></span> <span data-ttu-id="dfcdf-251">当枚举器位于此位置时，对的后续调用 <xref:System.Collections.IEnumerator.MoveNext%2A> 也将返回 `false` 。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-251">When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`.</span></span> <span data-ttu-id="dfcdf-252">如果最后一次调用 <xref:System.Collections.IEnumerator.MoveNext%2A> 返回 `false` ， <xref:System.Collections.IEnumerator.Current%2A> 则未定义。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-252">If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.IEnumerator.Current%2A> is undefined.</span></span> <span data-ttu-id="dfcdf-253">若要再次将 <xref:System.Collections.IEnumerator.Current%2A> 设置为集合的第一个元素，可以调用 <xref:System.Collections.IEnumerator.Reset%2A> 并接着调用 <xref:System.Collections.IEnumerator.MoveNext%2A>。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-253">To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.</span></span>  
  
 <span data-ttu-id="dfcdf-254">只要集合保持不变，枚举器就仍有效。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-254">An enumerator remains valid as long as the collection remains unchanged.</span></span> <span data-ttu-id="dfcdf-255">如果对集合进行更改（如添加、修改或删除元素），则枚举数将失效且不可恢复，而且其行为是不确定的。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-255">If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.</span></span>  
  
 <span data-ttu-id="dfcdf-256">枚举数没有对集合的独占访问权；因此，从头到尾对一个集合进行枚举在本质上不是一个线程安全的过程。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-256">The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</span></span>  <span data-ttu-id="dfcdf-257">若要确保枚举过程中的线程安全性，可以在整个枚举过程中锁定集合。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-257">To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</span></span>  <span data-ttu-id="dfcdf-258">若要允许多个线程访问集合以进行读写操作，则必须实现自己的同步。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-258">To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span></span>  
  
 <span data-ttu-id="dfcdf-259">此方法是一种 `O(1)` 操作。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-259">This method is an `O(1)` operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.IEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="IsSynchronized">
      <MemberSignature Language="C#" Value="public virtual bool IsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSynchronized" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Queue.IsSynchronized" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsSynchronized As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSynchronized { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSynchronized : bool" Usage="System.Collections.Queue.IsSynchronized" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.IsSynchronized</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="dfcdf-260">获取一个值，该值指示是否同步对 <see cref="T:System.Collections.Queue" /> 的访问（线程安全）。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-260">Gets a value indicating whether access to the <see cref="T:System.Collections.Queue" /> is synchronized (thread safe).</span></span></summary>
        <value><span data-ttu-id="dfcdf-261">如果对 <see langword="true" /> 的访问是同步的（线程安全），则为 <see cref="T:System.Collections.Queue" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-261"><see langword="true" /> if access to the <see cref="T:System.Collections.Queue" /> is synchronized (thread safe); otherwise, <see langword="false" />.</span></span> <span data-ttu-id="dfcdf-262">默认值为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-262">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dfcdf-263">若要保证的线程安全 <xref:System.Collections.Queue> ，必须通过方法返回的包装执行所有操作 <xref:System.Collections.Queue.Synchronized%2A> 。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-263">To guarantee the thread safety of the <xref:System.Collections.Queue>, all operations must be done through the wrapper returned by the <xref:System.Collections.Queue.Synchronized%2A> method.</span></span>  
  
 <span data-ttu-id="dfcdf-264">枚举整个集合本质上不是一个线程安全的过程。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-264">Enumerating through a collection is intrinsically not a thread-safe procedure.</span></span> <span data-ttu-id="dfcdf-265">即使某个集合已同步，其他线程仍可以修改该集合，这会导致枚举数引发异常。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-265">Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</span></span> <span data-ttu-id="dfcdf-266">若要确保枚举过程中的线程安全性，可以在整个枚举期间锁定集合，或者捕获由其他线程进行的更改所导致的异常。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-266">To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dfcdf-267">下面的代码示例演示如何使用在 <xref:System.Collections.Queue.SyncRoot%2A> 整个枚举过程中锁定集合。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-267">The following code example shows how to lock the collection using the <xref:System.Collections.Queue.SyncRoot%2A> during the entire enumeration.</span></span> <span data-ttu-id="dfcdf-268">检索此属性的值是一个 `O(1)` 运算。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-268">Retrieving the value of this property is an `O(1)` operation.</span></span>  
  
 [!code-cpp[Classic Queue.IsSynchronized Example#2](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Queue.IsSynchronized Example/CPP/source2.cpp#2)]
 [!code-csharp[Classic Queue.IsSynchronized Example#2](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Queue.IsSynchronized Example/CS/source2.cs#2)]
 [!code-vb[Classic Queue.IsSynchronized Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Queue.IsSynchronized Example/VB/source2.vb#2)]  
  
 <span data-ttu-id="dfcdf-269">下面的示例演示如何同步 <xref:System.Collections.Queue> ，确定 <xref:System.Collections.Queue> 是否同步，以及是否使用同步的 <xref:System.Collections.Queue> 。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-269">The following example shows how to synchronize a <xref:System.Collections.Queue>, determine if a <xref:System.Collections.Queue> is synchronized, and use a synchronized <xref:System.Collections.Queue>.</span></span>  
  
 [!code-cpp[Classic Queue.IsSynchronized Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Queue.IsSynchronized Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Queue.IsSynchronized Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Queue.IsSynchronized Example/CS/source.cs#1)]
 [!code-vb[Classic Queue.IsSynchronized Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Queue.IsSynchronized Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.Queue.SyncRoot" />
        <altmember cref="M:System.Collections.Queue.Synchronized(System.Collections.Queue)" />
      </Docs>
    </Member>
    <Member MemberName="Peek">
      <MemberSignature Language="C#" Value="public virtual object Peek ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Peek() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Queue.Peek" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Peek () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Peek();" />
      <MemberSignature Language="F#" Value="abstract member Peek : unit -&gt; obj&#xA;override this.Peek : unit -&gt; obj" Usage="queue.Peek " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="dfcdf-270">返回位于 <see cref="T:System.Collections.Queue" /> 开始处的对象但不将其移除。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-270">Returns the object at the beginning of the <see cref="T:System.Collections.Queue" /> without removing it.</span></span></summary>
        <returns><span data-ttu-id="dfcdf-271">位于 <see cref="T:System.Collections.Queue" /> 的开头的对象。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-271">The object at the beginning of the <see cref="T:System.Collections.Queue" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dfcdf-272">此方法类似于 <xref:System.Collections.Queue.Dequeue%2A> 方法，但 <xref:System.Collections.Queue.Peek%2A> 不修改 <xref:System.Collections.Queue>。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-272">This method is similar to the <xref:System.Collections.Queue.Dequeue%2A> method, but <xref:System.Collections.Queue.Peek%2A> does not modify the <xref:System.Collections.Queue>.</span></span>  
  
 <span data-ttu-id="dfcdf-273">`null` 可以作为值添加到 <xref:System.Collections.Queue> 。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-273">`null` can be added to the <xref:System.Collections.Queue> as a value.</span></span> <span data-ttu-id="dfcdf-274">若要区分 null 值和的末尾 <xref:System.Collections.Queue> ，请检查 <xref:System.Collections.Queue.Count%2A> 属性或捕获 <xref:System.InvalidOperationException> ，这在 <xref:System.Collections.Queue> 为空时引发。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-274">To distinguish between a null value and the end of the <xref:System.Collections.Queue>, check the <xref:System.Collections.Queue.Count%2A> property or catch the <xref:System.InvalidOperationException>, which is thrown when the <xref:System.Collections.Queue> is empty.</span></span>  
  
 <span data-ttu-id="dfcdf-275">此方法是一种 `O(1)` 操作。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-275">This method is an `O(1)` operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dfcdf-276">下面的示例演示如何向中添加元素 <xref:System.Collections.Queue> ，如何从中移除元素 <xref:System.Collections.Queue> ，或查看的开头的元素 <xref:System.Collections.Queue> 。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-276">The following example shows how to add elements to the <xref:System.Collections.Queue>, remove elements from the <xref:System.Collections.Queue>, or view the element at the beginning of the <xref:System.Collections.Queue>.</span></span>  
  
 [!code-cpp[Classic Queue.Enqueue Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Queue.Enqueue Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Queue.Enqueue Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Queue.Enqueue Example/CS/source.cs#1)]
 [!code-vb[Classic Queue.Enqueue Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Queue.Enqueue Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="dfcdf-277"><see cref="T:System.Collections.Queue" /> 为空。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-277">The <see cref="T:System.Collections.Queue" /> is empty.</span></span></exception>
        <altmember cref="M:System.Collections.Queue.Enqueue(System.Object)" />
        <altmember cref="M:System.Collections.Queue.Dequeue" />
      </Docs>
    </Member>
    <Member MemberName="Synchronized">
      <MemberSignature Language="C#" Value="public static System.Collections.Queue Synchronized (System.Collections.Queue queue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Queue Synchronized(class System.Collections.Queue queue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Queue.Synchronized(System.Collections.Queue)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Synchronized (queue As Queue) As Queue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Queue ^ Synchronized(System::Collections::Queue ^ queue);" />
      <MemberSignature Language="F#" Value="static member Synchronized : System.Collections.Queue -&gt; System.Collections.Queue" Usage="System.Collections.Queue.Synchronized queue" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Queue</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="queue" Type="System.Collections.Queue" />
      </Parameters>
      <Docs>
        <param name="queue"><span data-ttu-id="dfcdf-278">要同步的 <see cref="T:System.Collections.Queue" />。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-278">The <see cref="T:System.Collections.Queue" /> to synchronize.</span></span></param>
        <summary><span data-ttu-id="dfcdf-279">返回将包装原始队列并且是线程安全的新的 <see cref="T:System.Collections.Queue" />。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-279">Returns a new <see cref="T:System.Collections.Queue" /> that wraps the original queue, and is thread safe.</span></span></summary>
        <returns><span data-ttu-id="dfcdf-280">同步的（线程安全）<see cref="T:System.Collections.Queue" /> 包装。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-280">A <see cref="T:System.Collections.Queue" /> wrapper that is synchronized (thread safe).</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dfcdf-281">此方法返回的包装器将在操作执行前锁定队列，以便以线程安全的方式执行此操作。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-281">The wrapper returned by this method locks the queue before an operation is performed so that it is performed in a thread-safe manner.</span></span>  
  
 <span data-ttu-id="dfcdf-282">为了保证的线程安全 <xref:System.Collections.Queue> ，所有操作都必须仅通过此包装器完成。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-282">To guarantee the thread safety of the <xref:System.Collections.Queue>, all operations must be done through this wrapper only.</span></span>  
  
 <span data-ttu-id="dfcdf-283">枚举整个集合本质上不是一个线程安全的过程。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-283">Enumerating through a collection is intrinsically not a thread-safe procedure.</span></span> <span data-ttu-id="dfcdf-284">即使某个集合已同步，其他线程仍可以修改该集合，这会导致枚举数引发异常。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-284">Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</span></span> <span data-ttu-id="dfcdf-285">若要确保枚举过程中的线程安全性，可以在整个枚举期间锁定集合，或者捕获由其他线程进行的更改所导致的异常。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-285">To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dfcdf-286">下面的代码示例演示如何使用在 <xref:System.Collections.Queue.SyncRoot%2A> 整个枚举过程中锁定集合。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-286">The following code example shows how to lock the collection using the <xref:System.Collections.Queue.SyncRoot%2A> during the entire enumeration.</span></span> <span data-ttu-id="dfcdf-287">此方法是一种 `O(1)` 操作。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-287">This method is an `O(1)` operation.</span></span>  
  
 [!code-cpp[Classic Queue.IsSynchronized Example#2](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Queue.IsSynchronized Example/CPP/source2.cpp#2)]
 [!code-csharp[Classic Queue.IsSynchronized Example#2](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Queue.IsSynchronized Example/CS/source2.cs#2)]
 [!code-vb[Classic Queue.IsSynchronized Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Queue.IsSynchronized Example/VB/source2.vb#2)]  
  
 <span data-ttu-id="dfcdf-288">下面的示例演示如何同步 <xref:System.Collections.Queue> ，确定 <xref:System.Collections.Queue> 是否同步并使用同步的 <xref:System.Collections.Queue> 。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-288">The following example shows how to synchronize a <xref:System.Collections.Queue>, determine if a <xref:System.Collections.Queue> is synchronized and use a synchronized <xref:System.Collections.Queue>.</span></span>  
  
 [!code-cpp[Classic Queue.IsSynchronized Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Queue.IsSynchronized Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Queue.IsSynchronized Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Queue.IsSynchronized Example/CS/source.cs#1)]
 [!code-vb[Classic Queue.IsSynchronized Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Queue.IsSynchronized Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="dfcdf-289"><paramref name="queue" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-289"><paramref name="queue" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="P:System.Collections.Queue.IsSynchronized" />
        <altmember cref="P:System.Collections.Queue.SyncRoot" />
      </Docs>
    </Member>
    <Member MemberName="SyncRoot">
      <MemberSignature Language="C#" Value="public virtual object SyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object SyncRoot" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Queue.SyncRoot" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property SyncRoot As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Object ^ SyncRoot { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SyncRoot : obj" Usage="System.Collections.Queue.SyncRoot" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.SyncRoot</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="dfcdf-290">获取可用于同步对 <see cref="T:System.Collections.Queue" /> 的访问的对象。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-290">Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.Queue" />.</span></span></summary>
        <value><span data-ttu-id="dfcdf-291">用于同步对 <see cref="T:System.Collections.Queue" /> 的访问的对象。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-291">An object that can be used to synchronize access to the <see cref="T:System.Collections.Queue" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dfcdf-292">若要创建的同步版本 <xref:System.Collections.Queue> ，请使用 <xref:System.Collections.Queue.Synchronized%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-292">To create a synchronized version of the <xref:System.Collections.Queue>, use the <xref:System.Collections.Queue.Synchronized%2A> method.</span></span> <span data-ttu-id="dfcdf-293">但是，派生类可以使用属性提供自己的同步版本 <xref:System.Collections.Queue> <xref:System.Collections.Queue.SyncRoot%2A> 。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-293">However, derived classes can provide their own synchronized version of the <xref:System.Collections.Queue> using the <xref:System.Collections.Queue.SyncRoot%2A> property.</span></span> <span data-ttu-id="dfcdf-294">同步代码必须对的执行操作 <xref:System.Collections.Queue.SyncRoot%2A> <xref:System.Collections.Queue> ，而不是直接在上执行操作 <xref:System.Collections.Queue> 。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-294">The synchronizing code must perform operations on the <xref:System.Collections.Queue.SyncRoot%2A> of the <xref:System.Collections.Queue>, not directly on the <xref:System.Collections.Queue>.</span></span> <span data-ttu-id="dfcdf-295">这样可确保对从其他对象派生的集合正确地执行操作。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-295">This ensures proper operation of collections that are derived from other objects.</span></span> <span data-ttu-id="dfcdf-296">具体而言，它与可能同时修改对象的其他线程保持正确的同步 <xref:System.Collections.Queue> 。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-296">Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the <xref:System.Collections.Queue> object.</span></span>  
  
 <span data-ttu-id="dfcdf-297">枚举整个集合本质上不是一个线程安全的过程。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-297">Enumerating through a collection is intrinsically not a thread-safe procedure.</span></span> <span data-ttu-id="dfcdf-298">即使某个集合已同步，其他线程仍可以修改该集合，这会导致枚举数引发异常。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-298">Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</span></span> <span data-ttu-id="dfcdf-299">若要确保枚举过程中的线程安全性，可以在整个枚举期间锁定集合，或者捕获由其他线程进行的更改所导致的异常。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-299">To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dfcdf-300">下面的代码示例演示如何使用在 <xref:System.Collections.Queue.SyncRoot%2A> 整个枚举过程中锁定集合。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-300">The following code example shows how to lock the collection using the <xref:System.Collections.Queue.SyncRoot%2A> during the entire enumeration.</span></span> <span data-ttu-id="dfcdf-301">检索此属性的值是一个 `O(1)` 运算。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-301">Retrieving the value of this property is an `O(1)` operation.</span></span>  
  
 [!code-cpp[Classic Queue.IsSynchronized Example#2](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Queue.IsSynchronized Example/CPP/source2.cpp#2)]
 [!code-csharp[Classic Queue.IsSynchronized Example#2](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Queue.IsSynchronized Example/CS/source2.cs#2)]
 [!code-vb[Classic Queue.IsSynchronized Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Queue.IsSynchronized Example/VB/source2.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.Queue.IsSynchronized" />
        <altmember cref="M:System.Collections.Queue.Synchronized(System.Collections.Queue)" />
      </Docs>
    </Member>
    <Member MemberName="ToArray">
      <MemberSignature Language="C#" Value="public virtual object[] ToArray ();" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object[] ToArray() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Queue.ToArray" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ToArray () As Object()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Object ^&gt; ^ ToArray();" />
      <MemberSignature Language="F#" Value="abstract member ToArray : unit -&gt; obj[]&#xA;override this.ToArray : unit -&gt; obj[]" Usage="queue.ToArray " />
      <MemberSignature Language="C#" Value="public virtual object[]? ToArray ();" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="dfcdf-302">将 <see cref="T:System.Collections.Queue" /> 元素复制到新数组。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-302">Copies the <see cref="T:System.Collections.Queue" /> elements to a new array.</span></span></summary>
        <returns><span data-ttu-id="dfcdf-303">包含从 <see cref="T:System.Collections.Queue" /> 复制的元素的新数组。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-303">A new array containing elements copied from the <see cref="T:System.Collections.Queue" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dfcdf-304"><xref:System.Collections.Queue>未修改。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-304">The <xref:System.Collections.Queue> is not modified.</span></span> <span data-ttu-id="dfcdf-305">新数组中元素的顺序与从开始到其结尾的元素的顺序相同 <xref:System.Collections.Queue> 。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-305">The order of the elements in the new array is the same as the order of the elements from the beginning of the <xref:System.Collections.Queue> to its end.</span></span>  
  
 <span data-ttu-id="dfcdf-306">此方法是一个 `O(n)` 操作，其中 `n` 是 <xref:System.Collections.Queue.Count%2A> 。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-306">This method is an `O(n)` operation, where `n` is <xref:System.Collections.Queue.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dfcdf-307">下面的示例演示如何将复制 <xref:System.Collections.Queue> 到一维数组中。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-307">The following example shows how to copy a <xref:System.Collections.Queue> into a one-dimensional array.</span></span>  
  
 [!code-cpp[Classic Queue.CopyTo Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Queue.CopyTo Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Queue.CopyTo Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Queue.CopyTo Example/CS/source.cs#1)]
 [!code-vb[Classic Queue.CopyTo Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Queue.CopyTo Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TrimToSize">
      <MemberSignature Language="C#" Value="public virtual void TrimToSize ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void TrimToSize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Queue.TrimToSize" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub TrimToSize ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void TrimToSize();" />
      <MemberSignature Language="F#" Value="abstract member TrimToSize : unit -&gt; unit&#xA;override this.TrimToSize : unit -&gt; unit" Usage="queue.TrimToSize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="dfcdf-308">将容量设置为 <see cref="T:System.Collections.Queue" /> 中元素的实际数目。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-308">Sets the capacity to the actual number of elements in the <see cref="T:System.Collections.Queue" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dfcdf-309">如果不向队列中添加新的元素，则可以使用此方法最大程度地减少队列的内存开销。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-309">This method can be used to minimize a queue's memory overhead if no new elements will be added to the queue.</span></span>  
  
 <span data-ttu-id="dfcdf-310">若要将重置 <xref:System.Collections.Queue> 为其初始状态，请 <xref:System.Collections.Queue.Clear%2A> 在调用之前调用方法 <xref:System.Collections.Queue.TrimToSize%2A> 。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-310">To reset a <xref:System.Collections.Queue> to its initial state, call the <xref:System.Collections.Queue.Clear%2A> method before calling <xref:System.Collections.Queue.TrimToSize%2A>.</span></span> <span data-ttu-id="dfcdf-311">修整空会将的 <xref:System.Collections.Queue> 容量设置 <xref:System.Collections.Queue> 为默认容量。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-311">Trimming an empty <xref:System.Collections.Queue> sets the capacity of the <xref:System.Collections.Queue> to the default capacity.</span></span>  
  
 <span data-ttu-id="dfcdf-312">此方法是一个 `O(n)` 操作，其中 `n` 是 <xref:System.Collections.Queue.Count%2A> 。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-312">This method is an `O(n)` operation, where `n` is <xref:System.Collections.Queue.Count%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="dfcdf-313"><see cref="T:System.Collections.Queue" /> 为只读。</span><span class="sxs-lookup"><span data-stu-id="dfcdf-313">The <see cref="T:System.Collections.Queue" /> is read-only.</span></span></exception>
        <altmember cref="M:System.Collections.Queue.Clear" />
        <altmember cref="P:System.Collections.Queue.Count" />
      </Docs>
    </Member>
  </Members>
</Type>
