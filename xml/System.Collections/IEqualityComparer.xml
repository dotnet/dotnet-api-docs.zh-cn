<Type Name="IEqualityComparer" FullName="System.Collections.IEqualityComparer">
  <Metadata><Meta Name="ms.openlocfilehash" Value="cebf327fe9d81ddbd698c2cdf2b18de0ca7c7979" /><Meta Name="ms.sourcegitcommit" Value="a8ca33e500a87229bed50d12e09b1347df519648" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="10/09/2020" /><Meta Name="ms.locfileid" Value="91904583" /></Metadata><TypeSignature Language="C#" Value="public interface IEqualityComparer" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IEqualityComparer" />
  <TypeSignature Language="DocId" Value="T:System.Collections.IEqualityComparer" />
  <TypeSignature Language="VB.NET" Value="Public Interface IEqualityComparer" />
  <TypeSignature Language="C++ CLI" Value="public interface class IEqualityComparer" />
  <TypeSignature Language="F#" Value="type IEqualityComparer = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="mscorlib" FromVersion="4.0.0.0" To="System.Runtime" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0" />
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Runtime" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName Language="C#">[System.Runtime.InteropServices.ComVisible(true)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.ComVisible(true)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>定义用于支持比较对象是否相等的方法。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  

此接口允许实现集合的自定义相等性比较。 也就是说，你可以创建你自己的相等性定义，并指定此定义与接受该接口的集合类型一起使用 <xref:System.Collections.IEqualityComparer> 。 在 .NET Framework 中，、 <xref:System.Collections.Hashtable> <xref:System.Collections.Specialized.NameValueCollection> 和集合类型的构造函数 <xref:System.Collections.Specialized.OrderedDictionary> 接受此接口。  

有关此接口的泛型版本，请参阅 <xref:System.Collections.Generic.IEqualityComparer%601?displayProperty=nameWithType> 。  
  
`IEqualityComparer`接口仅支持相等比较。 排序和排序比较的自定义是由接口提供的 <xref:System.Collections.IComparer> 。  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Collections.Hashtable" />
    <altmember cref="T:System.Collections.Specialized.NameValueCollection" />
    <altmember cref="T:System.Collections.Specialized.OrderedDictionary" />
    <altmember cref="T:System.Collections.IComparer" />
  </Docs>
  <Members>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (object x, object y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(object x, object y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.IEqualityComparer.Equals(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (x As Object, y As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Equals(System::Object ^ x, System::Object ^ y);" />
      <MemberSignature Language="F#" Value="abstract member Equals : obj * obj -&gt; bool" Usage="iEqualityComparer.Equals (x, y)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Object" />
        <Parameter Name="y" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="x">要比较的第一个对象。</param>
        <param name="y">要比较的第二个对象。</param>
        <summary>确定指定的对象是否相等。</summary>
        <returns>如果指定的对象相等，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 实现此方法可为对象提供自定义的相等比较。  
  
   
  
## Examples  
 下面的代码示例演示如何实现不区分大小写 <xref:System.Collections.IEqualityComparer> 。 在此示例中， <xref:System.Collections.CaseInsensitiveComparer.Compare%2A?displayProperty=nameWithType> 方法用于根据提供的确定两个对象是否相等 <xref:System.Globalization.CultureInfo> 。  
  
 [!code-cpp[System.Collections.Hashtable_ctor#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Hashtable_ctor/CPP/hashtable_ctor.cpp#2)]
 [!code-csharp[System.Collections.Hashtable_ctor#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Hashtable_ctor/CS/hashtable_ctor.cs#2)]
 [!code-vb[System.Collections.Hashtable_ctor#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Hashtable_ctor/VB/hashtable_ctor.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="x" /> 和 <paramref name="y" /> 的类型不同，它们都无法处理与另一个进行的比较。</exception>
        <block subset="none" type="overrides"><para><see cref="M:System.Collections.IEqualityComparer.Equals(System.Object,System.Object)" />方法为自反、对称和可传递。 也就是说， <see langword="true" /> 如果用于将一个对象与其自身进行比较，则返回; <see langword="true" /> 对于两个对象，则返回; 对于，则返回 <paramref name="x" /> <paramref name="y" /> <see langword="true" /> <paramref name="y" /> <paramref name="x" /> ; <see langword="true" /> 对于两个对象，则返回; 对于 <paramref name="x" /> <c>z</c> <see langword="true" /> <paramref name="x" /> <paramref name="y" /> <see langword="true" /> <paramref name="y" /> <c>z</c>，则返回，对于和，则返回。  
  
实现需要确保如果 <see cref="M:System.Collections.IEqualityComparer.Equals(System.Object,System.Object)" /> 方法 <see langword="true" /> 为两个对象 <paramref name="x" /> 和返回 <paramref name="y" /> ，则的方法返回的值 <see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)" /> <paramref name="x" /> 必须等于为返回的值 <paramref name="y" /> 。</para></block>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public int GetHashCode (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetHashCode(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetHashCode (obj As Object) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetHashCode(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="abstract member GetHashCode : obj -&gt; int" Usage="iEqualityComparer.GetHashCode obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><see cref="T:System.Object" />，将为其返回哈希代码。</param>
        <summary>返回指定对象的哈希代码。</summary>
        <returns>指定对象的哈希代码。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 实现此方法可为对象提供自定义的哈希代码，对应于方法提供的自定义相等性比较 <xref:System.Collections.IEqualityComparer.Equals%2A> 。  
  
   
  
## Examples  
 下面的代码示例演示如何实现不区分大小写 <xref:System.Collections.IEqualityComparer> 。 在此示例中， <xref:System.Collections.IEqualityComparer.GetHashCode%2A> 方法返回类型提供的哈希代码 <xref:System.Object> 。  
  
 [!code-cpp[System.Collections.Hashtable_ctor#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Hashtable_ctor/CPP/hashtable_ctor.cpp#2)]
 [!code-csharp[System.Collections.Hashtable_ctor#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Hashtable_ctor/CS/hashtable_ctor.cs#2)]
 [!code-vb[System.Collections.Hashtable_ctor#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Hashtable_ctor/VB/hashtable_ctor.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="obj" /> 的类型为引用类型，<paramref name="obj" /> 为 <see langword="null" />。</exception>
        <block subset="none" type="overrides"><para>实现需要确保如果 <see cref="M:System.Collections.IEqualityComparer.Equals(System.Object,System.Object)" /> 方法 <see langword="true" /> 为两个对象 <paramref name="x" /> 和返回 <paramref name="y" /> ，则的方法返回的值 <see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)" /> <paramref name="x" /> 必须等于为返回的值 <paramref name="y" /> 。</para></block>
        <altmember cref="M:System.Object.GetHashCode" />
        <altmember cref="T:System.Collections.IHashCodeProvider" />
      </Docs>
    </Member>
  </Members>
</Type>
