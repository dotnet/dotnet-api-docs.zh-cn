<Type Name="CollectionBase" FullName="System.Collections.CollectionBase">
  <Metadata><Meta Name="ms.openlocfilehash" Value="0180819e44deff44baad6c1e4d2271eafd1909fa" /><Meta Name="ms.sourcegitcommit" Value="9a0316374d19cc78674994106d073aa5ef1bd5f3" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="11/10/2020" /><Meta Name="ms.locfileid" Value="94449412" /></Metadata><TypeSignature Language="C#" Value="public abstract class CollectionBase : System.Collections.IList" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit CollectionBase extends System.Object implements class System.Collections.ICollection, class System.Collections.IEnumerable, class System.Collections.IList" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.0;netstandard-2.1" />
  <TypeSignature Language="DocId" Value="T:System.Collections.CollectionBase" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class CollectionBase&#xA;Implements IList" />
  <TypeSignature Language="C++ CLI" Value="public ref class CollectionBase abstract : System::Collections::IList" />
  <TypeSignature Language="F#" Value="type CollectionBase = class&#xA;    interface ICollection&#xA;    interface IEnumerable&#xA;    interface IList" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.0;netstandard-2.1" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract serializable beforefieldinit CollectionBase extends System.Object implements class System.Collections.ICollection, class System.Collections.IEnumerable, class System.Collections.IList" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="F#" Value="type CollectionBase = class&#xA;    interface IList&#xA;    interface ICollection&#xA;    interface IEnumerable" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <AssemblyInfo>
    <AssemblyName>System.Collections.NonGeneric</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="mscorlib" FromVersion="4.0.0.0" To="System.Collections.NonGeneric" ToVersion="0.0.0.0" FrameworkAlternate="net-5.0" />
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Collections.NonGeneric" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.ICollection</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IList</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName Language="C#">[System.Serializable]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Serializable&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName Language="C#">[System.Runtime.InteropServices.ComVisible(true)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.ComVisible(true)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="896fc-101">提供强类型集合的 <see langword="abstract" /> 基类。</span><span class="sxs-lookup"><span data-stu-id="896fc-101">Provides the <see langword="abstract" /> base class for a strongly typed collection.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  

> [!IMPORTANT]
>  <span data-ttu-id="896fc-102">不建议使用 `CollectionBase` 类进行新的开发。</span><span class="sxs-lookup"><span data-stu-id="896fc-102">We don't recommend that you use the `CollectionBase` class for new development.</span></span> <span data-ttu-id="896fc-103">相反，我们建议使用泛型 <xref:System.Collections.ObjectModel.Collection%601> 类。</span><span class="sxs-lookup"><span data-stu-id="896fc-103">Instead, we recommend that you use the generic <xref:System.Collections.ObjectModel.Collection%601> class.</span></span> <span data-ttu-id="896fc-104">有关详细信息，请参阅 GitHub 上 [不应使用非泛型集合](https://github.com/dotnet/platform-compat/blob/master/docs/DE0006.md) 。</span><span class="sxs-lookup"><span data-stu-id="896fc-104">For more information, see [Non-generic collections shouldn't be used](https://github.com/dotnet/platform-compat/blob/master/docs/DE0006.md) on GitHub.</span></span>

<span data-ttu-id="896fc-105"><xref:System.Collections.CollectionBase>实例始终是可修改的。</span><span class="sxs-lookup"><span data-stu-id="896fc-105">A <xref:System.Collections.CollectionBase> instance is always modifiable.</span></span> <span data-ttu-id="896fc-106"><xref:System.Collections.ReadOnlyCollectionBase>有关此类的只读版本，请参阅。</span><span class="sxs-lookup"><span data-stu-id="896fc-106">See <xref:System.Collections.ReadOnlyCollectionBase> for a read-only version of this class.</span></span>  
  
 <span data-ttu-id="896fc-107">的容量 <xref:System.Collections.CollectionBase> 是可容纳的元素数 <xref:System.Collections.CollectionBase> 。</span><span class="sxs-lookup"><span data-stu-id="896fc-107">The capacity of a <xref:System.Collections.CollectionBase> is the number of elements the <xref:System.Collections.CollectionBase> can hold.</span></span> <span data-ttu-id="896fc-108">向添加元素时，会 <xref:System.Collections.CollectionBase> 根据需要通过重新分配来自动增加容量。</span><span class="sxs-lookup"><span data-stu-id="896fc-108">As elements are added to a <xref:System.Collections.CollectionBase>, the capacity is automatically increased as required through reallocation.</span></span> <span data-ttu-id="896fc-109">可以通过显式设置属性来减少容量 <xref:System.Collections.CollectionBase.Capacity%2A> 。</span><span class="sxs-lookup"><span data-stu-id="896fc-109">The capacity can be decreased by setting the <xref:System.Collections.CollectionBase.Capacity%2A> property explicitly.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="896fc-110">下面的代码示例实现 <xref:System.Collections.CollectionBase> 类，并使用该实现创建对象的集合 <xref:System.Int16> 。</span><span class="sxs-lookup"><span data-stu-id="896fc-110">The following code example implements the <xref:System.Collections.CollectionBase> class and uses that implementation to create a collection of <xref:System.Int16> objects.</span></span>  
  
 [!code-cpp[System.Collections.CollectionBase#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.CollectionBase/CPP/collectionbase.cpp#1)]
 [!code-csharp[System.Collections.CollectionBase#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.CollectionBase/CS/collectionbase.cs#1)]
 [!code-vb[System.Collections.CollectionBase#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.CollectionBase/VB/collectionbase.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="896fc-111"><see langword="Shared" />此类型) 成员 Visual Basic 的公共静态 (是线程安全的。</span><span class="sxs-lookup"><span data-stu-id="896fc-111">Public static (<see langword="Shared" /> in Visual Basic) members of this type are thread safe.</span></span> <span data-ttu-id="896fc-112">但不保证所有实例成员都是线程安全的。</span><span class="sxs-lookup"><span data-stu-id="896fc-112">Any instance members are not guaranteed to be thread safe.</span></span>  
  
<span data-ttu-id="896fc-113">此实现不会为 (线程安全) 包装提供同步 <see cref="T:System.Collections.CollectionBase" /> ，但派生类可以使用属性创建其自己的同步版本 <see cref="T:System.Collections.CollectionBase" /> <see cref="P:System.Collections.ICollection.SyncRoot" /> 。</span><span class="sxs-lookup"><span data-stu-id="896fc-113">This implementation does not provide a synchronized (thread safe) wrapper for a <see cref="T:System.Collections.CollectionBase" />, but derived classes can create their own synchronized versions of the <see cref="T:System.Collections.CollectionBase" /> using the <see cref="P:System.Collections.ICollection.SyncRoot" /> property.</span></span>  
  
<span data-ttu-id="896fc-114">枚举集合本质上不是线程安全的过程。</span><span class="sxs-lookup"><span data-stu-id="896fc-114">Enumerating through a collection is intrinsically not a thread safe procedure.</span></span> <span data-ttu-id="896fc-115">即使某个集合已同步，其他线程仍可以修改该集合，这会导致枚举数引发异常。</span><span class="sxs-lookup"><span data-stu-id="896fc-115">Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</span></span> <span data-ttu-id="896fc-116">若要确保枚举过程中的线程安全性，可以在整个枚举期间锁定集合，或者捕获由其他线程进行的更改所导致的异常。</span><span class="sxs-lookup"><span data-stu-id="896fc-116">To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</span></span></threadsafe>
    <block subset="none" type="overrides"><para><span data-ttu-id="896fc-117">提供此基类是为了使实现者更容易创建强类型的自定义集合。</span><span class="sxs-lookup"><span data-stu-id="896fc-117">This base class is provided to make it easier for implementers to create a strongly typed custom collection.</span></span> <span data-ttu-id="896fc-118">鼓励实现者扩展此基类，而不是自行创建。</span><span class="sxs-lookup"><span data-stu-id="896fc-118">Implementers are encouraged to extend this base class instead of creating their own.</span></span></para></block>
    <altmember cref="T:System.Collections.ArrayList" />
    <altmember cref="T:System.Collections.IList" />
    <altmember cref="T:System.Collections.ReadOnlyCollectionBase" />
    <altmember cref="N:System.Collections.Generic" />
    <related type="Article" href="/dotnet/standard/globalization-localization/performing-culture-insensitive-string-operations"><span data-ttu-id="896fc-119">执行不区分区域性的字符串操作</span><span class="sxs-lookup"><span data-stu-id="896fc-119">Performing Culture-Insensitive String Operations</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="896fc-120">初始化 <see cref="T:System.Collections.CollectionBase" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="896fc-120">Initializes a new instance of the <see cref="T:System.Collections.CollectionBase" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected CollectionBase ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.CollectionBase.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; CollectionBase();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="896fc-121">使用默认初始容量初始化 <see cref="T:System.Collections.CollectionBase" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="896fc-121">Initializes a new instance of the <see cref="T:System.Collections.CollectionBase" /> class with the default initial capacity.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="896fc-122">的容量 <xref:System.Collections.CollectionBase> 是可容纳的元素数 <xref:System.Collections.CollectionBase> 。</span><span class="sxs-lookup"><span data-stu-id="896fc-122">The capacity of a <xref:System.Collections.CollectionBase> is the number of elements that the <xref:System.Collections.CollectionBase> can hold.</span></span> <span data-ttu-id="896fc-123">当向添加元素时 <xref:System.Collections.CollectionBase> ，将根据需要通过重新分配内部数组来自动增加容量。</span><span class="sxs-lookup"><span data-stu-id="896fc-123">As elements are added to a <xref:System.Collections.CollectionBase>, the capacity is automatically increased as required by reallocating the internal array.</span></span>  
  
 <span data-ttu-id="896fc-124">如果集合的大小可为估算值，则指定初始容量后，无需在将元素添加到时执行多个大小调整操作 <xref:System.Collections.CollectionBase> 。</span><span class="sxs-lookup"><span data-stu-id="896fc-124">If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.CollectionBase>.</span></span>  
  
 <span data-ttu-id="896fc-125">此构造函数是一种 `O(1)` 操作。</span><span class="sxs-lookup"><span data-stu-id="896fc-125">This constructor is an `O(1)` operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.CollectionBase.Capacity" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected CollectionBase (int capacity);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(int32 capacity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.CollectionBase.#ctor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (capacity As Integer)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; CollectionBase(int capacity);" />
      <MemberSignature Language="F#" Value="new System.Collections.CollectionBase : int -&gt; System.Collections.CollectionBase" Usage="new System.Collections.CollectionBase capacity" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="capacity" Type="System.Int32" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="capacity"><span data-ttu-id="896fc-126">新列表最初可以存储的元素数。</span><span class="sxs-lookup"><span data-stu-id="896fc-126">The number of elements that the new list can initially store.</span></span></param>
        <summary><span data-ttu-id="896fc-127">使用指定容量初始化 <see cref="T:System.Collections.CollectionBase" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="896fc-127">Initializes a new instance of the <see cref="T:System.Collections.CollectionBase" /> class with the specified capacity.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="896fc-128">的容量 <xref:System.Collections.CollectionBase> 是可容纳的元素数 <xref:System.Collections.CollectionBase> 。</span><span class="sxs-lookup"><span data-stu-id="896fc-128">The capacity of a <xref:System.Collections.CollectionBase> is the number of elements that the <xref:System.Collections.CollectionBase> can hold.</span></span> <span data-ttu-id="896fc-129">当向添加元素时 <xref:System.Collections.CollectionBase> ，将根据需要通过重新分配内部数组来自动增加容量。</span><span class="sxs-lookup"><span data-stu-id="896fc-129">As elements are added to a <xref:System.Collections.CollectionBase>, the capacity is automatically increased as required by reallocating the internal array.</span></span>  
  
 <span data-ttu-id="896fc-130">如果集合的大小可为估算值，则指定初始容量后，无需在将元素添加到时执行多个大小调整操作 <xref:System.Collections.CollectionBase> 。</span><span class="sxs-lookup"><span data-stu-id="896fc-130">If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.CollectionBase>.</span></span>  
  
 <span data-ttu-id="896fc-131">此构造函数是一个 `O(n)` 操作，其中 `n` 是 `capacity` 。</span><span class="sxs-lookup"><span data-stu-id="896fc-131">This constructor is an `O(n)` operation, where `n` is `capacity`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.CollectionBase.Capacity" />
      </Docs>
    </Member>
    <Member MemberName="Capacity">
      <MemberSignature Language="C#" Value="public int Capacity { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Capacity" />
      <MemberSignature Language="DocId" Value="P:System.Collections.CollectionBase.Capacity" />
      <MemberSignature Language="VB.NET" Value="Public Property Capacity As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Capacity { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.Capacity : int with get, set" Usage="System.Collections.CollectionBase.Capacity" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Runtime.InteropServices.ComVisible(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.ComVisible(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="896fc-132">获取或设置 <see cref="T:System.Collections.CollectionBase" /> 可包含的元素数。</span><span class="sxs-lookup"><span data-stu-id="896fc-132">Gets or sets the number of elements that the <see cref="T:System.Collections.CollectionBase" /> can contain.</span></span></summary>
        <value><span data-ttu-id="896fc-133"><see cref="T:System.Collections.CollectionBase" /> 可包含的元素数。</span><span class="sxs-lookup"><span data-stu-id="896fc-133">The number of elements that the <see cref="T:System.Collections.CollectionBase" /> can contain.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="896fc-134"><xref:System.Collections.CollectionBase.Capacity%2A> 可以存储的元素数 <xref:System.Collections.CollectionBase> 。</span><span class="sxs-lookup"><span data-stu-id="896fc-134"><xref:System.Collections.CollectionBase.Capacity%2A> is the number of elements that the <xref:System.Collections.CollectionBase> can store.</span></span> <span data-ttu-id="896fc-135"><xref:System.Collections.CollectionBase.Count%2A> 实际在中的元素的数目 <xref:System.Collections.CollectionBase> 。</span><span class="sxs-lookup"><span data-stu-id="896fc-135"><xref:System.Collections.CollectionBase.Count%2A> is the number of elements that are actually in the <xref:System.Collections.CollectionBase>.</span></span>  
  
 <span data-ttu-id="896fc-136"><xref:System.Collections.CollectionBase.Capacity%2A> 始终大于或等于 <xref:System.Collections.CollectionBase.Count%2A> 。</span><span class="sxs-lookup"><span data-stu-id="896fc-136"><xref:System.Collections.CollectionBase.Capacity%2A> is always greater than or equal to <xref:System.Collections.CollectionBase.Count%2A>.</span></span> <span data-ttu-id="896fc-137">如果 <xref:System.Collections.CollectionBase.Count%2A> 在 <xref:System.Collections.CollectionBase.Capacity%2A> 添加元素时超过，则会通过在复制旧元素并添加新元素之前重新分配内部数组来自动增加容量。</span><span class="sxs-lookup"><span data-stu-id="896fc-137">If <xref:System.Collections.CollectionBase.Count%2A> exceeds <xref:System.Collections.CollectionBase.Capacity%2A> while adding elements, the capacity is automatically increased by reallocating the internal array before copying the old elements and adding the new elements.</span></span>  
  
 <span data-ttu-id="896fc-138">可以通过显式设置属性来减少容量 <xref:System.Collections.CollectionBase.Capacity%2A> 。</span><span class="sxs-lookup"><span data-stu-id="896fc-138">The capacity can be decreased by setting the <xref:System.Collections.CollectionBase.Capacity%2A> property explicitly.</span></span> <span data-ttu-id="896fc-139">如果 <xref:System.Collections.CollectionBase.Capacity%2A> 显式设置的值，则还会重新分配内部数组以容纳指定的容量。</span><span class="sxs-lookup"><span data-stu-id="896fc-139">When the value of <xref:System.Collections.CollectionBase.Capacity%2A> is set explicitly, the internal array is also reallocated to accommodate the specified capacity.</span></span>  
  
 <span data-ttu-id="896fc-140">检索此属性的值是一个 `O(1)` 操作; 设置属性是一个 `O(n)` 操作，其中 `n` 是新容量。</span><span class="sxs-lookup"><span data-stu-id="896fc-140">Retrieving the value of this property is an `O(1)` operation; setting the property is an `O(n)` operation, where `n` is the new capacity.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="896fc-141"><see cref="P:System.Collections.CollectionBase.Capacity" /> 已设置为一个小于 <see cref="P:System.Collections.CollectionBase.Count" /> 的值。</span><span class="sxs-lookup"><span data-stu-id="896fc-141"><see cref="P:System.Collections.CollectionBase.Capacity" /> is set to a value that is less than <see cref="P:System.Collections.CollectionBase.Count" />.</span></span></exception>
        <exception cref="T:System.OutOfMemoryException"><span data-ttu-id="896fc-142">系统上没有足够的可用内存。</span><span class="sxs-lookup"><span data-stu-id="896fc-142">There is not enough memory available on the system.</span></span></exception>
        <altmember cref="P:System.Collections.CollectionBase.Count" />
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.CollectionBase.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Clear();" />
      <MemberSignature Language="F#" Value="abstract member Clear : unit -&gt; unit&#xA;override this.Clear : unit -&gt; unit" Usage="collectionBase.Clear " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Clear</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="896fc-143">从 <see cref="T:System.Collections.CollectionBase" /> 实例移除所有对象。</span><span class="sxs-lookup"><span data-stu-id="896fc-143">Removes all objects from the <see cref="T:System.Collections.CollectionBase" /> instance.</span></span> <span data-ttu-id="896fc-144">不能重写此方法。</span><span class="sxs-lookup"><span data-stu-id="896fc-144">This method cannot be overridden.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="896fc-145"><xref:System.Collections.CollectionBase.Count%2A> 设置为零。</span><span class="sxs-lookup"><span data-stu-id="896fc-145"><xref:System.Collections.CollectionBase.Count%2A> is set to zero.</span></span>  
  
 <span data-ttu-id="896fc-146">此方法是一个 `O(n)` 操作，其中 `n` 是 <xref:System.Collections.CollectionBase.Count%2A> 。</span><span class="sxs-lookup"><span data-stu-id="896fc-146">This method is an `O(n)` operation, where `n` is <xref:System.Collections.CollectionBase.Count%2A>.</span></span>  
  
 <span data-ttu-id="896fc-147">若要在清除集合之前或之后执行自定义操作，请重写受保护的 <xref:System.Collections.CollectionBase.OnClear%2A> 或 <xref:System.Collections.CollectionBase.OnClearComplete%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="896fc-147">To perform custom actions before or after the collection is cleared, override the protected <xref:System.Collections.CollectionBase.OnClear%2A> or <xref:System.Collections.CollectionBase.OnClearComplete%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Collections.CollectionBase.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="System.Collections.CollectionBase.Count" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="896fc-148">获取 <see cref="T:System.Collections.CollectionBase" /> 实例中包含的元素数。</span><span class="sxs-lookup"><span data-stu-id="896fc-148">Gets the number of elements contained in the <see cref="T:System.Collections.CollectionBase" /> instance.</span></span> <span data-ttu-id="896fc-149">不能重写此属性。</span><span class="sxs-lookup"><span data-stu-id="896fc-149">This property cannot be overridden.</span></span></summary>
        <value><span data-ttu-id="896fc-150"><see cref="T:System.Collections.CollectionBase" /> 实例中包含的元素数。</span><span class="sxs-lookup"><span data-stu-id="896fc-150">The number of elements contained in the <see cref="T:System.Collections.CollectionBase" /> instance.</span></span> <span data-ttu-id="896fc-151">检索此属性的值的运算复杂度为 O(1)。</span><span class="sxs-lookup"><span data-stu-id="896fc-151">Retrieving the value of this property is an O(1) operation.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="896fc-152">下面的代码示例实现 <xref:System.Collections.CollectionBase> 类，并使用该实现创建对象的集合 <xref:System.Int16> 。</span><span class="sxs-lookup"><span data-stu-id="896fc-152">The following code example implements the <xref:System.Collections.CollectionBase> class and uses that implementation to create a collection of <xref:System.Int16> objects.</span></span>  
  
 [!code-cpp[System.Collections.CollectionBase#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.CollectionBase/CPP/collectionbase.cpp#1)]
 [!code-csharp[System.Collections.CollectionBase#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.CollectionBase/CS/collectionbase.cs#1)]
 [!code-vb[System.Collections.CollectionBase#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.CollectionBase/VB/collectionbase.vb#1)]  
   
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.IEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IEnumerator GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.CollectionBase.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::IEnumerator ^ GetEnumerator();" />
      <MemberSignature Language="F#" Value="abstract member GetEnumerator : unit -&gt; System.Collections.IEnumerator&#xA;override this.GetEnumerator : unit -&gt; System.Collections.IEnumerator" Usage="collectionBase.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="896fc-153">返回循环访问 <see cref="T:System.Collections.CollectionBase" /> 实例的枚举器。</span><span class="sxs-lookup"><span data-stu-id="896fc-153">Returns an enumerator that iterates through the <see cref="T:System.Collections.CollectionBase" /> instance.</span></span></summary>
        <returns><span data-ttu-id="896fc-154">用于 <see cref="T:System.Collections.IEnumerator" /> 实例的 <see cref="T:System.Collections.CollectionBase" />。</span><span class="sxs-lookup"><span data-stu-id="896fc-154">An <see cref="T:System.Collections.IEnumerator" /> for the <see cref="T:System.Collections.CollectionBase" /> instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
   
 <span data-ttu-id="896fc-155">C# 语言的 `foreach` 语句（在 Visual Basic 中为 `for each`）隐藏了枚举数的复杂性。</span><span class="sxs-lookup"><span data-stu-id="896fc-155">The `foreach` statement of the C# language (`for each` in Visual Basic) hides the complexity of the enumerators.</span></span>  <span data-ttu-id="896fc-156">因此，建议使用 `foreach`，而不是直接操作枚举数。</span><span class="sxs-lookup"><span data-stu-id="896fc-156">Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.</span></span>  
  
 <span data-ttu-id="896fc-157">枚举器可用于读取集合中的数据，但不能用于修改基础集合。</span><span class="sxs-lookup"><span data-stu-id="896fc-157">Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</span></span>  
  
 <span data-ttu-id="896fc-158">最初，枚举数定位在集合中第一个元素的前面。</span><span class="sxs-lookup"><span data-stu-id="896fc-158">Initially, the enumerator is positioned before the first element in the collection.</span></span> <span data-ttu-id="896fc-159"><xref:System.Collections.IEnumerator.Reset%2A> 也会将枚举器放回此位置。</span><span class="sxs-lookup"><span data-stu-id="896fc-159"><xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position.</span></span> <span data-ttu-id="896fc-160">在此位置，调用会 <xref:System.Collections.IEnumerator.Current%2A> 引发异常。</span><span class="sxs-lookup"><span data-stu-id="896fc-160">At this position, calling <xref:System.Collections.IEnumerator.Current%2A> throws an exception.</span></span> <span data-ttu-id="896fc-161">因此，在读取 <xref:System.Collections.IEnumerator.MoveNext%2A> 的值之前，必须调用 <xref:System.Collections.IEnumerator.Current%2A> 将枚举器向前移动到集合的第一个元素。</span><span class="sxs-lookup"><span data-stu-id="896fc-161">Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.</span></span>  
  
 <span data-ttu-id="896fc-162">在调用 <xref:System.Collections.IEnumerator.Current%2A> 或 <xref:System.Collections.IEnumerator.MoveNext%2A> 之前，<xref:System.Collections.IEnumerator.Reset%2A> 返回同一对象。</span><span class="sxs-lookup"><span data-stu-id="896fc-162"><xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called.</span></span> <span data-ttu-id="896fc-163"><xref:System.Collections.IEnumerator.MoveNext%2A> 将 <xref:System.Collections.IEnumerator.Current%2A> 设置为下一个元素。</span><span class="sxs-lookup"><span data-stu-id="896fc-163"><xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.</span></span>  
  
 <span data-ttu-id="896fc-164">如果 <xref:System.Collections.IEnumerator.MoveNext%2A> 越过集合的末尾，则枚举器将定位在集合中最后一个元素之后，并 <xref:System.Collections.IEnumerator.MoveNext%2A> 返回 `false` 。</span><span class="sxs-lookup"><span data-stu-id="896fc-164">If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`.</span></span> <span data-ttu-id="896fc-165">当枚举器位于此位置时，对的后续调用 <xref:System.Collections.IEnumerator.MoveNext%2A> 也将返回 `false` 。</span><span class="sxs-lookup"><span data-stu-id="896fc-165">When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`.</span></span> <span data-ttu-id="896fc-166">如果最后一次调用 <xref:System.Collections.IEnumerator.MoveNext%2A> 返回 `false` ，则调用会 <xref:System.Collections.IEnumerator.Current%2A> 引发异常。</span><span class="sxs-lookup"><span data-stu-id="896fc-166">If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, calling <xref:System.Collections.IEnumerator.Current%2A> throws an exception.</span></span> <span data-ttu-id="896fc-167">若要再次将 <xref:System.Collections.IEnumerator.Current%2A> 设置为集合的第一个元素，可以调用 <xref:System.Collections.IEnumerator.Reset%2A> 并接着调用 <xref:System.Collections.IEnumerator.MoveNext%2A>。</span><span class="sxs-lookup"><span data-stu-id="896fc-167">To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.</span></span>  
  
 <span data-ttu-id="896fc-168">只要集合保持不变，枚举器就仍有效。</span><span class="sxs-lookup"><span data-stu-id="896fc-168">An enumerator remains valid as long as the collection remains unchanged.</span></span> <span data-ttu-id="896fc-169">如果对集合所做的更改（如添加、修改或删除元素），则枚举器将失效且不可恢复，并且对或的下一个调用将 <xref:System.Collections.IEnumerator.MoveNext%2A> <xref:System.Collections.IEnumerator.Reset%2A> 引发 <xref:System.InvalidOperationException> 。</span><span class="sxs-lookup"><span data-stu-id="896fc-169">If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> throws an <xref:System.InvalidOperationException>.</span></span> <span data-ttu-id="896fc-170">如果在和之间修改集合 <xref:System.Collections.IEnumerator.MoveNext%2A> <xref:System.Collections.IEnumerator.Current%2A> ，则 <xref:System.Collections.IEnumerator.Current%2A> 将返回它设置为的元素，即使枚举器已失效也是如此。</span><span class="sxs-lookup"><span data-stu-id="896fc-170">If the collection is modified between <xref:System.Collections.IEnumerator.MoveNext%2A> and <xref:System.Collections.IEnumerator.Current%2A>, <xref:System.Collections.IEnumerator.Current%2A> returns the element that it is set to, even if the enumerator is already invalidated.</span></span>  
  
 <span data-ttu-id="896fc-171">该枚举数不具有独占访问集合的权限；因此，枚举整个集合本质上不是一个线程安全的过程。</span><span class="sxs-lookup"><span data-stu-id="896fc-171">The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread safe procedure.</span></span> <span data-ttu-id="896fc-172">即使某个集合已同步，其他线程仍可以修改该集合，这会导致枚举数引发异常。</span><span class="sxs-lookup"><span data-stu-id="896fc-172">Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</span></span> <span data-ttu-id="896fc-173">若要确保枚举过程中的线程安全性，可以在整个枚举期间锁定集合，或者捕获由其他线程进行的更改所导致的异常。</span><span class="sxs-lookup"><span data-stu-id="896fc-173">To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</span></span>  
  
 <span data-ttu-id="896fc-174">虽然 <xref:System.Collections.CollectionBase.GetEnumerator%2A> 默认情况下该方法对 COM 客户端是不可见的，但继承 <xref:System.Collections.CollectionBase> 类会使其公开，并可能导致在 COM 客户端中产生不需要的行为。</span><span class="sxs-lookup"><span data-stu-id="896fc-174">While the <xref:System.Collections.CollectionBase.GetEnumerator%2A> method is not visible to COM clients by default, inheriting the <xref:System.Collections.CollectionBase> class can expose it and can cause undesirable behavior in COM clients.</span></span>  
  
 <span data-ttu-id="896fc-175">此方法是一种 `O(1)` 操作。</span><span class="sxs-lookup"><span data-stu-id="896fc-175">This method is an `O(1)` operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="896fc-176">下面的代码示例实现 <xref:System.Collections.CollectionBase> 类，并使用该实现创建对象的集合 <xref:System.Int16> 。</span><span class="sxs-lookup"><span data-stu-id="896fc-176">The following code example implements the <xref:System.Collections.CollectionBase> class and uses that implementation to create a collection of <xref:System.Int16> objects.</span></span>  
  
 [!code-cpp[System.Collections.CollectionBase#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.CollectionBase/CPP/collectionbase.cpp#1)]
 [!code-csharp[System.Collections.CollectionBase#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.CollectionBase/CS/collectionbase.cs#1)]
 [!code-vb[System.Collections.CollectionBase#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.CollectionBase/VB/collectionbase.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.IEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="InnerList">
      <MemberSignature Language="C#" Value="protected System.Collections.ArrayList InnerList { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ArrayList InnerList" />
      <MemberSignature Language="DocId" Value="P:System.Collections.CollectionBase.InnerList" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property InnerList As ArrayList" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Collections::ArrayList ^ InnerList { System::Collections::ArrayList ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.InnerList : System.Collections.ArrayList" Usage="System.Collections.CollectionBase.InnerList" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ArrayList</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="896fc-177">获取一个 <see cref="T:System.Collections.ArrayList" />，它包含 <see cref="T:System.Collections.CollectionBase" /> 实例中元素的列表。</span><span class="sxs-lookup"><span data-stu-id="896fc-177">Gets an <see cref="T:System.Collections.ArrayList" /> containing the list of elements in the <see cref="T:System.Collections.CollectionBase" /> instance.</span></span></summary>
        <value><span data-ttu-id="896fc-178">表示 <see cref="T:System.Collections.ArrayList" /> 实例本身的 <see cref="T:System.Collections.CollectionBase" />。</span><span class="sxs-lookup"><span data-stu-id="896fc-178">An <see cref="T:System.Collections.ArrayList" /> representing the <see cref="T:System.Collections.CollectionBase" /> instance itself.</span></span> <span data-ttu-id="896fc-179">检索此属性的值的运算复杂度为 O(1)。</span><span class="sxs-lookup"><span data-stu-id="896fc-179">Retrieving the value of this property is an O(1) operation.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="896fc-180">On \* 方法仅在由属性返回的实例上调用 <xref:System.Collections.CollectionBase.List%2A> ，而不是在由属性返回的实例上调用 <xref:System.Collections.CollectionBase.InnerList%2A> 。</span><span class="sxs-lookup"><span data-stu-id="896fc-180">The On\* methods are invoked only on the instance returned by the <xref:System.Collections.CollectionBase.List%2A> property, but not on the instance returned by the <xref:System.Collections.CollectionBase.InnerList%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="List">
      <MemberSignature Language="C#" Value="protected System.Collections.IList List { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.IList List" />
      <MemberSignature Language="DocId" Value="P:System.Collections.CollectionBase.List" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property List As IList" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Collections::IList ^ List { System::Collections::IList ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.List : System.Collections.IList" Usage="System.Collections.CollectionBase.List" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IList</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="896fc-181">获取一个 <see cref="T:System.Collections.IList" />，它包含 <see cref="T:System.Collections.CollectionBase" /> 实例中元素的列表。</span><span class="sxs-lookup"><span data-stu-id="896fc-181">Gets an <see cref="T:System.Collections.IList" /> containing the list of elements in the <see cref="T:System.Collections.CollectionBase" /> instance.</span></span></summary>
        <value><span data-ttu-id="896fc-182">表示 <see cref="T:System.Collections.IList" /> 实例本身的 <see cref="T:System.Collections.CollectionBase" />。</span><span class="sxs-lookup"><span data-stu-id="896fc-182">An <see cref="T:System.Collections.IList" /> representing the <see cref="T:System.Collections.CollectionBase" /> instance itself.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="896fc-183">On \* 方法仅在由属性返回的实例上调用 <xref:System.Collections.CollectionBase.List%2A> ，而不是在由属性返回的实例上调用 <xref:System.Collections.CollectionBase.InnerList%2A> 。</span><span class="sxs-lookup"><span data-stu-id="896fc-183">The On\* methods are invoked only on the instance returned by the <xref:System.Collections.CollectionBase.List%2A> property, but not on the instance returned by the <xref:System.Collections.CollectionBase.InnerList%2A> property.</span></span>  
  
 <span data-ttu-id="896fc-184">检索此属性的值是一个 `O(1)` 运算。</span><span class="sxs-lookup"><span data-stu-id="896fc-184">Retrieving the value of this property is an `O(1)` operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="896fc-185">下面的代码示例实现 <xref:System.Collections.CollectionBase> 类，并使用该实现创建对象的集合 <xref:System.Int16> 。</span><span class="sxs-lookup"><span data-stu-id="896fc-185">The following code example implements the <xref:System.Collections.CollectionBase> class and uses that implementation to create a collection of <xref:System.Int16> objects.</span></span>  
  
 [!code-cpp[System.Collections.CollectionBase#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.CollectionBase/CPP/collectionbase.cpp#1)]
 [!code-csharp[System.Collections.CollectionBase#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.CollectionBase/CS/collectionbase.cs#1)]
 [!code-vb[System.Collections.CollectionBase#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.CollectionBase/VB/collectionbase.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnClear">
      <MemberSignature Language="C#" Value="protected virtual void OnClear ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnClear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.CollectionBase.OnClear" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnClear ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnClear();" />
      <MemberSignature Language="F#" Value="abstract member OnClear : unit -&gt; unit&#xA;override this.OnClear : unit -&gt; unit" Usage="collectionBase.OnClear " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="896fc-186">清除 <see cref="T:System.Collections.CollectionBase" /> 实例的内容时执行其他自定义进程。</span><span class="sxs-lookup"><span data-stu-id="896fc-186">Performs additional custom processes when clearing the contents of the <see cref="T:System.Collections.CollectionBase" /> instance.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="896fc-187">此方法的默认实现旨在由派生类重写，以在清除集合之前执行某些操作。</span><span class="sxs-lookup"><span data-stu-id="896fc-187">The default implementation of this method is intended to be overridden by a derived class to perform some action before the collection is cleared.</span></span>  
  
 <span data-ttu-id="896fc-188">On \* 方法仅在由属性返回的实例上调用 <xref:System.Collections.CollectionBase.List%2A> ，而不是在由属性返回的实例上调用 <xref:System.Collections.CollectionBase.InnerList%2A> 。</span><span class="sxs-lookup"><span data-stu-id="896fc-188">The On\* methods are invoked only on the instance returned by the <xref:System.Collections.CollectionBase.List%2A> property, but not on the instance returned by the <xref:System.Collections.CollectionBase.InnerList%2A> property.</span></span>  
  
 <span data-ttu-id="896fc-189">如果进程失败，则集合恢复为其以前的状态。</span><span class="sxs-lookup"><span data-stu-id="896fc-189">If the process fails, the collection reverts back to its previous state.</span></span>  
  
 <span data-ttu-id="896fc-190">此方法的默认实现是一种 `O(1)` 操作。</span><span class="sxs-lookup"><span data-stu-id="896fc-190">The default implementation of this method is an `O(1)` operation.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="896fc-191">此方法允许实现程序定义在从基础中删除所有元素之前必须执行的进程 <see cref="T:System.Collections.ArrayList" /> 。</span><span class="sxs-lookup"><span data-stu-id="896fc-191">This method allows implementers to define processes that must be performed before deleting all the elements from the underlying <see cref="T:System.Collections.ArrayList" />.</span></span> <span data-ttu-id="896fc-192">通过定义此方法，实施者可以向继承的方法添加功能，而无需重写所有其他方法。</span><span class="sxs-lookup"><span data-stu-id="896fc-192">By defining this method, implementers can add functionality to inherited methods without having to override all other methods.</span></span>  
  
 <span data-ttu-id="896fc-193"><see cref="M:System.Collections.CollectionBase.OnClear" /> 在标准清除行为之前调用，而 <see cref="M:System.Collections.CollectionBase.OnClearComplete" /> 是在标准清楚行为之后调用。</span><span class="sxs-lookup"><span data-stu-id="896fc-193"><see cref="M:System.Collections.CollectionBase.OnClear" /> is invoked before the standard Clear behavior, whereas <see cref="M:System.Collections.CollectionBase.OnClearComplete" /> is invoked after the standard Clear behavior.</span></span>  
  
<span data-ttu-id="896fc-194">例如，实施者可以通过全局明文免除某些元素删除。</span><span class="sxs-lookup"><span data-stu-id="896fc-194">For example, implementers can exempt certain elements from deletion by a global Clear.</span></span></para></block>
        <altmember cref="M:System.Collections.CollectionBase.OnClearComplete" />
        <altmember cref="M:System.Collections.CollectionBase.OnRemove(System.Int32,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="OnClearComplete">
      <MemberSignature Language="C#" Value="protected virtual void OnClearComplete ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnClearComplete() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.CollectionBase.OnClearComplete" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnClearComplete ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnClearComplete();" />
      <MemberSignature Language="F#" Value="abstract member OnClearComplete : unit -&gt; unit&#xA;override this.OnClearComplete : unit -&gt; unit" Usage="collectionBase.OnClearComplete " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="896fc-195">在清除 <see cref="T:System.Collections.CollectionBase" /> 实例的内容之后执行其他自定义进程。</span><span class="sxs-lookup"><span data-stu-id="896fc-195">Performs additional custom processes after clearing the contents of the <see cref="T:System.Collections.CollectionBase" /> instance.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="896fc-196">此方法的默认实现旨在由派生类重写，以在清除集合后执行某一操作。</span><span class="sxs-lookup"><span data-stu-id="896fc-196">The default implementation of this method is intended to be overridden by a derived class to perform some action after the collection is cleared.</span></span>  
  
 <span data-ttu-id="896fc-197">On \* 方法仅在由属性返回的实例上调用 <xref:System.Collections.CollectionBase.List%2A> ，而不是在由属性返回的实例上调用 <xref:System.Collections.CollectionBase.InnerList%2A> 。</span><span class="sxs-lookup"><span data-stu-id="896fc-197">The On\* methods are invoked only on the instance returned by the <xref:System.Collections.CollectionBase.List%2A> property, but not on the instance returned by the <xref:System.Collections.CollectionBase.InnerList%2A> property.</span></span>  
  
 <span data-ttu-id="896fc-198">此方法的默认实现是一种 `O(1)` 操作。</span><span class="sxs-lookup"><span data-stu-id="896fc-198">The default implementation of this method is an `O(1)` operation.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="896fc-199">此方法允许实现程序定义在从基础中删除所有元素后必须执行的进程 <see cref="T:System.Collections.ArrayList" /> 。</span><span class="sxs-lookup"><span data-stu-id="896fc-199">This method allows implementers to define processes that must be performed after deleting all the elements from the underlying <see cref="T:System.Collections.ArrayList" />.</span></span> <span data-ttu-id="896fc-200">通过定义此方法，实施者可以向继承的方法添加功能，而无需重写所有其他方法。</span><span class="sxs-lookup"><span data-stu-id="896fc-200">By defining this method, implementers can add functionality to inherited methods without having to override all other methods.</span></span>  
  
 <span data-ttu-id="896fc-201"><see cref="M:System.Collections.CollectionBase.OnClear" /> 在标准清除行为之前调用，而 <see cref="M:System.Collections.CollectionBase.OnClearComplete" /> 是在标准清楚行为之后调用。</span><span class="sxs-lookup"><span data-stu-id="896fc-201"><see cref="M:System.Collections.CollectionBase.OnClear" /> is invoked before the standard Clear behavior, whereas <see cref="M:System.Collections.CollectionBase.OnClearComplete" /> is invoked after the standard Clear behavior.</span></span></para></block>
        <altmember cref="M:System.Collections.CollectionBase.OnClear" />
        <altmember cref="M:System.Collections.CollectionBase.OnRemoveComplete(System.Int32,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="OnInsert">
      <MemberSignature Language="C#" Value="protected virtual void OnInsert (int index, object value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnInsert(int32 index, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.CollectionBase.OnInsert(System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnInsert (index As Integer, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnInsert(int index, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member OnInsert : int * obj -&gt; unit&#xA;override this.OnInsert : int * obj -&gt; unit" Usage="collectionBase.OnInsert (index, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="896fc-202">从零开始的索引，在该处插入 <paramref name="value" />。</span><span class="sxs-lookup"><span data-stu-id="896fc-202">The zero-based index at which to insert <paramref name="value" />.</span></span></param>
        <param name="value"><span data-ttu-id="896fc-203"><paramref name="index" /> 处的元素的新值。</span><span class="sxs-lookup"><span data-stu-id="896fc-203">The new value of the element at <paramref name="index" />.</span></span></param>
        <summary><span data-ttu-id="896fc-204">在向 <see cref="T:System.Collections.CollectionBase" /> 实例中插入新元素之前执行其他自定义进程。</span><span class="sxs-lookup"><span data-stu-id="896fc-204">Performs additional custom processes before inserting a new element into the <see cref="T:System.Collections.CollectionBase" /> instance.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="896fc-205">此方法的默认实现旨在由派生类重写，以便在插入指定元素之前执行一些操作。</span><span class="sxs-lookup"><span data-stu-id="896fc-205">The default implementation of this method is intended to be overridden by a derived class to perform some action before the specified element is inserted.</span></span>  
  
 <span data-ttu-id="896fc-206">On \* 方法仅在由属性返回的实例上调用 <xref:System.Collections.CollectionBase.List%2A> ，而不是在由属性返回的实例上调用 <xref:System.Collections.CollectionBase.InnerList%2A> 。</span><span class="sxs-lookup"><span data-stu-id="896fc-206">The On\* methods are invoked only on the instance returned by the <xref:System.Collections.CollectionBase.List%2A> property, but not on the instance returned by the <xref:System.Collections.CollectionBase.InnerList%2A> property.</span></span>  
  
 <span data-ttu-id="896fc-207">如果进程失败，则集合恢复为其以前的状态。</span><span class="sxs-lookup"><span data-stu-id="896fc-207">If the process fails, the collection reverts back to its previous state.</span></span>  
  
 <span data-ttu-id="896fc-208">此方法的默认实现是一种 `O(1)` 操作。</span><span class="sxs-lookup"><span data-stu-id="896fc-208">The default implementation of this method is an `O(1)` operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="896fc-209">下面的代码示例实现 <xref:System.Collections.CollectionBase> 类，并使用该实现创建对象的集合 <xref:System.Int16> 。</span><span class="sxs-lookup"><span data-stu-id="896fc-209">The following code example implements the <xref:System.Collections.CollectionBase> class and uses that implementation to create a collection of <xref:System.Int16> objects.</span></span>  
  
 [!code-cpp[System.Collections.CollectionBase#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.CollectionBase/CPP/collectionbase.cpp#1)]
 [!code-csharp[System.Collections.CollectionBase#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.CollectionBase/CS/collectionbase.cs#1)]
 [!code-vb[System.Collections.CollectionBase#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.CollectionBase/VB/collectionbase.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="896fc-210">此方法允许实现者定义在将元素插入基础元素之前必须执行的进程 <see cref="T:System.Collections.ArrayList" /> 。</span><span class="sxs-lookup"><span data-stu-id="896fc-210">This method allows implementers to define processes that must be performed before inserting the element into the underlying <see cref="T:System.Collections.ArrayList" />.</span></span> <span data-ttu-id="896fc-211">通过定义此方法，实施者可以向继承的方法添加功能，而无需重写所有其他方法。</span><span class="sxs-lookup"><span data-stu-id="896fc-211">By defining this method, implementers can add functionality to inherited methods without having to override all other methods.</span></span>  
  
 <span data-ttu-id="896fc-212"><see cref="M:System.Collections.CollectionBase.OnInsert(System.Int32,System.Object)" /> 在标准插入行为之前调用，而在 <see cref="M:System.Collections.CollectionBase.OnInsertComplete(System.Int32,System.Object)" /> 标准插入行为后调用。</span><span class="sxs-lookup"><span data-stu-id="896fc-212"><see cref="M:System.Collections.CollectionBase.OnInsert(System.Int32,System.Object)" /> is invoked before the standard Insert behavior, whereas <see cref="M:System.Collections.CollectionBase.OnInsertComplete(System.Int32,System.Object)" /> is invoked after the standard Insert behavior.</span></span>  
  
<span data-ttu-id="896fc-213">例如，实施者可以限制可插入到中的对象的类型 <see cref="T:System.Collections.ArrayList" /> 。</span><span class="sxs-lookup"><span data-stu-id="896fc-213">For example, implementers can restrict which types of objects can be inserted into the <see cref="T:System.Collections.ArrayList" />.</span></span>  
  
 <span data-ttu-id="896fc-214"><see cref="M:System.Collections.CollectionBase.OnValidate(System.Object)" /> 在此方法之前调用。</span><span class="sxs-lookup"><span data-stu-id="896fc-214"><see cref="M:System.Collections.CollectionBase.OnValidate(System.Object)" /> is called prior to this method.</span></span></para></block>
        <altmember cref="M:System.Collections.CollectionBase.OnInsertComplete(System.Int32,System.Object)" />
        <altmember cref="M:System.Collections.CollectionBase.OnSet(System.Int32,System.Object,System.Object)" />
        <altmember cref="M:System.Collections.CollectionBase.OnValidate(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="OnInsertComplete">
      <MemberSignature Language="C#" Value="protected virtual void OnInsertComplete (int index, object value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnInsertComplete(int32 index, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.CollectionBase.OnInsertComplete(System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnInsertComplete (index As Integer, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnInsertComplete(int index, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member OnInsertComplete : int * obj -&gt; unit&#xA;override this.OnInsertComplete : int * obj -&gt; unit" Usage="collectionBase.OnInsertComplete (index, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="896fc-215">从零开始的索引，在该处插入 <paramref name="value" />。</span><span class="sxs-lookup"><span data-stu-id="896fc-215">The zero-based index at which to insert <paramref name="value" />.</span></span></param>
        <param name="value"><span data-ttu-id="896fc-216"><paramref name="index" /> 处的元素的新值。</span><span class="sxs-lookup"><span data-stu-id="896fc-216">The new value of the element at <paramref name="index" />.</span></span></param>
        <summary><span data-ttu-id="896fc-217">在向 <see cref="T:System.Collections.CollectionBase" /> 实例中插入新元素之后执行其他自定义进程。</span><span class="sxs-lookup"><span data-stu-id="896fc-217">Performs additional custom processes after inserting a new element into the <see cref="T:System.Collections.CollectionBase" /> instance.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="896fc-218">此方法的默认实现旨在由派生类重写，以便在插入指定元素后执行某一操作。</span><span class="sxs-lookup"><span data-stu-id="896fc-218">The default implementation of this method is intended to be overridden by a derived class to perform some action after the specified element is inserted.</span></span>  
  
 <span data-ttu-id="896fc-219">On \* 方法仅在由属性返回的实例上调用 <xref:System.Collections.CollectionBase.List%2A> ，而不是在由属性返回的实例上调用 <xref:System.Collections.CollectionBase.InnerList%2A> 。</span><span class="sxs-lookup"><span data-stu-id="896fc-219">The On\* methods are invoked only on the instance returned by the <xref:System.Collections.CollectionBase.List%2A> property, but not on the instance returned by the <xref:System.Collections.CollectionBase.InnerList%2A> property.</span></span>  
  
 <span data-ttu-id="896fc-220">如果发生以下情况之一，则集合恢复为其以前的状态：</span><span class="sxs-lookup"><span data-stu-id="896fc-220">The collection reverts back to its previous state if one of the following occurs:</span></span>  
  
-   <span data-ttu-id="896fc-221">进程失败。</span><span class="sxs-lookup"><span data-stu-id="896fc-221">The process fails.</span></span>  
  
-   <span data-ttu-id="896fc-222">重写此方法以引发异常。</span><span class="sxs-lookup"><span data-stu-id="896fc-222">This method is overridden to throw an exception.</span></span>  
  
 <span data-ttu-id="896fc-223">此方法的默认实现是一种 `O(1)` 操作。</span><span class="sxs-lookup"><span data-stu-id="896fc-223">The default implementation of this method is an `O(1)` operation.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="896fc-224">此方法允许实现者定义在将元素插入基础元素后必须执行的进程 <see cref="T:System.Collections.ArrayList" /> 。</span><span class="sxs-lookup"><span data-stu-id="896fc-224">This method allows implementers to define processes that must be performed after inserting the element into the underlying <see cref="T:System.Collections.ArrayList" />.</span></span> <span data-ttu-id="896fc-225">通过定义此方法，实施者可以向继承的方法添加功能，而无需重写所有其他方法。</span><span class="sxs-lookup"><span data-stu-id="896fc-225">By defining this method, implementers can add functionality to inherited methods without having to override all other methods.</span></span>  
  
 <span data-ttu-id="896fc-226"><see cref="M:System.Collections.CollectionBase.OnInsert(System.Int32,System.Object)" /> 在标准插入行为之前调用，而在 <see cref="M:System.Collections.CollectionBase.OnInsertComplete(System.Int32,System.Object)" /> 标准插入行为后调用。</span><span class="sxs-lookup"><span data-stu-id="896fc-226"><see cref="M:System.Collections.CollectionBase.OnInsert(System.Int32,System.Object)" /> is invoked before the standard Insert behavior, whereas <see cref="M:System.Collections.CollectionBase.OnInsertComplete(System.Int32,System.Object)" /> is invoked after the standard Insert behavior.</span></span></para></block>
        <altmember cref="M:System.Collections.CollectionBase.OnInsert(System.Int32,System.Object)" />
        <altmember cref="M:System.Collections.CollectionBase.OnSetComplete(System.Int32,System.Object,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="OnRemove">
      <MemberSignature Language="C#" Value="protected virtual void OnRemove (int index, object value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRemove(int32 index, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.CollectionBase.OnRemove(System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnRemove (index As Integer, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnRemove(int index, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member OnRemove : int * obj -&gt; unit&#xA;override this.OnRemove : int * obj -&gt; unit" Usage="collectionBase.OnRemove (index, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="896fc-227">从零开始的索引，可在该位置找到 <paramref name="value" />。</span><span class="sxs-lookup"><span data-stu-id="896fc-227">The zero-based index at which <paramref name="value" /> can be found.</span></span></param>
        <param name="value"><span data-ttu-id="896fc-228">要从 <paramref name="index" /> 移除的元素的值。</span><span class="sxs-lookup"><span data-stu-id="896fc-228">The value of the element to remove from <paramref name="index" />.</span></span></param>
        <summary><span data-ttu-id="896fc-229">当从 <see cref="T:System.Collections.CollectionBase" /> 实例移除元素时执行其他自定义进程。</span><span class="sxs-lookup"><span data-stu-id="896fc-229">Performs additional custom processes when removing an element from the <see cref="T:System.Collections.CollectionBase" /> instance.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="896fc-230">此方法的默认实现旨在由派生类重写，以在删除指定元素之前执行某些操作。</span><span class="sxs-lookup"><span data-stu-id="896fc-230">The default implementation of this method is intended to be overridden by a derived class to perform some action before the specified element is removed.</span></span>  
  
 <span data-ttu-id="896fc-231">On \* 方法仅在由属性返回的实例上调用 <xref:System.Collections.CollectionBase.List%2A> ，而不是在由属性返回的实例上调用 <xref:System.Collections.CollectionBase.InnerList%2A> 。</span><span class="sxs-lookup"><span data-stu-id="896fc-231">The On\* methods are invoked only on the instance returned by the <xref:System.Collections.CollectionBase.List%2A> property, but not on the instance returned by the <xref:System.Collections.CollectionBase.InnerList%2A> property.</span></span>  
  
 <span data-ttu-id="896fc-232">如果进程失败，则集合恢复为其以前的状态。</span><span class="sxs-lookup"><span data-stu-id="896fc-232">If the process fails, the collection reverts back to its previous state.</span></span>  
  
 <span data-ttu-id="896fc-233">此方法的默认实现是一种 `O(1)` 操作。</span><span class="sxs-lookup"><span data-stu-id="896fc-233">The default implementation of this method is an `O(1)` operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="896fc-234">下面的代码示例实现 <xref:System.Collections.CollectionBase> 类，并使用该实现创建对象的集合 <xref:System.Int16> 。</span><span class="sxs-lookup"><span data-stu-id="896fc-234">The following code example implements the <xref:System.Collections.CollectionBase> class and uses that implementation to create a collection of <xref:System.Int16> objects.</span></span>  
  
 [!code-cpp[System.Collections.CollectionBase#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.CollectionBase/CPP/collectionbase.cpp#1)]
 [!code-csharp[System.Collections.CollectionBase#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.CollectionBase/CS/collectionbase.cs#1)]
 [!code-vb[System.Collections.CollectionBase#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.CollectionBase/VB/collectionbase.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="896fc-235">此方法允许实现程序定义在从基础中删除元素之前必须执行的进程 <see cref="T:System.Collections.ArrayList" /> 。</span><span class="sxs-lookup"><span data-stu-id="896fc-235">This method allows implementers to define processes that must be performed before removing the element from the underlying <see cref="T:System.Collections.ArrayList" />.</span></span> <span data-ttu-id="896fc-236">通过定义此方法，实施者可以向继承的方法添加功能，而无需重写所有其他方法。</span><span class="sxs-lookup"><span data-stu-id="896fc-236">By defining this method, implementers can add functionality to inherited methods without having to override all other methods.</span></span>  
  
 <span data-ttu-id="896fc-237"><see cref="M:System.Collections.CollectionBase.OnRemove(System.Int32,System.Object)" /> 在标准移除行为之前调用，而在 <see cref="M:System.Collections.CollectionBase.OnRemoveComplete(System.Int32,System.Object)" /> 标准移除行为后调用。</span><span class="sxs-lookup"><span data-stu-id="896fc-237"><see cref="M:System.Collections.CollectionBase.OnRemove(System.Int32,System.Object)" /> is invoked before the standard Remove behavior, whereas <see cref="M:System.Collections.CollectionBase.OnRemoveComplete(System.Int32,System.Object)" /> is invoked after the standard Remove behavior.</span></span>  
  
<span data-ttu-id="896fc-238">例如，实施者可以通过在中总是引发异常来阻止删除元素 <see cref="M:System.Collections.CollectionBase.OnRemove(System.Int32,System.Object)" /> 。</span><span class="sxs-lookup"><span data-stu-id="896fc-238">For example, implementers can prevent removal of elements by always throwing an exception in <see cref="M:System.Collections.CollectionBase.OnRemove(System.Int32,System.Object)" />.</span></span>  
  
 <span data-ttu-id="896fc-239"><see cref="M:System.Collections.CollectionBase.OnValidate(System.Object)" /> 在此方法之前调用。</span><span class="sxs-lookup"><span data-stu-id="896fc-239"><see cref="M:System.Collections.CollectionBase.OnValidate(System.Object)" /> is called prior to this method.</span></span></para></block>
        <altmember cref="M:System.Collections.CollectionBase.OnRemoveComplete(System.Int32,System.Object)" />
        <altmember cref="M:System.Collections.CollectionBase.OnClear" />
      </Docs>
    </Member>
    <Member MemberName="OnRemoveComplete">
      <MemberSignature Language="C#" Value="protected virtual void OnRemoveComplete (int index, object value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRemoveComplete(int32 index, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.CollectionBase.OnRemoveComplete(System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnRemoveComplete (index As Integer, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnRemoveComplete(int index, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member OnRemoveComplete : int * obj -&gt; unit&#xA;override this.OnRemoveComplete : int * obj -&gt; unit" Usage="collectionBase.OnRemoveComplete (index, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="896fc-240">从零开始的索引，可在该位置找到 <paramref name="value" />。</span><span class="sxs-lookup"><span data-stu-id="896fc-240">The zero-based index at which <paramref name="value" /> can be found.</span></span></param>
        <param name="value"><span data-ttu-id="896fc-241">要从 <paramref name="index" /> 移除的元素的值。</span><span class="sxs-lookup"><span data-stu-id="896fc-241">The value of the element to remove from <paramref name="index" />.</span></span></param>
        <summary><span data-ttu-id="896fc-242">在从 <see cref="T:System.Collections.CollectionBase" /> 实例中移除元素之后执行其他自定义进程。</span><span class="sxs-lookup"><span data-stu-id="896fc-242">Performs additional custom processes after removing an element from the <see cref="T:System.Collections.CollectionBase" /> instance.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="896fc-243">此方法的默认实现旨在由派生类重写，以在删除指定元素后执行一些操作。</span><span class="sxs-lookup"><span data-stu-id="896fc-243">The default implementation of this method is intended to be overridden by a derived class to perform some action after the specified element is removed.</span></span>  
  
 <span data-ttu-id="896fc-244">On \* 方法仅在由属性返回的实例上调用 <xref:System.Collections.CollectionBase.List%2A> ，而不是在由属性返回的实例上调用 <xref:System.Collections.CollectionBase.InnerList%2A> 。</span><span class="sxs-lookup"><span data-stu-id="896fc-244">The On\* methods are invoked only on the instance returned by the <xref:System.Collections.CollectionBase.List%2A> property, but not on the instance returned by the <xref:System.Collections.CollectionBase.InnerList%2A> property.</span></span>  
  
 <span data-ttu-id="896fc-245">如果发生以下情况之一，则集合恢复为其以前的状态：</span><span class="sxs-lookup"><span data-stu-id="896fc-245">The collection reverts back to its previous state if one of the following occurs:</span></span>  
  
-   <span data-ttu-id="896fc-246">进程失败。</span><span class="sxs-lookup"><span data-stu-id="896fc-246">The process fails.</span></span>  
  
-   <span data-ttu-id="896fc-247">重写此方法以引发异常。</span><span class="sxs-lookup"><span data-stu-id="896fc-247">This method is overridden to throw an exception.</span></span>  
  
 <span data-ttu-id="896fc-248">此方法的默认实现是一种 `O(1)` 操作。</span><span class="sxs-lookup"><span data-stu-id="896fc-248">The default implementation of this method is an `O(1)` operation.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="896fc-249">此方法允许实现者定义从基础中删除元素后必须执行的进程 <see cref="T:System.Collections.ArrayList" /> 。</span><span class="sxs-lookup"><span data-stu-id="896fc-249">This method allows implementers to define processes that must be performed after removing the element from the underlying <see cref="T:System.Collections.ArrayList" />.</span></span> <span data-ttu-id="896fc-250">通过定义此方法，实施者可以向继承的方法添加功能，而无需重写所有其他方法。</span><span class="sxs-lookup"><span data-stu-id="896fc-250">By defining this method, implementers can add functionality to inherited methods without having to override all other methods.</span></span>  
  
 <span data-ttu-id="896fc-251"><see cref="M:System.Collections.CollectionBase.OnRemove(System.Int32,System.Object)" /> 在标准移除行为之前调用，而在 <see cref="M:System.Collections.CollectionBase.OnRemoveComplete(System.Int32,System.Object)" /> 标准移除行为后调用。</span><span class="sxs-lookup"><span data-stu-id="896fc-251"><see cref="M:System.Collections.CollectionBase.OnRemove(System.Int32,System.Object)" /> is invoked before the standard Remove behavior, whereas <see cref="M:System.Collections.CollectionBase.OnRemoveComplete(System.Int32,System.Object)" /> is invoked after the standard Remove behavior.</span></span></para></block>
        <altmember cref="M:System.Collections.CollectionBase.OnRemove(System.Int32,System.Object)" />
        <altmember cref="M:System.Collections.CollectionBase.OnClearComplete" />
      </Docs>
    </Member>
    <Member MemberName="OnSet">
      <MemberSignature Language="C#" Value="protected virtual void OnSet (int index, object oldValue, object newValue);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnSet(int32 index, object oldValue, object newValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.CollectionBase.OnSet(System.Int32,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnSet (index As Integer, oldValue As Object, newValue As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnSet(int index, System::Object ^ oldValue, System::Object ^ newValue);" />
      <MemberSignature Language="F#" Value="abstract member OnSet : int * obj * obj -&gt; unit&#xA;override this.OnSet : int * obj * obj -&gt; unit" Usage="collectionBase.OnSet (index, oldValue, newValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="oldValue" Type="System.Object" />
        <Parameter Name="newValue" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="896fc-252">从零开始的索引，可在该位置找到 <paramref name="oldValue" />。</span><span class="sxs-lookup"><span data-stu-id="896fc-252">The zero-based index at which <paramref name="oldValue" /> can be found.</span></span></param>
        <param name="oldValue"><span data-ttu-id="896fc-253">要用 <paramref name="newValue" /> 替换的值。</span><span class="sxs-lookup"><span data-stu-id="896fc-253">The value to replace with <paramref name="newValue" />.</span></span></param>
        <param name="newValue"><span data-ttu-id="896fc-254"><paramref name="index" /> 处的元素的新值。</span><span class="sxs-lookup"><span data-stu-id="896fc-254">The new value of the element at <paramref name="index" />.</span></span></param>
        <summary><span data-ttu-id="896fc-255">当在 <see cref="T:System.Collections.CollectionBase" /> 实例中设置值之前执行其他自定义进程。</span><span class="sxs-lookup"><span data-stu-id="896fc-255">Performs additional custom processes before setting a value in the <see cref="T:System.Collections.CollectionBase" /> instance.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="896fc-256">此方法的默认实现旨在由派生类重写，以在设置指定元素之前执行某些操作。</span><span class="sxs-lookup"><span data-stu-id="896fc-256">The default implementation of this method is intended to be overridden by a derived class to perform some action before the specified element is set.</span></span>  
  
 <span data-ttu-id="896fc-257">On \* 方法仅在由属性返回的实例上调用 <xref:System.Collections.CollectionBase.List%2A> ，而不是在由属性返回的实例上调用 <xref:System.Collections.CollectionBase.InnerList%2A> 。</span><span class="sxs-lookup"><span data-stu-id="896fc-257">The On\* methods are invoked only on the instance returned by the <xref:System.Collections.CollectionBase.List%2A> property, but not on the instance returned by the <xref:System.Collections.CollectionBase.InnerList%2A> property.</span></span>  
  
 <span data-ttu-id="896fc-258">如果进程失败，则集合恢复为其以前的状态。</span><span class="sxs-lookup"><span data-stu-id="896fc-258">If the process fails, the collection reverts back to its previous state.</span></span>  
  
 <span data-ttu-id="896fc-259">此方法的默认实现是一种 `O(1)` 操作。</span><span class="sxs-lookup"><span data-stu-id="896fc-259">The default implementation of this method is an `O(1)` operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="896fc-260">下面的代码示例实现 <xref:System.Collections.CollectionBase> 类，并使用该实现创建对象的集合 <xref:System.Int16> 。</span><span class="sxs-lookup"><span data-stu-id="896fc-260">The following code example implements the <xref:System.Collections.CollectionBase> class and uses that implementation to create a collection of <xref:System.Int16> objects.</span></span>  
  
 [!code-cpp[System.Collections.CollectionBase#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.CollectionBase/CPP/collectionbase.cpp#1)]
 [!code-csharp[System.Collections.CollectionBase#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.CollectionBase/CS/collectionbase.cs#1)]
 [!code-vb[System.Collections.CollectionBase#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.CollectionBase/VB/collectionbase.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="896fc-261">此方法允许实现程序定义在基础中设置指定元素之前必须执行的进程 <see cref="T:System.Collections.ArrayList" /> 。</span><span class="sxs-lookup"><span data-stu-id="896fc-261">This method allows implementers to define processes that must be performed before setting the specified element in the underlying <see cref="T:System.Collections.ArrayList" />.</span></span> <span data-ttu-id="896fc-262">通过定义此方法，实施者可以向继承的方法添加功能，而无需重写所有其他方法。</span><span class="sxs-lookup"><span data-stu-id="896fc-262">By defining this method, implementers can add functionality to inherited methods without having to override all other methods.</span></span>  
  
 <span data-ttu-id="896fc-263"><see cref="M:System.Collections.CollectionBase.OnSet(System.Int32,System.Object,System.Object)" /> 在标准集行为之前调用，而在 <see cref="M:System.Collections.CollectionBase.OnSetComplete(System.Int32,System.Object,System.Object)" /> 标准集行为后调用。</span><span class="sxs-lookup"><span data-stu-id="896fc-263"><see cref="M:System.Collections.CollectionBase.OnSet(System.Int32,System.Object,System.Object)" /> is invoked before the standard Set behavior, whereas <see cref="M:System.Collections.CollectionBase.OnSetComplete(System.Int32,System.Object,System.Object)" /> is invoked after the standard Set behavior.</span></span>  
  
<span data-ttu-id="896fc-264">例如，实施者可以通过在内部执行检查来限制可以覆盖哪些值 <see cref="M:System.Collections.CollectionBase.OnSet(System.Int32,System.Object,System.Object)" /> 。</span><span class="sxs-lookup"><span data-stu-id="896fc-264">For example, implementers can restrict which values can be overwritten by performing a check inside <see cref="M:System.Collections.CollectionBase.OnSet(System.Int32,System.Object,System.Object)" />.</span></span>  
  
 <span data-ttu-id="896fc-265"><see cref="M:System.Collections.CollectionBase.OnValidate(System.Object)" /> 在此方法之前调用。</span><span class="sxs-lookup"><span data-stu-id="896fc-265"><see cref="M:System.Collections.CollectionBase.OnValidate(System.Object)" /> is called prior to this method.</span></span></para></block>
        <altmember cref="M:System.Collections.CollectionBase.OnSetComplete(System.Int32,System.Object,System.Object)" />
        <altmember cref="M:System.Collections.CollectionBase.OnInsert(System.Int32,System.Object)" />
        <altmember cref="M:System.Collections.CollectionBase.OnValidate(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="OnSetComplete">
      <MemberSignature Language="C#" Value="protected virtual void OnSetComplete (int index, object oldValue, object newValue);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnSetComplete(int32 index, object oldValue, object newValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.CollectionBase.OnSetComplete(System.Int32,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnSetComplete (index As Integer, oldValue As Object, newValue As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnSetComplete(int index, System::Object ^ oldValue, System::Object ^ newValue);" />
      <MemberSignature Language="F#" Value="abstract member OnSetComplete : int * obj * obj -&gt; unit&#xA;override this.OnSetComplete : int * obj * obj -&gt; unit" Usage="collectionBase.OnSetComplete (index, oldValue, newValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="oldValue" Type="System.Object" />
        <Parameter Name="newValue" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="896fc-266">从零开始的索引，可在该位置找到 <paramref name="oldValue" />。</span><span class="sxs-lookup"><span data-stu-id="896fc-266">The zero-based index at which <paramref name="oldValue" /> can be found.</span></span></param>
        <param name="oldValue"><span data-ttu-id="896fc-267">要用 <paramref name="newValue" /> 替换的值。</span><span class="sxs-lookup"><span data-stu-id="896fc-267">The value to replace with <paramref name="newValue" />.</span></span></param>
        <param name="newValue"><span data-ttu-id="896fc-268"><paramref name="index" /> 处的元素的新值。</span><span class="sxs-lookup"><span data-stu-id="896fc-268">The new value of the element at <paramref name="index" />.</span></span></param>
        <summary><span data-ttu-id="896fc-269">当在 <see cref="T:System.Collections.CollectionBase" /> 实例中设置值后执行其他自定义进程。</span><span class="sxs-lookup"><span data-stu-id="896fc-269">Performs additional custom processes after setting a value in the <see cref="T:System.Collections.CollectionBase" /> instance.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="896fc-270">此方法的默认实现旨在由派生类重写，以在设置指定的元素后执行一些操作。</span><span class="sxs-lookup"><span data-stu-id="896fc-270">The default implementation of this method is intended to be overridden by a derived class to perform some action after the specified element is set.</span></span>  
  
 <span data-ttu-id="896fc-271">On \* 方法仅在由属性返回的实例上调用 <xref:System.Collections.CollectionBase.List%2A> ，而不是在由属性返回的实例上调用 <xref:System.Collections.CollectionBase.InnerList%2A> 。</span><span class="sxs-lookup"><span data-stu-id="896fc-271">The On\* methods are invoked only on the instance returned by the <xref:System.Collections.CollectionBase.List%2A> property, but not on the instance returned by the <xref:System.Collections.CollectionBase.InnerList%2A> property.</span></span>  
  
 <span data-ttu-id="896fc-272">如果发生以下情况之一，则集合恢复为其以前的状态：</span><span class="sxs-lookup"><span data-stu-id="896fc-272">The collection reverts back to its previous state if one of the following occurs:</span></span>  
  
-   <span data-ttu-id="896fc-273">进程失败。</span><span class="sxs-lookup"><span data-stu-id="896fc-273">The process fails.</span></span>  
  
-   <span data-ttu-id="896fc-274">重写此方法以引发异常。</span><span class="sxs-lookup"><span data-stu-id="896fc-274">This method is overridden to throw an exception.</span></span>  
  
 <span data-ttu-id="896fc-275">此方法的默认实现是一种 `O(1)` 操作。</span><span class="sxs-lookup"><span data-stu-id="896fc-275">The default implementation of this method is an `O(1)` operation.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="896fc-276">此方法允许实现程序定义在基础中设置指定元素后必须执行的进程 <see cref="T:System.Collections.ArrayList" /> 。</span><span class="sxs-lookup"><span data-stu-id="896fc-276">This method allows implementers to define processes that must be performed after setting the specified element in the underlying <see cref="T:System.Collections.ArrayList" />.</span></span> <span data-ttu-id="896fc-277">通过定义此方法，实施者可以向继承的方法添加功能，而无需重写所有其他方法。</span><span class="sxs-lookup"><span data-stu-id="896fc-277">By defining this method, implementers can add functionality to inherited methods without having to override all other methods.</span></span>  
  
 <span data-ttu-id="896fc-278"><see cref="M:System.Collections.CollectionBase.OnSet(System.Int32,System.Object,System.Object)" /> 在标准集行为之前调用，而在 <see cref="M:System.Collections.CollectionBase.OnSetComplete(System.Int32,System.Object,System.Object)" /> 标准集行为后调用。</span><span class="sxs-lookup"><span data-stu-id="896fc-278"><see cref="M:System.Collections.CollectionBase.OnSet(System.Int32,System.Object,System.Object)" /> is invoked before the standard Set behavior, whereas <see cref="M:System.Collections.CollectionBase.OnSetComplete(System.Int32,System.Object,System.Object)" /> is invoked after the standard Set behavior.</span></span></para></block>
        <altmember cref="M:System.Collections.CollectionBase.OnSet(System.Int32,System.Object,System.Object)" />
        <altmember cref="M:System.Collections.CollectionBase.OnInsertComplete(System.Int32,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="OnValidate">
      <MemberSignature Language="C#" Value="protected virtual void OnValidate (object value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnValidate(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.CollectionBase.OnValidate(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnValidate (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnValidate(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member OnValidate : obj -&gt; unit&#xA;override this.OnValidate : obj -&gt; unit" Usage="collectionBase.OnValidate value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="896fc-279">要验证的对象。</span><span class="sxs-lookup"><span data-stu-id="896fc-279">The object to validate.</span></span></param>
        <summary><span data-ttu-id="896fc-280">当验证值时执行其他自定义进程。</span><span class="sxs-lookup"><span data-stu-id="896fc-280">Performs additional custom processes when validating a value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="896fc-281">此方法的默认实现确定是否 `value` 为，如果是，则会 `null` 引发 <xref:System.ArgumentNullException> 。</span><span class="sxs-lookup"><span data-stu-id="896fc-281">The default implementation of this method determines whether `value` is `null`, and, if so, throws <xref:System.ArgumentNullException>.</span></span> <span data-ttu-id="896fc-282">它旨在由派生类重写，以便在验证指定的元素时执行其他操作。</span><span class="sxs-lookup"><span data-stu-id="896fc-282">It is intended to be overridden by a derived class to perform additional action when the specified element is validated.</span></span>  
  
 <span data-ttu-id="896fc-283">On \* 方法仅在由属性返回的实例上调用 <xref:System.Collections.CollectionBase.List%2A> ，而不是在由属性返回的实例上调用 <xref:System.Collections.CollectionBase.InnerList%2A> 。</span><span class="sxs-lookup"><span data-stu-id="896fc-283">The On\* methods are invoked only on the instance returned by the <xref:System.Collections.CollectionBase.List%2A> property, but not on the instance returned by the <xref:System.Collections.CollectionBase.InnerList%2A> property.</span></span>  
  
 <span data-ttu-id="896fc-284">此方法的默认实现是一种 `O(1)` 操作。</span><span class="sxs-lookup"><span data-stu-id="896fc-284">The default implementation of this method is an `O(1)` operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="896fc-285">下面的代码示例实现 <xref:System.Collections.CollectionBase> 类，并使用该实现创建对象的集合 <xref:System.Int16> 。</span><span class="sxs-lookup"><span data-stu-id="896fc-285">The following code example implements the <xref:System.Collections.CollectionBase> class and uses that implementation to create a collection of <xref:System.Int16> objects.</span></span>  
  
 [!code-cpp[System.Collections.CollectionBase#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.CollectionBase/CPP/collectionbase.cpp#1)]
 [!code-csharp[System.Collections.CollectionBase#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.CollectionBase/CS/collectionbase.cs#1)]
 [!code-vb[System.Collections.CollectionBase#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.CollectionBase/VB/collectionbase.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="896fc-286"><paramref name="value" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="896fc-286"><paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <block subset="none" type="overrides"><para><span data-ttu-id="896fc-287">此方法允许实现程序定义执行基础的标准行为时必须执行的进程 <see cref="T:System.Collections.ArrayList" /> 。</span><span class="sxs-lookup"><span data-stu-id="896fc-287">This method allows implementers to define processes that must be performed when executing the standard behavior of the underlying <see cref="T:System.Collections.ArrayList" />.</span></span> <span data-ttu-id="896fc-288">通过定义此方法，实施者可以向继承的方法添加功能，而无需重写所有其他方法。</span><span class="sxs-lookup"><span data-stu-id="896fc-288">By defining this method, implementers can add functionality to inherited methods without having to override all other methods.</span></span>  
  
 <span data-ttu-id="896fc-289"><see cref="M:System.Collections.CollectionBase.OnValidate(System.Object)" /> 可用于对集合中接受的对象类型施加限制。</span><span class="sxs-lookup"><span data-stu-id="896fc-289"><see cref="M:System.Collections.CollectionBase.OnValidate(System.Object)" /> can be used to impose restrictions on the type of objects that are accepted into the collection.</span></span> <span data-ttu-id="896fc-290">默认实现禁止在 <see langword="null" /> 基础上添加或移除 <see cref="T:System.Collections.ArrayList" /> 。</span><span class="sxs-lookup"><span data-stu-id="896fc-290">The default implementation prevents <see langword="null" /> from being added to or removed from the underlying <see cref="T:System.Collections.ArrayList" />.</span></span>  
  
 <span data-ttu-id="896fc-291"><see cref="M:System.Collections.CollectionBase.OnValidate(System.Object)" /> 在 <see cref="M:System.Collections.CollectionBase.OnInsert(System.Int32,System.Object)" /> 、和之前调用 <see cref="M:System.Collections.CollectionBase.OnRemove(System.Int32,System.Object)" /> <see cref="M:System.Collections.CollectionBase.OnSet(System.Int32,System.Object,System.Object)" /> 。</span><span class="sxs-lookup"><span data-stu-id="896fc-291"><see cref="M:System.Collections.CollectionBase.OnValidate(System.Object)" /> is called prior to <see cref="M:System.Collections.CollectionBase.OnInsert(System.Int32,System.Object)" />, <see cref="M:System.Collections.CollectionBase.OnRemove(System.Int32,System.Object)" />, and <see cref="M:System.Collections.CollectionBase.OnSet(System.Int32,System.Object,System.Object)" />.</span></span></para></block>
        <altmember cref="M:System.Collections.CollectionBase.OnSet(System.Int32,System.Object,System.Object)" />
        <altmember cref="M:System.Collections.CollectionBase.OnInsert(System.Int32,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="RemoveAt">
      <MemberSignature Language="C#" Value="public void RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.CollectionBase.RemoveAt(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveAt (index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RemoveAt(int index);" />
      <MemberSignature Language="F#" Value="abstract member RemoveAt : int -&gt; unit&#xA;override this.RemoveAt : int -&gt; unit" Usage="collectionBase.RemoveAt index" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.RemoveAt(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="896fc-292">要移除的元素的从零开始的索引。</span><span class="sxs-lookup"><span data-stu-id="896fc-292">The zero-based index of the element to remove.</span></span></param>
        <summary><span data-ttu-id="896fc-293">移除 <see cref="T:System.Collections.CollectionBase" /> 实例的指定索引处的元素。</span><span class="sxs-lookup"><span data-stu-id="896fc-293">Removes the element at the specified index of the <see cref="T:System.Collections.CollectionBase" /> instance.</span></span> <span data-ttu-id="896fc-294">此方法不可重写。</span><span class="sxs-lookup"><span data-stu-id="896fc-294">This method is not overridable.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="896fc-295">在由连续的元素组成的集合（如列表）中，已移除元素下面的元素将上移以占据空出的位置。</span><span class="sxs-lookup"><span data-stu-id="896fc-295">In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot.</span></span> <span data-ttu-id="896fc-296">如果集合具有索引，则移动的元素的索引也将更新。</span><span class="sxs-lookup"><span data-stu-id="896fc-296">If the collection is indexed, the indexes of the elements that are moved are also updated.</span></span> <span data-ttu-id="896fc-297">此行为不适用于元素按概念划分为不同存储桶的集合，如哈希表。</span><span class="sxs-lookup"><span data-stu-id="896fc-297">This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.</span></span>  
  
 <span data-ttu-id="896fc-298">此方法是一个 `O(n)` 操作，其中 `n` 是 <xref:System.Collections.CollectionBase.Count%2A> 。</span><span class="sxs-lookup"><span data-stu-id="896fc-298">This method is an `O(n)` operation, where `n` is <xref:System.Collections.CollectionBase.Count%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="896fc-299"><paramref name="index" /> 小于零。</span><span class="sxs-lookup"><span data-stu-id="896fc-299"><paramref name="index" /> is less than zero.</span></span>  
  
<span data-ttu-id="896fc-300">- 或 -</span><span class="sxs-lookup"><span data-stu-id="896fc-300">-or-</span></span> 
 <span data-ttu-id="896fc-301"><paramref name="index" /> 等于或大于 <see cref="P:System.Collections.CollectionBase.Count" />。</span><span class="sxs-lookup"><span data-stu-id="896fc-301"><paramref name="index" /> is equal to or greater than <see cref="P:System.Collections.CollectionBase.Count" />.</span></span></exception>
        <block subset="none" type="overrides"><para><span data-ttu-id="896fc-302">此方法调用 <see cref="M:System.Collections.CollectionBase.OnValidate(System.Object)" /> 、 <see cref="M:System.Collections.CollectionBase.OnRemove(System.Int32,System.Object)" /> 和 <see cref="M:System.Collections.CollectionBase.OnRemoveComplete(System.Int32,System.Object)" /> 。</span><span class="sxs-lookup"><span data-stu-id="896fc-302">This method calls <see cref="M:System.Collections.CollectionBase.OnValidate(System.Object)" />, <see cref="M:System.Collections.CollectionBase.OnRemove(System.Int32,System.Object)" />, and <see cref="M:System.Collections.CollectionBase.OnRemoveComplete(System.Int32,System.Object)" />.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.CopyTo">
      <MemberSignature Language="C#" Value="void ICollection.CopyTo (Array array, int index);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.ICollection.CopyTo(class System.Array array, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.CollectionBase.System#Collections#ICollection#CopyTo(System.Array,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Sub CopyTo (array As Array, index As Integer) Implements ICollection.CopyTo" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.ICollection.CopyTo(Array ^ array, int index) = System::Collections::ICollection::CopyTo;" />
      <MemberSignature Language="F#" Value="abstract member System.Collections.ICollection.CopyTo : Array * int -&gt; unit&#xA;override this.System.Collections.ICollection.CopyTo : Array * int -&gt; unit" Usage="collectionBase.System.Collections.ICollection.CopyTo (array, index)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="896fc-303">一维 <see cref="T:System.Array" />，它是从 <see cref="T:System.Collections.CollectionBase" /> 复制的元素的目标。</span><span class="sxs-lookup"><span data-stu-id="896fc-303">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.CollectionBase" />.</span></span> <span data-ttu-id="896fc-304"><see cref="T:System.Array" /> 必须具有从零开始的索引。</span><span class="sxs-lookup"><span data-stu-id="896fc-304">The <see cref="T:System.Array" /> must have zero-based indexing.</span></span></param>
        <param name="index"><span data-ttu-id="896fc-305"><paramref name="array" /> 中从零开始的索引，从此处开始复制。</span><span class="sxs-lookup"><span data-stu-id="896fc-305">The zero-based index in <paramref name="array" /> at which copying begins.</span></span></param>
        <summary><span data-ttu-id="896fc-306">从目标数组的指定索引处开始将整个 <see cref="T:System.Collections.CollectionBase" /> 复制到兼容的一维 <see cref="T:System.Array" />。</span><span class="sxs-lookup"><span data-stu-id="896fc-306">Copies the entire <see cref="T:System.Collections.CollectionBase" /> to a compatible one-dimensional <see cref="T:System.Array" />, starting at the specified index of the target array.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="896fc-307">指定的数组必须是兼容的类型。</span><span class="sxs-lookup"><span data-stu-id="896fc-307">The specified array must be of a compatible type.</span></span>  
  
 <span data-ttu-id="896fc-308">此方法使用 <xref:System.Array.Copy%2A?displayProperty=nameWithType> 复制元素。</span><span class="sxs-lookup"><span data-stu-id="896fc-308">This method uses <xref:System.Array.Copy%2A?displayProperty=nameWithType> to copy the elements.</span></span>  
  
 <span data-ttu-id="896fc-309">此方法是一个 `O(n)` 操作，其中 `n` 是 <xref:System.Collections.CollectionBase.Count%2A> 。</span><span class="sxs-lookup"><span data-stu-id="896fc-309">This method is an `O(n)` operation, where `n` is <xref:System.Collections.CollectionBase.Count%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="896fc-310"><paramref name="array" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="896fc-310"><paramref name="array" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="896fc-311"><paramref name="index" /> 小于零。</span><span class="sxs-lookup"><span data-stu-id="896fc-311"><paramref name="index" /> is less than zero.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="896fc-312"><paramref name="array" /> 是多维的。</span><span class="sxs-lookup"><span data-stu-id="896fc-312"><paramref name="array" /> is multidimensional.</span></span>  
  
<span data-ttu-id="896fc-313">- 或 -</span><span class="sxs-lookup"><span data-stu-id="896fc-313">-or-</span></span> 
<span data-ttu-id="896fc-314">源 <see cref="T:System.Collections.CollectionBase" /> 中的元素个数大于从 <paramref name="index" /> 到目标 <paramref name="array" /> 末尾之间的可用空间。</span><span class="sxs-lookup"><span data-stu-id="896fc-314">The number of elements in the source <see cref="T:System.Collections.CollectionBase" /> is greater than the available space from <paramref name="index" /> to the end of the destination <paramref name="array" />.</span></span></exception>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="896fc-315">无法自动将源 <see cref="T:System.Collections.CollectionBase" /> 的类型转换为目标 <paramref name="array" /> 的类型。</span><span class="sxs-lookup"><span data-stu-id="896fc-315">The type of the source <see cref="T:System.Collections.CollectionBase" /> cannot be cast automatically to the type of the destination <paramref name="array" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.IsSynchronized">
      <MemberSignature Language="C#" Value="bool System.Collections.ICollection.IsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.ICollection.IsSynchronized" />
      <MemberSignature Language="DocId" Value="P:System.Collections.CollectionBase.System#Collections#ICollection#IsSynchronized" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsSynchronized As Boolean Implements ICollection.IsSynchronized" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Collections::ICollection::IsSynchronized { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.System.Collections.ICollection.IsSynchronized : bool" Usage="System.Collections.ICollection.IsSynchronized" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.IsSynchronized</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="896fc-316">获取一个值，该值指示是否同步对 <see cref="T:System.Collections.CollectionBase" /> 的访问（线程安全）。</span><span class="sxs-lookup"><span data-stu-id="896fc-316">Gets a value indicating whether access to the <see cref="T:System.Collections.CollectionBase" /> is synchronized (thread safe).</span></span></summary>
        <value><span data-ttu-id="896fc-317">如果对 <see langword="true" /> 的访问是同步的（线程安全），则为 <see cref="T:System.Collections.CollectionBase" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="896fc-317"><see langword="true" /> if access to the <see cref="T:System.Collections.CollectionBase" /> is synchronized (thread safe); otherwise, <see langword="false" />.</span></span> <span data-ttu-id="896fc-318">默认值为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="896fc-318">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="896fc-319"><xref:System.Collections.CollectionBase>实例未同步。</span><span class="sxs-lookup"><span data-stu-id="896fc-319">A <xref:System.Collections.CollectionBase> instance is not synchronized.</span></span> <span data-ttu-id="896fc-320">派生类可以使用属性提供的同步版本 <xref:System.Collections.CollectionBase> <xref:System.Collections.ICollection.SyncRoot%2A> 。</span><span class="sxs-lookup"><span data-stu-id="896fc-320">Derived classes can provide a synchronized version of the <xref:System.Collections.CollectionBase> using the <xref:System.Collections.ICollection.SyncRoot%2A> property.</span></span>  
  
 <span data-ttu-id="896fc-321">枚举集合本质上不是线程安全的过程。</span><span class="sxs-lookup"><span data-stu-id="896fc-321">Enumerating through a collection is intrinsically not a thread safe procedure.</span></span> <span data-ttu-id="896fc-322">即使某个集合已同步，其他线程仍可以修改该集合，这会导致枚举数引发异常。</span><span class="sxs-lookup"><span data-stu-id="896fc-322">Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</span></span> <span data-ttu-id="896fc-323">若要确保枚举过程中的线程安全性，可以在整个枚举期间锁定集合，或者捕获由其他线程进行的更改所导致的异常。</span><span class="sxs-lookup"><span data-stu-id="896fc-323">To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</span></span>  
  
 <span data-ttu-id="896fc-324">下面的代码示例演示如何使用在 <xref:System.Collections.ICollection.SyncRoot%2A> 整个枚举过程中锁定集合：</span><span class="sxs-lookup"><span data-stu-id="896fc-324">The following code example shows how to lock the collection using the <xref:System.Collections.ICollection.SyncRoot%2A> during the entire enumeration:</span></span>  
  
 [!code-cpp[System.Collections.CollectionBase#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.CollectionBase/CPP/remarks.cpp#2)]
 [!code-csharp[System.Collections.CollectionBase#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.CollectionBase/CS/remarks.cs#2)]
 [!code-vb[System.Collections.CollectionBase#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.CollectionBase/VB/remarks.vb#2)]  
  
 <span data-ttu-id="896fc-325">检索此属性的值是一个 `O(1)` 运算。</span><span class="sxs-lookup"><span data-stu-id="896fc-325">Retrieving the value of this property is an `O(1)` operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.ICollection.SyncRoot" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.SyncRoot">
      <MemberSignature Language="C#" Value="object System.Collections.ICollection.SyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.ICollection.SyncRoot" />
      <MemberSignature Language="DocId" Value="P:System.Collections.CollectionBase.System#Collections#ICollection#SyncRoot" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property SyncRoot As Object Implements ICollection.SyncRoot" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System::Collections::ICollection::SyncRoot { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.System.Collections.ICollection.SyncRoot : obj" Usage="System.Collections.ICollection.SyncRoot" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.SyncRoot</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="896fc-326">获取可用于同步对 <see cref="T:System.Collections.CollectionBase" /> 的访问的对象。</span><span class="sxs-lookup"><span data-stu-id="896fc-326">Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.CollectionBase" />.</span></span></summary>
        <value><span data-ttu-id="896fc-327">用于同步对 <see cref="T:System.Collections.CollectionBase" /> 的访问的对象。</span><span class="sxs-lookup"><span data-stu-id="896fc-327">An object that can be used to synchronize access to the <see cref="T:System.Collections.CollectionBase" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="896fc-328">派生类可以使用属性提供自己的同步版本 <xref:System.Collections.CollectionBase> <xref:System.Collections.ICollection.SyncRoot%2A> 。</span><span class="sxs-lookup"><span data-stu-id="896fc-328">Derived classes can provide their own synchronized version of the <xref:System.Collections.CollectionBase> using the <xref:System.Collections.ICollection.SyncRoot%2A> property.</span></span> <span data-ttu-id="896fc-329">同步代码必须对的执行操作 <xref:System.Collections.ICollection.SyncRoot%2A> <xref:System.Collections.CollectionBase> ，而不是直接在上执行操作 <xref:System.Collections.CollectionBase> 。</span><span class="sxs-lookup"><span data-stu-id="896fc-329">The synchronizing code must perform operations on the <xref:System.Collections.ICollection.SyncRoot%2A> of the <xref:System.Collections.CollectionBase>, not directly on the <xref:System.Collections.CollectionBase>.</span></span> <span data-ttu-id="896fc-330">这样可确保对从其他对象派生的集合正确地执行操作。</span><span class="sxs-lookup"><span data-stu-id="896fc-330">This ensures proper operation of collections that are derived from other objects.</span></span> <span data-ttu-id="896fc-331">具体而言，它与可能同时修改对象的其他线程保持正确的同步 <xref:System.Collections.CollectionBase> 。</span><span class="sxs-lookup"><span data-stu-id="896fc-331">Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the <xref:System.Collections.CollectionBase> object.</span></span>  
  
 <span data-ttu-id="896fc-332">枚举集合本质上不是线程安全的过程。</span><span class="sxs-lookup"><span data-stu-id="896fc-332">Enumerating through a collection is intrinsically not a thread safe procedure.</span></span> <span data-ttu-id="896fc-333">即使某个集合已同步，其他线程仍可以修改该集合，这会导致枚举数引发异常。</span><span class="sxs-lookup"><span data-stu-id="896fc-333">Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</span></span> <span data-ttu-id="896fc-334">若要确保枚举过程中的线程安全性，可以在整个枚举期间锁定集合，或者捕获由其他线程进行的更改所导致的异常。</span><span class="sxs-lookup"><span data-stu-id="896fc-334">To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</span></span>  
  
 <span data-ttu-id="896fc-335">下面的代码示例演示如何使用在 <xref:System.Collections.ICollection.SyncRoot%2A> 整个枚举过程中锁定集合：</span><span class="sxs-lookup"><span data-stu-id="896fc-335">The following code example shows how to lock the collection using the <xref:System.Collections.ICollection.SyncRoot%2A> during the entire enumeration:</span></span>  
  
 [!code-cpp[System.Collections.CollectionBase#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.CollectionBase/CPP/remarks.cpp#2)]
 [!code-csharp[System.Collections.CollectionBase#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.CollectionBase/CS/remarks.cs#2)]
 [!code-vb[System.Collections.CollectionBase#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.CollectionBase/VB/remarks.vb#2)]  
  
 <span data-ttu-id="896fc-336">检索此属性的值是一个 `O(1)` 运算。</span><span class="sxs-lookup"><span data-stu-id="896fc-336">Retrieving the value of this property is an `O(1)` operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.ICollection.IsSynchronized" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Add">
      <MemberSignature Language="C#" Value="int IList.Add (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IList.Add(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.CollectionBase.System#Collections#IList#Add(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function Add (value As Object) As Integer Implements IList.Add" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IList.Add(System::Object ^ value) = System::Collections::IList::Add;" />
      <MemberSignature Language="F#" Value="abstract member System.Collections.IList.Add : obj -&gt; int&#xA;override this.System.Collections.IList.Add : obj -&gt; int" Usage="collectionBase.System.Collections.IList.Add value" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Add(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="896fc-337">要添加到 <see cref="T:System.Object" /> 的结尾处的 <see cref="T:System.Collections.CollectionBase" />。</span><span class="sxs-lookup"><span data-stu-id="896fc-337">The <see cref="T:System.Object" /> to be added to the end of the <see cref="T:System.Collections.CollectionBase" />.</span></span></param>
        <summary><span data-ttu-id="896fc-338">将对象添加到 <see cref="T:System.Collections.CollectionBase" /> 的结尾处。</span><span class="sxs-lookup"><span data-stu-id="896fc-338">Adds an object to the end of the <see cref="T:System.Collections.CollectionBase" />.</span></span></summary>
        <returns><span data-ttu-id="896fc-339">已添加 <paramref name="value" /> 的 <see cref="T:System.Collections.CollectionBase" /> 索引。</span><span class="sxs-lookup"><span data-stu-id="896fc-339">The <see cref="T:System.Collections.CollectionBase" /> index at which the <paramref name="value" /> has been added.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="896fc-340">如果 <xref:System.Collections.CollectionBase.Count%2A> 已等于容量，则会自动重新分配内部数组，并将现有元素复制到新数组，然后再添加新元素，从而使列表的容量加倍。</span><span class="sxs-lookup"><span data-stu-id="896fc-340">If <xref:System.Collections.CollectionBase.Count%2A> already equals the capacity, the capacity of the list is doubled by automatically reallocating the internal array and copying the existing elements to the new array before the new element is added.</span></span>  
  
 <span data-ttu-id="896fc-341">如果 <xref:System.Collections.CollectionBase.Count%2A> 小于容量，则此方法为 `O(1)` 操作。</span><span class="sxs-lookup"><span data-stu-id="896fc-341">If <xref:System.Collections.CollectionBase.Count%2A> is less than the capacity, this method is an `O(1)` operation.</span></span> <span data-ttu-id="896fc-342">如果需要增加容量以容纳新元素，则此方法将成为一个 `O(n)` 操作，其中 `n` 为 <xref:System.Collections.CollectionBase.Count%2A> 。</span><span class="sxs-lookup"><span data-stu-id="896fc-342">If the capacity needs to be increased to accommodate the new element, this method becomes an `O(n)` operation, where `n` is <xref:System.Collections.CollectionBase.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="896fc-343">下面的代码示例实现 <xref:System.Collections.CollectionBase> 类，并使用该实现创建对象的集合 <xref:System.Int16> 。</span><span class="sxs-lookup"><span data-stu-id="896fc-343">The following code example implements the <xref:System.Collections.CollectionBase> class and uses that implementation to create a collection of <xref:System.Int16> objects.</span></span>  
  
 [!code-cpp[System.Collections.CollectionBase#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.CollectionBase/CPP/collectionbase.cpp#1)]
 [!code-csharp[System.Collections.CollectionBase#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.CollectionBase/CS/collectionbase.cs#1)]
 [!code-vb[System.Collections.CollectionBase#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.CollectionBase/VB/collectionbase.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="896fc-344"><see cref="T:System.Collections.CollectionBase" /> 为只读。</span><span class="sxs-lookup"><span data-stu-id="896fc-344">The <see cref="T:System.Collections.CollectionBase" /> is read-only.</span></span>  
  
<span data-ttu-id="896fc-345">- 或 -</span><span class="sxs-lookup"><span data-stu-id="896fc-345">-or-</span></span> 
<span data-ttu-id="896fc-346"><see cref="T:System.Collections.CollectionBase" /> 具有固定的大小。</span><span class="sxs-lookup"><span data-stu-id="896fc-346">The <see cref="T:System.Collections.CollectionBase" /> has a fixed size.</span></span></exception>
        <block subset="none" type="overrides"><para><span data-ttu-id="896fc-347">此方法调用 <see cref="M:System.Collections.CollectionBase.OnValidate(System.Object)" /> 、 <see cref="M:System.Collections.CollectionBase.OnInsert(System.Int32,System.Object)" /> 和 <see cref="M:System.Collections.CollectionBase.OnInsertComplete(System.Int32,System.Object)" /> 。</span><span class="sxs-lookup"><span data-stu-id="896fc-347">This method calls <see cref="M:System.Collections.CollectionBase.OnValidate(System.Object)" />, <see cref="M:System.Collections.CollectionBase.OnInsert(System.Int32,System.Object)" />, and <see cref="M:System.Collections.CollectionBase.OnInsertComplete(System.Int32,System.Object)" />.</span></span></para></block>
        <altmember cref="P:System.Collections.CollectionBase.Count" />
        <altmember cref="M:System.Collections.IList.Insert(System.Int32,System.Object)" />
        <altmember cref="M:System.Collections.IList.Remove(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Contains">
      <MemberSignature Language="C#" Value="bool IList.Contains (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Collections.IList.Contains(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.CollectionBase.System#Collections#IList#Contains(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function Contains (value As Object) As Boolean Implements IList.Contains" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Collections.IList.Contains(System::Object ^ value) = System::Collections::IList::Contains;" />
      <MemberSignature Language="F#" Value="abstract member System.Collections.IList.Contains : obj -&gt; bool&#xA;override this.System.Collections.IList.Contains : obj -&gt; bool" Usage="collectionBase.System.Collections.IList.Contains value" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Contains(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="896fc-348">要在 <see cref="T:System.Object" /> 中定位的 <see cref="T:System.Collections.CollectionBase" />。</span><span class="sxs-lookup"><span data-stu-id="896fc-348">The <see cref="T:System.Object" /> to locate in the <see cref="T:System.Collections.CollectionBase" />.</span></span></param>
        <summary><span data-ttu-id="896fc-349">确定 <see cref="T:System.Collections.CollectionBase" /> 是否包含特定元素。</span><span class="sxs-lookup"><span data-stu-id="896fc-349">Determines whether the <see cref="T:System.Collections.CollectionBase" /> contains a specific element.</span></span></summary>
        <returns><span data-ttu-id="896fc-350">如果 <see cref="T:System.Collections.CollectionBase" /> 包含指定的 <paramref name="value" />，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="896fc-350"><see langword="true" /> if the <see cref="T:System.Collections.CollectionBase" /> contains the specified <paramref name="value" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="896fc-351">此方法执行线性搜索;因此，此方法是一个 `O(n)` 操作，其中 `n` 是 <xref:System.Collections.CollectionBase.Count%2A> 。</span><span class="sxs-lookup"><span data-stu-id="896fc-351">This method performs a linear search; therefore, this method is an `O(n)` operation, where `n` is <xref:System.Collections.CollectionBase.Count%2A>.</span></span>  
  
 <span data-ttu-id="896fc-352">此方法通过调用来确定相等性 <xref:System.Object.Equals%2A?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="896fc-352">This method determines equality by calling <xref:System.Object.Equals%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="896fc-353">从 .NET Framework 2.0 开始，此方法使用集合的对象的 <xref:System.Object.Equals%2A> 和 <xref:System.IComparable.CompareTo%2A> 方法 `item` 来确定是否 `item` 存在。</span><span class="sxs-lookup"><span data-stu-id="896fc-353">Starting with the .NET Framework 2.0, this method uses the collection's objects' <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods on `item` to determine whether `item` exists.</span></span> <span data-ttu-id="896fc-354">在 .NET Framework 的早期版本中，此决定是通过对 <xref:System.Object.Equals%2A> <xref:System.IComparable.CompareTo%2A> `item` 集合中的对象使用参数的和方法进行的。</span><span class="sxs-lookup"><span data-stu-id="896fc-354">In the earlier versions of the .NET Framework, this determination was made by using the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the `item` parameter on the objects in the collection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="896fc-355">下面的代码示例实现 <xref:System.Collections.CollectionBase> 类，并使用该实现创建对象的集合 <xref:System.Int16> 。</span><span class="sxs-lookup"><span data-stu-id="896fc-355">The following code example implements the <xref:System.Collections.CollectionBase> class and uses that implementation to create a collection of <xref:System.Int16> objects.</span></span>  
  
 [!code-cpp[System.Collections.CollectionBase#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.CollectionBase/CPP/collectionbase.cpp#1)]
 [!code-csharp[System.Collections.CollectionBase#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.CollectionBase/CS/collectionbase.cs#1)]
 [!code-vb[System.Collections.CollectionBase#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.CollectionBase/VB/collectionbase.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.IList.IndexOf(System.Object)" />
        <related type="Article" href="/dotnet/standard/globalization-localization/performing-culture-insensitive-string-operations"><span data-ttu-id="896fc-356">执行不区分区域性的字符串操作</span><span class="sxs-lookup"><span data-stu-id="896fc-356">Performing Culture-Insensitive String Operations</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IndexOf">
      <MemberSignature Language="C#" Value="int IList.IndexOf (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IList.IndexOf(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.CollectionBase.System#Collections#IList#IndexOf(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function IndexOf (value As Object) As Integer Implements IList.IndexOf" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IList.IndexOf(System::Object ^ value) = System::Collections::IList::IndexOf;" />
      <MemberSignature Language="F#" Value="abstract member System.Collections.IList.IndexOf : obj -&gt; int&#xA;override this.System.Collections.IList.IndexOf : obj -&gt; int" Usage="collectionBase.System.Collections.IList.IndexOf value" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.IndexOf(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="896fc-357">要在 <see cref="T:System.Object" /> 中定位的 <see cref="T:System.Collections.CollectionBase" />。</span><span class="sxs-lookup"><span data-stu-id="896fc-357">The <see cref="T:System.Object" /> to locate in the <see cref="T:System.Collections.CollectionBase" />.</span></span></param>
        <summary><span data-ttu-id="896fc-358">搜索指定的 <see cref="T:System.Object" />，并返回整个 <see cref="T:System.Collections.CollectionBase" /> 中第一个匹配项的从零开始的索引。</span><span class="sxs-lookup"><span data-stu-id="896fc-358">Searches for the specified <see cref="T:System.Object" /> and returns the zero-based index of the first occurrence within the entire <see cref="T:System.Collections.CollectionBase" />.</span></span></summary>
        <returns><span data-ttu-id="896fc-359">如果找到，则为整个 <paramref name="value" /> 中 <see cref="T:System.Collections.CollectionBase" /> 第一个匹配项的从零开始的索引；否则为 -1。</span><span class="sxs-lookup"><span data-stu-id="896fc-359">The zero-based index of the first occurrence of <paramref name="value" /> within the entire <see cref="T:System.Collections.CollectionBase" />, if found; otherwise, -1.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="896fc-360">此方法执行线性搜索;因此，此方法是一个 `O(n)` 操作，其中 `n` 是 <xref:System.Collections.CollectionBase.Count%2A> 。</span><span class="sxs-lookup"><span data-stu-id="896fc-360">This method performs a linear search; therefore, this method is an `O(n)` operation, where `n` is <xref:System.Collections.CollectionBase.Count%2A>.</span></span>  
  
 <span data-ttu-id="896fc-361">此方法通过调用来确定相等性 <xref:System.Object.Equals%2A?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="896fc-361">This method determines equality by calling <xref:System.Object.Equals%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="896fc-362">从 .NET Framework 2.0 开始，此方法使用集合的对象的 <xref:System.Object.Equals%2A> 和 <xref:System.IComparable.CompareTo%2A> 方法 `item` 来确定是否 `item` 存在。</span><span class="sxs-lookup"><span data-stu-id="896fc-362">Starting with the .NET Framework 2.0, this method uses the collection's objects' <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods on `item` to determine whether `item` exists.</span></span> <span data-ttu-id="896fc-363">在 .NET Framework 的早期版本中，此决定是通过对 <xref:System.Object.Equals%2A> <xref:System.IComparable.CompareTo%2A> `item` 集合中的对象使用参数的和方法进行的。</span><span class="sxs-lookup"><span data-stu-id="896fc-363">In the earlier versions of the .NET Framework, this determination was made by using the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the `item` parameter on the objects in the collection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="896fc-364">下面的代码示例实现 <xref:System.Collections.CollectionBase> 类，并使用该实现创建对象的集合 <xref:System.Int16> 。</span><span class="sxs-lookup"><span data-stu-id="896fc-364">The following code example implements the <xref:System.Collections.CollectionBase> class and uses that implementation to create a collection of <xref:System.Int16> objects.</span></span>  
  
 [!code-cpp[System.Collections.CollectionBase#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.CollectionBase/CPP/collectionbase.cpp#1)]
 [!code-csharp[System.Collections.CollectionBase#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.CollectionBase/CS/collectionbase.cs#1)]
 [!code-vb[System.Collections.CollectionBase#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.CollectionBase/VB/collectionbase.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.IList.Contains(System.Object)" />
        <related type="Article" href="/dotnet/standard/globalization-localization/performing-culture-insensitive-string-operations"><span data-ttu-id="896fc-365">执行不区分区域性的字符串操作</span><span class="sxs-lookup"><span data-stu-id="896fc-365">Performing Culture-Insensitive String Operations</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Insert">
      <MemberSignature Language="C#" Value="void IList.Insert (int index, object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IList.Insert(int32 index, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.CollectionBase.System#Collections#IList#Insert(System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub Insert (index As Integer, value As Object) Implements IList.Insert" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.IList.Insert(int index, System::Object ^ value) = System::Collections::IList::Insert;" />
      <MemberSignature Language="F#" Value="abstract member System.Collections.IList.Insert : int * obj -&gt; unit&#xA;override this.System.Collections.IList.Insert : int * obj -&gt; unit" Usage="collectionBase.System.Collections.IList.Insert (index, value)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Insert(System.Int32,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="896fc-366">应插入 <paramref name="value" /> 的从零开始的索引。</span><span class="sxs-lookup"><span data-stu-id="896fc-366">The zero-based index at which <paramref name="value" /> should be inserted.</span></span></param>
        <param name="value"><span data-ttu-id="896fc-367">要插入的 <see cref="T:System.Object" />。</span><span class="sxs-lookup"><span data-stu-id="896fc-367">The <see cref="T:System.Object" /> to insert.</span></span></param>
        <summary><span data-ttu-id="896fc-368">将元素插入 <see cref="T:System.Collections.CollectionBase" /> 的指定索引处。</span><span class="sxs-lookup"><span data-stu-id="896fc-368">Inserts an element into the <see cref="T:System.Collections.CollectionBase" /> at the specified index.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="896fc-369">如果 <xref:System.Collections.CollectionBase.Count%2A> 已等于容量，则会在插入新元素之前自动重新分配内部数组，从而使列表的容量加倍。</span><span class="sxs-lookup"><span data-stu-id="896fc-369">If <xref:System.Collections.CollectionBase.Count%2A> already equals the capacity, the capacity of the list is doubled by automatically reallocating the internal array before the new element is inserted.</span></span>  
  
 <span data-ttu-id="896fc-370">如果 `index` 等于 <xref:System.Collections.CollectionBase.Count%2A> ， `value` 则将添加到的末尾 <xref:System.Collections.CollectionBase> 。</span><span class="sxs-lookup"><span data-stu-id="896fc-370">If `index` is equal to <xref:System.Collections.CollectionBase.Count%2A>, `value` is added to the end of <xref:System.Collections.CollectionBase>.</span></span>  
  
 <span data-ttu-id="896fc-371">在由连续的元素组成的集合（如列表）中，插入点下面的元素将下移以容纳新的元素。</span><span class="sxs-lookup"><span data-stu-id="896fc-371">In collections of contiguous elements, such as lists, the elements that follow the insertion point move down to accommodate the new element.</span></span> <span data-ttu-id="896fc-372">如果集合具有索引，则移动的元素的索引也将更新。</span><span class="sxs-lookup"><span data-stu-id="896fc-372">If the collection is indexed, the indexes of the elements that are moved are also updated.</span></span> <span data-ttu-id="896fc-373">此行为不适用于元素按概念划分为不同存储桶的集合，如哈希表。</span><span class="sxs-lookup"><span data-stu-id="896fc-373">This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.</span></span>  
  
 <span data-ttu-id="896fc-374">此方法是一个 `O(n)` 操作，其中 `n` 是 <xref:System.Collections.CollectionBase.Count%2A> 。</span><span class="sxs-lookup"><span data-stu-id="896fc-374">This method is an `O(n)` operation, where `n` is <xref:System.Collections.CollectionBase.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="896fc-375">下面的代码示例实现 <xref:System.Collections.CollectionBase> 类，并使用该实现创建对象的集合 <xref:System.Int16> 。</span><span class="sxs-lookup"><span data-stu-id="896fc-375">The following code example implements the <xref:System.Collections.CollectionBase> class and uses that implementation to create a collection of <xref:System.Int16> objects.</span></span>  
  
 [!code-cpp[System.Collections.CollectionBase#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.CollectionBase/CPP/collectionbase.cpp#1)]
 [!code-csharp[System.Collections.CollectionBase#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.CollectionBase/CS/collectionbase.cs#1)]
 [!code-vb[System.Collections.CollectionBase#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.CollectionBase/VB/collectionbase.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="896fc-376"><paramref name="index" /> 小于零。</span><span class="sxs-lookup"><span data-stu-id="896fc-376"><paramref name="index" /> is less than zero.</span></span>  
  
<span data-ttu-id="896fc-377">- 或 -</span><span class="sxs-lookup"><span data-stu-id="896fc-377">-or-</span></span> 
 <span data-ttu-id="896fc-378"><paramref name="index" /> 大于 <see cref="P:System.Collections.CollectionBase.Count" />。</span><span class="sxs-lookup"><span data-stu-id="896fc-378"><paramref name="index" /> is greater than <see cref="P:System.Collections.CollectionBase.Count" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="896fc-379"><see cref="T:System.Collections.CollectionBase" /> 为只读。</span><span class="sxs-lookup"><span data-stu-id="896fc-379">The <see cref="T:System.Collections.CollectionBase" /> is read-only.</span></span>  
  
<span data-ttu-id="896fc-380">- 或 -</span><span class="sxs-lookup"><span data-stu-id="896fc-380">-or-</span></span> 
<span data-ttu-id="896fc-381"><see cref="T:System.Collections.CollectionBase" /> 具有固定的大小。</span><span class="sxs-lookup"><span data-stu-id="896fc-381">The <see cref="T:System.Collections.CollectionBase" /> has a fixed size.</span></span></exception>
        <block subset="none" type="overrides"><para><span data-ttu-id="896fc-382">此方法调用 <see cref="M:System.Collections.CollectionBase.OnValidate(System.Object)" /> 、 <see cref="M:System.Collections.CollectionBase.OnInsert(System.Int32,System.Object)" /> 和 <see cref="M:System.Collections.CollectionBase.OnInsertComplete(System.Int32,System.Object)" /> 。</span><span class="sxs-lookup"><span data-stu-id="896fc-382">This method calls <see cref="M:System.Collections.CollectionBase.OnValidate(System.Object)" />, <see cref="M:System.Collections.CollectionBase.OnInsert(System.Int32,System.Object)" />, and <see cref="M:System.Collections.CollectionBase.OnInsertComplete(System.Int32,System.Object)" />.</span></span></para></block>
        <altmember cref="M:System.Collections.IList.Add(System.Object)" />
        <altmember cref="M:System.Collections.IList.Remove(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IsFixedSize">
      <MemberSignature Language="C#" Value="bool System.Collections.IList.IsFixedSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.IList.IsFixedSize" />
      <MemberSignature Language="DocId" Value="P:System.Collections.CollectionBase.System#Collections#IList#IsFixedSize" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsFixedSize As Boolean Implements IList.IsFixedSize" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Collections::IList::IsFixedSize { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.System.Collections.IList.IsFixedSize : bool" Usage="System.Collections.IList.IsFixedSize" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IList.IsFixedSize</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="896fc-383">获取一个值，该值指示 <see cref="T:System.Collections.CollectionBase" /> 是否具有固定大小。</span><span class="sxs-lookup"><span data-stu-id="896fc-383">Gets a value indicating whether the <see cref="T:System.Collections.CollectionBase" /> has a fixed size.</span></span></summary>
        <value><span data-ttu-id="896fc-384">如果 <see langword="true" /> 具有固定大小，则为 <see cref="T:System.Collections.CollectionBase" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="896fc-384"><see langword="true" /> if the <see cref="T:System.Collections.CollectionBase" /> has a fixed size; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="896fc-385">默认值为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="896fc-385">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="896fc-386">具有固定大小的集合在创建之后不能再添加或移除元素，但是允许修改现有元素。</span><span class="sxs-lookup"><span data-stu-id="896fc-386">A collection with a fixed size does not allow the addition or removal of elements after the collection is created, but it allows the modification of existing elements.</span></span>  
  
 <span data-ttu-id="896fc-387">具有固定大小的集合就是一个集合，其中包含阻止添加和移除元素的包装;因此，如果对基础集合进行了更改，包括添加或删除元素，则固定大小的集合将反映这些更改。</span><span class="sxs-lookup"><span data-stu-id="896fc-387">A collection with a fixed size is simply a collection with a wrapper that prevents adding and removing elements; therefore, if changes are made to the underlying collection, including the addition or removal of elements, the fixed-size collection reflects those changes.</span></span>  
  
 <span data-ttu-id="896fc-388">检索此属性的值是一个 `O(1)` 运算。</span><span class="sxs-lookup"><span data-stu-id="896fc-388">Retrieving the value of this property is an `O(1)` operation.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IsReadOnly">
      <MemberSignature Language="C#" Value="bool System.Collections.IList.IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.IList.IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Collections.CollectionBase.System#Collections#IList#IsReadOnly" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsReadOnly As Boolean Implements IList.IsReadOnly" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Collections::IList::IsReadOnly { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.System.Collections.IList.IsReadOnly : bool" Usage="System.Collections.IList.IsReadOnly" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IList.IsReadOnly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="896fc-389">获取一个值，该值指示 <see cref="T:System.Collections.CollectionBase" /> 是否为只读。</span><span class="sxs-lookup"><span data-stu-id="896fc-389">Gets a value indicating whether the <see cref="T:System.Collections.CollectionBase" /> is read-only.</span></span></summary>
        <value><span data-ttu-id="896fc-390">如果 <see langword="true" /> 是只读的，则为 <see cref="T:System.Collections.CollectionBase" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="896fc-390"><see langword="true" /> if the <see cref="T:System.Collections.CollectionBase" /> is read-only; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="896fc-391">默认值为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="896fc-391">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="896fc-392">在创建只读集合后，该集合不允许添加、移除或修改元素。</span><span class="sxs-lookup"><span data-stu-id="896fc-392">A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.</span></span>  
  
 <span data-ttu-id="896fc-393">只读集合就是一个集合，其中包含阻止修改集合的包装器;因此，如果对基础集合进行了更改，只读集合将反映这些更改。</span><span class="sxs-lookup"><span data-stu-id="896fc-393">A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection; therefore, if changes are made to the underlying collection, the read-only collection reflects those changes.</span></span>  
  
 <span data-ttu-id="896fc-394">检索此属性的值是一个 `O(1)` 运算。</span><span class="sxs-lookup"><span data-stu-id="896fc-394">Retrieving the value of this property is an `O(1)` operation.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Item">
      <MemberSignature Language="C#" Value="object System.Collections.IList.Item[int index] { get; set; }" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.IList.Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Collections.CollectionBase.System#Collections#IList#Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value=" Property Item(index As Integer) As Object Implements IList.Item" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System::Collections::IList::Item[int] { System::Object ^ get(int index); void set(int index, System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.System.Collections.IList.Item(int) : obj with get, set" Usage="System.Collections.IList.Item" />
      <MemberSignature Language="C#" Value="object? System.Collections.IList.Item[int index] { get; set; }" FrameworkAlternate="net-5.0" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IList.Item(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="896fc-395">要获取或设置的元素的从零开始的索引。</span><span class="sxs-lookup"><span data-stu-id="896fc-395">The zero-based index of the element to get or set.</span></span></param>
        <summary><span data-ttu-id="896fc-396">获取或设置指定索引处的元素。</span><span class="sxs-lookup"><span data-stu-id="896fc-396">Gets or sets the element at the specified index.</span></span></summary>
        <value><span data-ttu-id="896fc-397">指定索引处的元素。</span><span class="sxs-lookup"><span data-stu-id="896fc-397">The element at the specified index.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="896fc-398">通过此属性，可以使用以下语法来访问集合中的特定元素：`myCollection[index]`。</span><span class="sxs-lookup"><span data-stu-id="896fc-398">This property provides the ability to access a specific element in the collection by using the following syntax: `myCollection[index]`.</span></span>  
  
 <span data-ttu-id="896fc-399">检索此属性的值是一个 `O(1)` 操作; 设置属性也是一个 `O(1)` 操作。</span><span class="sxs-lookup"><span data-stu-id="896fc-399">Retrieving the value of this property is an `O(1)` operation; setting the property is also an `O(1)` operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="896fc-400">下面的代码示例实现 <xref:System.Collections.CollectionBase> 类，并使用该实现创建对象的集合 <xref:System.Int16> 。</span><span class="sxs-lookup"><span data-stu-id="896fc-400">The following code example implements the <xref:System.Collections.CollectionBase> class and uses that implementation to create a collection of <xref:System.Int16> objects.</span></span>  
  
 [!code-cpp[System.Collections.CollectionBase#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.CollectionBase/CPP/collectionbase.cpp#1)]
 [!code-csharp[System.Collections.CollectionBase#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.CollectionBase/CS/collectionbase.cs#1)]
 [!code-vb[System.Collections.CollectionBase#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.CollectionBase/VB/collectionbase.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="896fc-401"><paramref name="index" /> 小于零。</span><span class="sxs-lookup"><span data-stu-id="896fc-401"><paramref name="index" /> is less than zero.</span></span>  
  
<span data-ttu-id="896fc-402">- 或 -</span><span class="sxs-lookup"><span data-stu-id="896fc-402">-or-</span></span> 
 <span data-ttu-id="896fc-403"><paramref name="index" /> 等于或大于 <see cref="P:System.Collections.CollectionBase.Count" />。</span><span class="sxs-lookup"><span data-stu-id="896fc-403"><paramref name="index" /> is equal to or greater than <see cref="P:System.Collections.CollectionBase.Count" />.</span></span></exception>
        <block subset="none" type="overrides"><para><span data-ttu-id="896fc-404">设置此属性时，将调用方法 <see cref="M:System.Collections.CollectionBase.OnValidate(System.Object)" /> 、 <see cref="M:System.Collections.CollectionBase.OnSet(System.Int32,System.Object,System.Object)" /> 和 <see cref="M:System.Collections.CollectionBase.OnSetComplete(System.Int32,System.Object,System.Object)" /> 。</span><span class="sxs-lookup"><span data-stu-id="896fc-404">When this property is set, the methods <see cref="M:System.Collections.CollectionBase.OnValidate(System.Object)" />, <see cref="M:System.Collections.CollectionBase.OnSet(System.Int32,System.Object,System.Object)" />, and <see cref="M:System.Collections.CollectionBase.OnSetComplete(System.Int32,System.Object,System.Object)" /> are called.</span></span></para></block>
        <altmember cref="P:System.Collections.CollectionBase.Count" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Remove">
      <MemberSignature Language="C#" Value="void IList.Remove (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IList.Remove(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.CollectionBase.System#Collections#IList#Remove(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub Remove (value As Object) Implements IList.Remove" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.IList.Remove(System::Object ^ value) = System::Collections::IList::Remove;" />
      <MemberSignature Language="F#" Value="abstract member System.Collections.IList.Remove : obj -&gt; unit&#xA;override this.System.Collections.IList.Remove : obj -&gt; unit" Usage="collectionBase.System.Collections.IList.Remove value" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Remove(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="896fc-405">要从 <see cref="T:System.Object" /> 移除的 <see cref="T:System.Collections.CollectionBase" />。</span><span class="sxs-lookup"><span data-stu-id="896fc-405">The <see cref="T:System.Object" /> to remove from the <see cref="T:System.Collections.CollectionBase" />.</span></span></param>
        <summary><span data-ttu-id="896fc-406">从 <see cref="T:System.Collections.CollectionBase" /> 中移除特定对象的第一个匹配项。</span><span class="sxs-lookup"><span data-stu-id="896fc-406">Removes the first occurrence of a specific object from the <see cref="T:System.Collections.CollectionBase" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="896fc-407">如果不 <xref:System.Collections.CollectionBase> 包含指定的对象，则 <xref:System.Collections.CollectionBase> 保持不变。</span><span class="sxs-lookup"><span data-stu-id="896fc-407">If the <xref:System.Collections.CollectionBase> does not contain the specified object, the <xref:System.Collections.CollectionBase> remains unchanged.</span></span> <span data-ttu-id="896fc-408">不会引发异常。</span><span class="sxs-lookup"><span data-stu-id="896fc-408">No exception is thrown.</span></span>  
  
 <span data-ttu-id="896fc-409">此方法执行线性搜索;因此，此方法是一个 `O(n)` 操作，其中 `n` 是 <xref:System.Collections.CollectionBase.Count%2A> 。</span><span class="sxs-lookup"><span data-stu-id="896fc-409">This method performs a linear search; therefore, this method is an `O(n)` operation, where `n` is <xref:System.Collections.CollectionBase.Count%2A>.</span></span>  
  
 <span data-ttu-id="896fc-410">此方法通过调用来确定相等性 <xref:System.Object.Equals%2A?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="896fc-410">This method determines equality by calling <xref:System.Object.Equals%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="896fc-411">在由连续的元素组成的集合（如列表）中，已移除元素下面的元素将上移以占据空出的位置。</span><span class="sxs-lookup"><span data-stu-id="896fc-411">In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot.</span></span> <span data-ttu-id="896fc-412">如果集合具有索引，则移动的元素的索引也将更新。</span><span class="sxs-lookup"><span data-stu-id="896fc-412">If the collection is indexed, the indexes of the elements that are moved are also updated.</span></span> <span data-ttu-id="896fc-413">此行为不适用于元素按概念划分为不同存储桶的集合，如哈希表。</span><span class="sxs-lookup"><span data-stu-id="896fc-413">This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="896fc-414">下面的代码示例实现 <xref:System.Collections.CollectionBase> 类，并使用该实现创建对象的集合 <xref:System.Int16> 。</span><span class="sxs-lookup"><span data-stu-id="896fc-414">The following code example implements the <xref:System.Collections.CollectionBase> class and uses that implementation to create a collection of <xref:System.Int16> objects.</span></span>  
  
 [!code-cpp[System.Collections.CollectionBase#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.CollectionBase/CPP/collectionbase.cpp#1)]
 [!code-csharp[System.Collections.CollectionBase#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.CollectionBase/CS/collectionbase.cs#1)]
 [!code-vb[System.Collections.CollectionBase#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.CollectionBase/VB/collectionbase.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="896fc-415">未在 <see cref="T:System.Collections.CollectionBase" /> 对象中找到 <paramref name="value" /> 参数。</span><span class="sxs-lookup"><span data-stu-id="896fc-415">The <paramref name="value" /> parameter was not found in the <see cref="T:System.Collections.CollectionBase" /> object.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="896fc-416"><see cref="T:System.Collections.CollectionBase" /> 为只读。</span><span class="sxs-lookup"><span data-stu-id="896fc-416">The <see cref="T:System.Collections.CollectionBase" /> is read-only.</span></span>  
  
<span data-ttu-id="896fc-417">- 或 -</span><span class="sxs-lookup"><span data-stu-id="896fc-417">-or-</span></span> 
<span data-ttu-id="896fc-418"><see cref="T:System.Collections.CollectionBase" /> 具有固定的大小。</span><span class="sxs-lookup"><span data-stu-id="896fc-418">The <see cref="T:System.Collections.CollectionBase" /> has a fixed size.</span></span></exception>
        <block subset="none" type="overrides"><para><span data-ttu-id="896fc-419">此方法调用 <see cref="M:System.Collections.CollectionBase.OnValidate(System.Object)" /> 、 <see cref="M:System.Collections.CollectionBase.OnRemove(System.Int32,System.Object)" /> 和 <see cref="M:System.Collections.CollectionBase.OnRemoveComplete(System.Int32,System.Object)" /> 。</span><span class="sxs-lookup"><span data-stu-id="896fc-419">This method calls <see cref="M:System.Collections.CollectionBase.OnValidate(System.Object)" />, <see cref="M:System.Collections.CollectionBase.OnRemove(System.Int32,System.Object)" />, and <see cref="M:System.Collections.CollectionBase.OnRemoveComplete(System.Int32,System.Object)" />.</span></span></para></block>
        <altmember cref="M:System.Collections.CollectionBase.RemoveAt(System.Int32)" />
        <altmember cref="M:System.Collections.IList.Add(System.Object)" />
        <altmember cref="M:System.Collections.IList.Insert(System.Int32,System.Object)" />
        <related type="Article" href="/dotnet/standard/globalization-localization/performing-culture-insensitive-string-operations"><span data-ttu-id="896fc-420">执行不区分区域性的字符串操作</span><span class="sxs-lookup"><span data-stu-id="896fc-420">Performing Culture-Insensitive String Operations</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>
