<Type Name="MetaData" FullName="System.Runtime.Remoting.MetadataServices.MetaData">
  <Metadata><Meta Name="ms.openlocfilehash" Value="2ccfca57d8d5a31189dddc43b2a198867b96bb48" /><Meta Name="ms.sourcegitcommit" Value="11d168140aa8fade0768c2a9dde3e3bcacfdfb7d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="05/27/2020" /><Meta Name="ms.locfileid" Value="83950310" /></Metadata><TypeSignature Language="C#" Value="public class MetaData" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MetaData extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.Remoting.MetadataServices.MetaData" />
  <TypeSignature Language="VB.NET" Value="Public Class MetaData" />
  <TypeSignature Language="C++ CLI" Value="public ref class MetaData" />
  <TypeSignature Language="F#" Value="type MetaData = class" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Remoting</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="92bf7-101">提供使您可以使用 XML 架构的方法。</span><span class="sxs-lookup"><span data-stu-id="92bf7-101">Provides methods that allow you to work with XML schema.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92bf7-102"><xref:System.Runtime.Remoting.MetadataServices.MetaData> 类提供了一些方法，使你可以从类型信息生成 Web 服务描述语言（WSDL），将 XML 架构转换为代码流，并将代码流编译为程序集。</span><span class="sxs-lookup"><span data-stu-id="92bf7-102">The <xref:System.Runtime.Remoting.MetadataServices.MetaData> class provides methods that allow you to generate Web Services Description Language (WSDL) from type information, convert an XML Schema into a code stream, and compile the code stream into an assembly.</span></span> <span data-ttu-id="92bf7-103">[Soapsuds 工具（Soapsuds）](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/xd176a6c(v=vs.100))也提供此功能。</span><span class="sxs-lookup"><span data-stu-id="92bf7-103">This functionality is also present in the [Soapsuds Tool (Soapsuds.exe)](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/xd176a6c(v=vs.100)).</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MetaData ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.MetadataServices.MetaData.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MetaData();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Remoting</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="92bf7-104">创建 <see cref="T:System.Runtime.Remoting.MetadataServices.MetaData" /> 的实例。</span><span class="sxs-lookup"><span data-stu-id="92bf7-104">Creates an instance of <see cref="T:System.Runtime.Remoting.MetadataServices.MetaData" />.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConvertCodeSourceFileToAssemblyFile">
      <MemberSignature Language="C#" Value="public static void ConvertCodeSourceFileToAssemblyFile (string codePath, string assemblyPath, string strongNameFilename);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ConvertCodeSourceFileToAssemblyFile(string codePath, string assemblyPath, string strongNameFilename) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.MetadataServices.MetaData.ConvertCodeSourceFileToAssemblyFile(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ConvertCodeSourceFileToAssemblyFile (codePath As String, assemblyPath As String, strongNameFilename As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ConvertCodeSourceFileToAssemblyFile(System::String ^ codePath, System::String ^ assemblyPath, System::String ^ strongNameFilename);" />
      <MemberSignature Language="F#" Value="static member ConvertCodeSourceFileToAssemblyFile : string * string * string -&gt; unit" Usage="System.Runtime.Remoting.MetadataServices.MetaData.ConvertCodeSourceFileToAssemblyFile (codePath, assemblyPath, strongNameFilename)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Remoting</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="codePath" Type="System.String" />
        <Parameter Name="assemblyPath" Type="System.String" />
        <Parameter Name="strongNameFilename" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="codePath"><span data-ttu-id="92bf7-105">包含源代码的文件的路径。</span><span class="sxs-lookup"><span data-stu-id="92bf7-105">The path to the file that contains the source code.</span></span></param>
        <param name="assemblyPath"><span data-ttu-id="92bf7-106">生成新运行时程序集的位置。</span><span class="sxs-lookup"><span data-stu-id="92bf7-106">The location where the new run-time assembly is generated.</span></span></param>
        <param name="strongNameFilename"><span data-ttu-id="92bf7-107">要编译到新程序集中的强名称。</span><span class="sxs-lookup"><span data-stu-id="92bf7-107">The strong name to compile into the new assembly.</span></span> <span data-ttu-id="92bf7-108">可以为 <see cref="F:System.String.Empty" />。</span><span class="sxs-lookup"><span data-stu-id="92bf7-108">Can be <see cref="F:System.String.Empty" />.</span></span></param>
        <summary><span data-ttu-id="92bf7-109">将指定的代码源文件编译为运行时程序集文件。</span><span class="sxs-lookup"><span data-stu-id="92bf7-109">Compiles a specified code source file into a runtime assembly file.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92bf7-110">有关强名称的其他信息，请参阅[具有强名称的程序集](/dotnet/standard/assembly/strong-named)。</span><span class="sxs-lookup"><span data-stu-id="92bf7-110">For additional information on strong names, see [Strong-Named Assemblies](/dotnet/standard/assembly/strong-named).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="92bf7-111">如果已存在具有指定名称的文件，则将覆盖该文件。</span><span class="sxs-lookup"><span data-stu-id="92bf7-111">If a file with the specified name already exists, it is overwritten.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="92bf7-112">下面的代码示例演示如何使用 <xref:System.Runtime.Remoting.MetadataServices.MetaData.ConvertCodeSourceFileToAssemblyFile%2A> 方法将指定类型的架构定义写入到具有指定名称的运行时程序集。</span><span class="sxs-lookup"><span data-stu-id="92bf7-112">The following code example demonstrates the use of the <xref:System.Runtime.Remoting.MetadataServices.MetaData.ConvertCodeSourceFileToAssemblyFile%2A> method to write the schema definition of the specified types to a runtime assembly with the specified name.</span></span> <span data-ttu-id="92bf7-113">此处转换的 `CsSource.cs` 文件包含 C# 源代码。</span><span class="sxs-lookup"><span data-stu-id="92bf7-113">The `CsSource.cs` file converted here contains C# source code.</span></span>  
  
 [!code-cpp[MetaData.ConvertCodeSourceFileToAssemblyFile#1](~/samples/snippets/cpp/VS_Snippets_Remoting/MetaData.ConvertCodeSourceFileToAssemblyFile/CPP/source.cpp#1)]
 [!code-csharp[MetaData.ConvertCodeSourceFileToAssemblyFile#1](~/samples/snippets/csharp/VS_Snippets_Remoting/MetaData.ConvertCodeSourceFileToAssemblyFile/CS/source.cs#1)]
 [!code-vb[MetaData.ConvertCodeSourceFileToAssemblyFile#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/MetaData.ConvertCodeSourceFileToAssemblyFile/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConvertCodeSourceStreamToAssemblyFile">
      <MemberSignature Language="C#" Value="public static void ConvertCodeSourceStreamToAssemblyFile (System.Collections.ArrayList outCodeStreamList, string assemblyPath, string strongNameFilename);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ConvertCodeSourceStreamToAssemblyFile(class System.Collections.ArrayList outCodeStreamList, string assemblyPath, string strongNameFilename) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.MetadataServices.MetaData.ConvertCodeSourceStreamToAssemblyFile(System.Collections.ArrayList,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ConvertCodeSourceStreamToAssemblyFile (outCodeStreamList As ArrayList, assemblyPath As String, strongNameFilename As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ConvertCodeSourceStreamToAssemblyFile(System::Collections::ArrayList ^ outCodeStreamList, System::String ^ assemblyPath, System::String ^ strongNameFilename);" />
      <MemberSignature Language="F#" Value="static member ConvertCodeSourceStreamToAssemblyFile : System.Collections.ArrayList * string * string -&gt; unit" Usage="System.Runtime.Remoting.MetadataServices.MetaData.ConvertCodeSourceStreamToAssemblyFile (outCodeStreamList, assemblyPath, strongNameFilename)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Remoting</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="outCodeStreamList" Type="System.Collections.ArrayList" />
        <Parameter Name="assemblyPath" Type="System.String" />
        <Parameter Name="strongNameFilename" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="outCodeStreamList"><span data-ttu-id="92bf7-114">含有源代码的流的 <see cref="T:System.Collections.ArrayList" />。</span><span class="sxs-lookup"><span data-stu-id="92bf7-114">A <see cref="T:System.Collections.ArrayList" /> of streams with the source code.</span></span></param>
        <param name="assemblyPath"><span data-ttu-id="92bf7-115">生成新运行时程序集的位置。</span><span class="sxs-lookup"><span data-stu-id="92bf7-115">The location where the new run-time assembly is generated.</span></span></param>
        <param name="strongNameFilename"><span data-ttu-id="92bf7-116">要编译到新的运行时程序集中的强名称。</span><span class="sxs-lookup"><span data-stu-id="92bf7-116">The strong name to compile into the new run-time assembly.</span></span> <span data-ttu-id="92bf7-117">可以为 <see cref="F:System.String.Empty" />。</span><span class="sxs-lookup"><span data-stu-id="92bf7-117">Can be <see cref="F:System.String.Empty" />.</span></span></param>
        <summary><span data-ttu-id="92bf7-118">将指定的代码源流编译为运行时程序集文件。</span><span class="sxs-lookup"><span data-stu-id="92bf7-118">Compiles specified code source streams into a run-time assembly file.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92bf7-119">有关强名称的其他信息，请参阅[具有强名称的程序集](/dotnet/standard/assembly/strong-named)。</span><span class="sxs-lookup"><span data-stu-id="92bf7-119">For additional information on strong names, see [Strong-Named Assemblies](/dotnet/standard/assembly/strong-named).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="92bf7-120">如果已存在具有指定名称的文件，则将覆盖该文件。</span><span class="sxs-lookup"><span data-stu-id="92bf7-120">If a file with the specified name already exists, it is overwritten.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ConvertSchemaStreamToCodeSourceStream">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Remoting</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="92bf7-121">将指定的架构定义转换为 C# 源代码代理，然后可将后者编译为运行时代理程序集。</span><span class="sxs-lookup"><span data-stu-id="92bf7-121">Converts a specified schema definition to C# source code proxy, which can then be compiled into a runtime proxy assembly.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ConvertSchemaStreamToCodeSourceStream">
      <MemberSignature Language="C#" Value="public static void ConvertSchemaStreamToCodeSourceStream (bool clientProxy, string outputDirectory, System.IO.Stream inputStream, System.Collections.ArrayList outCodeStreamList);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ConvertSchemaStreamToCodeSourceStream(bool clientProxy, string outputDirectory, class System.IO.Stream inputStream, class System.Collections.ArrayList outCodeStreamList) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.MetadataServices.MetaData.ConvertSchemaStreamToCodeSourceStream(System.Boolean,System.String,System.IO.Stream,System.Collections.ArrayList)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ConvertSchemaStreamToCodeSourceStream (clientProxy As Boolean, outputDirectory As String, inputStream As Stream, outCodeStreamList As ArrayList)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ConvertSchemaStreamToCodeSourceStream(bool clientProxy, System::String ^ outputDirectory, System::IO::Stream ^ inputStream, System::Collections::ArrayList ^ outCodeStreamList);" />
      <MemberSignature Language="F#" Value="static member ConvertSchemaStreamToCodeSourceStream : bool * string * System.IO.Stream * System.Collections.ArrayList -&gt; unit" Usage="System.Runtime.Remoting.MetadataServices.MetaData.ConvertSchemaStreamToCodeSourceStream (clientProxy, outputDirectory, inputStream, outCodeStreamList)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Remoting</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="clientProxy" Type="System.Boolean" />
        <Parameter Name="outputDirectory" Type="System.String" />
        <Parameter Name="inputStream" Type="System.IO.Stream" />
        <Parameter Name="outCodeStreamList" Type="System.Collections.ArrayList" />
      </Parameters>
      <Docs>
        <param name="clientProxy"><span data-ttu-id="92bf7-122">指示要生成的代理的类型。</span><span class="sxs-lookup"><span data-stu-id="92bf7-122">Indicates the type of proxy to generate.</span></span> <span data-ttu-id="92bf7-123">如果为 <see langword="true" />，则生成简单代理（也称为绕线代理），该代理自动加载信道、公开远程对象的所有方法并提供对信道属性的访问。</span><span class="sxs-lookup"><span data-stu-id="92bf7-123">If <see langword="true" />, generates a simple proxy (also known as wrapped proxy) that automatically loads the channels, exposes all the methods of the remote object, and provides access to the channel properties.</span></span> <span data-ttu-id="92bf7-124">如果为 <see langword="false" />，则生成透明代理，该代理公开远程对象的所有方法。</span><span class="sxs-lookup"><span data-stu-id="92bf7-124">If <see langword="false" />, generates a transparent proxy that exposes all the methods of the remote object.</span></span></param>
        <param name="outputDirectory"><span data-ttu-id="92bf7-125">目录，在其中创建具有代理的新 C# 源代码文件。</span><span class="sxs-lookup"><span data-stu-id="92bf7-125">The directory where the new C# source code files with the proxy are created.</span></span></param>
        <param name="inputStream"><span data-ttu-id="92bf7-126">输入流，包含 Web 服务描述语言 (WSDL) 格式的架构定义。</span><span class="sxs-lookup"><span data-stu-id="92bf7-126">The input stream that contains the schema definition in Web Services Description Language (WSDL) format.</span></span></param>
        <param name="outCodeStreamList"><span data-ttu-id="92bf7-127">生成的代码流的文件名列表。</span><span class="sxs-lookup"><span data-stu-id="92bf7-127">The list of file names for the code streams that are generated.</span></span> <span data-ttu-id="92bf7-128">请注意，<see cref="M:System.Runtime.Remoting.MetadataServices.MetaData.ConvertSchemaStreamToCodeSourceStream(System.Boolean,System.String,System.IO.Stream,System.Collections.ArrayList,System.String,System.String)" /> 方法可以创建多个源代码流。</span><span class="sxs-lookup"><span data-stu-id="92bf7-128">Note that the <see cref="M:System.Runtime.Remoting.MetadataServices.MetaData.ConvertSchemaStreamToCodeSourceStream(System.Boolean,System.String,System.IO.Stream,System.Collections.ArrayList,System.String,System.String)" /> method can create multiple source code streams.</span></span></param>
        <summary><span data-ttu-id="92bf7-129">将指定的架构定义转换为 C# 代理源代码。</span><span class="sxs-lookup"><span data-stu-id="92bf7-129">Converts the specified schema definition into C# proxy source code.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="92bf7-130">如果具有指定名称的文件已存在，则将覆盖这些文件。</span><span class="sxs-lookup"><span data-stu-id="92bf7-130">If files with the specified names already exist, they are overwritten.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConvertSchemaStreamToCodeSourceStream">
      <MemberSignature Language="C#" Value="public static void ConvertSchemaStreamToCodeSourceStream (bool clientProxy, string outputDirectory, System.IO.Stream inputStream, System.Collections.ArrayList outCodeStreamList, string proxyUrl);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ConvertSchemaStreamToCodeSourceStream(bool clientProxy, string outputDirectory, class System.IO.Stream inputStream, class System.Collections.ArrayList outCodeStreamList, string proxyUrl) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.MetadataServices.MetaData.ConvertSchemaStreamToCodeSourceStream(System.Boolean,System.String,System.IO.Stream,System.Collections.ArrayList,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ConvertSchemaStreamToCodeSourceStream (clientProxy As Boolean, outputDirectory As String, inputStream As Stream, outCodeStreamList As ArrayList, proxyUrl As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ConvertSchemaStreamToCodeSourceStream(bool clientProxy, System::String ^ outputDirectory, System::IO::Stream ^ inputStream, System::Collections::ArrayList ^ outCodeStreamList, System::String ^ proxyUrl);" />
      <MemberSignature Language="F#" Value="static member ConvertSchemaStreamToCodeSourceStream : bool * string * System.IO.Stream * System.Collections.ArrayList * string -&gt; unit" Usage="System.Runtime.Remoting.MetadataServices.MetaData.ConvertSchemaStreamToCodeSourceStream (clientProxy, outputDirectory, inputStream, outCodeStreamList, proxyUrl)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Remoting</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="clientProxy" Type="System.Boolean" />
        <Parameter Name="outputDirectory" Type="System.String" />
        <Parameter Name="inputStream" Type="System.IO.Stream" />
        <Parameter Name="outCodeStreamList" Type="System.Collections.ArrayList" />
        <Parameter Name="proxyUrl" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="clientProxy"><span data-ttu-id="92bf7-131">指示要生成的代理的类型。</span><span class="sxs-lookup"><span data-stu-id="92bf7-131">Indicates the type of proxy to generate.</span></span> <span data-ttu-id="92bf7-132">如果为 <see langword="true" />，则生成简单代理（也称为绕线代理），该代理自动加载信道、公开远程对象的所有方法并提供对信道属性的访问。</span><span class="sxs-lookup"><span data-stu-id="92bf7-132">If <see langword="true" />, generates a simple proxy (also known as wrapped proxy) that automatically loads the channels, exposes all the methods of the remote object, and provides access to the channel properties.</span></span> <span data-ttu-id="92bf7-133">如果为 <see langword="false" />，则生成透明代理，该代理公开远程对象的所有方法。</span><span class="sxs-lookup"><span data-stu-id="92bf7-133">If <see langword="false" />, generates a transparent proxy that exposes all the methods of the remote object.</span></span></param>
        <param name="outputDirectory"><span data-ttu-id="92bf7-134">目录，在其中创建具有代理的新 C# 源代码文件。</span><span class="sxs-lookup"><span data-stu-id="92bf7-134">The directory where the new C# source code files with the proxy are created.</span></span></param>
        <param name="inputStream"><span data-ttu-id="92bf7-135">输入流，包含 Web 服务描述语言 (WSDL) 格式的架构定义。</span><span class="sxs-lookup"><span data-stu-id="92bf7-135">The input stream that contains the schema definition in Web Services Description Language (WSDL) format.</span></span></param>
        <param name="outCodeStreamList"><span data-ttu-id="92bf7-136">生成的代码流的文件名列表。</span><span class="sxs-lookup"><span data-stu-id="92bf7-136">The list of file names for the code streams that are generated.</span></span> <span data-ttu-id="92bf7-137">请注意，<see cref="M:System.Runtime.Remoting.MetadataServices.MetaData.ConvertSchemaStreamToCodeSourceStream(System.Boolean,System.String,System.IO.Stream,System.Collections.ArrayList,System.String,System.String)" /> 方法可以创建多个源代码流。</span><span class="sxs-lookup"><span data-stu-id="92bf7-137">Note that the <see cref="M:System.Runtime.Remoting.MetadataServices.MetaData.ConvertSchemaStreamToCodeSourceStream(System.Boolean,System.String,System.IO.Stream,System.Collections.ArrayList,System.String,System.String)" /> method can create multiple source code streams.</span></span></param>
        <param name="proxyUrl"><span data-ttu-id="92bf7-138">由新代理表示的目标远程对象所在的 URL。</span><span class="sxs-lookup"><span data-stu-id="92bf7-138">The URL where the target remote object that is represented by the new proxy will be located.</span></span></param>
        <summary><span data-ttu-id="92bf7-139">将指定的架构定义转换为位于指定 URL 的远程对象的 C# 代理源代码。</span><span class="sxs-lookup"><span data-stu-id="92bf7-139">Converts the specified schema definition into C# proxy source code for a remote object that is located at the specified URL.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="92bf7-140">如果具有指定名称的文件已存在，则将覆盖这些文件。</span><span class="sxs-lookup"><span data-stu-id="92bf7-140">If files with the specified names already exist, they are overwritten.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConvertSchemaStreamToCodeSourceStream">
      <MemberSignature Language="C#" Value="public static void ConvertSchemaStreamToCodeSourceStream (bool clientProxy, string outputDirectory, System.IO.Stream inputStream, System.Collections.ArrayList outCodeStreamList, string proxyUrl, string proxyNamespace);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ConvertSchemaStreamToCodeSourceStream(bool clientProxy, string outputDirectory, class System.IO.Stream inputStream, class System.Collections.ArrayList outCodeStreamList, string proxyUrl, string proxyNamespace) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.MetadataServices.MetaData.ConvertSchemaStreamToCodeSourceStream(System.Boolean,System.String,System.IO.Stream,System.Collections.ArrayList,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ConvertSchemaStreamToCodeSourceStream (clientProxy As Boolean, outputDirectory As String, inputStream As Stream, outCodeStreamList As ArrayList, proxyUrl As String, proxyNamespace As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ConvertSchemaStreamToCodeSourceStream(bool clientProxy, System::String ^ outputDirectory, System::IO::Stream ^ inputStream, System::Collections::ArrayList ^ outCodeStreamList, System::String ^ proxyUrl, System::String ^ proxyNamespace);" />
      <MemberSignature Language="F#" Value="static member ConvertSchemaStreamToCodeSourceStream : bool * string * System.IO.Stream * System.Collections.ArrayList * string * string -&gt; unit" Usage="System.Runtime.Remoting.MetadataServices.MetaData.ConvertSchemaStreamToCodeSourceStream (clientProxy, outputDirectory, inputStream, outCodeStreamList, proxyUrl, proxyNamespace)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Remoting</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="clientProxy" Type="System.Boolean" />
        <Parameter Name="outputDirectory" Type="System.String" />
        <Parameter Name="inputStream" Type="System.IO.Stream" />
        <Parameter Name="outCodeStreamList" Type="System.Collections.ArrayList" />
        <Parameter Name="proxyUrl" Type="System.String" />
        <Parameter Name="proxyNamespace" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="clientProxy"><span data-ttu-id="92bf7-141">指示要生成的代理的类型。</span><span class="sxs-lookup"><span data-stu-id="92bf7-141">Indicates the type of proxy to generate.</span></span> <span data-ttu-id="92bf7-142">如果为 <see langword="true" />，则生成简单代理（也称为绕线代理），该代理自动加载信道、公开远程对象的所有方法并提供对信道属性的访问。</span><span class="sxs-lookup"><span data-stu-id="92bf7-142">If <see langword="true" />, generates a simple proxy (also known as wrapped proxy) that automatically loads the channels, exposes all the methods of the remote object, and provides access to the channel properties.</span></span> <span data-ttu-id="92bf7-143">如果为 <see langword="false" />，则生成透明代理，该代理公开远程对象的所有方法。</span><span class="sxs-lookup"><span data-stu-id="92bf7-143">If <see langword="false" />, generates a transparent proxy that exposes all the methods of the remote object.</span></span></param>
        <param name="outputDirectory"><span data-ttu-id="92bf7-144">目录，在其中创建具有代理的新 C# 源代码文件。</span><span class="sxs-lookup"><span data-stu-id="92bf7-144">The directory where the new C# source code files with the proxy are created.</span></span></param>
        <param name="inputStream"><span data-ttu-id="92bf7-145">输入流，包含 Web 服务描述语言 (WSDL) 格式的架构定义。</span><span class="sxs-lookup"><span data-stu-id="92bf7-145">The input stream containing the schema definition in Web Services Description Language (WSDL) format.</span></span></param>
        <param name="outCodeStreamList"><span data-ttu-id="92bf7-146">生成的代码流的文件名列表。</span><span class="sxs-lookup"><span data-stu-id="92bf7-146">The list of file names for the code streams that are generated.</span></span> <span data-ttu-id="92bf7-147">请注意，<see cref="M:System.Runtime.Remoting.MetadataServices.MetaData.ConvertSchemaStreamToCodeSourceStream(System.Boolean,System.String,System.IO.Stream,System.Collections.ArrayList,System.String,System.String)" /> 方法可以创建多个源代码流。</span><span class="sxs-lookup"><span data-stu-id="92bf7-147">Note that the <see cref="M:System.Runtime.Remoting.MetadataServices.MetaData.ConvertSchemaStreamToCodeSourceStream(System.Boolean,System.String,System.IO.Stream,System.Collections.ArrayList,System.String,System.String)" /> method can create multiple source code streams.</span></span></param>
        <param name="proxyUrl"><span data-ttu-id="92bf7-148">由新代理表示的目标远程对象所在的 URL。</span><span class="sxs-lookup"><span data-stu-id="92bf7-148">The URL where the target remote object that is represented by the new proxy will be located.</span></span></param>
        <param name="proxyNamespace"><span data-ttu-id="92bf7-149">新创建的代理的命名空间。</span><span class="sxs-lookup"><span data-stu-id="92bf7-149">The namespace of the newly created proxy.</span></span></param>
        <summary><span data-ttu-id="92bf7-150">将指定的架构定义转换为位于指定 URL 并处于所提供的类命名空间中的远程对象的 C# 代理源代码。</span><span class="sxs-lookup"><span data-stu-id="92bf7-150">Converts the specified schema definition into C# proxy source code for a remote object that is located at the specified URL and in the provided class namespace.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="92bf7-151">如果具有指定名称的文件已存在，则将覆盖这些文件。</span><span class="sxs-lookup"><span data-stu-id="92bf7-151">If files with the specified names already exist, they are overwritten.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ConvertTypesToSchemaToFile">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Remoting</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="92bf7-152">将指定的类型转换为 XML 架构，并将其写入文件。</span><span class="sxs-lookup"><span data-stu-id="92bf7-152">Converts the specified types to XML schema, and writes it to a file.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ConvertTypesToSchemaToFile">
      <MemberSignature Language="C#" Value="public static void ConvertTypesToSchemaToFile (System.Runtime.Remoting.MetadataServices.ServiceType[] types, System.Runtime.Remoting.MetadataServices.SdlType sdlType, string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ConvertTypesToSchemaToFile(class System.Runtime.Remoting.MetadataServices.ServiceType[] types, valuetype System.Runtime.Remoting.MetadataServices.SdlType sdlType, string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.MetadataServices.MetaData.ConvertTypesToSchemaToFile(System.Runtime.Remoting.MetadataServices.ServiceType[],System.Runtime.Remoting.MetadataServices.SdlType,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ConvertTypesToSchemaToFile (types As ServiceType(), sdlType As SdlType, path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ConvertTypesToSchemaToFile(cli::array &lt;System::Runtime::Remoting::MetadataServices::ServiceType ^&gt; ^ types, System::Runtime::Remoting::MetadataServices::SdlType sdlType, System::String ^ path);" />
      <MemberSignature Language="F#" Value="static member ConvertTypesToSchemaToFile : System.Runtime.Remoting.MetadataServices.ServiceType[] * System.Runtime.Remoting.MetadataServices.SdlType * string -&gt; unit" Usage="System.Runtime.Remoting.MetadataServices.MetaData.ConvertTypesToSchemaToFile (types, sdlType, path)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Remoting</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="types" Type="System.Runtime.Remoting.MetadataServices.ServiceType[]" />
        <Parameter Name="sdlType" Type="System.Runtime.Remoting.MetadataServices.SdlType" />
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="types"><span data-ttu-id="92bf7-153">要转换为 XML 架构的 <see cref="T:System.Runtime.Remoting.MetadataServices.ServiceType" /> 实例。</span><span class="sxs-lookup"><span data-stu-id="92bf7-153">The <see cref="T:System.Runtime.Remoting.MetadataServices.ServiceType" /> instances to convert to XML schema.</span></span></param>
        <param name="sdlType"><span data-ttu-id="92bf7-154">用于 XML 架构的服务描述语言的类型。</span><span class="sxs-lookup"><span data-stu-id="92bf7-154">The type of service description language to use for the XML schema.</span></span></param>
        <param name="path"><span data-ttu-id="92bf7-155">XML 文件的路径。</span><span class="sxs-lookup"><span data-stu-id="92bf7-155">The path of the XML file.</span></span></param>
        <summary><span data-ttu-id="92bf7-156">将指定的服务类型转换为 XML 架构，并将其写入由名称指定的文件。</span><span class="sxs-lookup"><span data-stu-id="92bf7-156">Converts the specified service types to XML schema, and writes it to a file that is specified by name.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92bf7-157"><xref:System.Runtime.Remoting.MetadataServices.ServiceType> 实例允许您将 URL 与 <xref:System.Type>的对象相关联。</span><span class="sxs-lookup"><span data-stu-id="92bf7-157">A <xref:System.Runtime.Remoting.MetadataServices.ServiceType> instance allows you to associate a URL with an object <xref:System.Type>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="92bf7-158">如果已存在具有指定名称的文件，则将覆盖该文件。</span><span class="sxs-lookup"><span data-stu-id="92bf7-158">If a file with the specified name already exists, it is overwritten.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConvertTypesToSchemaToFile">
      <MemberSignature Language="C#" Value="public static void ConvertTypesToSchemaToFile (Type[] types, System.Runtime.Remoting.MetadataServices.SdlType sdlType, string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ConvertTypesToSchemaToFile(class System.Type[] types, valuetype System.Runtime.Remoting.MetadataServices.SdlType sdlType, string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.MetadataServices.MetaData.ConvertTypesToSchemaToFile(System.Type[],System.Runtime.Remoting.MetadataServices.SdlType,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ConvertTypesToSchemaToFile (types As Type(), sdlType As SdlType, path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ConvertTypesToSchemaToFile(cli::array &lt;Type ^&gt; ^ types, System::Runtime::Remoting::MetadataServices::SdlType sdlType, System::String ^ path);" />
      <MemberSignature Language="F#" Value="static member ConvertTypesToSchemaToFile : Type[] * System.Runtime.Remoting.MetadataServices.SdlType * string -&gt; unit" Usage="System.Runtime.Remoting.MetadataServices.MetaData.ConvertTypesToSchemaToFile (types, sdlType, path)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Remoting</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="sdlType" Type="System.Runtime.Remoting.MetadataServices.SdlType" />
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="types"><span data-ttu-id="92bf7-159">要转换为 XML 架构的对象类型。</span><span class="sxs-lookup"><span data-stu-id="92bf7-159">The object types to convert to XML schema.</span></span></param>
        <param name="sdlType"><span data-ttu-id="92bf7-160">用于 XML 架构的服务描述语言的类型。</span><span class="sxs-lookup"><span data-stu-id="92bf7-160">The type of service description language to use for the XML schema.</span></span></param>
        <param name="path"><span data-ttu-id="92bf7-161">XML 文件的路径。</span><span class="sxs-lookup"><span data-stu-id="92bf7-161">The path of the XML file.</span></span></param>
        <summary><span data-ttu-id="92bf7-162">将指定的对象类型转换为 XML 架构，并将其写入由名称指定的文件。</span><span class="sxs-lookup"><span data-stu-id="92bf7-162">Converts the specified object types to XML schema, and writes it to a file that is specified by name.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="92bf7-163">如果已存在具有指定名称的文件，则将覆盖该文件。</span><span class="sxs-lookup"><span data-stu-id="92bf7-163">If a file with the specified name already exists, it is overwritten.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="92bf7-164">下面的代码示例演示如何使用 <xref:System.Runtime.Remoting.MetadataServices.MetaData.ConvertTypesToSchemaToFile%2A> 方法将指定类型的架构定义写入文件。</span><span class="sxs-lookup"><span data-stu-id="92bf7-164">The following code example demonstrates the use of the <xref:System.Runtime.Remoting.MetadataServices.MetaData.ConvertTypesToSchemaToFile%2A> method to write the schema definition of the specified types to a file.</span></span>  
  
 [!code-cpp[MetaData.ConvertTypesToSchemaToFile#1](~/samples/snippets/cpp/VS_Snippets_Remoting/MetaData.ConvertTypesToSchemaToFile/CPP/source.cpp#1)]
 [!code-csharp[MetaData.ConvertTypesToSchemaToFile#1](~/samples/snippets/csharp/VS_Snippets_Remoting/MetaData.ConvertTypesToSchemaToFile/CS/source.cs#1)]
 [!code-vb[MetaData.ConvertTypesToSchemaToFile#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/MetaData.ConvertTypesToSchemaToFile/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ConvertTypesToSchemaToStream">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Remoting</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="92bf7-165">将指定的类型转换为 XML 架构，并将其写入流。</span><span class="sxs-lookup"><span data-stu-id="92bf7-165">Converts the specified types to XML schema, and writes it to a stream.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ConvertTypesToSchemaToStream">
      <MemberSignature Language="C#" Value="public static void ConvertTypesToSchemaToStream (System.Runtime.Remoting.MetadataServices.ServiceType[] serviceTypes, System.Runtime.Remoting.MetadataServices.SdlType sdlType, System.IO.Stream outputStream);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ConvertTypesToSchemaToStream(class System.Runtime.Remoting.MetadataServices.ServiceType[] serviceTypes, valuetype System.Runtime.Remoting.MetadataServices.SdlType sdlType, class System.IO.Stream outputStream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.MetadataServices.MetaData.ConvertTypesToSchemaToStream(System.Runtime.Remoting.MetadataServices.ServiceType[],System.Runtime.Remoting.MetadataServices.SdlType,System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ConvertTypesToSchemaToStream (serviceTypes As ServiceType(), sdlType As SdlType, outputStream As Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ConvertTypesToSchemaToStream(cli::array &lt;System::Runtime::Remoting::MetadataServices::ServiceType ^&gt; ^ serviceTypes, System::Runtime::Remoting::MetadataServices::SdlType sdlType, System::IO::Stream ^ outputStream);" />
      <MemberSignature Language="F#" Value="static member ConvertTypesToSchemaToStream : System.Runtime.Remoting.MetadataServices.ServiceType[] * System.Runtime.Remoting.MetadataServices.SdlType * System.IO.Stream -&gt; unit" Usage="System.Runtime.Remoting.MetadataServices.MetaData.ConvertTypesToSchemaToStream (serviceTypes, sdlType, outputStream)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Remoting</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceTypes" Type="System.Runtime.Remoting.MetadataServices.ServiceType[]" />
        <Parameter Name="sdlType" Type="System.Runtime.Remoting.MetadataServices.SdlType" />
        <Parameter Name="outputStream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="serviceTypes"><span data-ttu-id="92bf7-166">要转换为 XML 架构的 <see cref="T:System.Runtime.Remoting.MetadataServices.ServiceType" /> 实例。</span><span class="sxs-lookup"><span data-stu-id="92bf7-166">The <see cref="T:System.Runtime.Remoting.MetadataServices.ServiceType" /> instances to convert to XML schema.</span></span></param>
        <param name="sdlType"><span data-ttu-id="92bf7-167">用于 XML 架构的服务描述语言的类型。</span><span class="sxs-lookup"><span data-stu-id="92bf7-167">The type of service description language to use for the XML schema.</span></span></param>
        <param name="outputStream"><span data-ttu-id="92bf7-168">架构写入的 <see cref="T:System.IO.Stream" />。</span><span class="sxs-lookup"><span data-stu-id="92bf7-168">The <see cref="T:System.IO.Stream" /> that the schema is written to.</span></span></param>
        <summary><span data-ttu-id="92bf7-169">将指定的服务类型转换为 XML 架构，并将其写入指定流。</span><span class="sxs-lookup"><span data-stu-id="92bf7-169">Converts the specified service types to XML schema, and writes it to a specified stream.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92bf7-170"><xref:System.Runtime.Remoting.MetadataServices.ServiceType> 实例允许您将 URL 与 <xref:System.Type>的对象相关联。</span><span class="sxs-lookup"><span data-stu-id="92bf7-170">A <xref:System.Runtime.Remoting.MetadataServices.ServiceType> instance allows you to associate a URL with an object <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConvertTypesToSchemaToStream">
      <MemberSignature Language="C#" Value="public static void ConvertTypesToSchemaToStream (Type[] types, System.Runtime.Remoting.MetadataServices.SdlType sdlType, System.IO.Stream outputStream);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ConvertTypesToSchemaToStream(class System.Type[] types, valuetype System.Runtime.Remoting.MetadataServices.SdlType sdlType, class System.IO.Stream outputStream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.MetadataServices.MetaData.ConvertTypesToSchemaToStream(System.Type[],System.Runtime.Remoting.MetadataServices.SdlType,System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ConvertTypesToSchemaToStream (types As Type(), sdlType As SdlType, outputStream As Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ConvertTypesToSchemaToStream(cli::array &lt;Type ^&gt; ^ types, System::Runtime::Remoting::MetadataServices::SdlType sdlType, System::IO::Stream ^ outputStream);" />
      <MemberSignature Language="F#" Value="static member ConvertTypesToSchemaToStream : Type[] * System.Runtime.Remoting.MetadataServices.SdlType * System.IO.Stream -&gt; unit" Usage="System.Runtime.Remoting.MetadataServices.MetaData.ConvertTypesToSchemaToStream (types, sdlType, outputStream)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Remoting</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="sdlType" Type="System.Runtime.Remoting.MetadataServices.SdlType" />
        <Parameter Name="outputStream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="types"><span data-ttu-id="92bf7-171">要转换为 XML 架构的对象类型。</span><span class="sxs-lookup"><span data-stu-id="92bf7-171">The object types to convert to XML schema.</span></span></param>
        <param name="sdlType"><span data-ttu-id="92bf7-172">用于 XML 架构的服务描述语言的类型。</span><span class="sxs-lookup"><span data-stu-id="92bf7-172">The type of service description language to use for the XML schema.</span></span></param>
        <param name="outputStream"><span data-ttu-id="92bf7-173">架构写入的 <see cref="T:System.IO.Stream" />。</span><span class="sxs-lookup"><span data-stu-id="92bf7-173">The <see cref="T:System.IO.Stream" /> that the schema is written to.</span></span></param>
        <summary><span data-ttu-id="92bf7-174">将指定的对象类型转换为 XML 架构，并将其写入指定流。</span><span class="sxs-lookup"><span data-stu-id="92bf7-174">Converts the specified object types to XML schema, and writes it to a specified stream.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="92bf7-175">下面的代码示例演示如何使用 <xref:System.Runtime.Remoting.MetadataServices.MetaData.ConvertTypesToSchemaToStream%2A> 方法将指定类型的架构定义写入流中。</span><span class="sxs-lookup"><span data-stu-id="92bf7-175">The following code example demonstrates the use of the <xref:System.Runtime.Remoting.MetadataServices.MetaData.ConvertTypesToSchemaToStream%2A> method to write the schema definition of the specified types to a stream.</span></span>  
  
 [!code-cpp[MetaData.ConvertTypesToSchemaToStream#1](~/samples/snippets/cpp/VS_Snippets_Remoting/MetaData.ConvertTypesToSchemaToStream/CPP/source.cpp#1)]
 [!code-csharp[MetaData.ConvertTypesToSchemaToStream#1](~/samples/snippets/csharp/VS_Snippets_Remoting/MetaData.ConvertTypesToSchemaToStream/CS/source.cs#1)]
 [!code-vb[MetaData.ConvertTypesToSchemaToStream#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/MetaData.ConvertTypesToSchemaToStream/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RetrieveSchemaFromUrlToFile">
      <MemberSignature Language="C#" Value="public static void RetrieveSchemaFromUrlToFile (string url, string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RetrieveSchemaFromUrlToFile(string url, string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.MetadataServices.MetaData.RetrieveSchemaFromUrlToFile(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RetrieveSchemaFromUrlToFile (url As String, path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RetrieveSchemaFromUrlToFile(System::String ^ url, System::String ^ path);" />
      <MemberSignature Language="F#" Value="static member RetrieveSchemaFromUrlToFile : string * string -&gt; unit" Usage="System.Runtime.Remoting.MetadataServices.MetaData.RetrieveSchemaFromUrlToFile (url, path)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Remoting</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="url" Type="System.String" />
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="url"><span data-ttu-id="92bf7-176">XML 架构所在的 URL。</span><span class="sxs-lookup"><span data-stu-id="92bf7-176">The URL where the XML schema is located.</span></span></param>
        <param name="path"><span data-ttu-id="92bf7-177">架构写入的文件的路径。</span><span class="sxs-lookup"><span data-stu-id="92bf7-177">The path of the file that the schema is written to.</span></span></param>
        <summary><span data-ttu-id="92bf7-178">从某个 URL 下载 XML 架构，并将其写入指定文件。</span><span class="sxs-lookup"><span data-stu-id="92bf7-178">Downloads the XML schema from a URL, and writes it to the specified file.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="92bf7-179">如果已存在具有指定名称的文件，则将覆盖该文件。</span><span class="sxs-lookup"><span data-stu-id="92bf7-179">If a file with the specified name already exists, it is overwritten.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RetrieveSchemaFromUrlToStream">
      <MemberSignature Language="C#" Value="public static void RetrieveSchemaFromUrlToStream (string url, System.IO.Stream outputStream);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RetrieveSchemaFromUrlToStream(string url, class System.IO.Stream outputStream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.MetadataServices.MetaData.RetrieveSchemaFromUrlToStream(System.String,System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RetrieveSchemaFromUrlToStream (url As String, outputStream As Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RetrieveSchemaFromUrlToStream(System::String ^ url, System::IO::Stream ^ outputStream);" />
      <MemberSignature Language="F#" Value="static member RetrieveSchemaFromUrlToStream : string * System.IO.Stream -&gt; unit" Usage="System.Runtime.Remoting.MetadataServices.MetaData.RetrieveSchemaFromUrlToStream (url, outputStream)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Remoting</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="url" Type="System.String" />
        <Parameter Name="outputStream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="url"><span data-ttu-id="92bf7-180">XML 架构所在的 URL。</span><span class="sxs-lookup"><span data-stu-id="92bf7-180">The URL where the XML schema is located.</span></span></param>
        <param name="outputStream"><span data-ttu-id="92bf7-181">架构写入的 <see cref="T:System.IO.Stream" />。</span><span class="sxs-lookup"><span data-stu-id="92bf7-181">The <see cref="T:System.IO.Stream" /> that the schema is written to.</span></span></param>
        <summary><span data-ttu-id="92bf7-182">从某个 URL 下载 XML 架构，并将其写入指定流。</span><span class="sxs-lookup"><span data-stu-id="92bf7-182">Downloads the XML schema from a URL, and writes it to the specified stream.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SaveStreamToFile">
      <MemberSignature Language="C#" Value="public static void SaveStreamToFile (System.IO.Stream inputStream, string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SaveStreamToFile(class System.IO.Stream inputStream, string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.MetadataServices.MetaData.SaveStreamToFile(System.IO.Stream,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SaveStreamToFile (inputStream As Stream, path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SaveStreamToFile(System::IO::Stream ^ inputStream, System::String ^ path);" />
      <MemberSignature Language="F#" Value="static member SaveStreamToFile : System.IO.Stream * string -&gt; unit" Usage="System.Runtime.Remoting.MetadataServices.MetaData.SaveStreamToFile (inputStream, path)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Remoting</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputStream" Type="System.IO.Stream" />
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="inputStream"><span data-ttu-id="92bf7-183">要写入指定文件的流。</span><span class="sxs-lookup"><span data-stu-id="92bf7-183">The stream to write to the specified file.</span></span></param>
        <param name="path"><span data-ttu-id="92bf7-184">输入流写入的文件。</span><span class="sxs-lookup"><span data-stu-id="92bf7-184">The file that the input stream is written to.</span></span></param>
        <summary><span data-ttu-id="92bf7-185">将输入流保存到具有指定名称的文件。</span><span class="sxs-lookup"><span data-stu-id="92bf7-185">Saves the input stream to a file with the specified name.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="92bf7-186">如果已存在具有指定名称的文件，则将覆盖该文件。</span><span class="sxs-lookup"><span data-stu-id="92bf7-186">If a file with the specified name already exists, it is overwritten.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
