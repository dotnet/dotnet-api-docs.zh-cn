<Type Name="Graphics+DrawImageAbort" FullName="System.Drawing.Graphics+DrawImageAbort">
  <Metadata><Meta Name="ms.openlocfilehash" Value="b355c4c61c0aa1939a4ca3b9ad9812bcbc185f51" /><Meta Name="ms.sourcegitcommit" Value="b53d35b4a410c949742abd4c6a989d1af5357bca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="86819393" /></Metadata><TypeSignature Language="C#" Value="public delegate bool Graphics.DrawImageAbort(IntPtr callbackdata);" />
  <TypeSignature Language="ILAsm" Value=".class nested public auto ansi sealed Graphics/DrawImageAbort extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Drawing.Graphics.DrawImageAbort" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Function Graphics.DrawImageAbort(callbackdata As IntPtr) As Boolean " />
  <TypeSignature Language="C++ CLI" Value="public: delegate bool Graphics::DrawImageAbort(IntPtr callbackdata);" />
  <TypeSignature Language="F#" Value="type Graphics.DrawImageAbort = delegate of nativeint -&gt; bool" />
  <AssemblyInfo>
    <AssemblyName>System.Drawing</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Drawing.Common</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.1</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
    <AssemblyVersion>4.0.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1">
      <AttributeName Language="C#">[System.Runtime.InteropServices.ComVisible(false)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.ComVisible(false)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Parameters>
    <Parameter Name="callbackdata" Type="System.IntPtr" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Boolean</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="callbackdata">指定回调方法数据的内部指针。 该参数不是由所有的 <see cref="Overload:System.Drawing.Graphics.DrawImage" /> 重载传递的。 可以通过检查 <see cref="F:System.IntPtr.Zero" /> 值来测试它是否存在。</param>
    <summary>提供一个回调方法，用于决定 <see cref="Overload:System.Drawing.Graphics.DrawImage" /> 方法应何时过早地取消执行并停止绘制图像。</summary>
    <returns>如果此方法决定 <see cref="Overload:System.Drawing.Graphics.DrawImage" /> 方法应过早停止执行，则此方法返回 <see langword="true" />。 否则返回 <see langword="false" />，指示 <see cref="Overload:System.Drawing.Graphics.DrawImage" /> 方法应继续执行。</returns>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法与类的方法结合使用 <xref:System.Drawing.Graphics.DrawImage%2A> <xref:System.Drawing.Graphics> 。 方法的某些重载 <xref:System.Drawing.Graphics.DrawImage%2A> 调用此类型的应用程序定义的回调方法，以查明重载应停止还是继续执行。  
  
 在执行期间，相关 <xref:System.Drawing.Graphics.DrawImage%2A> 重载会频繁调用此回调方法，以查明是否应停止绘制指定的图像，或是否应继续绘制图像。 <xref:System.Drawing.Graphics.DrawImageAbort>回调方法可以确定是继续还是不基于其中包含的所选算法，还可以选择使用通过 callbackdata 参数传递给它的数据。 例如，算法可以确定图像是否已滚动到屏幕，并向方法发出取消信号以 <xref:System.Drawing.Graphics.DrawImage%2A> 停止绘制。  
  
 此事件处理方法的用户声明必须具有与委托声明相同的参数 <xref:System.Drawing.Graphics.DrawImageAbort> 。  
  
   
  
## Examples  
 此示例是委托的简单实现 <xref:System.Drawing.Graphics.DrawImageAbort> 。 它仅检查 <xref:System.Drawing.Graphics.DrawImage%2A> 方法是否已使用 callbackdata 参数向其传递数据。  (某些 <xref:System.Drawing.Graphics.DrawImage%2A> 重载只包含一个 `DrawImageAbort` 参数并且未传递任何数据; 某些重载具有 `DrawImageAbort` 和 `callbackdata` 参数并且可以传递数据。如果未传递任何数据，则 ) 如果未传递任何数据，它将返回 `true` 到调用方法的信号，该 <xref:System.Drawing.Graphics.DrawImage%2A> 方法应取消绘制。 如果传递了数据，则它会返回 `false` 信号，指示绘制应继续。  
  
 此回调的现实实现涉及某些条件的实际审查，以取消或继续执行。  
  
```vb  
Private Function DrawImageCallback(callBackData As IntPtr) As Boolean  
     ' Test for call that passes callBackData parameter.  
     If callBackData.Equals(IntPtr.Zero) Then  
         ' If no callBackData passed, abort DrawImage method.  
         Return True  
     Else  
         ' If callBackData passed, continue DrawImage method.  
         Return False  
     End If  
 End Function 'DrawImageCallback  
```  
  
```csharp  
// Define DrawImageAbort callback method.  
 private bool DrawImageCallback(IntPtr callbackdata)  
 {  
    // Test for call that passes callBackData parameter.  
    if(callbackdata==IntPtr.Zero)  
    {  
       // If no callbackdata passed, cancel DrawImage method.  
       return true;  
    }  
    else  
    {  
       // If callbackdata passed, continue DrawImage method.  
       return false;  
    }  
 }  
```  
  
 ]]></format>
    </remarks>
  </Docs>
</Type>
