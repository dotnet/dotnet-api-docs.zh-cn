<Type Name="BufferedGraphics" FullName="System.Drawing.BufferedGraphics">
  <Metadata><Meta Name="ms.openlocfilehash" Value="2015fc6e725325f6a6c2299447c3ef75e07ab9e2" /><Meta Name="ms.sourcegitcommit" Value="b53d35b4a410c949742abd4c6a989d1af5357bca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="86819666" /></Metadata><TypeSignature Language="C#" Value="public sealed class BufferedGraphics : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit BufferedGraphics extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Drawing.BufferedGraphics" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class BufferedGraphics&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class BufferedGraphics sealed : IDisposable" />
  <TypeSignature Language="F#" Value="type BufferedGraphics = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Drawing</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Drawing.Common</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.1</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
    <AssemblyVersion>4.0.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="7b0e9-101">为双缓冲提供图形缓冲区。</span><span class="sxs-lookup"><span data-stu-id="7b0e9-101">Provides a graphics buffer for double buffering.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7b0e9-102"><xref:System.Drawing.BufferedGraphics>类允许您为图形实现自定义双缓冲。</span><span class="sxs-lookup"><span data-stu-id="7b0e9-102">The <xref:System.Drawing.BufferedGraphics> class allows you to implement custom double buffering for your graphics.</span></span> <span data-ttu-id="7b0e9-103">它为图形缓冲区提供包装器，以及可用于写入缓冲区并将其内容呈现到输出设备的方法。</span><span class="sxs-lookup"><span data-stu-id="7b0e9-103">It provides a wrapper for a graphics buffer, along with methods that you can use to write to the buffer and render its contents to an output device.</span></span>  
  
 <span data-ttu-id="7b0e9-104">使用双缓冲的图形可以减少或消除因重绘显示图面而引起的闪烁。</span><span class="sxs-lookup"><span data-stu-id="7b0e9-104">Graphics that use double buffering can reduce or eliminate flicker that is caused by redrawing a display surface.</span></span> <span data-ttu-id="7b0e9-105">使用双缓冲时，更新的图形将首先绘制到内存中的缓冲区，然后将此缓冲区的内容快速写入到部分或全部显示的图面。</span><span class="sxs-lookup"><span data-stu-id="7b0e9-105">When you use double buffering, updated graphics are first drawn to a buffer in memory, and the contents of this buffer are then quickly written to some or all of the displayed surface.</span></span> <span data-ttu-id="7b0e9-106">所显示图形的这一相对短暂的覆盖通常会减少或消除在更新图形时有时会发生的闪烁。</span><span class="sxs-lookup"><span data-stu-id="7b0e9-106">This relatively brief overwrite of the displayed graphics typically reduces or eliminates the flicker that sometimes occurs when graphics are updated.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7b0e9-107">使用双缓冲的最简单方法是 <xref:System.Windows.Forms.ControlStyles.OptimizedDoubleBuffer> 使用方法在控件上设置控件样式标志 <xref:System.Windows.Forms.Control.SetStyle%2A> 。</span><span class="sxs-lookup"><span data-stu-id="7b0e9-107">The simplest way to use double buffering is to set the <xref:System.Windows.Forms.ControlStyles.OptimizedDoubleBuffer> control style flag on a control using the <xref:System.Windows.Forms.Control.SetStyle%2A> method.</span></span> <span data-ttu-id="7b0e9-108">设置 <xref:System.Windows.Forms.ControlStyles.OptimizedDoubleBuffer> 控件标志会通过默认的图形缓冲区重定向控件的所有绘制，而无需任何其他代码。</span><span class="sxs-lookup"><span data-stu-id="7b0e9-108">Setting the <xref:System.Windows.Forms.ControlStyles.OptimizedDoubleBuffer> flag for a control redirects all painting for the control through a default graphics buffer, without requiring any additional code.</span></span> <span data-ttu-id="7b0e9-109">默认情况下，此标志设置为 `true` 。</span><span class="sxs-lookup"><span data-stu-id="7b0e9-109">This flag is set to `true` by default.</span></span>  
  
 <span data-ttu-id="7b0e9-110"><xref:System.Drawing.BufferedGraphics>类没有公共构造函数，并且必须 <xref:System.Drawing.BufferedGraphicsContext> 使用其方法为应用程序域创建 <xref:System.Drawing.BufferedGraphicsContext.Allocate%2A> 。</span><span class="sxs-lookup"><span data-stu-id="7b0e9-110">The <xref:System.Drawing.BufferedGraphics> class has no public constructor and must be created by the <xref:System.Drawing.BufferedGraphicsContext> for an application domain using its <xref:System.Drawing.BufferedGraphicsContext.Allocate%2A> method.</span></span> <span data-ttu-id="7b0e9-111">可以 <xref:System.Drawing.BufferedGraphicsContext> 从静态属性中检索当前应用程序域的 <xref:System.Drawing.BufferedGraphicsManager.Current%2A?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="7b0e9-111">You can retrieve the <xref:System.Drawing.BufferedGraphicsContext> for the current application domain from the static <xref:System.Drawing.BufferedGraphicsManager.Current%2A?displayProperty=nameWithType> property.</span></span>  
  
 <span data-ttu-id="7b0e9-112"><xref:System.Drawing.BufferedGraphics.Graphics%2A>属性可用于绘制到图形缓冲区。</span><span class="sxs-lookup"><span data-stu-id="7b0e9-112">The <xref:System.Drawing.BufferedGraphics.Graphics%2A> property can be used for drawing to the graphics buffer.</span></span> <span data-ttu-id="7b0e9-113">此属性提供对 <xref:System.Drawing.Graphics> 对象的访问，该对象绘制到为该对象分配的图形缓冲区 <xref:System.Drawing.BufferedGraphics> 。</span><span class="sxs-lookup"><span data-stu-id="7b0e9-113">This property provides access to the <xref:System.Drawing.Graphics> object that draws to the graphics buffer allocated for this <xref:System.Drawing.BufferedGraphics> object.</span></span>  
  
 <span data-ttu-id="7b0e9-114"><xref:System.Drawing.BufferedGraphics.Render%2A>不带参数的方法会将图形缓冲区的内容绘制到在分配缓冲区时指定的图面。</span><span class="sxs-lookup"><span data-stu-id="7b0e9-114">The <xref:System.Drawing.BufferedGraphics.Render%2A> method with no arguments draws the contents of the graphics buffer to the surface specified when the buffer was allocated.</span></span> <span data-ttu-id="7b0e9-115">使用方法的其他重载 <xref:System.Drawing.BufferedGraphics.Render%2A> ，可以指定一个 <xref:System.Drawing.Graphics> 对象或 <xref:System.IntPtr> 对象，该对象指向要将图形缓冲区内容绘制到的设备上下文。</span><span class="sxs-lookup"><span data-stu-id="7b0e9-115">Other overloads of the <xref:System.Drawing.BufferedGraphics.Render%2A> method allow you to specify a <xref:System.Drawing.Graphics> object or an <xref:System.IntPtr> object that points to a device context to which to draw the contents of the graphics buffer.</span></span>  
  
 <span data-ttu-id="7b0e9-116">有关绘制双缓冲图形的详细信息，请参阅 [双缓冲图形](/dotnet/framework/winforms/advanced/double-buffered-graphics)。</span><span class="sxs-lookup"><span data-stu-id="7b0e9-116">For more information about drawing double-buffered graphics, see [Double Buffered Graphics](/dotnet/framework/winforms/advanced/double-buffered-graphics).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7b0e9-117">下面的代码示例演示如何使用 <xref:System.Drawing.BufferedGraphics> 对象通过多种类型的缓冲实现来绘制图形。</span><span class="sxs-lookup"><span data-stu-id="7b0e9-117">The following code example demonstrates using a <xref:System.Drawing.BufferedGraphics> object to draw graphics using several types of buffering implementations.</span></span> <span data-ttu-id="7b0e9-118">再次单击窗体将启动和停止导致绘图更新的计时器。</span><span class="sxs-lookup"><span data-stu-id="7b0e9-118">Clicking the form alternately starts and stops a timer that causes draw updates.</span></span> <span data-ttu-id="7b0e9-119">通过 "绘图更新"，可以观察双缓冲的效果。</span><span class="sxs-lookup"><span data-stu-id="7b0e9-119">The draw updates allow you to observe the effect of double buffering.</span></span> <span data-ttu-id="7b0e9-120">右键单击窗体将循环切换为以下绘图模式：</span><span class="sxs-lookup"><span data-stu-id="7b0e9-120">Right-clicking the form cycles through the following drawing modes:</span></span>  
  
-   <span data-ttu-id="7b0e9-121">直接绘制到的 <xref:System.Windows.Forms.Control.Handle%2A> <xref:System.Windows.Forms.Form> 。</span><span class="sxs-lookup"><span data-stu-id="7b0e9-121">Drawing directly to the <xref:System.Windows.Forms.Control.Handle%2A> for a <xref:System.Windows.Forms.Form>.</span></span>  
  
-   <span data-ttu-id="7b0e9-122"><xref:System.Windows.Forms.Form.OnPaint%2A>使用控件样式重写方法，以进行绘制 <xref:System.Windows.Forms.ControlStyles.OptimizedDoubleBuffer> 。</span><span class="sxs-lookup"><span data-stu-id="7b0e9-122">Drawing by overriding the <xref:System.Windows.Forms.Form.OnPaint%2A> method using the <xref:System.Windows.Forms.ControlStyles.OptimizedDoubleBuffer> control style.</span></span>  
  
-   <span data-ttu-id="7b0e9-123">通过 <xref:System.Windows.Forms.Form.OnPaint%2A> 在不使用控件样式的情况下重写窗体方法的方法来进行绘制 <xref:System.Windows.Forms.ControlStyles.OptimizedDoubleBuffer> 。</span><span class="sxs-lookup"><span data-stu-id="7b0e9-123">Drawing by overriding the <xref:System.Windows.Forms.Form.OnPaint%2A> method for the form method without using the <xref:System.Windows.Forms.ControlStyles.OptimizedDoubleBuffer> control style.</span></span>  
  
 <span data-ttu-id="7b0e9-124">在每个模式下，绘制的文本用于标识当前模式，并描述按下鼠标按钮时发生的行为。</span><span class="sxs-lookup"><span data-stu-id="7b0e9-124">In each mode, text is drawn that identifies the current mode and describes the behavior that occurs when each mouse button is pressed.</span></span>  
  
 [!code-cpp[BufferedGraphicsExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/BufferedGraphicsExample/CPP/bufferingtest.cpp#1)]
 [!code-csharp[BufferedGraphicsExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/BufferedGraphicsExample/CS/bufferingtest.cs#1)]
 [!code-vb[BufferedGraphicsExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/BufferedGraphicsExample/VB/bufferingtest.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="7b0e9-125"><see cref="T:System.Drawing.BufferedGraphics" /> 类不是线程安全的。</span><span class="sxs-lookup"><span data-stu-id="7b0e9-125">The <see cref="T:System.Drawing.BufferedGraphics" /> class is not thread safe.</span></span> <span data-ttu-id="7b0e9-126">从不同的线程访问图形缓冲区时，使用线程访问控制机制来防止冲突很重要。</span><span class="sxs-lookup"><span data-stu-id="7b0e9-126">When accessing a graphics buffer from separate threads, it is important to use a thread-access control mechanism to prevent conflicts.</span></span></threadsafe>
    <related type="Article" href="/dotnet/framework/winforms/advanced/double-buffered-graphics"><span data-ttu-id="7b0e9-127">双缓冲图形</span><span class="sxs-lookup"><span data-stu-id="7b0e9-127">Double Buffered Graphics</span></span></related>
  </Docs>
  <Members>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.BufferedGraphics.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="bufferedGraphics.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7b0e9-128">释放 <see cref="T:System.Drawing.BufferedGraphics" /> 对象使用的所有资源。</span><span class="sxs-lookup"><span data-stu-id="7b0e9-128">Releases all resources used by the <see cref="T:System.Drawing.BufferedGraphics" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7b0e9-129"><xref:System.Drawing.BufferedGraphics.Dispose%2A>使用完对象后调用 <xref:System.Drawing.BufferedGraphics> 。</span><span class="sxs-lookup"><span data-stu-id="7b0e9-129">Call <xref:System.Drawing.BufferedGraphics.Dispose%2A> when you are finished using the <xref:System.Drawing.BufferedGraphics> object.</span></span> <span data-ttu-id="7b0e9-130"><xref:System.Drawing.BufferedGraphics.Dispose%2A>方法使 <xref:System.Drawing.BufferedGraphics> 对象处于不可用状态。</span><span class="sxs-lookup"><span data-stu-id="7b0e9-130">The <xref:System.Drawing.BufferedGraphics.Dispose%2A> method leaves the <xref:System.Drawing.BufferedGraphics> object in an unusable state.</span></span> <span data-ttu-id="7b0e9-131">调用后 <xref:System.Drawing.BufferedGraphics.Dispose%2A> ，必须释放对对象的所有引用， <xref:System.Drawing.BufferedGraphics> 以便垃圾回收器可以回收对象占用的内存 <xref:System.Drawing.BufferedGraphics> 。</span><span class="sxs-lookup"><span data-stu-id="7b0e9-131">After calling <xref:System.Drawing.BufferedGraphics.Dispose%2A>, you must release all references to the <xref:System.Drawing.BufferedGraphics> object so the garbage collector can reclaim the memory that the <xref:System.Drawing.BufferedGraphics> object was occupying.</span></span> <span data-ttu-id="7b0e9-132">有关详细信息，请参阅 [清理非托管资源](/dotnet/standard/garbage-collection/unmanaged) 和 [实现 Dispose 方法](/dotnet/standard/garbage-collection/implementing-dispose)。</span><span class="sxs-lookup"><span data-stu-id="7b0e9-132">For more information, see [Cleaning Up Unmanaged Resources](/dotnet/standard/garbage-collection/unmanaged) and [Implementing a Dispose Method](/dotnet/standard/garbage-collection/implementing-dispose).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7b0e9-133"><xref:System.Drawing.BufferedGraphics.Dispose%2A>在释放对对象的最后一个引用之前，始终调用 <xref:System.Drawing.BufferedGraphics> 。</span><span class="sxs-lookup"><span data-stu-id="7b0e9-133">Always call <xref:System.Drawing.BufferedGraphics.Dispose%2A> before you release your last reference to the <xref:System.Drawing.BufferedGraphics> object.</span></span> <span data-ttu-id="7b0e9-134">否则，在垃圾回收器调用 <xref:System.Drawing.BufferedGraphics> 对象的 `Finalize` 方法之前，该对象正在使用的资源不会被释放。</span><span class="sxs-lookup"><span data-stu-id="7b0e9-134">Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Drawing.BufferedGraphics> object's `Finalize` method.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/winforms/advanced/double-buffered-graphics"><span data-ttu-id="7b0e9-135">双缓冲图形</span><span class="sxs-lookup"><span data-stu-id="7b0e9-135">Double Buffered Graphics</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~BufferedGraphics ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.BufferedGraphics.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!BufferedGraphics ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="bufferedGraphics.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7b0e9-136">在垃圾回收将某一对象回收前允许该对象尝试释放资源并执行其他清理操作。</span><span class="sxs-lookup"><span data-stu-id="7b0e9-136">Allows an object to try to free resources and perform other cleanup operations before it is reclaimed by garbage collection.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Object.Finalize" />
      </Docs>
    </Member>
    <Member MemberName="Graphics">
      <MemberSignature Language="C#" Value="public System.Drawing.Graphics Graphics { get; }" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Drawing.Graphics Graphics" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.BufferedGraphics.Graphics" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Graphics As Graphics" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Graphics ^ Graphics { System::Drawing::Graphics ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Graphics : System.Drawing.Graphics" Usage="System.Drawing.BufferedGraphics.Graphics" />
      <MemberSignature Language="C#" Value="public System.Drawing.Graphics? Graphics { get; }" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Graphics</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7b0e9-137">获取输出到图形缓冲区的 <see cref="T:System.Drawing.Graphics" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="7b0e9-137">Gets a <see cref="T:System.Drawing.Graphics" /> object that outputs to the graphics buffer.</span></span></summary>
        <value><span data-ttu-id="7b0e9-138">输出到图形缓冲区的 <see cref="T:System.Drawing.Graphics" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="7b0e9-138">A <see cref="T:System.Drawing.Graphics" /> object that outputs to the graphics buffer.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7b0e9-139">此属性提供一个 <xref:System.Drawing.Graphics> 对象，该对象绘制到为此对象分配的图形缓冲区 <xref:System.Drawing.BufferedGraphics> 。</span><span class="sxs-lookup"><span data-stu-id="7b0e9-139">This property provides a <xref:System.Drawing.Graphics> object that draws to the graphics buffer allocated for this <xref:System.Drawing.BufferedGraphics> object.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Drawing.Graphics" />
        <related type="Article" href="/dotnet/framework/winforms/advanced/double-buffered-graphics"><span data-ttu-id="7b0e9-140">双缓冲图形</span><span class="sxs-lookup"><span data-stu-id="7b0e9-140">Double Buffered Graphics</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Render">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="7b0e9-141">写入图形缓冲区的内容。</span><span class="sxs-lookup"><span data-stu-id="7b0e9-141">Writes the contents of the graphics buffer.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Render">
      <MemberSignature Language="C#" Value="public void Render ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Render() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.BufferedGraphics.Render" />
      <MemberSignature Language="VB.NET" Value="Public Sub Render ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Render();" />
      <MemberSignature Language="F#" Value="member this.Render : unit -&gt; unit" Usage="bufferedGraphics.Render " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7b0e9-142">将图形缓冲区的内容写入默认设备。</span><span class="sxs-lookup"><span data-stu-id="7b0e9-142">Writes the contents of the graphics buffer to the default device.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7b0e9-143">此方法将图形缓冲区的内容写入指定的设备，方法是调用 <xref:System.Drawing.BufferedGraphicsContext.Allocate%2A> <xref:System.Drawing.BufferedGraphicsContext> 用于创建此对象的的方法 <xref:System.Drawing.BufferedGraphics> 。</span><span class="sxs-lookup"><span data-stu-id="7b0e9-143">This method writes the contents of the graphics buffer to the device specified by calling the <xref:System.Drawing.BufferedGraphicsContext.Allocate%2A> method of the <xref:System.Drawing.BufferedGraphicsContext> used to create this <xref:System.Drawing.BufferedGraphics> object.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/winforms/advanced/double-buffered-graphics"><span data-ttu-id="7b0e9-144">双缓冲图形</span><span class="sxs-lookup"><span data-stu-id="7b0e9-144">Double Buffered Graphics</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Render">
      <MemberSignature Language="C#" Value="public void Render (System.Drawing.Graphics target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Render(class System.Drawing.Graphics target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.BufferedGraphics.Render(System.Drawing.Graphics)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Render (target As Graphics)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Render(System::Drawing::Graphics ^ target);" />
      <MemberSignature Language="F#" Value="member this.Render : System.Drawing.Graphics -&gt; unit" Usage="bufferedGraphics.Render target" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Drawing.Graphics" />
      </Parameters>
      <Docs>
        <param name="target"><span data-ttu-id="7b0e9-145">一个 <see cref="T:System.Drawing.Graphics" /> 对象，要向其中写入图形缓冲区的内容。</span><span class="sxs-lookup"><span data-stu-id="7b0e9-145">A <see cref="T:System.Drawing.Graphics" /> object to which to write the contents of the graphics buffer.</span></span></param>
        <summary><span data-ttu-id="7b0e9-146">将图形缓冲区的内容写入指定的 <see cref="T:System.Drawing.Graphics" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="7b0e9-146">Writes the contents of the graphics buffer to the specified <see cref="T:System.Drawing.Graphics" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7b0e9-147">此方法将图形缓冲区的内容写入指定的 <xref:System.Drawing.Graphics> 对象。</span><span class="sxs-lookup"><span data-stu-id="7b0e9-147">This method writes the contents of the graphics buffer to the specified <xref:System.Drawing.Graphics> object.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7b0e9-148">下面的代码示例演示如何将图形缓冲区的内容呈现给指定的 <xref:System.Drawing.Graphics> 对象。</span><span class="sxs-lookup"><span data-stu-id="7b0e9-148">The following code example demonstrates rendering the contents of the graphics buffer to a specified <xref:System.Drawing.Graphics> object.</span></span> <span data-ttu-id="7b0e9-149">此代码是为类提供的更大示例的一部分 <xref:System.Drawing.BufferedGraphics> 。</span><span class="sxs-lookup"><span data-stu-id="7b0e9-149">This code is part of a larger example provided for the <xref:System.Drawing.BufferedGraphics> class.</span></span>  
  
 [!code-cpp[BufferingExamples#5](~/samples/snippets/cpp/VS_Snippets_Winforms/BufferingExamples/CPP/bufferingexamples.cpp#5)]
 [!code-csharp[BufferingExamples#5](~/samples/snippets/csharp/VS_Snippets_Winforms/BufferingExamples/CS/bufferingexamples.cs#5)]
 [!code-vb[BufferingExamples#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/BufferingExamples/VB/bufferingexamples.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Drawing.Graphics" />
        <related type="Article" href="/dotnet/framework/winforms/advanced/double-buffered-graphics"><span data-ttu-id="7b0e9-150">双缓冲图形</span><span class="sxs-lookup"><span data-stu-id="7b0e9-150">Double Buffered Graphics</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Render">
      <MemberSignature Language="C#" Value="public void Render (IntPtr targetDC);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Render(native int targetDC) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.BufferedGraphics.Render(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Render (targetDC As IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Render(IntPtr targetDC);" />
      <MemberSignature Language="F#" Value="member this.Render : nativeint -&gt; unit" Usage="bufferedGraphics.Render targetDC" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetDC" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="targetDC"><span data-ttu-id="7b0e9-151"><see cref="T:System.IntPtr" /> 指向设备上下文，图形缓冲区的内容将被写入这个设备上下文。</span><span class="sxs-lookup"><span data-stu-id="7b0e9-151">An <see cref="T:System.IntPtr" /> that points to the device context to which to write the contents of the graphics buffer.</span></span></param>
        <summary><span data-ttu-id="7b0e9-152">将图形缓冲区的内容写入与指定的 <see cref="T:System.IntPtr" /> 句柄关联的设备上下文。</span><span class="sxs-lookup"><span data-stu-id="7b0e9-152">Writes the contents of the graphics buffer to the device context associated with the specified <see cref="T:System.IntPtr" /> handle.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7b0e9-153">此方法将图形缓冲区的内容写入与指定的句柄关联的设备上下文 <xref:System.IntPtr> 。</span><span class="sxs-lookup"><span data-stu-id="7b0e9-153">This method writes the contents of the graphics buffer to the device context associated with the specified <xref:System.IntPtr> handle.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7b0e9-154">下面的代码示例演示如何将图形缓冲区的内容呈现 `grafx` 到指定的设备上下文。</span><span class="sxs-lookup"><span data-stu-id="7b0e9-154">The following code example demonstrates how to render the contents of the graphics buffer `grafx` to a specified device context.</span></span> <span data-ttu-id="7b0e9-155">此代码是为类提供的更大示例的一部分 <xref:System.Drawing.BufferedGraphics> 。</span><span class="sxs-lookup"><span data-stu-id="7b0e9-155">This code is part of a larger example provided for the <xref:System.Drawing.BufferedGraphics> class.</span></span>  
  
 [!code-cpp[BufferingExamples#6](~/samples/snippets/cpp/VS_Snippets_Winforms/BufferingExamples/CPP/bufferingexamples.cpp#6)]
 [!code-csharp[BufferingExamples#6](~/samples/snippets/csharp/VS_Snippets_Winforms/BufferingExamples/CS/bufferingexamples.cs#6)]
 [!code-vb[BufferingExamples#6](~/samples/snippets/visualbasic/VS_Snippets_Winforms/BufferingExamples/VB/bufferingexamples.vb#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IntPtr" />
        <related type="Article" href="/dotnet/framework/winforms/advanced/double-buffered-graphics"><span data-ttu-id="7b0e9-156">双缓冲图形</span><span class="sxs-lookup"><span data-stu-id="7b0e9-156">Double Buffered Graphics</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>
