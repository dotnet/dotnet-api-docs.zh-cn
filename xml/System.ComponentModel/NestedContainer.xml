<Type Name="NestedContainer" FullName="System.ComponentModel.NestedContainer">
  <Metadata><Meta Name="ms.openlocfilehash" Value="595b2b3e9ccf4a9e77c6110e4f88ae186a50cf0c" /><Meta Name="ms.sourcegitcommit" Value="c982ad9e10a242d90f1e631b5981570f9e5d9f34" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/10/2020" /><Meta Name="ms.locfileid" Value="89729876" /></Metadata><TypeSignature Language="C#" Value="public class NestedContainer : System.ComponentModel.Container, IDisposable, System.ComponentModel.IContainer, System.ComponentModel.INestedContainer" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit NestedContainer extends System.ComponentModel.Container implements class System.ComponentModel.IContainer, class System.ComponentModel.INestedContainer, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.NestedContainer" />
  <TypeSignature Language="VB.NET" Value="Public Class NestedContainer&#xA;Inherits Container&#xA;Implements IContainer, IDisposable, INestedContainer" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1" />
  <TypeSignature Language="C++ CLI" Value="public ref class NestedContainer : System::ComponentModel::Container, IDisposable, System::ComponentModel::IContainer, System::ComponentModel::INestedContainer" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1" />
  <TypeSignature Language="F#" Value="type NestedContainer = class&#xA;    inherit Container&#xA;    interface IContainer&#xA;    interface IDisposable&#xA;    interface INestedContainer" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.0;netstandard-2.1" />
  <TypeSignature Language="C#" Value="public class NestedContainer : System.ComponentModel.Container, IDisposable, System.ComponentModel.INestedContainer" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="VB.NET" Value="Public Class NestedContainer&#xA;Inherits Container&#xA;Implements IDisposable, INestedContainer" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="C++ CLI" Value="public ref class NestedContainer : System::ComponentModel::Container, IDisposable, System::ComponentModel::INestedContainer" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="F#" Value="type NestedContainer = class&#xA;    inherit Container&#xA;    interface INestedContainer&#xA;    interface IContainer&#xA;    interface IDisposable" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="C#" Value="public class NestedContainer : System.ComponentModel.Container, System.ComponentModel.INestedContainer" FrameworkAlternate="netstandard-2.0;netstandard-2.1" />
  <TypeSignature Language="VB.NET" Value="Public Class NestedContainer&#xA;Inherits Container&#xA;Implements INestedContainer" FrameworkAlternate="netstandard-2.0;netstandard-2.1" />
  <TypeSignature Language="C++ CLI" Value="public ref class NestedContainer : System::ComponentModel::Container, System::ComponentModel::INestedContainer" FrameworkAlternate="netstandard-2.0;netstandard-2.1" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.ComponentModel.TypeConverter" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.ComponentModel.Container</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ComponentModel.IContainer</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ComponentModel.INestedContainer</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="127f6-101">提供 <see cref="T:System.ComponentModel.INestedContainer" /> 接口的基实现，该接口使容器可以拥有一个所属组件。</span><span class="sxs-lookup"><span data-stu-id="127f6-101">Provides the base implementation for the <see cref="T:System.ComponentModel.INestedContainer" /> interface, which enables containers to have an owning component.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="127f6-102">此 <xref:System.ComponentModel.NestedContainer> 类是接口的简单实现 <xref:System.ComponentModel.INestedContainer> ，它定义了一个逻辑上包含零个或多个其他组件并由父组件拥有的组件。</span><span class="sxs-lookup"><span data-stu-id="127f6-102">The <xref:System.ComponentModel.NestedContainer> class is a simple implementation of the <xref:System.ComponentModel.INestedContainer> interface, which defines a component that logically contains zero or more other components and is owned by a parent component.</span></span> <span data-ttu-id="127f6-103">嵌套容器的行为与标准的不同之处在于 <xref:System.ComponentModel.Container> ：</span><span class="sxs-lookup"><span data-stu-id="127f6-103">The behavior of nested containers differs from a standard <xref:System.ComponentModel.Container> in a number of ways, including the following:</span></span>  
  
-   <span data-ttu-id="127f6-104">站点特征（如 <xref:System.ComponentModel.Component.DesignMode%2A> 和） <xref:System.ComponentModel.Component.GetService%2A> 通过所属组件的站点进行路由。</span><span class="sxs-lookup"><span data-stu-id="127f6-104">Site characteristics such as <xref:System.ComponentModel.Component.DesignMode%2A> and <xref:System.ComponentModel.Component.GetService%2A> are routed through the owning component's site.</span></span>  
  
-   <span data-ttu-id="127f6-105">站点的 <xref:System.ComponentModel.ISite.Name%2A> 属性为限定名称，其中包含所属组件的名称，后跟一个句点 (。 ) 和子组件的名称。</span><span class="sxs-lookup"><span data-stu-id="127f6-105">The site's <xref:System.ComponentModel.ISite.Name%2A> property is a qualified name that includes the owning component's name followed by a period (.) and the child component's name.</span></span>  
  
-   <span data-ttu-id="127f6-106"><xref:System.ComponentModel.NestedContainer.GetService%2A> 为 <xref:System.ComponentModel.INestedContainer> 作为服务提供支持。</span><span class="sxs-lookup"><span data-stu-id="127f6-106"><xref:System.ComponentModel.NestedContainer.GetService%2A> provides support for the <xref:System.ComponentModel.INestedContainer> as a service.</span></span>  
  
-   <span data-ttu-id="127f6-107">当处理所属组件时，也会释放容器。</span><span class="sxs-lookup"><span data-stu-id="127f6-107">When the owning component is disposed, the container is disposed as well.</span></span>  
  
 <span data-ttu-id="127f6-108">此外，设计器将不同地处理嵌套容器。</span><span class="sxs-lookup"><span data-stu-id="127f6-108">In addition, designers treat nested containers differently.</span></span> <span data-ttu-id="127f6-109">设计器宿主只对一个容器感兴趣，一个容器与宿主相关联。</span><span class="sxs-lookup"><span data-stu-id="127f6-109">A designer host is only interested in one container - the one associated with the host.</span></span> <span data-ttu-id="127f6-110">因此，在嵌套容器中添加或删除组件时，不会引发组件 "添加" 和 "删除" 事件。</span><span class="sxs-lookup"><span data-stu-id="127f6-110">Therefore, component add and remove events are not raised when a component is added to or removed from a nested container.</span></span> <span data-ttu-id="127f6-111">但是，因为服务会流过嵌套容器，所以当嵌套容器中的组件发生更改时，将引发组件更改事件。</span><span class="sxs-lookup"><span data-stu-id="127f6-111">However, because services flow through to the nested container, component change events are raised when a component in a nested container is changed.</span></span>  
  
 <span data-ttu-id="127f6-112">此差异事件跟踪还会影响撤消功能，该功能与序列化密切相关。</span><span class="sxs-lookup"><span data-stu-id="127f6-112">This disparity in event tracking also impacts undo functionality, which is closely tied to serialization.</span></span> <span data-ttu-id="127f6-113">标准撤消引擎使用 <xref:System.ComponentModel.Design.IReferenceService> 跟踪对组件所做的更改。</span><span class="sxs-lookup"><span data-stu-id="127f6-113">The standard undo engine uses <xref:System.ComponentModel.Design.IReferenceService> to track changes made to components.</span></span> <span data-ttu-id="127f6-114">如果撤消引擎无法通过引用服务标识组件的名称，则引擎将忽略对该组件所做的任何更改。</span><span class="sxs-lookup"><span data-stu-id="127f6-114">If the undo engine cannot identify a name for a component through the reference service, the engine will ignore any changes for that component.</span></span> <span data-ttu-id="127f6-115">仅当此服务在其所有者中公开为具有相同名称的公共只读属性时，该服务才会自动识别对包含的组件所做的更改。</span><span class="sxs-lookup"><span data-stu-id="127f6-115">This service automatically recognizes changes to contained components only if they are exposed as public read-only properties of the same name in their owners.</span></span> <span data-ttu-id="127f6-116">否则，开发人员必须向所有者传递组件更改事件。</span><span class="sxs-lookup"><span data-stu-id="127f6-116">Otherwise, the developer must pass component change events up to the owner.</span></span> <span data-ttu-id="127f6-117">例如，如果嵌套组件的 `Text` 属性在其所属组件上 resurfaced 为 `Address` 属性，则 `Text` 更改属性时，必须以编程方式为相应的属性进行属性更改， `Address` 否则 undo 不会跟踪更改。</span><span class="sxs-lookup"><span data-stu-id="127f6-117">For example, if a nested component's `Text` property is resurfaced on its owning component as an `Address` property, when the `Text` property is changed, a property change must be programmatically made for the corresponding `Address` property or else that change will not be tracked by undo.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.ComponentModel.INestedContainer" />
    <altmember cref="T:System.ComponentModel.IContainer" />
    <altmember cref="T:System.ComponentModel.ISite" />
    <altmember cref="T:System.ComponentModel.Design.IReferenceService" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NestedContainer (System.ComponentModel.IComponent owner);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.ComponentModel.IComponent owner) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.NestedContainer.#ctor(System.ComponentModel.IComponent)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (owner As IComponent)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; NestedContainer(System::ComponentModel::IComponent ^ owner);" />
      <MemberSignature Language="F#" Value="new System.ComponentModel.NestedContainer : System.ComponentModel.IComponent -&gt; System.ComponentModel.NestedContainer" Usage="new System.ComponentModel.NestedContainer owner" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="owner" Type="System.ComponentModel.IComponent" />
      </Parameters>
      <Docs>
        <param name="owner"><span data-ttu-id="127f6-118">拥有此嵌套容器的 <see cref="T:System.ComponentModel.IComponent" />。</span><span class="sxs-lookup"><span data-stu-id="127f6-118">The <see cref="T:System.ComponentModel.IComponent" /> that owns this nested container.</span></span></param>
        <summary><span data-ttu-id="127f6-119">初始化 <see cref="T:System.ComponentModel.NestedContainer" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="127f6-119">Initializes a new instance of the <see cref="T:System.ComponentModel.NestedContainer" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="127f6-120">此构造函数在其所有者的事件中登记， <xref:System.ComponentModel.IComponent.Disposed> 以便自动调用嵌套容器的 <xref:System.ComponentModel.NestedContainer.Dispose%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="127f6-120">This constructor enlists in its owner's <xref:System.ComponentModel.IComponent.Disposed> event so that the nested container's <xref:System.ComponentModel.NestedContainer.Dispose%2A> method will automatically be called.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="127f6-121"><paramref name="owner" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="127f6-121"><paramref name="owner" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="Overload:System.ComponentModel.NestedContainer.Dispose" />
      </Docs>
    </Member>
    <Member MemberName="CreateSite">
      <MemberSignature Language="C#" Value="protected override System.ComponentModel.ISite CreateSite (System.ComponentModel.IComponent component, string name);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.ComponentModel.ISite CreateSite(class System.ComponentModel.IComponent component, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.NestedContainer.CreateSite(System.ComponentModel.IComponent,System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CreateSite (component As IComponent, name As String) As ISite" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::ComponentModel::ISite ^ CreateSite(System::ComponentModel::IComponent ^ component, System::String ^ name);" />
      <MemberSignature Language="F#" Value="override this.CreateSite : System.ComponentModel.IComponent * string -&gt; System.ComponentModel.ISite" Usage="nestedContainer.CreateSite (component, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.ISite</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="component" Type="System.ComponentModel.IComponent" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="component"><span data-ttu-id="127f6-122">要为其创建站点的 <see cref="T:System.ComponentModel.IComponent" />。</span><span class="sxs-lookup"><span data-stu-id="127f6-122">The <see cref="T:System.ComponentModel.IComponent" /> to create a site for.</span></span></param>
        <param name="name"><span data-ttu-id="127f6-123">要分配给 <paramref name="component" /> 的名称，或者为 <see langword="null" /> 以跳过名称分配。</span><span class="sxs-lookup"><span data-stu-id="127f6-123">The name to assign to <paramref name="component" />, or <see langword="null" /> to skip the name assignment.</span></span></param>
        <summary><span data-ttu-id="127f6-124">为容器中的组件创建站点。</span><span class="sxs-lookup"><span data-stu-id="127f6-124">Creates a site for the component within the container.</span></span></summary>
        <returns><span data-ttu-id="127f6-125">新创建的 <see cref="T:System.ComponentModel.ISite" />。</span><span class="sxs-lookup"><span data-stu-id="127f6-125">The newly created <see cref="T:System.ComponentModel.ISite" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="127f6-126">如果 `name` 参数为 `null` ，则将 <xref:System.ComponentModel.IComponent> 添加到没有标识名称的嵌套容器。</span><span class="sxs-lookup"><span data-stu-id="127f6-126">If the `name` parameter is `null`, the <xref:System.ComponentModel.IComponent> is added to the nested container without an identifying name.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="127f6-127"><paramref name="component" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="127f6-127"><paramref name="component" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.ComponentModel.Container.CreateSite(System.ComponentModel.IComponent,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.NestedContainer.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="nestedContainer.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing"><span data-ttu-id="127f6-128">若要释放托管资源和非托管资源，则为 <see langword="true" />；若仅释放非托管资源，则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="127f6-128"><see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</span></span></param>
        <summary><span data-ttu-id="127f6-129">释放由嵌套容器使用的资源。</span><span class="sxs-lookup"><span data-stu-id="127f6-129">Releases the resources used by the nested container.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="127f6-130">此方法由公共 `Dispose()` 方法和 <xref:System.Object.Finalize%2A> 方法调用。</span><span class="sxs-lookup"><span data-stu-id="127f6-130">This method is called by the public `Dispose()` method and the <xref:System.Object.Finalize%2A> method.</span></span> <span data-ttu-id="127f6-131">`Dispose()` 调用受保护的 `Dispose(Boolean)` 方法，并将 `disposing` 参数设置为 `true` 。</span><span class="sxs-lookup"><span data-stu-id="127f6-131">`Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`.</span></span> <span data-ttu-id="127f6-132"><xref:System.Object.Finalize%2A>`Dispose`在设置为的情况调用 `disposing` `false` 。</span><span class="sxs-lookup"><span data-stu-id="127f6-132"><xref:System.Object.Finalize%2A> invokes `Dispose` with `disposing` set to `false`.</span></span>  
  
 <span data-ttu-id="127f6-133">当 `disposing` 参数为 true 时，此方法释放该引用的任何托管对象所持有的所有资源 <xref:System.ComponentModel.NestedContainer> 。</span><span class="sxs-lookup"><span data-stu-id="127f6-133">When the `disposing` parameter is true, this method releases all resources held by any managed objects that this <xref:System.ComponentModel.NestedContainer> references.</span></span> <span data-ttu-id="127f6-134">此方法将调用每个被引用对象的 `Dispose()` 方法。</span><span class="sxs-lookup"><span data-stu-id="127f6-134">This method invokes the `Dispose()` method of each referenced object.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="127f6-135">
            <see langword="Dispose" /> 可以由其他对象多次调用。</span><span class="sxs-lookup"><span data-stu-id="127f6-135">
            <see langword="Dispose" /> can be called multiple times by other objects.</span></span> <span data-ttu-id="127f6-136">当重写时， <see langword="Dispose(Boolean)" /> 请注意不要引用先前在调用时已释放的对象 <see langword="Dispose" /> 。</span><span class="sxs-lookup"><span data-stu-id="127f6-136">When overriding <see langword="Dispose(Boolean)" /> be careful not to reference objects that have been previously disposed of in an earlier call to <see langword="Dispose" />.</span></span> <span data-ttu-id="127f6-137">有关如何实现的详细信息 <see langword="Dispose(Boolean)" /> ，请参阅 [实现 Dispose 方法](/dotnet/standard/garbage-collection/implementing-dispose)。</span><span class="sxs-lookup"><span data-stu-id="127f6-137">For more information about how to implement <see langword="Dispose(Boolean)" />, see [Implementing a Dispose Method](/dotnet/standard/garbage-collection/implementing-dispose).</span></span>  
  
<span data-ttu-id="127f6-138">有关和的详细 <see langword="Dispose" /> 信息 <see cref="M:System.Object.Finalize" /> ，请参阅 [清理非托管资源](/dotnet/standard/garbage-collection/unmanaged) 和 [重写 Finalize 方法](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ddae83kx(v=vs.100))。</span><span class="sxs-lookup"><span data-stu-id="127f6-138">For more information about <see langword="Dispose" /> and <see cref="M:System.Object.Finalize" />, see [Cleaning Up Unmanaged Resources](/dotnet/standard/garbage-collection/unmanaged) and [Overriding the Finalize Method](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ddae83kx(v=vs.100)).</span></span></para></block>
        <altmember cref="M:System.ComponentModel.NestedContainer.#ctor(System.ComponentModel.IComponent)" />
      </Docs>
    </Member>
    <Member MemberName="GetService">
      <MemberSignature Language="C#" Value="protected override object GetService (Type service);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance object GetService(class System.Type service) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.NestedContainer.GetService(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function GetService (service As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Object ^ GetService(Type ^ service);" />
      <MemberSignature Language="F#" Value="override this.GetService : Type -&gt; obj" Usage="nestedContainer.GetService service" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="service" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="service"><span data-ttu-id="127f6-139">要检索的服务的 <see cref="T:System.Type" />。</span><span class="sxs-lookup"><span data-stu-id="127f6-139">The <see cref="T:System.Type" /> of the service to retrieve.</span></span></param>
        <summary><span data-ttu-id="127f6-140">获取指定类型的服务对象（如果可用）。</span><span class="sxs-lookup"><span data-stu-id="127f6-140">Gets the service object of the specified type, if it is available.</span></span></summary>
        <returns><span data-ttu-id="127f6-141">实现所请求服务的 <see cref="T:System.Object" />，或者，如果无法解析服务，则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="127f6-141">An <see cref="T:System.Object" /> that implements the requested service, or <see langword="null" /> if the service cannot be resolved.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="127f6-142">此方法将重写 <xref:System.ComponentModel.Container.GetService%2A?displayProperty=nameWithType> 方法。</span><span class="sxs-lookup"><span data-stu-id="127f6-142">This method overrides the <xref:System.ComponentModel.Container.GetService%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="127f6-143">此实现仅解析 <xref:System.ComponentModel.INestedContainer> 和服务的请求 <xref:System.ComponentModel.IContainer> 。</span><span class="sxs-lookup"><span data-stu-id="127f6-143">This implementation only resolves requests for the <xref:System.ComponentModel.INestedContainer> and <xref:System.ComponentModel.IContainer> services.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ComponentModel.Container.GetService(System.Type)" />
        <altmember cref="T:System.IServiceProvider" />
      </Docs>
    </Member>
    <Member MemberName="Owner">
      <MemberSignature Language="C#" Value="public System.ComponentModel.IComponent Owner { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ComponentModel.IComponent Owner" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.NestedContainer.Owner" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Owner As IComponent" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ComponentModel::IComponent ^ Owner { System::ComponentModel::IComponent ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Owner : System.ComponentModel.IComponent" Usage="System.ComponentModel.NestedContainer.Owner" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.ComponentModel.INestedContainer.Owner</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ComponentModel.IComponent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="127f6-144">获取此嵌套容器的所属组件。</span><span class="sxs-lookup"><span data-stu-id="127f6-144">Gets the owning component for this nested container.</span></span></summary>
        <value><span data-ttu-id="127f6-145">拥有此嵌套容器的 <see cref="T:System.ComponentModel.IComponent" />。</span><span class="sxs-lookup"><span data-stu-id="127f6-145">The <see cref="T:System.ComponentModel.IComponent" /> that owns this nested container.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="127f6-146">所属组件是区分嵌套容器和普通容器的特征。</span><span class="sxs-lookup"><span data-stu-id="127f6-146">The owning component is the characteristic that differentiates nested containers from ordinary containers.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.IComponent" />
        <altmember cref="T:System.ComponentModel.IContainer" />
        <altmember cref="P:System.ComponentModel.INestedContainer.Owner" />
      </Docs>
    </Member>
    <Member MemberName="OwnerName">
      <MemberSignature Language="C#" Value="protected virtual string OwnerName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string OwnerName" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.NestedContainer.OwnerName" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property OwnerName As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property System::String ^ OwnerName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.OwnerName : string" Usage="System.ComponentModel.NestedContainer.OwnerName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="127f6-147">获取所属组件的名称。</span><span class="sxs-lookup"><span data-stu-id="127f6-147">Gets the name of the owning component.</span></span></summary>
        <value><span data-ttu-id="127f6-148">所属组件的名称。</span><span class="sxs-lookup"><span data-stu-id="127f6-148">The name of the owning component.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="127f6-149">此属性可能会被重写，以提供自定义所有者名称。</span><span class="sxs-lookup"><span data-stu-id="127f6-149">This property may be overridden to provide a custom owner name.</span></span> <span data-ttu-id="127f6-150">默认实现会搜索所有者的站点以查找 <xref:System.ComponentModel.INestedSite> 和调用 <xref:System.ComponentModel.INestedSite.FullName%2A> ， <xref:System.ComponentModel.ISite.Name%2A> 如果不存在嵌套站点，则为。</span><span class="sxs-lookup"><span data-stu-id="127f6-150">The default implementation searches the owner's site for <xref:System.ComponentModel.INestedSite> and calls <xref:System.ComponentModel.INestedSite.FullName%2A>, or <xref:System.ComponentModel.ISite.Name%2A> if there is no nested site.</span></span> <span data-ttu-id="127f6-151">如果两者都不可用，则此属性返回 `null` 。</span><span class="sxs-lookup"><span data-stu-id="127f6-151">If neither is available, this property returns `null`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
