<Type Name="AsyncOperationManager" FullName="System.ComponentModel.AsyncOperationManager">
  <Metadata><Meta Name="ms.openlocfilehash" Value="f0b3d744ba0cb3686ac148ba90aa7c142a68af5e" /><Meta Name="ms.sourcegitcommit" Value="11d168140aa8fade0768c2a9dde3e3bcacfdfb7d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="05/27/2020" /><Meta Name="ms.locfileid" Value="83917166" /></Metadata><TypeSignature Language="C#" Value="public static class AsyncOperationManager" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit AsyncOperationManager extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.AsyncOperationManager" />
  <TypeSignature Language="VB.NET" Value="Public Class AsyncOperationManager" />
  <TypeSignature Language="C++ CLI" Value="public ref class AsyncOperationManager abstract sealed" />
  <TypeSignature Language="F#" Value="type AsyncOperationManager = class" />
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.ComponentModel.EventBasedAsync" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>提供支持异步方法调用的类的并发管理。 无法继承此类。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果你的类需要根据[基于事件的异步模式概述](/dotnet/standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-overview)来提供异步行为，你会遇到许多并发管理问题。 在这两种情况下，需要确保在适合应用程序模型的线程或上下文中调用事件处理程序（例如 Windows 窗体应用程序、[!INCLUDE[vstecasp](~/includes/vstecasp-md.md)] 应用程序、控制台应用程序，等等）。 <xref:System.ComponentModel.AsyncOperationManager> 提供了一种简便的方法来创建在 [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]支持的所有应用程序模型下正常运行的类。  
  
 <xref:System.ComponentModel.AsyncOperationManager> 类有一种方法，<xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A>，该方法返回可用于跟踪特定异步任务的持续时间的 <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType>。 任务的 <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> 可用于在任务完成时向客户端发出警报。 它还可用于在不终止操作的情况下发布进度更新和增量结果。  
  
 有关实现异步类的详细信息，请参阅[实现基于事件的异步模式](/dotnet/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern)。  
  
   
  
## Examples  
 下面的代码示例演示如何使用 <xref:System.ComponentModel.AsyncOperationManager> 类创建支持任何应用程序模型的异步操作的类。 它演示如何实现一个测试数字的类，以确定它是否为质数。 此计算可能会很耗时，因此它在单独的线程上完成。 进度报告、增量结果和完成通知由 <xref:System.ComponentModel.AsyncOperation> 类处理，这可确保在适当的线程或上下文中调用客户端的事件处理程序。  
  
 有关完整的代码清单，请参阅[如何：实现支持基于事件的异步模式的组件](https://msdn.microsoft.com/library/3c1aa4d4-da87-4a03-b812-3d167b8c57cf)。 有关客户端窗体的完整代码列表，请参阅[如何：实现基于事件的异步模式的客户端](/dotnet/standard/asynchronous-programming-patterns/how-to-implement-a-client-of-the-event-based-asynchronous-pattern)。  
  
 [!code-csharp[System.ComponentModel.AsyncOperationManager#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#3)]
 [!code-vb[System.ComponentModel.AsyncOperationManager#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#3)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.ComponentModel.AsyncOperation" />
    <related type="Article" href="https://msdn.microsoft.com/library/43402d19-8d30-426d-8785-1a4478233bfa">实现基于事件的异步模式</related>
    <related type="Article" href="/dotnet/standard/threading/managed-threading-best-practices">托管线程处理的最佳做法</related>
  </Docs>
  <Members>
    <Member MemberName="CreateOperation">
      <MemberSignature Language="C#" Value="public static System.ComponentModel.AsyncOperation CreateOperation (object userSuppliedState);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.ComponentModel.AsyncOperation CreateOperation(object userSuppliedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.AsyncOperationManager.CreateOperation(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateOperation (userSuppliedState As Object) As AsyncOperation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::ComponentModel::AsyncOperation ^ CreateOperation(System::Object ^ userSuppliedState);" />
      <MemberSignature Language="F#" Value="static member CreateOperation : obj -&gt; System.ComponentModel.AsyncOperation" Usage="System.ComponentModel.AsyncOperationManager.CreateOperation userSuppliedState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.AsyncOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userSuppliedState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="userSuppliedState">一个对象，用于使一个客户端状态（如任务 ID）与一个特定异步操作相关联。</param>
        <summary>返回可用于对特定异步操作的持续时间进行跟踪的 <see cref="T:System.ComponentModel.AsyncOperation" />。</summary>
        <returns>可用于对异步方法调用的持续时间进行跟踪的 <see cref="T:System.ComponentModel.AsyncOperation" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A> 方法返回一个 <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType>，你可以使用它来跟踪特定异步操作的持续时间，并在操作完成时向应用程序模型发出警报。 你还可以使用它来发布进度更新和增量结果，而无需终止操作。 <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> 会将这些调用正确地封送到应用程序模型的相应线程或上下文。  
  
 如果实现支持基于事件的异步模式的类，则类应在每次调用*方法*名`Async` 方法时调用 <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A>。 调用方法的客户端应用程序可以使用 `userSuppliedState` 参数以唯一标识每个调用，以便区分在执行异步操作期间引发的事件。  
  
> [!CAUTION]
>  客户端代码必须为 `userSuppliedState` 参数提供唯一值。 不唯一的任务 Id 可能会导致实现不正确地报告进度和其他事件。 你的代码应检查非唯一的任务 ID，如果检测到，则会引发 <xref:System.ArgumentException?displayProperty=nameWithType>。  
  
 你的代码应跟踪 <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A> 返回的每个 <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType>，并使用相应的基础异步操作中的对象发布更新并终止操作。 此跟踪可以像将 <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> 作为参数传递到委托中一样简单。 在更复杂的设计中，类可以维护 <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> 对象的集合，在任务启动时添加对象，并在任务完成或取消时将对象删除。 此方法允许你检查唯一 `userSuppliedState` 参数值，并且是在使用支持多个并发调用的类时应使用的方法。  
  
 有关实现异步类的详细信息，请参阅[实现基于事件的异步模式](/dotnet/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern)。  
  
   
  
## Examples  
 下面的代码示例演示如何使用 <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A> 方法来创建 <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> 以跟踪异步操作的持续时间。 此代码示例是为 <xref:System.ComponentModel.AsyncOperationManager> 类提供的更大示例的一部分。  
  
 [!code-csharp[System.ComponentModel.AsyncOperationManager#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#3)]
 [!code-vb[System.ComponentModel.AsyncOperationManager#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.AsyncOperation" />
        <related type="Article" href="https://msdn.microsoft.com/library/43402d19-8d30-426d-8785-1a4478233bfa">实现基于事件的异步模式</related>
        <related type="Article" href="/dotnet/standard/threading/managed-threading-best-practices">托管线程处理的最佳做法</related>
      </Docs>
    </Member>
    <Member MemberName="SynchronizationContext">
      <MemberSignature Language="C#" Value="public static System.Threading.SynchronizationContext SynchronizationContext { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Threading.SynchronizationContext SynchronizationContext" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.AsyncOperationManager.SynchronizationContext" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property SynchronizationContext As SynchronizationContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Threading::SynchronizationContext ^ SynchronizationContext { System::Threading::SynchronizationContext ^ get(); void set(System::Threading::SynchronizationContext ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SynchronizationContext : System.Threading.SynchronizationContext with get, set" Usage="System.ComponentModel.AsyncOperationManager.SynchronizationContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1;netcore-3.1;netcore-1.0;netcore-1.1;net-5.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.SynchronizationContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置用于异步操作的同步上下文。</summary>
        <value>用于异步操作的同步上下文。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 默认实现是自由线程实现。  
  
 线程应将 <xref:System.ComponentModel.AsyncOperationManager.SynchronizationContext%2A> 属性设置为 `null` 以便在完成时释放自由线程工厂，否则永远不会释放其工厂。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
