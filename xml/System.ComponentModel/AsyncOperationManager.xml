<Type Name="AsyncOperationManager" FullName="System.ComponentModel.AsyncOperationManager">
  <Metadata><Meta Name="ms.openlocfilehash" Value="d537a631acc29e0b6705fa138904ba2710465dff" /><Meta Name="ms.sourcegitcommit" Value="b53d35b4a410c949742abd4c6a989d1af5357bca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="86776883" /></Metadata><TypeSignature Language="C#" Value="public static class AsyncOperationManager" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit AsyncOperationManager extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.AsyncOperationManager" />
  <TypeSignature Language="VB.NET" Value="Public Class AsyncOperationManager" />
  <TypeSignature Language="C++ CLI" Value="public ref class AsyncOperationManager abstract sealed" />
  <TypeSignature Language="F#" Value="type AsyncOperationManager = class" />
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.ComponentModel.EventBasedAsync" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="c55e5-101">提供支持异步方法调用的类的并发管理。</span><span class="sxs-lookup"><span data-stu-id="c55e5-101">Provides concurrency management for classes that support asynchronous method calls.</span></span> <span data-ttu-id="c55e5-102">此类不能被继承。</span><span class="sxs-lookup"><span data-stu-id="c55e5-102">This class cannot be inherited.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c55e5-103">如果你的类需要根据[基于事件的异步模式概述](/dotnet/standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-overview)来提供异步行为，你会遇到许多并发管理问题。</span><span class="sxs-lookup"><span data-stu-id="c55e5-103">If your class needs to provide asynchronous behavior according to the [Event-based Asynchronous Pattern Overview](/dotnet/standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-overview), you will encounter a number of concurrency management issues.</span></span> <span data-ttu-id="c55e5-104">在这两种情况下，需要确保在适用于应用程序模型的线程或上下文中调用事件处理程序 (例如 Windows 窗体应用程序、 [!INCLUDE[vstecasp](~/includes/vstecasp-md.md)] 应用程序、控制台应用程序，) 等等。</span><span class="sxs-lookup"><span data-stu-id="c55e5-104">Among these is the requirement to ensure that event handlers are called on a thread or context that is appropriate for the application model (for example, Windows Forms applications, [!INCLUDE[vstecasp](~/includes/vstecasp-md.md)] applications, console applications, and so on).</span></span> <span data-ttu-id="c55e5-105"><xref:System.ComponentModel.AsyncOperationManager>提供了一种简便的方法来创建在支持的所有应用程序模型下正常运行的类 [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] 。</span><span class="sxs-lookup"><span data-stu-id="c55e5-105">The <xref:System.ComponentModel.AsyncOperationManager> provides a convenient way to create a class that runs properly under all application models supported by the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)].</span></span>  
  
 <span data-ttu-id="c55e5-106"><xref:System.ComponentModel.AsyncOperationManager>类具有一个方法，该方法 <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A> 返回 <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> 可用于跟踪特定异步任务的持续时间的。</span><span class="sxs-lookup"><span data-stu-id="c55e5-106">The <xref:System.ComponentModel.AsyncOperationManager> class has one method, <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A>, which returns an <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> that can be used to track the duration of a particular asynchronous task.</span></span> <span data-ttu-id="c55e5-107">任务 <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> 完成时，可以使用任务的对客户端发出警报。</span><span class="sxs-lookup"><span data-stu-id="c55e5-107">The <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> for a task can be used to alert clients when a task completes.</span></span> <span data-ttu-id="c55e5-108">它还可用于在不终止操作的情况下发布进度更新和增量结果。</span><span class="sxs-lookup"><span data-stu-id="c55e5-108">It can also be used to post progress updates and incremental results without terminating the operation.</span></span>  
  
 <span data-ttu-id="c55e5-109">有关实现异步类的详细信息，请参阅[实现基于事件的异步模式](/dotnet/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern)。</span><span class="sxs-lookup"><span data-stu-id="c55e5-109">For more information about implementing asynchronous classes, see [Implementing the Event-based Asynchronous Pattern](/dotnet/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c55e5-110">下面的代码示例演示如何使用 <xref:System.ComponentModel.AsyncOperationManager> 类来创建支持任何应用程序模型的异步操作的类。</span><span class="sxs-lookup"><span data-stu-id="c55e5-110">The following code example demonstrates using the <xref:System.ComponentModel.AsyncOperationManager> class to create a class that supports asynchronous operations for any application model.</span></span> <span data-ttu-id="c55e5-111">它演示如何实现一个测试数字的类，以确定它是否为质数。</span><span class="sxs-lookup"><span data-stu-id="c55e5-111">It shows how to implement a class that tests a number to determine whether it is prime.</span></span> <span data-ttu-id="c55e5-112">此计算可能会很耗时，因此它在单独的线程上完成。</span><span class="sxs-lookup"><span data-stu-id="c55e5-112">This calculation can be time consuming, so it is done on a separate thread.</span></span> <span data-ttu-id="c55e5-113">进度报告、增量结果和完成通知由 <xref:System.ComponentModel.AsyncOperation> 类处理，这可确保在适当的线程或上下文中调用客户端的事件处理程序。</span><span class="sxs-lookup"><span data-stu-id="c55e5-113">Progress reports, incremental results, and completion notifications are handled by the <xref:System.ComponentModel.AsyncOperation> class, which ensures that the client's event handlers are called on the proper thread or context.</span></span>  
  
 <span data-ttu-id="c55e5-114">有关完整的代码清单，请参阅[如何：实现支持基于事件的异步模式的组件](https://msdn.microsoft.com/library/3c1aa4d4-da87-4a03-b812-3d167b8c57cf)。</span><span class="sxs-lookup"><span data-stu-id="c55e5-114">For a full code listing, see [How to: Implement a Component That Supports the Event-based Asynchronous Pattern](https://msdn.microsoft.com/library/3c1aa4d4-da87-4a03-b812-3d167b8c57cf).</span></span> <span data-ttu-id="c55e5-115">有关客户端窗体的完整代码列表，请参阅[如何：实现基于事件的异步模式的客户端](/dotnet/standard/asynchronous-programming-patterns/how-to-implement-a-client-of-the-event-based-asynchronous-pattern)。</span><span class="sxs-lookup"><span data-stu-id="c55e5-115">For a full code listing of a client form, see [How to: Implement a Client of the Event-based Asynchronous Pattern](/dotnet/standard/asynchronous-programming-patterns/how-to-implement-a-client-of-the-event-based-asynchronous-pattern).</span></span>  
  
 [!code-csharp[System.ComponentModel.AsyncOperationManager#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#3)]
 [!code-vb[System.ComponentModel.AsyncOperationManager#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#3)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.ComponentModel.AsyncOperation" />
    <related type="Article" href="/dotnet/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern"><span data-ttu-id="c55e5-116">实现基于事件的异步模式</span><span class="sxs-lookup"><span data-stu-id="c55e5-116">Implementing the Event-based Asynchronous Pattern</span></span></related>
    <related type="Article" href="/dotnet/standard/threading/managed-threading-best-practices"><span data-ttu-id="c55e5-117">托管线程处理的最佳做法</span><span class="sxs-lookup"><span data-stu-id="c55e5-117">Managed Threading Best Practices</span></span></related>
  </Docs>
  <Members>
    <Member MemberName="CreateOperation">
      <MemberSignature Language="C#" Value="public static System.ComponentModel.AsyncOperation CreateOperation (object userSuppliedState);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.ComponentModel.AsyncOperation CreateOperation(object userSuppliedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.AsyncOperationManager.CreateOperation(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateOperation (userSuppliedState As Object) As AsyncOperation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::ComponentModel::AsyncOperation ^ CreateOperation(System::Object ^ userSuppliedState);" />
      <MemberSignature Language="F#" Value="static member CreateOperation : obj -&gt; System.ComponentModel.AsyncOperation" Usage="System.ComponentModel.AsyncOperationManager.CreateOperation userSuppliedState" />
      <MemberSignature Language="C#" Value="public static System.ComponentModel.AsyncOperation CreateOperation (object? userSuppliedState);" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.AsyncOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userSuppliedState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="userSuppliedState"><span data-ttu-id="c55e5-118">一个对象，用于使一个客户端状态（如任务 ID）与一个特定异步操作相关联。</span><span class="sxs-lookup"><span data-stu-id="c55e5-118">An object used to associate a piece of client state, such as a task ID, with a particular asynchronous operation.</span></span></param>
        <summary><span data-ttu-id="c55e5-119">返回可用于对特定异步操作的持续时间进行跟踪的 <see cref="T:System.ComponentModel.AsyncOperation" />。</span><span class="sxs-lookup"><span data-stu-id="c55e5-119">Returns an <see cref="T:System.ComponentModel.AsyncOperation" /> for tracking the duration of a particular asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="c55e5-120">可用于对异步方法调用的持续时间进行跟踪的 <see cref="T:System.ComponentModel.AsyncOperation" />。</span><span class="sxs-lookup"><span data-stu-id="c55e5-120">An <see cref="T:System.ComponentModel.AsyncOperation" /> that you can use to track the duration of an asynchronous method invocation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c55e5-121"><xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A>方法返回 <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> ，你可以使用它来跟踪特定异步操作的持续时间，并在操作完成时向应用程序模型发出警报。</span><span class="sxs-lookup"><span data-stu-id="c55e5-121">The <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A> method returns an <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> that you can use to track the duration of a particular asynchronous operation and to alert the application model when the operation completes.</span></span> <span data-ttu-id="c55e5-122">你还可以使用它来发布进度更新和增量结果，而无需终止操作。</span><span class="sxs-lookup"><span data-stu-id="c55e5-122">You can also use it to post progress updates and incremental results without terminating the operation.</span></span> <span data-ttu-id="c55e5-123"><xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType>将向应用程序模型的相应线程或上下文正确地封送这些调用。</span><span class="sxs-lookup"><span data-stu-id="c55e5-123">The <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> will correctly marshal these calls to the appropriate thread or context for the application model.</span></span>  
  
 <span data-ttu-id="c55e5-124">如果实现支持基于事件的异步模式的类，则类应在 <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A> 每次调用*方法* `Async` 方法时调用。</span><span class="sxs-lookup"><span data-stu-id="c55e5-124">If you implement a class that supports the Event-based Asynchronous Pattern, your class should call <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A> each time your *MethodName*`Async` method is called.</span></span> <span data-ttu-id="c55e5-125">调用方法的客户端应用程序可以使用 `userSuppliedState` 参数来唯一标识每个调用，以便区分在执行异步操作期间引发的事件。</span><span class="sxs-lookup"><span data-stu-id="c55e5-125">The client application that makes calls to the method can use the `userSuppliedState` parameter to uniquely identify each invocation, so as to distinguish events raised during the execution of the asynchronous operation.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="c55e5-126">客户端代码必须为参数提供一个唯一值 `userSuppliedState` 。</span><span class="sxs-lookup"><span data-stu-id="c55e5-126">Client code must provide a unique value for the `userSuppliedState` parameter.</span></span> <span data-ttu-id="c55e5-127">不唯一的任务 Id 可能会导致实现不正确地报告进度和其他事件。</span><span class="sxs-lookup"><span data-stu-id="c55e5-127">Non-unique task IDs may cause your implementation to report progress and other events incorrectly.</span></span> <span data-ttu-id="c55e5-128">你的代码应检查非唯一的任务 ID， <xref:System.ArgumentException?displayProperty=nameWithType> 如果检测到，则引发。</span><span class="sxs-lookup"><span data-stu-id="c55e5-128">Your code should check for a non-unique task ID and throw an <xref:System.ArgumentException?displayProperty=nameWithType> if one is detected.</span></span>  
  
 <span data-ttu-id="c55e5-129">你的代码应跟踪每个 <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> 返回的 <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A> ，并使用相应的基础异步操作中的对象发布更新并终止操作。</span><span class="sxs-lookup"><span data-stu-id="c55e5-129">Your code should track every <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> returned by <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A> and use the object in the corresponding underlying asynchronous operation to post updates and terminate the operation.</span></span> <span data-ttu-id="c55e5-130">此跟踪可以像将作为参数传递到 <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> 委托中一样简单。</span><span class="sxs-lookup"><span data-stu-id="c55e5-130">This tracking can be as simple as passing the <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> as a parameter among delegates.</span></span> <span data-ttu-id="c55e5-131">在更复杂的设计中，类可以维护对象的集合 <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> ，在任务启动时添加对象，并在任务完成或取消时删除对象。</span><span class="sxs-lookup"><span data-stu-id="c55e5-131">In more sophisticated designs, your class can maintain a collection of <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> objects, adding objects when tasks are started and removing them when tasks are completed or canceled.</span></span> <span data-ttu-id="c55e5-132">此方法允许您检查唯一的 `userSuppliedState` 参数值，并且是在使用支持多个并发调用的类时应使用的方法。</span><span class="sxs-lookup"><span data-stu-id="c55e5-132">This approach allows you to check for unique `userSuppliedState` parameter values, and is the method you should use when working with classes that support multiple concurrent invocations.</span></span>  
  
 <span data-ttu-id="c55e5-133">有关实现异步类的详细信息，请参阅[实现基于事件的异步模式](/dotnet/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern)。</span><span class="sxs-lookup"><span data-stu-id="c55e5-133">For more information about implementing asynchronous classes, see [Implementing the Event-based Asynchronous Pattern](/dotnet/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c55e5-134">下面的代码示例演示如何使用 <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A> 方法创建 <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> 以跟踪异步操作的持续时间。</span><span class="sxs-lookup"><span data-stu-id="c55e5-134">The following code example demonstrates using the <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A> method to create an <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> for tracking the duration of asynchronous operations.</span></span> <span data-ttu-id="c55e5-135">此代码示例是为类提供的更大示例的一部分 <xref:System.ComponentModel.AsyncOperationManager> 。</span><span class="sxs-lookup"><span data-stu-id="c55e5-135">This code example is part of a larger example provided for the <xref:System.ComponentModel.AsyncOperationManager> class.</span></span>  
  
 [!code-csharp[System.ComponentModel.AsyncOperationManager#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#3)]
 [!code-vb[System.ComponentModel.AsyncOperationManager#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.AsyncOperation" />
        <related type="Article" href="/dotnet/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern"><span data-ttu-id="c55e5-136">实现基于事件的异步模式</span><span class="sxs-lookup"><span data-stu-id="c55e5-136">Implementing the Event-based Asynchronous Pattern</span></span></related>
        <related type="Article" href="/dotnet/standard/threading/managed-threading-best-practices"><span data-ttu-id="c55e5-137">托管线程处理的最佳做法</span><span class="sxs-lookup"><span data-stu-id="c55e5-137">Managed Threading Best Practices</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="SynchronizationContext">
      <MemberSignature Language="C#" Value="public static System.Threading.SynchronizationContext SynchronizationContext { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Threading.SynchronizationContext SynchronizationContext" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.AsyncOperationManager.SynchronizationContext" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property SynchronizationContext As SynchronizationContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Threading::SynchronizationContext ^ SynchronizationContext { System::Threading::SynchronizationContext ^ get(); void set(System::Threading::SynchronizationContext ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SynchronizationContext : System.Threading.SynchronizationContext with get, set" Usage="System.ComponentModel.AsyncOperationManager.SynchronizationContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.SynchronizationContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c55e5-138">获取或设置用于异步操作的同步上下文。</span><span class="sxs-lookup"><span data-stu-id="c55e5-138">Gets or sets the synchronization context for the asynchronous operation.</span></span></summary>
        <value><span data-ttu-id="c55e5-139">用于异步操作的同步上下文。</span><span class="sxs-lookup"><span data-stu-id="c55e5-139">The synchronization context for the asynchronous operation.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c55e5-140">默认实现是自由线程实现。</span><span class="sxs-lookup"><span data-stu-id="c55e5-140">The default implementation is the free-threaded implementation.</span></span>  
  
 <span data-ttu-id="c55e5-141">线程应将属性设置 <xref:System.ComponentModel.AsyncOperationManager.SynchronizationContext%2A> 为， `null` 以在完成时释放自由线程工厂，否则永远不会释放其工厂。</span><span class="sxs-lookup"><span data-stu-id="c55e5-141">A thread should set the <xref:System.ComponentModel.AsyncOperationManager.SynchronizationContext%2A> property to `null` to release the free-threaded factory when it is done, or else its factory will never be disposed.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
