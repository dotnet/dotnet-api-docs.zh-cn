<Type Name="INestedContainer" FullName="System.ComponentModel.INestedContainer">
  <Metadata><Meta Name="ms.openlocfilehash" Value="43dc3fae59ed8dcf0001cc09f5a2eccaa2c41bdf" /><Meta Name="ms.sourcegitcommit" Value="c982ad9e10a242d90f1e631b5981570f9e5d9f34" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/10/2020" /><Meta Name="ms.locfileid" Value="89812645" /></Metadata><TypeSignature Language="C#" Value="public interface INestedContainer : IDisposable, System.ComponentModel.IContainer" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract INestedContainer implements class System.ComponentModel.IContainer, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.INestedContainer" />
  <TypeSignature Language="VB.NET" Value="Public Interface INestedContainer&#xA;Implements IContainer, IDisposable" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="C++ CLI" Value="public interface class INestedContainer : IDisposable, System::ComponentModel::IContainer" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="F#" Value="type INestedContainer = interface&#xA;    interface IContainer&#xA;    interface IDisposable" />
  <TypeSignature Language="C#" Value="public interface INestedContainer : System.ComponentModel.IContainer" FrameworkAlternate="netstandard-2.0;netstandard-2.1" />
  <TypeSignature Language="VB.NET" Value="Public Interface INestedContainer&#xA;Implements IContainer" FrameworkAlternate="netstandard-2.0;netstandard-2.1" />
  <TypeSignature Language="C++ CLI" Value="public interface class INestedContainer : System::ComponentModel::IContainer" FrameworkAlternate="netstandard-2.0;netstandard-2.1" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.ComponentModel.TypeConverter" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ComponentModel.IContainer</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="be6ad-101">提供嵌套容器的功能，嵌套容器逻辑上可包含零个或多个其他组件，且这类容器由父组件拥有。</span><span class="sxs-lookup"><span data-stu-id="be6ad-101">Provides functionality for nested containers, which logically contain zero or more other components and are owned by a parent component.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="be6ad-102"><xref:System.ComponentModel.INestedContainer>接口将所属组件的概念添加到 <xref:System.ComponentModel.IContainer> 接口。</span><span class="sxs-lookup"><span data-stu-id="be6ad-102">The <xref:System.ComponentModel.INestedContainer> interface adds the concept of an owning component to the <xref:System.ComponentModel.IContainer> interface.</span></span> <span data-ttu-id="be6ad-103">嵌套容器是在逻辑上但不一定直观地包含零个或多个子组件并且归某些父组件所有的对象。</span><span class="sxs-lookup"><span data-stu-id="be6ad-103">A nested container is an object that logically, but not necessarily visually, contains zero or more child components and is owned by some parent component.</span></span> <span data-ttu-id="be6ad-104">对于 visual 包容，所属组件通常是另一个容器。</span><span class="sxs-lookup"><span data-stu-id="be6ad-104">For visual containment, the owning component is often another container.</span></span>  
  
 <span data-ttu-id="be6ad-105">嵌套容器允许对控件的各个部分进行设计，无需为每个子控件提供显式序列化成员变量或自定义序列化程序。</span><span class="sxs-lookup"><span data-stu-id="be6ad-105">Nested containers allow sections of a control to be designable, without requiring an explicit serialized member variable or a custom serializer for each subcontrol.</span></span> <span data-ttu-id="be6ad-106">相反，窗体设计器将维护一个组件的主容器。</span><span class="sxs-lookup"><span data-stu-id="be6ad-106">Instead, the form designer maintains one master container of components.</span></span> <span data-ttu-id="be6ad-107">每个组件的站点都有一个嵌套容器，可用于放置额外的组件。</span><span class="sxs-lookup"><span data-stu-id="be6ad-107">Each component's site may have a nested container that provides a place to put extra components.</span></span> <span data-ttu-id="be6ad-108">当组件放置在嵌套容器中时，它接收的名称是其给定名称及其所属组件的名称的组合。</span><span class="sxs-lookup"><span data-stu-id="be6ad-108">When a component is sited in a nested container, the name it receives is a combination of its given name and its owning component's name.</span></span> <span data-ttu-id="be6ad-109">此外，添加到嵌套容器的组件具有对父容器的服务的完全访问权限，并且嵌套容器提供与添加新组件相关的父容器行为。</span><span class="sxs-lookup"><span data-stu-id="be6ad-109">Additionally, components added to a nested container have full access to the services of the parent container, and the nested container provides the same behavior of the parent with respect to adding new components.</span></span> <span data-ttu-id="be6ad-110">嵌套容器将为它包含的每个组件创建设计器，从而实现设计时支持。</span><span class="sxs-lookup"><span data-stu-id="be6ad-110">The nested container will create the designer for each component it contains, thereby enabling design-time support.</span></span> <span data-ttu-id="be6ad-111">由于标准代码序列化程序不查看嵌套容器，因此，只有在主容器中遍历组件时，才会序列化这些组件的路径。</span><span class="sxs-lookup"><span data-stu-id="be6ad-111">Because standard code serializers do not look at nested containers, these components are only serialized if a path to them can be obtained by walking the components in the primary container.</span></span>  
  
 <span data-ttu-id="be6ad-112">可以通过在组件的站点中查询类型为的服务来查找嵌套容器 <xref:System.ComponentModel.INestedContainer> 。</span><span class="sxs-lookup"><span data-stu-id="be6ad-112">Nested containers can be found by querying a component's site for services of type <xref:System.ComponentModel.INestedContainer>.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.ComponentModel.NestedContainer" />
    <altmember cref="T:System.ComponentModel.ContainerFilterService" />
    <altmember cref="M:System.ComponentModel.NestedContainer.GetService(System.Type)" />
  </Docs>
  <Members>
    <Member MemberName="Owner">
      <MemberSignature Language="C#" Value="public System.ComponentModel.IComponent Owner { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ComponentModel.IComponent Owner" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.INestedContainer.Owner" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Owner As IComponent" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ComponentModel::IComponent ^ Owner { System::ComponentModel::IComponent ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Owner : System.ComponentModel.IComponent" Usage="System.ComponentModel.INestedContainer.Owner" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.IComponent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="be6ad-113">获取嵌套容器的所属组件。</span><span class="sxs-lookup"><span data-stu-id="be6ad-113">Gets the owning component for the nested container.</span></span></summary>
        <value><span data-ttu-id="be6ad-114">拥有该嵌套容器的 <see cref="T:System.ComponentModel.IComponent" />。</span><span class="sxs-lookup"><span data-stu-id="be6ad-114">The <see cref="T:System.ComponentModel.IComponent" /> that owns the nested container.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="be6ad-115">所属组件是区分嵌套容器和普通容器的特征。</span><span class="sxs-lookup"><span data-stu-id="be6ad-115">The owning component is the characteristic that differentiates nested containers from ordinary containers.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.IComponent" />
        <altmember cref="T:System.ComponentModel.IContainer" />
        <altmember cref="P:System.ComponentModel.NestedContainer.Owner" />
      </Docs>
    </Member>
  </Members>
</Type>
