<Type Name="AsyncOperation" FullName="System.ComponentModel.AsyncOperation">
  <Metadata><Meta Name="ms.openlocfilehash" Value="9f593b580bf82a137965499c15e5f0cbe9d63579" /><Meta Name="ms.sourcegitcommit" Value="11d168140aa8fade0768c2a9dde3e3bcacfdfb7d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="05/27/2020" /><Meta Name="ms.locfileid" Value="83917314" /></Metadata><TypeSignature Language="C#" Value="public sealed class AsyncOperation" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit AsyncOperation extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.AsyncOperation" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class AsyncOperation" />
  <TypeSignature Language="C++ CLI" Value="public ref class AsyncOperation sealed" />
  <TypeSignature Language="F#" Value="type AsyncOperation = class" />
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.ComponentModel.EventBasedAsync" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="0a250-101">跟踪异步操作的生存期。</span><span class="sxs-lookup"><span data-stu-id="0a250-101">Tracks the lifetime of an asynchronous operation.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0a250-102">根据[基于事件的异步模式概述](/dotnet/standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-overview)实现类时，可能需要跟踪在类的实例上调用的每个异步操作的生存期。</span><span class="sxs-lookup"><span data-stu-id="0a250-102">When you implement a class according to the [Event-based Asynchronous Pattern Overview](/dotnet/standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-overview), you may need to track the lifetime of each asynchronous operation invoked on an instance of your class.</span></span> <span data-ttu-id="0a250-103"><xref:System.ComponentModel.AsyncOperation> 类提供了跟踪和报告异步任务的进度的方法。</span><span class="sxs-lookup"><span data-stu-id="0a250-103">The <xref:System.ComponentModel.AsyncOperation> class provides ways to track and report the progress of an asynchronous task.</span></span>  
  
 <span data-ttu-id="0a250-104">下表列出了使用 <xref:System.ComponentModel.AsyncOperation> 对象的方法：</span><span class="sxs-lookup"><span data-stu-id="0a250-104">The following list identifies ways to use an <xref:System.ComponentModel.AsyncOperation> object:</span></span>  
  
-   <span data-ttu-id="0a250-105">若要向客户端报告进度和中间结果，请从异步辅助代码调用 <xref:System.ComponentModel.AsyncOperation.Post%2A>。</span><span class="sxs-lookup"><span data-stu-id="0a250-105">To report progress and interim results to the client, call <xref:System.ComponentModel.AsyncOperation.Post%2A> from your asynchronous worker code.</span></span>  
  
-   <span data-ttu-id="0a250-106">若要指示异步任务已完成，或者若要取消挂起的异步任务，请调用 <xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A>。</span><span class="sxs-lookup"><span data-stu-id="0a250-106">To indicate that an asynchronous task has completed, or to cancel a pending asynchronous task, call <xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A>.</span></span>  
  
 <span data-ttu-id="0a250-107">类应在每个任务启动时通过调用 <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A?displayProperty=nameWithType> 来获取每个异步任务的 <xref:System.ComponentModel.AsyncOperation> 对象。</span><span class="sxs-lookup"><span data-stu-id="0a250-107">Your class should get an <xref:System.ComponentModel.AsyncOperation> object for each asynchronous task by calling <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A?displayProperty=nameWithType> when each task starts.</span></span> <span data-ttu-id="0a250-108">若要允许客户端区分不同的异步任务，<xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A?displayProperty=nameWithType> 为唯一的客户端提供的令牌（将成为 <xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A> 属性）使用参数。</span><span class="sxs-lookup"><span data-stu-id="0a250-108">To allow the client to distinguish separate asynchronous tasks, <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A?displayProperty=nameWithType> takes a parameter for a unique client-provided token, which becomes the <xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A> property.</span></span> <span data-ttu-id="0a250-109">然后，客户端代码可以使用它来标识引发进度或完成事件的特定异步任务。</span><span class="sxs-lookup"><span data-stu-id="0a250-109">It can then be used by client code to identify the particular asynchronous task that is raising progress or completion events.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0a250-110">下面的代码示例演示如何使用 <xref:System.ComponentModel.AsyncOperation> 对象跟踪异步操作的生存期。</span><span class="sxs-lookup"><span data-stu-id="0a250-110">The following code example demonstrates using an <xref:System.ComponentModel.AsyncOperation> object to track the lifetime of asynchronous operations.</span></span> <span data-ttu-id="0a250-111">此代码示例是为 <xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType> 类提供的更大示例的一部分。</span><span class="sxs-lookup"><span data-stu-id="0a250-111">This code example is part of a larger example provided for the <xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType> class.</span></span>  
  
 <span data-ttu-id="0a250-112">有关完整的代码清单，请参阅[如何：实现支持基于事件的异步模式的组件](https://msdn.microsoft.com/library/3c1aa4d4-da87-4a03-b812-3d167b8c57cf)。</span><span class="sxs-lookup"><span data-stu-id="0a250-112">For a full code listing, see [How to: Implement a Component That Supports the Event-based Asynchronous Pattern](https://msdn.microsoft.com/library/3c1aa4d4-da87-4a03-b812-3d167b8c57cf).</span></span> <span data-ttu-id="0a250-113">有关客户端窗体的完整代码列表，请参阅[如何：实现基于事件的异步模式的客户端](/dotnet/standard/asynchronous-programming-patterns/how-to-implement-a-client-of-the-event-based-asynchronous-pattern)。</span><span class="sxs-lookup"><span data-stu-id="0a250-113">For a full code listing of a client form, see [How to: Implement a Client of the Event-based Asynchronous Pattern](/dotnet/standard/asynchronous-programming-patterns/how-to-implement-a-client-of-the-event-based-asynchronous-pattern).</span></span>  
  
 [!code-csharp[System.ComponentModel.AsyncOperationManager#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#3)]
 [!code-vb[System.ComponentModel.AsyncOperationManager#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#3)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para><span data-ttu-id="0a250-114">实现程序必须确保 <see cref="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)" /> 和 <see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" /> 调用是异步的，因此，如果类库提供程序在发生同步的特定应用程序模型中采用异步行为，则它们不需要考虑潜在的堆栈溢出。</span><span class="sxs-lookup"><span data-stu-id="0a250-114">Implementers must ensure the <see cref="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)" /> and <see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" /> invocations are asynchronous, so that class library providers do not need to concern themselves with potential stack overflows if they assume asynchronous behavior in a particular application model that happens to be synchronous.</span></span>  
  
<span data-ttu-id="0a250-115">有关实现异步类的详细信息，请参阅[实现基于事件的异步模式](/dotnet/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern)。</span><span class="sxs-lookup"><span data-stu-id="0a250-115">For more information about implementing asynchronous classes, see [Implementing the Event-based Asynchronous Pattern](/dotnet/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern).</span></span></para></block>
    <altmember cref="T:System.ComponentModel.AsyncOperationManager" />
    <related type="Article" href="/dotnet/standard/threading/managed-threading-best-practices"><span data-ttu-id="0a250-116">托管线程处理的最佳做法</span><span class="sxs-lookup"><span data-stu-id="0a250-116">Managed Threading Best Practices</span></span></related>
    <related type="Article" href="https://msdn.microsoft.com/library/3c1aa4d4-da87-4a03-b812-3d167b8c57cf"><span data-ttu-id="0a250-117">如何：实现支持基于事件的异步模式的组件</span><span class="sxs-lookup"><span data-stu-id="0a250-117">How to: Implement a Component that Supports the Event-based Asynchronous Pattern</span></span></related>
  </Docs>
  <Members>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~AsyncOperation ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.AsyncOperation.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!AsyncOperation ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="asyncOperation.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="0a250-118">完成异步操作。</span><span class="sxs-lookup"><span data-stu-id="0a250-118">Finalizes the asynchronous operation.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OperationCompleted">
      <MemberSignature Language="C#" Value="public void OperationCompleted ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void OperationCompleted() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.AsyncOperation.OperationCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Sub OperationCompleted ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void OperationCompleted();" />
      <MemberSignature Language="F#" Value="member this.OperationCompleted : unit -&gt; unit" Usage="asyncOperation.OperationCompleted " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="0a250-119">结束异步操作的生存期。</span><span class="sxs-lookup"><span data-stu-id="0a250-119">Ends the lifetime of an asynchronous operation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0a250-120">调用 <xref:System.ComponentModel.AsyncOperation.OperationCompleted%2A> 方法以结束异步操作的生存期。</span><span class="sxs-lookup"><span data-stu-id="0a250-120">Call the <xref:System.ComponentModel.AsyncOperation.OperationCompleted%2A> method to end the lifetime of an asynchronous operation.</span></span> <span data-ttu-id="0a250-121">针对特定任务调用此方法后，对其相应 <xref:System.ComponentModel.AsyncOperation> 的调用将引发异常。</span><span class="sxs-lookup"><span data-stu-id="0a250-121">After this method is called for a particular task, calls to its corresponding <xref:System.ComponentModel.AsyncOperation> will raise an exception.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="0a250-122">此前便已为此任务调用了 <see cref="M:System.ComponentModel.AsyncOperation.OperationCompleted" />。</span><span class="sxs-lookup"><span data-stu-id="0a250-122"><see cref="M:System.ComponentModel.AsyncOperation.OperationCompleted" /> has been called previously for this task.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Post">
      <MemberSignature Language="C#" Value="public void Post (System.Threading.SendOrPostCallback d, object arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Post(class System.Threading.SendOrPostCallback d, object arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Post (d As SendOrPostCallback, arg As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Post(System::Threading::SendOrPostCallback ^ d, System::Object ^ arg);" />
      <MemberSignature Language="F#" Value="member this.Post : System.Threading.SendOrPostCallback * obj -&gt; unit" Usage="asyncOperation.Post (d, arg)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Threading.SendOrPostCallback" />
        <Parameter Name="arg" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="d"><span data-ttu-id="0a250-123">一个用于包装操作结束时要调用的委托的 <see cref="T:System.Threading.SendOrPostCallback" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="0a250-123">A <see cref="T:System.Threading.SendOrPostCallback" /> object that wraps the delegate to be called when the operation ends.</span></span></param>
        <param name="arg"><span data-ttu-id="0a250-124"><paramref name="d" /> 参数中包含的委托的一个自变量。</span><span class="sxs-lookup"><span data-stu-id="0a250-124">An argument for the delegate contained in the <paramref name="d" /> parameter.</span></span></param>
        <summary><span data-ttu-id="0a250-125">在适合于应用程序模型的线程或上下文中调用委托。</span><span class="sxs-lookup"><span data-stu-id="0a250-125">Invokes a delegate on the thread or context appropriate for the application model.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0a250-126"><xref:System.ComponentModel.AsyncOperation.Post%2A> 方法调用由 `arg` 参数指定的委托，而不会结束异步操作的生存期。</span><span class="sxs-lookup"><span data-stu-id="0a250-126">The <xref:System.ComponentModel.AsyncOperation.Post%2A> method invokes the delegate specified by the `arg` parameter without ending the lifetime of the asynchronous operation.</span></span>  
  
 <span data-ttu-id="0a250-127">您可以按所需的频率调用 <xref:System.ComponentModel.AsyncOperation.Post%2A> 方法，但异步操作的生存期尚未通过调用 <xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A>结束。</span><span class="sxs-lookup"><span data-stu-id="0a250-127">You can call the <xref:System.ComponentModel.AsyncOperation.Post%2A> method as often as you like while the lifetime of the asynchronous operation has not been ended by a call to <xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A>.</span></span> <span data-ttu-id="0a250-128">您可以使用方法将进度或临时结果报告回客户端。</span><span class="sxs-lookup"><span data-stu-id="0a250-128">You can use the method to report progress or interim results back to clients.</span></span>  
  
 <span data-ttu-id="0a250-129">当你想要发布有关异步任务状态的更新时，`d` 参数会包装你要调用的委托。</span><span class="sxs-lookup"><span data-stu-id="0a250-129">The `d` parameter wraps the delegate you want called when you want to post an update about the status of the asynchronous task.</span></span> <span data-ttu-id="0a250-130"><xref:System.ComponentModel.AsyncOperation> 对象将确保在适用于应用程序模型的线程或上下文中调用委托。</span><span class="sxs-lookup"><span data-stu-id="0a250-130">The <xref:System.ComponentModel.AsyncOperation> object will ensure that your delegate is invoked on the thread or context appropriate for the application model.</span></span> <span data-ttu-id="0a250-131">你的方法可以选择引发事件，以通知客户端状态更改、进度更新或新提供的增量结果。</span><span class="sxs-lookup"><span data-stu-id="0a250-131">Your method can optionally raise an event that notifies clients of a status change, progress update, or newly available incremental results.</span></span>  
  
 <span data-ttu-id="0a250-132">`arg` 参数应该用于向由 `d` 参数包装的委托传递状态。</span><span class="sxs-lookup"><span data-stu-id="0a250-132">The `arg` parameter should be used to pass state to the delegate wrapped by the `d` parameter.</span></span> <span data-ttu-id="0a250-133">它可能是对 <xref:System.ComponentModel.AsyncOperation>的引用，也可能是 <xref:System.ComponentModel.ProgressChangedEventArgs?displayProperty=nameWithType> 对象。</span><span class="sxs-lookup"><span data-stu-id="0a250-133">It might be a reference to an <xref:System.ComponentModel.AsyncOperation>, or it might be a <xref:System.ComponentModel.ProgressChangedEventArgs?displayProperty=nameWithType> object.</span></span> <span data-ttu-id="0a250-134">可能需要从 <xref:System.ComponentModel.ProgressChangedEventArgs?displayProperty=nameWithType> 派生你自己的类，以提供额外的状态存储。</span><span class="sxs-lookup"><span data-stu-id="0a250-134">It may be desirable to derive your own class from <xref:System.ComponentModel.ProgressChangedEventArgs?displayProperty=nameWithType> to provide additional state storage.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0a250-135">下面的代码示例演示如何使用 <xref:System.ComponentModel.AsyncOperation.Post%2A> 方法报告异步操作的进度和增量结果。</span><span class="sxs-lookup"><span data-stu-id="0a250-135">The following code example demonstrates using the <xref:System.ComponentModel.AsyncOperation.Post%2A> method for reporting progress and incremental results of an asynchronous operation.</span></span> <span data-ttu-id="0a250-136">此代码示例是为 <xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType> 类提供的更大示例的一部分。</span><span class="sxs-lookup"><span data-stu-id="0a250-136">This code example is part of a larger example provided for the <xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType> class.</span></span>  
  
  
[!code-csharp[System.ComponentModel.AsyncOperationManager#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#5)]
[!code-vb[System.ComponentModel.AsyncOperationManager#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="0a250-137">此前便已为此任务调用了 <see cref="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)" /> 方法。</span><span class="sxs-lookup"><span data-stu-id="0a250-137">The <see cref="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)" /> method has been called previously for this task.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0a250-138"><paramref name="d" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="0a250-138"><paramref name="d" /> is <see langword="null" />.</span></span></exception>
        <block subset="none" type="overrides"><para><span data-ttu-id="0a250-139">继承方必须使 <see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" /> 调用是异步的，因此，如果类库提供程序假设异步但特定应用程序模型发生同步，则类库提供程序不需要考虑潜在的堆栈溢出。</span><span class="sxs-lookup"><span data-stu-id="0a250-139">Inheritors must make the <see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" /> invocation asynchronous, so that class library providers do not need to concern themselves with potential stack overflows if they assume asynchrony but a particular application model happens to be synchronous.</span></span>  
  
 <block subset="none" type="note"><para>  
 <span data-ttu-id="0a250-140">控制台应用程序不会同步 <see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" /> 调用的执行。</span><span class="sxs-lookup"><span data-stu-id="0a250-140">Console applications do not synchronize the execution of <see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" /> calls.</span></span> <span data-ttu-id="0a250-141">这会导致按错误的顺序引发 <see langword="ProgressChanged" /> 事件。</span><span class="sxs-lookup"><span data-stu-id="0a250-141">This can cause <see langword="ProgressChanged" /> events to be raised out of order.</span></span> <span data-ttu-id="0a250-142">如果希望序列化 <see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" /> 调用的执行，请实现并安装 <see cref="T:System.Threading.SynchronizationContext" /> 类。</span><span class="sxs-lookup"><span data-stu-id="0a250-142">If you wish to have serialized execution of <see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" /> calls, implement and install a <see cref="T:System.Threading.SynchronizationContext" /> class.</span></span>  
  
</para></block>  
  
 <span data-ttu-id="0a250-143">有关实现异步类的详细信息，请参阅[实现基于事件的异步模式](/dotnet/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern)。</span><span class="sxs-lookup"><span data-stu-id="0a250-143">For more information about implementing asynchronous classes, see [Implementing the Event-based Asynchronous Pattern](/dotnet/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern).</span></span></para></block>
        <altmember cref="T:System.ComponentModel.AsyncOperationManager" />
        <related type="Article" href="/dotnet/standard/threading/managed-threading-best-practices"><span data-ttu-id="0a250-144">托管线程处理的最佳做法</span><span class="sxs-lookup"><span data-stu-id="0a250-144">Managed Threading Best Practices</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/3c1aa4d4-da87-4a03-b812-3d167b8c57cf"><span data-ttu-id="0a250-145">如何：实现支持基于事件的异步模式的组件</span><span class="sxs-lookup"><span data-stu-id="0a250-145">How to: Implement a Component that Supports the Event-based Asynchronous Pattern</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="PostOperationCompleted">
      <MemberSignature Language="C#" Value="public void PostOperationCompleted (System.Threading.SendOrPostCallback d, object arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void PostOperationCompleted(class System.Threading.SendOrPostCallback d, object arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub PostOperationCompleted (d As SendOrPostCallback, arg As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void PostOperationCompleted(System::Threading::SendOrPostCallback ^ d, System::Object ^ arg);" />
      <MemberSignature Language="F#" Value="member this.PostOperationCompleted : System.Threading.SendOrPostCallback * obj -&gt; unit" Usage="asyncOperation.PostOperationCompleted (d, arg)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Threading.SendOrPostCallback" />
        <Parameter Name="arg" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="d"><span data-ttu-id="0a250-146">一个用于包装操作结束时要调用的委托的 <see cref="T:System.Threading.SendOrPostCallback" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="0a250-146">A <see cref="T:System.Threading.SendOrPostCallback" /> object that wraps the delegate to be called when the operation ends.</span></span></param>
        <param name="arg"><span data-ttu-id="0a250-147"><paramref name="d" /> 参数中包含的委托的一个自变量。</span><span class="sxs-lookup"><span data-stu-id="0a250-147">An argument for the delegate contained in the <paramref name="d" /> parameter.</span></span></param>
        <summary><span data-ttu-id="0a250-148">结束异步操作的生存期。</span><span class="sxs-lookup"><span data-stu-id="0a250-148">Ends the lifetime of an asynchronous operation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0a250-149">调用 <xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A> 方法以结束异步操作的生存期。</span><span class="sxs-lookup"><span data-stu-id="0a250-149">Call the <xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A> method to end the lifetime of an asynchronous operation.</span></span> <span data-ttu-id="0a250-150">针对特定任务调用此方法后，对其相应 <xref:System.ComponentModel.AsyncOperation> 对象的调用将引发异常。</span><span class="sxs-lookup"><span data-stu-id="0a250-150">After this method is called for a particular task, calls to its corresponding <xref:System.ComponentModel.AsyncOperation> object will raise an exception.</span></span>  
  
 <span data-ttu-id="0a250-151">当任务的生存期由于任务完成、取消或失败而结束时，`d` 参数会包装希望类调用的委托。</span><span class="sxs-lookup"><span data-stu-id="0a250-151">The `d` parameter wraps the delegate you want your class to call when the task's lifetime ends due to completion, cancellation, or failure of the task.</span></span> <span data-ttu-id="0a250-152"><xref:System.ComponentModel.AsyncOperation> 对象将确保在适用于应用程序模型的线程或上下文中调用委托。</span><span class="sxs-lookup"><span data-stu-id="0a250-152">The <xref:System.ComponentModel.AsyncOperation> object will ensure that your delegate is invoked on the thread or context appropriate for the application model.</span></span> <span data-ttu-id="0a250-153">委托可以选择引发事件，以通知客户端异步任务的生存期已结束。</span><span class="sxs-lookup"><span data-stu-id="0a250-153">Your delegate can optionally raise an event that notifies clients that the asynchronous task's lifetime has ended.</span></span>  
  
 <span data-ttu-id="0a250-154">`arg` 参数用于将状态信息传递给完成委托 `d`。</span><span class="sxs-lookup"><span data-stu-id="0a250-154">The `arg` parameter is used to pass state information to the completion delegate `d`.</span></span> <span data-ttu-id="0a250-155">您可以使用 <xref:System.ComponentModel.AsyncOperation> 对象或 <xref:System.ComponentModel.AsyncCompletedEventArgs?displayProperty=nameWithType> 对象作为参数值。</span><span class="sxs-lookup"><span data-stu-id="0a250-155">You can use an <xref:System.ComponentModel.AsyncOperation> object, or an <xref:System.ComponentModel.AsyncCompletedEventArgs?displayProperty=nameWithType> object as the parameter value.</span></span> <span data-ttu-id="0a250-156">或者，如果要提供附加状态存储，可以使用从 <xref:System.ComponentModel.AsyncCompletedEventArgs?displayProperty=nameWithType> 类派生的类的实例。</span><span class="sxs-lookup"><span data-stu-id="0a250-156">Alternatively, if you want to provide additional state storage, you can use an instance of a class you derive from the <xref:System.ComponentModel.AsyncCompletedEventArgs?displayProperty=nameWithType> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0a250-157">下面的代码示例演示如何使用 <xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A> 方法结束异步操作的生存期。</span><span class="sxs-lookup"><span data-stu-id="0a250-157">The following code example demonstrates using the <xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A> method to end the lifetime of an asynchronous operation.</span></span> <span data-ttu-id="0a250-158">此代码示例是为 <xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType> 类提供的更大示例的一部分。</span><span class="sxs-lookup"><span data-stu-id="0a250-158">This code example is part of a larger example provided for the <xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType> class.</span></span>  
  
  
[!code-csharp[System.ComponentModel.AsyncOperationManager#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#4)]
[!code-vb[System.ComponentModel.AsyncOperationManager#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="0a250-159">此前便已为此任务调用了 <see cref="M:System.ComponentModel.AsyncOperation.OperationCompleted" />。</span><span class="sxs-lookup"><span data-stu-id="0a250-159"><see cref="M:System.ComponentModel.AsyncOperation.OperationCompleted" /> has been called previously for this task.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0a250-160"><paramref name="d" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="0a250-160"><paramref name="d" /> is <see langword="null" />.</span></span></exception>
        <block subset="none" type="overrides"><para><span data-ttu-id="0a250-161">继承方必须使 <see cref="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)" /> 调用是异步的，因此，如果类库提供程序假设异步但特定应用程序模型发生同步，则类库提供程序不需要考虑潜在的堆栈溢出。</span><span class="sxs-lookup"><span data-stu-id="0a250-161">Inheritors must make the <see cref="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)" /> invocation asynchronous, so that class library providers do not need to concern themselves with potential stack overflows if they assume asynchrony but a particular application model happens to be synchronous.</span></span> <span data-ttu-id="0a250-162">方法应解释为 "结束生存期" 调用，这意味着实现需要执行适用于应用程序模型的操作。</span><span class="sxs-lookup"><span data-stu-id="0a250-162">The method should be interpreted as an "ending the lifetime" call, meaning the implementation needs to do what is appropriate for the application model.</span></span> <span data-ttu-id="0a250-163">例如，ASP.NET 将减少未完成的异步操作的计数。</span><span class="sxs-lookup"><span data-stu-id="0a250-163">For instance, ASP.NET will decrement its count of outstanding asynchronous operations.</span></span> <span data-ttu-id="0a250-164">这还应将操作置于状态，以便对其进行的任何后续调用都将失败，因为它现在已完成。</span><span class="sxs-lookup"><span data-stu-id="0a250-164">This also should put the operation into a state such that any subsequent calls into it will fail, since it has now completed.</span></span>  
  
<span data-ttu-id="0a250-165">有关实现异步类的详细信息，请参阅[实现基于事件的异步模式](/dotnet/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern)。</span><span class="sxs-lookup"><span data-stu-id="0a250-165">For more information about implementing asynchronous classes, see [Implementing the Event-based Asynchronous Pattern](/dotnet/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern).</span></span></para></block>
        <altmember cref="T:System.ComponentModel.AsyncOperationManager" />
        <related type="Article" href="/dotnet/standard/threading/managed-threading-best-practices"><span data-ttu-id="0a250-166">托管线程处理的最佳做法</span><span class="sxs-lookup"><span data-stu-id="0a250-166">Managed Threading Best Practices</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/3c1aa4d4-da87-4a03-b812-3d167b8c57cf"><span data-ttu-id="0a250-167">如何：实现支持基于事件的异步模式的组件</span><span class="sxs-lookup"><span data-stu-id="0a250-167">How to: Implement a Component that Supports the Event-based Asynchronous Pattern</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="SynchronizationContext">
      <MemberSignature Language="C#" Value="public System.Threading.SynchronizationContext SynchronizationContext { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Threading.SynchronizationContext SynchronizationContext" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.AsyncOperation.SynchronizationContext" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SynchronizationContext As SynchronizationContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::SynchronizationContext ^ SynchronizationContext { System::Threading::SynchronizationContext ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SynchronizationContext : System.Threading.SynchronizationContext" Usage="System.ComponentModel.AsyncOperation.SynchronizationContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.SynchronizationContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0a250-168">获取传递给构造函数的 <see cref="T:System.Threading.SynchronizationContext" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="0a250-168">Gets the <see cref="T:System.Threading.SynchronizationContext" /> object that was passed to the constructor.</span></span></summary>
        <value><span data-ttu-id="0a250-169">传递给构造函数的 <see cref="T:System.Threading.SynchronizationContext" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="0a250-169">The <see cref="T:System.Threading.SynchronizationContext" /> object that was passed to the constructor.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UserSuppliedState">
      <MemberSignature Language="C#" Value="public object UserSuppliedState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object UserSuppliedState" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.AsyncOperation.UserSuppliedState" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UserSuppliedState As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ UserSuppliedState { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.UserSuppliedState : obj" Usage="System.ComponentModel.AsyncOperation.UserSuppliedState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0a250-170">获取或设置用于唯一标识异步操作的对象。</span><span class="sxs-lookup"><span data-stu-id="0a250-170">Gets or sets an object used to uniquely identify an asynchronous operation.</span></span></summary>
        <value><span data-ttu-id="0a250-171">传递给异步方法调用的状态对象。</span><span class="sxs-lookup"><span data-stu-id="0a250-171">The state object passed to the asynchronous method invocation.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0a250-172">如果类支持多个异步方法或多次调用单个异步方法，客户端将需要一种方法来确定引发事件的异步任务。</span><span class="sxs-lookup"><span data-stu-id="0a250-172">If your class supports multiple asynchronous methods or multiple invocations of a single asynchronous method, clients will need a way to determine which asynchronous task is raising events.</span></span> <span data-ttu-id="0a250-173">`MethodNameAsync` 方法应采用将充当任务 ID <xref:System.Object> 类型的参数。</span><span class="sxs-lookup"><span data-stu-id="0a250-173">Your `MethodNameAsync` method should take a parameter of type <xref:System.Object> that will act as a task ID.</span></span> <span data-ttu-id="0a250-174">调用 <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A?displayProperty=nameWithType>，方法时将使用此任务 ID，这会将客户端的任务 ID 与特定的异步操作调用相关联。</span><span class="sxs-lookup"><span data-stu-id="0a250-174">You will use this task ID when you call the <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A?displayProperty=nameWithType>, method and this will associate the client's task ID with a particular invocation of your asynchronous operation.</span></span> <span data-ttu-id="0a250-175">此任务 ID 通过 <xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A> 属性提供给你的实现。</span><span class="sxs-lookup"><span data-stu-id="0a250-175">This task ID is made available to your implementation through the <xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A> property.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="0a250-176">若要为 <xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A> 属性提供唯一值，客户端代码必须小心。</span><span class="sxs-lookup"><span data-stu-id="0a250-176">Client code must be careful to provide a unique value for the <xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A> property.</span></span> <span data-ttu-id="0a250-177">不唯一的任务 Id 可能会导致实现不正确地报告进度和其他事件。</span><span class="sxs-lookup"><span data-stu-id="0a250-177">Non-unique task IDs may cause your implementation to report progress and other events incorrectly.</span></span> <span data-ttu-id="0a250-178">你的代码应检查非唯一的任务 ID，如果检测到，则会引发 <xref:System.ArgumentException>。</span><span class="sxs-lookup"><span data-stu-id="0a250-178">Your code should check for a non-unique task ID and raise an <xref:System.ArgumentException> if one is detected.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0a250-179">下面的代码示例演示如何使用 <xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A> 跟踪异步操作的生存期。</span><span class="sxs-lookup"><span data-stu-id="0a250-179">The following code example demonstrates using <xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A> to track the lifetime of asynchronous operations.</span></span> <span data-ttu-id="0a250-180">此代码示例是为 <xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType> 类提供的更大示例的一部分。</span><span class="sxs-lookup"><span data-stu-id="0a250-180">This code example is part of a larger example provided for the <xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType> class.</span></span>  
  
  
[!code-csharp[System.ComponentModel.AsyncOperationManager#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#4)]
[!code-vb[System.ComponentModel.AsyncOperationManager#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.AsyncOperationManager" />
        <related type="Article" href="/dotnet/standard/threading/managed-threading-best-practices"><span data-ttu-id="0a250-181">托管线程处理的最佳做法</span><span class="sxs-lookup"><span data-stu-id="0a250-181">Managed Threading Best Practices</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/792aa8da-918b-458e-b154-9836b97735f3"><span data-ttu-id="0a250-182">基于事件的异步模式概述</span><span class="sxs-lookup"><span data-stu-id="0a250-182">Event-based Asynchronous Pattern Overview</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>
