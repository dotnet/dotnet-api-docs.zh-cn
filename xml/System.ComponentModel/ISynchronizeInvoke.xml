<Type Name="ISynchronizeInvoke" FullName="System.ComponentModel.ISynchronizeInvoke">
  <Metadata><Meta Name="ms.openlocfilehash" Value="26e8f1e1e753029f87274263e71471db7ed06113" /><Meta Name="ms.sourcegitcommit" Value="b53d35b4a410c949742abd4c6a989d1af5357bca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="86775986" /></Metadata><TypeSignature Language="C#" Value="public interface ISynchronizeInvoke" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ISynchronizeInvoke" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.ISynchronizeInvoke" />
  <TypeSignature Language="VB.NET" Value="Public Interface ISynchronizeInvoke" />
  <TypeSignature Language="C++ CLI" Value="public interface class ISynchronizeInvoke" />
  <TypeSignature Language="F#" Value="type ISynchronizeInvoke = interface" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.Primitives</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.ComponentModel.Primitives" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Interfaces />
  <Docs>
    <summary>提供同步或异步执行委托的方法。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ComponentModel.ISynchronizeInvoke>接口提供与事件发生有关的对象之间的同步和异步通信。 实现此接口的对象可以接收事件已发生的通知，并且可以响应有关事件的查询。 通过这种方式，客户端可以确保在提交一个请求之后，该请求会在第一个请求完成后处理。  
  
 <xref:System.ComponentModel.ISynchronizeInvoke>类提供两种方法来调用进程：  
  
1.  通过使用方法以异步方式进行 <xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A> 。 <xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A> 启动进程，然后立即返回。 使用 <xref:System.ComponentModel.ISynchronizeInvoke.EndInvoke%2A> 等待，直到进程启动 <xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A> 完成。  
  
2.  使用方法同步进行 <xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A> 。 <xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A> 启动进程，等待它完成，然后返回。 <xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A>当控件的主线程不同于调用线程，以便将调用封送到适当的线程时使用。  
  
> [!NOTE]
>  <xref:System.Security.Permissions.HostProtectionAttribute>应用于此类的特性具有以下 <xref:System.Security.Permissions.HostProtectionAttribute.Resources%2A> 属性值： <xref:System.Security.Permissions.HostProtectionResource.Synchronization> &#124; <xref:System.Security.Permissions.HostProtectionResource.ExternalThreading> 。 <xref:System.Security.Permissions.HostProtectionAttribute> 不影响桌面应用程序（通常通过双击图标、键入命令或在浏览器中输入 URL 来启动这些应用程序）。 有关详细信息，请参阅 <xref:System.Security.Permissions.HostProtectionAttribute> 类或 [SQL Server 编程和宿主保护特性](/dotnet/framework/performance/sql-server-programming-and-host-protection-attributes)。  
  
 ]]></format>
    </remarks>
    <altmember cref="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])" />
    <altmember cref="M:System.ComponentModel.ISynchronizeInvoke.EndInvoke(System.IAsyncResult)" />
    <altmember cref="M:System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])" />
  </Docs>
  <Members>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginInvoke (Delegate method, object[]? args);" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginInvoke(class System.Delegate method, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (method As Delegate, args As Object()) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginInvoke(Delegate ^ method, cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="abstract member BeginInvoke : Delegate * obj[] -&gt; IAsyncResult" Usage="iSynchronizeInvoke.BeginInvoke (method, args)" />
      <MemberSignature Language="C#" Value="public IAsyncResult BeginInvoke (Delegate method, object[] args);" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Primitives</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="args" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="method">对方法的 <see cref="T:System.Delegate" />，采用 <paramref name="args" /> 中包含的相同数字和类型的参数。</param>
        <param name="args">作为给定方法的参数传递的 <see cref="T:System.Object" /> 类型数组。 如果不需要参数，则可以为 <see langword="null" />。</param>
        <summary>在创建了此对象的线程上异步执行委托。</summary>
        <returns><see cref="T:System.IAsyncResult" /> 接口，表示通过调用此方法启动的异步操作。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `method`委托在创建对象的线程上执行，而不是在其上调用的线程上执行 <xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A> 。  
  
 委托是异步调用的，并且此方法会立即返回。 可以从任何线程调用此方法。 如果需要使用此方法启动的进程的返回值，请调用 <xref:System.ComponentModel.ISynchronizeInvoke.EndInvoke%2A> 以获取值。  
  
 如果需要以同步方式调用委托，请改用 <xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A> 方法。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ComponentModel.ISynchronizeInvoke.EndInvoke(System.IAsyncResult)" />
      </Docs>
    </Member>
    <Member MemberName="EndInvoke">
      <MemberSignature Language="C#" Value="public object? EndInvoke (IAsyncResult result);" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object EndInvoke(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.ISynchronizeInvoke.EndInvoke(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndInvoke (result As IAsyncResult) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ EndInvoke(IAsyncResult ^ result);" />
      <MemberSignature Language="F#" Value="abstract member EndInvoke : IAsyncResult -&gt; obj" Usage="iSynchronizeInvoke.EndInvoke result" />
      <MemberSignature Language="C#" Value="public object EndInvoke (IAsyncResult result);" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Primitives</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result"><see cref="T:System.IAsyncResult" /> 接口，表示通过调用 <see cref="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])" /> 启动的异步操作。</param>
        <summary>等待通过调用 <see cref="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])" /> 启动的进程完成，然后返回该进程生成的值。</summary>
        <returns>表示异步操作生成的返回值的 <see cref="T:System.Object" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法获取由此接口传递的所表示的异步操作的返回值 <xref:System.IAsyncResult> 。 如果异步操作尚未完成，则此方法将等待，直到结果可用。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (Delegate? method, object[] args);" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Invoke(class System.Delegate method, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (method As Delegate, args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(Delegate ^ method, cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="abstract member Invoke : Delegate * obj[] -&gt; obj" Usage="iSynchronizeInvoke.Invoke (method, args)" />
      <MemberSignature Language="C#" Value="public object Invoke (Delegate method, object[] args);" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Primitives</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="args" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="method">包含要调用的方法的 <see cref="T:System.Delegate" />，在控件的线程上下文中。</param>
        <param name="args">表示要传递到给定方法的参数的 <see cref="T:System.Object" /> 类型数组。 如果不需要参数，则可以为 <see langword="null" />。</param>
        <summary>在创建了此对象的线程上同步执行委托并封送对创建线程的调用。</summary>
        <returns>表示正被调用的委托返回值的 <see cref="T:System.Object" />；如果该委托没有返回值，则为 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 与不同 <xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A> 的是，此方法以同步方式运行，也就是说，它会等到进程完成后再返回。 调用期间引发的异常传播回调用方。  
  
 在从其他线程调用方法时，请使用此方法将调用封送到正确的线程。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeRequired">
      <MemberSignature Language="C#" Value="public bool InvokeRequired { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool InvokeRequired" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.ISynchronizeInvoke.InvokeRequired" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InvokeRequired As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool InvokeRequired { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.InvokeRequired : bool" Usage="System.ComponentModel.ISynchronizeInvoke.InvokeRequired" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Primitives</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，通过该值指示当调用实现此接口的对象时，调用方是否必须调用 <see cref="M:System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])" />。</summary>
        <value>如果调用方必须调用 <see cref="M:System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])" />，则为 <see langword="true" />；否则，为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性确定在 <xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A> 对实现此接口的对象进行方法调用时，调用方是否必须调用。 此类对象绑定到特定的线程，并且不是线程安全的。 如果要从其他线程调用方法，则必须使用 <xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A> 方法将调用封送到正确线程。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
