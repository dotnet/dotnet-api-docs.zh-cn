<Type Name="EntityCollection&lt;TEntity&gt;" FullName="System.Data.Objects.DataClasses.EntityCollection&lt;TEntity&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="879c12a149705f30232063332a6f058199ff902f" /><Meta Name="ms.sourcegitcommit" Value="b53d35b4a410c949742abd4c6a989d1af5357bca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="86631278" /></Metadata><TypeSignature Language="C#" Value="public sealed class EntityCollection&lt;TEntity&gt; : System.Data.Objects.DataClasses.RelatedEnd, System.Collections.Generic.ICollection&lt;TEntity&gt;, System.Collections.Generic.IEnumerable&lt;TEntity&gt;, System.ComponentModel.IListSource where TEntity : class, IEntityWithRelationships" FrameworkAlternate="netframework-3.5" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit EntityCollection`1&lt;class (class System.Data.Objects.DataClasses.IEntityWithRelationships) TEntity&gt; extends System.Data.Objects.DataClasses.RelatedEnd implements class System.Collections.Generic.ICollection`1&lt;!TEntity&gt;, class System.Collections.Generic.IEnumerable`1&lt;!TEntity&gt;, class System.Collections.IEnumerable, class System.ComponentModel.IListSource" FrameworkAlternate="netframework-3.5" />
  <TypeSignature Language="DocId" Value="T:System.Data.Objects.DataClasses.EntityCollection`1" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class EntityCollection(Of TEntity)&#xA;Inherits RelatedEnd&#xA;Implements ICollection(Of TEntity), IEnumerable(Of TEntity), IListSource" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TEntity&gt;&#xA; where TEntity : class, IEntityWithRelationshipspublic ref class EntityCollection sealed : System::Data::Objects::DataClasses::RelatedEnd, System::Collections::Generic::ICollection&lt;TEntity&gt;, System::Collections::Generic::IEnumerable&lt;TEntity&gt;, System::ComponentModel::IListSource" FrameworkAlternate="netframework-3.5" />
  <TypeSignature Language="F#" Value="type EntityCollection&lt;'Entity (requires 'Entity : null and 'Entity :&gt; IEntityWithRelationships)&gt; = class&#xA;    inherit RelatedEnd&#xA;    interface ICollection&lt;'Entity (requires 'Entity : null and 'Entity :&gt; IEntityWithRelationships)&gt;&#xA;    interface seq&lt;'Entity (requires 'Entity : null and 'Entity :&gt; IEntityWithRelationships)&gt;&#xA;    interface IEnumerable&#xA;    interface IListSource" FrameworkAlternate="netframework-3.5" />
  <TypeSignature Language="C#" Value="public sealed class EntityCollection&lt;TEntity&gt; : System.Data.Objects.DataClasses.RelatedEnd, System.Collections.Generic.ICollection&lt;TEntity&gt;, System.Collections.Generic.IEnumerable&lt;TEntity&gt;, System.ComponentModel.IListSource where TEntity : class" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit EntityCollection`1&lt;class TEntity&gt; extends System.Data.Objects.DataClasses.RelatedEnd implements class System.Collections.Generic.ICollection`1&lt;!TEntity&gt;, class System.Collections.Generic.IEnumerable`1&lt;!TEntity&gt;, class System.Collections.IEnumerable, class System.ComponentModel.IListSource" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TEntity&gt;&#xA; where TEntity : classpublic ref class EntityCollection sealed : System::Data::Objects::DataClasses::RelatedEnd, System::Collections::Generic::ICollection&lt;TEntity&gt;, System::Collections::Generic::IEnumerable&lt;TEntity&gt;, System::ComponentModel::IListSource" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <TypeSignature Language="F#" Value="type EntityCollection&lt;'Entity (requires 'Entity : null)&gt; = class&#xA;    inherit RelatedEnd&#xA;    interface ICollection&lt;'Entity (requires 'Entity : null)&gt;&#xA;    interface seq&lt;'Entity (requires 'Entity : null)&gt;&#xA;    interface IEnumerable&#xA;    interface IListSource" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <AssemblyInfo>
    <AssemblyName>System.Data.Entity</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TEntity">
      <Constraints>
        <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Data.Objects.DataClasses.RelatedEnd</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.ICollection&lt;TEntity&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;TEntity&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ComponentModel.IListSource</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[System.Serializable]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Serializable&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="TEntity">集合的实体类型。</typeparam>
    <summary>表示关系“多”端的对象集合。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Data.Objects.DataClasses.EntityCollection%601> 是特定实体类型的对象集合，该实体类型表示一对多或多对多关系的“多”端。

 由导航属性返回一个 <xref:System.Data.Objects.DataClasses.EntityCollection%601>。 使用 <xref:System.Data.Objects.DataClasses.EntityCollection%601.Load%2A> 方法可以将相关对象加载到 <xref:System.Data.Objects.DataClasses.EntityCollection%601> 中。 要存储特定实体类型的对象的非相关集合，例如 <xref:System.Data.Objects.ObjectQuery%601> 的结果，请使用 <xref:System.Collections.Generic.List%601> 类的实例。

 <xref:System.Data.Objects.DataClasses.EntityCollection%601> 可能有对应的 <xref:System.Data.Objects.DataClasses.EntityReference%601>。 当 <xref:System.Data.Objects.DataClasses.EntityCollection%601> 和 <xref:System.Data.Objects.DataClasses.EntityReference%601> 模型位于同一关系的相反端时，该关系的完整性维持在对象级别。 两个类自动同步。

 此类不能被继承。



## Examples
 此示例基于 [艾德公司销售模型](https://archive.codeplex.com/?p=msftdbprodsamples)。 若要运行此示例中的代码，必须已将 AdventureWorks 销售模型添加到您的项目中，并将项目配置为使用实体框架。 为此，请完成 [如何：手动配置实体框架项目](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/bb738546(v=vs.100)) 和 [如何：手动定义模型和映射文件](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/bb399785(v=vs.100))中的过程。

 此示例将执行下列操作：

1.  创建两个新的 `SalesOrderHeader` 实体并添加到 `Contact` 实体。

2.  从与 <xref:System.Data.Objects.DataClasses.RelationshipManager> 实体关联的 `Contact` 中获取所有相关端。

3.  循环访问 <xref:System.Data.Objects.DataClasses.IRelatedEnd> 集合。

4.  获取每个相关端的 <xref:System.Data.Objects.DataClasses.EntityCollection%601>。

5.  使用 <xref:System.Data.Objects.DataClasses.EntityCollection%601.Remove%2A> 方法从集合中移除其中一个实体。

6.  调用 <xref:System.Data.Objects.DataClasses.EntityCollection%601.Contains%2A> 方法确定该对象是否已从集合中移除。

7.  使用 <xref:System.Data.Objects.DataClasses.EntityCollection%601.Add%2A> 方法添加回实体。

 [!code-csharp[DP ObjectServices Concepts#IRelatedEnd_Add](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#irelatedend_add)]
 [!code-vb[DP ObjectServices Concepts#IRelatedEnd_Add](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#irelatedend_add)]

 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EntityCollection ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.DataClasses.EntityCollection`1.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EntityCollection();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Data.Objects.DataClasses.EntityCollection%601> 的此公开构造函数旨在供对象服务在反序列化对象图时使用。 应从导航属性而不是使用此构造函数访问 <xref:System.Data.Objects.DataClasses.EntityCollection%601> 的实例。

 要存储特定实体类型的对象的非相关集合，例如 <xref:System.Data.Objects.ObjectQuery%601> 的结果，请使用 <xref:System.Collections.Generic.List%601> 的实例。

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (TEntity entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Add(!TEntity entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.DataClasses.EntityCollection`1.Add(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (entity As TEntity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Add(TEntity entity);" />
      <MemberSignature Language="F#" Value="override this.Add : 'Entity -&gt; unit" Usage="entityCollection.Add entity" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Add(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="TEntity" />
      </Parameters>
      <Docs>
        <param name="entity">添加到集合的对象。 <paramref name="entity" /> 必须实现 <see cref="T:System.Data.Objects.DataClasses.IEntityWithRelationships" />。</param>
        <summary>将对象添加到集合。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Data.Objects.DataClasses.EntityCollection%601.Add%2A> 方法将对象添加到 <xref:System.Data.Objects.DataClasses.EntityCollection%601> 并创建两个对象之间的关系。 当源对象附加到 <xref:System.Data.Objects.ObjectContext> 实例时，<xref:System.Data.Objects.DataClasses.EntityCollection%601.Add%2A> 方法也将对象添加到 <xref:System.Data.Objects.ObjectContext>。 当调用 <xref:System.Data.Objects.ObjectContext.SaveChanges%2A> 时，此操作转换为插入到数据源中的操作。 有关详细信息，请参阅 [创建、添加、修改和删除对象](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/bb738695(v=vs.100))。

 可对同一对象实例多次调用 <xref:System.Data.Objects.DataClasses.EntityCollection%601.Add%2A> 方法。



## Examples
 此示例基于 [艾德公司销售模型](https://archive.codeplex.com/?p=msftdbprodsamples)。 若要运行此示例中的代码，必须已将 AdventureWorks 销售模型添加到您的项目中，并将项目配置为使用实体框架。 为此，请完成 [如何：手动配置实体框架项目](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/bb738546(v=vs.100)) 和 [如何：手动定义模型和映射文件](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/bb399785(v=vs.100))中的过程。

 此示例创建两个新的 `SalesOrderHeader` 实体，将它们添加到 `Contact` 实体，然后在移除对象后，使用 <xref:System.Data.Objects.DataClasses.EntityCollection%601.Add%2A> 方法将该对象添加回集合。

 [!code-csharp[DP ObjectServices Concepts#IRelatedEnd_Add](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#irelatedend_add)]
 [!code-vb[DP ObjectServices Concepts#IRelatedEnd_Add](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#irelatedend_add)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="entity" /> 为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Attach">
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>定义对象上下文中两个附加对象之间的关系。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Attach">
      <MemberSignature Language="C#" Value="public void Attach (System.Collections.Generic.IEnumerable&lt;TEntity&gt; entities);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Attach(class System.Collections.Generic.IEnumerable`1&lt;!TEntity&gt; entities) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.DataClasses.EntityCollection`1.Attach(System.Collections.Generic.IEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub Attach (entities As IEnumerable(Of TEntity))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Attach(System::Collections::Generic::IEnumerable&lt;TEntity&gt; ^ entities);" />
      <MemberSignature Language="F#" Value="override this.Attach : seq&lt;'Entity (requires 'Entity : null and 'Entity :&gt; System.Data.Objects.DataClasses.IEntityWithRelationships)&gt; -&gt; unit" Usage="entityCollection.Attach entities" FrameworkAlternate="netframework-3.5" />
      <MemberSignature Language="F#" Value="override this.Attach : seq&lt;'Entity (requires 'Entity : null)&gt; -&gt; unit" Usage="entityCollection.Attach entities" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entities" Type="System.Collections.Generic.IEnumerable&lt;TEntity&gt;" />
      </Parameters>
      <Docs>
        <param name="entities">对象上下文中与源对象相关的对象集合。</param>
        <summary>定义对象上下文中对象和相关对象集合之间的关系。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Data.Objects.ObjectContext.Attach%2A> 方法用于定义当源对象和相关对象集合已经存在于对象上下文中时两者之间的关系. 要附加已经定义了关系的对象或对象图，请对 <xref:System.Data.Objects.ObjectContext.Attach%2A> 调用 <xref:System.Data.Objects.ObjectContext> 方法。 要创建与源对象关联的新对象，请对 <xref:System.Data.Objects.DataClasses.EntityCollection%601.Add%2A> 调用 <xref:System.Data.Objects.DataClasses.EntityCollection%601> 方法。 有关详细信息，请参阅 [附加和分离对象](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/bb738470(v=vs.100))。

 如果集合已经填充或部分填充，<xref:System.Data.Objects.DataClasses.EntityCollection%601.Attach%2A> 方法将现有实体和给定实体合并。 不假定给定实体为相关实体的完整集。

 所有传递的实体必须处于 <xref:System.Data.EntityState.Unchanged> 或 <xref:System.Data.EntityState.Modified> 状态。 仅当状态管理器正在跟踪关系实例时，允许 <xref:System.Data.EntityState.Deleted> 状态的对象。

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="entities" /> 集合为 <see langword="null" />。</exception>
        <exception cref="T:System.InvalidOperationException">源对象或 <paramref name="entities" /> 集合中的对象为 <see langword="null" /> 或者不处于 <see cref="F:System.Data.EntityState.Unchanged" /> 或 <see cref="F:System.Data.EntityState.Modified" /> 状态。

- 或 -

不能基于 [艾德公司销售模型](https://archive.codeplex.com/?p=msftdbprodsamples) EDM 元数据定义关系。 这会在概念性架构中的关联不支持两种类型间的关系时发生。</exception>
      </Docs>
    </Member>
    <Member MemberName="Attach">
      <MemberSignature Language="C#" Value="public void Attach (TEntity entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Attach(!TEntity entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.DataClasses.EntityCollection`1.Attach(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Attach (entity As TEntity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Attach(TEntity entity);" />
      <MemberSignature Language="F#" Value="override this.Attach : 'Entity -&gt; unit" Usage="entityCollection.Attach entity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="TEntity" />
      </Parameters>
      <Docs>
        <param name="entity">附加的对象。</param>
        <summary>定义对象上下文中两个附加对象之间的关系。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Data.Objects.DataClasses.EntityCollection%601.Attach%2A> 方法用于定义当两个对象已经存在于对象上下文中时两者之间的关系。 要附加已经定义了关系的对象或对象图，请对 <xref:System.Data.Objects.ObjectContext.Attach%2A> 调用 <xref:System.Data.Objects.ObjectContext> 方法。 要创建与源对象关联的新对象，请对 <xref:System.Data.Objects.DataClasses.EntityCollection%601.Add%2A> 调用 <xref:System.Data.Objects.DataClasses.EntityCollection%601> 方法。 有关详细信息，请参阅 [附加和分离对象](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/bb738470(v=vs.100))。

 如果 <xref:System.Data.Objects.DataClasses.EntityCollection%601> 已经加载对象，<xref:System.Data.Objects.DataClasses.EntityCollection%601.Attach%2A> 方法将把该对象与 <xref:System.Data.Objects.DataClasses.EntityCollection%601> 中的现有对象合并。

 不假定附加的对象为相关实体对象的完整集。

 与此 <xref:System.Data.Objects.DataClasses.EntityCollection%601> 关联的对象以及附加到它的所有对象必须处于 <xref:System.Data.EntityState.Unchanged> 或 <xref:System.Data.EntityState.Modified> 状态。

 处于 <xref:System.Data.EntityState.Deleted> 状态的对象只能在 <xref:System.Data.Objects.ObjectStateManager> 已经跟踪关系实例时附加。



## Examples
 此示例基于 [艾德公司销售模型](https://archive.codeplex.com/?p=msftdbprodsamples)。 若要运行此示例中的代码，必须已将 AdventureWorks 销售模型添加到您的项目中，并将项目配置为使用实体框架。 为此，请完成 [如何：手动配置实体框架项目](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/bb738546(v=vs.100)) 和 [如何：手动定义模型和映射文件](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/bb399785(v=vs.100))中的过程。

 此示例将已分离的对象的集合 `SalesOrderDetail` 和已分离的 `SalesOrderHeader` 对象附加到对象上下文，然后定义 `SalesOrderHeader` 对象和每个对象之间的关系 `SalesOrderDetail` 。

 [!code-csharp[DP ObjectServices Concepts#AttachRelatedObjects](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#attachrelatedobjects)]
 [!code-vb[DP ObjectServices Concepts#AttachRelatedObjects](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#attachrelatedobjects)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">在 <paramref name="entity" /> 为 <see langword="null" /> 时。</exception>
        <exception cref="T:System.InvalidOperationException">当 <paramref name="entity" /> 无法与源对象关联时。 这会在概念性架构中的关联不支持两种类型间的关系时发生。

- 或 -

当任一对象为 <see langword="null" /> 或者不处于 <see cref="F:System.Data.EntityState.Unchanged" /> 或 <see cref="F:System.Data.EntityState.Modified" /> 状态时。</exception>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.DataClasses.EntityCollection`1.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Clear();" />
      <MemberSignature Language="F#" Value="override this.Clear : unit -&gt; unit" Usage="entityCollection.Clear " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Clear</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>从集合中移除所有实体。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Data.Objects.DataClasses.EntityCollection%601.Clear%2A> 执行下列操作：

-   将 <xref:System.Data.Objects.DataClasses.RelatedEnd.IsLoaded%2A> 标志设置为 `false` 。

-   从集合中移除所有实体。

-   从 <xref:System.Data.Objects.DataClasses.EntityCollection%601> 分离移除的实体和 <xref:System.Data.Objects.ObjectStateManager> 的所有者之间的关系。

-   从相关实体移除 <xref:System.Data.Objects.DataClasses.EntityCollection%601> 的所有者。

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (TEntity entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Contains(!TEntity entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.DataClasses.EntityCollection`1.Contains(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (entity As TEntity) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Contains(TEntity entity);" />
      <MemberSignature Language="F#" Value="abstract member Contains : 'Entity -&gt; bool&#xA;override this.Contains : 'Entity -&gt; bool" Usage="entityCollection.Contains entity" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Contains(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="TEntity" />
      </Parameters>
      <Docs>
        <param name="entity">要在 <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" /> 中定位的对象。</param>
        <summary>确定特定对象是否存在于集合中。</summary>
        <returns>如果在 <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" /> 中找到对象，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 使用 <xref:System.Object.Equals%2A?displayProperty=nameWithType> 方法来比较指定对象和集合中已经存在的对象。



## Examples
 此示例基于 [艾德公司销售模型](https://archive.codeplex.com/?p=msftdbprodsamples)。 若要运行此示例中的代码，必须已将 AdventureWorks 销售模型添加到您的项目中，并将项目配置为使用实体框架。 为此，请完成 [如何：手动配置实体框架项目](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/bb738546(v=vs.100)) 和 [如何：手动定义模型和映射文件](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/bb399785(v=vs.100))中的过程。

 此示例将执行下列操作：

1.  创建两个新的 `SalesOrderHeader` 实体并添加到 `Contact` 实体。

2.  从与 Contact 实体关联的 <xref:System.Data.Objects.DataClasses.RelationshipManager> 中获取所有相关端。

3.  循环访问 <xref:System.Data.Objects.DataClasses.IRelatedEnd> 集合。

4.  获取每个相关端的 <xref:System.Data.Objects.DataClasses.EntityCollection%601>。

5.  使用 <xref:System.Data.Objects.DataClasses.EntityCollection%601.Remove%2A> 方法从集合中移除其中一个实体。

6.  调用 <xref:System.Data.Objects.DataClasses.EntityCollection%601.Contains%2A> 方法确定该对象是否已从集合中移除。

7.  使用 <xref:System.Data.Objects.DataClasses.EntityCollection%601.Add%2A> 方法添加回实体。

 [!code-csharp[DP ObjectServices Concepts#IRelatedEnd_Add](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#irelatedend_add)]
 [!code-vb[DP ObjectServices Concepts#IRelatedEnd_Add](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#irelatedend_add)]

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (TEntity[] array, int arrayIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CopyTo(!TEntity[] array, int32 arrayIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.DataClasses.EntityCollection`1.CopyTo(`0[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (array As TEntity(), arrayIndex As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void CopyTo(cli::array &lt;TEntity&gt; ^ array, int arrayIndex);" />
      <MemberSignature Language="F#" Value="abstract member CopyTo : 'Entity[] * int -&gt; unit&#xA;override this.CopyTo : 'Entity[] * int -&gt; unit" Usage="entityCollection.CopyTo (array, arrayIndex)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="TEntity[]" />
        <Parameter Name="arrayIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">要复制到的数组。</param>
        <param name="arrayIndex">数组中开始复制的位置的索引（从零开始）。</param>
        <summary>将集合中的所有内容复制到数组，从目标数组的指定索引处开始。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Data.Objects.DataClasses.EntityCollection`1.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="System.Data.Objects.DataClasses.EntityCollection&lt;'Entity (requires 'Entity : null and 'Entity :&gt; System.Data.Objects.DataClasses.IEntityWithRelationships)&gt;.Count" FrameworkAlternate="netframework-3.5" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="System.Data.Objects.DataClasses.EntityCollection&lt;'Entity (requires 'Entity : null)&gt;.Count" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.ICollection`1.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取集合中包含的对象数。</summary>
        <value><see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" /> 中包含的元素数。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Data.Objects.DataClasses.EntityCollection%601.Count%2A> 属性获取当前本地集合中的实体数量，而不反映数据源中的集合大小。 零计数不一定表示相关集合为空。 要确定数据源中的集合大小，请调用 <xref:System.Data.Objects.DataClasses.EntityCollection%601.Load%2A> 方法或在查询路径中包含相关对象。 有关详细信息，请参阅 [加载相关对象](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/bb896272(v=vs.100))。

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateSourceQuery">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectQuery&lt;TEntity&gt; CreateSourceQuery ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectQuery`1&lt;!TEntity&gt; CreateSourceQuery() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.DataClasses.EntityCollection`1.CreateSourceQuery" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateSourceQuery () As ObjectQuery(Of TEntity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::Objects::ObjectQuery&lt;TEntity&gt; ^ CreateSourceQuery();" />
      <MemberSignature Language="F#" Value="override this.CreateSourceQuery : unit -&gt; System.Data.Objects.ObjectQuery&lt;'Entity (requires 'Entity : null and 'Entity :&gt; System.Data.Objects.DataClasses.IEntityWithRelationships)&gt;" Usage="entityCollection.CreateSourceQuery " FrameworkAlternate="netframework-3.5" />
      <MemberSignature Language="F#" Value="override this.CreateSourceQuery : unit -&gt; System.Data.Objects.ObjectQuery&lt;'Entity (requires 'Entity : null)&gt;" Usage="entityCollection.CreateSourceQuery " FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectQuery&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返回一个对象查询，执行该查询时返回的对象集合与当前集合包含的对象相同。</summary>
        <returns>表示实体集合的 <see cref="T:System.Data.Objects.ObjectQuery`1" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 此属性用于获得 <xref:System.Data.Objects.ObjectQuery%601> 的新实例，该实例返回同一对象集。 对于更复杂的联接、联合或筛选查询，或者使用 <xref:System.Data.Objects.MergeOption.NoTracking> 选项返回处于已分离状态的相同对象，这可以作为起点。

 <xref:System.Data.Objects.DataClasses.EntityCollection%601.CreateSourceQuery%2A> 用于筛选中的对象， <xref:System.Data.Objects.DataClasses.EntityCollection%601> 使你能够仅绑定特定类型的对象。 有关详细信息，请参阅 [将对象绑定到控件](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/bb738469(v=vs.100))。



## Examples
 此示例基于 [School 模型](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/bb896300(v=vs.100))的修改版本。 此版本支持每种类型一个表继承，并使用 `Course` 作为抽象类型。 完成本演练以修改 School 模型，以支持本主题中使用的每种类型一个表继承示例。

 此示例演示如何使用 <xref:System.Data.Objects.DataClasses.EntityCollection%601.CreateSourceQuery%2A> 筛选中的对象 <xref:System.Data.Objects.DataClasses.EntityCollection%601> ，并且仅绑定到特定类型的对象。 有关此示例的完整版本，请参阅 [如何：将控件绑定到派生类型](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/dd283135(v=vs.100))。



 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">当对象处于 <see cref="F:System.Data.EntityState.Added" /> 状态时。

- 或 -

当对象处于 <see cref="F:System.Data.EntityState.Detached" /> 状态并且 <see cref="T:System.Data.Objects.MergeOption" /> 不为 <see cref="F:System.Data.Objects.MergeOption.NoTracking" /> 时。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerator&lt;TEntity&gt; GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;!TEntity&gt; GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.DataClasses.EntityCollection`1.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IEnumerator(Of TEntity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::Generic::IEnumerator&lt;TEntity&gt; ^ GetEnumerator();" />
      <MemberSignature Language="F#" Value="override this.GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;'Entity (requires 'Entity : null and 'Entity :&gt; System.Data.Objects.DataClasses.IEntityWithRelationships)&gt;" Usage="entityCollection.GetEnumerator " FrameworkAlternate="netframework-3.5" />
      <MemberSignature Language="F#" Value="override this.GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;'Entity (requires 'Entity : null)&gt;" Usage="entityCollection.GetEnumerator " FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返回一个枚举器，用于循环访问集合中的对象。</summary>
        <returns>一个 <see cref="T:System.Collections.IEnumerator" />，循环访问 <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" /> 缓存的值集。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public bool IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Data.Objects.DataClasses.EntityCollection`1.IsReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsReadOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsReadOnly { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsReadOnly : bool" Usage="System.Data.Objects.DataClasses.EntityCollection&lt;'Entity (requires 'Entity : null and 'Entity :&gt; System.Data.Objects.DataClasses.IEntityWithRelationships)&gt;.IsReadOnly" FrameworkAlternate="netframework-3.5" />
      <MemberSignature Language="F#" Value="member this.IsReadOnly : bool" Usage="System.Data.Objects.DataClasses.EntityCollection&lt;'Entity (requires 'Entity : null)&gt;.IsReadOnly" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.ICollection`1.IsReadOnly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示 <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" /> 是否为只读。</summary>
        <value>始终返回 <see langword="false" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public override void Load (System.Data.Objects.MergeOption mergeOption);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Load(valuetype System.Data.Objects.MergeOption mergeOption) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.DataClasses.EntityCollection`1.Load(System.Data.Objects.MergeOption)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Load (mergeOption As MergeOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Load(System::Data::Objects::MergeOption mergeOption);" />
      <MemberSignature Language="F#" Value="override this.Load : System.Data.Objects.MergeOption -&gt; unit" Usage="entityCollection.Load mergeOption" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mergeOption" Type="System.Data.Objects.MergeOption" />
      </Parameters>
      <Docs>
        <param name="mergeOption">指定此集合中的对象应如何与从以前针对相同 <see cref="T:System.Data.Objects.ObjectContext" /> 的查询中返回的对象合并。</param>
        <summary>使用指定的合并选项将相关对象加载到集合中。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
此方法 `RelatedEnd.ValidateLoad` 在加载集合之前调用内部方法，后者验证对的调用 <xref:System.Data.Objects.DataClasses.RelatedEnd.Load%2A> 是否具有正确的条件。 `RelatedEnd.ValidateLoad`方法检查：

* 存在有效的 <xref:System.Data.Objects.ObjectContext> 。
* 实体未处于 <xref:System.Data.EntityState.Deleted> 状态。
* <xref:System.Data.Objects.MergeOption><xref:System.Data.Objects.DataClasses.RelatedEnd.Load%2A> <xref:System.Data.Objects.MergeOption.NoTracking> 当且仅当源实体为时，适用于 <xref:System.Data.Objects.MergeOption.NoTracking> 。 如果源实体是使用任何其他对象进行检索的 <xref:System.Data.Objects.MergeOption> ，则 <xref:System.Data.Objects.DataClasses.RelatedEnd.Load%2A> <xref:System.Data.Objects.MergeOption> 可以是 <xref:System.Data.Objects.MergeOption.NoTracking> (的，例如，可以使用加载实体， <xref:System.Data.Objects.MergeOption.OverwriteChanges> 并且 <xref:System.Data.Objects.DataClasses.RelatedEnd.Load%2A> 可以 <xref:System.Data.Objects.MergeOption.AppendOnly>) 选项。
* 如果 `mergeOption` 为 <xref:System.Data.Objects.MergeOption.NoTracking> ，则 <xref:System.Data.Objects.DataClasses.RelatedEnd.Load%2A> 不在已加载的实体上调用，也不会对 <xref:System.Data.Objects.DataClasses.RelatedEnd.Load%2A> 非空的、未跟踪的进行调用 <xref:System.Data.Objects.DataClasses.RelatedEnd> 。

 当集合中的对象已加载到中时 <xref:System.Data.Objects.ObjectContext> ， <xref:System.Data.Objects.DataClasses.EntityCollection%601.Load%2A> 方法强制执行 <xref:System.Data.Objects.MergeOption> 由参数指定的 `mergeOption` 。 有关详细信息，请参阅 [标识解析、状态管理和更改跟踪](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/bb896269(v=vs.100))。

 若要显式加载相关对象，您必须 `Load` 对导航属性返回的相关端调用方法。 对于一对多关系，请 <xref:System.Data.Objects.DataClasses.EntityCollection%601.Load%2A> 对调用方法 <xref:System.Data.Objects.DataClasses.EntityCollection%601> 。 对于一对一关系，请调用 <xref:System.Data.Objects.DataClasses.EntityReference%601.Load%2A> 上的 <xref:System.Data.Objects.DataClasses.EntityReference%601> 。 这样可将相关对象数据加载到对象上下文中。 您可以使用 Visual Basic) 中的循环 (枚举返回的结果的集合 `foreach` `For Each...Next` ，并有条件地对结果中的 `Load` <xref:System.Data.Objects.DataClasses.EntityReference%601> <xref:System.Data.Objects.DataClasses.EntityCollection%601> 每个实体的和属性调用方法。

 <xref:System.Data.Objects.DataClasses.EntityCollection%601.Load%2A>无论是否为，方法都从数据源加载相关对象 <xref:System.Data.Objects.DataClasses.RelatedEnd.IsLoaded%2A> `true` 。

> [!NOTE]
>  当您在 <xref:System.Data.Objects.DataClasses.EntityCollection%601.Load%2A> (C#) 或 `foreach` (Visual Basic) 枚举过程中调用 `For Each` 方法时，对象服务会尝试打开一个新的数据读取器。 除非您已经通过在连接字符串中指定 `multipleactiveresultsets=true` 启用了多个活动结果集，否则此操作将失败。 还可以将查询的结果加载到一个 <xref:System.Collections.Generic.List%601> 集合中。 这样将关闭数据读取器，并允许您对集合进行枚举来加载引用的对象。

 <xref:System.Data.Objects.DataClasses.EntityCollection%601.Load%2A?displayProperty=nameWithType> 方法与 <xref:System.Data.Objects.DataClasses.EntityReference%601.Load%2A?displayProperty=nameWithType> 方法同步。



## Examples
 此示例基于 [艾德公司销售模型](https://archive.codeplex.com/?p=msftdbprodsamples)。 若要运行此示例中的代码，必须已将 AdventureWorks 销售模型添加到您的项目中，并将项目配置为使用实体框架。 为此，请完成 [如何：手动配置实体框架项目](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/bb738546(v=vs.100)) 和 [如何：手动定义模型和映射文件](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/bb399785(v=vs.100))中的过程。

 本示例为 `SalesOrderHeader` 实体加载相关 `Contact` 对象。

 [!code-csharp[DP ObjectServices Concepts#QueryWithLoad](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#querywithload)]
 [!code-vb[DP ObjectServices Concepts#QueryWithLoad](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#querywithload)]

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnCollectionDeserialized">
      <MemberSignature Language="C#" Value="public void OnCollectionDeserialized (System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void OnCollectionDeserialized(valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.DataClasses.EntityCollection`1.OnCollectionDeserialized(System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub OnCollectionDeserialized (context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void OnCollectionDeserialized(System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="member this.OnCollectionDeserialized : System.Runtime.Serialization.StreamingContext -&gt; unit" Usage="entityCollection.OnCollectionDeserialized context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.Runtime.Serialization.OnDeserialized]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Serialization.OnDeserialized&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" Index="0" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="context">流上下文。</param>
        <summary>在内部使用，用于反序列化实体对象。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnSerializing">
      <MemberSignature Language="C#" Value="public void OnSerializing (System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void OnSerializing(valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.DataClasses.EntityCollection`1.OnSerializing(System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub OnSerializing (context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void OnSerializing(System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="member this.OnSerializing : System.Runtime.Serialization.StreamingContext -&gt; unit" Usage="entityCollection.OnSerializing context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.Runtime.Serialization.OnSerializing]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Serialization.OnSerializing&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" Index="0" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="context">流上下文。</param>
        <summary>在内部使用，用于序列化实体对象。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public bool Remove (TEntity entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Remove(!TEntity entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.DataClasses.EntityCollection`1.Remove(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Remove (entity As TEntity) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Remove(TEntity entity);" />
      <MemberSignature Language="F#" Value="override this.Remove : 'Entity -&gt; bool" Usage="entityCollection.Remove entity" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Remove(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="TEntity" />
      </Parameters>
      <Docs>
        <param name="entity">要从集合中移除的对象。</param>
        <summary>从集合移除对象，并标记要删除的关系。</summary>
        <returns>如果成功移除了该项，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Data.Objects.DataClasses.EntityCollection%601.Remove%2A> 方法也删除源对象和要从集合中移除的对象之间的关系。 如果关系具有引用完整性约束，在依赖对象上调用 <xref:System.Data.Objects.DataClasses.EntityCollection%601.Remove%2A> 方法将标记关系和依赖对象进行删除。 发生此现象的原因是约束指示依赖对象在与父对象没有关系的情况下无法存在。 有关详细信息，请参阅 [ReferentialConstraint 元素 (CSDL) ](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/bb738464(v=vs.100))。

 <xref:System.Data.Objects.DataClasses.EntityCollection%601.Remove%2A>`false`如果指定的对象不在集合中，则返回。



## Examples
 此示例基于 [艾德公司销售模型](https://archive.codeplex.com/?p=msftdbprodsamples)。 若要运行此示例中的代码，必须已将 AdventureWorks 销售模型添加到您的项目中，并将项目配置为使用实体框架。 为此，请完成 [如何：手动配置实体框架项目](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/bb738546(v=vs.100)) 和 [如何：手动定义模型和映射文件](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/bb399785(v=vs.100))中的过程。

 本示例使用 <xref:System.Data.Objects.DataClasses.EntityCollection%601.Remove%2A> 方法从集合中移除一个实体，然后调用 <xref:System.Data.Objects.DataClasses.EntityCollection%601.Contains%2A> 方法确定该对象是否从集合中移除。

 [!code-csharp[DP ObjectServices Concepts#IRelatedEnd_Add](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#irelatedend_add)]
 [!code-vb[DP ObjectServices Concepts#IRelatedEnd_Add](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#irelatedend_add)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="entity" /> 对象为 <see langword="null" />。</exception>
        <exception cref="T:System.InvalidOperationException"><paramref name="entity" /> 对象没有附加到同一对象上下文。

- 或 -

<paramref name="entity" /> 对象没有有效的关系管理器。</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.DataClasses.EntityCollection`1.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IEnumerator ^ System.Collections.IEnumerable.GetEnumerator() = System::Collections::IEnumerable::GetEnumerator;" />
      <MemberSignature Language="F#" Value="abstract member System.Collections.IEnumerable.GetEnumerator : unit -&gt; System.Collections.IEnumerator&#xA;override this.System.Collections.IEnumerable.GetEnumerator : unit -&gt; System.Collections.IEnumerator" Usage="entityCollection.System.Collections.IEnumerable.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返回一个枚举器，用于循环访问 <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" /> 缓存的值集。</summary>
        <returns>一个 <see cref="T:System.Collections.IEnumerator" />，循环访问 <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" /> 缓存的值集。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.IListSource.ContainsListCollection">
      <MemberSignature Language="C#" Value="bool System.ComponentModel.IListSource.ContainsListCollection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.ComponentModel.IListSource.ContainsListCollection" />
      <MemberSignature Language="DocId" Value="P:System.Data.Objects.DataClasses.EntityCollection`1.System#ComponentModel#IListSource#ContainsListCollection" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property ContainsListCollection As Boolean Implements IListSource.ContainsListCollection" />
      <MemberSignature Language="C++ CLI" Value="property bool System::ComponentModel::IListSource::ContainsListCollection { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.System.ComponentModel.IListSource.ContainsListCollection : bool" Usage="System.ComponentModel.IListSource.ContainsListCollection" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.ComponentModel.IListSource.ContainsListCollection</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示相关实体集合是否包含集合对象。</summary>
        <value>此属性始终返回 <see langword="false" />，因为 <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" /> 包含对象，但不包含集合。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 此成员是显式接口成员的实现。 它只能在 <xref:System.Data.Objects.DataClasses.EntityCollection%601> 实例被强制转换为 <xref:System.ComponentModel.IListSource> 接口时使用。

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.IListSource.GetList">
      <MemberSignature Language="C#" Value="System.Collections.IList IListSource.GetList ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IList System.ComponentModel.IListSource.GetList() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.DataClasses.EntityCollection`1.System#ComponentModel#IListSource#GetList" />
      <MemberSignature Language="VB.NET" Value="Function GetList () As IList Implements IListSource.GetList" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IList ^ System.ComponentModel.IListSource.GetList() = System::ComponentModel::IListSource::GetList;" />
      <MemberSignature Language="F#" Value="abstract member System.ComponentModel.IListSource.GetList : unit -&gt; System.Collections.IList&#xA;override this.System.ComponentModel.IListSource.GetList : unit -&gt; System.Collections.IList" Usage="entityCollection.System.ComponentModel.IListSource.GetList " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.IListSource.GetList</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IList</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返回 <see cref="T:System.Collections.IList" /> 形式的集合用于数据绑定。</summary>
        <returns>实体对象的 <see cref="T:System.Collections.IList" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 此成员是显式接口成员的实现。 它只能在 <xref:System.Data.Objects.DataClasses.EntityCollection%601> 实例被强制转换为 <xref:System.ComponentModel.IListSource> 接口时使用。

 此方法实现与 <xref:System.Data.Objects.DataClasses.EntityCollection%601> 的数据绑定。 它由绑定到集合的控件进行调用。 有关详细信息，请参阅 [将对象绑定到控件](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/bb738469(v=vs.100))。

 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
