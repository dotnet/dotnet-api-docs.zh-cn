<Type Name="EntityReference&lt;TEntity&gt;" FullName="System.Data.Objects.DataClasses.EntityReference&lt;TEntity&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="068481ea89ffb8e70822645e65bb9daddaaa36a2" /><Meta Name="ms.sourcegitcommit" Value="c982ad9e10a242d90f1e631b5981570f9e5d9f34" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/10/2020" /><Meta Name="ms.locfileid" Value="89972448" /></Metadata><TypeSignature Language="C#" Value="public sealed class EntityReference&lt;TEntity&gt; : System.Data.Objects.DataClasses.EntityReference where TEntity : class, IEntityWithRelationships" FrameworkAlternate="netframework-3.5" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit EntityReference`1&lt;class (class System.Data.Objects.DataClasses.IEntityWithRelationships) TEntity&gt; extends System.Data.Objects.DataClasses.EntityReference" FrameworkAlternate="netframework-3.5" />
  <TypeSignature Language="DocId" Value="T:System.Data.Objects.DataClasses.EntityReference`1" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class EntityReference(Of TEntity)&#xA;Inherits EntityReference" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TEntity&gt;&#xA; where TEntity : class, IEntityWithRelationshipspublic ref class EntityReference sealed : System::Data::Objects::DataClasses::EntityReference" FrameworkAlternate="netframework-3.5" />
  <TypeSignature Language="F#" Value="type EntityReference&lt;'Entity (requires 'Entity : null and 'Entity :&gt; IEntityWithRelationships)&gt; = class&#xA;    inherit EntityReference" FrameworkAlternate="netframework-3.5" />
  <TypeSignature Language="C#" Value="public sealed class EntityReference&lt;TEntity&gt; : System.Data.Objects.DataClasses.EntityReference where TEntity : class" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit EntityReference`1&lt;class TEntity&gt; extends System.Data.Objects.DataClasses.EntityReference" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TEntity&gt;&#xA; where TEntity : classpublic ref class EntityReference sealed : System::Data::Objects::DataClasses::EntityReference" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <TypeSignature Language="F#" Value="type EntityReference&lt;'Entity (requires 'Entity : null)&gt; = class&#xA;    inherit EntityReference" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <AssemblyInfo>
    <AssemblyName>System.Data.Entity</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TEntity">
      <Constraints>
        <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Data.Objects.DataClasses.EntityReference</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[System.Runtime.Serialization.DataContract]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.Serialization.DataContract&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[System.Serializable]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Serializable&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="TEntity">引用的实体类型。</typeparam>
    <summary>表示重数为零或一的关联的相关端。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks
 当相关端的重数为零或一时，导航属性返回一个 <xref:System.Data.Objects.DataClasses.EntityReference%601> 对象。 有关详细信息，请参阅 [NavigationProperty 元素 (CSDL) ](https://msdn.microsoft.com/library/5829a238-a50e-4c81-901d-7b54fc00f27e)。

 <xref:System.Data.Objects.DataClasses.EntityReference%601> 对象可能在关系的另一端具有相应的 <xref:System.Data.Objects.DataClasses.EntityCollection%601>（一对多关系）或 <xref:System.Data.Objects.DataClasses.EntityReference%601>（一对一关系）。 当 <xref:System.Data.Objects.DataClasses.EntityReference%601> 和 <xref:System.Data.Objects.DataClasses.EntityCollection%601> 模型位于同一关系的相反端时，该关系的完整性维持在对象级别。

 此类不能被继承。



## Examples
 此示例演示如何使用 <xref:System.Data.Objects.DataClasses.EntityReference%601> 对象更改 `SalesOrderHeader` 对象和表示订单发货地址的相关 `Address` 对象之间的关系。

 [!code-csharp[DP ObjectServices Concepts#ChangeObjectRelationship](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#changeobjectrelationship)]
 [!code-vb[DP ObjectServices Concepts#ChangeObjectRelationship](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#changeobjectrelationship)]

 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EntityReference ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.DataClasses.EntityReference`1.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EntityReference();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>创建 <see cref="T:System.Data.Objects.DataClasses.EntityReference`1" /> 的新实例。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Attach">
      <MemberSignature Language="C#" Value="public void Attach (TEntity entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Attach(!TEntity entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.DataClasses.EntityReference`1.Attach(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Attach (entity As TEntity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Attach(TEntity entity);" />
      <MemberSignature Language="F#" Value="override this.Attach : 'Entity -&gt; unit" Usage="entityReference.Attach entity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="TEntity" />
      </Parameters>
      <Docs>
        <param name="entity">附加的对象。</param>
        <summary>在对象上下文中创建两个对象之间的多对一或一对一关系。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Data.Objects.DataClasses.EntityReference%601.Attach%2A> 方法用于定义当对象和相关对象已经附加到一个对象上下文时，这两个对象之间的关系。 如果相关对象尚未附加到对象上下文，将相关对象设置为 <xref:System.Data.Objects.DataClasses.EntityReference%601.Value%2A> 属性。 两个对象都分离时，还可以通过将相关对象设置为 <xref:System.Data.Objects.DataClasses.EntityReference%601.Value%2A> 属性，然后附加对象图中的根对象来定义关系。 有关详细信息，请参阅 [附加和分离对象](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/bb738470(v=vs.100))。

 与此 <xref:System.Data.Objects.DataClasses.EntityReference%601> 关联的对象以及附加到它的所有对象必须处于 <xref:System.Data.EntityState.Unchanged> 或 <xref:System.Data.EntityState.Modified> 状态。

 处于 <xref:System.Data.EntityState.Deleted> 状态的对象只能在 <xref:System.Data.Objects.ObjectStateManager> 已经跟踪关系实例时附加。

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">在 <paramref name="entity" /> 为 <see langword="null" /> 时。</exception>
        <exception cref="T:System.InvalidOperationException">当 <paramref name="entity" /> 无法与当前相关端关联时。 这会在概念性架构中的关联不支持两种类型间的关系时发生。</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateSourceQuery">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectQuery&lt;TEntity&gt; CreateSourceQuery ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectQuery`1&lt;!TEntity&gt; CreateSourceQuery() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.DataClasses.EntityReference`1.CreateSourceQuery" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateSourceQuery () As ObjectQuery(Of TEntity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::Objects::ObjectQuery&lt;TEntity&gt; ^ CreateSourceQuery();" />
      <MemberSignature Language="F#" Value="override this.CreateSourceQuery : unit -&gt; System.Data.Objects.ObjectQuery&lt;'Entity (requires 'Entity : null and 'Entity :&gt; System.Data.Objects.DataClasses.IEntityWithRelationships)&gt;" Usage="entityReference.CreateSourceQuery " FrameworkAlternate="netframework-3.5" />
      <MemberSignature Language="F#" Value="override this.CreateSourceQuery : unit -&gt; System.Data.Objects.ObjectQuery&lt;'Entity (requires 'Entity : null)&gt;" Usage="entityReference.CreateSourceQuery " FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectQuery&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>创建一个返回相关对象的等效对象查询。</summary>
        <returns>一个 <see cref="T:System.Data.Objects.ObjectQuery`1" />，其返回相关对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 此方法用于获得一个在执行时返回相关对象的新 <xref:System.Data.Objects.ObjectQuery%601> 实例。 对于更复杂的联接、联合或筛选查询，或者使用 <xref:System.Data.Objects.MergeOption.NoTracking> 选项返回处于已分离状态的引用对象，这可以作为起点。

 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">当对象处于 <see cref="F:System.Data.EntityState.Added" /> 状态时。

- 或 -

当对象处于 <see cref="F:System.Data.EntityState.Detached" /> 状态并且 <see cref="P:System.Data.Objects.ObjectQuery.MergeOption" /> 不为 <see cref="F:System.Data.Objects.MergeOption.NoTracking" /> 时。</exception>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public override void Load (System.Data.Objects.MergeOption mergeOption);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Load(valuetype System.Data.Objects.MergeOption mergeOption) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.DataClasses.EntityReference`1.Load(System.Data.Objects.MergeOption)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Load (mergeOption As MergeOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Load(System::Data::Objects::MergeOption mergeOption);" />
      <MemberSignature Language="F#" Value="override this.Load : System.Data.Objects.MergeOption -&gt; unit" Usage="entityReference.Load mergeOption" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mergeOption" Type="System.Data.Objects.MergeOption" />
      </Parameters>
      <Docs>
        <param name="mergeOption">指定当 <see cref="T:System.Data.Objects.ObjectContext" /> 中已存在该对象时，应如何返回它。</param>
        <summary>使用指定的合并选项为此 <see cref="T:System.Data.Objects.DataClasses.EntityReference`1" /> 加载相关对象。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 此方法用于加载相关对象。

 加载后，从 <xref:System.Data.Objects.DataClasses.EntityReference%601.Value%2A> 属性访问相关对象。

 若要显式加载相关对象，您必须 `Load` 对导航属性返回的相关端调用方法。 对于一对多关系，请调用 <xref:System.Data.Objects.DataClasses.EntityCollection%601.Load%2A> 的 <xref:System.Data.Objects.DataClasses.EntityCollection%601> 方法，而对于一对一关系，请调用 <xref:System.Data.Objects.DataClasses.EntityReference%601.Load%2A> 的 <xref:System.Data.Objects.DataClasses.EntityReference%601>。 这样可将相关对象数据加载到对象上下文中。 当查询返回结果时，可以使用 Visual Basic) 中的循环 (枚举对象的集合， `foreach` `For Each...Next` 并有条件地对结果中的 `Load` <xref:System.Data.Objects.DataClasses.EntityReference%601> <xref:System.Data.Objects.DataClasses.EntityCollection%601> 每个实体的和属性调用方法。

 <xref:System.Data.Objects.DataClasses.EntityReference%601.Load%2A>无论是否为，方法都从数据源加载相关对象 <xref:System.Data.Objects.DataClasses.RelatedEnd.IsLoaded%2A> `true` 。

> [!NOTE]
>  当您在 <xref:System.Data.Objects.DataClasses.EntityReference%601.Load%2A> (C#) 或 `foreach` (Visual Basic) 枚举过程中调用 `For Each` 方法时，对象服务会尝试打开一个新的数据读取器。 除非您已经通过在连接字符串中指定 `multipleactiveresultsets=true` 启用了多个活动结果集，否则此操作将失败。 还可以将查询的结果加载到一个 <xref:System.Collections.Generic.List%601> 集合中。 这样将关闭数据读取器，并允许您对集合进行枚举来加载引用的对象。

此方法 `RelatedEnd.ValidateLoad` 在加载相关对象之前调用内部方法，这将验证对的调用 <xref:System.Data.Objects.DataClasses.RelatedEnd.Load%2A> 是否具有正确的条件。 `RelatedEnd.ValidateLoad`方法检查：

* 存在有效的 <xref:System.Data.Objects.ObjectContext> 。
* 实体未处于 <xref:System.Data.EntityState.Deleted> 状态。
* <xref:System.Data.Objects.MergeOption><xref:System.Data.Objects.DataClasses.RelatedEnd.Load%2A> <xref:System.Data.Objects.MergeOption.NoTracking> 当且仅当源实体为时，适用于 <xref:System.Data.Objects.MergeOption.NoTracking> 。 如果源实体是使用任何其他对象进行检索的 <xref:System.Data.Objects.MergeOption> ，则 <xref:System.Data.Objects.DataClasses.RelatedEnd.Load%2A> <xref:System.Data.Objects.MergeOption> 可以是 <xref:System.Data.Objects.MergeOption.NoTracking> (的，例如，可以使用加载实体， <xref:System.Data.Objects.MergeOption.OverwriteChanges> 并且 <xref:System.Data.Objects.DataClasses.RelatedEnd.Load%2A> 可以 <xref:System.Data.Objects.MergeOption.AppendOnly>) 选项。
* 如果 `mergeOption` 为 <xref:System.Data.Objects.MergeOption.NoTracking> ，则 <xref:System.Data.Objects.DataClasses.RelatedEnd.Load%2A> 不在已加载的实体上调用，也不会对 <xref:System.Data.Objects.DataClasses.RelatedEnd.Load%2A> 非空的、未跟踪的进行调用 <xref:System.Data.Objects.DataClasses.RelatedEnd> 。

 如果已在中加载相关对象 <xref:System.Data.Objects.ObjectContext> ，则该 <xref:System.Data.Objects.DataClasses.EntityReference%601.Load%2A> 方法将强制执行 <xref:System.Data.Objects.MergeOption> 由参数指定的 `mergeOption` 。 有关详细信息，请参阅 [标识解析、状态管理和更改跟踪](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/bb896269(v=vs.100))。

 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="T:System.Data.Objects.DataClasses.EntityReference`1" /> 的源为 <see langword="null" />。

- 或 -

查询返回一个以上的相关端。

- 或 -

查询返回零个相关端，而预期应该有一个相关端。</exception>
        <related type="Article" href="/dotnet/framework/data/adonet/ef/querying-a-conceptual-model">以对象形式查询数据（实体框架）</related>
      </Docs>
    </Member>
    <Member MemberName="OnRefDeserialized">
      <MemberSignature Language="C#" Value="public void OnRefDeserialized (System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void OnRefDeserialized(valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.DataClasses.EntityReference`1.OnRefDeserialized(System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub OnRefDeserialized (context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void OnRefDeserialized(System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="member this.OnRefDeserialized : System.Runtime.Serialization.StreamingContext -&gt; unit" Usage="entityReference.OnRefDeserialized context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.Runtime.Serialization.OnDeserialized]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Serialization.OnDeserialized&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" Index="0" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="context">序列化的流。</param>
        <summary>此方法在内部使用，用于序列化相关实体对象。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnSerializing">
      <MemberSignature Language="C#" Value="public void OnSerializing (System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void OnSerializing(valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.DataClasses.EntityReference`1.OnSerializing(System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub OnSerializing (context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void OnSerializing(System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="member this.OnSerializing : System.Runtime.Serialization.StreamingContext -&gt; unit" Usage="entityReference.OnSerializing context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.Runtime.Serialization.OnSerializing]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Serialization.OnSerializing&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" Index="0" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="context">序列化的流。</param>
        <summary>此方法在内部使用，用于序列化相关实体对象。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public TEntity Value { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !TEntity Value" />
      <MemberSignature Language="DocId" Value="P:System.Data.Objects.DataClasses.EntityReference`1.Value" />
      <MemberSignature Language="VB.NET" Value="Public Property Value As TEntity" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TEntity Value { TEntity get(); void set(TEntity value); };" />
      <MemberSignature Language="F#" Value="member this.Value : 'Entity with get, set" Usage="System.Data.Objects.DataClasses.EntityReference&lt;'Entity (requires 'Entity : null and 'Entity :&gt; System.Data.Objects.DataClasses.IEntityWithRelationships)&gt;.Value" FrameworkAlternate="netframework-3.5" />
      <MemberSignature Language="F#" Value="member this.Value : 'Entity with get, set" Usage="System.Data.Objects.DataClasses.EntityReference&lt;'Entity (requires 'Entity : null)&gt;.Value" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Xml.Serialization.SoapIgnore]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Xml.Serialization.SoapIgnore&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Xml.Serialization.XmlIgnore]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Xml.Serialization.XmlIgnore&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>TEntity</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置此 <see cref="T:System.Data.Objects.DataClasses.EntityReference`1" /> 返回的相关对象。</summary>
        <value>此 <see cref="T:System.Data.Objects.DataClasses.EntityReference`1" /> 返回的对象。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 如果设置的值和当前值相同，则不赋值。

 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
