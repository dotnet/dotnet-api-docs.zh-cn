<Type Name="IRelatedEnd" FullName="System.Data.Objects.DataClasses.IRelatedEnd">
  <Metadata><Meta Name="ms.openlocfilehash" Value="6050b3b21a75bb2b8c72ae2e801df86efa58409b" /><Meta Name="ms.sourcegitcommit" Value="c982ad9e10a242d90f1e631b5981570f9e5d9f34" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/10/2020" /><Meta Name="ms.locfileid" Value="89826198" /></Metadata><TypeSignature Language="C#" Value="public interface IRelatedEnd" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IRelatedEnd" />
  <TypeSignature Language="DocId" Value="T:System.Data.Objects.DataClasses.IRelatedEnd" />
  <TypeSignature Language="VB.NET" Value="Public Interface IRelatedEnd" />
  <TypeSignature Language="C++ CLI" Value="public interface class IRelatedEnd" />
  <TypeSignature Language="F#" Value="type IRelatedEnd = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Data.Entity</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>定义关系的端。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Data.Objects.DataClasses.IRelatedEnd> 定义表示关联中一端的对象的要求。 此接口由 <xref:System.Data.Objects.DataClasses.RelatedEnd> 类实现。 <xref:System.Data.Objects.DataClasses.RelatedEnd><xref:System.Data.Objects.DataClasses.EntityCollection%601>和类的基类 <xref:System.Data.Objects.DataClasses.EntityReference%601> 。



## Examples
 本主题中的示例基于 [Microsoft SQL Server 产品示例：数据库](https://archive.codeplex.com/?p=msftdbprodsamples)，该数据库是由 [实体数据模型向导](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/bb399247(v=vs.100))生成的。

 下面的示例向实体中添加新 `SalesOrderHeader` 实体 `Contact` 。 然后，它从实体获取所有相关端， `Contact` 并显示每个相关端的关系名称、源角色名称和目标角色名称。

 [!code-csharp[DP ObjectServices Concepts#IRelatedEnd](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#irelatedend)]
 [!code-vb[DP ObjectServices Concepts#IRelatedEnd](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#irelatedend)]

 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="Add">
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>将对象添加到相关端。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (System.Data.Objects.DataClasses.IEntityWithRelationships entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Add(class System.Data.Objects.DataClasses.IEntityWithRelationships entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.DataClasses.IRelatedEnd.Add(System.Data.Objects.DataClasses.IEntityWithRelationships)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (entity As IEntityWithRelationships)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Add(System::Data::Objects::DataClasses::IEntityWithRelationships ^ entity);" />
      <MemberSignature Language="F#" Value="abstract member Add : System.Data.Objects.DataClasses.IEntityWithRelationships -&gt; unit" Usage="iRelatedEnd.Add entity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Data.Objects.DataClasses.IEntityWithRelationships" />
      </Parameters>
      <Docs>
        <param name="entity">添加到集合的对象。 <paramref name="entity" /> 必须实现 <see cref="T:System.Data.Objects.DataClasses.IEntityWithRelationships" />。</param>
        <summary>将对象添加到相关端。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Data.Objects.DataClasses.IRelatedEnd.Add%2A> 方法将对象添加到相关端。 相关端必须为 <xref:System.Data.Objects.DataClasses.EntityCollection%601>。

 如果源对象实现 <xref:System.Data.Objects.DataClasses.IEntityWithRelationships> 并在中跟踪 <xref:System.Data.Objects.ObjectStateManager> ，则还会跟踪正在添加的对象。

 <xref:System.Data.Objects.DataClasses.RelatedEnd> 类显式实现 <xref:System.Data.Objects.DataClasses.IRelatedEnd.Add%2A> 方法。 <xref:System.Data.Objects.DataClasses.EntityCollection%601> 类使用此实现。 有关详细信息，请参阅 <xref:System.Data.Objects.DataClasses.EntityCollection%601.Add%2A>。

 如果相关端是 <xref:System.Data.Objects.DataClasses.EntityReference%601> 并且 <xref:System.Data.Objects.DataClasses.EntityReference%601.Value%2A> 引用的属性不为 `null` ，则此方法将引发异常。

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (object entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Add(object entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.DataClasses.IRelatedEnd.Add(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (entity As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Add(System::Object ^ entity);" />
      <MemberSignature Language="F#" Value="abstract member Add : obj -&gt; unit" Usage="iRelatedEnd.Add entity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Object" Index="0" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="entity">添加到集合的对象。</param>
        <summary>将对象添加到相关端。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 将此方法重载用于不实现的实体类 <xref:System.Data.Objects.DataClasses.IEntityWithRelationships> 。 <xref:System.Data.Objects.DataClasses.IRelatedEnd.Add%2A>对于实现的实体类，请使用方法 <xref:System.Data.Objects.DataClasses.IEntityWithRelationships> 。

 <xref:System.Data.Objects.DataClasses.IRelatedEnd.Add%2A> 方法将对象添加到相关端。 相关端必须为 <xref:System.Data.Objects.DataClasses.EntityCollection%601>。

 <xref:System.Data.Objects.DataClasses.RelatedEnd> 类显式实现 <xref:System.Data.Objects.DataClasses.IRelatedEnd.Add%2A> 方法。 <xref:System.Data.Objects.DataClasses.EntityCollection%601> 类使用此实现。 有关详细信息，请参阅 <xref:System.Data.Objects.DataClasses.EntityCollection%601.Add%2A>。

 如果相关端是 <xref:System.Data.Objects.DataClasses.EntityReference%601> 并且 <xref:System.Data.Objects.DataClasses.EntityReference%601.Value%2A> 引用的属性不为 `null` ，则此方法将引发异常。

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Attach">
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>定义两个附加对象之间的关系。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Attach">
      <MemberSignature Language="C#" Value="public void Attach (System.Data.Objects.DataClasses.IEntityWithRelationships entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Attach(class System.Data.Objects.DataClasses.IEntityWithRelationships entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.DataClasses.IRelatedEnd.Attach(System.Data.Objects.DataClasses.IEntityWithRelationships)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Attach (entity As IEntityWithRelationships)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Attach(System::Data::Objects::DataClasses::IEntityWithRelationships ^ entity);" />
      <MemberSignature Language="F#" Value="abstract member Attach : System.Data.Objects.DataClasses.IEntityWithRelationships -&gt; unit" Usage="iRelatedEnd.Attach entity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Data.Objects.DataClasses.IEntityWithRelationships" />
      </Parameters>
      <Docs>
        <param name="entity">附加的对象。 <paramref name="entity" /> 必须实现 <see cref="T:System.Data.Objects.DataClasses.IEntityWithRelationships" />。</param>
        <summary>定义两个附加对象之间的关系。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Data.Objects.DataClasses.IRelatedEnd.Attach%2A> 方法用于定义附加到同一 <xref:System.Data.Objects.ObjectContext> 实例的两个对象之间的关系。

 <xref:System.Data.Objects.DataClasses.RelatedEnd> 类显式实现 <xref:System.Data.Objects.DataClasses.IRelatedEnd.Attach%2A> 方法。 <xref:System.Data.Objects.DataClasses.EntityCollection%601> 类使用此实现定义附加的源对象和附加到集合的对象之间的关系。 有关详细信息，请参阅 [附加和分离对象](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/bb738470(v=vs.100))。

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Attach">
      <MemberSignature Language="C#" Value="public void Attach (object entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Attach(object entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.DataClasses.IRelatedEnd.Attach(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Attach (entity As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Attach(System::Object ^ entity);" />
      <MemberSignature Language="F#" Value="abstract member Attach : obj -&gt; unit" Usage="iRelatedEnd.Attach entity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Object" Index="0" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="entity">附加的对象。</param>
        <summary>定义两个附加对象之间的关系。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 将此方法重载用于不实现的实体类 <xref:System.Data.Objects.DataClasses.IEntityWithRelationships> 。 <xref:System.Data.Objects.DataClasses.IRelatedEnd.Attach%2A>对于实现的实体类，请使用方法 <xref:System.Data.Objects.DataClasses.IEntityWithRelationships> 。

 <xref:System.Data.Objects.DataClasses.IRelatedEnd.Attach%2A> 方法用于定义附加到同一 <xref:System.Data.Objects.ObjectContext> 实例的两个对象之间的关系。

 <xref:System.Data.Objects.DataClasses.RelatedEnd> 类显式实现 <xref:System.Data.Objects.DataClasses.IRelatedEnd.Attach%2A> 方法。 <xref:System.Data.Objects.DataClasses.EntityCollection%601> 类使用此实现定义附加的源对象和附加到集合的对象之间的关系。 有关详细信息，请参阅 [附加和分离对象](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/bb738470(v=vs.100))。

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateSourceQuery">
      <MemberSignature Language="C#" Value="public System.Collections.IEnumerable CreateSourceQuery ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IEnumerable CreateSourceQuery() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.DataClasses.IRelatedEnd.CreateSourceQuery" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateSourceQuery () As IEnumerable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::IEnumerable ^ CreateSourceQuery();" />
      <MemberSignature Language="F#" Value="abstract member CreateSourceQuery : unit -&gt; System.Collections.IEnumerable" Usage="iRelatedEnd.CreateSourceQuery " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返回一个 <see cref="T:System.Collections.IEnumerable" />，它表示属于相关端的对象。</summary>
        <returns>一个 <see cref="T:System.Collections.IEnumerable" />，它表示属于相关端的对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Data.Objects.DataClasses.IRelatedEnd.CreateSourceQuery%2A> 方法由 <xref:System.Data.Objects.DataClasses.RelatedEnd> 类显式实现。  <xref:System.Data.Objects.DataClasses.EntityCollection%601> 和 <xref:System.Data.Objects.DataClasses.EntityReference%601> 类都重写 <xref:System.Data.Objects.DataClasses.RelatedEnd.System%23Data%23Objects%23DataClasses%23IRelatedEnd%23CreateSourceQuery%2A> 方法以返回一个 <xref:System.Data.Objects.ObjectQuery%601>，该查询在执行时返回属于相关端的相同对象集。

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.IEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IEnumerator GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.DataClasses.IRelatedEnd.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::IEnumerator ^ GetEnumerator();" />
      <MemberSignature Language="F#" Value="abstract member GetEnumerator : unit -&gt; System.Collections.IEnumerator" Usage="iRelatedEnd.GetEnumerator " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返回一个 <see cref="T:System.Collections.IEnumerator" />，它循环访问相关对象的集合。</summary>
        <returns>一个 <see cref="T:System.Collections.IEnumerator" />，它循环访问相关对象的集合。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsLoaded">
      <MemberSignature Language="C#" Value="public bool IsLoaded { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsLoaded" />
      <MemberSignature Language="DocId" Value="P:System.Data.Objects.DataClasses.IRelatedEnd.IsLoaded" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsLoaded As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsLoaded { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsLoaded : bool" Usage="System.Data.Objects.DataClasses.IRelatedEnd.IsLoaded" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示是否已加载所有相关对象。</summary>
        <value>如果相关端包含数据库中的所有相关实体，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Data.Objects.DataClasses.RelatedEnd> 类实现 <xref:System.Data.Objects.DataClasses.IRelatedEnd.IsLoaded%2A> 的 <xref:System.Data.Objects.DataClasses.IRelatedEnd> 方法。 有关详细信息，请参阅 <xref:System.Data.Objects.DataClasses.RelatedEnd.IsLoaded%2A>。

 <xref:System.Data.Objects.DataClasses.EntityCollection%601> 和 <xref:System.Data.Objects.DataClasses.EntityReference%601> 类继承自 <xref:System.Data.Objects.DataClasses.RelatedEnd>。



## Examples
 [定义和管理关系](https://msdn.microsoft.com/library/2c92c097-56bd-4145-989e-16d92475ecda)

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Load">
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>将一个或多个相关对象加载到此相关端中。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 `Load` 调用以从导航属性公开的相关端中显式加载相关对象。 有关详细信息，请参阅 [加载相关对象](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/bb896272(v=vs.100))。

 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Load() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.DataClasses.IRelatedEnd.Load" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load();" />
      <MemberSignature Language="F#" Value="abstract member Load : unit -&gt; unit" Usage="iRelatedEnd.Load " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>使用默认合并选项将一个或多个相关对象加载到此相关端中。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Data.Objects.DataClasses.RelatedEnd> 类实现 <xref:System.Data.Objects.DataClasses.IRelatedEnd.Load%2A> 的 <xref:System.Data.Objects.DataClasses.IRelatedEnd> 方法。 有关详细信息，请参阅 <xref:System.Data.Objects.DataClasses.RelatedEnd.Load%2A>。

 <xref:System.Data.Objects.DataClasses.RelatedEnd.Load%2A> 调用以从导航属性公开的相关端中显式加载相关对象。 有关详细信息，请参阅 [加载相关对象](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/bb896272(v=vs.100))。

 <xref:System.Data.Objects.DataClasses.RelatedEnd.Load%2A>无论是否为，方法都从数据源加载相关对象 <xref:System.Data.Objects.DataClasses.RelatedEnd.IsLoaded%2A> `true` 。

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Data.Objects.MergeOption mergeOption);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Load(valuetype System.Data.Objects.MergeOption mergeOption) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.DataClasses.IRelatedEnd.Load(System.Data.Objects.MergeOption)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (mergeOption As MergeOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::Data::Objects::MergeOption mergeOption);" />
      <MemberSignature Language="F#" Value="abstract member Load : System.Data.Objects.MergeOption -&gt; unit" Usage="iRelatedEnd.Load mergeOption" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mergeOption" Type="System.Data.Objects.MergeOption" />
      </Parameters>
      <Docs>
        <param name="mergeOption">将对象合并到现有 <see cref="T:System.Data.Objects.MergeOption" /> 时使用的 <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" />。</param>
        <summary>使用指定合并选项将一个或多个相关对象加载到相关端中。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Data.Objects.DataClasses.RelatedEnd> 类实现 <xref:System.Data.Objects.DataClasses.IRelatedEnd.Load%2A> 方法。 <xref:System.Data.Objects.DataClasses.EntityCollection%601> 和 <xref:System.Data.Objects.DataClasses.EntityReference%601> 类都重写此实现。

 `Load` 调用以从导航属性公开的相关端中显式加载相关对象。 有关详细信息，请参阅 [加载相关对象](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/bb896272(v=vs.100))。

 <xref:System.Data.Objects.DataClasses.IRelatedEnd.Load%2A>无论是否为，方法都从数据源加载相关对象 <xref:System.Data.Objects.DataClasses.RelatedEnd.IsLoaded%2A> `true` 。

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RelationshipName">
      <MemberSignature Language="C#" Value="public string RelationshipName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string RelationshipName" />
      <MemberSignature Language="DocId" Value="P:System.Data.Objects.DataClasses.IRelatedEnd.RelationshipName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RelationshipName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ RelationshipName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.RelationshipName : string" Usage="System.Data.Objects.DataClasses.IRelatedEnd.RelationshipName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取此相关端所参与的关系的名称。</summary>
        <value>此 <see cref="T:System.Data.Objects.DataClasses.IRelatedEnd" /> 所参与的关系的名称。 关系名称不由命名空间限定。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Examples
 本主题中的示例基于 [Microsoft SQL Server 产品示例：数据库](https://archive.codeplex.com/?p=msftdbprodsamples)，该数据库是由 [实体数据模型向导](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/bb399247(v=vs.100))生成的。

 下面的示例向实体中添加新 `SalesOrderHeader` 实体 `Contact` 。 然后，它从实体获取所有相关端， `Contact` 并显示每个相关端的关系名称、源角色名称和目标角色名称。

 [!code-csharp[DP ObjectServices Concepts#IRelatedEnd](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#irelatedend)]
 [!code-vb[DP ObjectServices Concepts#IRelatedEnd](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#irelatedend)]

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RelationshipSet">
      <MemberSignature Language="C#" Value="public System.Data.Metadata.Edm.RelationshipSet RelationshipSet { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Metadata.Edm.RelationshipSet RelationshipSet" />
      <MemberSignature Language="DocId" Value="P:System.Data.Objects.DataClasses.IRelatedEnd.RelationshipSet" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RelationshipSet As RelationshipSet" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::Metadata::Edm::RelationshipSet ^ RelationshipSet { System::Data::Metadata::Edm::RelationshipSet ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.RelationshipSet : System.Data.Metadata.Edm.RelationshipSet" Usage="System.Data.Objects.DataClasses.IRelatedEnd.RelationshipSet" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Metadata.Edm.RelationshipSet</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>返回对相关端的元数据的引用。</summary>
        <value>包含关系一端的元数据的 <see cref="T:System.Data.Metadata.Edm.RelationshipSet" /> 对象。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Remove">
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>从相关端处的对象集合中移除一个对象。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public bool Remove (System.Data.Objects.DataClasses.IEntityWithRelationships entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Remove(class System.Data.Objects.DataClasses.IEntityWithRelationships entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.DataClasses.IRelatedEnd.Remove(System.Data.Objects.DataClasses.IEntityWithRelationships)" />
      <MemberSignature Language="VB.NET" Value="Public Function Remove (entity As IEntityWithRelationships) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Remove(System::Data::Objects::DataClasses::IEntityWithRelationships ^ entity);" />
      <MemberSignature Language="F#" Value="abstract member Remove : System.Data.Objects.DataClasses.IEntityWithRelationships -&gt; bool" Usage="iRelatedEnd.Remove entity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Data.Objects.DataClasses.IEntityWithRelationships" />
      </Parameters>
      <Docs>
        <param name="entity">要从集合中移除的对象。 <paramref name="entity" /> 必须实现 <see cref="T:System.Data.Objects.DataClasses.IEntityWithRelationships" />。</param>
        <summary>从相关端处的对象集合中移除一个对象。</summary>
        <returns>如果成功移除 <paramref name="entity" />，则为 <see langword="true" />；如果 <paramref name="entity" /> 不是 <see cref="T:System.Data.Objects.DataClasses.IRelatedEnd" /> 的一部分，则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Data.Objects.DataClasses.IRelatedEnd.Remove%2A> 方法从相关端移除一个对象。 相关端必须为 <xref:System.Data.Objects.DataClasses.EntityCollection%601>。

 <xref:System.Data.Objects.DataClasses.RelatedEnd> 类显式实现 <xref:System.Data.Objects.DataClasses.IRelatedEnd.Remove%2A> 方法。 <xref:System.Data.Objects.DataClasses.EntityCollection%601> 类使用此实现。 有关详细信息，请参阅 <xref:System.Data.Objects.DataClasses.EntityCollection%601.Remove%2A>。

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public bool Remove (object entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Remove(object entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.DataClasses.IRelatedEnd.Remove(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Remove (entity As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Remove(System::Object ^ entity);" />
      <MemberSignature Language="F#" Value="abstract member Remove : obj -&gt; bool" Usage="iRelatedEnd.Remove entity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Object" Index="0" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="entity">要从集合中移除的对象。</param>
        <summary>从相关端处的对象集合中移除一个对象。</summary>
        <returns>如果成功移除 <paramref name="entity" />，则为 <see langword="true" />；如果 <paramref name="entity" /> 不是 <see cref="T:System.Data.Objects.DataClasses.IRelatedEnd" /> 的一部分，则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 将此方法重载用于不实现的实体类 <xref:System.Data.Objects.DataClasses.IEntityWithRelationships> 。 <xref:System.Data.Objects.DataClasses.IRelatedEnd.Remove%2A>对于实现的实体类，请使用方法 <xref:System.Data.Objects.DataClasses.IEntityWithRelationships> 。

 <xref:System.Data.Objects.DataClasses.IRelatedEnd.Remove%2A> 方法从相关端移除一个对象。 相关端必须为 <xref:System.Data.Objects.DataClasses.EntityCollection%601>。

 <xref:System.Data.Objects.DataClasses.RelatedEnd> 类显式实现 <xref:System.Data.Objects.DataClasses.IRelatedEnd.Remove%2A> 方法。 <xref:System.Data.Objects.DataClasses.EntityCollection%601> 类使用此实现。 有关详细信息，请参阅 <xref:System.Data.Objects.DataClasses.EntityCollection%601.Remove%2A>。

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SourceRoleName">
      <MemberSignature Language="C#" Value="public string SourceRoleName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SourceRoleName" />
      <MemberSignature Language="DocId" Value="P:System.Data.Objects.DataClasses.IRelatedEnd.SourceRoleName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SourceRoleName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ SourceRoleName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SourceRoleName : string" Usage="System.Data.Objects.DataClasses.IRelatedEnd.SourceRoleName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取关系的源端的角色名称。</summary>
        <value>关系源端处的角色名称。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Data.Objects.DataClasses.RelatedEnd>类实现 <xref:System.Data.Objects.DataClasses.IRelatedEnd.SourceRoleName%2A> 属性。 有关详细信息，请参阅 <xref:System.Data.Objects.DataClasses.RelatedEnd.SourceRoleName%2A>。

 角色名称由 `Role` `End` 在概念模型中定义此关系的关联中的元素的属性指定。 有关详细信息，请参阅[关联元素 (CSDL)](https://msdn.microsoft.com/library/c305169a-8af7-432f-9ba7-800a163aed41)。

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TargetRoleName">
      <MemberSignature Language="C#" Value="public string TargetRoleName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TargetRoleName" />
      <MemberSignature Language="DocId" Value="P:System.Data.Objects.DataClasses.IRelatedEnd.TargetRoleName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TargetRoleName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ TargetRoleName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TargetRoleName : string" Usage="System.Data.Objects.DataClasses.IRelatedEnd.TargetRoleName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取关系目标端处的角色名称。</summary>
        <value>关系目标端处的角色名称。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Data.Objects.DataClasses.RelatedEnd> 类实现 <xref:System.Data.Objects.DataClasses.IRelatedEnd.TargetRoleName%2A> 属性。 有关详细信息，请参阅 <xref:System.Data.Objects.DataClasses.RelatedEnd.TargetRoleName%2A>。

 角色名称由 `Role` `End` 在概念模型中定义此关系的关联中的元素的属性指定。 有关详细信息，请参阅[关联元素 (CSDL)](https://msdn.microsoft.com/library/c305169a-8af7-432f-9ba7-800a163aed41)。

 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
