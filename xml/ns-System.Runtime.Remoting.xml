<Namespace Name="System.Runtime.Remoting">
  <Metadata><Meta Name="ms.openlocfilehash" Value="1ce1e562ab2cd4cd85ee4f40a3e9b8b54afe3619" /><Meta Name="ms.sourcegitcommit" Value="02dd069b9696eb4eee675b6541f86b2602076448" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="10/20/2020" /><Meta Name="ms.locfileid" Value="92233131" /></Metadata><Docs>
    <summary>提供允许开发人员创建和配置分布式应用程序的类和接口。 <see cref="N:System.Runtime.Remoting" /> 命名空间更重要的一些类为 <see cref="T:System.Runtime.Remoting.RemotingConfiguration" /> 类、<see cref="T:System.Runtime.Remoting.RemotingServices" /> 类和 <see cref="T:System.Runtime.Remoting.ObjRef" /> 类。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Runtime.Remoting.RemotingConfiguration>类包含用于与配置设置进行交互的静态方法。 <xref:System.Runtime.Remoting.RemotingConfiguration.Configure%2A?displayProperty=nameWithType>使用方法，开发人员可以通过使用 XML 格式的配置文件来配置远程处理基础结构。 <xref:System.Runtime.Remoting.RemotingConfiguration>类还包含若干方法，用于客户端和服务器端注册的服务器上的客户端和服务器端已激活对象。

 <xref:System.Runtime.Remoting.RemotingServices>类提供了许多方法来帮助你使用和发布远程对象。 <xref:System.Runtime.Remoting.RemotingServices.Marshal%2A?displayProperty=nameWithType>方法提供了一项功能，用于存储在类的实例中激活和与远程对象进行通信所需的所有相关信息， <xref:System.Runtime.Remoting.ObjRef> 以便以后序列化和传输到远程位置。 <xref:System.Runtime.Remoting.RemotingServices.Unmarshal%2A?displayProperty=nameWithType>方法会反转此过程，从而为应用程序可以使用的远程对象创建一个代理，而不考虑任何远程处理细分。

 <xref:System.Runtime.Remoting.ObjRef>类包含激活远程对象并与之进行通信所需的所有相关信息。 此类是对象的可序列化表示形式，它使用通道传输到远程位置，在该位置取消封送 (参阅 <xref:System.Runtime.Remoting.RemotingServices.Unmarshal%2A>) 并可用于创建远程对象的本地代理。

> [!NOTE]
>   (Mbr 的封送处理对象) 不会永久驻留在内存中。 相反，除非类型重写 <xref:System.MarshalByRefObject.InitializeLifetimeService%2A?displayProperty=nameWithType> 来控制其自身的生存期策略，否则，每个 MBR 在 .NET Framework 远程处理系统开始删除它并回收内存之前，将具有有限的生存期。 有关详细信息，请参阅 [生存期租约](https://msdn.microsoft.com/library/23bk23zc.aspx)。

 ]]></format>
    </remarks>
  </Docs>
</Namespace>
