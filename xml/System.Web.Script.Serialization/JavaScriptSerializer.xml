<Type Name="JavaScriptSerializer" FullName="System.Web.Script.Serialization.JavaScriptSerializer">
  <Metadata><Meta Name="ms.openlocfilehash" Value="64750277fb0f6d749d58955ddb8a8195de4c478e" /><Meta Name="ms.sourcegitcommit" Value="c982ad9e10a242d90f1e631b5981570f9e5d9f34" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/10/2020" /><Meta Name="ms.locfileid" Value="89998438" /></Metadata><TypeSignature Language="C#" Value="public class JavaScriptSerializer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit JavaScriptSerializer extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.Script.Serialization.JavaScriptSerializer" />
  <TypeSignature Language="VB.NET" Value="Public Class JavaScriptSerializer" />
  <TypeSignature Language="C++ CLI" Value="public ref class JavaScriptSerializer" />
  <TypeSignature Language="F#" Value="type JavaScriptSerializer = class" />
  <AssemblyInfo>
    <AssemblyName>System.Web.Extensions</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>对于 .NET Framework 4.7.2 及更高版本，请使用命名空间中的 Api <see cref="N:System.Text.Json" /> 进行序列化和反序列化。 对于早期版本的 .NET Framework，请使用 <see href="https://www.newtonsoft.com/json">Newtonsoft.Js</see>。 此类型旨在为启用了 AJAX 的应用程序提供序列化和反序列化功能。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  

> [!IMPORTANT]
> 对于 .NET Framework 4.7.2 和更高版本， <xref:System.Text.Json> 应使用命名空间中的 api 进行序列化和反序列化。 对于早期版本的 .NET Framework，请使用 [Newtonsoft.Js](https://www.newtonsoft.com/json)。

<xref:System.Web.Script.Serialization.JavaScriptSerializer>类由异步通信层在内部使用，用于序列化和反序列化浏览器与 Web 服务器之间传递的数据。 您无法访问该序列化程序的实例。 但是，此类公开公共 API。 因此，当您想要在托管代码中使用 JavaScript 对象表示法 (JSON) 时，可以使用类。  
  
若要序列化对象，请使用 <xref:System.Web.Script.Serialization.JavaScriptSerializer.Serialize%2A> 方法。 若要反序列化 JSON 字符串，请使用 <xref:System.Web.Script.Serialization.JavaScriptSerializer.Deserialize%2A> 或 <xref:System.Web.Script.Serialization.JavaScriptSerializer.DeserializeObject%2A> 方法。 若要序列化和反序列化不受本机支持的类型 <xref:System.Web.Script.Serialization.JavaScriptSerializer> ，请使用类实现自定义转换器 <xref:System.Web.Script.Serialization.JavaScriptConverter> 。 然后，使用方法注册转换器 <xref:System.Web.Script.Serialization.JavaScriptSerializer.RegisterConverters%2A> 。  
  
## <a name="mapping-between-managed-types-and-json"></a>托管类型与 JSON 之间的映射  
 下表显示了用于序列化进程的托管类型和 JSON 的映射。 这些托管类型受本机支持 <xref:System.Web.Script.Serialization.JavaScriptSerializer> 。 从 JSON 字符串反序列化为托管类型时，将应用相同的映射。 但是，反序列化可能是非对称的;并非所有可序列化托管类型都可以从 JSON 反序列化。  
  
> [!NOTE]
>  多维数组序列化为一维数组，您应将其用作平面数组。  
  
|托管类型|JSON 等效项|  
|------------------|---------------------|  
|<xref:System.String> 仅)  (UTF-8 编码。|字符串|  
|<xref:System.Char>|字符串|  
|单空字符 (例如，\ 0 ) |Null|  
|<xref:System.Boolean>|布尔值。 在 JSON 中表示为 `true` 或 `false`|  
|`null``null`)  (对象引用和 <xref:System.Nullable> 值类型。|字符串值为 null|  
|<xref:System.DBNull>|字符串值为 null|  
|基元数值 (或与数字兼容的) 类型： <xref:System.Byte> 、、、、、、、、 <xref:System.SByte> <xref:System.Int16> <xref:System.Int32> <xref:System.Int64> <xref:System.UInt16> <xref:System.UInt32> <xref:System.UInt64> <xref:System.Double> 和 <xref:System.Single> 。 使用区域性固定字符串表示形式。|Number|  
|<xref:System.DateTime>|Date 对象，以 JSON 形式表示， \\ (刻度) \\ /"。 计时周期数是一个正值或负长的值，它指示自 1970 UTC 年1月1日午夜起经过的计时周期数 (毫秒) 。<br /><br /> 支持的最大日期值为 <xref:System.DateTime.MaxValue> (12/31/9999 11:59:59 PM) 并且支持的最小日期值 <xref:System.DateTime.MinValue> (1/1/0001 12:00:00 AM) 。|  
|整数类型的枚举|枚举值的整数等效项|  
|实现 <xref:System.Collections.IEnumerable> 或 <xref:System.Collections.Generic.IEnumerable%601?displayProperty=nameWithType> 也不是或的实现的类型 <xref:System.Collections.IDictionary> <xref:System.Collections.Generic.IDictionary%602?displayProperty=nameWithType> 。 这包括诸如 <xref:System.Array> 、和的类型 <xref:System.Collections.ArrayList> <xref:System.Collections.Generic.List%601> 。|使用 JSON 数组语法的数组|  
|实现或的 <xref:System.Collections.IDictionary> 类型 <xref:System.Collections.Generic.IDictionary%602?displayProperty=nameWithType> 。 这包括诸如和之类的类型 <xref:System.Collections.Generic.Dictionary%602> <xref:System.Collections.Hashtable> 。|使用 JSON 字典语法的 JavaScript 对象|  
|自定义具体 (具有具有 get 访问器或公共实例字段的公共实例属性的非抽象) 类型。<br /><br /> 请注意，在这些类型中，公共只写属性、标记有的公共属性或公共字段属性 <xref:System.Web.Script.Serialization.ScriptIgnoreAttribute> 以及这些类型的公共索引属性都将被忽略。|使用 JSON 字典语法的 JavaScript 对象。 包含一个名为 "__type" 的特殊元数据属性，以确保反序列化正确。 请确保公共实例属性具有 get 和 set 访问器，以确保反序列化正确。|  
|<xref:System.Guid>|GUID 的字符串表示形式|  
|<xref:System.Uri>|返回值的字符串表示形式 <xref:System.Uri.GetComponents%2A>|  
  
   
  
## Examples  
 第一个示例简单阐释了如何序列化和反序列化数据对象。 它需要一个名为 Person 的类，如下所示。  
  
 [!code-csharp[System.Web.Script.Serialization.JavaScriptSerializer#1](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.script.serialization.javascriptserializer/cs/default.aspx.cs#1)]
 [!code-vb[System.Web.Script.Serialization.JavaScriptSerializer#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.script.serialization.javascriptserializer/vb/default.aspx.vb#1)]  
  
 [!code-csharp[System.Web.Script.Serialization.JavaScriptSerializer#2](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.script.serialization.javascriptserializer/cs/default.aspx.cs#2)]
 [!code-vb[System.Web.Script.Serialization.JavaScriptSerializer#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.script.serialization.javascriptserializer/vb/default.aspx.vb#2)]  
  
 下一个示例演示一个更复杂的、完整的项目，该项目使用 <xref:System.Web.Script.Serialization.JavaScriptSerializer> 类来保存和还原对象的状态（使用 JSON 序列化）。 此代码使用为类提供的自定义转换器 <xref:System.Web.Script.Serialization.JavaScriptConverter> 。  
  
 [!code-aspx-csharp[System.Web.Script.Serialization#4](~/samples/snippets/csharp/VS_Snippets_Atlas/System.Web.Script.Serialization/CS/Default.aspx#4)]
 [!code-aspx-vb[System.Web.Script.Serialization#4](~/samples/snippets/visualbasic/VS_Snippets_Atlas/System.Web.Script.Serialization/VB/Default.aspx#4)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/bb515101(v=vs.100)">在 ASP.NET AJAX 中使用 Web 服务</related>
    <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/bb398995(v=vs.100)">从 ASP.NET AJAX 中的客户端脚本调用 Web 服务</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Web.Script.Serialization.JavaScriptSerializer" /> 类的新实例。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public JavaScriptSerializer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Script.Serialization.JavaScriptSerializer.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; JavaScriptSerializer();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>初始化不具有类型解析程序的 <see cref="T:System.Web.Script.Serialization.JavaScriptSerializer" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Script.Serialization.JavaScriptSerializer>不带类型解析程序的类的实例不包括序列化的 JSON 字符串中名为 "__type" )  (类型元数据属性。 类型元数据属性由 <xref:System.Web.Script.Serialization.JavaScriptSerializer.Deserialize%2A> 和 <xref:System.Web.Script.Serialization.JavaScriptSerializer.DeserializeObject%2A> 方法用于确定 JSON 字符串将转换为的适当托管类型。 有关类型解析程序的信息，请参见 <xref:System.Web.Script.Serialization.JavaScriptTypeResolver> 类。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public JavaScriptSerializer (System.Web.Script.Serialization.JavaScriptTypeResolver resolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Web.Script.Serialization.JavaScriptTypeResolver resolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Script.Serialization.JavaScriptSerializer.#ctor(System.Web.Script.Serialization.JavaScriptTypeResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (resolver As JavaScriptTypeResolver)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; JavaScriptSerializer(System::Web::Script::Serialization::JavaScriptTypeResolver ^ resolver);" />
      <MemberSignature Language="F#" Value="new System.Web.Script.Serialization.JavaScriptSerializer : System.Web.Script.Serialization.JavaScriptTypeResolver -&gt; System.Web.Script.Serialization.JavaScriptSerializer" Usage="new System.Web.Script.Serialization.JavaScriptSerializer resolver" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="resolver" Type="System.Web.Script.Serialization.JavaScriptTypeResolver" />
      </Parameters>
      <Docs>
        <param name="resolver">自定义类型解析程序对象。</param>
        <summary>初始化具有自定义类型解析程序的 <see cref="T:System.Web.Script.Serialization.JavaScriptSerializer" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 序列化对象时， <xref:System.Web.Script.Serialization.JavaScriptSerializer> 类使用 `resolver` 参数来确定要包含在类型元数据属性的序列化 JSON 字符串中的相应值 ( "__type" ) 。 同样，当 <xref:System.Web.Script.Serialization.JavaScriptSerializer> 类反序列化 JSON 字符串时，它会使用解析器实例将类型元数据属性值解析为适当的托管类型。  
  
 您可以将 `resolver` 参数设置为 `null` ，这等效于调用 <xref:System.Web.Script.Serialization.JavaScriptSerializer.%23ctor%2A> 构造函数。  
  
 用于 <xref:System.Web.Script.Serialization.JavaScriptSerializer> 从客户端脚本中调用 Web 服务的异步通信层使用特殊类型解析程序的实例。 此类型解析程序将可以反序列化的类型限制为在 Web 服务的方法签名中定义的类型或已应用的类型 <xref:System.Web.Script.Services.GenerateScriptTypeAttribute> 。 无法以编程方式修改此内置类型解析程序。  
  
> [!IMPORTANT]
>  使用通过自定义类型解析器初始化的此对象的实例可能会带来安全风险。 仅将此对象与受信任的数据一起使用。 有关详细信息，请参阅[数据验证](https://www.owasp.org/index.php/Data_Validation)。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Script.Serialization.JavaScriptTypeResolver" />
        <altmember cref="T:System.Web.Script.Serialization.SimpleTypeResolver" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/bb515101(v=vs.100)">在 ASP.NET AJAX 中使用 Web 服务</related>
      </Docs>
    </Member>
    <Member MemberName="ConvertToType">
      <MemberSignature Language="C#" Value="public object ConvertToType (object obj, Type targetType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object ConvertToType(object obj, class System.Type targetType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Script.Serialization.JavaScriptSerializer.ConvertToType(System.Object,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function ConvertToType (obj As Object, targetType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ ConvertToType(System::Object ^ obj, Type ^ targetType);" />
      <MemberSignature Language="F#" Value="member this.ConvertToType : obj * Type -&gt; obj" Usage="javaScriptSerializer.ConvertToType (obj, targetType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" Index="0" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="targetType" Type="System.Type" Index="1" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="obj">要转换的对象。</param>
        <param name="targetType">对象要转换为的类型。</param>
        <summary>将指定的对象转换成指定的类型。</summary>
        <returns>序列化的 JSON 字符串。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当 <xref:System.Web.Script.Serialization.JavaScriptSerializer> 实例序列化自定义转换器注册到的类型时，序列化程序将调用 <xref:System.Web.Script.Serialization.JavaScriptConverter.Serialize%2A> 方法以获取将转换为 JSON 格式字符串的名称/值对的字典。  
  
 <xref:System.Web.Script.Serialization.JavaScriptSerializer.Serialize%2A>如果对象图太复杂，或的已注册实例 <xref:System.Web.Script.Serialization.JavaScriptConverter> 导致了转换器递归，则方法也可能引发异常。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">所生成的 JSON 格式字符串超出了 <see cref="P:System.Web.Script.Serialization.JavaScriptSerializer.MaxJsonLength" /> 的值。  
  
- 或 - 
 <paramref name="obj" /> 包含循环引用。 循环引用出现在子对象引用父对象，而父对象又引用子对象时。</exception>
        <exception cref="T:System.ArgumentException">超出了由 <see cref="P:System.Web.Script.Serialization.JavaScriptSerializer.RecursionLimit" /> 定义的递归限制。</exception>
      </Docs>
    </Member>
    <Member MemberName="ConvertToType&lt;T&gt;">
      <MemberSignature Language="C#" Value="public T ConvertToType&lt;T&gt; (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!T ConvertToType&lt;T&gt;(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Script.Serialization.JavaScriptSerializer.ConvertToType``1(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ConvertToType(Of T) (obj As Object) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; T ConvertToType(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="member this.ConvertToType : obj -&gt; 'T" Usage="javaScriptSerializer.ConvertToType obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <typeparam name="T"><paramref name="obj" /> 将转换成的类型。</typeparam>
        <param name="obj">要转换的对象。</param>
        <summary>将给定对象转换为指定类型。</summary>
        <returns>已转换成目标类型的对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此 <xref:System.Web.Script.Serialization.JavaScriptSerializer.ConvertToType%2A> 方法尝试将由表示的对象实例转换 `obj` 为类型的实例 `T` 。 在此转换过程中，不能保证保留对象引用相等性。 因此，您不能假定 `obj` 和 `T` 引用相同的对象。  
  
 <xref:System.Web.Script.Serialization.JavaScriptSerializer.ConvertToType%2A> 如果实现从派生的类，则应使用 <xref:System.Web.Script.Serialization.JavaScriptConverter> 。 转换器代码必须能够获取序列化程序传递给它的字典中的值，然后将该值转换为类型的实例 `T` 。 你可以从转换器代码调用方法，而不是重新实现自定义转换代码来执行此任务 <xref:System.Web.Script.Serialization.JavaScriptSerializer.ConvertToType%2A> 。  
  
   
  
## Examples  
 下面的示例演示如何使用 <xref:System.Web.Script.Serialization.JavaScriptSerializer.ConvertToType%2A> 方法 <xref:System.Web.UI.WebControls.ListItem> 从传递给转换器的字典中的值获取对象。 此代码示例是为类提供的更大示例的一部分 <xref:System.Web.Script.Serialization.JavaScriptSerializer> 。  
  
 [!code-csharp[System.Web.Script.Serialization#5](~/samples/snippets/csharp/VS_Snippets_Atlas/System.Web.Script.Serialization/CS/App_Code/ListItemCollectionConverter.cs#5)]
 [!code-vb[System.Web.Script.Serialization#5](~/samples/snippets/visualbasic/VS_Snippets_Atlas/System.Web.Script.Serialization/VB/App_Code/ListItemCollectionConverter.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><paramref name="obj" />（或 <paramref name="obj" /> 的嵌套成员）包含指示自定义类型的“__type”属性，但是与序列化程序关联的类型解析程序找不到相应的托管类型。  
  
- 或 - 
 <paramref name="obj" />（或 <paramref name="obj" /> 的嵌套成员）包含指示自定义类型的“__type”属性，但是反序列化相应 JSON 字符串的结果无法分配给所需的目标类型。  
  
- 或 - 
 <paramref name="obj" />（或 <paramref name="obj" /> 的嵌套成员）包含指示 <see cref="T:System.Object" /> 或不可实例化的类型（例如，抽象类型或接口）的“__type”属性。  
  
- 或 - 
尝试将 <paramref name="obj" /> 转换为类似数组的托管类型，该类型不可用作反序列化目标。  
  
- 或 - 
不能将 <paramref name="obj" /> 转换为 <paramref name="T" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="obj" /> 是字典类型但遇到一个非字符串键值。  
  
- 或 - 
 <paramref name="obj" /> 包括不可用于 <paramref name="T" /> 类型的成员定义。</exception>
      </Docs>
    </Member>
    <Member MemberName="Deserialize">
      <MemberSignature Language="C#" Value="public object Deserialize (string input, Type targetType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Deserialize(string input, class System.Type targetType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Script.Serialization.JavaScriptSerializer.Deserialize(System.String,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function Deserialize (input As String, targetType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Deserialize(System::String ^ input, Type ^ targetType);" />
      <MemberSignature Language="F#" Value="member this.Deserialize : string * Type -&gt; obj" Usage="javaScriptSerializer.Deserialize (input, targetType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" Index="0" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="targetType" Type="System.Type" Index="1" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="input">要反序列化的 JSON 字符串。</param>
        <param name="targetType">所生成对象的类型。</param>
        <summary>将 JSON 格式字符串转换为指定类型的对象。</summary>
        <returns>已反序列化的对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此反序列化方法不会尝试将对象图的根强制转换为特定类型，方法与方法相同 <xref:System.Web.Script.Serialization.JavaScriptSerializer.Deserialize%2A> 。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="input" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="input" /> 的长度超过了 <see cref="P:System.Web.Script.Serialization.JavaScriptSerializer.MaxJsonLength" /> 的值。  
  
- 或 - 
超出了由 <see cref="P:System.Web.Script.Serialization.JavaScriptSerializer.RecursionLimit" /> 定义的递归限制。  
  
- 或 - 
 <paramref name="input" /> 包含意外的字符序列。  
  
- 或 - 
 <paramref name="input" /> 是字典类型但遇到一个非字符串键值。  
  
- 或 - 
 <paramref name="input" /> 包括不可用于目标类型的成员定义。</exception>
        <exception cref="T:System.InvalidOperationException"><paramref name="input" /> 包含指示自定义类型的“__type”属性，但是当前与序列化程序关联的类型解析程序找不到相应的托管类型。  
  
- 或 - 
 <paramref name="input" /> 包含指示自定义类型的“__type”属性，但是反序列化相应 JSON 字符串的结果无法分配给所需的目标类型。  
  
- 或 - 
 <paramref name="input" /> 包含指示 <see cref="T:System.Object" /> 或不可实例化的类型（例如，抽象类型或接口）的“__type”属性。  
  
- 或 - 
尝试将 JSON 数组转换为类似数组的托管类型，该类型不可用作 JSON 反序列化目标。  
  
- 或 - 
不能将 <paramref name="input" /> 转换为目标类型。</exception>
      </Docs>
    </Member>
    <Member MemberName="Deserialize&lt;T&gt;">
      <MemberSignature Language="C#" Value="public T Deserialize&lt;T&gt; (string input);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!T Deserialize&lt;T&gt;(string input) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Script.Serialization.JavaScriptSerializer.Deserialize``1(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Deserialize(Of T) (input As String) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; T Deserialize(System::String ^ input);" />
      <MemberSignature Language="F#" Value="member this.Deserialize : string -&gt; 'T" Usage="javaScriptSerializer.Deserialize input" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">所生成对象的类型。</typeparam>
        <param name="input">要进行反序列化的 JSON 字符串。</param>
        <summary>将指定的 JSON 字符串转换为 <paramref name="T" /> 类型的对象。</summary>
        <returns>已反序列化的对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Script.Serialization.JavaScriptSerializer.Deserialize%2A>方法等效于首先使用 <xref:System.Web.Script.Serialization.JavaScriptSerializer.DeserializeObject%2A> 方法获取对象图，然后尝试将结果强制转换为类型 `T` 。  
  
 在反序列化过程中，将引用序列化程序的当前类型解析程序，它确定在转换嵌套在数组和字典类型中的元素时要使用的托管类型。 因此，反序列化进程将循环访问的所有嵌套元素 `input` 。 有关类型解析程序的详细信息，请参阅 <xref:System.Web.Script.Serialization.JavaScriptTypeResolver> 类。  
  
   
  
## Examples  
下面的示例提供了如何序列化和反序列化数据对象的简单阐释。  
  
[!code-csharp[System.Web.Script.JavaScriptSerializer](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.script.serialization.javascriptserializer/cs/default.aspx.cs#1)]  
[!code-vb[System.Web.Script.JavaScriptSerializer](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.script.serialization.javascriptserializer/vb/default.aspx.vb#1)]  

它需要名为的类 `Person` ，如下面的示例中所示。 

[!code-csharp[System.Web.Script.JavaScriptSerializer](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.script.serialization.javascriptserializer/cs/default.aspx.cs#2)]  
[!code-vb[System.Web.Script.JavaScriptSerializer](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.script.serialization.javascriptserializer/vb/default.aspx.vb#2)]  

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="input" /> 长度超出了 <see cref="P:System.Web.Script.Serialization.JavaScriptSerializer.MaxJsonLength" /> 的值。  
  
- 或 - 
超出了由 <see cref="P:System.Web.Script.Serialization.JavaScriptSerializer.RecursionLimit" /> 定义的递归限制。  
  
- 或 - 
 <paramref name="input" /> 包含意外的字符序列。  
  
- 或 - 
 <paramref name="input" /> 是字典类型但遇到一个非字符串键值。  
  
- 或 - 
 <paramref name="input" /> 包括不可用于 <paramref name="T" /> 类型的成员定义。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="input" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.InvalidOperationException"><paramref name="input" /> 包含指示自定义类型的“__type”属性，但是与序列化程序关联的类型解析程序找不到相应的托管类型。  
  
- 或 - 
 <paramref name="input" /> 包含指示自定义类型的“__type”属性，但是反序列化相应 JSON 字符串的结果无法分配给所需的目标类型。  
  
- 或 - 
 <paramref name="input" /> 包含指示 <see cref="T:System.Object" /> 或不可实例化的类型（例如，抽象类型或接口）的“__type”属性。  
  
- 或 - 
尝试将 JSON 数组转换为类似数组的托管类型，该类型不可用作 JSON 反序列化目标。  
  
- 或 - 
不能将 <paramref name="input" /> 转换为 <paramref name="T" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="DeserializeObject">
      <MemberSignature Language="C#" Value="public object DeserializeObject (string input);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object DeserializeObject(string input) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Script.Serialization.JavaScriptSerializer.DeserializeObject(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function DeserializeObject (input As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ DeserializeObject(System::String ^ input);" />
      <MemberSignature Language="F#" Value="member this.DeserializeObject : string -&gt; obj" Usage="javaScriptSerializer.DeserializeObject input" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">要进行反序列化的 JSON 字符串。</param>
        <summary>将指定的 JSON 字符串转换为对象图。</summary>
        <returns>已反序列化的对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 与方法一样，此反序列化方法不会尝试将对象图的根强制转换为特定类型 <xref:System.Web.Script.Serialization.JavaScriptSerializer.Deserialize%2A> 。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="input" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="input" /> 长度超出了 <see cref="P:System.Web.Script.Serialization.JavaScriptSerializer.MaxJsonLength" /> 的值。  
  
- 或 - 
超出了由 <see cref="P:System.Web.Script.Serialization.JavaScriptSerializer.RecursionLimit" /> 定义的递归限制。  
  
- 或 - 
 <paramref name="input" /> 包含意外的字符序列。  
  
- 或 - 
 <paramref name="input" /> 是字典类型但遇到一个非字符串键值。  
  
- 或 - 
 <paramref name="input" /> 包括不可用于目标类型的成员定义。</exception>
        <exception cref="T:System.InvalidOperationException"><paramref name="input" /> 包含指示自定义类型的“__type”属性，但是当前与序列化程序关联的类型解析程序找不到相应的托管类型。  
  
- 或 - 
 <paramref name="input" /> 包含指示自定义类型的“__type”属性，但是反序列化相应 JSON 字符串的结果无法分配给所需的目标类型。  
  
- 或 - 
 <paramref name="input" /> 包含指示 <see cref="T:System.Object" /> 或不可实例化的类型（例如，抽象类型或接口）的“__type”属性。  
  
- 或 - 
尝试将 JSON 数组转换为类似数组的托管类型，该类型不可用作 JSON 反序列化目标。  
  
- 或 - 
不能将 <paramref name="input" /> 转换为目标类型。</exception>
      </Docs>
    </Member>
    <Member MemberName="MaxJsonLength">
      <MemberSignature Language="C#" Value="public int MaxJsonLength { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MaxJsonLength" />
      <MemberSignature Language="DocId" Value="P:System.Web.Script.Serialization.JavaScriptSerializer.MaxJsonLength" />
      <MemberSignature Language="VB.NET" Value="Public Property MaxJsonLength As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int MaxJsonLength { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.MaxJsonLength : int with get, set" Usage="System.Web.Script.Serialization.JavaScriptSerializer.MaxJsonLength" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:System.Web.Script.Serialization.JavaScriptSerializer" /> 类接受的 JSON 字符串的最大长度。</summary>
        <value>JSON 字符串的最大长度。 默认长度为 2097152 个字符，等同于 4 MB 的 Unicode 字符串数据。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Script.Serialization.JavaScriptSerializer.MaxJsonLength%2A>仅当显式创建类的实例时，属性的值才适用 <xref:System.Web.Script.Serialization.JavaScriptSerializer> 。 使用 `jsonSerialization` 配置文件的元素设置异步通信层使用的内部序列化程序实例的最大长度。 有关序列化的配置元素的详细信息，请参阅 [如何：在 Microsoft Ajax 中配置 ASP.NET 服务](https://docs.microsoft.com/previous-versions/aspnet/bb763183(v=vs.100))。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">该属性设置为小于 1 的值。</exception>
        <altmember cref="P:System.Web.Configuration.ScriptingJsonSerializationSection.MaxJsonLength" />
      </Docs>
    </Member>
    <Member MemberName="RecursionLimit">
      <MemberSignature Language="C#" Value="public int RecursionLimit { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 RecursionLimit" />
      <MemberSignature Language="DocId" Value="P:System.Web.Script.Serialization.JavaScriptSerializer.RecursionLimit" />
      <MemberSignature Language="VB.NET" Value="Public Property RecursionLimit As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int RecursionLimit { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.RecursionLimit : int with get, set" Usage="System.Web.Script.Serialization.JavaScriptSerializer.RecursionLimit" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置用于约束要处理的对象级别的数量的限制。</summary>
        <value>对象级别的数量。 默认值为 100。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Script.Serialization.JavaScriptSerializer.RecursionLimit%2A>属性指的是 <xref:System.Web.Script.Serialization.JavaScriptSerializer> 在以下情况下将处理的对象层次结构中的级别数：  
  
-   <xref:System.Web.Script.Serialization.JavaScriptSerializer>类反序列化 JSON 字符串。  
  
-   当 <xref:System.Web.Script.Serialization.JavaScriptSerializer> 类在序列化过程中遍历对象图时。  
  
 <xref:System.Web.Script.Serialization.JavaScriptSerializer.RecursionLimit%2A>仅当显式创建类的实例时，的值才适用 <xref:System.Web.Script.Serialization.JavaScriptSerializer> 。 使用 `jsonSerialization` 配置文件的元素，为异步通信层使用的内部序列化程序实例设置要处理的对象级别数。 有关序列化的配置元素的详细信息，请参阅 [如何：在 Microsoft Ajax 中配置 ASP.NET 服务](https://docs.microsoft.com/previous-versions/aspnet/bb763183(v=vs.100))。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">该属性设置为小于 1 的值。</exception>
        <altmember cref="P:System.Web.Configuration.ScriptingJsonSerializationSection.RecursionLimit" />
      </Docs>
    </Member>
    <Member MemberName="RegisterConverters">
      <MemberSignature Language="C#" Value="public void RegisterConverters (System.Collections.Generic.IEnumerable&lt;System.Web.Script.Serialization.JavaScriptConverter&gt; converters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterConverters(class System.Collections.Generic.IEnumerable`1&lt;class System.Web.Script.Serialization.JavaScriptConverter&gt; converters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Script.Serialization.JavaScriptSerializer.RegisterConverters(System.Collections.Generic.IEnumerable{System.Web.Script.Serialization.JavaScriptConverter})" />
      <MemberSignature Language="VB.NET" Value="Public Sub RegisterConverters (converters As IEnumerable(Of JavaScriptConverter))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterConverters(System::Collections::Generic::IEnumerable&lt;System::Web::Script::Serialization::JavaScriptConverter ^&gt; ^ converters);" />
      <MemberSignature Language="F#" Value="member this.RegisterConverters : seq&lt;System.Web.Script.Serialization.JavaScriptConverter&gt; -&gt; unit" Usage="javaScriptSerializer.RegisterConverters converters" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="converters" Type="System.Collections.Generic.IEnumerable&lt;System.Web.Script.Serialization.JavaScriptConverter&gt;" />
      </Parameters>
      <Docs>
        <param name="converters">包含要注册的自定义转换器的数组。</param>
        <summary>使用 <see cref="T:System.Web.Script.Serialization.JavaScriptSerializer" /> 实例注册自定义转换器。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以通过使用方法将一个或多个自定义转换器注册到一个 <xref:System.Web.Script.Serialization.JavaScriptSerializer> 实例 <xref:System.Web.Script.Serialization.JavaScriptSerializer.RegisterConverters%2A> 。 注册自定义转换器后，将 <xref:System.Web.Script.Serialization.JavaScriptSerializer> 使用转换器来序列化托管类型和将 JSON 字符串反序列化为托管类型。  
  
 可以向同一实例注册多个转换器 <xref:System.Web.Script.Serialization.JavaScriptSerializer> ，这些转换器可以指示对同一类型的支持。 因此，为特定类型注册的最后一个转换器是将用于 <xref:System.Web.Script.Serialization.JavaScriptSerializer> 序列化该类型的。  
  
 有关自定义转换器的详细信息，请参阅 <xref:System.Web.Script.Serialization.JavaScriptConverter> 类。  
  
   
  
## Examples  
 下面的示例演示如何向实例注册自定义转换器 <xref:System.Web.Script.Serialization.JavaScriptSerializer> 。 此代码示例是为类提供的更大示例的一部分 <xref:System.Web.Script.Serialization.JavaScriptSerializer> 。  
  
 [!code-csharp[System.Web.Script.Serialization#1](~/samples/snippets/csharp/VS_Snippets_Atlas/System.Web.Script.Serialization/CS/Default.aspx#1)]
 [!code-vb[System.Web.Script.Serialization#1](~/samples/snippets/visualbasic/VS_Snippets_Atlas/System.Web.Script.Serialization/VB/Default.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="converters" /> 为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Serialize">
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>将对象转换为 JSON 字符串。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Serialize">
      <MemberSignature Language="C#" Value="public string Serialize (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string Serialize(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Script.Serialization.JavaScriptSerializer.Serialize(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Serialize (obj As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Serialize(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="member this.Serialize : obj -&gt; string" Usage="javaScriptSerializer.Serialize obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">要序列化的对象。</param>
        <summary>将对象转换为 JSON 字符串。</summary>
        <returns>序列化的 JSON 字符串。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当 <xref:System.Web.Script.Serialization.JavaScriptSerializer> 实例序列化自定义转换器注册到的类型时，序列化程序将调用 <xref:System.Web.Script.Serialization.JavaScriptConverter.Serialize%2A> 方法以获取将转换为 JSON 字符串的名称/值对的字典。  
  
 <xref:System.Web.Script.Serialization.JavaScriptSerializer.Serialize%2A>如果对象图太复杂，或的已注册实例 <xref:System.Web.Script.Serialization.JavaScriptConverter> 导致了转换器递归，则方法也可能引发异常。  
  
   
  
## Examples  
下面的示例提供了如何序列化和反序列化数据对象的简单阐释。  
  
[!code-csharp[System.Web.Script.JavaScriptSerializer](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.script.serialization.javascriptserializer/cs/default.aspx.cs#1)]  
[!code-vb[System.Web.Script.JavaScriptSerializer](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.script.serialization.javascriptserializer/vb/default.aspx.vb#1)]  

它需要名为的类 `Person` ，如下面的示例中所示。 

[!code-csharp[System.Web.Script.JavaScriptSerializer](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.script.serialization.javascriptserializer/cs/default.aspx.cs#2)]  
[!code-vb[System.Web.Script.JavaScriptSerializer](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.script.serialization.javascriptserializer/vb/default.aspx.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">所生成的 JSON 字符串超出了 <see cref="P:System.Web.Script.Serialization.JavaScriptSerializer.MaxJsonLength" /> 的值。  
  
- 或 - 
 <paramref name="obj" /> 包含循环引用。 循环引用出现在子对象引用父对象，而父对象又引用子对象时。</exception>
        <exception cref="T:System.ArgumentException">超出了由 <see cref="P:System.Web.Script.Serialization.JavaScriptSerializer.RecursionLimit" /> 定义的递归限制。</exception>
      </Docs>
    </Member>
    <Member MemberName="Serialize">
      <MemberSignature Language="C#" Value="public void Serialize (object obj, System.Text.StringBuilder output);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Serialize(object obj, class System.Text.StringBuilder output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Script.Serialization.JavaScriptSerializer.Serialize(System.Object,System.Text.StringBuilder)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Serialize (obj As Object, output As StringBuilder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Serialize(System::Object ^ obj, System::Text::StringBuilder ^ output);" />
      <MemberSignature Language="F#" Value="member this.Serialize : obj * System.Text.StringBuilder -&gt; unit" Usage="javaScriptSerializer.Serialize (obj, output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="output" Type="System.Text.StringBuilder" />
      </Parameters>
      <Docs>
        <param name="obj">要序列化的对象。</param>
        <param name="output">用于写入 JSON 字符串的 <see cref="T:System.Text.StringBuilder" /> 对象。</param>
        <summary>序列化对象并将生成的 JSON 字符串写入指定的 <see cref="T:System.Text.StringBuilder" /> 对象。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当 <xref:System.Web.Script.Serialization.JavaScriptSerializer> 实例序列化自定义转换器注册到的类型时，序列化程序将调用 <xref:System.Web.Script.Serialization.JavaScriptConverter.Serialize%2A> 方法以获取将转换为 JSON 字符串的名称/值对的字典。  
  
 <xref:System.Web.Script.Serialization.JavaScriptSerializer.Serialize%2A>如果对象图太复杂，或的已注册实例 <xref:System.Web.Script.Serialization.JavaScriptConverter> 导致了转换器递归，则方法也可能引发异常。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">所生成的 JSON 字符串超出了 <see cref="P:System.Web.Script.Serialization.JavaScriptSerializer.MaxJsonLength" /> 的值。  
  
- 或 - 
 <paramref name="obj" /> 包含循环引用。 循环引用出现在子对象引用父对象，而父对象又引用子对象时。</exception>
        <exception cref="T:System.ArgumentException">超出了由 <see cref="P:System.Web.Script.Serialization.JavaScriptSerializer.RecursionLimit" /> 定义的递归限制。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="output" /> 为 <see langword="null" />。</exception>
      </Docs>
    </Member>
  </Members>
</Type>
