<Type Name="DialogPropertyValueEditor" FullName="System.Activities.Presentation.PropertyEditing.DialogPropertyValueEditor">
  <Metadata><Meta Name="ms.openlocfilehash" Value="616ca7a1bfe26091e80ea222184e41230b0b084f" /><Meta Name="ms.sourcegitcommit" Value="b53d35b4a410c949742abd4c6a989d1af5357bca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="86837719" /></Metadata><TypeSignature Language="C#" Value="public class DialogPropertyValueEditor : System.Activities.Presentation.PropertyEditing.PropertyValueEditor" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DialogPropertyValueEditor extends System.Activities.Presentation.PropertyEditing.PropertyValueEditor" />
  <TypeSignature Language="DocId" Value="T:System.Activities.Presentation.PropertyEditing.DialogPropertyValueEditor" />
  <TypeSignature Language="VB.NET" Value="Public Class DialogPropertyValueEditor&#xA;Inherits PropertyValueEditor" />
  <TypeSignature Language="C++ CLI" Value="public ref class DialogPropertyValueEditor : System::Activities::Presentation::PropertyEditing::PropertyValueEditor" />
  <TypeSignature Language="F#" Value="type DialogPropertyValueEditor = class&#xA;    inherit PropertyValueEditor" />
  <AssemblyInfo>
    <AssemblyName>System.Activities.Presentation</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Activities.Presentation.PropertyEditing.PropertyValueEditor</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><see cref="P:System.Activities.Presentation.PropertyEditing.PropertyEntry" /> 对象的所有对话框编辑逻辑的容器。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用 <xref:System.Activities.Presentation.PropertyEditing.DialogPropertyValueEditor> 类来显示一个内联编辑器，该编辑器可拥有一个关联的对话框编辑器。  
  
 <xref:System.Activities.Presentation.PropertyEditing.DialogPropertyValueEditor> 类可为对话框编辑器保存一个 <xref:System.Windows.DataTemplate>，或保存在调用对话框时所调用的自定义逻辑。  
  
 在 <xref:System.Activities.Presentation.PropertyEditing.EditModeSwitchButton> 中使用 <xref:System.Windows.DataTemplate> 来调用自定义的 <xref:System.Activities.Presentation.PropertyEditing.DialogPropertyValueEditor> 类。  
  
 您可以提供 <xref:System.Windows.DataTemplate>，使其显示在宿主对话框中；也可以重写 <xref:System.Windows.Forms.Form.ShowDialog> 方法，以便重用现有的对话框或系统对话框。  
  
 下面的列表演示了用于确定是使用 <xref:System.Windows.DataTemplate> 还是使用 <xref:System.Windows.Forms.Form.ShowDialog> 方法的规则。  
  
 如果 <xref:System.Activities.Presentation.PropertyEditing.DialogPropertyValueEditor.DialogEditorTemplate%2A> 属性不是 null 引用，则在 Visual Basic) 中不 (任何内容，这种 <xref:System.Windows.DataTemplate> 情况在提供主机样式的特定于宿主的对话框中。 未调用 <xref:System.Windows.Forms.Form.ShowDialog>。  
  
 如果 <xref:System.Activities.Presentation.PropertyEditing.DialogPropertyValueEditor.DialogEditorTemplate%2A> 属性为空引用 (Visual Basic) 中没有任何内容，则 <xref:System.Windows.Forms.Form.ShowDialog> 调用虚拟方法，你可以重写此方法以显示任何对话框。  
  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>创建 <see cref="T:System.Activities.Presentation.PropertyEditing.DialogPropertyValueEditor" /> 类的新实例。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DialogPropertyValueEditor ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.PropertyEditing.DialogPropertyValueEditor.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DialogPropertyValueEditor();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>创建 <see cref="T:System.Activities.Presentation.PropertyEditing.DialogPropertyValueEditor" /> 类的新实例，该实例没有特定的模板。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DialogPropertyValueEditor (System.Windows.DataTemplate dialogEditorTemplate, System.Windows.DataTemplate inlineEditorTemplate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.DataTemplate dialogEditorTemplate, class System.Windows.DataTemplate inlineEditorTemplate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.PropertyEditing.DialogPropertyValueEditor.#ctor(System.Windows.DataTemplate,System.Windows.DataTemplate)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (dialogEditorTemplate As DataTemplate, inlineEditorTemplate As DataTemplate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DialogPropertyValueEditor(System::Windows::DataTemplate ^ dialogEditorTemplate, System::Windows::DataTemplate ^ inlineEditorTemplate);" />
      <MemberSignature Language="F#" Value="new System.Activities.Presentation.PropertyEditing.DialogPropertyValueEditor : System.Windows.DataTemplate * System.Windows.DataTemplate -&gt; System.Activities.Presentation.PropertyEditing.DialogPropertyValueEditor" Usage="new System.Activities.Presentation.PropertyEditing.DialogPropertyValueEditor (dialogEditorTemplate, inlineEditorTemplate)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="dialogEditorTemplate" Type="System.Windows.DataTemplate" />
        <Parameter Name="inlineEditorTemplate" Type="System.Windows.DataTemplate" />
      </Parameters>
      <Docs>
        <param name="dialogEditorTemplate">承载在特定于宿主的对话框 chrome 中的 <see cref="T:System.Windows.DataTemplate" />，其 <see cref="P:System.Activities.ActivityContext.DataContext" /> 设置为与正在编辑的属性相对应的 <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyValue" />。</param>
        <param name="inlineEditorTemplate">用于内联编辑器用户界面的 <see cref="T:System.Windows.DataTemplate" />。 如果使用，其 <see cref="P:System.Activities.ActivityContext.DataContext" /> 设置为与正在编辑的属性相对应的 <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyValue" />。</param>
        <summary>使用指定的对话框编辑器和内联编辑器模板创建 <see cref="T:System.Activities.Presentation.PropertyEditing.DialogPropertyValueEditor" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DialogEditorTemplate">
      <MemberSignature Language="C#" Value="public System.Windows.DataTemplate DialogEditorTemplate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.DataTemplate DialogEditorTemplate" />
      <MemberSignature Language="DocId" Value="P:System.Activities.Presentation.PropertyEditing.DialogPropertyValueEditor.DialogEditorTemplate" />
      <MemberSignature Language="VB.NET" Value="Public Property DialogEditorTemplate As DataTemplate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::DataTemplate ^ DialogEditorTemplate { System::Windows::DataTemplate ^ get(); void set(System::Windows::DataTemplate ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DialogEditorTemplate : System.Windows.DataTemplate with get, set" Usage="System.Activities.Presentation.PropertyEditing.DialogPropertyValueEditor.DialogEditorTemplate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.DataTemplate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置由特定于宿主的对话框所承载的 <see cref="T:System.Windows.DataTemplate" />，并且其 <see cref="P:System.Activities.ActivityContext.DataContext" /> 设置为 <see cref="P:System.Activities.Presentation.PropertyEditing.PropertyEntry.PropertyValue" />。</summary>
        <value>由特定宿主对话框承载的 <see cref="T:System.Windows.DataTemplate" /> 对象。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果此属性返回 `null` ，则 <xref:System.Activities.Presentation.PropertyEditing.DialogPropertyValueEditor.ShowDialog%2A> 改为调用方法。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowDialog">
      <MemberSignature Language="C#" Value="public virtual void ShowDialog (System.Activities.Presentation.PropertyEditing.PropertyValue propertyValue, System.Windows.IInputElement commandSource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ShowDialog(class System.Activities.Presentation.PropertyEditing.PropertyValue propertyValue, class System.Windows.IInputElement commandSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.PropertyEditing.DialogPropertyValueEditor.ShowDialog(System.Activities.Presentation.PropertyEditing.PropertyValue,System.Windows.IInputElement)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub ShowDialog (propertyValue As PropertyValue, commandSource As IInputElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ShowDialog(System::Activities::Presentation::PropertyEditing::PropertyValue ^ propertyValue, System::Windows::IInputElement ^ commandSource);" />
      <MemberSignature Language="F#" Value="abstract member ShowDialog : System.Activities.Presentation.PropertyEditing.PropertyValue * System.Windows.IInputElement -&gt; unit&#xA;override this.ShowDialog : System.Activities.Presentation.PropertyEditing.PropertyValue * System.Windows.IInputElement -&gt; unit" Usage="dialogPropertyValueEditor.ShowDialog (propertyValue, commandSource)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyValue" Type="System.Activities.Presentation.PropertyEditing.PropertyValue" />
        <Parameter Name="commandSource" Type="System.Windows.IInputElement" />
      </Parameters>
      <Docs>
        <param name="propertyValue">正在编辑的属性的 <see cref="P:System.Activities.Presentation.PropertyEditing.PropertyEntry.PropertyValue" />。</param>
        <param name="commandSource"><see cref="T:System.Windows.IInputElement" /> 可用作执行 <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyValueEditorCommands" /> 的源。</param>
        <summary>当 <see cref="P:System.Activities.Presentation.PropertyEditing.DialogPropertyValueEditor.DialogEditorTemplate" /> 为 null 并且用户调用了一个对话框时调用。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 因为命令由主机处理，并且自定义对话框不会成为可视化树的一部分，所以 `commandSource` 会公开 <xref:System.Windows.IInputElement>；它是主机的可视化树的一部分，因此可用于以正确的方式执行属性编辑命令。 重写此方法可实现任何自定义对话框逻辑，例如调用现有的系统对话框。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
