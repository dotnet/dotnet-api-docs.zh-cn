<Type Name="DynamicObject" FullName="System.Dynamic.DynamicObject">
  <Metadata><Meta Name="ms.openlocfilehash" Value="66ace7819033d70ce91a291f45963b1bec28d3c2" /><Meta Name="ms.sourcegitcommit" Value="c982ad9e10a242d90f1e631b5981570f9e5d9f34" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/10/2020" /><Meta Name="ms.locfileid" Value="89727574" /></Metadata><TypeSignature Language="C#" Value="public class DynamicObject : System.Dynamic.IDynamicMetaObjectProvider" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DynamicObject extends System.Object implements class System.Dynamic.IDynamicMetaObjectProvider" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netstandard-2.0;netstandard-2.1" />
  <TypeSignature Language="DocId" Value="T:System.Dynamic.DynamicObject" />
  <TypeSignature Language="VB.NET" Value="Public Class DynamicObject&#xA;Implements IDynamicMetaObjectProvider" />
  <TypeSignature Language="C++ CLI" Value="public ref class DynamicObject : System::Dynamic::IDynamicMetaObjectProvider" />
  <TypeSignature Language="F#" Value="type DynamicObject = class&#xA;    interface IDynamicMetaObjectProvider" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit DynamicObject extends System.Object implements class System.Dynamic.IDynamicMetaObjectProvider" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <AssemblyInfo>
    <AssemblyName>System.Dynamic.Runtime</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Linq.Expressions</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="System.Core" FromVersion="4.0.0.0" To="System.Dynamic.Runtime" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0" />
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Linq.Expressions" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
    <TypeForwarding From="System.Dynamic.Runtime" FromVersion="5.0.0.0" To="System.Linq.Expressions" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
    <TypeForwarding From="System.Dynamic.Runtime" FromVersion="4.1.0.0" To="System.Linq.Expressions" ToVersion="4.2.0.0" FrameworkAlternate="netcore-2.0" />
    <TypeForwarding From="System.Dynamic.Runtime" FromVersion="4.1.1.0" To="System.Linq.Expressions" ToVersion="4.2.1.0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0" />
    <TypeForwarding From="System.Dynamic.Runtime" FromVersion="4.1.2.0" To="System.Linq.Expressions" ToVersion="4.2.2.0" FrameworkAlternate="netcore-3.1" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Dynamic.IDynamicMetaObjectProvider</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName Language="C#">[System.Serializable]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Serializable&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="fd9cf-101">提供用于在运行时指定动态行为的基类。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-101">Provides a base class for specifying dynamic behavior at run time.</span></span> <span data-ttu-id="fd9cf-102">必须继承此类；不能直接对其进行实例化。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-102">This class must be inherited from; you cannot instantiate it directly.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fd9cf-103">`DynamicObject`利用类，您可以定义可对动态对象执行哪些操作，以及如何执行这些操作。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-103">The `DynamicObject` class enables you to define which operations can be performed on dynamic objects and how to perform those operations.</span></span> <span data-ttu-id="fd9cf-104">例如，你可以定义当你尝试获取或设置对象属性、调用方法或执行标准数学运算（如加法和乘法）时所发生的情况。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-104">For example, you can define what happens when you try to get or set an object property, call a method, or perform standard mathematical operations such as addition and multiplication.</span></span>  
  
 <span data-ttu-id="fd9cf-105">如果要为库创建更方便的协议，此类会很有用。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-105">This class can be useful if you want to create a more convenient protocol for a library.</span></span> <span data-ttu-id="fd9cf-106">例如，如果你的库用户必须使用类似 `Scriptobj.SetProperty("Count", 1)` 的语法，则可以提供使用更简单的语法，如 `scriptobj.Count = 1` 。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-106">For example, if users of your library have to use syntax like `Scriptobj.SetProperty("Count", 1)`, you can provide the ability to use much simpler syntax, like `scriptobj.Count = 1`.</span></span>  
  
 <span data-ttu-id="fd9cf-107">不能直接创建类的实例 `DynamicObject` 。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-107">You cannot directly create an instance of the `DynamicObject` class.</span></span> <span data-ttu-id="fd9cf-108">若要实现动态行为，你可能想要从类继承 `DynamicObject` 并重写必要的方法。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-108">To implement the dynamic behavior, you may want to inherit from the `DynamicObject` class and override necessary methods.</span></span> <span data-ttu-id="fd9cf-109">例如，如果只需要用于设置和获取属性的操作，则可以只重写 <xref:System.Dynamic.DynamicObject.TrySetMember%2A> 和 <xref:System.Dynamic.DynamicObject.TryGetMember%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-109">For example, if you need only operations for setting and getting properties, you can override just the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> and <xref:System.Dynamic.DynamicObject.TryGetMember%2A> methods.</span></span>  
  
 <span data-ttu-id="fd9cf-110">在 c # 中，若要为从类派生的类的实例启用动态行为 `DynamicObject` ，必须使用 `dynamic` 关键字。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-110">In C#, to enable dynamic behavior for instances of classes derived from the `DynamicObject` class, you must use the `dynamic` keyword.</span></span> <span data-ttu-id="fd9cf-111">有关更多信息，请参见[使用类型 dynamic](/dotnet/csharp/programming-guide/types/using-type-dynamic)。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-111">For more information, see [Using Type dynamic](/dotnet/csharp/programming-guide/types/using-type-dynamic).</span></span>  
  
 <span data-ttu-id="fd9cf-112">在 Visual Basic 中，后期绑定支持动态操作。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-112">In Visual Basic, dynamic operations are supported by late binding.</span></span> <span data-ttu-id="fd9cf-113">有关详细信息，请参阅 [Visual Basic) 的早期和后期绑定 (](/dotnet/visual-basic/programming-guide/language-features/early-late-binding/)。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-113">For more information, see [Early and Late Binding (Visual Basic)](/dotnet/visual-basic/programming-guide/language-features/early-late-binding/).</span></span>  
  
 <span data-ttu-id="fd9cf-114">下面的代码示例演示如何创建派生自类的类的实例 `DynamicObject` 。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-114">The following code example demonstrates how to create an instance of a class that is derived from the `DynamicObject` class.</span></span>  
  
```csharp  
public class SampleDynamicObject : DynamicObject {}  
//...  
dynamic sampleObject = new SampleDynamicObject ();  
```  
  
```vb  
Public Class SampleDynamicObject   
    Inherits DynamicObject  
'...  
Dim sampleObject As Object = New SampleDynamicObject()  
```  
  
 <span data-ttu-id="fd9cf-115">你还可以将自己的成员添加到从类派生的类 `DynamicObject` 。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-115">You can also add your own members to classes derived from the `DynamicObject` class.</span></span> <span data-ttu-id="fd9cf-116">如果你的类定义了属性，并且还重写了 <xref:System.Dynamic.DynamicObject.TrySetMember%2A> 方法，则动态语言运行时 (DLR) 首先使用语言联编程序来查找类中属性的静态定义。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-116">If your class defines properties and also overrides the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> method, the dynamic language runtime (DLR) first uses the language binder to look for a static definition of a property in the class.</span></span> <span data-ttu-id="fd9cf-117">如果没有此类属性，则 DLR 会调用 <xref:System.Dynamic.DynamicObject.TrySetMember%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-117">If there is no such property, the DLR calls the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> method.</span></span>  
  
 <span data-ttu-id="fd9cf-118">`DynamicObject`类实现 dlr 接口 <xref:System.Dynamic.IDynamicMetaObjectProvider> ，使你能够在 `DynamicObject` 支持 DLR 互操作性模型的语言之间共享类的实例。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-118">The `DynamicObject` class implements the DLR interface <xref:System.Dynamic.IDynamicMetaObjectProvider>, which enables you to share instances of the `DynamicObject` class between languages that support the DLR interoperability model.</span></span> <span data-ttu-id="fd9cf-119">例如，可以使用 c # 创建类的实例 `DynamicObject` ，然后将其传递给 IronPython 函数。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-119">For example, you can create an instance of the `DynamicObject` class in C# and then pass it to an IronPython function.</span></span> <span data-ttu-id="fd9cf-120">有关详细信息，请参阅 [动态语言运行时概述](/dotnet/framework/reflection-and-codedom/dynamic-language-runtime-overview)。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-120">For more information, see [Dynamic Language Runtime Overview](/dotnet/framework/reflection-and-codedom/dynamic-language-runtime-overview).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="fd9cf-121">如果你有一个简单的方案，在此方案中，你需要一个仅可在运行时添加和删除成员的对象，但这不需要定义特定操作，并且没有静态成员，请使用 <xref:System.Dynamic.ExpandoObject> 类。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-121">If you have a simple scenario in which you need an object that can only add and remove members at run time but that does not need to define specific operations and does not have static members, use the <xref:System.Dynamic.ExpandoObject> class.</span></span>  
>   
>  <span data-ttu-id="fd9cf-122">如果你有一个更高级的方案，在此方案中，需要定义动态对象如何参与互操作性协议，或者需要管理 DLR 快速动态调度缓存，请创建你自己的 <xref:System.Dynamic.IDynamicMetaObjectProvider> 接口实现。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-122">If you have a more advanced scenario in which you need to define how dynamic objects participate in the interoperability protocol, or you need to manage DLR fast dynamic dispatch caching, create your own implementation of the <xref:System.Dynamic.IDynamicMetaObjectProvider> interface.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fd9cf-123">假设你想要提供用于访问字典中的值的替代语法，以便可以编写，而不是 `sampleDictionary["Text"] = "Sample text"` `sampleDictionary("Text") = "Sample text"` 在 Visual Basic) 中写入 (`sampleDictionary.Text = "Sample text"` 。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-123">Assume that you want to provide alternative syntax for accessing values in a dictionary, so that instead of writing `sampleDictionary["Text"] = "Sample text"` (`sampleDictionary("Text") = "Sample text"` in Visual Basic), you can write `sampleDictionary.Text = "Sample text"`.</span></span> <span data-ttu-id="fd9cf-124">此外，您希望此语法不区分大小写，因此与 `sampleDictionary.Text` 等效 `sampleDictionary.text` 。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-124">Also, you want this syntax to be case-insensitive, so that `sampleDictionary.Text` is equivalent to `sampleDictionary.text`.</span></span>  
  
 <span data-ttu-id="fd9cf-125">下面的代码示例演示 `DynamicDictionary` 类，该类派生自 `DynamicObject` 类。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-125">The following code example demonstrates the `DynamicDictionary` class, which is derived from the `DynamicObject` class.</span></span> <span data-ttu-id="fd9cf-126">`DynamicDictionary`类包含 `Dictionary<string, object>` Visual Basic) 中 (类型的对象 `Dictionary(Of String, Object)` ，用于存储键/值对，并重写 <xref:System.Dynamic.DynamicObject.TrySetMember%2A> 和 <xref:System.Dynamic.DynamicObject.TryGetMember%2A> 方法以支持新的语法。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-126">The `DynamicDictionary` class contains an object of the `Dictionary<string, object>` type (`Dictionary(Of String, Object)` in Visual Basic) to store the key-value pairs, and overrides the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> and <xref:System.Dynamic.DynamicObject.TryGetMember%2A> methods to support the new syntax.</span></span> <span data-ttu-id="fd9cf-127">它还提供了一个 `Count` 属性，该属性显示字典包含的动态属性的数目。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-127">It also provides a `Count` property, which shows how many dynamic properties the dictionary contains.</span></span>  
  
 [!code-csharp[System.Dynamic.DynamicObject#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.dynamic.dynamicobject/cs/program.cs#1)]
 [!code-vb[System.Dynamic.DynamicObject#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.dynamic.dynamicobject/vb/module1.vb#1)]  
  
 <span data-ttu-id="fd9cf-128">有关更多示例，请参阅 c # 常见问题博客上的 [DynamicObject 创建包装](https://devblogs.microsoft.com/csharpfaq/dynamic-in-c-4-0-creating-wrappers-with-dynamicobject/) 。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-128">For more examples, see [Creating Wrappers with DynamicObject](https://devblogs.microsoft.com/csharpfaq/dynamic-in-c-4-0-creating-wrappers-with-dynamicobject/) on the C# Frequently Asked Questions blog.</span></span>  
 
 
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected DynamicObject ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; DynamicObject();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="fd9cf-129">使派生的类型可以初始化 <see cref="T:System.Dynamic.DynamicObject" /> 类型的新实例。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-129">Enables derived types to initialize a new instance of the <see cref="T:System.Dynamic.DynamicObject" /> type.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fd9cf-130">不能直接创建类的实例 <xref:System.Dynamic.DynamicObject> 。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-130">You cannot directly create an instance of the <xref:System.Dynamic.DynamicObject> class.</span></span> <span data-ttu-id="fd9cf-131">若要实现动态行为，必须从 <xref:System.Dynamic.DynamicObject> 类继承并重写必要的方法。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-131">To implement dynamic behavior, you have to inherit from the <xref:System.Dynamic.DynamicObject> class and override necessary methods.</span></span>  
  
 <span data-ttu-id="fd9cf-132">在 c # 中，若要为从类派生的类的实例启用动态行为 <xref:System.Dynamic.DynamicObject> ，必须使用 `dynamic` 关键字。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-132">In C#, to enable dynamic behavior for instances of the classes derived from the <xref:System.Dynamic.DynamicObject> class, you must use the `dynamic` keyword.</span></span> <span data-ttu-id="fd9cf-133">有关更多信息，请参见[使用类型 dynamic](/dotnet/csharp/programming-guide/types/using-type-dynamic)。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-133">For more information, see [Using Type dynamic](/dotnet/csharp/programming-guide/types/using-type-dynamic).</span></span>  
  
 <span data-ttu-id="fd9cf-134">在 Visual Basic 中，后期绑定支持动态操作。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-134">In Visual Basic, dynamic operations are supported by late binding.</span></span> <span data-ttu-id="fd9cf-135">有关详细信息，请参阅 [Visual Basic) 的早期和后期绑定 (](/dotnet/visual-basic/programming-guide/language-features/early-late-binding/)。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-135">For more information, see [Early and Late Binding (Visual Basic)](/dotnet/visual-basic/programming-guide/language-features/early-late-binding/).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fd9cf-136">下面的代码示例演示如何创建派生自类的类的实例 <xref:System.Dynamic.DynamicObject> 。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-136">The following code example demonstrates how to create an instance of classes that are derived from the <xref:System.Dynamic.DynamicObject> class.</span></span>  
  
```csharp  
public class SampleDynamicObject : DynamicObject {}  
//...  
dynamic sampleObject = new SampleDynamicObject ();  
```  
  
```vb  
Public Class SampleDynamicObject   
    Inherits DynamicObject  
'...  
Dim sampleObject As Object = New SampleDynamicObject()  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDynamicMemberNames">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IEnumerable&lt;string&gt; GetDynamicMemberNames ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;string&gt; GetDynamicMemberNames() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.GetDynamicMemberNames" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDynamicMemberNames () As IEnumerable(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::Generic::IEnumerable&lt;System::String ^&gt; ^ GetDynamicMemberNames();" />
      <MemberSignature Language="F#" Value="abstract member GetDynamicMemberNames : unit -&gt; seq&lt;string&gt;&#xA;override this.GetDynamicMemberNames : unit -&gt; seq&lt;string&gt;" Usage="dynamicObject.GetDynamicMemberNames " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="fd9cf-137">返回所有动态成员名称的枚举。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-137">Returns the enumeration of all dynamic member names.</span></span></summary>
        <returns><span data-ttu-id="fd9cf-138">一个包含动态成员名称的序列。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-138">A sequence that contains dynamic member names.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fd9cf-139">此方法仅用于调试目的。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-139">This method exists for debugging purposes only.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMetaObject">
      <MemberSignature Language="C#" Value="public virtual System.Dynamic.DynamicMetaObject GetMetaObject (System.Linq.Expressions.Expression parameter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Dynamic.DynamicMetaObject GetMetaObject(class System.Linq.Expressions.Expression parameter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.GetMetaObject(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetMetaObject (parameter As Expression) As DynamicMetaObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Dynamic::DynamicMetaObject ^ GetMetaObject(System::Linq::Expressions::Expression ^ parameter);" />
      <MemberSignature Language="F#" Value="abstract member GetMetaObject : System.Linq.Expressions.Expression -&gt; System.Dynamic.DynamicMetaObject&#xA;override this.GetMetaObject : System.Linq.Expressions.Expression -&gt; System.Dynamic.DynamicMetaObject" Usage="dynamicObject.GetMetaObject parameter" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject(System.Linq.Expressions.Expression)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Dynamic.DynamicMetaObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameter" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="parameter"><span data-ttu-id="fd9cf-140">表示要调度到动态虚方法的 <see cref="T:System.Dynamic.DynamicMetaObject" /> 的表达式。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-140">The expression that represents <see cref="T:System.Dynamic.DynamicMetaObject" /> to dispatch to the dynamic virtual methods.</span></span></param>
        <summary><span data-ttu-id="fd9cf-141">提供调度到动态虚方法的 <see cref="T:System.Dynamic.DynamicMetaObject" />。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-141">Provides a <see cref="T:System.Dynamic.DynamicMetaObject" /> that dispatches to the dynamic virtual methods.</span></span> <span data-ttu-id="fd9cf-142">可以将该对象封装到另一个 <see cref="T:System.Dynamic.DynamicMetaObject" /> 中，以便为各个不同操作提供自定义行为。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-142">The object can be encapsulated inside another <see cref="T:System.Dynamic.DynamicMetaObject" /> to provide custom behavior for individual actions.</span></span> <span data-ttu-id="fd9cf-143">此方法支持语言实现器的动态语言运行时基础结构，不应从代码直接使用。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-143">This method supports the Dynamic Language Runtime infrastructure for language implementers and it is not intended to be used directly from your code.</span></span></summary>
        <returns><span data-ttu-id="fd9cf-144"><see cref="T:System.Dynamic.DynamicMetaObject" /> 类型的对象。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-144">An object of the <see cref="T:System.Dynamic.DynamicMetaObject" /> type.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryBinaryOperation">
      <MemberSignature Language="C#" Value="public virtual bool TryBinaryOperation (System.Dynamic.BinaryOperationBinder binder, object arg, out object result);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryBinaryOperation(class System.Dynamic.BinaryOperationBinder binder, object arg, [out] object&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryBinaryOperation (binder As BinaryOperationBinder, arg As Object, ByRef result As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TryBinaryOperation(System::Dynamic::BinaryOperationBinder ^ binder, System::Object ^ arg, [Runtime::InteropServices::Out] System::Object ^ % result);" />
      <MemberSignature Language="F#" Value="abstract member TryBinaryOperation : System.Dynamic.BinaryOperationBinder * obj * obj -&gt; bool&#xA;override this.TryBinaryOperation : System.Dynamic.BinaryOperationBinder * obj * obj -&gt; bool" Usage="dynamicObject.TryBinaryOperation (binder, arg, result)" />
      <MemberSignature Language="C#" Value="public virtual bool TryBinaryOperation (System.Dynamic.BinaryOperationBinder binder, object arg, out object? result);" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Dynamic.BinaryOperationBinder" />
        <Parameter Name="arg" Type="System.Object" />
        <Parameter Name="result" Type="System.Object" RefType="out" />
      </Parameters>
      <Docs>
        <param name="binder"><span data-ttu-id="fd9cf-145">提供有关二元运算的信息。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-145">Provides information about the binary operation.</span></span> <span data-ttu-id="fd9cf-146"><c>binder.Operation</c> 属性返回 <see cref="T:System.Linq.Expressions.ExpressionType" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-146">The <c>binder.Operation</c> property returns an <see cref="T:System.Linq.Expressions.ExpressionType" /> object.</span></span> <span data-ttu-id="fd9cf-147">例如，对于 <c>sum = first + second</c> 语句（其中，<c>first</c> 和 <c>second</c> 派生自 <see langword="DynamicObject" /> 类），<c>binder.Operation</c> 返回 <c>ExpressionType.Add</c>。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-147">For example, for the <c>sum = first + second</c> statement, where <c>first</c> and <c>second</c> are derived from the <see langword="DynamicObject" /> class, <c>binder.Operation</c> returns <c>ExpressionType.Add</c>.</span></span></param>
        <param name="arg"><span data-ttu-id="fd9cf-148">二元运算的右操作数。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-148">The right operand for the binary operation.</span></span> <span data-ttu-id="fd9cf-149">例如，对于 <c>sum = first + second</c> 语句（其中 <c>first</c> 和 <c>second</c> 派生自 <see langword="DynamicObject" /> 类），<paramref name="arg" /> 等于 <c>second</c>。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-149">For example, for the <c>sum = first + second</c> statement, where <c>first</c> and <c>second</c> are derived from the <see langword="DynamicObject" /> class, <paramref name="arg" /> is equal to <c>second</c>.</span></span></param>
        <param name="result"><span data-ttu-id="fd9cf-150">二元运算的结果。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-150">The result of the binary operation.</span></span></param>
        <summary><span data-ttu-id="fd9cf-151">提供二元运算的实现。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-151">Provides implementation for binary operations.</span></span> <span data-ttu-id="fd9cf-152">从 <see cref="T:System.Dynamic.DynamicObject" /> 类派生的类可以重写此方法，以便为诸如加法和乘法这样的运算指定动态行为。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-152">Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations such as addition and multiplication.</span></span></summary>
        <returns><span data-ttu-id="fd9cf-153">如果操作成功，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-153"><see langword="true" /> if the operation is successful; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="fd9cf-154">如果此方法返回 <see langword="false" />，则该语言的运行时联编程序将决定行为。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-154">If this method returns <see langword="false" />, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="fd9cf-155">（大多数情况下，将引发语言特定的运行时异常。）</span><span class="sxs-lookup"><span data-stu-id="fd9cf-155">(In most cases, a language-specific run-time exception is thrown.)</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fd9cf-156">从类派生的类 <xref:System.Dynamic.DynamicObject> 可以重写此方法，以指定应如何对动态对象执行二元运算。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-156">Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how binary operations should be performed for a dynamic object.</span></span> <span data-ttu-id="fd9cf-157">如果未重写此方法，则该语言的运行时联编程序将确定行为。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-157">When the method is not overridden, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="fd9cf-158">（大多数情况下，将引发语言特定的运行时异常。）</span><span class="sxs-lookup"><span data-stu-id="fd9cf-158">(In most cases, a language-specific run-time exception is thrown.)</span></span>  
  
 <span data-ttu-id="fd9cf-159">当你有二元运算（例如加法或乘法）时，将调用此方法。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-159">This method is called when you have binary operations such as addition or multiplication.</span></span> <span data-ttu-id="fd9cf-160">例如，如果 <xref:System.Dynamic.DynamicObject.TryBinaryOperation%2A> 方法被重写，则会自动为或等语句调用 `sum = first + second` `multiply = first*second` ，其中 `first` 派生自 `DynamicObject` 类。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-160">For example, if the <xref:System.Dynamic.DynamicObject.TryBinaryOperation%2A> method is overridden, it is automatically invoked for statements like `sum = first + second` or `multiply = first*second`, where `first` is derived from the `DynamicObject` class.</span></span>  
  
 <span data-ttu-id="fd9cf-161">可以通过使用参数的属性来获取有关二元运算类型的信息 `Operation` `binder` 。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-161">You can get information about the type of the binary operation by using the `Operation` property of the `binder` parameter.</span></span>  
  
 <span data-ttu-id="fd9cf-162">如果动态对象仅在 c # 和 Visual Basic 中使用，则该 `binder.Operation` 属性可以是枚举中的以下值之一 <xref:System.Linq.Expressions.ExpressionType> 。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-162">If your dynamic object is used only in C# and Visual Basic, the `binder.Operation` property can have one of the following values from the <xref:System.Linq.Expressions.ExpressionType> enumeration.</span></span> <span data-ttu-id="fd9cf-163">但是，在其他语言（如 IronPython 或 IronRuby）中，可以具有其他值。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-163">However, in other languages such as IronPython or IronRuby, you can have other values.</span></span>
  
|<span data-ttu-id="fd9cf-164">“值”</span><span class="sxs-lookup"><span data-stu-id="fd9cf-164">Value</span></span>|<span data-ttu-id="fd9cf-165">说明</span><span class="sxs-lookup"><span data-stu-id="fd9cf-165">Description</span></span>|<span data-ttu-id="fd9cf-166">C#</span><span class="sxs-lookup"><span data-stu-id="fd9cf-166">C#</span></span>|<span data-ttu-id="fd9cf-167">Visual Basic</span><span class="sxs-lookup"><span data-stu-id="fd9cf-167">Visual Basic</span></span>|  
|-----------|-----------------|---------|------------------|  
|`Add`|<span data-ttu-id="fd9cf-168">对于数值操作数，不进行溢出检查的加法运算。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-168">An addition operation without overflow checking, for numeric operands.</span></span>|`a + b`|`a + b`|  
|`AddAssign`|<span data-ttu-id="fd9cf-169">加法复合赋值运算，不对数值操作数进行溢出检查。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-169">An addition compound assignment operation without overflow checking, for numeric operands.</span></span>|`a += b`|<span data-ttu-id="fd9cf-170">不支持。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-170">Not supported.</span></span>|  
|`And`|<span data-ttu-id="fd9cf-171">按位 `AND` 运算。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-171">A bitwise `AND` operation.</span></span>|`a & b`|`a And b`|  
|`AndAssign`|<span data-ttu-id="fd9cf-172">按位 `AND` 复合赋值运算。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-172">A bitwise `AND` compound assignment operation.</span></span>|`a &= b`|<span data-ttu-id="fd9cf-173">不支持。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-173">Not supported.</span></span>|  
|`Divide`|<span data-ttu-id="fd9cf-174">算术除法运算。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-174">An arithmetic division operation.</span></span>|`a / b`|`a / b`|  
|`DivideAssign`|<span data-ttu-id="fd9cf-175">算术除法复合赋值运算。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-175">An arithmetic division compound assignment operation.</span></span>|`a /= b`|<span data-ttu-id="fd9cf-176">不支持。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-176">Not supported.</span></span>|  
|`ExclusiveOr`|<span data-ttu-id="fd9cf-177">按位 `XOR` 运算。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-177">A bitwise `XOR` operation.</span></span>|`a ^ b`|`a Xor b`|  
|`ExclusiveOrAssign`|<span data-ttu-id="fd9cf-178">按位 `XOR` 复合赋值运算。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-178">A bitwise `XOR` compound assignment operation.</span></span>|`a ^= b`|<span data-ttu-id="fd9cf-179">不支持。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-179">Not supported.</span></span>|  
|`GreaterThan`|<span data-ttu-id="fd9cf-180">"大于" 比较。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-180">A "greater than" comparison.</span></span>|`a > b`|`a > b`|  
|`GreaterThanOrEqual`|<span data-ttu-id="fd9cf-181">"大于或等于" 比较。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-181">A "greater than or equal to" comparison.</span></span>|`a >= b`|<span data-ttu-id="fd9cf-182">不支持。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-182">Not supported.</span></span>|  
|`LeftShift`|<span data-ttu-id="fd9cf-183">按位左移运算。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-183">A bitwise left-shift operation.</span></span>|`a << b`|`a << b`|  
|`LeftShiftAssign`|<span data-ttu-id="fd9cf-184">按位左移复合赋值运算。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-184">A bitwise left-shift compound assignment operation.</span></span>|`a <<= b`|<span data-ttu-id="fd9cf-185">不支持。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-185">Not supported.</span></span>|  
|`LessThan`|<span data-ttu-id="fd9cf-186">"小于" 比较。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-186">A "less than" comparison.</span></span>|`a < b`|`a < b`|  
|`LessThanOrEqual`|<span data-ttu-id="fd9cf-187">"小于或等于" 比较。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-187">A "less than or equal to" comparison.</span></span>|`a <= b`|<span data-ttu-id="fd9cf-188">不支持。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-188">Not supported.</span></span>|  
|`Modulo`|<span data-ttu-id="fd9cf-189">算术余数运算。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-189">An arithmetic remainder operation.</span></span>|`a % b`|`a Mod b`|  
|`ModuloAssign`|<span data-ttu-id="fd9cf-190">算术余数复合赋值运算。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-190">An arithmetic remainder compound assignment operation.</span></span>|`a %= b`|<span data-ttu-id="fd9cf-191">不支持。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-191">Not supported.</span></span>|  
|`Multiply`|<span data-ttu-id="fd9cf-192">对于数值操作数，不进行溢出检查的乘法运算。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-192">A multiplication operation without overflow checking, for numeric operands.</span></span>|`a * b`|`a * b`|  
|`MultiplyAssign`|<span data-ttu-id="fd9cf-193">对于数值操作数，不进行溢出检查的乘法复合赋值运算。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-193">A multiplication compound assignment operation without overflow checking, for numeric operands.</span></span>|`a *= b`|<span data-ttu-id="fd9cf-194">不支持。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-194">Not supported.</span></span>|  
|`NotEqual`|<span data-ttu-id="fd9cf-195">不相等比较。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-195">An inequality comparison.</span></span>|`a != b`|`a <> b`|  
|`Or`|<span data-ttu-id="fd9cf-196">按位或逻辑 `OR` 运算。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-196">A bitwise or logical `OR` operation.</span></span>|`a &#124; b`|`a Or b`|  
|`OrAssign`|<span data-ttu-id="fd9cf-197">按位或逻辑 `OR` 复合赋值。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-197">A bitwise or logical `OR` compound assignment.</span></span>|`a &#124;= b`|<span data-ttu-id="fd9cf-198">不支持。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-198">Not supported.</span></span>|  
|`Power`|<span data-ttu-id="fd9cf-199">对数字进行幂运算的数学运算。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-199">A mathematical operation of raising a number to a power.</span></span>|<span data-ttu-id="fd9cf-200">不支持。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-200">Not supported.</span></span>|`a ^ b`|  
|`RightShift`|<span data-ttu-id="fd9cf-201">按位右移运算。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-201">A bitwise right-shift operation.</span></span>|`a >> b`|`a >> b`|  
|`RightShiftAssign`|<span data-ttu-id="fd9cf-202">按位右移复合赋值运算。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-202">A bitwise right-shift compound assignment operation.</span></span>|`a >>= b`|<span data-ttu-id="fd9cf-203">不支持。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-203">Not supported.</span></span>|  
|`Subtract`|<span data-ttu-id="fd9cf-204">对于数值操作数，不进行溢出检查的减法运算。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-204">A subtraction operation without overflow checking, for numeric operands.</span></span>|`a - b`|`a - b`|  
|`SubtractAssign`|<span data-ttu-id="fd9cf-205">对于数值操作数，不进行溢出检查的减法复合赋值运算。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-205">A subtraction compound assignment operation without overflow checking, for numeric operands.</span></span>|`a -= b`|<span data-ttu-id="fd9cf-206">不支持。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-206">Not supported.</span></span>|  
  
> [!NOTE]
>  <span data-ttu-id="fd9cf-207">若要 `OrElse` 为 `a || b` `AndAlso` `a && b` c # 中的动态对象实现 () 和 () 操作，你可能希望同时实现 <xref:System.Dynamic.DynamicObject.TryUnaryOperation%2A> 方法和 <xref:System.Dynamic.DynamicObject.TryBinaryOperation%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-207">To implement `OrElse` (`a || b`) and `AndAlso` (`a && b`) operations for dynamic objects in C#, you may want to implement both the <xref:System.Dynamic.DynamicObject.TryUnaryOperation%2A> method and the <xref:System.Dynamic.DynamicObject.TryBinaryOperation%2A> method.</span></span>  
>   
>  <span data-ttu-id="fd9cf-208">`OrElse`操作包含一元 `IsTrue` 运算和二元 `Or` 运算。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-208">The `OrElse` operation consists of the unary `IsTrue` operation and the binary `Or` operation.</span></span> <span data-ttu-id="fd9cf-209">`Or`仅当操作的结果为时，才执行该操作 `IsTrue` `false` 。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-209">The `Or` operation is performed only if the result of the `IsTrue` operation is `false`.</span></span>  
>   
>  <span data-ttu-id="fd9cf-210">`AndAlso`操作包含一元 `IsFalse` 运算和二元 `And` 运算。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-210">The `AndAlso` operation consists of the unary `IsFalse` operation and the binary `And` operation.</span></span> <span data-ttu-id="fd9cf-211">`And`仅当操作的结果为时，才执行该操作 `IsFalse` `false` 。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-211">The `And` operation is performed only if the result of the `IsFalse` operation is `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fd9cf-212">假设您需要一个数据结构来存储数字的文本和数值表示形式，并且您想要为此类数据定义基本的数学运算，如加法和减法。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-212">Assume that you need a data structure to store textual and numeric representations of numbers, and you want to define basic mathematical operations such as addition and subtraction for such data.</span></span>  
  
 <span data-ttu-id="fd9cf-213">下面的代码示例演示 `DynamicNumber` 类，该类派生自 <xref:System.Dynamic.DynamicObject> 类。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-213">The following code example demonstrates the `DynamicNumber` class, which is derived from the <xref:System.Dynamic.DynamicObject> class.</span></span> <span data-ttu-id="fd9cf-214">`DynamicNumber` 重写 <xref:System.Dynamic.DynamicObject.TryBinaryOperation%2A> 方法以启用数学运算。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-214">`DynamicNumber` overrides the <xref:System.Dynamic.DynamicObject.TryBinaryOperation%2A> method to enable mathematical operations.</span></span> <span data-ttu-id="fd9cf-215">它还会重写 <xref:System.Dynamic.DynamicObject.TrySetMember%2A> 和 <xref:System.Dynamic.DynamicObject.TryGetMember%2A> 方法，以启用对元素的访问。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-215">It also overrides the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> and <xref:System.Dynamic.DynamicObject.TryGetMember%2A> methods to enable access to the elements.</span></span>  
  
 <span data-ttu-id="fd9cf-216">在此示例中，仅支持加法和减法操作。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-216">In this example, only addition and subtraction operations are supported.</span></span> <span data-ttu-id="fd9cf-217">如果尝试编写类似的语句，则 `resultNumber = firstNumber*secondNumber` 会引发运行时异常。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-217">If you try to write a statement like `resultNumber = firstNumber*secondNumber`, a run-time exception is thrown.</span></span>  
  
 [!code-csharp[System.Dynamic.DynamicObject#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.dynamic.dynamicobject/cs/program.cs#2)]
 [!code-vb[System.Dynamic.DynamicObject#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.dynamic.dynamicobject/vb/module1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryConvert">
      <MemberSignature Language="C#" Value="public virtual bool TryConvert (System.Dynamic.ConvertBinder binder, out object result);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryConvert(class System.Dynamic.ConvertBinder binder, [out] object&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryConvert (binder As ConvertBinder, ByRef result As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TryConvert(System::Dynamic::ConvertBinder ^ binder, [Runtime::InteropServices::Out] System::Object ^ % result);" />
      <MemberSignature Language="F#" Value="abstract member TryConvert : System.Dynamic.ConvertBinder * obj -&gt; bool&#xA;override this.TryConvert : System.Dynamic.ConvertBinder * obj -&gt; bool" Usage="dynamicObject.TryConvert (binder, result)" />
      <MemberSignature Language="C#" Value="public virtual bool TryConvert (System.Dynamic.ConvertBinder binder, out object? result);" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Dynamic.ConvertBinder" />
        <Parameter Name="result" Type="System.Object" RefType="out" />
      </Parameters>
      <Docs>
        <param name="binder"><span data-ttu-id="fd9cf-218">提供有关转换运算的信息。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-218">Provides information about the conversion operation.</span></span> <span data-ttu-id="fd9cf-219"><c>binder.Type</c> 属性提供必须将对象转换为的类型。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-219">The <c>binder.Type</c> property provides the type to which the object must be converted.</span></span> <span data-ttu-id="fd9cf-220">例如，对于 C# 中的 <c>(String)sampleObject</c> 语句（在 Visual Basic 中为 <c>CType(sampleObject, Type)</c>，其中 <c>sampleObject</c> 是派生自 <see cref="T:System.Dynamic.DynamicObject" /> 类的类的实例），<c>binder.Type</c> 返回 <see cref="T:System.String" /> 类型。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-220">For example, for the statement <c>(String)sampleObject</c> in C# (<c>CType(sampleObject, Type)</c> in Visual Basic), where <c>sampleObject</c> is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, <c>binder.Type</c> returns the <see cref="T:System.String" /> type.</span></span> <span data-ttu-id="fd9cf-221"><c>binder.Explicit</c> 属性提供有关所发生转换的类型的信息。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-221">The <c>binder.Explicit</c> property provides information about the kind of conversion that occurs.</span></span> <span data-ttu-id="fd9cf-222">对于显式转换，它返回 <see langword="true" />；对于隐式转换，它返回 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-222">It returns <see langword="true" /> for explicit conversion and <see langword="false" /> for implicit conversion.</span></span></param>
        <param name="result"><span data-ttu-id="fd9cf-223">类型转换运算的结果。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-223">The result of the type conversion operation.</span></span></param>
        <summary><span data-ttu-id="fd9cf-224">提供类型转换运算的实现。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-224">Provides implementation for type conversion operations.</span></span> <span data-ttu-id="fd9cf-225">从 <see cref="T:System.Dynamic.DynamicObject" /> 类派生的类可以重写此方法，以便为将某个对象从一种类型转换为另一种类型的运算指定动态行为。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-225">Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations that convert an object from one type to another.</span></span></summary>
        <returns><span data-ttu-id="fd9cf-226">如果操作成功，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-226"><see langword="true" /> if the operation is successful; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="fd9cf-227">如果此方法返回 <see langword="false" />，则该语言的运行时联编程序将决定行为。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-227">If this method returns <see langword="false" />, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="fd9cf-228">（大多数情况下，将引发语言特定的运行时异常。）</span><span class="sxs-lookup"><span data-stu-id="fd9cf-228">(In most cases, a language-specific run-time exception is thrown.)</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fd9cf-229">从类派生的类 <xref:System.Dynamic.DynamicObject> 可以重写此方法，以指定应如何对动态对象执行类型转换。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-229">Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how a type conversion should be performed for a dynamic object.</span></span> <span data-ttu-id="fd9cf-230">如果未重写此方法，则该语言的运行时联编程序将确定行为。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-230">When the method is not overridden, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="fd9cf-231">（大多数情况下，将引发语言特定的运行时异常。）</span><span class="sxs-lookup"><span data-stu-id="fd9cf-231">(In most cases, a language-specific run-time exception is thrown.)</span></span>  
  
 <span data-ttu-id="fd9cf-232">在 c # 中，如果重写此方法，则会在你具有显式或隐式转换时自动调用，如下面的代码示例所示。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-232">In C#, if this method is overridden, it is automatically invoked when you have an explicit or implicit conversion, as shown in the code example below.</span></span>  
  
 <span data-ttu-id="fd9cf-233">在 Visual Basic 中，仅支持显式转换。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-233">In Visual Basic, only explicit conversion is supported.</span></span> <span data-ttu-id="fd9cf-234">如果重写此方法，则可以使用 <xref:Microsoft.VisualBasic.Conversion.CTypeDynamic%2A> 或函数调用它 <xref:Microsoft.VisualBasic.Conversion.CTypeDynamic%2A> 。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-234">If you override this method, you call it by using the <xref:Microsoft.VisualBasic.Conversion.CTypeDynamic%2A> or <xref:Microsoft.VisualBasic.Conversion.CTypeDynamic%2A> functions.</span></span>  
  
```csharp  
// Explicit conversion.  
String sampleExplicit = (String)sampleObject;  
// Implicit conversion.  
String sampleImplicit = sampleObject;  
```  
  
```vb  
// Explicit conversion - first variant.  
Dim testExplicit1 = CTypeDynamic(Of String)(sampleObject)  
// Explicit conversion - second variant.  
Dim testExplicit2 = CTypeDynamic(sampleObject, GetType(String))  
```  
  
   
  
## Examples  
 <span data-ttu-id="fd9cf-235">假设您需要一个数据结构来存储数字的文本和数值表示形式，并且您希望将此数据结构的转换定义为字符串和整数。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-235">Assume that you need a data structure to store textual and numeric representations of numbers, and you want to define conversions of this data structure to strings and integers.</span></span>  
  
 <span data-ttu-id="fd9cf-236">下面的代码示例演示 `DynamicNumber` 类，该类派生自 <xref:System.Dynamic.DynamicObject> 类。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-236">The following code example demonstrates the `DynamicNumber` class, which is derived from the <xref:System.Dynamic.DynamicObject> class.</span></span> <span data-ttu-id="fd9cf-237">`DynamicNumber` 重写 <xref:System.Dynamic.DynamicObject.TryConvert%2A> 方法以启用类型转换。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-237">`DynamicNumber` overrides the <xref:System.Dynamic.DynamicObject.TryConvert%2A> method to enable type conversion.</span></span> <span data-ttu-id="fd9cf-238">它还会重写 <xref:System.Dynamic.DynamicObject.TrySetMember%2A> 和 <xref:System.Dynamic.DynamicObject.TryGetMember%2A> 方法，以启用对数据元素的访问。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-238">It also overrides the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> and <xref:System.Dynamic.DynamicObject.TryGetMember%2A> methods to enable access to the data elements.</span></span>  
  
 <span data-ttu-id="fd9cf-239">在此示例中，仅支持转换为字符串和整数。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-239">In this example, only conversion to strings and integers is supported.</span></span> <span data-ttu-id="fd9cf-240">如果尝试将对象转换为其他任何类型，则会引发运行时异常。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-240">If you try to convert an object to any other type, a run-time exception is thrown.</span></span>  
  
 [!code-csharp[System.Dynamic.DynamicObject#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.dynamic.dynamicobject/cs/program.cs#3)]
 [!code-vb[System.Dynamic.DynamicObject#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.dynamic.dynamicobject/vb/module1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryCreateInstance">
      <MemberSignature Language="C#" Value="public virtual bool TryCreateInstance (System.Dynamic.CreateInstanceBinder binder, object[] args, out object result);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryCreateInstance(class System.Dynamic.CreateInstanceBinder binder, object[] args, [out] object&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.TryCreateInstance(System.Dynamic.CreateInstanceBinder,System.Object[],System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryCreateInstance (binder As CreateInstanceBinder, args As Object(), ByRef result As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TryCreateInstance(System::Dynamic::CreateInstanceBinder ^ binder, cli::array &lt;System::Object ^&gt; ^ args, [Runtime::InteropServices::Out] System::Object ^ % result);" />
      <MemberSignature Language="F#" Value="abstract member TryCreateInstance : System.Dynamic.CreateInstanceBinder * obj[] * obj -&gt; bool&#xA;override this.TryCreateInstance : System.Dynamic.CreateInstanceBinder * obj[] * obj -&gt; bool" Usage="dynamicObject.TryCreateInstance (binder, args, result)" />
      <MemberSignature Language="C#" Value="public virtual bool TryCreateInstance (System.Dynamic.CreateInstanceBinder? binder, object[] args, out object result);" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Dynamic.CreateInstanceBinder" />
        <Parameter Name="args" Type="System.Object[]" />
        <Parameter Name="result" Type="System.Object" RefType="out" />
      </Parameters>
      <Docs>
        <param name="binder"><span data-ttu-id="fd9cf-241">提供有关初始化操作的信息。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-241">Provides information about the initialization operation.</span></span></param>
        <param name="args"><span data-ttu-id="fd9cf-242">初始化期间传递给对象的参数。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-242">The arguments that are passed to the object during initialization.</span></span> <span data-ttu-id="fd9cf-243">例如，对于 <c>new SampleType(100)</c>（其中 <c>SampleType</c> 是派生自 <see cref="T:System.Dynamic.DynamicObject" /> 类的类型），<c>args[0]</c> 等于 100。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-243">For example, for the <c>new SampleType(100)</c> operation, where <c>SampleType</c> is the type derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, <c>args[0]</c> is equal to 100.</span></span></param>
        <param name="result"><span data-ttu-id="fd9cf-244">初始化的结果。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-244">The result of the initialization.</span></span></param>
        <summary><span data-ttu-id="fd9cf-245">为初始化动态对象的新实例的操作提供实现。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-245">Provides the implementation for operations that initialize a new instance of a dynamic object.</span></span> <span data-ttu-id="fd9cf-246">不应将此方法用于 C# 或 Visual Basic。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-246">This method is not intended for use in C# or Visual Basic.</span></span></summary>
        <returns><span data-ttu-id="fd9cf-247">如果操作成功，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-247"><see langword="true" /> if the operation is successful; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="fd9cf-248">如果此方法返回 <see langword="false" />，则该语言的运行时联编程序将决定行为。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-248">If this method returns <see langword="false" />, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="fd9cf-249">（大多数情况下，将引发语言特定的运行时异常。）</span><span class="sxs-lookup"><span data-stu-id="fd9cf-249">(In most cases, a language-specific run-time exception is thrown.)</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fd9cf-250">从类派生的类 <xref:System.Dynamic.DynamicObject> 可以重写此方法，以指定如何初始化动态对象的新实例。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-250">Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how a new instance of the dynamic object should be initialized.</span></span> <span data-ttu-id="fd9cf-251">如果未重写此方法，则该语言的运行时联编程序将确定行为。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-251">When the method is not overridden, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="fd9cf-252">（大多数情况下，将引发语言特定的运行时异常。）</span><span class="sxs-lookup"><span data-stu-id="fd9cf-252">(In most cases, a language-specific run-time exception is thrown.)</span></span>  
  
 <span data-ttu-id="fd9cf-253">C # 和 Visual Basic 编译器从不发出代码来使用此方法，因为它们不支持第一类类型。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-253">C# and Visual Basic compilers never emit code to use this method because they do not support first-class types.</span></span> <span data-ttu-id="fd9cf-254">此方法适用于支持通过使用语法（如）初始化动态对象的语言 `dynamic new` 。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-254">This method is intended for languages that support the initialization of dynamic objects by using syntax like `dynamic new`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryDeleteIndex">
      <MemberSignature Language="C#" Value="public virtual bool TryDeleteIndex (System.Dynamic.DeleteIndexBinder binder, object[] indexes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryDeleteIndex(class System.Dynamic.DeleteIndexBinder binder, object[] indexes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.TryDeleteIndex(System.Dynamic.DeleteIndexBinder,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryDeleteIndex (binder As DeleteIndexBinder, indexes As Object()) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TryDeleteIndex(System::Dynamic::DeleteIndexBinder ^ binder, cli::array &lt;System::Object ^&gt; ^ indexes);" />
      <MemberSignature Language="F#" Value="abstract member TryDeleteIndex : System.Dynamic.DeleteIndexBinder * obj[] -&gt; bool&#xA;override this.TryDeleteIndex : System.Dynamic.DeleteIndexBinder * obj[] -&gt; bool" Usage="dynamicObject.TryDeleteIndex (binder, indexes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Dynamic.DeleteIndexBinder" />
        <Parameter Name="indexes" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="binder"><span data-ttu-id="fd9cf-255">提供有关删除的信息。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-255">Provides information about the deletion.</span></span></param>
        <param name="indexes"><span data-ttu-id="fd9cf-256">要删除的索引。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-256">The indexes to be deleted.</span></span></param>
        <summary><span data-ttu-id="fd9cf-257">为按索引删除对象的操作提供实现。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-257">Provides the implementation for operations that delete an object by index.</span></span> <span data-ttu-id="fd9cf-258">不应将此方法用于 C# 或 Visual Basic。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-258">This method is not intended for use in C# or Visual Basic.</span></span></summary>
        <returns><span data-ttu-id="fd9cf-259">如果操作成功，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-259"><see langword="true" /> if the operation is successful; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="fd9cf-260">如果此方法返回 <see langword="false" />，则该语言的运行时联编程序将决定行为。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-260">If this method returns <see langword="false" />, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="fd9cf-261">（大多数情况下，将引发语言特定的运行时异常。）</span><span class="sxs-lookup"><span data-stu-id="fd9cf-261">(In most cases, a language-specific run-time exception is thrown.)</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fd9cf-262">从类派生的类 <xref:System.Dynamic.DynamicObject> 可以重写此方法，以指定应如何删除具有指定索引的值。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-262">Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how a value that has a specified index should be deleted.</span></span> <span data-ttu-id="fd9cf-263">如果未重写此方法，则该语言的运行时联编程序将确定行为。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-263">When the method is not overridden, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="fd9cf-264">（大多数情况下，将引发语言特定的运行时异常。）</span><span class="sxs-lookup"><span data-stu-id="fd9cf-264">(In most cases, a language-specific run-time exception is thrown.)</span></span>  
  
 <span data-ttu-id="fd9cf-265">C # 和 Visual Basic 编译器从不发出代码来使用此方法，因为它们不支持这种操作。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-265">C# and Visual Basic compilers never emit code to use this method because they do not support this kind of operation.</span></span> <span data-ttu-id="fd9cf-266">此方法适用于支持按索引删除对象的语法，如 `del sampleObject[1,2]` 在 Python 中的语言。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-266">This method is intended for languages that support syntax for deleting objects by index, such as `del sampleObject[1,2]` in Python.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryDeleteMember">
      <MemberSignature Language="C#" Value="public virtual bool TryDeleteMember (System.Dynamic.DeleteMemberBinder binder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryDeleteMember(class System.Dynamic.DeleteMemberBinder binder) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.TryDeleteMember(System.Dynamic.DeleteMemberBinder)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryDeleteMember (binder As DeleteMemberBinder) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TryDeleteMember(System::Dynamic::DeleteMemberBinder ^ binder);" />
      <MemberSignature Language="F#" Value="abstract member TryDeleteMember : System.Dynamic.DeleteMemberBinder -&gt; bool&#xA;override this.TryDeleteMember : System.Dynamic.DeleteMemberBinder -&gt; bool" Usage="dynamicObject.TryDeleteMember binder" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Dynamic.DeleteMemberBinder" />
      </Parameters>
      <Docs>
        <param name="binder"><span data-ttu-id="fd9cf-267">提供有关删除的信息。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-267">Provides information about the deletion.</span></span></param>
        <summary><span data-ttu-id="fd9cf-268">为删除对象成员的操作提供实现。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-268">Provides the implementation for operations that delete an object member.</span></span> <span data-ttu-id="fd9cf-269">不应将此方法用于 C# 或 Visual Basic。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-269">This method is not intended for use in C# or Visual Basic.</span></span></summary>
        <returns><span data-ttu-id="fd9cf-270">如果操作成功，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-270"><see langword="true" /> if the operation is successful; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="fd9cf-271">如果此方法返回 <see langword="false" />，则该语言的运行时联编程序将决定行为。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-271">If this method returns <see langword="false" />, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="fd9cf-272">（大多数情况下，将引发语言特定的运行时异常。）</span><span class="sxs-lookup"><span data-stu-id="fd9cf-272">(In most cases, a language-specific run-time exception is thrown.)</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fd9cf-273">从类派生的类 <xref:System.Dynamic.DynamicObject> 可以重写此方法，以指定如何删除对象成员。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-273">Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how an object member should be deleted.</span></span> <span data-ttu-id="fd9cf-274">如果未重写此方法，则该语言的运行时联编程序将确定行为。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-274">When this method is not overridden, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="fd9cf-275">（大多数情况下，将引发语言特定的运行时异常。）</span><span class="sxs-lookup"><span data-stu-id="fd9cf-275">(In most cases, a language-specific run-time exception is thrown.)</span></span>  
  
 <span data-ttu-id="fd9cf-276">C # 和 Visual Basic 编译器从不发出代码来使用此方法，因为它们不支持这种操作。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-276">C# and Visual Basic compilers never emit code to use this method because they do not support this kind of operation.</span></span> <span data-ttu-id="fd9cf-277">此方法适用于支持删除成员的语法的语言，如 `del sampleObject.SampleMember` 在 Python 中。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-277">This method is intended for languages that support syntax for deleting members, such as `del sampleObject.SampleMember` in Python.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetIndex">
      <MemberSignature Language="C#" Value="public virtual bool TryGetIndex (System.Dynamic.GetIndexBinder binder, object[] indexes, out object result);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryGetIndex(class System.Dynamic.GetIndexBinder binder, object[] indexes, [out] object&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.TryGetIndex(System.Dynamic.GetIndexBinder,System.Object[],System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryGetIndex (binder As GetIndexBinder, indexes As Object(), ByRef result As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TryGetIndex(System::Dynamic::GetIndexBinder ^ binder, cli::array &lt;System::Object ^&gt; ^ indexes, [Runtime::InteropServices::Out] System::Object ^ % result);" />
      <MemberSignature Language="F#" Value="abstract member TryGetIndex : System.Dynamic.GetIndexBinder * obj[] * obj -&gt; bool&#xA;override this.TryGetIndex : System.Dynamic.GetIndexBinder * obj[] * obj -&gt; bool" Usage="dynamicObject.TryGetIndex (binder, indexes, result)" />
      <MemberSignature Language="C#" Value="public virtual bool TryGetIndex (System.Dynamic.GetIndexBinder binder, object[] indexes, out object? result);" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Dynamic.GetIndexBinder" />
        <Parameter Name="indexes" Type="System.Object[]" />
        <Parameter Name="result" Type="System.Object" RefType="out" />
      </Parameters>
      <Docs>
        <param name="binder"><span data-ttu-id="fd9cf-278">提供有关该操作的信息。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-278">Provides information about the operation.</span></span></param>
        <param name="indexes"><span data-ttu-id="fd9cf-279">该操作中使用的索引。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-279">The indexes that are used in the operation.</span></span> <span data-ttu-id="fd9cf-280">例如，对于 C# 中的 <c>sampleObject[3]</c> 操作（在 Visual Basic 中为 <c>sampleObject(3)</c>，其中 <c>sampleObject</c> 派生自 <see langword="DynamicObject" /> 类），<c>indexes[0]</c> 等于 3。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-280">For example, for the <c>sampleObject[3]</c> operation in C# (<c>sampleObject(3)</c> in Visual Basic), where <c>sampleObject</c> is derived from the <see langword="DynamicObject" /> class, <c>indexes[0]</c> is equal to 3.</span></span></param>
        <param name="result"><span data-ttu-id="fd9cf-281">索引操作的结果。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-281">The result of the index operation.</span></span></param>
        <summary><span data-ttu-id="fd9cf-282">为按索引获取值的操作提供实现。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-282">Provides the implementation for operations that get a value by index.</span></span> <span data-ttu-id="fd9cf-283">从 <see cref="T:System.Dynamic.DynamicObject" /> 类派生的类可以重写此方法，以便为索引操作指定动态行为。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-283">Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for indexing operations.</span></span></summary>
        <returns><span data-ttu-id="fd9cf-284">如果操作成功，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-284"><see langword="true" /> if the operation is successful; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="fd9cf-285">如果此方法返回 <see langword="false" />，则该语言的运行时联编程序将决定行为。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-285">If this method returns <see langword="false" />, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="fd9cf-286">（大多数情况下，将引发运行时异常。）</span><span class="sxs-lookup"><span data-stu-id="fd9cf-286">(In most cases, a run-time exception is thrown.)</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fd9cf-287">从类派生的类 <xref:System.Dynamic.DynamicObject> 可以重写此方法，以指定应该如何为动态对象执行按索引获取值。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-287">Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how getting a value by index should be performed for a dynamic object.</span></span> <span data-ttu-id="fd9cf-288">如果未重写此方法，则该语言的运行时联编程序将确定行为。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-288">When the method is not overridden, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="fd9cf-289">（大多数情况下，将引发运行时异常。）</span><span class="sxs-lookup"><span data-stu-id="fd9cf-289">(In most cases, a run-time exception is thrown.)</span></span>  
  
 <span data-ttu-id="fd9cf-290">如果重写此方法，则当你的操作如 `sampleObject[3]` c # 或 `sampleObject(3)` Visual Basic （其中 `sampleObject` 派生自类）时，将自动调用此方法 <xref:System.Dynamic.DynamicObject> 。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-290">If this method is overridden, it is automatically invoked when you have an operation like `sampleObject[3]` in C# or `sampleObject(3)` in Visual Basic, where `sampleObject` is derived from the <xref:System.Dynamic.DynamicObject> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fd9cf-291">假设你要创建一个对象，该对象可以通过名称（如、等） `Property0` `Property1` 或索引访问属性，以便例如， `sampleObject.Property0` `sampleObject[0]` 在 c # 中或 `sampleObject(0)` 在 Visual Basic 中等效。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-291">Assume that you want to create an object in which properties can be accessed either by names such as `Property0`, `Property1`, and so on, or by index, so that, for example, `sampleObject.Property0` is equivalent to `sampleObject[0]` in C# or `sampleObject(0)` in Visual Basic.</span></span>  
  
 <span data-ttu-id="fd9cf-292">下面的代码示例演示 `SampleDynamicObject` 类，该类派生自 <xref:System.Dynamic.DynamicObject> 类。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-292">The following code example demonstrates the `SampleDynamicObject` class, which is derived from the <xref:System.Dynamic.DynamicObject> class.</span></span> <span data-ttu-id="fd9cf-293">`SampleDynamicObject`类包含 `Dictionary<string, object>` Visual Basic) 中 (类型的对象， `Dictionary(Of String, Object)` 以存储键值对。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-293">The `SampleDynamicObject` class contains an object of the `Dictionary<string, object>` type (`Dictionary(Of String, Object)` in Visual Basic) to store the key-value pairs.</span></span> <span data-ttu-id="fd9cf-294">`SampleDynamicObject` 重写 <xref:System.Dynamic.DynamicObject.TrySetIndex%2A> 和 <xref:System.Dynamic.DynamicObject.TryGetIndex%2A> 方法，以启用按索引进行访问。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-294">`SampleDynamicObject` overrides the <xref:System.Dynamic.DynamicObject.TrySetIndex%2A> and <xref:System.Dynamic.DynamicObject.TryGetIndex%2A> methods to enable access by index.</span></span> <span data-ttu-id="fd9cf-295">它重写 <xref:System.Dynamic.DynamicObject.TrySetMember%2A> 和 <xref:System.Dynamic.DynamicObject.TryGetMember%2A> 方法，以通过属性名称启用访问。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-295">It overrides the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> and <xref:System.Dynamic.DynamicObject.TryGetMember%2A> methods to enable access by property name.</span></span>  
  
 [!code-csharp[System.Dynamic.DynamicObject#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.dynamic.dynamicobject/cs/program.cs#4)]
 [!code-vb[System.Dynamic.DynamicObject#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.dynamic.dynamicobject/vb/module1.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetMember">
      <MemberSignature Language="C#" Value="public virtual bool TryGetMember (System.Dynamic.GetMemberBinder binder, out object result);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryGetMember(class System.Dynamic.GetMemberBinder binder, [out] object&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryGetMember (binder As GetMemberBinder, ByRef result As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TryGetMember(System::Dynamic::GetMemberBinder ^ binder, [Runtime::InteropServices::Out] System::Object ^ % result);" />
      <MemberSignature Language="F#" Value="abstract member TryGetMember : System.Dynamic.GetMemberBinder * obj -&gt; bool&#xA;override this.TryGetMember : System.Dynamic.GetMemberBinder * obj -&gt; bool" Usage="dynamicObject.TryGetMember (binder, result)" />
      <MemberSignature Language="C#" Value="public virtual bool TryGetMember (System.Dynamic.GetMemberBinder binder, out object? result);" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Dynamic.GetMemberBinder" />
        <Parameter Name="result" Type="System.Object" RefType="out" />
      </Parameters>
      <Docs>
        <param name="binder"><span data-ttu-id="fd9cf-296">提供有关调用了动态操作的对象的信息。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-296">Provides information about the object that called the dynamic operation.</span></span> <span data-ttu-id="fd9cf-297"><c>binder.Name</c> 属性提供针对其执行动态操作的成员的名称。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-297">The <c>binder.Name</c> property provides the name of the member on which the dynamic operation is performed.</span></span> <span data-ttu-id="fd9cf-298">例如，对于<c> Console.WriteLine(sampleObject.SampleProperty)</c> 语句（其中 <c>sampleObject</c> 是派生自 <see cref="T:System.Dynamic.DynamicObject" /> 类的类的实例），<c>binder.Name</c> 返回“SampleProperty”。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-298">For example, for the <c>Console.WriteLine(sampleObject.SampleProperty)</c> statement, where <c>sampleObject</c> is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, <c>binder.Name</c> returns "SampleProperty".</span></span> <span data-ttu-id="fd9cf-299"><c>binder.IgnoreCase</c> 属性指定成员名称是否区分大小写。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-299">The <c>binder.IgnoreCase</c> property specifies whether the member name is case-sensitive.</span></span></param>
        <param name="result"><span data-ttu-id="fd9cf-300">获取操作的结果。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-300">The result of the get operation.</span></span> <span data-ttu-id="fd9cf-301">例如，如果为某个属性调用该方法，则可以为 <paramref name="result" /> 指派该属性值。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-301">For example, if the method is called for a property, you can assign the property value to <paramref name="result" />.</span></span></param>
        <summary><span data-ttu-id="fd9cf-302">为获取成员值的操作提供实现。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-302">Provides the implementation for operations that get member values.</span></span> <span data-ttu-id="fd9cf-303">从 <see cref="T:System.Dynamic.DynamicObject" /> 类派生的类可以重写此方法，以便为诸如获取属性值这样的操作指定动态行为。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-303">Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations such as getting a value for a property.</span></span></summary>
        <returns><span data-ttu-id="fd9cf-304">如果操作成功，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-304"><see langword="true" /> if the operation is successful; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="fd9cf-305">如果此方法返回 <see langword="false" />，则该语言的运行时联编程序将决定行为。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-305">If this method returns <see langword="false" />, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="fd9cf-306">（大多数情况下，将引发运行时异常。）</span><span class="sxs-lookup"><span data-stu-id="fd9cf-306">(In most cases, a run-time exception is thrown.)</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fd9cf-307">从类派生的类 <xref:System.Dynamic.DynamicObject> 可以重写此方法，以指定如何为动态对象执行获取成员值的操作。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-307">Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how operations that get member values should be performed for a dynamic object.</span></span> <span data-ttu-id="fd9cf-308">如果未重写此方法，则该语言的运行时联编程序将确定行为。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-308">When the method is not overridden, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="fd9cf-309">（大多数情况下，将引发运行时异常。）</span><span class="sxs-lookup"><span data-stu-id="fd9cf-309">(In most cases, a run-time exception is thrown.)</span></span>  
  
 <span data-ttu-id="fd9cf-310">当你具有类似的语句时调用此方法 `Console.WriteLine(sampleObject.SampleProperty)` ，其中 `sampleObject` 是派生自类的类的实例 <xref:System.Dynamic.DynamicObject> 。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-310">This method is called when you have statements like `Console.WriteLine(sampleObject.SampleProperty)`, where `sampleObject` is an instance of the class derived from the <xref:System.Dynamic.DynamicObject> class.</span></span>  
  
 <span data-ttu-id="fd9cf-311">你还可以将自己的成员添加到从类派生的类 `DynamicObject` 。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-311">You can also add your own members to classes derived from the `DynamicObject` class.</span></span> <span data-ttu-id="fd9cf-312">如果你的类定义了属性，并且还重写了 <xref:System.Dynamic.DynamicObject.TrySetMember%2A> 方法，则动态语言运行时 (DLR) 首先使用语言联编程序来查找类中属性的静态定义。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-312">If your class defines properties and also overrides the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> method, the dynamic language runtime (DLR) first uses the language binder to look for a static definition of a property in the class.</span></span> <span data-ttu-id="fd9cf-313">如果没有此类属性，则 DLR 会调用 <xref:System.Dynamic.DynamicObject.TrySetMember%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-313">If there is no such property, the DLR calls the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fd9cf-314">假设你想要提供用于访问字典中的值的替代语法，以便可以编写，而不是 `sampleDictionary["Text"] = "Sample text"` `sampleDictionary("Text") = "Sample text"` 在 Visual Basic) 中写入 (`sampleDictionary.Text = "Sample text"` 。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-314">Assume that you want to provide alternative syntax for accessing values in a dictionary, so that instead of writing `sampleDictionary["Text"] = "Sample text"` (`sampleDictionary("Text") = "Sample text"` in Visual Basic), you can write `sampleDictionary.Text = "Sample text"`.</span></span> <span data-ttu-id="fd9cf-315">此外，此语法必须不区分大小写，因此 `sampleDictionary.Text` 等效于 `sampleDictionary.text` 。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-315">Also, this syntax must be case-insensitive, so that `sampleDictionary.Text` is equivalent to `sampleDictionary.text`.</span></span>  
  
 <span data-ttu-id="fd9cf-316">下面的代码示例演示 `DynamicDictionary` 类，该类派生自 <xref:System.Dynamic.DynamicObject> 类。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-316">The following code example demonstrates the `DynamicDictionary` class, which is derived from the <xref:System.Dynamic.DynamicObject> class.</span></span> <span data-ttu-id="fd9cf-317">`DynamicDictionary`类包含 `Dictionary<string, object>` Visual Basic) 中 (类型的对象 `Dictionary(Of String, Object)` ，用于存储键/值对，并重写 <xref:System.Dynamic.DynamicObject.TrySetMember%2A> 和 <xref:System.Dynamic.DynamicObject.TryGetMember%2A> 方法以支持新的语法。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-317">The `DynamicDictionary` class contains an object of the `Dictionary<string, object>` type (`Dictionary(Of String, Object)` in Visual Basic) to store the key-value pairs, and overrides the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> and <xref:System.Dynamic.DynamicObject.TryGetMember%2A> methods to support the new syntax.</span></span> <span data-ttu-id="fd9cf-318">它还提供了一个 `Count` 属性，该属性显示字典包含的动态属性的数目。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-318">It also provides a `Count` property, which shows how many dynamic properties the dictionary contains.</span></span>  
  
 [!code-csharp[System.Dynamic.DynamicObject#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.dynamic.dynamicobject/cs/program.cs#1)]
 [!code-vb[System.Dynamic.DynamicObject#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.dynamic.dynamicobject/vb/module1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryInvoke">
      <MemberSignature Language="C#" Value="public virtual bool TryInvoke (System.Dynamic.InvokeBinder binder, object[] args, out object result);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryInvoke(class System.Dynamic.InvokeBinder binder, object[] args, [out] object&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.TryInvoke(System.Dynamic.InvokeBinder,System.Object[],System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryInvoke (binder As InvokeBinder, args As Object(), ByRef result As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TryInvoke(System::Dynamic::InvokeBinder ^ binder, cli::array &lt;System::Object ^&gt; ^ args, [Runtime::InteropServices::Out] System::Object ^ % result);" />
      <MemberSignature Language="F#" Value="abstract member TryInvoke : System.Dynamic.InvokeBinder * obj[] * obj -&gt; bool&#xA;override this.TryInvoke : System.Dynamic.InvokeBinder * obj[] * obj -&gt; bool" Usage="dynamicObject.TryInvoke (binder, args, result)" />
      <MemberSignature Language="C#" Value="public virtual bool TryInvoke (System.Dynamic.InvokeBinder? binder, object[] args, out object result);" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Dynamic.InvokeBinder" />
        <Parameter Name="args" Type="System.Object[]" />
        <Parameter Name="result" Type="System.Object" RefType="out" />
      </Parameters>
      <Docs>
        <param name="binder"><span data-ttu-id="fd9cf-319">提供有关调用操作的信息。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-319">Provides information about the invoke operation.</span></span></param>
        <param name="args"><span data-ttu-id="fd9cf-320">调用操作期间传递给对象的参数。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-320">The arguments that are passed to the object during the invoke operation.</span></span> <span data-ttu-id="fd9cf-321">例如，对于 <c>sampleObject(100)</c> 操作（其中 <c>sampleObject</c> 派生自 <see cref="T:System.Dynamic.DynamicObject" /> 类），<c>args[0]</c> 等于 100。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-321">For example, for the <c>sampleObject(100)</c> operation, where <c>sampleObject</c> is derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, <c>args[0]</c> is equal to 100.</span></span></param>
        <param name="result"><span data-ttu-id="fd9cf-322">对象调用的结果。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-322">The result of the object invocation.</span></span></param>
        <summary><span data-ttu-id="fd9cf-323">为调用对象的操作提供实现。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-323">Provides the implementation for operations that invoke an object.</span></span> <span data-ttu-id="fd9cf-324">从 <see cref="T:System.Dynamic.DynamicObject" /> 类派生的类可以重写此方法，以便为诸如调用对象或委托这样的操作指定动态行为。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-324">Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations such as invoking an object or a delegate.</span></span></summary>
        <returns><span data-ttu-id="fd9cf-325">如果操作成功，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-325"><see langword="true" /> if the operation is successful; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="fd9cf-326">如果此方法返回 <see langword="false" />，则该语言的运行时联编程序将决定行为。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-326">If this method returns <see langword="false" />, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="fd9cf-327">（大多数情况下，将引发语言特定的运行时异常。）</span><span class="sxs-lookup"><span data-stu-id="fd9cf-327">(In most cases, a language-specific run-time exception is thrown.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fd9cf-328">从类派生的类 <xref:System.Dynamic.DynamicObject> 可以重写此方法，以指定如何为动态对象执行调用对象的操作。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-328">Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how operations that invoke an object should be performed for a dynamic object.</span></span> <span data-ttu-id="fd9cf-329">如果未重写此方法，则该语言的运行时联编程序将确定行为。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-329">When the method is not overridden, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="fd9cf-330">（大多数情况下，将引发运行时异常。）</span><span class="sxs-lookup"><span data-stu-id="fd9cf-330">(In most cases, a run-time exception is thrown.)</span></span>  
  
 <span data-ttu-id="fd9cf-331">如果重写此方法，则当你具有类似的操作（ `sampleObject(100)` 其中 `sampleObject` 派生自类）时，将自动调用此方法 <xref:System.Dynamic.DynamicObject> 。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-331">If this method is overridden, it is automatically invoked when you have an operation like `sampleObject(100)`, where `sampleObject` is derived from the <xref:System.Dynamic.DynamicObject> class.</span></span>  
  
 <span data-ttu-id="fd9cf-332">C # 中支持调用对象的操作，但在 Visual Basic 中不支持。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-332">The operation for invoking an object is supported in C# but not in Visual Basic.</span></span> <span data-ttu-id="fd9cf-333">Visual Basic 编译器从不发出代码以使用此方法，并且 Visual Basic 语言不支持类似 `sampleObject(100)` 的语法。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-333">The Visual Basic compiler never emits code to use this method, and the Visual Basic language does not support syntax like `sampleObject(100)`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fd9cf-334">假设您需要一个数据结构来存储数字的文本和数值表示形式。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-334">Assume that you need a data structure to store textual and numeric representations of numbers.</span></span> <span data-ttu-id="fd9cf-335">您希望能够分别为每个属性指定值，还可以在单个语句中初始化所有属性。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-335">You want to be able to specify the value for each property individually and also to be able to initialize all properties in a single statement.</span></span>  
  
 <span data-ttu-id="fd9cf-336">下面的代码示例演示 `DynamicNumber` 类，该类派生自 <xref:System.Dynamic.DynamicObject> 类。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-336">The following code example demonstrates the `DynamicNumber` class, which is derived from the <xref:System.Dynamic.DynamicObject> class.</span></span> <span data-ttu-id="fd9cf-337">`DynamicNumber` 重写 <xref:System.Dynamic.DynamicObject.TryInvoke%2A> 方法以同时启用所有属性的初始化。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-337">`DynamicNumber` overrides the <xref:System.Dynamic.DynamicObject.TryInvoke%2A> method to enable initialization of all properties at one time.</span></span> <span data-ttu-id="fd9cf-338">它还重写 <xref:System.Dynamic.DynamicObject.TrySetMember%2A> 和 <xref:System.Dynamic.DynamicObject.TryGetMember%2A> 方法，以启用对单个对象属性的访问。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-338">It also overrides the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> and <xref:System.Dynamic.DynamicObject.TryGetMember%2A> methods to enable access to individual object properties.</span></span>  
  
 [!code-csharp[System.Dynamic.DynamicObject#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.dynamic.dynamicobject/cs/program.cs#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryInvokeMember">
      <MemberSignature Language="C#" Value="public virtual bool TryInvokeMember (System.Dynamic.InvokeMemberBinder binder, object[] args, out object result);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryInvokeMember(class System.Dynamic.InvokeMemberBinder binder, object[] args, [out] object&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryInvokeMember (binder As InvokeMemberBinder, args As Object(), ByRef result As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TryInvokeMember(System::Dynamic::InvokeMemberBinder ^ binder, cli::array &lt;System::Object ^&gt; ^ args, [Runtime::InteropServices::Out] System::Object ^ % result);" />
      <MemberSignature Language="F#" Value="abstract member TryInvokeMember : System.Dynamic.InvokeMemberBinder * obj[] * obj -&gt; bool&#xA;override this.TryInvokeMember : System.Dynamic.InvokeMemberBinder * obj[] * obj -&gt; bool" Usage="dynamicObject.TryInvokeMember (binder, args, result)" />
      <MemberSignature Language="C#" Value="public virtual bool TryInvokeMember (System.Dynamic.InvokeMemberBinder? binder, object[] args, out object result);" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Dynamic.InvokeMemberBinder" />
        <Parameter Name="args" Type="System.Object[]" />
        <Parameter Name="result" Type="System.Object" RefType="out" />
      </Parameters>
      <Docs>
        <param name="binder"><span data-ttu-id="fd9cf-339">提供有关动态操作的信息。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-339">Provides information about the dynamic operation.</span></span> <span data-ttu-id="fd9cf-340"><c>binder.Name</c> 属性提供针对其执行动态操作的成员的名称。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-340">The <c>binder.Name</c> property provides the name of the member on which the dynamic operation is performed.</span></span> <span data-ttu-id="fd9cf-341">例如，对于 <c>sampleObject.SampleMethod(100)</c>语句（其中 <c>sampleObject</c> 是派生自 <see cref="T:System.Dynamic.DynamicObject" /> 类的类的实例），<c>binder.Name</c> 返回“SampleMethod”。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-341">For example, for the statement <c>sampleObject.SampleMethod(100)</c>, where <c>sampleObject</c> is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, <c>binder.Name</c> returns "SampleMethod".</span></span> <span data-ttu-id="fd9cf-342"><c>binder.IgnoreCase</c> 属性指定成员名称是否区分大小写。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-342">The <c>binder.IgnoreCase</c> property specifies whether the member name is case-sensitive.</span></span></param>
        <param name="args"><span data-ttu-id="fd9cf-343">调用操作期间传递给对象成员的参数。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-343">The arguments that are passed to the object member during the invoke operation.</span></span> <span data-ttu-id="fd9cf-344">例如，对于 <c>sampleObject.SampleMethod(100)</c>语句（其中 <c>sampleObject</c> 派生自 <see cref="T:System.Dynamic.DynamicObject" /> 类），<c>args[0]</c> 等于 100。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-344">For example, for the statement <c>sampleObject.SampleMethod(100)</c>, where <c>sampleObject</c> is derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, <c>args[0]</c> is equal to 100.</span></span></param>
        <param name="result"><span data-ttu-id="fd9cf-345">成员调用的结果。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-345">The result of the member invocation.</span></span></param>
        <summary><span data-ttu-id="fd9cf-346">为调用成员的操作提供实现。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-346">Provides the implementation for operations that invoke a member.</span></span> <span data-ttu-id="fd9cf-347">从 <see cref="T:System.Dynamic.DynamicObject" /> 类派生的类可以重写此方法，以便为诸如调用方法这样的操作指定动态行为。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-347">Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations such as calling a method.</span></span></summary>
        <returns><span data-ttu-id="fd9cf-348">如果操作成功，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-348"><see langword="true" /> if the operation is successful; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="fd9cf-349">如果此方法返回 <see langword="false" />，则该语言的运行时联编程序将决定行为。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-349">If this method returns <see langword="false" />, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="fd9cf-350">（大多数情况下，将引发语言特定的运行时异常。）</span><span class="sxs-lookup"><span data-stu-id="fd9cf-350">(In most cases, a language-specific run-time exception is thrown.)</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fd9cf-351">从类派生的类 <xref:System.Dynamic.DynamicObject> 可以重写此方法，以指定如何为动态对象执行调用对象成员的操作。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-351">Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how operations that invoke an object member should be performed for a dynamic object.</span></span> <span data-ttu-id="fd9cf-352">如果未重写此方法，则该语言的运行时联编程序将确定行为。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-352">When the method is not overridden, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="fd9cf-353">（大多数情况下，将引发语言特定的运行时异常。）</span><span class="sxs-lookup"><span data-stu-id="fd9cf-353">(In most cases, a language-specific run-time exception is thrown.)</span></span>  
  
 <span data-ttu-id="fd9cf-354">如果重写此方法，则在执行类似的操作（ `sampleObject.SampleMethod(100)` 其中 `sampleObject` 派生自类）时，将自动调用此方法 `DynamicObject` 。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-354">If this method is overridden, it is automatically invoked when you perform an operation like `sampleObject.SampleMethod(100)`, where `sampleObject` is derived from the `DynamicObject` class.</span></span>  
  
 <span data-ttu-id="fd9cf-355">你还可以将自己的方法添加到派生自类的类 <xref:System.Dynamic.DynamicObject> 。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-355">You can also add your own methods to classes that are derived from the <xref:System.Dynamic.DynamicObject> class.</span></span> <span data-ttu-id="fd9cf-356">例如，如果重写 <xref:System.Dynamic.DynamicObject.TryInvokeMember%2A> 方法，动态调度系统将首先尝试确定指定方法是否存在于类中。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-356">For example, if you override the <xref:System.Dynamic.DynamicObject.TryInvokeMember%2A> method, the dynamic dispatch system first attempts to determine whether the specified method exists in the class.</span></span> <span data-ttu-id="fd9cf-357">如果未找到方法，则使用该 <xref:System.Dynamic.DynamicObject.TryInvokeMember%2A> 实现。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-357">If it does not find the method, it uses the <xref:System.Dynamic.DynamicObject.TryInvokeMember%2A> implementation.</span></span>  
  
 <span data-ttu-id="fd9cf-358">此方法不支持 `ref` 和 `out` 参数。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-358">This method does not support `ref` and `out` parameters.</span></span> <span data-ttu-id="fd9cf-359">数组中的所有参数 `args` 都通过值传递。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-359">All parameters in the `args` array are passed by value.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fd9cf-360">假设你想要提供用于访问字典中的值的替代语法，以便可以编写，而不是 `sampleDictionary["Text"] = "Sample text"` `sampleDictionary("Text") = "Sample text"` 在 Visual Basic) 中写入 (`sampleDictionary.Text = "Sample text"` 。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-360">Assume that you want to provide alternative syntax for accessing values in a dictionary, so that instead of writing `sampleDictionary["Text"] = "Sample text"` (`sampleDictionary("Text") = "Sample text"` in Visual Basic), you can write `sampleDictionary.Text = "Sample text"`.</span></span> <span data-ttu-id="fd9cf-361">此外，你还希望能够对此字典调用所有标准字典方法。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-361">Also, you want to be able to call all the standard dictionary methods on this dictionary.</span></span>  
  
 <span data-ttu-id="fd9cf-362">下面的代码示例演示 `DynamicDictionary` 类，该类派生自 <xref:System.Dynamic.DynamicObject> 类。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-362">The following code example demonstrates the `DynamicDictionary` class, which is derived from the <xref:System.Dynamic.DynamicObject> class.</span></span> <span data-ttu-id="fd9cf-363">`DynamicDictionary`类包含 `Dictionary<string, object>` Visual Basic) 中 (类型的对象， `Dictionary(Of String, Object)` 以存储键值对。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-363">The `DynamicDictionary` class contains an object of the `Dictionary<string, object>` type (`Dictionary(Of String, Object)` in Visual Basic) to store the key-value pairs.</span></span> <span data-ttu-id="fd9cf-364">它重写 <xref:System.Dynamic.DynamicObject.TryInvokeMember%2A> 方法以支持类的方法 <xref:System.Collections.Generic.Dictionary%602> ，并重写 <xref:System.Dynamic.DynamicObject.TrySetMember%2A> 和 <xref:System.Dynamic.DynamicObject.TryGetMember%2A> 方法来支持新的语法。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-364">It overrides the <xref:System.Dynamic.DynamicObject.TryInvokeMember%2A> method to support methods of the <xref:System.Collections.Generic.Dictionary%602> class and overrides the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> and <xref:System.Dynamic.DynamicObject.TryGetMember%2A> methods to support the new syntax.</span></span> <span data-ttu-id="fd9cf-365">它还提供了一 `Print` 种方法，用于输出所有字典键和值。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-365">It also provides a `Print` method, which prints out all dictionary keys and values.</span></span>  
  
 [!code-csharp[System.Dynamic.DynamicObject#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.dynamic.dynamicobject/cs/program.cs#6)]
 [!code-vb[System.Dynamic.DynamicObject#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.dynamic.dynamicobject/vb/module1.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TrySetIndex">
      <MemberSignature Language="C#" Value="public virtual bool TrySetIndex (System.Dynamic.SetIndexBinder binder, object[] indexes, object value);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TrySetIndex(class System.Dynamic.SetIndexBinder binder, object[] indexes, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.TrySetIndex(System.Dynamic.SetIndexBinder,System.Object[],System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TrySetIndex (binder As SetIndexBinder, indexes As Object(), value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TrySetIndex(System::Dynamic::SetIndexBinder ^ binder, cli::array &lt;System::Object ^&gt; ^ indexes, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member TrySetIndex : System.Dynamic.SetIndexBinder * obj[] * obj -&gt; bool&#xA;override this.TrySetIndex : System.Dynamic.SetIndexBinder * obj[] * obj -&gt; bool" Usage="dynamicObject.TrySetIndex (binder, indexes, value)" />
      <MemberSignature Language="C#" Value="public virtual bool TrySetIndex (System.Dynamic.SetIndexBinder binder, object[] indexes, object? value);" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Dynamic.SetIndexBinder" />
        <Parameter Name="indexes" Type="System.Object[]" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="binder"><span data-ttu-id="fd9cf-366">提供有关该操作的信息。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-366">Provides information about the operation.</span></span></param>
        <param name="indexes"><span data-ttu-id="fd9cf-367">该操作中使用的索引。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-367">The indexes that are used in the operation.</span></span> <span data-ttu-id="fd9cf-368">例如，对于 C# 中的 <c>sampleObject[3] = 10</c>操作（Visual Basic 中为 <c>sampleObject(3) = 10</c>，其中 <c>sampleObject</c> 派生自 <see cref="T:System.Dynamic.DynamicObject" /> 类），<c>indexes[0]</c> 等于 3。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-368">For example, for the <c>sampleObject[3] = 10</c> operation in C# (<c>sampleObject(3) = 10</c> in Visual Basic), where <c>sampleObject</c> is derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, <c>indexes[0]</c> is equal to 3.</span></span></param>
        <param name="value"><span data-ttu-id="fd9cf-369">要为具有指定索引的对象设置的值。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-369">The value to set to the object that has the specified index.</span></span> <span data-ttu-id="fd9cf-370">例如，对于 C# 中的 <c>sampleObject[3] = 10</c> 操作（Visual Basic 中为 <c>sampleObject(3) = 10</c>），其中 <c>sampleObject</c> 派生自 <see cref="T:System.Dynamic.DynamicObject" /> 类，<paramref name="value" /> 等于 10。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-370">For example, for the <c>sampleObject[3] = 10</c> operation in C# (<c>sampleObject(3) = 10</c> in Visual Basic), where <c>sampleObject</c> is derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, <paramref name="value" /> is equal to 10.</span></span></param>
        <summary><span data-ttu-id="fd9cf-371">为按索引设置值的操作提供实现。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-371">Provides the implementation for operations that set a value by index.</span></span> <span data-ttu-id="fd9cf-372">从 <see cref="T:System.Dynamic.DynamicObject" /> 类派生的类可以重写此方法，以便为按指定索引访问对象的操作指定动态行为。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-372">Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations that access objects by a specified index.</span></span></summary>
        <returns><span data-ttu-id="fd9cf-373">如果操作成功，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-373"><see langword="true" /> if the operation is successful; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="fd9cf-374">如果此方法返回 <see langword="false" />，则该语言的运行时联编程序将决定行为。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-374">If this method returns <see langword="false" />, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="fd9cf-375">（大多数情况下，将引发语言特定的运行时异常。）</span><span class="sxs-lookup"><span data-stu-id="fd9cf-375">(In most cases, a language-specific run-time exception is thrown.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fd9cf-376">从类派生的类 <xref:System.Dynamic.DynamicObject> 可以重写此方法，以指定应该如何为动态对象执行通过索引访问对象的操作。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-376">Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how operations that access an object by index should be performed for a dynamic object.</span></span> <span data-ttu-id="fd9cf-377">如果未重写此方法，则该语言的运行时联编程序将确定行为。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-377">When the method is not overridden, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="fd9cf-378">（大多数情况下，将引发语言特定的运行时异常。）</span><span class="sxs-lookup"><span data-stu-id="fd9cf-378">(In most cases, a language-specific run-time exception is thrown.)</span></span>  
  
 <span data-ttu-id="fd9cf-379">如果重写此方法，则当你的操作如 `sampleObject[3] = 10` c # 或 `sampleObject(3) = 10` Visual Basic （其中 `sampleObject` 派生自类）时，将自动调用此方法 <xref:System.Dynamic.DynamicObject> 。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-379">If this method is overridden, it is automatically invoked when you have an operation like `sampleObject[3] = 10` in C# or `sampleObject(3) = 10` in Visual Basic, where `sampleObject` is derived from the <xref:System.Dynamic.DynamicObject> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fd9cf-380">假设你要创建一个对象，该对象可以通过名称（如、等） `Property0` `Property1` 或索引访问属性，以便例如， `sampleObject.Property0` `sampleObject[0]` 在 c # 中或 `sampleObject(0)` 在 Visual Basic 中等效。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-380">Assume that you want to create an object in which properties can be accessed either by names such as `Property0`, `Property1`, and so on, or by index, so that, for example, `sampleObject.Property0` is equivalent to `sampleObject[0]` in C# or `sampleObject(0)` in Visual Basic.</span></span>  
  
 <span data-ttu-id="fd9cf-381">下面的代码示例演示 `SampleDynamicObject` 类，该类派生自 <xref:System.Dynamic.DynamicObject> 类。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-381">The following code example demonstrates the `SampleDynamicObject` class, which is derived from the <xref:System.Dynamic.DynamicObject> class.</span></span> <span data-ttu-id="fd9cf-382">`SampleDynamicObject`类包含 `Dictionary<string, object>` Visual Basic) 中 (类型的对象， `Dictionary(Of String, Object)` 以存储键值对。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-382">The `SampleDynamicObject` class contains an object of the `Dictionary<string, object>` type (`Dictionary(Of String, Object)` in Visual Basic) to store the key-value pairs.</span></span> <span data-ttu-id="fd9cf-383">`SampleDynamicObject` 重写 <xref:System.Dynamic.DynamicObject.TrySetIndex%2A> 和 <xref:System.Dynamic.DynamicObject.TryGetIndex%2A> 方法，以启用按索引进行访问。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-383">`SampleDynamicObject` overrides the <xref:System.Dynamic.DynamicObject.TrySetIndex%2A> and <xref:System.Dynamic.DynamicObject.TryGetIndex%2A> methods to enable access by index.</span></span> <span data-ttu-id="fd9cf-384">它重写 <xref:System.Dynamic.DynamicObject.TrySetMember%2A> 和 <xref:System.Dynamic.DynamicObject.TryGetMember%2A> 方法，以通过属性名称启用访问。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-384">It overrides the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> and <xref:System.Dynamic.DynamicObject.TryGetMember%2A> methods to enable access by property name.</span></span>  
  
 [!code-csharp[System.Dynamic.DynamicObject#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.dynamic.dynamicobject/cs/program.cs#4)]
 [!code-vb[System.Dynamic.DynamicObject#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.dynamic.dynamicobject/vb/module1.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TrySetMember">
      <MemberSignature Language="C#" Value="public virtual bool TrySetMember (System.Dynamic.SetMemberBinder binder, object value);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TrySetMember(class System.Dynamic.SetMemberBinder binder, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TrySetMember (binder As SetMemberBinder, value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TrySetMember(System::Dynamic::SetMemberBinder ^ binder, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member TrySetMember : System.Dynamic.SetMemberBinder * obj -&gt; bool&#xA;override this.TrySetMember : System.Dynamic.SetMemberBinder * obj -&gt; bool" Usage="dynamicObject.TrySetMember (binder, value)" />
      <MemberSignature Language="C#" Value="public virtual bool TrySetMember (System.Dynamic.SetMemberBinder binder, object? value);" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Dynamic.SetMemberBinder" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="binder"><span data-ttu-id="fd9cf-385">提供有关调用了动态操作的对象的信息。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-385">Provides information about the object that called the dynamic operation.</span></span> <span data-ttu-id="fd9cf-386"><c>binder.Name</c> 属性提供将该值分配到的成员的名称。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-386">The <c>binder.Name</c> property provides the name of the member to which the value is being assigned.</span></span> <span data-ttu-id="fd9cf-387">例如，对于 <c>sampleObject.SampleProperty = "Test"</c> 语句（其中 <c>sampleObject</c> 是派生自 <see cref="T:System.Dynamic.DynamicObject" /> 类的类的实例），<c>binder.Name</c> 返回“SampleProperty”。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-387">For example, for the statement <c>sampleObject.SampleProperty = "Test"</c>, where <c>sampleObject</c> is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, <c>binder.Name</c> returns "SampleProperty".</span></span> <span data-ttu-id="fd9cf-388"><c>binder.IgnoreCase</c> 属性指定成员名称是否区分大小写。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-388">The <c>binder.IgnoreCase</c> property specifies whether the member name is case-sensitive.</span></span></param>
        <param name="value"><span data-ttu-id="fd9cf-389">要为成员设置的值。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-389">The value to set to the member.</span></span> <span data-ttu-id="fd9cf-390">例如，对于 <c>sampleObject.SampleProperty = "Test"</c> 语句（其中 <c>sampleObject</c> 是派生自 <see cref="T:System.Dynamic.DynamicObject" /> 类的类的实例），<paramref name="value" /> 为 "Test"。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-390">For example, for <c>sampleObject.SampleProperty = "Test"</c>, where <c>sampleObject</c> is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, the <paramref name="value" /> is "Test".</span></span></param>
        <summary><span data-ttu-id="fd9cf-391">为设置成员值的操作提供实现。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-391">Provides the implementation for operations that set member values.</span></span> <span data-ttu-id="fd9cf-392">从 <see cref="T:System.Dynamic.DynamicObject" /> 类派生的类可以重写此方法，以便为诸如设置属性值这样的操作指定动态行为。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-392">Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations such as setting a value for a property.</span></span></summary>
        <returns><span data-ttu-id="fd9cf-393">如果操作成功，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-393"><see langword="true" /> if the operation is successful; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="fd9cf-394">如果此方法返回 <see langword="false" />，则该语言的运行时联编程序将决定行为。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-394">If this method returns <see langword="false" />, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="fd9cf-395">（大多数情况下，将引发语言特定的运行时异常。）</span><span class="sxs-lookup"><span data-stu-id="fd9cf-395">(In most cases, a language-specific run-time exception is thrown.)</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fd9cf-396">从类派生的类 <xref:System.Dynamic.DynamicObject> 可以重写此方法，以指定如何为动态对象执行将值设置为成员的操作。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-396">Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how operations that set a value to a member should be performed for a dynamic object.</span></span> <span data-ttu-id="fd9cf-397">如果未重写此方法，则该语言的运行时联编程序将确定行为。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-397">When the method is not overridden, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="fd9cf-398">（大多数情况下，将引发语言特定的运行时异常。）</span><span class="sxs-lookup"><span data-stu-id="fd9cf-398">(In most cases, a language-specific run-time exception is thrown.)</span></span>  
  
 <span data-ttu-id="fd9cf-399">当你具有类似的语句时调用此方法 `sampleObject.SampleProperty = "Test"` ，其中 `sampleObject` 是派生自类的类的实例 <xref:System.Dynamic.DynamicObject> 。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-399">This method is called when you have statements like `sampleObject.SampleProperty = "Test"`, where `sampleObject` is an instance of the class that is derived from the <xref:System.Dynamic.DynamicObject> class.</span></span>  
  
 <span data-ttu-id="fd9cf-400">你还可以将自己的成员添加到从类派生的类 `DynamicObject` 。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-400">You can also add your own members to classes derived from the `DynamicObject` class.</span></span> <span data-ttu-id="fd9cf-401">如果你的类定义了属性，并且还重写了 <xref:System.Dynamic.DynamicObject.TrySetMember%2A> 方法，则动态语言运行时 (DLR) 首先使用语言联编程序来查找类中属性的静态定义。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-401">If your class defines properties and also overrides the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> method, the dynamic language runtime (DLR) first uses the language binder to look for a static definition of a property in the class.</span></span> <span data-ttu-id="fd9cf-402">如果没有此类属性，则 DLR 会调用 <xref:System.Dynamic.DynamicObject.TrySetMember%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-402">If there is no such property, the DLR calls the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fd9cf-403">假设你想要提供用于访问字典中的值的替代语法，以便可以编写，而不是 `sampleDictionary["Text"] = "Sample text"` `sampleDictionary("Text") = "Sample text"` 在 Visual Basic) 中写入 (`sampleDictionary.Text = "Sample text"` 。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-403">Assume that you want to provide alternative syntax for accessing values in a dictionary, so that instead of writing `sampleDictionary["Text"] = "Sample text"` (`sampleDictionary("Text") = "Sample text"` in Visual Basic), you can write `sampleDictionary.Text = "Sample text"`.</span></span> <span data-ttu-id="fd9cf-404">此外，此语法必须不区分大小写，因此 `sampleDictionary.Text` 等效于 `sampleDictionary.text` 。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-404">Also, this syntax must be case-insensitive, so that `sampleDictionary.Text` is equivalent to `sampleDictionary.text`.</span></span>  
  
 <span data-ttu-id="fd9cf-405">下面的代码示例演示 `DynamicDictionary` 类，该类派生自 <xref:System.Dynamic.DynamicObject> 类。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-405">The following code example demonstrates the `DynamicDictionary` class, which is derived from the <xref:System.Dynamic.DynamicObject> class.</span></span> <span data-ttu-id="fd9cf-406">`DynamicDictionary`类包含 `Dictionary<string, object>` Visual Basic) 中 (类型的对象 `Dictionary(Of String, Object)` ，用于存储键/值对，并重写 <xref:System.Dynamic.DynamicObject.TrySetMember%2A> 和 <xref:System.Dynamic.DynamicObject.TryGetMember%2A> 方法以支持新的语法。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-406">The `DynamicDictionary` class contains an object of the `Dictionary<string, object>` type (`Dictionary(Of String, Object)` in Visual Basic) to store the key-value pairs, and overrides the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> and <xref:System.Dynamic.DynamicObject.TryGetMember%2A> methods to support the new syntax.</span></span> <span data-ttu-id="fd9cf-407">它还提供了一个 `Count` 属性，该属性显示字典包含的动态属性的数目。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-407">It also provides a `Count` property, which shows how many dynamic properties the dictionary contains.</span></span>  
  
 [!code-csharp[System.Dynamic.DynamicObject#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.dynamic.dynamicobject/cs/program.cs#1)]
 [!code-vb[System.Dynamic.DynamicObject#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.dynamic.dynamicobject/vb/module1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryUnaryOperation">
      <MemberSignature Language="C#" Value="public virtual bool TryUnaryOperation (System.Dynamic.UnaryOperationBinder binder, out object result);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryUnaryOperation(class System.Dynamic.UnaryOperationBinder binder, [out] object&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Dynamic.DynamicObject.TryUnaryOperation(System.Dynamic.UnaryOperationBinder,System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryUnaryOperation (binder As UnaryOperationBinder, ByRef result As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TryUnaryOperation(System::Dynamic::UnaryOperationBinder ^ binder, [Runtime::InteropServices::Out] System::Object ^ % result);" />
      <MemberSignature Language="F#" Value="abstract member TryUnaryOperation : System.Dynamic.UnaryOperationBinder * obj -&gt; bool&#xA;override this.TryUnaryOperation : System.Dynamic.UnaryOperationBinder * obj -&gt; bool" Usage="dynamicObject.TryUnaryOperation (binder, result)" />
      <MemberSignature Language="C#" Value="public virtual bool TryUnaryOperation (System.Dynamic.UnaryOperationBinder binder, out object? result);" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Dynamic.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Dynamic.UnaryOperationBinder" />
        <Parameter Name="result" Type="System.Object" RefType="out" />
      </Parameters>
      <Docs>
        <param name="binder"><span data-ttu-id="fd9cf-408">提供有关一元运算的信息。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-408">Provides information about the unary operation.</span></span> <span data-ttu-id="fd9cf-409"><c>binder.Operation</c> 属性返回 <see cref="T:System.Linq.Expressions.ExpressionType" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-409">The <c>binder.Operation</c> property returns an <see cref="T:System.Linq.Expressions.ExpressionType" /> object.</span></span> <span data-ttu-id="fd9cf-410">例如，对于 <c>negativeNumber = -number</c> 语句（其中 <c>number</c> 派生自 <see langword="DynamicObject" /> 类），<c>binder.Operation</c> 返回“Negate”。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-410">For example, for the <c>negativeNumber = -number</c> statement, where <c>number</c> is derived from the <see langword="DynamicObject" /> class, <c>binder.Operation</c> returns "Negate".</span></span></param>
        <param name="result"><span data-ttu-id="fd9cf-411">一元运算的结果。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-411">The result of the unary operation.</span></span></param>
        <summary><span data-ttu-id="fd9cf-412">提供一元运算的实现。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-412">Provides implementation for unary operations.</span></span> <span data-ttu-id="fd9cf-413">从 <see cref="T:System.Dynamic.DynamicObject" /> 类派生的类可以重写此方法，以便为诸如求反、递增、递减这样的运算指定动态行为。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-413">Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations such as negation, increment, or decrement.</span></span></summary>
        <returns><span data-ttu-id="fd9cf-414">如果操作成功，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-414"><see langword="true" /> if the operation is successful; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="fd9cf-415">如果此方法返回 <see langword="false" />，则该语言的运行时联编程序将决定行为。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-415">If this method returns <see langword="false" />, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="fd9cf-416">（大多数情况下，将引发语言特定的运行时异常。）</span><span class="sxs-lookup"><span data-stu-id="fd9cf-416">(In most cases, a language-specific run-time exception is thrown.)</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fd9cf-417">从类派生的类 <xref:System.Dynamic.DynamicObject> 可以重写此方法，以指定应如何对动态对象执行一元运算。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-417">Classes derived from the <xref:System.Dynamic.DynamicObject> class can override this method to specify how unary operations should be performed for a dynamic object.</span></span> <span data-ttu-id="fd9cf-418">如果未重写此方法，则该语言的运行时联编程序将确定行为。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-418">When the method is not overridden, the run-time binder of the language determines the behavior.</span></span> <span data-ttu-id="fd9cf-419">（大多数情况下，将引发语言特定的运行时异常。）</span><span class="sxs-lookup"><span data-stu-id="fd9cf-419">(In most cases, a language-specific run-time exception is thrown.)</span></span>  
  
 <span data-ttu-id="fd9cf-420">当你有一元运算，如求反、递增或递减时，将调用此方法。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-420">This method is called when you have unary operations such as negation, increment, or decrement.</span></span> <span data-ttu-id="fd9cf-421">例如，如果 <xref:System.Dynamic.DynamicObject.TryUnaryOperation%2A> 方法被重写，则会自动为（如）调用此方法， `negativeNumber = -number` 其中 `number` 派生自 <xref:System.Dynamic.DynamicObject> 类。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-421">For example, if the <xref:System.Dynamic.DynamicObject.TryUnaryOperation%2A> method is overridden, this method is automatically invoked for statements like `negativeNumber = -number`, where `number` is derived from the <xref:System.Dynamic.DynamicObject> class.</span></span>  
  
 <span data-ttu-id="fd9cf-422">可以通过使用参数的属性来获取有关一元运算类型的信息 `Operation` `binder` 。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-422">You can get information about the type of the unary operation by using the `Operation` property of the `binder` parameter.</span></span>  
  
 <span data-ttu-id="fd9cf-423">如果动态对象仅在 c # 和 Visual Basic 中使用，则该 `binder.Operation` 属性可以是枚举中的以下值之一 <xref:System.Linq.Expressions.ExpressionType> 。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-423">If your dynamic object is used only in C# and Visual Basic, the `binder.Operation` property can have one of the following values from the <xref:System.Linq.Expressions.ExpressionType> enumeration.</span></span> <span data-ttu-id="fd9cf-424">但是，在其他语言（如 IronPython 或 IronRuby）中，可以具有其他值。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-424">However, in other languages such as IronPython or IronRuby, you can have other values.</span></span>
  
|<span data-ttu-id="fd9cf-425">“值”</span><span class="sxs-lookup"><span data-stu-id="fd9cf-425">Value</span></span>|<span data-ttu-id="fd9cf-426">说明</span><span class="sxs-lookup"><span data-stu-id="fd9cf-426">Description</span></span>|<span data-ttu-id="fd9cf-427">C#</span><span class="sxs-lookup"><span data-stu-id="fd9cf-427">C#</span></span>|<span data-ttu-id="fd9cf-428">Visual Basic</span><span class="sxs-lookup"><span data-stu-id="fd9cf-428">Visual Basic</span></span>|  
|-----------|-----------------|---------|------------------|  
|`Decrement`|<span data-ttu-id="fd9cf-429">一元减量运算。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-429">A unary decrement operation.</span></span>|`a--`|<span data-ttu-id="fd9cf-430">不支持。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-430">Not supported.</span></span>|  
|`Increment`|<span data-ttu-id="fd9cf-431">一元增量运算。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-431">A unary increment operation.</span></span>|`a++`|<span data-ttu-id="fd9cf-432">不支持。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-432">Not supported.</span></span>|  
|`Negate`|<span data-ttu-id="fd9cf-433">算术反运算。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-433">An arithmetic negation.</span></span>|`-a`|`-a`|  
|`Not`|<span data-ttu-id="fd9cf-434">逻辑求反。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-434">A logical negation.</span></span>|`!a`|`Not a`|  
|`OnesComplement`|<span data-ttu-id="fd9cf-435">二进制反码。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-435">A ones complement.</span></span>|`~a`|<span data-ttu-id="fd9cf-436">不支持。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-436">Not supported.</span></span>|  
|`IsFalse`|<span data-ttu-id="fd9cf-437">错误条件值。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-437">A false condition value.</span></span>|`a && b`|<span data-ttu-id="fd9cf-438">不支持。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-438">Not supported.</span></span>|  
|`IsTrue`|<span data-ttu-id="fd9cf-439">True 条件值。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-439">A true condition value.</span></span>|`a &#124;&#124; b`|<span data-ttu-id="fd9cf-440">不支持。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-440">Not supported.</span></span>|  
|`UnaryPlus`|<span data-ttu-id="fd9cf-441">一元加。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-441">A unary plus.</span></span>|`+a`|`+a`|  
  
> [!NOTE]
>  <span data-ttu-id="fd9cf-442">若要 `OrElse` 为 `a || b` `AndAlso` `a && b` c # 中的动态对象实现 () 和 () 操作，你可能希望同时实现 <xref:System.Dynamic.DynamicObject.TryUnaryOperation%2A> 方法和 <xref:System.Dynamic.DynamicObject.TryBinaryOperation%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-442">To implement `OrElse` (`a || b`) and `AndAlso` (`a && b`) operations for dynamic objects in C#, you may want to implement both the <xref:System.Dynamic.DynamicObject.TryUnaryOperation%2A> method and the <xref:System.Dynamic.DynamicObject.TryBinaryOperation%2A> method.</span></span>  
>   
>  <span data-ttu-id="fd9cf-443">`OrElse`操作包含一元 `IsTrue` 运算和二元 `Or` 运算。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-443">The `OrElse` operation consists of the unary `IsTrue` operation and the binary `Or` operation.</span></span> <span data-ttu-id="fd9cf-444">`Or`仅当操作的结果为时，才执行该操作 `IsTrue` `false` 。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-444">The `Or` operation is performed only if the result of the `IsTrue` operation is `false`.</span></span>  
>   
>  <span data-ttu-id="fd9cf-445">`AndAlso`操作包含一元 `IsFalse` 运算和二元 `And` 运算。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-445">The `AndAlso` operation consists of the unary `IsFalse` operation and the binary `And` operation.</span></span> <span data-ttu-id="fd9cf-446">`And`仅当操作的结果为时，才执行该操作 `IsFalse` `false` 。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-446">The `And` operation is performed only if the result of the `IsFalse` operation is `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fd9cf-447">假设您需要一个数据结构来存储数字的文本和数值表示形式，并且您想要为此类数据定义数学求反运算。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-447">Assume that you need a data structure to store textual and numeric representations of numbers, and you want to define a mathematical negation operation for such data.</span></span>  
  
 <span data-ttu-id="fd9cf-448">下面的代码示例演示 `DynamicNumber` 类，该类派生自 <xref:System.Dynamic.DynamicObject> 类。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-448">The following code example demonstrates the `DynamicNumber` class, which is derived from the <xref:System.Dynamic.DynamicObject> class.</span></span> <span data-ttu-id="fd9cf-449">`DynamicNumber` 重写 <xref:System.Dynamic.DynamicObject.TryUnaryOperation%2A> 方法以启用数学求反运算。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-449">`DynamicNumber` overrides the <xref:System.Dynamic.DynamicObject.TryUnaryOperation%2A> method to enable the mathematical negation operation.</span></span> <span data-ttu-id="fd9cf-450">还将重写 <xref:System.Dynamic.DynamicObject.TrySetMember%2A> 和 <xref:System.Dynamic.DynamicObject.TryGetMember%2A> 方法，以启用对元素的访问。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-450">Is also overrides the <xref:System.Dynamic.DynamicObject.TrySetMember%2A> and <xref:System.Dynamic.DynamicObject.TryGetMember%2A> methods to enable access to the elements.</span></span>  
  
 <span data-ttu-id="fd9cf-451">在此示例中，仅支持数学求反运算。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-451">In this example, only the mathematical negation operation is supported.</span></span> <span data-ttu-id="fd9cf-452">如果尝试编写类似的语句，则 `negativeNumber = +number` 会发生运行时异常。</span><span class="sxs-lookup"><span data-stu-id="fd9cf-452">If you try to write a statement like `negativeNumber = +number`, a run-time exception occurs.</span></span>  
  
 [!code-csharp[System.Dynamic.DynamicObject#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.dynamic.dynamicobject/cs/program.cs#7)]
 [!code-vb[System.Dynamic.DynamicObject#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.dynamic.dynamicobject/vb/module1.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
