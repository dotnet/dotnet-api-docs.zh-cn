<Type Name="GenerateScriptTypeAttribute" FullName="System.Web.Script.Services.GenerateScriptTypeAttribute">
  <Metadata><Meta Name="ms.openlocfilehash" Value="e1435be8e6a0e3fc61fe0f44a08c1172cca780f2" /><Meta Name="ms.sourcegitcommit" Value="11d168140aa8fade0768c2a9dde3e3bcacfdfb7d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="05/27/2020" /><Meta Name="ms.locfileid" Value="83963086" /></Metadata><TypeSignature Language="C#" Value="public sealed class GenerateScriptTypeAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit GenerateScriptTypeAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.Web.Script.Services.GenerateScriptTypeAttribute" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class GenerateScriptTypeAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class GenerateScriptTypeAttribute sealed : Attribute" />
  <TypeSignature Language="F#" Value="type GenerateScriptTypeAttribute = class&#xA;    inherit Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.Web.Extensions</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Interface | System.AttributeTargets.Method, AllowMultiple=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>指定服务器类型必须在代理对象中生成。 无法继承此类。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在支持 AJAX 的 ASP.NET 网站中，ASP.NET 可以为 Web 服务类的方法自动生成代理对象。 它针对所有标记为 <xref:System.Web.Script.Services.ScriptServiceAttribute>的 Web 方法的输入参数和返回值执行此功能。  
  
 在其他情况下，如果为服务器类型生成了代理对象，则必须手动应用 <xref:System.Web.Script.Services.GenerateScriptTypeAttribute>。 可以将 <xref:System.Web.Script.Services.GenerateScriptTypeAttribute> 应用于 Web 服务本身，也可以应用于标记为 <xref:System.Web.Services.WebMethodAttribute>的任何 Web 服务方法或 `static` 页面方法。  
  
 在某些情况下，即使类型对应于 Web 服务方法的输入参数或返回值，也不会自动生成代理。 在这种情况下，必须使用 <xref:System.Web.Script.Services.GenerateScriptTypeAttribute> 特性为类型生成代理对象。 对于具有多个参数的泛型类型和数组（如 `Dictionary<string,<T>>`），会发生这种情况。  
  
 <xref:System.Web.Script.Services.GenerateScriptTypeAttribute> 的一个或多个实例可以应用于 Web 服务类或方法。 然后，ASP.NET 将针对每个 <xref:System.Web.Script.Services.GenerateScriptTypeAttribute>声明引用的每个顶级类型生成一个 ECMAScript （JavaScript）代理类。  
  
> [!NOTE]
>  如果要生成嵌套类型的代理对象，则必须手动将 <xref:System.Web.Script.Services.GenerateScriptTypeAttribute> 应用于每个嵌套类型。 ASP.NET 仅为顶级类型生成代理，不会自动以递归方式将该属性应用于嵌套类型。  
  
 有关如何使用特性的详细信息，请参阅[特性](/dotnet/standard/attributes/)。  
  
   
  
## Examples  
 下面的示例演示如何将 <xref:System.Web.Script.Services.GenerateScriptTypeAttribute> 应用于 Web 服务类和 Web 方法。 因此，`ColorObject` 类型及其嵌套类型 `FavoriteColors` 包含在代理对象中。  
  
  
  
 ]]></format>
    </remarks>
    <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/bb515101(v=vs.100)">在 ASP.NET AJAX 中使用 Web 服务</related>
    <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/bb398995(v=vs.100)">从 ASP.NET AJAX 中的客户端脚本调用 Web 服务</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public GenerateScriptTypeAttribute (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Script.Services.GenerateScriptTypeAttribute.#ctor(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (type As Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; GenerateScriptTypeAttribute(Type ^ type);" />
      <MemberSignature Language="F#" Value="new System.Web.Script.Services.GenerateScriptTypeAttribute : Type -&gt; System.Web.Script.Services.GenerateScriptTypeAttribute" Usage="new System.Web.Script.Services.GenerateScriptTypeAttribute type" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">要包括在代理类中的类型。</param>
        <summary>为指定类型初始化 <see cref="T:System.Web.Script.Services.GenerateScriptTypeAttribute" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Script.Services.GenerateScriptTypeAttribute.ScriptTypeId%2A> 属性是此构造函数的可选命名参数。  
  
   
  
## Examples  
 下面的示例演示如何使用 <xref:System.Web.Script.Services.GenerateScriptTypeAttribute> 为指定的类型生成使用特定的元数据标记类型标识符的代理对象。  
  
  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="type" /> 为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="ScriptTypeId">
      <MemberSignature Language="C#" Value="public string ScriptTypeId { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ScriptTypeId" />
      <MemberSignature Language="DocId" Value="P:System.Web.Script.Services.GenerateScriptTypeAttribute.ScriptTypeId" />
      <MemberSignature Language="VB.NET" Value="Public Property ScriptTypeId As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ScriptTypeId { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ScriptTypeId : string with get, set" Usage="System.Web.Script.Services.GenerateScriptTypeAttribute.ScriptTypeId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置类型元数据标记的类型标识符。</summary>
        <value>序列化的 JavaScript 对象符号 (JSON) 字符串中的类型元数据标记的类型标识符。 默认值为此类型的程序集限定名称。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 这是一个可选属性。 如果指定，<xref:System.Web.Script.Services.GenerateScriptTypeAttribute.ScriptTypeId%2A> 的值将用于序列化的 JSON 字符串上的类型元数据标记（"__type"）而不是该类型的程序集限定名称。 在反序列化过程中，与 <xref:System.Web.Script.Serialization.JavaScriptSerializer> 对象关联的类型解析程序将使用类型元数据标记值映射回适当的托管类型。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Type">
      <MemberSignature Language="C#" Value="public Type Type { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type Type" />
      <MemberSignature Language="DocId" Value="P:System.Web.Script.Services.GenerateScriptTypeAttribute.Type" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Type As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ Type { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Type : Type" Usage="System.Web.Script.Services.GenerateScriptTypeAttribute.Type" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取包含在代理对象中的类型。</summary>
        <value>包含在所生成的代理对象中的类型对象。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
