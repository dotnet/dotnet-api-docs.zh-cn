<Type Name="WorkflowInstance" FullName="System.Workflow.Runtime.WorkflowInstance">
  <Metadata><Meta Name="ms.openlocfilehash" Value="37bab51ac0dfe091a4e88510c2f55d99b576f6f4" /><Meta Name="ms.sourcegitcommit" Value="b53d35b4a410c949742abd4c6a989d1af5357bca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="86692833" /></Metadata><TypeSignature Language="C#" Value="public sealed class WorkflowInstance" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit WorkflowInstance extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Workflow.Runtime.WorkflowInstance" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class WorkflowInstance" />
  <TypeSignature Language="C++ CLI" Value="public ref class WorkflowInstance sealed" />
  <TypeSignature Language="F#" Value="type WorkflowInstance = class" />
  <AssemblyInfo>
    <AssemblyName>System.Workflow.Runtime</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName Language="C#">[System.Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="b8f0b-101">表示工作流实例。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-101">Represents a workflow instance.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  [!INCLUDE[DeprecatedContent](~/includes/deprecatedcontent-md.md)]  
  
 <span data-ttu-id="b8f0b-102"><xref:System.Workflow.Runtime.WorkflowInstance> 类可以公开用于控制执行工作流实例的方法和属性，它实质上是工作流运行时引擎所使用的实际工作流的代理。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-102">The <xref:System.Workflow.Runtime.WorkflowInstance> class exposes methods and properties that can be used to control the execution of a workflow instance; it is essentially a proxy to the actual workflow instance used by the workflow runtime engine.</span></span> <span data-ttu-id="b8f0b-103">通过调用包含在 <xref:System.Workflow.Runtime.WorkflowInstance> 类中的适当方法，宿主或服务可以指示工作流运行时引擎在工作流实例上执行操作。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-103">A host or a service can instruct the workflow runtime engine to perform actions on a workflow instance by calling the appropriate methods that are contained in the <xref:System.Workflow.Runtime.WorkflowInstance> class.</span></span>  <span data-ttu-id="b8f0b-104">如果请求的操作无效，例如，如果宿主在一个已完成的工作流实例上调用 <xref:System.Workflow.Runtime.WorkflowInstance.Load%2A>，则工作流运行时引擎将引发相应的异常。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-104">If the requested action is not valid, for example, if the host calls <xref:System.Workflow.Runtime.WorkflowInstance.Load%2A> on a workflow instance that has already completed, the workflow runtime engine will raise an appropriate exception.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b8f0b-105">如果工作流实例由于宿主应用程序上的调用未返回而无法响应，则恢复此实例的唯一方法是重新启动运行时。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-105">If a workflow instance becomes unresponsive because a call on the host application does not return, the only way to recover the instance is to restart the runtime.</span></span> <span data-ttu-id="b8f0b-106">但是，如果实例被强行卸载、中止或挂起，则仍可以通过调用 <xref:System.Workflow.Runtime.WorkflowInstance.Resume%2A?displayProperty=nameWithType> 方法继续此实例。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-106">However, if the instance has been forcibly unloaded, aborted, or suspended, it can be continued by calling the <xref:System.Workflow.Runtime.WorkflowInstance.Resume%2A?displayProperty=nameWithType> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b8f0b-107">下面的代码示例演示如何在工作流主机中创建和启动 <xref:System.Workflow.Runtime.WorkflowInstance>。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-107">The following code example demonstrates how you can create and start a <xref:System.Workflow.Runtime.WorkflowInstance> in a workflow host.</span></span> <span data-ttu-id="b8f0b-108">此代码先创建 <xref:System.Workflow.Runtime.WorkflowRuntime> 的实例，将服务添加至运行时，然后演示一个创建 <xref:System.Workflow.Runtime.WorkflowInstance> 对象的推荐方式。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-108">The code creates an instance of the <xref:System.Workflow.Runtime.WorkflowRuntime>, adds services to the runtime, and then demonstrates the recommended way to create a <xref:System.Workflow.Runtime.WorkflowInstance> object.</span></span> <span data-ttu-id="b8f0b-109">该代码通过调用 <xref:System.Workflow.Runtime.WorkflowInstance> 方法并向该方法传递事先创建的类型来初始化 <xref:System.Workflow.Runtime.WorkflowRuntime.CreateWorkflow%2A>。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-109">The code initializes <xref:System.Workflow.Runtime.WorkflowInstance> by calling the <xref:System.Workflow.Runtime.WorkflowRuntime.CreateWorkflow%2A> method and passing the previously created type to it.</span></span> <span data-ttu-id="b8f0b-110">使用 <xref:System.Workflow.Runtime.WorkflowInstance> 方法调用启动 <xref:System.Workflow.Runtime.WorkflowInstance.Start%2A>。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-110">The <xref:System.Workflow.Runtime.WorkflowInstance> is started with the <xref:System.Workflow.Runtime.WorkflowInstance.Start%2A> method call.</span></span>  
  
 <span data-ttu-id="b8f0b-111">此代码示例摘自 Program.cs 文件中的“取消工作流”SDK 示例。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-111">This code example is part of the Canceling a Workflow SDK sample from the Program.cs file.</span></span> <span data-ttu-id="b8f0b-112">有关详细信息，请参阅 [取消工作流](https://msdn.microsoft.com/library/d5077f56-a78b-48e7-825c-f6c77c8e54fb)。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-112">For more information, see [Canceling a Workflow](https://msdn.microsoft.com/library/d5077f56-a78b-48e7-825c-f6c77c8e54fb).</span></span>  
  
 [!code-csharp[WF_Samples#260](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#260)]
 [!code-vb[WF_Samples#260](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#260)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="b8f0b-113">此类型是线程安全的。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-113">This type is thread safe.</span></span></threadsafe>
    <related type="Article" href="https://docs.microsoft.com/previous-versions/dotnet/netframework-3.5/ms742169(v=vs.90)"><span data-ttu-id="b8f0b-114">取消工作流</span><span class="sxs-lookup"><span data-stu-id="b8f0b-114">Canceling a Workflow</span></span></related>
  </Docs>
  <Members>
    <Member MemberName="Abort">
      <MemberSignature Language="C#" Value="public void Abort ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Abort() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowInstance.Abort" />
      <MemberSignature Language="VB.NET" Value="Public Sub Abort ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Abort();" />
      <MemberSignature Language="F#" Value="member this.Abort : unit -&gt; unit" Usage="workflowInstance.Abort " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b8f0b-115">中止工作流实例。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-115">Aborts the workflow instance.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b8f0b-116">工作流实例以同步方式中止，即方法在中止工作流实例之后返回。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-116">The workflow instance is aborted in a synchronous manner; that is, the method returns after the workflow instance has been aborted.</span></span> <span data-ttu-id="b8f0b-117">工作流运行时引擎将使内存中的工作流实例无效，并清除 <xref:System.Workflow.Runtime.WorkflowEnvironment.WorkBatch%2A>。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-117">The workflow runtime engine invalidates the workflow instance in memory and clears the <xref:System.Workflow.Runtime.WorkflowEnvironment.WorkBatch%2A>.</span></span> <span data-ttu-id="b8f0b-118">如果工作流实例使用了持久性服务，则在最后一个持久点之后执行的所有工作都将被丢弃。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-118">If a persistence service was used by your workflow instance, all work performed since the last persistence point is thrown away.</span></span> <span data-ttu-id="b8f0b-119">在中止工作流实例之后，工作流运行时引擎将引发 <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowAborted> 事件。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-119">After it aborts the workflow instance, the workflow runtime engine raises the <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowAborted> event.</span></span> <span data-ttu-id="b8f0b-120">您可以调用 <xref:System.Workflow.Runtime.WorkflowRuntime.GetWorkflow%2A> 以便重新加载工作流实例，并从其最后的持久点启动。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-120">You can call <xref:System.Workflow.Runtime.WorkflowRuntime.GetWorkflow%2A> to reload the workflow instance and start from its last persistence point.</span></span>  
  
 <span data-ttu-id="b8f0b-121">`Abort` 与 <xref:System.Workflow.Runtime.WorkflowInstance.Terminate%2A> 的不同之处在于，`Abort` 只是清除内存中的工作流实例，并可以从最后一个持久点重新启动；而 Terminate 则是清除内存中的工作流实例，并通知持久性服务此实例已从内存中清除。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-121">`Abort` is different from <xref:System.Workflow.Runtime.WorkflowInstance.Terminate%2A> in that while `Abort` simply clears the in-memory workflow instance and can be restarted from the last persistence point, Terminate clears the in-memory workflow instance and informs the persistence service that the instance has been cleared from memory.</span></span> <span data-ttu-id="b8f0b-122">对于 <xref:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService>，这表示终止时该工作流实例的所有状态信息都已从数据库中删除。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-122">For the <xref:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService>, this means that all state information for that workflow instance is deleted from the database upon termination.</span></span> <span data-ttu-id="b8f0b-123">您将无法从先前存储的持久点处重新加载工作流实例。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-123">You will not be able to reload the workflow instance from a previously stored persistence point.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b8f0b-124">下面的示例演示如何在类型为 Workflow1 的工作流实例上调用“Abort”。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-124">The following example demonstrates calling Abort on a workflow instance of type Workflow1.</span></span>  
  
 [!code-csharp[WF_Samples#13](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#13)]
 [!code-vb[WF_Samples#13](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b8f0b-125">工作流运行时引擎未运行。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-125">The workflow runtime engine is not running.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ApplyWorkflowChanges">
      <MemberSignature Language="C#" Value="public void ApplyWorkflowChanges (System.Workflow.ComponentModel.WorkflowChanges workflowChanges);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ApplyWorkflowChanges(class System.Workflow.ComponentModel.WorkflowChanges workflowChanges) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowInstance.ApplyWorkflowChanges(System.Workflow.ComponentModel.WorkflowChanges)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ApplyWorkflowChanges (workflowChanges As WorkflowChanges)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ApplyWorkflowChanges(System::Workflow::ComponentModel::WorkflowChanges ^ workflowChanges);" />
      <MemberSignature Language="F#" Value="member this.ApplyWorkflowChanges : System.Workflow.ComponentModel.WorkflowChanges -&gt; unit" Usage="workflowInstance.ApplyWorkflowChanges workflowChanges" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workflowChanges" Type="System.Workflow.ComponentModel.WorkflowChanges" />
      </Parameters>
      <Docs>
        <param name="workflowChanges"><span data-ttu-id="b8f0b-126">一个 <see cref="T:System.Workflow.ComponentModel.WorkflowChanges" />，为工作流实例指定动态更新。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-126">A <see cref="T:System.Workflow.ComponentModel.WorkflowChanges" /> specifying dynamic updates for the workflow instance.</span></span></param>
        <summary><span data-ttu-id="b8f0b-127">将更改应用到 <see cref="T:System.Workflow.ComponentModel.WorkflowChanges" /> 对象所指定的工作流实例。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-127">Applies changes to the workflow instance specified by the <see cref="T:System.Workflow.ComponentModel.WorkflowChanges" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b8f0b-128">如果工作流实例尚未挂起，则工作流运行时引擎将在应用更改之前暂时挂起实例。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-128">If the workflow instance is not already suspended, the workflow runtime engine temporarily suspends the instance before applying the changes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b8f0b-129">下面的代码示例演示如何对 <xref:System.Workflow.Runtime.WorkflowInstance> 对象调用 ApplyWorkflowChanges。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-129">The following example demonstrates calling ApplyWorkflowChanges to a <xref:System.Workflow.Runtime.WorkflowInstance> object.</span></span>  <span data-ttu-id="b8f0b-130">此代码示例摘自 Mainform.cs 文件中“自定义持久性服务”SDK 示例。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-130">This example is from the Ordering State Machine SDK sample, from the Mainform.cs file.</span></span>  <span data-ttu-id="b8f0b-131">有关详细信息，请参阅 [订购状态机示例](https://msdn.microsoft.com/library/59272cf4-bc98-439c-bcfa-b66999ebce5c)。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-131">For more information, see the [Ordering State Machine Sample](https://msdn.microsoft.com/library/59272cf4-bc98-439c-bcfa-b66999ebce5c).</span></span>  
  
 [!code-csharp[WF_Samples#89](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets1.cs#89)]
 [!code-vb[WF_Samples#89](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets1.vb#89)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b8f0b-132">工作流运行时引擎未运行。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-132">The workflow runtime engine is not running.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="EnqueueItem">
      <MemberSignature Language="C#" Value="public void EnqueueItem (IComparable queueName, object item, System.Workflow.Runtime.IPendingWork pendingWork, object workItem);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnqueueItem(class System.IComparable queueName, object item, class System.Workflow.Runtime.IPendingWork pendingWork, object workItem) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowInstance.EnqueueItem(System.IComparable,System.Object,System.Workflow.Runtime.IPendingWork,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub EnqueueItem (queueName As IComparable, item As Object, pendingWork As IPendingWork, workItem As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnqueueItem(IComparable ^ queueName, System::Object ^ item, System::Workflow::Runtime::IPendingWork ^ pendingWork, System::Object ^ workItem);" />
      <MemberSignature Language="F#" Value="member this.EnqueueItem : IComparable * obj * System.Workflow.Runtime.IPendingWork * obj -&gt; unit" Usage="workflowInstance.EnqueueItem (queueName, item, pendingWork, workItem)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="queueName" Type="System.IComparable" />
        <Parameter Name="item" Type="System.Object" />
        <Parameter Name="pendingWork" Type="System.Workflow.Runtime.IPendingWork" />
        <Parameter Name="workItem" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="queueName"><span data-ttu-id="b8f0b-133"><see cref="T:System.Workflow.Runtime.WorkflowQueue" /> 的名称。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-133">The name of the <see cref="T:System.Workflow.Runtime.WorkflowQueue" />.</span></span></param>
        <param name="item"><span data-ttu-id="b8f0b-134">要排入队列的对象。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-134">The object to enqueue.</span></span></param>
        <param name="pendingWork"><span data-ttu-id="b8f0b-135">允许在传递 <see cref="T:System.Workflow.Runtime.IPendingWork" /> 时通知发送方的 <paramref name="item" />。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-135">An <see cref="T:System.Workflow.Runtime.IPendingWork" /> that allows the sender to be notified when <paramref name="item" /> is delivered.</span></span></param>
        <param name="workItem"><span data-ttu-id="b8f0b-136">要传递给 <see cref="T:System.Workflow.Runtime.IPendingWork" /> 方法的对象。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-136">An object to be passed to the <see cref="T:System.Workflow.Runtime.IPendingWork" /> methods.</span></span></param>
        <summary><span data-ttu-id="b8f0b-137">将消息同步发送到指定工作流队列。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-137">Posts a message to the specified workflow queue synchronously.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b8f0b-138">将 `item` 发送到指定的 <xref:System.Workflow.Runtime.WorkflowQueue>。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-138">Sends the `item` to the specified <xref:System.Workflow.Runtime.WorkflowQueue>.</span></span> <span data-ttu-id="b8f0b-139">若要在传递消息之后获得通知，您可以在您的服务中实现 <xref:System.Workflow.Runtime.IPendingWork>，并将一个 `workItem` 和一个 <xref:System.Workflow.Runtime.IPendingWork> 对象传送至 <xref:System.Workflow.Runtime.WorkflowInstance.EnqueueItem%2A>。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-139">If you want to be notified when the message is delivered, you can implement <xref:System.Workflow.Runtime.IPendingWork> in your service and pass a `workItem` and an <xref:System.Workflow.Runtime.IPendingWork> object to <xref:System.Workflow.Runtime.WorkflowInstance.EnqueueItem%2A>.</span></span> <span data-ttu-id="b8f0b-140">如果不想要此类通知，则可以为 `Nothing` 和 `pendingWork` 传送空引用（在 Visual Basic 中为 `workItem`）。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-140">If you do not want such notification, you can pass a null reference (`Nothing` in Visual Basic) for `pendingWork` and `workItem`.</span></span>  
  
 <span data-ttu-id="b8f0b-141">在将此方法和状态机工作流一起使用时，您可能会收到异常，并收到消息“未启用队列‘{0}’”。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-141">When using this method with a state machine workflow, you might get an exception with the message "Queue '{0}' is not enabled."</span></span> <span data-ttu-id="b8f0b-142">当状态机的当前状态不知道如何处理特定事件时，则会发生此异常。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-142">This happens when the current state of the state machine does not know how to handle a specific event.</span></span> <span data-ttu-id="b8f0b-143">例如，当前状态以外的其他状态包含 <xref:System.Workflow.Activities.EventDrivenActivity>，而后者包含由队列“{0}”表示的 <xref:System.Workflow.Activities.HandleExternalEventActivity> 时。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-143">For example, when some state other than the current state contains the <xref:System.Workflow.Activities.EventDrivenActivity> that contains the <xref:System.Workflow.Activities.HandleExternalEventActivity> that is represented by the queue '{0}'.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b8f0b-144">不保证工作流实例按消息发送的顺序接收消息。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-144">Messages are not guaranteed to be received by the workflow instance in the order that they were sent.</span></span> <span data-ttu-id="b8f0b-145">例如，如果在现有队列（队列 A）中接收消息会导致工作流创建另一个队列（队列 B），该队列随后会侦听在发送第一条消息之后发送的另一条消息，那么，有可能第二条消息会先到达，但由于尚未创建其队列而无法接收。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-145">For example, if receiving a message in an existing queue (Queue A) causes a workflow to create another queue (Queue B), which then listens for another message sent after the first message, it is possible that the second message will arrive first, and will not be received due to its queue not being created yet.</span></span> <span data-ttu-id="b8f0b-146">为了避免此问题，在发送第二条消息之前，必须先验证第二个队列是否存在（使用 <xref:System.Workflow.Runtime.WorkflowInstance.GetWorkflowQueueData%2A>）。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-146">To prevent this issue, the second message should not be sent until the presence of the second queue is verified (using <xref:System.Workflow.Runtime.WorkflowInstance.GetWorkflowQueueData%2A>.)</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b8f0b-147">下面的代码示例演示如何使用 <xref:System.Workflow.Runtime.WorkflowInstance.EnqueueItem%2A>。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-147">The following code example demonstrates how to use <xref:System.Workflow.Runtime.WorkflowInstance.EnqueueItem%2A>.</span></span> <span data-ttu-id="b8f0b-148">当 <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowIdled> 事件发生时，调用本示例中定义的 `OnWorkflowIdled` 方法。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-148">When the <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowIdled> event occurs, the `OnWorkflowIdled` method defined in this example is called.</span></span> <span data-ttu-id="b8f0b-149">该方法使用 <xref:System.Workflow.Runtime.WorkflowEventArgs.WorkflowInstance%2A> 属性来确定哪个工作流处于空闲状态，然后通过调用 <xref:System.Workflow.Runtime.WorkflowInstance.GetWorkflowQueueData%2A> 方法来获取该工作流实例的排队项的集合。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-149">It determines which workflow is idled using the <xref:System.Workflow.Runtime.WorkflowEventArgs.WorkflowInstance%2A> property and then gets a collection of queued items for the workflow instance by calling the <xref:System.Workflow.Runtime.WorkflowInstance.GetWorkflowQueueData%2A> method.</span></span> <span data-ttu-id="b8f0b-150">该代码会循环访问该集合以确定哪个活动正在等待使工作流处于空闲状态的事件。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-150">The code iterates over the collection to determine which activity is waiting for the event that idled the workflow.</span></span> <span data-ttu-id="b8f0b-151">然后，该代码将使用 <xref:System.Workflow.Runtime.WorkflowInstance.EnqueueItem%2A> 方法以及事件队列项的名称向工作流队列发出一个异常。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-151">It then sends an exception to the workflow queue using the <xref:System.Workflow.Runtime.WorkflowInstance.EnqueueItem%2A> method along with the name of the event queue item.</span></span>  
  
 <span data-ttu-id="b8f0b-152">此代码示例摘自 Program.cs 文件中的“取消工作流”SDK 示例。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-152">This code example is part of the Canceling a Workflow SDK sample from the Program.cs file.</span></span> <span data-ttu-id="b8f0b-153">有关详细信息，请参阅 [取消工作流](https://msdn.microsoft.com/library/d5077f56-a78b-48e7-825c-f6c77c8e54fb)。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-153">For more information, see [Canceling a Workflow](https://msdn.microsoft.com/library/d5077f56-a78b-48e7-825c-f6c77c8e54fb).</span></span>  
  
 [!code-csharp[WF_Samples#261](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#261)]
 [!code-vb[WF_Samples#261](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#261)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b8f0b-154"><paramref name="queueName" /> 为空引用（在 Visual Basic 中为 <see langword="Nothing" />）。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-154"><paramref name="queueName" /> is a null reference (<see langword="Nothing" /> in Visual Basic).</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b8f0b-155">工作流运行时引擎未运行。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-155">The workflow runtime engine is not running.</span></span>  
  
<span data-ttu-id="b8f0b-156">- 或 -</span><span class="sxs-lookup"><span data-stu-id="b8f0b-156">-or-</span></span> 
<span data-ttu-id="b8f0b-157"><see cref="T:System.Workflow.Runtime.WorkflowQueue" /> 指定的 <paramref name="queueName" /> 不存在。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-157">The <see cref="T:System.Workflow.Runtime.WorkflowQueue" /> specified by <paramref name="queueName" /> does not exist.</span></span>  
  
<span data-ttu-id="b8f0b-158">- 或 -</span><span class="sxs-lookup"><span data-stu-id="b8f0b-158">-or-</span></span> 
<span data-ttu-id="b8f0b-159">由 <see cref="T:System.Workflow.Runtime.WorkflowQueue" /> 指定的 <paramref name="queueName" /> 未启用。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-159">The <see cref="T:System.Workflow.Runtime.WorkflowQueue" /> specified by <paramref name="queueName" /> is not enabled.</span></span></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/dotnet/netframework-3.5/ms742169(v=vs.90)"><span data-ttu-id="b8f0b-160">取消工作流</span><span class="sxs-lookup"><span data-stu-id="b8f0b-160">Canceling a Workflow</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="EnqueueItemOnIdle">
      <MemberSignature Language="C#" Value="public void EnqueueItemOnIdle (IComparable queueName, object item, System.Workflow.Runtime.IPendingWork pendingWork, object workItem);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnqueueItemOnIdle(class System.IComparable queueName, object item, class System.Workflow.Runtime.IPendingWork pendingWork, object workItem) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowInstance.EnqueueItemOnIdle(System.IComparable,System.Object,System.Workflow.Runtime.IPendingWork,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub EnqueueItemOnIdle (queueName As IComparable, item As Object, pendingWork As IPendingWork, workItem As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnqueueItemOnIdle(IComparable ^ queueName, System::Object ^ item, System::Workflow::Runtime::IPendingWork ^ pendingWork, System::Object ^ workItem);" />
      <MemberSignature Language="F#" Value="member this.EnqueueItemOnIdle : IComparable * obj * System.Workflow.Runtime.IPendingWork * obj -&gt; unit" Usage="workflowInstance.EnqueueItemOnIdle (queueName, item, pendingWork, workItem)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="queueName" Type="System.IComparable" />
        <Parameter Name="item" Type="System.Object" />
        <Parameter Name="pendingWork" Type="System.Workflow.Runtime.IPendingWork" />
        <Parameter Name="workItem" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="queueName"><span data-ttu-id="b8f0b-161"><see cref="T:System.Workflow.Runtime.WorkflowQueue" /> 的名称。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-161">The name of the <see cref="T:System.Workflow.Runtime.WorkflowQueue" />.</span></span></param>
        <param name="item"><span data-ttu-id="b8f0b-162">要排入队列的对象。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-162">The object to enqueue.</span></span></param>
        <param name="pendingWork"><span data-ttu-id="b8f0b-163">允许在传递 <see cref="T:System.Workflow.Runtime.IPendingWork" /> 时通知发送方的 <paramref name="item" />。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-163">An <see cref="T:System.Workflow.Runtime.IPendingWork" /> that allows the sender to be notified when <paramref name="item" /> is delivered.</span></span></param>
        <param name="workItem"><span data-ttu-id="b8f0b-164">要传递给 <see cref="T:System.Workflow.Runtime.IPendingWork" /> 方法的对象。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-164">An object to be passed to the <see cref="T:System.Workflow.Runtime.IPendingWork" /> methods.</span></span></param>
        <summary><span data-ttu-id="b8f0b-165">当工作流处于空闲状态时，将消息发送到指定的工作流队列。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-165">Posts a message to the specified workflow queue when the workflow is idle.</span></span> <span data-ttu-id="b8f0b-166">在确认工作流计划程序处于空闲状态（即没有执行任何有效操作）之后，<see cref="M:System.Workflow.Runtime.WorkflowInstance.EnqueueItemOnIdle(System.IComparable,System.Object,System.Workflow.Runtime.IPendingWork,System.Object)" /> 将一直等待，直至工作流达到空闲点并编排队列。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-166"><see cref="M:System.Workflow.Runtime.WorkflowInstance.EnqueueItemOnIdle(System.IComparable,System.Object,System.Workflow.Runtime.IPendingWork,System.Object)" /> waits until the workflow reaches an idle point and enqueues after verifying that the workflow scheduler is idle (that is, no active operation is being executed).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b8f0b-167">等待工作流实例变为空闲状态，然后将 `item` 发送到指定的 <xref:System.Workflow.Runtime.WorkflowQueue>。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-167">Waits for the workflow instance to become idle and then sends the `item` to the specified <xref:System.Workflow.Runtime.WorkflowQueue>.</span></span> <span data-ttu-id="b8f0b-168">如果在工作流实例处于挂起状态时调用 <xref:System.Workflow.Runtime.WorkflowInstance.EnqueueItemOnIdle%2A>，工作流运行时引擎将引发 <xref:System.InvalidOperationException>。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-168">If you call <xref:System.Workflow.Runtime.WorkflowInstance.EnqueueItemOnIdle%2A> while the workflow instance is suspended, the workflow runtime engine will throw an <xref:System.InvalidOperationException>.</span></span> <span data-ttu-id="b8f0b-169">若要在传递消息之后获得通知，您可以在您的服务中实现 <xref:System.Workflow.Runtime.IPendingWork>，并将一个 `workItem` 和一个 <xref:System.Workflow.Runtime.IPendingWork> 对象传送至 <xref:System.Workflow.Runtime.WorkflowInstance.EnqueueItem%2A>。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-169">If you want to be notified when the message is delivered, you can implement <xref:System.Workflow.Runtime.IPendingWork> in your service and pass a `workItem` and an <xref:System.Workflow.Runtime.IPendingWork> object to <xref:System.Workflow.Runtime.WorkflowInstance.EnqueueItem%2A>.</span></span> <span data-ttu-id="b8f0b-170">如果不想要此类通知，则可以为 `Nothing` 和 `pendingWork` 传送空引用（在 Visual Basic 中为 `workItem`）。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-170">If you do not want such notification, you can pass a null reference (`Nothing` in Visual Basic) for `pendingWork` and `workItem`.</span></span>  
  
 <span data-ttu-id="b8f0b-171">在将此方法和状态机工作流一起使用时，您可能会收到异常，并收到消息“未启用队列‘{0}’”。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-171">When you are using this method with a state machine workflow, you might get an exception that contains the message "Queue '{0}' is not enabled."</span></span> <span data-ttu-id="b8f0b-172">当状态机的当前状态不知道如何处理特定事件时，则会发生此异常。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-172">This occurs when the current state of the state machine does not know how to handle a specific event.</span></span> <span data-ttu-id="b8f0b-173">例如，当前状态以外的其他状态包含 <xref:System.Workflow.Activities.EventDrivenActivity>，而后者包含由队列“{0}”表示的 <xref:System.Workflow.Activities.HandleExternalEventActivity> 时。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-173">For example, when some state other than the current state contains the <xref:System.Workflow.Activities.EventDrivenActivity> that contains the <xref:System.Workflow.Activities.HandleExternalEventActivity> that is represented by the queue '{0}'.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b8f0b-174">下面的示例演示如何使用 `EnqueueItemOnIdle` 方法将信息发送到工作流实例。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-174">The following example demonstrates sending information to a workflow instance using the `EnqueueItemOnIdle` method.</span></span> <span data-ttu-id="b8f0b-175">首先，创建并启动 WorkflowInstance 对象；接着，创建一个实现 <xref:System.Workflow.Runtime.IPendingWork> 接口的对象。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-175">First, a WorkflowInstance object is created and started; next, an object that implements the <xref:System.Workflow.Runtime.IPendingWork> interface is created.</span></span> <span data-ttu-id="b8f0b-176">`EnqueueItemOnIdle` 然后，将调用，传入队列名称的字符串值、排队项以及要传递给 pendingWork 对象的方法的工作项。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-176">`EnqueueItemOnIdle` is then called, passing in string values for the queue name, the enqueued item, and the work item to be passed to the methods of the pendingWork object.</span></span>  
  
 [!code-csharp[WF_Samples#12](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#12)]
 [!code-vb[WF_Samples#12](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#12)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b8f0b-177"><paramref name="queueName" /> 为空引用（在 Visual Basic 中为 <see langword="Nothing" />）。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-177"><paramref name="queueName" /> is a null reference (<see langword="Nothing" /> in Visual Basic).</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b8f0b-178">工作流运行时引擎未运行。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-178">The workflow runtime engine is not running.</span></span>  
  
<span data-ttu-id="b8f0b-179">- 或 -</span><span class="sxs-lookup"><span data-stu-id="b8f0b-179">-or-</span></span> 
<span data-ttu-id="b8f0b-180">工作流实例处于挂起状态。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-180">The workflow instance is suspended.</span></span>  
  
<span data-ttu-id="b8f0b-181">- 或 -</span><span class="sxs-lookup"><span data-stu-id="b8f0b-181">-or-</span></span> 
<span data-ttu-id="b8f0b-182"><see cref="T:System.Workflow.Runtime.WorkflowQueue" /> 指定的 <paramref name="queueName" /> 不存在。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-182">The <see cref="T:System.Workflow.Runtime.WorkflowQueue" /> specified by <paramref name="queueName" /> does not exist.</span></span>  
  
<span data-ttu-id="b8f0b-183">- 或 -</span><span class="sxs-lookup"><span data-stu-id="b8f0b-183">-or-</span></span> 
<span data-ttu-id="b8f0b-184">由 <see cref="T:System.Workflow.Runtime.WorkflowQueue" /> 指定的 <paramref name="queueName" /> 未启用。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-184">The <see cref="T:System.Workflow.Runtime.WorkflowQueue" /> specified by <paramref name="queueName" /> is not enabled.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowInstance.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="workflowInstance.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="b8f0b-185">要比较的对象。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-185">The object to compare.</span></span></param>
        <summary><span data-ttu-id="b8f0b-186">返回一个值，该值指示指定对象是否等于 <see cref="T:System.Workflow.Runtime.WorkflowInstance" />。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-186">Returns a value that indicates whether the specified object is equal to the <see cref="T:System.Workflow.Runtime.WorkflowInstance" />.</span></span></summary>
        <returns><span data-ttu-id="b8f0b-187">如果指定对象等于此 <see langword="true" />，则为 <see cref="T:System.Workflow.Runtime.WorkflowInstance" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-187"><see langword="true" /> if the specified object is equal to this <see cref="T:System.Workflow.Runtime.WorkflowInstance" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b8f0b-188">此对象必须是 <xref:System.Workflow.Runtime.WorkflowInstance> 类的一个实例，并具有与此 <xref:System.Workflow.Runtime.WorkflowInstance.InstanceId%2A> 相同的 <xref:System.Workflow.Runtime.WorkflowInstance>。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-188">The object must be an instance of the <xref:System.Workflow.Runtime.WorkflowInstance> class and have the same <xref:System.Workflow.Runtime.WorkflowInstance.InstanceId%2A> as this <xref:System.Workflow.Runtime.WorkflowInstance>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowInstance.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="workflowInstance.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b8f0b-189">返回此工作流实例的哈希代码。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-189">Returns the hash code for this workflow instance.</span></span></summary>
        <returns><span data-ttu-id="b8f0b-190">此 <see cref="T:System.Workflow.Runtime.WorkflowInstance" /> 的哈希代码。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-190">The hash code for this <see cref="T:System.Workflow.Runtime.WorkflowInstance" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b8f0b-191"><xref:System.Workflow.Runtime.WorkflowInstance.GetHashCode%2A> 返回的哈希代码基于 <xref:System.Workflow.Runtime.WorkflowInstance.InstanceId%2A> 的值。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-191"><xref:System.Workflow.Runtime.WorkflowInstance.GetHashCode%2A> returns a hash code based on the value of <xref:System.Workflow.Runtime.WorkflowInstance.InstanceId%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetWorkflowDefinition">
      <MemberSignature Language="C#" Value="public System.Workflow.ComponentModel.Activity GetWorkflowDefinition ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Workflow.ComponentModel.Activity GetWorkflowDefinition() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowInstance.GetWorkflowDefinition" />
      <MemberSignature Language="VB.NET" Value="Public Function GetWorkflowDefinition () As Activity" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Workflow::ComponentModel::Activity ^ GetWorkflowDefinition();" />
      <MemberSignature Language="F#" Value="member this.GetWorkflowDefinition : unit -&gt; System.Workflow.ComponentModel.Activity" Usage="workflowInstance.GetWorkflowDefinition " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.ComponentModel.Activity</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b8f0b-192">检索此工作流实例的根活动。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-192">Retrieves the root activity for this workflow instance.</span></span></summary>
        <returns><span data-ttu-id="b8f0b-193">一个 <see cref="T:System.Workflow.ComponentModel.Activity" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-193">An <see cref="T:System.Workflow.ComponentModel.Activity" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b8f0b-194">您可以使用根活动来定位工作流的活动层次结构。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-194">You can use the root activity to navigate the activity hierarchy of the workflow.</span></span>  
  
 <span data-ttu-id="b8f0b-195">此方法不是线程安全的，因此宿主应将其调用与此方法同步。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-195">This method is not thread safe, so the host should synchronize its calls to this method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b8f0b-196">下面的示例演示如何从工作流实例中检索工作流定义。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-196">The following example demonstrates retrieving the workflow definition from a workflow instance.</span></span>  <span data-ttu-id="b8f0b-197">此代码示例摘自 Mainform.cs 文件中“自定义持久性服务”SDK 示例。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-197">This example is from the Ordering State Machine SDK sample, from the Mainform.cs file.</span></span>  <span data-ttu-id="b8f0b-198">有关详细信息，请参阅 [订购状态机示例](https://msdn.microsoft.com/library/59272cf4-bc98-439c-bcfa-b66999ebce5c)。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-198">For more information, see the [Ordering State Machine Sample](https://msdn.microsoft.com/library/59272cf4-bc98-439c-bcfa-b66999ebce5c).</span></span>  
  
 [!code-csharp[WF_Samples#86](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets1.cs#86)]
 [!code-vb[WF_Samples#86](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets1.vb#86)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetWorkflowNextTimerExpiration">
      <MemberSignature Language="C#" Value="public DateTime GetWorkflowNextTimerExpiration ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime GetWorkflowNextTimerExpiration() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowInstance.GetWorkflowNextTimerExpiration" />
      <MemberSignature Language="VB.NET" Value="Public Function GetWorkflowNextTimerExpiration () As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime GetWorkflowNextTimerExpiration();" />
      <MemberSignature Language="F#" Value="member this.GetWorkflowNextTimerExpiration : unit -&gt; DateTime" Usage="workflowInstance.GetWorkflowNextTimerExpiration " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b8f0b-199">返回下一个时间点，已计划在此时间点向此 <see cref="T:System.Workflow.Runtime.WorkflowInstance" /> 传递计时器消息。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-199">Returns the next point in time that this <see cref="T:System.Workflow.Runtime.WorkflowInstance" /> is scheduled to be delivered a timer message.</span></span></summary>
        <returns><span data-ttu-id="b8f0b-200">DateTime 值表示下一个 <see cref="P:System.Workflow.Runtime.TimerEventSubscription.ExpiresAt" /> 时间，将在此时间向此 <see cref="T:System.Workflow.Runtime.WorkflowInstance" /> 传递计时器消息。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-200">A DateTime value that represents the next <see cref="P:System.Workflow.Runtime.TimerEventSubscription.ExpiresAt" /> time this <see cref="T:System.Workflow.Runtime.WorkflowInstance" /> will be delivered a timer message.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="b8f0b-201">下面的示例演示如何使用 <xref:System.Workflow.Runtime.WorkflowInstance.GetWorkflowNextTimerExpiration%2A> 方法来确定是否将其他工作流计时器消息编入队列。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-201">The following example demonstrates using the <xref:System.Workflow.Runtime.WorkflowInstance.GetWorkflowNextTimerExpiration%2A> method to determine if more workflow timer messages are enqueued.</span></span> <span data-ttu-id="b8f0b-202">此示例摘自 Program.cs 文件中的 WorkflowThreading SDK 示例。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-202">This example is from the WorkflowThreading SDK sample, from the Program.cs file.</span></span> <span data-ttu-id="b8f0b-203">有关详细信息，请参阅 [工作流线程示例](https://msdn.microsoft.com/library/5b650be7-09fa-47db-a2f6-523dc8ea5ee9)。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-203">For more information, see [Workflow Threading Sample](https://msdn.microsoft.com/library/5b650be7-09fa-47db-a2f6-523dc8ea5ee9).</span></span>  
  
 [!code-csharp[WF_Samples#284](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#284)]
 [!code-vb[WF_Samples#284](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#284)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Workflow.Runtime.TimerEventSubscription" />
      </Docs>
    </Member>
    <Member MemberName="GetWorkflowQueueData">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Workflow.Runtime.WorkflowQueueInfo&gt; GetWorkflowQueueData ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Workflow.Runtime.WorkflowQueueInfo&gt; GetWorkflowQueueData() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowInstance.GetWorkflowQueueData" />
      <MemberSignature Language="VB.NET" Value="Public Function GetWorkflowQueueData () As ReadOnlyCollection(Of WorkflowQueueInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Workflow::Runtime::WorkflowQueueInfo ^&gt; ^ GetWorkflowQueueData();" />
      <MemberSignature Language="F#" Value="member this.GetWorkflowQueueData : unit -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Workflow.Runtime.WorkflowQueueInfo&gt;" Usage="workflowInstance.GetWorkflowQueueData " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Workflow.Runtime.WorkflowQueueInfo&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b8f0b-204">获取 <see cref="T:System.Workflow.Runtime.WorkflowQueueInfo" /> 对象的集合，该集合包含与此工作流实例关联的工作流队列的挂起项和订阅活动。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-204">Gets a collection of <see cref="T:System.Workflow.Runtime.WorkflowQueueInfo" /> objects that contains the pending items and subscribed activities for the workflow queues associated with this workflow instance.</span></span></summary>
        <returns><span data-ttu-id="b8f0b-205">一个由 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 对象构成的 <see cref="T:System.Workflow.Runtime.WorkflowQueueInfo" />。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-205">A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> of <see cref="T:System.Workflow.Runtime.WorkflowQueueInfo" /> objects.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b8f0b-206"><xref:System.Workflow.Runtime.WorkflowInstance.GetWorkflowQueueData%2A> 将返回 <xref:System.Workflow.Runtime.WorkflowQueueInfo> 对象的集合，每个集合都包含与此工作流实例关联的其中一个工作流队列状态的有关信息。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-206"><xref:System.Workflow.Runtime.WorkflowInstance.GetWorkflowQueueData%2A> returns a collection of <xref:System.Workflow.Runtime.WorkflowQueueInfo> objects, each of which contains information about the state of one of the workflow queues associated with this workflow instance.</span></span> <span data-ttu-id="b8f0b-207"><xref:System.Workflow.Runtime.WorkflowQueueInfo.Items%2A?displayProperty=nameWithType> 包含 <xref:System.Workflow.Runtime.WorkflowQueue> 的挂起项，<xref:System.Workflow.Runtime.WorkflowQueueInfo.SubscribedActivityNames%2A?displayProperty=nameWithType> 包含一个活动列表，需要订阅这些活动以便在 <xref:System.Workflow.Runtime.WorkflowQueue> 上发送项。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-207"><xref:System.Workflow.Runtime.WorkflowQueueInfo.Items%2A?displayProperty=nameWithType> contains the pending items for a <xref:System.Workflow.Runtime.WorkflowQueue> and <xref:System.Workflow.Runtime.WorkflowQueueInfo.SubscribedActivityNames%2A?displayProperty=nameWithType> contains a list of the activities that are subscribed for item delivery on a <xref:System.Workflow.Runtime.WorkflowQueue>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b8f0b-208">下面的代码示例演示如何使用 <xref:System.Workflow.Runtime.WorkflowInstance.GetWorkflowQueueData%2A> 方法获取有关与 <xref:System.Workflow.Runtime.WorkflowInstance> 对象关联的所有工作流队列状态的信息。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-208">The following code example demonstrates how you can use the <xref:System.Workflow.Runtime.WorkflowInstance.GetWorkflowQueueData%2A> method to obtain information about the state of all workflow queues associated with a <xref:System.Workflow.Runtime.WorkflowInstance> object.</span></span> <span data-ttu-id="b8f0b-209">当 <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowIdled> 事件发生时，调用本示例中定义的 `OnWorkflowIdled` 方法。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-209">When the <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowIdled> event occurs, the `OnWorkflowIdled` method defined in this example is called.</span></span> <span data-ttu-id="b8f0b-210">该方法使用 <xref:System.Workflow.Runtime.WorkflowEventArgs.WorkflowInstance%2A> 属性来确定哪个工作流处于空闲状态，然后通过调用 <xref:System.Workflow.Runtime.WorkflowInstance.GetWorkflowQueueData%2A> 方法来获取该工作流实例的排队项的集合。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-210">It determines which workflow is idled using the <xref:System.Workflow.Runtime.WorkflowEventArgs.WorkflowInstance%2A> property and then gets a collection of queued items for the workflow instance by calling the <xref:System.Workflow.Runtime.WorkflowInstance.GetWorkflowQueueData%2A> method.</span></span> <span data-ttu-id="b8f0b-211">该代码会循环访问该集合以确定哪个活动正在等待使工作流处于空闲状态的事件。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-211">The code iterates over the collection to determine which activity is waiting for the event that idled the workflow.</span></span> <span data-ttu-id="b8f0b-212">然后，该代码将使用 <xref:System.Workflow.Runtime.WorkflowInstance.EnqueueItem%2A> 方法以及事件队列项的名称向工作流队列发出一个异常。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-212">It then sends an exception to the workflow queue using the <xref:System.Workflow.Runtime.WorkflowInstance.EnqueueItem%2A> method along with the name of the event queue item.</span></span>  
  
 <span data-ttu-id="b8f0b-213">此代码示例摘自 Program.cs 文件中的“取消工作流”SDK 示例。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-213">This code example is part of the Canceling a Workflow SDK sample from the Program.cs file.</span></span> <span data-ttu-id="b8f0b-214">有关详细信息，请参阅 [取消工作流](https://msdn.microsoft.com/library/d5077f56-a78b-48e7-825c-f6c77c8e54fb)。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-214">For more information, see [Canceling a Workflow](https://msdn.microsoft.com/library/d5077f56-a78b-48e7-825c-f6c77c8e54fb).</span></span>  
  
 [!code-csharp[WF_Samples#261](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#261)]
 [!code-vb[WF_Samples#261](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#261)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b8f0b-215">工作流运行时引擎未运行。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-215">The workflow runtime engine is not running.</span></span></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/dotnet/netframework-3.5/ms742169(v=vs.90)"><span data-ttu-id="b8f0b-216">取消工作流</span><span class="sxs-lookup"><span data-stu-id="b8f0b-216">Canceling a Workflow</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="InstanceId">
      <MemberSignature Language="C#" Value="public Guid InstanceId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Guid InstanceId" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.Runtime.WorkflowInstance.InstanceId" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InstanceId As Guid" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Guid InstanceId { Guid get(); };" />
      <MemberSignature Language="F#" Value="member this.InstanceId : Guid" Usage="System.Workflow.Runtime.WorkflowInstance.InstanceId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Guid</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b8f0b-217">获取工作流实例的唯一标识符。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-217">Gets the unique identifier for the workflow instance.</span></span></summary>
        <value><span data-ttu-id="b8f0b-218">工作流实例的 <see cref="T:System.Guid" />。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-218">The <see cref="T:System.Guid" /> of the workflow instance.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b8f0b-219">您可以使用 <xref:System.Workflow.Runtime.WorkflowInstance.InstanceId%2A> 来引用工作流实例。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-219">You can use <xref:System.Workflow.Runtime.WorkflowInstance.InstanceId%2A> to reference the workflow instance.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b8f0b-220">下面的代码示例演示如何使用 <xref:System.Workflow.Runtime.WorkflowInstance.InstanceId%2A> 属性获取有关 <xref:System.Workflow.Runtime.WorkflowInstance> 对象的信息。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-220">The following code example demonstrates how you can use the <xref:System.Workflow.Runtime.WorkflowInstance.InstanceId%2A> property to obtain information about a <xref:System.Workflow.Runtime.WorkflowInstance> object.</span></span> <span data-ttu-id="b8f0b-221">第一个代码段创建名为 <xref:System.Workflow.Runtime.WorkflowInstance> 的 `instanceId` 变量。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-221">The first code snippet creates a <xref:System.Workflow.Runtime.WorkflowInstance> variable named `instanceId`.</span></span>  
  
 [!code-csharp[WF_Samples#210](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets19.cs#210)]
 [!code-vb[WF_Samples#210](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets19.vb#210)]  
  
 <span data-ttu-id="b8f0b-222">当调用 <xref:System.Workflow.Runtime.WorkflowInstance.InstanceId%2A> 方法时，第二个代码段使用 `OrderEventArgs` 属性作为 `CallBackForApproval` 构造函数调用中的第一个对象。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-222">The second snippet uses the <xref:System.Workflow.Runtime.WorkflowInstance.InstanceId%2A> property as the first object in an `OrderEventArgs` constructor call when the `CallBackForApproval` method is called.</span></span>  
  
 <span data-ttu-id="b8f0b-223">此代码示例摘自 OrderServiceImple.cs 文件中“自定义持久性服务”SDK 示例。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-223">This code example is part of the Listen SDK Sample from the OrderServiceImple.cs file.</span></span> <span data-ttu-id="b8f0b-224">有关详细信息，请参阅 [侦听示例](https://docs.microsoft.com/previous-versions/dotnet/netframework-3.5/ms741698(v=vs.90))。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-224">For more information, see [Listen Sample](https://docs.microsoft.com/previous-versions/dotnet/netframework-3.5/ms741698(v=vs.90)).</span></span>  
  
 [!code-csharp[WF_Samples#211](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets19.cs#211)]
 [!code-vb[WF_Samples#211](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets19.vb#211)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/dotnet/netframework-3.5/ms741698(v=vs.90)"><span data-ttu-id="b8f0b-225">“侦听”示例</span><span class="sxs-lookup"><span data-stu-id="b8f0b-225">Listen Sample</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowInstance.Load" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load();" />
      <MemberSignature Language="F#" Value="member this.Load : unit -&gt; unit" Usage="workflowInstance.Load " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b8f0b-226">加载先前卸载的工作流实例。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-226">Loads a previously unloaded workflow instance.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b8f0b-227"><xref:System.Workflow.Runtime.WorkflowInstance.Load%2A> 是同步的，如果工作流实例可以加载，则 <xref:System.Workflow.Runtime.WorkflowInstance.Load%2A> 将在工作流实例被加载到内存并由工作流运行时引擎计划后返回。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-227"><xref:System.Workflow.Runtime.WorkflowInstance.Load%2A> is synchronous; if the workflow instance can be loaded, <xref:System.Workflow.Runtime.WorkflowInstance.Load%2A> will return after the workflow instance has been loaded into memory and scheduled by the workflow runtime engine.</span></span> <span data-ttu-id="b8f0b-228">运行时将在持久性服务恢复内存中的工作流之后与工作流运行时引擎计划实例之前引发 <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowLoaded> 事件。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-228">The runtime raises the <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowLoaded> event after the persistence service has restored the workflow instance in memory, but before the workflow runtime engine schedules the instance.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b8f0b-229">下面的示例演示如何加载先前卸载的 <xref:System.Workflow.Runtime.WorkflowInstance> 对象。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-229">The following example demonstrates how to load a previously unloaded <xref:System.Workflow.Runtime.WorkflowInstance> object.</span></span>  
  
 [!code-csharp[WF_Samples#10](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#10)]
 [!code-vb[WF_Samples#10](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b8f0b-230">工作流运行时引擎未运行。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-230">The workflow runtime engine is not running.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ReloadTrackingProfiles">
      <MemberSignature Language="C#" Value="public void ReloadTrackingProfiles ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReloadTrackingProfiles() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowInstance.ReloadTrackingProfiles" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReloadTrackingProfiles ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReloadTrackingProfiles();" />
      <MemberSignature Language="F#" Value="member this.ReloadTrackingProfiles : unit -&gt; unit" Usage="workflowInstance.ReloadTrackingProfiles " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b8f0b-231">重新加载此工作流实例的跟踪配置文件。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-231">Reload the tracking profiles for this workflow instance.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b8f0b-232">运行时跟踪基础结构将为与其跟踪通道关联的工作流实例重新加载各个 <xref:System.Workflow.Runtime.Tracking.TrackingProfile>。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-232">The runtime tracking infrastructure will reload each <xref:System.Workflow.Runtime.Tracking.TrackingProfile> for this workflow instance associated with its tracking channels.</span></span> <span data-ttu-id="b8f0b-233">如果它还没有处于挂起状态，则运行时跟踪基础结构将暂时挂起工作流，同时重新加载跟踪配置文件。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-233">If it is not already in a suspended state, the workflow is temporarily suspended by the runtime tracking infrastructure while the tracking profiles are reloaded.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b8f0b-234">工作流运行时引擎未运行。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-234">The workflow runtime engine is not running.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Resume">
      <MemberSignature Language="C#" Value="public void Resume ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Resume() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowInstance.Resume" />
      <MemberSignature Language="VB.NET" Value="Public Sub Resume ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Resume();" />
      <MemberSignature Language="F#" Value="member this.Resume : unit -&gt; unit" Usage="workflowInstance.Resume " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b8f0b-235">继续执行先前挂起的工作流实例。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-235">Resumes execution of a previously suspended workflow instance.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b8f0b-236">宿主可以调用 <xref:System.Workflow.Runtime.WorkflowInstance.Resume%2A> 以继续执行先前挂起的工作流实例。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-236">The host can call <xref:System.Workflow.Runtime.WorkflowInstance.Resume%2A> to resume execution of a workflow instance that has been previously suspended.</span></span> <span data-ttu-id="b8f0b-237">如果工作流实例不处于挂起状态，则不执行任何操作。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-237">If the workflow instance is not in the suspended state, no action is taken.</span></span> <span data-ttu-id="b8f0b-238">运行时恰好在继续执行工作流实例之前引发 <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowResumed> 事件。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-238">The runtime raises the <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowResumed> event just before execution of the workflow instance is resumed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b8f0b-239">下面的示例演示如何在先前挂起的工作流实例上调用“Resume”。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-239">The following example demonstrates calling Resume on a previously suspended workflow instance.</span></span>  <span data-ttu-id="b8f0b-240">此示例摘自“挂起和终止”SDK 示例。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-240">This example is from the Suspend and Terminate SDK sample.</span></span>  <span data-ttu-id="b8f0b-241">有关详细信息，请参阅 [挂起和终止示例](https://msdn.microsoft.com/library/f4dffa58-d01e-44fb-b5a1-3b283d2c4517)。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-241">For more information, see [Suspend and Terminate Sample](https://msdn.microsoft.com/library/f4dffa58-d01e-44fb-b5a1-3b283d2c4517).</span></span>  
  
 [!code-csharp[WF_Samples#172](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets11.cs#172)]
 [!code-vb[WF_Samples#172](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets11.vb#172)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b8f0b-242">工作流运行时引擎未运行。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-242">The workflow runtime engine is not running.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public void Start ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Start() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowInstance.Start" />
      <MemberSignature Language="VB.NET" Value="Public Sub Start ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Start();" />
      <MemberSignature Language="F#" Value="member this.Start : unit -&gt; unit" Usage="workflowInstance.Start " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b8f0b-243">开始执行工作流实例。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-243">Starts the execution of the workflow instance.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b8f0b-244"><xref:System.Workflow.Runtime.WorkflowInstance.Start%2A> 将对此工作流实例的根活动调用 <xref:System.Workflow.ComponentModel.ActivityExecutionContext.ExecuteActivity%2A>。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-244"><xref:System.Workflow.Runtime.WorkflowInstance.Start%2A> calls <xref:System.Workflow.ComponentModel.ActivityExecutionContext.ExecuteActivity%2A> on the root activity of this workflow instance.</span></span> <span data-ttu-id="b8f0b-245">如果 <xref:System.Workflow.Runtime.WorkflowInstance.Start%2A> 遇到异常，则它将通过调用 <xref:System.Workflow.Runtime.WorkflowInstance.Terminate%2A>，并使用异常的 <xref:System.Exception.Message%2A> 属性（作为终止原因传递）来终止此工作流实例。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-245">If <xref:System.Workflow.Runtime.WorkflowInstance.Start%2A> encounters an exception, it terminates the workflow instance by calling <xref:System.Workflow.Runtime.WorkflowInstance.Terminate%2A> with the <xref:System.Exception.Message%2A> property of the exception passed as the reason for the termination.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b8f0b-246">下面的代码示例演示如何使用 <xref:System.Workflow.Runtime.WorkflowInstance.Start%2A> 方法在工作流主机中启动 <xref:System.Workflow.Runtime.WorkflowInstance>。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-246">The following code example demonstrates how you can use the <xref:System.Workflow.Runtime.WorkflowInstance.Start%2A> method to start a <xref:System.Workflow.Runtime.WorkflowInstance> in a workflow host.</span></span> <span data-ttu-id="b8f0b-247">此代码先创建 <xref:System.Workflow.Runtime.WorkflowRuntime> 的实例，将服务添加至运行时，然后演示一个创建 <xref:System.Workflow.Runtime.WorkflowInstance> 对象的推荐方式。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-247">The code creates an instance of the <xref:System.Workflow.Runtime.WorkflowRuntime>, adds services to the runtime, and then demonstrates the recommended way to create a <xref:System.Workflow.Runtime.WorkflowInstance> object.</span></span> <span data-ttu-id="b8f0b-248">它将创建一个 <xref:System.Type> 对象，然后将其强制转换为一个与其宿主关联的工作流对象。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-248">It creates a <xref:System.Type> object and casts it to one of the workflow objects with which the host is associated.</span></span> <span data-ttu-id="b8f0b-249">代码接着通过调用 <xref:System.Workflow.Runtime.WorkflowInstance> 方法并传递给其先前创建的类型来初始化 <xref:System.Workflow.Runtime.WorkflowRuntime.CreateWorkflow%2A>。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-249">The code next initializes <xref:System.Workflow.Runtime.WorkflowInstance> by calling the <xref:System.Workflow.Runtime.WorkflowRuntime.CreateWorkflow%2A> method and passing the previously created type to it.</span></span> <span data-ttu-id="b8f0b-250">使用 <xref:System.Workflow.Runtime.WorkflowInstance> 方法调用启动 <xref:System.Workflow.Runtime.WorkflowInstance.Start%2A>。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-250">The <xref:System.Workflow.Runtime.WorkflowInstance> is started with the <xref:System.Workflow.Runtime.WorkflowInstance.Start%2A> method call.</span></span>  
  
 <span data-ttu-id="b8f0b-251">此代码示例摘自 Program.cs 文件中的“取消工作流”SDK 示例。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-251">This code example is part of the Canceling a Workflow SDK sample from the Program.cs file.</span></span> <span data-ttu-id="b8f0b-252">有关详细信息，请参阅 [取消工作流](https://msdn.microsoft.com/library/d5077f56-a78b-48e7-825c-f6c77c8e54fb)。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-252">For more information, see [Canceling a Workflow](https://msdn.microsoft.com/library/d5077f56-a78b-48e7-825c-f6c77c8e54fb).</span></span>  
  
 [!code-csharp[WF_Samples#260](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#260)]
 [!code-vb[WF_Samples#260](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#260)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b8f0b-253">工作流运行时引擎未运行。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-253">The workflow runtime engine is not running.</span></span>  
  
 <span data-ttu-id="b8f0b-254">- 或 -</span><span class="sxs-lookup"><span data-stu-id="b8f0b-254">-or-</span></span>  
  
 <span data-ttu-id="b8f0b-255">工作流实例已经启动。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-255">The workflow instance has already been started.</span></span></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/dotnet/netframework-3.5/ms742169(v=vs.90)"><span data-ttu-id="b8f0b-256">取消工作流</span><span class="sxs-lookup"><span data-stu-id="b8f0b-256">Canceling a Workflow</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Suspend">
      <MemberSignature Language="C#" Value="public void Suspend (string error);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Suspend(string error) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowInstance.Suspend(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Suspend (error As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Suspend(System::String ^ error);" />
      <MemberSignature Language="F#" Value="member this.Suspend : string -&gt; unit" Usage="workflowInstance.Suspend error" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="error" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="error"><span data-ttu-id="b8f0b-257">挂起工作流实例原因的说明。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-257">A description of the reason for suspending the workflow instance.</span></span></param>
        <summary><span data-ttu-id="b8f0b-258">挂起工作流实例。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-258">Suspends the workflow instance.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b8f0b-259">此工作流实例是以同步方式挂起的。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-259">The workflow instance is suspended in a synchronous manner.</span></span> <span data-ttu-id="b8f0b-260">如果工作流实例已经挂起，则不执行任何操作；否则，工作流运行时引擎将挂起工作流实例，引发 <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowSuspended> 事件，并在 `reason` 中传递 <xref:System.Workflow.Runtime.WorkflowSuspendedEventArgs>。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-260">If the workflow instance is already suspended, no action is taken; otherwise, the workflow runtime engine suspends the workflow instance, raises the <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowSuspended> event and passes `reason` in a <xref:System.Workflow.Runtime.WorkflowSuspendedEventArgs>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b8f0b-261"><xref:System.Workflow.Runtime.WorkflowInstance.Suspend%2A> 不会卸载此工作流实例。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-261"><xref:System.Workflow.Runtime.WorkflowInstance.Suspend%2A> does not unload the workflow instance.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b8f0b-262">下面的代码示例演示如何在 <xref:System.Workflow.Runtime.WorkflowInstance> 对象上调用“Suspend”。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-262">The following code example demonstrates calling Suspend on a <xref:System.Workflow.Runtime.WorkflowInstance> object.</span></span>  
  
 [!code-csharp[WF_Samples#9](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#9)]
 [!code-vb[WF_Samples#9](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b8f0b-263">工作流运行时引擎未运行。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-263">The workflow runtime engine is not running.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Terminate">
      <MemberSignature Language="C#" Value="public void Terminate (string error);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Terminate(string error) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowInstance.Terminate(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Terminate (error As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Terminate(System::String ^ error);" />
      <MemberSignature Language="F#" Value="member this.Terminate : string -&gt; unit" Usage="workflowInstance.Terminate error" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="error" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="error"><span data-ttu-id="b8f0b-264">终止工作流实例原因的说明。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-264">A description of the reason for terminating the workflow instance.</span></span></param>
        <summary><span data-ttu-id="b8f0b-265">以同步方式终止工作流实例。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-265">Terminates the workflow instance in a synchronous manner.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b8f0b-266">此工作流实例是以同步方式终止的。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-266">The workflow instance is terminated in a synchronous manner.</span></span> <span data-ttu-id="b8f0b-267">宿主调用 <xref:System.Workflow.Runtime.WorkflowInstance.Terminate%2A> 终止工作流实例。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-267">The host calls <xref:System.Workflow.Runtime.WorkflowInstance.Terminate%2A> to terminate the workflow instance.</span></span> <span data-ttu-id="b8f0b-268">工作流运行时引擎将清除内存中的工作流实例，并通知持久性服务实例已经从内存中清除。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-268">The workflow runtime engine clears the in-memory workflow instance and informs the persistence service that the instance has been cleared from memory.</span></span> <span data-ttu-id="b8f0b-269">对于 <xref:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService>，这表示终止时该工作流实例的所有状态信息都已从数据库中删除。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-269">For the <xref:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService>, this means that all state information for that workflow instance is deleted from the database upon termination.</span></span> <span data-ttu-id="b8f0b-270">您将无法从先前存储的持久点处重新加载工作流实例。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-270">You will not be able to reload the workflow instance from a previously stored persistence point.</span></span>  
  
 <span data-ttu-id="b8f0b-271">在清除内存中的工作流实例并通知持久性服务终止之后， 方法将引发  事件，并在 包含的 T:System.Workflow.ComponentModel.WorkflowTerminatedException 的  属性中传递 。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-271">After the in-memory workflow instance is cleared and the persistence service is informed of the termination, the `Terminate` method raises the <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowTerminated> event and passes `reason` in the <xref:System.Exception.Message%2A> property of a <xref:System.Workflow.ComponentModel.WorkflowTerminatedException> contained in the <xref:System.Workflow.Runtime.WorkflowTerminatedEventArgs>.</span></span>  
  
 <span data-ttu-id="b8f0b-272">`Terminate` 与 <xref:System.Workflow.Runtime.WorkflowInstance.Abort%2A> 的不同之处在于，Terminate 将清除内存中的工作流实例，并通知持久性服务已发生终止；而 `Abort` 只是清除内存中的工作流实例，然后您可以从最后一个持久点重新启动该实例。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-272">`Terminate` is different from <xref:System.Workflow.Runtime.WorkflowInstance.Abort%2A> in that while Terminate clears the in-memory workflow instance and informs the persistence service of the termination, `Abort` simply clears the in-memory workflow instance, which can then be restarted from the last persistence point.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b8f0b-273">下面的代码示例演示如何在 <xref:System.Workflow.Runtime.WorkflowInstance> 对象上调用“Terminate”。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-273">The following code example demonstrates calling Terminate on a <xref:System.Workflow.Runtime.WorkflowInstance> object.</span></span>  
  
 [!code-csharp[WF_Samples#8](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#8)]
 [!code-vb[WF_Samples#8](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b8f0b-274">工作流运行时引擎未运行。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-274">The workflow runtime engine is not running.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="TryUnload">
      <MemberSignature Language="C#" Value="public bool TryUnload ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryUnload() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowInstance.TryUnload" />
      <MemberSignature Language="VB.NET" Value="Public Function TryUnload () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryUnload();" />
      <MemberSignature Language="F#" Value="member this.TryUnload : unit -&gt; bool" Usage="workflowInstance.TryUnload " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b8f0b-275">当实例处于挂起或空闲状态时，将工作流实例从内存卸载到持久性存储区。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-275">Unloads the workflow instance from memory to the persistence store when the instance is suspended or idle.</span></span></summary>
        <returns><span data-ttu-id="b8f0b-276">如果已卸载工作流实例，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-276"><see langword="true" /> if the workflow instance was unloaded; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b8f0b-277">如果工作流实例处于“空闲”或“挂起”状态，则 <xref:System.Workflow.Runtime.WorkflowInstance.TryUnload%2A> 将使用持久性服务从内存中移除此工作流实例，并将其保留到数据存储区。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-277">If the workflow instance is idle or suspended, <xref:System.Workflow.Runtime.WorkflowInstance.TryUnload%2A> uses the persistence service to remove the workflow instance from memory and persist it to a data store.</span></span> <span data-ttu-id="b8f0b-278">如果不存在使用 <xref:System.Workflow.Runtime.WorkflowRuntime> 注册的持久性服务，则 <xref:System.Workflow.Runtime.WorkflowInstance.TryUnload%2A> 将引发 <xref:System.InvalidOperationException>。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-278">If there is no persistence service registered with the <xref:System.Workflow.Runtime.WorkflowRuntime>, <xref:System.Workflow.Runtime.WorkflowInstance.TryUnload%2A> throws an <xref:System.InvalidOperationException>.</span></span> <span data-ttu-id="b8f0b-279">如果工作流实例成功保留，则运行时将引发 <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowUnloaded> 事件，并返回 `true`。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-279">If the workflow instance is successfully persisted, the runtime raises the <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowUnloaded> event, and returns `true`.</span></span> <span data-ttu-id="b8f0b-280">如果工作流实例已卸载、已中止或已完成，则 <xref:System.Workflow.Runtime.WorkflowInstance.Unload%2A> 将返回 `false`。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-280"><xref:System.Workflow.Runtime.WorkflowInstance.Unload%2A> returns `false` if the workflow instance has already been unloaded, has been terminated, has been aborted, or has already completed.</span></span>  
  
 <span data-ttu-id="b8f0b-281">宿主可以使用 <xref:System.Workflow.Runtime.WorkflowInstance.TryUnload%2A> 回收空闲工作流的系统资源。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-281">The host can use <xref:System.Workflow.Runtime.WorkflowInstance.TryUnload%2A> to reclaim system resources from an idle workflow.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b8f0b-282">下面的示例演示如何在 <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowIdled> 事件激发时使用 TryUnload 方法卸载工作流。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-282">The following example demonstrates using the TryUnload method to unload a workflow when the <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowIdled> event fires.</span></span> <span data-ttu-id="b8f0b-283">此示例摘自 Program.cs 文件中的“使用持久性服务”SDK 示例。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-283">This example is from the Using Persistence Services SDK sample, from the Program.cs file.</span></span> <span data-ttu-id="b8f0b-284">有关详细信息，请参阅 [使用持久性服务示例](https://msdn.microsoft.com/library/3176b7e7-ae49-4d5c-802b-85032d6ebde6)。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-284">For more information, see [Using Persistence Services Sample](https://msdn.microsoft.com/library/3176b7e7-ae49-4d5c-802b-85032d6ebde6).</span></span>  
  
 [!code-csharp[WF_Samples#280](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#280)]
 [!code-vb[WF_Samples#280](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#280)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b8f0b-285">不存在已注册到工作流运行时引擎的持久性服务。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-285">There is no persistence service registered with the workflow runtime engine.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Unload">
      <MemberSignature Language="C#" Value="public void Unload ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Unload() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowInstance.Unload" />
      <MemberSignature Language="VB.NET" Value="Public Sub Unload ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Unload();" />
      <MemberSignature Language="F#" Value="member this.Unload : unit -&gt; unit" Usage="workflowInstance.Unload " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b8f0b-286">将工作流实例从内存卸载到持久性存储区。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-286">Unloads the workflow instance from memory to the persistence store.</span></span> <span data-ttu-id="b8f0b-287">此调用将进行阻止，直至当前计划的工作完成或事务范围结束。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-287">This call blocks until after the currently scheduled work is finished, or the end of a transaction scope.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b8f0b-288"><xref:System.Workflow.Runtime.WorkflowInstance.Unload%2A> 是同步的，也就是说，它将在完成其执行的任何操作之后返回。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-288"><xref:System.Workflow.Runtime.WorkflowInstance.Unload%2A> is synchronous; that is, it returns after completing any action that it performs.</span></span> <span data-ttu-id="b8f0b-289">如果工作流实例不处于空闲状态，则运行时将一直等待，直至可以中断实例。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-289">If the workflow instance is not idle, the runtime waits until the instance can be interrupted.</span></span> <span data-ttu-id="b8f0b-290">只有当前计划的工作项完成之后，才可以中断实例，这种情况通常发生在当前运行的活动从其 <xref:System.Workflow.ComponentModel.Activity.Execute%2A> 方法返回时。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-290">An instance can only be interrupted after the currently scheduled work item completes; this is typically when the currently running Activity returns from its <xref:System.Workflow.ComponentModel.Activity.Execute%2A> method.</span></span> <span data-ttu-id="b8f0b-291">但是，如果实例正在执行 <xref:System.Workflow.ComponentModel.TransactionScopeActivity>，则事务范围必须在可将实例中断之前完成执行。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-291">However, if the instance is executing a <xref:System.Workflow.ComponentModel.TransactionScopeActivity>, the transaction scope must complete execution before the instance can be interrupted.</span></span> <span data-ttu-id="b8f0b-292">然后，“Unload”将使用持久性服务从内存中移除工作流实例，并将其保留在数据存储区。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-292">Unload then uses the persistence service to remove the workflow instance from memory and persists it to a data store.</span></span> <span data-ttu-id="b8f0b-293">如果不存在使用 <xref:System.Workflow.Runtime.WorkflowRuntime> 注册的持久性服务，则 <xref:System.Workflow.Runtime.WorkflowInstance.Unload%2A> 将引发 <xref:System.InvalidOperationException>。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-293">If there is no persistence service registered with the <xref:System.Workflow.Runtime.WorkflowRuntime>, <xref:System.Workflow.Runtime.WorkflowInstance.Unload%2A> throws an <xref:System.InvalidOperationException>.</span></span> <span data-ttu-id="b8f0b-294">如果工作流实例成功保留，则运行时将引发 <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowUnloaded> 事件。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-294">If the workflow instance is successfully persisted, the runtime raises the <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowUnloaded> event.</span></span>  
  
 <span data-ttu-id="b8f0b-295">宿主可以使用 <xref:System.Workflow.Runtime.WorkflowInstance.Unload%2A> 回收空闲工作流的系统资源。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-295">The host can use <xref:System.Workflow.Runtime.WorkflowInstance.Unload%2A> to reclaim system resources from an idle workflow.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b8f0b-296">下面的示例演示对 <xref:System.Workflow.Runtime.WorkflowInstance.Unload%2A> 对象调用 <xref:System.Workflow.Runtime.WorkflowInstance>。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-296">The following example demonstrates calling <xref:System.Workflow.Runtime.WorkflowInstance.Unload%2A> on a <xref:System.Workflow.Runtime.WorkflowInstance> object.</span></span>  
  
 [!code-csharp[WF_Samples#11](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#11)]
 [!code-vb[WF_Samples#11](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b8f0b-297">不存在已注册到工作流运行时引擎的持久性服务。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-297">There is no persistence service registered with the workflow runtime engine.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WorkflowRuntime">
      <MemberSignature Language="C#" Value="public System.Workflow.Runtime.WorkflowRuntime WorkflowRuntime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Workflow.Runtime.WorkflowRuntime WorkflowRuntime" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.Runtime.WorkflowInstance.WorkflowRuntime" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property WorkflowRuntime As WorkflowRuntime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Workflow::Runtime::WorkflowRuntime ^ WorkflowRuntime { System::Workflow::Runtime::WorkflowRuntime ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.WorkflowRuntime : System.Workflow.Runtime.WorkflowRuntime" Usage="System.Workflow.Runtime.WorkflowInstance.WorkflowRuntime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.Runtime.WorkflowRuntime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b8f0b-298">获取此工作流实例的 <see cref="T:System.Workflow.Runtime.WorkflowRuntime" />。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-298">Gets the <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> for this workflow instance.</span></span></summary>
        <value><span data-ttu-id="b8f0b-299">一个 <see cref="T:System.Workflow.Runtime.WorkflowRuntime" />，表示此工作流实例在其中运行的执行环境。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-299">A <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> that represents the execution environment in which this workflow instance is running.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="b8f0b-300">下面的示例演示如何访问 <xref:System.Workflow.Runtime.WorkflowRuntime> 对象的正在执行的 <xref:System.Workflow.Runtime.WorkflowInstance>。</span><span class="sxs-lookup"><span data-stu-id="b8f0b-300">The following example demonstrates accessing the executing <xref:System.Workflow.Runtime.WorkflowRuntime> of a <xref:System.Workflow.Runtime.WorkflowInstance> object.</span></span>  
  
 [!code-csharp[WF_Samples#7](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#7)]
 [!code-vb[WF_Samples#7](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
