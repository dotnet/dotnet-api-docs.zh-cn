<Type Name="MessageQuery" FullName="System.ServiceModel.Dispatcher.MessageQuery">
  <Metadata><Meta Name="ms.openlocfilehash" Value="c9bccff7e8858ea1abde1374e4b4107fc05c9d10" /><Meta Name="ms.sourcegitcommit" Value="b53d35b4a410c949742abd4c6a989d1af5357bca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="86570867" /></Metadata><TypeSignature Language="C#" Value="public abstract class MessageQuery" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit MessageQuery extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Dispatcher.MessageQuery" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class MessageQuery" />
  <TypeSignature Language="C++ CLI" Value="public ref class MessageQuery abstract" />
  <TypeSignature Language="F#" Value="type MessageQuery = class" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>定义类的核心行为，这些类用于搜索消息中特定的相关数据。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceModel.Dispatcher.MessageQuery> 类与 <xref:System.ServiceModel.Dispatcher.MessageFilter> 类相似。  但 <xref:System.ServiceModel.Dispatcher.MessageQuery.Evaluate%2A> 方法将返回针对一个消息的查询的计算结果，而不是返回匹配项。 该查询的结果为此消息中的一个值。 将该值用作键以将此消息与其他消息关联起来。 若要为数据添加一个新属性，请使用 <xref:System.ServiceModel.Channels.CorrelationDataMessageProperty.Add%2A> 类的 <xref:System.ServiceModel.Channels.CorrelationDataMessageProperty> 方法。  
  
> [!NOTE]
>  有关 <xref:System.ServiceModel.Dispatcher.MessageQuery> 的具体实现，请参见 <xref:System.ServiceModel.XPathMessageQuery> 类。  
  
## <a name="using-the-xpathmessagequery-and-messagequerycollection-classes"></a>使用 XPathMessageQuery 和 MessageQueryCollection 类  
 可以通过创建一组查询对象并将它们插入 <xref:System.ServiceModel.Dispatcher.MessageQueryCollection> 类的实例中来优化查询过程。  
  
> [!NOTE]
>  有关 <xref:System.ServiceModel.Dispatcher.MessageQueryCollection> 的具体实现，请参见 <xref:System.ServiceModel.Dispatcher.XPathMessageQueryCollection> 类。  
  
 常见用法是在集合中填入查询，这些查询具有相同的 XPath 谓词，只是其最终叶值不同。 例如，以下 XPath 查询相同，唯一的区别是它们的最终子句不同。 第一个查询查找所有 quantity 特性设置为 1 的元素，第二个查询查找 product 特性设置为“Contoso”的元素：  
  
```  
"/s12:Envelope/s12:Body/PurchaseOrder/Items/Item[@quantity = 1]"  
"/s12:Envelope/s12:Body/PurchaseOrder/Items/Item[@product = 'Contoso']"  
```  
  
 利用 <xref:System.ServiceModel.Dispatcher.MessageQueryCollection> 类，可以创建稍有不同的查询表，使处理更高效。  
  
 或者，可以使用 <xref:System.ServiceModel.Dispatcher.MessageQueryTable%601> 类来存储和计算消息查询。  
  
   
  
## Examples  
 以下示例创建一个消息和 XPath 消息查询。 这些查询由 <xref:System.ServiceModel.XPathMessageQuery> 对象中包含的 <xref:System.ServiceModel.Dispatcher.XPathMessageQueryCollection> 对象进行评估。 使用 <xref:System.ServiceModel.Dispatcher.XPathResult.ResultType%2A> 类的 <xref:System.ServiceModel.Dispatcher.XPathResult> 属性测试每个查询的结果。  
  
 [!code-csharp[XPathMessageQuery#0](~/samples/snippets/csharp/VS_Snippets_CFX/xpathmessagequery/cs/source.cs#0)]
 [!code-vb[XPathMessageQuery#0](~/samples/snippets/visualbasic/VS_Snippets_CFX/xpathmessagequery/vb/source.vb#0)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.ServiceModel.XPathMessageQuery" />
    <altmember cref="T:System.ServiceModel.Channels.CorrelationDataMessageProperty" />
    <altmember cref="T:System.ServiceModel.Dispatcher.XPathMessageContext" />
    <altmember cref="T:System.ServiceModel.Dispatcher.XPathResult" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected MessageQuery ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.MessageQuery.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; MessageQuery();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.ServiceModel.Dispatcher.MessageQuery" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateMessageQueryCollection">
      <MemberSignature Language="C#" Value="public virtual System.ServiceModel.Dispatcher.MessageQueryCollection CreateMessageQueryCollection ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.ServiceModel.Dispatcher.MessageQueryCollection CreateMessageQueryCollection() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.MessageQuery.CreateMessageQueryCollection" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateMessageQueryCollection () As MessageQueryCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::ServiceModel::Dispatcher::MessageQueryCollection ^ CreateMessageQueryCollection();" />
      <MemberSignature Language="F#" Value="abstract member CreateMessageQueryCollection : unit -&gt; System.ServiceModel.Dispatcher.MessageQueryCollection&#xA;override this.CreateMessageQueryCollection : unit -&gt; System.ServiceModel.Dispatcher.MessageQueryCollection" Usage="messageQuery.CreateMessageQueryCollection " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Dispatcher.MessageQueryCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>创建一个查询集合，该集合返回与其关联的特定数据类型。</summary>
        <returns><see cref="T:System.ServiceModel.Dispatcher.MessageQueryCollection" />，与数据类型关联的查询的集合。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法应由 <xref:System.ServiceModel.Dispatcher.MessageQueryCollection> 类使用。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Evaluate&lt;TResult&gt;">
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>在派生类中重写时，对消息运行一个查询并返回满足该查询的值。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 两个重载的区别是，一个重载使用 <xref:System.ServiceModel.Channels.Message> 参数，但不允许其检查正文；另一个重载使用 <xref:System.ServiceModel.Channels.MessageBuffer> 参数，并可以检查消息的任何部分。 消息标头是自动缓冲的，并且无需使用即可对其进行查询。 不过，若要查询正文，则必须缓冲整个消息，因为查询可以使用未缓冲的消息正文。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Evaluate&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public abstract TResult Evaluate&lt;TResult&gt; (System.ServiceModel.Channels.Message message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !!TResult Evaluate&lt;TResult&gt;(class System.ServiceModel.Channels.Message message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.MessageQuery.Evaluate``1(System.ServiceModel.Channels.Message)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Evaluate(Of TResult) (message As Message) As TResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; abstract TResult Evaluate(System::ServiceModel::Channels::Message ^ message);" />
      <MemberSignature Language="F#" Value="abstract member Evaluate : System.ServiceModel.Channels.Message -&gt; 'Result" Usage="messageQuery.Evaluate message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="message" Type="System.ServiceModel.Channels.Message" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">要返回的值的类型。</typeparam>
        <param name="message">要查询的消息。</param>
        <summary>在派生类中重写时，对消息运行一个查询并返回一个结果。 无法查询正文。</summary>
        <returns><see cref="T:System.ServiceModel.Dispatcher.MessageQueryCollection" />  
  
满足查询的结果的可枚举集合。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Evaluate&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public abstract TResult Evaluate&lt;TResult&gt; (System.ServiceModel.Channels.MessageBuffer buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !!TResult Evaluate&lt;TResult&gt;(class System.ServiceModel.Channels.MessageBuffer buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.MessageQuery.Evaluate``1(System.ServiceModel.Channels.MessageBuffer)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Evaluate(Of TResult) (buffer As MessageBuffer) As TResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; abstract TResult Evaluate(System::ServiceModel::Channels::MessageBuffer ^ buffer);" />
      <MemberSignature Language="F#" Value="abstract member Evaluate : System.ServiceModel.Channels.MessageBuffer -&gt; 'Result" Usage="messageQuery.Evaluate buffer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="buffer" Type="System.ServiceModel.Channels.MessageBuffer" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">要返回的对象的类型。</typeparam>
        <param name="buffer">要查询的消息。</param>
        <summary>在派生类中重写时，对消息运行一个查询并返回一个结果。</summary>
        <returns><see cref="T:System.ServiceModel.Dispatcher.MessageQueryCollection" />  
  
满足查询的结果的可枚举集合。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 以下示例创建一个消息和 XPath 消息查询。 这些查询由 <xref:System.ServiceModel.XPathMessageQuery> 对象中包含的 <xref:System.ServiceModel.Dispatcher.XPathMessageQueryCollection> 对象进行评估。 使用 <xref:System.ServiceModel.Dispatcher.XPathResult.ResultType%2A> 类的 <xref:System.ServiceModel.Dispatcher.XPathResult> 属性测试每个查询的结果。  
  
 [!code-csharp[XPathMessageQuery#0](~/samples/snippets/csharp/VS_Snippets_CFX/xpathmessagequery/cs/source.cs#0)]
 [!code-vb[XPathMessageQuery#0](~/samples/snippets/visualbasic/VS_Snippets_CFX/xpathmessagequery/vb/source.vb#0)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
