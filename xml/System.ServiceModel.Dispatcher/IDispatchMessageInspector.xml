<Type Name="IDispatchMessageInspector" FullName="System.ServiceModel.Dispatcher.IDispatchMessageInspector">
  <Metadata><Meta Name="ms.openlocfilehash" Value="8ec43de4e0a90cd5d1a890459df34bab0582c935" /><Meta Name="ms.sourcegitcommit" Value="9506e50ec7beb4fa30206b9840dc546b035a6600" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/23/2020" /><Meta Name="ms.locfileid" Value="83960719" /></Metadata><TypeSignature Language="C#" Value="public interface IDispatchMessageInspector" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDispatchMessageInspector" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Dispatcher.IDispatchMessageInspector" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDispatchMessageInspector" />
  <TypeSignature Language="C++ CLI" Value="public interface class IDispatchMessageInspector" />
  <TypeSignature Language="F#" Value="type IDispatchMessageInspector = interface" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>定义一些方法，通过这些方法，可以在服务应用程序中对入站和出站应用程序消息进行自定义检查或修改。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 实现 <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> 可以在将请求消息调度到操作或者将回复消息返回到调用方之前，检查或修改入站或出站应用程序消息。 在许多情况下，调用将消息发送到的操作之前，需要先截获消息。 例如，您可以记录传入的应用程序消息或根据消息头执行某种功能。  
  
 通常情况下，由一个服务行为 (<xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=nameWithType>)、一个终结点行为 (<xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType>) 或一个协定行为 (<xref:System.ServiceModel.Description.IContractBehavior?displayProperty=nameWithType>) 来插入消息检查器。 然后，该行为将消息检查器添加到 <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType> 集合。 有关使用行为扩展运行时的详细信息，请参阅[扩展 ServiceHost 和服务模型层](/dotnet/framework/wcf/extending/extending-servicehost-and-the-service-model-layer)。  
  
-   在接收消息之后、将消息调度到目标操作之前，<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest%2A> 方法启用自定义行为。  
  
-   在操作返回之后发送回复之前，<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply%2A> 方法启用自定义行为。  
  
> [!NOTE]
>  在消息调度过程中，无论操作是单向还是请求-回复，始终在相同的点调用 <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> 对象。  
  
   
  
## Examples  
 下面的代码示例演示了一个基本的 <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector>，当调用它时会将字符串写入控制台。  
  
 [!code-csharp[Interceptors#7](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/interceptors.cs#7)]
 [!code-vb[Interceptors#7](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/interceptors.vb#7)]  
  
 下面的代码示例演示 <xref:System.ServiceModel.Description.IServiceBehavior> 的实现，它将 `Inspector`<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> 添加到 <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType> 集合。  
  
 [!code-csharp[Interceptors#8](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/insertingbehaviors.cs#8)]
 [!code-vb[Interceptors#8](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/insertingbehaviors.vb#8)]  
  
 下面的代码示例演示如何使用应用程序配置文件来加载插入 `Inspector`<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> 的服务行为。  
  
 [!code-xml[Interceptors#9](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/hostapplication.exe.config#9)]   
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AfterReceiveRequest">
      <MemberSignature Language="C#" Value="public object AfterReceiveRequest (ref System.ServiceModel.Channels.Message request, System.ServiceModel.IClientChannel channel, System.ServiceModel.InstanceContext instanceContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object AfterReceiveRequest(class System.ServiceModel.Channels.Message&amp; request, class System.ServiceModel.IClientChannel channel, class System.ServiceModel.InstanceContext instanceContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel,System.ServiceModel.InstanceContext)" />
      <MemberSignature Language="VB.NET" Value="Public Function AfterReceiveRequest (ByRef request As Message, channel As IClientChannel, instanceContext As InstanceContext) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ AfterReceiveRequest(System::ServiceModel::Channels::Message ^ % request, System::ServiceModel::IClientChannel ^ channel, System::ServiceModel::InstanceContext ^ instanceContext);" />
      <MemberSignature Language="F#" Value="abstract member AfterReceiveRequest : Message * System.ServiceModel.IClientChannel * System.ServiceModel.InstanceContext -&gt; obj" Usage="iDispatchMessageInspector.AfterReceiveRequest (request, channel, instanceContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.ServiceModel.Channels.Message" RefType="ref" />
        <Parameter Name="channel" Type="System.ServiceModel.IClientChannel" />
        <Parameter Name="instanceContext" Type="System.ServiceModel.InstanceContext" />
      </Parameters>
      <Docs>
        <param name="request">请求消息。</param>
        <param name="channel">传入通道。</param>
        <param name="instanceContext">当前服务实例。</param>
        <summary>在已接收入站消息后将消息调度到应发送到的操作之前调用。</summary>
        <returns>用于关联状态的对象。 该对象将在 <see cref="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply(System.ServiceModel.Channels.Message@,System.Object)" /> 方法中传回。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用 <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest%2A> 方法可以检查或修改传入消息、提供该消息的客户端通道，以及当前服务实例。 返回值可以是要用于关联目的的任何对象；在 `correlationState` 方法中，它作为 <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply%2A> 参数返回。  
  
> [!IMPORTANT]
>  您不能使用消息的正文，除非缓冲整个消息并制作副本。 如果这样做，则必须制作两个消息副本，一个用于检查，另一个覆盖 `request` 参数。  
  
   
  
## Examples  
 下面的代码示例演示了一个基本的 <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector>，当调用它时会将字符串写入控制台。  
  
 [!code-csharp[Interceptors#7](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/interceptors.cs#7)]
 [!code-vb[Interceptors#7](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/interceptors.vb#7)]  
  
 下面的代码示例演示 <xref:System.ServiceModel.Description.IServiceBehavior> 的实现，它将 `Inspector`<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> 添加到 <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType> 集合。  
  
 [!code-csharp[Interceptors#8](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/insertingbehaviors.cs#8)]
 [!code-vb[Interceptors#8](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/insertingbehaviors.vb#8)]  
  
 下面的代码示例演示如何使用应用程序配置文件来加载插入 `Inspector`<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> 的服务行为。  
  
 [!code-xml[Interceptors#9](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/hostapplication.exe.config#9)]   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeforeSendReply">
      <MemberSignature Language="C#" Value="public void BeforeSendReply (ref System.ServiceModel.Channels.Message reply, object correlationState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeforeSendReply(class System.ServiceModel.Channels.Message&amp; reply, object correlationState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply(System.ServiceModel.Channels.Message@,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub BeforeSendReply (ByRef reply As Message, correlationState As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BeforeSendReply(System::ServiceModel::Channels::Message ^ % reply, System::Object ^ correlationState);" />
      <MemberSignature Language="F#" Value="abstract member BeforeSendReply : Message * obj -&gt; unit" Usage="iDispatchMessageInspector.BeforeSendReply (reply, correlationState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reply" Type="System.ServiceModel.Channels.Message" RefType="ref" />
        <Parameter Name="correlationState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="reply">回复消息。 如果操作是单向的，则此值为 null。</param>
        <param name="correlationState">从 <see cref="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel,System.ServiceModel.InstanceContext)" /> 方法返回的关联对象。</param>
        <summary>在操作已返回后发送回复消息之前调用。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在发送返回消息之前，使用 <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply%2A> 方法来执行自定义行为。 `correlationState` 是从 <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest%2A> 方法返回的对象，您可以使用它在入站和出站调用间执行关联来支持您的行为。  
  
   
  
## Examples  
 下面的代码示例演示了一个基本的 <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector>，当调用它时会将字符串写入控制台。  
  
 [!code-csharp[Interceptors#7](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/interceptors.cs#7)]
 [!code-vb[Interceptors#7](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/interceptors.vb#7)]  
  
 下面的代码示例演示 <xref:System.ServiceModel.Description.IServiceBehavior> 的实现，它将 `Inspector`<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> 添加到 <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType> 集合。  
  
 [!code-csharp[Interceptors#8](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/insertingbehaviors.cs#8)]
 [!code-vb[Interceptors#8](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/insertingbehaviors.vb#8)]  
  
 下面的代码示例演示如何使用应用程序配置文件来加载插入 `Inspector`<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> 的服务行为。  
  
 [!code-xml[Interceptors#9](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/hostapplication.exe.config#9)]   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
