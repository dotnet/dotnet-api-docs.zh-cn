<Type Name="IDispatchMessageInspector" FullName="System.ServiceModel.Dispatcher.IDispatchMessageInspector">
  <Metadata><Meta Name="ms.openlocfilehash" Value="8ec43de4e0a90cd5d1a890459df34bab0582c935" /><Meta Name="ms.sourcegitcommit" Value="c982ad9e10a242d90f1e631b5981570f9e5d9f34" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/10/2020" /><Meta Name="ms.locfileid" Value="89803103" /></Metadata><TypeSignature Language="C#" Value="public interface IDispatchMessageInspector" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDispatchMessageInspector" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Dispatcher.IDispatchMessageInspector" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDispatchMessageInspector" />
  <TypeSignature Language="C++ CLI" Value="public interface class IDispatchMessageInspector" />
  <TypeSignature Language="F#" Value="type IDispatchMessageInspector = interface" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="ffbbf-101">定义一些方法，通过这些方法，可以在服务应用程序中对入站和出站应用程序消息进行自定义检查或修改。</span><span class="sxs-lookup"><span data-stu-id="ffbbf-101">Defines the methods that enable custom inspection or modification of inbound and outbound application messages in service applications.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ffbbf-102">实现 <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> 可以在将请求消息调度到操作或者将回复消息返回到调用方之前，检查或修改入站或出站应用程序消息。</span><span class="sxs-lookup"><span data-stu-id="ffbbf-102">Implement <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> to inspect or modify inbound or outbound application messages either prior to dispatching a request message to an operation or before returning a reply message to a caller.</span></span> <span data-ttu-id="ffbbf-103">在许多情况下，调用将消息发送到的操作之前，需要先截获消息。</span><span class="sxs-lookup"><span data-stu-id="ffbbf-103">There are a large number of scenarios that require intercepting messages prior to invoking the operation for which it is destined.</span></span> <span data-ttu-id="ffbbf-104">例如，您可以记录传入的应用程序消息或根据消息头执行某种功能。</span><span class="sxs-lookup"><span data-stu-id="ffbbf-104">For example, you can log incoming application messages or perform some feature based on a message header.</span></span>  
  
 <span data-ttu-id="ffbbf-105">通常情况下，由一个服务行为 (<xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=nameWithType>)、一个终结点行为 (<xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType>) 或一个协定行为 (<xref:System.ServiceModel.Description.IContractBehavior?displayProperty=nameWithType>) 来插入消息检查器。</span><span class="sxs-lookup"><span data-stu-id="ffbbf-105">Typically, message inspectors are inserted by a service behavior (<xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=nameWithType>), an endpoint behavior (<xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType>), or a contract behavior (<xref:System.ServiceModel.Description.IContractBehavior?displayProperty=nameWithType>).</span></span> <span data-ttu-id="ffbbf-106">然后，该行为将消息检查器添加到 <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType> 集合。</span><span class="sxs-lookup"><span data-stu-id="ffbbf-106">The behavior then adds the message inspector to the <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType> collection.</span></span> <span data-ttu-id="ffbbf-107">有关使用行为扩展运行时的详细信息，请参阅 [扩展 ServiceHost 和服务模型层](/dotnet/framework/wcf/extending/extending-servicehost-and-the-service-model-layer)。</span><span class="sxs-lookup"><span data-stu-id="ffbbf-107">For more information about extending the runtime using behaviors, see [Extending ServiceHost and the Service Model Layer](/dotnet/framework/wcf/extending/extending-servicehost-and-the-service-model-layer).</span></span>  
  
-   <span data-ttu-id="ffbbf-108">在接收消息之后、将消息调度到目标操作之前，<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest%2A> 方法启用自定义行为。</span><span class="sxs-lookup"><span data-stu-id="ffbbf-108">The <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest%2A> method enables custom behavior after receiving the message but before dispatching it to the intended operation.</span></span>  
  
-   <span data-ttu-id="ffbbf-109">在操作返回之后发送回复之前，<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply%2A> 方法启用自定义行为。</span><span class="sxs-lookup"><span data-stu-id="ffbbf-109">The <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply%2A> method enables custom behavior after the operation returns but before the reply is sent.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ffbbf-110">在消息调度过程中，无论操作是单向还是请求-回复，始终在相同的点调用 <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> 对象。</span><span class="sxs-lookup"><span data-stu-id="ffbbf-110"><xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> objects are always called at the same point during message dispatch regardless of whether an operation is one-way or request-reply.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ffbbf-111">下面的代码示例演示了一个基本的 <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector>，当调用它时会将字符串写入控制台。</span><span class="sxs-lookup"><span data-stu-id="ffbbf-111">The following code example shows a basic <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> that writes a string to the console when it is invoked.</span></span>  
  
 [!code-csharp[Interceptors#7](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/interceptors.cs#7)]
 [!code-vb[Interceptors#7](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/interceptors.vb#7)]  
  
 <span data-ttu-id="ffbbf-112">下面的代码示例演示 <xref:System.ServiceModel.Description.IServiceBehavior> 的实现，它将 `Inspector`<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> 添加到 <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType> 集合。</span><span class="sxs-lookup"><span data-stu-id="ffbbf-112">The following code example shows the implementation of an <xref:System.ServiceModel.Description.IServiceBehavior> that adds the `Inspector`<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> to the <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType> collection.</span></span>  
  
 [!code-csharp[Interceptors#8](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/insertingbehaviors.cs#8)]
 [!code-vb[Interceptors#8](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/insertingbehaviors.vb#8)]  
  
 <span data-ttu-id="ffbbf-113">下面的代码示例演示如何使用应用程序配置文件来加载插入 `Inspector`<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> 的服务行为。</span><span class="sxs-lookup"><span data-stu-id="ffbbf-113">The following code example shows the use of an application configuration file to load the service behavior that inserts the `Inspector`<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector>.</span></span>  
  
 [!code-xml[Interceptors#9](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/hostapplication.exe.config#9)]   
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AfterReceiveRequest">
      <MemberSignature Language="C#" Value="public object AfterReceiveRequest (ref System.ServiceModel.Channels.Message request, System.ServiceModel.IClientChannel channel, System.ServiceModel.InstanceContext instanceContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object AfterReceiveRequest(class System.ServiceModel.Channels.Message&amp; request, class System.ServiceModel.IClientChannel channel, class System.ServiceModel.InstanceContext instanceContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel,System.ServiceModel.InstanceContext)" />
      <MemberSignature Language="VB.NET" Value="Public Function AfterReceiveRequest (ByRef request As Message, channel As IClientChannel, instanceContext As InstanceContext) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ AfterReceiveRequest(System::ServiceModel::Channels::Message ^ % request, System::ServiceModel::IClientChannel ^ channel, System::ServiceModel::InstanceContext ^ instanceContext);" />
      <MemberSignature Language="F#" Value="abstract member AfterReceiveRequest : Message * System.ServiceModel.IClientChannel * System.ServiceModel.InstanceContext -&gt; obj" Usage="iDispatchMessageInspector.AfterReceiveRequest (request, channel, instanceContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.ServiceModel.Channels.Message" RefType="ref" />
        <Parameter Name="channel" Type="System.ServiceModel.IClientChannel" />
        <Parameter Name="instanceContext" Type="System.ServiceModel.InstanceContext" />
      </Parameters>
      <Docs>
        <param name="request"><span data-ttu-id="ffbbf-114">请求消息。</span><span class="sxs-lookup"><span data-stu-id="ffbbf-114">The request message.</span></span></param>
        <param name="channel"><span data-ttu-id="ffbbf-115">传入通道。</span><span class="sxs-lookup"><span data-stu-id="ffbbf-115">The incoming channel.</span></span></param>
        <param name="instanceContext"><span data-ttu-id="ffbbf-116">当前服务实例。</span><span class="sxs-lookup"><span data-stu-id="ffbbf-116">The current service instance.</span></span></param>
        <summary><span data-ttu-id="ffbbf-117">在已接收入站消息后将消息调度到应发送到的操作之前调用。</span><span class="sxs-lookup"><span data-stu-id="ffbbf-117">Called after an inbound message has been received but before the message is dispatched to the intended operation.</span></span></summary>
        <returns><span data-ttu-id="ffbbf-118">用于关联状态的对象。</span><span class="sxs-lookup"><span data-stu-id="ffbbf-118">The object used to correlate state.</span></span> <span data-ttu-id="ffbbf-119">该对象将在 <see cref="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply(System.ServiceModel.Channels.Message@,System.Object)" /> 方法中传回。</span><span class="sxs-lookup"><span data-stu-id="ffbbf-119">This object is passed back in the <see cref="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply(System.ServiceModel.Channels.Message@,System.Object)" /> method.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ffbbf-120">使用 <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest%2A> 方法可以检查或修改传入消息、提供该消息的客户端通道，以及当前服务实例。</span><span class="sxs-lookup"><span data-stu-id="ffbbf-120">Use the <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest%2A> method to inspect or modify the incoming message, the client channel that provided it, and the current service instance.</span></span> <span data-ttu-id="ffbbf-121">返回值可以是要用于关联目的的任何对象；在 `correlationState` 方法中，它作为 <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply%2A> 参数返回。</span><span class="sxs-lookup"><span data-stu-id="ffbbf-121">The return value can be any object that you want to use for correlation purposes; it is returned to you as the `correlationState` parameter in the <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply%2A> method.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="ffbbf-122">您不能使用消息的正文，除非缓冲整个消息并制作副本。</span><span class="sxs-lookup"><span data-stu-id="ffbbf-122">You cannot use the body of the message unless you buffer the entire message and make a copy.</span></span> <span data-ttu-id="ffbbf-123">如果这样做，则必须制作两个消息副本，一个用于检查，另一个覆盖 `request` 参数。</span><span class="sxs-lookup"><span data-stu-id="ffbbf-123">If you do this, you must make two copies of the message: one to inspect, and the other to overwrite the `request` parameter.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ffbbf-124">下面的代码示例演示了一个基本的 <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector>，当调用它时会将字符串写入控制台。</span><span class="sxs-lookup"><span data-stu-id="ffbbf-124">The following code example shows a basic <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> that writes a string to the console when it is invoked.</span></span>  
  
 [!code-csharp[Interceptors#7](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/interceptors.cs#7)]
 [!code-vb[Interceptors#7](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/interceptors.vb#7)]  
  
 <span data-ttu-id="ffbbf-125">下面的代码示例演示 <xref:System.ServiceModel.Description.IServiceBehavior> 的实现，它将 `Inspector`<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> 添加到 <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType> 集合。</span><span class="sxs-lookup"><span data-stu-id="ffbbf-125">The following code example shows the implementation of an <xref:System.ServiceModel.Description.IServiceBehavior> that adds the `Inspector`<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> to the <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType> collection.</span></span>  
  
 [!code-csharp[Interceptors#8](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/insertingbehaviors.cs#8)]
 [!code-vb[Interceptors#8](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/insertingbehaviors.vb#8)]  
  
 <span data-ttu-id="ffbbf-126">下面的代码示例演示如何使用应用程序配置文件来加载插入 `Inspector`<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> 的服务行为。</span><span class="sxs-lookup"><span data-stu-id="ffbbf-126">The following code example shows the use of an application configuration file to load the service behavior that inserts the `Inspector`<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector>.</span></span>  
  
 [!code-xml[Interceptors#9](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/hostapplication.exe.config#9)]   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeforeSendReply">
      <MemberSignature Language="C#" Value="public void BeforeSendReply (ref System.ServiceModel.Channels.Message reply, object correlationState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeforeSendReply(class System.ServiceModel.Channels.Message&amp; reply, object correlationState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply(System.ServiceModel.Channels.Message@,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub BeforeSendReply (ByRef reply As Message, correlationState As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BeforeSendReply(System::ServiceModel::Channels::Message ^ % reply, System::Object ^ correlationState);" />
      <MemberSignature Language="F#" Value="abstract member BeforeSendReply : Message * obj -&gt; unit" Usage="iDispatchMessageInspector.BeforeSendReply (reply, correlationState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reply" Type="System.ServiceModel.Channels.Message" RefType="ref" />
        <Parameter Name="correlationState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="reply"><span data-ttu-id="ffbbf-127">回复消息。</span><span class="sxs-lookup"><span data-stu-id="ffbbf-127">The reply message.</span></span> <span data-ttu-id="ffbbf-128">如果操作是单向的，则此值为 null。</span><span class="sxs-lookup"><span data-stu-id="ffbbf-128">This value is null if the operation is one way.</span></span></param>
        <param name="correlationState"><span data-ttu-id="ffbbf-129">从 <see cref="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel,System.ServiceModel.InstanceContext)" /> 方法返回的关联对象。</span><span class="sxs-lookup"><span data-stu-id="ffbbf-129">The correlation object returned from the <see cref="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel,System.ServiceModel.InstanceContext)" /> method.</span></span></param>
        <summary><span data-ttu-id="ffbbf-130">在操作已返回后发送回复消息之前调用。</span><span class="sxs-lookup"><span data-stu-id="ffbbf-130">Called after the operation has returned but before the reply message is sent.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ffbbf-131">在发送返回消息之前，使用 <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply%2A> 方法来执行自定义行为。</span><span class="sxs-lookup"><span data-stu-id="ffbbf-131">Use the <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply%2A> method to perform custom behavior prior to sending the return message.</span></span> <span data-ttu-id="ffbbf-132">`correlationState` 是从 <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest%2A> 方法返回的对象，您可以使用它在入站和出站调用间执行关联来支持您的行为。</span><span class="sxs-lookup"><span data-stu-id="ffbbf-132">The `correlationState` is the object returned from the <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest%2A> method that you can use to perform correlation between inbound and outbound calls to support your behavior.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ffbbf-133">下面的代码示例演示了一个基本的 <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector>，当调用它时会将字符串写入控制台。</span><span class="sxs-lookup"><span data-stu-id="ffbbf-133">The following code example shows a basic <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> that writes a string to the console when it is invoked.</span></span>  
  
 [!code-csharp[Interceptors#7](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/interceptors.cs#7)]
 [!code-vb[Interceptors#7](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/interceptors.vb#7)]  
  
 <span data-ttu-id="ffbbf-134">下面的代码示例演示 <xref:System.ServiceModel.Description.IServiceBehavior> 的实现，它将 `Inspector`<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> 添加到 <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType> 集合。</span><span class="sxs-lookup"><span data-stu-id="ffbbf-134">The following code example shows the implementation of an <xref:System.ServiceModel.Description.IServiceBehavior> that adds the `Inspector`<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> to the <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType> collection.</span></span>  
  
 [!code-csharp[Interceptors#8](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/insertingbehaviors.cs#8)]
 [!code-vb[Interceptors#8](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/insertingbehaviors.vb#8)]  
  
 <span data-ttu-id="ffbbf-135">下面的代码示例演示如何使用应用程序配置文件来加载插入 `Inspector`<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> 的服务行为。</span><span class="sxs-lookup"><span data-stu-id="ffbbf-135">The following code example shows the use of an application configuration file to load the service behavior that inserts the `Inspector`<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector>.</span></span>  
  
 [!code-xml[Interceptors#9](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/hostapplication.exe.config#9)]   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
