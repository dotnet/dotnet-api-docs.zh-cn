<Type Name="IInstanceProvider" FullName="System.ServiceModel.Dispatcher.IInstanceProvider">
  <Metadata><Meta Name="ms.openlocfilehash" Value="9cae3567d8eebf69d050d2dcc962aa05df362b1e" /><Meta Name="ms.sourcegitcommit" Value="c982ad9e10a242d90f1e631b5981570f9e5d9f34" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/10/2020" /><Meta Name="ms.locfileid" Value="89931949" /></Metadata><TypeSignature Language="C#" Value="public interface IInstanceProvider" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IInstanceProvider" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Dispatcher.IInstanceProvider" />
  <TypeSignature Language="VB.NET" Value="Public Interface IInstanceProvider" />
  <TypeSignature Language="C++ CLI" Value="public interface class IInstanceProvider" />
  <TypeSignature Language="F#" Value="type IInstanceProvider = interface" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="f8e79-101">声明一些方法，以便为 Windows Communication Foundation (WCF) 服务提供服务对象，或回收该服务的服务对象。</span><span class="sxs-lookup"><span data-stu-id="f8e79-101">Declares methods that provide a service object or recycle a service object for a Windows Communication Foundation (WCF) service.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f8e79-102">实现 <xref:System.ServiceModel.Dispatcher.IInstanceProvider> 接口，以便在 <xref:System.ServiceModel.InstanceContext> 对象请求或释放服务对象时，控制服务对象的创建和回收。</span><span class="sxs-lookup"><span data-stu-id="f8e79-102">Implement the <xref:System.ServiceModel.Dispatcher.IInstanceProvider> interface to control the creation and recycling of service objects when one is requested or disposed by an <xref:System.ServiceModel.InstanceContext> object.</span></span>  
  
 <span data-ttu-id="f8e79-103">实现 <xref:System.ServiceModel.Dispatcher.IInstanceProvider> 接口后，您必须使用终结点行为（<xref:System.ServiceModel.Dispatcher.DispatchRuntime.InstanceProvider%2A> 对象）或协定行为（<xref:System.ServiceModel.Description.IEndpointBehavior> 对象）将自定义实例提供程序对象分配给 <xref:System.ServiceModel.Description.IContractBehavior> 属性。</span><span class="sxs-lookup"><span data-stu-id="f8e79-103">Once the <xref:System.ServiceModel.Dispatcher.IInstanceProvider> interface is implemented, you must assign your custom instance provider object to the <xref:System.ServiceModel.Dispatcher.DispatchRuntime.InstanceProvider%2A> property using either an endpoint behavior (a <xref:System.ServiceModel.Description.IEndpointBehavior> object) or a contract behavior (a <xref:System.ServiceModel.Description.IContractBehavior> object).</span></span>  
  
 <span data-ttu-id="f8e79-104">如果插入机制为终结点行为，则您还能实现可使用配置文件插入自定义行为的 <xref:System.ServiceModel.Configuration.BehaviorExtensionElement> 对象。</span><span class="sxs-lookup"><span data-stu-id="f8e79-104">If the insertion mechanism is an endpoint behavior you can also implement a <xref:System.ServiceModel.Configuration.BehaviorExtensionElement> object that can insert your custom behavior using a configuration file.</span></span> <span data-ttu-id="f8e79-105">如果插入机制为协定行为，您可以在打开服务主机之前以编程方式插入行为，也可以实现自定义属性。</span><span class="sxs-lookup"><span data-stu-id="f8e79-105">If the insertion mechanism is a contract behavior, you can insert the behavior programmatically prior to the opening of the service host or you can implement a custom attribute.</span></span> <span data-ttu-id="f8e79-106">（有关此协定行为的示例，请参见“示例”部分。）</span><span class="sxs-lookup"><span data-stu-id="f8e79-106">(For an example of the contract behavior approach, see the Example section.)</span></span>  
  
 <span data-ttu-id="f8e79-107"><xref:System.ServiceModel.Dispatcher.IInstanceProvider> 有两种方法：<xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A> 和 <xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A>。</span><span class="sxs-lookup"><span data-stu-id="f8e79-107"><xref:System.ServiceModel.Dispatcher.IInstanceProvider> has two methods, <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A> and <xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A>.</span></span> <span data-ttu-id="f8e79-108">这些方法通常实现为使用非参数构造函数创建服务对象，或初始化或释放与对象的生存期相关的某些状态。</span><span class="sxs-lookup"><span data-stu-id="f8e79-108">These methods are typically implemented to create service objects using a non-parameterless constructor or to initialize or dispose of some state related to the lifetime of the object.</span></span> <span data-ttu-id="f8e79-109">例如，服务对象池就属于一种自定义 <xref:System.ServiceModel.Dispatcher.IInstanceProvider> 功能。</span><span class="sxs-lookup"><span data-stu-id="f8e79-109">Service object pooling is one example of custom <xref:System.ServiceModel.Dispatcher.IInstanceProvider> functionality.</span></span>  
  
 <span data-ttu-id="f8e79-110">通常，在第一次创建 <xref:System.ServiceModel.InstanceContext> 时，<xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A> 会调用 <xref:System.ServiceModel.InstanceContext>，在 <xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A> 关闭时，调用 <xref:System.ServiceModel.InstanceContext>。</span><span class="sxs-lookup"><span data-stu-id="f8e79-110">Typically, the <xref:System.ServiceModel.InstanceContext> invokes the <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A> when the <xref:System.ServiceModel.InstanceContext> is first created and invokes the <xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A> method when the <xref:System.ServiceModel.InstanceContext> is closed.</span></span>  
  
 <span data-ttu-id="f8e79-111">有两种方法可使 <xref:System.ServiceModel.InstanceContext> 对象在 <xref:System.ServiceModel.InstanceContext> 关闭之前释放服务对象。</span><span class="sxs-lookup"><span data-stu-id="f8e79-111">There are two ways to cause an <xref:System.ServiceModel.InstanceContext> object to release a service object before the <xref:System.ServiceModel.InstanceContext> is closed.</span></span> <span data-ttu-id="f8e79-112">第一种方法是将 <xref:System.ServiceModel.OperationBehaviorAttribute.ReleaseInstanceMode%2A> 设置为 <xref:System.ServiceModel.ReleaseInstanceMode.AfterCall> 或 <xref:System.ServiceModel.ReleaseInstanceMode.BeforeAndAfterCall>。</span><span class="sxs-lookup"><span data-stu-id="f8e79-112">The first method is to set the <xref:System.ServiceModel.OperationBehaviorAttribute.ReleaseInstanceMode%2A> to <xref:System.ServiceModel.ReleaseInstanceMode.AfterCall> or <xref:System.ServiceModel.ReleaseInstanceMode.BeforeAndAfterCall>.</span></span> <span data-ttu-id="f8e79-113">第二种方法是调用 <xref:System.ServiceModel.InstanceContext.ReleaseServiceInstance%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="f8e79-113">The second method is to call the <xref:System.ServiceModel.InstanceContext.ReleaseServiceInstance%2A> method.</span></span> <span data-ttu-id="f8e79-114">如果执行此操作，<xref:System.ServiceModel.InstanceContext> 将对调度程序的实例提供程序调用 <xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="f8e79-114">If this is done, the <xref:System.ServiceModel.InstanceContext> calls the <xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A> method on the dispatcher's instance provider.</span></span> <span data-ttu-id="f8e79-115">如果在释放实例后新消息到达，WCF 将使用方法创建一个新的实例 <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A> 。</span><span class="sxs-lookup"><span data-stu-id="f8e79-115">If a new message arrives after the instance has been released, WCF creates a new instance using the <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f8e79-116">如果服务的 <xref:System.ServiceModel.InstanceContextMode> 为 <xref:System.ServiceModel.InstanceContextMode.Single>，则系统不会调用 <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A> 或 <xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A> 方法（即使用户未提供已知的服务对象），除非用户直接调用 <xref:System.ServiceModel.InstanceContext.ReleaseServiceInstance%2A>，再调用 <xref:System.ServiceModel.InstanceContext.GetServiceInstance%2A>。</span><span class="sxs-lookup"><span data-stu-id="f8e79-116">If the <xref:System.ServiceModel.InstanceContextMode> of the service is <xref:System.ServiceModel.InstanceContextMode.Single>, the system does not call the <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A> or <xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A> methods even when the user did not provide a well-known service object unless the user directly calls <xref:System.ServiceModel.InstanceContext.ReleaseServiceInstance%2A> and then calls <xref:System.ServiceModel.InstanceContext.GetServiceInstance%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f8e79-117">下面的代码示例演示如何实现可提供“单一实例”行为的 <xref:System.ServiceModel.Dispatcher.IInstanceProvider>；它始终返回同一服务实例，且不回收该服务实例。</span><span class="sxs-lookup"><span data-stu-id="f8e79-117">The following code example shows how to implement <xref:System.ServiceModel.Dispatcher.IInstanceProvider> that provides "singleton" behavior; it always returns the same service instance and does not recycle it.</span></span>  
  
 [!code-csharp[IContractBehavior#1](~/samples/snippets/csharp/VS_Snippets_CFX/icontractbehavior/cs/objectproviderbehavior.cs#1)]
 [!code-vb[IContractBehavior#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/icontractbehavior/vb/objectproviderbehavior.vb#1)]  
  
 <span data-ttu-id="f8e79-118">下面的代码示例演示如何实现一个自定义属性，该自定义属性可实现 <xref:System.ServiceModel.Description.IContractBehavior>，从而插入自定义服务实例提供程序。</span><span class="sxs-lookup"><span data-stu-id="f8e79-118">The following code example shows how to implement a custom attribute that implements <xref:System.ServiceModel.Description.IContractBehavior> to insert the custom service instance provider.</span></span> <span data-ttu-id="f8e79-119">它还实现可将其用法绑定到特定协定的 <xref:System.ServiceModel.Description.IContractBehaviorAttribute>。</span><span class="sxs-lookup"><span data-stu-id="f8e79-119">It also implements <xref:System.ServiceModel.Description.IContractBehaviorAttribute>, which binds its use to a specific contract.</span></span>  
  
 [!code-csharp[IContractBehavior#2](~/samples/snippets/csharp/VS_Snippets_CFX/icontractbehavior/cs/objectproviderbehavior.cs#2)]
 [!code-vb[IContractBehavior#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/icontractbehavior/vb/objectproviderbehavior.vb#2)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="GetInstance">
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="f8e79-120">返回服务对象。</span><span class="sxs-lookup"><span data-stu-id="f8e79-120">Returns a service object.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetInstance">
      <MemberSignature Language="C#" Value="public object GetInstance (System.ServiceModel.InstanceContext instanceContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetInstance(class System.ServiceModel.InstanceContext instanceContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(System.ServiceModel.InstanceContext)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetInstance (instanceContext As InstanceContext) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetInstance(System::ServiceModel::InstanceContext ^ instanceContext);" />
      <MemberSignature Language="F#" Value="abstract member GetInstance : System.ServiceModel.InstanceContext -&gt; obj" Usage="iInstanceProvider.GetInstance instanceContext" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceContext" Type="System.ServiceModel.InstanceContext" />
      </Parameters>
      <Docs>
        <param name="instanceContext"><span data-ttu-id="f8e79-121">当前的 <see cref="T:System.ServiceModel.InstanceContext" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="f8e79-121">The current <see cref="T:System.ServiceModel.InstanceContext" /> object.</span></span></param>
        <summary><span data-ttu-id="f8e79-122">如果给出指定的 <see cref="T:System.ServiceModel.InstanceContext" /> 对象，则返回服务对象。</span><span class="sxs-lookup"><span data-stu-id="f8e79-122">Returns a service object given the specified <see cref="T:System.ServiceModel.InstanceContext" /> object.</span></span></summary>
        <returns><span data-ttu-id="f8e79-123">用户定义的服务对象。</span><span class="sxs-lookup"><span data-stu-id="f8e79-123">A user-defined service object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f8e79-124">使用 <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%28System.ServiceModel.InstanceContext%29> 方法来控制 WCF 服务在尝试创建新的服务对象时接收的确切服务对象。</span><span class="sxs-lookup"><span data-stu-id="f8e79-124">Use the <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%28System.ServiceModel.InstanceContext%29> method to control the exact service object that a WCF service receives when it attempts to create a new one.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f8e79-125">下面的代码示例演示如何实现可提供“单一实例”行为的 <xref:System.ServiceModel.Dispatcher.IInstanceProvider>；它始终返回同一服务实例，且不回收该服务实例。</span><span class="sxs-lookup"><span data-stu-id="f8e79-125">The following code example shows how to implement <xref:System.ServiceModel.Dispatcher.IInstanceProvider> that provides "singleton" behavior; it always returns the same service instance and does not recycle it.</span></span>  
  
 [!code-csharp[IContractBehavior#1](~/samples/snippets/csharp/VS_Snippets_CFX/icontractbehavior/cs/objectproviderbehavior.cs#1)]
 [!code-vb[IContractBehavior#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/icontractbehavior/vb/objectproviderbehavior.vb#1)]  
  
 <span data-ttu-id="f8e79-126">下面的代码示例演示如何实现一个自定义属性，该自定义属性可实现 <xref:System.ServiceModel.Description.IContractBehavior>，从而插入自定义服务实例提供程序。</span><span class="sxs-lookup"><span data-stu-id="f8e79-126">The following code example shows how to implement a custom attribute that implements <xref:System.ServiceModel.Description.IContractBehavior> to insert the custom service instance provider.</span></span> <span data-ttu-id="f8e79-127">它还实现可将其用法绑定到特定协定的 <xref:System.ServiceModel.Description.IContractBehaviorAttribute>。</span><span class="sxs-lookup"><span data-stu-id="f8e79-127">It also implements <xref:System.ServiceModel.Description.IContractBehaviorAttribute>, which binds its use to a specific contract.</span></span>  
  
 [!code-csharp[IContractBehavior#2](~/samples/snippets/csharp/VS_Snippets_CFX/icontractbehavior/cs/objectproviderbehavior.cs#2)]
 [!code-vb[IContractBehavior#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/icontractbehavior/vb/objectproviderbehavior.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetInstance">
      <MemberSignature Language="C#" Value="public object GetInstance (System.ServiceModel.InstanceContext instanceContext, System.ServiceModel.Channels.Message message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetInstance(class System.ServiceModel.InstanceContext instanceContext, class System.ServiceModel.Channels.Message message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Message)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetInstance (instanceContext As InstanceContext, message As Message) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetInstance(System::ServiceModel::InstanceContext ^ instanceContext, System::ServiceModel::Channels::Message ^ message);" />
      <MemberSignature Language="F#" Value="abstract member GetInstance : System.ServiceModel.InstanceContext * System.ServiceModel.Channels.Message -&gt; obj" Usage="iInstanceProvider.GetInstance (instanceContext, message)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceContext" Type="System.ServiceModel.InstanceContext" />
        <Parameter Name="message" Type="System.ServiceModel.Channels.Message" />
      </Parameters>
      <Docs>
        <param name="instanceContext"><span data-ttu-id="f8e79-128">当前的 <see cref="T:System.ServiceModel.InstanceContext" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="f8e79-128">The current <see cref="T:System.ServiceModel.InstanceContext" /> object.</span></span></param>
        <param name="message"><span data-ttu-id="f8e79-129">触发服务对象的创建的消息。</span><span class="sxs-lookup"><span data-stu-id="f8e79-129">The message that triggered the creation of a service object.</span></span></param>
        <summary><span data-ttu-id="f8e79-130">如果给出指定的 <see cref="T:System.ServiceModel.InstanceContext" /> 对象，则返回服务对象。</span><span class="sxs-lookup"><span data-stu-id="f8e79-130">Returns a service object given the specified <see cref="T:System.ServiceModel.InstanceContext" /> object.</span></span></summary>
        <returns><span data-ttu-id="f8e79-131">服务对象。</span><span class="sxs-lookup"><span data-stu-id="f8e79-131">The service object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f8e79-132">使用 <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%28System.ServiceModel.InstanceContext%2CSystem.ServiceModel.Channels.Message%29> 方法来控制 WCF 服务在尝试创建新的服务对象时接收的确切服务对象。</span><span class="sxs-lookup"><span data-stu-id="f8e79-132">Use the <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%28System.ServiceModel.InstanceContext%2CSystem.ServiceModel.Channels.Message%29> method to control the exact service object that a WCF service receives when it attempts to create a new one.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f8e79-133">下面的代码示例演示如何实现可提供“单一实例”行为的 <xref:System.ServiceModel.Dispatcher.IInstanceProvider>；它始终返回同一服务实例，且不回收该服务实例。</span><span class="sxs-lookup"><span data-stu-id="f8e79-133">The following code example shows how to implement <xref:System.ServiceModel.Dispatcher.IInstanceProvider> that provides "singleton" behavior; it always returns the same service instance and does not recycle it.</span></span>  
  
 [!code-csharp[IContractBehavior#1](~/samples/snippets/csharp/VS_Snippets_CFX/icontractbehavior/cs/objectproviderbehavior.cs#1)]
 [!code-vb[IContractBehavior#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/icontractbehavior/vb/objectproviderbehavior.vb#1)]  
  
 <span data-ttu-id="f8e79-134">下面的代码示例演示如何实现一个自定义属性，该自定义属性可实现 <xref:System.ServiceModel.Description.IContractBehavior>，从而插入自定义服务实例提供程序。</span><span class="sxs-lookup"><span data-stu-id="f8e79-134">The following code example shows how to implement a custom attribute that implements <xref:System.ServiceModel.Description.IContractBehavior> to insert the custom service instance provider.</span></span> <span data-ttu-id="f8e79-135">它还实现可将其用法绑定到特定协定的 <xref:System.ServiceModel.Description.IContractBehaviorAttribute>。</span><span class="sxs-lookup"><span data-stu-id="f8e79-135">It also implements <xref:System.ServiceModel.Description.IContractBehaviorAttribute>, which binds its use to a specific contract.</span></span>  
  
 [!code-csharp[IContractBehavior#2](~/samples/snippets/csharp/VS_Snippets_CFX/icontractbehavior/cs/objectproviderbehavior.cs#2)]
 [!code-vb[IContractBehavior#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/icontractbehavior/vb/objectproviderbehavior.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReleaseInstance">
      <MemberSignature Language="C#" Value="public void ReleaseInstance (System.ServiceModel.InstanceContext instanceContext, object instance);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReleaseInstance(class System.ServiceModel.InstanceContext instanceContext, object instance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance(System.ServiceModel.InstanceContext,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReleaseInstance (instanceContext As InstanceContext, instance As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReleaseInstance(System::ServiceModel::InstanceContext ^ instanceContext, System::Object ^ instance);" />
      <MemberSignature Language="F#" Value="abstract member ReleaseInstance : System.ServiceModel.InstanceContext * obj -&gt; unit" Usage="iInstanceProvider.ReleaseInstance (instanceContext, instance)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceContext" Type="System.ServiceModel.InstanceContext" />
        <Parameter Name="instance" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="instanceContext"><span data-ttu-id="f8e79-136">服务的实例上下文。</span><span class="sxs-lookup"><span data-stu-id="f8e79-136">The service's instance context.</span></span></param>
        <param name="instance"><span data-ttu-id="f8e79-137">要回收的服务对象。</span><span class="sxs-lookup"><span data-stu-id="f8e79-137">The service object to be recycled.</span></span></param>
        <summary><span data-ttu-id="f8e79-138">在 <see cref="T:System.ServiceModel.InstanceContext" /> 对象回收服务对象时调用。</span><span class="sxs-lookup"><span data-stu-id="f8e79-138">Called when an <see cref="T:System.ServiceModel.InstanceContext" /> object recycles a service object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f8e79-139">使用 <xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A> 方法可执行某些自定义资源释放操作，或者在服务回收服务对象时执行其他回收自定义操作。</span><span class="sxs-lookup"><span data-stu-id="f8e79-139">Use the <xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A> method to perform some custom resource disposal or other recycling customization when a service recycles a service object.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
