<Type Name="MessageFilter" FullName="System.ServiceModel.Dispatcher.MessageFilter">
  <Metadata><Meta Name="ms.openlocfilehash" Value="f807a3ce5ec30d45f0519f584e683668abf55dc3" /><Meta Name="ms.sourcegitcommit" Value="b53d35b4a410c949742abd4c6a989d1af5357bca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="86570932" /></Metadata><TypeSignature Language="C#" Value="public abstract class MessageFilter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit MessageFilter extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Dispatcher.MessageFilter" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class MessageFilter" />
  <TypeSignature Language="C++ CLI" Value="public ref class MessageFilter abstract" />
  <TypeSignature Language="F#" Value="type MessageFilter = class" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[System.Runtime.Serialization.DataContract]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.Serialization.DataContract&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[System.Runtime.Serialization.KnownType(typeof(System.ServiceModel.Dispatcher.ActionMessageFilter))]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.Serialization.KnownType(typeof(System.ServiceModel.Dispatcher.ActionMessageFilter))&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[System.Runtime.Serialization.KnownType(typeof(System.ServiceModel.Dispatcher.XPathMessageFilter))]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.Serialization.KnownType(typeof(System.ServiceModel.Dispatcher.XPathMessageFilter))&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[System.Runtime.Serialization.KnownType(typeof(System.ServiceModel.Dispatcher.MatchAllMessageFilter))]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.Serialization.KnownType(typeof(System.ServiceModel.Dispatcher.MatchAllMessageFilter))&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[System.Runtime.Serialization.KnownType(typeof(System.ServiceModel.Dispatcher.MatchNoneMessageFilter))]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.Serialization.KnownType(typeof(System.ServiceModel.Dispatcher.MatchNoneMessageFilter))&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="e54c4-101">用于查询消息的筛选器的不同的类的 <see langword="abstract" /> 基类。</span><span class="sxs-lookup"><span data-stu-id="e54c4-101"><see langword="abstract" /> base class for different classes of filters used to query messages.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e54c4-102"><xref:System.ServiceModel.Dispatcher.MessageFilter> 是一个 `abstract` 类，开发人员实现此类来指定用于检查消息的条件。</span><span class="sxs-lookup"><span data-stu-id="e54c4-102"><xref:System.ServiceModel.Dispatcher.MessageFilter> is an `abstract` class that developers implement in order to specify the criteria to use for inspecting messages.</span></span> <span data-ttu-id="e54c4-103">通常情况下，终结点应用程序使用筛选器根据检查消息的某部分来确定如何处理消息。</span><span class="sxs-lookup"><span data-stu-id="e54c4-103">Typically, filters are used by an endpoint application to determine what to do with a message based on an examination of some part of the message.</span></span> <span data-ttu-id="e54c4-104">例如，查询过程可以使用 XPath 1.0 查询来检查已知标头的优先级元素，以确定是否将消息移动到队列的靠前位置。</span><span class="sxs-lookup"><span data-stu-id="e54c4-104">A queuing process, for example, can use an XPath 1.0 query to check the priority element of a known header to determine whether to move a message to the front of the queue.</span></span>  
  
 <span data-ttu-id="e54c4-105">筛选器存储在实现 <xref:System.ServiceModel.Dispatcher.IMessageFilterTable%601> 的筛选器表中。</span><span class="sxs-lookup"><span data-stu-id="e54c4-105">Filters are stored in a filter table that implements <xref:System.ServiceModel.Dispatcher.IMessageFilterTable%601>.</span></span> <span data-ttu-id="e54c4-106">表中的每个筛选器与指定的筛选器数据相关联，这些消息可用于指示当消息与筛选器相匹配时采取的操作。</span><span class="sxs-lookup"><span data-stu-id="e54c4-106">Each filter in the table is associated with specified filter data that can be used to indicate what actions to take if a message matches the filter.</span></span> <span data-ttu-id="e54c4-107"><xref:System.ServiceModel.Dispatcher.MessageFilter.Match%2A> 方法用于确定消息是否满足筛选器的条件。</span><span class="sxs-lookup"><span data-stu-id="e54c4-107">The <xref:System.ServiceModel.Dispatcher.MessageFilter.Match%2A> methods are used to determine if a message satisfies a filter.</span></span>  
  
 <span data-ttu-id="e54c4-108">一旦构造筛选器，筛选器使用的条件无法更改，因为筛选器表无法检测更改。</span><span class="sxs-lookup"><span data-stu-id="e54c4-108">The criteria used by a filter cannot be changed once the filter is constructed because the filter tables have no way to detect a change.</span></span> <span data-ttu-id="e54c4-109">修改筛选器的条件的唯一方法是构造一个新的筛选器，然后删除现有筛选器。</span><span class="sxs-lookup"><span data-stu-id="e54c4-109">The only way to modify the criteria of a filter is to construct a new one and delete the existing filter.</span></span>  
  
 <span data-ttu-id="e54c4-110">以下类实现 `abstract`<xref:System.ServiceModel.Dispatcher.MessageFilter> 类：</span><span class="sxs-lookup"><span data-stu-id="e54c4-110">The following classes implement the `abstract`<xref:System.ServiceModel.Dispatcher.MessageFilter> class:</span></span>  
  
-   <span data-ttu-id="e54c4-111"><xref:System.ServiceModel.Dispatcher.XPathMessageFilter> 使用 XPath 1.0 表达式来指定匹配的条件。</span><span class="sxs-lookup"><span data-stu-id="e54c4-111"><xref:System.ServiceModel.Dispatcher.XPathMessageFilter> uses an XPath 1.0 expression to specify the criteria for a match.</span></span>  
  
-   <span data-ttu-id="e54c4-112"><xref:System.ServiceModel.Dispatcher.MatchAllMessageFilter> 与所有消息相匹配。</span><span class="sxs-lookup"><span data-stu-id="e54c4-112"><xref:System.ServiceModel.Dispatcher.MatchAllMessageFilter> matches all messages.</span></span>  
  
-   <span data-ttu-id="e54c4-113"><xref:System.ServiceModel.Dispatcher.MatchNoneMessageFilter> 与所有消息都不匹配。</span><span class="sxs-lookup"><span data-stu-id="e54c4-113"><xref:System.ServiceModel.Dispatcher.MatchNoneMessageFilter> matches none of the messages.</span></span>  
  
-   <span data-ttu-id="e54c4-114"><xref:System.ServiceModel.Dispatcher.ActionMessageFilter> 测试消息操作是否为指定的操作集之一。</span><span class="sxs-lookup"><span data-stu-id="e54c4-114"><xref:System.ServiceModel.Dispatcher.ActionMessageFilter> tests whether the action of a message is one of a specified set of actions.</span></span>  
  
-   <span data-ttu-id="e54c4-115"><xref:System.ServiceModel.Dispatcher.EndpointAddressMessageFilter> 测试消息是否满足指定的终结点地址。</span><span class="sxs-lookup"><span data-stu-id="e54c4-115"><xref:System.ServiceModel.Dispatcher.EndpointAddressMessageFilter> tests whether a message satisfies a specified endpoint address.</span></span>  
  
 <span data-ttu-id="e54c4-116"><xref:System.ServiceModel.Channels.ChannelListenerBase%601> 是一个 `abstract` 基类，可用于编写非队列侦听程序。</span><span class="sxs-lookup"><span data-stu-id="e54c4-116"><xref:System.ServiceModel.Channels.ChannelListenerBase%601> is an `abstract` base class that you can use for writing non-queuing listeners.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected MessageFilter ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.MessageFilter.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; MessageFilter();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e54c4-117">在派生类中调用时，初始化 <see cref="T:System.ServiceModel.Dispatcher.MessageFilter" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="e54c4-117">When called in a derived class, initializes a new instance of the <see cref="T:System.ServiceModel.Dispatcher.MessageFilter" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e54c4-118">构造函数受保护，因此只有从 <xref:System.ServiceModel.Dispatcher.MessageFilter> 派生的筛选器可以被实例化。</span><span class="sxs-lookup"><span data-stu-id="e54c4-118">The constructor is protected so that only filters that derive from <xref:System.ServiceModel.Dispatcher.MessageFilter> can be instantiated.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateFilterTable&lt;FilterData&gt;">
      <MemberSignature Language="C#" Value="protected internal virtual System.ServiceModel.Dispatcher.IMessageFilterTable&lt;FilterData&gt; CreateFilterTable&lt;FilterData&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance class System.ServiceModel.Dispatcher.IMessageFilterTable`1&lt;!!FilterData&gt; CreateFilterTable&lt;FilterData&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.MessageFilter.CreateFilterTable``1" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function CreateFilterTable(Of FilterData) () As IMessageFilterTable(Of FilterData)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA;generic &lt;typename FilterData&gt;&#xA; virtual System::ServiceModel::Dispatcher::IMessageFilterTable&lt;FilterData&gt; ^ CreateFilterTable();" />
      <MemberSignature Language="F#" Value="abstract member CreateFilterTable : unit -&gt; System.ServiceModel.Dispatcher.IMessageFilterTable&lt;'FilterData&gt;&#xA;override this.CreateFilterTable : unit -&gt; System.ServiceModel.Dispatcher.IMessageFilterTable&lt;'FilterData&gt;" Usage="messageFilter.CreateFilterTable " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Dispatcher.IMessageFilterTable&lt;FilterData&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="FilterData" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="FilterData"><span data-ttu-id="e54c4-119">与表中的筛选器关联的数据。</span><span class="sxs-lookup"><span data-stu-id="e54c4-119">Data associated with the filters in the table.</span></span></typeparam>
        <summary><span data-ttu-id="e54c4-120">创建与指定类型的数据相关联的筛选器的筛选器表。</span><span class="sxs-lookup"><span data-stu-id="e54c4-120">Creates a filter table for a filter that has a specified type of data associated with it.</span></span></summary>
        <returns><span data-ttu-id="e54c4-121">与 <see cref="T:System.ServiceModel.Dispatcher.IMessageFilterTable`1" /> 关联的筛选器可以添加到的 <paramref name="FilterData" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="e54c4-121">An <see cref="T:System.ServiceModel.Dispatcher.IMessageFilterTable`1" /> object to which filters associated with <paramref name="FilterData" /> can be added.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e54c4-122">此方法应由 <xref:System.ServiceModel.Dispatcher.MessageFilterTable%601> 调用。</span><span class="sxs-lookup"><span data-stu-id="e54c4-122">This method is intended to be called by <xref:System.ServiceModel.Dispatcher.MessageFilterTable%601>.</span></span> <span data-ttu-id="e54c4-123">用户应通过调用筛选器表的构造函数来创建筛选器表。</span><span class="sxs-lookup"><span data-stu-id="e54c4-123">Users should create a filter table by calling a constructor for the filter table.</span></span> <span data-ttu-id="e54c4-124">此方法的默认实现返回筛选器表，该表按顺序调用每个筛选器的 <xref:System.ServiceModel.Dispatcher.MessageFilter.Match%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="e54c4-124">The default implementation of this method returns a filter table that calls the <xref:System.ServiceModel.Dispatcher.MessageFilter.Match%2A> method of each filter sequentially.</span></span> <span data-ttu-id="e54c4-125">当实现筛选器时，重写此方法来与自定义筛选器表相关联。</span><span class="sxs-lookup"><span data-stu-id="e54c4-125">Override this method to associate a custom filter table when implementing a filter.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Match">
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="e54c4-126">在派生类中被重写时，测试消息或缓冲的消息是否满足筛选器的条件。</span><span class="sxs-lookup"><span data-stu-id="e54c4-126">When overridden in a derived class, tests whether a message or a buffered message satisfies the criteria of a filter.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e54c4-127">两个重载之间的区别是一个使用 <xref:System.ServiceModel.Channels.Message> 参数，但不允许检查正文。</span><span class="sxs-lookup"><span data-stu-id="e54c4-127">The difference between the two overloads is that one takes a <xref:System.ServiceModel.Channels.Message> parameter and is not permitted to examine the body.</span></span> <span data-ttu-id="e54c4-128">另一个使用 <xref:System.ServiceModel.Channels.MessageBuffer> 参数，并且可以检查消息的任何部分。</span><span class="sxs-lookup"><span data-stu-id="e54c4-128">The other takes a <xref:System.ServiceModel.Channels.MessageBuffer> parameter and can examine any part of the message.</span></span> <span data-ttu-id="e54c4-129">消息头自动缓冲，并且无需使用即可由筛选器检查。</span><span class="sxs-lookup"><span data-stu-id="e54c4-129">Message headers are automatically buffered and can be inspected by a filter without being consumed.</span></span> <span data-ttu-id="e54c4-130">不过，如果由筛选器检查正文，则必须缓冲整个消息，因为查询可以使用未缓冲的消息正文并破坏其内容。</span><span class="sxs-lookup"><span data-stu-id="e54c4-130">But if the body is to be inspected by a filter, then the entire message must be buffered because an unbuffered message body can be consumed by a query and its contents destroyed.</span></span>  
  
 <span data-ttu-id="e54c4-131">如果不需要检查正文，请使用 <xref:System.ServiceModel.Dispatcher.MessageFilter.Match%2A>。</span><span class="sxs-lookup"><span data-stu-id="e54c4-131">Use <xref:System.ServiceModel.Dispatcher.MessageFilter.Match%2A> if examination of the body is not required.</span></span> <span data-ttu-id="e54c4-132">如果需要检查正文，请使用 <xref:System.ServiceModel.Dispatcher.MessageFilter.Match%2A>。</span><span class="sxs-lookup"><span data-stu-id="e54c4-132">Use <xref:System.ServiceModel.Dispatcher.MessageFilter.Match%2A> if examination of the message body is required.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="e54c4-133">
            <see langword="Null" /> 消息无效，将导致引发 <see cref="T:System.ArgumentNullException" />。</span><span class="sxs-lookup"><span data-stu-id="e54c4-133">
            <see langword="Null" /> messages are invalid, and should cause an <see cref="T:System.ArgumentNullException" /> to be thrown.</span></span></para></block>
      </Docs>
    </MemberGroup>
    <Member MemberName="Match">
      <MemberSignature Language="C#" Value="public abstract bool Match (System.ServiceModel.Channels.Message message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Match(class System.ServiceModel.Channels.Message message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.MessageFilter.Match(System.ServiceModel.Channels.Message)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Match (message As Message) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract bool Match(System::ServiceModel::Channels::Message ^ message);" />
      <MemberSignature Language="F#" Value="abstract member Match : System.ServiceModel.Channels.Message -&gt; bool" Usage="messageFilter.Match message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.ServiceModel.Channels.Message" />
      </Parameters>
      <Docs>
        <param name="message"><span data-ttu-id="e54c4-134">要测试的 <see cref="T:System.ServiceModel.Channels.Message" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="e54c4-134">The <see cref="T:System.ServiceModel.Channels.Message" /> object to test.</span></span></param>
        <summary><span data-ttu-id="e54c4-135">在派生类中被重写时，测试消息是否满足筛选器的条件。</span><span class="sxs-lookup"><span data-stu-id="e54c4-135">When overridden in a derived class, tests whether a message satisfies the filter criteria.</span></span> <span data-ttu-id="e54c4-136">无法检查正文。</span><span class="sxs-lookup"><span data-stu-id="e54c4-136">The body cannot be examined.</span></span></summary>
        <returns><span data-ttu-id="e54c4-137">如果 <see cref="T:System.ServiceModel.Channels.Message" /> 对象满足筛选器的条件，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e54c4-137"><see langword="true" /> if the <see cref="T:System.ServiceModel.Channels.Message" /> object satisfies the filter criteria; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e54c4-138">此方法无法检查消息正文的内容。</span><span class="sxs-lookup"><span data-stu-id="e54c4-138">This method cannot inspect the contents of the message body.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="e54c4-139">如果筛选器试图检查未缓冲的消息的正文，则筛选器必须引发 <see cref="T:System.ServiceModel.Dispatcher.InvalidBodyAccessException" />。</span><span class="sxs-lookup"><span data-stu-id="e54c4-139">If the filter attempts to examine the body of an unbuffered message, then the filter must throw an <see cref="T:System.ServiceModel.Dispatcher.InvalidBodyAccessException" />.</span></span> <span data-ttu-id="e54c4-140">它不应返回 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e54c4-140">It should not return <see langword="false" />.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="Match">
      <MemberSignature Language="C#" Value="public abstract bool Match (System.ServiceModel.Channels.MessageBuffer buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Match(class System.ServiceModel.Channels.MessageBuffer buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.MessageFilter.Match(System.ServiceModel.Channels.MessageBuffer)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Match (buffer As MessageBuffer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract bool Match(System::ServiceModel::Channels::MessageBuffer ^ buffer);" />
      <MemberSignature Language="F#" Value="abstract member Match : System.ServiceModel.Channels.MessageBuffer -&gt; bool" Usage="messageFilter.Match buffer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.ServiceModel.Channels.MessageBuffer" />
      </Parameters>
      <Docs>
        <param name="buffer"><span data-ttu-id="e54c4-141">要测试的 <see cref="T:System.ServiceModel.Channels.MessageBuffer" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="e54c4-141">The <see cref="T:System.ServiceModel.Channels.MessageBuffer" /> object to test.</span></span></param>
        <summary><span data-ttu-id="e54c4-142">在派生类中被重写时，测试缓冲的消息是否满足筛选器的条件。</span><span class="sxs-lookup"><span data-stu-id="e54c4-142">When overridden in a derived class, tests whether a buffered message satisfies the criteria of a filter.</span></span></summary>
        <returns><span data-ttu-id="e54c4-143">如果 <see cref="T:System.ServiceModel.Channels.MessageBuffer" /> 对象满足筛选器的条件，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e54c4-143"><see langword="true" /> if the <see cref="T:System.ServiceModel.Channels.MessageBuffer" /> object satisfies the filter criteria; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e54c4-144">如果由筛选器检查正文，则必须完全缓冲该消息。</span><span class="sxs-lookup"><span data-stu-id="e54c4-144">The message must be fully buffered if the body is to be inspected by the filter.</span></span> <span data-ttu-id="e54c4-145"><xref:System.ServiceModel.Channels.MessageBuffer> 的正文被完全缓冲，因此可以由筛选器检查。</span><span class="sxs-lookup"><span data-stu-id="e54c4-145">The body of the <xref:System.ServiceModel.Channels.MessageBuffer> is fully buffered and therefore can be inspected by a filter.</span></span> <span data-ttu-id="e54c4-146">未经完全缓冲的 <xref:System.ServiceModel.Channels.Message> 的正文，可能会由筛选器检查来使用。</span><span class="sxs-lookup"><span data-stu-id="e54c4-146">The body of a <xref:System.ServiceModel.Channels.Message> that has not been fully buffered may be consumed by the filter inspection.</span></span> <span data-ttu-id="e54c4-147"><xref:System.ServiceModel.Channels.Message> 的标头元素自动被缓冲，因此无需使用即可进行检查。</span><span class="sxs-lookup"><span data-stu-id="e54c4-147">The header element of a <xref:System.ServiceModel.Channels.Message> is automatically buffered and therefore can be inspected without being consumed.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
