<Type Name="MessageFilter" FullName="System.ServiceModel.Dispatcher.MessageFilter">
  <Metadata><Meta Name="ms.openlocfilehash" Value="f807a3ce5ec30d45f0519f584e683668abf55dc3" /><Meta Name="ms.sourcegitcommit" Value="b53d35b4a410c949742abd4c6a989d1af5357bca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="86570932" /></Metadata><TypeSignature Language="C#" Value="public abstract class MessageFilter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit MessageFilter extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Dispatcher.MessageFilter" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class MessageFilter" />
  <TypeSignature Language="C++ CLI" Value="public ref class MessageFilter abstract" />
  <TypeSignature Language="F#" Value="type MessageFilter = class" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[System.Runtime.Serialization.DataContract]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.Serialization.DataContract&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[System.Runtime.Serialization.KnownType(typeof(System.ServiceModel.Dispatcher.ActionMessageFilter))]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.Serialization.KnownType(typeof(System.ServiceModel.Dispatcher.ActionMessageFilter))&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[System.Runtime.Serialization.KnownType(typeof(System.ServiceModel.Dispatcher.XPathMessageFilter))]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.Serialization.KnownType(typeof(System.ServiceModel.Dispatcher.XPathMessageFilter))&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[System.Runtime.Serialization.KnownType(typeof(System.ServiceModel.Dispatcher.MatchAllMessageFilter))]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.Serialization.KnownType(typeof(System.ServiceModel.Dispatcher.MatchAllMessageFilter))&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[System.Runtime.Serialization.KnownType(typeof(System.ServiceModel.Dispatcher.MatchNoneMessageFilter))]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.Serialization.KnownType(typeof(System.ServiceModel.Dispatcher.MatchNoneMessageFilter))&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>用于查询消息的筛选器的不同的类的 <see langword="abstract" /> 基类。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceModel.Dispatcher.MessageFilter> 是一个 `abstract` 类，开发人员实现此类来指定用于检查消息的条件。 通常情况下，终结点应用程序使用筛选器根据检查消息的某部分来确定如何处理消息。 例如，查询过程可以使用 XPath 1.0 查询来检查已知标头的优先级元素，以确定是否将消息移动到队列的靠前位置。  
  
 筛选器存储在实现 <xref:System.ServiceModel.Dispatcher.IMessageFilterTable%601> 的筛选器表中。 表中的每个筛选器与指定的筛选器数据相关联，这些消息可用于指示当消息与筛选器相匹配时采取的操作。 <xref:System.ServiceModel.Dispatcher.MessageFilter.Match%2A> 方法用于确定消息是否满足筛选器的条件。  
  
 一旦构造筛选器，筛选器使用的条件无法更改，因为筛选器表无法检测更改。 修改筛选器的条件的唯一方法是构造一个新的筛选器，然后删除现有筛选器。  
  
 以下类实现 `abstract`<xref:System.ServiceModel.Dispatcher.MessageFilter> 类：  
  
-   <xref:System.ServiceModel.Dispatcher.XPathMessageFilter> 使用 XPath 1.0 表达式来指定匹配的条件。  
  
-   <xref:System.ServiceModel.Dispatcher.MatchAllMessageFilter> 与所有消息相匹配。  
  
-   <xref:System.ServiceModel.Dispatcher.MatchNoneMessageFilter> 与所有消息都不匹配。  
  
-   <xref:System.ServiceModel.Dispatcher.ActionMessageFilter> 测试消息操作是否为指定的操作集之一。  
  
-   <xref:System.ServiceModel.Dispatcher.EndpointAddressMessageFilter> 测试消息是否满足指定的终结点地址。  
  
 <xref:System.ServiceModel.Channels.ChannelListenerBase%601> 是一个 `abstract` 基类，可用于编写非队列侦听程序。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected MessageFilter ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.MessageFilter.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; MessageFilter();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>在派生类中调用时，初始化 <see cref="T:System.ServiceModel.Dispatcher.MessageFilter" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 构造函数受保护，因此只有从 <xref:System.ServiceModel.Dispatcher.MessageFilter> 派生的筛选器可以被实例化。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateFilterTable&lt;FilterData&gt;">
      <MemberSignature Language="C#" Value="protected internal virtual System.ServiceModel.Dispatcher.IMessageFilterTable&lt;FilterData&gt; CreateFilterTable&lt;FilterData&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance class System.ServiceModel.Dispatcher.IMessageFilterTable`1&lt;!!FilterData&gt; CreateFilterTable&lt;FilterData&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.MessageFilter.CreateFilterTable``1" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function CreateFilterTable(Of FilterData) () As IMessageFilterTable(Of FilterData)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA;generic &lt;typename FilterData&gt;&#xA; virtual System::ServiceModel::Dispatcher::IMessageFilterTable&lt;FilterData&gt; ^ CreateFilterTable();" />
      <MemberSignature Language="F#" Value="abstract member CreateFilterTable : unit -&gt; System.ServiceModel.Dispatcher.IMessageFilterTable&lt;'FilterData&gt;&#xA;override this.CreateFilterTable : unit -&gt; System.ServiceModel.Dispatcher.IMessageFilterTable&lt;'FilterData&gt;" Usage="messageFilter.CreateFilterTable " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Dispatcher.IMessageFilterTable&lt;FilterData&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="FilterData" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="FilterData">与表中的筛选器关联的数据。</typeparam>
        <summary>创建与指定类型的数据相关联的筛选器的筛选器表。</summary>
        <returns>与 <see cref="T:System.ServiceModel.Dispatcher.IMessageFilterTable`1" /> 关联的筛选器可以添加到的 <paramref name="FilterData" /> 对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法应由 <xref:System.ServiceModel.Dispatcher.MessageFilterTable%601> 调用。 用户应通过调用筛选器表的构造函数来创建筛选器表。 此方法的默认实现返回筛选器表，该表按顺序调用每个筛选器的 <xref:System.ServiceModel.Dispatcher.MessageFilter.Match%2A> 方法。 当实现筛选器时，重写此方法来与自定义筛选器表相关联。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Match">
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>在派生类中被重写时，测试消息或缓冲的消息是否满足筛选器的条件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 两个重载之间的区别是一个使用 <xref:System.ServiceModel.Channels.Message> 参数，但不允许检查正文。 另一个使用 <xref:System.ServiceModel.Channels.MessageBuffer> 参数，并且可以检查消息的任何部分。 消息头自动缓冲，并且无需使用即可由筛选器检查。 不过，如果由筛选器检查正文，则必须缓冲整个消息，因为查询可以使用未缓冲的消息正文并破坏其内容。  
  
 如果不需要检查正文，请使用 <xref:System.ServiceModel.Dispatcher.MessageFilter.Match%2A>。 如果需要检查正文，请使用 <xref:System.ServiceModel.Dispatcher.MessageFilter.Match%2A>。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>
            <see langword="Null" /> 消息无效，将导致引发 <see cref="T:System.ArgumentNullException" />。</para></block>
      </Docs>
    </MemberGroup>
    <Member MemberName="Match">
      <MemberSignature Language="C#" Value="public abstract bool Match (System.ServiceModel.Channels.Message message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Match(class System.ServiceModel.Channels.Message message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.MessageFilter.Match(System.ServiceModel.Channels.Message)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Match (message As Message) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract bool Match(System::ServiceModel::Channels::Message ^ message);" />
      <MemberSignature Language="F#" Value="abstract member Match : System.ServiceModel.Channels.Message -&gt; bool" Usage="messageFilter.Match message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.ServiceModel.Channels.Message" />
      </Parameters>
      <Docs>
        <param name="message">要测试的 <see cref="T:System.ServiceModel.Channels.Message" /> 对象。</param>
        <summary>在派生类中被重写时，测试消息是否满足筛选器的条件。 无法检查正文。</summary>
        <returns>如果 <see cref="T:System.ServiceModel.Channels.Message" /> 对象满足筛选器的条件，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法无法检查消息正文的内容。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>如果筛选器试图检查未缓冲的消息的正文，则筛选器必须引发 <see cref="T:System.ServiceModel.Dispatcher.InvalidBodyAccessException" />。 它不应返回 <see langword="false" />。</para></block>
      </Docs>
    </Member>
    <Member MemberName="Match">
      <MemberSignature Language="C#" Value="public abstract bool Match (System.ServiceModel.Channels.MessageBuffer buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Match(class System.ServiceModel.Channels.MessageBuffer buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.MessageFilter.Match(System.ServiceModel.Channels.MessageBuffer)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Match (buffer As MessageBuffer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract bool Match(System::ServiceModel::Channels::MessageBuffer ^ buffer);" />
      <MemberSignature Language="F#" Value="abstract member Match : System.ServiceModel.Channels.MessageBuffer -&gt; bool" Usage="messageFilter.Match buffer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.ServiceModel.Channels.MessageBuffer" />
      </Parameters>
      <Docs>
        <param name="buffer">要测试的 <see cref="T:System.ServiceModel.Channels.MessageBuffer" /> 对象。</param>
        <summary>在派生类中被重写时，测试缓冲的消息是否满足筛选器的条件。</summary>
        <returns>如果 <see cref="T:System.ServiceModel.Channels.MessageBuffer" /> 对象满足筛选器的条件，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果由筛选器检查正文，则必须完全缓冲该消息。 <xref:System.ServiceModel.Channels.MessageBuffer> 的正文被完全缓冲，因此可以由筛选器检查。 未经完全缓冲的 <xref:System.ServiceModel.Channels.Message> 的正文，可能会由筛选器检查来使用。 <xref:System.ServiceModel.Channels.Message> 的标头元素自动被缓冲，因此无需使用即可进行检查。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
