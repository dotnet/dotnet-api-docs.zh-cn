<Type Name="PrefixEndpointAddressMessageFilter" FullName="System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter">
  <Metadata><Meta Name="ms.openlocfilehash" Value="ba7f7606bbfe5c2e0fef2ca33f8c3c5c352c7d66" /><Meta Name="ms.sourcegitcommit" Value="b53d35b4a410c949742abd4c6a989d1af5357bca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="86570646" /></Metadata><TypeSignature Language="C#" Value="public class PrefixEndpointAddressMessageFilter : System.ServiceModel.Dispatcher.MessageFilter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit PrefixEndpointAddressMessageFilter extends System.ServiceModel.Dispatcher.MessageFilter" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter" />
  <TypeSignature Language="VB.NET" Value="Public Class PrefixEndpointAddressMessageFilter&#xA;Inherits MessageFilter" />
  <TypeSignature Language="C++ CLI" Value="public ref class PrefixEndpointAddressMessageFilter : System::ServiceModel::Dispatcher::MessageFilter" />
  <TypeSignature Language="F#" Value="type PrefixEndpointAddressMessageFilter = class&#xA;    inherit MessageFilter" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ServiceModel.Dispatcher.MessageFilter</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="0467c-101">表示一个查询，该查询使用 URI 组件的最长前缀匹配来测试消息是否与 EndpointAddress 相匹配\*\*。</span><span class="sxs-lookup"><span data-stu-id="0467c-101">Represents a query that tests whether a message matches an EndpointAddress using a *Longest-Prefix Match* for the URI component.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0467c-102"><xref:System.ServiceModel.EndpointAddress> 对象包括一个 URI 和一个可选的寻址标头的集合。</span><span class="sxs-lookup"><span data-stu-id="0467c-102">An <xref:System.ServiceModel.EndpointAddress> object includes a URI and an optional collection of addressing headers.</span></span> <span data-ttu-id="0467c-103">已规范化寻址标题和消息标题以进行相等比较。</span><span class="sxs-lookup"><span data-stu-id="0467c-103">The addressing and message headers are canonicalized to be compared for equality.</span></span> <span data-ttu-id="0467c-104">如果参数在 <xref:System.ServiceModel.EndpointAddress> 中出现的次数多于一次，则相应的标头必须在消息中至少显示相同的次数。</span><span class="sxs-lookup"><span data-stu-id="0467c-104">If a parameter appears more than once in an <xref:System.ServiceModel.EndpointAddress>, the corresponding header must appear in the message at least that many times.</span></span>  
  
 <span data-ttu-id="0467c-105">此筛选器执行与相同的查询 <xref:System.ServiceModel.Dispatcher.EndpointAddressMessageFilter> ，不同之处在于测试消息是否与终结点地址匹配是通过 *最长前缀匹配*来完成的。</span><span class="sxs-lookup"><span data-stu-id="0467c-105">This filter performs the same query as <xref:System.ServiceModel.Dispatcher.EndpointAddressMessageFilter>, except that the test for whether a message matches an endpoint address is done by a *Longest-Prefix Match*.</span></span> <span data-ttu-id="0467c-106">这表示筛选器中指定的 URI 不需要与消息的 URI 完全匹配，不过必须作为前缀包含在该 URI 中。</span><span class="sxs-lookup"><span data-stu-id="0467c-106">This means that the URI specified in the filter does not have to match the message's URI exactly, but must be contained in that URI as a prefix.</span></span> <span data-ttu-id="0467c-107">例如，如果筛选器指定地址“www.foo.com”，并且消息是发送给“www.foo.com/customerA”，则将满足筛选器查询条件的 URI 部分。</span><span class="sxs-lookup"><span data-stu-id="0467c-107">For example, if a filter specifies the address "www.foo.com", and a message is addressed to "www.foo.com/customerA", then the URI part of the filter query condition will be met.</span></span> <span data-ttu-id="0467c-108">不过，筛选器查询的标头部分仍需要完成。</span><span class="sxs-lookup"><span data-stu-id="0467c-108">However, the header portion of the filter query still has to be done.</span></span>  
  
 <span data-ttu-id="0467c-109">Internet 信息服务 (IIS) 和基础文件系统（NTFS 或 FAT）不区分大小写。</span><span class="sxs-lookup"><span data-stu-id="0467c-109">Internet Information Services (IIS) and the underlying file system (NTFS or FAT) are case-insensitive.</span></span> <span data-ttu-id="0467c-110">此类进行的 URI 比较也不区分大小写。</span><span class="sxs-lookup"><span data-stu-id="0467c-110">URI comparisons done by this class are also case-insensitive.</span></span> <span data-ttu-id="0467c-111">例如， `http://www.microsoft.com` 将计算为等于 `http://WWW.microsoft.com` 。</span><span class="sxs-lookup"><span data-stu-id="0467c-111">So, for example, `http://www.microsoft.com` is evaluated as equal to `http://WWW.microsoft.com`.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="0467c-112">初始化 <see cref="T:System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="0467c-112">Initializes a new instance of the <see cref="T:System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PrefixEndpointAddressMessageFilter (System.ServiceModel.EndpointAddress address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.ServiceModel.EndpointAddress address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter.#ctor(System.ServiceModel.EndpointAddress)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (address As EndpointAddress)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PrefixEndpointAddressMessageFilter(System::ServiceModel::EndpointAddress ^ address);" />
      <MemberSignature Language="F#" Value="new System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter : System.ServiceModel.EndpointAddress -&gt; System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter" Usage="new System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter address" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="address" Type="System.ServiceModel.EndpointAddress" />
      </Parameters>
      <Docs>
        <param name="address"><span data-ttu-id="0467c-113">用以测试消息的 <see cref="T:System.ServiceModel.EndpointAddress" />。</span><span class="sxs-lookup"><span data-stu-id="0467c-113">The <see cref="T:System.ServiceModel.EndpointAddress" /> against which messages are tested.</span></span></param>
        <summary><span data-ttu-id="0467c-114">初始化 <see cref="T:System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="0467c-114">Initializes a new instance of the <see cref="T:System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0467c-115"><paramref name="address" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="0467c-115"><paramref name="address" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PrefixEndpointAddressMessageFilter (System.ServiceModel.EndpointAddress address, bool includeHostNameInComparison);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.ServiceModel.EndpointAddress address, bool includeHostNameInComparison) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter.#ctor(System.ServiceModel.EndpointAddress,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (address As EndpointAddress, includeHostNameInComparison As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PrefixEndpointAddressMessageFilter(System::ServiceModel::EndpointAddress ^ address, bool includeHostNameInComparison);" />
      <MemberSignature Language="F#" Value="new System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter : System.ServiceModel.EndpointAddress * bool -&gt; System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter" Usage="new System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter (address, includeHostNameInComparison)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="address" Type="System.ServiceModel.EndpointAddress" />
        <Parameter Name="includeHostNameInComparison" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="address"><span data-ttu-id="0467c-116">用以测试消息的 <see cref="T:System.ServiceModel.EndpointAddress" />。</span><span class="sxs-lookup"><span data-stu-id="0467c-116">The <see cref="T:System.ServiceModel.EndpointAddress" /> against which messages are tested.</span></span></param>
        <param name="includeHostNameInComparison"><span data-ttu-id="0467c-117">如果主机名称包含在终结点地址比较中，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="0467c-117"><see langword="true" /> if the host name is included in the endpoint address comparison; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="0467c-118">初始化 <see cref="T:System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="0467c-118">Initializes a new instance of the <see cref="T:System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="0467c-119">如果在本地计算机上安装了 Web 服务，则有多种等效方法引用该服务，其中包括：</span><span class="sxs-lookup"><span data-stu-id="0467c-119">If you have a web service installed on your local machine, there are many equivalent ways to reference it, including the following:</span></span>  

- `http://localhost/foo.svc`
- `http://192.168.1.100/foo.svc`
- `http://[my-machine-name]/foo.svc`
- `http://[my-machine-name].[my-company].com/foo.svc`
  
 <span data-ttu-id="0467c-120">如果 `includeHostNameInComparison` 参数的值为 `false`，则以上 URI 都解析为同一终结点。</span><span class="sxs-lookup"><span data-stu-id="0467c-120">If the value of the `includeHostNameInComparison` parameter is `false`, the above URIs all resolve to the same endpoint.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0467c-121"><paramref name="address" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="0467c-121"><paramref name="address" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Address">
      <MemberSignature Language="C#" Value="public System.ServiceModel.EndpointAddress Address { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ServiceModel.EndpointAddress Address" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter.Address" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Address As EndpointAddress" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ServiceModel::EndpointAddress ^ Address { System::ServiceModel::EndpointAddress ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Address : System.ServiceModel.EndpointAddress" Usage="System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter.Address" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ServiceModel.EndpointAddress</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0467c-122">获取 <see cref="T:System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter" /> 用以测试消息的终结点地址。</span><span class="sxs-lookup"><span data-stu-id="0467c-122">Gets the Endpoint Address that the <see cref="T:System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter" /> tests messages against.</span></span></summary>
        <value><span data-ttu-id="0467c-123"><see cref="T:System.ServiceModel.EndpointAddress" /> 用以测试消息的 <see cref="T:System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter" />。</span><span class="sxs-lookup"><span data-stu-id="0467c-123">The <see cref="T:System.ServiceModel.EndpointAddress" /> that the <see cref="T:System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter" /> tests messages against.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateFilterTable&lt;FilterData&gt;">
      <MemberSignature Language="C#" Value="protected internal override System.ServiceModel.Dispatcher.IMessageFilterTable&lt;FilterData&gt; CreateFilterTable&lt;FilterData&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance class System.ServiceModel.Dispatcher.IMessageFilterTable`1&lt;!!FilterData&gt; CreateFilterTable&lt;FilterData&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter.CreateFilterTable``1" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Function CreateFilterTable(Of FilterData) () As IMessageFilterTable(Of FilterData)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA;generic &lt;typename FilterData&gt;&#xA; override System::ServiceModel::Dispatcher::IMessageFilterTable&lt;FilterData&gt; ^ CreateFilterTable();" />
      <MemberSignature Language="F#" Value="override this.CreateFilterTable : unit -&gt; System.ServiceModel.Dispatcher.IMessageFilterTable&lt;'FilterData&gt;" Usage="prefixEndpointAddressMessageFilter.CreateFilterTable " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Dispatcher.IMessageFilterTable&lt;FilterData&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="FilterData" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="FilterData"><span data-ttu-id="0467c-124">与表中的筛选器关联的数据。</span><span class="sxs-lookup"><span data-stu-id="0467c-124">Data associated with the filters in the table.</span></span></typeparam>
        <summary><span data-ttu-id="0467c-125">创建一个可同时利用多个终结点地址对一个消息进行测试的新筛选器表。</span><span class="sxs-lookup"><span data-stu-id="0467c-125">Creates a new filter table that tests a message against multiple endpoint addresses simultaneously.</span></span></summary>
        <returns><span data-ttu-id="0467c-126">实现 <see cref="T:System.ServiceModel.Dispatcher.IMessageFilterTable`1" /> 接口的对象，该接口包含带有关联 <see cref="T:System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter" /> 的 <paramref name="FilterData" />。</span><span class="sxs-lookup"><span data-stu-id="0467c-126">An object that implements the <see cref="T:System.ServiceModel.Dispatcher.IMessageFilterTable`1" /> interface that can contain <see cref="T:System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter" />s with associated <paramref name="FilterData" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0467c-127">该方法返回 <xref:System.ServiceModel.Dispatcher.IMessageFilterTable%601> 的一个实例，该实例经过了优化，可测试特定消息终结点。</span><span class="sxs-lookup"><span data-stu-id="0467c-127">The method returns an instance of <xref:System.ServiceModel.Dispatcher.IMessageFilterTable%601> that is optimized to test for specific message endpoints.</span></span>  
  
 <span data-ttu-id="0467c-128">此方法应由 <xref:System.ServiceModel.Dispatcher.MessageFilterTable%601> 使用。</span><span class="sxs-lookup"><span data-stu-id="0467c-128">This method is intended to be used by <xref:System.ServiceModel.Dispatcher.MessageFilterTable%601>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IncludeHostNameInComparison">
      <MemberSignature Language="C#" Value="public bool IncludeHostNameInComparison { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IncludeHostNameInComparison" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter.IncludeHostNameInComparison" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IncludeHostNameInComparison As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IncludeHostNameInComparison { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IncludeHostNameInComparison : bool" Usage="System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter.IncludeHostNameInComparison" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0467c-129">获取一个值，该值指示在终结点地址比较中是否包含主机名称。</span><span class="sxs-lookup"><span data-stu-id="0467c-129">Gets a value that indicates whether the host name is included in the endpoint address comparison.</span></span></summary>
        <value><span data-ttu-id="0467c-130">如果主机名称包含在终结点地址比较中，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="0467c-130"><see langword="true" /> if the host name is included in the endpoint address comparison; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="0467c-131">如果在本地计算机上安装了 Web 服务，则有多种等效方法引用该服务，其中包括：</span><span class="sxs-lookup"><span data-stu-id="0467c-131">If you have a web service installed on your local machine, there are many equivalent ways to reference it, including the following:</span></span>  

- `http://localhost/foo.svc`
- `http://192.168.1.100/foo.svc`
- `http://[my-machine-name]/foo.svc`
- `http://[my-machine-name].[my-company].com/foo.svc`
  
 <span data-ttu-id="0467c-132">此属性的默认值为 `false`，因此上面的 URI 都解析为同一终结点，除非您更改此属性。</span><span class="sxs-lookup"><span data-stu-id="0467c-132">The default value of this property is `false`, so the above URIs all resolve to the same endpoint, unless you change this property.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Match">
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="0467c-133">测试消息或缓冲消息是否满足终结点筛选器的标准。</span><span class="sxs-lookup"><span data-stu-id="0467c-133">Tests whether a message or buffered message satisfies the criteria of the endpoint filter.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0467c-134">此方法的两个重载是等效的，因为此筛选器不检查消息正文，只检查地址，执行最长前缀匹配，然后检查标头。</span><span class="sxs-lookup"><span data-stu-id="0467c-134">The two overloads of this method are equivalent because this filter does not examine the message body, only the address, to do a longest-prefix match, and then the headers.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Match">
      <MemberSignature Language="C#" Value="public override bool Match (System.ServiceModel.Channels.Message message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Match(class System.ServiceModel.Channels.Message message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter.Match(System.ServiceModel.Channels.Message)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Match (message As Message) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Match(System::ServiceModel::Channels::Message ^ message);" />
      <MemberSignature Language="F#" Value="override this.Match : System.ServiceModel.Channels.Message -&gt; bool" Usage="prefixEndpointAddressMessageFilter.Match message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.ServiceModel.Channels.Message" />
      </Parameters>
      <Docs>
        <param name="message"><span data-ttu-id="0467c-135">要测试的 <see cref="T:System.ServiceModel.Channels.Message" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="0467c-135">The <see cref="T:System.ServiceModel.Channels.Message" /> object to test.</span></span></param>
        <summary><span data-ttu-id="0467c-136">测试消息是否满足指定的终结点地址。</span><span class="sxs-lookup"><span data-stu-id="0467c-136">Tests whether a message satisfies the specified endpoint address.</span></span></summary>
        <returns><span data-ttu-id="0467c-137">如果 <see cref="T:System.ServiceModel.Channels.Message" /> 对象满足筛选器中指定的终结点地址，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="0467c-137"><see langword="true" /> if the <see cref="T:System.ServiceModel.Channels.Message" /> object satisfies the endpoint address specified in the filter; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0467c-138">此方法的两个重载是等效的，因为此筛选器不检查消息正文，只检查地址，执行最长前缀匹配，然后检查标头。</span><span class="sxs-lookup"><span data-stu-id="0467c-138">The two overloads of this method are equivalent because this filter does not examine the message body, only the address, to do a longest-prefix match, and then the headers.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0467c-139"><paramref name="message" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="0467c-139"><paramref name="message" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Match">
      <MemberSignature Language="C#" Value="public override bool Match (System.ServiceModel.Channels.MessageBuffer messageBuffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Match(class System.ServiceModel.Channels.MessageBuffer messageBuffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter.Match(System.ServiceModel.Channels.MessageBuffer)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Match (messageBuffer As MessageBuffer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Match(System::ServiceModel::Channels::MessageBuffer ^ messageBuffer);" />
      <MemberSignature Language="F#" Value="override this.Match : System.ServiceModel.Channels.MessageBuffer -&gt; bool" Usage="prefixEndpointAddressMessageFilter.Match messageBuffer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="messageBuffer" Type="System.ServiceModel.Channels.MessageBuffer" />
      </Parameters>
      <Docs>
        <param name="messageBuffer"><span data-ttu-id="0467c-140">要测试的 <see cref="T:System.ServiceModel.Channels.MessageBuffer" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="0467c-140">The <see cref="T:System.ServiceModel.Channels.MessageBuffer" /> object to test.</span></span></param>
        <summary><span data-ttu-id="0467c-141">测试缓冲消息是否满足指定的终结点地址。</span><span class="sxs-lookup"><span data-stu-id="0467c-141">Tests whether a buffered message satisfies the specified endpoint address.</span></span></summary>
        <returns><span data-ttu-id="0467c-142">如果 <see cref="T:System.ServiceModel.Channels.MessageBuffer" /> 对象满足终结点地址，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="0467c-142"><see langword="true" /> if the <see cref="T:System.ServiceModel.Channels.MessageBuffer" /> object satisfies the endpoint address; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0467c-143">此方法的两个重载是等效的，因为此筛选器不检查消息正文，只检查地址，执行最长前缀匹配，然后检查标头。</span><span class="sxs-lookup"><span data-stu-id="0467c-143">The two overloads of this method are equivalent because this filter does not examine the message body, only the address, to do a longest-prefix match, and then the headers.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="0467c-144"><paramref name="messageBuffer" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="0467c-144"><paramref name="messageBuffer" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>
