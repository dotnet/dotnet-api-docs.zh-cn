<Type Name="ServiceThrottle" FullName="System.ServiceModel.Dispatcher.ServiceThrottle">
  <Metadata><Meta Name="ms.openlocfilehash" Value="b0596f89bb4ffa60ca946fe6709da561abb50dee" /><Meta Name="ms.sourcegitcommit" Value="9506e50ec7beb4fa30206b9840dc546b035a6600" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/23/2020" /><Meta Name="ms.locfileid" Value="83953268" /></Metadata><TypeSignature Language="C#" Value="public sealed class ServiceThrottle" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ServiceThrottle extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Dispatcher.ServiceThrottle" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ServiceThrottle" />
  <TypeSignature Language="C++ CLI" Value="public ref class ServiceThrottle sealed" />
  <TypeSignature Language="F#" Value="type ServiceThrottle = class" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>控制服务的吞吐量以优化可用性和性能。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用 <xref:System.ServiceModel.Dispatcher.ServiceThrottle> 以优化服务的性能特征。 为服务配置 <xref:System.ServiceModel.Dispatcher.ServiceThrottle> 的最简单的方法是使用 <xref:System.ServiceModel.Description.ServiceThrottlingBehavior>，特别是从应用程序配置文件。  
  
 <xref:System.ServiceModel.Dispatcher.ServiceThrottle.MaxConcurrentCalls%2A> 属性指定 <xref:System.ServiceModel.ServiceHost> 对象中的所有调度程序对象的最大活动处理消息数。  
  
 <xref:System.ServiceModel.Dispatcher.ServiceThrottle.MaxConcurrentInstances%2A> 属性指定服务中 <xref:System.ServiceModel.InstanceContext> 对象的最大数目。  
  
 <xref:System.ServiceModel.Dispatcher.ServiceThrottle.MaxConcurrentSessions%2A> 属性指定单个 <xref:System.ServiceModel.ServiceHost> 可接受的最大会话数。  
  
> [!NOTE]
>  第一次调用时，会记录跟踪，且 <xref:System.ServiceModel.InstanceContext> 或会话会被插入等待队列。 第一个跟踪将记录为警告。  
  
   
  
## Examples  
 下面的代码示例通过引用应用程序配置文件中的 <xref:System.ServiceModel.Dispatcher.ServiceThrottle>，演示了 <xref:System.ServiceModel.Description.ServiceThrottlingBehavior> 的典型用法。 在这种情况下，对于一个到 <xref:System.ServiceModel.InstanceContext> 的连接，指定的值一次最多只能建立一个消息处理。 实际的用法必须根据经验确定。  
  
 [!code-xml[ServiceThrottlingBehavior#3](~/samples/snippets/csharp/VS_Snippets_CFX/servicethrottlingbehavior/cs/hostapplication.exe.config#3)]   
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="MaxConcurrentCalls">
      <MemberSignature Language="C#" Value="public int MaxConcurrentCalls { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MaxConcurrentCalls" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Dispatcher.ServiceThrottle.MaxConcurrentCalls" />
      <MemberSignature Language="VB.NET" Value="Public Property MaxConcurrentCalls As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int MaxConcurrentCalls { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.MaxConcurrentCalls : int with get, set" Usage="System.ServiceModel.Dispatcher.ServiceThrottle.MaxConcurrentCalls" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:System.ServiceModel.ServiceHost" /> 中所有调度程序对象的最大活动处理消息数。</summary>
        <value>服务中活动消息的上限。 默认值为 16 * 计算机中的处理器数。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceModel.Dispatcher.ServiceThrottle.MaxConcurrentCalls%2A> 属性指定 <xref:System.ServiceModel.ServiceHost> 对象中的所有调度程序对象的最大活动处理消息数。 每个通道都可以有一个挂起的消息，该消息在 <xref:System.ServiceModel.Dispatcher.ServiceThrottle.MaxConcurrentCalls%2A> Windows Communication Foundation （WCF）开始处理之前不会计算的值。  
  
> [!NOTE]
>  此属性的值超出限制一次，就会记录一个跟踪。  
  
   
  
## Examples  
 下面的代码示例通过引用应用程序配置文件中的 <xref:System.ServiceModel.Dispatcher.ServiceThrottle>，演示了 <xref:System.ServiceModel.Description.ServiceThrottlingBehavior> 的典型用法。 在这种情况下，对于一个到 <xref:System.ServiceModel.InstanceContext> 的连接，指定的值一次最多只能建立一个消息处理。 实际的用法必须根据经验确定。  
  
 [!code-xml[ServiceThrottlingBehavior#3](~/samples/snippets/csharp/VS_Snippets_CFX/servicethrottlingbehavior/cs/hostapplication.exe.config#3)]   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxConcurrentInstances">
      <MemberSignature Language="C#" Value="public int MaxConcurrentInstances { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MaxConcurrentInstances" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Dispatcher.ServiceThrottle.MaxConcurrentInstances" />
      <MemberSignature Language="VB.NET" Value="Public Property MaxConcurrentInstances As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int MaxConcurrentInstances { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.MaxConcurrentInstances : int with get, set" Usage="System.ServiceModel.Dispatcher.ServiceThrottle.MaxConcurrentInstances" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一次可执行的最大服务对象数。</summary>
        <value>服务中一次可执行的最大 <see cref="T:System.ServiceModel.InstanceContext" /> 对象数。 默认值等于最大并发调用数 + 最大并发会话数。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceModel.Dispatcher.ServiceThrottle.MaxConcurrentInstances%2A> 属性指定服务中 <xref:System.ServiceModel.InstanceContext> 对象的最大数目。 牢记 <xref:System.ServiceModel.Dispatcher.ServiceThrottle.MaxConcurrentInstances%2A> 属性和 <xref:System.ServiceModel.ServiceBehaviorAttribute.InstanceContextMode%2A> 属性之间的关系是很重要。 如果 <xref:System.ServiceModel.ServiceBehaviorAttribute.InstanceContextMode%2A> 为，则 <xref:System.ServiceModel.InstanceContextMode.PerSession> 结果值为会话总数。 如果 <xref:System.ServiceModel.ServiceBehaviorAttribute.InstanceContextMode%2A> 为 <xref:System.ServiceModel.InstanceContextMode.PerCall>，则结果值将为并发调用的数量。 如果消息到达时，<xref:System.ServiceModel.InstanceContext> 对象的数目已经达到最大数量，则将保存该消息，直至有 <xref:System.ServiceModel.InstanceContext> 对象关闭。  
  
> [!NOTE]
>  此属性的值超出限制一次，就会记录一个跟踪。 第一个跟踪将记录为警告。  
  
   
  
## Examples  
 下面的代码示例通过引用应用程序配置文件中的 <xref:System.ServiceModel.Dispatcher.ServiceThrottle>，演示了 <xref:System.ServiceModel.Description.ServiceThrottlingBehavior> 的典型用法。 在这种情况下，对于一个到 <xref:System.ServiceModel.InstanceContext> 的连接，指定的值一次最多只能建立一个消息处理。 实际的用法必须根据经验确定。  
  
 [!code-xml[ServiceThrottlingBehavior#3](~/samples/snippets/csharp/VS_Snippets_CFX/servicethrottlingbehavior/cs/hostapplication.exe.config#3)]   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxConcurrentSessions">
      <MemberSignature Language="C#" Value="public int MaxConcurrentSessions { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MaxConcurrentSessions" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Dispatcher.ServiceThrottle.MaxConcurrentSessions" />
      <MemberSignature Language="VB.NET" Value="Public Property MaxConcurrentSessions As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int MaxConcurrentSessions { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.MaxConcurrentSessions : int with get, set" Usage="System.ServiceModel.Dispatcher.ServiceThrottle.MaxConcurrentSessions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个指定 <see cref="T:System.ServiceModel.ServiceHost" /> 对象可一次接受的最大会话数的值。</summary>
        <value>服务主机可接受的最大会话数。 默认值为 100 * 计算机中的处理器数。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceModel.Dispatcher.ServiceThrottle.MaxConcurrentSessions%2A> 属性指定 <xref:System.ServiceModel.ServiceHost> 可接受的最大通道数。 每个侦听器对象都可以有一个挂起的通道，该通道不会计算的值， <xref:System.ServiceModel.Dispatcher.ServiceThrottle.MaxConcurrentSessions%2A> 除非 WCF 接受通道并开始处理消息。 在使用会话的方案中，此属性是最有用的。  
  
> [!NOTE]
>  此属性的值超出限制一次，就会记录一个跟踪。 第一个跟踪将记录为警告。  
  
 有关会话的详细信息，请参阅[使用会话](/dotnet/framework/wcf/using-sessions)。  
  
 通常，此属性是通过使用 <xref:System.ServiceModel.Description.ServiceThrottlingBehavior.MaxConcurrentSessions%2A?displayProperty=nameWithType> 属性来设置的。  
  
   
  
## Examples  
 下面的代码示例通过引用应用程序配置文件中的 <xref:System.ServiceModel.Dispatcher.ServiceThrottle>，演示了 <xref:System.ServiceModel.Description.ServiceThrottlingBehavior> 的典型用法。 在这种情况下，对于一个到 <xref:System.ServiceModel.InstanceContext> 的连接，指定的值一次最多只能建立一个消息处理。 实际的用法必须根据经验确定。  
  
 [!code-xml[ServiceThrottlingBehavior#3](~/samples/snippets/csharp/VS_Snippets_CFX/servicethrottlingbehavior/cs/hostapplication.exe.config#3)]   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
