<Type Name="ExportLifetimeContext&lt;T&gt;" FullName="System.ComponentModel.Composition.ExportLifetimeContext&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="5d1489740eaffab0d72b0edd1d25db39260aa3d7" /><Meta Name="ms.sourcegitcommit" Value="397961a0164281b579f68064c3bb66c071f374d9" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/14/2020" /><Meta Name="ms.locfileid" Value="69332486" /></Metadata><TypeSignature Language="C#" Value="public sealed class ExportLifetimeContext&lt;T&gt; : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ExportLifetimeContext`1&lt;T&gt; extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.Composition.ExportLifetimeContext`1" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ExportLifetimeContext(Of T)&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public ref class ExportLifetimeContext sealed : IDisposable" />
  <TypeSignature Language="F#" Value="type ExportLifetimeContext&lt;'T&gt; = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.Composition</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="T">导出值的类型。</typeparam>
    <summary>保存 <see cref="T:System.ComponentModel.Composition.ExportFactory`1" /> 对象所创建的某个导出值和对方法的引用，以释放该对象。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  此类型实现 <xref:System.IDisposable> 接口。 在使用完类型后，您应直接或间接释放类型。 若要直接释放类型，请在 `try`/`catch` 块中调用其 <xref:System.IDisposable.Dispose%2A> 方法。 若要间接释放类型，请使用 `using`（在 C# 中）或 `Using`（在 Visual Basic 中）等语言构造。 有关详细信息，请参阅 <xref:System.IDisposable> 接口主题中的“使用实现 IDisposable 的对象”一节。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ExportLifetimeContext (T value, Action disposeAction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(!T value, class System.Action disposeAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.ExportLifetimeContext`1.#ctor(`0,System.Action)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (value As T, disposeAction As Action)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ExportLifetimeContext(T value, Action ^ disposeAction);" />
      <MemberSignature Language="F#" Value="new System.ComponentModel.Composition.ExportLifetimeContext&lt;'T&gt; : 'T * Action -&gt; System.ComponentModel.Composition.ExportLifetimeContext&lt;'T&gt;" Usage="new System.ComponentModel.Composition.ExportLifetimeContext&lt;'T&gt; (value, disposeAction)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="value" Type="T" />
        <Parameter Name="disposeAction" Type="System.Action" />
      </Parameters>
      <Docs>
        <param name="value">导出的值。</param>
        <param name="disposeAction">对用于释放对象的方法的引用。</param>
        <summary>初始化 <see cref="T:System.ComponentModel.Composition.ExportLifetimeContext`1" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.ExportLifetimeContext`1.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="exportLifetimeContext.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>释放由 <see cref="T:System.ComponentModel.Composition.ExportLifetimeContext`1" /> 类的当前实例占用的所有资源，包括其关联导出。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 调用 `Dispose` 对象的方法会 <xref:System.ComponentModel.Composition.ExportLifetimeContext%601> 调用所引用的方法以释放其关联的导出。  
  
 在完成使用 `Dispose` 后，应调用 <xref:System.ComponentModel.Composition.ExportLifetimeContext%601>。 `Dispose` 方法使 <xref:System.ComponentModel.Composition.ExportLifetimeContext%601> 处于不可用状态。 调用后 `Dispose` ，必须释放对的所有引用， <xref:System.ComponentModel.Composition.ExportLifetimeContext%601> 以便垃圾回收器能够回收占用的内存 <xref:System.ComponentModel.Composition.ExportLifetimeContext%601> 。  
  
 有关详细信息，请参阅[清理非托管资源](https://go.microsoft.com/fwlink/?LinkId=187455)和[实现 Dispose 方法](https://go.microsoft.com/fwlink/?LinkId=187456)。  
  
> [!NOTE]
>  每次释放对 `Dispose` 的最后一个引用前，均应调用 <xref:System.ComponentModel.Composition.ExportLifetimeContext%601>。 否则，在垃圾回收器调用 <xref:System.ComponentModel.Composition.ExportLifetimeContext%601> 对象的 `Finalize` 方法之前，该对象正在使用的资源不会被释放。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public T Value { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T Value" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.Composition.ExportLifetimeContext`1.Value" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Value As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T Value { T get(); };" />
      <MemberSignature Language="F#" Value="member this.Value : 'T" Usage="System.ComponentModel.Composition.ExportLifetimeContext&lt;'T&gt;.Value" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取导出 <see cref="T:System.ComponentModel.Composition.ExportFactory`1" /> 对象的导出值。</summary>
        <value>导出的值。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
