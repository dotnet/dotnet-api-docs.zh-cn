<Type Name="ExportFactory&lt;T&gt;" FullName="System.ComponentModel.Composition.ExportFactory&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="20f89a53d8dc08b1fac405a5ef7529b96da06d9c" /><Meta Name="ms.sourcegitcommit" Value="c982ad9e10a242d90f1e631b5981570f9e5d9f34" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/10/2020" /><Meta Name="ms.locfileid" Value="89842182" /></Metadata><TypeSignature Language="C#" Value="public class ExportFactory&lt;T&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ExportFactory`1&lt;T&gt; extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.Composition.ExportFactory`1" />
  <TypeSignature Language="VB.NET" Value="Public Class ExportFactory(Of T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public ref class ExportFactory" />
  <TypeSignature Language="F#" Value="type ExportFactory&lt;'T&gt; = class" />
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.Composition</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <typeparam name="T"><span data-ttu-id="17cec-101">导出的类型。</span><span class="sxs-lookup"><span data-stu-id="17cec-101">The type of the export.</span></span></typeparam>
    <summary><span data-ttu-id="17cec-102">工厂创建了提供指定导出部件的新实例。</span><span class="sxs-lookup"><span data-stu-id="17cec-102">A factory that creates new instances of a part that provides the specified export.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="17cec-103">在通过使用 <xref:System.Lazy%601> 对象间接引用部件时，<xref:System.Lazy%601.Value%2A> 属性始终返回对同一个对象的引用。</span><span class="sxs-lookup"><span data-stu-id="17cec-103">When you refer indirectly to a part by using a <xref:System.Lazy%601> object, the <xref:System.Lazy%601.Value%2A> property always returns a reference to the same object.</span></span> <span data-ttu-id="17cec-104">在某些情况下，你可能需要每个引用以便创建新对象。</span><span class="sxs-lookup"><span data-stu-id="17cec-104">In some circumstances, you might want each reference to result in the creation of a new object.</span></span> <span data-ttu-id="17cec-105"><xref:System.ComponentModel.Composition.ExportFactory%601> 适用于这种情况。</span><span class="sxs-lookup"><span data-stu-id="17cec-105"><xref:System.ComponentModel.Composition.ExportFactory%601> is designed for those scenarios.</span></span>  
  
 <span data-ttu-id="17cec-106"><xref:System.ComponentModel.Composition.ExportFactory%601> 可以在 <xref:System.Lazy%601> 创建特性化部件时以类似的方式使用。</span><span class="sxs-lookup"><span data-stu-id="17cec-106"><xref:System.ComponentModel.Composition.ExportFactory%601> can be used in a similar fashion to <xref:System.Lazy%601> when creating attributed parts.</span></span> <span data-ttu-id="17cec-107">也就是说，使用 <xref:System.ComponentModel.Composition.ExportFactory%601> 的泛型形参在 `T` 上定义的导入协定将匹配在 `T` 上定义的导出。</span><span class="sxs-lookup"><span data-stu-id="17cec-107">That is, an import contract that is defined on <xref:System.ComponentModel.Composition.ExportFactory%601> with a generic parameter of `T` will match an export that is defined on `T`.</span></span> <span data-ttu-id="17cec-108">例如，以下导出和导入匹配：</span><span class="sxs-lookup"><span data-stu-id="17cec-108">For example, the follow export and import match:</span></span>  
  
```csharp  
[Export]  
public String myData = "Example Data.";  
  
[Import]  
public ExportFactory<String> theData { get; set; }  
```  
  
```vb  
<Export()>  
Public myData As String = "Example Data."  
  
<Import()>  
Public Property theData As ExportFactory(Of String)  
```  
  
 <span data-ttu-id="17cec-109"><xref:System.ComponentModel.Composition.ExportFactory%601.CreateExport%2A?displayProperty=nameWithType> 方法返回一个 <xref:System.ComponentModel.Composition.ExportLifetimeContext%601> 对象，此对象包含两个部分。</span><span class="sxs-lookup"><span data-stu-id="17cec-109">The <xref:System.ComponentModel.Composition.ExportFactory%601.CreateExport%2A?displayProperty=nameWithType> method returns an <xref:System.ComponentModel.Composition.ExportLifetimeContext%601> object, which has two pieces.</span></span> <span data-ttu-id="17cec-110"><xref:System.ComponentModel.Composition.ExportLifetimeContext%601.Value%2A?displayProperty=nameWithType> 属性提供对已创建部分的访问权。</span><span class="sxs-lookup"><span data-stu-id="17cec-110">The <xref:System.ComponentModel.Composition.ExportLifetimeContext%601.Value%2A?displayProperty=nameWithType> property provides access to the created part.</span></span> <span data-ttu-id="17cec-111">调用 <xref:System.ComponentModel.Composition.ExportLifetimeContext%601.Dispose%2A> 对象的 <xref:System.ComponentModel.Composition.ExportLifetimeContext%601> 方法将清理已创建的部分及其所有依赖项，从而允许管理部件的生存期，而无需引用创建它的容器。</span><span class="sxs-lookup"><span data-stu-id="17cec-111">Calling the <xref:System.ComponentModel.Composition.ExportLifetimeContext%601.Dispose%2A> method of the <xref:System.ComponentModel.Composition.ExportLifetimeContext%601> object cleans up the created part and all of its dependencies, thereby allowing the part's lifetime to be managed without reference to the container that created it.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ExportFactory (Func&lt;Tuple&lt;T,Action&gt;&gt; exportLifetimeContextCreator);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Func`1&lt;class System.Tuple`2&lt;!T, class System.Action&gt;&gt; exportLifetimeContextCreator) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.ExportFactory`1.#ctor(System.Func{System.Tuple{`0,System.Action}})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (exportLifetimeContextCreator As Func(Of Tuple(Of T, Action)))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ExportFactory(Func&lt;Tuple&lt;T, Action ^&gt; ^&gt; ^ exportLifetimeContextCreator);" />
      <MemberSignature Language="F#" Value="new System.ComponentModel.Composition.ExportFactory&lt;'T&gt; : Func&lt;'T * Action&gt; -&gt; System.ComponentModel.Composition.ExportFactory&lt;'T&gt;" Usage="new System.ComponentModel.Composition.ExportFactory&lt;'T&gt; exportLifetimeContextCreator" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="exportLifetimeContextCreator" Type="System.Func&lt;System.Tuple&lt;T,System.Action&gt;&gt;" />
      </Parameters>
      <Docs>
        <param name="exportLifetimeContextCreator"><span data-ttu-id="17cec-112">一个返回导出值的函数和一个释放它的 <see cref="T:System.Action" />。</span><span class="sxs-lookup"><span data-stu-id="17cec-112">A function that returns the exported value and an <see cref="T:System.Action" /> that releases it.</span></span></param>
        <summary><span data-ttu-id="17cec-113">初始化 <see cref="T:System.ComponentModel.Composition.ExportFactory`1" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="17cec-113">Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.ExportFactory`1" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateExport">
      <MemberSignature Language="C#" Value="public System.ComponentModel.Composition.ExportLifetimeContext&lt;T&gt; CreateExport ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.ComponentModel.Composition.ExportLifetimeContext`1&lt;!T&gt; CreateExport() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.ExportFactory`1.CreateExport" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateExport () As ExportLifetimeContext(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::ComponentModel::Composition::ExportLifetimeContext&lt;T&gt; ^ CreateExport();" />
      <MemberSignature Language="F#" Value="member this.CreateExport : unit -&gt; System.ComponentModel.Composition.ExportLifetimeContext&lt;'T&gt;" Usage="exportFactory.CreateExport " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.Composition.ExportLifetimeContext&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="17cec-114">创建工厂导出类型的实例。</span><span class="sxs-lookup"><span data-stu-id="17cec-114">Creates an instance of the factory's export type.</span></span></summary>
        <returns><span data-ttu-id="17cec-115">工厂的导出类型的有效实例。</span><span class="sxs-lookup"><span data-stu-id="17cec-115">A valid instance of the factory's exported type.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnFilterScopedCatalog">
      <MemberSignature Language="C#" Value="protected virtual bool OnFilterScopedCatalog (System.ComponentModel.Composition.Primitives.ComposablePartDefinition composablePartDefinition);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool OnFilterScopedCatalog(class System.ComponentModel.Composition.Primitives.ComposablePartDefinition composablePartDefinition) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.ExportFactory`1.OnFilterScopedCatalog(System.ComponentModel.Composition.Primitives.ComposablePartDefinition)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function OnFilterScopedCatalog (composablePartDefinition As ComposablePartDefinition) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool OnFilterScopedCatalog(System::ComponentModel::Composition::Primitives::ComposablePartDefinition ^ composablePartDefinition);" />
      <MemberSignature Language="F#" Value="abstract member OnFilterScopedCatalog : System.ComponentModel.Composition.Primitives.ComposablePartDefinition -&gt; bool&#xA;override this.OnFilterScopedCatalog : System.ComponentModel.Composition.Primitives.ComposablePartDefinition -&gt; bool" Usage="exportFactory.OnFilterScopedCatalog composablePartDefinition" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="composablePartDefinition" Type="System.ComponentModel.Composition.Primitives.ComposablePartDefinition" Index="0" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="composablePartDefinition">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
