<Type Name="HasRunnableWorkflowEvent" FullName="System.Activities.DurableInstancing.HasRunnableWorkflowEvent">
  <Metadata><Meta Name="ms.openlocfilehash" Value="4431984aa838e0404c5cff5bb4f4bd63b2c7c2d1" /><Meta Name="ms.sourcegitcommit" Value="397961a0164281b579f68064c3bb66c071f374d9" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/14/2020" /><Meta Name="ms.locfileid" Value="69326196" /></Metadata><TypeSignature Language="C#" Value="public sealed class HasRunnableWorkflowEvent : System.Runtime.DurableInstancing.InstancePersistenceEvent&lt;System.Activities.DurableInstancing.HasRunnableWorkflowEvent&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit HasRunnableWorkflowEvent extends System.Runtime.DurableInstancing.InstancePersistenceEvent`1&lt;class System.Activities.DurableInstancing.HasRunnableWorkflowEvent&gt;" />
  <TypeSignature Language="DocId" Value="T:System.Activities.DurableInstancing.HasRunnableWorkflowEvent" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class HasRunnableWorkflowEvent&#xA;Inherits InstancePersistenceEvent(Of HasRunnableWorkflowEvent)" />
  <TypeSignature Language="C++ CLI" Value="public ref class HasRunnableWorkflowEvent sealed : System::Runtime::DurableInstancing::InstancePersistenceEvent&lt;System::Activities::DurableInstancing::HasRunnableWorkflowEvent ^&gt;" />
  <TypeSignature Language="F#" Value="type HasRunnableWorkflowEvent = class&#xA;    inherit InstancePersistenceEvent&lt;HasRunnableWorkflowEvent&gt;" />
  <AssemblyInfo>
    <AssemblyName>System.Activities</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Runtime.DurableInstancing.InstancePersistenceEvent&lt;System.Activities.DurableInstancing.HasRunnableWorkflowEvent&gt;</BaseTypeName>
    <BaseTypeArguments>
      <BaseTypeArgument TypeParamName="!0">System.Activities.DurableInstancing.HasRunnableWorkflowEvent</BaseTypeArgument>
    </BaseTypeArguments>
  </Base>
  <Interfaces />
  <Docs>
    <summary>表示一个事件，SQL 工作流实例存储将引发该事件，将持久性数据库中是否存在可运行实例的信息通知工作流宿主。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果某个实例未处于挂起状态或完成状态并且满足以下条件，则该实例可*运行*：  
  
-   实例处于解除锁定状态，并且具有已过期的挂起计时器。  
  
-   实例处于解除锁定状态，并且其状态为 "正在**执行**"。  
  
-   实例上的锁无效。  
  
 实例存储应定期搜索属于使用该存储的工作流宿主的可运行实例。 在持久性存储中查找与其工作流宿主类型匹配的可运行实例时，它应引发 <xref:System.Activities.DurableInstancing.HasRunnableWorkflowEvent>。 如果实例存储在持久性存储中未找到可运行实例，它应继续监视持久性存储来查找任何可运行实例。  
  
 引发 HasRunnableWorkflowEvent 之后，实例存储应停止监视持久性存储来查找可运行实例，直至它收到并执行 <xref:System.Activities.DurableInstancing.TryLoadRunnableWorkflowCommand> 为止。 只有在 TryLoadRunnableWorkflowCommand 执行未返回任何可运行实例的情况下，监视才会继续。  
  
 当工作流宿主收到 HasRunnableWorkflowEvent 时，它将针对实例存储执行 <xref:System.Activities.DurableInstancing.TryLoadRunnableWorkflowCommand>，以将该实例加载到内存中。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HasRunnableWorkflowEvent ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.DurableInstancing.HasRunnableWorkflowEvent.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HasRunnableWorkflowEvent();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Activities.DurableInstancing.HasRunnableWorkflowEvent" /> 类的实例。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
