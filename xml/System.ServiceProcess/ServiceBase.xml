<Type Name="ServiceBase" FullName="System.ServiceProcess.ServiceBase">
  <Metadata><Meta Name="ms.openlocfilehash" Value="ac4255c18ed96d84149bcb795f3f1d1d65a4b3ab" /><Meta Name="ms.sourcegitcommit" Value="b53d35b4a410c949742abd4c6a989d1af5357bca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="86590770" /></Metadata><TypeSignature Language="C#" Value="public class ServiceBase : System.ComponentModel.Component" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ServiceBase extends System.ComponentModel.Component" />
  <TypeSignature Language="DocId" Value="T:System.ServiceProcess.ServiceBase" />
  <TypeSignature Language="VB.NET" Value="Public Class ServiceBase&#xA;Inherits Component" />
  <TypeSignature Language="C++ CLI" Value="public ref class ServiceBase : System::ComponentModel::Component" />
  <TypeSignature Language="F#" Value="type ServiceBase = class&#xA;    inherit Component" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceProcess</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>4.2.3.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.Component</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1">
      <AttributeName Language="C#">[System.ComponentModel.Designer("Microsoft.VisualStudio.Install.UserNTServiceDesigner, Microsoft.VisualStudio, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.ComponentModel.Design.IRootDesigner")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.ComponentModel.Designer("Microsoft.VisualStudio.Install.UserNTServiceDesigner, Microsoft.VisualStudio, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.ComponentModel.Design.IRootDesigner")&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName Language="C#">[System.ComponentModel.InstallerType(typeof(System.ServiceProcess.ServiceProcessInstaller))]</AttributeName>
      <AttributeName Language="F#">[&lt;System.ComponentModel.InstallerType(typeof(System.ServiceProcess.ServiceProcessInstaller))&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="c9856-101">为将作为服务应用程序的一部分而存在的服务提供基类。</span><span class="sxs-lookup"><span data-stu-id="c9856-101">Provides a base class for a service that will exist as part of a service application.</span></span> <span data-ttu-id="c9856-102">在创建新的服务类时，必须从 <see cref="T:System.ServiceProcess.ServiceBase" /> 派生。</span><span class="sxs-lookup"><span data-stu-id="c9856-102"><see cref="T:System.ServiceProcess.ServiceBase" /> must be derived from when creating a new service class.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c9856-103">当在 <xref:System.ServiceProcess.ServiceBase> 服务应用程序中定义服务类时，派生自。</span><span class="sxs-lookup"><span data-stu-id="c9856-103">Derive from <xref:System.ServiceProcess.ServiceBase> when defining your service class in a service application.</span></span> <span data-ttu-id="c9856-104">任何有用的服务都将重写 <xref:System.ServiceProcess.ServiceBase.OnStart%2A> 和 <xref:System.ServiceProcess.ServiceBase.OnStop%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="c9856-104">Any useful service overrides the <xref:System.ServiceProcess.ServiceBase.OnStart%2A> and <xref:System.ServiceProcess.ServiceBase.OnStop%2A> methods.</span></span> <span data-ttu-id="c9856-105">对于其他功能，可以重写 <xref:System.ServiceProcess.ServiceBase.OnPause%2A> 和，以 <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> 响应服务状态的更改。</span><span class="sxs-lookup"><span data-stu-id="c9856-105">For additional functionality, you can override <xref:System.ServiceProcess.ServiceBase.OnPause%2A> and <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> with specific behavior in response to changes in the service state.</span></span>  
  
 <span data-ttu-id="c9856-106">服务是长时间运行的可执行文件，它不支持用户界面，而且可能不会在登录用户帐户下运行。</span><span class="sxs-lookup"><span data-stu-id="c9856-106">A service is a long-running executable that does not support a user interface, and which might not run under the logged-on user account.</span></span> <span data-ttu-id="c9856-107">此服务可以在没有任何用户登录到计算机的情况下运行。</span><span class="sxs-lookup"><span data-stu-id="c9856-107">The service can run without any user being logged on to the computer.</span></span>  
  
 <span data-ttu-id="c9856-108">默认情况下，服务在系统帐户下运行，该帐户不是管理员帐户。</span><span class="sxs-lookup"><span data-stu-id="c9856-108">By default, services run under the System account, which is not the same as the Administrator account.</span></span> <span data-ttu-id="c9856-109">不能更改系统帐户的权限。</span><span class="sxs-lookup"><span data-stu-id="c9856-109">You cannot change the rights of the System account.</span></span> <span data-ttu-id="c9856-110">或者，你可以使用 <xref:System.ServiceProcess.ServiceProcessInstaller> 来指定将在其下运行服务的用户帐户。</span><span class="sxs-lookup"><span data-stu-id="c9856-110">Alternatively, you can use a <xref:System.ServiceProcess.ServiceProcessInstaller> to specify a user account under which the service will run.</span></span>  
  
 <span data-ttu-id="c9856-111">可执行文件可以包含多个服务 <xref:System.ServiceProcess.ServiceInstaller> ，但每个服务必须包含单独的服务。</span><span class="sxs-lookup"><span data-stu-id="c9856-111">An executable can contain more than one service but must contain a separate <xref:System.ServiceProcess.ServiceInstaller> for each service.</span></span> <span data-ttu-id="c9856-112"><xref:System.ServiceProcess.ServiceInstaller>实例向系统注册该服务。</span><span class="sxs-lookup"><span data-stu-id="c9856-112">The <xref:System.ServiceProcess.ServiceInstaller> instance registers the service with the system.</span></span> <span data-ttu-id="c9856-113">安装程序还将每个服务与可用于记录服务命令的事件日志相关联。</span><span class="sxs-lookup"><span data-stu-id="c9856-113">The installer also associates each service with an event log that you can use to record service commands.</span></span> <span data-ttu-id="c9856-114">`main()`可执行文件中的函数定义应运行哪些服务。</span><span class="sxs-lookup"><span data-stu-id="c9856-114">The `main()` function in the executable defines which services should run.</span></span> <span data-ttu-id="c9856-115">服务的当前工作目录是系统目录，而不是可执行文件所在的目录。</span><span class="sxs-lookup"><span data-stu-id="c9856-115">The current working directory of the service is the system directory, not the directory in which the executable is located.</span></span>  
  
 <span data-ttu-id="c9856-116">启动服务时，系统将查找可执行文件，并运行 <xref:System.ServiceProcess.ServiceBase.OnStart%2A> 该服务的方法，该方法包含在可执行文件中。</span><span class="sxs-lookup"><span data-stu-id="c9856-116">When you start a service, the system locates the executable and runs the <xref:System.ServiceProcess.ServiceBase.OnStart%2A> method for that service, contained within the executable.</span></span> <span data-ttu-id="c9856-117">但是，运行该服务与运行可执行文件不同。</span><span class="sxs-lookup"><span data-stu-id="c9856-117">However, running the service is not the same as running the executable.</span></span> <span data-ttu-id="c9856-118">可执行文件只会加载服务。</span><span class="sxs-lookup"><span data-stu-id="c9856-118">The executable only loads the service.</span></span> <span data-ttu-id="c9856-119"> (例如，通过服务控制管理器) 启动和停止该服务。</span><span class="sxs-lookup"><span data-stu-id="c9856-119">The service is accessed (for example, started and stopped) through the Service Control Manager.</span></span>  
  
 <span data-ttu-id="c9856-120"><xref:System.ServiceProcess.ServiceBase>第一次在服务上调用时，可执行文件调用派生类的构造函数。</span><span class="sxs-lookup"><span data-stu-id="c9856-120">The executable calls the <xref:System.ServiceProcess.ServiceBase> derived class's constructor the first time you call Start on the service.</span></span> <span data-ttu-id="c9856-121"><xref:System.ServiceProcess.ServiceBase.OnStart%2A>命令处理方法将在构造函数执行后立即调用。</span><span class="sxs-lookup"><span data-stu-id="c9856-121">The <xref:System.ServiceProcess.ServiceBase.OnStart%2A> command-handling method is called immediately after the constructor executes.</span></span> <span data-ttu-id="c9856-122">在第一次加载服务后，不会再次执行构造函数，因此，需要将由构造函数执行的处理与执行的过程分离 <xref:System.ServiceProcess.ServiceBase.OnStart%2A> 。</span><span class="sxs-lookup"><span data-stu-id="c9856-122">The constructor is not executed again after the first time the service has been loaded, so it is necessary to separate the processing performed by the constructor from that performed by <xref:System.ServiceProcess.ServiceBase.OnStart%2A>.</span></span> <span data-ttu-id="c9856-123">应在中创建可以由释放的任何资源 <xref:System.ServiceProcess.ServiceBase.OnStop%2A> <xref:System.ServiceProcess.ServiceBase.OnStart%2A> 。</span><span class="sxs-lookup"><span data-stu-id="c9856-123">Any resources that can be released by <xref:System.ServiceProcess.ServiceBase.OnStop%2A> should be created in <xref:System.ServiceProcess.ServiceBase.OnStart%2A>.</span></span> <span data-ttu-id="c9856-124">如果在释放资源后再次启动了服务，则在构造函数中创建资源可防止正确创建这些资源 <xref:System.ServiceProcess.ServiceBase.OnStop%2A> 。</span><span class="sxs-lookup"><span data-stu-id="c9856-124">Creating resources in the constructor prevents them from being created properly if the service is started again after <xref:System.ServiceProcess.ServiceBase.OnStop%2A> has released the resources.</span></span>  
  
 <span data-ttu-id="c9856-125">服务控制管理器 (SCM) 提供一种方法来与服务进行交互。</span><span class="sxs-lookup"><span data-stu-id="c9856-125">The Service Control Manager (SCM) provides a way to interact with the service.</span></span> <span data-ttu-id="c9856-126">可以使用 SCM 将开始、停止、暂停、继续或自定义命令传递到服务中。</span><span class="sxs-lookup"><span data-stu-id="c9856-126">You can use the SCM to pass Start, Stop, Pause, Continue, or custom commands into the service.</span></span> <span data-ttu-id="c9856-127">SCM 使用和的值 <xref:System.ServiceProcess.ServiceBase.CanStop%2A> <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> 来确定服务是否接受 "停止"、"暂停" 或 "继续" 命令。</span><span class="sxs-lookup"><span data-stu-id="c9856-127">The SCM uses the values of <xref:System.ServiceProcess.ServiceBase.CanStop%2A> and <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> to determine whether the service accepts Stop, Pause, or Continue commands.</span></span> <span data-ttu-id="c9856-128">仅当相应的属性 <xref:System.ServiceProcess.ServiceBase.CanStop%2A> 或 <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> `true` 在服务类中时，才会在 SCM 的上下文菜单中启用 "停止"、"暂停" 和 "继续"。</span><span class="sxs-lookup"><span data-stu-id="c9856-128">Stop, Pause, and Continue are enabled in the SCM's context menus only if the corresponding property <xref:System.ServiceProcess.ServiceBase.CanStop%2A> or <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> is `true` in the service class.</span></span> <span data-ttu-id="c9856-129">如果启用，则会将命令传递到服务，并 <xref:System.ServiceProcess.ServiceBase.OnStop%2A> <xref:System.ServiceProcess.ServiceBase.OnPause%2A> 调用、或 <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> 。</span><span class="sxs-lookup"><span data-stu-id="c9856-129">If enabled, the command is passed to the service, and <xref:System.ServiceProcess.ServiceBase.OnStop%2A>, <xref:System.ServiceProcess.ServiceBase.OnPause%2A>, or <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> is called.</span></span> <span data-ttu-id="c9856-130">如果 <xref:System.ServiceProcess.ServiceBase.CanStop%2A> 、 <xref:System.ServiceProcess.ServiceBase.CanShutdown%2A> 或 <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> 为 `false` ，则不会处理相应的命令处理方法 (如 <xref:System.ServiceProcess.ServiceBase.OnStop%2A>) ，即使您已实现了方法也是如此。</span><span class="sxs-lookup"><span data-stu-id="c9856-130">If <xref:System.ServiceProcess.ServiceBase.CanStop%2A>, <xref:System.ServiceProcess.ServiceBase.CanShutdown%2A>, or <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> is `false`, the corresponding command-handling method (such as <xref:System.ServiceProcess.ServiceBase.OnStop%2A>) will not be processed, even if you have implemented the method.</span></span>  
  
 <span data-ttu-id="c9856-131">可以使用 <xref:System.ServiceProcess.ServiceController> 类以编程方式使用用户界面执行 SCM 操作。</span><span class="sxs-lookup"><span data-stu-id="c9856-131">You can use the <xref:System.ServiceProcess.ServiceController> class to do programmatically what the SCM does using a user interface.</span></span> <span data-ttu-id="c9856-132">可以自动执行控制台中提供的任务。</span><span class="sxs-lookup"><span data-stu-id="c9856-132">You can automate the tasks available in the console.</span></span> <span data-ttu-id="c9856-133">如果 <xref:System.ServiceProcess.ServiceBase.CanStop%2A> 、 <xref:System.ServiceProcess.ServiceBase.CanShutdown%2A> 或 <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> 为， `true` 但尚未实现相应的命令处理方法 (如 <xref:System.ServiceProcess.ServiceBase.OnStop%2A>) 系统引发异常，并忽略该命令。</span><span class="sxs-lookup"><span data-stu-id="c9856-133">If <xref:System.ServiceProcess.ServiceBase.CanStop%2A>, <xref:System.ServiceProcess.ServiceBase.CanShutdown%2A>, or <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> is `true` but you have not implemented a corresponding command-handling method (such as <xref:System.ServiceProcess.ServiceBase.OnStop%2A>) the system throws an exception and ignores the command.</span></span>  
  
 <span data-ttu-id="c9856-134">无需 <xref:System.ServiceProcess.ServiceBase.OnStart%2A> <xref:System.ServiceProcess.ServiceBase.OnStop%2A> 在中实现、或任何其他方法 <xref:System.ServiceProcess.ServiceBase> 。</span><span class="sxs-lookup"><span data-stu-id="c9856-134">You do not have to implement <xref:System.ServiceProcess.ServiceBase.OnStart%2A>, <xref:System.ServiceProcess.ServiceBase.OnStop%2A>, or any other method in <xref:System.ServiceProcess.ServiceBase>.</span></span> <span data-ttu-id="c9856-135">但是，此服务的行为在中进行了描述， <xref:System.ServiceProcess.ServiceBase.OnStart%2A> 因此至少应重写此成员。</span><span class="sxs-lookup"><span data-stu-id="c9856-135">However, the service's behavior is described in <xref:System.ServiceProcess.ServiceBase.OnStart%2A>, so at minimum, this member should be overridden.</span></span> <span data-ttu-id="c9856-136">`main()`可执行文件的函数通过调用方法，将可执行文件中的服务注册到服务控制管理器 <xref:System.ServiceProcess.ServiceBase.Run%2A> 。</span><span class="sxs-lookup"><span data-stu-id="c9856-136">The `main()` function of the executable registers the service in the executable with the Service Control Manager by calling the <xref:System.ServiceProcess.ServiceBase.Run%2A> method.</span></span> <span data-ttu-id="c9856-137"><xref:System.ServiceProcess.ServiceBase.ServiceName%2A> <xref:System.ServiceProcess.ServiceBase> 传递给方法的对象的属性 <xref:System.ServiceProcess.ServiceBase.Run%2A> 必须与 <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> 该服务的服务安装程序的属性相匹配。</span><span class="sxs-lookup"><span data-stu-id="c9856-137">The <xref:System.ServiceProcess.ServiceBase.ServiceName%2A> property of the <xref:System.ServiceProcess.ServiceBase> object passed to the <xref:System.ServiceProcess.ServiceBase.Run%2A> method must match the <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> property of the service installer for that service.</span></span>  
  
 <span data-ttu-id="c9856-138">您可以使用 `InstallUtil.exe` 在您的系统上安装服务。</span><span class="sxs-lookup"><span data-stu-id="c9856-138">You can use `InstallUtil.exe` to install services on your system.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c9856-139">您可以指定除应用程序事件日志以外的日志来接收服务调用的通知，但 <xref:System.ServiceProcess.ServiceBase.AutoLog%2A> 属性和属性都不 <xref:System.ServiceProcess.ServiceBase.EventLog%2A> 能写入自定义日志。</span><span class="sxs-lookup"><span data-stu-id="c9856-139">You can specify a log other than the Application event log to receive notification of service calls, but neither the <xref:System.ServiceProcess.ServiceBase.AutoLog%2A> nor the <xref:System.ServiceProcess.ServiceBase.EventLog%2A> property can write to a custom log.</span></span> <span data-ttu-id="c9856-140"><xref:System.ServiceProcess.ServiceBase.AutoLog%2A> `false` 如果你不希望使用自动日志记录，则设置为。</span><span class="sxs-lookup"><span data-stu-id="c9856-140">Set <xref:System.ServiceProcess.ServiceBase.AutoLog%2A> to `false` if you do not want to use automatic logging.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.ServiceProcess.ServiceProcessInstaller" />
    <altmember cref="T:System.ServiceProcess.ServiceInstaller" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ServiceBase ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceBase.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ServiceBase();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>4.2.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c9856-141">创建 <see cref="T:System.ServiceProcess.ServiceBase" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="c9856-141">Creates a new instance of the <see cref="T:System.ServiceProcess.ServiceBase" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c9856-142">请勿创建类的实例 <xref:System.ServiceProcess.ServiceBase> 。</span><span class="sxs-lookup"><span data-stu-id="c9856-142">Do not create an instance of the <xref:System.ServiceProcess.ServiceBase> class.</span></span> <span data-ttu-id="c9856-143">相反，派生自 <xref:System.ServiceProcess.ServiceBase> 并实例化派生类。</span><span class="sxs-lookup"><span data-stu-id="c9856-143">Instead, derive from <xref:System.ServiceProcess.ServiceBase> and instantiate your derived class.</span></span> <span data-ttu-id="c9856-144">在从继承的类的构造函数中实现所需的最小值 <xref:System.ServiceProcess.ServiceBase> 是在 <xref:System.ServiceProcess.ServiceBase.ServiceName%2A> 组件上设置。</span><span class="sxs-lookup"><span data-stu-id="c9856-144">The minimum you need to implement in the constructor for a class inherited from <xref:System.ServiceProcess.ServiceBase> is to set the <xref:System.ServiceProcess.ServiceBase.ServiceName%2A> on your component.</span></span> <span data-ttu-id="c9856-145">构造函数中不特别需要其他处理。</span><span class="sxs-lookup"><span data-stu-id="c9856-145">No other processing is specifically required in the constructor.</span></span> <span data-ttu-id="c9856-146">你应在中处理大多数初始化， <xref:System.ServiceProcess.ServiceBase.OnStart%2A> 而不是在构造函数中。</span><span class="sxs-lookup"><span data-stu-id="c9856-146">You should handle most initialization in <xref:System.ServiceProcess.ServiceBase.OnStart%2A> rather than in the constructor.</span></span> <span data-ttu-id="c9856-147">否则，在服务停止后重新启动该服务时，对象将重新初始化。</span><span class="sxs-lookup"><span data-stu-id="c9856-147">Otherwise, there is no guarantee the objects will be reinitialized when you restart a service after it has been stopped.</span></span>  
  
 <span data-ttu-id="c9856-148">如果重写派生类中的构造函数，请在代码中调用基类构造函数。</span><span class="sxs-lookup"><span data-stu-id="c9856-148">If you override the constructor in your derived class, call the base class constructor in your code.</span></span>  
  
 <span data-ttu-id="c9856-149"><xref:System.ServiceProcess.ServiceBase>构造函数将设置 <xref:System.ServiceProcess.ServiceBase.AutoLog%2A> 为 `true` 。</span><span class="sxs-lookup"><span data-stu-id="c9856-149">The <xref:System.ServiceProcess.ServiceBase> constructor sets <xref:System.ServiceProcess.ServiceBase.AutoLog%2A> to `true`.</span></span> <span data-ttu-id="c9856-150">如果你不希望从服务控制管理器 (SCM) 自动记录对服务的调用，请将设置 <xref:System.ServiceProcess.ServiceBase.AutoLog%2A> 为 `false` 。</span><span class="sxs-lookup"><span data-stu-id="c9856-150">If you do not want to automatically log calls to the service from the Service Control Manager (SCM), set <xref:System.ServiceProcess.ServiceBase.AutoLog%2A> to `false`.</span></span>  
  
 <span data-ttu-id="c9856-151">如果可执行文件包含单个服务，则在从 SCM 中选择 "启动" 时，系统会调用服务的构造函数，如果调用了 Stop，则会运行析构函数。</span><span class="sxs-lookup"><span data-stu-id="c9856-151">If the executable contains a single service, the system calls the service's constructor when Start is selected from the SCM, and runs the destructor if Stop is called.</span></span>  
  
 <span data-ttu-id="c9856-152">如果可执行文件包含多个服务，则对一个服务调用 "启动" 将导致为可执行文件中的所有服务调用构造函数，但只启动指定的服务。</span><span class="sxs-lookup"><span data-stu-id="c9856-152">If the executable contains multiple services, calling Start on one service causes the constructors to be called for all services in the executable, but only the specified service is started.</span></span> <span data-ttu-id="c9856-153">所有服务都已停止时，服务的析构函数会一起运行，而不会在每个服务停止时单独运行。</span><span class="sxs-lookup"><span data-stu-id="c9856-153">Destructors for the services are run together when all services have been stopped, not individually when each service is stopped.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c9856-154">如果重写基类构造函数，则应在派生类的构造函数中显式调用它。</span><span class="sxs-lookup"><span data-stu-id="c9856-154">If you override the base class constructor, you should explicitly call it in the constructor of your derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStart(System.String[])" />
        <altmember cref="P:System.ServiceProcess.ServiceBase.AutoLog" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.Run(System.ServiceProcess.ServiceBase[])" />
      </Docs>
    </Member>
    <Member MemberName="AutoLog">
      <MemberSignature Language="C#" Value="public bool AutoLog { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoLog" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceBase.AutoLog" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoLog As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AutoLog { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AutoLog : bool with get, set" Usage="System.ServiceProcess.ServiceBase.AutoLog" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>4.2.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="dotnet-plat-ext-5.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(true)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.ServiceProcess.ServiceProcessDescription("SBAutoLog")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ServiceProcess.ServiceProcessDescription("SBAutoLog")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c9856-155">指示是否在事件日志中报告“开始”、“停止”、“暂停”以及“继续”命令。</span><span class="sxs-lookup"><span data-stu-id="c9856-155">Indicates whether to report Start, Stop, Pause, and Continue commands in the event log.</span></span></summary>
        <value><span data-ttu-id="c9856-156">为 <see langword="true" /> 时在事件日志中报告信息；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="c9856-156"><see langword="true" /> to report information in the event log; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c9856-157">设置 <xref:System.ServiceProcess.ServiceBase.AutoLog%2A> 以 `true` 指示服务使用应用程序事件日志报告命令失败，并指示服务上的 "启动"、"停止"、"暂停" 和 "继续" 事件的状态更改信息。</span><span class="sxs-lookup"><span data-stu-id="c9856-157">Setting <xref:System.ServiceProcess.ServiceBase.AutoLog%2A> to `true` instructs the service to use the Application event log to report command failures, as well as state change information for Start, Stop, Pause, and Continue events on the service.</span></span> <span data-ttu-id="c9856-158">服务的名称将用作日志的名称 <xref:System.Diagnostics.EventLog.Source%2A?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="c9856-158">The name of the service is used as the log's <xref:System.Diagnostics.EventLog.Source%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="c9856-159">若要将信息报告给自定义事件日志而不是应用程序日志，请将设置 <xref:System.ServiceProcess.ServiceBase.AutoLog%2A> 为， `false` 并在命令处理方法、或中写入说明， <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> <xref:System.ServiceProcess.ServiceBase.OnPause%2A> <xref:System.ServiceProcess.ServiceBase.OnStop%2A> 以发布到适当的日志。</span><span class="sxs-lookup"><span data-stu-id="c9856-159">To report information to a custom event log rather than the Application log, set <xref:System.ServiceProcess.ServiceBase.AutoLog%2A> to `false` and write instructions within the command-handling methods <xref:System.ServiceProcess.ServiceBase.OnContinue%2A>, <xref:System.ServiceProcess.ServiceBase.OnPause%2A>, or <xref:System.ServiceProcess.ServiceBase.OnStop%2A> to post to the appropriate log.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c9856-160">在 <xref:System.ServiceProcess.ServiceBase.ServiceName%2A> 服务尝试写入事件日志之前，必须设置用于提供事件日志的源字符串的。</span><span class="sxs-lookup"><span data-stu-id="c9856-160">The <xref:System.ServiceProcess.ServiceBase.ServiceName%2A>, which supplies the source string for the event log, must be set before the service attempts to write to the event log.</span></span> <span data-ttu-id="c9856-161">尝试在设置源名称之前访问事件日志会引发异常。</span><span class="sxs-lookup"><span data-stu-id="c9856-161">Trying to access the event log before the source name is set throws an exception.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceBase.EventLog" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStart(System.String[])" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStop" />
      </Docs>
    </Member>
    <Member MemberName="CanHandlePowerEvent">
      <MemberSignature Language="C#" Value="public bool CanHandlePowerEvent { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanHandlePowerEvent" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceBase.CanHandlePowerEvent" />
      <MemberSignature Language="VB.NET" Value="Public Property CanHandlePowerEvent As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CanHandlePowerEvent { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.CanHandlePowerEvent : bool with get, set" Usage="System.ServiceProcess.ServiceBase.CanHandlePowerEvent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>4.2.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c9856-162">获取或设置一个值，该值指示服务是否可以处理计算机电源状态更改通知。</span><span class="sxs-lookup"><span data-stu-id="c9856-162">Gets or sets a value indicating whether the service can handle notifications of computer power status changes.</span></span></summary>
        <value><span data-ttu-id="c9856-163">如果服务处理 <see cref="T:System.ServiceProcess.PowerBroadcastStatus" /> 类中指示的计算机电源状态更改，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="c9856-163"><see langword="true" /> if the service handles the computer power status changes indicated in the <see cref="T:System.ServiceProcess.PowerBroadcastStatus" /> class, otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c9856-164">当计算机电源状态更改时，服务控制管理器 (SCM) 使用的值验证服务是否接受电源事件命令 <xref:System.ServiceProcess.ServiceBase.CanHandlePowerEvent%2A> 。</span><span class="sxs-lookup"><span data-stu-id="c9856-164">When the computer power status changes, the Service Control Manager (SCM) verifies whether the service accepts power event commands using the value of <xref:System.ServiceProcess.ServiceBase.CanHandlePowerEvent%2A>.</span></span>  
  
 <span data-ttu-id="c9856-165">如果 <xref:System.ServiceProcess.ServiceBase.CanHandlePowerEvent%2A> 为 `true` ，则将该命令传递到服务，并在 <xref:System.ServiceProcess.ServiceBase.OnPowerEvent%2A> 定义时调用方法。</span><span class="sxs-lookup"><span data-stu-id="c9856-165">If <xref:System.ServiceProcess.ServiceBase.CanHandlePowerEvent%2A> is `true`, the command is passed to the service and the <xref:System.ServiceProcess.ServiceBase.OnPowerEvent%2A> method is called if defined.</span></span> <span data-ttu-id="c9856-166">如果 <xref:System.ServiceProcess.ServiceBase.OnPowerEvent%2A> 未在派生类中实现，则 SCM 通过空基类方法处理电源事件 <xref:System.ServiceProcess.ServiceBase.OnPowerEvent%2A?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="c9856-166">If <xref:System.ServiceProcess.ServiceBase.OnPowerEvent%2A> is not implemented in the derived class, the SCM handles the power event through the empty base class <xref:System.ServiceProcess.ServiceBase.OnPowerEvent%2A?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c9856-167">此属性将在服务启动后被修改。</span><span class="sxs-lookup"><span data-stu-id="c9856-167">This property is modified after the service was started.</span></span></exception>
        <altmember cref="T:System.ServiceProcess.PowerBroadcastStatus" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnPowerEvent(System.ServiceProcess.PowerBroadcastStatus)" />
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanPauseAndContinue" />
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanShutdown" />
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanStop" />
      </Docs>
    </Member>
    <Member MemberName="CanHandleSessionChangeEvent">
      <MemberSignature Language="C#" Value="public bool CanHandleSessionChangeEvent { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanHandleSessionChangeEvent" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceBase.CanHandleSessionChangeEvent" />
      <MemberSignature Language="VB.NET" Value="Public Property CanHandleSessionChangeEvent As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CanHandleSessionChangeEvent { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.CanHandleSessionChangeEvent : bool with get, set" Usage="System.ServiceProcess.ServiceBase.CanHandleSessionChangeEvent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>4.2.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;dotnet-plat-ext-5.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.Runtime.InteropServices.ComVisible(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.ComVisible(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c9856-168">获取或设置一个值，该值指示服务是否可以处理从终端服务器会话接收到的会话更改事件。</span><span class="sxs-lookup"><span data-stu-id="c9856-168">Gets or sets a value that indicates whether the service can handle session change events received from a Terminal Server session.</span></span></summary>
        <value><span data-ttu-id="c9856-169">如果服务可以处理终端服务器会话更改事件，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="c9856-169"><see langword="true" /> if the service can handle Terminal Server session change events; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c9856-170">此属性将在服务启动后被修改。</span><span class="sxs-lookup"><span data-stu-id="c9856-170">This property is modified after the service was started.</span></span></exception>
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnSessionChange(System.ServiceProcess.SessionChangeDescription)" />
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanShutdown" />
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanStop" />
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanHandlePowerEvent" />
      </Docs>
    </Member>
    <Member MemberName="CanPauseAndContinue">
      <MemberSignature Language="C#" Value="public bool CanPauseAndContinue { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanPauseAndContinue" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceBase.CanPauseAndContinue" />
      <MemberSignature Language="VB.NET" Value="Public Property CanPauseAndContinue As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CanPauseAndContinue { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.CanPauseAndContinue : bool with get, set" Usage="System.ServiceProcess.ServiceBase.CanPauseAndContinue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>4.2.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c9856-171">获取或设置指示服务是否可以暂停并再继续的值。</span><span class="sxs-lookup"><span data-stu-id="c9856-171">Gets or sets a value indicating whether the service can be paused and resumed.</span></span></summary>
        <value><span data-ttu-id="c9856-172">如果服务可以暂停，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="c9856-172"><see langword="true" /> if the service can be paused; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c9856-173"><xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A>在服务的构造函数中设置属性的值。</span><span class="sxs-lookup"><span data-stu-id="c9856-173">Set the value of the <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> property in the constructor for the service.</span></span>  
  
 <span data-ttu-id="c9856-174">服务暂停时，它会暂停正在进行的操作。</span><span class="sxs-lookup"><span data-stu-id="c9856-174">When a service is paused, it halts what it is doing.</span></span> <span data-ttu-id="c9856-175">通过服务控制管理器或以编程方式)  (继续服务时，将 <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> 运行。</span><span class="sxs-lookup"><span data-stu-id="c9856-175">When you continue the service (either through the Service Control Manager or programmatically), <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> runs.</span></span>  
  
 <span data-ttu-id="c9856-176">向服务发送暂停请求可以节省系统资源。</span><span class="sxs-lookup"><span data-stu-id="c9856-176">Sending a Pause request to the service can conserve system resources.</span></span> <span data-ttu-id="c9856-177">暂停可能不会释放所有系统资源，而是停止。</span><span class="sxs-lookup"><span data-stu-id="c9856-177">Pause may not release all system resources, but Stop does.</span></span> <span data-ttu-id="c9856-178"><xref:System.ServiceProcess.ServiceBase.OnPause%2A> 和 <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> 通常用于执行比和更少的 <xref:System.ServiceProcess.ServiceBase.OnStop%2A> 处理 <xref:System.ServiceProcess.ServiceBase.OnStart%2A> 。</span><span class="sxs-lookup"><span data-stu-id="c9856-178"><xref:System.ServiceProcess.ServiceBase.OnPause%2A> and <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> are often implemented to perform less processing than <xref:System.ServiceProcess.ServiceBase.OnStop%2A> and <xref:System.ServiceProcess.ServiceBase.OnStart%2A>.</span></span>  
  
 <span data-ttu-id="c9856-179">当 <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> 为时 `true` ，重写 <xref:System.ServiceProcess.ServiceBase.OnPause%2A> 并 <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> 指定在服务控制管理器 (SCM) 将 "暂停" 或 "继续" 请求传递给你的服务时应发生的处理。</span><span class="sxs-lookup"><span data-stu-id="c9856-179">When <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> is `true`, override <xref:System.ServiceProcess.ServiceBase.OnPause%2A> and <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> to specify the processing that should occur when the Service Control Manager (SCM) passes a Pause or Continue request to your service.</span></span> <span data-ttu-id="c9856-180"><xref:System.ServiceProcess.ServiceBase.OnContinue%2A> 应实现以撤消中的处理 <xref:System.ServiceProcess.ServiceBase.OnPause%2A> 。</span><span class="sxs-lookup"><span data-stu-id="c9856-180"><xref:System.ServiceProcess.ServiceBase.OnContinue%2A> should be implemented to undo the processing in <xref:System.ServiceProcess.ServiceBase.OnPause%2A>.</span></span>  
  
 <span data-ttu-id="c9856-181">如果 <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> 为 `false` ，则 SCM 将不会向服务传递暂停或继续请求，因此 <xref:System.ServiceProcess.ServiceBase.OnPause%2A> ， <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> 不会调用和方法，即使它们是实现的。</span><span class="sxs-lookup"><span data-stu-id="c9856-181">If <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> is `false`, the SCM will not pass Pause or Continue requests to the service, so the <xref:System.ServiceProcess.ServiceBase.OnPause%2A> and <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> methods will not be called even if they are implemented.</span></span> <span data-ttu-id="c9856-182">在 SCM 中，在 `Pause` `Continue` 为时禁用和控件 <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> `false` 。</span><span class="sxs-lookup"><span data-stu-id="c9856-182">In the SCM, the `Pause` and `Continue` controls are disabled when <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> is `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c9856-183">服务已启动。</span><span class="sxs-lookup"><span data-stu-id="c9856-183">The service has already been started.</span></span> <span data-ttu-id="c9856-184">在服务启动后不能更改 <see cref="P:System.ServiceProcess.ServiceBase.CanPauseAndContinue" /> 属性。</span><span class="sxs-lookup"><span data-stu-id="c9856-184">The <see cref="P:System.ServiceProcess.ServiceBase.CanPauseAndContinue" /> property cannot be changed once the service has started.</span></span></exception>
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnPause" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnContinue" />
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanShutdown" />
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanStop" />
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanHandlePowerEvent" />
      </Docs>
    </Member>
    <Member MemberName="CanShutdown">
      <MemberSignature Language="C#" Value="public bool CanShutdown { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanShutdown" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceBase.CanShutdown" />
      <MemberSignature Language="VB.NET" Value="Public Property CanShutdown As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CanShutdown { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.CanShutdown : bool with get, set" Usage="System.ServiceProcess.ServiceBase.CanShutdown" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>4.2.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c9856-185">获取或设置一个值，该值指示系统关闭时是否应通知服务。</span><span class="sxs-lookup"><span data-stu-id="c9856-185">Gets or sets a value indicating whether the service should be notified when the system is shutting down.</span></span></summary>
        <value><span data-ttu-id="c9856-186">如果系统关闭时应通知服务，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="c9856-186"><see langword="true" /> if the service should be notified when the system is shutting down; otherwise, <see langword="false" />.</span></span>  <span data-ttu-id="c9856-187">默认为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="c9856-187">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c9856-188">如果 <xref:System.ServiceProcess.ServiceBase.CanShutdown%2A> 为 `true` ，则在系统关闭时通知服务。</span><span class="sxs-lookup"><span data-stu-id="c9856-188">If <xref:System.ServiceProcess.ServiceBase.CanShutdown%2A> is `true`, the service is notified when the system is shutting down.</span></span> <span data-ttu-id="c9856-189">关机时， <xref:System.ServiceProcess.ServiceBase.OnShutdown%2A> 如果已在派生类中实现，则调用方法。</span><span class="sxs-lookup"><span data-stu-id="c9856-189">At shutdown, the <xref:System.ServiceProcess.ServiceBase.OnShutdown%2A> method is called if it has been implemented in your derived class.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c9856-190">只有系统会导致 <xref:System.ServiceProcess.ServiceBase.OnShutdown%2A> 执行方法; 服务可以调用该方法，但这不是建议的方法。</span><span class="sxs-lookup"><span data-stu-id="c9856-190">Only the system should cause the <xref:System.ServiceProcess.ServiceBase.OnShutdown%2A> method to execute; the service can call it, but this is not recommended.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c9856-191">服务已启动。</span><span class="sxs-lookup"><span data-stu-id="c9856-191">The service has already been started.</span></span> <span data-ttu-id="c9856-192">在服务启动后不能更改 <see cref="P:System.ServiceProcess.ServiceBase.CanShutdown" /> 属性。</span><span class="sxs-lookup"><span data-stu-id="c9856-192">The <see cref="P:System.ServiceProcess.ServiceBase.CanShutdown" /> property cannot be changed once the service has started.</span></span></exception>
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnShutdown" />
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanPauseAndContinue" />
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanStop" />
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanHandlePowerEvent" />
      </Docs>
    </Member>
    <Member MemberName="CanStop">
      <MemberSignature Language="C#" Value="public bool CanStop { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanStop" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceBase.CanStop" />
      <MemberSignature Language="VB.NET" Value="Public Property CanStop As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CanStop { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.CanStop : bool with get, set" Usage="System.ServiceProcess.ServiceBase.CanStop" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>4.2.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(true)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c9856-193">获取或设置一个值，该值指示服务启动后是否可以停止。</span><span class="sxs-lookup"><span data-stu-id="c9856-193">Gets or sets a value indicating whether the service can be stopped once it has started.</span></span></summary>
        <value><span data-ttu-id="c9856-194">如果服务可以停止并调用了 <see cref="M:System.ServiceProcess.ServiceBase.OnStop" /> 方法，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="c9856-194"><see langword="true" /> if the service can be stopped and the <see cref="M:System.ServiceProcess.ServiceBase.OnStop" /> method called; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c9856-195">当对服务调用停止时，服务控制管理器 (SCM) 使用的值验证服务是否接受停止命令 <xref:System.ServiceProcess.ServiceBase.CanStop%2A> 。</span><span class="sxs-lookup"><span data-stu-id="c9856-195">When Stop is called on a service, the Service Control Manager (SCM) verifies whether the service accepts Stop commands using the value of <xref:System.ServiceProcess.ServiceBase.CanStop%2A>.</span></span> <span data-ttu-id="c9856-196">对于大多数服务，的值 <xref:System.ServiceProcess.ServiceBase.CanStop%2A> 为 `true` ，但某些操作系统服务不允许用户将其停止。</span><span class="sxs-lookup"><span data-stu-id="c9856-196">For most services, the value of <xref:System.ServiceProcess.ServiceBase.CanStop%2A> is `true`, but some operating system services, for example, do not allow the user to stop them.</span></span>  
  
 <span data-ttu-id="c9856-197">如果 <xref:System.ServiceProcess.ServiceBase.CanStop%2A> 为 `true` ，则将停止命令传递给服务， <xref:System.ServiceProcess.ServiceBase.OnStop%2A> 如果定义了方法，则调用方法。</span><span class="sxs-lookup"><span data-stu-id="c9856-197">If <xref:System.ServiceProcess.ServiceBase.CanStop%2A> is `true`, the Stop command is passed to the service and the <xref:System.ServiceProcess.ServiceBase.OnStop%2A> method is called if it is defined.</span></span> <span data-ttu-id="c9856-198">如果 <xref:System.ServiceProcess.ServiceBase.OnStop%2A> 未在派生类中实现，则 SCM 通过空基类方法处理 Stop 命令 <xref:System.ServiceProcess.ServiceBase.OnStop%2A?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="c9856-198">If <xref:System.ServiceProcess.ServiceBase.OnStop%2A> is not implemented in the derived class, the SCM handles the Stop command through the empty base class <xref:System.ServiceProcess.ServiceBase.OnStop%2A?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c9856-199">服务已启动。</span><span class="sxs-lookup"><span data-stu-id="c9856-199">The service has already been started.</span></span> <span data-ttu-id="c9856-200">在服务启动后不能更改 <see cref="P:System.ServiceProcess.ServiceBase.CanStop" /> 属性。</span><span class="sxs-lookup"><span data-stu-id="c9856-200">The <see cref="P:System.ServiceProcess.ServiceBase.CanStop" /> property cannot be changed once the service has started.</span></span></exception>
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStop" />
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanPauseAndContinue" />
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanShutdown" />
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanHandlePowerEvent" />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceBase.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="serviceBase.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>4.2.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing"><span data-ttu-id="c9856-201">若要释放托管资源和非托管资源，则为 <see langword="true" />；若仅释放非托管资源，则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="c9856-201"><see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</span></span></param>
        <summary><span data-ttu-id="c9856-202">处置由 <see cref="T:System.ServiceProcess.ServiceBase" /> 占用的资源（内存除外）。</span><span class="sxs-lookup"><span data-stu-id="c9856-202">Disposes of the resources (other than memory) used by the <see cref="T:System.ServiceProcess.ServiceBase" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c9856-203">在 <xref:System.ServiceProcess.ServiceBase.Dispose%2A> 派生类中调用，并在派生类中调用，在 <xref:System.ServiceProcess.ServiceBase> 使用派生类完成时，在类) 中 (。</span><span class="sxs-lookup"><span data-stu-id="c9856-203">Call <xref:System.ServiceProcess.ServiceBase.Dispose%2A> in your derived class (and through it, in the <xref:System.ServiceProcess.ServiceBase> class) when you are finished using the derived class.</span></span> <span data-ttu-id="c9856-204"><xref:System.ServiceProcess.ServiceBase.Dispose%2A>方法使派生类处于不可用状态。</span><span class="sxs-lookup"><span data-stu-id="c9856-204">The <xref:System.ServiceProcess.ServiceBase.Dispose%2A> method leaves the derived class in an unusable state.</span></span> <span data-ttu-id="c9856-205">调用之后 <xref:System.ServiceProcess.ServiceBase.Dispose%2A> ，必须释放对派生类的所有引用， <xref:System.ServiceProcess.ServiceBase> 以便垃圾回收可以回收它们占用的内存。</span><span class="sxs-lookup"><span data-stu-id="c9856-205">After calling <xref:System.ServiceProcess.ServiceBase.Dispose%2A>, you must release all references to the derived class and <xref:System.ServiceProcess.ServiceBase> so the memory they were occupying can be reclaimed by garbage collection.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c9856-206"><xref:System.ServiceProcess.ServiceBase.Dispose%2A>在您释放对派生自的类的最后一个引用之前，始终调用 <xref:System.ServiceProcess.ServiceBase> 。</span><span class="sxs-lookup"><span data-stu-id="c9856-206">Always call <xref:System.ServiceProcess.ServiceBase.Dispose%2A> before you release your last reference to the class derived from <xref:System.ServiceProcess.ServiceBase>.</span></span> <span data-ttu-id="c9856-207">否则，在 <xref:System.ServiceProcess.ServiceBase> 垃圾回收调用对象的析构函数之前，将不会释放资源和派生类。</span><span class="sxs-lookup"><span data-stu-id="c9856-207">Otherwise, the resources <xref:System.ServiceProcess.ServiceBase> and the derived class are using will not be freed until garbage collection calls the objects' destructors.</span></span>  
  
 <span data-ttu-id="c9856-208"><xref:System.ServiceProcess.ServiceBase.OnStop%2A> 通常实现来处理中的代码 <xref:System.ServiceProcess.ServiceBase.OnPause%2A> ，并结合对的调用 <xref:System.ServiceProcess.ServiceBase.Dispose%2A> 。</span><span class="sxs-lookup"><span data-stu-id="c9856-208"><xref:System.ServiceProcess.ServiceBase.OnStop%2A> is often implemented to process the code in <xref:System.ServiceProcess.ServiceBase.OnPause%2A>, combined with a call to <xref:System.ServiceProcess.ServiceBase.Dispose%2A>.</span></span> <span data-ttu-id="c9856-209">如果在派生类中选择执行此操作，则可通过实现 <xref:System.ServiceProcess.ServiceBase.OnStart%2A> 来分配任何已 <xref:System.ServiceProcess.ServiceBase.Dispose%2A> 释放的。</span><span class="sxs-lookup"><span data-stu-id="c9856-209">If you choose to do this in your derived class, it is customary to implement <xref:System.ServiceProcess.ServiceBase.OnStart%2A> to allocate whatever <xref:System.ServiceProcess.ServiceBase.Dispose%2A> released.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ServiceProcess.ServiceBase.#ctor" />
      </Docs>
    </Member>
    <Member MemberName="EventLog">
      <MemberSignature Language="C#" Value="public virtual System.Diagnostics.EventLog EventLog { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Diagnostics.EventLog EventLog" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceBase.EventLog" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property EventLog As EventLog" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Diagnostics::EventLog ^ EventLog { System::Diagnostics::EventLog ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.EventLog : System.Diagnostics.EventLog" Usage="System.ServiceProcess.ServiceBase.EventLog" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>4.2.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="dotnet-plat-ext-5.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="dotnet-plat-ext-5.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Diagnostics.EventLog</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c9856-210">获取一个事件日志，它可用于将服务命令调用的通知（如“开始”和“停止”）写入“应用程序”事件日志。</span><span class="sxs-lookup"><span data-stu-id="c9856-210">Gets an event log you can use to write notification of service command calls, such as Start and Stop, to the Application event log.</span></span></summary>
        <value><span data-ttu-id="c9856-211"><see cref="T:System.Diagnostics.EventLog" /> 实例，它的源注册到 Application 日志中。</span><span class="sxs-lookup"><span data-stu-id="c9856-211">An <see cref="T:System.Diagnostics.EventLog" /> instance whose source is registered to the Application log.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c9856-212">构造函数 <xref:System.ServiceProcess.ServiceBase.EventLog%2A> 将属性初始化为具有 <xref:System.Diagnostics.EventLog.Source%2A?displayProperty=nameWithType> 和 <xref:System.Diagnostics.EventLog.Log%2A?displayProperty=nameWithType> 属性集的实例。</span><span class="sxs-lookup"><span data-stu-id="c9856-212">The constructor initializes the <xref:System.ServiceProcess.ServiceBase.EventLog%2A> property to an instance with the <xref:System.Diagnostics.EventLog.Source%2A?displayProperty=nameWithType> and <xref:System.Diagnostics.EventLog.Log%2A?displayProperty=nameWithType> properties set.</span></span> <span data-ttu-id="c9856-213">源是 <xref:System.ServiceProcess.ServiceBase.ServiceName%2A> 服务的，日志是计算机的应用程序日志。</span><span class="sxs-lookup"><span data-stu-id="c9856-213">The source is the <xref:System.ServiceProcess.ServiceBase.ServiceName%2A> of the service, and the log is the computer's Application log.</span></span> <span data-ttu-id="c9856-214">这些值是自动设置的，不能更改以自动记录服务命令。</span><span class="sxs-lookup"><span data-stu-id="c9856-214">These values are set automatically and cannot be changed for automatic logging of service commands.</span></span>  
  
 <span data-ttu-id="c9856-215">当 <xref:System.ServiceProcess.ServiceBase.AutoLog%2A> 为时 `true` ，会自动在应用程序事件日志中记录 "启动"、"停止"、"暂停"、"继续" 和自定义命令。</span><span class="sxs-lookup"><span data-stu-id="c9856-215">When <xref:System.ServiceProcess.ServiceBase.AutoLog%2A> is `true`, Start, Stop, Pause, Continue, and custom commands are recorded automatically in the Application event log.</span></span> <span data-ttu-id="c9856-216">还可以使用 <xref:System.ServiceProcess.ServiceBase.EventLog%2A> 属性将其他消息写入该日志。</span><span class="sxs-lookup"><span data-stu-id="c9856-216">You can use the <xref:System.ServiceProcess.ServiceBase.EventLog%2A> property to write additional messages to that log as well.</span></span> <span data-ttu-id="c9856-217">组件 <xref:System.Diagnostics.EventLog.WriteEntry%2A?displayProperty=nameWithType> 使用此成员进行调用 <xref:System.ServiceProcess.ServiceBase.EventLog%2A> 。</span><span class="sxs-lookup"><span data-stu-id="c9856-217">The component calls <xref:System.Diagnostics.EventLog.WriteEntry%2A?displayProperty=nameWithType> using this <xref:System.ServiceProcess.ServiceBase.EventLog%2A> member.</span></span>  
  
 <span data-ttu-id="c9856-218">若要将信息报告给自定义事件日志而不是应用程序日志，请将设置 <xref:System.ServiceProcess.ServiceBase.AutoLog%2A> 为， `false` 并在命令处理方法、或中写入说明， <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> <xref:System.ServiceProcess.ServiceBase.OnPause%2A> <xref:System.ServiceProcess.ServiceBase.OnStop%2A> 以发布到适当的日志。</span><span class="sxs-lookup"><span data-stu-id="c9856-218">To report information to a custom event log rather than the Application log, set <xref:System.ServiceProcess.ServiceBase.AutoLog%2A> to `false` and write instructions within the command-handling methods <xref:System.ServiceProcess.ServiceBase.OnContinue%2A>, <xref:System.ServiceProcess.ServiceBase.OnPause%2A>, or <xref:System.ServiceProcess.ServiceBase.OnStop%2A> to post to the appropriate log.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceBase.AutoLog" />
        <altmember cref="P:System.Diagnostics.EventLog.Source" />
        <altmember cref="T:System.Diagnostics.EventLog" />
      </Docs>
    </Member>
    <Member MemberName="ExitCode">
      <MemberSignature Language="C#" Value="public int ExitCode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ExitCode" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceBase.ExitCode" />
      <MemberSignature Language="VB.NET" Value="Public Property ExitCode As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ExitCode { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.ExitCode : int with get, set" Usage="System.ServiceProcess.ServiceBase.ExitCode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>4.2.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.Runtime.InteropServices.ComVisible(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.ComVisible(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c9856-219">获取或设置服务的退出代码。</span><span class="sxs-lookup"><span data-stu-id="c9856-219">Gets or sets the exit code for the service.</span></span></summary>
        <value><span data-ttu-id="c9856-220">服务的退出代码。</span><span class="sxs-lookup"><span data-stu-id="c9856-220">The exit code for the service.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c9856-221">将该 <xref:System.ServiceProcess.ServiceBase.ExitCode%2A> 属性设置为一个非零值，然后停止该服务以向服务控制管理器指示错误。</span><span class="sxs-lookup"><span data-stu-id="c9856-221">Set the <xref:System.ServiceProcess.ServiceBase.ExitCode%2A> property to a non-zero value before stopping the service to indicate an error to the Service Control Manager.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxNameLength">
      <MemberSignature Language="C#" Value="public const int MaxNameLength = 80;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int32 MaxNameLength = (80)" />
      <MemberSignature Language="DocId" Value="F:System.ServiceProcess.ServiceBase.MaxNameLength" />
      <MemberSignature Language="VB.NET" Value="Public Const MaxNameLength As Integer  = 80" />
      <MemberSignature Language="C++ CLI" Value="public: int MaxNameLength = 80;" />
      <MemberSignature Language="F#" Value="val mutable MaxNameLength : int" Usage="System.ServiceProcess.ServiceBase.MaxNameLength" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>4.2.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <MemberValue>80</MemberValue>
      <Docs>
        <summary><span data-ttu-id="c9856-222">指示服务名称的最大大小。</span><span class="sxs-lookup"><span data-stu-id="c9856-222">Indicates the maximum size for a service name.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c9856-223">ServiceName 和 DisplayName 都具有大小限制，在设置服务类的属性时必须遵循这些限制。</span><span class="sxs-lookup"><span data-stu-id="c9856-223">ServiceName and DisplayName both have size restrictions that must be observed when setting the properties on your service class.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceBase.ServiceName" />
      </Docs>
    </Member>
    <Member MemberName="OnContinue">
      <MemberSignature Language="C#" Value="protected virtual void OnContinue ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnContinue() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceBase.OnContinue" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnContinue ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnContinue();" />
      <MemberSignature Language="F#" Value="abstract member OnContinue : unit -&gt; unit&#xA;override this.OnContinue : unit -&gt; unit" Usage="serviceBase.OnContinue " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>4.2.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c9856-224">在派生类中实现时，<see cref="M:System.ServiceProcess.ServiceBase.OnContinue" /> 于“服务控制管理器”(SCM) 将“继续”命令发送到服务时运行。</span><span class="sxs-lookup"><span data-stu-id="c9856-224">When implemented in a derived class, <see cref="M:System.ServiceProcess.ServiceBase.OnContinue" /> runs when a Continue command is sent to the service by the Service Control Manager (SCM).</span></span> <span data-ttu-id="c9856-225">指定要在服务暂停后恢复正常功能时采取的操作。</span><span class="sxs-lookup"><span data-stu-id="c9856-225">Specifies actions to take when a service resumes normal functioning after being paused.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c9856-226">实现 <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> ，以便将应用程序的响应镜像到 <xref:System.ServiceProcess.ServiceBase.OnPause%2A> 。</span><span class="sxs-lookup"><span data-stu-id="c9856-226">Implement <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> to mirror your application's response to <xref:System.ServiceProcess.ServiceBase.OnPause%2A>.</span></span> <span data-ttu-id="c9856-227">通过服务控制台或以编程) 方式 (继续服务时， <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> 处理将运行，并且服务将再次变为活动状态。</span><span class="sxs-lookup"><span data-stu-id="c9856-227">When you continue the service (either through the Services console or programmatically), the <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> processing runs, and the service becomes active again.</span></span>  
  
 <span data-ttu-id="c9856-228"><xref:System.ServiceProcess.ServiceBase.OnContinue%2A> 当属性为时，应重写 <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> `true` 。</span><span class="sxs-lookup"><span data-stu-id="c9856-228"><xref:System.ServiceProcess.ServiceBase.OnContinue%2A> is expected to be overridden when the <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> property is `true`.</span></span>  
  
 <span data-ttu-id="c9856-229">如果 <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> 为 `false` ，则 SCM 将不会向服务传递暂停或继续请求，因此 <xref:System.ServiceProcess.ServiceBase.OnPause%2A> ， <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> 不会调用和方法，即使它们是实现的。</span><span class="sxs-lookup"><span data-stu-id="c9856-229">If <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> is `false`, the SCM will not pass Pause or Continue requests to the service, so the <xref:System.ServiceProcess.ServiceBase.OnPause%2A> and <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> methods will not be called even if they are implemented.</span></span> <span data-ttu-id="c9856-230">在 SCM 中，在 `Pause` `Continue` 为时禁用和控件 <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> `false` 。</span><span class="sxs-lookup"><span data-stu-id="c9856-230">In the SCM, the `Pause` and `Continue` controls are disabled when <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> is `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanPauseAndContinue" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnPause" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnPowerEvent(System.ServiceProcess.PowerBroadcastStatus)" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnShutdown" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStart(System.String[])" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStop" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnCustomCommand(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="OnCustomCommand">
      <MemberSignature Language="C#" Value="protected virtual void OnCustomCommand (int command);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCustomCommand(int32 command) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceBase.OnCustomCommand(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnCustomCommand (command As Integer)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnCustomCommand(int command);" />
      <MemberSignature Language="F#" Value="abstract member OnCustomCommand : int -&gt; unit&#xA;override this.OnCustomCommand : int -&gt; unit" Usage="serviceBase.OnCustomCommand command" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>4.2.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="command" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="command"><span data-ttu-id="c9856-231">发送给服务的命令消息。</span><span class="sxs-lookup"><span data-stu-id="c9856-231">The command message sent to the service.</span></span></param>
        <summary><span data-ttu-id="c9856-232">在派生类中实现时，<see cref="M:System.ServiceProcess.ServiceBase.OnCustomCommand(System.Int32)" /> 于“服务控制管理器”(SCM) 向服务传递自定义命令时执行。</span><span class="sxs-lookup"><span data-stu-id="c9856-232">When implemented in a derived class, <see cref="M:System.ServiceProcess.ServiceBase.OnCustomCommand(System.Int32)" /> executes when the Service Control Manager (SCM) passes a custom command to the service.</span></span> <span data-ttu-id="c9856-233">指定要在具有指定参数值的命令出现时采取的操作。</span><span class="sxs-lookup"><span data-stu-id="c9856-233">Specifies actions to take when a command with the specified parameter value occurs.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c9856-234"><xref:System.ServiceProcess.ServiceBase.OnCustomCommand%2A> 允许你指定除启动、停止、暂停和继续服务以外的其他功能。</span><span class="sxs-lookup"><span data-stu-id="c9856-234"><xref:System.ServiceProcess.ServiceBase.OnCustomCommand%2A> lets you specify additional functionality beyond starting, stopping, pausing and continuing services.</span></span>  
  
 <span data-ttu-id="c9856-235">SCM 不检查自定义命令来验证服务是否支持 `command` 传入的参数。</span><span class="sxs-lookup"><span data-stu-id="c9856-235">The SCM does not examine the custom command to verify whether the service supports the `command` parameter passed in.</span></span> <span data-ttu-id="c9856-236">它将自定义命令直接传递给服务。</span><span class="sxs-lookup"><span data-stu-id="c9856-236">It passes the custom command directly to the service.</span></span> <span data-ttu-id="c9856-237">如果服务不能识别 `command` 参数，则不会执行任何操作。</span><span class="sxs-lookup"><span data-stu-id="c9856-237">If the service does not recognize the `command` parameter, it does nothing.</span></span>  
  
 <span data-ttu-id="c9856-238">自定义命令由 <xref:System.ServiceProcess.ServiceController.ExecuteCommand%2A> 组件中的语句引发 <xref:System.ServiceProcess.ServiceController> 。</span><span class="sxs-lookup"><span data-stu-id="c9856-238">Custom commands are raised by an <xref:System.ServiceProcess.ServiceController.ExecuteCommand%2A> statement in a <xref:System.ServiceProcess.ServiceController> component.</span></span> <span data-ttu-id="c9856-239">使用 switch 语句或 if .。。用于处理在服务上定义的自定义命令的条件。</span><span class="sxs-lookup"><span data-stu-id="c9856-239">Use a switch statement or if..then condition to handle the custom commands you define on your service.</span></span>  
  
 <span data-ttu-id="c9856-240">可在应用程序中定义或在中使用的自定义命令的唯一值 <xref:System.ServiceProcess.ServiceBase.OnCustomCommand%2A> 是128和255之间的值。</span><span class="sxs-lookup"><span data-stu-id="c9856-240">The only values for a custom command that you can define in your application or use in <xref:System.ServiceProcess.ServiceBase.OnCustomCommand%2A> are those between 128 and 255.</span></span> <span data-ttu-id="c9856-241">低于128的整数对应于系统保留值。</span><span class="sxs-lookup"><span data-stu-id="c9856-241">Integers below 128 correspond to system-reserved values.</span></span>  
  
 <span data-ttu-id="c9856-242">如果 <xref:System.ServiceProcess.ServiceBase.AutoLog%2A> 属性为 `true` ，则自定义命令（如所有其他命令）将条目写入事件日志，以报告方法执行是成功还是失败。</span><span class="sxs-lookup"><span data-stu-id="c9856-242">If the <xref:System.ServiceProcess.ServiceBase.AutoLog%2A> property is `true`, custom commands, like all other commands, write entries to the event log to report whether the method execution succeeded or failed.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnContinue" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnPause" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnPowerEvent(System.ServiceProcess.PowerBroadcastStatus)" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnShutdown" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStart(System.String[])" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStop" />
      </Docs>
    </Member>
    <Member MemberName="OnPause">
      <MemberSignature Language="C#" Value="protected virtual void OnPause ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPause() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceBase.OnPause" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPause ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPause();" />
      <MemberSignature Language="F#" Value="abstract member OnPause : unit -&gt; unit&#xA;override this.OnPause : unit -&gt; unit" Usage="serviceBase.OnPause " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>4.2.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c9856-243">在派生类中实现时，该方法于“服务控制管理器”(SCM) 将“暂停”命令发送到服务时执行。</span><span class="sxs-lookup"><span data-stu-id="c9856-243">When implemented in a derived class, executes when a Pause command is sent to the service by the Service Control Manager (SCM).</span></span> <span data-ttu-id="c9856-244">指定要在服务暂停时采取的操作。</span><span class="sxs-lookup"><span data-stu-id="c9856-244">Specifies actions to take when a service pauses.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c9856-245">用于 <xref:System.ServiceProcess.ServiceBase.OnPause%2A> 指定在服务接收暂停命令时发生的处理。</span><span class="sxs-lookup"><span data-stu-id="c9856-245">Use <xref:System.ServiceProcess.ServiceBase.OnPause%2A> to specify the processing that occurs when the service receives a Pause command.</span></span> <span data-ttu-id="c9856-246"><xref:System.ServiceProcess.ServiceBase.OnPause%2A> 当属性为时，应重写 <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> `true` 。</span><span class="sxs-lookup"><span data-stu-id="c9856-246"><xref:System.ServiceProcess.ServiceBase.OnPause%2A> is expected to be overridden when the <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> property is `true`.</span></span>  
  
 <span data-ttu-id="c9856-247">通过服务控制台或以编程) 方式 (继续暂停的服务时， <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> 处理将运行，并且服务将再次变为活动状态。</span><span class="sxs-lookup"><span data-stu-id="c9856-247">When you continue a paused service (either through the Services console or programmatically), the <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> processing is run, and the service becomes active again.</span></span>  
  
 <span data-ttu-id="c9856-248">Pause 命令仅允许应用程序响应特定事件。</span><span class="sxs-lookup"><span data-stu-id="c9856-248">The Pause command only allows your application to react to a specific event.</span></span> <span data-ttu-id="c9856-249"><xref:System.ServiceProcess.ServiceBase.OnPause%2A> 对未定义的服务执行任何操作。</span><span class="sxs-lookup"><span data-stu-id="c9856-249"><xref:System.ServiceProcess.ServiceBase.OnPause%2A> does nothing to the service that you do not define it to do.</span></span>  
  
 <span data-ttu-id="c9856-250">向服务发送暂停请求可能会保留系统资源，因为暂停无需释放所有系统资源。</span><span class="sxs-lookup"><span data-stu-id="c9856-250">Sending a Pause request to the service can conserve system resources because Pause need not release all system resources.</span></span> <span data-ttu-id="c9856-251">例如，如果线程已由进程打开，则暂停服务而不是停止它可以使线程保持打开状态，避免在服务继续时需要重新分配它们。</span><span class="sxs-lookup"><span data-stu-id="c9856-251">For example, if threads have been opened by the process, pausing a service rather than stopping it can allow the threads to remain open, obviating the need to reallocate them when the service continues.</span></span> <span data-ttu-id="c9856-252">如果将 Pause 定义为释放所有系统资源，它的行为类似于停止命令。</span><span class="sxs-lookup"><span data-stu-id="c9856-252">If you define Pause to release all system resources, it behaves like a Stop command.</span></span>  
  
 <span data-ttu-id="c9856-253">设置 <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> 为 `true` ，并重写 <xref:System.ServiceProcess.ServiceBase.OnPause%2A> 和， <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> 以指定当 SCM 向服务传递暂停或继续请求时应发生的处理。</span><span class="sxs-lookup"><span data-stu-id="c9856-253">Set <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> to `true`, and override <xref:System.ServiceProcess.ServiceBase.OnPause%2A> and <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> to specify the processing that should occur when the SCM passes a Pause or Continue request to your service.</span></span> <span data-ttu-id="c9856-254"><xref:System.ServiceProcess.ServiceBase.OnContinue%2A> 应实现以撤消中的处理 <xref:System.ServiceProcess.ServiceBase.OnPause%2A> 。</span><span class="sxs-lookup"><span data-stu-id="c9856-254"><xref:System.ServiceProcess.ServiceBase.OnContinue%2A> should be implemented to undo the processing in <xref:System.ServiceProcess.ServiceBase.OnPause%2A>.</span></span>  
  
 <span data-ttu-id="c9856-255">如果 <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> 为 `false` ，则 SCM 将不会向服务传递暂停或继续请求，因此 <xref:System.ServiceProcess.ServiceBase.OnPause%2A> ，即使实现了，也不会 <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> 调用和方法。</span><span class="sxs-lookup"><span data-stu-id="c9856-255">If <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> is `false`, the SCM will not pass Pause or Continue requests to the service, so the <xref:System.ServiceProcess.ServiceBase.OnPause%2A> and <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> methods will not be called even if implemented.</span></span> <span data-ttu-id="c9856-256">在 SCM 中，在 `Pause` `Continue` 为时禁用和控件 <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> `false` 。</span><span class="sxs-lookup"><span data-stu-id="c9856-256">In the SCM, the `Pause` and `Continue` controls are disabled when <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> is `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanPauseAndContinue" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnContinue" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnPowerEvent(System.ServiceProcess.PowerBroadcastStatus)" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnShutdown" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStart(System.String[])" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStop" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnCustomCommand(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="OnPowerEvent">
      <MemberSignature Language="C#" Value="protected virtual bool OnPowerEvent (System.ServiceProcess.PowerBroadcastStatus powerStatus);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool OnPowerEvent(valuetype System.ServiceProcess.PowerBroadcastStatus powerStatus) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceBase.OnPowerEvent(System.ServiceProcess.PowerBroadcastStatus)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function OnPowerEvent (powerStatus As PowerBroadcastStatus) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool OnPowerEvent(System::ServiceProcess::PowerBroadcastStatus powerStatus);" />
      <MemberSignature Language="F#" Value="abstract member OnPowerEvent : System.ServiceProcess.PowerBroadcastStatus -&gt; bool&#xA;override this.OnPowerEvent : System.ServiceProcess.PowerBroadcastStatus -&gt; bool" Usage="serviceBase.OnPowerEvent powerStatus" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>4.2.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="powerStatus" Type="System.ServiceProcess.PowerBroadcastStatus" />
      </Parameters>
      <Docs>
        <param name="powerStatus"><span data-ttu-id="c9856-257"><see cref="T:System.ServiceProcess.PowerBroadcastStatus" />，指示来自系统的有关电源状态的通知。</span><span class="sxs-lookup"><span data-stu-id="c9856-257">A <see cref="T:System.ServiceProcess.PowerBroadcastStatus" /> that indicates a notification from the system about its power status.</span></span></param>
        <summary><span data-ttu-id="c9856-258">当在派生类中实现时，该方法于计算机电源状态更改时执行。</span><span class="sxs-lookup"><span data-stu-id="c9856-258">When implemented in a derived class, executes when the computer's power status has changed.</span></span> <span data-ttu-id="c9856-259">这适用于膝上型计算机进入挂起模式时的情况，该模式不同于系统关闭。</span><span class="sxs-lookup"><span data-stu-id="c9856-259">This applies to laptop computers when they go into suspended mode, which is not the same as a system shutdown.</span></span></summary>
        <returns><span data-ttu-id="c9856-260">当在派生类中实现时，应用程序的需要将确定要返回的值。</span><span class="sxs-lookup"><span data-stu-id="c9856-260">When implemented in a derived class, the needs of your application determine what value to return.</span></span> <span data-ttu-id="c9856-261">例如，如果传递了 <see langword="QuerySuspend" /> 广播状态，则可以通过返回 <see langword="false" /> 来使应用程序拒绝查询。</span><span class="sxs-lookup"><span data-stu-id="c9856-261">For example, if a <see langword="QuerySuspend" /> broadcast status is passed, you could cause your application to reject the query by returning <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c9856-262">用于 <xref:System.ServiceProcess.ServiceBase.OnPowerEvent%2A> 指定在枚举中指示的系统事件发生时所发生的处理过程 <xref:System.ServiceProcess.PowerBroadcastStatus> ，例如，当计算机处于挂起模式或指示电池电量不足时。</span><span class="sxs-lookup"><span data-stu-id="c9856-262">Use <xref:System.ServiceProcess.ServiceBase.OnPowerEvent%2A> to specify the processing that occurs when the system event indicated in the <xref:System.ServiceProcess.PowerBroadcastStatus> enumeration occurs--for example, when the computer is placed in suspended mode or indicates low battery power.</span></span>  
  
 <span data-ttu-id="c9856-263"><xref:System.ServiceProcess.ServiceBase.OnPowerEvent%2A> 当属性为时，应重写 <xref:System.ServiceProcess.ServiceBase.CanHandlePowerEvent%2A> `true` 。</span><span class="sxs-lookup"><span data-stu-id="c9856-263"><xref:System.ServiceProcess.ServiceBase.OnPowerEvent%2A> is expected to be overridden when the <xref:System.ServiceProcess.ServiceBase.CanHandlePowerEvent%2A> property is `true`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanHandlePowerEvent" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnContinue" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnPause" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnShutdown" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStart(System.String[])" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStop" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnCustomCommand(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="OnSessionChange">
      <MemberSignature Language="C#" Value="protected virtual void OnSessionChange (System.ServiceProcess.SessionChangeDescription changeDescription);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnSessionChange(valuetype System.ServiceProcess.SessionChangeDescription changeDescription) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceBase.OnSessionChange(System.ServiceProcess.SessionChangeDescription)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnSessionChange (changeDescription As SessionChangeDescription)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnSessionChange(System::ServiceProcess::SessionChangeDescription changeDescription);" />
      <MemberSignature Language="F#" Value="abstract member OnSessionChange : System.ServiceProcess.SessionChangeDescription -&gt; unit&#xA;override this.OnSessionChange : System.ServiceProcess.SessionChangeDescription -&gt; unit" Usage="serviceBase.OnSessionChange changeDescription" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>4.2.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="changeDescription" Type="System.ServiceProcess.SessionChangeDescription" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;dotnet-plat-ext-5.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="changeDescription"><span data-ttu-id="c9856-264">标识更改类型的结构。</span><span class="sxs-lookup"><span data-stu-id="c9856-264">A structure that identifies the change type.</span></span></param>
        <summary><span data-ttu-id="c9856-265">从终端服务器会话接收到更改事件时执行。</span><span class="sxs-lookup"><span data-stu-id="c9856-265">Executes when a change event is received from a Terminal Server session.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c9856-266">必须将属性设置 <xref:System.ServiceProcess.ServiceBase.CanHandleSessionChangeEvent%2A> 为以 `true` 启用此方法的执行。</span><span class="sxs-lookup"><span data-stu-id="c9856-266">You must set the <xref:System.ServiceProcess.ServiceBase.CanHandleSessionChangeEvent%2A> property to `true` to enable the execution of this method.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanHandleSessionChangeEvent" />
        <altmember cref="T:System.ServiceProcess.SessionChangeDescription" />
      </Docs>
    </Member>
    <Member MemberName="OnShutdown">
      <MemberSignature Language="C#" Value="protected virtual void OnShutdown ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnShutdown() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceBase.OnShutdown" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnShutdown ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnShutdown();" />
      <MemberSignature Language="F#" Value="abstract member OnShutdown : unit -&gt; unit&#xA;override this.OnShutdown : unit -&gt; unit" Usage="serviceBase.OnShutdown " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>4.2.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c9856-267">在派生类中实现时，该方法于系统即将关闭时执行。</span><span class="sxs-lookup"><span data-stu-id="c9856-267">When implemented in a derived class, executes when the system is shutting down.</span></span> <span data-ttu-id="c9856-268">该方法指定应在系统即将关闭前执行的处理。</span><span class="sxs-lookup"><span data-stu-id="c9856-268">Specifies what should occur immediately prior to the system shutting down.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c9856-269">用于 <xref:System.ServiceProcess.ServiceBase.OnShutdown%2A> 指定系统关闭时进行的处理。</span><span class="sxs-lookup"><span data-stu-id="c9856-269">Use <xref:System.ServiceProcess.ServiceBase.OnShutdown%2A> to specify the processing that occurs when the system shuts down.</span></span>  
  
 <span data-ttu-id="c9856-270">此事件仅在操作系统关闭时出现，而不在计算机关闭时发生。</span><span class="sxs-lookup"><span data-stu-id="c9856-270">This event occurs only when the operating system is shut down, not when the computer is turned off.</span></span>  
  
 <span data-ttu-id="c9856-271"><xref:System.ServiceProcess.ServiceBase.OnShutdown%2A> 当属性为时，应重写 <xref:System.ServiceProcess.ServiceBase.CanShutdown%2A> `true` 。</span><span class="sxs-lookup"><span data-stu-id="c9856-271"><xref:System.ServiceProcess.ServiceBase.OnShutdown%2A> is expected to be overridden when the <xref:System.ServiceProcess.ServiceBase.CanShutdown%2A> property is `true`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanShutdown" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnContinue" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnPause" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnPowerEvent(System.ServiceProcess.PowerBroadcastStatus)" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStart(System.String[])" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStop" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnCustomCommand(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="OnStart">
      <MemberSignature Language="C#" Value="protected virtual void OnStart (string[] args);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStart(string[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceBase.OnStart(System.String[])" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStart (args As String())" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStart(cli::array &lt;System::String ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="abstract member OnStart : string[] -&gt; unit&#xA;override this.OnStart : string[] -&gt; unit" Usage="serviceBase.OnStart args" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>4.2.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="args" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="args"><span data-ttu-id="c9856-272">启动命令传递的数据。</span><span class="sxs-lookup"><span data-stu-id="c9856-272">Data passed by the start command.</span></span></param>
        <summary><span data-ttu-id="c9856-273">当在派生类中实现时，在下列情况下执行：在“服务控制管理器”(SCM) 向服务发送“开始”命令时，或者在操作系统启动时（对于自动启动的服务）。</span><span class="sxs-lookup"><span data-stu-id="c9856-273">When implemented in a derived class, executes when a Start command is sent to the service by the Service Control Manager (SCM) or when the operating system starts (for a service that starts automatically).</span></span> <span data-ttu-id="c9856-274">指定服务启动时采取的操作。</span><span class="sxs-lookup"><span data-stu-id="c9856-274">Specifies actions to take when the service starts.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c9856-275">用于 <xref:System.ServiceProcess.ServiceBase.OnStart%2A> 指定在服务接收开始命令时发生的处理。</span><span class="sxs-lookup"><span data-stu-id="c9856-275">Use <xref:System.ServiceProcess.ServiceBase.OnStart%2A> to specify the processing that occurs when the service receives a Start command.</span></span> <span data-ttu-id="c9856-276"><xref:System.ServiceProcess.ServiceBase.OnStart%2A> 用于指定服务的行为的方法。</span><span class="sxs-lookup"><span data-stu-id="c9856-276"><xref:System.ServiceProcess.ServiceBase.OnStart%2A> is the method in which you specify the behavior of the service.</span></span> <span data-ttu-id="c9856-277"><xref:System.ServiceProcess.ServiceBase.OnStart%2A> 可以采用自变量作为传递数据的一种方法，但这种用法非常罕见。</span><span class="sxs-lookup"><span data-stu-id="c9856-277"><xref:System.ServiceProcess.ServiceBase.OnStart%2A> can take arguments as a way to pass data, but this usage is rare.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="c9856-278">不要使用构造函数来执行应该在中的处理 <xref:System.ServiceProcess.ServiceBase.OnStart%2A> 。</span><span class="sxs-lookup"><span data-stu-id="c9856-278">Do not use the constructor to perform processing that should be in <xref:System.ServiceProcess.ServiceBase.OnStart%2A>.</span></span> <span data-ttu-id="c9856-279">使用 <xref:System.ServiceProcess.ServiceBase.OnStart%2A> 处理服务的所有初始化。</span><span class="sxs-lookup"><span data-stu-id="c9856-279">Use <xref:System.ServiceProcess.ServiceBase.OnStart%2A> to handle all initialization of your service.</span></span> <span data-ttu-id="c9856-280">此构造函数在应用程序的可执行文件运行时调用，而不是在服务运行时调用。</span><span class="sxs-lookup"><span data-stu-id="c9856-280">The constructor is called when the application's executable runs, not when the service runs.</span></span> <span data-ttu-id="c9856-281">可执行文件在之前运行 <xref:System.ServiceProcess.ServiceBase.OnStart%2A> 。</span><span class="sxs-lookup"><span data-stu-id="c9856-281">The executable runs before <xref:System.ServiceProcess.ServiceBase.OnStart%2A>.</span></span> <span data-ttu-id="c9856-282">例如，当继续操作时，不会再次调用构造函数，因为 SCM 已在内存中保存对象。</span><span class="sxs-lookup"><span data-stu-id="c9856-282">When you continue, for example, the constructor is not called again because the SCM already holds the object in memory.</span></span> <span data-ttu-id="c9856-283">如果 <xref:System.ServiceProcess.ServiceBase.OnStop%2A> 释放在构造函数中分配的资源而不是，则在 <xref:System.ServiceProcess.ServiceBase.OnStart%2A> 第二次调用服务时，不会再次创建所需的资源。</span><span class="sxs-lookup"><span data-stu-id="c9856-283">If <xref:System.ServiceProcess.ServiceBase.OnStop%2A> releases resources allocated in the constructor rather than in <xref:System.ServiceProcess.ServiceBase.OnStart%2A>, the needed resources would not be created again the second time the service is called.</span></span>  
  
 <span data-ttu-id="c9856-284">在计算机重新启动时，可以将服务设置为自动启动，方法是将该 <xref:System.ServiceProcess.ServiceInstaller.StartType%2A> 服务的安装程序上的设置为 <xref:System.ServiceProcess.ServiceStartMode.Automatic> 。</span><span class="sxs-lookup"><span data-stu-id="c9856-284">Services can be set to start automatically when the computer reboots by setting the <xref:System.ServiceProcess.ServiceInstaller.StartType%2A> on the service's installer to <xref:System.ServiceProcess.ServiceStartMode.Automatic>.</span></span> <span data-ttu-id="c9856-285">在这种情况下，将 <xref:System.ServiceProcess.ServiceBase.OnStart%2A> 在系统启动时调用。</span><span class="sxs-lookup"><span data-stu-id="c9856-285">In such a situation, <xref:System.ServiceProcess.ServiceBase.OnStart%2A> would be called at system startup.</span></span>  
  
 <span data-ttu-id="c9856-286"><xref:System.ServiceProcess.ServiceBase.OnStart%2A> 应在派生类中重写。</span><span class="sxs-lookup"><span data-stu-id="c9856-286"><xref:System.ServiceProcess.ServiceBase.OnStart%2A> is expected to be overridden in the derived class.</span></span> <span data-ttu-id="c9856-287">若要使服务有用， <xref:System.ServiceProcess.ServiceBase.OnStart%2A> <xref:System.ServiceProcess.ServiceBase.OnStop%2A> 应在服务类中实现。</span><span class="sxs-lookup"><span data-stu-id="c9856-287">For the service to be useful, <xref:System.ServiceProcess.ServiceBase.OnStart%2A> and <xref:System.ServiceProcess.ServiceBase.OnStop%2A> should both be implemented in your service class.</span></span>  
  
 <span data-ttu-id="c9856-288">方法中的服务的处理初始化参数 <xref:System.ServiceProcess.ServiceBase.OnStart%2A> ，而不是在 Main 方法中。</span><span class="sxs-lookup"><span data-stu-id="c9856-288">Process initialization arguments for the service in the <xref:System.ServiceProcess.ServiceBase.OnStart%2A> method, not in the Main method.</span></span> <span data-ttu-id="c9856-289">`args`可以在 "服务" 控制台中服务的 "属性" 窗口中手动设置参数数组中的参数。</span><span class="sxs-lookup"><span data-stu-id="c9856-289">The arguments in the `args` parameter array can be set manually in the properties window for the service in the Services console.</span></span> <span data-ttu-id="c9856-290">不保存在控制台中输入的参数;从 "控制面板" 启动该服务时，它们将一次性传递到服务。</span><span class="sxs-lookup"><span data-stu-id="c9856-290">The arguments entered in the console are not saved; they are passed to the service on a one-time basis when the service is started from the control panel.</span></span> <span data-ttu-id="c9856-291">自动启动服务时必须存在的参数可放置在服务注册表项 (HKEY_LOCAL_MACHINE \SYSTEM\CurrentControlSet\Services) 的 ImagePath 字符串值中 \\ *\<service name>* 。</span><span class="sxs-lookup"><span data-stu-id="c9856-291">Arguments that must be present when the service is automatically started can be placed in the ImagePath string value for the service's registry key (HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\\*\<service name>*).</span></span> <span data-ttu-id="c9856-292">您可以使用方法从注册表获取参数 <xref:System.Environment.GetCommandLineArgs%2A> ，例如：  `string[] imagePathArgs = Environment.GetCommandLineArgs();` 。</span><span class="sxs-lookup"><span data-stu-id="c9856-292">You can obtain the arguments from the registry using the <xref:System.Environment.GetCommandLineArgs%2A> method, for example:  `string[] imagePathArgs = Environment.GetCommandLineArgs();`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnContinue" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnPause" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnPowerEvent(System.ServiceProcess.PowerBroadcastStatus)" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnShutdown" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStop" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnCustomCommand(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="OnStop">
      <MemberSignature Language="C#" Value="protected virtual void OnStop ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceBase.OnStop" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStop ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStop();" />
      <MemberSignature Language="F#" Value="abstract member OnStop : unit -&gt; unit&#xA;override this.OnStop : unit -&gt; unit" Usage="serviceBase.OnStop " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>4.2.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c9856-293">在派生类中实现时，该方法于“服务控制管理器”(SCM) 将“停止”命令发送到服务时执行。</span><span class="sxs-lookup"><span data-stu-id="c9856-293">When implemented in a derived class, executes when a Stop command is sent to the service by the Service Control Manager (SCM).</span></span> <span data-ttu-id="c9856-294">指定服务停止运行时采取的操作。</span><span class="sxs-lookup"><span data-stu-id="c9856-294">Specifies actions to take when a service stops running.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c9856-295">用于 <xref:System.ServiceProcess.ServiceBase.OnStop%2A> 指定在服务接收到 Stop 命令时发生的处理。</span><span class="sxs-lookup"><span data-stu-id="c9856-295">Use <xref:System.ServiceProcess.ServiceBase.OnStop%2A> to specify the processing that occurs when the service receives a Stop command.</span></span>  
  
 <span data-ttu-id="c9856-296">当 SCM 收到停止命令时，它将使用的值 <xref:System.ServiceProcess.ServiceBase.CanStop%2A> 来验证服务是否接受停止命令。</span><span class="sxs-lookup"><span data-stu-id="c9856-296">When the SCM receives a Stop command, it uses the value of <xref:System.ServiceProcess.ServiceBase.CanStop%2A> to verify whether the service accepts Stop commands.</span></span> <span data-ttu-id="c9856-297">如果 <xref:System.ServiceProcess.ServiceBase.CanStop%2A> 为 `true` ，则将停止命令传递给服务，并在 <xref:System.ServiceProcess.ServiceBase.OnStop%2A> 定义方法时调用。</span><span class="sxs-lookup"><span data-stu-id="c9856-297">If <xref:System.ServiceProcess.ServiceBase.CanStop%2A> is `true`, the Stop command is passed to the service, and the <xref:System.ServiceProcess.ServiceBase.OnStop%2A> method is called if it is defined.</span></span> <span data-ttu-id="c9856-298">如果 <xref:System.ServiceProcess.ServiceBase.OnStop%2A> 在服务中未实现，则 SCM 处理 Stop 命令。</span><span class="sxs-lookup"><span data-stu-id="c9856-298">If <xref:System.ServiceProcess.ServiceBase.OnStop%2A> is not implemented in the service, the SCM handles the Stop command.</span></span>  
  
 <span data-ttu-id="c9856-299">如果 <xref:System.ServiceProcess.ServiceBase.CanStop%2A> 为 `false` ，则 SCM 忽略停止命令。</span><span class="sxs-lookup"><span data-stu-id="c9856-299">If <xref:System.ServiceProcess.ServiceBase.CanStop%2A> is `false`, the SCM ignores the Stop command.</span></span> <span data-ttu-id="c9856-300">它不会传递给服务。</span><span class="sxs-lookup"><span data-stu-id="c9856-300">It is not passed to the service.</span></span> <span data-ttu-id="c9856-301">Stop 命令返回并引发异常。</span><span class="sxs-lookup"><span data-stu-id="c9856-301">The Stop command returns and throws an exception.</span></span>  
  
 <span data-ttu-id="c9856-302"><xref:System.ServiceProcess.ServiceBase.OnStop%2A> 应在派生类中重写。</span><span class="sxs-lookup"><span data-stu-id="c9856-302"><xref:System.ServiceProcess.ServiceBase.OnStop%2A> is expected to be overridden in the derived class.</span></span> <span data-ttu-id="c9856-303">若要使服务有用， <xref:System.ServiceProcess.ServiceBase.OnStart%2A> <xref:System.ServiceProcess.ServiceBase.OnStop%2A> 应在服务类中实现。</span><span class="sxs-lookup"><span data-stu-id="c9856-303">For the service to be useful, <xref:System.ServiceProcess.ServiceBase.OnStart%2A> and <xref:System.ServiceProcess.ServiceBase.OnStop%2A> should both be implemented in your service class.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanStop" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnContinue" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnPowerEvent(System.ServiceProcess.PowerBroadcastStatus)" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnPause" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnShutdown" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStart(System.String[])" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnCustomCommand(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="RequestAdditionalTime">
      <MemberSignature Language="C#" Value="public void RequestAdditionalTime (int milliseconds);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RequestAdditionalTime(int32 milliseconds) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceBase.RequestAdditionalTime(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RequestAdditionalTime (milliseconds As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RequestAdditionalTime(int milliseconds);" />
      <MemberSignature Language="F#" Value="member this.RequestAdditionalTime : int -&gt; unit" Usage="serviceBase.RequestAdditionalTime milliseconds" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>4.2.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.Runtime.InteropServices.ComVisible(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.ComVisible(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="milliseconds" Type="System.Int32" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;dotnet-plat-ext-5.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="milliseconds"><span data-ttu-id="c9856-304">请求的时间（以毫秒为单位）。</span><span class="sxs-lookup"><span data-stu-id="c9856-304">The requested time in milliseconds.</span></span></param>
        <summary><span data-ttu-id="c9856-305">为挂起操作请求额外的时间。</span><span class="sxs-lookup"><span data-stu-id="c9856-305">Requests additional time for a pending operation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c9856-306"><xref:System.ServiceProcess.ServiceBase.RequestAdditionalTime%2A>方法旨在由重写的 <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> 、、 <xref:System.ServiceProcess.ServiceBase.OnPause%2A> <xref:System.ServiceProcess.ServiceBase.OnStart%2A> 或方法调用，以 <xref:System.ServiceProcess.ServiceBase.OnStop%2A> 请求更多时间等待等待操作，以防止服务控制管理器 (SCM) 将服务标记为 "无响应"。</span><span class="sxs-lookup"><span data-stu-id="c9856-306">The <xref:System.ServiceProcess.ServiceBase.RequestAdditionalTime%2A> method is intended to be called by the overridden <xref:System.ServiceProcess.ServiceBase.OnContinue%2A>, <xref:System.ServiceProcess.ServiceBase.OnPause%2A>, <xref:System.ServiceProcess.ServiceBase.OnStart%2A>, or <xref:System.ServiceProcess.ServiceBase.OnStop%2A> methods to request additional time for a pending operation, to prevent the Service Control Manager (SCM) from marking the service as not responding.</span></span>  <span data-ttu-id="c9856-307">如果挂起操作不是 "继续"、"暂停"、"启动" 或 "停止"， <xref:System.InvalidOperationException> 则会引发。</span><span class="sxs-lookup"><span data-stu-id="c9856-307">If the pending operation is not a continue, pause, start, or stop, an <xref:System.InvalidOperationException> is thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c9856-308">服务不处于挂起状态。</span><span class="sxs-lookup"><span data-stu-id="c9856-308">The service is not in a pending state.</span></span></exception>
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnContinue" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnPause" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStart(System.String[])" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStop" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Run">
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c9856-309">为服务可执行文件提供主入口点。</span><span class="sxs-lookup"><span data-stu-id="c9856-309">Provides the main entry point for a service executable.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Run">
      <MemberSignature Language="C#" Value="public static void Run (System.ServiceProcess.ServiceBase service);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Run(class System.ServiceProcess.ServiceBase service) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceBase.Run(System.ServiceProcess.ServiceBase)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Run (service As ServiceBase)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Run(System::ServiceProcess::ServiceBase ^ service);" />
      <MemberSignature Language="F#" Value="static member Run : System.ServiceProcess.ServiceBase -&gt; unit" Usage="System.ServiceProcess.ServiceBase.Run service" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>4.2.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="service" Type="System.ServiceProcess.ServiceBase" />
      </Parameters>
      <Docs>
        <param name="service"><span data-ttu-id="c9856-310"><see cref="T:System.ServiceProcess.ServiceBase" />，指示要启动的服务。</span><span class="sxs-lookup"><span data-stu-id="c9856-310">A <see cref="T:System.ServiceProcess.ServiceBase" /> which indicates a service to start.</span></span></param>
        <summary><span data-ttu-id="c9856-311">在服务控制管理器 (SCM) 中注册服务的可执行文件。</span><span class="sxs-lookup"><span data-stu-id="c9856-311">Registers the executable for a service with the Service Control Manager (SCM).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c9856-312">在 `main()` 服务可执行文件的函数中调用此重载，以向服务控制管理器注册该服务。</span><span class="sxs-lookup"><span data-stu-id="c9856-312">Call this overload in the `main()` function of the service executable to register the service with the Service Control Manager.</span></span> <span data-ttu-id="c9856-313">调用后 <xref:System.ServiceProcess.ServiceBase.Run%28System.ServiceProcess.ServiceBase%29> ，服务控制管理器将发出一个启动命令，该命令将导致调用 <xref:System.ServiceProcess.ServiceBase.OnStart%2A> 服务中的方法。</span><span class="sxs-lookup"><span data-stu-id="c9856-313">After you call <xref:System.ServiceProcess.ServiceBase.Run%28System.ServiceProcess.ServiceBase%29>, the Service Control Manager issues a Start command, which results in a call to the <xref:System.ServiceProcess.ServiceBase.OnStart%2A> method in the service.</span></span> <span data-ttu-id="c9856-314">在执行开始命令之前，不会启动该服务。</span><span class="sxs-lookup"><span data-stu-id="c9856-314">The service is not started until the Start command is executed.</span></span>  
  
 <span data-ttu-id="c9856-315"><xref:System.ServiceProcess.ServiceBase.Run%2A?displayProperty=nameWithType>调用方法的方式与 Windows 窗体应用程序的方式几乎相同 <xref:System.Windows.Forms.Application.Run%2A?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="c9856-315">The <xref:System.ServiceProcess.ServiceBase.Run%2A?displayProperty=nameWithType> method is called in much the same way as <xref:System.Windows.Forms.Application.Run%2A?displayProperty=nameWithType> for Windows Forms applications.</span></span>  
  
 <span data-ttu-id="c9856-316">如果 <xref:System.ServiceProcess.ServiceBase.AutoLog%2A> 为 `true` ，则如果参数指定的服务无法启动，则会将一个项写入事件日志 `service` 。</span><span class="sxs-lookup"><span data-stu-id="c9856-316">If <xref:System.ServiceProcess.ServiceBase.AutoLog%2A> is `true`, an entry is written to the event log if the service specified by the `service` parameter fails to start.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c9856-317"><paramref name="service" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c9856-317"><paramref name="service" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.ServiceProcess.ServiceBase.#ctor" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStart(System.String[])" />
      </Docs>
    </Member>
    <Member MemberName="Run">
      <MemberSignature Language="C#" Value="public static void Run (System.ServiceProcess.ServiceBase[] services);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Run(class System.ServiceProcess.ServiceBase[] services) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceBase.Run(System.ServiceProcess.ServiceBase[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Run (services As ServiceBase())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Run(cli::array &lt;System::ServiceProcess::ServiceBase ^&gt; ^ services);" />
      <MemberSignature Language="F#" Value="static member Run : System.ServiceProcess.ServiceBase[] -&gt; unit" Usage="System.ServiceProcess.ServiceBase.Run services" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>4.2.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="services" Type="System.ServiceProcess.ServiceBase[]" />
      </Parameters>
      <Docs>
        <param name="services"><span data-ttu-id="c9856-318">一组 ServiceBase 实例，指示要启动的服务。</span><span class="sxs-lookup"><span data-stu-id="c9856-318">An array of ServiceBase instances, which indicate services to start.</span></span></param>
        <summary><span data-ttu-id="c9856-319">在服务控制管理器 (SCM) 中注册多项服务的可执行文件。</span><span class="sxs-lookup"><span data-stu-id="c9856-319">Registers the executable for multiple services with the Service Control Manager (SCM).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c9856-320">在 `main()` 服务可执行文件的函数中调用此重载，将服务注册到服务控制管理器。</span><span class="sxs-lookup"><span data-stu-id="c9856-320">Call this overload in the `main()` function of the service executable to register the services with the Service Control Manager.</span></span> <span data-ttu-id="c9856-321">调用后 <xref:System.ServiceProcess.ServiceBase.Run%28System.ServiceProcess.ServiceBase%5B%5D%29> ，服务控制管理器会发出启动命令，从而导致对 <xref:System.ServiceProcess.ServiceBase.OnStart%2A> 服务中的方法的调用。</span><span class="sxs-lookup"><span data-stu-id="c9856-321">After you call <xref:System.ServiceProcess.ServiceBase.Run%28System.ServiceProcess.ServiceBase%5B%5D%29>, the Service Control Manager issues Start commands, which result in calls to the <xref:System.ServiceProcess.ServiceBase.OnStart%2A> methods in the services.</span></span> <span data-ttu-id="c9856-322">在执行开始命令之前，服务不会启动。</span><span class="sxs-lookup"><span data-stu-id="c9856-322">The services are not started until the Start commands are executed.</span></span>  
  
 <span data-ttu-id="c9856-323"><xref:System.ServiceProcess.ServiceBase.Run%2A?displayProperty=nameWithType>调用方法的方式与 <xref:System.Windows.Forms.Application.Run%2A?displayProperty=nameWithType> Windows 窗体应用程序的方法大致相同。</span><span class="sxs-lookup"><span data-stu-id="c9856-323">The <xref:System.ServiceProcess.ServiceBase.Run%2A?displayProperty=nameWithType> method is called in much the same way as the <xref:System.Windows.Forms.Application.Run%2A?displayProperty=nameWithType> method for Windows Forms applications.</span></span>  
  
 <span data-ttu-id="c9856-324">如果 <xref:System.ServiceProcess.ServiceBase.AutoLog%2A> 为 `true` ，则当数组中的任何服务启动失败时，会向事件日志写入一项。</span><span class="sxs-lookup"><span data-stu-id="c9856-324">If <xref:System.ServiceProcess.ServiceBase.AutoLog%2A> is `true`, an entry is written to the event log if any service in the array fails to start.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c9856-325">未提供要启动的服务。</span><span class="sxs-lookup"><span data-stu-id="c9856-325">You did not supply a service to start.</span></span> <span data-ttu-id="c9856-326">该数组可能为 <see langword="null" /> 或空。</span><span class="sxs-lookup"><span data-stu-id="c9856-326">The array might be <see langword="null" /> or empty.</span></span></exception>
        <altmember cref="M:System.ServiceProcess.ServiceBase.#ctor" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStart(System.String[])" />
      </Docs>
    </Member>
    <Member MemberName="ServiceHandle">
      <MemberSignature Language="C#" Value="protected IntPtr ServiceHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ServiceHandle" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceBase.ServiceHandle" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property ServiceHandle As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property IntPtr ServiceHandle { IntPtr get(); };" />
      <MemberSignature Language="F#" Value="member this.ServiceHandle : nativeint" Usage="System.ServiceProcess.ServiceBase.ServiceHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>4.2.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;dotnet-plat-ext-5.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c9856-327">获取服务的服务控制句柄。</span><span class="sxs-lookup"><span data-stu-id="c9856-327">Gets the service control handle for the service.</span></span></summary>
        <value><span data-ttu-id="c9856-328">一个 <see cref="T:System.IntPtr" /> 结构，包含服务的服务控制句柄。</span><span class="sxs-lookup"><span data-stu-id="c9856-328">An <see cref="T:System.IntPtr" /> structure that contains the service control handle for the service.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c9856-329">服务控制句柄用于与服务控制管理器 (SCM) 通信。</span><span class="sxs-lookup"><span data-stu-id="c9856-329">The service control handle is used to communicate with the Service Control Manager (SCM).</span></span>  <span data-ttu-id="c9856-330">该句柄可用于使用非托管函数为调用服务更新服务控制管理器的状态信息 `SetServiceStatus` 。</span><span class="sxs-lookup"><span data-stu-id="c9856-330">The handle can be used to update the service control manager's status information for the calling service using the unmanaged `SetServiceStatus` function.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ServiceMainCallback">
      <MemberSignature Language="C#" Value="public void ServiceMainCallback (int argCount, IntPtr argPointer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ServiceMainCallback(int32 argCount, native int argPointer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceBase.ServiceMainCallback(System.Int32,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ServiceMainCallback (argCount As Integer, argPointer As IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ServiceMainCallback(int argCount, IntPtr argPointer);" />
      <MemberSignature Language="F#" Value="member this.ServiceMainCallback : int * nativeint -&gt; unit" Usage="serviceBase.ServiceMainCallback (argCount, argPointer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>4.2.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;dotnet-plat-ext-5.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.Runtime.InteropServices.ComVisible(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.ComVisible(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="argCount" Type="System.Int32" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;dotnet-plat-ext-5.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="argPointer" Type="System.IntPtr" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;dotnet-plat-ext-5.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="argCount"><span data-ttu-id="c9856-331">参数数组中的参数个数。</span><span class="sxs-lookup"><span data-stu-id="c9856-331">The number of arguments in the argument array.</span></span></param>
        <param name="argPointer"><span data-ttu-id="c9856-332">指向参数数组的 <see cref="T:System.IntPtr" /> 结构。</span><span class="sxs-lookup"><span data-stu-id="c9856-332">An <see cref="T:System.IntPtr" /> structure that points to an array of arguments.</span></span></param>
        <summary><span data-ttu-id="c9856-333">注册命令处理程序并启动服务。</span><span class="sxs-lookup"><span data-stu-id="c9856-333">Registers the command handler and starts the service.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ServiceName">
      <MemberSignature Language="C#" Value="public string ServiceName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ServiceName" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceBase.ServiceName" />
      <MemberSignature Language="VB.NET" Value="Public Property ServiceName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ServiceName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ServiceName : string with get, set" Usage="System.ServiceProcess.ServiceBase.ServiceName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>4.2.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName Language="C#">[System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.ServiceProcess.ServiceProcessDescription("SBServiceName")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ServiceProcess.ServiceProcessDescription("SBServiceName")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName Language="C#">[System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c9856-334">获取或设置用于向系统标识服务的简短名称。</span><span class="sxs-lookup"><span data-stu-id="c9856-334">Gets or sets the short name used to identify the service to the system.</span></span></summary>
        <value><span data-ttu-id="c9856-335">服务的名称。</span><span class="sxs-lookup"><span data-stu-id="c9856-335">The name of the service.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c9856-336"><xref:System.ServiceProcess.ServiceBase.ServiceName%2A>向服务控制管理器标识服务。</span><span class="sxs-lookup"><span data-stu-id="c9856-336">The <xref:System.ServiceProcess.ServiceBase.ServiceName%2A> identifies the service to the Service Control Manager.</span></span> <span data-ttu-id="c9856-337">此属性的值必须与在 <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A?displayProperty=nameWithType> 相应的安装程序类的属性中为服务记录的名称相同。</span><span class="sxs-lookup"><span data-stu-id="c9856-337">The value of this property must be identical to the name recorded for the service in the <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A?displayProperty=nameWithType> property of the corresponding installer class.</span></span> <span data-ttu-id="c9856-338">在代码中， <xref:System.ServiceProcess.ServiceBase.ServiceName%2A> 服务的通常在 `main()` 可执行文件的函数中设置。</span><span class="sxs-lookup"><span data-stu-id="c9856-338">In code, the <xref:System.ServiceProcess.ServiceBase.ServiceName%2A> of the service is usually set in the `main()` function of the executable.</span></span>  
  
 <span data-ttu-id="c9856-339"><xref:System.ServiceProcess.ServiceBase.ServiceName%2A>还可用于指定 <xref:System.Diagnostics.EventLog.Source%2A?displayProperty=nameWithType> 与属性关联的 <xref:System.ServiceProcess.ServiceBase.EventLog%2A> 。</span><span class="sxs-lookup"><span data-stu-id="c9856-339">The <xref:System.ServiceProcess.ServiceBase.ServiceName%2A> is also used to specify the <xref:System.Diagnostics.EventLog.Source%2A?displayProperty=nameWithType> associated with the <xref:System.ServiceProcess.ServiceBase.EventLog%2A> property.</span></span> <span data-ttu-id="c9856-340">这 <xref:System.ServiceProcess.ServiceBase.EventLog%2A> 是将服务命令信息写入应用程序日志的实例。</span><span class="sxs-lookup"><span data-stu-id="c9856-340">This <xref:System.ServiceProcess.ServiceBase.EventLog%2A> is an instance that writes service command information to the Application log.</span></span>  
  
 <span data-ttu-id="c9856-341">在 <xref:System.ServiceProcess.ServiceBase.ServiceName%2A> 服务写入事件日志之前，必须设置用于提供事件日志的源字符串的。</span><span class="sxs-lookup"><span data-stu-id="c9856-341">The <xref:System.ServiceProcess.ServiceBase.ServiceName%2A>, which supplies the source string for the event log, must be set before the service writes to the event log.</span></span> <span data-ttu-id="c9856-342">尝试在设置源名称之前访问事件日志会导致引发异常。</span><span class="sxs-lookup"><span data-stu-id="c9856-342">Trying to access the event log before the source name is set causes an exception to be thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c9856-343">服务已启动。</span><span class="sxs-lookup"><span data-stu-id="c9856-343">The service has already been started.</span></span> <span data-ttu-id="c9856-344">在服务启动后不能更改 <see cref="P:System.ServiceProcess.ServiceBase.ServiceName" /> 属性。</span><span class="sxs-lookup"><span data-stu-id="c9856-344">The <see cref="P:System.ServiceProcess.ServiceBase.ServiceName" /> property cannot be changed once the service has started.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c9856-345">指定的名称为零长度字符串，或长于 <see cref="F:System.ServiceProcess.ServiceBase.MaxNameLength" />，就或者指定的名称包含前斜线或后斜线字符。</span><span class="sxs-lookup"><span data-stu-id="c9856-345">The specified name is a zero-length string or is longer than <see cref="F:System.ServiceProcess.ServiceBase.MaxNameLength" />, or the specified name contains forward slash or backslash characters.</span></span></exception>
        <altmember cref="P:System.ServiceProcess.ServiceInstaller.ServiceName" />
        <altmember cref="P:System.Diagnostics.EventLog.Source" />
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public void Stop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Stop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceBase.Stop" />
      <MemberSignature Language="VB.NET" Value="Public Sub Stop ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Stop();" />
      <MemberSignature Language="F#" Value="member this.Stop : unit -&gt; unit" Usage="serviceBase.Stop " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>4.2.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c9856-346">停止执行服务。</span><span class="sxs-lookup"><span data-stu-id="c9856-346">Stops the executing service.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c9856-347"><xref:System.ServiceProcess.ServiceBase.Stop%2A>方法将服务状态设置为指示停止处于挂起状态，并调用 <xref:System.ServiceProcess.ServiceBase.OnStop%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="c9856-347">The <xref:System.ServiceProcess.ServiceBase.Stop%2A> method sets the service state to indicate a stop is pending and calls the <xref:System.ServiceProcess.ServiceBase.OnStop%2A> method.</span></span>  <span data-ttu-id="c9856-348">停止应用程序后，服务状态将设置为 "已停止"。</span><span class="sxs-lookup"><span data-stu-id="c9856-348">After the application is stopped, the service state is set to stopped.</span></span> <span data-ttu-id="c9856-349">如果应用程序是托管服务，则卸载应用程序域。</span><span class="sxs-lookup"><span data-stu-id="c9856-349">If the application is a hosted service, the application domain is unloaded.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanStop" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStop" />
      </Docs>
    </Member>
  </Members>
</Type>
