<Type Name="ServiceProcessInstaller" FullName="System.ServiceProcess.ServiceProcessInstaller">
  <Metadata><Meta Name="ms.openlocfilehash" Value="6ef52b84aa3849da88308918c2b58f81c552ae0e" /><Meta Name="ms.sourcegitcommit" Value="c982ad9e10a242d90f1e631b5981570f9e5d9f34" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/10/2020" /><Meta Name="ms.locfileid" Value="89931557" /></Metadata><TypeSignature Language="C#" Value="public class ServiceProcessInstaller : System.Configuration.Install.ComponentInstaller" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ServiceProcessInstaller extends System.Configuration.Install.ComponentInstaller" />
  <TypeSignature Language="DocId" Value="T:System.ServiceProcess.ServiceProcessInstaller" />
  <TypeSignature Language="VB.NET" Value="Public Class ServiceProcessInstaller&#xA;Inherits ComponentInstaller" />
  <TypeSignature Language="C++ CLI" Value="public ref class ServiceProcessInstaller : System::Configuration::Install::ComponentInstaller" />
  <TypeSignature Language="F#" Value="type ServiceProcessInstaller = class&#xA;    inherit ComponentInstaller" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceProcess</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Configuration.Install.ComponentInstaller</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>安装一个可执行文件，该文件包含扩展 <see cref="T:System.ServiceProcess.ServiceBase" /> 的类。 该类由安装实用工具（如 InstallUtil.exe）在安装服务应用程序时调用。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceProcess.ServiceProcessInstaller>适用于可执行文件中的所有服务。 安装实用工具使用它来编写与你要安装的服务相关联的注册表值。  
  
 若要安装服务，请创建从继承的项目安装程序类 <xref:System.Configuration.Install.Installer> ，并将 <xref:System.ComponentModel.RunInstallerAttribute> 类的设置为 `true` 。 在项目中， <xref:System.ServiceProcess.ServiceProcessInstaller> 为每个服务应用程序实例化一个实例，并 <xref:System.ServiceProcess.ServiceInstaller> 为应用程序中的每个服务实例化一个实例。 最后，将 <xref:System.ServiceProcess.ServiceProcessInstaller> 实例和实例添加 <xref:System.ServiceProcess.ServiceInstaller> 到项目安装程序类。  
  
 当 InstallUtil.exe 运行时，该实用工具将查找服务程序集中的类，并 <xref:System.ComponentModel.RunInstallerAttribute> 将设置为 `true` 。 向服务程序集添加类，方法是将它们添加到 <xref:System.Configuration.Install.Installer.Installers%2A> 与项目安装程序关联的集合中。 如果 <xref:System.ComponentModel.RunInstallerAttribute> 为 `false` ，则安装实用工具将忽略项目安装程序。  
  
 对于实例 <xref:System.ServiceProcess.ServiceProcessInstaller> ，可以修改的属性包括指定服务应用程序在登录用户以外的其他帐户下运行。 可以指定 <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A> 运行服务的特定和 <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> 对，也可以使用 <xref:System.ServiceProcess.ServiceProcessInstaller.Account%2A> 指定服务在计算机的系统帐户、本地或网络服务帐户或用户帐户下运行。  
  
> [!NOTE]
>  计算机的系统帐户不是管理员帐户。  
  
 通常情况下，你不会在代码中调用方法， <xref:System.ServiceProcess.ServiceInstaller> 通常仅由安装实用工具调用它们。 安装实用程序会 <xref:System.ServiceProcess.ServiceProcessInstaller.Install%2A?displayProperty=nameWithType> <xref:System.ServiceProcess.ServiceInstaller.Install%2A?displayProperty=nameWithType> 在安装过程中自动调用和方法。 如有必要，它将通过 <xref:System.ServiceProcess.ServiceProcessInstaller.Rollback%2A> <xref:System.ServiceProcess.ServiceInstaller.Rollback%2A?displayProperty=nameWithType> 对所有以前安装的组件调用 (或) 来退出故障。  
  
 应用程序的安装例程使用项目安装程序的，自动维护有关已安装组件的信息 <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType> 。 此状态信息会持续更新为 <xref:System.ServiceProcess.ServiceProcessInstaller> 实例，并且每个 <xref:System.ServiceProcess.ServiceInstaller> 实例由实用工具安装。 通常不需要让代码显式修改此状态信息。  
  
 实例化 <xref:System.ServiceProcess.ServiceProcessInstaller> 会导致调用基类构造函数 <xref:System.Configuration.Install.ComponentInstaller.%23ctor%2A> 。  
  
   
  
## Examples  
 下面的示例创建名为 MyProjectInstaller 的项目安装程序，该程序从继承 <xref:System.Configuration.Install.Installer> 。 假设有一个服务可执行文件，其中包含两个服务： "Hello World Service 1" 和 "Hello World Service 2"。 在 MyProjectInstaller 的构造函数中 (，该构造函数将由安装实用工具) 调用，为 <xref:System.ServiceProcess.ServiceInstaller> 每个服务创建对象，并为 <xref:System.ServiceProcess.ServiceProcessInstaller> 可执行文件创建一个。 若要让安装实用工具将 MyProjectInstaller 识别为有效安装程序，请将 <xref:System.ComponentModel.RunInstallerAttribute> 属性设置为 `true` 。  
  
 在将安装程序添加到集合之前，在进程安装程序和服务安装程序上设置可选属性 <xref:System.Configuration.Install.Installer.Installers%2A> 。 当安装实用工具访问 MyProjectInstaller 时，通过对的调用添加到 <xref:System.Configuration.Install.Installer.Installers%2A> 集合中的对象 <xref:System.Configuration.Install.InstallerCollection.Add%2A?displayProperty=nameWithType> 将依次安装。 在此过程中，安装程序将保留指示已安装的对象的状态信息，因此，每个对象都可以在安装失败时进行备份。  
  
 通常，不会显式实例化项目安装程序类。 您将创建它并添加 <xref:System.ComponentModel.RunInstallerAttribute> ，但是安装实用工具实际上会调用类，并因此实例化类。  
  
 [!code-cpp[Classic ServiceInstaller Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic ServiceInstaller Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ServiceInstaller Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic ServiceInstaller Example/CS/source.cs#1)]
 [!code-vb[Classic ServiceInstaller Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic ServiceInstaller Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.ServiceProcess.ServiceInstaller" />
    <altmember cref="T:System.ServiceProcess.ServiceBase" />
    <altmember cref="T:System.Configuration.Install.ComponentInstaller" />
    <altmember cref="P:System.Configuration.Install.Installer.Installers" />
    <altmember cref="T:System.ServiceProcess.ServiceAccount" />
    <altmember cref="T:System.ServiceProcess.Design.ServiceInstallerDialog" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ServiceProcessInstaller ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceProcessInstaller.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ServiceProcessInstaller();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>创建 <see cref="T:System.ServiceProcess.ServiceProcessInstaller" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Account">
      <MemberSignature Language="C#" Value="public System.ServiceProcess.ServiceAccount Account { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.ServiceProcess.ServiceAccount Account" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceProcessInstaller.Account" />
      <MemberSignature Language="VB.NET" Value="Public Property Account As ServiceAccount" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ServiceProcess::ServiceAccount Account { System::ServiceProcess::ServiceAccount get(); void set(System::ServiceProcess::ServiceAccount value); };" />
      <MemberSignature Language="F#" Value="member this.Account : System.ServiceProcess.ServiceAccount with get, set" Usage="System.ServiceProcess.ServiceProcessInstaller.Account" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.ServiceProcess.ServiceProcessDescription("ServiceProcessInstallerAccount")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ServiceProcess.ServiceProcessDescription("ServiceProcessInstallerAccount")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ServiceProcess.ServiceAccount</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置运行该服务应用程序时所使用的帐户类型。</summary>
        <value><see cref="T:System.ServiceProcess.ServiceAccount" />，它定义系统运行此服务时所使用的帐户类型。 默认值为 <see langword="User" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当 <xref:System.ServiceProcess.ServiceProcessInstaller.Account%2A> 属性为时 `User` ， <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A> 和 <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> 属性用于定义用于运行服务应用程序的帐户。  
  
 <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A>和 <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> 对允许服务在除系统帐户之外的其他帐户下运行。 例如，如果没有用户登录，则可以允许服务在重新启动时自动启动。 如果保留 <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A> 或 <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> 为空，并且将设置 <xref:System.ServiceProcess.ServiceProcessInstaller.Account%2A> 为 `User` ，则在安装时系统将提示您输入有效的用户名和密码。  
  
 还可以指定服务在本地系统帐户下运行，或以本地或网络服务运行。 <xref:System.ServiceProcess.ServiceAccount>有关帐户类型的详细信息，请参阅枚举。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceProcessInstaller.Username" />
        <altmember cref="P:System.ServiceProcess.ServiceProcessInstaller.Password" />
        <altmember cref="T:System.ServiceProcess.ServiceAccount" />
        <altmember cref="T:System.ServiceProcess.Design.ServiceInstallerDialog" />
      </Docs>
    </Member>
    <Member MemberName="CopyFromComponent">
      <MemberSignature Language="C#" Value="public override void CopyFromComponent (System.ComponentModel.IComponent comp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void CopyFromComponent(class System.ComponentModel.IComponent comp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceProcessInstaller.CopyFromComponent(System.ComponentModel.IComponent)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub CopyFromComponent (comp As IComponent)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void CopyFromComponent(System::ComponentModel::IComponent ^ comp);" />
      <MemberSignature Language="F#" Value="override this.CopyFromComponent : System.ComponentModel.IComponent -&gt; unit" Usage="serviceProcessInstaller.CopyFromComponent comp" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comp" Type="System.ComponentModel.IComponent" />
      </Parameters>
      <Docs>
        <param name="comp">表示服务进程的 <see cref="T:System.ComponentModel.IComponent" />。</param>
        <summary>在没有 <see cref="M:System.Configuration.Install.ComponentInstaller.CopyFromComponent(System.ComponentModel.IComponent)" /> 类特定行为的情况下实现基类 <see cref="T:System.ServiceProcess.ServiceProcessInstaller" /> 方法。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 不应在代码中调用此方法。 上的基类方法 <xref:System.Configuration.Install.ComponentInstaller> 为 `abstract` ，因此它是在派生类上实现的。 但是， <xref:System.ServiceProcess.ServiceProcessInstaller> 方法的实现中没有特定于类的处理方式。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ServiceProcess.ServiceProcessInstaller.Install(System.Collections.IDictionary)" />
        <altmember cref="M:System.ServiceProcess.ServiceProcessInstaller.Rollback(System.Collections.IDictionary)" />
      </Docs>
    </Member>
    <Member MemberName="HelpText">
      <MemberSignature Language="C#" Value="public override string HelpText { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string HelpText" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceProcessInstaller.HelpText" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property HelpText As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ HelpText { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.HelpText : string" Usage="System.ServiceProcess.ServiceProcessInstaller.HelpText" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取为服务安装选项显示的帮助文本。</summary>
        <value>帮助文本，提供为在特定帐户下运行服务而设置用户名和密码的步骤说明。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当服务手动启动时，可以使用此帮助文本。 它向用户指出如何输入用户名和密码信息。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceProcessInstaller.Username" />
        <altmember cref="P:System.ServiceProcess.ServiceProcessInstaller.Password" />
      </Docs>
    </Member>
    <Member MemberName="Install">
      <MemberSignature Language="C#" Value="public override void Install (System.Collections.IDictionary stateSaver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Install(class System.Collections.IDictionary stateSaver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceProcessInstaller.Install(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Install (stateSaver As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Install(System::Collections::IDictionary ^ stateSaver);" />
      <MemberSignature Language="F#" Value="override this.Install : System.Collections.IDictionary -&gt; unit" Usage="serviceProcessInstaller.Install stateSaver" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stateSaver" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="stateSaver"><see cref="T:System.Collections.IDictionary" />，包含与安装关联的上下文信息。</param>
        <summary>将服务应用程序信息写入注册表。 该方法旨在由自动调用适当方法的安装工具使用。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 通常情况下，你不会在代码中调用方法， <xref:System.ServiceProcess.ServiceProcessInstaller> 通常仅由安装实用工具调用它们。 安装实用程序会在 <xref:System.ServiceProcess.ServiceProcessInstaller.Install%2A?displayProperty=nameWithType> 安装过程中自动调用此方法。 如果需要，它会通过调用 <xref:System.ServiceProcess.ServiceProcessInstaller.Rollback%2A> 所有以前安装的组件来退出故障。 此方法将安装传递到基类 <xref:System.Configuration.Install.Installer.Install%2A?displayProperty=nameWithType> 方法。  
  
 通常情况下，你不会在 <xref:System.ServiceProcess.ServiceInstaller> 你的代码内调用方法; 通常仅由安装实用工具调用这些方法。 安装实用程序会 <xref:System.ServiceProcess.ServiceProcessInstaller.Install%2A?displayProperty=nameWithType> <xref:System.ServiceProcess.ServiceInstaller.Install%2A?displayProperty=nameWithType> 在安装过程中自动调用和方法。 如果需要，它会通过 <xref:System.ServiceProcess.ServiceProcessInstaller.Rollback%2A> <xref:System.ServiceProcess.ServiceInstaller.Rollback%2A?displayProperty=nameWithType> 对所有以前安装的组件调用 (或) 来退出故障  
  
 应用程序的安装例程使用项目安装程序的，自动维护有关已安装组件的信息 <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType> 。 作为参数传递到的此状态信息 <xref:System.ServiceProcess.ServiceProcessInstaller.Install%2A> `stateSaver` 会不断更新为 <xref:System.ServiceProcess.ServiceProcessInstaller> 实例，并且每个 <xref:System.ServiceProcess.ServiceInstaller> 实例由实用工具安装。 通常不需要让代码显式修改此状态信息。  
  
 <xref:System.ServiceProcess.ServiceProcessInstaller.Install%2A>向调用方法传递基类方法或 <xref:System.Configuration.Install.Installer.BeforeInstall>  /  <xref:System.Configuration.Install.Installer.AfterInstall> 事件处理程序引发的任何异常。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="stateSaver" /> 为 <see langword="null" />。</exception>
        <altmember cref="M:System.ServiceProcess.ServiceProcessInstaller.Rollback(System.Collections.IDictionary)" />
        <altmember cref="M:System.Configuration.Install.Installer.Commit(System.Collections.IDictionary)" />
        <altmember cref="M:System.Configuration.Install.Installer.Uninstall(System.Collections.IDictionary)" />
      </Docs>
    </Member>
    <Member MemberName="Password">
      <MemberSignature Language="C#" Value="public string Password { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Password" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceProcessInstaller.Password" />
      <MemberSignature Language="VB.NET" Value="Public Property Password As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Password { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Password : string with get, set" Usage="System.ServiceProcess.ServiceProcessInstaller.Password" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置与运行服务应用程序时所使用用户帐户关联的密码。</summary>
        <value>与运行服务时所使用帐户关联的密码。 默认值为空字符串("")。 该属性非公共属性，并且从不序列化。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A>和 <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A> 对允许服务在除系统帐户之外的其他帐户下运行。 例如，如果没有用户登录，则可以允许服务在重新启动时自动启动。  
  
 <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> 和以 <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A> 一种安全的方式进行处理，因为它们永远不会序列化或保存到安装状态 (项目安装程序的 <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType>) 或具有公共访问权限的其他位置。  
  
 设置 <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A> 并 <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> 允许在安装时将帐户自动与服务关联。 如果保留 <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A> 或 <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> 为空，并且将设置 <xref:System.ServiceProcess.ServiceProcessInstaller.Account%2A> 为 `User` ，则在安装时系统将提示您输入有效的用户名和密码。  
  
 在单独的帐户下运行服务的另一种方法是使用计算机的系统帐户。 该帐户与管理员帐户不同，无需密码。 系统帐户的权限可能超出了当前登录用户的权限。 在系统帐户下运行，而不是在用户帐户下运行，可避免由于用户缺少该服务所需的权限而导致的问题  
  
 如果 <xref:System.ServiceProcess.ServiceProcessInstaller.Account%2A> 是以外的任何值 `User` ，则将使用指定的帐户 (本地或网络服务，或使用本地系统) ，即使 <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A> 填充了和属性也是如此 <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> 。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceProcessInstaller.Username" />
        <altmember cref="P:System.ServiceProcess.ServiceProcessInstaller.Account" />
        <altmember cref="T:System.ServiceProcess.Design.ServiceInstallerDialog" />
      </Docs>
    </Member>
    <Member MemberName="Rollback">
      <MemberSignature Language="C#" Value="public override void Rollback (System.Collections.IDictionary savedState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Rollback(class System.Collections.IDictionary savedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceProcessInstaller.Rollback(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Rollback (savedState As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Rollback(System::Collections::IDictionary ^ savedState);" />
      <MemberSignature Language="F#" Value="override this.Rollback : System.Collections.IDictionary -&gt; unit" Usage="serviceProcessInstaller.Rollback savedState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedState" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="savedState"><see cref="T:System.Collections.IDictionary" />，包含与安装关联的上下文信息。</param>
        <summary>回滚由安装过程写到注册表的服务应用程序信息。 该方法旨在由自动处理适当方法的安装工具使用。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 通常情况下，你不会在代码中调用方法， <xref:System.ServiceProcess.ServiceProcessInstaller> 通常仅由安装实用工具调用它们。 安装实用程序会在 <xref:System.ServiceProcess.ServiceProcessInstaller.Install%2A?displayProperty=nameWithType> 安装过程中自动调用此方法。 如果需要，它会 <xref:System.ServiceProcess.ServiceProcessInstaller.Rollback%2A> 在生成异常的对象上调用，从而支持故障。  
  
 应用程序的安装例程使用项目安装程序的，自动维护有关已安装组件的信息 <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType> 。 作为参数传递到的此状态信息 <xref:System.ServiceProcess.ServiceProcessInstaller.Rollback%2A> `savedState` 会不断更新为 <xref:System.ServiceProcess.ServiceProcessInstaller> 实例，并且每个 <xref:System.ServiceProcess.ServiceInstaller> 实例由实用工具安装。 通常不需要让代码显式修改此状态信息。  
  
 <xref:System.ServiceProcess.ServiceProcessInstaller.Rollback%2A>向调用方法传递基类方法或 <xref:System.Configuration.Install.Installer.BeforeInstall>  /  <xref:System.Configuration.Install.Installer.AfterInstall> 事件处理程序引发的任何异常。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="savedState" /> 为 <see langword="null" />。  
  
- 或 - 
<paramref name="savedState" /> 已损坏或不存在。</exception>
        <altmember cref="M:System.ServiceProcess.ServiceProcessInstaller.Install(System.Collections.IDictionary)" />
        <altmember cref="T:System.Configuration.Install.ComponentInstaller" />
      </Docs>
    </Member>
    <Member MemberName="Username">
      <MemberSignature Language="C#" Value="public string Username { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Username" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceProcessInstaller.Username" />
      <MemberSignature Language="VB.NET" Value="Public Property Username As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Username { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Username : string with get, set" Usage="System.ServiceProcess.ServiceProcessInstaller.Username" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName Language="C#">[System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName Language="C#">[System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置运行服务应用程序时将使用的用户帐户。</summary>
        <value>运行服务时将使用的帐户。 默认值为空字符串("")。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A>和 <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> 对允许服务在除系统帐户之外的其他帐户下运行。 例如，如果没有用户登录，则可以允许服务在重新启动时自动启动。  
  
 <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> 和以 <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A> 一种安全的方式进行处理，因为它们永远不会序列化或保存到安装状态 (项目安装程序的 <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType>) 或具有公共访问权限的其他位置。  
  
 设置 <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A> 并 <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> 允许在安装时将帐户自动与服务关联。 如果保留 <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A> 或 <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> 为空，并且将设置 <xref:System.ServiceProcess.ServiceProcessInstaller.Account%2A> 为 `User` ，则在安装时系统将提示您输入有效的用户名和密码。  
  
 在单独的帐户下运行服务的另一种方法是使用计算机的系统帐户。 该帐户与管理员帐户不同，无需密码。 系统帐户的权限可能超出了当前登录用户的权限。 在系统帐户下运行，而不是在用户帐户下运行，可避免由于用户缺少该服务所需的权限而导致的问题  
  
 如果 <xref:System.ServiceProcess.ServiceProcessInstaller.Account%2A> 是以外的任何值 `User` ，则将使用指定的帐户 (本地或网络服务，或使用本地系统) ，即使 <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A> 填充了和属性也是如此 <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> 。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceProcessInstaller.Password" />
        <altmember cref="P:System.ServiceProcess.ServiceProcessInstaller.Account" />
        <altmember cref="T:System.ServiceProcess.Design.ServiceInstallerDialog" />
      </Docs>
    </Member>
  </Members>
</Type>
