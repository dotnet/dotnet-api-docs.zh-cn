<Type Name="ServiceInstaller" FullName="System.ServiceProcess.ServiceInstaller">
  <Metadata><Meta Name="ms.openlocfilehash" Value="f78cfc1db066c8be4b05abe7cd28e7e8d7b4c12a" /><Meta Name="ms.sourcegitcommit" Value="b53d35b4a410c949742abd4c6a989d1af5357bca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="86827157" /></Metadata><TypeSignature Language="C#" Value="public class ServiceInstaller : System.Configuration.Install.ComponentInstaller" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ServiceInstaller extends System.Configuration.Install.ComponentInstaller" />
  <TypeSignature Language="DocId" Value="T:System.ServiceProcess.ServiceInstaller" />
  <TypeSignature Language="VB.NET" Value="Public Class ServiceInstaller&#xA;Inherits ComponentInstaller" />
  <TypeSignature Language="C++ CLI" Value="public ref class ServiceInstaller : System::Configuration::Install::ComponentInstaller" />
  <TypeSignature Language="F#" Value="type ServiceInstaller = class&#xA;    inherit ComponentInstaller" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceProcess</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Configuration.Install.ComponentInstaller</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>安装一个类，该类扩展 <see cref="T:System.ServiceProcess.ServiceBase" /> 来实现服务。 在安装服务应用程序时由安装实用工具调用该类。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceProcess.ServiceInstaller>确实适用于与其关联的服务。 安装实用工具使用它将与服务关联的注册表值写入 HKEY_LOCAL_MACHINE \System\CurrentControlSet\Services 注册表项中的子项。 服务由其在此子项中的 ServiceName 标识。 子项还包括服务所属的可执行文件或 .dll 的名称。  
  
 若要安装服务，请创建一个从类继承的项目安装程序类 <xref:System.Configuration.Install.Installer> ，并将 <xref:System.ComponentModel.RunInstallerAttribute> 类的特性设置为 `true` 。 在项目中， <xref:System.ServiceProcess.ServiceProcessInstaller> 为每个服务应用程序创建一个实例，并 <xref:System.ServiceProcess.ServiceInstaller> 为应用程序中的每个服务创建一个实例。 在项目安装程序类构造函数中，使用和实例设置服务的安装 <xref:System.ServiceProcess.ServiceProcessInstaller> 属性 <xref:System.ServiceProcess.ServiceInstaller> ，并将实例添加到集合中 <xref:System.Configuration.Install.Installer.Installers%2A> 。  
  
> [!NOTE]
>  建议使用构造函数来添加安装程序实例;但是，如果需要 <xref:System.Configuration.Install.Installer.Installers%2A> 在方法中将添加到集合中 <xref:System.ServiceProcess.ServiceInstaller.Install%2A> ，请确保在方法中对集合执行相同的添加 <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> 。  
  
 对于从类派生的所有类 <xref:System.Configuration.Install.Installer> ，集合的状态 <xref:System.Configuration.Install.Installer.Installers%2A> 在和方法中必须相同 <xref:System.ServiceProcess.ServiceInstaller.Install%2A> <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> 。 但是， <xref:System.ServiceProcess.ServiceInstaller.Install%2A> <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> 如果将安装程序实例添加到 <xref:System.Configuration.Install.Installer.Installers%2A> 自定义安装程序类构造函数中的集合，则可以避免在和方法中维护集合。在调用安装实用程序时，它会查找 <xref:System.ComponentModel.RunInstallerAttribute> 属性。 如果该属性为 `true` ，则实用工具将安装已添加到 <xref:System.Configuration.Install.Installer.Installers%2A> 集合中并与项目安装程序关联的所有服务。 如果 <xref:System.ComponentModel.RunInstallerAttribute> 为 `false` 或不存在，则安装实用工具会忽略项目安装程序。  
  
 <xref:System.ServiceProcess.ServiceProcessInstaller>与项目安装类关联的将安装对项目中的所有实例都通用的信息 <xref:System.ServiceProcess.ServiceInstaller> 。 如果此服务具有与安装项目中的其他服务分隔的任何内容，则此方法会安装该服务特定的信息。  
  
> [!NOTE]
>  与从派生的类的相同，这一点非常重要 <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> <xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=nameWithType> <xref:System.ServiceProcess.ServiceBase> 。 通常情况下，服务的 <xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=nameWithType> 属性的值在服务应用程序的可执行文件的主 ( # A1 函数内设置。 服务控制管理器使用 <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A?displayProperty=nameWithType> 属性在此可执行文件中查找服务。  
  
 你可以在 <xref:System.ServiceProcess.ServiceInstaller> 将其添加到 <xref:System.Configuration.Install.Installer.Installers%2A> 项目安装程序的集合之前或之后修改的其他属性。 例如， <xref:System.ServiceProcess.ServiceInstaller.StartType%2A> 可以将服务设置为在重新启动时自动启动服务，或者要求用户手动启动该服务。  
  
 通常情况下，你不会在 <xref:System.ServiceProcess.ServiceInstaller> 你的代码内调用方法; 通常仅由安装实用工具调用这些方法。 安装实用程序会 <xref:System.ServiceProcess.ServiceProcessInstaller.Install%2A?displayProperty=nameWithType> <xref:System.ServiceProcess.ServiceInstaller.Install%2A?displayProperty=nameWithType> 在安装过程中自动调用和方法。 如有必要，它将通过 <xref:System.ServiceProcess.ServiceProcessInstaller.Rollback%2A> <xref:System.ServiceProcess.ServiceInstaller.Rollback%2A?displayProperty=nameWithType> 对所有以前安装的组件调用 (或) 来退出故障。  
  
 安装实用工具调用 <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> 以删除对象。  
  
 应用程序的安装例程使用项目安装程序的，自动维护有关已安装组件的信息 <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType> 。 此状态信息会持续更新为 <xref:System.ServiceProcess.ServiceProcessInstaller> 实例，并且每个 <xref:System.ServiceProcess.ServiceInstaller> 实例由实用工具安装。 通常不需要让代码显式修改状态信息。  
  
 执行安装时，它会自动创建 <xref:System.Diagnostics.EventLogInstaller> 以安装与派生类关联的事件日志源 <xref:System.ServiceProcess.ServiceBase> 。 <xref:System.Diagnostics.EventLog.Log%2A>此源的属性由 <xref:System.ServiceProcess.ServiceInstaller.%23ctor%2A> 构造函数设置到计算机的应用程序日志。 当您设置 <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> (的以使其与 <xref:System.ServiceProcess.ServiceInstaller> 服务) 的相同时，会 <xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=nameWithType> <xref:System.Diagnostics.EventLog.Source%2A> 自动将设置为相同的值。 在安装失败时，源的安装将与以前安装的服务一起回滚。  
  
 如果服务正在运行，则该 <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> 方法将尝试停止它。 无论是否成功，都 <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> 将撤消所做的更改 <xref:System.ServiceProcess.ServiceInstaller.Install%2A> 。 如果为事件日志记录创建了新源，则会删除该源。  
  
   
  
## Examples  
 下面的示例创建一个名为的项目安装程序， `MyProjectInstaller` 该程序从继承 <xref:System.Configuration.Install.Installer> 。 假设有一个服务可执行文件，其中包含两个服务： "Hello World Service 1" 和 "Hello World Service 2"。 在 (的构造函数中，该构造函数将 `MyProjectInstaller` 由安装实用工具) 调用，为 <xref:System.ServiceProcess.ServiceInstaller> 其中的每个服务创建对象，并为 <xref:System.ServiceProcess.ServiceProcessInstaller> 可执行文件创建一个。 为了使安装实用工具识别 `MyProjectInstaller` 为有效的安装程序，该 <xref:System.ComponentModel.RunInstallerAttribute> 特性设置为 `true` 。  
  
 在将安装程序添加到集合之前，在进程安装程序和服务安装程序上设置可选属性 <xref:System.Configuration.Install.Installer.Installers%2A> 。 当安装实用工具访问时 `MyProjectInstaller` ，通过对的调用添加到 <xref:System.Configuration.Install.Installer.Installers%2A> 集合中的对象 <xref:System.Configuration.Install.InstallerCollection.Add%2A?displayProperty=nameWithType> 将依次安装。 在此过程中，安装程序将保留指示已安装的对象的状态信息，因此，如果发生安装失败，每个对象都可以依次备份。  
  
 通常，不会显式创建项目安装程序类的实例。 您将创建它并将 <xref:System.ComponentModel.RunInstallerAttribute> 属性添加到语法中，但它是实际调用的安装实用工具，因而实例化类。  
  
 [!code-cpp[Classic ServiceInstaller Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic ServiceInstaller Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ServiceInstaller Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic ServiceInstaller Example/CS/source.cs#1)]
 [!code-vb[Classic ServiceInstaller Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic ServiceInstaller Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="P:System.ServiceProcess.ServiceBase.ServiceName" />
    <altmember cref="T:System.ServiceProcess.ServiceProcessInstaller" />
    <altmember cref="T:System.ServiceProcess.ServiceBase" />
    <altmember cref="P:System.ServiceProcess.ServiceBase.EventLog" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ServiceInstaller ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceInstaller.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ServiceInstaller();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.ServiceProcess.ServiceInstaller" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要安装服务，请创建一个从类继承的项目安装程序类 <xref:System.Configuration.Install.Installer> ，并将 <xref:System.ComponentModel.RunInstallerAttribute> 类的特性设置为 `true` 。 在项目中， <xref:System.ServiceProcess.ServiceProcessInstaller> 为每个服务应用程序创建一个实例，并 <xref:System.ServiceProcess.ServiceInstaller> 为应用程序中的每个服务创建一个实例。 在项目安装程序类构造函数中，使用和实例设置服务的安装 <xref:System.ServiceProcess.ServiceProcessInstaller> 属性 <xref:System.ServiceProcess.ServiceInstaller> ，并将实例添加到集合中 <xref:System.Configuration.Install.Installer.Installers%2A> 。  
  
 <xref:System.ServiceProcess.ServiceInstaller.%23ctor%2A>构造函数会自动生成一个事件日志源 <xref:System.Diagnostics.EventLog.Log%2A> ，其属性设置为计算机的应用程序日志和 <xref:System.Diagnostics.EventLogInstaller> 。 当您设置的 <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> <xref:System.ServiceProcess.ServiceInstaller> （它应该与服务的相同）时 <xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=nameWithType> ， <xref:System.Diagnostics.EventLog.Source%2A> 事件日志的属性将自动设置为相同的值。 如果安装失败，将自动删除该源。  
  
 <xref:System.ServiceProcess.ServiceInstaller.%23ctor%2A>构造函数将 <xref:System.ServiceProcess.ServiceInstaller.StartType%2A> 属性设置为， `ServiceStartMode.Manual` 以指定用户启动该服务。 您可以将属性重置为， `ServiceStartMode.Automatic` 以指定服务在计算机重新启动时启动。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.EventLog" />
        <altmember cref="T:System.ServiceProcess.ServiceStartMode" />
      </Docs>
    </Member>
    <Member MemberName="CopyFromComponent">
      <MemberSignature Language="C#" Value="public override void CopyFromComponent (System.ComponentModel.IComponent component);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void CopyFromComponent(class System.ComponentModel.IComponent component) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceInstaller.CopyFromComponent(System.ComponentModel.IComponent)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub CopyFromComponent (component As IComponent)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void CopyFromComponent(System::ComponentModel::IComponent ^ component);" />
      <MemberSignature Language="F#" Value="override this.CopyFromComponent : System.ComponentModel.IComponent -&gt; unit" Usage="serviceInstaller.CopyFromComponent component" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="component" Type="System.ComponentModel.IComponent" />
      </Parameters>
      <Docs>
        <param name="component">要从中进行复制的 <see cref="T:System.ComponentModel.IComponent" />。</param>
        <summary>将来自 <see cref="T:System.ServiceProcess.ServiceBase" /> 的一个实例的属性复制到此安装程序。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在代码中很少会调用此方法。 <xref:System.ServiceProcess.ServiceInstaller.CopyFromComponent%2A>通常由设计器调用。  
  
 <xref:System.ServiceProcess.ServiceInstaller.CopyFromComponent%2A>将参数的服务名称保存 `component` 到实例的 <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> <xref:System.ServiceProcess.ServiceInstaller> 。  (因为参数必须是派生自的类的实例 <xref:System.ServiceProcess.ServiceBase> ，所以 `component` 保证具有 <xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=nameWithType> 属性。 )   
  
> [!NOTE]
>  如果你使用的是 Visual Studio 设计器，则当用户单击将 `Add Installer` 此类指定为其安装程序的组件时，将在设计时调用此方法。 安装程序将从实时组件获取所有信息，并将其存储在安装时使用。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">正与该安装程序关联的组件并非从 <see cref="T:System.ServiceProcess.ServiceBase" /> 继承。</exception>
        <altmember cref="M:System.ServiceProcess.ServiceProcessInstaller.CopyFromComponent(System.ComponentModel.IComponent)" />
      </Docs>
    </Member>
    <Member MemberName="DelayedAutoStart">
      <MemberSignature Language="C#" Value="public bool DelayedAutoStart { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool DelayedAutoStart" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceInstaller.DelayedAutoStart" />
      <MemberSignature Language="VB.NET" Value="Public Property DelayedAutoStart As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool DelayedAutoStart { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.DelayedAutoStart : bool with get, set" Usage="System.ServiceProcess.ServiceInstaller.DelayedAutoStart" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.ServiceProcess.ServiceProcessDescription("ServiceInstallerDelayedAutoStart")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ServiceProcess.ServiceProcessDescription("ServiceInstallerDelayedAutoStart")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示是否应延迟启动该服务，直到运行其他自动启动的服务。</summary>
        <value>若要延迟该服务的自动启动，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 该 <xref:System.ServiceProcess.ServiceInstaller.DelayedAutoStart%2A> 属性可应用于任何服务，但会被忽略，除非服务的启动模式为 <xref:System.ServiceProcess.ServiceStartMode.Automatic> 。 此设置将在系统下一次重新启动时生效。 服务控制管理器不保证服务的特定开始时间。  
  
 延迟的自动启动服务不能是加载顺序组的成员，但它可以依赖于另一台自动启动服务。 如果应用程序在加载之前调用延迟的自动启动服务，则调用失败。  
  
 在不支持延迟自动启动的操作系统上，设置此属性不起作用。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Description">
      <MemberSignature Language="C#" Value="public string Description { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Description" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceInstaller.Description" />
      <MemberSignature Language="VB.NET" Value="Public Property Description As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Description { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Description : string with get, set" Usage="System.ServiceProcess.ServiceInstaller.Description" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue("")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue("")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.Runtime.InteropServices.ComVisible(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.ComVisible(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.ServiceProcess.ServiceProcessDescription("ServiceInstallerDescription")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ServiceProcess.ServiceProcessDescription("ServiceInstallerDescription")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置服务的说明。</summary>
        <value>服务的说明。 默认值为空字符串("")。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用 <xref:System.ServiceProcess.ServiceInstaller.Description%2A> 属性来描述已安装服务对用户的用途。 用户可以在显示已安装服务的详细信息的应用程序中查看服务说明。  
  
 例如，使用 Windows XP 时，可以使用服务控制命令行实用程序 ( # A0) 来查看服务说明，也可以在 "**计算机管理**" 控制台的 "**服务**" 节点中查看服务说明。  
  
   
  
## Examples  
 下面的代码示例设置新的 Windows 服务应用程序的安装属性。 该示例将设置服务名称以及显示名称和说明。 为服务分配安装属性后，该示例将 <xref:System.ServiceProcess.ServiceInstaller> 对象添加到 <xref:System.Configuration.Install.Installer.Installers%2A> 集合中。  
  
 [!code-csharp[ServiceProcess_ServiceInstaller#3](~/samples/snippets/csharp/VS_Snippets_CLR/ServiceProcess_serviceinstaller/CS/simpleserviceinstaller.cs#3)]
 [!code-vb[ServiceProcess_ServiceInstaller#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/ServiceProcess_serviceinstaller/VB/service1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceInstaller.ServiceName" />
        <altmember cref="P:System.ServiceProcess.ServiceInstaller.DisplayName" />
      </Docs>
    </Member>
    <Member MemberName="DisplayName">
      <MemberSignature Language="C#" Value="public string DisplayName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DisplayName" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceInstaller.DisplayName" />
      <MemberSignature Language="VB.NET" Value="Public Property DisplayName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DisplayName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DisplayName : string with get, set" Usage="System.ServiceProcess.ServiceInstaller.DisplayName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue("")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue("")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.ServiceProcess.ServiceProcessDescription("ServiceInstallerDisplayName")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ServiceProcess.ServiceProcessDescription("ServiceInstallerDisplayName")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>指示向用户标识服务的友好名称。</summary>
        <value>与服务关联的名称，常用于交互工具。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceProcess.ServiceInstaller.DisplayName%2A>例如，在服务控制管理器中，用于为服务提供用户可读的描述性名称。 <xref:System.ServiceProcess.ServiceInstaller.DisplayName%2A>是注册表值，但从不用作注册表项。 因此，对属性值的限制不适 <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> 用于。 <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A>用作 HKEY_LOCAL_MACHINES \System\CurrentControlSet\Services 注册表项，因此受到限制。  
  
 显示名称永远不会由安装实用工具用来标识服务，因此，对该属性的选择没有任何限制 <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> 。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceInstaller.ServiceName" />
        <altmember cref="P:System.ServiceProcess.ServiceInstaller.Description" />
      </Docs>
    </Member>
    <Member MemberName="Install">
      <MemberSignature Language="C#" Value="public override void Install (System.Collections.IDictionary stateSaver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Install(class System.Collections.IDictionary stateSaver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceInstaller.Install(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Install (stateSaver As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Install(System::Collections::IDictionary ^ stateSaver);" />
      <MemberSignature Language="F#" Value="override this.Install : System.Collections.IDictionary -&gt; unit" Usage="serviceInstaller.Install stateSaver" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stateSaver" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="stateSaver"><see cref="T:System.Collections.IDictionary" />，包含与安装关联的上下文信息。</param>
        <summary>通过向注册表写入服务应用程序信息来安装服务。 该方法旨在由自动处理适当方法的安装工具使用。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 通常情况下，你不会在 <xref:System.ServiceProcess.ServiceInstaller> 你的代码内调用方法; 通常仅由安装实用工具调用这些方法。 安装实用程序会 <xref:System.ServiceProcess.ServiceInstaller.Install%2A> 在安装过程中自动调用此方法。 如果需要，它会 <xref:System.ServiceProcess.ServiceInstaller.Rollback%2A> 在生成异常的对象上调用，从而支持故障。  
  
 应用程序的安装例程会使用项目安装程序的，自动维护有关已安装的组件的信息 <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType> 。 作为参数传递到的此状态信息 <xref:System.ServiceProcess.ServiceInstaller.Install%2A> `stateSaver` 会不断更新为 <xref:System.ServiceProcess.ServiceProcessInstaller> 实例，并且每个 <xref:System.ServiceProcess.ServiceInstaller> 实例由实用工具安装。 通常不需要让代码显式修改此状态信息。  
  
 <xref:System.ServiceProcess.ServiceProcessInstaller>与项目安装类关联的将安装对项目中的所有实例都通用的信息 <xref:System.ServiceProcess.ServiceInstaller> 。 如果此服务具有与安装项目中的其他服务分隔的任何内容，则此方法会安装该服务特定的信息。  
  
 若要安装服务，请创建一个从类继承的项目安装程序类 <xref:System.Configuration.Install.Installer> ，并将 <xref:System.ComponentModel.RunInstallerAttribute> 类的特性设置为 `true` 。 在项目中， <xref:System.ServiceProcess.ServiceProcessInstaller> 为每个服务应用程序创建一个实例，并 <xref:System.ServiceProcess.ServiceInstaller> 为应用程序中的每个服务创建一个实例。 在项目安装程序类构造函数中，使用和实例设置服务的安装 <xref:System.ServiceProcess.ServiceProcessInstaller> 属性 <xref:System.ServiceProcess.ServiceInstaller> ，并将实例添加到集合中 <xref:System.Configuration.Install.Installer.Installers%2A> 。  
  
> [!NOTE]
>  建议使用构造函数来添加安装程序实例;但是，如果需要 <xref:System.Configuration.Install.Installer.Installers%2A> 在方法中将添加到集合中 <xref:System.ServiceProcess.ServiceInstaller.Install%2A> ，请确保在方法中对集合执行相同的添加 <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> 。  
  
 对于从类派生的所有类 <xref:System.Configuration.Install.Installer> ，集合的状态 <xref:System.Configuration.Install.Installer.Installers%2A> 在和方法中必须相同 <xref:System.ServiceProcess.ServiceInstaller.Install%2A> <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> 。 但是， <xref:System.ServiceProcess.ServiceInstaller.Install%2A> <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> 如果将安装程序实例添加到 <xref:System.Configuration.Install.Installer.Installers%2A> 自定义安装程序类构造函数中的集合，则可以避免在和方法中维护集合。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">安装不包含可执行文件的 <see cref="T:System.ServiceProcess.ServiceProcessInstaller" />。  
  
-或- 
程序集的文件名为 <see langword="null" /> 或空字符串。  
  
-或- 
服务名无效。  
  
-或- 
未能打开服务控制管理器。</exception>
        <exception cref="T:System.ArgumentException">服务的显示名称的长度超过 255 个字符。</exception>
        <exception cref="T:System.ComponentModel.Win32Exception">系统未能生成服务的句柄。  
  
 -或-  
  
 该名称的服务已安装。</exception>
        <altmember cref="T:System.ServiceProcess.ServiceProcessInstaller" />
        <altmember cref="M:System.ServiceProcess.ServiceInstaller.Rollback(System.Collections.IDictionary)" />
        <altmember cref="M:System.Configuration.Install.Installer.Commit(System.Collections.IDictionary)" />
        <altmember cref="M:System.ServiceProcess.ServiceInstaller.Uninstall(System.Collections.IDictionary)" />
        <altmember cref="T:System.Diagnostics.EventLogInstaller" />
        <altmember cref="M:System.Diagnostics.EventLogInstaller.#ctor" />
      </Docs>
    </Member>
    <Member MemberName="IsEquivalentInstaller">
      <MemberSignature Language="C#" Value="public override bool IsEquivalentInstaller (System.Configuration.Install.ComponentInstaller otherInstaller);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool IsEquivalentInstaller(class System.Configuration.Install.ComponentInstaller otherInstaller) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceInstaller.IsEquivalentInstaller(System.Configuration.Install.ComponentInstaller)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function IsEquivalentInstaller (otherInstaller As ComponentInstaller) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool IsEquivalentInstaller(System::Configuration::Install::ComponentInstaller ^ otherInstaller);" />
      <MemberSignature Language="F#" Value="override this.IsEquivalentInstaller : System.Configuration.Install.ComponentInstaller -&gt; bool" Usage="serviceInstaller.IsEquivalentInstaller otherInstaller" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="otherInstaller" Type="System.Configuration.Install.ComponentInstaller" />
      </Parameters>
      <Docs>
        <param name="otherInstaller">与当前安装程序进行比较的 <see cref="T:System.Configuration.Install.ComponentInstaller" />。</param>
        <summary>指示两个安装程序是否会安装相同的服务。</summary>
        <returns>如果在这两个安装程序上调用 <see cref="M:System.ServiceProcess.ServiceInstaller.Install(System.Collections.IDictionary)" /> 将导致安装相同的服务，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceProcess.ServiceInstaller.IsEquivalentInstaller%2A>指示两个安装程序是否在同一用户帐户下安装相同的服务。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ServiceProcess.ServiceInstaller.CopyFromComponent(System.ComponentModel.IComponent)" />
        <altmember cref="T:System.Configuration.Install.ComponentInstaller" />
      </Docs>
    </Member>
    <Member MemberName="Rollback">
      <MemberSignature Language="C#" Value="public override void Rollback (System.Collections.IDictionary savedState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Rollback(class System.Collections.IDictionary savedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceInstaller.Rollback(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Rollback (savedState As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Rollback(System::Collections::IDictionary ^ savedState);" />
      <MemberSignature Language="F#" Value="override this.Rollback : System.Collections.IDictionary -&gt; unit" Usage="serviceInstaller.Rollback savedState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedState" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="savedState"><see cref="T:System.Collections.IDictionary" />，包含与安装关联的上下文信息。</param>
        <summary>回滚由安装过程写到注册表的服务应用程序信息。 该方法旨在由自动处理适当方法的安装工具使用。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 通常情况下，你不会在 <xref:System.ServiceProcess.ServiceInstaller> 你的代码内调用方法; 通常仅由安装实用工具调用这些方法。 安装实用程序会在 <xref:System.ServiceProcess.ServiceInstaller.Install%2A> 安装过程中自动调用此方法。 如果需要，它会 <xref:System.ServiceProcess.ServiceInstaller.Rollback%2A> 在生成异常的对象上调用，从而支持故障。  
  
 应用程序的安装例程使用项目安装程序的，自动维护有关已安装组件的信息 <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType> 。 作为参数传递到的此状态信息 <xref:System.ServiceProcess.ServiceInstaller.Rollback%2A> `savedState` 会不断更新为 <xref:System.ServiceProcess.ServiceProcessInstaller> 实例，并且每个 <xref:System.ServiceProcess.ServiceInstaller> 实例由实用工具安装。 通常不需要让代码显式修改此状态信息。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ServiceProcess.ServiceProcessInstaller.Rollback(System.Collections.IDictionary)" />
        <altmember cref="M:System.ServiceProcess.ServiceInstaller.Install(System.Collections.IDictionary)" />
        <altmember cref="M:System.Configuration.Install.Installer.Commit(System.Collections.IDictionary)" />
        <altmember cref="M:System.ServiceProcess.ServiceInstaller.Uninstall(System.Collections.IDictionary)" />
      </Docs>
    </Member>
    <Member MemberName="ServiceName">
      <MemberSignature Language="C#" Value="public string ServiceName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ServiceName" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceInstaller.ServiceName" />
      <MemberSignature Language="VB.NET" Value="Public Property ServiceName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ServiceName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ServiceName : string with get, set" Usage="System.ServiceProcess.ServiceInstaller.ServiceName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue("")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue("")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName Language="C#">[System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName Language="C#">[System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.ServiceProcess.ServiceProcessDescription("ServiceInstallerServiceName")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ServiceProcess.ServiceProcessDescription("ServiceInstallerServiceName")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>指示系统用于标识此服务的名称。 此属性必须与要安装的服务的 <see cref="P:System.ServiceProcess.ServiceBase.ServiceName" /> 相同。</summary>
        <value>要安装的服务的名称。 该值必须在安装实用工具尝试安装服务以前进行设置。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 与从派生的类的相同，这一点非常重要 <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> <xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=nameWithType> <xref:System.ServiceProcess.ServiceBase> 。 通常情况下，服务的 <xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=nameWithType> 属性的值在服务应用程序的可执行文件的主 ( # A1 函数内设置。 服务控制管理器使用 <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A?displayProperty=nameWithType> 属性在此可执行文件中查找服务。  
  
 设置 <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> 服务安装程序的时， <xref:System.Diagnostics.EventLog.Source%2A> 关联的事件日志的将设置为相同的值。 这允许服务自动记录 (（例如启动和停止) 调用计算机上的应用程序日志）。  
  
> [!NOTE]
>  如果计算机上已存在具有相同名称的源，但在应用程序日志以外的其他日志中，则将引发异常。 如果源存在并且与应用程序日志关联，则该源用于向服务报告命令调用，并且不引发异常。  
  
 <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A>不能为 `null` 或长度为零。 其最大大小为256个字符。 它也不能包含正斜杠或反斜杠、"/" 或 " \\ "，也不能包含值小于 decimal 值32的 ASCII 字符集中的字符。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><see cref="P:System.ServiceProcess.ServiceInstaller.ServiceName" /> 属性无效。</exception>
        <altmember cref="P:System.ServiceProcess.ServiceBase.ServiceName" />
        <altmember cref="P:System.ServiceProcess.ServiceInstaller.DisplayName" />
      </Docs>
    </Member>
    <Member MemberName="ServicesDependedOn">
      <MemberSignature Language="C#" Value="public string[] ServicesDependedOn { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] ServicesDependedOn" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceInstaller.ServicesDependedOn" />
      <MemberSignature Language="VB.NET" Value="Public Property ServicesDependedOn As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::String ^&gt; ^ ServicesDependedOn { cli::array &lt;System::String ^&gt; ^ get(); void set(cli::array &lt;System::String ^&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ServicesDependedOn : string[] with get, set" Usage="System.ServiceProcess.ServiceInstaller.ServicesDependedOn" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.ServiceProcess.ServiceProcessDescription("ServiceInstallerServicesDependedOn")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ServiceProcess.ServiceProcessDescription("ServiceInstallerServicesDependedOn")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>指示为使该服务能够运行而必须正在运行的服务。</summary>
        <value>在与该安装程序关联的服务运行以前必须运行的一组服务。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 服务可能需要运行其他服务，然后才能启动。 此属性中的信息将写入注册表中的密钥。 如果用户 (或系统，在自动启动) 尝试运行服务时，服务控制管理器 (SCM) 验证阵列中的每个服务是否已启动。  
  
 如果阵列中的任何服务未运行，则 SCM 会尝试启动它们。 这包括的服务 `Manual` <xref:System.ServiceProcess.ServiceInstaller.StartType%2A> 。  
  
 如果此服务所依赖的任何服务无法启动，则此服务将无法启动。 如果系统未启动，则不会引发异常，因为系统级别没有要检测到的异常处理。 确定如何处理服务启动失败并在代码中实现此操作。 通常，如果服务无法启动，则会在启动时向用户显示一个对话框。  
  
 如果服务未启动，则会向应用程序事件日志中写入一个条目。  
  
 此服务所依赖的服务不需要处于相同的可执行文件中。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceInstaller.StartType" />
      </Docs>
    </Member>
    <Member MemberName="StartType">
      <MemberSignature Language="C#" Value="public System.ServiceProcess.ServiceStartMode StartType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.ServiceProcess.ServiceStartMode StartType" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceInstaller.StartType" />
      <MemberSignature Language="VB.NET" Value="Public Property StartType As ServiceStartMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ServiceProcess::ServiceStartMode StartType { System::ServiceProcess::ServiceStartMode get(); void set(System::ServiceProcess::ServiceStartMode value); };" />
      <MemberSignature Language="F#" Value="member this.StartType : System.ServiceProcess.ServiceStartMode with get, set" Usage="System.ServiceProcess.ServiceInstaller.StartType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.ServiceProcess.ServiceProcessDescription("ServiceInstallerStartType")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ServiceProcess.ServiceProcessDescription("ServiceInstallerStartType")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ServiceProcess.ServiceStartMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>指示启动此服务的方式和时间。</summary>
        <value><see cref="T:System.ServiceProcess.ServiceStartMode" />，表示服务的启动方式。 默认值为 <see langword="Manual" />，指定在重新启动后服务将不会自动启动。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 设置 <xref:System.ServiceProcess.ServiceInstaller.StartType%2A> 以指定在重新启动后自动启动服务或用户必须手动启动服务。 还可以禁用服务，指定它在启用之前无法以手动或编程方式启动。  
  
 安装后不能更改 <xref:System.ServiceProcess.ServiceInstaller> 属性值。 若要更改 <xref:System.ServiceProcess.ServiceInstaller.StartType%2A> ，则必须卸载并重新安装服务，或者使用 "服务控制管理器" 手动更改设置。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">启动模式不是 <see cref="T:System.ServiceProcess.ServiceStartMode" /> 枚举的有效值。</exception>
        <altmember cref="P:System.ServiceProcess.ServiceProcessInstaller.Account" />
      </Docs>
    </Member>
    <Member MemberName="Uninstall">
      <MemberSignature Language="C#" Value="public override void Uninstall (System.Collections.IDictionary savedState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Uninstall(class System.Collections.IDictionary savedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceInstaller.Uninstall(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Uninstall (savedState As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Uninstall(System::Collections::IDictionary ^ savedState);" />
      <MemberSignature Language="F#" Value="override this.Uninstall : System.Collections.IDictionary -&gt; unit" Usage="serviceInstaller.Uninstall savedState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedState" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="savedState"><see cref="T:System.Collections.IDictionary" />，包含与安装关联的上下文信息。</param>
        <summary>通过从注册表中移除关于服务的信息来卸载服务。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 卸载首先尝试停止服务，然后再卸载它。 如果无法停止该服务，则不会捕获到异常，并且该方法将继续删除该服务。  
  
 通常情况下，你不会在 <xref:System.ServiceProcess.ServiceInstaller> 你的代码内调用方法; 通常仅由安装实用工具调用这些方法。 Installutil.exe 用于卸载服务以及安装服务;卸载会在命令行调用中采用开关。  
  
 应用程序的卸载例程使用项目安装程序的，自动维护有关正在卸载的组件的信息 <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType> 。 作为参数传递到的此状态信息 <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> `savedState` 会不断更新为 <xref:System.ServiceProcess.ServiceProcessInstaller> 实例，并且每个 <xref:System.ServiceProcess.ServiceInstaller> 实例由实用工具安装。 通常不需要让代码显式修改此状态信息。  
  
 对于从类派生的所有类 <xref:System.Configuration.Install.Installer> ，集合的状态 <xref:System.Configuration.Install.Installer.Installers%2A> 在和方法中必须相同 <xref:System.ServiceProcess.ServiceInstaller.Install%2A> <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> 。 但是， <xref:System.ServiceProcess.ServiceInstaller.Install%2A> <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> 如果将安装程序实例添加到 <xref:System.Configuration.Install.Installer.Installers%2A> 自定义安装程序类构造函数中的集合，则可以避免在和方法中维护集合。  
  
 没有用于卸载的回滚机制，因此，如果一个服务无法卸载，则这不会影响通常) 正在卸载的同一安装项目中 (其他服务。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception">未能打开服务控制管理器。  
  
 -或-  
  
 系统未能获取服务的句柄。</exception>
        <altmember cref="M:System.ServiceProcess.ServiceInstaller.Install(System.Collections.IDictionary)" />
      </Docs>
    </Member>
  </Members>
</Type>
