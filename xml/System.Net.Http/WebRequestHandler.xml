<Type Name="WebRequestHandler" FullName="System.Net.Http.WebRequestHandler">
  <Metadata><Meta Name="ms.openlocfilehash" Value="6dcb7dee97a86343ac50b068bddd612d95d5c9a5" /><Meta Name="ms.sourcegitcommit" Value="c982ad9e10a242d90f1e631b5981570f9e5d9f34" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/10/2020" /><Meta Name="ms.locfileid" Value="89818083" /></Metadata><TypeSignature Language="C#" Value="public class WebRequestHandler : System.Net.Http.HttpClientHandler" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit WebRequestHandler extends System.Net.Http.HttpClientHandler" />
  <TypeSignature Language="DocId" Value="T:System.Net.Http.WebRequestHandler" />
  <TypeSignature Language="VB.NET" Value="Public Class WebRequestHandler&#xA;Inherits HttpClientHandler" />
  <TypeSignature Language="C++ CLI" Value="public ref class WebRequestHandler : System::Net::Http::HttpClientHandler" />
  <TypeSignature Language="F#" Value="type WebRequestHandler = class&#xA;    inherit HttpClientHandler" />
  <AssemblyInfo>
    <AssemblyName>System.Net.Http.WebRequest</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Net.Http.HttpClientHandler</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="19853-101">提供不可用于 Windows Store 应用程序或其他环境的特定以桌面的功能。</span><span class="sxs-lookup"><span data-stu-id="19853-101">Provides desktop-specific features not available to Windows Store apps or other environments.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="19853-102">此类通过使用 <xref:System.Net.HttpWebRequest> 实例将 HTTP 请求发送到服务器来实现传输处理程序。</span><span class="sxs-lookup"><span data-stu-id="19853-102">This class implements a transport handler using <xref:System.Net.HttpWebRequest> instances to send HTTP requests to servers.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WebRequestHandler ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.WebRequestHandler.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WebRequestHandler();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http.WebRequest</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="19853-103">初始化 <see cref="T:System.Net.Http.WebRequestHandler" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="19853-103">Initializes a new instance of the <see cref="T:System.Net.Http.WebRequestHandler" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowPipelining">
      <MemberSignature Language="C#" Value="public bool AllowPipelining { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowPipelining" />
      <MemberSignature Language="DocId" Value="P:System.Net.Http.WebRequestHandler.AllowPipelining" />
      <MemberSignature Language="VB.NET" Value="Public Property AllowPipelining As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AllowPipelining { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AllowPipelining : bool with get, set" Usage="System.Net.Http.WebRequestHandler.AllowPipelining" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http.WebRequest</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="19853-104">获取或设置一个值，该值指示是否通过管线将请求传输到 Internet 资源。</span><span class="sxs-lookup"><span data-stu-id="19853-104">Gets or sets a value that indicates whether to pipeline the request to the Internet resource.</span></span></summary>
        <value><span data-ttu-id="19853-105">返回 <see cref="T:System.Boolean" />。</span><span class="sxs-lookup"><span data-stu-id="19853-105">Returns <see cref="T:System.Boolean" />.</span></span>  
  
 <span data-ttu-id="19853-106">如果通过管线传输请求，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="19853-106"><see langword="true" /> if the request should be pipelined; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="19853-107">默认值为 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="19853-107">The default is <see langword="true" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="19853-108">应用程序使用 <xref:System.Net.Http.WebRequestHandler.AllowPipelining%2A> 属性指示管线连接的首选项。</span><span class="sxs-lookup"><span data-stu-id="19853-108">An application uses the <xref:System.Net.Http.WebRequestHandler.AllowPipelining%2A> property to indicate a preference for pipelined connections.</span></span> <span data-ttu-id="19853-109">当 <xref:System.Net.Http.WebRequestHandler.AllowPipelining%2A> 为时 `true` ，应用程序与支持它们的服务器建立连接。</span><span class="sxs-lookup"><span data-stu-id="19853-109">When <xref:System.Net.Http.WebRequestHandler.AllowPipelining%2A> is `true`, an application makes pipelined connections to the servers that support them.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AuthenticationLevel">
      <MemberSignature Language="C#" Value="public System.Net.Security.AuthenticationLevel AuthenticationLevel { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Net.Security.AuthenticationLevel AuthenticationLevel" />
      <MemberSignature Language="DocId" Value="P:System.Net.Http.WebRequestHandler.AuthenticationLevel" />
      <MemberSignature Language="VB.NET" Value="Public Property AuthenticationLevel As AuthenticationLevel" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::Security::AuthenticationLevel AuthenticationLevel { System::Net::Security::AuthenticationLevel get(); void set(System::Net::Security::AuthenticationLevel value); };" />
      <MemberSignature Language="F#" Value="member this.AuthenticationLevel : System.Net.Security.AuthenticationLevel with get, set" Usage="System.Net.Http.WebRequestHandler.AuthenticationLevel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http.WebRequest</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Security.AuthenticationLevel</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="19853-110">获取或设置指示用于此请求的身份验证和模拟的级别的值。</span><span class="sxs-lookup"><span data-stu-id="19853-110">Gets or sets a value indicating the level of authentication and impersonation used for this request.</span></span></summary>
        <value><span data-ttu-id="19853-111"><see cref="T:System.Net.Security.AuthenticationLevel" /> 值的按位组合。</span><span class="sxs-lookup"><span data-stu-id="19853-111">A bitwise combination of the <see cref="T:System.Net.Security.AuthenticationLevel" /> values.</span></span> <span data-ttu-id="19853-112">默认值是 <see cref="F:System.Net.Security.AuthenticationLevel.MutualAuthRequested" />。</span><span class="sxs-lookup"><span data-stu-id="19853-112">The default value is <see cref="F:System.Net.Security.AuthenticationLevel.MutualAuthRequested" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="19853-113">在相互身份验证中，客户端和服务器双方都出示凭据以确定其身份。</span><span class="sxs-lookup"><span data-stu-id="19853-113">In mutual authentication, both the client and server present credentials to establish their identity.</span></span> <span data-ttu-id="19853-114"><xref:System.Net.Security.AuthenticationLevel.MutualAuthRequired> 和 <xref:System.Net.Security.AuthenticationLevel.MutualAuthRequested> 值与 Kerberos 身份验证有关。</span><span class="sxs-lookup"><span data-stu-id="19853-114">The <xref:System.Net.Security.AuthenticationLevel.MutualAuthRequired> and <xref:System.Net.Security.AuthenticationLevel.MutualAuthRequested> values are relevant for Kerberos authentication.</span></span> <span data-ttu-id="19853-115">可以直接支持 Kerberos 身份验证，也可以仅在使用 Negotiate 安全协议选择实际的安全协议时使用该身份验证。</span><span class="sxs-lookup"><span data-stu-id="19853-115">Kerberos authentication can be supported directly, or can be used if the Negotiate security protocol is used to select the actual security protocol.</span></span> <span data-ttu-id="19853-116">有关身份验证协议的详细信息，请参阅 [Internet 身份验证](/dotnet/framework/network-programming/internet-authentication)。</span><span class="sxs-lookup"><span data-stu-id="19853-116">For more information about authentication protocols, see [Internet Authentication](/dotnet/framework/network-programming/internet-authentication).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CachePolicy">
      <MemberSignature Language="C#" Value="public System.Net.Cache.RequestCachePolicy CachePolicy { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.Cache.RequestCachePolicy CachePolicy" />
      <MemberSignature Language="DocId" Value="P:System.Net.Http.WebRequestHandler.CachePolicy" />
      <MemberSignature Language="VB.NET" Value="Public Property CachePolicy As RequestCachePolicy" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::Cache::RequestCachePolicy ^ CachePolicy { System::Net::Cache::RequestCachePolicy ^ get(); void set(System::Net::Cache::RequestCachePolicy ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CachePolicy : System.Net.Cache.RequestCachePolicy with get, set" Usage="System.Net.Http.WebRequestHandler.CachePolicy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http.WebRequest</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Cache.RequestCachePolicy</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="19853-117">获取或设置此请求的缓存策略。</span><span class="sxs-lookup"><span data-stu-id="19853-117">Gets or sets the cache policy for this request.</span></span></summary>
        <value><span data-ttu-id="19853-118">定义缓存策略的 <see cref="T:System.Net.Cache.RequestCachePolicy" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="19853-118">A <see cref="T:System.Net.Cache.RequestCachePolicy" /> object that defines a cache policy.</span></span> <span data-ttu-id="19853-119">默认值为 <see cref="P:System.Net.WebRequest.DefaultCachePolicy" />。</span><span class="sxs-lookup"><span data-stu-id="19853-119">The default is <see cref="P:System.Net.WebRequest.DefaultCachePolicy" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="19853-120">缓存中当前缓存策略和请求的资源的状态确定是否可以从缓存中检索响应。</span><span class="sxs-lookup"><span data-stu-id="19853-120">The current cache policy and the presence of the requested resource in the cache determine whether a response can be retrieved from the cache.</span></span> <span data-ttu-id="19853-121">使用缓存的响应通常会提高应用程序的性能，但存在缓存中的响应与服务器上的响应不匹配的风险。</span><span class="sxs-lookup"><span data-stu-id="19853-121">Using cached responses usually improves application performance, but there is a risk that the response in the cache does not match the response on the server.</span></span>  
  
 <span data-ttu-id="19853-122">可以在 Machine.config 配置文件中或通过设置属性来指定默认缓存策略 <xref:System.Net.HttpWebRequest.DefaultCachePolicy%2A> 。</span><span class="sxs-lookup"><span data-stu-id="19853-122">The default cache policy can be specified in the Machine.config configuration file or by setting the <xref:System.Net.HttpWebRequest.DefaultCachePolicy%2A> property.</span></span>  
  
 <span data-ttu-id="19853-123">如果资源的响应流已检索并读取到流的末尾，则仅将资源的副本添加到缓存中。</span><span class="sxs-lookup"><span data-stu-id="19853-123">A copy of a resource is only added to the cache if the response stream for the resource is retrieved and read to the end of the stream.</span></span> <span data-ttu-id="19853-124">因此，对同一资源的另一请求可能会使用缓存的副本，具体取决于此请求的缓存策略级别。</span><span class="sxs-lookup"><span data-stu-id="19853-124">So another request for the same resource could use a cached copy, depending on the cache policy level for this request.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClientCertificates">
      <MemberSignature Language="C#" Value="public System.Security.Cryptography.X509Certificates.X509CertificateCollection ClientCertificates { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Cryptography.X509Certificates.X509CertificateCollection ClientCertificates" />
      <MemberSignature Language="DocId" Value="P:System.Net.Http.WebRequestHandler.ClientCertificates" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ClientCertificates As X509CertificateCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::Cryptography::X509Certificates::X509CertificateCollection ^ ClientCertificates { System::Security::Cryptography::X509Certificates::X509CertificateCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ClientCertificates : System.Security.Cryptography.X509Certificates.X509CertificateCollection" Usage="System.Net.Http.WebRequestHandler.ClientCertificates" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http.WebRequest</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.X509Certificates.X509CertificateCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="19853-125">获取或设置与此请求关联的安全证书集合。</span><span class="sxs-lookup"><span data-stu-id="19853-125">Gets or sets the collection of security certificates that are associated with this request.</span></span></summary>
        <value><span data-ttu-id="19853-126">与此请求关联的安全证书的集合。</span><span class="sxs-lookup"><span data-stu-id="19853-126">The collection of security certificates associated with this request.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ContinueTimeout">
      <MemberSignature Language="C#" Value="public TimeSpan ContinueTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan ContinueTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Net.Http.WebRequestHandler.ContinueTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Property ContinueTimeout As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan ContinueTimeout { TimeSpan get(); void set(TimeSpan value); };" />
      <MemberSignature Language="F#" Value="member this.ContinueTimeout : TimeSpan with get, set" Usage="System.Net.Http.WebRequestHandler.ContinueTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http.WebRequest</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="19853-127">获取或设置应用程序在上载数据前等待来自服务器的 100 连续的时间量（毫秒）。</span><span class="sxs-lookup"><span data-stu-id="19853-127">Gets or sets the amount of time, in milliseconds, the application will wait for 100-continue from the server before uploading data.</span></span></summary>
        <value><span data-ttu-id="19853-128">该应用程序将在上载数据之前等待服务器“100-continue”的时间（以毫秒为单位）</span><span class="sxs-lookup"><span data-stu-id="19853-128">The amount of time, in milliseconds, the application will wait for 100-continue from the server before uploading data.</span></span> <span data-ttu-id="19853-129">默认值为350毫秒。</span><span class="sxs-lookup"><span data-stu-id="19853-129">The default value is 350 milliseconds.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImpersonationLevel">
      <MemberSignature Language="C#" Value="public System.Security.Principal.TokenImpersonationLevel ImpersonationLevel { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Security.Principal.TokenImpersonationLevel ImpersonationLevel" />
      <MemberSignature Language="DocId" Value="P:System.Net.Http.WebRequestHandler.ImpersonationLevel" />
      <MemberSignature Language="VB.NET" Value="Public Property ImpersonationLevel As TokenImpersonationLevel" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::Principal::TokenImpersonationLevel ImpersonationLevel { System::Security::Principal::TokenImpersonationLevel get(); void set(System::Security::Principal::TokenImpersonationLevel value); };" />
      <MemberSignature Language="F#" Value="member this.ImpersonationLevel : System.Security.Principal.TokenImpersonationLevel with get, set" Usage="System.Net.Http.WebRequestHandler.ImpersonationLevel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http.WebRequest</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Principal.TokenImpersonationLevel</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="19853-130">获取或设置当前请求的模拟级别。</span><span class="sxs-lookup"><span data-stu-id="19853-130">Gets or sets the impersonation level for the current request.</span></span></summary>
        <value><span data-ttu-id="19853-131">请求的模拟级别。</span><span class="sxs-lookup"><span data-stu-id="19853-131">The impersonation level for the request.</span></span> <span data-ttu-id="19853-132">默认值为 <see cref="F:System.Security.Principal.TokenImpersonationLevel.Delegation" />。</span><span class="sxs-lookup"><span data-stu-id="19853-132">The default is <see cref="F:System.Security.Principal.TokenImpersonationLevel.Delegation" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="19853-133">模拟级别确定服务器如何使用客户端凭据。</span><span class="sxs-lookup"><span data-stu-id="19853-133">The impersonation level determines how the server can use the client's credentials.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxResponseHeadersLength">
      <MemberSignature Language="C#" Value="public int MaxResponseHeadersLength { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MaxResponseHeadersLength" />
      <MemberSignature Language="DocId" Value="P:System.Net.Http.WebRequestHandler.MaxResponseHeadersLength" />
      <MemberSignature Language="VB.NET" Value="Public Property MaxResponseHeadersLength As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int MaxResponseHeadersLength { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.MaxResponseHeadersLength : int with get, set" Usage="System.Net.Http.WebRequestHandler.MaxResponseHeadersLength" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http.WebRequest</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="19853-134">获取或设置响应标头允许的最大长度。</span><span class="sxs-lookup"><span data-stu-id="19853-134">Gets or sets the maximum allowed length of the response headers.</span></span></summary>
        <value><span data-ttu-id="19853-135">响应标头的长度，以 KB（1024 字节）为单位。</span><span class="sxs-lookup"><span data-stu-id="19853-135">The length, in kilobytes (1024 bytes), of the response headers.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="19853-136">响应标头的长度包括响应状态行和作为 HTTP 协议的一部分接收的任何其他控制字符。</span><span class="sxs-lookup"><span data-stu-id="19853-136">The length of the response header includes the response status line and any extra control characters that are received as part of HTTP protocol.</span></span> <span data-ttu-id="19853-137">如果值为-1，则表示对响应标头没有施加限制;如果值为0，则表示所有请求都将失败。</span><span class="sxs-lookup"><span data-stu-id="19853-137">A value of -1 means no limit is imposed on the response headers; a value of 0 means that all requests fail.</span></span>  
  
 <span data-ttu-id="19853-138">如果 <xref:System.Net.Http.WebRequestHandler.MaxResponseHeadersLength%2A> 未显式设置属性，则默认为属性的值 <xref:System.Net.HttpWebRequest.DefaultMaximumResponseHeadersLength%2A> 。</span><span class="sxs-lookup"><span data-stu-id="19853-138">If the <xref:System.Net.Http.WebRequestHandler.MaxResponseHeadersLength%2A> property is not explicitly set, it defaults to the value of the <xref:System.Net.HttpWebRequest.DefaultMaximumResponseHeadersLength%2A> property.</span></span>  
  
 <span data-ttu-id="19853-139">如果收到的响应标头的长度超出了属性的值 <xref:System.Net.Http.WebRequestHandler.MaxResponseHeadersLength%2A> ，则在访问响应时会引发异常。</span><span class="sxs-lookup"><span data-stu-id="19853-139">If the length of the response header received exceeds the value of the <xref:System.Net.Http.WebRequestHandler.MaxResponseHeadersLength%2A> property, an exception is thrown when the response is accessed.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadWriteTimeout">
      <MemberSignature Language="C#" Value="public int ReadWriteTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ReadWriteTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Net.Http.WebRequestHandler.ReadWriteTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Property ReadWriteTimeout As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ReadWriteTimeout { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.ReadWriteTimeout : int with get, set" Usage="System.Net.Http.WebRequestHandler.ReadWriteTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http.WebRequest</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="19853-140">获取或设置写入请求或读取服务器中的相应时的超时（以毫秒为单位）。</span><span class="sxs-lookup"><span data-stu-id="19853-140">Gets or sets a time-out in milliseconds when writing a request to or reading a response from a server.</span></span></summary>
        <value><span data-ttu-id="19853-141">写入或读取超时之前的毫秒数。默认值为300000毫秒 (5 分钟) 。</span><span class="sxs-lookup"><span data-stu-id="19853-141">The number of milliseconds before the writing or reading times out. The default value is 300,000 milliseconds (5 minutes).</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ServerCertificateValidationCallback">
      <MemberSignature Language="C#" Value="public System.Net.Security.RemoteCertificateValidationCallback ServerCertificateValidationCallback { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.Security.RemoteCertificateValidationCallback ServerCertificateValidationCallback" />
      <MemberSignature Language="DocId" Value="P:System.Net.Http.WebRequestHandler.ServerCertificateValidationCallback" />
      <MemberSignature Language="VB.NET" Value="Public Property ServerCertificateValidationCallback As RemoteCertificateValidationCallback" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::Security::RemoteCertificateValidationCallback ^ ServerCertificateValidationCallback { System::Net::Security::RemoteCertificateValidationCallback ^ get(); void set(System::Net::Security::RemoteCertificateValidationCallback ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ServerCertificateValidationCallback : System.Net.Security.RemoteCertificateValidationCallback with get, set" Usage="System.Net.Http.WebRequestHandler.ServerCertificateValidationCallback" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http.WebRequest</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Security.RemoteCertificateValidationCallback</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="19853-142">获取或设置用于验证服务器证书的回调方法。</span><span class="sxs-lookup"><span data-stu-id="19853-142">Gets or sets a callback method to validate the server certificate.</span></span></summary>
        <value><span data-ttu-id="19853-143">用于验证服务器证书的回调方法。</span><span class="sxs-lookup"><span data-stu-id="19853-143">A callback method to validate the server certificate.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="19853-144">如果 <xref:System.Net.Http.WebRequestHandler.ServerCertificateValidationCallback%2A> 为 `null` ，将使用标准的知名证书颁发机构验证服务器证书。</span><span class="sxs-lookup"><span data-stu-id="19853-144">If the <xref:System.Net.Http.WebRequestHandler.ServerCertificateValidationCallback%2A> is `null`, the server certificate will be validated using standard well-known  certificate authorities.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UnsafeAuthenticatedConnectionSharing">
      <MemberSignature Language="C#" Value="public bool UnsafeAuthenticatedConnectionSharing { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UnsafeAuthenticatedConnectionSharing" />
      <MemberSignature Language="DocId" Value="P:System.Net.Http.WebRequestHandler.UnsafeAuthenticatedConnectionSharing" />
      <MemberSignature Language="VB.NET" Value="Public Property UnsafeAuthenticatedConnectionSharing As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UnsafeAuthenticatedConnectionSharing { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.UnsafeAuthenticatedConnectionSharing : bool with get, set" Usage="System.Net.Http.WebRequestHandler.UnsafeAuthenticatedConnectionSharing" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http.WebRequest</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[set: System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;set: System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="19853-145">获取或设置一个值，该值指示是否允许经过高速 NTLM 身份验证的连接共享。</span><span class="sxs-lookup"><span data-stu-id="19853-145">Gets or sets a value that indicates whether to allow high-speed NTLM-authenticated connection sharing.</span></span></summary>
        <value><span data-ttu-id="19853-146">返回 <see cref="T:System.Boolean" />。</span><span class="sxs-lookup"><span data-stu-id="19853-146">Returns <see cref="T:System.Boolean" />.</span></span>  
  
 <span data-ttu-id="19853-147"><see langword="true" /> 表示使经过身份验证的连接保持打开状态；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="19853-147"><see langword="true" /> to keep the authenticated connection open; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="19853-148">此属性的默认值为 `false` ，这将导致在请求完成后关闭当前连接。</span><span class="sxs-lookup"><span data-stu-id="19853-148">The default value for this property is `false`, which causes the current connection to be closed after a request is completed.</span></span> <span data-ttu-id="19853-149">每次发出新请求时，应用程序都必须经过身份验证顺序。</span><span class="sxs-lookup"><span data-stu-id="19853-149">Your application must go through the authentication sequence every time it issues a new request.</span></span> <span data-ttu-id="19853-150">如果将此属性设置为 `true` ，则在执行身份验证后，用于检索响应的连接将保持打开状态。</span><span class="sxs-lookup"><span data-stu-id="19853-150">If this property is set to `true`, the connection used to retrieve the response remains open after the authentication has been performed.</span></span> <span data-ttu-id="19853-151">在这种情况下，将该属性设置为的其他请求 `true` 可能会使用该连接，而无需重新进行身份验证。</span><span class="sxs-lookup"><span data-stu-id="19853-151">In this case, other requests that have this property set to `true` may use the connection without re-authenticating.</span></span> <span data-ttu-id="19853-152">换句话说，如果连接已通过用户 A 的身份验证，则用户 B 可以重复使用 A 的连接;用户 B 的请求是根据用户 A 的凭据完成的。</span><span class="sxs-lookup"><span data-stu-id="19853-152">In other words, if a connection has been authenticated for user A, user B may reuse A's connection; user B's request is fulfilled based on the credentials of user A.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="19853-153">由于应用程序在未经身份验证的情况下可以使用连接，因此，在将此属性设置为时，需要确保系统中不存在任何管理漏洞 `true` 。</span><span class="sxs-lookup"><span data-stu-id="19853-153">Because it is possible for an application to use the connection without being authenticated, you need to be sure that there is no administrative vulnerability in your system when setting this property to `true`.</span></span> <span data-ttu-id="19853-154">如果你的应用程序为多个用户发送请求 (模拟多个用户帐户) 并依赖身份验证来保护资源，则不要将此属性设置为， `true` 除非你按如下所述使用连接组。</span><span class="sxs-lookup"><span data-stu-id="19853-154">If your application sends requests for multiple users (impersonates multiple user accounts) and relies on authentication to protect resources, do not set this property to `true` unless you use connection groups as described below.</span></span>  
  
 <span data-ttu-id="19853-155">如果遇到性能问题，并且应用程序在使用集成 Windows 身份验证的 Web 服务器上运行，则可能需要考虑启用此机制。</span><span class="sxs-lookup"><span data-stu-id="19853-155">You may want to consider enabling this mechanism if your are having performance problems and your application is running on a Web server with integrated Windows authentication.</span></span>  
  
 <span data-ttu-id="19853-156">启用此设置可打开系统安全风险。</span><span class="sxs-lookup"><span data-stu-id="19853-156">Enabling this setting opens the system to security risks.</span></span> <span data-ttu-id="19853-157">如果将属性设置 <xref:System.Net.HttpWebRequest.UnsafeAuthenticatedConnectionSharing%2A> 为，请 `true` 确保采取以下预防措施：</span><span class="sxs-lookup"><span data-stu-id="19853-157">If you set the <xref:System.Net.HttpWebRequest.UnsafeAuthenticatedConnectionSharing%2A> property to `true` be sure to take the following precautions:</span></span>  
  
-   <span data-ttu-id="19853-158">在受保护的环境中运行你的应用程序，以帮助避免可能的连接攻击。</span><span class="sxs-lookup"><span data-stu-id="19853-158">Run your application in a protected environment to help avoid possible connection exploits.</span></span>  
  
 <span data-ttu-id="19853-159">如果你控制后端服务器，你可以考虑禁用身份验证持久性。</span><span class="sxs-lookup"><span data-stu-id="19853-159">If you control the back-end server, as an alternative you might consider turning off authentication persistence.</span></span> <span data-ttu-id="19853-160">这会提高性能，但性能更高。</span><span class="sxs-lookup"><span data-stu-id="19853-160">This increases performance to a lesser degree, but it is safer.</span></span> <span data-ttu-id="19853-161">有关更多详细信息，请在处搜索 AuthPersistence <https://docs.microsoft.com> 。</span><span class="sxs-lookup"><span data-stu-id="19853-161">For more details, search for AuthPersistence at <https://docs.microsoft.com>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
