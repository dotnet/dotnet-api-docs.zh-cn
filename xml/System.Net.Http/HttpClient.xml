<Type Name="HttpClient" FullName="System.Net.Http.HttpClient">
  <Metadata><Meta Name="ms.openlocfilehash" Value="a255f281927c43b0a13b7f57d78225e6fd8d3825" /><Meta Name="ms.sourcegitcommit" Value="b53d35b4a410c949742abd4c6a989d1af5357bca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="86801674" /></Metadata><TypeSignature Language="C#" Value="public class HttpClient : System.Net.Http.HttpMessageInvoker" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit HttpClient extends System.Net.Http.HttpMessageInvoker" />
  <TypeSignature Language="DocId" Value="T:System.Net.Http.HttpClient" />
  <TypeSignature Language="VB.NET" Value="Public Class HttpClient&#xA;Inherits HttpMessageInvoker" />
  <TypeSignature Language="C++ CLI" Value="public ref class HttpClient : System::Net::Http::HttpMessageInvoker" />
  <TypeSignature Language="F#" Value="type HttpClient = class&#xA;    inherit HttpMessageInvoker" />
  <AssemblyInfo>
    <AssemblyName>System.Net.Http</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Net.Http" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Net.Http.HttpMessageInvoker</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="44913-101">提供基本类，用于发送 HTTP 请求和接收来自通过 URI 确认的资源的 HTTP 响应。</span><span class="sxs-lookup"><span data-stu-id="44913-101">Provides a base class for sending HTTP requests and receiving HTTP responses from a resource identified by a URI.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="44913-102"><xref:System.Net.Http.HttpClient>类实例充当发送 HTTP 请求的会话。</span><span class="sxs-lookup"><span data-stu-id="44913-102">The <xref:System.Net.Http.HttpClient> class instance acts as a session to send HTTP requests.</span></span> <span data-ttu-id="44913-103"><xref:System.Net.Http.HttpClient>实例是对该实例执行的所有请求应用的设置的集合。</span><span class="sxs-lookup"><span data-stu-id="44913-103">An <xref:System.Net.Http.HttpClient> instance is a collection of settings applied to all requests executed by that instance.</span></span> <span data-ttu-id="44913-104">此外，每个 <xref:System.Net.Http.HttpClient> 实例都使用其自己的连接池，并从其他实例所执行的请求隔离其请求 <xref:System.Net.Http.HttpClient> 。</span><span class="sxs-lookup"><span data-stu-id="44913-104">In addition, every <xref:System.Net.Http.HttpClient> instance uses its own connection pool, isolating its requests from requests executed by other <xref:System.Net.Http.HttpClient> instances.</span></span>  
  
 <span data-ttu-id="44913-105"><xref:System.Net.Http.HttpClient>还可用作更具体的 HTTP 客户端的基类。</span><span class="sxs-lookup"><span data-stu-id="44913-105">The <xref:System.Net.Http.HttpClient> also acts as a base class for more specific HTTP clients.</span></span> <span data-ttu-id="44913-106">例如，FacebookHttpClient 提供特定于 Facebook web 服务的其他方法 (GetFriends 方法，例如) 。</span><span class="sxs-lookup"><span data-stu-id="44913-106">An example would be a FacebookHttpClient providing additional methods specific to a Facebook web service (a GetFriends method, for instance).</span></span> <span data-ttu-id="44913-107">派生类不应重写类的虚方法。</span><span class="sxs-lookup"><span data-stu-id="44913-107">Derived classes should not override the virtual methods on the class.</span></span> <span data-ttu-id="44913-108">而应使用接受的构造函数重载 <xref:System.Net.Http.HttpMessageHandler> 来配置任何预处理或后请求处理。</span><span class="sxs-lookup"><span data-stu-id="44913-108">Instead, use a constructor overload that accepts <xref:System.Net.Http.HttpMessageHandler> to configure any pre- or post-request processing instead.</span></span>
  
 <span data-ttu-id="44913-109">默认情况下，在 .NET Framework 和 Mono 上， <xref:System.Net.HttpWebRequest> 用于将请求发送到服务器。</span><span class="sxs-lookup"><span data-stu-id="44913-109">By default on .NET Framework and Mono, <xref:System.Net.HttpWebRequest> is used to send requests to the server.</span></span> <span data-ttu-id="44913-110">可以通过在采用实例作为参数的构造函数重载之一中指定不同的通道来修改此行为 <xref:System.Net.Http.HttpMessageHandler> 。</span><span class="sxs-lookup"><span data-stu-id="44913-110">This behavior can be modified by specifying a different channel in one of the constructor overloads taking a <xref:System.Net.Http.HttpMessageHandler> instance as parameter.</span></span> <span data-ttu-id="44913-111">如果需要使用身份验证或缓存等功能， <xref:System.Net.Http.WebRequestHandler> 可使用来配置设置，并将实例传递给构造函数。</span><span class="sxs-lookup"><span data-stu-id="44913-111">If features like authentication or caching are required, <xref:System.Net.Http.WebRequestHandler> can be used to configure settings and the instance can be passed to the constructor.</span></span> <span data-ttu-id="44913-112">返回的处理程序可传递给采用参数的构造函数重载之一 <xref:System.Net.Http.HttpMessageHandler> 。</span><span class="sxs-lookup"><span data-stu-id="44913-112">The returned handler can be passed to one of the constructor overloads taking a <xref:System.Net.Http.HttpMessageHandler> parameter.</span></span>  
  
 <span data-ttu-id="44913-113">如果 <xref:System.Net.Http.HttpClient> 命名空间中使用和相关类的应用 <xref:System.Net.Http> 要下载大量数据 (50 mb 或更大的) ，则该应用应流式传输这些下载内容，而不使用默认缓冲。</span><span class="sxs-lookup"><span data-stu-id="44913-113">If an app using <xref:System.Net.Http.HttpClient> and related classes in the <xref:System.Net.Http> namespace intends to download large amounts of data (50 megabytes or more), then the app should stream those downloads and not use the default buffering.</span></span> <span data-ttu-id="44913-114">如果使用默认缓冲，则客户端内存使用量将会非常大，这可能会显著降低性能。</span><span class="sxs-lookup"><span data-stu-id="44913-114">If the default buffering is used the client memory usage will get very large, potentially resulting in substantially reduced performance.</span></span>  

 <span data-ttu-id="44913-115">存在未处理的 <xref:System.Net.Http.HttpClient> 请求时，不应修改的属性，因为它不是线程安全的。</span><span class="sxs-lookup"><span data-stu-id="44913-115">Properties of <xref:System.Net.Http.HttpClient> should not be modified while there are outstanding requests, because it is not thread-safe.</span></span>

   
 <span data-ttu-id="44913-116">以下方法是线程安全的：</span><span class="sxs-lookup"><span data-stu-id="44913-116">The following methods are thread safe:</span></span>  
  
1.  <xref:System.Net.Http.HttpClient.CancelPendingRequests%2A>  
  
2.  <xref:System.Net.Http.HttpClient.DeleteAsync%2A>  
  
3.  <xref:System.Net.Http.HttpClient.GetAsync%2A>  
  
4.  <xref:System.Net.Http.HttpClient.GetByteArrayAsync%2A>  
  
5.  <xref:System.Net.Http.HttpClient.GetStreamAsync%2A>  
  
6.  <xref:System.Net.Http.HttpClient.GetStringAsync%2A>  
  
7.  <xref:System.Net.Http.HttpClient.PostAsync%2A>  
  
8.  <xref:System.Net.Http.HttpClient.PutAsync%2A>  
  
9. <xref:System.Net.Http.HttpClient.SendAsync%2A>  
  
 <span data-ttu-id="44913-117"><xref:System.Net.Http.HttpClient> 用于在应用程序的整个生存期内实例化一次并重复使用。</span><span class="sxs-lookup"><span data-stu-id="44913-117"><xref:System.Net.Http.HttpClient> is intended to be instantiated once and re-used throughout the life of an application.</span></span> <span data-ttu-id="44913-118">实例化每个请求的 HttpClient 类将耗尽重负载下可用的插槽数。</span><span class="sxs-lookup"><span data-stu-id="44913-118">Instantiating an HttpClient class for every request will exhaust the number of sockets available under heavy loads.</span></span> <span data-ttu-id="44913-119">这将导致 SocketException 错误。</span><span class="sxs-lookup"><span data-stu-id="44913-119">This will result in SocketException errors.</span></span> <span data-ttu-id="44913-120">下面是正确使用 HttpClient 的示例。</span><span class="sxs-lookup"><span data-stu-id="44913-120">Below is an example using HttpClient correctly.</span></span>  
  
```csharp
public class GoodController : ApiController
{
    private static readonly HttpClient HttpClient;

    static GoodController()
    {
        HttpClient = new HttpClient();
    }
}
```

```vb
  Public Class GoodController
    Inherits ApiController  
   
    Private Shared ReadOnly HttpClient As HttpClient  
  
    Shared Sub New()  
        HttpClient = New HttpClient()
    End Sub
End Class
```

<span data-ttu-id="44913-121"><xref:System.Net.Http.HttpClient>是一个高级 API，用于包装其运行的每个平台上可用的较低级别功能。</span><span class="sxs-lookup"><span data-stu-id="44913-121">The <xref:System.Net.Http.HttpClient> is a high-level API that wraps the lower-level functionality available on each platform where it runs.</span></span>

<span data-ttu-id="44913-122">在每个平台上， <xref:System.Net.Http.HttpClient> 尝试使用最佳的可用传输：</span><span class="sxs-lookup"><span data-stu-id="44913-122">On each platform, <xref:System.Net.Http.HttpClient> tries to use the best available transport:</span></span>

| <span data-ttu-id="44913-123">**主机/运行时**</span><span class="sxs-lookup"><span data-stu-id="44913-123">**Host/Runtime**</span></span>            | <span data-ttu-id="44913-124">**把**</span><span class="sxs-lookup"><span data-stu-id="44913-124">**Backend**</span></span>                                                                               |
| --------------------------- | ----------------------------------------------------------------------------------------- |
| <span data-ttu-id="44913-125">Windows/.NET Framework</span><span class="sxs-lookup"><span data-stu-id="44913-125">Windows/.NET Framework</span></span>      | <xref:System.Net.HttpWebRequest>                                                          |
| <span data-ttu-id="44913-126">Windows/Mono</span><span class="sxs-lookup"><span data-stu-id="44913-126">Windows/Mono</span></span>                | <xref:System.Net.HttpWebRequest>                                                          |
| <span data-ttu-id="44913-127">Windows/UWP</span><span class="sxs-lookup"><span data-stu-id="44913-127">Windows/UWP</span></span>                 | <span data-ttu-id="44913-128">支持 Windows native <xref:System.Net.Http.WinHttpHandler> (HTTP 2.0) </span><span class="sxs-lookup"><span data-stu-id="44913-128">Windows native <xref:System.Net.Http.WinHttpHandler> (HTTP 2.0 capable)</span></span>                   |
| <span data-ttu-id="44913-129">Windows/.NET Core 1.0-2。0</span><span class="sxs-lookup"><span data-stu-id="44913-129">Windows/.NET Core 1.0-2.0</span></span>   | <span data-ttu-id="44913-130">支持 Windows native <xref:System.Net.Http.WinHttpHandler> (HTTP 2.0) </span><span class="sxs-lookup"><span data-stu-id="44913-130">Windows native <xref:System.Net.Http.WinHttpHandler> (HTTP 2.0 capable)</span></span>                   |
| <span data-ttu-id="44913-131">Android/Xamarin</span><span class="sxs-lookup"><span data-stu-id="44913-131">Android/Xamarin</span></span>             | <span data-ttu-id="44913-132">在生成时选择。</span><span class="sxs-lookup"><span data-stu-id="44913-132">Selected at build-time.</span></span> <span data-ttu-id="44913-133">可以使用 <xref:System.Net.HttpWebRequest> 或配置为使用 Android 的本机 [`HttpURLConnection`](https://developer.xamarin.com/api/type/Java.Net.HttpURLConnection/)</span><span class="sxs-lookup"><span data-stu-id="44913-133">Can either use <xref:System.Net.HttpWebRequest> or be configured to use Android's native [`HttpURLConnection`](https://developer.xamarin.com/api/type/Java.Net.HttpURLConnection/)</span></span> |
| <span data-ttu-id="44913-134">iOS、tvOS、watchOS/Xamarin</span><span class="sxs-lookup"><span data-stu-id="44913-134">iOS, tvOS, watchOS/Xamarin</span></span>  | <span data-ttu-id="44913-135">在生成时选择。</span><span class="sxs-lookup"><span data-stu-id="44913-135">Selected at build-time.</span></span> <span data-ttu-id="44913-136">可以使用 <xref:System.Net.HttpWebRequest> 或配置为使用 Apple [`NSUrlSession`](https://developer.xamarin.com/api/type/MonoTouch.Foundation.NSUrlSession/) (HTTP 2.0 功能) </span><span class="sxs-lookup"><span data-stu-id="44913-136">Can either use <xref:System.Net.HttpWebRequest> or be configured to use Apple's [`NSUrlSession`](https://developer.xamarin.com/api/type/MonoTouch.Foundation.NSUrlSession/) (HTTP 2.0 capable)</span></span> |
| <span data-ttu-id="44913-137">macOS/Xamarin</span><span class="sxs-lookup"><span data-stu-id="44913-137">macOS/Xamarin</span></span>               | <span data-ttu-id="44913-138">在生成时选择。</span><span class="sxs-lookup"><span data-stu-id="44913-138">Selected at build-time.</span></span> <span data-ttu-id="44913-139">可以使用 <xref:System.Net.HttpWebRequest> 或配置为使用 Apple [`NSUrlSession`](https://developer.xamarin.com/api/type/MonoTouch.Foundation.NSUrlSession/) (HTTP 2.0 功能) </span><span class="sxs-lookup"><span data-stu-id="44913-139">Can either use <xref:System.Net.HttpWebRequest> or be configured to use Apple's [`NSUrlSession`](https://developer.xamarin.com/api/type/MonoTouch.Foundation.NSUrlSession/) (HTTP 2.0 capable)</span></span> |
| <span data-ttu-id="44913-140">macOS/Mono</span><span class="sxs-lookup"><span data-stu-id="44913-140">macOS/Mono</span></span>                  | <xref:System.Net.HttpWebRequest>                                                          |
| <span data-ttu-id="44913-141">macOS/.NET Core 1.0-2。0</span><span class="sxs-lookup"><span data-stu-id="44913-141">macOS/.NET Core 1.0-2.0</span></span>     | <span data-ttu-id="44913-142">`libcurl`基于 http 传输 (HTTP 2.0 功能) </span><span class="sxs-lookup"><span data-stu-id="44913-142">`libcurl`-based HTTP transport (HTTP 2.0 capable)</span></span>                                         |
| <span data-ttu-id="44913-143">Linux/Mono</span><span class="sxs-lookup"><span data-stu-id="44913-143">Linux/Mono</span></span>                  | <xref:System.Net.HttpWebRequest>                                                          |
| <span data-ttu-id="44913-144">Linux/.NET Core 1.0-2。0</span><span class="sxs-lookup"><span data-stu-id="44913-144">Linux/.NET Core 1.0-2.0</span></span>     | <span data-ttu-id="44913-145">`libcurl`基于 http 传输 (HTTP 2.0 功能) </span><span class="sxs-lookup"><span data-stu-id="44913-145">`libcurl`-based HTTP transport (HTTP 2.0 capable)</span></span>                                         |
| <span data-ttu-id="44913-146">.NET Core 2.1 及更高版本</span><span class="sxs-lookup"><span data-stu-id="44913-146">.NET Core 2.1 and later</span></span>     | <xref:System.Net.Http.SocketsHttpHandler?displayProperty=nameWithType>                    |

<span data-ttu-id="44913-147">用户还可以 <xref:System.Net.Http.HttpClient> 通过调用 <xref:System.Net.Http.HttpClient.%23ctor*> 采用的构造函数，为配置特定传输 <xref:System.Net.Http.HttpMessageHandler> 。</span><span class="sxs-lookup"><span data-stu-id="44913-147">Users can also configure a specific transport for <xref:System.Net.Http.HttpClient> by invoking the <xref:System.Net.Http.HttpClient.%23ctor*> constructor that takes an <xref:System.Net.Http.HttpMessageHandler>.</span></span>

### <a name="httpclient-and-net-core"></a><span data-ttu-id="44913-148">HttpClient 和 .NET Core</span><span class="sxs-lookup"><span data-stu-id="44913-148">HttpClient and .NET Core</span></span>

<span data-ttu-id="44913-149">从 .NET Core 2.1 开始， <xref:System.Net.Http.SocketsHttpHandler?displayProperty=nameWithType> 类而不是 `HttpClientHandler` 提供由较高级别的 HTTP 网络类（如）使用的实现 `HttpClient` 。</span><span class="sxs-lookup"><span data-stu-id="44913-149">Starting with .NET Core 2.1, the <xref:System.Net.Http.SocketsHttpHandler?displayProperty=nameWithType> class instead of `HttpClientHandler` provides the implementation used by higher-level HTTP networking classes such as `HttpClient`.</span></span> <span data-ttu-id="44913-150">使用可 <xref:System.Net.Http.SocketsHttpHandler> 提供多种优势：</span><span class="sxs-lookup"><span data-stu-id="44913-150">The use of <xref:System.Net.Http.SocketsHttpHandler> offers a number of advantages:</span></span>

- <span data-ttu-id="44913-151">对照以前的实现，可以看到显著的性能改进。</span><span class="sxs-lookup"><span data-stu-id="44913-151">A significant performance improvement when compared with the previous implementation.</span></span>

- <span data-ttu-id="44913-152">消除了平台依赖项，从而简化了部署和服务。</span><span class="sxs-lookup"><span data-stu-id="44913-152">The elimination of platform dependencies, which simplifies deployment and servicing.</span></span> <span data-ttu-id="44913-153">例如， `libcurl` 不再依赖于适用于 macOS 的 .Net core 和适用于 Linux 的 .Net core。</span><span class="sxs-lookup"><span data-stu-id="44913-153">For example, `libcurl` is no longer a dependency on .NET Core for macOS and .NET Core for Linux.</span></span>

- <span data-ttu-id="44913-154">各种 .NET 平台的行为一致。</span><span class="sxs-lookup"><span data-stu-id="44913-154">Consistent behavior across all .NET platforms.</span></span>

<span data-ttu-id="44913-155">如果不需要此更改，可以通过多种方式将应用程序配置为使用旧版本 <xref:System.Net.Http.HttpClientHandler?displayProperty=nameWithType> ：</span><span class="sxs-lookup"><span data-stu-id="44913-155">If this change is undesirable, you can configure your application to use the older <xref:System.Net.Http.HttpClientHandler?displayProperty=nameWithType> instead in a number of ways:</span></span>

- <span data-ttu-id="44913-156">通过调用方法，如下所示 <xref:System.AppContext.SetSwitch%2A?displayProperty=nameWithType> ：</span><span class="sxs-lookup"><span data-stu-id="44913-156">By calling the <xref:System.AppContext.SetSwitch%2A?displayProperty=nameWithType> method as follows:</span></span>

   ```csharp
   AppContext.SetSwitch("System.Net.Http.UseSocketsHttpHandler", false);
   ```

   ```vb
   AppContext.SetSwitch("System.Net.Http.UseSocketsHttpHandler", False)
   ``` 
- <span data-ttu-id="44913-157">通过在 `System.Net.Http.UseSocketsHttpHandler` 配置文件的 *.netcore.runtimeconfig.js* 中定义开关：</span><span class="sxs-lookup"><span data-stu-id="44913-157">By defining the `System.Net.Http.UseSocketsHttpHandler` switch in the *.netcore.runtimeconfig.json* configuration file:</span></span>

  ```json
  "runtimeOptions": {
    "configProperties": {
        "System.Net.Http.UseSocketsHttpHandler": false
    }
  }
  ```
  
- <span data-ttu-id="44913-158">通过定义名为的环境变量 `DOTNET_SYSTEM_NET_HTTP_USESOCKETSHTTPHANDLER` 并将其设置为 `false` 或0。</span><span class="sxs-lookup"><span data-stu-id="44913-158">By defining an environment variable named `DOTNET_SYSTEM_NET_HTTP_USESOCKETSHTTPHANDLER` and setting it to either `false` or 0.</span></span>

## Examples  
 [!code-csharp[System.Net.Http.HttpClient#1](~/samples/snippets/csharp/VS_Snippets_Misc/system.net.http.httpclient/cs/source.cs#1)]  
 [!code-vb[System.Net.Http.HttpClient#1](~/samples/snippets/visualbasic/VS_Snippets_Misc/system.net.http.httpclient/vb/source.vb#1)]

 <span data-ttu-id="44913-159">前面的代码示例使用 `async Task Main()` 入口点。</span><span class="sxs-lookup"><span data-stu-id="44913-159">The preceding code example uses an `async Task Main()` entry point.</span></span> <span data-ttu-id="44913-160">该功能需要 c # 7.1 或更高版本。</span><span class="sxs-lookup"><span data-stu-id="44913-160">That feature requires C# 7.1 or later.</span></span>
 
 ]]></format>
    </remarks>
    <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=245696"><span data-ttu-id="44913-161">连接到 Web 服务</span><span class="sxs-lookup"><span data-stu-id="44913-161">Connecting to a web service</span></span></related>
    <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=245697"><span data-ttu-id="44913-162">快速入门：使用 HttpClient 进行连接</span><span class="sxs-lookup"><span data-stu-id="44913-162">Quickstart: Connecting using HttpClient</span></span></related>
    <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=245699"><span data-ttu-id="44913-163">如何使用 HttpClient 处理程序</span><span class="sxs-lookup"><span data-stu-id="44913-163">How to use HttpClient handlers</span></span></related>
    <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=245698"><span data-ttu-id="44913-164">如何确保 HttpClient 连接安全</span><span class="sxs-lookup"><span data-stu-id="44913-164">How to secure HttpClient connections</span></span></related>
    <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=242550"><span data-ttu-id="44913-165">HttpClient 示例</span><span class="sxs-lookup"><span data-stu-id="44913-165">HttpClient Sample</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="44913-166">初始化 <see cref="T:System.Net.Http.HttpClient" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="44913-166">Initializes a new instance of the <see cref="T:System.Net.Http.HttpClient" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="44913-167"><xref:System.Net.Http.HttpClient> 用于在应用程序的整个生存期内实例化一次并重复使用。</span><span class="sxs-lookup"><span data-stu-id="44913-167"><xref:System.Net.Http.HttpClient> is intended to be instantiated once and re-used throughout the life of an application.</span></span> <span data-ttu-id="44913-168">实例化每个请求的 HttpClient 类将耗尽重负载下可用的插槽数。</span><span class="sxs-lookup"><span data-stu-id="44913-168">Instantiating an HttpClient class for every request will exhaust the number of sockets available under heavy loads.</span></span> <span data-ttu-id="44913-169">这将导致 SocketException 错误。</span><span class="sxs-lookup"><span data-stu-id="44913-169">This will result in SocketException errors.</span></span> <span data-ttu-id="44913-170">下面是正确使用 HttpClient 的示例。</span><span class="sxs-lookup"><span data-stu-id="44913-170">Below is an example using HttpClient correctly.</span></span>  
  
```csharp  
public class GoodController : ApiController  
{  
    private static readonly HttpClient HttpClient;  
  
    static GoodController()  
    {  
        HttpClient = new HttpClient();  
    }  
}  
```

```vb
  Public Class GoodController
    Inherits ApiController  
   
    Private Shared ReadOnly HttpClient As HttpClient
  
    Shared Sub New()  
        HttpClient = New HttpClient()
    End Sub
End Class
```

 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HttpClient ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HttpClient();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="44913-171">使用释放此实例时释放的 <see cref="T:System.Net.Http.HttpClientHandler" /> 初始化 <see cref="T:System.Net.Http.HttpClient" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="44913-171">Initializes a new instance of the <see cref="T:System.Net.Http.HttpClient" /> class using a <see cref="T:System.Net.Http.HttpClientHandler" /> that is disposed when this instance is disposed.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[    
## Remarks  
<span data-ttu-id="44913-172">使用此构造函数等效于调用 [`HttpClient(new HttpClientHandler(), true)`](xref:System.Net.Http.HttpClient.%23ctor(System.Net.Http.HttpMessageHandler,System.Boolean)) 构造函数。</span><span class="sxs-lookup"><span data-stu-id="44913-172">Using this constructor is equivalent to calling the [`HttpClient(new HttpClientHandler(), true)`](xref:System.Net.Http.HttpClient.%23ctor(System.Net.Http.HttpMessageHandler,System.Boolean)) constructor.</span></span>
]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HttpClient (System.Net.Http.HttpMessageHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Net.Http.HttpMessageHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.#ctor(System.Net.Http.HttpMessageHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (handler As HttpMessageHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HttpClient(System::Net::Http::HttpMessageHandler ^ handler);" />
      <MemberSignature Language="F#" Value="new System.Net.Http.HttpClient : System.Net.Http.HttpMessageHandler -&gt; System.Net.Http.HttpClient" Usage="new System.Net.Http.HttpClient handler" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="handler" Type="System.Net.Http.HttpMessageHandler" />
      </Parameters>
      <Docs>
        <param name="handler"><span data-ttu-id="44913-173">要用于发送请求的 HTTP 处理程序堆栈。</span><span class="sxs-lookup"><span data-stu-id="44913-173">The HTTP handler stack to use for sending requests.</span></span></param>
        <summary><span data-ttu-id="44913-174">使用指定的处理程序初始化 <see cref="T:System.Net.Http.HttpClient" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="44913-174">Initializes a new instance of the <see cref="T:System.Net.Http.HttpClient" /> class with the specified handler.</span></span> <span data-ttu-id="44913-175">处理程序在释放此实例时被释放。</span><span class="sxs-lookup"><span data-stu-id="44913-175">The handler is disposed when this instance is disposed.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[    
## Remarks  
<span data-ttu-id="44913-176">使用此构造函数等效于调用 [`HttpClient(handler, true)`](xref:System.Net.Http.HttpClient.%23ctor(System.Net.Http.HttpMessageHandler,System.Boolean)) 构造函数。</span><span class="sxs-lookup"><span data-stu-id="44913-176">Using this constructor is equivalent to calling the [`HttpClient(handler, true)`](xref:System.Net.Http.HttpClient.%23ctor(System.Net.Http.HttpMessageHandler,System.Boolean)) constructor.</span></span>

<span data-ttu-id="44913-177">指定的 `handler` 将通过调用 [HttpClient](xref:System.Net.Http.HttpMessageInvoker.Dispose)来释放。</span><span class="sxs-lookup"><span data-stu-id="44913-177">The specified `handler` will be disposed of by calling [HttpClient.Dispose](xref:System.Net.Http.HttpMessageInvoker.Dispose).</span></span>  
]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="44913-178"><paramref name="handler" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="44913-178">The <paramref name="handler" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HttpClient (System.Net.Http.HttpMessageHandler handler, bool disposeHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Net.Http.HttpMessageHandler handler, bool disposeHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.#ctor(System.Net.Http.HttpMessageHandler,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (handler As HttpMessageHandler, disposeHandler As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HttpClient(System::Net::Http::HttpMessageHandler ^ handler, bool disposeHandler);" />
      <MemberSignature Language="F#" Value="new System.Net.Http.HttpClient : System.Net.Http.HttpMessageHandler * bool -&gt; System.Net.Http.HttpClient" Usage="new System.Net.Http.HttpClient (handler, disposeHandler)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="handler" Type="System.Net.Http.HttpMessageHandler" />
        <Parameter Name="disposeHandler" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="handler"><span data-ttu-id="44913-179">负责处理 HTTP 响应消息的 <see cref="T:System.Net.Http.HttpMessageHandler" />。</span><span class="sxs-lookup"><span data-stu-id="44913-179">The <see cref="T:System.Net.Http.HttpMessageHandler" /> responsible for processing the HTTP response messages.</span></span></param>
        <param name="disposeHandler"><span data-ttu-id="44913-180"><see langword="true" />如果内部处理程序应由 HttpClient 释放，则为; 否则为[。](xref:System.Net.Http.HttpMessageInvoker.Dispose)<see langword="false" />如果要重用内部处理程序，则为。</span><span class="sxs-lookup"><span data-stu-id="44913-180"><see langword="true" /> if the inner handler should be disposed of by [HttpClient.Dispose](xref:System.Net.Http.HttpMessageInvoker.Dispose); <see langword="false" /> if you intend to reuse the inner handler.</span></span></param>
        <summary><span data-ttu-id="44913-181">使用提供的处理程序初始化 <see cref="T:System.Net.Http.HttpClient" /> 类的新实例，并指定在释放此实例时是否应释放该处理程序。</span><span class="sxs-lookup"><span data-stu-id="44913-181">Initializes a new instance of the <see cref="T:System.Net.Http.HttpClient" /> class with the provided handler, and specifies whether that handler should be disposed when this instance is disposed.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="44913-182"><paramref name="handler" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="44913-182">The <paramref name="handler" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="BaseAddress">
      <MemberSignature Language="C#" Value="public Uri BaseAddress { get; set; }" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Uri BaseAddress" />
      <MemberSignature Language="DocId" Value="P:System.Net.Http.HttpClient.BaseAddress" />
      <MemberSignature Language="VB.NET" Value="Public Property BaseAddress As Uri" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Uri ^ BaseAddress { Uri ^ get(); void set(Uri ^ value); };" />
      <MemberSignature Language="F#" Value="member this.BaseAddress : Uri with get, set" Usage="System.Net.Http.HttpClient.BaseAddress" />
      <MemberSignature Language="C#" Value="public Uri? BaseAddress { get; set; }" FrameworkAlternate="net-5.0" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Uri</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="44913-183">获取或设置发送请求时使用的 Internet 资源的统一资源标识符 (URI) 的基址。</span><span class="sxs-lookup"><span data-stu-id="44913-183">Gets or sets the base address of Uniform Resource Identifier (URI) of the Internet resource used when sending requests.</span></span></summary>
        <value><span data-ttu-id="44913-184">发送请求时使用的 Internet 资源的统一资源标识符 (URI) 的基址。</span><span class="sxs-lookup"><span data-stu-id="44913-184">The base address of Uniform Resource Identifier (URI) of the Internet resource used when sending requests.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="44913-185">当 <xref:System.Net.Http.HttpRequestMessage> 使用相对 Uri 发送时，消息 Uri 将添加到 <xref:System.Net.Http.HttpClient.BaseAddress%2A> 属性中以创建绝对 uri。</span><span class="sxs-lookup"><span data-stu-id="44913-185">When sending a <xref:System.Net.Http.HttpRequestMessage> with a relative Uri, the message Uri will be added to the <xref:System.Net.Http.HttpClient.BaseAddress%2A> property to create an absolute Uri.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CancelPendingRequests">
      <MemberSignature Language="C#" Value="public void CancelPendingRequests ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CancelPendingRequests() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.CancelPendingRequests" />
      <MemberSignature Language="VB.NET" Value="Public Sub CancelPendingRequests ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CancelPendingRequests();" />
      <MemberSignature Language="F#" Value="member this.CancelPendingRequests : unit -&gt; unit" Usage="httpClient.CancelPendingRequests " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="44913-186">取消该实例所有挂起的请求。</span><span class="sxs-lookup"><span data-stu-id="44913-186">Cancel all pending requests on this instance.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="44913-187">调用此方法后， <xref:System.Net.Http.HttpClient> 仍可使用实例执行其他请求。</span><span class="sxs-lookup"><span data-stu-id="44913-187">After calling this method, the <xref:System.Net.Http.HttpClient> instance can still be used to execute additional requests.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultProxy">
      <MemberSignature Language="C#" Value="public static System.Net.IWebProxy DefaultProxy { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Net.IWebProxy DefaultProxy" />
      <MemberSignature Language="DocId" Value="P:System.Net.Http.HttpClient.DefaultProxy" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property DefaultProxy As IWebProxy" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Net::IWebProxy ^ DefaultProxy { System::Net::IWebProxy ^ get(); void set(System::Net::IWebProxy ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DefaultProxy : System.Net.IWebProxy with get, set" Usage="System.Net.Http.HttpClient.DefaultProxy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.IWebProxy</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="44913-188">获取或设置全局 HTTP 代理。</span><span class="sxs-lookup"><span data-stu-id="44913-188">Gets or sets the global Http proxy.</span></span></summary>
        <value><span data-ttu-id="44913-189">用于实例化的每个调用所使用的代理 <see cref="T:System.Net.HttpWebRequest" /> 。</span><span class="sxs-lookup"><span data-stu-id="44913-189">A proxy used by every call that instantiates a <see cref="T:System.Net.HttpWebRequest" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks
<span data-ttu-id="44913-190"> <xref:System.Net.Http.HttpClient>   如果在  <xref:System.Net.Http.HttpClientHandler> 通过其构造函数传递的中未显式设置代理，则此静态属性将确定所有实例都使用的默认代理。</span><span class="sxs-lookup"><span data-stu-id="44913-190">This static property determines the default proxy that all <xref:System.Net.Http.HttpClient> instances use if no proxy is set explicitly in the <xref:System.Net.Http.HttpClientHandler> passed through its constructor.</span></span> 

<span data-ttu-id="44913-191">此属性返回的默认实例将根据你的平台，初始化以下一组不同的规则：</span><span class="sxs-lookup"><span data-stu-id="44913-191">The default instance returned by this property will initialize following a different set of rules depending on your platform:</span></span>
* <span data-ttu-id="44913-192">**对于 Windows：** 从环境变量中读取代理配置，或者从用户的代理设置中读取代理配置（如果未定义）。</span><span class="sxs-lookup"><span data-stu-id="44913-192">**For Windows:** Reads proxy configuration from environment variables or, if those are not defined, from the user's proxy settings.</span></span>

* <span data-ttu-id="44913-193">**对于 macOS：** 从环境变量中读取代理配置，如果未定义，则从系统的代理设置中读取。</span><span class="sxs-lookup"><span data-stu-id="44913-193">**For macOS:** Reads proxy configuration from environment variables or, if those are not defined, from the system's proxy settings.</span></span>

* <span data-ttu-id="44913-194">**对于 Linux：** 从环境变量读取代理配置，或者，如果未定义这些配置，此属性将初始化绕过所有地址的非配置实例。</span><span class="sxs-lookup"><span data-stu-id="44913-194">**For Linux:** Reads proxy configuration from environment variables or, in case those are not defined, this property initializes a non-configured instance that bypasses all addresses.</span></span>

<span data-ttu-id="44913-195">用于 `DefaultProxy` 在 Windows 和基于 Unix 的平台上进行初始化的环境变量包括：</span><span class="sxs-lookup"><span data-stu-id="44913-195">The environment variables used for `DefaultProxy` initialization on Windows and Unix-based platforms are:</span></span>
* <span data-ttu-id="44913-196">HTTP_PROXY：用于 HTTP 请求的代理服务器的主机名或 IP 地址。</span><span class="sxs-lookup"><span data-stu-id="44913-196">HTTP_PROXY: the hostname or IP address of the proxy server used on HTTP requests.</span></span>
* <span data-ttu-id="44913-197">HTTPS_PROXY：在 HTTPS 请求上使用的代理服务器的主机名或 IP 地址。</span><span class="sxs-lookup"><span data-stu-id="44913-197">HTTPS_PROXY: the hostname or IP address of the proxy server used on HTTPS requests.</span></span>
* <span data-ttu-id="44913-198">ALL_PROXY：在未定义 HTTP_PROXY 和/或 HTTPS_PROXY 的情况下，在 HTTP 和/或 HTTPS 请求上使用的代理服务器的主机名或 IP 地址。</span><span class="sxs-lookup"><span data-stu-id="44913-198">ALL_PROXY: the hostname or IP address of the proxy server used on HTTP and/or HTTPS requests in case HTTP_PROXY and/or HTTPS_PROXY are not defined.</span></span>
* <span data-ttu-id="44913-199">NO_PROXY：应从代理中排除的主机名的逗号分隔列表。</span><span class="sxs-lookup"><span data-stu-id="44913-199">NO_PROXY: a comma-separated list of hostnames that should be excluded from proxying.</span></span>

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="44913-200">传递的值不能为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="44913-200">The value passed cannot be <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DefaultRequestHeaders">
      <MemberSignature Language="C#" Value="public System.Net.Http.Headers.HttpRequestHeaders DefaultRequestHeaders { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.Http.Headers.HttpRequestHeaders DefaultRequestHeaders" />
      <MemberSignature Language="DocId" Value="P:System.Net.Http.HttpClient.DefaultRequestHeaders" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DefaultRequestHeaders As HttpRequestHeaders" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::Http::Headers::HttpRequestHeaders ^ DefaultRequestHeaders { System::Net::Http::Headers::HttpRequestHeaders ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DefaultRequestHeaders : System.Net.Http.Headers.HttpRequestHeaders" Usage="System.Net.Http.HttpClient.DefaultRequestHeaders" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Http.Headers.HttpRequestHeaders</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="44913-201">获取与每个请求一起发送的标题。</span><span class="sxs-lookup"><span data-stu-id="44913-201">Gets the headers which should be sent with each request.</span></span></summary>
        <value><span data-ttu-id="44913-202">应与每一个请求一起发送的标题。</span><span class="sxs-lookup"><span data-stu-id="44913-202">The headers which should be sent with each request.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="44913-203">此属性上设置的标头不需要再次设置为请求消息。</span><span class="sxs-lookup"><span data-stu-id="44913-203">Headers set on this property don't need to be set on request messages again.</span></span> <span data-ttu-id="44913-204">`DefaultRequestHeaders` 由于存在未处理的请求，不应进行修改，因为它不是线程安全的。</span><span class="sxs-lookup"><span data-stu-id="44913-204">`DefaultRequestHeaders` should not be modified while there are outstanding requests, because it is not thread-safe.</span></span>
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultRequestVersion">
      <MemberSignature Language="C#" Value="public Version DefaultRequestVersion { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Version DefaultRequestVersion" />
      <MemberSignature Language="DocId" Value="P:System.Net.Http.HttpClient.DefaultRequestVersion" />
      <MemberSignature Language="VB.NET" Value="Public Property DefaultRequestVersion As Version" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Version ^ DefaultRequestVersion { Version ^ get(); void set(Version ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DefaultRequestVersion : Version with get, set" Usage="System.Net.Http.HttpClient.DefaultRequestVersion" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Version</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="44913-205">获取或设置对此 <see cref="T:System.Net.Http.HttpClient" /> 实例发出的后续请求使用的默认 HTTP 版本。</span><span class="sxs-lookup"><span data-stu-id="44913-205">Gets or sets the default HTTP version used on subsequent requests made by this <see cref="T:System.Net.Http.HttpClient" /> instance.</span></span></summary>
        <value><span data-ttu-id="44913-206">用于此实例发出的任何请求的默认版本 <see cref="T:System.Net.Http.HttpClient" /> 。</span><span class="sxs-lookup"><span data-stu-id="44913-206">The default version to use for any requests made with this <see cref="T:System.Net.Http.HttpClient" /> instance.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
<span data-ttu-id="44913-207">`DefaultRequestVersion` 默认设置为 <xref:System.Net.HttpVersion.Version11?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="44913-207">`DefaultRequestVersion` is <xref:System.Net.HttpVersion.Version11?displayProperty=nameWithType> by default.</span></span>

<span data-ttu-id="44913-208">`DefaultRequestVersion`属性指定默认的 HTTP 版本，该版本用于 <xref:System.Net.Http.HttpClient> 在构造要发送的时使用此实例发送的请求 <xref:System.Net.Http.HttpRequestMessage> ，尤其是对 <xref:System.Net.Http.HttpClient.DeleteAsync%2A> 、 <xref:System.Net.Http.HttpClient.GetAsync%2A> 、 <xref:System.Net.Http.HttpClient.GetByteArrayAsync%2A> <xref:System.Net.Http.HttpClient.GetStreamAsync%2A> <xref:System.Net.Http.HttpClient.GetStringAsync%2A> <xref:System.Net.Http.HttpClient.PatchAsync%2A> <xref:System.Net.Http.HttpClient.PostAsync%2A> <xref:System.Net.Http.HttpClient.PutAsync%2A> 、、、、和等方法的调用。</span><span class="sxs-lookup"><span data-stu-id="44913-208">The `DefaultRequestVersion` property specifies the default HTTP version to use for requests sent using this <xref:System.Net.Http.HttpClient> instance when it constructs the <xref:System.Net.Http.HttpRequestMessage> to send, specifically with calls to methods such as <xref:System.Net.Http.HttpClient.DeleteAsync%2A>, <xref:System.Net.Http.HttpClient.GetAsync%2A>, <xref:System.Net.Http.HttpClient.GetByteArrayAsync%2A>, <xref:System.Net.Http.HttpClient.GetStreamAsync%2A>, <xref:System.Net.Http.HttpClient.GetStringAsync%2A>, <xref:System.Net.Http.HttpClient.PatchAsync%2A>, <xref:System.Net.Http.HttpClient.PostAsync%2A>, and <xref:System.Net.Http.HttpClient.PutAsync%2A>.</span></span>

<span data-ttu-id="44913-209">`DefaultRequestVersion`属性不适用于 <xref:System.Net.Http.HttpClient.SendAsync%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="44913-209">The `DefaultRequestVersion` property doesn't apply to the <xref:System.Net.Http.HttpClient.SendAsync%2A> method.</span></span> <span data-ttu-id="44913-210"><xref:System.Net.Http.HttpRequestMessage>作为参数传递给方法的参数 <xref:System.Net.Http.HttpClient.SendAsync%2A> 具有其自己的 `Version` 属性，该属性控制用于请求的 HTTP 版本。</span><span class="sxs-lookup"><span data-stu-id="44913-210">The <xref:System.Net.Http.HttpRequestMessage> parameter passed as the argument to the <xref:System.Net.Http.HttpClient.SendAsync%2A> method has its own `Version` property that controls the HTTP version used for the request.</span></span>

<span data-ttu-id="44913-211">`DefaultRequestVersion`只要 <xref:System.Net.Http.HttpClient> 实例尚未启动任何请求，就可以更改该属性。</span><span class="sxs-lookup"><span data-stu-id="44913-211">The `DefaultRequestVersion` property can be changed as long as the <xref:System.Net.Http.HttpClient> instance has not started any request.</span></span>
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="44913-212">在设置操作中，<see langword="DefaultRequestVersion" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="44913-212">In a set operation, <see langword="DefaultRequestVersion" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="44913-213"><see cref="T:System.Net.Http.HttpClient" /> 实例已启动一个或多个请求。</span><span class="sxs-lookup"><span data-stu-id="44913-213">The <see cref="T:System.Net.Http.HttpClient" /> instance has already started one or more requests.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="44913-214"><see cref="T:System.Net.Http.HttpClient" /> 实例已被释放。</span><span class="sxs-lookup"><span data-stu-id="44913-214">The <see cref="T:System.Net.Http.HttpClient" /> instance has already been disposed.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DeleteAsync">
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="44913-215">以异步操作将 DELETE 请求发送给指定 URI。</span><span class="sxs-lookup"><span data-stu-id="44913-215">Send a DELETE request to the specified Uri as an asynchronous operation.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DeleteAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; DeleteAsync (string requestUri);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; DeleteAsync(string requestUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.DeleteAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function DeleteAsync (requestUri As String) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ DeleteAsync(System::String ^ requestUri);" />
      <MemberSignature Language="F#" Value="member this.DeleteAsync : string -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.DeleteAsync requestUri" />
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; DeleteAsync (string? requestUri);" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="44913-216">请求发送到的 URI。</span><span class="sxs-lookup"><span data-stu-id="44913-216">The Uri the request is sent to.</span></span></param>
        <summary><span data-ttu-id="44913-217">以异步操作将 DELETE 请求发送给指定 URI。</span><span class="sxs-lookup"><span data-stu-id="44913-217">Send a DELETE request to the specified Uri as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="44913-218">表示异步操作的任务对象。</span><span class="sxs-lookup"><span data-stu-id="44913-218">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="44913-219">此操作不会阻止。</span><span class="sxs-lookup"><span data-stu-id="44913-219">This operation will not block.</span></span> <span data-ttu-id="44913-220">返回 <xref:System.Threading.Tasks.Task%601> 的对象将在整个响应 (包括内容) 读取后完成。</span><span class="sxs-lookup"><span data-stu-id="44913-220">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  

> [!NOTE]
> <span data-ttu-id="44913-221">在超时情况下，不同的 .NET 实现会引发不同的异常。</span><span class="sxs-lookup"><span data-stu-id="44913-221">In case of timeout, different exceptions are thrown on different .NET implementations.</span></span>
> - <span data-ttu-id="44913-222"><xref:System.Net.Http.HttpRequestException> 所有适用的 .NET Framework 版本都将引发。</span><span class="sxs-lookup"><span data-stu-id="44913-222"><xref:System.Net.Http.HttpRequestException> is thrown on all applicable .NET Framework versions.</span></span>
> - <span data-ttu-id="44913-223"><xref:System.Threading.Tasks.TaskCanceledException> 在所有适用的 .NET Core 版本上都不会引发任何内部异常。</span><span class="sxs-lookup"><span data-stu-id="44913-223"><xref:System.Threading.Tasks.TaskCanceledException> without any inner exception is thrown on all applicable .NET Core versions.</span></span>
> - <span data-ttu-id="44913-224"><xref:System.Threading.Tasks.TaskCanceledException><xref:System.TimeoutException>在 .net 5.0 和更高版本上，将引发嵌套的。</span><span class="sxs-lookup"><span data-stu-id="44913-224"><xref:System.Threading.Tasks.TaskCanceledException> that nests a <xref:System.TimeoutException> is thrown on .NET 5.0 and later versions.</span></span>
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="44913-225"><paramref name="requestUri" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="44913-225">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="44913-226">请求消息已由 <see cref="T:System.Net.Http.HttpClient" /> 实例发送。</span><span class="sxs-lookup"><span data-stu-id="44913-226">The request message was already sent by the <see cref="T:System.Net.Http.HttpClient" /> instance.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="44913-227">某个根本问题（例如网络连接、DNS 失败、服务器证书验证或超时）导致请求失败。</span><span class="sxs-lookup"><span data-stu-id="44913-227">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException"><span data-ttu-id="44913-228">仅限 .NET Core 和 .NET 5.0 及更高版本：请求因超时而失败。</span><span class="sxs-lookup"><span data-stu-id="44913-228">.NET Core and .NET 5.0 and later only: The request failed due to timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DeleteAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; DeleteAsync (Uri requestUri);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; DeleteAsync(class System.Uri requestUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.DeleteAsync(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Function DeleteAsync (requestUri As Uri) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ DeleteAsync(Uri ^ requestUri);" />
      <MemberSignature Language="F#" Value="member this.DeleteAsync : Uri -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.DeleteAsync requestUri" />
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; DeleteAsync (Uri? requestUri);" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="44913-229">请求发送到的 URI。</span><span class="sxs-lookup"><span data-stu-id="44913-229">The Uri the request is sent to.</span></span></param>
        <summary><span data-ttu-id="44913-230">以异步操作将 DELETE 请求发送给指定 URI。</span><span class="sxs-lookup"><span data-stu-id="44913-230">Send a DELETE request to the specified Uri as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="44913-231">表示异步操作的任务对象。</span><span class="sxs-lookup"><span data-stu-id="44913-231">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="44913-232">此操作不会阻止。</span><span class="sxs-lookup"><span data-stu-id="44913-232">This operation will not block.</span></span> <span data-ttu-id="44913-233">返回 <xref:System.Threading.Tasks.Task%601> 的对象将在整个响应 (包括内容) 读取后完成。</span><span class="sxs-lookup"><span data-stu-id="44913-233">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  

> [!NOTE]
> <span data-ttu-id="44913-234">在超时情况下，不同的 .NET 实现会引发不同的异常。</span><span class="sxs-lookup"><span data-stu-id="44913-234">In case of timeout, different exceptions are thrown on different .NET implementations.</span></span>
> - <span data-ttu-id="44913-235"><xref:System.Net.Http.HttpRequestException> 所有适用的 .NET Framework 版本都将引发。</span><span class="sxs-lookup"><span data-stu-id="44913-235"><xref:System.Net.Http.HttpRequestException> is thrown on all applicable .NET Framework versions.</span></span>
> - <span data-ttu-id="44913-236"><xref:System.Threading.Tasks.TaskCanceledException> 在所有适用的 .NET Core 版本上都不会引发任何内部异常。</span><span class="sxs-lookup"><span data-stu-id="44913-236"><xref:System.Threading.Tasks.TaskCanceledException> without any inner exception is thrown on all applicable .NET Core versions.</span></span>
> - <span data-ttu-id="44913-237"><xref:System.Threading.Tasks.TaskCanceledException><xref:System.TimeoutException>在 .net 5.0 和更高版本上，将引发嵌套的。</span><span class="sxs-lookup"><span data-stu-id="44913-237"><xref:System.Threading.Tasks.TaskCanceledException> that nests a <xref:System.TimeoutException> is thrown on .NET 5.0 and later versions.</span></span>
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="44913-238"><paramref name="requestUri" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="44913-238">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="44913-239">请求消息已由 <see cref="T:System.Net.Http.HttpClient" /> 实例发送。</span><span class="sxs-lookup"><span data-stu-id="44913-239">The request message was already sent by the <see cref="T:System.Net.Http.HttpClient" /> instance.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="44913-240">某个根本问题（例如网络连接、DNS 失败、服务器证书验证或超时）导致请求失败。</span><span class="sxs-lookup"><span data-stu-id="44913-240">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException"><span data-ttu-id="44913-241">仅限 .NET Core 和 .NET 5.0 及更高版本：请求因超时而失败。</span><span class="sxs-lookup"><span data-stu-id="44913-241">.NET Core and .NET 5.0 and later only: The request failed due to timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DeleteAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; DeleteAsync (string requestUri, System.Threading.CancellationToken cancellationToken);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; DeleteAsync(string requestUri, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.DeleteAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function DeleteAsync (requestUri As String, cancellationToken As CancellationToken) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ DeleteAsync(System::String ^ requestUri, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.DeleteAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.DeleteAsync (requestUri, cancellationToken)" />
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; DeleteAsync (string? requestUri, System.Threading.CancellationToken cancellationToken);" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="44913-242">请求发送到的 URI。</span><span class="sxs-lookup"><span data-stu-id="44913-242">The Uri the request is sent to.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="44913-243">可由其他对象或线程用以接收取消通知的取消标记。</span><span class="sxs-lookup"><span data-stu-id="44913-243">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</span></span></param>
        <summary><span data-ttu-id="44913-244">用以异步操作的取消标记发送 DELETE 请求到指定的 URI。</span><span class="sxs-lookup"><span data-stu-id="44913-244">Send a DELETE request to the specified Uri with a cancellation token as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="44913-245">表示异步操作的任务对象。</span><span class="sxs-lookup"><span data-stu-id="44913-245">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="44913-246">此操作不会阻止。</span><span class="sxs-lookup"><span data-stu-id="44913-246">This operation will not block.</span></span> <span data-ttu-id="44913-247">返回 <xref:System.Threading.Tasks.Task%601> 的对象将在整个响应 (包括内容) 读取后完成。</span><span class="sxs-lookup"><span data-stu-id="44913-247">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  

> [!NOTE]
> <span data-ttu-id="44913-248">在超时情况下，不同的 .NET 实现会引发不同的异常。</span><span class="sxs-lookup"><span data-stu-id="44913-248">In case of timeout, different exceptions are thrown on different .NET implementations.</span></span>
> - <span data-ttu-id="44913-249"><xref:System.Net.Http.HttpRequestException> 所有适用的 .NET Framework 版本都将引发。</span><span class="sxs-lookup"><span data-stu-id="44913-249"><xref:System.Net.Http.HttpRequestException> is thrown on all applicable .NET Framework versions.</span></span>
> - <span data-ttu-id="44913-250"><xref:System.Threading.Tasks.TaskCanceledException> 在所有适用的 .NET Core 版本上都不会引发任何内部异常。</span><span class="sxs-lookup"><span data-stu-id="44913-250"><xref:System.Threading.Tasks.TaskCanceledException> without any inner exception is thrown on all applicable .NET Core versions.</span></span>
> - <span data-ttu-id="44913-251"><xref:System.Threading.Tasks.TaskCanceledException><xref:System.TimeoutException>在 .net 5.0 和更高版本上，将引发嵌套的。</span><span class="sxs-lookup"><span data-stu-id="44913-251"><xref:System.Threading.Tasks.TaskCanceledException> that nests a <xref:System.TimeoutException> is thrown on .NET 5.0 and later versions.</span></span>
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="44913-252"><paramref name="requestUri" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="44913-252">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="44913-253">请求消息已由 <see cref="T:System.Net.Http.HttpClient" /> 实例发送。</span><span class="sxs-lookup"><span data-stu-id="44913-253">The request message was already sent by the <see cref="T:System.Net.Http.HttpClient" /> instance.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="44913-254">某个根本问题（例如网络连接、DNS 失败、服务器证书验证或超时）导致请求失败。</span><span class="sxs-lookup"><span data-stu-id="44913-254">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException"><span data-ttu-id="44913-255">仅限 .NET Core 和 .NET 5.0 及更高版本：请求因超时而失败。</span><span class="sxs-lookup"><span data-stu-id="44913-255">.NET Core and .NET 5.0 and later only: The request failed due to timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DeleteAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; DeleteAsync (Uri requestUri, System.Threading.CancellationToken cancellationToken);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; DeleteAsync(class System.Uri requestUri, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.DeleteAsync(System.Uri,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function DeleteAsync (requestUri As Uri, cancellationToken As CancellationToken) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ DeleteAsync(Uri ^ requestUri, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.DeleteAsync : Uri * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.DeleteAsync (requestUri, cancellationToken)" />
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; DeleteAsync (Uri? requestUri, System.Threading.CancellationToken cancellationToken);" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="44913-256">请求发送到的 URI。</span><span class="sxs-lookup"><span data-stu-id="44913-256">The Uri the request is sent to.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="44913-257">可由其他对象或线程用以接收取消通知的取消标记。</span><span class="sxs-lookup"><span data-stu-id="44913-257">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</span></span></param>
        <summary><span data-ttu-id="44913-258">用以异步操作的取消标记发送 DELETE 请求到指定的 URI。</span><span class="sxs-lookup"><span data-stu-id="44913-258">Send a DELETE request to the specified Uri with a cancellation token as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="44913-259">表示异步操作的任务对象。</span><span class="sxs-lookup"><span data-stu-id="44913-259">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="44913-260">此操作不会阻止。</span><span class="sxs-lookup"><span data-stu-id="44913-260">This operation will not block.</span></span> <span data-ttu-id="44913-261">返回 <xref:System.Threading.Tasks.Task%601> 的对象将在整个响应 (包括内容) 读取后完成。</span><span class="sxs-lookup"><span data-stu-id="44913-261">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  

> [!NOTE]
> <span data-ttu-id="44913-262">在超时情况下，不同的 .NET 实现会引发不同的异常。</span><span class="sxs-lookup"><span data-stu-id="44913-262">In case of timeout, different exceptions are thrown on different .NET implementations.</span></span>
> - <span data-ttu-id="44913-263"><xref:System.Net.Http.HttpRequestException> 所有适用的 .NET Framework 版本都将引发。</span><span class="sxs-lookup"><span data-stu-id="44913-263"><xref:System.Net.Http.HttpRequestException> is thrown on all applicable .NET Framework versions.</span></span>
> - <span data-ttu-id="44913-264"><xref:System.Threading.Tasks.TaskCanceledException> 在所有适用的 .NET Core 版本上都不会引发任何内部异常。</span><span class="sxs-lookup"><span data-stu-id="44913-264"><xref:System.Threading.Tasks.TaskCanceledException> without any inner exception is thrown on all applicable .NET Core versions.</span></span>
> - <span data-ttu-id="44913-265"><xref:System.Threading.Tasks.TaskCanceledException><xref:System.TimeoutException>在 .net 5.0 和更高版本上，将引发嵌套的。</span><span class="sxs-lookup"><span data-stu-id="44913-265"><xref:System.Threading.Tasks.TaskCanceledException> that nests a <xref:System.TimeoutException> is thrown on .NET 5.0 and later versions.</span></span>
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="44913-266"><paramref name="requestUri" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="44913-266">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="44913-267">请求消息已由 <see cref="T:System.Net.Http.HttpClient" /> 实例发送。</span><span class="sxs-lookup"><span data-stu-id="44913-267">The request message was already sent by the <see cref="T:System.Net.Http.HttpClient" /> instance.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="44913-268">某个根本问题（例如网络连接、DNS 失败、服务器证书验证或超时）导致请求失败。</span><span class="sxs-lookup"><span data-stu-id="44913-268">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException"><span data-ttu-id="44913-269">仅限 .NET Core 和 .NET 5.0 及更高版本：请求因超时而失败。</span><span class="sxs-lookup"><span data-stu-id="44913-269">.NET Core and .NET 5.0 and later only: The request failed due to timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="httpClient.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing"><span data-ttu-id="44913-270">如果释放托管资源和非托管资源，则为 <see langword="true" />；如果仅释放非托管资源，则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="44913-270"><see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to releases only unmanaged resources.</span></span></param>
        <summary><span data-ttu-id="44913-271">释放由 <see cref="T:System.Net.Http.HttpClient" /> 使用的非托管资源，并可根据需要释放托管资源。</span><span class="sxs-lookup"><span data-stu-id="44913-271">Releases the unmanaged resources used by the <see cref="T:System.Net.Http.HttpClient" /> and optionally disposes of the managed resources.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="44913-272">此方法由公共 `Dispose()` 方法和 <xref:System.Object.Finalize%2A> 方法调用。</span><span class="sxs-lookup"><span data-stu-id="44913-272">This method is called by the public `Dispose()` method and the <xref:System.Object.Finalize%2A> method.</span></span> <span data-ttu-id="44913-273">`Dispose()` 调用受保护的 `Dispose(Boolean)` 方法，并将 `disposing` 参数设置为 `true` 。</span><span class="sxs-lookup"><span data-stu-id="44913-273">`Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`.</span></span> <span data-ttu-id="44913-274"><xref:System.Object.Finalize%2A>`Dispose`在设置为的情况调用 `disposing` `false` 。</span><span class="sxs-lookup"><span data-stu-id="44913-274"><xref:System.Object.Finalize%2A> invokes `Dispose` with `disposing` set to `false`.</span></span>  
  
 <span data-ttu-id="44913-275">当 `disposing` 参数为 `true` 时，此方法释放该 <xref:System.Net.Http.HttpClient> 引用的、由任何托管对象持有的全部资源。</span><span class="sxs-lookup"><span data-stu-id="44913-275">When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Net.Http.HttpClient> references.</span></span> <span data-ttu-id="44913-276">此方法将调用每个被引用对象的 `Dispose()` 方法。</span><span class="sxs-lookup"><span data-stu-id="44913-276">This method invokes the `Dispose()` method of each referenced object.</span></span>  
  
 <span data-ttu-id="44913-277">调用此方法时，将 <xref:System.Net.Http.HttpClient.CancelPendingRequests%2A> 调用方法以中止所有挂起的请求。</span><span class="sxs-lookup"><span data-stu-id="44913-277">When this method is called, the <xref:System.Net.Http.HttpClient.CancelPendingRequests%2A> method is called to abort all pending requests.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetAsync">
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="44913-278">以异步操作将 GET 请求发送给指定 URI。</span><span class="sxs-lookup"><span data-stu-id="44913-278">Send a GET request to the specified Uri as an asynchronous operation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="44913-279">操作不会阻止。</span><span class="sxs-lookup"><span data-stu-id="44913-279">The operation will not block.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; GetAsync (string requestUri);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; GetAsync(string requestUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAsync (requestUri As String) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ GetAsync(System::String ^ requestUri);" />
      <MemberSignature Language="F#" Value="member this.GetAsync : string -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.GetAsync requestUri" />
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; GetAsync (string? requestUri);" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="44913-280">请求发送到的 URI。</span><span class="sxs-lookup"><span data-stu-id="44913-280">The Uri the request is sent to.</span></span></param>
        <summary><span data-ttu-id="44913-281">以异步操作将 GET 请求发送给指定 URI。</span><span class="sxs-lookup"><span data-stu-id="44913-281">Send a GET request to the specified Uri as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="44913-282">表示异步操作的任务对象。</span><span class="sxs-lookup"><span data-stu-id="44913-282">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="44913-283">此操作不会阻止。</span><span class="sxs-lookup"><span data-stu-id="44913-283">This operation will not block.</span></span> <span data-ttu-id="44913-284">返回 <xref:System.Threading.Tasks.Task%601> 的对象将在整个响应 (包括内容) 读取后完成。</span><span class="sxs-lookup"><span data-stu-id="44913-284">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  

> [!NOTE]
> <span data-ttu-id="44913-285">在超时情况下，不同的 .NET 实现会引发不同的异常。</span><span class="sxs-lookup"><span data-stu-id="44913-285">In case of timeout, different exceptions are thrown on different .NET implementations.</span></span>
> - <span data-ttu-id="44913-286"><xref:System.Net.Http.HttpRequestException> 所有适用的 .NET Framework 版本都将引发。</span><span class="sxs-lookup"><span data-stu-id="44913-286"><xref:System.Net.Http.HttpRequestException> is thrown on all applicable .NET Framework versions.</span></span>
> - <span data-ttu-id="44913-287"><xref:System.Threading.Tasks.TaskCanceledException> 在所有适用的 .NET Core 版本上都不会引发任何内部异常。</span><span class="sxs-lookup"><span data-stu-id="44913-287"><xref:System.Threading.Tasks.TaskCanceledException> without any inner exception is thrown on all applicable .NET Core versions.</span></span>
> - <span data-ttu-id="44913-288"><xref:System.Threading.Tasks.TaskCanceledException><xref:System.TimeoutException>在 .net 5.0 和更高版本上，将引发嵌套的。</span><span class="sxs-lookup"><span data-stu-id="44913-288"><xref:System.Threading.Tasks.TaskCanceledException> that nests a <xref:System.TimeoutException> is thrown on .NET 5.0 and later versions.</span></span>
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="44913-289"><paramref name="requestUri" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="44913-289">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="44913-290">某个根本问题（例如网络连接、DNS 失败、服务器证书验证或超时）导致请求失败。</span><span class="sxs-lookup"><span data-stu-id="44913-290">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException"><span data-ttu-id="44913-291">仅限 .NET Core 和 .NET 5.0 及更高版本：请求因超时而失败。</span><span class="sxs-lookup"><span data-stu-id="44913-291">.NET Core and .NET 5.0 and later only: The request failed due to timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; GetAsync (Uri requestUri);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; GetAsync(class System.Uri requestUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetAsync(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAsync (requestUri As Uri) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ GetAsync(Uri ^ requestUri);" />
      <MemberSignature Language="F#" Value="member this.GetAsync : Uri -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.GetAsync requestUri" />
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; GetAsync (Uri? requestUri);" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="44913-292">请求发送到的 URI。</span><span class="sxs-lookup"><span data-stu-id="44913-292">The Uri the request is sent to.</span></span></param>
        <summary><span data-ttu-id="44913-293">以异步操作将 GET 请求发送给指定 URI。</span><span class="sxs-lookup"><span data-stu-id="44913-293">Send a GET request to the specified Uri as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="44913-294">表示异步操作的任务对象。</span><span class="sxs-lookup"><span data-stu-id="44913-294">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="44913-295">此操作不会阻止。</span><span class="sxs-lookup"><span data-stu-id="44913-295">This operation will not block.</span></span> <span data-ttu-id="44913-296">返回 <xref:System.Threading.Tasks.Task%601> 的对象将在整个响应 (包括内容) 读取后完成。</span><span class="sxs-lookup"><span data-stu-id="44913-296">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  

> [!NOTE]
> <span data-ttu-id="44913-297">在超时情况下，不同的 .NET 实现会引发不同的异常。</span><span class="sxs-lookup"><span data-stu-id="44913-297">In case of timeout, different exceptions are thrown on different .NET implementations.</span></span>
> - <span data-ttu-id="44913-298"><xref:System.Net.Http.HttpRequestException> 所有适用的 .NET Framework 版本都将引发。</span><span class="sxs-lookup"><span data-stu-id="44913-298"><xref:System.Net.Http.HttpRequestException> is thrown on all applicable .NET Framework versions.</span></span>
> - <span data-ttu-id="44913-299"><xref:System.Threading.Tasks.TaskCanceledException> 在所有适用的 .NET Core 版本上都不会引发任何内部异常。</span><span class="sxs-lookup"><span data-stu-id="44913-299"><xref:System.Threading.Tasks.TaskCanceledException> without any inner exception is thrown on all applicable .NET Core versions.</span></span>
> - <span data-ttu-id="44913-300"><xref:System.Threading.Tasks.TaskCanceledException><xref:System.TimeoutException>在 .net 5.0 和更高版本上，将引发嵌套的。</span><span class="sxs-lookup"><span data-stu-id="44913-300"><xref:System.Threading.Tasks.TaskCanceledException> that nests a <xref:System.TimeoutException> is thrown on .NET 5.0 and later versions.</span></span>
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="44913-301"><paramref name="requestUri" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="44913-301">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="44913-302">某个根本问题（例如网络连接、DNS 失败、服务器证书验证或超时）导致请求失败。</span><span class="sxs-lookup"><span data-stu-id="44913-302">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException"><span data-ttu-id="44913-303">仅限 .NET Core 和 .NET 5.0 及更高版本：请求因超时而失败。</span><span class="sxs-lookup"><span data-stu-id="44913-303">.NET Core and .NET 5.0 and later only: The request failed due to timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; GetAsync (string requestUri, System.Net.Http.HttpCompletionOption completionOption);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; GetAsync(string requestUri, valuetype System.Net.Http.HttpCompletionOption completionOption) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetAsync(System.String,System.Net.Http.HttpCompletionOption)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAsync (requestUri As String, completionOption As HttpCompletionOption) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ GetAsync(System::String ^ requestUri, System::Net::Http::HttpCompletionOption completionOption);" />
      <MemberSignature Language="F#" Value="member this.GetAsync : string * System.Net.Http.HttpCompletionOption -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.GetAsync (requestUri, completionOption)" />
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; GetAsync (string? requestUri, System.Net.Http.HttpCompletionOption completionOption);" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" />
        <Parameter Name="completionOption" Type="System.Net.Http.HttpCompletionOption" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="44913-304">请求发送到的 URI。</span><span class="sxs-lookup"><span data-stu-id="44913-304">The Uri the request is sent to.</span></span></param>
        <param name="completionOption"><span data-ttu-id="44913-305">指示操作应视为已完成的时间的 HTTP 完成选项值。</span><span class="sxs-lookup"><span data-stu-id="44913-305">An HTTP completion option value that indicates when the operation should be considered completed.</span></span></param>
        <summary><span data-ttu-id="44913-306">用以异步操作的 HTTP 完成选项发送 GET 请求到指定的 URI。</span><span class="sxs-lookup"><span data-stu-id="44913-306">Send a GET request to the specified Uri with an HTTP completion option as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="44913-307">表示异步操作的任务对象。</span><span class="sxs-lookup"><span data-stu-id="44913-307">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="44913-308">此操作不会阻止。</span><span class="sxs-lookup"><span data-stu-id="44913-308">This operation will not block.</span></span> <span data-ttu-id="44913-309">返回的 <xref:System.Threading.Tasks.Task%601> 对象将根据 `completionOption` (包含内容) 读取的部分或全部响应后的参数完成。</span><span class="sxs-lookup"><span data-stu-id="44913-309">The returned <xref:System.Threading.Tasks.Task%601> object will complete based on the `completionOption` parameter after the part or all of the response (including content) is read.</span></span>  

> [!NOTE]
> <span data-ttu-id="44913-310">在超时情况下，不同的 .NET 实现会引发不同的异常。</span><span class="sxs-lookup"><span data-stu-id="44913-310">In case of timeout, different exceptions are thrown on different .NET implementations.</span></span>
> - <span data-ttu-id="44913-311"><xref:System.Net.Http.HttpRequestException> 所有适用的 .NET Framework 版本都将引发。</span><span class="sxs-lookup"><span data-stu-id="44913-311"><xref:System.Net.Http.HttpRequestException> is thrown on all applicable .NET Framework versions.</span></span>
> - <span data-ttu-id="44913-312"><xref:System.Threading.Tasks.TaskCanceledException> 在所有适用的 .NET Core 版本上都不会引发任何内部异常。</span><span class="sxs-lookup"><span data-stu-id="44913-312"><xref:System.Threading.Tasks.TaskCanceledException> without any inner exception is thrown on all applicable .NET Core versions.</span></span>
> - <span data-ttu-id="44913-313"><xref:System.Threading.Tasks.TaskCanceledException><xref:System.TimeoutException>在 .net 5.0 和更高版本上，将引发嵌套的。</span><span class="sxs-lookup"><span data-stu-id="44913-313"><xref:System.Threading.Tasks.TaskCanceledException> that nests a <xref:System.TimeoutException> is thrown on .NET 5.0 and later versions.</span></span>
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="44913-314"><paramref name="requestUri" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="44913-314">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="44913-315">某个根本问题（例如网络连接、DNS 失败、服务器证书验证或超时）导致请求失败。</span><span class="sxs-lookup"><span data-stu-id="44913-315">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException"><span data-ttu-id="44913-316">仅限 .NET Core 和 .NET 5.0 及更高版本：请求因超时而失败。</span><span class="sxs-lookup"><span data-stu-id="44913-316">.NET Core and .NET 5.0 and later only: The request failed due to timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; GetAsync (string requestUri, System.Threading.CancellationToken cancellationToken);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; GetAsync(string requestUri, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAsync (requestUri As String, cancellationToken As CancellationToken) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ GetAsync(System::String ^ requestUri, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.GetAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.GetAsync (requestUri, cancellationToken)" />
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; GetAsync (string? requestUri, System.Threading.CancellationToken cancellationToken);" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="44913-317">请求发送到的 URI。</span><span class="sxs-lookup"><span data-stu-id="44913-317">The Uri the request is sent to.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="44913-318">可由其他对象或线程用以接收取消通知的取消标记。</span><span class="sxs-lookup"><span data-stu-id="44913-318">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</span></span></param>
        <summary><span data-ttu-id="44913-319">用以异步操作的取消标记发送 GET 请求到指定的 URI。</span><span class="sxs-lookup"><span data-stu-id="44913-319">Send a GET request to the specified Uri with a cancellation token as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="44913-320">表示异步操作的任务对象。</span><span class="sxs-lookup"><span data-stu-id="44913-320">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="44913-321">此操作不会阻止。</span><span class="sxs-lookup"><span data-stu-id="44913-321">This operation will not block.</span></span> <span data-ttu-id="44913-322">返回 <xref:System.Threading.Tasks.Task%601> 的对象将在整个响应 (包括内容) 读取后完成。</span><span class="sxs-lookup"><span data-stu-id="44913-322">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  

> [!NOTE]
> <span data-ttu-id="44913-323">在超时情况下，不同的 .NET 实现会引发不同的异常。</span><span class="sxs-lookup"><span data-stu-id="44913-323">In case of timeout, different exceptions are thrown on different .NET implementations.</span></span>
> - <span data-ttu-id="44913-324"><xref:System.Net.Http.HttpRequestException> 所有适用的 .NET Framework 版本都将引发。</span><span class="sxs-lookup"><span data-stu-id="44913-324"><xref:System.Net.Http.HttpRequestException> is thrown on all applicable .NET Framework versions.</span></span>
> - <span data-ttu-id="44913-325"><xref:System.Threading.Tasks.TaskCanceledException> 在所有适用的 .NET Core 版本上都不会引发任何内部异常。</span><span class="sxs-lookup"><span data-stu-id="44913-325"><xref:System.Threading.Tasks.TaskCanceledException> without any inner exception is thrown on all applicable .NET Core versions.</span></span>
> - <span data-ttu-id="44913-326"><xref:System.Threading.Tasks.TaskCanceledException><xref:System.TimeoutException>在 .net 5.0 和更高版本上，将引发嵌套的。</span><span class="sxs-lookup"><span data-stu-id="44913-326"><xref:System.Threading.Tasks.TaskCanceledException> that nests a <xref:System.TimeoutException> is thrown on .NET 5.0 and later versions.</span></span>
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="44913-327"><paramref name="requestUri" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="44913-327">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="44913-328">某个根本问题（例如网络连接、DNS 失败、服务器证书验证或超时）导致请求失败。</span><span class="sxs-lookup"><span data-stu-id="44913-328">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException"><span data-ttu-id="44913-329">仅限 .NET Core 和 .NET 5.0 及更高版本：请求因超时而失败。</span><span class="sxs-lookup"><span data-stu-id="44913-329">.NET Core and .NET 5.0 and later only: The request failed due to timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; GetAsync (Uri requestUri, System.Net.Http.HttpCompletionOption completionOption);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; GetAsync(class System.Uri requestUri, valuetype System.Net.Http.HttpCompletionOption completionOption) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetAsync(System.Uri,System.Net.Http.HttpCompletionOption)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAsync (requestUri As Uri, completionOption As HttpCompletionOption) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ GetAsync(Uri ^ requestUri, System::Net::Http::HttpCompletionOption completionOption);" />
      <MemberSignature Language="F#" Value="member this.GetAsync : Uri * System.Net.Http.HttpCompletionOption -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.GetAsync (requestUri, completionOption)" />
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; GetAsync (Uri? requestUri, System.Net.Http.HttpCompletionOption completionOption);" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" />
        <Parameter Name="completionOption" Type="System.Net.Http.HttpCompletionOption" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="44913-330">请求发送到的 URI。</span><span class="sxs-lookup"><span data-stu-id="44913-330">The Uri the request is sent to.</span></span></param>
        <param name="completionOption"><span data-ttu-id="44913-331">指示操作应视为已完成的时间的 HTTP 完成选项值。</span><span class="sxs-lookup"><span data-stu-id="44913-331">An HTTP completion option value that indicates when the operation should be considered completed.</span></span></param>
        <summary><span data-ttu-id="44913-332">用以异步操作的 HTTP 完成选项发送 GET 请求到指定的 URI。</span><span class="sxs-lookup"><span data-stu-id="44913-332">Send a GET request to the specified Uri with an HTTP completion option as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="44913-333">表示异步操作的任务对象。</span><span class="sxs-lookup"><span data-stu-id="44913-333">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="44913-334">此操作不会阻止。</span><span class="sxs-lookup"><span data-stu-id="44913-334">This operation will not block.</span></span> <span data-ttu-id="44913-335">返回的 <xref:System.Threading.Tasks.Task%601> 对象将根据 `completionOption` (包含内容) 读取的部分或全部响应后的参数完成。</span><span class="sxs-lookup"><span data-stu-id="44913-335">The returned <xref:System.Threading.Tasks.Task%601> object will complete based on the `completionOption` parameter after the part or all of the response (including content) is read.</span></span>  

> [!NOTE]
> <span data-ttu-id="44913-336">在超时情况下，不同的 .NET 实现会引发不同的异常。</span><span class="sxs-lookup"><span data-stu-id="44913-336">In case of timeout, different exceptions are thrown on different .NET implementations.</span></span>
> - <span data-ttu-id="44913-337"><xref:System.Net.Http.HttpRequestException> 所有适用的 .NET Framework 版本都将引发。</span><span class="sxs-lookup"><span data-stu-id="44913-337"><xref:System.Net.Http.HttpRequestException> is thrown on all applicable .NET Framework versions.</span></span>
> - <span data-ttu-id="44913-338"><xref:System.Threading.Tasks.TaskCanceledException> 在所有适用的 .NET Core 版本上都不会引发任何内部异常。</span><span class="sxs-lookup"><span data-stu-id="44913-338"><xref:System.Threading.Tasks.TaskCanceledException> without any inner exception is thrown on all applicable .NET Core versions.</span></span>
> - <span data-ttu-id="44913-339"><xref:System.Threading.Tasks.TaskCanceledException><xref:System.TimeoutException>在 .net 5.0 和更高版本上，将引发嵌套的。</span><span class="sxs-lookup"><span data-stu-id="44913-339"><xref:System.Threading.Tasks.TaskCanceledException> that nests a <xref:System.TimeoutException> is thrown on .NET 5.0 and later versions.</span></span>
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="44913-340"><paramref name="requestUri" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="44913-340">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="44913-341">某个根本问题（例如网络连接、DNS 失败、服务器证书验证或超时）导致请求失败。</span><span class="sxs-lookup"><span data-stu-id="44913-341">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException"><span data-ttu-id="44913-342">仅限 .NET Core 和 .NET 5.0 及更高版本：请求因超时而失败。</span><span class="sxs-lookup"><span data-stu-id="44913-342">.NET Core and .NET 5.0 and later only: The request failed due to timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; GetAsync (Uri requestUri, System.Threading.CancellationToken cancellationToken);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; GetAsync(class System.Uri requestUri, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetAsync(System.Uri,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAsync (requestUri As Uri, cancellationToken As CancellationToken) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ GetAsync(Uri ^ requestUri, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.GetAsync : Uri * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.GetAsync (requestUri, cancellationToken)" />
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; GetAsync (Uri? requestUri, System.Threading.CancellationToken cancellationToken);" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="44913-343">请求发送到的 URI。</span><span class="sxs-lookup"><span data-stu-id="44913-343">The Uri the request is sent to.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="44913-344">可由其他对象或线程用以接收取消通知的取消标记。</span><span class="sxs-lookup"><span data-stu-id="44913-344">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</span></span></param>
        <summary><span data-ttu-id="44913-345">用以异步操作的取消标记发送 GET 请求到指定的 URI。</span><span class="sxs-lookup"><span data-stu-id="44913-345">Send a GET request to the specified Uri with a cancellation token as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="44913-346">表示异步操作的任务对象。</span><span class="sxs-lookup"><span data-stu-id="44913-346">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="44913-347">此操作不会阻止。</span><span class="sxs-lookup"><span data-stu-id="44913-347">This operation will not block.</span></span> <span data-ttu-id="44913-348">返回 <xref:System.Threading.Tasks.Task%601> 的对象将在整个响应 (包括内容) 读取后完成。</span><span class="sxs-lookup"><span data-stu-id="44913-348">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  

> [!NOTE]
> <span data-ttu-id="44913-349">在超时情况下，不同的 .NET 实现会引发不同的异常。</span><span class="sxs-lookup"><span data-stu-id="44913-349">In case of timeout, different exceptions are thrown on different .NET implementations.</span></span>
> - <span data-ttu-id="44913-350"><xref:System.Net.Http.HttpRequestException> 所有适用的 .NET Framework 版本都将引发。</span><span class="sxs-lookup"><span data-stu-id="44913-350"><xref:System.Net.Http.HttpRequestException> is thrown on all applicable .NET Framework versions.</span></span>
> - <span data-ttu-id="44913-351"><xref:System.Threading.Tasks.TaskCanceledException> 在所有适用的 .NET Core 版本上都不会引发任何内部异常。</span><span class="sxs-lookup"><span data-stu-id="44913-351"><xref:System.Threading.Tasks.TaskCanceledException> without any inner exception is thrown on all applicable .NET Core versions.</span></span>
> - <span data-ttu-id="44913-352"><xref:System.Threading.Tasks.TaskCanceledException><xref:System.TimeoutException>在 .net 5.0 和更高版本上，将引发嵌套的。</span><span class="sxs-lookup"><span data-stu-id="44913-352"><xref:System.Threading.Tasks.TaskCanceledException> that nests a <xref:System.TimeoutException> is thrown on .NET 5.0 and later versions.</span></span>
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="44913-353"><paramref name="requestUri" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="44913-353">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="44913-354">某个根本问题（例如网络连接、DNS 失败、服务器证书验证或超时）导致请求失败。</span><span class="sxs-lookup"><span data-stu-id="44913-354">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException"><span data-ttu-id="44913-355">仅限 .NET Core 和 .NET 5.0 及更高版本：请求因超时而失败。</span><span class="sxs-lookup"><span data-stu-id="44913-355">.NET Core and .NET 5.0 and later only: The request failed due to timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; GetAsync (string requestUri, System.Net.Http.HttpCompletionOption completionOption, System.Threading.CancellationToken cancellationToken);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; GetAsync(string requestUri, valuetype System.Net.Http.HttpCompletionOption completionOption, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetAsync(System.String,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAsync (requestUri As String, completionOption As HttpCompletionOption, cancellationToken As CancellationToken) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ GetAsync(System::String ^ requestUri, System::Net::Http::HttpCompletionOption completionOption, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.GetAsync : string * System.Net.Http.HttpCompletionOption * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.GetAsync (requestUri, completionOption, cancellationToken)" />
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; GetAsync (string? requestUri, System.Net.Http.HttpCompletionOption completionOption, System.Threading.CancellationToken cancellationToken);" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" />
        <Parameter Name="completionOption" Type="System.Net.Http.HttpCompletionOption" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="44913-356">请求发送到的 URI。</span><span class="sxs-lookup"><span data-stu-id="44913-356">The Uri the request is sent to.</span></span></param>
        <param name="completionOption"><span data-ttu-id="44913-357">指示操作应视为已完成的时间的 HTTP 完成选项值。</span><span class="sxs-lookup"><span data-stu-id="44913-357">An HTTP  completion option value that indicates when the operation should be considered completed.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="44913-358">可由其他对象或线程用以接收取消通知的取消标记。</span><span class="sxs-lookup"><span data-stu-id="44913-358">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</span></span></param>
        <summary><span data-ttu-id="44913-359">用以异步操作的 HTTP 完成选项和取消标记发送 GET 请求到指定的 URI。</span><span class="sxs-lookup"><span data-stu-id="44913-359">Send a GET request to the specified Uri with an HTTP completion option and a cancellation token as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="44913-360">表示异步操作的任务对象。</span><span class="sxs-lookup"><span data-stu-id="44913-360">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="44913-361">此操作不会阻止。</span><span class="sxs-lookup"><span data-stu-id="44913-361">This operation will not block.</span></span> <span data-ttu-id="44913-362">返回的 <xref:System.Threading.Tasks.Task%601> 对象将根据 `completionOption` (包含内容) 读取的部分或全部响应后的参数完成。</span><span class="sxs-lookup"><span data-stu-id="44913-362">The returned <xref:System.Threading.Tasks.Task%601> object will complete based on the `completionOption` parameter after the part or all of the response (including content) is read.</span></span>  

> [!NOTE]
> <span data-ttu-id="44913-363">在超时情况下，不同的 .NET 实现会引发不同的异常。</span><span class="sxs-lookup"><span data-stu-id="44913-363">In case of timeout, different exceptions are thrown on different .NET implementations.</span></span>
> - <span data-ttu-id="44913-364"><xref:System.Net.Http.HttpRequestException> 所有适用的 .NET Framework 版本都将引发。</span><span class="sxs-lookup"><span data-stu-id="44913-364"><xref:System.Net.Http.HttpRequestException> is thrown on all applicable .NET Framework versions.</span></span>
> - <span data-ttu-id="44913-365"><xref:System.Threading.Tasks.TaskCanceledException> 在所有适用的 .NET Core 版本上都不会引发任何内部异常。</span><span class="sxs-lookup"><span data-stu-id="44913-365"><xref:System.Threading.Tasks.TaskCanceledException> without any inner exception is thrown on all applicable .NET Core versions.</span></span>
> - <span data-ttu-id="44913-366"><xref:System.Threading.Tasks.TaskCanceledException><xref:System.TimeoutException>在 .net 5.0 和更高版本上，将引发嵌套的。</span><span class="sxs-lookup"><span data-stu-id="44913-366"><xref:System.Threading.Tasks.TaskCanceledException> that nests a <xref:System.TimeoutException> is thrown on .NET 5.0 and later versions.</span></span>
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="44913-367"><paramref name="requestUri" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="44913-367">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="44913-368">某个根本问题（例如网络连接、DNS 失败、服务器证书验证或超时）导致请求失败。</span><span class="sxs-lookup"><span data-stu-id="44913-368">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException"><span data-ttu-id="44913-369">仅限 .NET Core 和 .NET 5.0 及更高版本：请求因超时而失败。</span><span class="sxs-lookup"><span data-stu-id="44913-369">.NET Core and .NET 5.0 and later only: The request failed due to timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; GetAsync (Uri requestUri, System.Net.Http.HttpCompletionOption completionOption, System.Threading.CancellationToken cancellationToken);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; GetAsync(class System.Uri requestUri, valuetype System.Net.Http.HttpCompletionOption completionOption, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetAsync(System.Uri,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAsync (requestUri As Uri, completionOption As HttpCompletionOption, cancellationToken As CancellationToken) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ GetAsync(Uri ^ requestUri, System::Net::Http::HttpCompletionOption completionOption, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.GetAsync : Uri * System.Net.Http.HttpCompletionOption * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.GetAsync (requestUri, completionOption, cancellationToken)" />
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; GetAsync (Uri? requestUri, System.Net.Http.HttpCompletionOption completionOption, System.Threading.CancellationToken cancellationToken);" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" />
        <Parameter Name="completionOption" Type="System.Net.Http.HttpCompletionOption" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="44913-370">请求发送到的 URI。</span><span class="sxs-lookup"><span data-stu-id="44913-370">The Uri the request is sent to.</span></span></param>
        <param name="completionOption"><span data-ttu-id="44913-371">指示操作应视为已完成的时间的 HTTP 完成选项值。</span><span class="sxs-lookup"><span data-stu-id="44913-371">An HTTP  completion option value that indicates when the operation should be considered completed.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="44913-372">可由其他对象或线程用以接收取消通知的取消标记。</span><span class="sxs-lookup"><span data-stu-id="44913-372">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</span></span></param>
        <summary><span data-ttu-id="44913-373">用以异步操作的 HTTP 完成选项和取消标记发送 GET 请求到指定的 URI。</span><span class="sxs-lookup"><span data-stu-id="44913-373">Send a GET request to the specified Uri with an HTTP completion option and a cancellation token as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="44913-374">表示异步操作的任务对象。</span><span class="sxs-lookup"><span data-stu-id="44913-374">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="44913-375">此操作不会阻止。</span><span class="sxs-lookup"><span data-stu-id="44913-375">This operation will not block.</span></span> <span data-ttu-id="44913-376">返回的 <xref:System.Threading.Tasks.Task%601> 对象将根据 `completionOption` (包含内容) 读取的部分或全部响应后的参数完成。</span><span class="sxs-lookup"><span data-stu-id="44913-376">The returned <xref:System.Threading.Tasks.Task%601> object will complete based on the `completionOption` parameter after the part or all of the response (including content) is read.</span></span>  

> [!NOTE]
> <span data-ttu-id="44913-377">在超时情况下，不同的 .NET 实现会引发不同的异常。</span><span class="sxs-lookup"><span data-stu-id="44913-377">In case of timeout, different exceptions are thrown on different .NET implementations.</span></span>
> - <span data-ttu-id="44913-378"><xref:System.Net.Http.HttpRequestException> 所有适用的 .NET Framework 版本都将引发。</span><span class="sxs-lookup"><span data-stu-id="44913-378"><xref:System.Net.Http.HttpRequestException> is thrown on all applicable .NET Framework versions.</span></span>
> - <span data-ttu-id="44913-379"><xref:System.Threading.Tasks.TaskCanceledException> 在所有适用的 .NET Core 版本上都不会引发任何内部异常。</span><span class="sxs-lookup"><span data-stu-id="44913-379"><xref:System.Threading.Tasks.TaskCanceledException> without any inner exception is thrown on all applicable .NET Core versions.</span></span>
> - <span data-ttu-id="44913-380"><xref:System.Threading.Tasks.TaskCanceledException><xref:System.TimeoutException>在 .net 5.0 和更高版本上，将引发嵌套的。</span><span class="sxs-lookup"><span data-stu-id="44913-380"><xref:System.Threading.Tasks.TaskCanceledException> that nests a <xref:System.TimeoutException> is thrown on .NET 5.0 and later versions.</span></span>
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="44913-381"><paramref name="requestUri" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="44913-381">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="44913-382">某个根本问题（例如网络连接、DNS 失败、服务器证书验证或超时）导致请求失败。</span><span class="sxs-lookup"><span data-stu-id="44913-382">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException"><span data-ttu-id="44913-383">仅限 .NET Core 和 .NET 5.0 及更高版本：请求因超时而失败。</span><span class="sxs-lookup"><span data-stu-id="44913-383">.NET Core and .NET 5.0 and later only: The request failed due to timeout.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetByteArrayAsync">
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="44913-384">将 GET 请求发送到指定 URI 并在异步操作中以字节数组的形式返回响应正文。</span><span class="sxs-lookup"><span data-stu-id="44913-384">Send a GET request to the specified Uri and return the response body as a byte array in an asynchronous operation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="44913-385">操作不会阻止。</span><span class="sxs-lookup"><span data-stu-id="44913-385">The operation will not block.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetByteArrayAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;byte[]&gt; GetByteArrayAsync (string requestUri);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;unsigned int8[]&gt; GetByteArrayAsync(string requestUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetByteArrayAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetByteArrayAsync (requestUri As String) As Task(Of Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;cli::array &lt;System::Byte&gt; ^&gt; ^ GetByteArrayAsync(System::String ^ requestUri);" />
      <MemberSignature Language="F#" Value="member this.GetByteArrayAsync : string -&gt; System.Threading.Tasks.Task&lt;byte[]&gt;" Usage="httpClient.GetByteArrayAsync requestUri" />
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;byte[]&gt; GetByteArrayAsync (string? requestUri);" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Byte[]&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="44913-386">请求发送到的 URI。</span><span class="sxs-lookup"><span data-stu-id="44913-386">The Uri the request is sent to.</span></span></param>
        <summary><span data-ttu-id="44913-387">将 GET 请求发送到指定 URI 并在异步操作中以字节数组的形式返回响应正文。</span><span class="sxs-lookup"><span data-stu-id="44913-387">Sends a GET request to the specified Uri and return the response body as a byte array in an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="44913-388">表示异步操作的任务对象。</span><span class="sxs-lookup"><span data-stu-id="44913-388">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="44913-389">此操作不会阻止。</span><span class="sxs-lookup"><span data-stu-id="44913-389">This operation will not block.</span></span> <span data-ttu-id="44913-390">在 <xref:System.Threading.Tasks.Task%601> 读取整个响应正文后，返回的对象将完成。</span><span class="sxs-lookup"><span data-stu-id="44913-390">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response body is read.</span></span>  

> [!NOTE]
> <span data-ttu-id="44913-391">在超时情况下，不同的 .NET 实现会引发不同的异常。</span><span class="sxs-lookup"><span data-stu-id="44913-391">In case of timeout, different exceptions are thrown on different .NET implementations.</span></span>
> - <span data-ttu-id="44913-392"><xref:System.Net.Http.HttpRequestException> 所有适用的 .NET Framework 版本都将引发。</span><span class="sxs-lookup"><span data-stu-id="44913-392"><xref:System.Net.Http.HttpRequestException> is thrown on all applicable .NET Framework versions.</span></span>
> - <span data-ttu-id="44913-393"><xref:System.Threading.Tasks.TaskCanceledException> 在所有适用的 .NET Core 版本上都不会引发任何内部异常。</span><span class="sxs-lookup"><span data-stu-id="44913-393"><xref:System.Threading.Tasks.TaskCanceledException> without any inner exception is thrown on all applicable .NET Core versions.</span></span>
> - <span data-ttu-id="44913-394"><xref:System.Threading.Tasks.TaskCanceledException><xref:System.TimeoutException>在 .net 5.0 和更高版本上，将引发嵌套的。</span><span class="sxs-lookup"><span data-stu-id="44913-394"><xref:System.Threading.Tasks.TaskCanceledException> that nests a <xref:System.TimeoutException> is thrown on .NET 5.0 and later versions.</span></span>
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="44913-395"><paramref name="requestUri" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="44913-395">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="44913-396">某个根本问题（例如网络连接、DNS 失败、服务器证书验证或超时）导致请求失败。</span><span class="sxs-lookup"><span data-stu-id="44913-396">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException"><span data-ttu-id="44913-397">仅限 .NET Core 和 .NET 5.0 及更高版本：请求因超时而失败。</span><span class="sxs-lookup"><span data-stu-id="44913-397">.NET Core and .NET 5.0 and later only: The request failed due to timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetByteArrayAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;byte[]&gt; GetByteArrayAsync (Uri requestUri);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;unsigned int8[]&gt; GetByteArrayAsync(class System.Uri requestUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetByteArrayAsync(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetByteArrayAsync (requestUri As Uri) As Task(Of Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;cli::array &lt;System::Byte&gt; ^&gt; ^ GetByteArrayAsync(Uri ^ requestUri);" />
      <MemberSignature Language="F#" Value="member this.GetByteArrayAsync : Uri -&gt; System.Threading.Tasks.Task&lt;byte[]&gt;" Usage="httpClient.GetByteArrayAsync requestUri" />
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;byte[]&gt; GetByteArrayAsync (Uri? requestUri);" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Byte[]&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="44913-398">请求发送到的 URI。</span><span class="sxs-lookup"><span data-stu-id="44913-398">The Uri the request is sent to.</span></span></param>
        <summary><span data-ttu-id="44913-399">将 GET 请求发送到指定 URI 并在异步操作中以字节数组的形式返回响应正文。</span><span class="sxs-lookup"><span data-stu-id="44913-399">Send a GET request to the specified Uri and return the response body as a byte array in an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="44913-400">表示异步操作的任务对象。</span><span class="sxs-lookup"><span data-stu-id="44913-400">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="44913-401">此操作不会阻止。</span><span class="sxs-lookup"><span data-stu-id="44913-401">This operation will not block.</span></span> <span data-ttu-id="44913-402">在 <xref:System.Threading.Tasks.Task%601> 读取整个响应正文后，返回的对象将完成。</span><span class="sxs-lookup"><span data-stu-id="44913-402">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response body is read.</span></span>  

> [!NOTE]
> <span data-ttu-id="44913-403">在超时情况下，不同的 .NET 实现会引发不同的异常。</span><span class="sxs-lookup"><span data-stu-id="44913-403">In case of timeout, different exceptions are thrown on different .NET implementations.</span></span>
> - <span data-ttu-id="44913-404"><xref:System.Net.Http.HttpRequestException> 所有适用的 .NET Framework 版本都将引发。</span><span class="sxs-lookup"><span data-stu-id="44913-404"><xref:System.Net.Http.HttpRequestException> is thrown on all applicable .NET Framework versions.</span></span>
> - <span data-ttu-id="44913-405"><xref:System.Threading.Tasks.TaskCanceledException> 在所有适用的 .NET Core 版本上都不会引发任何内部异常。</span><span class="sxs-lookup"><span data-stu-id="44913-405"><xref:System.Threading.Tasks.TaskCanceledException> without any inner exception is thrown on all applicable .NET Core versions.</span></span>
> - <span data-ttu-id="44913-406"><xref:System.Threading.Tasks.TaskCanceledException><xref:System.TimeoutException>在 .net 5.0 和更高版本上，将引发嵌套的。</span><span class="sxs-lookup"><span data-stu-id="44913-406"><xref:System.Threading.Tasks.TaskCanceledException> that nests a <xref:System.TimeoutException> is thrown on .NET 5.0 and later versions.</span></span>
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="44913-407"><paramref name="requestUri" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="44913-407">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="44913-408">某个根本问题（例如网络连接、DNS 失败、服务器证书验证或超时）导致请求失败。</span><span class="sxs-lookup"><span data-stu-id="44913-408">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException"><span data-ttu-id="44913-409">仅限 .NET Core 和 .NET 5.0 及更高版本：请求因超时而失败。</span><span class="sxs-lookup"><span data-stu-id="44913-409">.NET Core and .NET 5.0 and later only: The request failed due to timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetByteArrayAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;byte[]&gt; GetByteArrayAsync (string? requestUri, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;unsigned int8[]&gt; GetByteArrayAsync(string requestUri, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetByteArrayAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetByteArrayAsync (requestUri As String, cancellationToken As CancellationToken) As Task(Of Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;cli::array &lt;System::Byte&gt; ^&gt; ^ GetByteArrayAsync(System::String ^ requestUri, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.GetByteArrayAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;byte[]&gt;" Usage="httpClient.GetByteArrayAsync (requestUri, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Byte[]&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" Index="0" FrameworkAlternate="net-5.0" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="net-5.0" />
      </Parameters>
      <Docs>
        <param name="requestUri">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetByteArrayAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;byte[]&gt; GetByteArrayAsync (Uri? requestUri, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;unsigned int8[]&gt; GetByteArrayAsync(class System.Uri requestUri, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetByteArrayAsync(System.Uri,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetByteArrayAsync (requestUri As Uri, cancellationToken As CancellationToken) As Task(Of Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;cli::array &lt;System::Byte&gt; ^&gt; ^ GetByteArrayAsync(Uri ^ requestUri, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.GetByteArrayAsync : Uri * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;byte[]&gt;" Usage="httpClient.GetByteArrayAsync (requestUri, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Byte[]&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" Index="0" FrameworkAlternate="net-5.0" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="net-5.0" />
      </Parameters>
      <Docs>
        <param name="requestUri">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetStreamAsync">
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="44913-410">将 GET 请求发送到指定 URI 并在异步操作中以流的形式返回响应正文。</span><span class="sxs-lookup"><span data-stu-id="44913-410">Send a GET request to the specified Uri and return the response body as a stream in an asynchronous operation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="44913-411">操作不会阻止。</span><span class="sxs-lookup"><span data-stu-id="44913-411">The operation will not block.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetStreamAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetStreamAsync (string requestUri);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetStreamAsync(string requestUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetStreamAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetStreamAsync (requestUri As String) As Task(Of Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::IO::Stream ^&gt; ^ GetStreamAsync(System::String ^ requestUri);" />
      <MemberSignature Language="F#" Value="member this.GetStreamAsync : string -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="httpClient.GetStreamAsync requestUri" />
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetStreamAsync (string? requestUri);" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="44913-412">请求发送到的 URI。</span><span class="sxs-lookup"><span data-stu-id="44913-412">The Uri the request is sent to.</span></span></param>
        <summary><span data-ttu-id="44913-413">将 GET 请求发送到指定 URI 并在异步操作中以流的形式返回响应正文。</span><span class="sxs-lookup"><span data-stu-id="44913-413">Send a GET request to the specified Uri and return the response body as a stream in an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="44913-414">表示异步操作的任务对象。</span><span class="sxs-lookup"><span data-stu-id="44913-414">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="44913-415">此操作不会阻止。</span><span class="sxs-lookup"><span data-stu-id="44913-415">This operation will not block.</span></span> <span data-ttu-id="44913-416">在 <xref:System.Threading.Tasks.Task%601> 读取响应标头后，返回的对象将完成。</span><span class="sxs-lookup"><span data-stu-id="44913-416">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the response headers are read.</span></span> <span data-ttu-id="44913-417">此方法不读取或缓冲响应正文。</span><span class="sxs-lookup"><span data-stu-id="44913-417">This method does not read nor buffer the response body.</span></span>  

> [!NOTE]
> <span data-ttu-id="44913-418">在超时情况下，不同的 .NET 实现会引发不同的异常。</span><span class="sxs-lookup"><span data-stu-id="44913-418">In case of timeout, different exceptions are thrown on different .NET implementations.</span></span>
> - <span data-ttu-id="44913-419"><xref:System.Net.Http.HttpRequestException> 所有适用的 .NET Framework 版本都将引发。</span><span class="sxs-lookup"><span data-stu-id="44913-419"><xref:System.Net.Http.HttpRequestException> is thrown on all applicable .NET Framework versions.</span></span>
> - <span data-ttu-id="44913-420"><xref:System.Threading.Tasks.TaskCanceledException> 在所有适用的 .NET Core 版本上都不会引发任何内部异常。</span><span class="sxs-lookup"><span data-stu-id="44913-420"><xref:System.Threading.Tasks.TaskCanceledException> without any inner exception is thrown on all applicable .NET Core versions.</span></span>
> - <span data-ttu-id="44913-421"><xref:System.Threading.Tasks.TaskCanceledException><xref:System.TimeoutException>在 .net 5.0 和更高版本上，将引发嵌套的。</span><span class="sxs-lookup"><span data-stu-id="44913-421"><xref:System.Threading.Tasks.TaskCanceledException> that nests a <xref:System.TimeoutException> is thrown on .NET 5.0 and later versions.</span></span>
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="44913-422"><paramref name="requestUri" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="44913-422">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="44913-423">某个根本问题（例如网络连接、DNS 失败、服务器证书验证或超时）导致请求失败。</span><span class="sxs-lookup"><span data-stu-id="44913-423">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException"><span data-ttu-id="44913-424">仅限 .NET Core 和 .NET 5.0 及更高版本：请求因超时而失败。</span><span class="sxs-lookup"><span data-stu-id="44913-424">.NET Core and .NET 5.0 and later only: The request failed due to timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetStreamAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetStreamAsync (Uri requestUri);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetStreamAsync(class System.Uri requestUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetStreamAsync(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetStreamAsync (requestUri As Uri) As Task(Of Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::IO::Stream ^&gt; ^ GetStreamAsync(Uri ^ requestUri);" />
      <MemberSignature Language="F#" Value="member this.GetStreamAsync : Uri -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="httpClient.GetStreamAsync requestUri" />
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetStreamAsync (Uri? requestUri);" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="44913-425">请求发送到的 URI。</span><span class="sxs-lookup"><span data-stu-id="44913-425">The Uri the request is sent to.</span></span></param>
        <summary><span data-ttu-id="44913-426">将 GET 请求发送到指定 URI 并在异步操作中以流的形式返回响应正文。</span><span class="sxs-lookup"><span data-stu-id="44913-426">Send a GET request to the specified Uri and return the response body as a stream in an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="44913-427">表示异步操作的任务对象。</span><span class="sxs-lookup"><span data-stu-id="44913-427">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="44913-428">此操作不会阻止。</span><span class="sxs-lookup"><span data-stu-id="44913-428">This operation will not block.</span></span> <span data-ttu-id="44913-429">在 <xref:System.Threading.Tasks.Task%601> 读取响应标头后，返回的对象将完成。</span><span class="sxs-lookup"><span data-stu-id="44913-429">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the response headers are read.</span></span> <span data-ttu-id="44913-430">此方法不读取或缓冲响应正文。</span><span class="sxs-lookup"><span data-stu-id="44913-430">This method does not read nor buffer the response body.</span></span>  

> [!NOTE]
> <span data-ttu-id="44913-431">在超时情况下，不同的 .NET 实现会引发不同的异常。</span><span class="sxs-lookup"><span data-stu-id="44913-431">In case of timeout, different exceptions are thrown on different .NET implementations.</span></span>
> - <span data-ttu-id="44913-432"><xref:System.Net.Http.HttpRequestException> 所有适用的 .NET Framework 版本都将引发。</span><span class="sxs-lookup"><span data-stu-id="44913-432"><xref:System.Net.Http.HttpRequestException> is thrown on all applicable .NET Framework versions.</span></span>
> - <span data-ttu-id="44913-433"><xref:System.Threading.Tasks.TaskCanceledException> 在所有适用的 .NET Core 版本上都不会引发任何内部异常。</span><span class="sxs-lookup"><span data-stu-id="44913-433"><xref:System.Threading.Tasks.TaskCanceledException> without any inner exception is thrown on all applicable .NET Core versions.</span></span>
> - <span data-ttu-id="44913-434"><xref:System.Threading.Tasks.TaskCanceledException><xref:System.TimeoutException>在 .net 5.0 和更高版本上，将引发嵌套的。</span><span class="sxs-lookup"><span data-stu-id="44913-434"><xref:System.Threading.Tasks.TaskCanceledException> that nests a <xref:System.TimeoutException> is thrown on .NET 5.0 and later versions.</span></span>
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="44913-435"><paramref name="requestUri" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="44913-435">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="44913-436">某个根本问题（例如网络连接、DNS 失败、服务器证书验证或超时）导致请求失败。</span><span class="sxs-lookup"><span data-stu-id="44913-436">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException"><span data-ttu-id="44913-437">仅限 .NET Core 和 .NET 5.0 及更高版本：请求因超时而失败。</span><span class="sxs-lookup"><span data-stu-id="44913-437">.NET Core and .NET 5.0 and later only: The request failed due to timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetStreamAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetStreamAsync (string? requestUri, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetStreamAsync(string requestUri, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetStreamAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetStreamAsync (requestUri As String, cancellationToken As CancellationToken) As Task(Of Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::IO::Stream ^&gt; ^ GetStreamAsync(System::String ^ requestUri, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.GetStreamAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="httpClient.GetStreamAsync (requestUri, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" Index="0" FrameworkAlternate="net-5.0" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="net-5.0" />
      </Parameters>
      <Docs>
        <param name="requestUri">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetStreamAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetStreamAsync (Uri? requestUri, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetStreamAsync(class System.Uri requestUri, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetStreamAsync(System.Uri,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetStreamAsync (requestUri As Uri, cancellationToken As CancellationToken) As Task(Of Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::IO::Stream ^&gt; ^ GetStreamAsync(Uri ^ requestUri, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.GetStreamAsync : Uri * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="httpClient.GetStreamAsync (requestUri, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" Index="0" FrameworkAlternate="net-5.0" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="net-5.0" />
      </Parameters>
      <Docs>
        <param name="requestUri">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetStringAsync">
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="44913-438">将 GET 请求发送到指定 URI 并在异步操作中以字符串的形式返回响应正文。</span><span class="sxs-lookup"><span data-stu-id="44913-438">Send a GET request to the specified Uri and return the response body as a string in an asynchronous operation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="44913-439">此操作不会阻止。</span><span class="sxs-lookup"><span data-stu-id="44913-439">This operation will not block.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetStringAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;string&gt; GetStringAsync (string requestUri);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;string&gt; GetStringAsync(string requestUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetStringAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetStringAsync (requestUri As String) As Task(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::String ^&gt; ^ GetStringAsync(System::String ^ requestUri);" />
      <MemberSignature Language="F#" Value="member this.GetStringAsync : string -&gt; System.Threading.Tasks.Task&lt;string&gt;" Usage="httpClient.GetStringAsync requestUri" />
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;string&gt; GetStringAsync (string? requestUri);" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="44913-440">请求发送到的 URI。</span><span class="sxs-lookup"><span data-stu-id="44913-440">The Uri the request is sent to.</span></span></param>
        <summary><span data-ttu-id="44913-441">将 GET 请求发送到指定 URI 并在异步操作中以字符串的形式返回响应正文。</span><span class="sxs-lookup"><span data-stu-id="44913-441">Send a GET request to the specified Uri and return the response body as a string in an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="44913-442">表示异步操作的任务对象。</span><span class="sxs-lookup"><span data-stu-id="44913-442">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="44913-443">此操作不会阻止。</span><span class="sxs-lookup"><span data-stu-id="44913-443">This operation will not block.</span></span> <span data-ttu-id="44913-444">在 <xref:System.Threading.Tasks.Task%601> 读取整个响应正文后，返回的对象将完成。</span><span class="sxs-lookup"><span data-stu-id="44913-444">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response body is read.</span></span>  

> [!NOTE]
> <span data-ttu-id="44913-445">在超时情况下，不同的 .NET 实现会引发不同的异常。</span><span class="sxs-lookup"><span data-stu-id="44913-445">In case of timeout, different exceptions are thrown on different .NET implementations.</span></span>
> - <span data-ttu-id="44913-446"><xref:System.Net.Http.HttpRequestException> 所有适用的 .NET Framework 版本都将引发。</span><span class="sxs-lookup"><span data-stu-id="44913-446"><xref:System.Net.Http.HttpRequestException> is thrown on all applicable .NET Framework versions.</span></span>
> - <span data-ttu-id="44913-447"><xref:System.Threading.Tasks.TaskCanceledException> 在所有适用的 .NET Core 版本上都不会引发任何内部异常。</span><span class="sxs-lookup"><span data-stu-id="44913-447"><xref:System.Threading.Tasks.TaskCanceledException> without any inner exception is thrown on all applicable .NET Core versions.</span></span>
> - <span data-ttu-id="44913-448"><xref:System.Threading.Tasks.TaskCanceledException><xref:System.TimeoutException>在 .net 5.0 和更高版本上，将引发嵌套的。</span><span class="sxs-lookup"><span data-stu-id="44913-448"><xref:System.Threading.Tasks.TaskCanceledException> that nests a <xref:System.TimeoutException> is thrown on .NET 5.0 and later versions.</span></span>
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="44913-449"><paramref name="requestUri" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="44913-449">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="44913-450">某个根本问题（例如网络连接、DNS 失败、服务器证书验证或超时）导致请求失败。</span><span class="sxs-lookup"><span data-stu-id="44913-450">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException"><span data-ttu-id="44913-451">仅限 .NET Core 和 .NET 5.0 及更高版本：请求因超时而失败。</span><span class="sxs-lookup"><span data-stu-id="44913-451">.NET Core and .NET 5.0 and later only: The request failed due to timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetStringAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;string&gt; GetStringAsync (Uri requestUri);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;string&gt; GetStringAsync(class System.Uri requestUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetStringAsync(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetStringAsync (requestUri As Uri) As Task(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::String ^&gt; ^ GetStringAsync(Uri ^ requestUri);" />
      <MemberSignature Language="F#" Value="member this.GetStringAsync : Uri -&gt; System.Threading.Tasks.Task&lt;string&gt;" Usage="httpClient.GetStringAsync requestUri" />
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;string&gt; GetStringAsync (Uri? requestUri);" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="44913-452">请求发送到的 URI。</span><span class="sxs-lookup"><span data-stu-id="44913-452">The Uri the request is sent to.</span></span></param>
        <summary><span data-ttu-id="44913-453">将 GET 请求发送到指定 URI 并在异步操作中以字符串的形式返回响应正文。</span><span class="sxs-lookup"><span data-stu-id="44913-453">Send a GET request to the specified Uri and return the response body as a string in an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="44913-454">表示异步操作的任务对象。</span><span class="sxs-lookup"><span data-stu-id="44913-454">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="44913-455">此操作不会阻止。</span><span class="sxs-lookup"><span data-stu-id="44913-455">This operation will not block.</span></span> <span data-ttu-id="44913-456">在 <xref:System.Threading.Tasks.Task%601> 读取整个响应正文后，返回的对象将完成。</span><span class="sxs-lookup"><span data-stu-id="44913-456">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response body is read.</span></span>  

> [!NOTE]
> <span data-ttu-id="44913-457">在超时情况下，不同的 .NET 实现会引发不同的异常。</span><span class="sxs-lookup"><span data-stu-id="44913-457">In case of timeout, different exceptions are thrown on different .NET implementations.</span></span>
> - <span data-ttu-id="44913-458"><xref:System.Net.Http.HttpRequestException> 所有适用的 .NET Framework 版本都将引发。</span><span class="sxs-lookup"><span data-stu-id="44913-458"><xref:System.Net.Http.HttpRequestException> is thrown on all applicable .NET Framework versions.</span></span>
> - <span data-ttu-id="44913-459"><xref:System.Threading.Tasks.TaskCanceledException> 在所有适用的 .NET Core 版本上都不会引发任何内部异常。</span><span class="sxs-lookup"><span data-stu-id="44913-459"><xref:System.Threading.Tasks.TaskCanceledException> without any inner exception is thrown on all applicable .NET Core versions.</span></span>
> - <span data-ttu-id="44913-460"><xref:System.Threading.Tasks.TaskCanceledException><xref:System.TimeoutException>在 .net 5.0 和更高版本上，将引发嵌套的。</span><span class="sxs-lookup"><span data-stu-id="44913-460"><xref:System.Threading.Tasks.TaskCanceledException> that nests a <xref:System.TimeoutException> is thrown on .NET 5.0 and later versions.</span></span>
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="44913-461"><paramref name="requestUri" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="44913-461">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="44913-462">某个根本问题（例如网络连接、DNS 失败、服务器证书验证或超时）导致请求失败。</span><span class="sxs-lookup"><span data-stu-id="44913-462">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException"><span data-ttu-id="44913-463">仅限 .NET Core 和 .NET 5.0 及更高版本：请求因超时而失败。</span><span class="sxs-lookup"><span data-stu-id="44913-463">.NET Core and .NET 5.0 and later only: The request failed due to timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetStringAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;string&gt; GetStringAsync (string? requestUri, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;string&gt; GetStringAsync(string requestUri, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetStringAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetStringAsync (requestUri As String, cancellationToken As CancellationToken) As Task(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::String ^&gt; ^ GetStringAsync(System::String ^ requestUri, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.GetStringAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;string&gt;" Usage="httpClient.GetStringAsync (requestUri, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" Index="0" FrameworkAlternate="net-5.0" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="net-5.0" />
      </Parameters>
      <Docs>
        <param name="requestUri">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetStringAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;string&gt; GetStringAsync (Uri? requestUri, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;string&gt; GetStringAsync(class System.Uri requestUri, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetStringAsync(System.Uri,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetStringAsync (requestUri As Uri, cancellationToken As CancellationToken) As Task(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::String ^&gt; ^ GetStringAsync(Uri ^ requestUri, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.GetStringAsync : Uri * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;string&gt;" Usage="httpClient.GetStringAsync (requestUri, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" Index="0" FrameworkAlternate="net-5.0" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="net-5.0" />
      </Parameters>
      <Docs>
        <param name="requestUri">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxResponseContentBufferSize">
      <MemberSignature Language="C#" Value="public long MaxResponseContentBufferSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 MaxResponseContentBufferSize" />
      <MemberSignature Language="DocId" Value="P:System.Net.Http.HttpClient.MaxResponseContentBufferSize" />
      <MemberSignature Language="VB.NET" Value="Public Property MaxResponseContentBufferSize As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long MaxResponseContentBufferSize { long get(); void set(long value); };" />
      <MemberSignature Language="F#" Value="member this.MaxResponseContentBufferSize : int64 with get, set" Usage="System.Net.Http.HttpClient.MaxResponseContentBufferSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="44913-464">获取或设置读取响应内容时要缓冲的最大字节数。</span><span class="sxs-lookup"><span data-stu-id="44913-464">Gets or sets the maximum number of bytes to buffer when reading the response content.</span></span></summary>
        <value><span data-ttu-id="44913-465">当读取响应内容时缓冲区的最大字节数。</span><span class="sxs-lookup"><span data-stu-id="44913-465">The maximum number of bytes to buffer when reading the response content.</span></span> <span data-ttu-id="44913-466">此属性的默认值为 2 GB。</span><span class="sxs-lookup"><span data-stu-id="44913-466">The default value for this property is 2 gigabytes.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="44913-467">应用可以将属性设置 <xref:System.Net.Http.HttpClient.MaxResponseContentBufferSize%2A> 为较小的值，以限制读取响应时缓冲区的响应大小。</span><span class="sxs-lookup"><span data-stu-id="44913-467">An app can set the <xref:System.Net.Http.HttpClient.MaxResponseContentBufferSize%2A> property to a lower value to limit the size of the response to buffer when reading the response.</span></span> <span data-ttu-id="44913-468">如果响应内容的大小大于  <xref:System.Net.Http.HttpClient.MaxResponseContentBufferSize%2A> 属性，则会引发异常。</span><span class="sxs-lookup"><span data-stu-id="44913-468">If the size of the response content is greater than the  <xref:System.Net.Http.HttpClient.MaxResponseContentBufferSize%2A> property, an exception is thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="44913-469">指定大小小于或等于零。</span><span class="sxs-lookup"><span data-stu-id="44913-469">The size specified is less than or equal to zero.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="44913-470">已在当前实例上启动了一个操作。</span><span class="sxs-lookup"><span data-stu-id="44913-470">An operation has already been started on the current instance.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="44913-471">已释放当前实例。</span><span class="sxs-lookup"><span data-stu-id="44913-471">The current instance has been disposed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="PatchAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PatchAsync (string? requestUri, System.Net.Http.HttpContent content);" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PatchAsync(string requestUri, class System.Net.Http.HttpContent content) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.PatchAsync(System.String,System.Net.Http.HttpContent)" />
      <MemberSignature Language="VB.NET" Value="Public Function PatchAsync (requestUri As String, content As HttpContent) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ PatchAsync(System::String ^ requestUri, System::Net::Http::HttpContent ^ content);" />
      <MemberSignature Language="F#" Value="member this.PatchAsync : string * System.Net.Http.HttpContent -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.PatchAsync (requestUri, content)" />
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PatchAsync (string requestUri, System.Net.Http.HttpContent content);" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="content" Type="System.Net.Http.HttpContent" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="44913-472">请求发送到的 URI。</span><span class="sxs-lookup"><span data-stu-id="44913-472">The Uri the request is sent to.</span></span></param>
        <param name="content"><span data-ttu-id="44913-473">发送到服务器的 HTTP 请求内容。</span><span class="sxs-lookup"><span data-stu-id="44913-473">The HTTP request content sent to the server.</span></span></param>
        <summary><span data-ttu-id="44913-474">以异步操作方式将 PATCH 请求发送到指定为字符串的 URI。</span><span class="sxs-lookup"><span data-stu-id="44913-474">Sends a PATCH request to a Uri designated as a string as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="44913-475">表示异步操作的任务对象。</span><span class="sxs-lookup"><span data-stu-id="44913-475">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="44913-476">此操作不会阻止。</span><span class="sxs-lookup"><span data-stu-id="44913-476">This operation will not block.</span></span> <span data-ttu-id="44913-477">返回 <xref:System.Threading.Tasks.Task%601> 的对象将在整个响应 (包括内容) 读取后完成。</span><span class="sxs-lookup"><span data-stu-id="44913-477">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PatchAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PatchAsync (Uri? requestUri, System.Net.Http.HttpContent content);" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PatchAsync(class System.Uri requestUri, class System.Net.Http.HttpContent content) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.PatchAsync(System.Uri,System.Net.Http.HttpContent)" />
      <MemberSignature Language="VB.NET" Value="Public Function PatchAsync (requestUri As Uri, content As HttpContent) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ PatchAsync(Uri ^ requestUri, System::Net::Http::HttpContent ^ content);" />
      <MemberSignature Language="F#" Value="member this.PatchAsync : Uri * System.Net.Http.HttpContent -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.PatchAsync (requestUri, content)" />
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PatchAsync (Uri requestUri, System.Net.Http.HttpContent content);" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="content" Type="System.Net.Http.HttpContent" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="44913-478">请求发送到的 URI。</span><span class="sxs-lookup"><span data-stu-id="44913-478">The Uri the request is sent to.</span></span></param>
        <param name="content"><span data-ttu-id="44913-479">发送到服务器的 HTTP 请求内容。</span><span class="sxs-lookup"><span data-stu-id="44913-479">The HTTP request content sent to the server.</span></span></param>
        <summary><span data-ttu-id="44913-480">以异步操作方式发送 PATCH 请求。</span><span class="sxs-lookup"><span data-stu-id="44913-480">Sends a PATCH request as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="44913-481">表示异步操作的任务对象。</span><span class="sxs-lookup"><span data-stu-id="44913-481">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="44913-482">此操作不会阻止。</span><span class="sxs-lookup"><span data-stu-id="44913-482">This operation will not block.</span></span> <span data-ttu-id="44913-483">返回 <xref:System.Threading.Tasks.Task%601> 的对象将在整个响应 (包括内容) 读取后完成。</span><span class="sxs-lookup"><span data-stu-id="44913-483">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PatchAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PatchAsync (string? requestUri, System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken);" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PatchAsync(string requestUri, class System.Net.Http.HttpContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.PatchAsync(System.String,System.Net.Http.HttpContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function PatchAsync (requestUri As String, content As HttpContent, cancellationToken As CancellationToken) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ PatchAsync(System::String ^ requestUri, System::Net::Http::HttpContent ^ content, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.PatchAsync : string * System.Net.Http.HttpContent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.PatchAsync (requestUri, content, cancellationToken)" />
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PatchAsync (string requestUri, System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken);" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="content" Type="System.Net.Http.HttpContent" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="44913-484">请求发送到的 URI。</span><span class="sxs-lookup"><span data-stu-id="44913-484">The Uri the request is sent to.</span></span></param>
        <param name="content"><span data-ttu-id="44913-485">发送到服务器的 HTTP 请求内容。</span><span class="sxs-lookup"><span data-stu-id="44913-485">The HTTP request content sent to the server.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="44913-486">可由其他对象或线程用以接收取消通知的取消标记。</span><span class="sxs-lookup"><span data-stu-id="44913-486">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</span></span></param>
        <summary><span data-ttu-id="44913-487">以异步操作方式将带有取消令牌的 PATCH 请求发送到表示为字符串的 URI。</span><span class="sxs-lookup"><span data-stu-id="44913-487">Sends a PATCH request with a cancellation token to a Uri represented as a string as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="44913-488">表示异步操作的任务对象。</span><span class="sxs-lookup"><span data-stu-id="44913-488">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="44913-489">此操作不会阻止。</span><span class="sxs-lookup"><span data-stu-id="44913-489">This operation will not block.</span></span> <span data-ttu-id="44913-490">返回 <xref:System.Threading.Tasks.Task%601> 的对象将在整个响应 (包括内容) 读取后完成。</span><span class="sxs-lookup"><span data-stu-id="44913-490">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PatchAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PatchAsync (Uri? requestUri, System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken);" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PatchAsync(class System.Uri requestUri, class System.Net.Http.HttpContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.PatchAsync(System.Uri,System.Net.Http.HttpContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function PatchAsync (requestUri As Uri, content As HttpContent, cancellationToken As CancellationToken) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ PatchAsync(Uri ^ requestUri, System::Net::Http::HttpContent ^ content, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.PatchAsync : Uri * System.Net.Http.HttpContent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.PatchAsync (requestUri, content, cancellationToken)" />
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PatchAsync (Uri requestUri, System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken);" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="content" Type="System.Net.Http.HttpContent" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="44913-491">请求发送到的 URI。</span><span class="sxs-lookup"><span data-stu-id="44913-491">The Uri the request is sent to.</span></span></param>
        <param name="content"><span data-ttu-id="44913-492">发送到服务器的 HTTP 请求内容。</span><span class="sxs-lookup"><span data-stu-id="44913-492">The HTTP request content sent to the server.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="44913-493">可由其他对象或线程用以接收取消通知的取消标记。</span><span class="sxs-lookup"><span data-stu-id="44913-493">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</span></span></param>
        <summary><span data-ttu-id="44913-494">以异步操作方式发送带有取消令牌的 PATCH 请求。</span><span class="sxs-lookup"><span data-stu-id="44913-494">Sends a PATCH request with a cancellation token as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="44913-495">表示异步操作的任务对象。</span><span class="sxs-lookup"><span data-stu-id="44913-495">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="44913-496">此操作不会阻止。</span><span class="sxs-lookup"><span data-stu-id="44913-496">This operation will not block.</span></span> <span data-ttu-id="44913-497">返回 <xref:System.Threading.Tasks.Task%601> 的对象将在整个响应 (包括内容) 读取后完成。</span><span class="sxs-lookup"><span data-stu-id="44913-497">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="PostAsync">
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="44913-498">以异步操作将 POST 请求发送给指定 URI。</span><span class="sxs-lookup"><span data-stu-id="44913-498">Send a POST request to the specified Uri as an asynchronous operation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="44913-499">此操作不会阻止。</span><span class="sxs-lookup"><span data-stu-id="44913-499">This operation will not block.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="PostAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PostAsync (string requestUri, System.Net.Http.HttpContent content);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PostAsync(string requestUri, class System.Net.Http.HttpContent content) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.PostAsync(System.String,System.Net.Http.HttpContent)" />
      <MemberSignature Language="VB.NET" Value="Public Function PostAsync (requestUri As String, content As HttpContent) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ PostAsync(System::String ^ requestUri, System::Net::Http::HttpContent ^ content);" />
      <MemberSignature Language="F#" Value="member this.PostAsync : string * System.Net.Http.HttpContent -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.PostAsync (requestUri, content)" />
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PostAsync (string? requestUri, System.Net.Http.HttpContent content);" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" />
        <Parameter Name="content" Type="System.Net.Http.HttpContent" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="44913-500">请求发送到的 URI。</span><span class="sxs-lookup"><span data-stu-id="44913-500">The Uri the request is sent to.</span></span></param>
        <param name="content"><span data-ttu-id="44913-501">发送到服务器的 HTTP 请求内容。</span><span class="sxs-lookup"><span data-stu-id="44913-501">The HTTP request content sent to the server.</span></span></param>
        <summary><span data-ttu-id="44913-502">以异步操作将 POST 请求发送给指定 URI。</span><span class="sxs-lookup"><span data-stu-id="44913-502">Send a POST request to the specified Uri as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="44913-503">表示异步操作的任务对象。</span><span class="sxs-lookup"><span data-stu-id="44913-503">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="44913-504">此操作不会阻止。</span><span class="sxs-lookup"><span data-stu-id="44913-504">This operation will not block.</span></span> <span data-ttu-id="44913-505">返回 <xref:System.Threading.Tasks.Task%601> 的对象将在整个响应 (包括内容) 读取后完成。</span><span class="sxs-lookup"><span data-stu-id="44913-505">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  

> [!NOTE]
> <span data-ttu-id="44913-506">在超时情况下，不同的 .NET 实现会引发不同的异常。</span><span class="sxs-lookup"><span data-stu-id="44913-506">In case of timeout, different exceptions are thrown on different .NET implementations.</span></span>
> - <span data-ttu-id="44913-507"><xref:System.Net.Http.HttpRequestException> 所有适用的 .NET Framework 版本都将引发。</span><span class="sxs-lookup"><span data-stu-id="44913-507"><xref:System.Net.Http.HttpRequestException> is thrown on all applicable .NET Framework versions.</span></span>
> - <span data-ttu-id="44913-508"><xref:System.Threading.Tasks.TaskCanceledException> 在所有适用的 .NET Core 版本上都不会引发任何内部异常。</span><span class="sxs-lookup"><span data-stu-id="44913-508"><xref:System.Threading.Tasks.TaskCanceledException> without any inner exception is thrown on all applicable .NET Core versions.</span></span>
> - <span data-ttu-id="44913-509"><xref:System.Threading.Tasks.TaskCanceledException><xref:System.TimeoutException>在 .net 5.0 和更高版本上，将引发嵌套的。</span><span class="sxs-lookup"><span data-stu-id="44913-509"><xref:System.Threading.Tasks.TaskCanceledException> that nests a <xref:System.TimeoutException> is thrown on .NET 5.0 and later versions.</span></span>
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="44913-510"><paramref name="requestUri" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="44913-510">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="44913-511">某个根本问题（例如网络连接、DNS 失败、服务器证书验证或超时）导致请求失败。</span><span class="sxs-lookup"><span data-stu-id="44913-511">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException"><span data-ttu-id="44913-512">仅限 .NET Core 和 .NET 5.0 及更高版本：请求因超时而失败。</span><span class="sxs-lookup"><span data-stu-id="44913-512">.NET Core and .NET 5.0 and later only: The request failed due to timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="PostAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PostAsync (Uri requestUri, System.Net.Http.HttpContent content);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PostAsync(class System.Uri requestUri, class System.Net.Http.HttpContent content) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.PostAsync(System.Uri,System.Net.Http.HttpContent)" />
      <MemberSignature Language="VB.NET" Value="Public Function PostAsync (requestUri As Uri, content As HttpContent) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ PostAsync(Uri ^ requestUri, System::Net::Http::HttpContent ^ content);" />
      <MemberSignature Language="F#" Value="member this.PostAsync : Uri * System.Net.Http.HttpContent -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.PostAsync (requestUri, content)" />
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PostAsync (Uri? requestUri, System.Net.Http.HttpContent content);" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" />
        <Parameter Name="content" Type="System.Net.Http.HttpContent" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="44913-513">请求发送到的 URI。</span><span class="sxs-lookup"><span data-stu-id="44913-513">The Uri the request is sent to.</span></span></param>
        <param name="content"><span data-ttu-id="44913-514">发送到服务器的 HTTP 请求内容。</span><span class="sxs-lookup"><span data-stu-id="44913-514">The HTTP request content sent to the server.</span></span></param>
        <summary><span data-ttu-id="44913-515">以异步操作将 POST 请求发送给指定 URI。</span><span class="sxs-lookup"><span data-stu-id="44913-515">Send a POST request to the specified Uri as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="44913-516">表示异步操作的任务对象。</span><span class="sxs-lookup"><span data-stu-id="44913-516">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="44913-517">此操作不会阻止。</span><span class="sxs-lookup"><span data-stu-id="44913-517">This operation will not block.</span></span> <span data-ttu-id="44913-518">返回 <xref:System.Threading.Tasks.Task%601> 的对象将在整个响应 (包括内容) 读取后完成。</span><span class="sxs-lookup"><span data-stu-id="44913-518">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  

> [!NOTE]
> <span data-ttu-id="44913-519">在超时情况下，不同的 .NET 实现会引发不同的异常。</span><span class="sxs-lookup"><span data-stu-id="44913-519">In case of timeout, different exceptions are thrown on different .NET implementations.</span></span>
> - <span data-ttu-id="44913-520"><xref:System.Net.Http.HttpRequestException> 所有适用的 .NET Framework 版本都将引发。</span><span class="sxs-lookup"><span data-stu-id="44913-520"><xref:System.Net.Http.HttpRequestException> is thrown on all applicable .NET Framework versions.</span></span>
> - <span data-ttu-id="44913-521"><xref:System.Threading.Tasks.TaskCanceledException> 在所有适用的 .NET Core 版本上都不会引发任何内部异常。</span><span class="sxs-lookup"><span data-stu-id="44913-521"><xref:System.Threading.Tasks.TaskCanceledException> without any inner exception is thrown on all applicable .NET Core versions.</span></span>
> - <span data-ttu-id="44913-522"><xref:System.Threading.Tasks.TaskCanceledException><xref:System.TimeoutException>在 .net 5.0 和更高版本上，将引发嵌套的。</span><span class="sxs-lookup"><span data-stu-id="44913-522"><xref:System.Threading.Tasks.TaskCanceledException> that nests a <xref:System.TimeoutException> is thrown on .NET 5.0 and later versions.</span></span>
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="44913-523"><paramref name="requestUri" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="44913-523">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="44913-524">某个根本问题（例如网络连接、DNS 失败、服务器证书验证或超时）导致请求失败。</span><span class="sxs-lookup"><span data-stu-id="44913-524">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException"><span data-ttu-id="44913-525">仅限 .NET Core 和 .NET 5.0 及更高版本：请求因超时而失败。</span><span class="sxs-lookup"><span data-stu-id="44913-525">.NET Core and .NET 5.0 and later only: The request failed due to timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="PostAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PostAsync (string requestUri, System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PostAsync(string requestUri, class System.Net.Http.HttpContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.PostAsync(System.String,System.Net.Http.HttpContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function PostAsync (requestUri As String, content As HttpContent, cancellationToken As CancellationToken) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ PostAsync(System::String ^ requestUri, System::Net::Http::HttpContent ^ content, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.PostAsync : string * System.Net.Http.HttpContent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.PostAsync (requestUri, content, cancellationToken)" />
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PostAsync (string? requestUri, System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken);" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" />
        <Parameter Name="content" Type="System.Net.Http.HttpContent" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="44913-526">请求发送到的 URI。</span><span class="sxs-lookup"><span data-stu-id="44913-526">The Uri the request is sent to.</span></span></param>
        <param name="content"><span data-ttu-id="44913-527">发送到服务器的 HTTP 请求内容。</span><span class="sxs-lookup"><span data-stu-id="44913-527">The HTTP request content sent to the server.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="44913-528">可由其他对象或线程用以接收取消通知的取消标记。</span><span class="sxs-lookup"><span data-stu-id="44913-528">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</span></span></param>
        <summary><span data-ttu-id="44913-529">用以异步操作的取消标记发送 POST 请求。</span><span class="sxs-lookup"><span data-stu-id="44913-529">Send a POST request with a cancellation token as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="44913-530">表示异步操作的任务对象。</span><span class="sxs-lookup"><span data-stu-id="44913-530">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="44913-531">此操作不会阻止。</span><span class="sxs-lookup"><span data-stu-id="44913-531">This operation will not block.</span></span> <span data-ttu-id="44913-532">返回 <xref:System.Threading.Tasks.Task%601> 的对象将在整个响应 (包括内容) 读取后完成。</span><span class="sxs-lookup"><span data-stu-id="44913-532">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  

> [!NOTE]
> <span data-ttu-id="44913-533">在超时情况下，不同的 .NET 实现会引发不同的异常。</span><span class="sxs-lookup"><span data-stu-id="44913-533">In case of timeout, different exceptions are thrown on different .NET implementations.</span></span>
> - <span data-ttu-id="44913-534"><xref:System.Net.Http.HttpRequestException> 所有适用的 .NET Framework 版本都将引发。</span><span class="sxs-lookup"><span data-stu-id="44913-534"><xref:System.Net.Http.HttpRequestException> is thrown on all applicable .NET Framework versions.</span></span>
> - <span data-ttu-id="44913-535"><xref:System.Threading.Tasks.TaskCanceledException> 在所有适用的 .NET Core 版本上都不会引发任何内部异常。</span><span class="sxs-lookup"><span data-stu-id="44913-535"><xref:System.Threading.Tasks.TaskCanceledException> without any inner exception is thrown on all applicable .NET Core versions.</span></span>
> - <span data-ttu-id="44913-536"><xref:System.Threading.Tasks.TaskCanceledException><xref:System.TimeoutException>在 .net 5.0 和更高版本上，将引发嵌套的。</span><span class="sxs-lookup"><span data-stu-id="44913-536"><xref:System.Threading.Tasks.TaskCanceledException> that nests a <xref:System.TimeoutException> is thrown on .NET 5.0 and later versions.</span></span>
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="44913-537"><paramref name="requestUri" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="44913-537">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="44913-538">某个根本问题（例如网络连接、DNS 失败、服务器证书验证或超时）导致请求失败。</span><span class="sxs-lookup"><span data-stu-id="44913-538">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException"><span data-ttu-id="44913-539">仅限 .NET Core 和 .NET 5.0 及更高版本：请求因超时而失败。</span><span class="sxs-lookup"><span data-stu-id="44913-539">.NET Core and .NET 5.0 and later only: The request failed due to timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="PostAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PostAsync (Uri requestUri, System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PostAsync(class System.Uri requestUri, class System.Net.Http.HttpContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.PostAsync(System.Uri,System.Net.Http.HttpContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function PostAsync (requestUri As Uri, content As HttpContent, cancellationToken As CancellationToken) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ PostAsync(Uri ^ requestUri, System::Net::Http::HttpContent ^ content, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.PostAsync : Uri * System.Net.Http.HttpContent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.PostAsync (requestUri, content, cancellationToken)" />
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PostAsync (Uri? requestUri, System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken);" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" />
        <Parameter Name="content" Type="System.Net.Http.HttpContent" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="44913-540">请求发送到的 URI。</span><span class="sxs-lookup"><span data-stu-id="44913-540">The Uri the request is sent to.</span></span></param>
        <param name="content"><span data-ttu-id="44913-541">发送到服务器的 HTTP 请求内容。</span><span class="sxs-lookup"><span data-stu-id="44913-541">The HTTP request content sent to the server.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="44913-542">可由其他对象或线程用以接收取消通知的取消标记。</span><span class="sxs-lookup"><span data-stu-id="44913-542">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</span></span></param>
        <summary><span data-ttu-id="44913-543">用以异步操作的取消标记发送 POST 请求。</span><span class="sxs-lookup"><span data-stu-id="44913-543">Send a POST request with a cancellation token as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="44913-544">表示异步操作的任务对象。</span><span class="sxs-lookup"><span data-stu-id="44913-544">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="44913-545">此操作不会阻止。</span><span class="sxs-lookup"><span data-stu-id="44913-545">This operation will not block.</span></span> <span data-ttu-id="44913-546">返回 <xref:System.Threading.Tasks.Task%601> 的对象将在整个响应 (包括内容) 读取后完成。</span><span class="sxs-lookup"><span data-stu-id="44913-546">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  

> [!NOTE]
> <span data-ttu-id="44913-547">在超时情况下，不同的 .NET 实现会引发不同的异常。</span><span class="sxs-lookup"><span data-stu-id="44913-547">In case of timeout, different exceptions are thrown on different .NET implementations.</span></span>
> - <span data-ttu-id="44913-548"><xref:System.Net.Http.HttpRequestException> 所有适用的 .NET Framework 版本都将引发。</span><span class="sxs-lookup"><span data-stu-id="44913-548"><xref:System.Net.Http.HttpRequestException> is thrown on all applicable .NET Framework versions.</span></span>
> - <span data-ttu-id="44913-549"><xref:System.Threading.Tasks.TaskCanceledException> 在所有适用的 .NET Core 版本上都不会引发任何内部异常。</span><span class="sxs-lookup"><span data-stu-id="44913-549"><xref:System.Threading.Tasks.TaskCanceledException> without any inner exception is thrown on all applicable .NET Core versions.</span></span>
> - <span data-ttu-id="44913-550"><xref:System.Threading.Tasks.TaskCanceledException><xref:System.TimeoutException>在 .net 5.0 和更高版本上，将引发嵌套的。</span><span class="sxs-lookup"><span data-stu-id="44913-550"><xref:System.Threading.Tasks.TaskCanceledException> that nests a <xref:System.TimeoutException> is thrown on .NET 5.0 and later versions.</span></span>
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="44913-551"><paramref name="requestUri" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="44913-551">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="44913-552">某个根本问题（例如网络连接、DNS 失败、服务器证书验证或超时）导致请求失败。</span><span class="sxs-lookup"><span data-stu-id="44913-552">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException"><span data-ttu-id="44913-553">仅限 .NET Core 和 .NET 5.0 及更高版本：请求因超时而失败。</span><span class="sxs-lookup"><span data-stu-id="44913-553">.NET Core and .NET 5.0 and later only: The request failed due to timeout.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="PutAsync">
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="44913-554">以异步操作将 PUT 请求发送给指定 URI。</span><span class="sxs-lookup"><span data-stu-id="44913-554">Send a PUT request to the specified Uri as an asynchronous operation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="44913-555">此操作不会阻止。</span><span class="sxs-lookup"><span data-stu-id="44913-555">This operation will not block.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="PutAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PutAsync (string requestUri, System.Net.Http.HttpContent content);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PutAsync(string requestUri, class System.Net.Http.HttpContent content) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.PutAsync(System.String,System.Net.Http.HttpContent)" />
      <MemberSignature Language="VB.NET" Value="Public Function PutAsync (requestUri As String, content As HttpContent) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ PutAsync(System::String ^ requestUri, System::Net::Http::HttpContent ^ content);" />
      <MemberSignature Language="F#" Value="member this.PutAsync : string * System.Net.Http.HttpContent -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.PutAsync (requestUri, content)" />
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PutAsync (string? requestUri, System.Net.Http.HttpContent content);" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" />
        <Parameter Name="content" Type="System.Net.Http.HttpContent" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="44913-556">请求发送到的 URI。</span><span class="sxs-lookup"><span data-stu-id="44913-556">The Uri the request is sent to.</span></span></param>
        <param name="content"><span data-ttu-id="44913-557">发送到服务器的 HTTP 请求内容。</span><span class="sxs-lookup"><span data-stu-id="44913-557">The HTTP request content sent to the server.</span></span></param>
        <summary><span data-ttu-id="44913-558">以异步操作将 PUT 请求发送给指定 URI。</span><span class="sxs-lookup"><span data-stu-id="44913-558">Send a PUT request to the specified Uri as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="44913-559">表示异步操作的任务对象。</span><span class="sxs-lookup"><span data-stu-id="44913-559">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="44913-560">此操作不会阻止。</span><span class="sxs-lookup"><span data-stu-id="44913-560">This operation will not block.</span></span> <span data-ttu-id="44913-561">返回 <xref:System.Threading.Tasks.Task%601> 的对象将在整个响应 (包括内容) 读取后完成。</span><span class="sxs-lookup"><span data-stu-id="44913-561">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  

> [!NOTE]
> <span data-ttu-id="44913-562">在超时情况下，不同的 .NET 实现会引发不同的异常。</span><span class="sxs-lookup"><span data-stu-id="44913-562">In case of timeout, different exceptions are thrown on different .NET implementations.</span></span>
> - <span data-ttu-id="44913-563"><xref:System.Net.Http.HttpRequestException> 所有适用的 .NET Framework 版本都将引发。</span><span class="sxs-lookup"><span data-stu-id="44913-563"><xref:System.Net.Http.HttpRequestException> is thrown on all applicable .NET Framework versions.</span></span>
> - <span data-ttu-id="44913-564"><xref:System.Threading.Tasks.TaskCanceledException> 在所有适用的 .NET Core 版本上都不会引发任何内部异常。</span><span class="sxs-lookup"><span data-stu-id="44913-564"><xref:System.Threading.Tasks.TaskCanceledException> without any inner exception is thrown on all applicable .NET Core versions.</span></span>
> - <span data-ttu-id="44913-565"><xref:System.Threading.Tasks.TaskCanceledException><xref:System.TimeoutException>在 .net 5.0 和更高版本上，将引发嵌套的。</span><span class="sxs-lookup"><span data-stu-id="44913-565"><xref:System.Threading.Tasks.TaskCanceledException> that nests a <xref:System.TimeoutException> is thrown on .NET 5.0 and later versions.</span></span>
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="44913-566"><paramref name="requestUri" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="44913-566">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="44913-567">某个根本问题（例如网络连接、DNS 失败、服务器证书验证或超时）导致请求失败。</span><span class="sxs-lookup"><span data-stu-id="44913-567">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException"><span data-ttu-id="44913-568">仅限 .NET Core 和 .NET 5.0 及更高版本：请求因超时而失败。</span><span class="sxs-lookup"><span data-stu-id="44913-568">.NET Core and .NET 5.0 and later only: The request failed due to timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="PutAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PutAsync (Uri requestUri, System.Net.Http.HttpContent content);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PutAsync(class System.Uri requestUri, class System.Net.Http.HttpContent content) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.PutAsync(System.Uri,System.Net.Http.HttpContent)" />
      <MemberSignature Language="VB.NET" Value="Public Function PutAsync (requestUri As Uri, content As HttpContent) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ PutAsync(Uri ^ requestUri, System::Net::Http::HttpContent ^ content);" />
      <MemberSignature Language="F#" Value="member this.PutAsync : Uri * System.Net.Http.HttpContent -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.PutAsync (requestUri, content)" />
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PutAsync (Uri? requestUri, System.Net.Http.HttpContent content);" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" />
        <Parameter Name="content" Type="System.Net.Http.HttpContent" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="44913-569">请求发送到的 URI。</span><span class="sxs-lookup"><span data-stu-id="44913-569">The Uri the request is sent to.</span></span></param>
        <param name="content"><span data-ttu-id="44913-570">发送到服务器的 HTTP 请求内容。</span><span class="sxs-lookup"><span data-stu-id="44913-570">The HTTP request content sent to the server.</span></span></param>
        <summary><span data-ttu-id="44913-571">以异步操作将 PUT 请求发送给指定 URI。</span><span class="sxs-lookup"><span data-stu-id="44913-571">Send a PUT request to the specified Uri as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="44913-572">表示异步操作的任务对象。</span><span class="sxs-lookup"><span data-stu-id="44913-572">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="44913-573">此操作不会阻止。</span><span class="sxs-lookup"><span data-stu-id="44913-573">This operation will not block.</span></span> <span data-ttu-id="44913-574">返回 <xref:System.Threading.Tasks.Task%601> 的对象将在整个响应 (包括内容) 读取后完成。</span><span class="sxs-lookup"><span data-stu-id="44913-574">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  

> [!NOTE]
> <span data-ttu-id="44913-575">在超时情况下，不同的 .NET 实现会引发不同的异常。</span><span class="sxs-lookup"><span data-stu-id="44913-575">In case of timeout, different exceptions are thrown on different .NET implementations.</span></span>
> - <span data-ttu-id="44913-576"><xref:System.Net.Http.HttpRequestException> 所有适用的 .NET Framework 版本都将引发。</span><span class="sxs-lookup"><span data-stu-id="44913-576"><xref:System.Net.Http.HttpRequestException> is thrown on all applicable .NET Framework versions.</span></span>
> - <span data-ttu-id="44913-577"><xref:System.Threading.Tasks.TaskCanceledException> 在所有适用的 .NET Core 版本上都不会引发任何内部异常。</span><span class="sxs-lookup"><span data-stu-id="44913-577"><xref:System.Threading.Tasks.TaskCanceledException> without any inner exception is thrown on all applicable .NET Core versions.</span></span>
> - <span data-ttu-id="44913-578"><xref:System.Threading.Tasks.TaskCanceledException><xref:System.TimeoutException>在 .net 5.0 和更高版本上，将引发嵌套的。</span><span class="sxs-lookup"><span data-stu-id="44913-578"><xref:System.Threading.Tasks.TaskCanceledException> that nests a <xref:System.TimeoutException> is thrown on .NET 5.0 and later versions.</span></span>
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="44913-579"><paramref name="requestUri" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="44913-579">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="44913-580">某个根本问题（例如网络连接、DNS 失败、服务器证书验证或超时）导致请求失败。</span><span class="sxs-lookup"><span data-stu-id="44913-580">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException"><span data-ttu-id="44913-581">仅限 .NET Core 和 .NET 5.0 及更高版本：请求因超时而失败。</span><span class="sxs-lookup"><span data-stu-id="44913-581">.NET Core and .NET 5.0 and later only: The request failed due to timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="PutAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PutAsync (string requestUri, System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PutAsync(string requestUri, class System.Net.Http.HttpContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.PutAsync(System.String,System.Net.Http.HttpContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function PutAsync (requestUri As String, content As HttpContent, cancellationToken As CancellationToken) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ PutAsync(System::String ^ requestUri, System::Net::Http::HttpContent ^ content, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.PutAsync : string * System.Net.Http.HttpContent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.PutAsync (requestUri, content, cancellationToken)" />
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PutAsync (string? requestUri, System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken);" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" />
        <Parameter Name="content" Type="System.Net.Http.HttpContent" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="44913-582">请求发送到的 URI。</span><span class="sxs-lookup"><span data-stu-id="44913-582">The Uri the request is sent to.</span></span></param>
        <param name="content"><span data-ttu-id="44913-583">发送到服务器的 HTTP 请求内容。</span><span class="sxs-lookup"><span data-stu-id="44913-583">The HTTP request content sent to the server.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="44913-584">可由其他对象或线程用以接收取消通知的取消标记。</span><span class="sxs-lookup"><span data-stu-id="44913-584">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</span></span></param>
        <summary><span data-ttu-id="44913-585">用以异步操作的取消标记发送 PUT 请求。</span><span class="sxs-lookup"><span data-stu-id="44913-585">Send a PUT request with a cancellation token as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="44913-586">表示异步操作的任务对象。</span><span class="sxs-lookup"><span data-stu-id="44913-586">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="44913-587">此操作不会阻止。</span><span class="sxs-lookup"><span data-stu-id="44913-587">This operation will not block.</span></span> <span data-ttu-id="44913-588">返回 <xref:System.Threading.Tasks.Task%601> 的对象将在整个响应 (包括内容) 读取后完成。</span><span class="sxs-lookup"><span data-stu-id="44913-588">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  

> [!NOTE]
> <span data-ttu-id="44913-589">在超时情况下，不同的 .NET 实现会引发不同的异常。</span><span class="sxs-lookup"><span data-stu-id="44913-589">In case of timeout, different exceptions are thrown on different .NET implementations.</span></span>
> - <span data-ttu-id="44913-590"><xref:System.Net.Http.HttpRequestException> 所有适用的 .NET Framework 版本都将引发。</span><span class="sxs-lookup"><span data-stu-id="44913-590"><xref:System.Net.Http.HttpRequestException> is thrown on all applicable .NET Framework versions.</span></span>
> - <span data-ttu-id="44913-591"><xref:System.Threading.Tasks.TaskCanceledException> 在所有适用的 .NET Core 版本上都不会引发任何内部异常。</span><span class="sxs-lookup"><span data-stu-id="44913-591"><xref:System.Threading.Tasks.TaskCanceledException> without any inner exception is thrown on all applicable .NET Core versions.</span></span>
> - <span data-ttu-id="44913-592"><xref:System.Threading.Tasks.TaskCanceledException><xref:System.TimeoutException>在 .net 5.0 和更高版本上，将引发嵌套的。</span><span class="sxs-lookup"><span data-stu-id="44913-592"><xref:System.Threading.Tasks.TaskCanceledException> that nests a <xref:System.TimeoutException> is thrown on .NET 5.0 and later versions.</span></span>
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="44913-593"><paramref name="requestUri" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="44913-593">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="44913-594">某个根本问题（例如网络连接、DNS 失败、服务器证书验证或超时）导致请求失败。</span><span class="sxs-lookup"><span data-stu-id="44913-594">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException"><span data-ttu-id="44913-595">仅限 .NET Core 和 .NET 5.0 及更高版本：请求因超时而失败。</span><span class="sxs-lookup"><span data-stu-id="44913-595">.NET Core and .NET 5.0 and later only: The request failed due to timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="PutAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PutAsync (Uri requestUri, System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PutAsync(class System.Uri requestUri, class System.Net.Http.HttpContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.PutAsync(System.Uri,System.Net.Http.HttpContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function PutAsync (requestUri As Uri, content As HttpContent, cancellationToken As CancellationToken) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ PutAsync(Uri ^ requestUri, System::Net::Http::HttpContent ^ content, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.PutAsync : Uri * System.Net.Http.HttpContent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.PutAsync (requestUri, content, cancellationToken)" />
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PutAsync (Uri? requestUri, System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken);" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" />
        <Parameter Name="content" Type="System.Net.Http.HttpContent" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="44913-596">请求发送到的 URI。</span><span class="sxs-lookup"><span data-stu-id="44913-596">The Uri the request is sent to.</span></span></param>
        <param name="content"><span data-ttu-id="44913-597">发送到服务器的 HTTP 请求内容。</span><span class="sxs-lookup"><span data-stu-id="44913-597">The HTTP request content sent to the server.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="44913-598">可由其他对象或线程用以接收取消通知的取消标记。</span><span class="sxs-lookup"><span data-stu-id="44913-598">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</span></span></param>
        <summary><span data-ttu-id="44913-599">用以异步操作的取消标记发送 PUT 请求。</span><span class="sxs-lookup"><span data-stu-id="44913-599">Send a PUT request with a cancellation token as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="44913-600">表示异步操作的任务对象。</span><span class="sxs-lookup"><span data-stu-id="44913-600">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="44913-601">此操作不会阻止。</span><span class="sxs-lookup"><span data-stu-id="44913-601">This operation will not block.</span></span> <span data-ttu-id="44913-602">返回 <xref:System.Threading.Tasks.Task%601> 的对象将在整个响应 (包括内容) 读取后完成。</span><span class="sxs-lookup"><span data-stu-id="44913-602">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  

> [!NOTE]
> <span data-ttu-id="44913-603">在超时情况下，不同的 .NET 实现会引发不同的异常。</span><span class="sxs-lookup"><span data-stu-id="44913-603">In case of timeout, different exceptions are thrown on different .NET implementations.</span></span>
> - <span data-ttu-id="44913-604"><xref:System.Net.Http.HttpRequestException> 所有适用的 .NET Framework 版本都将引发。</span><span class="sxs-lookup"><span data-stu-id="44913-604"><xref:System.Net.Http.HttpRequestException> is thrown on all applicable .NET Framework versions.</span></span>
> - <span data-ttu-id="44913-605"><xref:System.Threading.Tasks.TaskCanceledException> 在所有适用的 .NET Core 版本上都不会引发任何内部异常。</span><span class="sxs-lookup"><span data-stu-id="44913-605"><xref:System.Threading.Tasks.TaskCanceledException> without any inner exception is thrown on all applicable .NET Core versions.</span></span>
> - <span data-ttu-id="44913-606"><xref:System.Threading.Tasks.TaskCanceledException><xref:System.TimeoutException>在 .net 5.0 和更高版本上，将引发嵌套的。</span><span class="sxs-lookup"><span data-stu-id="44913-606"><xref:System.Threading.Tasks.TaskCanceledException> that nests a <xref:System.TimeoutException> is thrown on .NET 5.0 and later versions.</span></span>
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="44913-607"><paramref name="requestUri" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="44913-607">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="44913-608">某个根本问题（例如网络连接、DNS 失败、服务器证书验证或超时）导致请求失败。</span><span class="sxs-lookup"><span data-stu-id="44913-608">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException"><span data-ttu-id="44913-609">仅限 .NET Core 和 .NET 5.0 及更高版本：请求因超时而失败。</span><span class="sxs-lookup"><span data-stu-id="44913-609">.NET Core and .NET 5.0 and later only: The request failed due to timeout.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="SendAsync">
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="44913-610">以异步操作发送 HTTP 请求。</span><span class="sxs-lookup"><span data-stu-id="44913-610">Send an HTTP request as an asynchronous operation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="44913-611">此操作不会阻止。</span><span class="sxs-lookup"><span data-stu-id="44913-611">This operation will not block.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; SendAsync (System.Net.Http.HttpRequestMessage request);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; SendAsync(class System.Net.Http.HttpRequestMessage request) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage)" />
      <MemberSignature Language="VB.NET" Value="Public Function SendAsync (request As HttpRequestMessage) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ SendAsync(System::Net::Http::HttpRequestMessage ^ request);" />
      <MemberSignature Language="F#" Value="override this.SendAsync : System.Net.Http.HttpRequestMessage -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.SendAsync request" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.Net.Http.HttpRequestMessage" />
      </Parameters>
      <Docs>
        <param name="request"><span data-ttu-id="44913-612">要发送的 HTTP 请求消息。</span><span class="sxs-lookup"><span data-stu-id="44913-612">The HTTP request message to send.</span></span></param>
        <summary><span data-ttu-id="44913-613">以异步操作发送 HTTP 请求。</span><span class="sxs-lookup"><span data-stu-id="44913-613">Send an HTTP request as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="44913-614">表示异步操作的任务对象。</span><span class="sxs-lookup"><span data-stu-id="44913-614">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="44913-615">此操作不会阻止。</span><span class="sxs-lookup"><span data-stu-id="44913-615">This operation will not block.</span></span> <span data-ttu-id="44913-616"><xref:System.Threading.Tasks.Task%601>在读取包含内容的整个响应后，将完成返回的对象。</span><span class="sxs-lookup"><span data-stu-id="44913-616">The returned <xref:System.Threading.Tasks.Task%601> object will complete once the entire response including content is read.</span></span>  

> [!NOTE]
> <span data-ttu-id="44913-617">在超时情况下，不同的 .NET 实现会引发不同的异常。</span><span class="sxs-lookup"><span data-stu-id="44913-617">In case of timeout, different exceptions are thrown on different .NET implementations.</span></span>
> - <span data-ttu-id="44913-618"><xref:System.Net.Http.HttpRequestException> 所有适用的 .NET Framework 版本都将引发。</span><span class="sxs-lookup"><span data-stu-id="44913-618"><xref:System.Net.Http.HttpRequestException> is thrown on all applicable .NET Framework versions.</span></span>
> - <span data-ttu-id="44913-619"><xref:System.Threading.Tasks.TaskCanceledException> 在所有适用的 .NET Core 版本上都不会引发任何内部异常。</span><span class="sxs-lookup"><span data-stu-id="44913-619"><xref:System.Threading.Tasks.TaskCanceledException> without any inner exception is thrown on all applicable .NET Core versions.</span></span>
> - <span data-ttu-id="44913-620"><xref:System.Threading.Tasks.TaskCanceledException><xref:System.TimeoutException>在 .net 5.0 和更高版本上，将引发嵌套的。</span><span class="sxs-lookup"><span data-stu-id="44913-620"><xref:System.Threading.Tasks.TaskCanceledException> that nests a <xref:System.TimeoutException> is thrown on .NET 5.0 and later versions.</span></span>
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="44913-621"><paramref name="request" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="44913-621">The <paramref name="request" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="44913-622">请求消息已由 <see cref="T:System.Net.Http.HttpClient" /> 实例发送。</span><span class="sxs-lookup"><span data-stu-id="44913-622">The request message was already sent by the <see cref="T:System.Net.Http.HttpClient" /> instance.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="44913-623">某个根本问题（例如网络连接、DNS 失败、服务器证书验证或超时）导致请求失败。</span><span class="sxs-lookup"><span data-stu-id="44913-623">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException"><span data-ttu-id="44913-624">仅限 .NET Core 和 .NET 5.0 及更高版本：请求因超时而失败。</span><span class="sxs-lookup"><span data-stu-id="44913-624">.NET Core and .NET 5.0 and later only: The request failed due to timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; SendAsync (System.Net.Http.HttpRequestMessage request, System.Net.Http.HttpCompletionOption completionOption);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; SendAsync(class System.Net.Http.HttpRequestMessage request, valuetype System.Net.Http.HttpCompletionOption completionOption) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage,System.Net.Http.HttpCompletionOption)" />
      <MemberSignature Language="VB.NET" Value="Public Function SendAsync (request As HttpRequestMessage, completionOption As HttpCompletionOption) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ SendAsync(System::Net::Http::HttpRequestMessage ^ request, System::Net::Http::HttpCompletionOption completionOption);" />
      <MemberSignature Language="F#" Value="override this.SendAsync : System.Net.Http.HttpRequestMessage * System.Net.Http.HttpCompletionOption -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.SendAsync (request, completionOption)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.Net.Http.HttpRequestMessage" />
        <Parameter Name="completionOption" Type="System.Net.Http.HttpCompletionOption" />
      </Parameters>
      <Docs>
        <param name="request"><span data-ttu-id="44913-625">要发送的 HTTP 请求消息。</span><span class="sxs-lookup"><span data-stu-id="44913-625">The HTTP request message to send.</span></span></param>
        <param name="completionOption"><span data-ttu-id="44913-626">操作应完成时（在响应可利用或在读取整个响应内容之后）。</span><span class="sxs-lookup"><span data-stu-id="44913-626">When the operation should complete (as soon as a response is available or after reading the whole response content).</span></span></param>
        <summary><span data-ttu-id="44913-627">以异步操作发送 HTTP 请求。</span><span class="sxs-lookup"><span data-stu-id="44913-627">Send an HTTP request as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="44913-628">表示异步操作的任务对象。</span><span class="sxs-lookup"><span data-stu-id="44913-628">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="44913-629">此操作不会阻止。</span><span class="sxs-lookup"><span data-stu-id="44913-629">This operation will not block.</span></span> <span data-ttu-id="44913-630">根据参数的值 `completionOption` ，返回的 <xref:System.Threading.Tasks.Task%601> 对象将在响应可用或包含内容的整个响应（包括内容）之后立即完成。</span><span class="sxs-lookup"><span data-stu-id="44913-630">Depending on the value of the `completionOption` parameter, the returned <xref:System.Threading.Tasks.Task%601> object will complete as soon as a response is available or the entire response including content is read.</span></span>  

> [!NOTE]
> <span data-ttu-id="44913-631">在超时情况下，不同的 .NET 实现会引发不同的异常。</span><span class="sxs-lookup"><span data-stu-id="44913-631">In case of timeout, different exceptions are thrown on different .NET implementations.</span></span>
> - <span data-ttu-id="44913-632"><xref:System.Net.Http.HttpRequestException> 所有适用的 .NET Framework 版本都将引发。</span><span class="sxs-lookup"><span data-stu-id="44913-632"><xref:System.Net.Http.HttpRequestException> is thrown on all applicable .NET Framework versions.</span></span>
> - <span data-ttu-id="44913-633"><xref:System.Threading.Tasks.TaskCanceledException> 在所有适用的 .NET Core 版本上都不会引发任何内部异常。</span><span class="sxs-lookup"><span data-stu-id="44913-633"><xref:System.Threading.Tasks.TaskCanceledException> without any inner exception is thrown on all applicable .NET Core versions.</span></span>
> - <span data-ttu-id="44913-634"><xref:System.Threading.Tasks.TaskCanceledException><xref:System.TimeoutException>在 .net 5.0 和更高版本上，将引发嵌套的。</span><span class="sxs-lookup"><span data-stu-id="44913-634"><xref:System.Threading.Tasks.TaskCanceledException> that nests a <xref:System.TimeoutException> is thrown on .NET 5.0 and later versions.</span></span>
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="44913-635"><paramref name="request" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="44913-635">The <paramref name="request" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="44913-636">请求消息已由 <see cref="T:System.Net.Http.HttpClient" /> 实例发送。</span><span class="sxs-lookup"><span data-stu-id="44913-636">The request message was already sent by the <see cref="T:System.Net.Http.HttpClient" /> instance.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="44913-637">某个根本问题（例如网络连接、DNS 失败、服务器证书验证或超时）导致请求失败。</span><span class="sxs-lookup"><span data-stu-id="44913-637">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException"><span data-ttu-id="44913-638">仅限 .NET Core 和 .NET 5.0 及更高版本：请求因超时而失败。</span><span class="sxs-lookup"><span data-stu-id="44913-638">.NET Core and .NET 5.0 and later only: The request failed due to timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; SendAsync (System.Net.Http.HttpRequestMessage request, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; SendAsync(class System.Net.Http.HttpRequestMessage request, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function SendAsync (request As HttpRequestMessage, cancellationToken As CancellationToken) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ SendAsync(System::Net::Http::HttpRequestMessage ^ request, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="override this.SendAsync : System.Net.Http.HttpRequestMessage * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.SendAsync (request, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.Net.Http.HttpRequestMessage" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="request"><span data-ttu-id="44913-639">要发送的 HTTP 请求消息。</span><span class="sxs-lookup"><span data-stu-id="44913-639">The HTTP request message to send.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="44913-640">取消操作的取消标记。</span><span class="sxs-lookup"><span data-stu-id="44913-640">The cancellation token to cancel operation.</span></span></param>
        <summary><span data-ttu-id="44913-641">以异步操作发送 HTTP 请求。</span><span class="sxs-lookup"><span data-stu-id="44913-641">Send an HTTP request as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="44913-642">表示异步操作的任务对象。</span><span class="sxs-lookup"><span data-stu-id="44913-642">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="44913-643">此操作不会阻止。</span><span class="sxs-lookup"><span data-stu-id="44913-643">This operation will not block.</span></span> <span data-ttu-id="44913-644"><xref:System.Threading.Tasks.Task%601>在读取包含内容的整个响应后，将完成返回的对象。</span><span class="sxs-lookup"><span data-stu-id="44913-644">The returned <xref:System.Threading.Tasks.Task%601> object will complete once the entire response including content is read.</span></span>  

> [!NOTE]
> <span data-ttu-id="44913-645">在超时情况下，不同的 .NET 实现会引发不同的异常。</span><span class="sxs-lookup"><span data-stu-id="44913-645">In case of timeout, different exceptions are thrown on different .NET implementations.</span></span>
> - <span data-ttu-id="44913-646"><xref:System.Net.Http.HttpRequestException> 所有适用的 .NET Framework 版本都将引发。</span><span class="sxs-lookup"><span data-stu-id="44913-646"><xref:System.Net.Http.HttpRequestException> is thrown on all applicable .NET Framework versions.</span></span>
> - <span data-ttu-id="44913-647"><xref:System.Threading.Tasks.TaskCanceledException> 在所有适用的 .NET Core 版本上都不会引发任何内部异常。</span><span class="sxs-lookup"><span data-stu-id="44913-647"><xref:System.Threading.Tasks.TaskCanceledException> without any inner exception is thrown on all applicable .NET Core versions.</span></span>
> - <span data-ttu-id="44913-648"><xref:System.Threading.Tasks.TaskCanceledException><xref:System.TimeoutException>在 .net 5.0 和更高版本上，将引发嵌套的。</span><span class="sxs-lookup"><span data-stu-id="44913-648"><xref:System.Threading.Tasks.TaskCanceledException> that nests a <xref:System.TimeoutException> is thrown on .NET 5.0 and later versions.</span></span>
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="44913-649"><paramref name="request" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="44913-649">The <paramref name="request" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="44913-650">请求消息已由 <see cref="T:System.Net.Http.HttpClient" /> 实例发送。</span><span class="sxs-lookup"><span data-stu-id="44913-650">The request message was already sent by the <see cref="T:System.Net.Http.HttpClient" /> instance.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="44913-651">某个根本问题（例如网络连接、DNS 失败、服务器证书验证或超时）导致请求失败。</span><span class="sxs-lookup"><span data-stu-id="44913-651">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException"><span data-ttu-id="44913-652">仅限 .NET Core 和 .NET 5.0 及更高版本：请求因超时而失败。</span><span class="sxs-lookup"><span data-stu-id="44913-652">.NET Core and .NET 5.0 and later only: The request failed due to timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; SendAsync (System.Net.Http.HttpRequestMessage request, System.Net.Http.HttpCompletionOption completionOption, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; SendAsync(class System.Net.Http.HttpRequestMessage request, valuetype System.Net.Http.HttpCompletionOption completionOption, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function SendAsync (request As HttpRequestMessage, completionOption As HttpCompletionOption, cancellationToken As CancellationToken) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ SendAsync(System::Net::Http::HttpRequestMessage ^ request, System::Net::Http::HttpCompletionOption completionOption, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="override this.SendAsync : System.Net.Http.HttpRequestMessage * System.Net.Http.HttpCompletionOption * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.SendAsync (request, completionOption, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.Net.Http.HttpRequestMessage" />
        <Parameter Name="completionOption" Type="System.Net.Http.HttpCompletionOption" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="request"><span data-ttu-id="44913-653">要发送的 HTTP 请求消息。</span><span class="sxs-lookup"><span data-stu-id="44913-653">The HTTP request message to send.</span></span></param>
        <param name="completionOption"><span data-ttu-id="44913-654">操作应完成时（在响应可利用或在读取整个响应内容之后）。</span><span class="sxs-lookup"><span data-stu-id="44913-654">When the operation should complete (as soon as a response is available or after reading the whole response content).</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="44913-655">取消操作的取消标记。</span><span class="sxs-lookup"><span data-stu-id="44913-655">The cancellation token to cancel operation.</span></span></param>
        <summary><span data-ttu-id="44913-656">以异步操作发送 HTTP 请求。</span><span class="sxs-lookup"><span data-stu-id="44913-656">Send an HTTP request as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="44913-657">表示异步操作的任务对象。</span><span class="sxs-lookup"><span data-stu-id="44913-657">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="44913-658">此操作不会阻止。</span><span class="sxs-lookup"><span data-stu-id="44913-658">This operation will not block.</span></span> <span data-ttu-id="44913-659">根据参数的值 `completionOption` ，返回的 <xref:System.Threading.Tasks.Task%601> 对象将在响应可用或包含内容的整个响应（包括内容）之后立即完成。</span><span class="sxs-lookup"><span data-stu-id="44913-659">Depending on the value of the `completionOption` parameter, the returned <xref:System.Threading.Tasks.Task%601> object will complete as soon as a response is available or the entire response including content is read.</span></span>  

> [!NOTE]
> <span data-ttu-id="44913-660">在超时情况下，不同的 .NET 实现会引发不同的异常。</span><span class="sxs-lookup"><span data-stu-id="44913-660">In case of timeout, different exceptions are thrown on different .NET implementations.</span></span>
> - <span data-ttu-id="44913-661"><xref:System.Net.Http.HttpRequestException> 所有适用的 .NET Framework 版本都将引发。</span><span class="sxs-lookup"><span data-stu-id="44913-661"><xref:System.Net.Http.HttpRequestException> is thrown on all applicable .NET Framework versions.</span></span>
> - <span data-ttu-id="44913-662"><xref:System.Threading.Tasks.TaskCanceledException> 在所有适用的 .NET Core 版本上都不会引发任何内部异常。</span><span class="sxs-lookup"><span data-stu-id="44913-662"><xref:System.Threading.Tasks.TaskCanceledException> without any inner exception is thrown on all applicable .NET Core versions.</span></span>
> - <span data-ttu-id="44913-663"><xref:System.Threading.Tasks.TaskCanceledException><xref:System.TimeoutException>在 .net 5.0 和更高版本上，将引发嵌套的。</span><span class="sxs-lookup"><span data-stu-id="44913-663"><xref:System.Threading.Tasks.TaskCanceledException> that nests a <xref:System.TimeoutException> is thrown on .NET 5.0 and later versions.</span></span>
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="44913-664"><paramref name="request" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="44913-664">The <paramref name="request" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="44913-665">请求消息已由 <see cref="T:System.Net.Http.HttpClient" /> 实例发送。</span><span class="sxs-lookup"><span data-stu-id="44913-665">The request message was already sent by the <see cref="T:System.Net.Http.HttpClient" /> instance.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="44913-666">某个根本问题（例如网络连接、DNS 失败、服务器证书验证或超时）导致请求失败。</span><span class="sxs-lookup"><span data-stu-id="44913-666">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException"><span data-ttu-id="44913-667">仅限 .NET Core 和 .NET 5.0 及更高版本：请求因超时而失败。</span><span class="sxs-lookup"><span data-stu-id="44913-667">.NET Core and .NET 5.0 and later only: The request failed due to timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Timeout">
      <MemberSignature Language="C#" Value="public TimeSpan Timeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan Timeout" />
      <MemberSignature Language="DocId" Value="P:System.Net.Http.HttpClient.Timeout" />
      <MemberSignature Language="VB.NET" Value="Public Property Timeout As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan Timeout { TimeSpan get(); void set(TimeSpan value); };" />
      <MemberSignature Language="F#" Value="member this.Timeout : TimeSpan with get, set" Usage="System.Net.Http.HttpClient.Timeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="44913-668">获取或设置请求超时前等待的时间跨度。</span><span class="sxs-lookup"><span data-stu-id="44913-668">Gets or sets the timespan to wait before the request times out.</span></span></summary>
        <value><span data-ttu-id="44913-669">请求超时前等待的时间跨度。</span><span class="sxs-lookup"><span data-stu-id="44913-669">The timespan to wait before the request times out.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="44913-670">默认值是 100,000 毫秒（100 秒）。</span><span class="sxs-lookup"><span data-stu-id="44913-670">The default value is 100,000 milliseconds (100 seconds).</span></span>  
  
 <span data-ttu-id="44913-671">若要设置无限超时，请将属性值设置为 <xref:System.Threading.Timeout.InfiniteTimeSpan> 。</span><span class="sxs-lookup"><span data-stu-id="44913-671">To set an infinite timeout, set the property value to <xref:System.Threading.Timeout.InfiniteTimeSpan>.</span></span>  
  
 <span data-ttu-id="44913-672">域名系统 (DNS) 查询可能需要长达15秒钟的时间来返回或超时。如果你的请求包含需要解析的主机名，并且你将其设置 <xref:System.Net.Http.HttpClient.Timeout%2A> 为小于15秒的值，则可能需要15秒或更长时间，然后才会 <xref:System.Net.WebException> 引发以指示请求超时。</span><span class="sxs-lookup"><span data-stu-id="44913-672">A Domain Name System (DNS) query may take up to 15 seconds to return or time out. If your request contains a host name that requires resolution and you set <xref:System.Net.Http.HttpClient.Timeout%2A> to a value less than 15 seconds, it may take 15 seconds or more before a <xref:System.Net.WebException> is thrown to indicate a timeout on your request.</span></span>  
  
 <span data-ttu-id="44913-673">使用此实例的所有请求都将使用相同的超时值 <xref:System.Net.Http.HttpClient> 。</span><span class="sxs-lookup"><span data-stu-id="44913-673">The same timeout will apply for all requests using this <xref:System.Net.Http.HttpClient> instance.</span></span>  <span data-ttu-id="44913-674">你还可以使用任务上的为单个请求设置不同的超时 <xref:System.Threading.CancellationTokenSource> 。</span><span class="sxs-lookup"><span data-stu-id="44913-674">You may also set different timeouts for individual requests using a <xref:System.Threading.CancellationTokenSource> on a task.</span></span> <span data-ttu-id="44913-675">请注意，只会应用两个超时中较短的一个。</span><span class="sxs-lookup"><span data-stu-id="44913-675">Note that only the shorter of the two timeouts will apply.</span></span>  
  
 ## Examples
 
 <span data-ttu-id="44913-676">下面的示例设置 `Timeout` 属性。</span><span class="sxs-lookup"><span data-stu-id="44913-676">The following example sets the `Timeout` property.</span></span>
  
```csharp
HttpClient httpClient = new HttpClient();
httpClient.Timeout = TimeSpan.FromMinutes(10);
```

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="44913-677">指定的超时值小于或等于零，而不是 <see cref="F:System.Threading.Timeout.InfiniteTimeSpan" />。</span><span class="sxs-lookup"><span data-stu-id="44913-677">The timeout specified is less than or equal to zero and is not <see cref="F:System.Threading.Timeout.InfiniteTimeSpan" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="44913-678">已在当前实例上启动了一个操作。</span><span class="sxs-lookup"><span data-stu-id="44913-678">An operation has already been started on the current instance.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="44913-679">已释放当前实例。</span><span class="sxs-lookup"><span data-stu-id="44913-679">The current instance has been disposed.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>
