<Type Name="HttpClient" FullName="System.Net.Http.HttpClient">
  <Metadata><Meta Name="ms.openlocfilehash" Value="600dcec0aeda4bc58d9e525844bfc71a92e33a3e" /><Meta Name="ms.sourcegitcommit" Value="0bd9d099f2522ef14c6f48a8ea5f2c0650df0f6f" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="10/15/2020" /><Meta Name="ms.locfileid" Value="92082487" /></Metadata><TypeSignature Language="C#" Value="public class HttpClient : System.Net.Http.HttpMessageInvoker" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit HttpClient extends System.Net.Http.HttpMessageInvoker" />
  <TypeSignature Language="DocId" Value="T:System.Net.Http.HttpClient" />
  <TypeSignature Language="VB.NET" Value="Public Class HttpClient&#xA;Inherits HttpMessageInvoker" />
  <TypeSignature Language="C++ CLI" Value="public ref class HttpClient : System::Net::Http::HttpMessageInvoker" />
  <TypeSignature Language="F#" Value="type HttpClient = class&#xA;    inherit HttpMessageInvoker" />
  <AssemblyInfo>
    <AssemblyName>System.Net.Http</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Net.Http" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Net.Http.HttpMessageInvoker</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="4d269-101">提供基本类，用于发送 HTTP 请求和接收来自通过 URI 确认的资源的 HTTP 响应。</span><span class="sxs-lookup"><span data-stu-id="4d269-101">Provides a base class for sending HTTP requests and receiving HTTP responses from a resource identified by a URI.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d269-102"><xref:System.Net.Http.HttpClient>类实例充当发送 HTTP 请求的会话。</span><span class="sxs-lookup"><span data-stu-id="4d269-102">The <xref:System.Net.Http.HttpClient> class instance acts as a session to send HTTP requests.</span></span> <span data-ttu-id="4d269-103"><xref:System.Net.Http.HttpClient>实例是对该实例执行的所有请求应用的设置的集合。</span><span class="sxs-lookup"><span data-stu-id="4d269-103">An <xref:System.Net.Http.HttpClient> instance is a collection of settings applied to all requests executed by that instance.</span></span> <span data-ttu-id="4d269-104">此外，每个 <xref:System.Net.Http.HttpClient> 实例都使用其自己的连接池，并从其他实例所执行的请求隔离其请求 <xref:System.Net.Http.HttpClient> 。</span><span class="sxs-lookup"><span data-stu-id="4d269-104">In addition, every <xref:System.Net.Http.HttpClient> instance uses its own connection pool, isolating its requests from requests executed by other <xref:System.Net.Http.HttpClient> instances.</span></span>  
  
 <span data-ttu-id="4d269-105"><xref:System.Net.Http.HttpClient>还可用作更具体的 HTTP 客户端的基类。</span><span class="sxs-lookup"><span data-stu-id="4d269-105">The <xref:System.Net.Http.HttpClient> also acts as a base class for more specific HTTP clients.</span></span> <span data-ttu-id="4d269-106">例如，FacebookHttpClient 提供特定于 Facebook web 服务的其他方法 (GetFriends 方法，例如) 。</span><span class="sxs-lookup"><span data-stu-id="4d269-106">An example would be a FacebookHttpClient providing additional methods specific to a Facebook web service (a GetFriends method, for instance).</span></span> <span data-ttu-id="4d269-107">派生类不应重写类的虚方法。</span><span class="sxs-lookup"><span data-stu-id="4d269-107">Derived classes should not override the virtual methods on the class.</span></span> <span data-ttu-id="4d269-108">而应使用接受的构造函数重载 <xref:System.Net.Http.HttpMessageHandler> 来配置任何预处理或后请求处理。</span><span class="sxs-lookup"><span data-stu-id="4d269-108">Instead, use a constructor overload that accepts <xref:System.Net.Http.HttpMessageHandler> to configure any pre- or post-request processing instead.</span></span>
  
 <span data-ttu-id="4d269-109">默认情况下，在 .NET Framework 和 Mono 上， <xref:System.Net.HttpWebRequest> 用于将请求发送到服务器。</span><span class="sxs-lookup"><span data-stu-id="4d269-109">By default on .NET Framework and Mono, <xref:System.Net.HttpWebRequest> is used to send requests to the server.</span></span> <span data-ttu-id="4d269-110">可以通过在采用实例作为参数的构造函数重载之一中指定不同的通道来修改此行为 <xref:System.Net.Http.HttpMessageHandler> 。</span><span class="sxs-lookup"><span data-stu-id="4d269-110">This behavior can be modified by specifying a different channel in one of the constructor overloads taking a <xref:System.Net.Http.HttpMessageHandler> instance as parameter.</span></span> <span data-ttu-id="4d269-111">如果需要使用身份验证或缓存等功能， <xref:System.Net.Http.WebRequestHandler> 可使用来配置设置，并将实例传递给构造函数。</span><span class="sxs-lookup"><span data-stu-id="4d269-111">If features like authentication or caching are required, <xref:System.Net.Http.WebRequestHandler> can be used to configure settings and the instance can be passed to the constructor.</span></span> <span data-ttu-id="4d269-112">返回的处理程序可传递给采用参数的构造函数重载之一 <xref:System.Net.Http.HttpMessageHandler> 。</span><span class="sxs-lookup"><span data-stu-id="4d269-112">The returned handler can be passed to one of the constructor overloads taking a <xref:System.Net.Http.HttpMessageHandler> parameter.</span></span>  
  
 <span data-ttu-id="4d269-113">如果 <xref:System.Net.Http.HttpClient> 命名空间中使用和相关类的应用 <xref:System.Net.Http> 要下载大量数据 (50 mb 或更大的) ，则该应用应流式传输这些下载内容，而不使用默认缓冲。</span><span class="sxs-lookup"><span data-stu-id="4d269-113">If an app using <xref:System.Net.Http.HttpClient> and related classes in the <xref:System.Net.Http> namespace intends to download large amounts of data (50 megabytes or more), then the app should stream those downloads and not use the default buffering.</span></span> <span data-ttu-id="4d269-114">如果使用默认缓冲，则客户端内存使用量将会非常大，这可能会显著降低性能。</span><span class="sxs-lookup"><span data-stu-id="4d269-114">If the default buffering is used the client memory usage will get very large, potentially resulting in substantially reduced performance.</span></span>  

 <span data-ttu-id="4d269-115">存在未处理的 <xref:System.Net.Http.HttpClient> 请求时，不应修改的属性，因为它不是线程安全的。</span><span class="sxs-lookup"><span data-stu-id="4d269-115">Properties of <xref:System.Net.Http.HttpClient> should not be modified while there are outstanding requests, because it is not thread-safe.</span></span>

   
 <span data-ttu-id="4d269-116">以下方法是线程安全的：</span><span class="sxs-lookup"><span data-stu-id="4d269-116">The following methods are thread safe:</span></span>  
  
1.  <xref:System.Net.Http.HttpClient.CancelPendingRequests%2A>  
  
2.  <xref:System.Net.Http.HttpClient.DeleteAsync%2A>  
  
3.  <xref:System.Net.Http.HttpClient.GetAsync%2A>  
  
4.  <xref:System.Net.Http.HttpClient.GetByteArrayAsync%2A>  
  
5.  <xref:System.Net.Http.HttpClient.GetStreamAsync%2A>  
  
6.  <xref:System.Net.Http.HttpClient.GetStringAsync%2A>  
  
7.  <xref:System.Net.Http.HttpClient.PostAsync%2A>  
  
8.  <xref:System.Net.Http.HttpClient.PutAsync%2A>  
  
9. <xref:System.Net.Http.HttpClient.SendAsync%2A>  
  
 <span data-ttu-id="4d269-117"><xref:System.Net.Http.HttpClient> 用于在应用程序的整个生存期内实例化一次并重复使用。</span><span class="sxs-lookup"><span data-stu-id="4d269-117"><xref:System.Net.Http.HttpClient> is intended to be instantiated once and re-used throughout the life of an application.</span></span> <span data-ttu-id="4d269-118">实例化每个请求的 HttpClient 类将耗尽重负载下可用的插槽数。</span><span class="sxs-lookup"><span data-stu-id="4d269-118">Instantiating an HttpClient class for every request will exhaust the number of sockets available under heavy loads.</span></span> <span data-ttu-id="4d269-119">这将导致 SocketException 错误。</span><span class="sxs-lookup"><span data-stu-id="4d269-119">This will result in SocketException errors.</span></span> <span data-ttu-id="4d269-120">下面是正确使用 HttpClient 的示例。</span><span class="sxs-lookup"><span data-stu-id="4d269-120">Below is an example using HttpClient correctly.</span></span>  
  
```csharp
public class GoodController : ApiController
{
    private static readonly HttpClient HttpClient;

    static GoodController()
    {
        HttpClient = new HttpClient();
    }
}
```

```vb
  Public Class GoodController
    Inherits ApiController  
   
    Private Shared ReadOnly HttpClient As HttpClient  
  
    Shared Sub New()  
        HttpClient = New HttpClient()
    End Sub
End Class
```

<span data-ttu-id="4d269-121"><xref:System.Net.Http.HttpClient>是一个高级 API，用于包装其运行的每个平台上可用的较低级别功能。</span><span class="sxs-lookup"><span data-stu-id="4d269-121">The <xref:System.Net.Http.HttpClient> is a high-level API that wraps the lower-level functionality available on each platform where it runs.</span></span>

<span data-ttu-id="4d269-122">在每个平台上， <xref:System.Net.Http.HttpClient> 尝试使用最佳的可用传输：</span><span class="sxs-lookup"><span data-stu-id="4d269-122">On each platform, <xref:System.Net.Http.HttpClient> tries to use the best available transport:</span></span>

| <span data-ttu-id="4d269-123">**主机/运行时**</span><span class="sxs-lookup"><span data-stu-id="4d269-123">**Host/Runtime**</span></span>            | <span data-ttu-id="4d269-124">**后端**</span><span class="sxs-lookup"><span data-stu-id="4d269-124">**Backend**</span></span>                                                                               |
| --------------------------- | ----------------------------------------------------------------------------------------- |
| <span data-ttu-id="4d269-125">Windows/.NET Framework</span><span class="sxs-lookup"><span data-stu-id="4d269-125">Windows/.NET Framework</span></span>      | <xref:System.Net.HttpWebRequest>                                                          |
| <span data-ttu-id="4d269-126">Windows/Mono</span><span class="sxs-lookup"><span data-stu-id="4d269-126">Windows/Mono</span></span>                | <xref:System.Net.HttpWebRequest>                                                          |
| <span data-ttu-id="4d269-127">Windows/UWP</span><span class="sxs-lookup"><span data-stu-id="4d269-127">Windows/UWP</span></span>                 | <span data-ttu-id="4d269-128">支持 Windows native <xref:System.Net.Http.WinHttpHandler> (HTTP 2.0) </span><span class="sxs-lookup"><span data-stu-id="4d269-128">Windows native <xref:System.Net.Http.WinHttpHandler> (HTTP 2.0 capable)</span></span>                   |
| <span data-ttu-id="4d269-129">Windows/.NET Core 1.0-2。0</span><span class="sxs-lookup"><span data-stu-id="4d269-129">Windows/.NET Core 1.0-2.0</span></span>   | <span data-ttu-id="4d269-130">支持 Windows native <xref:System.Net.Http.WinHttpHandler> (HTTP 2.0) </span><span class="sxs-lookup"><span data-stu-id="4d269-130">Windows native <xref:System.Net.Http.WinHttpHandler> (HTTP 2.0 capable)</span></span>                   |
| <span data-ttu-id="4d269-131">Android/Xamarin</span><span class="sxs-lookup"><span data-stu-id="4d269-131">Android/Xamarin</span></span>             | <span data-ttu-id="4d269-132">在生成时选择。</span><span class="sxs-lookup"><span data-stu-id="4d269-132">Selected at build-time.</span></span> <span data-ttu-id="4d269-133">可以使用 <xref:System.Net.HttpWebRequest> 或配置为使用 Android 的本机 [`HttpURLConnection`](https://developer.xamarin.com/api/type/Java.Net.HttpURLConnection/)</span><span class="sxs-lookup"><span data-stu-id="4d269-133">Can either use <xref:System.Net.HttpWebRequest> or be configured to use Android's native [`HttpURLConnection`](https://developer.xamarin.com/api/type/Java.Net.HttpURLConnection/)</span></span> |
| <span data-ttu-id="4d269-134">iOS、tvOS、watchOS/Xamarin</span><span class="sxs-lookup"><span data-stu-id="4d269-134">iOS, tvOS, watchOS/Xamarin</span></span>  | <span data-ttu-id="4d269-135">在生成时选择。</span><span class="sxs-lookup"><span data-stu-id="4d269-135">Selected at build-time.</span></span> <span data-ttu-id="4d269-136">可以使用 <xref:System.Net.HttpWebRequest> 或配置为使用 Apple [`NSUrlSession`](https://developer.xamarin.com/api/type/MonoTouch.Foundation.NSUrlSession/) (HTTP 2.0 功能) </span><span class="sxs-lookup"><span data-stu-id="4d269-136">Can either use <xref:System.Net.HttpWebRequest> or be configured to use Apple's [`NSUrlSession`](https://developer.xamarin.com/api/type/MonoTouch.Foundation.NSUrlSession/) (HTTP 2.0 capable)</span></span> |
| <span data-ttu-id="4d269-137">macOS/Xamarin</span><span class="sxs-lookup"><span data-stu-id="4d269-137">macOS/Xamarin</span></span>               | <span data-ttu-id="4d269-138">在生成时选择。</span><span class="sxs-lookup"><span data-stu-id="4d269-138">Selected at build-time.</span></span> <span data-ttu-id="4d269-139">可以使用 <xref:System.Net.HttpWebRequest> 或配置为使用 Apple [`NSUrlSession`](https://developer.xamarin.com/api/type/MonoTouch.Foundation.NSUrlSession/) (HTTP 2.0 功能) </span><span class="sxs-lookup"><span data-stu-id="4d269-139">Can either use <xref:System.Net.HttpWebRequest> or be configured to use Apple's [`NSUrlSession`](https://developer.xamarin.com/api/type/MonoTouch.Foundation.NSUrlSession/) (HTTP 2.0 capable)</span></span> |
| <span data-ttu-id="4d269-140">macOS/Mono</span><span class="sxs-lookup"><span data-stu-id="4d269-140">macOS/Mono</span></span>                  | <xref:System.Net.HttpWebRequest>                                                          |
| <span data-ttu-id="4d269-141">macOS/.NET Core 1.0-2。0</span><span class="sxs-lookup"><span data-stu-id="4d269-141">macOS/.NET Core 1.0-2.0</span></span>     | <span data-ttu-id="4d269-142">`libcurl`基于 http 传输 (HTTP 2.0 功能) </span><span class="sxs-lookup"><span data-stu-id="4d269-142">`libcurl`-based HTTP transport (HTTP 2.0 capable)</span></span>                                         |
| <span data-ttu-id="4d269-143">Linux/Mono</span><span class="sxs-lookup"><span data-stu-id="4d269-143">Linux/Mono</span></span>                  | <xref:System.Net.HttpWebRequest>                                                          |
| <span data-ttu-id="4d269-144">Linux/.NET Core 1.0-2。0</span><span class="sxs-lookup"><span data-stu-id="4d269-144">Linux/.NET Core 1.0-2.0</span></span>     | <span data-ttu-id="4d269-145">`libcurl`基于 http 传输 (HTTP 2.0 功能) </span><span class="sxs-lookup"><span data-stu-id="4d269-145">`libcurl`-based HTTP transport (HTTP 2.0 capable)</span></span>                                         |
| <span data-ttu-id="4d269-146">.NET Core 2.1 及更高版本</span><span class="sxs-lookup"><span data-stu-id="4d269-146">.NET Core 2.1 and later</span></span>     | <xref:System.Net.Http.SocketsHttpHandler?displayProperty=nameWithType>                    |

<span data-ttu-id="4d269-147">用户还可以 <xref:System.Net.Http.HttpClient> 通过调用 <xref:System.Net.Http.HttpClient.%23ctor*> 采用的构造函数，为配置特定传输 <xref:System.Net.Http.HttpMessageHandler> 。</span><span class="sxs-lookup"><span data-stu-id="4d269-147">Users can also configure a specific transport for <xref:System.Net.Http.HttpClient> by invoking the <xref:System.Net.Http.HttpClient.%23ctor*> constructor that takes an <xref:System.Net.Http.HttpMessageHandler>.</span></span>

### <a name="httpclient-and-net-core"></a><span data-ttu-id="4d269-148">HttpClient 和 .NET Core</span><span class="sxs-lookup"><span data-stu-id="4d269-148">HttpClient and .NET Core</span></span>

<span data-ttu-id="4d269-149">从 .NET Core 2.1 开始， <xref:System.Net.Http.SocketsHttpHandler?displayProperty=nameWithType> 类而不是 `HttpClientHandler` 提供由较高级别的 HTTP 网络类（如）使用的实现 `HttpClient` 。</span><span class="sxs-lookup"><span data-stu-id="4d269-149">Starting with .NET Core 2.1, the <xref:System.Net.Http.SocketsHttpHandler?displayProperty=nameWithType> class instead of `HttpClientHandler` provides the implementation used by higher-level HTTP networking classes such as `HttpClient`.</span></span> <span data-ttu-id="4d269-150">使用可 <xref:System.Net.Http.SocketsHttpHandler> 提供多种优势：</span><span class="sxs-lookup"><span data-stu-id="4d269-150">The use of <xref:System.Net.Http.SocketsHttpHandler> offers a number of advantages:</span></span>

- <span data-ttu-id="4d269-151">对照以前的实现，可以看到显著的性能改进。</span><span class="sxs-lookup"><span data-stu-id="4d269-151">A significant performance improvement when compared with the previous implementation.</span></span>

- <span data-ttu-id="4d269-152">消除了平台依赖项，从而简化了部署和服务。</span><span class="sxs-lookup"><span data-stu-id="4d269-152">The elimination of platform dependencies, which simplifies deployment and servicing.</span></span> <span data-ttu-id="4d269-153">例如， `libcurl` 不再依赖于适用于 macOS 的 .Net core 和适用于 Linux 的 .Net core。</span><span class="sxs-lookup"><span data-stu-id="4d269-153">For example, `libcurl` is no longer a dependency on .NET Core for macOS and .NET Core for Linux.</span></span>

- <span data-ttu-id="4d269-154">各种 .NET 平台的行为一致。</span><span class="sxs-lookup"><span data-stu-id="4d269-154">Consistent behavior across all .NET platforms.</span></span>

<span data-ttu-id="4d269-155">如果不需要此更改，可以通过多种方式将应用程序配置为使用旧版本 <xref:System.Net.Http.HttpClientHandler?displayProperty=nameWithType> ：</span><span class="sxs-lookup"><span data-stu-id="4d269-155">If this change is undesirable, you can configure your application to use the older <xref:System.Net.Http.HttpClientHandler?displayProperty=nameWithType> instead in a number of ways:</span></span>

- <span data-ttu-id="4d269-156">通过调用方法，如下所示 <xref:System.AppContext.SetSwitch%2A?displayProperty=nameWithType> ：</span><span class="sxs-lookup"><span data-stu-id="4d269-156">By calling the <xref:System.AppContext.SetSwitch%2A?displayProperty=nameWithType> method as follows:</span></span>

   ```csharp
   AppContext.SetSwitch("System.Net.Http.UseSocketsHttpHandler", false);
   ```

   ```vb
   AppContext.SetSwitch("System.Net.Http.UseSocketsHttpHandler", False)
   ``` 
- <span data-ttu-id="4d269-157">通过在 `System.Net.Http.UseSocketsHttpHandler` 配置文件的 *.netcore.runtimeconfig.js* 中定义开关：</span><span class="sxs-lookup"><span data-stu-id="4d269-157">By defining the `System.Net.Http.UseSocketsHttpHandler` switch in the *.netcore.runtimeconfig.json* configuration file:</span></span>

  ```json
  "runtimeOptions": {
    "configProperties": {
        "System.Net.Http.UseSocketsHttpHandler": false
    }
  }
  ```
  
- <span data-ttu-id="4d269-158">通过定义名为的环境变量 `DOTNET_SYSTEM_NET_HTTP_USESOCKETSHTTPHANDLER` 并将其设置为 `false` 或0。</span><span class="sxs-lookup"><span data-stu-id="4d269-158">By defining an environment variable named `DOTNET_SYSTEM_NET_HTTP_USESOCKETSHTTPHANDLER` and setting it to either `false` or 0.</span></span>

## Examples  
 [!code-csharp[System.Net.Http.HttpClient#1](~/samples/snippets/csharp/VS_Snippets_Misc/system.net.http.httpclient/cs/source.cs#1)]  
 [!code-vb[System.Net.Http.HttpClient#1](~/samples/snippets/visualbasic/VS_Snippets_Misc/system.net.http.httpclient/vb/source.vb#1)]

 <span data-ttu-id="4d269-159">前面的代码示例使用 `async Task Main()` 入口点。</span><span class="sxs-lookup"><span data-stu-id="4d269-159">The preceding code example uses an `async Task Main()` entry point.</span></span> <span data-ttu-id="4d269-160">该功能需要 c # 7.1 或更高版本。</span><span class="sxs-lookup"><span data-stu-id="4d269-160">That feature requires C# 7.1 or later.</span></span>
 
 ]]></format>
    </remarks>
    <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=245696"><span data-ttu-id="4d269-161">连接到 Web 服务</span><span class="sxs-lookup"><span data-stu-id="4d269-161">Connecting to a web service</span></span></related>
    <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=245697"><span data-ttu-id="4d269-162">快速入门：使用 HttpClient 进行连接</span><span class="sxs-lookup"><span data-stu-id="4d269-162">Quickstart: Connecting using HttpClient</span></span></related>
    <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=245699"><span data-ttu-id="4d269-163">如何使用 HttpClient 处理程序</span><span class="sxs-lookup"><span data-stu-id="4d269-163">How to use HttpClient handlers</span></span></related>
    <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=245698"><span data-ttu-id="4d269-164">如何确保 HttpClient 连接安全</span><span class="sxs-lookup"><span data-stu-id="4d269-164">How to secure HttpClient connections</span></span></related>
    <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=242550"><span data-ttu-id="4d269-165">HttpClient 示例</span><span class="sxs-lookup"><span data-stu-id="4d269-165">HttpClient Sample</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="4d269-166">初始化 <see cref="T:System.Net.Http.HttpClient" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="4d269-166">Initializes a new instance of the <see cref="T:System.Net.Http.HttpClient" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d269-167"><xref:System.Net.Http.HttpClient> 用于在应用程序的整个生存期内实例化一次并重复使用。</span><span class="sxs-lookup"><span data-stu-id="4d269-167"><xref:System.Net.Http.HttpClient> is intended to be instantiated once and re-used throughout the life of an application.</span></span> <span data-ttu-id="4d269-168">实例化每个请求的 HttpClient 类将耗尽重负载下可用的插槽数。</span><span class="sxs-lookup"><span data-stu-id="4d269-168">Instantiating an HttpClient class for every request will exhaust the number of sockets available under heavy loads.</span></span> <span data-ttu-id="4d269-169">这将导致 SocketException 错误。</span><span class="sxs-lookup"><span data-stu-id="4d269-169">This will result in SocketException errors.</span></span> <span data-ttu-id="4d269-170">下面是正确使用 HttpClient 的示例。</span><span class="sxs-lookup"><span data-stu-id="4d269-170">Below is an example using HttpClient correctly.</span></span>  
  
```csharp  
public class GoodController : ApiController  
{  
    private static readonly HttpClient HttpClient;  
  
    static GoodController()  
    {  
        HttpClient = new HttpClient();  
    }  
}  
```

```vb
  Public Class GoodController
    Inherits ApiController  
   
    Private Shared ReadOnly HttpClient As HttpClient
  
    Shared Sub New()  
        HttpClient = New HttpClient()
    End Sub
End Class
```

 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HttpClient ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HttpClient();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="4d269-171">使用释放此实例时释放的 <see cref="T:System.Net.Http.HttpClientHandler" /> 初始化 <see cref="T:System.Net.Http.HttpClient" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="4d269-171">Initializes a new instance of the <see cref="T:System.Net.Http.HttpClient" /> class using a <see cref="T:System.Net.Http.HttpClientHandler" /> that is disposed when this instance is disposed.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[    
## Remarks  
<span data-ttu-id="4d269-172">使用此构造函数等效于调用 [`HttpClient(new HttpClientHandler(), true)`](xref:System.Net.Http.HttpClient.%23ctor(System.Net.Http.HttpMessageHandler,System.Boolean)) 构造函数。</span><span class="sxs-lookup"><span data-stu-id="4d269-172">Using this constructor is equivalent to calling the [`HttpClient(new HttpClientHandler(), true)`](xref:System.Net.Http.HttpClient.%23ctor(System.Net.Http.HttpMessageHandler,System.Boolean)) constructor.</span></span>
]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HttpClient (System.Net.Http.HttpMessageHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Net.Http.HttpMessageHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.#ctor(System.Net.Http.HttpMessageHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (handler As HttpMessageHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HttpClient(System::Net::Http::HttpMessageHandler ^ handler);" />
      <MemberSignature Language="F#" Value="new System.Net.Http.HttpClient : System.Net.Http.HttpMessageHandler -&gt; System.Net.Http.HttpClient" Usage="new System.Net.Http.HttpClient handler" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="handler" Type="System.Net.Http.HttpMessageHandler" />
      </Parameters>
      <Docs>
        <param name="handler"><span data-ttu-id="4d269-173">要用于发送请求的 HTTP 处理程序堆栈。</span><span class="sxs-lookup"><span data-stu-id="4d269-173">The HTTP handler stack to use for sending requests.</span></span></param>
        <summary><span data-ttu-id="4d269-174">使用指定的处理程序初始化 <see cref="T:System.Net.Http.HttpClient" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="4d269-174">Initializes a new instance of the <see cref="T:System.Net.Http.HttpClient" /> class with the specified handler.</span></span> <span data-ttu-id="4d269-175">处理程序在释放此实例时被释放。</span><span class="sxs-lookup"><span data-stu-id="4d269-175">The handler is disposed when this instance is disposed.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[    
## Remarks  
<span data-ttu-id="4d269-176">使用此构造函数等效于调用 [`HttpClient(handler, true)`](xref:System.Net.Http.HttpClient.%23ctor(System.Net.Http.HttpMessageHandler,System.Boolean)) 构造函数。</span><span class="sxs-lookup"><span data-stu-id="4d269-176">Using this constructor is equivalent to calling the [`HttpClient(handler, true)`](xref:System.Net.Http.HttpClient.%23ctor(System.Net.Http.HttpMessageHandler,System.Boolean)) constructor.</span></span>

<span data-ttu-id="4d269-177">指定的 `handler` 将通过调用 [HttpClient](xref:System.Net.Http.HttpMessageInvoker.Dispose)来释放。</span><span class="sxs-lookup"><span data-stu-id="4d269-177">The specified `handler` will be disposed of by calling [HttpClient.Dispose](xref:System.Net.Http.HttpMessageInvoker.Dispose).</span></span>  
]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d269-178"><paramref name="handler" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d269-178">The <paramref name="handler" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HttpClient (System.Net.Http.HttpMessageHandler handler, bool disposeHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Net.Http.HttpMessageHandler handler, bool disposeHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.#ctor(System.Net.Http.HttpMessageHandler,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (handler As HttpMessageHandler, disposeHandler As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HttpClient(System::Net::Http::HttpMessageHandler ^ handler, bool disposeHandler);" />
      <MemberSignature Language="F#" Value="new System.Net.Http.HttpClient : System.Net.Http.HttpMessageHandler * bool -&gt; System.Net.Http.HttpClient" Usage="new System.Net.Http.HttpClient (handler, disposeHandler)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="handler" Type="System.Net.Http.HttpMessageHandler" />
        <Parameter Name="disposeHandler" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="handler"><span data-ttu-id="4d269-179">负责处理 HTTP 响应消息的 <see cref="T:System.Net.Http.HttpMessageHandler" />。</span><span class="sxs-lookup"><span data-stu-id="4d269-179">The <see cref="T:System.Net.Http.HttpMessageHandler" /> responsible for processing the HTTP response messages.</span></span></param>
        <param name="disposeHandler"><span data-ttu-id="4d269-180">如果内部处理程序应由 [HttpClient.Dispose](xref:System.Net.Http.HttpMessageInvoker.Dispose) 释放，则为 <see langword="true" />；如果希望重新使用内部处理程序，则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="4d269-180"><see langword="true" /> if the inner handler should be disposed of by [HttpClient.Dispose](xref:System.Net.Http.HttpMessageInvoker.Dispose); <see langword="false" /> if you intend to reuse the inner handler.</span></span></param>
        <summary><span data-ttu-id="4d269-181">使用提供的处理程序初始化 <see cref="T:System.Net.Http.HttpClient" /> 类的新实例，并指定在释放此实例时是否应释放该处理程序。</span><span class="sxs-lookup"><span data-stu-id="4d269-181">Initializes a new instance of the <see cref="T:System.Net.Http.HttpClient" /> class with the provided handler, and specifies whether that handler should be disposed when this instance is disposed.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d269-182"><paramref name="handler" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d269-182">The <paramref name="handler" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="BaseAddress">
      <MemberSignature Language="C#" Value="public Uri BaseAddress { get; set; }" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Uri BaseAddress" />
      <MemberSignature Language="DocId" Value="P:System.Net.Http.HttpClient.BaseAddress" />
      <MemberSignature Language="VB.NET" Value="Public Property BaseAddress As Uri" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Uri ^ BaseAddress { Uri ^ get(); void set(Uri ^ value); };" />
      <MemberSignature Language="F#" Value="member this.BaseAddress : Uri with get, set" Usage="System.Net.Http.HttpClient.BaseAddress" />
      <MemberSignature Language="C#" Value="public Uri? BaseAddress { get; set; }" FrameworkAlternate="net-5.0" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Uri</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="4d269-183">获取或设置发送请求时使用的 Internet 资源的统一资源标识符 (URI) 的基址。</span><span class="sxs-lookup"><span data-stu-id="4d269-183">Gets or sets the base address of Uniform Resource Identifier (URI) of the Internet resource used when sending requests.</span></span></summary>
        <value><span data-ttu-id="4d269-184">发送请求时使用的 Internet 资源的统一资源标识符 (URI) 的基址。</span><span class="sxs-lookup"><span data-stu-id="4d269-184">The base address of Uniform Resource Identifier (URI) of the Internet resource used when sending requests.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d269-185">当 <xref:System.Net.Http.HttpRequestMessage> 使用相对 Uri 发送时，消息 Uri 将添加到 <xref:System.Net.Http.HttpClient.BaseAddress%2A> 属性中以创建绝对 uri。</span><span class="sxs-lookup"><span data-stu-id="4d269-185">When sending a <xref:System.Net.Http.HttpRequestMessage> with a relative Uri, the message Uri will be added to the <xref:System.Net.Http.HttpClient.BaseAddress%2A> property to create an absolute Uri.</span></span>  
 
 <span data-ttu-id="4d269-186">请注意，在基本 URI 中，最右侧的 "/" 后面的所有字符都将在与消息 URI 结合时排除。</span><span class="sxs-lookup"><span data-stu-id="4d269-186">Note that all characters after the right-most "/" in the base URI are excluded when combined with the message URI.</span></span> <span data-ttu-id="4d269-187">请参阅 [RFC 3986](https://tools.ietf.org/html/rfc3986) 统一资源标识符 (URI) 通用语法规范。</span><span class="sxs-lookup"><span data-stu-id="4d269-187">See [RFC 3986](https://tools.ietf.org/html/rfc3986) Uniform Resource Identifier (URI) Generic Syntax specification.</span></span>
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CancelPendingRequests">
      <MemberSignature Language="C#" Value="public void CancelPendingRequests ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CancelPendingRequests() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.CancelPendingRequests" />
      <MemberSignature Language="VB.NET" Value="Public Sub CancelPendingRequests ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CancelPendingRequests();" />
      <MemberSignature Language="F#" Value="member this.CancelPendingRequests : unit -&gt; unit" Usage="httpClient.CancelPendingRequests " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="4d269-188">取消该实例所有挂起的请求。</span><span class="sxs-lookup"><span data-stu-id="4d269-188">Cancel all pending requests on this instance.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d269-189">调用此方法后， <xref:System.Net.Http.HttpClient> 仍可使用实例执行其他请求。</span><span class="sxs-lookup"><span data-stu-id="4d269-189">After calling this method, the <xref:System.Net.Http.HttpClient> instance can still be used to execute additional requests.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultProxy">
      <MemberSignature Language="C#" Value="public static System.Net.IWebProxy DefaultProxy { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Net.IWebProxy DefaultProxy" />
      <MemberSignature Language="DocId" Value="P:System.Net.Http.HttpClient.DefaultProxy" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property DefaultProxy As IWebProxy" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Net::IWebProxy ^ DefaultProxy { System::Net::IWebProxy ^ get(); void set(System::Net::IWebProxy ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DefaultProxy : System.Net.IWebProxy with get, set" Usage="System.Net.Http.HttpClient.DefaultProxy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.IWebProxy</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="4d269-190">获取或设置全局 HTTP 代理。</span><span class="sxs-lookup"><span data-stu-id="4d269-190">Gets or sets the global Http proxy.</span></span></summary>
        <value><span data-ttu-id="4d269-191">用于实例化的每个调用所使用的代理 <see cref="T:System.Net.HttpWebRequest" /> 。</span><span class="sxs-lookup"><span data-stu-id="4d269-191">A proxy used by every call that instantiates a <see cref="T:System.Net.HttpWebRequest" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks
<span data-ttu-id="4d269-192"> <xref:System.Net.Http.HttpClient>   如果在  <xref:System.Net.Http.HttpClientHandler> 通过其构造函数传递的中未显式设置代理，则此静态属性将确定所有实例都使用的默认代理。</span><span class="sxs-lookup"><span data-stu-id="4d269-192">This static property determines the default proxy that all <xref:System.Net.Http.HttpClient> instances use if no proxy is set explicitly in the <xref:System.Net.Http.HttpClientHandler> passed through its constructor.</span></span> 

<span data-ttu-id="4d269-193">此属性返回的默认实例将根据你的平台，初始化以下一组不同的规则：</span><span class="sxs-lookup"><span data-stu-id="4d269-193">The default instance returned by this property will initialize following a different set of rules depending on your platform:</span></span>
* <span data-ttu-id="4d269-194">**对于 Windows：** 从环境变量中读取代理配置，或者从用户的代理设置中读取代理配置（如果未定义）。</span><span class="sxs-lookup"><span data-stu-id="4d269-194">**For Windows:** Reads proxy configuration from environment variables or, if those are not defined, from the user's proxy settings.</span></span>

* <span data-ttu-id="4d269-195">**对于 macOS：** 从环境变量中读取代理配置，如果未定义，则从系统的代理设置中读取。</span><span class="sxs-lookup"><span data-stu-id="4d269-195">**For macOS:** Reads proxy configuration from environment variables or, if those are not defined, from the system's proxy settings.</span></span>

* <span data-ttu-id="4d269-196">**对于 Linux：** 从环境变量读取代理配置，或者，如果未定义这些配置，此属性将初始化绕过所有地址的非配置实例。</span><span class="sxs-lookup"><span data-stu-id="4d269-196">**For Linux:** Reads proxy configuration from environment variables or, in case those are not defined, this property initializes a non-configured instance that bypasses all addresses.</span></span>

<span data-ttu-id="4d269-197">用于 `DefaultProxy` 在 Windows 和基于 Unix 的平台上进行初始化的环境变量包括：</span><span class="sxs-lookup"><span data-stu-id="4d269-197">The environment variables used for `DefaultProxy` initialization on Windows and Unix-based platforms are:</span></span>
* <span data-ttu-id="4d269-198">HTTP_PROXY： HTTP 请求上使用的代理服务器。</span><span class="sxs-lookup"><span data-stu-id="4d269-198">HTTP_PROXY: the proxy server used on HTTP requests.</span></span>
* <span data-ttu-id="4d269-199">HTTPS_PROXY：对 HTTPS 请求使用的代理服务器。</span><span class="sxs-lookup"><span data-stu-id="4d269-199">HTTPS_PROXY: the proxy server used on HTTPS requests.</span></span>
* <span data-ttu-id="4d269-200">ALL_PROXY：未定义 HTTP_PROXY 和/或 HTTPS_PROXY 时，在 HTTP 和/或 HTTPS 请求上使用的代理服务器。</span><span class="sxs-lookup"><span data-stu-id="4d269-200">ALL_PROXY: the proxy server used on HTTP and/or HTTPS requests in case HTTP_PROXY and/or HTTPS_PROXY are not defined.</span></span>
* <span data-ttu-id="4d269-201">NO_PROXY：应从代理中排除的主机名的逗号分隔列表。</span><span class="sxs-lookup"><span data-stu-id="4d269-201">NO_PROXY: a comma-separated list of hostnames that should be excluded from proxying.</span></span>

<span data-ttu-id="4d269-202">在环境变量区分大小写的系统上，变量名称可以全部小写或全部大写。</span><span class="sxs-lookup"><span data-stu-id="4d269-202">On systems where environment variables are case-sensitive, the variable names may be all lowercase or all uppercase.</span></span>  <span data-ttu-id="4d269-203">首先检查小写名称。</span><span class="sxs-lookup"><span data-stu-id="4d269-203">The lowercase names are checked first.</span></span>

<span data-ttu-id="4d269-204">代理服务器可以是主机名或 IP 地址，可以后跟冒号和端口号，也可以是 http URL （可选），其中包括用于代理身份验证的用户名和密码。</span><span class="sxs-lookup"><span data-stu-id="4d269-204">The proxy server may be a hostname or IP address, optionally followed by a colon and port number, or it may be an http URL, optionally including a username and password for proxy authentication.</span></span> <span data-ttu-id="4d269-205">URL 必须以开头，而 `http` 不 `https` 能在主机名、IP 或端口后面包含任何文本。</span><span class="sxs-lookup"><span data-stu-id="4d269-205">The URL must be start with `http`, not `https`, and cannot include any text after the hostname, IP, or port.</span></span>
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d269-206">传递的值不能为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d269-206">The value passed cannot be <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DefaultRequestHeaders">
      <MemberSignature Language="C#" Value="public System.Net.Http.Headers.HttpRequestHeaders DefaultRequestHeaders { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.Http.Headers.HttpRequestHeaders DefaultRequestHeaders" />
      <MemberSignature Language="DocId" Value="P:System.Net.Http.HttpClient.DefaultRequestHeaders" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DefaultRequestHeaders As HttpRequestHeaders" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::Http::Headers::HttpRequestHeaders ^ DefaultRequestHeaders { System::Net::Http::Headers::HttpRequestHeaders ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DefaultRequestHeaders : System.Net.Http.Headers.HttpRequestHeaders" Usage="System.Net.Http.HttpClient.DefaultRequestHeaders" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Http.Headers.HttpRequestHeaders</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="4d269-207">获取与每个请求一起发送的标题。</span><span class="sxs-lookup"><span data-stu-id="4d269-207">Gets the headers which should be sent with each request.</span></span></summary>
        <value><span data-ttu-id="4d269-208">应与每一个请求一起发送的标题。</span><span class="sxs-lookup"><span data-stu-id="4d269-208">The headers which should be sent with each request.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d269-209">此属性上设置的标头不需要再次设置为请求消息。</span><span class="sxs-lookup"><span data-stu-id="4d269-209">Headers set on this property don't need to be set on request messages again.</span></span> <span data-ttu-id="4d269-210">`DefaultRequestHeaders` 由于存在未处理的请求，不应进行修改，因为它不是线程安全的。</span><span class="sxs-lookup"><span data-stu-id="4d269-210">`DefaultRequestHeaders` should not be modified while there are outstanding requests, because it is not thread-safe.</span></span>
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultRequestVersion">
      <MemberSignature Language="C#" Value="public Version DefaultRequestVersion { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Version DefaultRequestVersion" />
      <MemberSignature Language="DocId" Value="P:System.Net.Http.HttpClient.DefaultRequestVersion" />
      <MemberSignature Language="VB.NET" Value="Public Property DefaultRequestVersion As Version" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Version ^ DefaultRequestVersion { Version ^ get(); void set(Version ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DefaultRequestVersion : Version with get, set" Usage="System.Net.Http.HttpClient.DefaultRequestVersion" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Version</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="4d269-211">获取或设置对此 <see cref="T:System.Net.Http.HttpClient" /> 实例发出的后续请求使用的默认 HTTP 版本。</span><span class="sxs-lookup"><span data-stu-id="4d269-211">Gets or sets the default HTTP version used on subsequent requests made by this <see cref="T:System.Net.Http.HttpClient" /> instance.</span></span></summary>
        <value><span data-ttu-id="4d269-212">用于此实例发出的任何请求的默认版本 <see cref="T:System.Net.Http.HttpClient" /> 。</span><span class="sxs-lookup"><span data-stu-id="4d269-212">The default version to use for any requests made with this <see cref="T:System.Net.Http.HttpClient" /> instance.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
<span data-ttu-id="4d269-213">`DefaultRequestVersion` 默认设置为 <xref:System.Net.HttpVersion.Version11?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="4d269-213">`DefaultRequestVersion` is <xref:System.Net.HttpVersion.Version11?displayProperty=nameWithType> by default.</span></span>

<span data-ttu-id="4d269-214">`DefaultRequestVersion`属性指定默认的 HTTP 版本，该版本用于 <xref:System.Net.Http.HttpClient> 在构造要发送的时使用此实例发送的请求 <xref:System.Net.Http.HttpRequestMessage> ，尤其是对 <xref:System.Net.Http.HttpClient.DeleteAsync%2A> 、 <xref:System.Net.Http.HttpClient.GetAsync%2A> 、 <xref:System.Net.Http.HttpClient.GetByteArrayAsync%2A> <xref:System.Net.Http.HttpClient.GetStreamAsync%2A> <xref:System.Net.Http.HttpClient.GetStringAsync%2A> <xref:System.Net.Http.HttpClient.PatchAsync%2A> <xref:System.Net.Http.HttpClient.PostAsync%2A> <xref:System.Net.Http.HttpClient.PutAsync%2A> 、、、、和等方法的调用。</span><span class="sxs-lookup"><span data-stu-id="4d269-214">The `DefaultRequestVersion` property specifies the default HTTP version to use for requests sent using this <xref:System.Net.Http.HttpClient> instance when it constructs the <xref:System.Net.Http.HttpRequestMessage> to send, specifically with calls to methods such as <xref:System.Net.Http.HttpClient.DeleteAsync%2A>, <xref:System.Net.Http.HttpClient.GetAsync%2A>, <xref:System.Net.Http.HttpClient.GetByteArrayAsync%2A>, <xref:System.Net.Http.HttpClient.GetStreamAsync%2A>, <xref:System.Net.Http.HttpClient.GetStringAsync%2A>, <xref:System.Net.Http.HttpClient.PatchAsync%2A>, <xref:System.Net.Http.HttpClient.PostAsync%2A>, and <xref:System.Net.Http.HttpClient.PutAsync%2A>.</span></span>

<span data-ttu-id="4d269-215">`DefaultRequestVersion`属性不适用于 <xref:System.Net.Http.HttpClient.SendAsync%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="4d269-215">The `DefaultRequestVersion` property doesn't apply to the <xref:System.Net.Http.HttpClient.SendAsync%2A> method.</span></span> <span data-ttu-id="4d269-216"><xref:System.Net.Http.HttpRequestMessage>作为参数传递给方法的参数 <xref:System.Net.Http.HttpClient.SendAsync%2A> 具有其自己的 `Version` 属性，该属性控制用于请求的 HTTP 版本。</span><span class="sxs-lookup"><span data-stu-id="4d269-216">The <xref:System.Net.Http.HttpRequestMessage> parameter passed as the argument to the <xref:System.Net.Http.HttpClient.SendAsync%2A> method has its own `Version` property that controls the HTTP version used for the request.</span></span>

<span data-ttu-id="4d269-217">`DefaultRequestVersion`只要 <xref:System.Net.Http.HttpClient> 实例尚未启动任何请求，就可以更改该属性。</span><span class="sxs-lookup"><span data-stu-id="4d269-217">The `DefaultRequestVersion` property can be changed as long as the <xref:System.Net.Http.HttpClient> instance has not started any request.</span></span>
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d269-218">在设置操作中，<see langword="DefaultRequestVersion" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d269-218">In a set operation, <see langword="DefaultRequestVersion" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4d269-219"><see cref="T:System.Net.Http.HttpClient" /> 实例已启动一个或多个请求。</span><span class="sxs-lookup"><span data-stu-id="4d269-219">The <see cref="T:System.Net.Http.HttpClient" /> instance has already started one or more requests.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="4d269-220"><see cref="T:System.Net.Http.HttpClient" /> 实例已被释放。</span><span class="sxs-lookup"><span data-stu-id="4d269-220">The <see cref="T:System.Net.Http.HttpClient" /> instance has already been disposed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DefaultVersionPolicy">
      <MemberSignature Language="C#" Value="public System.Net.Http.HttpVersionPolicy DefaultVersionPolicy { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Net.Http.HttpVersionPolicy DefaultVersionPolicy" />
      <MemberSignature Language="DocId" Value="P:System.Net.Http.HttpClient.DefaultVersionPolicy" />
      <MemberSignature Language="VB.NET" Value="Public Property DefaultVersionPolicy As HttpVersionPolicy" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::Http::HttpVersionPolicy DefaultVersionPolicy { System::Net::Http::HttpVersionPolicy get(); void set(System::Net::Http::HttpVersionPolicy value); };" />
      <MemberSignature Language="F#" Value="member this.DefaultVersionPolicy : System.Net.Http.HttpVersionPolicy with get, set" Usage="System.Net.Http.HttpClient.DefaultVersionPolicy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Http.HttpVersionPolicy</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="4d269-221">获取或设置便捷方法中隐式创建的请求的默认版本策略，例如 <see cref="M:System.Net.Http.HttpClient.GetAsync(System.String)" /> 和 <see cref="M:System.Net.Http.HttpClient.PostAsync(System.String,System.Net.Http.HttpContent)" />。</span><span class="sxs-lookup"><span data-stu-id="4d269-221">Gets or sets the default version policy for implicitly created requests in convenience methods, for example, <see cref="M:System.Net.Http.HttpClient.GetAsync(System.String)" /> and <see cref="M:System.Net.Http.HttpClient.PostAsync(System.String,System.Net.Http.HttpContent)" />.</span></span></summary>
        <value><span data-ttu-id="4d269-222">建立 HTTP 连接时使用的 HttpVersionPolicy。</span><span class="sxs-lookup"><span data-stu-id="4d269-222">The HttpVersionPolicy used when the HTTP connection is established.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
<span data-ttu-id="4d269-223">此属性对接受的任何或重载不起作用 <xref:System.Net.Http.HttpClient.Send%2A> <xref:System.Net.Http.HttpClient.SendAsync%2A> <xref:System.Net.Http.HttpRequestMessage?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="4d269-223">This property has no effect on any of the <xref:System.Net.Http.HttpClient.Send%2A> or <xref:System.Net.Http.HttpClient.SendAsync%2A> overloads that accept an <xref:System.Net.Http.HttpRequestMessage?displayProperty=nameWithType>.</span></span>
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="DeleteAsync">
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="4d269-224">以异步操作将 DELETE 请求发送给指定 URI。</span><span class="sxs-lookup"><span data-stu-id="4d269-224">Send a DELETE request to the specified Uri as an asynchronous operation.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DeleteAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; DeleteAsync (string requestUri);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; DeleteAsync(string requestUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.DeleteAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function DeleteAsync (requestUri As String) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ DeleteAsync(System::String ^ requestUri);" />
      <MemberSignature Language="F#" Value="member this.DeleteAsync : string -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.DeleteAsync requestUri" />
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; DeleteAsync (string? requestUri);" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="4d269-225">请求发送到的 URI。</span><span class="sxs-lookup"><span data-stu-id="4d269-225">The Uri the request is sent to.</span></span></param>
        <summary><span data-ttu-id="4d269-226">以异步操作将 DELETE 请求发送给指定 URI。</span><span class="sxs-lookup"><span data-stu-id="4d269-226">Send a DELETE request to the specified Uri as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="4d269-227">表示异步操作的任务对象。</span><span class="sxs-lookup"><span data-stu-id="4d269-227">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d269-228">此操作不会阻止。</span><span class="sxs-lookup"><span data-stu-id="4d269-228">This operation will not block.</span></span> <span data-ttu-id="4d269-229">返回 <xref:System.Threading.Tasks.Task%601> 的对象将在整个响应 (包括内容) 读取后完成。</span><span class="sxs-lookup"><span data-stu-id="4d269-229">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  

> [!NOTE]
> <span data-ttu-id="4d269-230">在超时情况下，不同的 .NET 实现会引发不同的异常。</span><span class="sxs-lookup"><span data-stu-id="4d269-230">In case of timeout, different exceptions are thrown on different .NET implementations.</span></span>
> - <span data-ttu-id="4d269-231"><xref:System.Net.Http.HttpRequestException> 所有适用的 .NET Framework 版本都将引发。</span><span class="sxs-lookup"><span data-stu-id="4d269-231"><xref:System.Net.Http.HttpRequestException> is thrown on all applicable .NET Framework versions.</span></span>
> - <span data-ttu-id="4d269-232"><xref:System.Threading.Tasks.TaskCanceledException> 在所有适用的 .NET Core 版本上都不会引发任何内部异常。</span><span class="sxs-lookup"><span data-stu-id="4d269-232"><xref:System.Threading.Tasks.TaskCanceledException> without any inner exception is thrown on all applicable .NET Core versions.</span></span>
> - <span data-ttu-id="4d269-233"><xref:System.Threading.Tasks.TaskCanceledException><xref:System.TimeoutException>在 .net 5.0 和更高版本上，将引发嵌套的。</span><span class="sxs-lookup"><span data-stu-id="4d269-233"><xref:System.Threading.Tasks.TaskCanceledException> that nests a <xref:System.TimeoutException> is thrown on .NET 5.0 and later versions.</span></span>
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4d269-234">请求消息已由 <see cref="T:System.Net.Http.HttpClient" /> 实例发送。</span><span class="sxs-lookup"><span data-stu-id="4d269-234">The request message was already sent by the <see cref="T:System.Net.Http.HttpClient" /> instance.</span></span>

<span data-ttu-id="4d269-235">或</span><span class="sxs-lookup"><span data-stu-id="4d269-235">-or-</span></span>

<span data-ttu-id="4d269-236"><paramref name="requestUri" /> 不是一个绝对 URI。</span><span class="sxs-lookup"><span data-stu-id="4d269-236">The <paramref name="requestUri" /> is not an absolute URI.</span></span>

<span data-ttu-id="4d269-237">或</span><span class="sxs-lookup"><span data-stu-id="4d269-237">-or-</span></span>

<span data-ttu-id="4d269-238">未设置 <see cref="P:System.Net.Http.HttpClient.BaseAddress" />。</span><span class="sxs-lookup"><span data-stu-id="4d269-238"><see cref="P:System.Net.Http.HttpClient.BaseAddress" /> is not set.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="4d269-239">由于基础问题（如网络连接性、DNS 失败、服务器证书验证或超时），请求失败。</span><span class="sxs-lookup"><span data-stu-id="4d269-239">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException"><span data-ttu-id="4d269-240">仅限 .NET Core 和 .NET 5.0 及更高版本：请求因超时而失败。</span><span class="sxs-lookup"><span data-stu-id="4d269-240">.NET Core and .NET 5.0 and later only: The request failed due to timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DeleteAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; DeleteAsync (Uri requestUri);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; DeleteAsync(class System.Uri requestUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.DeleteAsync(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Function DeleteAsync (requestUri As Uri) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ DeleteAsync(Uri ^ requestUri);" />
      <MemberSignature Language="F#" Value="member this.DeleteAsync : Uri -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.DeleteAsync requestUri" />
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; DeleteAsync (Uri? requestUri);" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="4d269-241">请求发送到的 URI。</span><span class="sxs-lookup"><span data-stu-id="4d269-241">The Uri the request is sent to.</span></span></param>
        <summary><span data-ttu-id="4d269-242">以异步操作将 DELETE 请求发送给指定 URI。</span><span class="sxs-lookup"><span data-stu-id="4d269-242">Send a DELETE request to the specified Uri as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="4d269-243">表示异步操作的任务对象。</span><span class="sxs-lookup"><span data-stu-id="4d269-243">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d269-244">此操作不会阻止。</span><span class="sxs-lookup"><span data-stu-id="4d269-244">This operation will not block.</span></span> <span data-ttu-id="4d269-245">返回 <xref:System.Threading.Tasks.Task%601> 的对象将在整个响应 (包括内容) 读取后完成。</span><span class="sxs-lookup"><span data-stu-id="4d269-245">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  

> [!NOTE]
> <span data-ttu-id="4d269-246">在超时情况下，不同的 .NET 实现会引发不同的异常。</span><span class="sxs-lookup"><span data-stu-id="4d269-246">In case of timeout, different exceptions are thrown on different .NET implementations.</span></span>
> - <span data-ttu-id="4d269-247"><xref:System.Net.Http.HttpRequestException> 所有适用的 .NET Framework 版本都将引发。</span><span class="sxs-lookup"><span data-stu-id="4d269-247"><xref:System.Net.Http.HttpRequestException> is thrown on all applicable .NET Framework versions.</span></span>
> - <span data-ttu-id="4d269-248"><xref:System.Threading.Tasks.TaskCanceledException> 在所有适用的 .NET Core 版本上都不会引发任何内部异常。</span><span class="sxs-lookup"><span data-stu-id="4d269-248"><xref:System.Threading.Tasks.TaskCanceledException> without any inner exception is thrown on all applicable .NET Core versions.</span></span>
> - <span data-ttu-id="4d269-249"><xref:System.Threading.Tasks.TaskCanceledException><xref:System.TimeoutException>在 .net 5.0 和更高版本上，将引发嵌套的。</span><span class="sxs-lookup"><span data-stu-id="4d269-249"><xref:System.Threading.Tasks.TaskCanceledException> that nests a <xref:System.TimeoutException> is thrown on .NET 5.0 and later versions.</span></span>
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4d269-250">请求消息已由 <see cref="T:System.Net.Http.HttpClient" /> 实例发送。</span><span class="sxs-lookup"><span data-stu-id="4d269-250">The request message was already sent by the <see cref="T:System.Net.Http.HttpClient" /> instance.</span></span>

<span data-ttu-id="4d269-251">或</span><span class="sxs-lookup"><span data-stu-id="4d269-251">-or-</span></span>

<span data-ttu-id="4d269-252"><paramref name="requestUri" /> 不是一个绝对 URI。</span><span class="sxs-lookup"><span data-stu-id="4d269-252">The <paramref name="requestUri" /> is not an absolute URI.</span></span>

<span data-ttu-id="4d269-253">或</span><span class="sxs-lookup"><span data-stu-id="4d269-253">-or-</span></span>

<span data-ttu-id="4d269-254">未设置 <see cref="P:System.Net.Http.HttpClient.BaseAddress" />。</span><span class="sxs-lookup"><span data-stu-id="4d269-254"><see cref="P:System.Net.Http.HttpClient.BaseAddress" /> is not set.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="4d269-255">由于基础问题（如网络连接性、DNS 失败、服务器证书验证或超时），请求失败。</span><span class="sxs-lookup"><span data-stu-id="4d269-255">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException"><span data-ttu-id="4d269-256">仅限 .NET Core 和 .NET 5.0 及更高版本：请求因超时而失败。</span><span class="sxs-lookup"><span data-stu-id="4d269-256">.NET Core and .NET 5.0 and later only: The request failed due to timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DeleteAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; DeleteAsync (string requestUri, System.Threading.CancellationToken cancellationToken);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; DeleteAsync(string requestUri, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.DeleteAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function DeleteAsync (requestUri As String, cancellationToken As CancellationToken) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ DeleteAsync(System::String ^ requestUri, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.DeleteAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.DeleteAsync (requestUri, cancellationToken)" />
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; DeleteAsync (string? requestUri, System.Threading.CancellationToken cancellationToken);" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="4d269-257">请求发送到的 URI。</span><span class="sxs-lookup"><span data-stu-id="4d269-257">The Uri the request is sent to.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="4d269-258">可由其他对象或线程用以接收取消通知的取消标记。</span><span class="sxs-lookup"><span data-stu-id="4d269-258">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</span></span></param>
        <summary><span data-ttu-id="4d269-259">用以异步操作的取消标记发送 DELETE 请求到指定的 URI。</span><span class="sxs-lookup"><span data-stu-id="4d269-259">Send a DELETE request to the specified Uri with a cancellation token as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="4d269-260">表示异步操作的任务对象。</span><span class="sxs-lookup"><span data-stu-id="4d269-260">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d269-261">此操作不会阻止。</span><span class="sxs-lookup"><span data-stu-id="4d269-261">This operation will not block.</span></span> <span data-ttu-id="4d269-262">返回 <xref:System.Threading.Tasks.Task%601> 的对象将在整个响应 (包括内容) 读取后完成。</span><span class="sxs-lookup"><span data-stu-id="4d269-262">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  

> [!NOTE]
> <span data-ttu-id="4d269-263">在超时情况下，不同的 .NET 实现会引发不同的异常。</span><span class="sxs-lookup"><span data-stu-id="4d269-263">In case of timeout, different exceptions are thrown on different .NET implementations.</span></span>
> - <span data-ttu-id="4d269-264"><xref:System.Net.Http.HttpRequestException> 所有适用的 .NET Framework 版本都将引发。</span><span class="sxs-lookup"><span data-stu-id="4d269-264"><xref:System.Net.Http.HttpRequestException> is thrown on all applicable .NET Framework versions.</span></span>
> - <span data-ttu-id="4d269-265"><xref:System.Threading.Tasks.TaskCanceledException> 在所有适用的 .NET Core 版本上都不会引发任何内部异常。</span><span class="sxs-lookup"><span data-stu-id="4d269-265"><xref:System.Threading.Tasks.TaskCanceledException> without any inner exception is thrown on all applicable .NET Core versions.</span></span>
> - <span data-ttu-id="4d269-266"><xref:System.Threading.Tasks.TaskCanceledException><xref:System.TimeoutException>在 .net 5.0 和更高版本上，将引发嵌套的。</span><span class="sxs-lookup"><span data-stu-id="4d269-266"><xref:System.Threading.Tasks.TaskCanceledException> that nests a <xref:System.TimeoutException> is thrown on .NET 5.0 and later versions.</span></span>
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4d269-267">请求消息已由 <see cref="T:System.Net.Http.HttpClient" /> 实例发送。</span><span class="sxs-lookup"><span data-stu-id="4d269-267">The request message was already sent by the <see cref="T:System.Net.Http.HttpClient" /> instance.</span></span>

<span data-ttu-id="4d269-268">或</span><span class="sxs-lookup"><span data-stu-id="4d269-268">-or-</span></span>

<span data-ttu-id="4d269-269"><paramref name="requestUri" /> 不是一个绝对 URI。</span><span class="sxs-lookup"><span data-stu-id="4d269-269">The <paramref name="requestUri" /> is not an absolute URI.</span></span>

<span data-ttu-id="4d269-270">或</span><span class="sxs-lookup"><span data-stu-id="4d269-270">-or-</span></span>

<span data-ttu-id="4d269-271">未设置 <see cref="P:System.Net.Http.HttpClient.BaseAddress" />。</span><span class="sxs-lookup"><span data-stu-id="4d269-271"><see cref="P:System.Net.Http.HttpClient.BaseAddress" /> is not set.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="4d269-272">由于基础问题（如网络连接性、DNS 失败、服务器证书验证或超时），请求失败。</span><span class="sxs-lookup"><span data-stu-id="4d269-272">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException"><span data-ttu-id="4d269-273">仅限 .NET Core 和 .NET 5.0 及更高版本：请求因超时而失败。</span><span class="sxs-lookup"><span data-stu-id="4d269-273">.NET Core and .NET 5.0 and later only: The request failed due to timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DeleteAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; DeleteAsync (Uri requestUri, System.Threading.CancellationToken cancellationToken);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; DeleteAsync(class System.Uri requestUri, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.DeleteAsync(System.Uri,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function DeleteAsync (requestUri As Uri, cancellationToken As CancellationToken) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ DeleteAsync(Uri ^ requestUri, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.DeleteAsync : Uri * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.DeleteAsync (requestUri, cancellationToken)" />
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; DeleteAsync (Uri? requestUri, System.Threading.CancellationToken cancellationToken);" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="4d269-274">请求发送到的 URI。</span><span class="sxs-lookup"><span data-stu-id="4d269-274">The Uri the request is sent to.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="4d269-275">可由其他对象或线程用以接收取消通知的取消标记。</span><span class="sxs-lookup"><span data-stu-id="4d269-275">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</span></span></param>
        <summary><span data-ttu-id="4d269-276">用以异步操作的取消标记发送 DELETE 请求到指定的 URI。</span><span class="sxs-lookup"><span data-stu-id="4d269-276">Send a DELETE request to the specified Uri with a cancellation token as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="4d269-277">表示异步操作的任务对象。</span><span class="sxs-lookup"><span data-stu-id="4d269-277">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d269-278">此操作不会阻止。</span><span class="sxs-lookup"><span data-stu-id="4d269-278">This operation will not block.</span></span> <span data-ttu-id="4d269-279">返回 <xref:System.Threading.Tasks.Task%601> 的对象将在整个响应 (包括内容) 读取后完成。</span><span class="sxs-lookup"><span data-stu-id="4d269-279">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  

> [!NOTE]
> <span data-ttu-id="4d269-280">在超时情况下，不同的 .NET 实现会引发不同的异常。</span><span class="sxs-lookup"><span data-stu-id="4d269-280">In case of timeout, different exceptions are thrown on different .NET implementations.</span></span>
> - <span data-ttu-id="4d269-281"><xref:System.Net.Http.HttpRequestException> 所有适用的 .NET Framework 版本都将引发。</span><span class="sxs-lookup"><span data-stu-id="4d269-281"><xref:System.Net.Http.HttpRequestException> is thrown on all applicable .NET Framework versions.</span></span>
> - <span data-ttu-id="4d269-282"><xref:System.Threading.Tasks.TaskCanceledException> 在所有适用的 .NET Core 版本上都不会引发任何内部异常。</span><span class="sxs-lookup"><span data-stu-id="4d269-282"><xref:System.Threading.Tasks.TaskCanceledException> without any inner exception is thrown on all applicable .NET Core versions.</span></span>
> - <span data-ttu-id="4d269-283"><xref:System.Threading.Tasks.TaskCanceledException><xref:System.TimeoutException>在 .net 5.0 和更高版本上，将引发嵌套的。</span><span class="sxs-lookup"><span data-stu-id="4d269-283"><xref:System.Threading.Tasks.TaskCanceledException> that nests a <xref:System.TimeoutException> is thrown on .NET 5.0 and later versions.</span></span>
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4d269-284">请求消息已由 <see cref="T:System.Net.Http.HttpClient" /> 实例发送。</span><span class="sxs-lookup"><span data-stu-id="4d269-284">The request message was already sent by the <see cref="T:System.Net.Http.HttpClient" /> instance.</span></span>

<span data-ttu-id="4d269-285">或</span><span class="sxs-lookup"><span data-stu-id="4d269-285">-or-</span></span>

<span data-ttu-id="4d269-286"><paramref name="requestUri" /> 不是一个绝对 URI。</span><span class="sxs-lookup"><span data-stu-id="4d269-286">The <paramref name="requestUri" /> is not an absolute URI.</span></span>

<span data-ttu-id="4d269-287">或</span><span class="sxs-lookup"><span data-stu-id="4d269-287">-or-</span></span>

<span data-ttu-id="4d269-288">未设置 <see cref="P:System.Net.Http.HttpClient.BaseAddress" />。</span><span class="sxs-lookup"><span data-stu-id="4d269-288"><see cref="P:System.Net.Http.HttpClient.BaseAddress" /> is not set.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="4d269-289">由于基础问题（如网络连接性、DNS 失败、服务器证书验证或超时），请求失败。</span><span class="sxs-lookup"><span data-stu-id="4d269-289">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException"><span data-ttu-id="4d269-290">仅限 .NET Core 和 .NET 5.0 及更高版本：请求因超时而失败。</span><span class="sxs-lookup"><span data-stu-id="4d269-290">.NET Core and .NET 5.0 and later only: The request failed due to timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="httpClient.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing"><span data-ttu-id="4d269-291">如果释放托管资源和非托管资源，则为 <see langword="true" />；如果仅释放非托管资源，则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="4d269-291"><see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to releases only unmanaged resources.</span></span></param>
        <summary><span data-ttu-id="4d269-292">释放由 <see cref="T:System.Net.Http.HttpClient" /> 使用的非托管资源，并可根据需要释放托管资源。</span><span class="sxs-lookup"><span data-stu-id="4d269-292">Releases the unmanaged resources used by the <see cref="T:System.Net.Http.HttpClient" /> and optionally disposes of the managed resources.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d269-293">此方法由公共 `Dispose()` 方法和 <xref:System.Object.Finalize%2A> 方法调用。</span><span class="sxs-lookup"><span data-stu-id="4d269-293">This method is called by the public `Dispose()` method and the <xref:System.Object.Finalize%2A> method.</span></span> <span data-ttu-id="4d269-294">`Dispose()` 调用受保护的 `Dispose(Boolean)` 方法，并将 `disposing` 参数设置为 `true` 。</span><span class="sxs-lookup"><span data-stu-id="4d269-294">`Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`.</span></span> <span data-ttu-id="4d269-295"><xref:System.Object.Finalize%2A>`Dispose`在设置为的情况调用 `disposing` `false` 。</span><span class="sxs-lookup"><span data-stu-id="4d269-295"><xref:System.Object.Finalize%2A> invokes `Dispose` with `disposing` set to `false`.</span></span>  
  
 <span data-ttu-id="4d269-296">当 `disposing` 参数为 `true` 时，此方法释放该 <xref:System.Net.Http.HttpClient> 引用的、由任何托管对象持有的全部资源。</span><span class="sxs-lookup"><span data-stu-id="4d269-296">When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Net.Http.HttpClient> references.</span></span> <span data-ttu-id="4d269-297">此方法调用每个引用对象的 `Dispose()` 方法。</span><span class="sxs-lookup"><span data-stu-id="4d269-297">This method invokes the `Dispose()` method of each referenced object.</span></span>  
  
 <span data-ttu-id="4d269-298">调用此方法时，将 <xref:System.Net.Http.HttpClient.CancelPendingRequests%2A> 调用方法以中止所有挂起的请求。</span><span class="sxs-lookup"><span data-stu-id="4d269-298">When this method is called, the <xref:System.Net.Http.HttpClient.CancelPendingRequests%2A> method is called to abort all pending requests.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetAsync">
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="4d269-299">以异步操作将 GET 请求发送给指定 URI。</span><span class="sxs-lookup"><span data-stu-id="4d269-299">Send a GET request to the specified Uri as an asynchronous operation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d269-300">操作不会阻止。</span><span class="sxs-lookup"><span data-stu-id="4d269-300">The operation will not block.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; GetAsync (string requestUri);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; GetAsync(string requestUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAsync (requestUri As String) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ GetAsync(System::String ^ requestUri);" />
      <MemberSignature Language="F#" Value="member this.GetAsync : string -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.GetAsync requestUri" />
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; GetAsync (string? requestUri);" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="4d269-301">请求发送到的 URI。</span><span class="sxs-lookup"><span data-stu-id="4d269-301">The Uri the request is sent to.</span></span></param>
        <summary><span data-ttu-id="4d269-302">以异步操作将 GET 请求发送给指定 URI。</span><span class="sxs-lookup"><span data-stu-id="4d269-302">Send a GET request to the specified Uri as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="4d269-303">表示异步操作的任务对象。</span><span class="sxs-lookup"><span data-stu-id="4d269-303">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d269-304">此操作不会阻止。</span><span class="sxs-lookup"><span data-stu-id="4d269-304">This operation will not block.</span></span> <span data-ttu-id="4d269-305">返回 <xref:System.Threading.Tasks.Task%601> 的对象将在整个响应 (包括内容) 读取后完成。</span><span class="sxs-lookup"><span data-stu-id="4d269-305">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  

> [!NOTE]
> <span data-ttu-id="4d269-306">在超时情况下，不同的 .NET 实现会引发不同的异常。</span><span class="sxs-lookup"><span data-stu-id="4d269-306">In case of timeout, different exceptions are thrown on different .NET implementations.</span></span>
> - <span data-ttu-id="4d269-307"><xref:System.Net.Http.HttpRequestException> 所有适用的 .NET Framework 版本都将引发。</span><span class="sxs-lookup"><span data-stu-id="4d269-307"><xref:System.Net.Http.HttpRequestException> is thrown on all applicable .NET Framework versions.</span></span>
> - <span data-ttu-id="4d269-308"><xref:System.Threading.Tasks.TaskCanceledException> 在所有适用的 .NET Core 版本上都不会引发任何内部异常。</span><span class="sxs-lookup"><span data-stu-id="4d269-308"><xref:System.Threading.Tasks.TaskCanceledException> without any inner exception is thrown on all applicable .NET Core versions.</span></span>
> - <span data-ttu-id="4d269-309"><xref:System.Threading.Tasks.TaskCanceledException><xref:System.TimeoutException>在 .net 5.0 和更高版本上，将引发嵌套的。</span><span class="sxs-lookup"><span data-stu-id="4d269-309"><xref:System.Threading.Tasks.TaskCanceledException> that nests a <xref:System.TimeoutException> is thrown on .NET 5.0 and later versions.</span></span>
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4d269-310"><paramref name="requestUri" /> 必须为绝对 URI 或必须设置 <see cref="P:System.Net.Http.HttpClient.BaseAddress" />。</span><span class="sxs-lookup"><span data-stu-id="4d269-310">The <paramref name="requestUri" /> must be an absolute URI or <see cref="P:System.Net.Http.HttpClient.BaseAddress" /> must be set.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="4d269-311">由于基础问题（如网络连接性、DNS 失败、服务器证书验证或超时），请求失败。</span><span class="sxs-lookup"><span data-stu-id="4d269-311">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException"><span data-ttu-id="4d269-312">仅限 .NET Core 和 .NET 5.0 及更高版本：请求因超时而失败。</span><span class="sxs-lookup"><span data-stu-id="4d269-312">.NET Core and .NET 5.0 and later only: The request failed due to timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; GetAsync (Uri requestUri);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; GetAsync(class System.Uri requestUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetAsync(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAsync (requestUri As Uri) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ GetAsync(Uri ^ requestUri);" />
      <MemberSignature Language="F#" Value="member this.GetAsync : Uri -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.GetAsync requestUri" />
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; GetAsync (Uri? requestUri);" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="4d269-313">请求发送到的 URI。</span><span class="sxs-lookup"><span data-stu-id="4d269-313">The Uri the request is sent to.</span></span></param>
        <summary><span data-ttu-id="4d269-314">以异步操作将 GET 请求发送给指定 URI。</span><span class="sxs-lookup"><span data-stu-id="4d269-314">Send a GET request to the specified Uri as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="4d269-315">表示异步操作的任务对象。</span><span class="sxs-lookup"><span data-stu-id="4d269-315">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d269-316">此操作不会阻止。</span><span class="sxs-lookup"><span data-stu-id="4d269-316">This operation will not block.</span></span> <span data-ttu-id="4d269-317">返回 <xref:System.Threading.Tasks.Task%601> 的对象将在整个响应 (包括内容) 读取后完成。</span><span class="sxs-lookup"><span data-stu-id="4d269-317">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  

> [!NOTE]
> <span data-ttu-id="4d269-318">在超时情况下，不同的 .NET 实现会引发不同的异常。</span><span class="sxs-lookup"><span data-stu-id="4d269-318">In case of timeout, different exceptions are thrown on different .NET implementations.</span></span>
> - <span data-ttu-id="4d269-319"><xref:System.Net.Http.HttpRequestException> 所有适用的 .NET Framework 版本都将引发。</span><span class="sxs-lookup"><span data-stu-id="4d269-319"><xref:System.Net.Http.HttpRequestException> is thrown on all applicable .NET Framework versions.</span></span>
> - <span data-ttu-id="4d269-320"><xref:System.Threading.Tasks.TaskCanceledException> 在所有适用的 .NET Core 版本上都不会引发任何内部异常。</span><span class="sxs-lookup"><span data-stu-id="4d269-320"><xref:System.Threading.Tasks.TaskCanceledException> without any inner exception is thrown on all applicable .NET Core versions.</span></span>
> - <span data-ttu-id="4d269-321"><xref:System.Threading.Tasks.TaskCanceledException><xref:System.TimeoutException>在 .net 5.0 和更高版本上，将引发嵌套的。</span><span class="sxs-lookup"><span data-stu-id="4d269-321"><xref:System.Threading.Tasks.TaskCanceledException> that nests a <xref:System.TimeoutException> is thrown on .NET 5.0 and later versions.</span></span>
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4d269-322"><paramref name="requestUri" /> 必须为绝对 URI 或必须设置 <see cref="P:System.Net.Http.HttpClient.BaseAddress" />。</span><span class="sxs-lookup"><span data-stu-id="4d269-322">The <paramref name="requestUri" /> must be an absolute URI or <see cref="P:System.Net.Http.HttpClient.BaseAddress" /> must be set.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="4d269-323">由于基础问题（如网络连接性、DNS 失败、服务器证书验证或超时），请求失败。</span><span class="sxs-lookup"><span data-stu-id="4d269-323">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException"><span data-ttu-id="4d269-324">仅限 .NET Core 和 .NET 5.0 及更高版本：请求因超时而失败。</span><span class="sxs-lookup"><span data-stu-id="4d269-324">.NET Core and .NET 5.0 and later only: The request failed due to timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; GetAsync (string requestUri, System.Net.Http.HttpCompletionOption completionOption);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; GetAsync(string requestUri, valuetype System.Net.Http.HttpCompletionOption completionOption) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetAsync(System.String,System.Net.Http.HttpCompletionOption)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAsync (requestUri As String, completionOption As HttpCompletionOption) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ GetAsync(System::String ^ requestUri, System::Net::Http::HttpCompletionOption completionOption);" />
      <MemberSignature Language="F#" Value="member this.GetAsync : string * System.Net.Http.HttpCompletionOption -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.GetAsync (requestUri, completionOption)" />
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; GetAsync (string? requestUri, System.Net.Http.HttpCompletionOption completionOption);" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" />
        <Parameter Name="completionOption" Type="System.Net.Http.HttpCompletionOption" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="4d269-325">请求发送到的 URI。</span><span class="sxs-lookup"><span data-stu-id="4d269-325">The Uri the request is sent to.</span></span></param>
        <param name="completionOption"><span data-ttu-id="4d269-326">指示操作应视为已完成的时间的 HTTP 完成选项值。</span><span class="sxs-lookup"><span data-stu-id="4d269-326">An HTTP completion option value that indicates when the operation should be considered completed.</span></span></param>
        <summary><span data-ttu-id="4d269-327">用以异步操作的 HTTP 完成选项发送 GET 请求到指定的 URI。</span><span class="sxs-lookup"><span data-stu-id="4d269-327">Send a GET request to the specified Uri with an HTTP completion option as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="4d269-328">表示异步操作的任务对象。</span><span class="sxs-lookup"><span data-stu-id="4d269-328">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d269-329">此操作不会阻止。</span><span class="sxs-lookup"><span data-stu-id="4d269-329">This operation will not block.</span></span> <span data-ttu-id="4d269-330">返回的 <xref:System.Threading.Tasks.Task%601> 对象将根据 `completionOption` (包含内容) 读取的部分或全部响应后的参数完成。</span><span class="sxs-lookup"><span data-stu-id="4d269-330">The returned <xref:System.Threading.Tasks.Task%601> object will complete based on the `completionOption` parameter after the part or all of the response (including content) is read.</span></span>  

> [!NOTE]
> <span data-ttu-id="4d269-331">在超时情况下，不同的 .NET 实现会引发不同的异常。</span><span class="sxs-lookup"><span data-stu-id="4d269-331">In case of timeout, different exceptions are thrown on different .NET implementations.</span></span>
> - <span data-ttu-id="4d269-332"><xref:System.Net.Http.HttpRequestException> 所有适用的 .NET Framework 版本都将引发。</span><span class="sxs-lookup"><span data-stu-id="4d269-332"><xref:System.Net.Http.HttpRequestException> is thrown on all applicable .NET Framework versions.</span></span>
> - <span data-ttu-id="4d269-333"><xref:System.Threading.Tasks.TaskCanceledException> 在所有适用的 .NET Core 版本上都不会引发任何内部异常。</span><span class="sxs-lookup"><span data-stu-id="4d269-333"><xref:System.Threading.Tasks.TaskCanceledException> without any inner exception is thrown on all applicable .NET Core versions.</span></span>
> - <span data-ttu-id="4d269-334"><xref:System.Threading.Tasks.TaskCanceledException><xref:System.TimeoutException>在 .net 5.0 和更高版本上，将引发嵌套的。</span><span class="sxs-lookup"><span data-stu-id="4d269-334"><xref:System.Threading.Tasks.TaskCanceledException> that nests a <xref:System.TimeoutException> is thrown on .NET 5.0 and later versions.</span></span>
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4d269-335"><paramref name="requestUri" /> 必须为绝对 URI 或必须设置 <see cref="P:System.Net.Http.HttpClient.BaseAddress" />。</span><span class="sxs-lookup"><span data-stu-id="4d269-335">The <paramref name="requestUri" /> must be an absolute URI or <see cref="P:System.Net.Http.HttpClient.BaseAddress" /> must be set.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="4d269-336">由于基础问题（如网络连接性、DNS 失败、服务器证书验证或超时），请求失败。</span><span class="sxs-lookup"><span data-stu-id="4d269-336">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException"><span data-ttu-id="4d269-337">仅限 .NET Core 和 .NET 5.0 及更高版本：请求因超时而失败。</span><span class="sxs-lookup"><span data-stu-id="4d269-337">.NET Core and .NET 5.0 and later only: The request failed due to timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; GetAsync (string requestUri, System.Threading.CancellationToken cancellationToken);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; GetAsync(string requestUri, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAsync (requestUri As String, cancellationToken As CancellationToken) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ GetAsync(System::String ^ requestUri, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.GetAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.GetAsync (requestUri, cancellationToken)" />
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; GetAsync (string? requestUri, System.Threading.CancellationToken cancellationToken);" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="4d269-338">请求发送到的 URI。</span><span class="sxs-lookup"><span data-stu-id="4d269-338">The Uri the request is sent to.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="4d269-339">可由其他对象或线程用以接收取消通知的取消标记。</span><span class="sxs-lookup"><span data-stu-id="4d269-339">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</span></span></param>
        <summary><span data-ttu-id="4d269-340">用以异步操作的取消标记发送 GET 请求到指定的 URI。</span><span class="sxs-lookup"><span data-stu-id="4d269-340">Send a GET request to the specified Uri with a cancellation token as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="4d269-341">表示异步操作的任务对象。</span><span class="sxs-lookup"><span data-stu-id="4d269-341">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d269-342">此操作不会阻止。</span><span class="sxs-lookup"><span data-stu-id="4d269-342">This operation will not block.</span></span> <span data-ttu-id="4d269-343">返回 <xref:System.Threading.Tasks.Task%601> 的对象将在整个响应 (包括内容) 读取后完成。</span><span class="sxs-lookup"><span data-stu-id="4d269-343">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  

> [!NOTE]
> <span data-ttu-id="4d269-344">在超时情况下，不同的 .NET 实现会引发不同的异常。</span><span class="sxs-lookup"><span data-stu-id="4d269-344">In case of timeout, different exceptions are thrown on different .NET implementations.</span></span>
> - <span data-ttu-id="4d269-345"><xref:System.Net.Http.HttpRequestException> 所有适用的 .NET Framework 版本都将引发。</span><span class="sxs-lookup"><span data-stu-id="4d269-345"><xref:System.Net.Http.HttpRequestException> is thrown on all applicable .NET Framework versions.</span></span>
> - <span data-ttu-id="4d269-346"><xref:System.Threading.Tasks.TaskCanceledException> 在所有适用的 .NET Core 版本上都不会引发任何内部异常。</span><span class="sxs-lookup"><span data-stu-id="4d269-346"><xref:System.Threading.Tasks.TaskCanceledException> without any inner exception is thrown on all applicable .NET Core versions.</span></span>
> - <span data-ttu-id="4d269-347"><xref:System.Threading.Tasks.TaskCanceledException><xref:System.TimeoutException>在 .net 5.0 和更高版本上，将引发嵌套的。</span><span class="sxs-lookup"><span data-stu-id="4d269-347"><xref:System.Threading.Tasks.TaskCanceledException> that nests a <xref:System.TimeoutException> is thrown on .NET 5.0 and later versions.</span></span>
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4d269-348"><paramref name="requestUri" /> 必须为绝对 URI 或必须设置 <see cref="P:System.Net.Http.HttpClient.BaseAddress" />。</span><span class="sxs-lookup"><span data-stu-id="4d269-348">The <paramref name="requestUri" /> must be an absolute URI or <see cref="P:System.Net.Http.HttpClient.BaseAddress" /> must be set.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="4d269-349">由于基础问题（如网络连接性、DNS 失败、服务器证书验证或超时），请求失败。</span><span class="sxs-lookup"><span data-stu-id="4d269-349">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException"><span data-ttu-id="4d269-350">仅限 .NET Core 和 .NET 5.0 及更高版本：请求因超时而失败。</span><span class="sxs-lookup"><span data-stu-id="4d269-350">.NET Core and .NET 5.0 and later only: The request failed due to timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; GetAsync (Uri requestUri, System.Net.Http.HttpCompletionOption completionOption);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; GetAsync(class System.Uri requestUri, valuetype System.Net.Http.HttpCompletionOption completionOption) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetAsync(System.Uri,System.Net.Http.HttpCompletionOption)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAsync (requestUri As Uri, completionOption As HttpCompletionOption) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ GetAsync(Uri ^ requestUri, System::Net::Http::HttpCompletionOption completionOption);" />
      <MemberSignature Language="F#" Value="member this.GetAsync : Uri * System.Net.Http.HttpCompletionOption -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.GetAsync (requestUri, completionOption)" />
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; GetAsync (Uri? requestUri, System.Net.Http.HttpCompletionOption completionOption);" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" />
        <Parameter Name="completionOption" Type="System.Net.Http.HttpCompletionOption" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="4d269-351">请求发送到的 URI。</span><span class="sxs-lookup"><span data-stu-id="4d269-351">The Uri the request is sent to.</span></span></param>
        <param name="completionOption"><span data-ttu-id="4d269-352">指示操作应视为已完成的时间的 HTTP 完成选项值。</span><span class="sxs-lookup"><span data-stu-id="4d269-352">An HTTP completion option value that indicates when the operation should be considered completed.</span></span></param>
        <summary><span data-ttu-id="4d269-353">用以异步操作的 HTTP 完成选项发送 GET 请求到指定的 URI。</span><span class="sxs-lookup"><span data-stu-id="4d269-353">Send a GET request to the specified Uri with an HTTP completion option as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="4d269-354">表示异步操作的任务对象。</span><span class="sxs-lookup"><span data-stu-id="4d269-354">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d269-355">此操作不会阻止。</span><span class="sxs-lookup"><span data-stu-id="4d269-355">This operation will not block.</span></span> <span data-ttu-id="4d269-356">返回的 <xref:System.Threading.Tasks.Task%601> 对象将根据 `completionOption` (包含内容) 读取的部分或全部响应后的参数完成。</span><span class="sxs-lookup"><span data-stu-id="4d269-356">The returned <xref:System.Threading.Tasks.Task%601> object will complete based on the `completionOption` parameter after the part or all of the response (including content) is read.</span></span>  

> [!NOTE]
> <span data-ttu-id="4d269-357">在超时情况下，不同的 .NET 实现会引发不同的异常。</span><span class="sxs-lookup"><span data-stu-id="4d269-357">In case of timeout, different exceptions are thrown on different .NET implementations.</span></span>
> - <span data-ttu-id="4d269-358"><xref:System.Net.Http.HttpRequestException> 所有适用的 .NET Framework 版本都将引发。</span><span class="sxs-lookup"><span data-stu-id="4d269-358"><xref:System.Net.Http.HttpRequestException> is thrown on all applicable .NET Framework versions.</span></span>
> - <span data-ttu-id="4d269-359"><xref:System.Threading.Tasks.TaskCanceledException> 在所有适用的 .NET Core 版本上都不会引发任何内部异常。</span><span class="sxs-lookup"><span data-stu-id="4d269-359"><xref:System.Threading.Tasks.TaskCanceledException> without any inner exception is thrown on all applicable .NET Core versions.</span></span>
> - <span data-ttu-id="4d269-360"><xref:System.Threading.Tasks.TaskCanceledException><xref:System.TimeoutException>在 .net 5.0 和更高版本上，将引发嵌套的。</span><span class="sxs-lookup"><span data-stu-id="4d269-360"><xref:System.Threading.Tasks.TaskCanceledException> that nests a <xref:System.TimeoutException> is thrown on .NET 5.0 and later versions.</span></span>
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4d269-361"><paramref name="requestUri" /> 必须为绝对 URI 或必须设置 <see cref="P:System.Net.Http.HttpClient.BaseAddress" />。</span><span class="sxs-lookup"><span data-stu-id="4d269-361">The <paramref name="requestUri" /> must be an absolute URI or <see cref="P:System.Net.Http.HttpClient.BaseAddress" /> must be set.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="4d269-362">由于基础问题（如网络连接性、DNS 失败、服务器证书验证或超时），请求失败。</span><span class="sxs-lookup"><span data-stu-id="4d269-362">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException"><span data-ttu-id="4d269-363">仅限 .NET Core 和 .NET 5.0 及更高版本：请求因超时而失败。</span><span class="sxs-lookup"><span data-stu-id="4d269-363">.NET Core and .NET 5.0 and later only: The request failed due to timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; GetAsync (Uri requestUri, System.Threading.CancellationToken cancellationToken);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; GetAsync(class System.Uri requestUri, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetAsync(System.Uri,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAsync (requestUri As Uri, cancellationToken As CancellationToken) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ GetAsync(Uri ^ requestUri, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.GetAsync : Uri * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.GetAsync (requestUri, cancellationToken)" />
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; GetAsync (Uri? requestUri, System.Threading.CancellationToken cancellationToken);" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="4d269-364">请求发送到的 URI。</span><span class="sxs-lookup"><span data-stu-id="4d269-364">The Uri the request is sent to.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="4d269-365">可由其他对象或线程用以接收取消通知的取消标记。</span><span class="sxs-lookup"><span data-stu-id="4d269-365">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</span></span></param>
        <summary><span data-ttu-id="4d269-366">用以异步操作的取消标记发送 GET 请求到指定的 URI。</span><span class="sxs-lookup"><span data-stu-id="4d269-366">Send a GET request to the specified Uri with a cancellation token as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="4d269-367">表示异步操作的任务对象。</span><span class="sxs-lookup"><span data-stu-id="4d269-367">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d269-368">此操作不会阻止。</span><span class="sxs-lookup"><span data-stu-id="4d269-368">This operation will not block.</span></span> <span data-ttu-id="4d269-369">返回 <xref:System.Threading.Tasks.Task%601> 的对象将在整个响应 (包括内容) 读取后完成。</span><span class="sxs-lookup"><span data-stu-id="4d269-369">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  

> [!NOTE]
> <span data-ttu-id="4d269-370">在超时情况下，不同的 .NET 实现会引发不同的异常。</span><span class="sxs-lookup"><span data-stu-id="4d269-370">In case of timeout, different exceptions are thrown on different .NET implementations.</span></span>
> - <span data-ttu-id="4d269-371"><xref:System.Net.Http.HttpRequestException> 所有适用的 .NET Framework 版本都将引发。</span><span class="sxs-lookup"><span data-stu-id="4d269-371"><xref:System.Net.Http.HttpRequestException> is thrown on all applicable .NET Framework versions.</span></span>
> - <span data-ttu-id="4d269-372"><xref:System.Threading.Tasks.TaskCanceledException> 在所有适用的 .NET Core 版本上都不会引发任何内部异常。</span><span class="sxs-lookup"><span data-stu-id="4d269-372"><xref:System.Threading.Tasks.TaskCanceledException> without any inner exception is thrown on all applicable .NET Core versions.</span></span>
> - <span data-ttu-id="4d269-373"><xref:System.Threading.Tasks.TaskCanceledException><xref:System.TimeoutException>在 .net 5.0 和更高版本上，将引发嵌套的。</span><span class="sxs-lookup"><span data-stu-id="4d269-373"><xref:System.Threading.Tasks.TaskCanceledException> that nests a <xref:System.TimeoutException> is thrown on .NET 5.0 and later versions.</span></span>
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4d269-374"><paramref name="requestUri" /> 必须为绝对 URI 或必须设置 <see cref="P:System.Net.Http.HttpClient.BaseAddress" />。</span><span class="sxs-lookup"><span data-stu-id="4d269-374">The <paramref name="requestUri" /> must be an absolute URI or <see cref="P:System.Net.Http.HttpClient.BaseAddress" /> must be set.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="4d269-375">由于基础问题（如网络连接性、DNS 失败、服务器证书验证或超时），请求失败。</span><span class="sxs-lookup"><span data-stu-id="4d269-375">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException"><span data-ttu-id="4d269-376">仅限 .NET Core 和 .NET 5.0 及更高版本：请求因超时而失败。</span><span class="sxs-lookup"><span data-stu-id="4d269-376">.NET Core and .NET 5.0 and later only: The request failed due to timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; GetAsync (string requestUri, System.Net.Http.HttpCompletionOption completionOption, System.Threading.CancellationToken cancellationToken);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; GetAsync(string requestUri, valuetype System.Net.Http.HttpCompletionOption completionOption, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetAsync(System.String,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAsync (requestUri As String, completionOption As HttpCompletionOption, cancellationToken As CancellationToken) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ GetAsync(System::String ^ requestUri, System::Net::Http::HttpCompletionOption completionOption, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.GetAsync : string * System.Net.Http.HttpCompletionOption * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.GetAsync (requestUri, completionOption, cancellationToken)" />
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; GetAsync (string? requestUri, System.Net.Http.HttpCompletionOption completionOption, System.Threading.CancellationToken cancellationToken);" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" />
        <Parameter Name="completionOption" Type="System.Net.Http.HttpCompletionOption" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="4d269-377">请求发送到的 URI。</span><span class="sxs-lookup"><span data-stu-id="4d269-377">The Uri the request is sent to.</span></span></param>
        <param name="completionOption"><span data-ttu-id="4d269-378">指示操作应视为已完成的时间的 HTTP 完成选项值。</span><span class="sxs-lookup"><span data-stu-id="4d269-378">An HTTP  completion option value that indicates when the operation should be considered completed.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="4d269-379">可由其他对象或线程用以接收取消通知的取消标记。</span><span class="sxs-lookup"><span data-stu-id="4d269-379">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</span></span></param>
        <summary><span data-ttu-id="4d269-380">用以异步操作的 HTTP 完成选项和取消标记发送 GET 请求到指定的 URI。</span><span class="sxs-lookup"><span data-stu-id="4d269-380">Send a GET request to the specified Uri with an HTTP completion option and a cancellation token as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="4d269-381">表示异步操作的任务对象。</span><span class="sxs-lookup"><span data-stu-id="4d269-381">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d269-382">此操作不会阻止。</span><span class="sxs-lookup"><span data-stu-id="4d269-382">This operation will not block.</span></span> <span data-ttu-id="4d269-383">返回的 <xref:System.Threading.Tasks.Task%601> 对象将根据 `completionOption` (包含内容) 读取的部分或全部响应后的参数完成。</span><span class="sxs-lookup"><span data-stu-id="4d269-383">The returned <xref:System.Threading.Tasks.Task%601> object will complete based on the `completionOption` parameter after the part or all of the response (including content) is read.</span></span>  

> [!NOTE]
> <span data-ttu-id="4d269-384">在超时情况下，不同的 .NET 实现会引发不同的异常。</span><span class="sxs-lookup"><span data-stu-id="4d269-384">In case of timeout, different exceptions are thrown on different .NET implementations.</span></span>
> - <span data-ttu-id="4d269-385"><xref:System.Net.Http.HttpRequestException> 所有适用的 .NET Framework 版本都将引发。</span><span class="sxs-lookup"><span data-stu-id="4d269-385"><xref:System.Net.Http.HttpRequestException> is thrown on all applicable .NET Framework versions.</span></span>
> - <span data-ttu-id="4d269-386"><xref:System.Threading.Tasks.TaskCanceledException> 在所有适用的 .NET Core 版本上都不会引发任何内部异常。</span><span class="sxs-lookup"><span data-stu-id="4d269-386"><xref:System.Threading.Tasks.TaskCanceledException> without any inner exception is thrown on all applicable .NET Core versions.</span></span>
> - <span data-ttu-id="4d269-387"><xref:System.Threading.Tasks.TaskCanceledException><xref:System.TimeoutException>在 .net 5.0 和更高版本上，将引发嵌套的。</span><span class="sxs-lookup"><span data-stu-id="4d269-387"><xref:System.Threading.Tasks.TaskCanceledException> that nests a <xref:System.TimeoutException> is thrown on .NET 5.0 and later versions.</span></span>
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4d269-388"><paramref name="requestUri" /> 必须为绝对 URI 或必须设置 <see cref="P:System.Net.Http.HttpClient.BaseAddress" />。</span><span class="sxs-lookup"><span data-stu-id="4d269-388">The <paramref name="requestUri" /> must be an absolute URI or <see cref="P:System.Net.Http.HttpClient.BaseAddress" /> must be set.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="4d269-389">由于基础问题（如网络连接性、DNS 失败、服务器证书验证或超时），请求失败。</span><span class="sxs-lookup"><span data-stu-id="4d269-389">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException"><span data-ttu-id="4d269-390">仅限 .NET Core 和 .NET 5.0 及更高版本：请求因超时而失败。</span><span class="sxs-lookup"><span data-stu-id="4d269-390">.NET Core and .NET 5.0 and later only: The request failed due to timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; GetAsync (Uri requestUri, System.Net.Http.HttpCompletionOption completionOption, System.Threading.CancellationToken cancellationToken);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; GetAsync(class System.Uri requestUri, valuetype System.Net.Http.HttpCompletionOption completionOption, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetAsync(System.Uri,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAsync (requestUri As Uri, completionOption As HttpCompletionOption, cancellationToken As CancellationToken) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ GetAsync(Uri ^ requestUri, System::Net::Http::HttpCompletionOption completionOption, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.GetAsync : Uri * System.Net.Http.HttpCompletionOption * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.GetAsync (requestUri, completionOption, cancellationToken)" />
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; GetAsync (Uri? requestUri, System.Net.Http.HttpCompletionOption completionOption, System.Threading.CancellationToken cancellationToken);" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" />
        <Parameter Name="completionOption" Type="System.Net.Http.HttpCompletionOption" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="4d269-391">请求发送到的 URI。</span><span class="sxs-lookup"><span data-stu-id="4d269-391">The Uri the request is sent to.</span></span></param>
        <param name="completionOption"><span data-ttu-id="4d269-392">指示操作应视为已完成的时间的 HTTP 完成选项值。</span><span class="sxs-lookup"><span data-stu-id="4d269-392">An HTTP  completion option value that indicates when the operation should be considered completed.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="4d269-393">可由其他对象或线程用以接收取消通知的取消标记。</span><span class="sxs-lookup"><span data-stu-id="4d269-393">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</span></span></param>
        <summary><span data-ttu-id="4d269-394">用以异步操作的 HTTP 完成选项和取消标记发送 GET 请求到指定的 URI。</span><span class="sxs-lookup"><span data-stu-id="4d269-394">Send a GET request to the specified Uri with an HTTP completion option and a cancellation token as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="4d269-395">表示异步操作的任务对象。</span><span class="sxs-lookup"><span data-stu-id="4d269-395">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d269-396">此操作不会阻止。</span><span class="sxs-lookup"><span data-stu-id="4d269-396">This operation will not block.</span></span> <span data-ttu-id="4d269-397">返回的 <xref:System.Threading.Tasks.Task%601> 对象将根据 `completionOption` (包含内容) 读取的部分或全部响应后的参数完成。</span><span class="sxs-lookup"><span data-stu-id="4d269-397">The returned <xref:System.Threading.Tasks.Task%601> object will complete based on the `completionOption` parameter after the part or all of the response (including content) is read.</span></span>  

> [!NOTE]
> <span data-ttu-id="4d269-398">在超时情况下，不同的 .NET 实现会引发不同的异常。</span><span class="sxs-lookup"><span data-stu-id="4d269-398">In case of timeout, different exceptions are thrown on different .NET implementations.</span></span>
> - <span data-ttu-id="4d269-399"><xref:System.Net.Http.HttpRequestException> 所有适用的 .NET Framework 版本都将引发。</span><span class="sxs-lookup"><span data-stu-id="4d269-399"><xref:System.Net.Http.HttpRequestException> is thrown on all applicable .NET Framework versions.</span></span>
> - <span data-ttu-id="4d269-400"><xref:System.Threading.Tasks.TaskCanceledException> 在所有适用的 .NET Core 版本上都不会引发任何内部异常。</span><span class="sxs-lookup"><span data-stu-id="4d269-400"><xref:System.Threading.Tasks.TaskCanceledException> without any inner exception is thrown on all applicable .NET Core versions.</span></span>
> - <span data-ttu-id="4d269-401"><xref:System.Threading.Tasks.TaskCanceledException><xref:System.TimeoutException>在 .net 5.0 和更高版本上，将引发嵌套的。</span><span class="sxs-lookup"><span data-stu-id="4d269-401"><xref:System.Threading.Tasks.TaskCanceledException> that nests a <xref:System.TimeoutException> is thrown on .NET 5.0 and later versions.</span></span>
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4d269-402"><paramref name="requestUri" /> 必须为绝对 URI 或必须设置 <see cref="P:System.Net.Http.HttpClient.BaseAddress" />。</span><span class="sxs-lookup"><span data-stu-id="4d269-402">The <paramref name="requestUri" /> must be an absolute URI or <see cref="P:System.Net.Http.HttpClient.BaseAddress" /> must be set.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="4d269-403">由于基础问题（如网络连接性、DNS 失败、服务器证书验证或超时），请求失败。</span><span class="sxs-lookup"><span data-stu-id="4d269-403">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException"><span data-ttu-id="4d269-404">仅限 .NET Core 和 .NET 5.0 及更高版本：请求因超时而失败。</span><span class="sxs-lookup"><span data-stu-id="4d269-404">.NET Core and .NET 5.0 and later only: The request failed due to timeout.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetByteArrayAsync">
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="4d269-405">将 GET 请求发送到指定 URI 并在异步操作中以字节数组的形式返回响应正文。</span><span class="sxs-lookup"><span data-stu-id="4d269-405">Send a GET request to the specified Uri and return the response body as a byte array in an asynchronous operation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d269-406">操作不会阻止。</span><span class="sxs-lookup"><span data-stu-id="4d269-406">The operation will not block.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetByteArrayAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;byte[]&gt; GetByteArrayAsync (string requestUri);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;unsigned int8[]&gt; GetByteArrayAsync(string requestUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetByteArrayAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetByteArrayAsync (requestUri As String) As Task(Of Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;cli::array &lt;System::Byte&gt; ^&gt; ^ GetByteArrayAsync(System::String ^ requestUri);" />
      <MemberSignature Language="F#" Value="member this.GetByteArrayAsync : string -&gt; System.Threading.Tasks.Task&lt;byte[]&gt;" Usage="httpClient.GetByteArrayAsync requestUri" />
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;byte[]&gt; GetByteArrayAsync (string? requestUri);" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Byte[]&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="4d269-407">请求发送到的 URI。</span><span class="sxs-lookup"><span data-stu-id="4d269-407">The Uri the request is sent to.</span></span></param>
        <summary><span data-ttu-id="4d269-408">将 GET 请求发送到指定 URI 并在异步操作中以字节数组的形式返回响应正文。</span><span class="sxs-lookup"><span data-stu-id="4d269-408">Sends a GET request to the specified Uri and return the response body as a byte array in an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="4d269-409">表示异步操作的任务对象。</span><span class="sxs-lookup"><span data-stu-id="4d269-409">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d269-410">此操作不会阻止。</span><span class="sxs-lookup"><span data-stu-id="4d269-410">This operation will not block.</span></span> <span data-ttu-id="4d269-411">在 <xref:System.Threading.Tasks.Task%601> 读取整个响应正文后，返回的对象将完成。</span><span class="sxs-lookup"><span data-stu-id="4d269-411">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response body is read.</span></span>  

> [!NOTE]
> <span data-ttu-id="4d269-412">在超时情况下，不同的 .NET 实现会引发不同的异常。</span><span class="sxs-lookup"><span data-stu-id="4d269-412">In case of timeout, different exceptions are thrown on different .NET implementations.</span></span>
> - <span data-ttu-id="4d269-413"><xref:System.Net.Http.HttpRequestException> 所有适用的 .NET Framework 版本都将引发。</span><span class="sxs-lookup"><span data-stu-id="4d269-413"><xref:System.Net.Http.HttpRequestException> is thrown on all applicable .NET Framework versions.</span></span>
> - <span data-ttu-id="4d269-414"><xref:System.Threading.Tasks.TaskCanceledException> 在所有适用的 .NET Core 版本上都不会引发任何内部异常。</span><span class="sxs-lookup"><span data-stu-id="4d269-414"><xref:System.Threading.Tasks.TaskCanceledException> without any inner exception is thrown on all applicable .NET Core versions.</span></span>
> - <span data-ttu-id="4d269-415"><xref:System.Threading.Tasks.TaskCanceledException><xref:System.TimeoutException>在 .net 5.0 和更高版本上，将引发嵌套的。</span><span class="sxs-lookup"><span data-stu-id="4d269-415"><xref:System.Threading.Tasks.TaskCanceledException> that nests a <xref:System.TimeoutException> is thrown on .NET 5.0 and later versions.</span></span>
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4d269-416"><paramref name="requestUri" /> 必须为绝对 URI 或必须设置 <see cref="P:System.Net.Http.HttpClient.BaseAddress" />。</span><span class="sxs-lookup"><span data-stu-id="4d269-416">The <paramref name="requestUri" /> must be an absolute URI or <see cref="P:System.Net.Http.HttpClient.BaseAddress" /> must be set.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="4d269-417">由于基础问题（如网络连接性、DNS 失败、服务器证书验证或超时），请求失败。</span><span class="sxs-lookup"><span data-stu-id="4d269-417">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException"><span data-ttu-id="4d269-418">仅限 .NET Core 和 .NET 5.0 及更高版本：请求因超时而失败。</span><span class="sxs-lookup"><span data-stu-id="4d269-418">.NET Core and .NET 5.0 and later only: The request failed due to timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetByteArrayAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;byte[]&gt; GetByteArrayAsync (Uri requestUri);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;unsigned int8[]&gt; GetByteArrayAsync(class System.Uri requestUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetByteArrayAsync(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetByteArrayAsync (requestUri As Uri) As Task(Of Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;cli::array &lt;System::Byte&gt; ^&gt; ^ GetByteArrayAsync(Uri ^ requestUri);" />
      <MemberSignature Language="F#" Value="member this.GetByteArrayAsync : Uri -&gt; System.Threading.Tasks.Task&lt;byte[]&gt;" Usage="httpClient.GetByteArrayAsync requestUri" />
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;byte[]&gt; GetByteArrayAsync (Uri? requestUri);" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Byte[]&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="4d269-419">请求发送到的 URI。</span><span class="sxs-lookup"><span data-stu-id="4d269-419">The Uri the request is sent to.</span></span></param>
        <summary><span data-ttu-id="4d269-420">将 GET 请求发送到指定 URI 并在异步操作中以字节数组的形式返回响应正文。</span><span class="sxs-lookup"><span data-stu-id="4d269-420">Send a GET request to the specified Uri and return the response body as a byte array in an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="4d269-421">表示异步操作的任务对象。</span><span class="sxs-lookup"><span data-stu-id="4d269-421">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d269-422">此操作不会阻止。</span><span class="sxs-lookup"><span data-stu-id="4d269-422">This operation will not block.</span></span> <span data-ttu-id="4d269-423">在 <xref:System.Threading.Tasks.Task%601> 读取整个响应正文后，返回的对象将完成。</span><span class="sxs-lookup"><span data-stu-id="4d269-423">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response body is read.</span></span>  

> [!NOTE]
> <span data-ttu-id="4d269-424">如果超时，则：</span><span class="sxs-lookup"><span data-stu-id="4d269-424">In case of a timeout:</span></span>
> - <span data-ttu-id="4d269-425">.NET Framework 引发 <xref:System.Net.Http.HttpRequestException> 。</span><span class="sxs-lookup"><span data-stu-id="4d269-425">.NET Framework throws a <xref:System.Net.Http.HttpRequestException>.</span></span>
> - <span data-ttu-id="4d269-426">.NET Core 引发 <xref:System.Threading.Tasks.TaskCanceledException> 无任何内部异常的。</span><span class="sxs-lookup"><span data-stu-id="4d269-426">.NET Core throws a <xref:System.Threading.Tasks.TaskCanceledException> without any inner exception.</span></span>
> - <span data-ttu-id="4d269-427">.NET 5.0 和更高版本引发了 <xref:System.Threading.Tasks.TaskCanceledException> 嵌套的 <xref:System.TimeoutException> 。</span><span class="sxs-lookup"><span data-stu-id="4d269-427">.NET 5.0 and later versions throw a <xref:System.Threading.Tasks.TaskCanceledException> that nests a <xref:System.TimeoutException>.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4d269-428"><paramref name="requestUri" /> 必须为绝对 URI 或必须设置 <see cref="P:System.Net.Http.HttpClient.BaseAddress" />。</span><span class="sxs-lookup"><span data-stu-id="4d269-428">The <paramref name="requestUri" /> must be an absolute URI or <see cref="P:System.Net.Http.HttpClient.BaseAddress" /> must be set.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="4d269-429">由于基础问题（如网络连接性、DNS 失败、服务器证书验证或仅 .NET Framework 超时），请求失败。</span><span class="sxs-lookup"><span data-stu-id="4d269-429">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation (or timeout for .NET Framework only).</span></span></exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException"><span data-ttu-id="4d269-430">仅限 .NET Core 和 .NET 5.0 及更高版本：请求因超时而失败。</span><span class="sxs-lookup"><span data-stu-id="4d269-430">.NET Core and .NET 5.0 and later only: The request failed due to timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetByteArrayAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;byte[]&gt; GetByteArrayAsync (string? requestUri, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;unsigned int8[]&gt; GetByteArrayAsync(string requestUri, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetByteArrayAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetByteArrayAsync (requestUri As String, cancellationToken As CancellationToken) As Task(Of Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;cli::array &lt;System::Byte&gt; ^&gt; ^ GetByteArrayAsync(System::String ^ requestUri, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.GetByteArrayAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;byte[]&gt;" Usage="httpClient.GetByteArrayAsync (requestUri, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Byte[]&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" Index="0" FrameworkAlternate="net-5.0" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="net-5.0" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="4d269-431">请求发送到的 URI。</span><span class="sxs-lookup"><span data-stu-id="4d269-431">The Uri the request is sent to.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="4d269-432">用于取消操作的取消令牌。</span><span class="sxs-lookup"><span data-stu-id="4d269-432">The cancellation token to cancel the operation.</span></span></param>
        <summary><span data-ttu-id="4d269-433">将 GET 请求发送到指定 URI 并在异步操作中以字节数组的形式返回响应正文。</span><span class="sxs-lookup"><span data-stu-id="4d269-433">Sends a GET request to the specified Uri and return the response body as a byte array in an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="4d269-434">表示异步操作的任务对象。</span><span class="sxs-lookup"><span data-stu-id="4d269-434">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d269-435">此操作不会阻止。</span><span class="sxs-lookup"><span data-stu-id="4d269-435">This operation will not block.</span></span> <span data-ttu-id="4d269-436">在 <xref:System.Threading.Tasks.Task%601> 读取整个响应正文后，返回的对象将完成。</span><span class="sxs-lookup"><span data-stu-id="4d269-436">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response body is read.</span></span>  

> [!NOTE]
> <span data-ttu-id="4d269-437">如果超时，则：</span><span class="sxs-lookup"><span data-stu-id="4d269-437">In case of a timeout:</span></span>
> - <span data-ttu-id="4d269-438">.NET Framework 引发 <xref:System.Net.Http.HttpRequestException> 。</span><span class="sxs-lookup"><span data-stu-id="4d269-438">.NET Framework throws a <xref:System.Net.Http.HttpRequestException>.</span></span>
> - <span data-ttu-id="4d269-439">.NET Core 引发 <xref:System.Threading.Tasks.TaskCanceledException> 无任何内部异常的。</span><span class="sxs-lookup"><span data-stu-id="4d269-439">.NET Core throws a <xref:System.Threading.Tasks.TaskCanceledException> without any inner exception.</span></span>
> - <span data-ttu-id="4d269-440">.NET 5.0 和更高版本引发了 <xref:System.Threading.Tasks.TaskCanceledException> 嵌套的 <xref:System.TimeoutException> 。</span><span class="sxs-lookup"><span data-stu-id="4d269-440">.NET 5.0 and later versions throw a <xref:System.Threading.Tasks.TaskCanceledException> that nests a <xref:System.TimeoutException>.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="4d269-441">由于基础问题（如网络连接性、DNS 失败、服务器证书验证或仅 .NET Framework 超时），请求失败。</span><span class="sxs-lookup"><span data-stu-id="4d269-441">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation (or timeout for .NET Framework only).</span></span></exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException"><span data-ttu-id="4d269-442">仅限 .NET Core 和 .NET 5.0 及更高版本：请求因超时而失败。</span><span class="sxs-lookup"><span data-stu-id="4d269-442">.NET Core and .NET 5.0 and later only: The request failed due to timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetByteArrayAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;byte[]&gt; GetByteArrayAsync (Uri? requestUri, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;unsigned int8[]&gt; GetByteArrayAsync(class System.Uri requestUri, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetByteArrayAsync(System.Uri,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetByteArrayAsync (requestUri As Uri, cancellationToken As CancellationToken) As Task(Of Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;cli::array &lt;System::Byte&gt; ^&gt; ^ GetByteArrayAsync(Uri ^ requestUri, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.GetByteArrayAsync : Uri * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;byte[]&gt;" Usage="httpClient.GetByteArrayAsync (requestUri, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Byte[]&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" Index="0" FrameworkAlternate="net-5.0" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="net-5.0" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="4d269-443">请求发送到的 URI。</span><span class="sxs-lookup"><span data-stu-id="4d269-443">The Uri the request is sent to.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="4d269-444">用于取消操作的取消令牌。</span><span class="sxs-lookup"><span data-stu-id="4d269-444">The cancellation token to cancel the operation.</span></span></param>
        <summary><span data-ttu-id="4d269-445">将 GET 请求发送到指定 URI 并在异步操作中以字节数组的形式返回响应正文。</span><span class="sxs-lookup"><span data-stu-id="4d269-445">Send a GET request to the specified Uri and return the response body as a byte array in an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="4d269-446">表示异步操作的任务对象。</span><span class="sxs-lookup"><span data-stu-id="4d269-446">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d269-447">此操作不会阻止。</span><span class="sxs-lookup"><span data-stu-id="4d269-447">This operation will not block.</span></span> <span data-ttu-id="4d269-448">在 <xref:System.Threading.Tasks.Task%601> 读取整个响应正文后，返回的对象将完成。</span><span class="sxs-lookup"><span data-stu-id="4d269-448">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response body is read.</span></span>  

> [!NOTE]
> <span data-ttu-id="4d269-449">如果超时，则：</span><span class="sxs-lookup"><span data-stu-id="4d269-449">In case of a timeout:</span></span>
> - <span data-ttu-id="4d269-450">.NET Framework 引发 <xref:System.Net.Http.HttpRequestException> 。</span><span class="sxs-lookup"><span data-stu-id="4d269-450">.NET Framework throws a <xref:System.Net.Http.HttpRequestException>.</span></span>
> - <span data-ttu-id="4d269-451">.NET Core 引发 <xref:System.Threading.Tasks.TaskCanceledException> 无任何内部异常的。</span><span class="sxs-lookup"><span data-stu-id="4d269-451">.NET Core throws a <xref:System.Threading.Tasks.TaskCanceledException> without any inner exception.</span></span>
> - <span data-ttu-id="4d269-452">.NET 5.0 和更高版本引发了 <xref:System.Threading.Tasks.TaskCanceledException> 嵌套的 <xref:System.TimeoutException> 。</span><span class="sxs-lookup"><span data-stu-id="4d269-452">.NET 5.0 and later versions throw a <xref:System.Threading.Tasks.TaskCanceledException> that nests a <xref:System.TimeoutException>.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="4d269-453">由于基础问题（如网络连接性、DNS 失败、服务器证书验证或仅 .NET Framework 超时），请求失败。</span><span class="sxs-lookup"><span data-stu-id="4d269-453">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation (or timeout for .NET Framework only).</span></span></exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException"><span data-ttu-id="4d269-454">仅限 .NET Core 和 .NET 5.0 及更高版本：请求因超时而失败。</span><span class="sxs-lookup"><span data-stu-id="4d269-454">.NET Core and .NET 5.0 and later only: The request failed due to timeout.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetStreamAsync">
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="4d269-455">将 GET 请求发送到指定 URI 并在异步操作中以流的形式返回响应正文。</span><span class="sxs-lookup"><span data-stu-id="4d269-455">Send a GET request to the specified Uri and return the response body as a stream in an asynchronous operation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d269-456">操作不会阻止。</span><span class="sxs-lookup"><span data-stu-id="4d269-456">The operation will not block.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetStreamAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetStreamAsync (string requestUri);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetStreamAsync(string requestUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetStreamAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetStreamAsync (requestUri As String) As Task(Of Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::IO::Stream ^&gt; ^ GetStreamAsync(System::String ^ requestUri);" />
      <MemberSignature Language="F#" Value="member this.GetStreamAsync : string -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="httpClient.GetStreamAsync requestUri" />
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetStreamAsync (string? requestUri);" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="4d269-457">请求发送到的 URI。</span><span class="sxs-lookup"><span data-stu-id="4d269-457">The Uri the request is sent to.</span></span></param>
        <summary><span data-ttu-id="4d269-458">将 GET 请求发送到指定 URI 并在异步操作中以流的形式返回响应正文。</span><span class="sxs-lookup"><span data-stu-id="4d269-458">Send a GET request to the specified Uri and return the response body as a stream in an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="4d269-459">表示异步操作的任务对象。</span><span class="sxs-lookup"><span data-stu-id="4d269-459">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d269-460">此操作不会阻止。</span><span class="sxs-lookup"><span data-stu-id="4d269-460">This operation will not block.</span></span> <span data-ttu-id="4d269-461">在 <xref:System.Threading.Tasks.Task%601> 读取响应标头后，返回的对象将完成。</span><span class="sxs-lookup"><span data-stu-id="4d269-461">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the response headers are read.</span></span> <span data-ttu-id="4d269-462">此方法不读取或缓冲响应正文。</span><span class="sxs-lookup"><span data-stu-id="4d269-462">This method does not read nor buffer the response body.</span></span>  

> [!NOTE]
> <span data-ttu-id="4d269-463">如果超时，则：</span><span class="sxs-lookup"><span data-stu-id="4d269-463">In case of a timeout:</span></span>
> - <span data-ttu-id="4d269-464">.NET Framework 引发 <xref:System.Net.Http.HttpRequestException> 。</span><span class="sxs-lookup"><span data-stu-id="4d269-464">.NET Framework throws a <xref:System.Net.Http.HttpRequestException>.</span></span>
> - <span data-ttu-id="4d269-465">.NET Core 引发 <xref:System.Threading.Tasks.TaskCanceledException> 无任何内部异常的。</span><span class="sxs-lookup"><span data-stu-id="4d269-465">.NET Core throws a <xref:System.Threading.Tasks.TaskCanceledException> without any inner exception.</span></span>
> - <span data-ttu-id="4d269-466">.NET 5.0 和更高版本引发了 <xref:System.Threading.Tasks.TaskCanceledException> 嵌套的 <xref:System.TimeoutException> 。</span><span class="sxs-lookup"><span data-stu-id="4d269-466">.NET 5.0 and later versions throw a <xref:System.Threading.Tasks.TaskCanceledException> that nests a <xref:System.TimeoutException>.</span></span>
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4d269-467"><paramref name="requestUri" /> 必须为绝对 URI 或必须设置 <see cref="P:System.Net.Http.HttpClient.BaseAddress" />。</span><span class="sxs-lookup"><span data-stu-id="4d269-467">The <paramref name="requestUri" /> must be an absolute URI or <see cref="P:System.Net.Http.HttpClient.BaseAddress" /> must be set.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="4d269-468">由于基础问题（如网络连接性、DNS 失败、服务器证书验证或仅 .NET Framework 超时），请求失败。</span><span class="sxs-lookup"><span data-stu-id="4d269-468">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation (or timeout for .NET Framework only).</span></span></exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException"><span data-ttu-id="4d269-469">仅限 .NET Core 和 .NET 5.0 及更高版本：请求因超时而失败。</span><span class="sxs-lookup"><span data-stu-id="4d269-469">.NET Core and .NET 5.0 and later only: The request failed due to timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetStreamAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetStreamAsync (Uri requestUri);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetStreamAsync(class System.Uri requestUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetStreamAsync(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetStreamAsync (requestUri As Uri) As Task(Of Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::IO::Stream ^&gt; ^ GetStreamAsync(Uri ^ requestUri);" />
      <MemberSignature Language="F#" Value="member this.GetStreamAsync : Uri -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="httpClient.GetStreamAsync requestUri" />
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetStreamAsync (Uri? requestUri);" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="4d269-470">请求发送到的 URI。</span><span class="sxs-lookup"><span data-stu-id="4d269-470">The Uri the request is sent to.</span></span></param>
        <summary><span data-ttu-id="4d269-471">将 GET 请求发送到指定 URI 并在异步操作中以流的形式返回响应正文。</span><span class="sxs-lookup"><span data-stu-id="4d269-471">Send a GET request to the specified Uri and return the response body as a stream in an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="4d269-472">表示异步操作的任务对象。</span><span class="sxs-lookup"><span data-stu-id="4d269-472">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d269-473">此操作不会阻止。</span><span class="sxs-lookup"><span data-stu-id="4d269-473">This operation will not block.</span></span> <span data-ttu-id="4d269-474">在 <xref:System.Threading.Tasks.Task%601> 读取响应标头后，返回的对象将完成。</span><span class="sxs-lookup"><span data-stu-id="4d269-474">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the response headers are read.</span></span> <span data-ttu-id="4d269-475">此方法不读取或缓冲响应正文。</span><span class="sxs-lookup"><span data-stu-id="4d269-475">This method does not read nor buffer the response body.</span></span>  

> [!NOTE]
> <span data-ttu-id="4d269-476">如果超时，则：</span><span class="sxs-lookup"><span data-stu-id="4d269-476">In case of a timeout:</span></span>
> - <span data-ttu-id="4d269-477">.NET Framework 引发 <xref:System.Net.Http.HttpRequestException> 。</span><span class="sxs-lookup"><span data-stu-id="4d269-477">.NET Framework throws a <xref:System.Net.Http.HttpRequestException>.</span></span>
> - <span data-ttu-id="4d269-478">.NET Core 引发 <xref:System.Threading.Tasks.TaskCanceledException> 无任何内部异常的。</span><span class="sxs-lookup"><span data-stu-id="4d269-478">.NET Core throws a <xref:System.Threading.Tasks.TaskCanceledException> without any inner exception.</span></span>
> - <span data-ttu-id="4d269-479">.NET 5.0 和更高版本引发了 <xref:System.Threading.Tasks.TaskCanceledException> 嵌套的 <xref:System.TimeoutException> 。</span><span class="sxs-lookup"><span data-stu-id="4d269-479">.NET 5.0 and later versions throw a <xref:System.Threading.Tasks.TaskCanceledException> that nests a <xref:System.TimeoutException>.</span></span>
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4d269-480"><paramref name="requestUri" /> 必须为绝对 URI 或必须设置 <see cref="P:System.Net.Http.HttpClient.BaseAddress" />。</span><span class="sxs-lookup"><span data-stu-id="4d269-480">The <paramref name="requestUri" /> must be an absolute URI or <see cref="P:System.Net.Http.HttpClient.BaseAddress" /> must be set.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="4d269-481">由于基础问题（如网络连接性、DNS 失败、服务器证书验证或仅 .NET Framework 超时），请求失败。</span><span class="sxs-lookup"><span data-stu-id="4d269-481">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation (or timeout for .NET Framework only).</span></span></exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException"><span data-ttu-id="4d269-482">仅限 .NET Core 和 .NET 5.0 及更高版本：请求因超时而失败。</span><span class="sxs-lookup"><span data-stu-id="4d269-482">.NET Core and .NET 5.0 and later only: The request failed due to timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetStreamAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetStreamAsync (string? requestUri, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetStreamAsync(string requestUri, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetStreamAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetStreamAsync (requestUri As String, cancellationToken As CancellationToken) As Task(Of Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::IO::Stream ^&gt; ^ GetStreamAsync(System::String ^ requestUri, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.GetStreamAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="httpClient.GetStreamAsync (requestUri, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" Index="0" FrameworkAlternate="net-5.0" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="net-5.0" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="4d269-483">请求发送到的 URI。</span><span class="sxs-lookup"><span data-stu-id="4d269-483">The Uri the request is sent to.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="4d269-484">用于取消操作的取消令牌。</span><span class="sxs-lookup"><span data-stu-id="4d269-484">The cancellation token to cancel the operation.</span></span></param>
        <summary><span data-ttu-id="4d269-485">将 GET 请求发送到指定 URI 并在异步操作中以流的形式返回响应正文。</span><span class="sxs-lookup"><span data-stu-id="4d269-485">Send a GET request to the specified Uri and return the response body as a stream in an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="4d269-486">表示异步操作的任务对象。</span><span class="sxs-lookup"><span data-stu-id="4d269-486">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[
  
## Remarks  
 <span data-ttu-id="4d269-487">此操作不会阻止。</span><span class="sxs-lookup"><span data-stu-id="4d269-487">This operation will not block.</span></span> <span data-ttu-id="4d269-488">在 <xref:System.Threading.Tasks.Task%601> 读取响应标头后，返回的对象将完成。</span><span class="sxs-lookup"><span data-stu-id="4d269-488">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the response headers are read.</span></span> <span data-ttu-id="4d269-489">此方法不读取或缓冲响应正文。</span><span class="sxs-lookup"><span data-stu-id="4d269-489">This method does not read nor buffer the response body.</span></span>  

> [!NOTE]
> <span data-ttu-id="4d269-490">如果超时，则：</span><span class="sxs-lookup"><span data-stu-id="4d269-490">In case of a timeout:</span></span>
> - <span data-ttu-id="4d269-491">.NET Framework 引发 <xref:System.Net.Http.HttpRequestException> 。</span><span class="sxs-lookup"><span data-stu-id="4d269-491">.NET Framework throws a <xref:System.Net.Http.HttpRequestException>.</span></span>
> - <span data-ttu-id="4d269-492">.NET Core 引发 <xref:System.Threading.Tasks.TaskCanceledException> 无任何内部异常的。</span><span class="sxs-lookup"><span data-stu-id="4d269-492">.NET Core throws a <xref:System.Threading.Tasks.TaskCanceledException> without any inner exception.</span></span>
> - <span data-ttu-id="4d269-493">.NET 5.0 和更高版本引发了 <xref:System.Threading.Tasks.TaskCanceledException> 嵌套的 <xref:System.TimeoutException> 。</span><span class="sxs-lookup"><span data-stu-id="4d269-493">.NET 5.0 and later versions throw a <xref:System.Threading.Tasks.TaskCanceledException> that nests a <xref:System.TimeoutException>.</span></span>
 ]]></format>
        </remarks>
      </Docs>
      <exception cref="T:System.ArgumentNullException">The <paramref name="requestUri" /> is <see langword="null" />.</exception>
      <exception cref="T:System.Net.Http.HttpRequestException">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation (or timeout for .NET Framework only).</exception>
      <exception cref="T:System.Threading.Tasks.TaskCanceledException">.NET Core and .NET 5.0 and later only: The request failed due to timeout.</exception>
    </Member>
    <Member MemberName="GetStreamAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetStreamAsync (Uri? requestUri, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetStreamAsync(class System.Uri requestUri, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetStreamAsync(System.Uri,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetStreamAsync (requestUri As Uri, cancellationToken As CancellationToken) As Task(Of Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::IO::Stream ^&gt; ^ GetStreamAsync(Uri ^ requestUri, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.GetStreamAsync : Uri * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="httpClient.GetStreamAsync (requestUri, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" Index="0" FrameworkAlternate="net-5.0" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="net-5.0" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="4d269-494">请求发送到的 URI。</span><span class="sxs-lookup"><span data-stu-id="4d269-494">The Uri the request is sent to.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="4d269-495">用于取消操作的取消令牌。</span><span class="sxs-lookup"><span data-stu-id="4d269-495">The cancellation token to cancel the operation.</span></span></param>
        <summary><span data-ttu-id="4d269-496">将 GET 请求发送到指定 URI 并在异步操作中以流的形式返回响应正文。</span><span class="sxs-lookup"><span data-stu-id="4d269-496">Send a GET request to the specified Uri and return the response body as a stream in an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="4d269-497">表示异步操作的任务对象。</span><span class="sxs-lookup"><span data-stu-id="4d269-497">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d269-498">此操作不会阻止。</span><span class="sxs-lookup"><span data-stu-id="4d269-498">This operation will not block.</span></span> <span data-ttu-id="4d269-499">在 <xref:System.Threading.Tasks.Task%601> 读取响应标头后，返回的对象将完成。</span><span class="sxs-lookup"><span data-stu-id="4d269-499">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the response headers are read.</span></span> <span data-ttu-id="4d269-500">此方法不读取或缓冲响应正文。</span><span class="sxs-lookup"><span data-stu-id="4d269-500">This method does not read nor buffer the response body.</span></span>  

> [!NOTE]
> <span data-ttu-id="4d269-501">如果超时，则：</span><span class="sxs-lookup"><span data-stu-id="4d269-501">In case of a timeout:</span></span>
> - <span data-ttu-id="4d269-502">.NET Framework 引发 <xref:System.Net.Http.HttpRequestException> 。</span><span class="sxs-lookup"><span data-stu-id="4d269-502">.NET Framework throws a <xref:System.Net.Http.HttpRequestException>.</span></span>
> - <span data-ttu-id="4d269-503">.NET Core 引发 <xref:System.Threading.Tasks.TaskCanceledException> 无任何内部异常的。</span><span class="sxs-lookup"><span data-stu-id="4d269-503">.NET Core throws a <xref:System.Threading.Tasks.TaskCanceledException> without any inner exception.</span></span>
> - <span data-ttu-id="4d269-504">.NET 5.0 和更高版本引发了 <xref:System.Threading.Tasks.TaskCanceledException> 嵌套的 <xref:System.TimeoutException> 。</span><span class="sxs-lookup"><span data-stu-id="4d269-504">.NET 5.0 and later versions throw a <xref:System.Threading.Tasks.TaskCanceledException> that nests a <xref:System.TimeoutException>.</span></span>
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d269-505"><paramref name="requestUri" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d269-505">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="4d269-506">由于基础问题（如网络连接性、DNS 失败、服务器证书验证或仅 .NET Framework 超时），请求失败。</span><span class="sxs-lookup"><span data-stu-id="4d269-506">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation (or timeout for .NET Framework only).</span></span></exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException"><span data-ttu-id="4d269-507">仅限 .NET Core 和 .NET 5.0 及更高版本：请求因超时而失败。</span><span class="sxs-lookup"><span data-stu-id="4d269-507">.NET Core and .NET 5.0 and later only: The request failed due to timeout.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetStringAsync">
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="4d269-508">将 GET 请求发送到指定 URI 并在异步操作中以字符串的形式返回响应正文。</span><span class="sxs-lookup"><span data-stu-id="4d269-508">Send a GET request to the specified Uri and return the response body as a string in an asynchronous operation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d269-509">此操作不会阻止。</span><span class="sxs-lookup"><span data-stu-id="4d269-509">This operation will not block.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetStringAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;string&gt; GetStringAsync (string requestUri);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;string&gt; GetStringAsync(string requestUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetStringAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetStringAsync (requestUri As String) As Task(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::String ^&gt; ^ GetStringAsync(System::String ^ requestUri);" />
      <MemberSignature Language="F#" Value="member this.GetStringAsync : string -&gt; System.Threading.Tasks.Task&lt;string&gt;" Usage="httpClient.GetStringAsync requestUri" />
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;string&gt; GetStringAsync (string? requestUri);" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="4d269-510">请求发送到的 URI。</span><span class="sxs-lookup"><span data-stu-id="4d269-510">The Uri the request is sent to.</span></span></param>
        <summary><span data-ttu-id="4d269-511">将 GET 请求发送到指定 URI 并在异步操作中以字符串的形式返回响应正文。</span><span class="sxs-lookup"><span data-stu-id="4d269-511">Send a GET request to the specified Uri and return the response body as a string in an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="4d269-512">表示异步操作的任务对象。</span><span class="sxs-lookup"><span data-stu-id="4d269-512">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d269-513">此操作不会阻止。</span><span class="sxs-lookup"><span data-stu-id="4d269-513">This operation will not block.</span></span> <span data-ttu-id="4d269-514">在 <xref:System.Threading.Tasks.Task%601> 读取整个响应正文后，返回的对象将完成。</span><span class="sxs-lookup"><span data-stu-id="4d269-514">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response body is read.</span></span>  

> [!NOTE]
> <span data-ttu-id="4d269-515">如果超时，则：</span><span class="sxs-lookup"><span data-stu-id="4d269-515">In case of a timeout:</span></span>
> - <span data-ttu-id="4d269-516">.NET Framework 引发 <xref:System.Net.Http.HttpRequestException> 。</span><span class="sxs-lookup"><span data-stu-id="4d269-516">.NET Framework throws a <xref:System.Net.Http.HttpRequestException>.</span></span>
> - <span data-ttu-id="4d269-517">.NET Core 引发 <xref:System.Threading.Tasks.TaskCanceledException> 无任何内部异常的。</span><span class="sxs-lookup"><span data-stu-id="4d269-517">.NET Core throws a <xref:System.Threading.Tasks.TaskCanceledException> without any inner exception.</span></span>
> - <span data-ttu-id="4d269-518">.NET 5.0 和更高版本引发了 <xref:System.Threading.Tasks.TaskCanceledException> 嵌套的 <xref:System.TimeoutException> 。</span><span class="sxs-lookup"><span data-stu-id="4d269-518">.NET 5.0 and later versions throw a <xref:System.Threading.Tasks.TaskCanceledException> that nests a <xref:System.TimeoutException>.</span></span>
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4d269-519"><paramref name="requestUri" /> 必须为绝对 URI 或必须设置 <see cref="P:System.Net.Http.HttpClient.BaseAddress" />。</span><span class="sxs-lookup"><span data-stu-id="4d269-519">The <paramref name="requestUri" /> must be an absolute URI or <see cref="P:System.Net.Http.HttpClient.BaseAddress" /> must be set.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="4d269-520">由于基础问题（如网络连接性、DNS 失败、服务器证书验证或仅 .NET Framework 超时），请求失败。</span><span class="sxs-lookup"><span data-stu-id="4d269-520">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation (or timeout for .NET Framework only).</span></span></exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException"><span data-ttu-id="4d269-521">仅限 .NET Core 和 .NET 5.0 及更高版本：请求因超时而失败。</span><span class="sxs-lookup"><span data-stu-id="4d269-521">.NET Core and .NET 5.0 and later only: The request failed due to timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetStringAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;string&gt; GetStringAsync (Uri requestUri);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;string&gt; GetStringAsync(class System.Uri requestUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetStringAsync(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetStringAsync (requestUri As Uri) As Task(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::String ^&gt; ^ GetStringAsync(Uri ^ requestUri);" />
      <MemberSignature Language="F#" Value="member this.GetStringAsync : Uri -&gt; System.Threading.Tasks.Task&lt;string&gt;" Usage="httpClient.GetStringAsync requestUri" />
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;string&gt; GetStringAsync (Uri? requestUri);" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="4d269-522">请求发送到的 URI。</span><span class="sxs-lookup"><span data-stu-id="4d269-522">The Uri the request is sent to.</span></span></param>
        <summary><span data-ttu-id="4d269-523">将 GET 请求发送到指定 URI 并在异步操作中以字符串的形式返回响应正文。</span><span class="sxs-lookup"><span data-stu-id="4d269-523">Send a GET request to the specified Uri and return the response body as a string in an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="4d269-524">表示异步操作的任务对象。</span><span class="sxs-lookup"><span data-stu-id="4d269-524">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d269-525">此操作不会阻止。</span><span class="sxs-lookup"><span data-stu-id="4d269-525">This operation will not block.</span></span> <span data-ttu-id="4d269-526">在 <xref:System.Threading.Tasks.Task%601> 读取整个响应正文后，返回的对象将完成。</span><span class="sxs-lookup"><span data-stu-id="4d269-526">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response body is read.</span></span>  

> [!NOTE]
> <span data-ttu-id="4d269-527">如果超时，则：</span><span class="sxs-lookup"><span data-stu-id="4d269-527">In case of a timeout:</span></span>
> - <span data-ttu-id="4d269-528">.NET Framework 引发 <xref:System.Net.Http.HttpRequestException> 。</span><span class="sxs-lookup"><span data-stu-id="4d269-528">.NET Framework throws a <xref:System.Net.Http.HttpRequestException>.</span></span>
> - <span data-ttu-id="4d269-529">.NET Core 引发 <xref:System.Threading.Tasks.TaskCanceledException> 无任何内部异常的。</span><span class="sxs-lookup"><span data-stu-id="4d269-529">.NET Core throws a <xref:System.Threading.Tasks.TaskCanceledException> without any inner exception.</span></span>
> - <span data-ttu-id="4d269-530">.NET 5.0 和更高版本引发了 <xref:System.Threading.Tasks.TaskCanceledException> 嵌套的 <xref:System.TimeoutException> 。</span><span class="sxs-lookup"><span data-stu-id="4d269-530">.NET 5.0 and later versions throw a <xref:System.Threading.Tasks.TaskCanceledException> that nests a <xref:System.TimeoutException>.</span></span>
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4d269-531"><paramref name="requestUri" /> 必须为绝对 URI 或必须设置 <see cref="P:System.Net.Http.HttpClient.BaseAddress" />。</span><span class="sxs-lookup"><span data-stu-id="4d269-531">The <paramref name="requestUri" /> must be an absolute URI or <see cref="P:System.Net.Http.HttpClient.BaseAddress" /> must be set.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="4d269-532">由于基础问题（如网络连接性、DNS 失败、服务器证书验证或仅 .NET Framework 超时），请求失败。</span><span class="sxs-lookup"><span data-stu-id="4d269-532">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation (or timeout for .NET Framework only).</span></span></exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException"><span data-ttu-id="4d269-533">仅限 .NET Core 和 .NET 5.0 及更高版本：请求因超时而失败。</span><span class="sxs-lookup"><span data-stu-id="4d269-533">.NET Core and .NET 5.0 and later only: The request failed due to timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetStringAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;string&gt; GetStringAsync (string? requestUri, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;string&gt; GetStringAsync(string requestUri, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetStringAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetStringAsync (requestUri As String, cancellationToken As CancellationToken) As Task(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::String ^&gt; ^ GetStringAsync(System::String ^ requestUri, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.GetStringAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;string&gt;" Usage="httpClient.GetStringAsync (requestUri, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" Index="0" FrameworkAlternate="net-5.0" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="net-5.0" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="4d269-534">请求发送到的 URI。</span><span class="sxs-lookup"><span data-stu-id="4d269-534">The Uri the request is sent to.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="4d269-535">用于取消操作的取消令牌。</span><span class="sxs-lookup"><span data-stu-id="4d269-535">The cancellation token to cancel the operation.</span></span></param>
        <summary><span data-ttu-id="4d269-536">将 GET 请求发送到指定 URI 并在异步操作中以字符串的形式返回响应正文。</span><span class="sxs-lookup"><span data-stu-id="4d269-536">Send a GET request to the specified Uri and return the response body as a string in an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="4d269-537">表示异步操作的任务对象。</span><span class="sxs-lookup"><span data-stu-id="4d269-537">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d269-538">此操作不会阻止。</span><span class="sxs-lookup"><span data-stu-id="4d269-538">This operation will not block.</span></span> <span data-ttu-id="4d269-539">在 <xref:System.Threading.Tasks.Task%601> 读取整个响应正文后，返回的对象将完成。</span><span class="sxs-lookup"><span data-stu-id="4d269-539">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response body is read.</span></span>  

> [!NOTE]
> <span data-ttu-id="4d269-540">如果超时，则：</span><span class="sxs-lookup"><span data-stu-id="4d269-540">In case of a timeout:</span></span>
> - <span data-ttu-id="4d269-541">.NET Framework 引发 <xref:System.Net.Http.HttpRequestException> 。</span><span class="sxs-lookup"><span data-stu-id="4d269-541">.NET Framework throws a <xref:System.Net.Http.HttpRequestException>.</span></span>
> - <span data-ttu-id="4d269-542">.NET Core 引发 <xref:System.Threading.Tasks.TaskCanceledException> 无任何内部异常的。</span><span class="sxs-lookup"><span data-stu-id="4d269-542">.NET Core throws a <xref:System.Threading.Tasks.TaskCanceledException> without any inner exception.</span></span>
> - <span data-ttu-id="4d269-543">.NET 5.0 和更高版本引发了 <xref:System.Threading.Tasks.TaskCanceledException> 嵌套的 <xref:System.TimeoutException> 。</span><span class="sxs-lookup"><span data-stu-id="4d269-543">.NET 5.0 and later versions throw a <xref:System.Threading.Tasks.TaskCanceledException> that nests a <xref:System.TimeoutException>.</span></span>
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d269-544"><paramref name="requestUri" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d269-544">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="4d269-545">由于基础问题（如网络连接性、DNS 失败、服务器证书验证或仅 .NET Framework 超时），请求失败。</span><span class="sxs-lookup"><span data-stu-id="4d269-545">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation (or timeout for .NET Framework only).</span></span></exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException"><span data-ttu-id="4d269-546">仅限 .NET Core 和 .NET 5.0 及更高版本：请求因超时而失败。</span><span class="sxs-lookup"><span data-stu-id="4d269-546">.NET Core and .NET 5.0 and later only: The request failed due to timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetStringAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;string&gt; GetStringAsync (Uri? requestUri, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;string&gt; GetStringAsync(class System.Uri requestUri, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetStringAsync(System.Uri,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetStringAsync (requestUri As Uri, cancellationToken As CancellationToken) As Task(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::String ^&gt; ^ GetStringAsync(Uri ^ requestUri, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.GetStringAsync : Uri * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;string&gt;" Usage="httpClient.GetStringAsync (requestUri, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" Index="0" FrameworkAlternate="net-5.0" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="net-5.0" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="4d269-547">请求发送到的 URI。</span><span class="sxs-lookup"><span data-stu-id="4d269-547">The Uri the request is sent to.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="4d269-548">用于取消操作的取消令牌。</span><span class="sxs-lookup"><span data-stu-id="4d269-548">The cancellation token to cancel the operation.</span></span></param>
        <summary><span data-ttu-id="4d269-549">将 GET 请求发送到指定 URI 并在异步操作中以字符串的形式返回响应正文。</span><span class="sxs-lookup"><span data-stu-id="4d269-549">Send a GET request to the specified Uri and return the response body as a string in an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="4d269-550">表示异步操作的任务对象。</span><span class="sxs-lookup"><span data-stu-id="4d269-550">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d269-551">此操作不会阻止。</span><span class="sxs-lookup"><span data-stu-id="4d269-551">This operation will not block.</span></span> <span data-ttu-id="4d269-552">在 <xref:System.Threading.Tasks.Task%601> 读取整个响应正文后，返回的对象将完成。</span><span class="sxs-lookup"><span data-stu-id="4d269-552">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response body is read.</span></span>  

> [!NOTE]
> <span data-ttu-id="4d269-553">如果超时，则：</span><span class="sxs-lookup"><span data-stu-id="4d269-553">In case of a timeout:</span></span>
> - <span data-ttu-id="4d269-554">.NET Framework 引发 <xref:System.Net.Http.HttpRequestException> 。</span><span class="sxs-lookup"><span data-stu-id="4d269-554">.NET Framework throws a <xref:System.Net.Http.HttpRequestException>.</span></span>
> - <span data-ttu-id="4d269-555">.NET Core 引发 <xref:System.Threading.Tasks.TaskCanceledException> 无任何内部异常的。</span><span class="sxs-lookup"><span data-stu-id="4d269-555">.NET Core throws a <xref:System.Threading.Tasks.TaskCanceledException> without any inner exception.</span></span>
> - <span data-ttu-id="4d269-556">.NET 5.0 和更高版本引发了 <xref:System.Threading.Tasks.TaskCanceledException> 嵌套的 <xref:System.TimeoutException> 。</span><span class="sxs-lookup"><span data-stu-id="4d269-556">.NET 5.0 and later versions throw a <xref:System.Threading.Tasks.TaskCanceledException> that nests a <xref:System.TimeoutException>.</span></span>
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d269-557"><paramref name="requestUri" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d269-557">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="4d269-558">由于基础问题（如网络连接性、DNS 失败、服务器证书验证或仅 .NET Framework 超时），请求失败。</span><span class="sxs-lookup"><span data-stu-id="4d269-558">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation (or timeout for .NET Framework only).</span></span></exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException"><span data-ttu-id="4d269-559">仅限 .NET Core 和 .NET 5.0 及更高版本：请求因超时而失败。</span><span class="sxs-lookup"><span data-stu-id="4d269-559">.NET Core and .NET 5.0 and later only: The request failed due to timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="MaxResponseContentBufferSize">
      <MemberSignature Language="C#" Value="public long MaxResponseContentBufferSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 MaxResponseContentBufferSize" />
      <MemberSignature Language="DocId" Value="P:System.Net.Http.HttpClient.MaxResponseContentBufferSize" />
      <MemberSignature Language="VB.NET" Value="Public Property MaxResponseContentBufferSize As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long MaxResponseContentBufferSize { long get(); void set(long value); };" />
      <MemberSignature Language="F#" Value="member this.MaxResponseContentBufferSize : int64 with get, set" Usage="System.Net.Http.HttpClient.MaxResponseContentBufferSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="4d269-560">获取或设置读取响应内容时要缓冲的最大字节数。</span><span class="sxs-lookup"><span data-stu-id="4d269-560">Gets or sets the maximum number of bytes to buffer when reading the response content.</span></span></summary>
        <value><span data-ttu-id="4d269-561">当读取响应内容时缓冲区的最大字节数。</span><span class="sxs-lookup"><span data-stu-id="4d269-561">The maximum number of bytes to buffer when reading the response content.</span></span> <span data-ttu-id="4d269-562">此属性的默认值为 2 GB。</span><span class="sxs-lookup"><span data-stu-id="4d269-562">The default value for this property is 2 gigabytes.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d269-563">应用可以将属性设置 <xref:System.Net.Http.HttpClient.MaxResponseContentBufferSize%2A> 为较小的值，以限制读取响应时缓冲区的响应大小。</span><span class="sxs-lookup"><span data-stu-id="4d269-563">An app can set the <xref:System.Net.Http.HttpClient.MaxResponseContentBufferSize%2A> property to a lower value to limit the size of the response to buffer when reading the response.</span></span> <span data-ttu-id="4d269-564">如果响应内容的大小大于  <xref:System.Net.Http.HttpClient.MaxResponseContentBufferSize%2A> 属性，则会引发异常。</span><span class="sxs-lookup"><span data-stu-id="4d269-564">If the size of the response content is greater than the  <xref:System.Net.Http.HttpClient.MaxResponseContentBufferSize%2A> property, an exception is thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="4d269-565">指定大小小于或等于零。</span><span class="sxs-lookup"><span data-stu-id="4d269-565">The size specified is less than or equal to zero.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4d269-566">已在当前实例上启动了一个操作。</span><span class="sxs-lookup"><span data-stu-id="4d269-566">An operation has already been started on the current instance.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="4d269-567">已释放当前实例。</span><span class="sxs-lookup"><span data-stu-id="4d269-567">The current instance has been disposed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="PatchAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PatchAsync (string? requestUri, System.Net.Http.HttpContent content);" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PatchAsync(string requestUri, class System.Net.Http.HttpContent content) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.PatchAsync(System.String,System.Net.Http.HttpContent)" />
      <MemberSignature Language="VB.NET" Value="Public Function PatchAsync (requestUri As String, content As HttpContent) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ PatchAsync(System::String ^ requestUri, System::Net::Http::HttpContent ^ content);" />
      <MemberSignature Language="F#" Value="member this.PatchAsync : string * System.Net.Http.HttpContent -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.PatchAsync (requestUri, content)" />
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PatchAsync (string requestUri, System.Net.Http.HttpContent content);" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="content" Type="System.Net.Http.HttpContent" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="4d269-568">请求发送到的 URI。</span><span class="sxs-lookup"><span data-stu-id="4d269-568">The Uri the request is sent to.</span></span></param>
        <param name="content"><span data-ttu-id="4d269-569">发送到服务器的 HTTP 请求内容。</span><span class="sxs-lookup"><span data-stu-id="4d269-569">The HTTP request content sent to the server.</span></span></param>
        <summary><span data-ttu-id="4d269-570">以异步操作方式将 PATCH 请求发送到指定为字符串的 URI。</span><span class="sxs-lookup"><span data-stu-id="4d269-570">Sends a PATCH request to a Uri designated as a string as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="4d269-571">表示异步操作的任务对象。</span><span class="sxs-lookup"><span data-stu-id="4d269-571">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d269-572">此操作不会阻止。</span><span class="sxs-lookup"><span data-stu-id="4d269-572">This operation will not block.</span></span> <span data-ttu-id="4d269-573">返回 <xref:System.Threading.Tasks.Task%601> 的对象将在整个响应 (包括内容) 读取后完成。</span><span class="sxs-lookup"><span data-stu-id="4d269-573">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PatchAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PatchAsync (Uri? requestUri, System.Net.Http.HttpContent content);" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PatchAsync(class System.Uri requestUri, class System.Net.Http.HttpContent content) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.PatchAsync(System.Uri,System.Net.Http.HttpContent)" />
      <MemberSignature Language="VB.NET" Value="Public Function PatchAsync (requestUri As Uri, content As HttpContent) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ PatchAsync(Uri ^ requestUri, System::Net::Http::HttpContent ^ content);" />
      <MemberSignature Language="F#" Value="member this.PatchAsync : Uri * System.Net.Http.HttpContent -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.PatchAsync (requestUri, content)" />
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PatchAsync (Uri requestUri, System.Net.Http.HttpContent content);" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="content" Type="System.Net.Http.HttpContent" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="4d269-574">请求发送到的 URI。</span><span class="sxs-lookup"><span data-stu-id="4d269-574">The Uri the request is sent to.</span></span></param>
        <param name="content"><span data-ttu-id="4d269-575">发送到服务器的 HTTP 请求内容。</span><span class="sxs-lookup"><span data-stu-id="4d269-575">The HTTP request content sent to the server.</span></span></param>
        <summary><span data-ttu-id="4d269-576">以异步操作方式发送 PATCH 请求。</span><span class="sxs-lookup"><span data-stu-id="4d269-576">Sends a PATCH request as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="4d269-577">表示异步操作的任务对象。</span><span class="sxs-lookup"><span data-stu-id="4d269-577">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d269-578">此操作不会阻止。</span><span class="sxs-lookup"><span data-stu-id="4d269-578">This operation will not block.</span></span> <span data-ttu-id="4d269-579">返回 <xref:System.Threading.Tasks.Task%601> 的对象将在整个响应 (包括内容) 读取后完成。</span><span class="sxs-lookup"><span data-stu-id="4d269-579">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PatchAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PatchAsync (string? requestUri, System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken);" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PatchAsync(string requestUri, class System.Net.Http.HttpContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.PatchAsync(System.String,System.Net.Http.HttpContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function PatchAsync (requestUri As String, content As HttpContent, cancellationToken As CancellationToken) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ PatchAsync(System::String ^ requestUri, System::Net::Http::HttpContent ^ content, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.PatchAsync : string * System.Net.Http.HttpContent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.PatchAsync (requestUri, content, cancellationToken)" />
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PatchAsync (string requestUri, System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken);" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="content" Type="System.Net.Http.HttpContent" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="4d269-580">请求发送到的 URI。</span><span class="sxs-lookup"><span data-stu-id="4d269-580">The Uri the request is sent to.</span></span></param>
        <param name="content"><span data-ttu-id="4d269-581">发送到服务器的 HTTP 请求内容。</span><span class="sxs-lookup"><span data-stu-id="4d269-581">The HTTP request content sent to the server.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="4d269-582">可由其他对象或线程用以接收取消通知的取消标记。</span><span class="sxs-lookup"><span data-stu-id="4d269-582">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</span></span></param>
        <summary><span data-ttu-id="4d269-583">以异步操作方式将带有取消令牌的 PATCH 请求发送到表示为字符串的 URI。</span><span class="sxs-lookup"><span data-stu-id="4d269-583">Sends a PATCH request with a cancellation token to a Uri represented as a string as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="4d269-584">表示异步操作的任务对象。</span><span class="sxs-lookup"><span data-stu-id="4d269-584">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d269-585">此操作不会阻止。</span><span class="sxs-lookup"><span data-stu-id="4d269-585">This operation will not block.</span></span> <span data-ttu-id="4d269-586">返回 <xref:System.Threading.Tasks.Task%601> 的对象将在整个响应 (包括内容) 读取后完成。</span><span class="sxs-lookup"><span data-stu-id="4d269-586">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PatchAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PatchAsync (Uri? requestUri, System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken);" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PatchAsync(class System.Uri requestUri, class System.Net.Http.HttpContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.PatchAsync(System.Uri,System.Net.Http.HttpContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function PatchAsync (requestUri As Uri, content As HttpContent, cancellationToken As CancellationToken) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ PatchAsync(Uri ^ requestUri, System::Net::Http::HttpContent ^ content, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.PatchAsync : Uri * System.Net.Http.HttpContent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.PatchAsync (requestUri, content, cancellationToken)" />
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PatchAsync (Uri requestUri, System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken);" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="content" Type="System.Net.Http.HttpContent" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="4d269-587">请求发送到的 URI。</span><span class="sxs-lookup"><span data-stu-id="4d269-587">The Uri the request is sent to.</span></span></param>
        <param name="content"><span data-ttu-id="4d269-588">发送到服务器的 HTTP 请求内容。</span><span class="sxs-lookup"><span data-stu-id="4d269-588">The HTTP request content sent to the server.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="4d269-589">可由其他对象或线程用以接收取消通知的取消标记。</span><span class="sxs-lookup"><span data-stu-id="4d269-589">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</span></span></param>
        <summary><span data-ttu-id="4d269-590">以异步操作方式发送带有取消令牌的 PATCH 请求。</span><span class="sxs-lookup"><span data-stu-id="4d269-590">Sends a PATCH request with a cancellation token as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="4d269-591">表示异步操作的任务对象。</span><span class="sxs-lookup"><span data-stu-id="4d269-591">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d269-592">此操作不会阻止。</span><span class="sxs-lookup"><span data-stu-id="4d269-592">This operation will not block.</span></span> <span data-ttu-id="4d269-593">返回 <xref:System.Threading.Tasks.Task%601> 的对象将在整个响应 (包括内容) 读取后完成。</span><span class="sxs-lookup"><span data-stu-id="4d269-593">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="PostAsync">
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="4d269-594">以异步操作将 POST 请求发送给指定 URI。</span><span class="sxs-lookup"><span data-stu-id="4d269-594">Send a POST request to the specified Uri as an asynchronous operation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d269-595">此操作不会阻止。</span><span class="sxs-lookup"><span data-stu-id="4d269-595">This operation will not block.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="PostAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PostAsync (string requestUri, System.Net.Http.HttpContent content);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PostAsync(string requestUri, class System.Net.Http.HttpContent content) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.PostAsync(System.String,System.Net.Http.HttpContent)" />
      <MemberSignature Language="VB.NET" Value="Public Function PostAsync (requestUri As String, content As HttpContent) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ PostAsync(System::String ^ requestUri, System::Net::Http::HttpContent ^ content);" />
      <MemberSignature Language="F#" Value="member this.PostAsync : string * System.Net.Http.HttpContent -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.PostAsync (requestUri, content)" />
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PostAsync (string? requestUri, System.Net.Http.HttpContent content);" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" />
        <Parameter Name="content" Type="System.Net.Http.HttpContent" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="4d269-596">请求发送到的 URI。</span><span class="sxs-lookup"><span data-stu-id="4d269-596">The Uri the request is sent to.</span></span></param>
        <param name="content"><span data-ttu-id="4d269-597">发送到服务器的 HTTP 请求内容。</span><span class="sxs-lookup"><span data-stu-id="4d269-597">The HTTP request content sent to the server.</span></span></param>
        <summary><span data-ttu-id="4d269-598">以异步操作将 POST 请求发送给指定 URI。</span><span class="sxs-lookup"><span data-stu-id="4d269-598">Send a POST request to the specified Uri as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="4d269-599">表示异步操作的任务对象。</span><span class="sxs-lookup"><span data-stu-id="4d269-599">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d269-600">此操作不会阻止。</span><span class="sxs-lookup"><span data-stu-id="4d269-600">This operation will not block.</span></span> <span data-ttu-id="4d269-601">返回 <xref:System.Threading.Tasks.Task%601> 的对象将在整个响应 (包括内容) 读取后完成。</span><span class="sxs-lookup"><span data-stu-id="4d269-601">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  

> [!NOTE]
> <span data-ttu-id="4d269-602">在超时情况下，不同的 .NET 实现会引发不同的异常。</span><span class="sxs-lookup"><span data-stu-id="4d269-602">In case of timeout, different exceptions are thrown on different .NET implementations.</span></span>
> - <span data-ttu-id="4d269-603"><xref:System.Net.Http.HttpRequestException> 所有适用的 .NET Framework 版本都将引发。</span><span class="sxs-lookup"><span data-stu-id="4d269-603"><xref:System.Net.Http.HttpRequestException> is thrown on all applicable .NET Framework versions.</span></span>
> - <span data-ttu-id="4d269-604"><xref:System.Threading.Tasks.TaskCanceledException> 在所有适用的 .NET Core 版本上都不会引发任何内部异常。</span><span class="sxs-lookup"><span data-stu-id="4d269-604"><xref:System.Threading.Tasks.TaskCanceledException> without any inner exception is thrown on all applicable .NET Core versions.</span></span>
> - <span data-ttu-id="4d269-605"><xref:System.Threading.Tasks.TaskCanceledException><xref:System.TimeoutException>在 .net 5.0 和更高版本上，将引发嵌套的。</span><span class="sxs-lookup"><span data-stu-id="4d269-605"><xref:System.Threading.Tasks.TaskCanceledException> that nests a <xref:System.TimeoutException> is thrown on .NET 5.0 and later versions.</span></span>
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4d269-606"><paramref name="requestUri" /> 必须为绝对 URI 或必须设置 <see cref="P:System.Net.Http.HttpClient.BaseAddress" />。</span><span class="sxs-lookup"><span data-stu-id="4d269-606">The <paramref name="requestUri" /> must be an absolute URI or <see cref="P:System.Net.Http.HttpClient.BaseAddress" /> must be set.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="4d269-607">由于基础问题（如网络连接性、DNS 失败、服务器证书验证或超时），请求失败。</span><span class="sxs-lookup"><span data-stu-id="4d269-607">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException"><span data-ttu-id="4d269-608">仅限 .NET Core 和 .NET 5.0 及更高版本：请求因超时而失败。</span><span class="sxs-lookup"><span data-stu-id="4d269-608">.NET Core and .NET 5.0 and later only: The request failed due to timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="PostAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PostAsync (Uri requestUri, System.Net.Http.HttpContent content);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PostAsync(class System.Uri requestUri, class System.Net.Http.HttpContent content) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.PostAsync(System.Uri,System.Net.Http.HttpContent)" />
      <MemberSignature Language="VB.NET" Value="Public Function PostAsync (requestUri As Uri, content As HttpContent) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ PostAsync(Uri ^ requestUri, System::Net::Http::HttpContent ^ content);" />
      <MemberSignature Language="F#" Value="member this.PostAsync : Uri * System.Net.Http.HttpContent -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.PostAsync (requestUri, content)" />
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PostAsync (Uri? requestUri, System.Net.Http.HttpContent content);" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" />
        <Parameter Name="content" Type="System.Net.Http.HttpContent" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="4d269-609">请求发送到的 URI。</span><span class="sxs-lookup"><span data-stu-id="4d269-609">The Uri the request is sent to.</span></span></param>
        <param name="content"><span data-ttu-id="4d269-610">发送到服务器的 HTTP 请求内容。</span><span class="sxs-lookup"><span data-stu-id="4d269-610">The HTTP request content sent to the server.</span></span></param>
        <summary><span data-ttu-id="4d269-611">以异步操作将 POST 请求发送给指定 URI。</span><span class="sxs-lookup"><span data-stu-id="4d269-611">Send a POST request to the specified Uri as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="4d269-612">表示异步操作的任务对象。</span><span class="sxs-lookup"><span data-stu-id="4d269-612">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d269-613">此操作不会阻止。</span><span class="sxs-lookup"><span data-stu-id="4d269-613">This operation will not block.</span></span> <span data-ttu-id="4d269-614">返回 <xref:System.Threading.Tasks.Task%601> 的对象将在整个响应 (包括内容) 读取后完成。</span><span class="sxs-lookup"><span data-stu-id="4d269-614">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  

> [!NOTE]
> <span data-ttu-id="4d269-615">在超时情况下，不同的 .NET 实现会引发不同的异常。</span><span class="sxs-lookup"><span data-stu-id="4d269-615">In case of timeout, different exceptions are thrown on different .NET implementations.</span></span>
> - <span data-ttu-id="4d269-616"><xref:System.Net.Http.HttpRequestException> 所有适用的 .NET Framework 版本都将引发。</span><span class="sxs-lookup"><span data-stu-id="4d269-616"><xref:System.Net.Http.HttpRequestException> is thrown on all applicable .NET Framework versions.</span></span>
> - <span data-ttu-id="4d269-617"><xref:System.Threading.Tasks.TaskCanceledException> 在所有适用的 .NET Core 版本上都不会引发任何内部异常。</span><span class="sxs-lookup"><span data-stu-id="4d269-617"><xref:System.Threading.Tasks.TaskCanceledException> without any inner exception is thrown on all applicable .NET Core versions.</span></span>
> - <span data-ttu-id="4d269-618"><xref:System.Threading.Tasks.TaskCanceledException><xref:System.TimeoutException>在 .net 5.0 和更高版本上，将引发嵌套的。</span><span class="sxs-lookup"><span data-stu-id="4d269-618"><xref:System.Threading.Tasks.TaskCanceledException> that nests a <xref:System.TimeoutException> is thrown on .NET 5.0 and later versions.</span></span>
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4d269-619"><paramref name="requestUri" /> 必须为绝对 URI 或必须设置 <see cref="P:System.Net.Http.HttpClient.BaseAddress" />。</span><span class="sxs-lookup"><span data-stu-id="4d269-619">The <paramref name="requestUri" /> must be an absolute URI or <see cref="P:System.Net.Http.HttpClient.BaseAddress" /> must be set.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="4d269-620">由于基础问题（如网络连接性、DNS 失败、服务器证书验证或超时），请求失败。</span><span class="sxs-lookup"><span data-stu-id="4d269-620">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException"><span data-ttu-id="4d269-621">仅限 .NET Core 和 .NET 5.0 及更高版本：请求因超时而失败。</span><span class="sxs-lookup"><span data-stu-id="4d269-621">.NET Core and .NET 5.0 and later only: The request failed due to timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="PostAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PostAsync (string requestUri, System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PostAsync(string requestUri, class System.Net.Http.HttpContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.PostAsync(System.String,System.Net.Http.HttpContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function PostAsync (requestUri As String, content As HttpContent, cancellationToken As CancellationToken) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ PostAsync(System::String ^ requestUri, System::Net::Http::HttpContent ^ content, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.PostAsync : string * System.Net.Http.HttpContent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.PostAsync (requestUri, content, cancellationToken)" />
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PostAsync (string? requestUri, System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken);" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" />
        <Parameter Name="content" Type="System.Net.Http.HttpContent" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="4d269-622">请求发送到的 URI。</span><span class="sxs-lookup"><span data-stu-id="4d269-622">The Uri the request is sent to.</span></span></param>
        <param name="content"><span data-ttu-id="4d269-623">发送到服务器的 HTTP 请求内容。</span><span class="sxs-lookup"><span data-stu-id="4d269-623">The HTTP request content sent to the server.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="4d269-624">可由其他对象或线程用以接收取消通知的取消标记。</span><span class="sxs-lookup"><span data-stu-id="4d269-624">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</span></span></param>
        <summary><span data-ttu-id="4d269-625">用以异步操作的取消标记发送 POST 请求。</span><span class="sxs-lookup"><span data-stu-id="4d269-625">Send a POST request with a cancellation token as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="4d269-626">表示异步操作的任务对象。</span><span class="sxs-lookup"><span data-stu-id="4d269-626">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d269-627">此操作不会阻止。</span><span class="sxs-lookup"><span data-stu-id="4d269-627">This operation will not block.</span></span> <span data-ttu-id="4d269-628">返回 <xref:System.Threading.Tasks.Task%601> 的对象将在整个响应 (包括内容) 读取后完成。</span><span class="sxs-lookup"><span data-stu-id="4d269-628">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  

> [!NOTE]
> <span data-ttu-id="4d269-629">在超时情况下，不同的 .NET 实现会引发不同的异常。</span><span class="sxs-lookup"><span data-stu-id="4d269-629">In case of timeout, different exceptions are thrown on different .NET implementations.</span></span>
> - <span data-ttu-id="4d269-630"><xref:System.Net.Http.HttpRequestException> 所有适用的 .NET Framework 版本都将引发。</span><span class="sxs-lookup"><span data-stu-id="4d269-630"><xref:System.Net.Http.HttpRequestException> is thrown on all applicable .NET Framework versions.</span></span>
> - <span data-ttu-id="4d269-631"><xref:System.Threading.Tasks.TaskCanceledException> 在所有适用的 .NET Core 版本上都不会引发任何内部异常。</span><span class="sxs-lookup"><span data-stu-id="4d269-631"><xref:System.Threading.Tasks.TaskCanceledException> without any inner exception is thrown on all applicable .NET Core versions.</span></span>
> - <span data-ttu-id="4d269-632"><xref:System.Threading.Tasks.TaskCanceledException><xref:System.TimeoutException>在 .net 5.0 和更高版本上，将引发嵌套的。</span><span class="sxs-lookup"><span data-stu-id="4d269-632"><xref:System.Threading.Tasks.TaskCanceledException> that nests a <xref:System.TimeoutException> is thrown on .NET 5.0 and later versions.</span></span>
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4d269-633"><paramref name="requestUri" /> 必须为绝对 URI 或必须设置 <see cref="P:System.Net.Http.HttpClient.BaseAddress" />。</span><span class="sxs-lookup"><span data-stu-id="4d269-633">The <paramref name="requestUri" /> must be an absolute URI or <see cref="P:System.Net.Http.HttpClient.BaseAddress" /> must be set.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="4d269-634">由于基础问题（如网络连接性、DNS 失败、服务器证书验证或超时），请求失败。</span><span class="sxs-lookup"><span data-stu-id="4d269-634">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException"><span data-ttu-id="4d269-635">仅限 .NET Core 和 .NET 5.0 及更高版本：请求因超时而失败。</span><span class="sxs-lookup"><span data-stu-id="4d269-635">.NET Core and .NET 5.0 and later only: The request failed due to timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="PostAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PostAsync (Uri requestUri, System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PostAsync(class System.Uri requestUri, class System.Net.Http.HttpContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.PostAsync(System.Uri,System.Net.Http.HttpContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function PostAsync (requestUri As Uri, content As HttpContent, cancellationToken As CancellationToken) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ PostAsync(Uri ^ requestUri, System::Net::Http::HttpContent ^ content, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.PostAsync : Uri * System.Net.Http.HttpContent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.PostAsync (requestUri, content, cancellationToken)" />
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PostAsync (Uri? requestUri, System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken);" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" />
        <Parameter Name="content" Type="System.Net.Http.HttpContent" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="4d269-636">请求发送到的 URI。</span><span class="sxs-lookup"><span data-stu-id="4d269-636">The Uri the request is sent to.</span></span></param>
        <param name="content"><span data-ttu-id="4d269-637">发送到服务器的 HTTP 请求内容。</span><span class="sxs-lookup"><span data-stu-id="4d269-637">The HTTP request content sent to the server.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="4d269-638">可由其他对象或线程用以接收取消通知的取消标记。</span><span class="sxs-lookup"><span data-stu-id="4d269-638">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</span></span></param>
        <summary><span data-ttu-id="4d269-639">用以异步操作的取消标记发送 POST 请求。</span><span class="sxs-lookup"><span data-stu-id="4d269-639">Send a POST request with a cancellation token as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="4d269-640">表示异步操作的任务对象。</span><span class="sxs-lookup"><span data-stu-id="4d269-640">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d269-641">此操作不会阻止。</span><span class="sxs-lookup"><span data-stu-id="4d269-641">This operation will not block.</span></span> <span data-ttu-id="4d269-642">返回 <xref:System.Threading.Tasks.Task%601> 的对象将在整个响应 (包括内容) 读取后完成。</span><span class="sxs-lookup"><span data-stu-id="4d269-642">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  

> [!NOTE]
> <span data-ttu-id="4d269-643">在超时情况下，不同的 .NET 实现会引发不同的异常。</span><span class="sxs-lookup"><span data-stu-id="4d269-643">In case of timeout, different exceptions are thrown on different .NET implementations.</span></span>
> - <span data-ttu-id="4d269-644"><xref:System.Net.Http.HttpRequestException> 所有适用的 .NET Framework 版本都将引发。</span><span class="sxs-lookup"><span data-stu-id="4d269-644"><xref:System.Net.Http.HttpRequestException> is thrown on all applicable .NET Framework versions.</span></span>
> - <span data-ttu-id="4d269-645"><xref:System.Threading.Tasks.TaskCanceledException> 在所有适用的 .NET Core 版本上都不会引发任何内部异常。</span><span class="sxs-lookup"><span data-stu-id="4d269-645"><xref:System.Threading.Tasks.TaskCanceledException> without any inner exception is thrown on all applicable .NET Core versions.</span></span>
> - <span data-ttu-id="4d269-646"><xref:System.Threading.Tasks.TaskCanceledException><xref:System.TimeoutException>在 .net 5.0 和更高版本上，将引发嵌套的。</span><span class="sxs-lookup"><span data-stu-id="4d269-646"><xref:System.Threading.Tasks.TaskCanceledException> that nests a <xref:System.TimeoutException> is thrown on .NET 5.0 and later versions.</span></span>
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4d269-647"><paramref name="requestUri" /> 必须为绝对 URI 或必须设置 <see cref="P:System.Net.Http.HttpClient.BaseAddress" />。</span><span class="sxs-lookup"><span data-stu-id="4d269-647">The <paramref name="requestUri" /> must be an absolute URI or <see cref="P:System.Net.Http.HttpClient.BaseAddress" /> must be set.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="4d269-648">由于基础问题（如网络连接性、DNS 失败、服务器证书验证或超时），请求失败。</span><span class="sxs-lookup"><span data-stu-id="4d269-648">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException"><span data-ttu-id="4d269-649">仅限 .NET Core 和 .NET 5.0 及更高版本：请求因超时而失败。</span><span class="sxs-lookup"><span data-stu-id="4d269-649">.NET Core and .NET 5.0 and later only: The request failed due to timeout.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="PutAsync">
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="4d269-650">以异步操作将 PUT 请求发送给指定 URI。</span><span class="sxs-lookup"><span data-stu-id="4d269-650">Send a PUT request to the specified Uri as an asynchronous operation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d269-651">此操作不会阻止。</span><span class="sxs-lookup"><span data-stu-id="4d269-651">This operation will not block.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="PutAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PutAsync (string requestUri, System.Net.Http.HttpContent content);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PutAsync(string requestUri, class System.Net.Http.HttpContent content) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.PutAsync(System.String,System.Net.Http.HttpContent)" />
      <MemberSignature Language="VB.NET" Value="Public Function PutAsync (requestUri As String, content As HttpContent) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ PutAsync(System::String ^ requestUri, System::Net::Http::HttpContent ^ content);" />
      <MemberSignature Language="F#" Value="member this.PutAsync : string * System.Net.Http.HttpContent -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.PutAsync (requestUri, content)" />
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PutAsync (string? requestUri, System.Net.Http.HttpContent content);" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" />
        <Parameter Name="content" Type="System.Net.Http.HttpContent" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="4d269-652">请求发送到的 URI。</span><span class="sxs-lookup"><span data-stu-id="4d269-652">The Uri the request is sent to.</span></span></param>
        <param name="content"><span data-ttu-id="4d269-653">发送到服务器的 HTTP 请求内容。</span><span class="sxs-lookup"><span data-stu-id="4d269-653">The HTTP request content sent to the server.</span></span></param>
        <summary><span data-ttu-id="4d269-654">以异步操作将 PUT 请求发送给指定 URI。</span><span class="sxs-lookup"><span data-stu-id="4d269-654">Send a PUT request to the specified Uri as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="4d269-655">表示异步操作的任务对象。</span><span class="sxs-lookup"><span data-stu-id="4d269-655">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d269-656">此操作不会阻止。</span><span class="sxs-lookup"><span data-stu-id="4d269-656">This operation will not block.</span></span> <span data-ttu-id="4d269-657">返回 <xref:System.Threading.Tasks.Task%601> 的对象将在整个响应 (包括内容) 读取后完成。</span><span class="sxs-lookup"><span data-stu-id="4d269-657">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  

> [!NOTE]
> <span data-ttu-id="4d269-658">在超时情况下，不同的 .NET 实现会引发不同的异常。</span><span class="sxs-lookup"><span data-stu-id="4d269-658">In case of timeout, different exceptions are thrown on different .NET implementations.</span></span>
> - <span data-ttu-id="4d269-659"><xref:System.Net.Http.HttpRequestException> 所有适用的 .NET Framework 版本都将引发。</span><span class="sxs-lookup"><span data-stu-id="4d269-659"><xref:System.Net.Http.HttpRequestException> is thrown on all applicable .NET Framework versions.</span></span>
> - <span data-ttu-id="4d269-660"><xref:System.Threading.Tasks.TaskCanceledException> 在所有适用的 .NET Core 版本上都不会引发任何内部异常。</span><span class="sxs-lookup"><span data-stu-id="4d269-660"><xref:System.Threading.Tasks.TaskCanceledException> without any inner exception is thrown on all applicable .NET Core versions.</span></span>
> - <span data-ttu-id="4d269-661"><xref:System.Threading.Tasks.TaskCanceledException><xref:System.TimeoutException>在 .net 5.0 和更高版本上，将引发嵌套的。</span><span class="sxs-lookup"><span data-stu-id="4d269-661"><xref:System.Threading.Tasks.TaskCanceledException> that nests a <xref:System.TimeoutException> is thrown on .NET 5.0 and later versions.</span></span>
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4d269-662"><paramref name="requestUri" /> 必须为绝对 URI 或必须设置 <see cref="P:System.Net.Http.HttpClient.BaseAddress" />。</span><span class="sxs-lookup"><span data-stu-id="4d269-662">The <paramref name="requestUri" /> must be an absolute URI or <see cref="P:System.Net.Http.HttpClient.BaseAddress" /> must be set.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="4d269-663">由于基础问题（如网络连接性、DNS 失败、服务器证书验证或超时），请求失败。</span><span class="sxs-lookup"><span data-stu-id="4d269-663">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException"><span data-ttu-id="4d269-664">仅限 .NET Core 和 .NET 5.0 及更高版本：请求因超时而失败。</span><span class="sxs-lookup"><span data-stu-id="4d269-664">.NET Core and .NET 5.0 and later only: The request failed due to timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="PutAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PutAsync (Uri requestUri, System.Net.Http.HttpContent content);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PutAsync(class System.Uri requestUri, class System.Net.Http.HttpContent content) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.PutAsync(System.Uri,System.Net.Http.HttpContent)" />
      <MemberSignature Language="VB.NET" Value="Public Function PutAsync (requestUri As Uri, content As HttpContent) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ PutAsync(Uri ^ requestUri, System::Net::Http::HttpContent ^ content);" />
      <MemberSignature Language="F#" Value="member this.PutAsync : Uri * System.Net.Http.HttpContent -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.PutAsync (requestUri, content)" />
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PutAsync (Uri? requestUri, System.Net.Http.HttpContent content);" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" />
        <Parameter Name="content" Type="System.Net.Http.HttpContent" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="4d269-665">请求发送到的 URI。</span><span class="sxs-lookup"><span data-stu-id="4d269-665">The Uri the request is sent to.</span></span></param>
        <param name="content"><span data-ttu-id="4d269-666">发送到服务器的 HTTP 请求内容。</span><span class="sxs-lookup"><span data-stu-id="4d269-666">The HTTP request content sent to the server.</span></span></param>
        <summary><span data-ttu-id="4d269-667">以异步操作将 PUT 请求发送给指定 URI。</span><span class="sxs-lookup"><span data-stu-id="4d269-667">Send a PUT request to the specified Uri as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="4d269-668">表示异步操作的任务对象。</span><span class="sxs-lookup"><span data-stu-id="4d269-668">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d269-669">此操作不会阻止。</span><span class="sxs-lookup"><span data-stu-id="4d269-669">This operation will not block.</span></span> <span data-ttu-id="4d269-670">返回 <xref:System.Threading.Tasks.Task%601> 的对象将在整个响应 (包括内容) 读取后完成。</span><span class="sxs-lookup"><span data-stu-id="4d269-670">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  

> [!NOTE]
> <span data-ttu-id="4d269-671">在超时情况下，不同的 .NET 实现会引发不同的异常。</span><span class="sxs-lookup"><span data-stu-id="4d269-671">In case of timeout, different exceptions are thrown on different .NET implementations.</span></span>
> - <span data-ttu-id="4d269-672"><xref:System.Net.Http.HttpRequestException> 所有适用的 .NET Framework 版本都将引发。</span><span class="sxs-lookup"><span data-stu-id="4d269-672"><xref:System.Net.Http.HttpRequestException> is thrown on all applicable .NET Framework versions.</span></span>
> - <span data-ttu-id="4d269-673"><xref:System.Threading.Tasks.TaskCanceledException> 在所有适用的 .NET Core 版本上都不会引发任何内部异常。</span><span class="sxs-lookup"><span data-stu-id="4d269-673"><xref:System.Threading.Tasks.TaskCanceledException> without any inner exception is thrown on all applicable .NET Core versions.</span></span>
> - <span data-ttu-id="4d269-674"><xref:System.Threading.Tasks.TaskCanceledException><xref:System.TimeoutException>在 .net 5.0 和更高版本上，将引发嵌套的。</span><span class="sxs-lookup"><span data-stu-id="4d269-674"><xref:System.Threading.Tasks.TaskCanceledException> that nests a <xref:System.TimeoutException> is thrown on .NET 5.0 and later versions.</span></span>
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4d269-675"><paramref name="requestUri" /> 必须为绝对 URI 或必须设置 <see cref="P:System.Net.Http.HttpClient.BaseAddress" />。</span><span class="sxs-lookup"><span data-stu-id="4d269-675">The <paramref name="requestUri" /> must be an absolute URI or <see cref="P:System.Net.Http.HttpClient.BaseAddress" /> must be set.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="4d269-676">由于基础问题（如网络连接性、DNS 失败、服务器证书验证或超时），请求失败。</span><span class="sxs-lookup"><span data-stu-id="4d269-676">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException"><span data-ttu-id="4d269-677">仅限 .NET Core 和 .NET 5.0 及更高版本：请求因超时而失败。</span><span class="sxs-lookup"><span data-stu-id="4d269-677">.NET Core and .NET 5.0 and later only: The request failed due to timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="PutAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PutAsync (string requestUri, System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PutAsync(string requestUri, class System.Net.Http.HttpContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.PutAsync(System.String,System.Net.Http.HttpContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function PutAsync (requestUri As String, content As HttpContent, cancellationToken As CancellationToken) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ PutAsync(System::String ^ requestUri, System::Net::Http::HttpContent ^ content, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.PutAsync : string * System.Net.Http.HttpContent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.PutAsync (requestUri, content, cancellationToken)" />
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PutAsync (string? requestUri, System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken);" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" />
        <Parameter Name="content" Type="System.Net.Http.HttpContent" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="4d269-678">请求发送到的 URI。</span><span class="sxs-lookup"><span data-stu-id="4d269-678">The Uri the request is sent to.</span></span></param>
        <param name="content"><span data-ttu-id="4d269-679">发送到服务器的 HTTP 请求内容。</span><span class="sxs-lookup"><span data-stu-id="4d269-679">The HTTP request content sent to the server.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="4d269-680">可由其他对象或线程用以接收取消通知的取消标记。</span><span class="sxs-lookup"><span data-stu-id="4d269-680">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</span></span></param>
        <summary><span data-ttu-id="4d269-681">用以异步操作的取消标记发送 PUT 请求。</span><span class="sxs-lookup"><span data-stu-id="4d269-681">Send a PUT request with a cancellation token as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="4d269-682">表示异步操作的任务对象。</span><span class="sxs-lookup"><span data-stu-id="4d269-682">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d269-683">此操作不会阻止。</span><span class="sxs-lookup"><span data-stu-id="4d269-683">This operation will not block.</span></span> <span data-ttu-id="4d269-684">返回 <xref:System.Threading.Tasks.Task%601> 的对象将在整个响应 (包括内容) 读取后完成。</span><span class="sxs-lookup"><span data-stu-id="4d269-684">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  

> [!NOTE]
> <span data-ttu-id="4d269-685">在超时情况下，不同的 .NET 实现会引发不同的异常。</span><span class="sxs-lookup"><span data-stu-id="4d269-685">In case of timeout, different exceptions are thrown on different .NET implementations.</span></span>
> - <span data-ttu-id="4d269-686"><xref:System.Net.Http.HttpRequestException> 所有适用的 .NET Framework 版本都将引发。</span><span class="sxs-lookup"><span data-stu-id="4d269-686"><xref:System.Net.Http.HttpRequestException> is thrown on all applicable .NET Framework versions.</span></span>
> - <span data-ttu-id="4d269-687"><xref:System.Threading.Tasks.TaskCanceledException> 在所有适用的 .NET Core 版本上都不会引发任何内部异常。</span><span class="sxs-lookup"><span data-stu-id="4d269-687"><xref:System.Threading.Tasks.TaskCanceledException> without any inner exception is thrown on all applicable .NET Core versions.</span></span>
> - <span data-ttu-id="4d269-688"><xref:System.Threading.Tasks.TaskCanceledException><xref:System.TimeoutException>在 .net 5.0 和更高版本上，将引发嵌套的。</span><span class="sxs-lookup"><span data-stu-id="4d269-688"><xref:System.Threading.Tasks.TaskCanceledException> that nests a <xref:System.TimeoutException> is thrown on .NET 5.0 and later versions.</span></span>
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4d269-689"><paramref name="requestUri" /> 必须为绝对 URI 或必须设置 <see cref="P:System.Net.Http.HttpClient.BaseAddress" />。</span><span class="sxs-lookup"><span data-stu-id="4d269-689">The <paramref name="requestUri" /> must be an absolute URI or <see cref="P:System.Net.Http.HttpClient.BaseAddress" /> must be set.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="4d269-690">由于基础问题（如网络连接性、DNS 失败、服务器证书验证或超时），请求失败。</span><span class="sxs-lookup"><span data-stu-id="4d269-690">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException"><span data-ttu-id="4d269-691">仅限 .NET Core 和 .NET 5.0 及更高版本：请求因超时而失败。</span><span class="sxs-lookup"><span data-stu-id="4d269-691">.NET Core and .NET 5.0 and later only: The request failed due to timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="PutAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PutAsync (Uri requestUri, System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PutAsync(class System.Uri requestUri, class System.Net.Http.HttpContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.PutAsync(System.Uri,System.Net.Http.HttpContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function PutAsync (requestUri As Uri, content As HttpContent, cancellationToken As CancellationToken) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ PutAsync(Uri ^ requestUri, System::Net::Http::HttpContent ^ content, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.PutAsync : Uri * System.Net.Http.HttpContent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.PutAsync (requestUri, content, cancellationToken)" />
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PutAsync (Uri? requestUri, System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken);" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" />
        <Parameter Name="content" Type="System.Net.Http.HttpContent" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="4d269-692">请求发送到的 URI。</span><span class="sxs-lookup"><span data-stu-id="4d269-692">The Uri the request is sent to.</span></span></param>
        <param name="content"><span data-ttu-id="4d269-693">发送到服务器的 HTTP 请求内容。</span><span class="sxs-lookup"><span data-stu-id="4d269-693">The HTTP request content sent to the server.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="4d269-694">可由其他对象或线程用以接收取消通知的取消标记。</span><span class="sxs-lookup"><span data-stu-id="4d269-694">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</span></span></param>
        <summary><span data-ttu-id="4d269-695">用以异步操作的取消标记发送 PUT 请求。</span><span class="sxs-lookup"><span data-stu-id="4d269-695">Send a PUT request with a cancellation token as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="4d269-696">表示异步操作的任务对象。</span><span class="sxs-lookup"><span data-stu-id="4d269-696">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d269-697">此操作不会阻止。</span><span class="sxs-lookup"><span data-stu-id="4d269-697">This operation will not block.</span></span> <span data-ttu-id="4d269-698">返回 <xref:System.Threading.Tasks.Task%601> 的对象将在整个响应 (包括内容) 读取后完成。</span><span class="sxs-lookup"><span data-stu-id="4d269-698">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  

> [!NOTE]
> <span data-ttu-id="4d269-699">在超时情况下，不同的 .NET 实现会引发不同的异常。</span><span class="sxs-lookup"><span data-stu-id="4d269-699">In case of timeout, different exceptions are thrown on different .NET implementations.</span></span>
> - <span data-ttu-id="4d269-700"><xref:System.Net.Http.HttpRequestException> 所有适用的 .NET Framework 版本都将引发。</span><span class="sxs-lookup"><span data-stu-id="4d269-700"><xref:System.Net.Http.HttpRequestException> is thrown on all applicable .NET Framework versions.</span></span>
> - <span data-ttu-id="4d269-701"><xref:System.Threading.Tasks.TaskCanceledException> 在所有适用的 .NET Core 版本上都不会引发任何内部异常。</span><span class="sxs-lookup"><span data-stu-id="4d269-701"><xref:System.Threading.Tasks.TaskCanceledException> without any inner exception is thrown on all applicable .NET Core versions.</span></span>
> - <span data-ttu-id="4d269-702"><xref:System.Threading.Tasks.TaskCanceledException><xref:System.TimeoutException>在 .net 5.0 和更高版本上，将引发嵌套的。</span><span class="sxs-lookup"><span data-stu-id="4d269-702"><xref:System.Threading.Tasks.TaskCanceledException> that nests a <xref:System.TimeoutException> is thrown on .NET 5.0 and later versions.</span></span>
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4d269-703"><paramref name="requestUri" /> 必须为绝对 URI 或必须设置 <see cref="P:System.Net.Http.HttpClient.BaseAddress" />。</span><span class="sxs-lookup"><span data-stu-id="4d269-703">The <paramref name="requestUri" /> must be an absolute URI or <see cref="P:System.Net.Http.HttpClient.BaseAddress" /> must be set.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="4d269-704">由于基础问题（如网络连接性、DNS 失败、服务器证书验证或超时），请求失败。</span><span class="sxs-lookup"><span data-stu-id="4d269-704">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException"><span data-ttu-id="4d269-705">仅限 .NET Core 和 .NET 5.0 及更高版本：请求因超时而失败。</span><span class="sxs-lookup"><span data-stu-id="4d269-705">.NET Core and .NET 5.0 and later only: The request failed due to timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public System.Net.Http.HttpResponseMessage Send (System.Net.Http.HttpRequestMessage request);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.Http.HttpResponseMessage Send(class System.Net.Http.HttpRequestMessage request) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.Send(System.Net.Http.HttpRequestMessage)" />
      <MemberSignature Language="VB.NET" Value="Public Function Send (request As HttpRequestMessage) As HttpResponseMessage" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::Http::HttpResponseMessage ^ Send(System::Net::Http::HttpRequestMessage ^ request);" />
      <MemberSignature Language="F#" Value="override this.Send : System.Net.Http.HttpRequestMessage -&gt; System.Net.Http.HttpResponseMessage" Usage="httpClient.Send request" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Http.HttpResponseMessage</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.Net.Http.HttpRequestMessage" Index="0" FrameworkAlternate="net-5.0" />
      </Parameters>
      <Docs>
        <param name="request"><span data-ttu-id="4d269-706">要发送的 HTTP 请求消息。</span><span class="sxs-lookup"><span data-stu-id="4d269-706">The HTTP request message to send.</span></span></param>
        <summary><span data-ttu-id="4d269-707">发送带有指定请求的 HTTP 请求。</span><span class="sxs-lookup"><span data-stu-id="4d269-707">Sends an HTTP request with the specified request.</span></span></summary>
        <returns><span data-ttu-id="4d269-708">HTTP 响应消息。</span><span class="sxs-lookup"><span data-stu-id="4d269-708">An HTTP response message.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d269-709"><paramref name="request" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d269-709">The <paramref name="request" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="4d269-710">HTTP 版本为 2.0 或更高版本，或者版本策略设置为 <see cref="F:System.Net.Http.HttpVersionPolicy.RequestVersionOrHigher" />。</span><span class="sxs-lookup"><span data-stu-id="4d269-710">The HTTP version is 2.0 or higher or the version policy is set to <see cref="F:System.Net.Http.HttpVersionPolicy.RequestVersionOrHigher" />.</span></span>

<span data-ttu-id="4d269-711">或</span><span class="sxs-lookup"><span data-stu-id="4d269-711">-or-</span></span>

<span data-ttu-id="4d269-712">派生自 <see cref="T:System.Net.Http.HttpContent" /> 的自定义类不会重写 <see cref="M:System.Net.Http.HttpContent.SerializeToStream(System.IO.Stream,System.Net.TransportContext,System.Threading.CancellationToken)" /> 方法。</span><span class="sxs-lookup"><span data-stu-id="4d269-712">The custom class derived from <see cref="T:System.Net.Http.HttpContent" /> does not override the <see cref="M:System.Net.Http.HttpContent.SerializeToStream(System.IO.Stream,System.Net.TransportContext,System.Threading.CancellationToken)" /> method.</span></span>

<span data-ttu-id="4d269-713">或</span><span class="sxs-lookup"><span data-stu-id="4d269-713">-or-</span></span>

<span data-ttu-id="4d269-714">自定义 <see cref="T:System.Net.Http.HttpMessageHandler" /> 不会重写 <see cref="M:System.Net.Http.HttpMessageHandler.Send(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)" /> 方法。</span><span class="sxs-lookup"><span data-stu-id="4d269-714">The custom <see cref="T:System.Net.Http.HttpMessageHandler" /> does not override the <see cref="M:System.Net.Http.HttpMessageHandler.Send(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)" /> method.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4d269-715">请求消息已由 <see cref="T:System.Net.Http.HttpClient" /> 实例发送。</span><span class="sxs-lookup"><span data-stu-id="4d269-715">The request message was already sent by the <see cref="T:System.Net.Http.HttpClient" /> instance.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="4d269-716">由于基础问题（如网络连接性、DNS 失败或服务器证书验证），请求失败。</span><span class="sxs-lookup"><span data-stu-id="4d269-716">The request failed due to an underlying issue such as network connectivity, DNS failure, or server certificate validation.</span></span></exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException"><span data-ttu-id="4d269-717">如果 <see cref="T:System.Threading.Tasks.TaskCanceledException" /> 异常会嵌套 <see cref="T:System.TimeoutException" />：请求因超时而失败。</span><span class="sxs-lookup"><span data-stu-id="4d269-717">If the <see cref="T:System.Threading.Tasks.TaskCanceledException" /> exception nests the <see cref="T:System.TimeoutException" />: The request failed due to timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public System.Net.Http.HttpResponseMessage Send (System.Net.Http.HttpRequestMessage request, System.Net.Http.HttpCompletionOption completionOption);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.Http.HttpResponseMessage Send(class System.Net.Http.HttpRequestMessage request, valuetype System.Net.Http.HttpCompletionOption completionOption) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.Send(System.Net.Http.HttpRequestMessage,System.Net.Http.HttpCompletionOption)" />
      <MemberSignature Language="VB.NET" Value="Public Function Send (request As HttpRequestMessage, completionOption As HttpCompletionOption) As HttpResponseMessage" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::Http::HttpResponseMessage ^ Send(System::Net::Http::HttpRequestMessage ^ request, System::Net::Http::HttpCompletionOption completionOption);" />
      <MemberSignature Language="F#" Value="override this.Send : System.Net.Http.HttpRequestMessage * System.Net.Http.HttpCompletionOption -&gt; System.Net.Http.HttpResponseMessage" Usage="httpClient.Send (request, completionOption)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Http.HttpResponseMessage</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.Net.Http.HttpRequestMessage" Index="0" FrameworkAlternate="net-5.0" />
        <Parameter Name="completionOption" Type="System.Net.Http.HttpCompletionOption" Index="1" FrameworkAlternate="net-5.0" />
      </Parameters>
      <Docs>
        <param name="request"><span data-ttu-id="4d269-718">要发送的 HTTP 请求消息。</span><span class="sxs-lookup"><span data-stu-id="4d269-718">The HTTP request message to send.</span></span></param>
        <param name="completionOption"><span data-ttu-id="4d269-719">枚举值之一，用于指定操作应完成的时间（在响应可用或在读取响应内容之后）。</span><span class="sxs-lookup"><span data-stu-id="4d269-719">One of the enumeration values that specifies when the operation should complete (as soon as a response is available or after reading the response content).</span></span></param>
        <summary><span data-ttu-id="4d269-720">发送 HTTP 请求。</span><span class="sxs-lookup"><span data-stu-id="4d269-720">Sends an HTTP request.</span></span></summary>
        <returns><span data-ttu-id="4d269-721">HTTP 响应消息。</span><span class="sxs-lookup"><span data-stu-id="4d269-721">The HTTP response message.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d269-722"><paramref name="request" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d269-722">The <paramref name="request" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="4d269-723">HTTP 版本为 2.0 或更高版本，或者版本策略设置为 <see cref="F:System.Net.Http.HttpVersionPolicy.RequestVersionOrHigher" />。</span><span class="sxs-lookup"><span data-stu-id="4d269-723">The HTTP version is 2.0 or higher or the version policy is set to <see cref="F:System.Net.Http.HttpVersionPolicy.RequestVersionOrHigher" />.</span></span>

<span data-ttu-id="4d269-724">或</span><span class="sxs-lookup"><span data-stu-id="4d269-724">-or-</span></span>

<span data-ttu-id="4d269-725">派生自 <see cref="T:System.Net.Http.HttpContent" /> 的自定义类不会重写 <see cref="M:System.Net.Http.HttpContent.SerializeToStream(System.IO.Stream,System.Net.TransportContext,System.Threading.CancellationToken)" /> 方法。</span><span class="sxs-lookup"><span data-stu-id="4d269-725">The custom class derived from <see cref="T:System.Net.Http.HttpContent" /> does not override the <see cref="M:System.Net.Http.HttpContent.SerializeToStream(System.IO.Stream,System.Net.TransportContext,System.Threading.CancellationToken)" /> method.</span></span>

<span data-ttu-id="4d269-726">或</span><span class="sxs-lookup"><span data-stu-id="4d269-726">-or-</span></span>

<span data-ttu-id="4d269-727">自定义 <see cref="T:System.Net.Http.HttpMessageHandler" /> 不会重写 <see cref="M:System.Net.Http.HttpMessageHandler.Send(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)" /> 方法。</span><span class="sxs-lookup"><span data-stu-id="4d269-727">The custom <see cref="T:System.Net.Http.HttpMessageHandler" /> does not override the <see cref="M:System.Net.Http.HttpMessageHandler.Send(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)" /> method.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4d269-728">请求消息已由 <see cref="T:System.Net.Http.HttpClient" /> 实例发送。</span><span class="sxs-lookup"><span data-stu-id="4d269-728">The request message was already sent by the <see cref="T:System.Net.Http.HttpClient" /> instance.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="4d269-729">由于基础问题（如网络连接性、DNS 失败或服务器证书验证），请求失败。</span><span class="sxs-lookup"><span data-stu-id="4d269-729">The request failed due to an underlying issue such as network connectivity, DNS failure, or server certificate validation.</span></span></exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException"><span data-ttu-id="4d269-730">如果 <see cref="T:System.Threading.Tasks.TaskCanceledException" /> 异常会嵌套 <see cref="T:System.TimeoutException" />：请求因超时而失败。</span><span class="sxs-lookup"><span data-stu-id="4d269-730">If the <see cref="T:System.Threading.Tasks.TaskCanceledException" /> exception nests the <see cref="T:System.TimeoutException" />: The request failed due to timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public override System.Net.Http.HttpResponseMessage Send (System.Net.Http.HttpRequestMessage request, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Net.Http.HttpResponseMessage Send(class System.Net.Http.HttpRequestMessage request, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.Send(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Send (request As HttpRequestMessage, cancellationToken As CancellationToken) As HttpResponseMessage" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Net::Http::HttpResponseMessage ^ Send(System::Net::Http::HttpRequestMessage ^ request, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="override this.Send : System.Net.Http.HttpRequestMessage * System.Threading.CancellationToken -&gt; System.Net.Http.HttpResponseMessage" Usage="httpClient.Send (request, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Http.HttpResponseMessage</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.Net.Http.HttpRequestMessage" Index="0" FrameworkAlternate="net-5.0" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="net-5.0" />
      </Parameters>
      <Docs>
        <param name="request"><span data-ttu-id="4d269-731">要发送的 HTTP 请求消息。</span><span class="sxs-lookup"><span data-stu-id="4d269-731">The HTTP request message to send.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="4d269-732">用于取消此操作的令牌。</span><span class="sxs-lookup"><span data-stu-id="4d269-732">The token to cancel the operation.</span></span></param>
        <summary><span data-ttu-id="4d269-733">发送带有指定请求和取消标记的 HTTP 请求。</span><span class="sxs-lookup"><span data-stu-id="4d269-733">Sends an HTTP request with the specified request and cancellation token.</span></span></summary>
        <returns><span data-ttu-id="4d269-734">HTTP 响应消息。</span><span class="sxs-lookup"><span data-stu-id="4d269-734">The HTTP response message.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d269-735"><paramref name="request" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d269-735">The <paramref name="request" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="4d269-736">HTTP 版本为 2.0 或更高版本，或者版本策略设置为 <see cref="F:System.Net.Http.HttpVersionPolicy.RequestVersionOrHigher" />。</span><span class="sxs-lookup"><span data-stu-id="4d269-736">The HTTP version is 2.0 or higher or the version policy is set to <see cref="F:System.Net.Http.HttpVersionPolicy.RequestVersionOrHigher" />.</span></span>

<span data-ttu-id="4d269-737">或</span><span class="sxs-lookup"><span data-stu-id="4d269-737">-or-</span></span>

<span data-ttu-id="4d269-738">派生自 <see cref="T:System.Net.Http.HttpContent" /> 的自定义类不会重写 <see cref="M:System.Net.Http.HttpContent.SerializeToStream(System.IO.Stream,System.Net.TransportContext,System.Threading.CancellationToken)" /> 方法。</span><span class="sxs-lookup"><span data-stu-id="4d269-738">The custom class derived from <see cref="T:System.Net.Http.HttpContent" /> does not override the <see cref="M:System.Net.Http.HttpContent.SerializeToStream(System.IO.Stream,System.Net.TransportContext,System.Threading.CancellationToken)" /> method.</span></span>

<span data-ttu-id="4d269-739">或</span><span class="sxs-lookup"><span data-stu-id="4d269-739">-or-</span></span>

<span data-ttu-id="4d269-740">自定义 <see cref="T:System.Net.Http.HttpMessageHandler" /> 不会重写 <see cref="M:System.Net.Http.HttpMessageHandler.Send(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)" /> 方法。</span><span class="sxs-lookup"><span data-stu-id="4d269-740">The custom <see cref="T:System.Net.Http.HttpMessageHandler" /> does not override the <see cref="M:System.Net.Http.HttpMessageHandler.Send(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)" /> method.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4d269-741">请求消息已由 <see cref="T:System.Net.Http.HttpClient" /> 实例发送。</span><span class="sxs-lookup"><span data-stu-id="4d269-741">The request message was already sent by the <see cref="T:System.Net.Http.HttpClient" /> instance.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="4d269-742">由于基础问题（如网络连接性、DNS 失败或服务器证书验证），请求失败。</span><span class="sxs-lookup"><span data-stu-id="4d269-742">The request failed due to an underlying issue such as network connectivity, DNS failure, or server certificate validation.</span></span></exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException"><span data-ttu-id="4d269-743">请求已被取消。</span><span class="sxs-lookup"><span data-stu-id="4d269-743">The request was canceled.</span></span>

<span data-ttu-id="4d269-744">或</span><span class="sxs-lookup"><span data-stu-id="4d269-744">-or-</span></span>

<span data-ttu-id="4d269-745">如果 <see cref="T:System.Threading.Tasks.TaskCanceledException" /> 异常会嵌套 <see cref="T:System.TimeoutException" />：请求因超时而失败。</span><span class="sxs-lookup"><span data-stu-id="4d269-745">If the <see cref="T:System.Threading.Tasks.TaskCanceledException" /> exception nests the <see cref="T:System.TimeoutException" />: The request failed due to timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public System.Net.Http.HttpResponseMessage Send (System.Net.Http.HttpRequestMessage request, System.Net.Http.HttpCompletionOption completionOption, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.Http.HttpResponseMessage Send(class System.Net.Http.HttpRequestMessage request, valuetype System.Net.Http.HttpCompletionOption completionOption, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.Send(System.Net.Http.HttpRequestMessage,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function Send (request As HttpRequestMessage, completionOption As HttpCompletionOption, cancellationToken As CancellationToken) As HttpResponseMessage" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::Http::HttpResponseMessage ^ Send(System::Net::Http::HttpRequestMessage ^ request, System::Net::Http::HttpCompletionOption completionOption, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="override this.Send : System.Net.Http.HttpRequestMessage * System.Net.Http.HttpCompletionOption * System.Threading.CancellationToken -&gt; System.Net.Http.HttpResponseMessage" Usage="httpClient.Send (request, completionOption, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Http.HttpResponseMessage</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.Net.Http.HttpRequestMessage" Index="0" FrameworkAlternate="net-5.0" />
        <Parameter Name="completionOption" Type="System.Net.Http.HttpCompletionOption" Index="1" FrameworkAlternate="net-5.0" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="net-5.0" />
      </Parameters>
      <Docs>
        <param name="request"><span data-ttu-id="4d269-746">要发送的 HTTP 请求消息。</span><span class="sxs-lookup"><span data-stu-id="4d269-746">The HTTP request message to send.</span></span></param>
        <param name="completionOption"><span data-ttu-id="4d269-747">枚举值之一，用于指定操作应完成的时间（在响应可用或在读取响应内容之后）。</span><span class="sxs-lookup"><span data-stu-id="4d269-747">One of the enumeration values that specifies when the operation should complete (as soon as a response is available or after reading the response content).</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="4d269-748">用于取消此操作的令牌。</span><span class="sxs-lookup"><span data-stu-id="4d269-748">The token to cancel the operation.</span></span></param>
        <summary><span data-ttu-id="4d269-749">发送带有指定请求、完成选项和取消标记的 HTTP 请求。</span><span class="sxs-lookup"><span data-stu-id="4d269-749">Sends an HTTP request with the specified request, completion option and cancellation token.</span></span></summary>
        <returns><span data-ttu-id="4d269-750">HTTP 响应消息。</span><span class="sxs-lookup"><span data-stu-id="4d269-750">The HTTP response message.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d269-751"><paramref name="request" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d269-751">The <paramref name="request" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="4d269-752">HTTP 版本为 2.0 或更高版本，或者版本策略设置为 <see cref="F:System.Net.Http.HttpVersionPolicy.RequestVersionOrHigher" />。</span><span class="sxs-lookup"><span data-stu-id="4d269-752">The HTTP version is 2.0 or higher or the version policy is set to <see cref="F:System.Net.Http.HttpVersionPolicy.RequestVersionOrHigher" />.</span></span>

<span data-ttu-id="4d269-753">或</span><span class="sxs-lookup"><span data-stu-id="4d269-753">-or-</span></span>

<span data-ttu-id="4d269-754">派生自 <see cref="T:System.Net.Http.HttpContent" /> 的自定义类不会重写 <see cref="M:System.Net.Http.HttpContent.SerializeToStream(System.IO.Stream,System.Net.TransportContext,System.Threading.CancellationToken)" /> 方法。</span><span class="sxs-lookup"><span data-stu-id="4d269-754">The custom class derived from <see cref="T:System.Net.Http.HttpContent" /> does not override the <see cref="M:System.Net.Http.HttpContent.SerializeToStream(System.IO.Stream,System.Net.TransportContext,System.Threading.CancellationToken)" /> method.</span></span>

<span data-ttu-id="4d269-755">或</span><span class="sxs-lookup"><span data-stu-id="4d269-755">-or-</span></span>

<span data-ttu-id="4d269-756">自定义 <see cref="T:System.Net.Http.HttpMessageHandler" /> 不会重写 <see cref="M:System.Net.Http.HttpMessageHandler.Send(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)" /> 方法。</span><span class="sxs-lookup"><span data-stu-id="4d269-756">The custom <see cref="T:System.Net.Http.HttpMessageHandler" /> does not override the <see cref="M:System.Net.Http.HttpMessageHandler.Send(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)" /> method.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4d269-757">请求消息已由 <see cref="T:System.Net.Http.HttpClient" /> 实例发送。</span><span class="sxs-lookup"><span data-stu-id="4d269-757">The request message was already sent by the <see cref="T:System.Net.Http.HttpClient" /> instance.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="4d269-758">由于基础问题（如网络连接性、DNS 失败或服务器证书验证），请求失败。</span><span class="sxs-lookup"><span data-stu-id="4d269-758">The request failed due to an underlying issue such as network connectivity, DNS failure, or server certificate validation.</span></span></exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException"><span data-ttu-id="4d269-759">请求已被取消。</span><span class="sxs-lookup"><span data-stu-id="4d269-759">The request was canceled.</span></span>

<span data-ttu-id="4d269-760">或</span><span class="sxs-lookup"><span data-stu-id="4d269-760">-or-</span></span>

<span data-ttu-id="4d269-761">如果 <see cref="T:System.Threading.Tasks.TaskCanceledException" /> 异常会嵌套 <see cref="T:System.TimeoutException" />：请求因超时而失败。</span><span class="sxs-lookup"><span data-stu-id="4d269-761">If the <see cref="T:System.Threading.Tasks.TaskCanceledException" /> exception nests the <see cref="T:System.TimeoutException" />: The request failed due to timeout.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="SendAsync">
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="4d269-762">以异步操作发送 HTTP 请求。</span><span class="sxs-lookup"><span data-stu-id="4d269-762">Send an HTTP request as an asynchronous operation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d269-763">此操作不会阻止。</span><span class="sxs-lookup"><span data-stu-id="4d269-763">This operation will not block.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; SendAsync (System.Net.Http.HttpRequestMessage request);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; SendAsync(class System.Net.Http.HttpRequestMessage request) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage)" />
      <MemberSignature Language="VB.NET" Value="Public Function SendAsync (request As HttpRequestMessage) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ SendAsync(System::Net::Http::HttpRequestMessage ^ request);" />
      <MemberSignature Language="F#" Value="override this.SendAsync : System.Net.Http.HttpRequestMessage -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.SendAsync request" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.Net.Http.HttpRequestMessage" />
      </Parameters>
      <Docs>
        <param name="request"><span data-ttu-id="4d269-764">要发送的 HTTP 请求消息。</span><span class="sxs-lookup"><span data-stu-id="4d269-764">The HTTP request message to send.</span></span></param>
        <summary><span data-ttu-id="4d269-765">以异步操作发送 HTTP 请求。</span><span class="sxs-lookup"><span data-stu-id="4d269-765">Send an HTTP request as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="4d269-766">表示异步操作的任务对象。</span><span class="sxs-lookup"><span data-stu-id="4d269-766">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d269-767">此操作不会阻止。</span><span class="sxs-lookup"><span data-stu-id="4d269-767">This operation will not block.</span></span> <span data-ttu-id="4d269-768"><xref:System.Threading.Tasks.Task%601>在读取包含内容的整个响应后，将完成返回的对象。</span><span class="sxs-lookup"><span data-stu-id="4d269-768">The returned <xref:System.Threading.Tasks.Task%601> object will complete once the entire response including content is read.</span></span>  

> [!NOTE]
> <span data-ttu-id="4d269-769">在超时情况下，不同的 .NET 实现会引发不同的异常。</span><span class="sxs-lookup"><span data-stu-id="4d269-769">In case of timeout, different exceptions are thrown on different .NET implementations.</span></span>
> - <span data-ttu-id="4d269-770"><xref:System.Net.Http.HttpRequestException> 所有适用的 .NET Framework 版本都将引发。</span><span class="sxs-lookup"><span data-stu-id="4d269-770"><xref:System.Net.Http.HttpRequestException> is thrown on all applicable .NET Framework versions.</span></span>
> - <span data-ttu-id="4d269-771"><xref:System.Threading.Tasks.TaskCanceledException> 在所有适用的 .NET Core 版本上都不会引发任何内部异常。</span><span class="sxs-lookup"><span data-stu-id="4d269-771"><xref:System.Threading.Tasks.TaskCanceledException> without any inner exception is thrown on all applicable .NET Core versions.</span></span>
> - <span data-ttu-id="4d269-772"><xref:System.Threading.Tasks.TaskCanceledException><xref:System.TimeoutException>在 .net 5.0 和更高版本上，将引发嵌套的。</span><span class="sxs-lookup"><span data-stu-id="4d269-772"><xref:System.Threading.Tasks.TaskCanceledException> that nests a <xref:System.TimeoutException> is thrown on .NET 5.0 and later versions.</span></span>
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d269-773"><paramref name="request" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d269-773">The <paramref name="request" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4d269-774">请求消息已由 <see cref="T:System.Net.Http.HttpClient" /> 实例发送。</span><span class="sxs-lookup"><span data-stu-id="4d269-774">The request message was already sent by the <see cref="T:System.Net.Http.HttpClient" /> instance.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="4d269-775">由于基础问题（如网络连接性、DNS 失败、服务器证书验证或超时），请求失败。</span><span class="sxs-lookup"><span data-stu-id="4d269-775">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException"><span data-ttu-id="4d269-776">仅限 .NET Core 和 .NET 5.0 及更高版本：请求因超时而失败。</span><span class="sxs-lookup"><span data-stu-id="4d269-776">.NET Core and .NET 5.0 and later only: The request failed due to timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; SendAsync (System.Net.Http.HttpRequestMessage request, System.Net.Http.HttpCompletionOption completionOption);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; SendAsync(class System.Net.Http.HttpRequestMessage request, valuetype System.Net.Http.HttpCompletionOption completionOption) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage,System.Net.Http.HttpCompletionOption)" />
      <MemberSignature Language="VB.NET" Value="Public Function SendAsync (request As HttpRequestMessage, completionOption As HttpCompletionOption) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ SendAsync(System::Net::Http::HttpRequestMessage ^ request, System::Net::Http::HttpCompletionOption completionOption);" />
      <MemberSignature Language="F#" Value="override this.SendAsync : System.Net.Http.HttpRequestMessage * System.Net.Http.HttpCompletionOption -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.SendAsync (request, completionOption)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.Net.Http.HttpRequestMessage" />
        <Parameter Name="completionOption" Type="System.Net.Http.HttpCompletionOption" />
      </Parameters>
      <Docs>
        <param name="request"><span data-ttu-id="4d269-777">要发送的 HTTP 请求消息。</span><span class="sxs-lookup"><span data-stu-id="4d269-777">The HTTP request message to send.</span></span></param>
        <param name="completionOption"><span data-ttu-id="4d269-778">操作应完成时（在响应可利用或在读取整个响应内容之后）。</span><span class="sxs-lookup"><span data-stu-id="4d269-778">When the operation should complete (as soon as a response is available or after reading the whole response content).</span></span></param>
        <summary><span data-ttu-id="4d269-779">以异步操作发送 HTTP 请求。</span><span class="sxs-lookup"><span data-stu-id="4d269-779">Send an HTTP request as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="4d269-780">表示异步操作的任务对象。</span><span class="sxs-lookup"><span data-stu-id="4d269-780">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d269-781">此操作不会阻止。</span><span class="sxs-lookup"><span data-stu-id="4d269-781">This operation will not block.</span></span> <span data-ttu-id="4d269-782">根据参数的值 `completionOption` ，返回的 <xref:System.Threading.Tasks.Task%601> 对象将在响应可用或包含内容的整个响应（包括内容）之后立即完成。</span><span class="sxs-lookup"><span data-stu-id="4d269-782">Depending on the value of the `completionOption` parameter, the returned <xref:System.Threading.Tasks.Task%601> object will complete as soon as a response is available or the entire response including content is read.</span></span>  

> [!NOTE]
> <span data-ttu-id="4d269-783">在超时情况下，不同的 .NET 实现会引发不同的异常。</span><span class="sxs-lookup"><span data-stu-id="4d269-783">In case of timeout, different exceptions are thrown on different .NET implementations.</span></span>
> - <span data-ttu-id="4d269-784"><xref:System.Net.Http.HttpRequestException> 所有适用的 .NET Framework 版本都将引发。</span><span class="sxs-lookup"><span data-stu-id="4d269-784"><xref:System.Net.Http.HttpRequestException> is thrown on all applicable .NET Framework versions.</span></span>
> - <span data-ttu-id="4d269-785"><xref:System.Threading.Tasks.TaskCanceledException> 在所有适用的 .NET Core 版本上都不会引发任何内部异常。</span><span class="sxs-lookup"><span data-stu-id="4d269-785"><xref:System.Threading.Tasks.TaskCanceledException> without any inner exception is thrown on all applicable .NET Core versions.</span></span>
> - <span data-ttu-id="4d269-786"><xref:System.Threading.Tasks.TaskCanceledException><xref:System.TimeoutException>在 .net 5.0 和更高版本上，将引发嵌套的。</span><span class="sxs-lookup"><span data-stu-id="4d269-786"><xref:System.Threading.Tasks.TaskCanceledException> that nests a <xref:System.TimeoutException> is thrown on .NET 5.0 and later versions.</span></span>
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d269-787"><paramref name="request" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d269-787">The <paramref name="request" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4d269-788">请求消息已由 <see cref="T:System.Net.Http.HttpClient" /> 实例发送。</span><span class="sxs-lookup"><span data-stu-id="4d269-788">The request message was already sent by the <see cref="T:System.Net.Http.HttpClient" /> instance.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="4d269-789">由于基础问题（如网络连接性、DNS 失败、服务器证书验证或超时），请求失败。</span><span class="sxs-lookup"><span data-stu-id="4d269-789">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException"><span data-ttu-id="4d269-790">仅限 .NET Core 和 .NET 5.0 及更高版本：请求因超时而失败。</span><span class="sxs-lookup"><span data-stu-id="4d269-790">.NET Core and .NET 5.0 and later only: The request failed due to timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; SendAsync (System.Net.Http.HttpRequestMessage request, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; SendAsync(class System.Net.Http.HttpRequestMessage request, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function SendAsync (request As HttpRequestMessage, cancellationToken As CancellationToken) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ SendAsync(System::Net::Http::HttpRequestMessage ^ request, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="override this.SendAsync : System.Net.Http.HttpRequestMessage * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.SendAsync (request, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.Net.Http.HttpRequestMessage" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="request"><span data-ttu-id="4d269-791">要发送的 HTTP 请求消息。</span><span class="sxs-lookup"><span data-stu-id="4d269-791">The HTTP request message to send.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="4d269-792">取消操作的取消标记。</span><span class="sxs-lookup"><span data-stu-id="4d269-792">The cancellation token to cancel operation.</span></span></param>
        <summary><span data-ttu-id="4d269-793">以异步操作发送 HTTP 请求。</span><span class="sxs-lookup"><span data-stu-id="4d269-793">Send an HTTP request as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="4d269-794">表示异步操作的任务对象。</span><span class="sxs-lookup"><span data-stu-id="4d269-794">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d269-795">此操作不会阻止。</span><span class="sxs-lookup"><span data-stu-id="4d269-795">This operation will not block.</span></span> <span data-ttu-id="4d269-796"><xref:System.Threading.Tasks.Task%601>在读取包含内容的整个响应后，将完成返回的对象。</span><span class="sxs-lookup"><span data-stu-id="4d269-796">The returned <xref:System.Threading.Tasks.Task%601> object will complete once the entire response including content is read.</span></span>  

> [!NOTE]
> <span data-ttu-id="4d269-797">在超时情况下，不同的 .NET 实现会引发不同的异常。</span><span class="sxs-lookup"><span data-stu-id="4d269-797">In case of timeout, different exceptions are thrown on different .NET implementations.</span></span>
> - <span data-ttu-id="4d269-798"><xref:System.Net.Http.HttpRequestException> 所有适用的 .NET Framework 版本都将引发。</span><span class="sxs-lookup"><span data-stu-id="4d269-798"><xref:System.Net.Http.HttpRequestException> is thrown on all applicable .NET Framework versions.</span></span>
> - <span data-ttu-id="4d269-799"><xref:System.Threading.Tasks.TaskCanceledException> 在所有适用的 .NET Core 版本上都不会引发任何内部异常。</span><span class="sxs-lookup"><span data-stu-id="4d269-799"><xref:System.Threading.Tasks.TaskCanceledException> without any inner exception is thrown on all applicable .NET Core versions.</span></span>
> - <span data-ttu-id="4d269-800"><xref:System.Threading.Tasks.TaskCanceledException><xref:System.TimeoutException>在 .net 5.0 和更高版本上，将引发嵌套的。</span><span class="sxs-lookup"><span data-stu-id="4d269-800"><xref:System.Threading.Tasks.TaskCanceledException> that nests a <xref:System.TimeoutException> is thrown on .NET 5.0 and later versions.</span></span>
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d269-801"><paramref name="request" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d269-801">The <paramref name="request" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4d269-802">请求消息已由 <see cref="T:System.Net.Http.HttpClient" /> 实例发送。</span><span class="sxs-lookup"><span data-stu-id="4d269-802">The request message was already sent by the <see cref="T:System.Net.Http.HttpClient" /> instance.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="4d269-803">由于基础问题（如网络连接性、DNS 失败、服务器证书验证或超时），请求失败。</span><span class="sxs-lookup"><span data-stu-id="4d269-803">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException"><span data-ttu-id="4d269-804">仅限 .NET Core 和 .NET 5.0 及更高版本：请求因超时而失败。</span><span class="sxs-lookup"><span data-stu-id="4d269-804">.NET Core and .NET 5.0 and later only: The request failed due to timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; SendAsync (System.Net.Http.HttpRequestMessage request, System.Net.Http.HttpCompletionOption completionOption, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; SendAsync(class System.Net.Http.HttpRequestMessage request, valuetype System.Net.Http.HttpCompletionOption completionOption, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function SendAsync (request As HttpRequestMessage, completionOption As HttpCompletionOption, cancellationToken As CancellationToken) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ SendAsync(System::Net::Http::HttpRequestMessage ^ request, System::Net::Http::HttpCompletionOption completionOption, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="override this.SendAsync : System.Net.Http.HttpRequestMessage * System.Net.Http.HttpCompletionOption * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.SendAsync (request, completionOption, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.Net.Http.HttpRequestMessage" />
        <Parameter Name="completionOption" Type="System.Net.Http.HttpCompletionOption" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="request"><span data-ttu-id="4d269-805">要发送的 HTTP 请求消息。</span><span class="sxs-lookup"><span data-stu-id="4d269-805">The HTTP request message to send.</span></span></param>
        <param name="completionOption"><span data-ttu-id="4d269-806">操作应完成时（在响应可利用或在读取整个响应内容之后）。</span><span class="sxs-lookup"><span data-stu-id="4d269-806">When the operation should complete (as soon as a response is available or after reading the whole response content).</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="4d269-807">取消操作的取消标记。</span><span class="sxs-lookup"><span data-stu-id="4d269-807">The cancellation token to cancel operation.</span></span></param>
        <summary><span data-ttu-id="4d269-808">以异步操作发送 HTTP 请求。</span><span class="sxs-lookup"><span data-stu-id="4d269-808">Send an HTTP request as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="4d269-809">表示异步操作的任务对象。</span><span class="sxs-lookup"><span data-stu-id="4d269-809">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d269-810">此操作不会阻止。</span><span class="sxs-lookup"><span data-stu-id="4d269-810">This operation will not block.</span></span> <span data-ttu-id="4d269-811">根据参数的值 `completionOption` ，返回的 <xref:System.Threading.Tasks.Task%601> 对象将在响应可用或包含内容的整个响应（包括内容）之后立即完成。</span><span class="sxs-lookup"><span data-stu-id="4d269-811">Depending on the value of the `completionOption` parameter, the returned <xref:System.Threading.Tasks.Task%601> object will complete as soon as a response is available or the entire response including content is read.</span></span>  

> [!NOTE]
> <span data-ttu-id="4d269-812">在超时情况下，不同的 .NET 实现会引发不同的异常。</span><span class="sxs-lookup"><span data-stu-id="4d269-812">In case of timeout, different exceptions are thrown on different .NET implementations.</span></span>
> - <span data-ttu-id="4d269-813"><xref:System.Net.Http.HttpRequestException> 所有适用的 .NET Framework 版本都将引发。</span><span class="sxs-lookup"><span data-stu-id="4d269-813"><xref:System.Net.Http.HttpRequestException> is thrown on all applicable .NET Framework versions.</span></span>
> - <span data-ttu-id="4d269-814"><xref:System.Threading.Tasks.TaskCanceledException> 在所有适用的 .NET Core 版本上都不会引发任何内部异常。</span><span class="sxs-lookup"><span data-stu-id="4d269-814"><xref:System.Threading.Tasks.TaskCanceledException> without any inner exception is thrown on all applicable .NET Core versions.</span></span>
> - <span data-ttu-id="4d269-815"><xref:System.Threading.Tasks.TaskCanceledException><xref:System.TimeoutException>在 .net 5.0 和更高版本上，将引发嵌套的。</span><span class="sxs-lookup"><span data-stu-id="4d269-815"><xref:System.Threading.Tasks.TaskCanceledException> that nests a <xref:System.TimeoutException> is thrown on .NET 5.0 and later versions.</span></span>
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4d269-816"><paramref name="request" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4d269-816">The <paramref name="request" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4d269-817">请求消息已由 <see cref="T:System.Net.Http.HttpClient" /> 实例发送。</span><span class="sxs-lookup"><span data-stu-id="4d269-817">The request message was already sent by the <see cref="T:System.Net.Http.HttpClient" /> instance.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="4d269-818">由于基础问题（如网络连接性、DNS 失败、服务器证书验证或超时），请求失败。</span><span class="sxs-lookup"><span data-stu-id="4d269-818">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException"><span data-ttu-id="4d269-819">仅限 .NET Core 和 .NET 5.0 及更高版本：请求因超时而失败。</span><span class="sxs-lookup"><span data-stu-id="4d269-819">.NET Core and .NET 5.0 and later only: The request failed due to timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Timeout">
      <MemberSignature Language="C#" Value="public TimeSpan Timeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan Timeout" />
      <MemberSignature Language="DocId" Value="P:System.Net.Http.HttpClient.Timeout" />
      <MemberSignature Language="VB.NET" Value="Public Property Timeout As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan Timeout { TimeSpan get(); void set(TimeSpan value); };" />
      <MemberSignature Language="F#" Value="member this.Timeout : TimeSpan with get, set" Usage="System.Net.Http.HttpClient.Timeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="4d269-820">获取或设置请求超时前等待的时间跨度。</span><span class="sxs-lookup"><span data-stu-id="4d269-820">Gets or sets the timespan to wait before the request times out.</span></span></summary>
        <value><span data-ttu-id="4d269-821">请求超时前等待的时间跨度。</span><span class="sxs-lookup"><span data-stu-id="4d269-821">The timespan to wait before the request times out.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d269-822">默认值是 100,000 毫秒（100 秒）。</span><span class="sxs-lookup"><span data-stu-id="4d269-822">The default value is 100,000 milliseconds (100 seconds).</span></span>  
  
 <span data-ttu-id="4d269-823">若要设置无限超时，请将属性值设置为 <xref:System.Threading.Timeout.InfiniteTimeSpan> 。</span><span class="sxs-lookup"><span data-stu-id="4d269-823">To set an infinite timeout, set the property value to <xref:System.Threading.Timeout.InfiniteTimeSpan>.</span></span>  
  
 <span data-ttu-id="4d269-824">域名系统 (DNS) 查询可能需要长达15秒钟的时间来返回或超时。如果你的请求包含需要解析的主机名，并且你将其设置 <xref:System.Net.Http.HttpClient.Timeout%2A> 为小于15秒的值，则可能需要15秒或更长时间，然后才会 <xref:System.Net.WebException> 引发以指示请求超时。</span><span class="sxs-lookup"><span data-stu-id="4d269-824">A Domain Name System (DNS) query may take up to 15 seconds to return or time out. If your request contains a host name that requires resolution and you set <xref:System.Net.Http.HttpClient.Timeout%2A> to a value less than 15 seconds, it may take 15 seconds or more before a <xref:System.Net.WebException> is thrown to indicate a timeout on your request.</span></span>  
  
 <span data-ttu-id="4d269-825">使用此实例的所有请求都将使用相同的超时值 <xref:System.Net.Http.HttpClient> 。</span><span class="sxs-lookup"><span data-stu-id="4d269-825">The same timeout will apply for all requests using this <xref:System.Net.Http.HttpClient> instance.</span></span>  <span data-ttu-id="4d269-826">你还可以使用任务上的为单个请求设置不同的超时 <xref:System.Threading.CancellationTokenSource> 。</span><span class="sxs-lookup"><span data-stu-id="4d269-826">You may also set different timeouts for individual requests using a <xref:System.Threading.CancellationTokenSource> on a task.</span></span> <span data-ttu-id="4d269-827">请注意，只会应用两个超时中较短的一个。</span><span class="sxs-lookup"><span data-stu-id="4d269-827">Note that only the shorter of the two timeouts will apply.</span></span>  
  
 ## Examples
 
 <span data-ttu-id="4d269-828">下面的示例设置 `Timeout` 属性。</span><span class="sxs-lookup"><span data-stu-id="4d269-828">The following example sets the `Timeout` property.</span></span>
  
```csharp
HttpClient httpClient = new HttpClient();
httpClient.Timeout = TimeSpan.FromMinutes(10);
```

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="4d269-829">指定的超时值小于或等于零，而不是 <see cref="F:System.Threading.Timeout.InfiniteTimeSpan" />。</span><span class="sxs-lookup"><span data-stu-id="4d269-829">The timeout specified is less than or equal to zero and is not <see cref="F:System.Threading.Timeout.InfiniteTimeSpan" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4d269-830">已在当前实例上启动了一个操作。</span><span class="sxs-lookup"><span data-stu-id="4d269-830">An operation has already been started on the current instance.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="4d269-831">已释放当前实例。</span><span class="sxs-lookup"><span data-stu-id="4d269-831">The current instance has been disposed.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>
