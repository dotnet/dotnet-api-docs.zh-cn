<Type Name="HttpClient" FullName="System.Net.Http.HttpClient">
  <Metadata><Meta Name="ms.openlocfilehash" Value="7db7af0d25ac785956462151611fd6177ed237f8" /><Meta Name="ms.sourcegitcommit" Value="75d042970105c611a6ea6721c7ddc9d7eb314dd4" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="03/09/2021" /><Meta Name="ms.locfileid" Value="102516185" /></Metadata><TypeSignature Language="C#" Value="public class HttpClient : System.Net.Http.HttpMessageInvoker" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit HttpClient extends System.Net.Http.HttpMessageInvoker" />
  <TypeSignature Language="DocId" Value="T:System.Net.Http.HttpClient" />
  <TypeSignature Language="VB.NET" Value="Public Class HttpClient&#xA;Inherits HttpMessageInvoker" />
  <TypeSignature Language="C++ CLI" Value="public ref class HttpClient : System::Net::Http::HttpMessageInvoker" />
  <TypeSignature Language="F#" Value="type HttpClient = class&#xA;    inherit HttpMessageInvoker" />
  <AssemblyInfo>
    <AssemblyName>System.Net.Http</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Net.Http" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Net.Http.HttpMessageInvoker</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="fa99b-101">提供一个类，用于发送 HTTP 请求以及从 URI 所标识的资源接收 HTTP 响应。</span><span class="sxs-lookup"><span data-stu-id="fa99b-101">Provides a class for sending HTTP requests and receiving HTTP responses from a resource identified by a URI.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa99b-102"><xref:System.Net.Http.HttpClient>类实例充当发送 HTTP 请求的会话。</span><span class="sxs-lookup"><span data-stu-id="fa99b-102">The <xref:System.Net.Http.HttpClient> class instance acts as a session to send HTTP requests.</span></span> <span data-ttu-id="fa99b-103"><xref:System.Net.Http.HttpClient>实例是对该实例执行的所有请求应用的设置的集合。</span><span class="sxs-lookup"><span data-stu-id="fa99b-103">An <xref:System.Net.Http.HttpClient> instance is a collection of settings applied to all requests executed by that instance.</span></span> <span data-ttu-id="fa99b-104">此外，每个 <xref:System.Net.Http.HttpClient> 实例都使用其自己的连接池，并从其他实例所执行的请求隔离其请求 <xref:System.Net.Http.HttpClient> 。</span><span class="sxs-lookup"><span data-stu-id="fa99b-104">In addition, every <xref:System.Net.Http.HttpClient> instance uses its own connection pool, isolating its requests from requests executed by other <xref:System.Net.Http.HttpClient> instances.</span></span>  
  
 <span data-ttu-id="fa99b-105">派生类不应重写类的虚方法。</span><span class="sxs-lookup"><span data-stu-id="fa99b-105">Derived classes should not override the virtual methods on the class.</span></span> <span data-ttu-id="fa99b-106">而是使用接受的构造函数重载 <xref:System.Net.Http.HttpMessageHandler> 来配置任何预处理或请求后处理。</span><span class="sxs-lookup"><span data-stu-id="fa99b-106">Instead, use a constructor overload that accepts <xref:System.Net.Http.HttpMessageHandler> to configure any pre- or post-request processing.</span></span>
  
 <span data-ttu-id="fa99b-107">默认情况下，在 .NET Framework 和 Mono 上， <xref:System.Net.HttpWebRequest> 用于将请求发送到服务器。</span><span class="sxs-lookup"><span data-stu-id="fa99b-107">By default on .NET Framework and Mono, <xref:System.Net.HttpWebRequest> is used to send requests to the server.</span></span> <span data-ttu-id="fa99b-108">可以通过在采用实例作为参数的构造函数重载之一中指定不同的通道来修改此行为 <xref:System.Net.Http.HttpMessageHandler> 。</span><span class="sxs-lookup"><span data-stu-id="fa99b-108">This behavior can be modified by specifying a different channel in one of the constructor overloads taking a <xref:System.Net.Http.HttpMessageHandler> instance as parameter.</span></span> <span data-ttu-id="fa99b-109">如果需要使用身份验证或缓存等功能， <xref:System.Net.Http.WebRequestHandler> 可使用来配置设置，并将实例传递给构造函数。</span><span class="sxs-lookup"><span data-stu-id="fa99b-109">If features like authentication or caching are required, <xref:System.Net.Http.WebRequestHandler> can be used to configure settings and the instance can be passed to the constructor.</span></span> <span data-ttu-id="fa99b-110">返回的处理程序可传递给采用参数的构造函数重载之一 <xref:System.Net.Http.HttpMessageHandler> 。</span><span class="sxs-lookup"><span data-stu-id="fa99b-110">The returned handler can be passed to one of the constructor overloads taking a <xref:System.Net.Http.HttpMessageHandler> parameter.</span></span>  
  
 <span data-ttu-id="fa99b-111">如果 <xref:System.Net.Http.HttpClient> 命名空间中使用和相关类的应用 <xref:System.Net.Http> 要下载大量数据 (50 mb 或更大的) ，则该应用应流式传输这些下载内容，而不使用默认缓冲。</span><span class="sxs-lookup"><span data-stu-id="fa99b-111">If an app using <xref:System.Net.Http.HttpClient> and related classes in the <xref:System.Net.Http> namespace intends to download large amounts of data (50 megabytes or more), then the app should stream those downloads and not use the default buffering.</span></span> <span data-ttu-id="fa99b-112">如果使用默认缓冲，则客户端内存使用量将会非常大，这可能会显著降低性能。</span><span class="sxs-lookup"><span data-stu-id="fa99b-112">If the default buffering is used the client memory usage will get very large, potentially resulting in substantially reduced performance.</span></span>  

 <span data-ttu-id="fa99b-113">存在未处理的 <xref:System.Net.Http.HttpClient> 请求时，不应修改的属性，因为它不是线程安全的。</span><span class="sxs-lookup"><span data-stu-id="fa99b-113">Properties of <xref:System.Net.Http.HttpClient> should not be modified while there are outstanding requests, because it is not thread-safe.</span></span>

   
 <span data-ttu-id="fa99b-114">以下方法是线程安全的：</span><span class="sxs-lookup"><span data-stu-id="fa99b-114">The following methods are thread safe:</span></span>  
  
1.  <xref:System.Net.Http.HttpClient.CancelPendingRequests%2A>  
  
2.  <xref:System.Net.Http.HttpClient.DeleteAsync%2A>  
  
3.  <xref:System.Net.Http.HttpClient.GetAsync%2A>  
  
4.  <xref:System.Net.Http.HttpClient.GetByteArrayAsync%2A>  
  
5.  <xref:System.Net.Http.HttpClient.GetStreamAsync%2A>  
  
6.  <xref:System.Net.Http.HttpClient.GetStringAsync%2A>  
  
7.  <xref:System.Net.Http.HttpClient.PostAsync%2A>  
  
8.  <xref:System.Net.Http.HttpClient.PutAsync%2A>  
  
9.  <xref:System.Net.Http.HttpClient.SendAsync%2A>  

10. <xref:System.Net.Http.HttpClient.PatchAsync%2A>  
  
 <span data-ttu-id="fa99b-115"><xref:System.Net.Http.HttpClient> 用于在应用程序的整个生存期内实例化一次并重复使用。</span><span class="sxs-lookup"><span data-stu-id="fa99b-115"><xref:System.Net.Http.HttpClient> is intended to be instantiated once and re-used throughout the life of an application.</span></span> <span data-ttu-id="fa99b-116">实例化每个请求的 HttpClient 类将耗尽重负载下可用的插槽数。</span><span class="sxs-lookup"><span data-stu-id="fa99b-116">Instantiating an HttpClient class for every request will exhaust the number of sockets available under heavy loads.</span></span> <span data-ttu-id="fa99b-117">这将导致 SocketException 错误。</span><span class="sxs-lookup"><span data-stu-id="fa99b-117">This will result in SocketException errors.</span></span> <span data-ttu-id="fa99b-118">下面是正确使用 HttpClient 的示例。</span><span class="sxs-lookup"><span data-stu-id="fa99b-118">Below is an example using HttpClient correctly.</span></span>  
  
```csharp
public class GoodController : ApiController
{
    private static readonly HttpClient HttpClient;

    static GoodController()
    {
        HttpClient = new HttpClient();
    }
}
```

```vb
  Public Class GoodController
    Inherits ApiController  
   
    Private Shared ReadOnly HttpClient As HttpClient  
  
    Shared Sub New()  
        HttpClient = New HttpClient()
    End Sub
End Class
```

<span data-ttu-id="fa99b-119"><xref:System.Net.Http.HttpClient>是一个高级 API，用于包装其运行的每个平台上可用的较低级别功能。</span><span class="sxs-lookup"><span data-stu-id="fa99b-119">The <xref:System.Net.Http.HttpClient> is a high-level API that wraps the lower-level functionality available on each platform where it runs.</span></span>

<span data-ttu-id="fa99b-120">在每个平台上， <xref:System.Net.Http.HttpClient> 尝试使用最佳的可用传输：</span><span class="sxs-lookup"><span data-stu-id="fa99b-120">On each platform, <xref:System.Net.Http.HttpClient> tries to use the best available transport:</span></span>

| <span data-ttu-id="fa99b-121">**主机/运行时**</span><span class="sxs-lookup"><span data-stu-id="fa99b-121">**Host/Runtime**</span></span>            | <span data-ttu-id="fa99b-122">**后端**</span><span class="sxs-lookup"><span data-stu-id="fa99b-122">**Backend**</span></span>                                                                               |
| --------------------------- | ----------------------------------------------------------------------------------------- |
| <span data-ttu-id="fa99b-123">Windows/.NET Framework</span><span class="sxs-lookup"><span data-stu-id="fa99b-123">Windows/.NET Framework</span></span>      | <xref:System.Net.HttpWebRequest>                                                          |
| <span data-ttu-id="fa99b-124">Windows/Mono</span><span class="sxs-lookup"><span data-stu-id="fa99b-124">Windows/Mono</span></span>                | <xref:System.Net.HttpWebRequest>                                                          |
| <span data-ttu-id="fa99b-125">Windows/UWP</span><span class="sxs-lookup"><span data-stu-id="fa99b-125">Windows/UWP</span></span>                 | <span data-ttu-id="fa99b-126">支持 Windows native <xref:System.Net.Http.WinHttpHandler> (HTTP 2.0) </span><span class="sxs-lookup"><span data-stu-id="fa99b-126">Windows native <xref:System.Net.Http.WinHttpHandler> (HTTP 2.0 capable)</span></span>                   |
| <span data-ttu-id="fa99b-127">Windows/.NET Core 1.0-2。0</span><span class="sxs-lookup"><span data-stu-id="fa99b-127">Windows/.NET Core 1.0-2.0</span></span>   | <span data-ttu-id="fa99b-128">支持 Windows native <xref:System.Net.Http.WinHttpHandler> (HTTP 2.0) </span><span class="sxs-lookup"><span data-stu-id="fa99b-128">Windows native <xref:System.Net.Http.WinHttpHandler> (HTTP 2.0 capable)</span></span>                   |
| <span data-ttu-id="fa99b-129">Android/Xamarin</span><span class="sxs-lookup"><span data-stu-id="fa99b-129">Android/Xamarin</span></span>             | <span data-ttu-id="fa99b-130">在生成时选择。</span><span class="sxs-lookup"><span data-stu-id="fa99b-130">Selected at build-time.</span></span> <span data-ttu-id="fa99b-131">可以使用 <xref:System.Net.HttpWebRequest> 或配置为使用 Android 的本机 [`HttpURLConnection`](https://developer.xamarin.com/api/type/Java.Net.HttpURLConnection/)</span><span class="sxs-lookup"><span data-stu-id="fa99b-131">Can either use <xref:System.Net.HttpWebRequest> or be configured to use Android's native [`HttpURLConnection`](https://developer.xamarin.com/api/type/Java.Net.HttpURLConnection/)</span></span> |
| <span data-ttu-id="fa99b-132">iOS、tvOS、watchOS/Xamarin</span><span class="sxs-lookup"><span data-stu-id="fa99b-132">iOS, tvOS, watchOS/Xamarin</span></span>  | <span data-ttu-id="fa99b-133">在生成时选择。</span><span class="sxs-lookup"><span data-stu-id="fa99b-133">Selected at build-time.</span></span> <span data-ttu-id="fa99b-134">可以使用 <xref:System.Net.HttpWebRequest> 或配置为使用 Apple [`NSUrlSession`](https://developer.xamarin.com/api/type/MonoTouch.Foundation.NSUrlSession/) (HTTP 2.0 功能) </span><span class="sxs-lookup"><span data-stu-id="fa99b-134">Can either use <xref:System.Net.HttpWebRequest> or be configured to use Apple's [`NSUrlSession`](https://developer.xamarin.com/api/type/MonoTouch.Foundation.NSUrlSession/) (HTTP 2.0 capable)</span></span> |
| <span data-ttu-id="fa99b-135">macOS/Xamarin</span><span class="sxs-lookup"><span data-stu-id="fa99b-135">macOS/Xamarin</span></span>               | <span data-ttu-id="fa99b-136">在生成时选择。</span><span class="sxs-lookup"><span data-stu-id="fa99b-136">Selected at build-time.</span></span> <span data-ttu-id="fa99b-137">可以使用 <xref:System.Net.HttpWebRequest> 或配置为使用 Apple [`NSUrlSession`](https://developer.xamarin.com/api/type/MonoTouch.Foundation.NSUrlSession/) (HTTP 2.0 功能) </span><span class="sxs-lookup"><span data-stu-id="fa99b-137">Can either use <xref:System.Net.HttpWebRequest> or be configured to use Apple's [`NSUrlSession`](https://developer.xamarin.com/api/type/MonoTouch.Foundation.NSUrlSession/) (HTTP 2.0 capable)</span></span> |
| <span data-ttu-id="fa99b-138">macOS/Mono</span><span class="sxs-lookup"><span data-stu-id="fa99b-138">macOS/Mono</span></span>                  | <xref:System.Net.HttpWebRequest>                                                          |
| <span data-ttu-id="fa99b-139">macOS/.NET Core 1.0-2。0</span><span class="sxs-lookup"><span data-stu-id="fa99b-139">macOS/.NET Core 1.0-2.0</span></span>     | <span data-ttu-id="fa99b-140">`libcurl`基于 http 传输 (HTTP 2.0 功能) </span><span class="sxs-lookup"><span data-stu-id="fa99b-140">`libcurl`-based HTTP transport (HTTP 2.0 capable)</span></span>                                         |
| <span data-ttu-id="fa99b-141">Linux/Mono</span><span class="sxs-lookup"><span data-stu-id="fa99b-141">Linux/Mono</span></span>                  | <xref:System.Net.HttpWebRequest>                                                          |
| <span data-ttu-id="fa99b-142">Linux/.NET Core 1.0-2。0</span><span class="sxs-lookup"><span data-stu-id="fa99b-142">Linux/.NET Core 1.0-2.0</span></span>     | <span data-ttu-id="fa99b-143">`libcurl`基于 http 传输 (HTTP 2.0 功能) </span><span class="sxs-lookup"><span data-stu-id="fa99b-143">`libcurl`-based HTTP transport (HTTP 2.0 capable)</span></span>                                         |
| <span data-ttu-id="fa99b-144">.NET Core 2.1 及更高版本</span><span class="sxs-lookup"><span data-stu-id="fa99b-144">.NET Core 2.1 and later</span></span>     | <xref:System.Net.Http.SocketsHttpHandler?displayProperty=nameWithType>                    |

<span data-ttu-id="fa99b-145">用户还可以 <xref:System.Net.Http.HttpClient> 通过调用 <xref:System.Net.Http.HttpClient.%23ctor*> 采用的构造函数，为配置特定传输 <xref:System.Net.Http.HttpMessageHandler> 。</span><span class="sxs-lookup"><span data-stu-id="fa99b-145">Users can also configure a specific transport for <xref:System.Net.Http.HttpClient> by invoking the <xref:System.Net.Http.HttpClient.%23ctor*> constructor that takes an <xref:System.Net.Http.HttpMessageHandler>.</span></span>

### <a name="httpclient-and-net-core"></a><span data-ttu-id="fa99b-146">HttpClient 和 .NET Core</span><span class="sxs-lookup"><span data-stu-id="fa99b-146">HttpClient and .NET Core</span></span>
<span data-ttu-id="fa99b-147">从 .NET Core 2.1 开始， <xref:System.Net.Http.SocketsHttpHandler?displayProperty=nameWithType> 类而不是 `HttpClientHandler` 提供由较高级别的 HTTP 网络类（如）使用的实现 `HttpClient` 。</span><span class="sxs-lookup"><span data-stu-id="fa99b-147">Starting with .NET Core 2.1, the <xref:System.Net.Http.SocketsHttpHandler?displayProperty=nameWithType> class instead of `HttpClientHandler` provides the implementation used by higher-level HTTP networking classes such as `HttpClient`.</span></span> <span data-ttu-id="fa99b-148">使用可 <xref:System.Net.Http.SocketsHttpHandler> 提供多种优势：</span><span class="sxs-lookup"><span data-stu-id="fa99b-148">The use of <xref:System.Net.Http.SocketsHttpHandler> offers a number of advantages:</span></span>
- <span data-ttu-id="fa99b-149">对照以前的实现，可以看到显著的性能改进。</span><span class="sxs-lookup"><span data-stu-id="fa99b-149">A significant performance improvement when compared with the previous implementation.</span></span>
- <span data-ttu-id="fa99b-150">消除了平台依赖项，从而简化了部署和服务。</span><span class="sxs-lookup"><span data-stu-id="fa99b-150">The elimination of platform dependencies, which simplifies deployment and servicing.</span></span> <span data-ttu-id="fa99b-151">例如， `libcurl` 不再依赖于适用于 macOS 的 .Net core 和适用于 Linux 的 .Net core。</span><span class="sxs-lookup"><span data-stu-id="fa99b-151">For example, `libcurl` is no longer a dependency on .NET Core for macOS and .NET Core for Linux.</span></span>
- <span data-ttu-id="fa99b-152">各种 .NET 平台的行为一致。</span><span class="sxs-lookup"><span data-stu-id="fa99b-152">Consistent behavior across all .NET platforms.</span></span>

<span data-ttu-id="fa99b-153">如果不需要此更改，在 Windows 上，你仍可以 <xref:System.Net.Http.WinHttpHandler> 通过引用其[NuGet 包](https://www.nuget.org/packages/System.Net.Http.WinHttpHandler/)并手动将其传递到[ `HttpClient` 的构造函数](xref:System.Net.Http.HttpClient.%23ctor(System.Net.Http.HttpMessageHandler))来使用。</span><span class="sxs-lookup"><span data-stu-id="fa99b-153">If this change is undesirable, on Windows you can still use <xref:System.Net.Http.WinHttpHandler> by referencing it's [NuGet package](https://www.nuget.org/packages/System.Net.Http.WinHttpHandler/) and passing it to [`HttpClient`'s constructor](xref:System.Net.Http.HttpClient.%23ctor(System.Net.Http.HttpMessageHandler)) manually.</span></span>

### <a name="configure-behavior-using-run-time-configuration-options"></a><span data-ttu-id="fa99b-154">使用运行时配置选项配置行为</span><span class="sxs-lookup"><span data-stu-id="fa99b-154">Configure behavior using run-time configuration options</span></span>

<span data-ttu-id="fa99b-155">的某些方面的 <xref:System.Net.Http.HttpClient> 行为可通过 [运行时配置选项](/dotnet/core/run-time-config/networking)进行自定义。</span><span class="sxs-lookup"><span data-stu-id="fa99b-155">Certain aspects of <xref:System.Net.Http.HttpClient>'s behavior are customizable through [Run-time configuration options](/dotnet/core/run-time-config/networking).</span></span> <span data-ttu-id="fa99b-156">但是，这些开关的行为与 .NET 版本不同。</span><span class="sxs-lookup"><span data-stu-id="fa99b-156">However, the behavior of these switches differs through .NET versions.</span></span> <span data-ttu-id="fa99b-157">例如，在 .NET Core 2.1-3.1 中，你可以配置是否 <xref:System.Net.Http.SocketsHttpHandler> 默认使用，但从 .net 5.0 开始，该选项不再可用。</span><span class="sxs-lookup"><span data-stu-id="fa99b-157">For example, in .NET Core 2.1 - 3.1, you can configure whether <xref:System.Net.Http.SocketsHttpHandler> is used by default, but that option is no longer available starting in .NET 5.0.</span></span>

## Examples  
 [!code-csharp[System.Net.Http.HttpClient#1](~/samples/snippets/csharp/VS_Snippets_Misc/system.net.http.httpclient/cs/source.cs#1)]  
 [!code-vb[System.Net.Http.HttpClient#1](~/samples/snippets/visualbasic/VS_Snippets_Misc/system.net.http.httpclient/vb/source.vb#1)]

 <span data-ttu-id="fa99b-158">前面的代码示例使用 `async Task Main()` 入口点。</span><span class="sxs-lookup"><span data-stu-id="fa99b-158">The preceding code example uses an `async Task Main()` entry point.</span></span> <span data-ttu-id="fa99b-159">该功能需要 c # 7.1 或更高版本。</span><span class="sxs-lookup"><span data-stu-id="fa99b-159">That feature requires C# 7.1 or later.</span></span>
 
 ]]></format>
    </remarks>
    <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=245696"><span data-ttu-id="fa99b-160">连接到 Web 服务</span><span class="sxs-lookup"><span data-stu-id="fa99b-160">Connecting to a web service</span></span></related>
    <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=245697"><span data-ttu-id="fa99b-161">快速入门：使用 HttpClient 进行连接</span><span class="sxs-lookup"><span data-stu-id="fa99b-161">Quickstart: Connecting using HttpClient</span></span></related>
    <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=245699"><span data-ttu-id="fa99b-162">如何使用 HttpClient 处理程序</span><span class="sxs-lookup"><span data-stu-id="fa99b-162">How to use HttpClient handlers</span></span></related>
    <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=245698"><span data-ttu-id="fa99b-163">如何确保 HttpClient 连接安全</span><span class="sxs-lookup"><span data-stu-id="fa99b-163">How to secure HttpClient connections</span></span></related>
    <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=242550"><span data-ttu-id="fa99b-164">HttpClient 示例</span><span class="sxs-lookup"><span data-stu-id="fa99b-164">HttpClient Sample</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="fa99b-165">初始化 <see cref="T:System.Net.Http.HttpClient" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="fa99b-165">Initializes a new instance of the <see cref="T:System.Net.Http.HttpClient" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa99b-166"><xref:System.Net.Http.HttpClient> 用于在应用程序的整个生存期内实例化一次并重复使用。</span><span class="sxs-lookup"><span data-stu-id="fa99b-166"><xref:System.Net.Http.HttpClient> is intended to be instantiated once and re-used throughout the life of an application.</span></span> <span data-ttu-id="fa99b-167">实例化每个请求的 HttpClient 类将耗尽重负载下可用的插槽数。</span><span class="sxs-lookup"><span data-stu-id="fa99b-167">Instantiating an HttpClient class for every request will exhaust the number of sockets available under heavy loads.</span></span> <span data-ttu-id="fa99b-168">这将导致 SocketException 错误。</span><span class="sxs-lookup"><span data-stu-id="fa99b-168">This will result in SocketException errors.</span></span> <span data-ttu-id="fa99b-169">下面是正确使用 HttpClient 的示例。</span><span class="sxs-lookup"><span data-stu-id="fa99b-169">Below is an example using HttpClient correctly.</span></span>  
  
```csharp  
public class GoodController : ApiController  
{  
    private static readonly HttpClient HttpClient;  
  
    static GoodController()  
    {  
        HttpClient = new HttpClient();  
    }  
}  
```

```vb
  Public Class GoodController
    Inherits ApiController  
   
    Private Shared ReadOnly HttpClient As HttpClient
  
    Shared Sub New()  
        HttpClient = New HttpClient()
    End Sub
End Class
```

 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HttpClient ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HttpClient();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="fa99b-170">使用释放此实例时释放的 <see cref="T:System.Net.Http.HttpClientHandler" /> 初始化 <see cref="T:System.Net.Http.HttpClient" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="fa99b-170">Initializes a new instance of the <see cref="T:System.Net.Http.HttpClient" /> class using a <see cref="T:System.Net.Http.HttpClientHandler" /> that is disposed when this instance is disposed.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[    
## Remarks  
<span data-ttu-id="fa99b-171">使用此构造函数等效于调用 [`HttpClient(new HttpClientHandler(), true)`](xref:System.Net.Http.HttpClient.%23ctor(System.Net.Http.HttpMessageHandler,System.Boolean)) 构造函数。</span><span class="sxs-lookup"><span data-stu-id="fa99b-171">Using this constructor is equivalent to calling the [`HttpClient(new HttpClientHandler(), true)`](xref:System.Net.Http.HttpClient.%23ctor(System.Net.Http.HttpMessageHandler,System.Boolean)) constructor.</span></span>
]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HttpClient (System.Net.Http.HttpMessageHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Net.Http.HttpMessageHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.#ctor(System.Net.Http.HttpMessageHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (handler As HttpMessageHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HttpClient(System::Net::Http::HttpMessageHandler ^ handler);" />
      <MemberSignature Language="F#" Value="new System.Net.Http.HttpClient : System.Net.Http.HttpMessageHandler -&gt; System.Net.Http.HttpClient" Usage="new System.Net.Http.HttpClient handler" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="handler" Type="System.Net.Http.HttpMessageHandler" />
      </Parameters>
      <Docs>
        <param name="handler"><span data-ttu-id="fa99b-172">要用于发送请求的 HTTP 处理程序堆栈。</span><span class="sxs-lookup"><span data-stu-id="fa99b-172">The HTTP handler stack to use for sending requests.</span></span></param>
        <summary><span data-ttu-id="fa99b-173">使用指定的处理程序初始化 <see cref="T:System.Net.Http.HttpClient" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="fa99b-173">Initializes a new instance of the <see cref="T:System.Net.Http.HttpClient" /> class with the specified handler.</span></span> <span data-ttu-id="fa99b-174">处理程序在释放此实例时被释放。</span><span class="sxs-lookup"><span data-stu-id="fa99b-174">The handler is disposed when this instance is disposed.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[    
## Remarks  
<span data-ttu-id="fa99b-175">使用此构造函数等效于调用 [`HttpClient(handler, true)`](xref:System.Net.Http.HttpClient.%23ctor(System.Net.Http.HttpMessageHandler,System.Boolean)) 构造函数。</span><span class="sxs-lookup"><span data-stu-id="fa99b-175">Using this constructor is equivalent to calling the [`HttpClient(handler, true)`](xref:System.Net.Http.HttpClient.%23ctor(System.Net.Http.HttpMessageHandler,System.Boolean)) constructor.</span></span>

<span data-ttu-id="fa99b-176">指定的 `handler` 将通过调用 [HttpClient](xref:System.Net.Http.HttpMessageInvoker.Dispose)来释放。</span><span class="sxs-lookup"><span data-stu-id="fa99b-176">The specified `handler` will be disposed of by calling [HttpClient.Dispose](xref:System.Net.Http.HttpMessageInvoker.Dispose).</span></span>  
]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="fa99b-177"><paramref name="handler" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="fa99b-177">The <paramref name="handler" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HttpClient (System.Net.Http.HttpMessageHandler handler, bool disposeHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Net.Http.HttpMessageHandler handler, bool disposeHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.#ctor(System.Net.Http.HttpMessageHandler,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (handler As HttpMessageHandler, disposeHandler As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HttpClient(System::Net::Http::HttpMessageHandler ^ handler, bool disposeHandler);" />
      <MemberSignature Language="F#" Value="new System.Net.Http.HttpClient : System.Net.Http.HttpMessageHandler * bool -&gt; System.Net.Http.HttpClient" Usage="new System.Net.Http.HttpClient (handler, disposeHandler)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="handler" Type="System.Net.Http.HttpMessageHandler" />
        <Parameter Name="disposeHandler" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="handler"><span data-ttu-id="fa99b-178">负责处理 HTTP 响应消息的 <see cref="T:System.Net.Http.HttpMessageHandler" />。</span><span class="sxs-lookup"><span data-stu-id="fa99b-178">The <see cref="T:System.Net.Http.HttpMessageHandler" /> responsible for processing the HTTP response messages.</span></span></param>
        <param name="disposeHandler"><span data-ttu-id="fa99b-179">如果内部处理程序应由 [HttpClient.Dispose](xref:System.Net.Http.HttpMessageInvoker.Dispose) 释放，则为 <see langword="true" />；如果希望重新使用内部处理程序，则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="fa99b-179"><see langword="true" /> if the inner handler should be disposed of by [HttpClient.Dispose](xref:System.Net.Http.HttpMessageInvoker.Dispose); <see langword="false" /> if you intend to reuse the inner handler.</span></span></param>
        <summary><span data-ttu-id="fa99b-180">使用提供的处理程序初始化 <see cref="T:System.Net.Http.HttpClient" /> 类的新实例，并指定在释放此实例时是否应释放该处理程序。</span><span class="sxs-lookup"><span data-stu-id="fa99b-180">Initializes a new instance of the <see cref="T:System.Net.Http.HttpClient" /> class with the provided handler, and specifies whether that handler should be disposed when this instance is disposed.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="fa99b-181"><paramref name="handler" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="fa99b-181">The <paramref name="handler" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="BaseAddress">
      <MemberSignature Language="C#" Value="public Uri BaseAddress { get; set; }" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Uri BaseAddress" />
      <MemberSignature Language="DocId" Value="P:System.Net.Http.HttpClient.BaseAddress" />
      <MemberSignature Language="VB.NET" Value="Public Property BaseAddress As Uri" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Uri ^ BaseAddress { Uri ^ get(); void set(Uri ^ value); };" />
      <MemberSignature Language="F#" Value="member this.BaseAddress : Uri with get, set" Usage="System.Net.Http.HttpClient.BaseAddress" />
      <MemberSignature Language="C#" Value="public Uri? BaseAddress { get; set; }" FrameworkAlternate="net-5.0" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Uri</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="fa99b-182">获取或设置发送请求时使用的 Internet 资源的统一资源标识符 (URI) 的基址。</span><span class="sxs-lookup"><span data-stu-id="fa99b-182">Gets or sets the base address of Uniform Resource Identifier (URI) of the Internet resource used when sending requests.</span></span></summary>
        <value><span data-ttu-id="fa99b-183">发送请求时使用的 Internet 资源的统一资源标识符 (URI) 的基址。</span><span class="sxs-lookup"><span data-stu-id="fa99b-183">The base address of Uniform Resource Identifier (URI) of the Internet resource used when sending requests.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa99b-184">当 <xref:System.Net.Http.HttpRequestMessage> 使用相对 Uri 发送时，消息 Uri 将添加到 <xref:System.Net.Http.HttpClient.BaseAddress%2A> 属性中以创建绝对 uri。</span><span class="sxs-lookup"><span data-stu-id="fa99b-184">When sending a <xref:System.Net.Http.HttpRequestMessage> with a relative Uri, the message Uri will be added to the <xref:System.Net.Http.HttpClient.BaseAddress%2A> property to create an absolute Uri.</span></span>  
 
 <span data-ttu-id="fa99b-185">请注意，在基本 URI 中，最右侧的 "/" 后面的所有字符都将在与消息 URI 结合时排除。</span><span class="sxs-lookup"><span data-stu-id="fa99b-185">Note that all characters after the right-most "/" in the base URI are excluded when combined with the message URI.</span></span> <span data-ttu-id="fa99b-186">请参阅 [RFC 3986](https://tools.ietf.org/html/rfc3986) 统一资源标识符 (URI) 通用语法规范。</span><span class="sxs-lookup"><span data-stu-id="fa99b-186">See [RFC 3986](https://tools.ietf.org/html/rfc3986) Uniform Resource Identifier (URI) Generic Syntax specification.</span></span>
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CancelPendingRequests">
      <MemberSignature Language="C#" Value="public void CancelPendingRequests ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CancelPendingRequests() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.CancelPendingRequests" />
      <MemberSignature Language="VB.NET" Value="Public Sub CancelPendingRequests ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CancelPendingRequests();" />
      <MemberSignature Language="F#" Value="member this.CancelPendingRequests : unit -&gt; unit" Usage="httpClient.CancelPendingRequests " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="fa99b-187">取消该实例所有挂起的请求。</span><span class="sxs-lookup"><span data-stu-id="fa99b-187">Cancel all pending requests on this instance.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa99b-188">调用此方法后， <xref:System.Net.Http.HttpClient> 仍可使用实例执行其他请求。</span><span class="sxs-lookup"><span data-stu-id="fa99b-188">After calling this method, the <xref:System.Net.Http.HttpClient> instance can still be used to execute additional requests.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultProxy">
      <MemberSignature Language="C#" Value="public static System.Net.IWebProxy DefaultProxy { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Net.IWebProxy DefaultProxy" />
      <MemberSignature Language="DocId" Value="P:System.Net.Http.HttpClient.DefaultProxy" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property DefaultProxy As IWebProxy" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Net::IWebProxy ^ DefaultProxy { System::Net::IWebProxy ^ get(); void set(System::Net::IWebProxy ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DefaultProxy : System.Net.IWebProxy with get, set" Usage="System.Net.Http.HttpClient.DefaultProxy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.IWebProxy</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="fa99b-189">获取或设置全局 HTTP 代理。</span><span class="sxs-lookup"><span data-stu-id="fa99b-189">Gets or sets the global Http proxy.</span></span></summary>
        <value><span data-ttu-id="fa99b-190">用于实例化的每个调用所使用的代理 <see cref="T:System.Net.HttpWebRequest" /> 。</span><span class="sxs-lookup"><span data-stu-id="fa99b-190">A proxy used by every call that instantiates a <see cref="T:System.Net.HttpWebRequest" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks
<span data-ttu-id="fa99b-191"> <xref:System.Net.Http.HttpClient>   如果在  <xref:System.Net.Http.HttpClientHandler> 通过其构造函数传递的中未显式设置代理，则此静态属性将确定所有实例都使用的默认代理。</span><span class="sxs-lookup"><span data-stu-id="fa99b-191">This static property determines the default proxy that all <xref:System.Net.Http.HttpClient> instances use if no proxy is set explicitly in the <xref:System.Net.Http.HttpClientHandler> passed through its constructor.</span></span> 

<span data-ttu-id="fa99b-192">此属性返回的默认实例将根据你的平台，初始化以下一组不同的规则：</span><span class="sxs-lookup"><span data-stu-id="fa99b-192">The default instance returned by this property will initialize following a different set of rules depending on your platform:</span></span>
* <span data-ttu-id="fa99b-193">**对于 Windows：** 从环境变量中读取代理配置，或者从用户的代理设置中读取代理配置（如果未定义）。</span><span class="sxs-lookup"><span data-stu-id="fa99b-193">**For Windows:** Reads proxy configuration from environment variables or, if those are not defined, from the user's proxy settings.</span></span>

* <span data-ttu-id="fa99b-194">**对于 macOS：** 从环境变量中读取代理配置，如果未定义，则从系统的代理设置中读取。</span><span class="sxs-lookup"><span data-stu-id="fa99b-194">**For macOS:** Reads proxy configuration from environment variables or, if those are not defined, from the system's proxy settings.</span></span>

* <span data-ttu-id="fa99b-195">**对于 Linux：** 从环境变量读取代理配置，或者，如果未定义这些配置，此属性将初始化绕过所有地址的非配置实例。</span><span class="sxs-lookup"><span data-stu-id="fa99b-195">**For Linux:** Reads proxy configuration from environment variables or, in case those are not defined, this property initializes a non-configured instance that bypasses all addresses.</span></span>

<span data-ttu-id="fa99b-196">用于 `DefaultProxy` 在 Windows 和基于 Unix 的平台上进行初始化的环境变量包括：</span><span class="sxs-lookup"><span data-stu-id="fa99b-196">The environment variables used for `DefaultProxy` initialization on Windows and Unix-based platforms are:</span></span>
* <span data-ttu-id="fa99b-197">HTTP_PROXY： HTTP 请求上使用的代理服务器。</span><span class="sxs-lookup"><span data-stu-id="fa99b-197">HTTP_PROXY: the proxy server used on HTTP requests.</span></span>
* <span data-ttu-id="fa99b-198">HTTPS_PROXY：对 HTTPS 请求使用的代理服务器。</span><span class="sxs-lookup"><span data-stu-id="fa99b-198">HTTPS_PROXY: the proxy server used on HTTPS requests.</span></span>
* <span data-ttu-id="fa99b-199">ALL_PROXY：未定义 HTTP_PROXY 和/或 HTTPS_PROXY 时，在 HTTP 和/或 HTTPS 请求上使用的代理服务器。</span><span class="sxs-lookup"><span data-stu-id="fa99b-199">ALL_PROXY: the proxy server used on HTTP and/or HTTPS requests in case HTTP_PROXY and/or HTTPS_PROXY are not defined.</span></span>
* <span data-ttu-id="fa99b-200">NO_PROXY：应从代理中排除的主机名的逗号分隔列表。</span><span class="sxs-lookup"><span data-stu-id="fa99b-200">NO_PROXY: a comma-separated list of hostnames that should be excluded from proxying.</span></span>

<span data-ttu-id="fa99b-201">在环境变量区分大小写的系统上，变量名称可以全部小写或全部大写。</span><span class="sxs-lookup"><span data-stu-id="fa99b-201">On systems where environment variables are case-sensitive, the variable names may be all lowercase or all uppercase.</span></span>  <span data-ttu-id="fa99b-202">首先检查小写名称。</span><span class="sxs-lookup"><span data-stu-id="fa99b-202">The lowercase names are checked first.</span></span>

<span data-ttu-id="fa99b-203">代理服务器可以是主机名或 IP 地址，可以后跟冒号和端口号，也可以是 http URL （可选），其中包括用于代理身份验证的用户名和密码。</span><span class="sxs-lookup"><span data-stu-id="fa99b-203">The proxy server may be a hostname or IP address, optionally followed by a colon and port number, or it may be an http URL, optionally including a username and password for proxy authentication.</span></span> <span data-ttu-id="fa99b-204">URL 必须以开头，而 `http` 不 `https` 能在主机名、IP 或端口后面包含任何文本。</span><span class="sxs-lookup"><span data-stu-id="fa99b-204">The URL must be start with `http`, not `https`, and cannot include any text after the hostname, IP, or port.</span></span>
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="fa99b-205">传递的值不能为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="fa99b-205">The value passed cannot be <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DefaultRequestHeaders">
      <MemberSignature Language="C#" Value="public System.Net.Http.Headers.HttpRequestHeaders DefaultRequestHeaders { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.Http.Headers.HttpRequestHeaders DefaultRequestHeaders" />
      <MemberSignature Language="DocId" Value="P:System.Net.Http.HttpClient.DefaultRequestHeaders" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DefaultRequestHeaders As HttpRequestHeaders" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::Http::Headers::HttpRequestHeaders ^ DefaultRequestHeaders { System::Net::Http::Headers::HttpRequestHeaders ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DefaultRequestHeaders : System.Net.Http.Headers.HttpRequestHeaders" Usage="System.Net.Http.HttpClient.DefaultRequestHeaders" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Http.Headers.HttpRequestHeaders</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="fa99b-206">获取与每个请求一起发送的标题。</span><span class="sxs-lookup"><span data-stu-id="fa99b-206">Gets the headers which should be sent with each request.</span></span></summary>
        <value><span data-ttu-id="fa99b-207">应与每一个请求一起发送的标题。</span><span class="sxs-lookup"><span data-stu-id="fa99b-207">The headers which should be sent with each request.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa99b-208">此属性上设置的标头不需要再次设置为请求消息。</span><span class="sxs-lookup"><span data-stu-id="fa99b-208">Headers set on this property don't need to be set on request messages again.</span></span> <span data-ttu-id="fa99b-209">`DefaultRequestHeaders` 由于存在未处理的请求，不应进行修改，因为它不是线程安全的。</span><span class="sxs-lookup"><span data-stu-id="fa99b-209">`DefaultRequestHeaders` should not be modified while there are outstanding requests, because it is not thread-safe.</span></span>
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultRequestVersion">
      <MemberSignature Language="C#" Value="public Version DefaultRequestVersion { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Version DefaultRequestVersion" />
      <MemberSignature Language="DocId" Value="P:System.Net.Http.HttpClient.DefaultRequestVersion" />
      <MemberSignature Language="VB.NET" Value="Public Property DefaultRequestVersion As Version" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Version ^ DefaultRequestVersion { Version ^ get(); void set(Version ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DefaultRequestVersion : Version with get, set" Usage="System.Net.Http.HttpClient.DefaultRequestVersion" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Version</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="fa99b-210">获取或设置对此 <see cref="T:System.Net.Http.HttpClient" /> 实例发出的后续请求使用的默认 HTTP 版本。</span><span class="sxs-lookup"><span data-stu-id="fa99b-210">Gets or sets the default HTTP version used on subsequent requests made by this <see cref="T:System.Net.Http.HttpClient" /> instance.</span></span></summary>
        <value><span data-ttu-id="fa99b-211">用于此实例发出的任何请求的默认版本 <see cref="T:System.Net.Http.HttpClient" /> 。</span><span class="sxs-lookup"><span data-stu-id="fa99b-211">The default version to use for any requests made with this <see cref="T:System.Net.Http.HttpClient" /> instance.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
<span data-ttu-id="fa99b-212">`DefaultRequestVersion` 默认设置为 <xref:System.Net.HttpVersion.Version11?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="fa99b-212">`DefaultRequestVersion` is <xref:System.Net.HttpVersion.Version11?displayProperty=nameWithType> by default.</span></span>

<span data-ttu-id="fa99b-213">`DefaultRequestVersion`属性指定默认的 HTTP 版本，该版本用于 <xref:System.Net.Http.HttpClient> 在构造要发送的时使用此实例发送的请求 <xref:System.Net.Http.HttpRequestMessage> ，尤其是对 <xref:System.Net.Http.HttpClient.DeleteAsync%2A> 、 <xref:System.Net.Http.HttpClient.GetAsync%2A> 、 <xref:System.Net.Http.HttpClient.GetByteArrayAsync%2A> <xref:System.Net.Http.HttpClient.GetStreamAsync%2A> <xref:System.Net.Http.HttpClient.GetStringAsync%2A> <xref:System.Net.Http.HttpClient.PatchAsync%2A> <xref:System.Net.Http.HttpClient.PostAsync%2A> <xref:System.Net.Http.HttpClient.PutAsync%2A> 、、、、和等方法的调用。</span><span class="sxs-lookup"><span data-stu-id="fa99b-213">The `DefaultRequestVersion` property specifies the default HTTP version to use for requests sent using this <xref:System.Net.Http.HttpClient> instance when it constructs the <xref:System.Net.Http.HttpRequestMessage> to send, specifically with calls to methods such as <xref:System.Net.Http.HttpClient.DeleteAsync%2A>, <xref:System.Net.Http.HttpClient.GetAsync%2A>, <xref:System.Net.Http.HttpClient.GetByteArrayAsync%2A>, <xref:System.Net.Http.HttpClient.GetStreamAsync%2A>, <xref:System.Net.Http.HttpClient.GetStringAsync%2A>, <xref:System.Net.Http.HttpClient.PatchAsync%2A>, <xref:System.Net.Http.HttpClient.PostAsync%2A>, and <xref:System.Net.Http.HttpClient.PutAsync%2A>.</span></span>

<span data-ttu-id="fa99b-214">`DefaultRequestVersion`属性不适用于 <xref:System.Net.Http.HttpClient.SendAsync%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="fa99b-214">The `DefaultRequestVersion` property doesn't apply to the <xref:System.Net.Http.HttpClient.SendAsync%2A> method.</span></span> <span data-ttu-id="fa99b-215"><xref:System.Net.Http.HttpRequestMessage>作为参数传递给方法的参数 <xref:System.Net.Http.HttpClient.SendAsync%2A> 具有其自己的 `Version` 属性，该属性控制用于请求的 HTTP 版本。</span><span class="sxs-lookup"><span data-stu-id="fa99b-215">The <xref:System.Net.Http.HttpRequestMessage> parameter passed as the argument to the <xref:System.Net.Http.HttpClient.SendAsync%2A> method has its own `Version` property that controls the HTTP version used for the request.</span></span>

<span data-ttu-id="fa99b-216">`DefaultRequestVersion`只要 <xref:System.Net.Http.HttpClient> 实例尚未启动任何请求，就可以更改该属性。</span><span class="sxs-lookup"><span data-stu-id="fa99b-216">The `DefaultRequestVersion` property can be changed as long as the <xref:System.Net.Http.HttpClient> instance has not started any request.</span></span>
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="fa99b-217">在设置操作中，<see langword="DefaultRequestVersion" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="fa99b-217">In a set operation, <see langword="DefaultRequestVersion" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="fa99b-218"><see cref="T:System.Net.Http.HttpClient" /> 实例已启动一个或多个请求。</span><span class="sxs-lookup"><span data-stu-id="fa99b-218">The <see cref="T:System.Net.Http.HttpClient" /> instance has already started one or more requests.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="fa99b-219"><see cref="T:System.Net.Http.HttpClient" /> 实例已被释放。</span><span class="sxs-lookup"><span data-stu-id="fa99b-219">The <see cref="T:System.Net.Http.HttpClient" /> instance has already been disposed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DefaultVersionPolicy">
      <MemberSignature Language="C#" Value="public System.Net.Http.HttpVersionPolicy DefaultVersionPolicy { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Net.Http.HttpVersionPolicy DefaultVersionPolicy" />
      <MemberSignature Language="DocId" Value="P:System.Net.Http.HttpClient.DefaultVersionPolicy" />
      <MemberSignature Language="VB.NET" Value="Public Property DefaultVersionPolicy As HttpVersionPolicy" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::Http::HttpVersionPolicy DefaultVersionPolicy { System::Net::Http::HttpVersionPolicy get(); void set(System::Net::Http::HttpVersionPolicy value); };" />
      <MemberSignature Language="F#" Value="member this.DefaultVersionPolicy : System.Net.Http.HttpVersionPolicy with get, set" Usage="System.Net.Http.HttpClient.DefaultVersionPolicy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Http.HttpVersionPolicy</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="fa99b-220">获取或设置便捷方法中隐式创建的请求的默认版本策略，例如 <see cref="M:System.Net.Http.HttpClient.GetAsync(System.String)" /> 和 <see cref="M:System.Net.Http.HttpClient.PostAsync(System.String,System.Net.Http.HttpContent)" />。</span><span class="sxs-lookup"><span data-stu-id="fa99b-220">Gets or sets the default version policy for implicitly created requests in convenience methods, for example, <see cref="M:System.Net.Http.HttpClient.GetAsync(System.String)" /> and <see cref="M:System.Net.Http.HttpClient.PostAsync(System.String,System.Net.Http.HttpContent)" />.</span></span></summary>
        <value><span data-ttu-id="fa99b-221">建立 HTTP 连接时使用的 HttpVersionPolicy。</span><span class="sxs-lookup"><span data-stu-id="fa99b-221">The HttpVersionPolicy used when the HTTP connection is established.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
<span data-ttu-id="fa99b-222">此属性对接受的任何或重载不起作用 <xref:System.Net.Http.HttpClient.Send%2A> <xref:System.Net.Http.HttpClient.SendAsync%2A> <xref:System.Net.Http.HttpRequestMessage?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="fa99b-222">This property has no effect on any of the <xref:System.Net.Http.HttpClient.Send%2A> or <xref:System.Net.Http.HttpClient.SendAsync%2A> overloads that accept an <xref:System.Net.Http.HttpRequestMessage?displayProperty=nameWithType>.</span></span>
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="DeleteAsync">
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="fa99b-223">以异步操作将 DELETE 请求发送给指定 URI。</span><span class="sxs-lookup"><span data-stu-id="fa99b-223">Send a DELETE request to the specified Uri as an asynchronous operation.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DeleteAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; DeleteAsync (string requestUri);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; DeleteAsync(string requestUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.DeleteAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function DeleteAsync (requestUri As String) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ DeleteAsync(System::String ^ requestUri);" />
      <MemberSignature Language="F#" Value="member this.DeleteAsync : string -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.DeleteAsync requestUri" />
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; DeleteAsync (string? requestUri);" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="fa99b-224">请求发送到的 URI。</span><span class="sxs-lookup"><span data-stu-id="fa99b-224">The Uri the request is sent to.</span></span></param>
        <summary><span data-ttu-id="fa99b-225">以异步操作将 DELETE 请求发送给指定 URI。</span><span class="sxs-lookup"><span data-stu-id="fa99b-225">Send a DELETE request to the specified Uri as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="fa99b-226">表示异步操作的任务对象。</span><span class="sxs-lookup"><span data-stu-id="fa99b-226">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa99b-227">此操作不会阻止。</span><span class="sxs-lookup"><span data-stu-id="fa99b-227">This operation will not block.</span></span> <span data-ttu-id="fa99b-228">返回 <xref:System.Threading.Tasks.Task%601> 的对象将在整个响应 (包括内容) 读取后完成。</span><span class="sxs-lookup"><span data-stu-id="fa99b-228">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  

> [!NOTE]
> <span data-ttu-id="fa99b-229">在超时情况下，不同的 .NET 实现会引发不同的异常。</span><span class="sxs-lookup"><span data-stu-id="fa99b-229">In case of timeout, different exceptions are thrown on different .NET implementations.</span></span>
> - <span data-ttu-id="fa99b-230"><xref:System.Net.Http.HttpRequestException> 所有适用的 .NET Framework 版本都将引发。</span><span class="sxs-lookup"><span data-stu-id="fa99b-230"><xref:System.Net.Http.HttpRequestException> is thrown on all applicable .NET Framework versions.</span></span>
> - <span data-ttu-id="fa99b-231"><xref:System.Threading.Tasks.TaskCanceledException> 在所有适用的 .NET Core 版本上都不会引发任何内部异常。</span><span class="sxs-lookup"><span data-stu-id="fa99b-231"><xref:System.Threading.Tasks.TaskCanceledException> without any inner exception is thrown on all applicable .NET Core versions.</span></span>
> - <span data-ttu-id="fa99b-232"><xref:System.Threading.Tasks.TaskCanceledException><xref:System.TimeoutException>在 .net 5.0 和更高版本上，将引发嵌套的。</span><span class="sxs-lookup"><span data-stu-id="fa99b-232"><xref:System.Threading.Tasks.TaskCanceledException> that nests a <xref:System.TimeoutException> is thrown on .NET 5.0 and later versions.</span></span>
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="fa99b-233">请求消息已由 <see cref="T:System.Net.Http.HttpClient" /> 实例发送。</span><span class="sxs-lookup"><span data-stu-id="fa99b-233">The request message was already sent by the <see cref="T:System.Net.Http.HttpClient" /> instance.</span></span>

<span data-ttu-id="fa99b-234">- 或 -</span><span class="sxs-lookup"><span data-stu-id="fa99b-234">-or-</span></span>

<span data-ttu-id="fa99b-235"><paramref name="requestUri" /> 不是一个绝对 URI。</span><span class="sxs-lookup"><span data-stu-id="fa99b-235">The <paramref name="requestUri" /> is not an absolute URI.</span></span>

<span data-ttu-id="fa99b-236">- 或 -</span><span class="sxs-lookup"><span data-stu-id="fa99b-236">-or-</span></span>

<span data-ttu-id="fa99b-237">未设置 <see cref="P:System.Net.Http.HttpClient.BaseAddress" />。</span><span class="sxs-lookup"><span data-stu-id="fa99b-237"><see cref="P:System.Net.Http.HttpClient.BaseAddress" /> is not set.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="fa99b-238">由于基础问题（如网络连接性、DNS 失败、服务器证书验证或超时），请求失败。</span><span class="sxs-lookup"><span data-stu-id="fa99b-238">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException"><span data-ttu-id="fa99b-239">仅限 .NET Core 和 .NET 5.0 及更高版本：请求因超时而失败。</span><span class="sxs-lookup"><span data-stu-id="fa99b-239">.NET Core and .NET 5.0 and later only: The request failed due to timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DeleteAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; DeleteAsync (Uri requestUri);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; DeleteAsync(class System.Uri requestUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.DeleteAsync(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Function DeleteAsync (requestUri As Uri) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ DeleteAsync(Uri ^ requestUri);" />
      <MemberSignature Language="F#" Value="member this.DeleteAsync : Uri -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.DeleteAsync requestUri" />
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; DeleteAsync (Uri? requestUri);" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="fa99b-240">请求发送到的 URI。</span><span class="sxs-lookup"><span data-stu-id="fa99b-240">The Uri the request is sent to.</span></span></param>
        <summary><span data-ttu-id="fa99b-241">以异步操作将 DELETE 请求发送给指定 URI。</span><span class="sxs-lookup"><span data-stu-id="fa99b-241">Send a DELETE request to the specified Uri as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="fa99b-242">表示异步操作的任务对象。</span><span class="sxs-lookup"><span data-stu-id="fa99b-242">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa99b-243">此操作不会阻止。</span><span class="sxs-lookup"><span data-stu-id="fa99b-243">This operation will not block.</span></span> <span data-ttu-id="fa99b-244">返回 <xref:System.Threading.Tasks.Task%601> 的对象将在整个响应 (包括内容) 读取后完成。</span><span class="sxs-lookup"><span data-stu-id="fa99b-244">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  

> [!NOTE]
> <span data-ttu-id="fa99b-245">在超时情况下，不同的 .NET 实现会引发不同的异常。</span><span class="sxs-lookup"><span data-stu-id="fa99b-245">In case of timeout, different exceptions are thrown on different .NET implementations.</span></span>
> - <span data-ttu-id="fa99b-246"><xref:System.Net.Http.HttpRequestException> 所有适用的 .NET Framework 版本都将引发。</span><span class="sxs-lookup"><span data-stu-id="fa99b-246"><xref:System.Net.Http.HttpRequestException> is thrown on all applicable .NET Framework versions.</span></span>
> - <span data-ttu-id="fa99b-247"><xref:System.Threading.Tasks.TaskCanceledException> 在所有适用的 .NET Core 版本上都不会引发任何内部异常。</span><span class="sxs-lookup"><span data-stu-id="fa99b-247"><xref:System.Threading.Tasks.TaskCanceledException> without any inner exception is thrown on all applicable .NET Core versions.</span></span>
> - <span data-ttu-id="fa99b-248"><xref:System.Threading.Tasks.TaskCanceledException><xref:System.TimeoutException>在 .net 5.0 和更高版本上，将引发嵌套的。</span><span class="sxs-lookup"><span data-stu-id="fa99b-248"><xref:System.Threading.Tasks.TaskCanceledException> that nests a <xref:System.TimeoutException> is thrown on .NET 5.0 and later versions.</span></span>
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="fa99b-249">请求消息已由 <see cref="T:System.Net.Http.HttpClient" /> 实例发送。</span><span class="sxs-lookup"><span data-stu-id="fa99b-249">The request message was already sent by the <see cref="T:System.Net.Http.HttpClient" /> instance.</span></span>

<span data-ttu-id="fa99b-250">- 或 -</span><span class="sxs-lookup"><span data-stu-id="fa99b-250">-or-</span></span>

<span data-ttu-id="fa99b-251"><paramref name="requestUri" /> 不是一个绝对 URI。</span><span class="sxs-lookup"><span data-stu-id="fa99b-251">The <paramref name="requestUri" /> is not an absolute URI.</span></span>

<span data-ttu-id="fa99b-252">- 或 -</span><span class="sxs-lookup"><span data-stu-id="fa99b-252">-or-</span></span>

<span data-ttu-id="fa99b-253">未设置 <see cref="P:System.Net.Http.HttpClient.BaseAddress" />。</span><span class="sxs-lookup"><span data-stu-id="fa99b-253"><see cref="P:System.Net.Http.HttpClient.BaseAddress" /> is not set.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="fa99b-254">由于基础问题（如网络连接性、DNS 失败、服务器证书验证或超时），请求失败。</span><span class="sxs-lookup"><span data-stu-id="fa99b-254">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException"><span data-ttu-id="fa99b-255">仅限 .NET Core 和 .NET 5.0 及更高版本：请求因超时而失败。</span><span class="sxs-lookup"><span data-stu-id="fa99b-255">.NET Core and .NET 5.0 and later only: The request failed due to timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DeleteAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; DeleteAsync (string requestUri, System.Threading.CancellationToken cancellationToken);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; DeleteAsync(string requestUri, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.DeleteAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function DeleteAsync (requestUri As String, cancellationToken As CancellationToken) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ DeleteAsync(System::String ^ requestUri, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.DeleteAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.DeleteAsync (requestUri, cancellationToken)" />
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; DeleteAsync (string? requestUri, System.Threading.CancellationToken cancellationToken);" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="fa99b-256">请求发送到的 URI。</span><span class="sxs-lookup"><span data-stu-id="fa99b-256">The Uri the request is sent to.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="fa99b-257">可由其他对象或线程用以接收取消通知的取消标记。</span><span class="sxs-lookup"><span data-stu-id="fa99b-257">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</span></span></param>
        <summary><span data-ttu-id="fa99b-258">用以异步操作的取消标记发送 DELETE 请求到指定的 URI。</span><span class="sxs-lookup"><span data-stu-id="fa99b-258">Send a DELETE request to the specified Uri with a cancellation token as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="fa99b-259">表示异步操作的任务对象。</span><span class="sxs-lookup"><span data-stu-id="fa99b-259">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa99b-260">此操作不会阻止。</span><span class="sxs-lookup"><span data-stu-id="fa99b-260">This operation will not block.</span></span> <span data-ttu-id="fa99b-261">返回 <xref:System.Threading.Tasks.Task%601> 的对象将在整个响应 (包括内容) 读取后完成。</span><span class="sxs-lookup"><span data-stu-id="fa99b-261">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  

> [!NOTE]
> <span data-ttu-id="fa99b-262">在超时情况下，不同的 .NET 实现会引发不同的异常。</span><span class="sxs-lookup"><span data-stu-id="fa99b-262">In case of timeout, different exceptions are thrown on different .NET implementations.</span></span>
> - <span data-ttu-id="fa99b-263"><xref:System.Net.Http.HttpRequestException> 所有适用的 .NET Framework 版本都将引发。</span><span class="sxs-lookup"><span data-stu-id="fa99b-263"><xref:System.Net.Http.HttpRequestException> is thrown on all applicable .NET Framework versions.</span></span>
> - <span data-ttu-id="fa99b-264"><xref:System.Threading.Tasks.TaskCanceledException> 在所有适用的 .NET Core 版本上都不会引发任何内部异常。</span><span class="sxs-lookup"><span data-stu-id="fa99b-264"><xref:System.Threading.Tasks.TaskCanceledException> without any inner exception is thrown on all applicable .NET Core versions.</span></span>
> - <span data-ttu-id="fa99b-265"><xref:System.Threading.Tasks.TaskCanceledException><xref:System.TimeoutException>在 .net 5.0 和更高版本上，将引发嵌套的。</span><span class="sxs-lookup"><span data-stu-id="fa99b-265"><xref:System.Threading.Tasks.TaskCanceledException> that nests a <xref:System.TimeoutException> is thrown on .NET 5.0 and later versions.</span></span>
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="fa99b-266">请求消息已由 <see cref="T:System.Net.Http.HttpClient" /> 实例发送。</span><span class="sxs-lookup"><span data-stu-id="fa99b-266">The request message was already sent by the <see cref="T:System.Net.Http.HttpClient" /> instance.</span></span>

<span data-ttu-id="fa99b-267">- 或 -</span><span class="sxs-lookup"><span data-stu-id="fa99b-267">-or-</span></span>

<span data-ttu-id="fa99b-268"><paramref name="requestUri" /> 不是一个绝对 URI。</span><span class="sxs-lookup"><span data-stu-id="fa99b-268">The <paramref name="requestUri" /> is not an absolute URI.</span></span>

<span data-ttu-id="fa99b-269">- 或 -</span><span class="sxs-lookup"><span data-stu-id="fa99b-269">-or-</span></span>

<span data-ttu-id="fa99b-270">未设置 <see cref="P:System.Net.Http.HttpClient.BaseAddress" />。</span><span class="sxs-lookup"><span data-stu-id="fa99b-270"><see cref="P:System.Net.Http.HttpClient.BaseAddress" /> is not set.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="fa99b-271">由于基础问题（如网络连接性、DNS 失败、服务器证书验证或超时），请求失败。</span><span class="sxs-lookup"><span data-stu-id="fa99b-271">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException"><span data-ttu-id="fa99b-272">仅限 .NET Core 和 .NET 5.0 及更高版本：请求因超时而失败。</span><span class="sxs-lookup"><span data-stu-id="fa99b-272">.NET Core and .NET 5.0 and later only: The request failed due to timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DeleteAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; DeleteAsync (Uri requestUri, System.Threading.CancellationToken cancellationToken);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; DeleteAsync(class System.Uri requestUri, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.DeleteAsync(System.Uri,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function DeleteAsync (requestUri As Uri, cancellationToken As CancellationToken) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ DeleteAsync(Uri ^ requestUri, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.DeleteAsync : Uri * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.DeleteAsync (requestUri, cancellationToken)" />
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; DeleteAsync (Uri? requestUri, System.Threading.CancellationToken cancellationToken);" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="fa99b-273">请求发送到的 URI。</span><span class="sxs-lookup"><span data-stu-id="fa99b-273">The Uri the request is sent to.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="fa99b-274">可由其他对象或线程用以接收取消通知的取消标记。</span><span class="sxs-lookup"><span data-stu-id="fa99b-274">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</span></span></param>
        <summary><span data-ttu-id="fa99b-275">用以异步操作的取消标记发送 DELETE 请求到指定的 URI。</span><span class="sxs-lookup"><span data-stu-id="fa99b-275">Send a DELETE request to the specified Uri with a cancellation token as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="fa99b-276">表示异步操作的任务对象。</span><span class="sxs-lookup"><span data-stu-id="fa99b-276">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa99b-277">此操作不会阻止。</span><span class="sxs-lookup"><span data-stu-id="fa99b-277">This operation will not block.</span></span> <span data-ttu-id="fa99b-278">返回 <xref:System.Threading.Tasks.Task%601> 的对象将在整个响应 (包括内容) 读取后完成。</span><span class="sxs-lookup"><span data-stu-id="fa99b-278">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  

> [!NOTE]
> <span data-ttu-id="fa99b-279">在超时情况下，不同的 .NET 实现会引发不同的异常。</span><span class="sxs-lookup"><span data-stu-id="fa99b-279">In case of timeout, different exceptions are thrown on different .NET implementations.</span></span>
> - <span data-ttu-id="fa99b-280"><xref:System.Net.Http.HttpRequestException> 所有适用的 .NET Framework 版本都将引发。</span><span class="sxs-lookup"><span data-stu-id="fa99b-280"><xref:System.Net.Http.HttpRequestException> is thrown on all applicable .NET Framework versions.</span></span>
> - <span data-ttu-id="fa99b-281"><xref:System.Threading.Tasks.TaskCanceledException> 在所有适用的 .NET Core 版本上都不会引发任何内部异常。</span><span class="sxs-lookup"><span data-stu-id="fa99b-281"><xref:System.Threading.Tasks.TaskCanceledException> without any inner exception is thrown on all applicable .NET Core versions.</span></span>
> - <span data-ttu-id="fa99b-282"><xref:System.Threading.Tasks.TaskCanceledException><xref:System.TimeoutException>在 .net 5.0 和更高版本上，将引发嵌套的。</span><span class="sxs-lookup"><span data-stu-id="fa99b-282"><xref:System.Threading.Tasks.TaskCanceledException> that nests a <xref:System.TimeoutException> is thrown on .NET 5.0 and later versions.</span></span>
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="fa99b-283">请求消息已由 <see cref="T:System.Net.Http.HttpClient" /> 实例发送。</span><span class="sxs-lookup"><span data-stu-id="fa99b-283">The request message was already sent by the <see cref="T:System.Net.Http.HttpClient" /> instance.</span></span>

<span data-ttu-id="fa99b-284">- 或 -</span><span class="sxs-lookup"><span data-stu-id="fa99b-284">-or-</span></span>

<span data-ttu-id="fa99b-285"><paramref name="requestUri" /> 不是一个绝对 URI。</span><span class="sxs-lookup"><span data-stu-id="fa99b-285">The <paramref name="requestUri" /> is not an absolute URI.</span></span>

<span data-ttu-id="fa99b-286">- 或 -</span><span class="sxs-lookup"><span data-stu-id="fa99b-286">-or-</span></span>

<span data-ttu-id="fa99b-287">未设置 <see cref="P:System.Net.Http.HttpClient.BaseAddress" />。</span><span class="sxs-lookup"><span data-stu-id="fa99b-287"><see cref="P:System.Net.Http.HttpClient.BaseAddress" /> is not set.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="fa99b-288">由于基础问题（如网络连接性、DNS 失败、服务器证书验证或超时），请求失败。</span><span class="sxs-lookup"><span data-stu-id="fa99b-288">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException"><span data-ttu-id="fa99b-289">仅限 .NET Core 和 .NET 5.0 及更高版本：请求因超时而失败。</span><span class="sxs-lookup"><span data-stu-id="fa99b-289">.NET Core and .NET 5.0 and later only: The request failed due to timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="httpClient.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing"><span data-ttu-id="fa99b-290">如果释放托管资源和非托管资源，则为 <see langword="true" />；如果仅释放非托管资源，则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="fa99b-290"><see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to releases only unmanaged resources.</span></span></param>
        <summary><span data-ttu-id="fa99b-291">释放由 <see cref="T:System.Net.Http.HttpClient" /> 使用的非托管资源，并可根据需要释放托管资源。</span><span class="sxs-lookup"><span data-stu-id="fa99b-291">Releases the unmanaged resources used by the <see cref="T:System.Net.Http.HttpClient" /> and optionally disposes of the managed resources.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa99b-292">此方法由公共 `Dispose()` 方法和 <xref:System.Object.Finalize%2A> 方法调用。</span><span class="sxs-lookup"><span data-stu-id="fa99b-292">This method is called by the public `Dispose()` method and the <xref:System.Object.Finalize%2A> method.</span></span> <span data-ttu-id="fa99b-293">`Dispose()` 调用受保护的 `Dispose(Boolean)` 方法，并将 `disposing` 参数设置为 `true` 。</span><span class="sxs-lookup"><span data-stu-id="fa99b-293">`Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`.</span></span> <span data-ttu-id="fa99b-294"><xref:System.Object.Finalize%2A>`Dispose`在设置为的情况调用 `disposing` `false` 。</span><span class="sxs-lookup"><span data-stu-id="fa99b-294"><xref:System.Object.Finalize%2A> invokes `Dispose` with `disposing` set to `false`.</span></span>  
  
 <span data-ttu-id="fa99b-295">当 `disposing` 参数为 `true` 时，此方法释放该 <xref:System.Net.Http.HttpClient> 引用的、由任何托管对象持有的全部资源。</span><span class="sxs-lookup"><span data-stu-id="fa99b-295">When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Net.Http.HttpClient> references.</span></span> <span data-ttu-id="fa99b-296">此方法调用每个引用对象的 `Dispose()` 方法。</span><span class="sxs-lookup"><span data-stu-id="fa99b-296">This method invokes the `Dispose()` method of each referenced object.</span></span>  
  
 <span data-ttu-id="fa99b-297">调用此方法时，将 <xref:System.Net.Http.HttpClient.CancelPendingRequests%2A> 调用方法以中止所有挂起的请求。</span><span class="sxs-lookup"><span data-stu-id="fa99b-297">When this method is called, the <xref:System.Net.Http.HttpClient.CancelPendingRequests%2A> method is called to abort all pending requests.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetAsync">
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="fa99b-298">以异步操作将 GET 请求发送给指定 URI。</span><span class="sxs-lookup"><span data-stu-id="fa99b-298">Send a GET request to the specified Uri as an asynchronous operation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa99b-299">操作不会阻止。</span><span class="sxs-lookup"><span data-stu-id="fa99b-299">The operation will not block.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; GetAsync (string requestUri);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; GetAsync(string requestUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAsync (requestUri As String) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ GetAsync(System::String ^ requestUri);" />
      <MemberSignature Language="F#" Value="member this.GetAsync : string -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.GetAsync requestUri" />
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; GetAsync (string? requestUri);" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="fa99b-300">请求发送到的 URI。</span><span class="sxs-lookup"><span data-stu-id="fa99b-300">The Uri the request is sent to.</span></span></param>
        <summary><span data-ttu-id="fa99b-301">以异步操作将 GET 请求发送给指定 URI。</span><span class="sxs-lookup"><span data-stu-id="fa99b-301">Send a GET request to the specified Uri as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="fa99b-302">表示异步操作的任务对象。</span><span class="sxs-lookup"><span data-stu-id="fa99b-302">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa99b-303">此操作不会阻止。</span><span class="sxs-lookup"><span data-stu-id="fa99b-303">This operation will not block.</span></span> <span data-ttu-id="fa99b-304">返回 <xref:System.Threading.Tasks.Task%601> 的对象将在整个响应 (包括内容) 读取后完成。</span><span class="sxs-lookup"><span data-stu-id="fa99b-304">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  

> [!NOTE]
> <span data-ttu-id="fa99b-305">在超时情况下，不同的 .NET 实现会引发不同的异常。</span><span class="sxs-lookup"><span data-stu-id="fa99b-305">In case of timeout, different exceptions are thrown on different .NET implementations.</span></span>
> - <span data-ttu-id="fa99b-306"><xref:System.Net.Http.HttpRequestException> 所有适用的 .NET Framework 版本都将引发。</span><span class="sxs-lookup"><span data-stu-id="fa99b-306"><xref:System.Net.Http.HttpRequestException> is thrown on all applicable .NET Framework versions.</span></span>
> - <span data-ttu-id="fa99b-307"><xref:System.Threading.Tasks.TaskCanceledException> 在所有适用的 .NET Core 版本上都不会引发任何内部异常。</span><span class="sxs-lookup"><span data-stu-id="fa99b-307"><xref:System.Threading.Tasks.TaskCanceledException> without any inner exception is thrown on all applicable .NET Core versions.</span></span>
> - <span data-ttu-id="fa99b-308"><xref:System.Threading.Tasks.TaskCanceledException><xref:System.TimeoutException>在 .net 5.0 和更高版本上，将引发嵌套的。</span><span class="sxs-lookup"><span data-stu-id="fa99b-308"><xref:System.Threading.Tasks.TaskCanceledException> that nests a <xref:System.TimeoutException> is thrown on .NET 5.0 and later versions.</span></span>
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="fa99b-309"><paramref name="requestUri" /> 必须为绝对 URI 或必须设置 <see cref="P:System.Net.Http.HttpClient.BaseAddress" />。</span><span class="sxs-lookup"><span data-stu-id="fa99b-309">The <paramref name="requestUri" /> must be an absolute URI or <see cref="P:System.Net.Http.HttpClient.BaseAddress" /> must be set.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="fa99b-310">由于基础问题（如网络连接性、DNS 失败、服务器证书验证或超时），请求失败。</span><span class="sxs-lookup"><span data-stu-id="fa99b-310">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException"><span data-ttu-id="fa99b-311">仅限 .NET Core 和 .NET 5.0 及更高版本：请求因超时而失败。</span><span class="sxs-lookup"><span data-stu-id="fa99b-311">.NET Core and .NET 5.0 and later only: The request failed due to timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; GetAsync (Uri requestUri);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; GetAsync(class System.Uri requestUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetAsync(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAsync (requestUri As Uri) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ GetAsync(Uri ^ requestUri);" />
      <MemberSignature Language="F#" Value="member this.GetAsync : Uri -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.GetAsync requestUri" />
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; GetAsync (Uri? requestUri);" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="fa99b-312">请求发送到的 URI。</span><span class="sxs-lookup"><span data-stu-id="fa99b-312">The Uri the request is sent to.</span></span></param>
        <summary><span data-ttu-id="fa99b-313">以异步操作将 GET 请求发送给指定 URI。</span><span class="sxs-lookup"><span data-stu-id="fa99b-313">Send a GET request to the specified Uri as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="fa99b-314">表示异步操作的任务对象。</span><span class="sxs-lookup"><span data-stu-id="fa99b-314">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa99b-315">此操作不会阻止。</span><span class="sxs-lookup"><span data-stu-id="fa99b-315">This operation will not block.</span></span> <span data-ttu-id="fa99b-316">返回 <xref:System.Threading.Tasks.Task%601> 的对象将在整个响应 (包括内容) 读取后完成。</span><span class="sxs-lookup"><span data-stu-id="fa99b-316">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  

> [!NOTE]
> <span data-ttu-id="fa99b-317">在超时情况下，不同的 .NET 实现会引发不同的异常。</span><span class="sxs-lookup"><span data-stu-id="fa99b-317">In case of timeout, different exceptions are thrown on different .NET implementations.</span></span>
> - <span data-ttu-id="fa99b-318"><xref:System.Net.Http.HttpRequestException> 所有适用的 .NET Framework 版本都将引发。</span><span class="sxs-lookup"><span data-stu-id="fa99b-318"><xref:System.Net.Http.HttpRequestException> is thrown on all applicable .NET Framework versions.</span></span>
> - <span data-ttu-id="fa99b-319"><xref:System.Threading.Tasks.TaskCanceledException> 在所有适用的 .NET Core 版本上都不会引发任何内部异常。</span><span class="sxs-lookup"><span data-stu-id="fa99b-319"><xref:System.Threading.Tasks.TaskCanceledException> without any inner exception is thrown on all applicable .NET Core versions.</span></span>
> - <span data-ttu-id="fa99b-320"><xref:System.Threading.Tasks.TaskCanceledException><xref:System.TimeoutException>在 .net 5.0 和更高版本上，将引发嵌套的。</span><span class="sxs-lookup"><span data-stu-id="fa99b-320"><xref:System.Threading.Tasks.TaskCanceledException> that nests a <xref:System.TimeoutException> is thrown on .NET 5.0 and later versions.</span></span>
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="fa99b-321"><paramref name="requestUri" /> 必须为绝对 URI 或必须设置 <see cref="P:System.Net.Http.HttpClient.BaseAddress" />。</span><span class="sxs-lookup"><span data-stu-id="fa99b-321">The <paramref name="requestUri" /> must be an absolute URI or <see cref="P:System.Net.Http.HttpClient.BaseAddress" /> must be set.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="fa99b-322">由于基础问题（如网络连接性、DNS 失败、服务器证书验证或超时），请求失败。</span><span class="sxs-lookup"><span data-stu-id="fa99b-322">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException"><span data-ttu-id="fa99b-323">仅限 .NET Core 和 .NET 5.0 及更高版本：请求因超时而失败。</span><span class="sxs-lookup"><span data-stu-id="fa99b-323">.NET Core and .NET 5.0 and later only: The request failed due to timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; GetAsync (string requestUri, System.Net.Http.HttpCompletionOption completionOption);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; GetAsync(string requestUri, valuetype System.Net.Http.HttpCompletionOption completionOption) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetAsync(System.String,System.Net.Http.HttpCompletionOption)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAsync (requestUri As String, completionOption As HttpCompletionOption) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ GetAsync(System::String ^ requestUri, System::Net::Http::HttpCompletionOption completionOption);" />
      <MemberSignature Language="F#" Value="member this.GetAsync : string * System.Net.Http.HttpCompletionOption -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.GetAsync (requestUri, completionOption)" />
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; GetAsync (string? requestUri, System.Net.Http.HttpCompletionOption completionOption);" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" />
        <Parameter Name="completionOption" Type="System.Net.Http.HttpCompletionOption" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="fa99b-324">请求发送到的 URI。</span><span class="sxs-lookup"><span data-stu-id="fa99b-324">The Uri the request is sent to.</span></span></param>
        <param name="completionOption"><span data-ttu-id="fa99b-325">指示操作应视为已完成的时间的 HTTP 完成选项值。</span><span class="sxs-lookup"><span data-stu-id="fa99b-325">An HTTP completion option value that indicates when the operation should be considered completed.</span></span></param>
        <summary><span data-ttu-id="fa99b-326">用以异步操作的 HTTP 完成选项发送 GET 请求到指定的 URI。</span><span class="sxs-lookup"><span data-stu-id="fa99b-326">Send a GET request to the specified Uri with an HTTP completion option as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="fa99b-327">表示异步操作的任务对象。</span><span class="sxs-lookup"><span data-stu-id="fa99b-327">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa99b-328">此操作不会阻止。</span><span class="sxs-lookup"><span data-stu-id="fa99b-328">This operation will not block.</span></span> <span data-ttu-id="fa99b-329">返回的 <xref:System.Threading.Tasks.Task%601> 对象将根据 `completionOption` (包含内容) 读取的部分或全部响应后的参数完成。</span><span class="sxs-lookup"><span data-stu-id="fa99b-329">The returned <xref:System.Threading.Tasks.Task%601> object will complete based on the `completionOption` parameter after the part or all of the response (including content) is read.</span></span>  

> [!NOTE]
> <span data-ttu-id="fa99b-330">在超时情况下，不同的 .NET 实现会引发不同的异常。</span><span class="sxs-lookup"><span data-stu-id="fa99b-330">In case of timeout, different exceptions are thrown on different .NET implementations.</span></span>
> - <span data-ttu-id="fa99b-331"><xref:System.Net.Http.HttpRequestException> 所有适用的 .NET Framework 版本都将引发。</span><span class="sxs-lookup"><span data-stu-id="fa99b-331"><xref:System.Net.Http.HttpRequestException> is thrown on all applicable .NET Framework versions.</span></span>
> - <span data-ttu-id="fa99b-332"><xref:System.Threading.Tasks.TaskCanceledException> 在所有适用的 .NET Core 版本上都不会引发任何内部异常。</span><span class="sxs-lookup"><span data-stu-id="fa99b-332"><xref:System.Threading.Tasks.TaskCanceledException> without any inner exception is thrown on all applicable .NET Core versions.</span></span>
> - <span data-ttu-id="fa99b-333"><xref:System.Threading.Tasks.TaskCanceledException><xref:System.TimeoutException>在 .net 5.0 和更高版本上，将引发嵌套的。</span><span class="sxs-lookup"><span data-stu-id="fa99b-333"><xref:System.Threading.Tasks.TaskCanceledException> that nests a <xref:System.TimeoutException> is thrown on .NET 5.0 and later versions.</span></span>
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="fa99b-334"><paramref name="requestUri" /> 必须为绝对 URI 或必须设置 <see cref="P:System.Net.Http.HttpClient.BaseAddress" />。</span><span class="sxs-lookup"><span data-stu-id="fa99b-334">The <paramref name="requestUri" /> must be an absolute URI or <see cref="P:System.Net.Http.HttpClient.BaseAddress" /> must be set.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="fa99b-335">由于基础问题（如网络连接性、DNS 失败、服务器证书验证或超时），请求失败。</span><span class="sxs-lookup"><span data-stu-id="fa99b-335">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException"><span data-ttu-id="fa99b-336">仅限 .NET Core 和 .NET 5.0 及更高版本：请求因超时而失败。</span><span class="sxs-lookup"><span data-stu-id="fa99b-336">.NET Core and .NET 5.0 and later only: The request failed due to timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; GetAsync (string requestUri, System.Threading.CancellationToken cancellationToken);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; GetAsync(string requestUri, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAsync (requestUri As String, cancellationToken As CancellationToken) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ GetAsync(System::String ^ requestUri, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.GetAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.GetAsync (requestUri, cancellationToken)" />
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; GetAsync (string? requestUri, System.Threading.CancellationToken cancellationToken);" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="fa99b-337">请求发送到的 URI。</span><span class="sxs-lookup"><span data-stu-id="fa99b-337">The Uri the request is sent to.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="fa99b-338">可由其他对象或线程用以接收取消通知的取消标记。</span><span class="sxs-lookup"><span data-stu-id="fa99b-338">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</span></span></param>
        <summary><span data-ttu-id="fa99b-339">用以异步操作的取消标记发送 GET 请求到指定的 URI。</span><span class="sxs-lookup"><span data-stu-id="fa99b-339">Send a GET request to the specified Uri with a cancellation token as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="fa99b-340">表示异步操作的任务对象。</span><span class="sxs-lookup"><span data-stu-id="fa99b-340">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa99b-341">此操作不会阻止。</span><span class="sxs-lookup"><span data-stu-id="fa99b-341">This operation will not block.</span></span> <span data-ttu-id="fa99b-342">返回 <xref:System.Threading.Tasks.Task%601> 的对象将在整个响应 (包括内容) 读取后完成。</span><span class="sxs-lookup"><span data-stu-id="fa99b-342">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  

> [!NOTE]
> <span data-ttu-id="fa99b-343">在超时情况下，不同的 .NET 实现会引发不同的异常。</span><span class="sxs-lookup"><span data-stu-id="fa99b-343">In case of timeout, different exceptions are thrown on different .NET implementations.</span></span>
> - <span data-ttu-id="fa99b-344"><xref:System.Net.Http.HttpRequestException> 所有适用的 .NET Framework 版本都将引发。</span><span class="sxs-lookup"><span data-stu-id="fa99b-344"><xref:System.Net.Http.HttpRequestException> is thrown on all applicable .NET Framework versions.</span></span>
> - <span data-ttu-id="fa99b-345"><xref:System.Threading.Tasks.TaskCanceledException> 在所有适用的 .NET Core 版本上都不会引发任何内部异常。</span><span class="sxs-lookup"><span data-stu-id="fa99b-345"><xref:System.Threading.Tasks.TaskCanceledException> without any inner exception is thrown on all applicable .NET Core versions.</span></span>
> - <span data-ttu-id="fa99b-346"><xref:System.Threading.Tasks.TaskCanceledException><xref:System.TimeoutException>在 .net 5.0 和更高版本上，将引发嵌套的。</span><span class="sxs-lookup"><span data-stu-id="fa99b-346"><xref:System.Threading.Tasks.TaskCanceledException> that nests a <xref:System.TimeoutException> is thrown on .NET 5.0 and later versions.</span></span>
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="fa99b-347"><paramref name="requestUri" /> 必须为绝对 URI 或必须设置 <see cref="P:System.Net.Http.HttpClient.BaseAddress" />。</span><span class="sxs-lookup"><span data-stu-id="fa99b-347">The <paramref name="requestUri" /> must be an absolute URI or <see cref="P:System.Net.Http.HttpClient.BaseAddress" /> must be set.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="fa99b-348">由于基础问题（如网络连接性、DNS 失败、服务器证书验证或超时），请求失败。</span><span class="sxs-lookup"><span data-stu-id="fa99b-348">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException"><span data-ttu-id="fa99b-349">仅限 .NET Core 和 .NET 5.0 及更高版本：请求因超时而失败。</span><span class="sxs-lookup"><span data-stu-id="fa99b-349">.NET Core and .NET 5.0 and later only: The request failed due to timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; GetAsync (Uri requestUri, System.Net.Http.HttpCompletionOption completionOption);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; GetAsync(class System.Uri requestUri, valuetype System.Net.Http.HttpCompletionOption completionOption) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetAsync(System.Uri,System.Net.Http.HttpCompletionOption)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAsync (requestUri As Uri, completionOption As HttpCompletionOption) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ GetAsync(Uri ^ requestUri, System::Net::Http::HttpCompletionOption completionOption);" />
      <MemberSignature Language="F#" Value="member this.GetAsync : Uri * System.Net.Http.HttpCompletionOption -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.GetAsync (requestUri, completionOption)" />
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; GetAsync (Uri? requestUri, System.Net.Http.HttpCompletionOption completionOption);" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" />
        <Parameter Name="completionOption" Type="System.Net.Http.HttpCompletionOption" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="fa99b-350">请求发送到的 URI。</span><span class="sxs-lookup"><span data-stu-id="fa99b-350">The Uri the request is sent to.</span></span></param>
        <param name="completionOption"><span data-ttu-id="fa99b-351">指示操作应视为已完成的时间的 HTTP 完成选项值。</span><span class="sxs-lookup"><span data-stu-id="fa99b-351">An HTTP completion option value that indicates when the operation should be considered completed.</span></span></param>
        <summary><span data-ttu-id="fa99b-352">用以异步操作的 HTTP 完成选项发送 GET 请求到指定的 URI。</span><span class="sxs-lookup"><span data-stu-id="fa99b-352">Send a GET request to the specified Uri with an HTTP completion option as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="fa99b-353">表示异步操作的任务对象。</span><span class="sxs-lookup"><span data-stu-id="fa99b-353">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa99b-354">此操作不会阻止。</span><span class="sxs-lookup"><span data-stu-id="fa99b-354">This operation will not block.</span></span> <span data-ttu-id="fa99b-355">返回的 <xref:System.Threading.Tasks.Task%601> 对象将根据 `completionOption` (包含内容) 读取的部分或全部响应后的参数完成。</span><span class="sxs-lookup"><span data-stu-id="fa99b-355">The returned <xref:System.Threading.Tasks.Task%601> object will complete based on the `completionOption` parameter after the part or all of the response (including content) is read.</span></span>  

> [!NOTE]
> <span data-ttu-id="fa99b-356">在超时情况下，不同的 .NET 实现会引发不同的异常。</span><span class="sxs-lookup"><span data-stu-id="fa99b-356">In case of timeout, different exceptions are thrown on different .NET implementations.</span></span>
> - <span data-ttu-id="fa99b-357"><xref:System.Net.Http.HttpRequestException> 所有适用的 .NET Framework 版本都将引发。</span><span class="sxs-lookup"><span data-stu-id="fa99b-357"><xref:System.Net.Http.HttpRequestException> is thrown on all applicable .NET Framework versions.</span></span>
> - <span data-ttu-id="fa99b-358"><xref:System.Threading.Tasks.TaskCanceledException> 在所有适用的 .NET Core 版本上都不会引发任何内部异常。</span><span class="sxs-lookup"><span data-stu-id="fa99b-358"><xref:System.Threading.Tasks.TaskCanceledException> without any inner exception is thrown on all applicable .NET Core versions.</span></span>
> - <span data-ttu-id="fa99b-359"><xref:System.Threading.Tasks.TaskCanceledException><xref:System.TimeoutException>在 .net 5.0 和更高版本上，将引发嵌套的。</span><span class="sxs-lookup"><span data-stu-id="fa99b-359"><xref:System.Threading.Tasks.TaskCanceledException> that nests a <xref:System.TimeoutException> is thrown on .NET 5.0 and later versions.</span></span>
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="fa99b-360"><paramref name="requestUri" /> 必须为绝对 URI 或必须设置 <see cref="P:System.Net.Http.HttpClient.BaseAddress" />。</span><span class="sxs-lookup"><span data-stu-id="fa99b-360">The <paramref name="requestUri" /> must be an absolute URI or <see cref="P:System.Net.Http.HttpClient.BaseAddress" /> must be set.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="fa99b-361">由于基础问题（如网络连接性、DNS 失败、服务器证书验证或超时），请求失败。</span><span class="sxs-lookup"><span data-stu-id="fa99b-361">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException"><span data-ttu-id="fa99b-362">仅限 .NET Core 和 .NET 5.0 及更高版本：请求因超时而失败。</span><span class="sxs-lookup"><span data-stu-id="fa99b-362">.NET Core and .NET 5.0 and later only: The request failed due to timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; GetAsync (Uri requestUri, System.Threading.CancellationToken cancellationToken);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; GetAsync(class System.Uri requestUri, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetAsync(System.Uri,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAsync (requestUri As Uri, cancellationToken As CancellationToken) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ GetAsync(Uri ^ requestUri, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.GetAsync : Uri * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.GetAsync (requestUri, cancellationToken)" />
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; GetAsync (Uri? requestUri, System.Threading.CancellationToken cancellationToken);" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="fa99b-363">请求发送到的 URI。</span><span class="sxs-lookup"><span data-stu-id="fa99b-363">The Uri the request is sent to.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="fa99b-364">可由其他对象或线程用以接收取消通知的取消标记。</span><span class="sxs-lookup"><span data-stu-id="fa99b-364">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</span></span></param>
        <summary><span data-ttu-id="fa99b-365">用以异步操作的取消标记发送 GET 请求到指定的 URI。</span><span class="sxs-lookup"><span data-stu-id="fa99b-365">Send a GET request to the specified Uri with a cancellation token as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="fa99b-366">表示异步操作的任务对象。</span><span class="sxs-lookup"><span data-stu-id="fa99b-366">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa99b-367">此操作不会阻止。</span><span class="sxs-lookup"><span data-stu-id="fa99b-367">This operation will not block.</span></span> <span data-ttu-id="fa99b-368">返回 <xref:System.Threading.Tasks.Task%601> 的对象将在整个响应 (包括内容) 读取后完成。</span><span class="sxs-lookup"><span data-stu-id="fa99b-368">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  

> [!NOTE]
> <span data-ttu-id="fa99b-369">在超时情况下，不同的 .NET 实现会引发不同的异常。</span><span class="sxs-lookup"><span data-stu-id="fa99b-369">In case of timeout, different exceptions are thrown on different .NET implementations.</span></span>
> - <span data-ttu-id="fa99b-370"><xref:System.Net.Http.HttpRequestException> 所有适用的 .NET Framework 版本都将引发。</span><span class="sxs-lookup"><span data-stu-id="fa99b-370"><xref:System.Net.Http.HttpRequestException> is thrown on all applicable .NET Framework versions.</span></span>
> - <span data-ttu-id="fa99b-371"><xref:System.Threading.Tasks.TaskCanceledException> 在所有适用的 .NET Core 版本上都不会引发任何内部异常。</span><span class="sxs-lookup"><span data-stu-id="fa99b-371"><xref:System.Threading.Tasks.TaskCanceledException> without any inner exception is thrown on all applicable .NET Core versions.</span></span>
> - <span data-ttu-id="fa99b-372"><xref:System.Threading.Tasks.TaskCanceledException><xref:System.TimeoutException>在 .net 5.0 和更高版本上，将引发嵌套的。</span><span class="sxs-lookup"><span data-stu-id="fa99b-372"><xref:System.Threading.Tasks.TaskCanceledException> that nests a <xref:System.TimeoutException> is thrown on .NET 5.0 and later versions.</span></span>
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="fa99b-373"><paramref name="requestUri" /> 必须为绝对 URI 或必须设置 <see cref="P:System.Net.Http.HttpClient.BaseAddress" />。</span><span class="sxs-lookup"><span data-stu-id="fa99b-373">The <paramref name="requestUri" /> must be an absolute URI or <see cref="P:System.Net.Http.HttpClient.BaseAddress" /> must be set.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="fa99b-374">由于基础问题（如网络连接性、DNS 失败、服务器证书验证或超时），请求失败。</span><span class="sxs-lookup"><span data-stu-id="fa99b-374">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException"><span data-ttu-id="fa99b-375">仅限 .NET Core 和 .NET 5.0 及更高版本：请求因超时而失败。</span><span class="sxs-lookup"><span data-stu-id="fa99b-375">.NET Core and .NET 5.0 and later only: The request failed due to timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; GetAsync (string requestUri, System.Net.Http.HttpCompletionOption completionOption, System.Threading.CancellationToken cancellationToken);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; GetAsync(string requestUri, valuetype System.Net.Http.HttpCompletionOption completionOption, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetAsync(System.String,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAsync (requestUri As String, completionOption As HttpCompletionOption, cancellationToken As CancellationToken) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ GetAsync(System::String ^ requestUri, System::Net::Http::HttpCompletionOption completionOption, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.GetAsync : string * System.Net.Http.HttpCompletionOption * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.GetAsync (requestUri, completionOption, cancellationToken)" />
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; GetAsync (string? requestUri, System.Net.Http.HttpCompletionOption completionOption, System.Threading.CancellationToken cancellationToken);" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" />
        <Parameter Name="completionOption" Type="System.Net.Http.HttpCompletionOption" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="fa99b-376">请求发送到的 URI。</span><span class="sxs-lookup"><span data-stu-id="fa99b-376">The Uri the request is sent to.</span></span></param>
        <param name="completionOption"><span data-ttu-id="fa99b-377">指示操作应视为已完成的时间的 HTTP 完成选项值。</span><span class="sxs-lookup"><span data-stu-id="fa99b-377">An HTTP  completion option value that indicates when the operation should be considered completed.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="fa99b-378">可由其他对象或线程用以接收取消通知的取消标记。</span><span class="sxs-lookup"><span data-stu-id="fa99b-378">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</span></span></param>
        <summary><span data-ttu-id="fa99b-379">用以异步操作的 HTTP 完成选项和取消标记发送 GET 请求到指定的 URI。</span><span class="sxs-lookup"><span data-stu-id="fa99b-379">Send a GET request to the specified Uri with an HTTP completion option and a cancellation token as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="fa99b-380">表示异步操作的任务对象。</span><span class="sxs-lookup"><span data-stu-id="fa99b-380">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa99b-381">此操作不会阻止。</span><span class="sxs-lookup"><span data-stu-id="fa99b-381">This operation will not block.</span></span> <span data-ttu-id="fa99b-382">返回的 <xref:System.Threading.Tasks.Task%601> 对象将根据 `completionOption` (包含内容) 读取的部分或全部响应后的参数完成。</span><span class="sxs-lookup"><span data-stu-id="fa99b-382">The returned <xref:System.Threading.Tasks.Task%601> object will complete based on the `completionOption` parameter after the part or all of the response (including content) is read.</span></span>  

> [!NOTE]
> <span data-ttu-id="fa99b-383">在超时情况下，不同的 .NET 实现会引发不同的异常。</span><span class="sxs-lookup"><span data-stu-id="fa99b-383">In case of timeout, different exceptions are thrown on different .NET implementations.</span></span>
> - <span data-ttu-id="fa99b-384"><xref:System.Net.Http.HttpRequestException> 所有适用的 .NET Framework 版本都将引发。</span><span class="sxs-lookup"><span data-stu-id="fa99b-384"><xref:System.Net.Http.HttpRequestException> is thrown on all applicable .NET Framework versions.</span></span>
> - <span data-ttu-id="fa99b-385"><xref:System.Threading.Tasks.TaskCanceledException> 在所有适用的 .NET Core 版本上都不会引发任何内部异常。</span><span class="sxs-lookup"><span data-stu-id="fa99b-385"><xref:System.Threading.Tasks.TaskCanceledException> without any inner exception is thrown on all applicable .NET Core versions.</span></span>
> - <span data-ttu-id="fa99b-386"><xref:System.Threading.Tasks.TaskCanceledException><xref:System.TimeoutException>在 .net 5.0 和更高版本上，将引发嵌套的。</span><span class="sxs-lookup"><span data-stu-id="fa99b-386"><xref:System.Threading.Tasks.TaskCanceledException> that nests a <xref:System.TimeoutException> is thrown on .NET 5.0 and later versions.</span></span>
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="fa99b-387"><paramref name="requestUri" /> 必须为绝对 URI 或必须设置 <see cref="P:System.Net.Http.HttpClient.BaseAddress" />。</span><span class="sxs-lookup"><span data-stu-id="fa99b-387">The <paramref name="requestUri" /> must be an absolute URI or <see cref="P:System.Net.Http.HttpClient.BaseAddress" /> must be set.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="fa99b-388">由于基础问题（如网络连接性、DNS 失败、服务器证书验证或超时），请求失败。</span><span class="sxs-lookup"><span data-stu-id="fa99b-388">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException"><span data-ttu-id="fa99b-389">仅限 .NET Core 和 .NET 5.0 及更高版本：请求因超时而失败。</span><span class="sxs-lookup"><span data-stu-id="fa99b-389">.NET Core and .NET 5.0 and later only: The request failed due to timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; GetAsync (Uri requestUri, System.Net.Http.HttpCompletionOption completionOption, System.Threading.CancellationToken cancellationToken);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; GetAsync(class System.Uri requestUri, valuetype System.Net.Http.HttpCompletionOption completionOption, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetAsync(System.Uri,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAsync (requestUri As Uri, completionOption As HttpCompletionOption, cancellationToken As CancellationToken) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ GetAsync(Uri ^ requestUri, System::Net::Http::HttpCompletionOption completionOption, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.GetAsync : Uri * System.Net.Http.HttpCompletionOption * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.GetAsync (requestUri, completionOption, cancellationToken)" />
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; GetAsync (Uri? requestUri, System.Net.Http.HttpCompletionOption completionOption, System.Threading.CancellationToken cancellationToken);" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" />
        <Parameter Name="completionOption" Type="System.Net.Http.HttpCompletionOption" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="fa99b-390">请求发送到的 URI。</span><span class="sxs-lookup"><span data-stu-id="fa99b-390">The Uri the request is sent to.</span></span></param>
        <param name="completionOption"><span data-ttu-id="fa99b-391">指示操作应视为已完成的时间的 HTTP 完成选项值。</span><span class="sxs-lookup"><span data-stu-id="fa99b-391">An HTTP  completion option value that indicates when the operation should be considered completed.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="fa99b-392">可由其他对象或线程用以接收取消通知的取消标记。</span><span class="sxs-lookup"><span data-stu-id="fa99b-392">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</span></span></param>
        <summary><span data-ttu-id="fa99b-393">用以异步操作的 HTTP 完成选项和取消标记发送 GET 请求到指定的 URI。</span><span class="sxs-lookup"><span data-stu-id="fa99b-393">Send a GET request to the specified Uri with an HTTP completion option and a cancellation token as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="fa99b-394">表示异步操作的任务对象。</span><span class="sxs-lookup"><span data-stu-id="fa99b-394">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa99b-395">此操作不会阻止。</span><span class="sxs-lookup"><span data-stu-id="fa99b-395">This operation will not block.</span></span> <span data-ttu-id="fa99b-396">返回的 <xref:System.Threading.Tasks.Task%601> 对象将根据 `completionOption` (包含内容) 读取的部分或全部响应后的参数完成。</span><span class="sxs-lookup"><span data-stu-id="fa99b-396">The returned <xref:System.Threading.Tasks.Task%601> object will complete based on the `completionOption` parameter after the part or all of the response (including content) is read.</span></span>  

> [!NOTE]
> <span data-ttu-id="fa99b-397">在超时情况下，不同的 .NET 实现会引发不同的异常。</span><span class="sxs-lookup"><span data-stu-id="fa99b-397">In case of timeout, different exceptions are thrown on different .NET implementations.</span></span>
> - <span data-ttu-id="fa99b-398"><xref:System.Net.Http.HttpRequestException> 所有适用的 .NET Framework 版本都将引发。</span><span class="sxs-lookup"><span data-stu-id="fa99b-398"><xref:System.Net.Http.HttpRequestException> is thrown on all applicable .NET Framework versions.</span></span>
> - <span data-ttu-id="fa99b-399"><xref:System.Threading.Tasks.TaskCanceledException> 在所有适用的 .NET Core 版本上都不会引发任何内部异常。</span><span class="sxs-lookup"><span data-stu-id="fa99b-399"><xref:System.Threading.Tasks.TaskCanceledException> without any inner exception is thrown on all applicable .NET Core versions.</span></span>
> - <span data-ttu-id="fa99b-400"><xref:System.Threading.Tasks.TaskCanceledException><xref:System.TimeoutException>在 .net 5.0 和更高版本上，将引发嵌套的。</span><span class="sxs-lookup"><span data-stu-id="fa99b-400"><xref:System.Threading.Tasks.TaskCanceledException> that nests a <xref:System.TimeoutException> is thrown on .NET 5.0 and later versions.</span></span>
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="fa99b-401"><paramref name="requestUri" /> 必须为绝对 URI 或必须设置 <see cref="P:System.Net.Http.HttpClient.BaseAddress" />。</span><span class="sxs-lookup"><span data-stu-id="fa99b-401">The <paramref name="requestUri" /> must be an absolute URI or <see cref="P:System.Net.Http.HttpClient.BaseAddress" /> must be set.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="fa99b-402">由于基础问题（如网络连接性、DNS 失败、服务器证书验证或超时），请求失败。</span><span class="sxs-lookup"><span data-stu-id="fa99b-402">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException"><span data-ttu-id="fa99b-403">仅限 .NET Core 和 .NET 5.0 及更高版本：请求因超时而失败。</span><span class="sxs-lookup"><span data-stu-id="fa99b-403">.NET Core and .NET 5.0 and later only: The request failed due to timeout.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetByteArrayAsync">
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="fa99b-404">将 GET 请求发送到指定 URI 并在异步操作中以字节数组的形式返回响应正文。</span><span class="sxs-lookup"><span data-stu-id="fa99b-404">Send a GET request to the specified Uri and return the response body as a byte array in an asynchronous operation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa99b-405">操作不会阻止。</span><span class="sxs-lookup"><span data-stu-id="fa99b-405">The operation will not block.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetByteArrayAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;byte[]&gt; GetByteArrayAsync (string requestUri);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;unsigned int8[]&gt; GetByteArrayAsync(string requestUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetByteArrayAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetByteArrayAsync (requestUri As String) As Task(Of Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;cli::array &lt;System::Byte&gt; ^&gt; ^ GetByteArrayAsync(System::String ^ requestUri);" />
      <MemberSignature Language="F#" Value="member this.GetByteArrayAsync : string -&gt; System.Threading.Tasks.Task&lt;byte[]&gt;" Usage="httpClient.GetByteArrayAsync requestUri" />
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;byte[]&gt; GetByteArrayAsync (string? requestUri);" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Byte[]&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="fa99b-406">请求发送到的 URI。</span><span class="sxs-lookup"><span data-stu-id="fa99b-406">The Uri the request is sent to.</span></span></param>
        <summary><span data-ttu-id="fa99b-407">将 GET 请求发送到指定 URI 并在异步操作中以字节数组的形式返回响应正文。</span><span class="sxs-lookup"><span data-stu-id="fa99b-407">Sends a GET request to the specified Uri and return the response body as a byte array in an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="fa99b-408">表示异步操作的任务对象。</span><span class="sxs-lookup"><span data-stu-id="fa99b-408">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa99b-409">此操作不会阻止。</span><span class="sxs-lookup"><span data-stu-id="fa99b-409">This operation will not block.</span></span> <span data-ttu-id="fa99b-410">在 <xref:System.Threading.Tasks.Task%601> 读取整个响应正文后，返回的对象将完成。</span><span class="sxs-lookup"><span data-stu-id="fa99b-410">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response body is read.</span></span>  

> [!NOTE]
> <span data-ttu-id="fa99b-411">在超时情况下，不同的 .NET 实现会引发不同的异常。</span><span class="sxs-lookup"><span data-stu-id="fa99b-411">In case of timeout, different exceptions are thrown on different .NET implementations.</span></span>
> - <span data-ttu-id="fa99b-412"><xref:System.Net.Http.HttpRequestException> 所有适用的 .NET Framework 版本都将引发。</span><span class="sxs-lookup"><span data-stu-id="fa99b-412"><xref:System.Net.Http.HttpRequestException> is thrown on all applicable .NET Framework versions.</span></span>
> - <span data-ttu-id="fa99b-413"><xref:System.Threading.Tasks.TaskCanceledException> 在所有适用的 .NET Core 版本上都不会引发任何内部异常。</span><span class="sxs-lookup"><span data-stu-id="fa99b-413"><xref:System.Threading.Tasks.TaskCanceledException> without any inner exception is thrown on all applicable .NET Core versions.</span></span>
> - <span data-ttu-id="fa99b-414"><xref:System.Threading.Tasks.TaskCanceledException><xref:System.TimeoutException>在 .net 5.0 和更高版本上，将引发嵌套的。</span><span class="sxs-lookup"><span data-stu-id="fa99b-414"><xref:System.Threading.Tasks.TaskCanceledException> that nests a <xref:System.TimeoutException> is thrown on .NET 5.0 and later versions.</span></span>
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="fa99b-415"><paramref name="requestUri" /> 必须为绝对 URI 或必须设置 <see cref="P:System.Net.Http.HttpClient.BaseAddress" />。</span><span class="sxs-lookup"><span data-stu-id="fa99b-415">The <paramref name="requestUri" /> must be an absolute URI or <see cref="P:System.Net.Http.HttpClient.BaseAddress" /> must be set.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="fa99b-416">由于基础问题（如网络连接性、DNS 失败、服务器证书验证或超时），请求失败。</span><span class="sxs-lookup"><span data-stu-id="fa99b-416">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException"><span data-ttu-id="fa99b-417">仅限 .NET Core 和 .NET 5.0 及更高版本：请求因超时而失败。</span><span class="sxs-lookup"><span data-stu-id="fa99b-417">.NET Core and .NET 5.0 and later only: The request failed due to timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetByteArrayAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;byte[]&gt; GetByteArrayAsync (Uri requestUri);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;unsigned int8[]&gt; GetByteArrayAsync(class System.Uri requestUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetByteArrayAsync(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetByteArrayAsync (requestUri As Uri) As Task(Of Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;cli::array &lt;System::Byte&gt; ^&gt; ^ GetByteArrayAsync(Uri ^ requestUri);" />
      <MemberSignature Language="F#" Value="member this.GetByteArrayAsync : Uri -&gt; System.Threading.Tasks.Task&lt;byte[]&gt;" Usage="httpClient.GetByteArrayAsync requestUri" />
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;byte[]&gt; GetByteArrayAsync (Uri? requestUri);" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Byte[]&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="fa99b-418">请求发送到的 URI。</span><span class="sxs-lookup"><span data-stu-id="fa99b-418">The Uri the request is sent to.</span></span></param>
        <summary><span data-ttu-id="fa99b-419">将 GET 请求发送到指定 URI 并在异步操作中以字节数组的形式返回响应正文。</span><span class="sxs-lookup"><span data-stu-id="fa99b-419">Send a GET request to the specified Uri and return the response body as a byte array in an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="fa99b-420">表示异步操作的任务对象。</span><span class="sxs-lookup"><span data-stu-id="fa99b-420">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa99b-421">此操作不会阻止。</span><span class="sxs-lookup"><span data-stu-id="fa99b-421">This operation will not block.</span></span> <span data-ttu-id="fa99b-422">在 <xref:System.Threading.Tasks.Task%601> 读取整个响应正文后，返回的对象将完成。</span><span class="sxs-lookup"><span data-stu-id="fa99b-422">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response body is read.</span></span>  

> [!NOTE]
> <span data-ttu-id="fa99b-423">如果超时，则：</span><span class="sxs-lookup"><span data-stu-id="fa99b-423">In case of a timeout:</span></span>
> - <span data-ttu-id="fa99b-424">.NET Framework 引发 <xref:System.Net.Http.HttpRequestException> 。</span><span class="sxs-lookup"><span data-stu-id="fa99b-424">.NET Framework throws a <xref:System.Net.Http.HttpRequestException>.</span></span>
> - <span data-ttu-id="fa99b-425">.NET Core 引发 <xref:System.Threading.Tasks.TaskCanceledException> 无任何内部异常的。</span><span class="sxs-lookup"><span data-stu-id="fa99b-425">.NET Core throws a <xref:System.Threading.Tasks.TaskCanceledException> without any inner exception.</span></span>
> - <span data-ttu-id="fa99b-426">.NET 5.0 和更高版本引发了 <xref:System.Threading.Tasks.TaskCanceledException> 嵌套的 <xref:System.TimeoutException> 。</span><span class="sxs-lookup"><span data-stu-id="fa99b-426">.NET 5.0 and later versions throw a <xref:System.Threading.Tasks.TaskCanceledException> that nests a <xref:System.TimeoutException>.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="fa99b-427"><paramref name="requestUri" /> 必须为绝对 URI 或必须设置 <see cref="P:System.Net.Http.HttpClient.BaseAddress" />。</span><span class="sxs-lookup"><span data-stu-id="fa99b-427">The <paramref name="requestUri" /> must be an absolute URI or <see cref="P:System.Net.Http.HttpClient.BaseAddress" /> must be set.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="fa99b-428">由于基础问题（如网络连接性、DNS 失败、服务器证书验证或仅 .NET Framework 超时），请求失败。</span><span class="sxs-lookup"><span data-stu-id="fa99b-428">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation (or timeout for .NET Framework only).</span></span></exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException"><span data-ttu-id="fa99b-429">仅限 .NET Core 和 .NET 5.0 及更高版本：请求因超时而失败。</span><span class="sxs-lookup"><span data-stu-id="fa99b-429">.NET Core and .NET 5.0 and later only: The request failed due to timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetByteArrayAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;byte[]&gt; GetByteArrayAsync (string? requestUri, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;unsigned int8[]&gt; GetByteArrayAsync(string requestUri, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetByteArrayAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetByteArrayAsync (requestUri As String, cancellationToken As CancellationToken) As Task(Of Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;cli::array &lt;System::Byte&gt; ^&gt; ^ GetByteArrayAsync(System::String ^ requestUri, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.GetByteArrayAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;byte[]&gt;" Usage="httpClient.GetByteArrayAsync (requestUri, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Byte[]&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" Index="0" FrameworkAlternate="net-5.0" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="net-5.0" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="fa99b-430">请求发送到的 URI。</span><span class="sxs-lookup"><span data-stu-id="fa99b-430">The Uri the request is sent to.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="fa99b-431">用于取消操作的取消令牌。</span><span class="sxs-lookup"><span data-stu-id="fa99b-431">The cancellation token to cancel the operation.</span></span></param>
        <summary><span data-ttu-id="fa99b-432">将 GET 请求发送到指定 URI 并在异步操作中以字节数组的形式返回响应正文。</span><span class="sxs-lookup"><span data-stu-id="fa99b-432">Sends a GET request to the specified Uri and return the response body as a byte array in an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="fa99b-433">表示异步操作的任务对象。</span><span class="sxs-lookup"><span data-stu-id="fa99b-433">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa99b-434">此操作不会阻止。</span><span class="sxs-lookup"><span data-stu-id="fa99b-434">This operation will not block.</span></span> <span data-ttu-id="fa99b-435">在 <xref:System.Threading.Tasks.Task%601> 读取整个响应正文后，返回的对象将完成。</span><span class="sxs-lookup"><span data-stu-id="fa99b-435">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response body is read.</span></span>  

> [!NOTE]
> <span data-ttu-id="fa99b-436">如果超时，则：</span><span class="sxs-lookup"><span data-stu-id="fa99b-436">In case of a timeout:</span></span>
> - <span data-ttu-id="fa99b-437">.NET Framework 引发 <xref:System.Net.Http.HttpRequestException> 。</span><span class="sxs-lookup"><span data-stu-id="fa99b-437">.NET Framework throws a <xref:System.Net.Http.HttpRequestException>.</span></span>
> - <span data-ttu-id="fa99b-438">.NET Core 引发 <xref:System.Threading.Tasks.TaskCanceledException> 无任何内部异常的。</span><span class="sxs-lookup"><span data-stu-id="fa99b-438">.NET Core throws a <xref:System.Threading.Tasks.TaskCanceledException> without any inner exception.</span></span>
> - <span data-ttu-id="fa99b-439">.NET 5.0 和更高版本引发了 <xref:System.Threading.Tasks.TaskCanceledException> 嵌套的 <xref:System.TimeoutException> 。</span><span class="sxs-lookup"><span data-stu-id="fa99b-439">.NET 5.0 and later versions throw a <xref:System.Threading.Tasks.TaskCanceledException> that nests a <xref:System.TimeoutException>.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="fa99b-440">由于基础问题（如网络连接性、DNS 失败、服务器证书验证或仅 .NET Framework 超时），请求失败。</span><span class="sxs-lookup"><span data-stu-id="fa99b-440">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation (or timeout for .NET Framework only).</span></span></exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException"><span data-ttu-id="fa99b-441">仅限 .NET Core 和 .NET 5.0 及更高版本：请求因超时而失败。</span><span class="sxs-lookup"><span data-stu-id="fa99b-441">.NET Core and .NET 5.0 and later only: The request failed due to timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetByteArrayAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;byte[]&gt; GetByteArrayAsync (Uri? requestUri, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;unsigned int8[]&gt; GetByteArrayAsync(class System.Uri requestUri, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetByteArrayAsync(System.Uri,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetByteArrayAsync (requestUri As Uri, cancellationToken As CancellationToken) As Task(Of Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;cli::array &lt;System::Byte&gt; ^&gt; ^ GetByteArrayAsync(Uri ^ requestUri, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.GetByteArrayAsync : Uri * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;byte[]&gt;" Usage="httpClient.GetByteArrayAsync (requestUri, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Byte[]&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" Index="0" FrameworkAlternate="net-5.0" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="net-5.0" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="fa99b-442">请求发送到的 URI。</span><span class="sxs-lookup"><span data-stu-id="fa99b-442">The Uri the request is sent to.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="fa99b-443">用于取消操作的取消令牌。</span><span class="sxs-lookup"><span data-stu-id="fa99b-443">The cancellation token to cancel the operation.</span></span></param>
        <summary><span data-ttu-id="fa99b-444">将 GET 请求发送到指定 URI 并在异步操作中以字节数组的形式返回响应正文。</span><span class="sxs-lookup"><span data-stu-id="fa99b-444">Send a GET request to the specified Uri and return the response body as a byte array in an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="fa99b-445">表示异步操作的任务对象。</span><span class="sxs-lookup"><span data-stu-id="fa99b-445">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa99b-446">此操作不会阻止。</span><span class="sxs-lookup"><span data-stu-id="fa99b-446">This operation will not block.</span></span> <span data-ttu-id="fa99b-447">在 <xref:System.Threading.Tasks.Task%601> 读取整个响应正文后，返回的对象将完成。</span><span class="sxs-lookup"><span data-stu-id="fa99b-447">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response body is read.</span></span>  

> [!NOTE]
> <span data-ttu-id="fa99b-448">如果超时，则：</span><span class="sxs-lookup"><span data-stu-id="fa99b-448">In case of a timeout:</span></span>
> - <span data-ttu-id="fa99b-449">.NET Framework 引发 <xref:System.Net.Http.HttpRequestException> 。</span><span class="sxs-lookup"><span data-stu-id="fa99b-449">.NET Framework throws a <xref:System.Net.Http.HttpRequestException>.</span></span>
> - <span data-ttu-id="fa99b-450">.NET Core 引发 <xref:System.Threading.Tasks.TaskCanceledException> 无任何内部异常的。</span><span class="sxs-lookup"><span data-stu-id="fa99b-450">.NET Core throws a <xref:System.Threading.Tasks.TaskCanceledException> without any inner exception.</span></span>
> - <span data-ttu-id="fa99b-451">.NET 5.0 和更高版本引发了 <xref:System.Threading.Tasks.TaskCanceledException> 嵌套的 <xref:System.TimeoutException> 。</span><span class="sxs-lookup"><span data-stu-id="fa99b-451">.NET 5.0 and later versions throw a <xref:System.Threading.Tasks.TaskCanceledException> that nests a <xref:System.TimeoutException>.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="fa99b-452">由于基础问题（如网络连接性、DNS 失败、服务器证书验证或仅 .NET Framework 超时），请求失败。</span><span class="sxs-lookup"><span data-stu-id="fa99b-452">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation (or timeout for .NET Framework only).</span></span></exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException"><span data-ttu-id="fa99b-453">仅限 .NET Core 和 .NET 5.0 及更高版本：请求因超时而失败。</span><span class="sxs-lookup"><span data-stu-id="fa99b-453">.NET Core and .NET 5.0 and later only: The request failed due to timeout.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetStreamAsync">
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="fa99b-454">将 GET 请求发送到指定 URI 并在异步操作中以流的形式返回响应正文。</span><span class="sxs-lookup"><span data-stu-id="fa99b-454">Send a GET request to the specified Uri and return the response body as a stream in an asynchronous operation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa99b-455">操作不会阻止。</span><span class="sxs-lookup"><span data-stu-id="fa99b-455">The operation will not block.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetStreamAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetStreamAsync (string requestUri);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetStreamAsync(string requestUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetStreamAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetStreamAsync (requestUri As String) As Task(Of Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::IO::Stream ^&gt; ^ GetStreamAsync(System::String ^ requestUri);" />
      <MemberSignature Language="F#" Value="member this.GetStreamAsync : string -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="httpClient.GetStreamAsync requestUri" />
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetStreamAsync (string? requestUri);" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="fa99b-456">请求发送到的 URI。</span><span class="sxs-lookup"><span data-stu-id="fa99b-456">The Uri the request is sent to.</span></span></param>
        <summary><span data-ttu-id="fa99b-457">将 GET 请求发送到指定 URI 并在异步操作中以流的形式返回响应正文。</span><span class="sxs-lookup"><span data-stu-id="fa99b-457">Send a GET request to the specified Uri and return the response body as a stream in an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="fa99b-458">表示异步操作的任务对象。</span><span class="sxs-lookup"><span data-stu-id="fa99b-458">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa99b-459">此操作不会阻止。</span><span class="sxs-lookup"><span data-stu-id="fa99b-459">This operation will not block.</span></span> <span data-ttu-id="fa99b-460">在 <xref:System.Threading.Tasks.Task%601> 读取响应标头后，返回的对象将完成。</span><span class="sxs-lookup"><span data-stu-id="fa99b-460">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the response headers are read.</span></span> <span data-ttu-id="fa99b-461">此方法不读取或缓冲响应正文。</span><span class="sxs-lookup"><span data-stu-id="fa99b-461">This method does not read nor buffer the response body.</span></span>  

> [!NOTE]
> <span data-ttu-id="fa99b-462">如果超时，则：</span><span class="sxs-lookup"><span data-stu-id="fa99b-462">In case of a timeout:</span></span>
> - <span data-ttu-id="fa99b-463">.NET Framework 引发 <xref:System.Net.Http.HttpRequestException> 。</span><span class="sxs-lookup"><span data-stu-id="fa99b-463">.NET Framework throws a <xref:System.Net.Http.HttpRequestException>.</span></span>
> - <span data-ttu-id="fa99b-464">.NET Core 引发 <xref:System.Threading.Tasks.TaskCanceledException> 无任何内部异常的。</span><span class="sxs-lookup"><span data-stu-id="fa99b-464">.NET Core throws a <xref:System.Threading.Tasks.TaskCanceledException> without any inner exception.</span></span>
> - <span data-ttu-id="fa99b-465">.NET 5.0 和更高版本引发了 <xref:System.Threading.Tasks.TaskCanceledException> 嵌套的 <xref:System.TimeoutException> 。</span><span class="sxs-lookup"><span data-stu-id="fa99b-465">.NET 5.0 and later versions throw a <xref:System.Threading.Tasks.TaskCanceledException> that nests a <xref:System.TimeoutException>.</span></span>
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="fa99b-466"><paramref name="requestUri" /> 必须为绝对 URI 或必须设置 <see cref="P:System.Net.Http.HttpClient.BaseAddress" />。</span><span class="sxs-lookup"><span data-stu-id="fa99b-466">The <paramref name="requestUri" /> must be an absolute URI or <see cref="P:System.Net.Http.HttpClient.BaseAddress" /> must be set.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="fa99b-467">由于基础问题（如网络连接性、DNS 失败、服务器证书验证或仅 .NET Framework 超时），请求失败。</span><span class="sxs-lookup"><span data-stu-id="fa99b-467">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation (or timeout for .NET Framework only).</span></span></exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException"><span data-ttu-id="fa99b-468">仅限 .NET Core 和 .NET 5.0 及更高版本：请求因超时而失败。</span><span class="sxs-lookup"><span data-stu-id="fa99b-468">.NET Core and .NET 5.0 and later only: The request failed due to timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetStreamAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetStreamAsync (Uri requestUri);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetStreamAsync(class System.Uri requestUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetStreamAsync(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetStreamAsync (requestUri As Uri) As Task(Of Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::IO::Stream ^&gt; ^ GetStreamAsync(Uri ^ requestUri);" />
      <MemberSignature Language="F#" Value="member this.GetStreamAsync : Uri -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="httpClient.GetStreamAsync requestUri" />
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetStreamAsync (Uri? requestUri);" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="fa99b-469">请求发送到的 URI。</span><span class="sxs-lookup"><span data-stu-id="fa99b-469">The Uri the request is sent to.</span></span></param>
        <summary><span data-ttu-id="fa99b-470">将 GET 请求发送到指定 URI 并在异步操作中以流的形式返回响应正文。</span><span class="sxs-lookup"><span data-stu-id="fa99b-470">Send a GET request to the specified Uri and return the response body as a stream in an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="fa99b-471">表示异步操作的任务对象。</span><span class="sxs-lookup"><span data-stu-id="fa99b-471">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa99b-472">此操作不会阻止。</span><span class="sxs-lookup"><span data-stu-id="fa99b-472">This operation will not block.</span></span> <span data-ttu-id="fa99b-473">在 <xref:System.Threading.Tasks.Task%601> 读取响应标头后，返回的对象将完成。</span><span class="sxs-lookup"><span data-stu-id="fa99b-473">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the response headers are read.</span></span> <span data-ttu-id="fa99b-474">此方法不读取或缓冲响应正文。</span><span class="sxs-lookup"><span data-stu-id="fa99b-474">This method does not read nor buffer the response body.</span></span>  

> [!NOTE]
> <span data-ttu-id="fa99b-475">如果超时，则：</span><span class="sxs-lookup"><span data-stu-id="fa99b-475">In case of a timeout:</span></span>
> - <span data-ttu-id="fa99b-476">.NET Framework 引发 <xref:System.Net.Http.HttpRequestException> 。</span><span class="sxs-lookup"><span data-stu-id="fa99b-476">.NET Framework throws a <xref:System.Net.Http.HttpRequestException>.</span></span>
> - <span data-ttu-id="fa99b-477">.NET Core 引发 <xref:System.Threading.Tasks.TaskCanceledException> 无任何内部异常的。</span><span class="sxs-lookup"><span data-stu-id="fa99b-477">.NET Core throws a <xref:System.Threading.Tasks.TaskCanceledException> without any inner exception.</span></span>
> - <span data-ttu-id="fa99b-478">.NET 5.0 和更高版本引发了 <xref:System.Threading.Tasks.TaskCanceledException> 嵌套的 <xref:System.TimeoutException> 。</span><span class="sxs-lookup"><span data-stu-id="fa99b-478">.NET 5.0 and later versions throw a <xref:System.Threading.Tasks.TaskCanceledException> that nests a <xref:System.TimeoutException>.</span></span>
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="fa99b-479"><paramref name="requestUri" /> 必须为绝对 URI 或必须设置 <see cref="P:System.Net.Http.HttpClient.BaseAddress" />。</span><span class="sxs-lookup"><span data-stu-id="fa99b-479">The <paramref name="requestUri" /> must be an absolute URI or <see cref="P:System.Net.Http.HttpClient.BaseAddress" /> must be set.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="fa99b-480">由于基础问题（如网络连接性、DNS 失败、服务器证书验证或仅 .NET Framework 超时），请求失败。</span><span class="sxs-lookup"><span data-stu-id="fa99b-480">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation (or timeout for .NET Framework only).</span></span></exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException"><span data-ttu-id="fa99b-481">仅限 .NET Core 和 .NET 5.0 及更高版本：请求因超时而失败。</span><span class="sxs-lookup"><span data-stu-id="fa99b-481">.NET Core and .NET 5.0 and later only: The request failed due to timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetStreamAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetStreamAsync (string? requestUri, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetStreamAsync(string requestUri, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetStreamAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetStreamAsync (requestUri As String, cancellationToken As CancellationToken) As Task(Of Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::IO::Stream ^&gt; ^ GetStreamAsync(System::String ^ requestUri, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.GetStreamAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="httpClient.GetStreamAsync (requestUri, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" Index="0" FrameworkAlternate="net-5.0" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="net-5.0" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="fa99b-482">请求发送到的 URI。</span><span class="sxs-lookup"><span data-stu-id="fa99b-482">The Uri the request is sent to.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="fa99b-483">用于取消操作的取消令牌。</span><span class="sxs-lookup"><span data-stu-id="fa99b-483">The cancellation token to cancel the operation.</span></span></param>
        <summary><span data-ttu-id="fa99b-484">将 GET 请求发送到指定 URI 并在异步操作中以流的形式返回响应正文。</span><span class="sxs-lookup"><span data-stu-id="fa99b-484">Send a GET request to the specified Uri and return the response body as a stream in an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="fa99b-485">表示异步操作的任务对象。</span><span class="sxs-lookup"><span data-stu-id="fa99b-485">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[
  
## Remarks  
 <span data-ttu-id="fa99b-486">此操作不会阻止。</span><span class="sxs-lookup"><span data-stu-id="fa99b-486">This operation will not block.</span></span> <span data-ttu-id="fa99b-487">在 <xref:System.Threading.Tasks.Task%601> 读取响应标头后，返回的对象将完成。</span><span class="sxs-lookup"><span data-stu-id="fa99b-487">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the response headers are read.</span></span> <span data-ttu-id="fa99b-488">此方法不读取或缓冲响应正文。</span><span class="sxs-lookup"><span data-stu-id="fa99b-488">This method does not read nor buffer the response body.</span></span>  

> [!NOTE]
> <span data-ttu-id="fa99b-489">如果超时，则：</span><span class="sxs-lookup"><span data-stu-id="fa99b-489">In case of a timeout:</span></span>
> - <span data-ttu-id="fa99b-490">.NET Framework 引发 <xref:System.Net.Http.HttpRequestException> 。</span><span class="sxs-lookup"><span data-stu-id="fa99b-490">.NET Framework throws a <xref:System.Net.Http.HttpRequestException>.</span></span>
> - <span data-ttu-id="fa99b-491">.NET Core 引发 <xref:System.Threading.Tasks.TaskCanceledException> 无任何内部异常的。</span><span class="sxs-lookup"><span data-stu-id="fa99b-491">.NET Core throws a <xref:System.Threading.Tasks.TaskCanceledException> without any inner exception.</span></span>
> - <span data-ttu-id="fa99b-492">.NET 5.0 和更高版本引发了 <xref:System.Threading.Tasks.TaskCanceledException> 嵌套的 <xref:System.TimeoutException> 。</span><span class="sxs-lookup"><span data-stu-id="fa99b-492">.NET 5.0 and later versions throw a <xref:System.Threading.Tasks.TaskCanceledException> that nests a <xref:System.TimeoutException>.</span></span>
 ]]></format>
        </remarks>
      </Docs>
      <exception cref="T:System.ArgumentNullException">The <paramref name="requestUri" /> is <see langword="null" />.</exception>
      <exception cref="T:System.Net.Http.HttpRequestException">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation (or timeout for .NET Framework only).</exception>
      <exception cref="T:System.Threading.Tasks.TaskCanceledException">.NET Core and .NET 5.0 and later only: The request failed due to timeout.</exception>
    </Member>
    <Member MemberName="GetStreamAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetStreamAsync (Uri? requestUri, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetStreamAsync(class System.Uri requestUri, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetStreamAsync(System.Uri,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetStreamAsync (requestUri As Uri, cancellationToken As CancellationToken) As Task(Of Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::IO::Stream ^&gt; ^ GetStreamAsync(Uri ^ requestUri, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.GetStreamAsync : Uri * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="httpClient.GetStreamAsync (requestUri, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" Index="0" FrameworkAlternate="net-5.0" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="net-5.0" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="fa99b-493">请求发送到的 URI。</span><span class="sxs-lookup"><span data-stu-id="fa99b-493">The Uri the request is sent to.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="fa99b-494">用于取消操作的取消令牌。</span><span class="sxs-lookup"><span data-stu-id="fa99b-494">The cancellation token to cancel the operation.</span></span></param>
        <summary><span data-ttu-id="fa99b-495">将 GET 请求发送到指定 URI 并在异步操作中以流的形式返回响应正文。</span><span class="sxs-lookup"><span data-stu-id="fa99b-495">Send a GET request to the specified Uri and return the response body as a stream in an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="fa99b-496">表示异步操作的任务对象。</span><span class="sxs-lookup"><span data-stu-id="fa99b-496">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa99b-497">此操作不会阻止。</span><span class="sxs-lookup"><span data-stu-id="fa99b-497">This operation will not block.</span></span> <span data-ttu-id="fa99b-498">在 <xref:System.Threading.Tasks.Task%601> 读取响应标头后，返回的对象将完成。</span><span class="sxs-lookup"><span data-stu-id="fa99b-498">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the response headers are read.</span></span> <span data-ttu-id="fa99b-499">此方法不读取或缓冲响应正文。</span><span class="sxs-lookup"><span data-stu-id="fa99b-499">This method does not read nor buffer the response body.</span></span>  

> [!NOTE]
> <span data-ttu-id="fa99b-500">如果超时，则：</span><span class="sxs-lookup"><span data-stu-id="fa99b-500">In case of a timeout:</span></span>
> - <span data-ttu-id="fa99b-501">.NET Framework 引发 <xref:System.Net.Http.HttpRequestException> 。</span><span class="sxs-lookup"><span data-stu-id="fa99b-501">.NET Framework throws a <xref:System.Net.Http.HttpRequestException>.</span></span>
> - <span data-ttu-id="fa99b-502">.NET Core 引发 <xref:System.Threading.Tasks.TaskCanceledException> 无任何内部异常的。</span><span class="sxs-lookup"><span data-stu-id="fa99b-502">.NET Core throws a <xref:System.Threading.Tasks.TaskCanceledException> without any inner exception.</span></span>
> - <span data-ttu-id="fa99b-503">.NET 5.0 和更高版本引发了 <xref:System.Threading.Tasks.TaskCanceledException> 嵌套的 <xref:System.TimeoutException> 。</span><span class="sxs-lookup"><span data-stu-id="fa99b-503">.NET 5.0 and later versions throw a <xref:System.Threading.Tasks.TaskCanceledException> that nests a <xref:System.TimeoutException>.</span></span>
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="fa99b-504"><paramref name="requestUri" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="fa99b-504">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="fa99b-505">由于基础问题（如网络连接性、DNS 失败、服务器证书验证或仅 .NET Framework 超时），请求失败。</span><span class="sxs-lookup"><span data-stu-id="fa99b-505">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation (or timeout for .NET Framework only).</span></span></exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException"><span data-ttu-id="fa99b-506">仅限 .NET Core 和 .NET 5.0 及更高版本：请求因超时而失败。</span><span class="sxs-lookup"><span data-stu-id="fa99b-506">.NET Core and .NET 5.0 and later only: The request failed due to timeout.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetStringAsync">
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="fa99b-507">将 GET 请求发送到指定 URI 并在异步操作中以字符串的形式返回响应正文。</span><span class="sxs-lookup"><span data-stu-id="fa99b-507">Send a GET request to the specified Uri and return the response body as a string in an asynchronous operation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa99b-508">此操作不会阻止。</span><span class="sxs-lookup"><span data-stu-id="fa99b-508">This operation will not block.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetStringAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;string&gt; GetStringAsync (string requestUri);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;string&gt; GetStringAsync(string requestUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetStringAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetStringAsync (requestUri As String) As Task(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::String ^&gt; ^ GetStringAsync(System::String ^ requestUri);" />
      <MemberSignature Language="F#" Value="member this.GetStringAsync : string -&gt; System.Threading.Tasks.Task&lt;string&gt;" Usage="httpClient.GetStringAsync requestUri" />
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;string&gt; GetStringAsync (string? requestUri);" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="fa99b-509">请求发送到的 URI。</span><span class="sxs-lookup"><span data-stu-id="fa99b-509">The Uri the request is sent to.</span></span></param>
        <summary><span data-ttu-id="fa99b-510">将 GET 请求发送到指定 URI 并在异步操作中以字符串的形式返回响应正文。</span><span class="sxs-lookup"><span data-stu-id="fa99b-510">Send a GET request to the specified Uri and return the response body as a string in an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="fa99b-511">表示异步操作的任务对象。</span><span class="sxs-lookup"><span data-stu-id="fa99b-511">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa99b-512">此操作不会阻止。</span><span class="sxs-lookup"><span data-stu-id="fa99b-512">This operation will not block.</span></span> <span data-ttu-id="fa99b-513">在 <xref:System.Threading.Tasks.Task%601> 读取整个响应正文后，返回的对象将完成。</span><span class="sxs-lookup"><span data-stu-id="fa99b-513">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response body is read.</span></span>  

> [!NOTE]
> <span data-ttu-id="fa99b-514">如果超时，则：</span><span class="sxs-lookup"><span data-stu-id="fa99b-514">In case of a timeout:</span></span>
> - <span data-ttu-id="fa99b-515">.NET Framework 引发 <xref:System.Net.Http.HttpRequestException> 。</span><span class="sxs-lookup"><span data-stu-id="fa99b-515">.NET Framework throws a <xref:System.Net.Http.HttpRequestException>.</span></span>
> - <span data-ttu-id="fa99b-516">.NET Core 引发 <xref:System.Threading.Tasks.TaskCanceledException> 无任何内部异常的。</span><span class="sxs-lookup"><span data-stu-id="fa99b-516">.NET Core throws a <xref:System.Threading.Tasks.TaskCanceledException> without any inner exception.</span></span>
> - <span data-ttu-id="fa99b-517">.NET 5.0 和更高版本引发了 <xref:System.Threading.Tasks.TaskCanceledException> 嵌套的 <xref:System.TimeoutException> 。</span><span class="sxs-lookup"><span data-stu-id="fa99b-517">.NET 5.0 and later versions throw a <xref:System.Threading.Tasks.TaskCanceledException> that nests a <xref:System.TimeoutException>.</span></span>
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="fa99b-518"><paramref name="requestUri" /> 必须为绝对 URI 或必须设置 <see cref="P:System.Net.Http.HttpClient.BaseAddress" />。</span><span class="sxs-lookup"><span data-stu-id="fa99b-518">The <paramref name="requestUri" /> must be an absolute URI or <see cref="P:System.Net.Http.HttpClient.BaseAddress" /> must be set.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="fa99b-519">由于基础问题（如网络连接性、DNS 失败、服务器证书验证或仅 .NET Framework 超时），请求失败。</span><span class="sxs-lookup"><span data-stu-id="fa99b-519">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation (or timeout for .NET Framework only).</span></span></exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException"><span data-ttu-id="fa99b-520">仅限 .NET Core 和 .NET 5.0 及更高版本：请求因超时而失败。</span><span class="sxs-lookup"><span data-stu-id="fa99b-520">.NET Core and .NET 5.0 and later only: The request failed due to timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetStringAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;string&gt; GetStringAsync (Uri requestUri);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;string&gt; GetStringAsync(class System.Uri requestUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetStringAsync(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetStringAsync (requestUri As Uri) As Task(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::String ^&gt; ^ GetStringAsync(Uri ^ requestUri);" />
      <MemberSignature Language="F#" Value="member this.GetStringAsync : Uri -&gt; System.Threading.Tasks.Task&lt;string&gt;" Usage="httpClient.GetStringAsync requestUri" />
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;string&gt; GetStringAsync (Uri? requestUri);" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="fa99b-521">请求发送到的 URI。</span><span class="sxs-lookup"><span data-stu-id="fa99b-521">The Uri the request is sent to.</span></span></param>
        <summary><span data-ttu-id="fa99b-522">将 GET 请求发送到指定 URI 并在异步操作中以字符串的形式返回响应正文。</span><span class="sxs-lookup"><span data-stu-id="fa99b-522">Send a GET request to the specified Uri and return the response body as a string in an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="fa99b-523">表示异步操作的任务对象。</span><span class="sxs-lookup"><span data-stu-id="fa99b-523">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa99b-524">此操作不会阻止。</span><span class="sxs-lookup"><span data-stu-id="fa99b-524">This operation will not block.</span></span> <span data-ttu-id="fa99b-525">在 <xref:System.Threading.Tasks.Task%601> 读取整个响应正文后，返回的对象将完成。</span><span class="sxs-lookup"><span data-stu-id="fa99b-525">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response body is read.</span></span>  

> [!NOTE]
> <span data-ttu-id="fa99b-526">如果超时，则：</span><span class="sxs-lookup"><span data-stu-id="fa99b-526">In case of a timeout:</span></span>
> - <span data-ttu-id="fa99b-527">.NET Framework 引发 <xref:System.Net.Http.HttpRequestException> 。</span><span class="sxs-lookup"><span data-stu-id="fa99b-527">.NET Framework throws a <xref:System.Net.Http.HttpRequestException>.</span></span>
> - <span data-ttu-id="fa99b-528">.NET Core 引发 <xref:System.Threading.Tasks.TaskCanceledException> 无任何内部异常的。</span><span class="sxs-lookup"><span data-stu-id="fa99b-528">.NET Core throws a <xref:System.Threading.Tasks.TaskCanceledException> without any inner exception.</span></span>
> - <span data-ttu-id="fa99b-529">.NET 5.0 和更高版本引发了 <xref:System.Threading.Tasks.TaskCanceledException> 嵌套的 <xref:System.TimeoutException> 。</span><span class="sxs-lookup"><span data-stu-id="fa99b-529">.NET 5.0 and later versions throw a <xref:System.Threading.Tasks.TaskCanceledException> that nests a <xref:System.TimeoutException>.</span></span>
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="fa99b-530"><paramref name="requestUri" /> 必须为绝对 URI 或必须设置 <see cref="P:System.Net.Http.HttpClient.BaseAddress" />。</span><span class="sxs-lookup"><span data-stu-id="fa99b-530">The <paramref name="requestUri" /> must be an absolute URI or <see cref="P:System.Net.Http.HttpClient.BaseAddress" /> must be set.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="fa99b-531">由于基础问题（如网络连接性、DNS 失败、服务器证书验证或仅 .NET Framework 超时），请求失败。</span><span class="sxs-lookup"><span data-stu-id="fa99b-531">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation (or timeout for .NET Framework only).</span></span></exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException"><span data-ttu-id="fa99b-532">仅限 .NET Core 和 .NET 5.0 及更高版本：请求因超时而失败。</span><span class="sxs-lookup"><span data-stu-id="fa99b-532">.NET Core and .NET 5.0 and later only: The request failed due to timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetStringAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;string&gt; GetStringAsync (string? requestUri, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;string&gt; GetStringAsync(string requestUri, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetStringAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetStringAsync (requestUri As String, cancellationToken As CancellationToken) As Task(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::String ^&gt; ^ GetStringAsync(System::String ^ requestUri, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.GetStringAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;string&gt;" Usage="httpClient.GetStringAsync (requestUri, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" Index="0" FrameworkAlternate="net-5.0" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="net-5.0" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="fa99b-533">请求发送到的 URI。</span><span class="sxs-lookup"><span data-stu-id="fa99b-533">The Uri the request is sent to.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="fa99b-534">用于取消操作的取消令牌。</span><span class="sxs-lookup"><span data-stu-id="fa99b-534">The cancellation token to cancel the operation.</span></span></param>
        <summary><span data-ttu-id="fa99b-535">将 GET 请求发送到指定 URI 并在异步操作中以字符串的形式返回响应正文。</span><span class="sxs-lookup"><span data-stu-id="fa99b-535">Send a GET request to the specified Uri and return the response body as a string in an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="fa99b-536">表示异步操作的任务对象。</span><span class="sxs-lookup"><span data-stu-id="fa99b-536">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa99b-537">此操作不会阻止。</span><span class="sxs-lookup"><span data-stu-id="fa99b-537">This operation will not block.</span></span> <span data-ttu-id="fa99b-538">在 <xref:System.Threading.Tasks.Task%601> 读取整个响应正文后，返回的对象将完成。</span><span class="sxs-lookup"><span data-stu-id="fa99b-538">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response body is read.</span></span>  

> [!NOTE]
> <span data-ttu-id="fa99b-539">如果超时，则：</span><span class="sxs-lookup"><span data-stu-id="fa99b-539">In case of a timeout:</span></span>
> - <span data-ttu-id="fa99b-540">.NET Framework 引发 <xref:System.Net.Http.HttpRequestException> 。</span><span class="sxs-lookup"><span data-stu-id="fa99b-540">.NET Framework throws a <xref:System.Net.Http.HttpRequestException>.</span></span>
> - <span data-ttu-id="fa99b-541">.NET Core 引发 <xref:System.Threading.Tasks.TaskCanceledException> 无任何内部异常的。</span><span class="sxs-lookup"><span data-stu-id="fa99b-541">.NET Core throws a <xref:System.Threading.Tasks.TaskCanceledException> without any inner exception.</span></span>
> - <span data-ttu-id="fa99b-542">.NET 5.0 和更高版本引发了 <xref:System.Threading.Tasks.TaskCanceledException> 嵌套的 <xref:System.TimeoutException> 。</span><span class="sxs-lookup"><span data-stu-id="fa99b-542">.NET 5.0 and later versions throw a <xref:System.Threading.Tasks.TaskCanceledException> that nests a <xref:System.TimeoutException>.</span></span>
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="fa99b-543"><paramref name="requestUri" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="fa99b-543">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="fa99b-544">由于基础问题（如网络连接性、DNS 失败、服务器证书验证或仅 .NET Framework 超时），请求失败。</span><span class="sxs-lookup"><span data-stu-id="fa99b-544">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation (or timeout for .NET Framework only).</span></span></exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException"><span data-ttu-id="fa99b-545">仅限 .NET Core 和 .NET 5.0 及更高版本：请求因超时而失败。</span><span class="sxs-lookup"><span data-stu-id="fa99b-545">.NET Core and .NET 5.0 and later only: The request failed due to timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetStringAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;string&gt; GetStringAsync (Uri? requestUri, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;string&gt; GetStringAsync(class System.Uri requestUri, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.GetStringAsync(System.Uri,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetStringAsync (requestUri As Uri, cancellationToken As CancellationToken) As Task(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::String ^&gt; ^ GetStringAsync(Uri ^ requestUri, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.GetStringAsync : Uri * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;string&gt;" Usage="httpClient.GetStringAsync (requestUri, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" Index="0" FrameworkAlternate="net-5.0" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="net-5.0" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="fa99b-546">请求发送到的 URI。</span><span class="sxs-lookup"><span data-stu-id="fa99b-546">The Uri the request is sent to.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="fa99b-547">用于取消操作的取消令牌。</span><span class="sxs-lookup"><span data-stu-id="fa99b-547">The cancellation token to cancel the operation.</span></span></param>
        <summary><span data-ttu-id="fa99b-548">将 GET 请求发送到指定 URI 并在异步操作中以字符串的形式返回响应正文。</span><span class="sxs-lookup"><span data-stu-id="fa99b-548">Send a GET request to the specified Uri and return the response body as a string in an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="fa99b-549">表示异步操作的任务对象。</span><span class="sxs-lookup"><span data-stu-id="fa99b-549">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa99b-550">此操作不会阻止。</span><span class="sxs-lookup"><span data-stu-id="fa99b-550">This operation will not block.</span></span> <span data-ttu-id="fa99b-551">在 <xref:System.Threading.Tasks.Task%601> 读取整个响应正文后，返回的对象将完成。</span><span class="sxs-lookup"><span data-stu-id="fa99b-551">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response body is read.</span></span>  

> [!NOTE]
> <span data-ttu-id="fa99b-552">如果超时，则：</span><span class="sxs-lookup"><span data-stu-id="fa99b-552">In case of a timeout:</span></span>
> - <span data-ttu-id="fa99b-553">.NET Framework 引发 <xref:System.Net.Http.HttpRequestException> 。</span><span class="sxs-lookup"><span data-stu-id="fa99b-553">.NET Framework throws a <xref:System.Net.Http.HttpRequestException>.</span></span>
> - <span data-ttu-id="fa99b-554">.NET Core 引发 <xref:System.Threading.Tasks.TaskCanceledException> 无任何内部异常的。</span><span class="sxs-lookup"><span data-stu-id="fa99b-554">.NET Core throws a <xref:System.Threading.Tasks.TaskCanceledException> without any inner exception.</span></span>
> - <span data-ttu-id="fa99b-555">.NET 5.0 和更高版本引发了 <xref:System.Threading.Tasks.TaskCanceledException> 嵌套的 <xref:System.TimeoutException> 。</span><span class="sxs-lookup"><span data-stu-id="fa99b-555">.NET 5.0 and later versions throw a <xref:System.Threading.Tasks.TaskCanceledException> that nests a <xref:System.TimeoutException>.</span></span>
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="fa99b-556"><paramref name="requestUri" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="fa99b-556">The <paramref name="requestUri" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="fa99b-557">由于基础问题（如网络连接性、DNS 失败、服务器证书验证或仅 .NET Framework 超时），请求失败。</span><span class="sxs-lookup"><span data-stu-id="fa99b-557">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation (or timeout for .NET Framework only).</span></span></exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException"><span data-ttu-id="fa99b-558">仅限 .NET Core 和 .NET 5.0 及更高版本：请求因超时而失败。</span><span class="sxs-lookup"><span data-stu-id="fa99b-558">.NET Core and .NET 5.0 and later only: The request failed due to timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="MaxResponseContentBufferSize">
      <MemberSignature Language="C#" Value="public long MaxResponseContentBufferSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 MaxResponseContentBufferSize" />
      <MemberSignature Language="DocId" Value="P:System.Net.Http.HttpClient.MaxResponseContentBufferSize" />
      <MemberSignature Language="VB.NET" Value="Public Property MaxResponseContentBufferSize As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long MaxResponseContentBufferSize { long get(); void set(long value); };" />
      <MemberSignature Language="F#" Value="member this.MaxResponseContentBufferSize : int64 with get, set" Usage="System.Net.Http.HttpClient.MaxResponseContentBufferSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="fa99b-559">获取或设置读取响应内容时要缓冲的最大字节数。</span><span class="sxs-lookup"><span data-stu-id="fa99b-559">Gets or sets the maximum number of bytes to buffer when reading the response content.</span></span></summary>
        <value><span data-ttu-id="fa99b-560">当读取响应内容时缓冲区的最大字节数。</span><span class="sxs-lookup"><span data-stu-id="fa99b-560">The maximum number of bytes to buffer when reading the response content.</span></span> <span data-ttu-id="fa99b-561">此属性的默认值为 2 GB。</span><span class="sxs-lookup"><span data-stu-id="fa99b-561">The default value for this property is 2 gigabytes.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa99b-562">应用可以将属性设置 <xref:System.Net.Http.HttpClient.MaxResponseContentBufferSize%2A> 为较小的值，以限制读取响应时缓冲区的响应大小。</span><span class="sxs-lookup"><span data-stu-id="fa99b-562">An app can set the <xref:System.Net.Http.HttpClient.MaxResponseContentBufferSize%2A> property to a lower value to limit the size of the response to buffer when reading the response.</span></span> <span data-ttu-id="fa99b-563">如果响应内容的大小大于  <xref:System.Net.Http.HttpClient.MaxResponseContentBufferSize%2A> 属性，则会引发异常。</span><span class="sxs-lookup"><span data-stu-id="fa99b-563">If the size of the response content is greater than the  <xref:System.Net.Http.HttpClient.MaxResponseContentBufferSize%2A> property, an exception is thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="fa99b-564">指定大小小于或等于零。</span><span class="sxs-lookup"><span data-stu-id="fa99b-564">The size specified is less than or equal to zero.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="fa99b-565">已在当前实例上启动了一个操作。</span><span class="sxs-lookup"><span data-stu-id="fa99b-565">An operation has already been started on the current instance.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="fa99b-566">已释放当前实例。</span><span class="sxs-lookup"><span data-stu-id="fa99b-566">The current instance has been disposed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="PatchAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PatchAsync (string? requestUri, System.Net.Http.HttpContent content);" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PatchAsync(string requestUri, class System.Net.Http.HttpContent content) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.PatchAsync(System.String,System.Net.Http.HttpContent)" />
      <MemberSignature Language="VB.NET" Value="Public Function PatchAsync (requestUri As String, content As HttpContent) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ PatchAsync(System::String ^ requestUri, System::Net::Http::HttpContent ^ content);" />
      <MemberSignature Language="F#" Value="member this.PatchAsync : string * System.Net.Http.HttpContent -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.PatchAsync (requestUri, content)" />
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PatchAsync (string requestUri, System.Net.Http.HttpContent content);" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="content" Type="System.Net.Http.HttpContent" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="fa99b-567">请求发送到的 URI。</span><span class="sxs-lookup"><span data-stu-id="fa99b-567">The Uri the request is sent to.</span></span></param>
        <param name="content"><span data-ttu-id="fa99b-568">发送到服务器的 HTTP 请求内容。</span><span class="sxs-lookup"><span data-stu-id="fa99b-568">The HTTP request content sent to the server.</span></span></param>
        <summary><span data-ttu-id="fa99b-569">以异步操作方式将 PATCH 请求发送到指定为字符串的 URI。</span><span class="sxs-lookup"><span data-stu-id="fa99b-569">Sends a PATCH request to a Uri designated as a string as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="fa99b-570">表示异步操作的任务对象。</span><span class="sxs-lookup"><span data-stu-id="fa99b-570">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa99b-571">此操作不会阻止。</span><span class="sxs-lookup"><span data-stu-id="fa99b-571">This operation will not block.</span></span> <span data-ttu-id="fa99b-572">返回 <xref:System.Threading.Tasks.Task%601> 的对象将在整个响应 (包括内容) 读取后完成。</span><span class="sxs-lookup"><span data-stu-id="fa99b-572">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PatchAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PatchAsync (Uri? requestUri, System.Net.Http.HttpContent content);" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PatchAsync(class System.Uri requestUri, class System.Net.Http.HttpContent content) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.PatchAsync(System.Uri,System.Net.Http.HttpContent)" />
      <MemberSignature Language="VB.NET" Value="Public Function PatchAsync (requestUri As Uri, content As HttpContent) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ PatchAsync(Uri ^ requestUri, System::Net::Http::HttpContent ^ content);" />
      <MemberSignature Language="F#" Value="member this.PatchAsync : Uri * System.Net.Http.HttpContent -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.PatchAsync (requestUri, content)" />
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PatchAsync (Uri requestUri, System.Net.Http.HttpContent content);" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="content" Type="System.Net.Http.HttpContent" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="fa99b-573">请求发送到的 URI。</span><span class="sxs-lookup"><span data-stu-id="fa99b-573">The Uri the request is sent to.</span></span></param>
        <param name="content"><span data-ttu-id="fa99b-574">发送到服务器的 HTTP 请求内容。</span><span class="sxs-lookup"><span data-stu-id="fa99b-574">The HTTP request content sent to the server.</span></span></param>
        <summary><span data-ttu-id="fa99b-575">以异步操作方式发送 PATCH 请求。</span><span class="sxs-lookup"><span data-stu-id="fa99b-575">Sends a PATCH request as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="fa99b-576">表示异步操作的任务对象。</span><span class="sxs-lookup"><span data-stu-id="fa99b-576">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa99b-577">此操作不会阻止。</span><span class="sxs-lookup"><span data-stu-id="fa99b-577">This operation will not block.</span></span> <span data-ttu-id="fa99b-578">返回 <xref:System.Threading.Tasks.Task%601> 的对象将在整个响应 (包括内容) 读取后完成。</span><span class="sxs-lookup"><span data-stu-id="fa99b-578">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PatchAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PatchAsync (string? requestUri, System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken);" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PatchAsync(string requestUri, class System.Net.Http.HttpContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.PatchAsync(System.String,System.Net.Http.HttpContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function PatchAsync (requestUri As String, content As HttpContent, cancellationToken As CancellationToken) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ PatchAsync(System::String ^ requestUri, System::Net::Http::HttpContent ^ content, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.PatchAsync : string * System.Net.Http.HttpContent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.PatchAsync (requestUri, content, cancellationToken)" />
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PatchAsync (string requestUri, System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken);" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="content" Type="System.Net.Http.HttpContent" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="fa99b-579">请求发送到的 URI。</span><span class="sxs-lookup"><span data-stu-id="fa99b-579">The Uri the request is sent to.</span></span></param>
        <param name="content"><span data-ttu-id="fa99b-580">发送到服务器的 HTTP 请求内容。</span><span class="sxs-lookup"><span data-stu-id="fa99b-580">The HTTP request content sent to the server.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="fa99b-581">可由其他对象或线程用以接收取消通知的取消标记。</span><span class="sxs-lookup"><span data-stu-id="fa99b-581">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</span></span></param>
        <summary><span data-ttu-id="fa99b-582">以异步操作方式将带有取消令牌的 PATCH 请求发送到表示为字符串的 URI。</span><span class="sxs-lookup"><span data-stu-id="fa99b-582">Sends a PATCH request with a cancellation token to a Uri represented as a string as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="fa99b-583">表示异步操作的任务对象。</span><span class="sxs-lookup"><span data-stu-id="fa99b-583">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa99b-584">此操作不会阻止。</span><span class="sxs-lookup"><span data-stu-id="fa99b-584">This operation will not block.</span></span> <span data-ttu-id="fa99b-585">返回 <xref:System.Threading.Tasks.Task%601> 的对象将在整个响应 (包括内容) 读取后完成。</span><span class="sxs-lookup"><span data-stu-id="fa99b-585">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PatchAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PatchAsync (Uri? requestUri, System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken);" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PatchAsync(class System.Uri requestUri, class System.Net.Http.HttpContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.PatchAsync(System.Uri,System.Net.Http.HttpContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function PatchAsync (requestUri As Uri, content As HttpContent, cancellationToken As CancellationToken) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ PatchAsync(Uri ^ requestUri, System::Net::Http::HttpContent ^ content, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.PatchAsync : Uri * System.Net.Http.HttpContent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.PatchAsync (requestUri, content, cancellationToken)" />
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PatchAsync (Uri requestUri, System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken);" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="content" Type="System.Net.Http.HttpContent" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="fa99b-586">请求发送到的 URI。</span><span class="sxs-lookup"><span data-stu-id="fa99b-586">The Uri the request is sent to.</span></span></param>
        <param name="content"><span data-ttu-id="fa99b-587">发送到服务器的 HTTP 请求内容。</span><span class="sxs-lookup"><span data-stu-id="fa99b-587">The HTTP request content sent to the server.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="fa99b-588">可由其他对象或线程用以接收取消通知的取消标记。</span><span class="sxs-lookup"><span data-stu-id="fa99b-588">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</span></span></param>
        <summary><span data-ttu-id="fa99b-589">以异步操作方式发送带有取消令牌的 PATCH 请求。</span><span class="sxs-lookup"><span data-stu-id="fa99b-589">Sends a PATCH request with a cancellation token as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="fa99b-590">表示异步操作的任务对象。</span><span class="sxs-lookup"><span data-stu-id="fa99b-590">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa99b-591">此操作不会阻止。</span><span class="sxs-lookup"><span data-stu-id="fa99b-591">This operation will not block.</span></span> <span data-ttu-id="fa99b-592">返回 <xref:System.Threading.Tasks.Task%601> 的对象将在整个响应 (包括内容) 读取后完成。</span><span class="sxs-lookup"><span data-stu-id="fa99b-592">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="PostAsync">
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="fa99b-593">以异步操作将 POST 请求发送给指定 URI。</span><span class="sxs-lookup"><span data-stu-id="fa99b-593">Send a POST request to the specified Uri as an asynchronous operation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa99b-594">此操作不会阻止。</span><span class="sxs-lookup"><span data-stu-id="fa99b-594">This operation will not block.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="PostAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PostAsync (string requestUri, System.Net.Http.HttpContent content);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PostAsync(string requestUri, class System.Net.Http.HttpContent content) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.PostAsync(System.String,System.Net.Http.HttpContent)" />
      <MemberSignature Language="VB.NET" Value="Public Function PostAsync (requestUri As String, content As HttpContent) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ PostAsync(System::String ^ requestUri, System::Net::Http::HttpContent ^ content);" />
      <MemberSignature Language="F#" Value="member this.PostAsync : string * System.Net.Http.HttpContent -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.PostAsync (requestUri, content)" />
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PostAsync (string? requestUri, System.Net.Http.HttpContent content);" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" />
        <Parameter Name="content" Type="System.Net.Http.HttpContent" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="fa99b-595">请求发送到的 URI。</span><span class="sxs-lookup"><span data-stu-id="fa99b-595">The Uri the request is sent to.</span></span></param>
        <param name="content"><span data-ttu-id="fa99b-596">发送到服务器的 HTTP 请求内容。</span><span class="sxs-lookup"><span data-stu-id="fa99b-596">The HTTP request content sent to the server.</span></span></param>
        <summary><span data-ttu-id="fa99b-597">以异步操作将 POST 请求发送给指定 URI。</span><span class="sxs-lookup"><span data-stu-id="fa99b-597">Send a POST request to the specified Uri as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="fa99b-598">表示异步操作的任务对象。</span><span class="sxs-lookup"><span data-stu-id="fa99b-598">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa99b-599">此操作不会阻止。</span><span class="sxs-lookup"><span data-stu-id="fa99b-599">This operation will not block.</span></span> <span data-ttu-id="fa99b-600">返回 <xref:System.Threading.Tasks.Task%601> 的对象将在整个响应 (包括内容) 读取后完成。</span><span class="sxs-lookup"><span data-stu-id="fa99b-600">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  

> [!NOTE]
> <span data-ttu-id="fa99b-601">在超时情况下，不同的 .NET 实现会引发不同的异常。</span><span class="sxs-lookup"><span data-stu-id="fa99b-601">In case of timeout, different exceptions are thrown on different .NET implementations.</span></span>
> - <span data-ttu-id="fa99b-602"><xref:System.Net.Http.HttpRequestException> 所有适用的 .NET Framework 版本都将引发。</span><span class="sxs-lookup"><span data-stu-id="fa99b-602"><xref:System.Net.Http.HttpRequestException> is thrown on all applicable .NET Framework versions.</span></span>
> - <span data-ttu-id="fa99b-603"><xref:System.Threading.Tasks.TaskCanceledException> 在所有适用的 .NET Core 版本上都不会引发任何内部异常。</span><span class="sxs-lookup"><span data-stu-id="fa99b-603"><xref:System.Threading.Tasks.TaskCanceledException> without any inner exception is thrown on all applicable .NET Core versions.</span></span>
> - <span data-ttu-id="fa99b-604"><xref:System.Threading.Tasks.TaskCanceledException><xref:System.TimeoutException>在 .net 5.0 和更高版本上，将引发嵌套的。</span><span class="sxs-lookup"><span data-stu-id="fa99b-604"><xref:System.Threading.Tasks.TaskCanceledException> that nests a <xref:System.TimeoutException> is thrown on .NET 5.0 and later versions.</span></span>
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="fa99b-605"><paramref name="requestUri" /> 必须为绝对 URI 或必须设置 <see cref="P:System.Net.Http.HttpClient.BaseAddress" />。</span><span class="sxs-lookup"><span data-stu-id="fa99b-605">The <paramref name="requestUri" /> must be an absolute URI or <see cref="P:System.Net.Http.HttpClient.BaseAddress" /> must be set.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="fa99b-606">由于基础问题（如网络连接性、DNS 失败、服务器证书验证或超时），请求失败。</span><span class="sxs-lookup"><span data-stu-id="fa99b-606">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException"><span data-ttu-id="fa99b-607">仅限 .NET Core 和 .NET 5.0 及更高版本：请求因超时而失败。</span><span class="sxs-lookup"><span data-stu-id="fa99b-607">.NET Core and .NET 5.0 and later only: The request failed due to timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="PostAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PostAsync (Uri requestUri, System.Net.Http.HttpContent content);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PostAsync(class System.Uri requestUri, class System.Net.Http.HttpContent content) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.PostAsync(System.Uri,System.Net.Http.HttpContent)" />
      <MemberSignature Language="VB.NET" Value="Public Function PostAsync (requestUri As Uri, content As HttpContent) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ PostAsync(Uri ^ requestUri, System::Net::Http::HttpContent ^ content);" />
      <MemberSignature Language="F#" Value="member this.PostAsync : Uri * System.Net.Http.HttpContent -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.PostAsync (requestUri, content)" />
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PostAsync (Uri? requestUri, System.Net.Http.HttpContent content);" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" />
        <Parameter Name="content" Type="System.Net.Http.HttpContent" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="fa99b-608">请求发送到的 URI。</span><span class="sxs-lookup"><span data-stu-id="fa99b-608">The Uri the request is sent to.</span></span></param>
        <param name="content"><span data-ttu-id="fa99b-609">发送到服务器的 HTTP 请求内容。</span><span class="sxs-lookup"><span data-stu-id="fa99b-609">The HTTP request content sent to the server.</span></span></param>
        <summary><span data-ttu-id="fa99b-610">以异步操作将 POST 请求发送给指定 URI。</span><span class="sxs-lookup"><span data-stu-id="fa99b-610">Send a POST request to the specified Uri as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="fa99b-611">表示异步操作的任务对象。</span><span class="sxs-lookup"><span data-stu-id="fa99b-611">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa99b-612">此操作不会阻止。</span><span class="sxs-lookup"><span data-stu-id="fa99b-612">This operation will not block.</span></span> <span data-ttu-id="fa99b-613">返回 <xref:System.Threading.Tasks.Task%601> 的对象将在整个响应 (包括内容) 读取后完成。</span><span class="sxs-lookup"><span data-stu-id="fa99b-613">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  

> [!NOTE]
> <span data-ttu-id="fa99b-614">在超时情况下，不同的 .NET 实现会引发不同的异常。</span><span class="sxs-lookup"><span data-stu-id="fa99b-614">In case of timeout, different exceptions are thrown on different .NET implementations.</span></span>
> - <span data-ttu-id="fa99b-615"><xref:System.Net.Http.HttpRequestException> 所有适用的 .NET Framework 版本都将引发。</span><span class="sxs-lookup"><span data-stu-id="fa99b-615"><xref:System.Net.Http.HttpRequestException> is thrown on all applicable .NET Framework versions.</span></span>
> - <span data-ttu-id="fa99b-616"><xref:System.Threading.Tasks.TaskCanceledException> 在所有适用的 .NET Core 版本上都不会引发任何内部异常。</span><span class="sxs-lookup"><span data-stu-id="fa99b-616"><xref:System.Threading.Tasks.TaskCanceledException> without any inner exception is thrown on all applicable .NET Core versions.</span></span>
> - <span data-ttu-id="fa99b-617"><xref:System.Threading.Tasks.TaskCanceledException><xref:System.TimeoutException>在 .net 5.0 和更高版本上，将引发嵌套的。</span><span class="sxs-lookup"><span data-stu-id="fa99b-617"><xref:System.Threading.Tasks.TaskCanceledException> that nests a <xref:System.TimeoutException> is thrown on .NET 5.0 and later versions.</span></span>
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="fa99b-618"><paramref name="requestUri" /> 必须为绝对 URI 或必须设置 <see cref="P:System.Net.Http.HttpClient.BaseAddress" />。</span><span class="sxs-lookup"><span data-stu-id="fa99b-618">The <paramref name="requestUri" /> must be an absolute URI or <see cref="P:System.Net.Http.HttpClient.BaseAddress" /> must be set.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="fa99b-619">由于基础问题（如网络连接性、DNS 失败、服务器证书验证或超时），请求失败。</span><span class="sxs-lookup"><span data-stu-id="fa99b-619">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException"><span data-ttu-id="fa99b-620">仅限 .NET Core 和 .NET 5.0 及更高版本：请求因超时而失败。</span><span class="sxs-lookup"><span data-stu-id="fa99b-620">.NET Core and .NET 5.0 and later only: The request failed due to timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="PostAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PostAsync (string requestUri, System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PostAsync(string requestUri, class System.Net.Http.HttpContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.PostAsync(System.String,System.Net.Http.HttpContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function PostAsync (requestUri As String, content As HttpContent, cancellationToken As CancellationToken) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ PostAsync(System::String ^ requestUri, System::Net::Http::HttpContent ^ content, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.PostAsync : string * System.Net.Http.HttpContent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.PostAsync (requestUri, content, cancellationToken)" />
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PostAsync (string? requestUri, System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken);" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" />
        <Parameter Name="content" Type="System.Net.Http.HttpContent" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="fa99b-621">请求发送到的 URI。</span><span class="sxs-lookup"><span data-stu-id="fa99b-621">The Uri the request is sent to.</span></span></param>
        <param name="content"><span data-ttu-id="fa99b-622">发送到服务器的 HTTP 请求内容。</span><span class="sxs-lookup"><span data-stu-id="fa99b-622">The HTTP request content sent to the server.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="fa99b-623">可由其他对象或线程用以接收取消通知的取消标记。</span><span class="sxs-lookup"><span data-stu-id="fa99b-623">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</span></span></param>
        <summary><span data-ttu-id="fa99b-624">用以异步操作的取消标记发送 POST 请求。</span><span class="sxs-lookup"><span data-stu-id="fa99b-624">Send a POST request with a cancellation token as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="fa99b-625">表示异步操作的任务对象。</span><span class="sxs-lookup"><span data-stu-id="fa99b-625">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa99b-626">此操作不会阻止。</span><span class="sxs-lookup"><span data-stu-id="fa99b-626">This operation will not block.</span></span> <span data-ttu-id="fa99b-627">返回 <xref:System.Threading.Tasks.Task%601> 的对象将在整个响应 (包括内容) 读取后完成。</span><span class="sxs-lookup"><span data-stu-id="fa99b-627">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  

> [!NOTE]
> <span data-ttu-id="fa99b-628">在超时情况下，不同的 .NET 实现会引发不同的异常。</span><span class="sxs-lookup"><span data-stu-id="fa99b-628">In case of timeout, different exceptions are thrown on different .NET implementations.</span></span>
> - <span data-ttu-id="fa99b-629"><xref:System.Net.Http.HttpRequestException> 所有适用的 .NET Framework 版本都将引发。</span><span class="sxs-lookup"><span data-stu-id="fa99b-629"><xref:System.Net.Http.HttpRequestException> is thrown on all applicable .NET Framework versions.</span></span>
> - <span data-ttu-id="fa99b-630"><xref:System.Threading.Tasks.TaskCanceledException> 在所有适用的 .NET Core 版本上都不会引发任何内部异常。</span><span class="sxs-lookup"><span data-stu-id="fa99b-630"><xref:System.Threading.Tasks.TaskCanceledException> without any inner exception is thrown on all applicable .NET Core versions.</span></span>
> - <span data-ttu-id="fa99b-631"><xref:System.Threading.Tasks.TaskCanceledException><xref:System.TimeoutException>在 .net 5.0 和更高版本上，将引发嵌套的。</span><span class="sxs-lookup"><span data-stu-id="fa99b-631"><xref:System.Threading.Tasks.TaskCanceledException> that nests a <xref:System.TimeoutException> is thrown on .NET 5.0 and later versions.</span></span>
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="fa99b-632"><paramref name="requestUri" /> 必须为绝对 URI 或必须设置 <see cref="P:System.Net.Http.HttpClient.BaseAddress" />。</span><span class="sxs-lookup"><span data-stu-id="fa99b-632">The <paramref name="requestUri" /> must be an absolute URI or <see cref="P:System.Net.Http.HttpClient.BaseAddress" /> must be set.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="fa99b-633">由于基础问题（如网络连接性、DNS 失败、服务器证书验证或超时），请求失败。</span><span class="sxs-lookup"><span data-stu-id="fa99b-633">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException"><span data-ttu-id="fa99b-634">仅限 .NET Core 和 .NET 5.0 及更高版本：请求因超时而失败。</span><span class="sxs-lookup"><span data-stu-id="fa99b-634">.NET Core and .NET 5.0 and later only: The request failed due to timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="PostAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PostAsync (Uri requestUri, System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PostAsync(class System.Uri requestUri, class System.Net.Http.HttpContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.PostAsync(System.Uri,System.Net.Http.HttpContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function PostAsync (requestUri As Uri, content As HttpContent, cancellationToken As CancellationToken) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ PostAsync(Uri ^ requestUri, System::Net::Http::HttpContent ^ content, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.PostAsync : Uri * System.Net.Http.HttpContent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.PostAsync (requestUri, content, cancellationToken)" />
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PostAsync (Uri? requestUri, System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken);" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" />
        <Parameter Name="content" Type="System.Net.Http.HttpContent" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="fa99b-635">请求发送到的 URI。</span><span class="sxs-lookup"><span data-stu-id="fa99b-635">The Uri the request is sent to.</span></span></param>
        <param name="content"><span data-ttu-id="fa99b-636">发送到服务器的 HTTP 请求内容。</span><span class="sxs-lookup"><span data-stu-id="fa99b-636">The HTTP request content sent to the server.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="fa99b-637">可由其他对象或线程用以接收取消通知的取消标记。</span><span class="sxs-lookup"><span data-stu-id="fa99b-637">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</span></span></param>
        <summary><span data-ttu-id="fa99b-638">用以异步操作的取消标记发送 POST 请求。</span><span class="sxs-lookup"><span data-stu-id="fa99b-638">Send a POST request with a cancellation token as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="fa99b-639">表示异步操作的任务对象。</span><span class="sxs-lookup"><span data-stu-id="fa99b-639">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa99b-640">此操作不会阻止。</span><span class="sxs-lookup"><span data-stu-id="fa99b-640">This operation will not block.</span></span> <span data-ttu-id="fa99b-641">返回 <xref:System.Threading.Tasks.Task%601> 的对象将在整个响应 (包括内容) 读取后完成。</span><span class="sxs-lookup"><span data-stu-id="fa99b-641">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  

> [!NOTE]
> <span data-ttu-id="fa99b-642">在超时情况下，不同的 .NET 实现会引发不同的异常。</span><span class="sxs-lookup"><span data-stu-id="fa99b-642">In case of timeout, different exceptions are thrown on different .NET implementations.</span></span>
> - <span data-ttu-id="fa99b-643"><xref:System.Net.Http.HttpRequestException> 所有适用的 .NET Framework 版本都将引发。</span><span class="sxs-lookup"><span data-stu-id="fa99b-643"><xref:System.Net.Http.HttpRequestException> is thrown on all applicable .NET Framework versions.</span></span>
> - <span data-ttu-id="fa99b-644"><xref:System.Threading.Tasks.TaskCanceledException> 在所有适用的 .NET Core 版本上都不会引发任何内部异常。</span><span class="sxs-lookup"><span data-stu-id="fa99b-644"><xref:System.Threading.Tasks.TaskCanceledException> without any inner exception is thrown on all applicable .NET Core versions.</span></span>
> - <span data-ttu-id="fa99b-645"><xref:System.Threading.Tasks.TaskCanceledException><xref:System.TimeoutException>在 .net 5.0 和更高版本上，将引发嵌套的。</span><span class="sxs-lookup"><span data-stu-id="fa99b-645"><xref:System.Threading.Tasks.TaskCanceledException> that nests a <xref:System.TimeoutException> is thrown on .NET 5.0 and later versions.</span></span>
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="fa99b-646"><paramref name="requestUri" /> 必须为绝对 URI 或必须设置 <see cref="P:System.Net.Http.HttpClient.BaseAddress" />。</span><span class="sxs-lookup"><span data-stu-id="fa99b-646">The <paramref name="requestUri" /> must be an absolute URI or <see cref="P:System.Net.Http.HttpClient.BaseAddress" /> must be set.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="fa99b-647">由于基础问题（如网络连接性、DNS 失败、服务器证书验证或超时），请求失败。</span><span class="sxs-lookup"><span data-stu-id="fa99b-647">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException"><span data-ttu-id="fa99b-648">仅限 .NET Core 和 .NET 5.0 及更高版本：请求因超时而失败。</span><span class="sxs-lookup"><span data-stu-id="fa99b-648">.NET Core and .NET 5.0 and later only: The request failed due to timeout.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="PutAsync">
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="fa99b-649">以异步操作将 PUT 请求发送给指定 URI。</span><span class="sxs-lookup"><span data-stu-id="fa99b-649">Send a PUT request to the specified Uri as an asynchronous operation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa99b-650">此操作不会阻止。</span><span class="sxs-lookup"><span data-stu-id="fa99b-650">This operation will not block.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="PutAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PutAsync (string requestUri, System.Net.Http.HttpContent content);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PutAsync(string requestUri, class System.Net.Http.HttpContent content) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.PutAsync(System.String,System.Net.Http.HttpContent)" />
      <MemberSignature Language="VB.NET" Value="Public Function PutAsync (requestUri As String, content As HttpContent) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ PutAsync(System::String ^ requestUri, System::Net::Http::HttpContent ^ content);" />
      <MemberSignature Language="F#" Value="member this.PutAsync : string * System.Net.Http.HttpContent -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.PutAsync (requestUri, content)" />
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PutAsync (string? requestUri, System.Net.Http.HttpContent content);" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" />
        <Parameter Name="content" Type="System.Net.Http.HttpContent" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="fa99b-651">请求发送到的 URI。</span><span class="sxs-lookup"><span data-stu-id="fa99b-651">The Uri the request is sent to.</span></span></param>
        <param name="content"><span data-ttu-id="fa99b-652">发送到服务器的 HTTP 请求内容。</span><span class="sxs-lookup"><span data-stu-id="fa99b-652">The HTTP request content sent to the server.</span></span></param>
        <summary><span data-ttu-id="fa99b-653">以异步操作将 PUT 请求发送给指定 URI。</span><span class="sxs-lookup"><span data-stu-id="fa99b-653">Send a PUT request to the specified Uri as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="fa99b-654">表示异步操作的任务对象。</span><span class="sxs-lookup"><span data-stu-id="fa99b-654">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa99b-655">此操作不会阻止。</span><span class="sxs-lookup"><span data-stu-id="fa99b-655">This operation will not block.</span></span> <span data-ttu-id="fa99b-656">返回 <xref:System.Threading.Tasks.Task%601> 的对象将在整个响应 (包括内容) 读取后完成。</span><span class="sxs-lookup"><span data-stu-id="fa99b-656">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  

> [!NOTE]
> <span data-ttu-id="fa99b-657">在超时情况下，不同的 .NET 实现会引发不同的异常。</span><span class="sxs-lookup"><span data-stu-id="fa99b-657">In case of timeout, different exceptions are thrown on different .NET implementations.</span></span>
> - <span data-ttu-id="fa99b-658"><xref:System.Net.Http.HttpRequestException> 所有适用的 .NET Framework 版本都将引发。</span><span class="sxs-lookup"><span data-stu-id="fa99b-658"><xref:System.Net.Http.HttpRequestException> is thrown on all applicable .NET Framework versions.</span></span>
> - <span data-ttu-id="fa99b-659"><xref:System.Threading.Tasks.TaskCanceledException> 在所有适用的 .NET Core 版本上都不会引发任何内部异常。</span><span class="sxs-lookup"><span data-stu-id="fa99b-659"><xref:System.Threading.Tasks.TaskCanceledException> without any inner exception is thrown on all applicable .NET Core versions.</span></span>
> - <span data-ttu-id="fa99b-660"><xref:System.Threading.Tasks.TaskCanceledException><xref:System.TimeoutException>在 .net 5.0 和更高版本上，将引发嵌套的。</span><span class="sxs-lookup"><span data-stu-id="fa99b-660"><xref:System.Threading.Tasks.TaskCanceledException> that nests a <xref:System.TimeoutException> is thrown on .NET 5.0 and later versions.</span></span>
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="fa99b-661"><paramref name="requestUri" /> 必须为绝对 URI 或必须设置 <see cref="P:System.Net.Http.HttpClient.BaseAddress" />。</span><span class="sxs-lookup"><span data-stu-id="fa99b-661">The <paramref name="requestUri" /> must be an absolute URI or <see cref="P:System.Net.Http.HttpClient.BaseAddress" /> must be set.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="fa99b-662">由于基础问题（如网络连接性、DNS 失败、服务器证书验证或超时），请求失败。</span><span class="sxs-lookup"><span data-stu-id="fa99b-662">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException"><span data-ttu-id="fa99b-663">仅限 .NET Core 和 .NET 5.0 及更高版本：请求因超时而失败。</span><span class="sxs-lookup"><span data-stu-id="fa99b-663">.NET Core and .NET 5.0 and later only: The request failed due to timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="PutAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PutAsync (Uri requestUri, System.Net.Http.HttpContent content);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PutAsync(class System.Uri requestUri, class System.Net.Http.HttpContent content) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.PutAsync(System.Uri,System.Net.Http.HttpContent)" />
      <MemberSignature Language="VB.NET" Value="Public Function PutAsync (requestUri As Uri, content As HttpContent) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ PutAsync(Uri ^ requestUri, System::Net::Http::HttpContent ^ content);" />
      <MemberSignature Language="F#" Value="member this.PutAsync : Uri * System.Net.Http.HttpContent -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.PutAsync (requestUri, content)" />
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PutAsync (Uri? requestUri, System.Net.Http.HttpContent content);" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" />
        <Parameter Name="content" Type="System.Net.Http.HttpContent" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="fa99b-664">请求发送到的 URI。</span><span class="sxs-lookup"><span data-stu-id="fa99b-664">The Uri the request is sent to.</span></span></param>
        <param name="content"><span data-ttu-id="fa99b-665">发送到服务器的 HTTP 请求内容。</span><span class="sxs-lookup"><span data-stu-id="fa99b-665">The HTTP request content sent to the server.</span></span></param>
        <summary><span data-ttu-id="fa99b-666">以异步操作将 PUT 请求发送给指定 URI。</span><span class="sxs-lookup"><span data-stu-id="fa99b-666">Send a PUT request to the specified Uri as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="fa99b-667">表示异步操作的任务对象。</span><span class="sxs-lookup"><span data-stu-id="fa99b-667">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa99b-668">此操作不会阻止。</span><span class="sxs-lookup"><span data-stu-id="fa99b-668">This operation will not block.</span></span> <span data-ttu-id="fa99b-669">返回 <xref:System.Threading.Tasks.Task%601> 的对象将在整个响应 (包括内容) 读取后完成。</span><span class="sxs-lookup"><span data-stu-id="fa99b-669">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  

> [!NOTE]
> <span data-ttu-id="fa99b-670">在超时情况下，不同的 .NET 实现会引发不同的异常。</span><span class="sxs-lookup"><span data-stu-id="fa99b-670">In case of timeout, different exceptions are thrown on different .NET implementations.</span></span>
> - <span data-ttu-id="fa99b-671"><xref:System.Net.Http.HttpRequestException> 所有适用的 .NET Framework 版本都将引发。</span><span class="sxs-lookup"><span data-stu-id="fa99b-671"><xref:System.Net.Http.HttpRequestException> is thrown on all applicable .NET Framework versions.</span></span>
> - <span data-ttu-id="fa99b-672"><xref:System.Threading.Tasks.TaskCanceledException> 在所有适用的 .NET Core 版本上都不会引发任何内部异常。</span><span class="sxs-lookup"><span data-stu-id="fa99b-672"><xref:System.Threading.Tasks.TaskCanceledException> without any inner exception is thrown on all applicable .NET Core versions.</span></span>
> - <span data-ttu-id="fa99b-673"><xref:System.Threading.Tasks.TaskCanceledException><xref:System.TimeoutException>在 .net 5.0 和更高版本上，将引发嵌套的。</span><span class="sxs-lookup"><span data-stu-id="fa99b-673"><xref:System.Threading.Tasks.TaskCanceledException> that nests a <xref:System.TimeoutException> is thrown on .NET 5.0 and later versions.</span></span>
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="fa99b-674"><paramref name="requestUri" /> 必须为绝对 URI 或必须设置 <see cref="P:System.Net.Http.HttpClient.BaseAddress" />。</span><span class="sxs-lookup"><span data-stu-id="fa99b-674">The <paramref name="requestUri" /> must be an absolute URI or <see cref="P:System.Net.Http.HttpClient.BaseAddress" /> must be set.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="fa99b-675">由于基础问题（如网络连接性、DNS 失败、服务器证书验证或超时），请求失败。</span><span class="sxs-lookup"><span data-stu-id="fa99b-675">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException"><span data-ttu-id="fa99b-676">仅限 .NET Core 和 .NET 5.0 及更高版本：请求因超时而失败。</span><span class="sxs-lookup"><span data-stu-id="fa99b-676">.NET Core and .NET 5.0 and later only: The request failed due to timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="PutAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PutAsync (string requestUri, System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PutAsync(string requestUri, class System.Net.Http.HttpContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.PutAsync(System.String,System.Net.Http.HttpContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function PutAsync (requestUri As String, content As HttpContent, cancellationToken As CancellationToken) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ PutAsync(System::String ^ requestUri, System::Net::Http::HttpContent ^ content, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.PutAsync : string * System.Net.Http.HttpContent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.PutAsync (requestUri, content, cancellationToken)" />
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PutAsync (string? requestUri, System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken);" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.String" />
        <Parameter Name="content" Type="System.Net.Http.HttpContent" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="fa99b-677">请求发送到的 URI。</span><span class="sxs-lookup"><span data-stu-id="fa99b-677">The Uri the request is sent to.</span></span></param>
        <param name="content"><span data-ttu-id="fa99b-678">发送到服务器的 HTTP 请求内容。</span><span class="sxs-lookup"><span data-stu-id="fa99b-678">The HTTP request content sent to the server.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="fa99b-679">可由其他对象或线程用以接收取消通知的取消标记。</span><span class="sxs-lookup"><span data-stu-id="fa99b-679">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</span></span></param>
        <summary><span data-ttu-id="fa99b-680">用以异步操作的取消标记发送 PUT 请求。</span><span class="sxs-lookup"><span data-stu-id="fa99b-680">Send a PUT request with a cancellation token as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="fa99b-681">表示异步操作的任务对象。</span><span class="sxs-lookup"><span data-stu-id="fa99b-681">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa99b-682">此操作不会阻止。</span><span class="sxs-lookup"><span data-stu-id="fa99b-682">This operation will not block.</span></span> <span data-ttu-id="fa99b-683">返回 <xref:System.Threading.Tasks.Task%601> 的对象将在整个响应 (包括内容) 读取后完成。</span><span class="sxs-lookup"><span data-stu-id="fa99b-683">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  

> [!NOTE]
> <span data-ttu-id="fa99b-684">在超时情况下，不同的 .NET 实现会引发不同的异常。</span><span class="sxs-lookup"><span data-stu-id="fa99b-684">In case of timeout, different exceptions are thrown on different .NET implementations.</span></span>
> - <span data-ttu-id="fa99b-685"><xref:System.Net.Http.HttpRequestException> 所有适用的 .NET Framework 版本都将引发。</span><span class="sxs-lookup"><span data-stu-id="fa99b-685"><xref:System.Net.Http.HttpRequestException> is thrown on all applicable .NET Framework versions.</span></span>
> - <span data-ttu-id="fa99b-686"><xref:System.Threading.Tasks.TaskCanceledException> 在所有适用的 .NET Core 版本上都不会引发任何内部异常。</span><span class="sxs-lookup"><span data-stu-id="fa99b-686"><xref:System.Threading.Tasks.TaskCanceledException> without any inner exception is thrown on all applicable .NET Core versions.</span></span>
> - <span data-ttu-id="fa99b-687"><xref:System.Threading.Tasks.TaskCanceledException><xref:System.TimeoutException>在 .net 5.0 和更高版本上，将引发嵌套的。</span><span class="sxs-lookup"><span data-stu-id="fa99b-687"><xref:System.Threading.Tasks.TaskCanceledException> that nests a <xref:System.TimeoutException> is thrown on .NET 5.0 and later versions.</span></span>
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="fa99b-688"><paramref name="requestUri" /> 必须为绝对 URI 或必须设置 <see cref="P:System.Net.Http.HttpClient.BaseAddress" />。</span><span class="sxs-lookup"><span data-stu-id="fa99b-688">The <paramref name="requestUri" /> must be an absolute URI or <see cref="P:System.Net.Http.HttpClient.BaseAddress" /> must be set.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="fa99b-689">由于基础问题（如网络连接性、DNS 失败、服务器证书验证或超时），请求失败。</span><span class="sxs-lookup"><span data-stu-id="fa99b-689">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException"><span data-ttu-id="fa99b-690">仅限 .NET Core 和 .NET 5.0 及更高版本：请求因超时而失败。</span><span class="sxs-lookup"><span data-stu-id="fa99b-690">.NET Core and .NET 5.0 and later only: The request failed due to timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="PutAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PutAsync (Uri requestUri, System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PutAsync(class System.Uri requestUri, class System.Net.Http.HttpContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.PutAsync(System.Uri,System.Net.Http.HttpContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function PutAsync (requestUri As Uri, content As HttpContent, cancellationToken As CancellationToken) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ PutAsync(Uri ^ requestUri, System::Net::Http::HttpContent ^ content, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.PutAsync : Uri * System.Net.Http.HttpContent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.PutAsync (requestUri, content, cancellationToken)" />
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PutAsync (Uri? requestUri, System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken);" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestUri" Type="System.Uri" />
        <Parameter Name="content" Type="System.Net.Http.HttpContent" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="requestUri"><span data-ttu-id="fa99b-691">请求发送到的 URI。</span><span class="sxs-lookup"><span data-stu-id="fa99b-691">The Uri the request is sent to.</span></span></param>
        <param name="content"><span data-ttu-id="fa99b-692">发送到服务器的 HTTP 请求内容。</span><span class="sxs-lookup"><span data-stu-id="fa99b-692">The HTTP request content sent to the server.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="fa99b-693">可由其他对象或线程用以接收取消通知的取消标记。</span><span class="sxs-lookup"><span data-stu-id="fa99b-693">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</span></span></param>
        <summary><span data-ttu-id="fa99b-694">用以异步操作的取消标记发送 PUT 请求。</span><span class="sxs-lookup"><span data-stu-id="fa99b-694">Send a PUT request with a cancellation token as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="fa99b-695">表示异步操作的任务对象。</span><span class="sxs-lookup"><span data-stu-id="fa99b-695">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa99b-696">此操作不会阻止。</span><span class="sxs-lookup"><span data-stu-id="fa99b-696">This operation will not block.</span></span> <span data-ttu-id="fa99b-697">返回 <xref:System.Threading.Tasks.Task%601> 的对象将在整个响应 (包括内容) 读取后完成。</span><span class="sxs-lookup"><span data-stu-id="fa99b-697">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.</span></span>  

> [!NOTE]
> <span data-ttu-id="fa99b-698">在超时情况下，不同的 .NET 实现会引发不同的异常。</span><span class="sxs-lookup"><span data-stu-id="fa99b-698">In case of timeout, different exceptions are thrown on different .NET implementations.</span></span>
> - <span data-ttu-id="fa99b-699"><xref:System.Net.Http.HttpRequestException> 所有适用的 .NET Framework 版本都将引发。</span><span class="sxs-lookup"><span data-stu-id="fa99b-699"><xref:System.Net.Http.HttpRequestException> is thrown on all applicable .NET Framework versions.</span></span>
> - <span data-ttu-id="fa99b-700"><xref:System.Threading.Tasks.TaskCanceledException> 在所有适用的 .NET Core 版本上都不会引发任何内部异常。</span><span class="sxs-lookup"><span data-stu-id="fa99b-700"><xref:System.Threading.Tasks.TaskCanceledException> without any inner exception is thrown on all applicable .NET Core versions.</span></span>
> - <span data-ttu-id="fa99b-701"><xref:System.Threading.Tasks.TaskCanceledException><xref:System.TimeoutException>在 .net 5.0 和更高版本上，将引发嵌套的。</span><span class="sxs-lookup"><span data-stu-id="fa99b-701"><xref:System.Threading.Tasks.TaskCanceledException> that nests a <xref:System.TimeoutException> is thrown on .NET 5.0 and later versions.</span></span>
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="fa99b-702"><paramref name="requestUri" /> 必须为绝对 URI 或必须设置 <see cref="P:System.Net.Http.HttpClient.BaseAddress" />。</span><span class="sxs-lookup"><span data-stu-id="fa99b-702">The <paramref name="requestUri" /> must be an absolute URI or <see cref="P:System.Net.Http.HttpClient.BaseAddress" /> must be set.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="fa99b-703">由于基础问题（如网络连接性、DNS 失败、服务器证书验证或超时），请求失败。</span><span class="sxs-lookup"><span data-stu-id="fa99b-703">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException"><span data-ttu-id="fa99b-704">仅限 .NET Core 和 .NET 5.0 及更高版本：请求因超时而失败。</span><span class="sxs-lookup"><span data-stu-id="fa99b-704">.NET Core and .NET 5.0 and later only: The request failed due to timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public System.Net.Http.HttpResponseMessage Send (System.Net.Http.HttpRequestMessage request);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.Http.HttpResponseMessage Send(class System.Net.Http.HttpRequestMessage request) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.Send(System.Net.Http.HttpRequestMessage)" />
      <MemberSignature Language="VB.NET" Value="Public Function Send (request As HttpRequestMessage) As HttpResponseMessage" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::Http::HttpResponseMessage ^ Send(System::Net::Http::HttpRequestMessage ^ request);" />
      <MemberSignature Language="F#" Value="override this.Send : System.Net.Http.HttpRequestMessage -&gt; System.Net.Http.HttpResponseMessage" Usage="httpClient.Send request" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Http.HttpResponseMessage</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.Net.Http.HttpRequestMessage" Index="0" FrameworkAlternate="net-5.0" />
      </Parameters>
      <Docs>
        <param name="request"><span data-ttu-id="fa99b-705">要发送的 HTTP 请求消息。</span><span class="sxs-lookup"><span data-stu-id="fa99b-705">The HTTP request message to send.</span></span></param>
        <summary><span data-ttu-id="fa99b-706">发送带有指定请求的 HTTP 请求。</span><span class="sxs-lookup"><span data-stu-id="fa99b-706">Sends an HTTP request with the specified request.</span></span></summary>
        <returns><span data-ttu-id="fa99b-707">HTTP 响应消息。</span><span class="sxs-lookup"><span data-stu-id="fa99b-707">An HTTP response message.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="fa99b-708"><paramref name="request" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="fa99b-708">The <paramref name="request" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="fa99b-709">HTTP 版本为 2.0 或更高版本，或者版本策略设置为 <see cref="F:System.Net.Http.HttpVersionPolicy.RequestVersionOrHigher" />。</span><span class="sxs-lookup"><span data-stu-id="fa99b-709">The HTTP version is 2.0 or higher or the version policy is set to <see cref="F:System.Net.Http.HttpVersionPolicy.RequestVersionOrHigher" />.</span></span>

<span data-ttu-id="fa99b-710">- 或 -</span><span class="sxs-lookup"><span data-stu-id="fa99b-710">-or-</span></span>

<span data-ttu-id="fa99b-711">派生自 <see cref="T:System.Net.Http.HttpContent" /> 的自定义类不会重写 <see cref="M:System.Net.Http.HttpContent.SerializeToStream(System.IO.Stream,System.Net.TransportContext,System.Threading.CancellationToken)" /> 方法。</span><span class="sxs-lookup"><span data-stu-id="fa99b-711">The custom class derived from <see cref="T:System.Net.Http.HttpContent" /> does not override the <see cref="M:System.Net.Http.HttpContent.SerializeToStream(System.IO.Stream,System.Net.TransportContext,System.Threading.CancellationToken)" /> method.</span></span>

<span data-ttu-id="fa99b-712">- 或 -</span><span class="sxs-lookup"><span data-stu-id="fa99b-712">-or-</span></span>

<span data-ttu-id="fa99b-713">自定义 <see cref="T:System.Net.Http.HttpMessageHandler" /> 不会重写 <see cref="M:System.Net.Http.HttpMessageHandler.Send(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)" /> 方法。</span><span class="sxs-lookup"><span data-stu-id="fa99b-713">The custom <see cref="T:System.Net.Http.HttpMessageHandler" /> does not override the <see cref="M:System.Net.Http.HttpMessageHandler.Send(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)" /> method.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="fa99b-714">请求消息已由 <see cref="T:System.Net.Http.HttpClient" /> 实例发送。</span><span class="sxs-lookup"><span data-stu-id="fa99b-714">The request message was already sent by the <see cref="T:System.Net.Http.HttpClient" /> instance.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="fa99b-715">由于基础问题（如网络连接性、DNS 失败或服务器证书验证），请求失败。</span><span class="sxs-lookup"><span data-stu-id="fa99b-715">The request failed due to an underlying issue such as network connectivity, DNS failure, or server certificate validation.</span></span></exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException"><span data-ttu-id="fa99b-716">如果 <see cref="T:System.Threading.Tasks.TaskCanceledException" /> 异常会嵌套 <see cref="T:System.TimeoutException" />：请求因超时而失败。</span><span class="sxs-lookup"><span data-stu-id="fa99b-716">If the <see cref="T:System.Threading.Tasks.TaskCanceledException" /> exception nests the <see cref="T:System.TimeoutException" />: The request failed due to timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public System.Net.Http.HttpResponseMessage Send (System.Net.Http.HttpRequestMessage request, System.Net.Http.HttpCompletionOption completionOption);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.Http.HttpResponseMessage Send(class System.Net.Http.HttpRequestMessage request, valuetype System.Net.Http.HttpCompletionOption completionOption) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.Send(System.Net.Http.HttpRequestMessage,System.Net.Http.HttpCompletionOption)" />
      <MemberSignature Language="VB.NET" Value="Public Function Send (request As HttpRequestMessage, completionOption As HttpCompletionOption) As HttpResponseMessage" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::Http::HttpResponseMessage ^ Send(System::Net::Http::HttpRequestMessage ^ request, System::Net::Http::HttpCompletionOption completionOption);" />
      <MemberSignature Language="F#" Value="override this.Send : System.Net.Http.HttpRequestMessage * System.Net.Http.HttpCompletionOption -&gt; System.Net.Http.HttpResponseMessage" Usage="httpClient.Send (request, completionOption)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Http.HttpResponseMessage</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.Net.Http.HttpRequestMessage" Index="0" FrameworkAlternate="net-5.0" />
        <Parameter Name="completionOption" Type="System.Net.Http.HttpCompletionOption" Index="1" FrameworkAlternate="net-5.0" />
      </Parameters>
      <Docs>
        <param name="request"><span data-ttu-id="fa99b-717">要发送的 HTTP 请求消息。</span><span class="sxs-lookup"><span data-stu-id="fa99b-717">The HTTP request message to send.</span></span></param>
        <param name="completionOption"><span data-ttu-id="fa99b-718">枚举值之一，用于指定操作应完成的时间（在响应可用或在读取响应内容之后）。</span><span class="sxs-lookup"><span data-stu-id="fa99b-718">One of the enumeration values that specifies when the operation should complete (as soon as a response is available or after reading the response content).</span></span></param>
        <summary><span data-ttu-id="fa99b-719">发送 HTTP 请求。</span><span class="sxs-lookup"><span data-stu-id="fa99b-719">Sends an HTTP request.</span></span></summary>
        <returns><span data-ttu-id="fa99b-720">HTTP 响应消息。</span><span class="sxs-lookup"><span data-stu-id="fa99b-720">The HTTP response message.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="fa99b-721"><paramref name="request" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="fa99b-721">The <paramref name="request" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="fa99b-722">HTTP 版本为 2.0 或更高版本，或者版本策略设置为 <see cref="F:System.Net.Http.HttpVersionPolicy.RequestVersionOrHigher" />。</span><span class="sxs-lookup"><span data-stu-id="fa99b-722">The HTTP version is 2.0 or higher or the version policy is set to <see cref="F:System.Net.Http.HttpVersionPolicy.RequestVersionOrHigher" />.</span></span>

<span data-ttu-id="fa99b-723">- 或 -</span><span class="sxs-lookup"><span data-stu-id="fa99b-723">-or-</span></span>

<span data-ttu-id="fa99b-724">派生自 <see cref="T:System.Net.Http.HttpContent" /> 的自定义类不会重写 <see cref="M:System.Net.Http.HttpContent.SerializeToStream(System.IO.Stream,System.Net.TransportContext,System.Threading.CancellationToken)" /> 方法。</span><span class="sxs-lookup"><span data-stu-id="fa99b-724">The custom class derived from <see cref="T:System.Net.Http.HttpContent" /> does not override the <see cref="M:System.Net.Http.HttpContent.SerializeToStream(System.IO.Stream,System.Net.TransportContext,System.Threading.CancellationToken)" /> method.</span></span>

<span data-ttu-id="fa99b-725">- 或 -</span><span class="sxs-lookup"><span data-stu-id="fa99b-725">-or-</span></span>

<span data-ttu-id="fa99b-726">自定义 <see cref="T:System.Net.Http.HttpMessageHandler" /> 不会重写 <see cref="M:System.Net.Http.HttpMessageHandler.Send(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)" /> 方法。</span><span class="sxs-lookup"><span data-stu-id="fa99b-726">The custom <see cref="T:System.Net.Http.HttpMessageHandler" /> does not override the <see cref="M:System.Net.Http.HttpMessageHandler.Send(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)" /> method.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="fa99b-727">请求消息已由 <see cref="T:System.Net.Http.HttpClient" /> 实例发送。</span><span class="sxs-lookup"><span data-stu-id="fa99b-727">The request message was already sent by the <see cref="T:System.Net.Http.HttpClient" /> instance.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="fa99b-728">由于基础问题（如网络连接性、DNS 失败或服务器证书验证），请求失败。</span><span class="sxs-lookup"><span data-stu-id="fa99b-728">The request failed due to an underlying issue such as network connectivity, DNS failure, or server certificate validation.</span></span></exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException"><span data-ttu-id="fa99b-729">如果 <see cref="T:System.Threading.Tasks.TaskCanceledException" /> 异常会嵌套 <see cref="T:System.TimeoutException" />：请求因超时而失败。</span><span class="sxs-lookup"><span data-stu-id="fa99b-729">If the <see cref="T:System.Threading.Tasks.TaskCanceledException" /> exception nests the <see cref="T:System.TimeoutException" />: The request failed due to timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public override System.Net.Http.HttpResponseMessage Send (System.Net.Http.HttpRequestMessage request, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Net.Http.HttpResponseMessage Send(class System.Net.Http.HttpRequestMessage request, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.Send(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Send (request As HttpRequestMessage, cancellationToken As CancellationToken) As HttpResponseMessage" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Net::Http::HttpResponseMessage ^ Send(System::Net::Http::HttpRequestMessage ^ request, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="override this.Send : System.Net.Http.HttpRequestMessage * System.Threading.CancellationToken -&gt; System.Net.Http.HttpResponseMessage" Usage="httpClient.Send (request, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Http.HttpResponseMessage</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.Net.Http.HttpRequestMessage" Index="0" FrameworkAlternate="net-5.0" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="net-5.0" />
      </Parameters>
      <Docs>
        <param name="request"><span data-ttu-id="fa99b-730">要发送的 HTTP 请求消息。</span><span class="sxs-lookup"><span data-stu-id="fa99b-730">The HTTP request message to send.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="fa99b-731">用于取消此操作的令牌。</span><span class="sxs-lookup"><span data-stu-id="fa99b-731">The token to cancel the operation.</span></span></param>
        <summary><span data-ttu-id="fa99b-732">发送带有指定请求和取消标记的 HTTP 请求。</span><span class="sxs-lookup"><span data-stu-id="fa99b-732">Sends an HTTP request with the specified request and cancellation token.</span></span></summary>
        <returns><span data-ttu-id="fa99b-733">HTTP 响应消息。</span><span class="sxs-lookup"><span data-stu-id="fa99b-733">The HTTP response message.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="fa99b-734"><paramref name="request" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="fa99b-734">The <paramref name="request" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="fa99b-735">HTTP 版本为 2.0 或更高版本，或者版本策略设置为 <see cref="F:System.Net.Http.HttpVersionPolicy.RequestVersionOrHigher" />。</span><span class="sxs-lookup"><span data-stu-id="fa99b-735">The HTTP version is 2.0 or higher or the version policy is set to <see cref="F:System.Net.Http.HttpVersionPolicy.RequestVersionOrHigher" />.</span></span>

<span data-ttu-id="fa99b-736">- 或 -</span><span class="sxs-lookup"><span data-stu-id="fa99b-736">-or-</span></span>

<span data-ttu-id="fa99b-737">派生自 <see cref="T:System.Net.Http.HttpContent" /> 的自定义类不会重写 <see cref="M:System.Net.Http.HttpContent.SerializeToStream(System.IO.Stream,System.Net.TransportContext,System.Threading.CancellationToken)" /> 方法。</span><span class="sxs-lookup"><span data-stu-id="fa99b-737">The custom class derived from <see cref="T:System.Net.Http.HttpContent" /> does not override the <see cref="M:System.Net.Http.HttpContent.SerializeToStream(System.IO.Stream,System.Net.TransportContext,System.Threading.CancellationToken)" /> method.</span></span>

<span data-ttu-id="fa99b-738">- 或 -</span><span class="sxs-lookup"><span data-stu-id="fa99b-738">-or-</span></span>

<span data-ttu-id="fa99b-739">自定义 <see cref="T:System.Net.Http.HttpMessageHandler" /> 不会重写 <see cref="M:System.Net.Http.HttpMessageHandler.Send(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)" /> 方法。</span><span class="sxs-lookup"><span data-stu-id="fa99b-739">The custom <see cref="T:System.Net.Http.HttpMessageHandler" /> does not override the <see cref="M:System.Net.Http.HttpMessageHandler.Send(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)" /> method.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="fa99b-740">请求消息已由 <see cref="T:System.Net.Http.HttpClient" /> 实例发送。</span><span class="sxs-lookup"><span data-stu-id="fa99b-740">The request message was already sent by the <see cref="T:System.Net.Http.HttpClient" /> instance.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="fa99b-741">由于基础问题（如网络连接性、DNS 失败或服务器证书验证），请求失败。</span><span class="sxs-lookup"><span data-stu-id="fa99b-741">The request failed due to an underlying issue such as network connectivity, DNS failure, or server certificate validation.</span></span></exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException"><span data-ttu-id="fa99b-742">请求已被取消。</span><span class="sxs-lookup"><span data-stu-id="fa99b-742">The request was canceled.</span></span>

<span data-ttu-id="fa99b-743">- 或 -</span><span class="sxs-lookup"><span data-stu-id="fa99b-743">-or-</span></span>

<span data-ttu-id="fa99b-744">如果 <see cref="T:System.Threading.Tasks.TaskCanceledException" /> 异常会嵌套 <see cref="T:System.TimeoutException" />：请求因超时而失败。</span><span class="sxs-lookup"><span data-stu-id="fa99b-744">If the <see cref="T:System.Threading.Tasks.TaskCanceledException" /> exception nests the <see cref="T:System.TimeoutException" />: The request failed due to timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public System.Net.Http.HttpResponseMessage Send (System.Net.Http.HttpRequestMessage request, System.Net.Http.HttpCompletionOption completionOption, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.Http.HttpResponseMessage Send(class System.Net.Http.HttpRequestMessage request, valuetype System.Net.Http.HttpCompletionOption completionOption, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.Send(System.Net.Http.HttpRequestMessage,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function Send (request As HttpRequestMessage, completionOption As HttpCompletionOption, cancellationToken As CancellationToken) As HttpResponseMessage" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::Http::HttpResponseMessage ^ Send(System::Net::Http::HttpRequestMessage ^ request, System::Net::Http::HttpCompletionOption completionOption, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="override this.Send : System.Net.Http.HttpRequestMessage * System.Net.Http.HttpCompletionOption * System.Threading.CancellationToken -&gt; System.Net.Http.HttpResponseMessage" Usage="httpClient.Send (request, completionOption, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Http.HttpResponseMessage</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.Net.Http.HttpRequestMessage" Index="0" FrameworkAlternate="net-5.0" />
        <Parameter Name="completionOption" Type="System.Net.Http.HttpCompletionOption" Index="1" FrameworkAlternate="net-5.0" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="net-5.0" />
      </Parameters>
      <Docs>
        <param name="request"><span data-ttu-id="fa99b-745">要发送的 HTTP 请求消息。</span><span class="sxs-lookup"><span data-stu-id="fa99b-745">The HTTP request message to send.</span></span></param>
        <param name="completionOption"><span data-ttu-id="fa99b-746">枚举值之一，用于指定操作应完成的时间（在响应可用或在读取响应内容之后）。</span><span class="sxs-lookup"><span data-stu-id="fa99b-746">One of the enumeration values that specifies when the operation should complete (as soon as a response is available or after reading the response content).</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="fa99b-747">用于取消此操作的令牌。</span><span class="sxs-lookup"><span data-stu-id="fa99b-747">The token to cancel the operation.</span></span></param>
        <summary><span data-ttu-id="fa99b-748">发送带有指定请求、完成选项和取消标记的 HTTP 请求。</span><span class="sxs-lookup"><span data-stu-id="fa99b-748">Sends an HTTP request with the specified request, completion option and cancellation token.</span></span></summary>
        <returns><span data-ttu-id="fa99b-749">HTTP 响应消息。</span><span class="sxs-lookup"><span data-stu-id="fa99b-749">The HTTP response message.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="fa99b-750"><paramref name="request" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="fa99b-750">The <paramref name="request" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="fa99b-751">HTTP 版本为 2.0 或更高版本，或者版本策略设置为 <see cref="F:System.Net.Http.HttpVersionPolicy.RequestVersionOrHigher" />。</span><span class="sxs-lookup"><span data-stu-id="fa99b-751">The HTTP version is 2.0 or higher or the version policy is set to <see cref="F:System.Net.Http.HttpVersionPolicy.RequestVersionOrHigher" />.</span></span>

<span data-ttu-id="fa99b-752">- 或 -</span><span class="sxs-lookup"><span data-stu-id="fa99b-752">-or-</span></span>

<span data-ttu-id="fa99b-753">派生自 <see cref="T:System.Net.Http.HttpContent" /> 的自定义类不会重写 <see cref="M:System.Net.Http.HttpContent.SerializeToStream(System.IO.Stream,System.Net.TransportContext,System.Threading.CancellationToken)" /> 方法。</span><span class="sxs-lookup"><span data-stu-id="fa99b-753">The custom class derived from <see cref="T:System.Net.Http.HttpContent" /> does not override the <see cref="M:System.Net.Http.HttpContent.SerializeToStream(System.IO.Stream,System.Net.TransportContext,System.Threading.CancellationToken)" /> method.</span></span>

<span data-ttu-id="fa99b-754">- 或 -</span><span class="sxs-lookup"><span data-stu-id="fa99b-754">-or-</span></span>

<span data-ttu-id="fa99b-755">自定义 <see cref="T:System.Net.Http.HttpMessageHandler" /> 不会重写 <see cref="M:System.Net.Http.HttpMessageHandler.Send(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)" /> 方法。</span><span class="sxs-lookup"><span data-stu-id="fa99b-755">The custom <see cref="T:System.Net.Http.HttpMessageHandler" /> does not override the <see cref="M:System.Net.Http.HttpMessageHandler.Send(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)" /> method.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="fa99b-756">请求消息已由 <see cref="T:System.Net.Http.HttpClient" /> 实例发送。</span><span class="sxs-lookup"><span data-stu-id="fa99b-756">The request message was already sent by the <see cref="T:System.Net.Http.HttpClient" /> instance.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="fa99b-757">由于基础问题（如网络连接性、DNS 失败或服务器证书验证），请求失败。</span><span class="sxs-lookup"><span data-stu-id="fa99b-757">The request failed due to an underlying issue such as network connectivity, DNS failure, or server certificate validation.</span></span></exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException"><span data-ttu-id="fa99b-758">请求已被取消。</span><span class="sxs-lookup"><span data-stu-id="fa99b-758">The request was canceled.</span></span>

<span data-ttu-id="fa99b-759">- 或 -</span><span class="sxs-lookup"><span data-stu-id="fa99b-759">-or-</span></span>

<span data-ttu-id="fa99b-760">如果 <see cref="T:System.Threading.Tasks.TaskCanceledException" /> 异常会嵌套 <see cref="T:System.TimeoutException" />：请求因超时而失败。</span><span class="sxs-lookup"><span data-stu-id="fa99b-760">If the <see cref="T:System.Threading.Tasks.TaskCanceledException" /> exception nests the <see cref="T:System.TimeoutException" />: The request failed due to timeout.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="SendAsync">
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="fa99b-761">以异步操作发送 HTTP 请求。</span><span class="sxs-lookup"><span data-stu-id="fa99b-761">Send an HTTP request as an asynchronous operation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa99b-762">此操作不会阻止。</span><span class="sxs-lookup"><span data-stu-id="fa99b-762">This operation will not block.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; SendAsync (System.Net.Http.HttpRequestMessage request);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; SendAsync(class System.Net.Http.HttpRequestMessage request) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage)" />
      <MemberSignature Language="VB.NET" Value="Public Function SendAsync (request As HttpRequestMessage) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ SendAsync(System::Net::Http::HttpRequestMessage ^ request);" />
      <MemberSignature Language="F#" Value="override this.SendAsync : System.Net.Http.HttpRequestMessage -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.SendAsync request" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.Net.Http.HttpRequestMessage" />
      </Parameters>
      <Docs>
        <param name="request"><span data-ttu-id="fa99b-763">要发送的 HTTP 请求消息。</span><span class="sxs-lookup"><span data-stu-id="fa99b-763">The HTTP request message to send.</span></span></param>
        <summary><span data-ttu-id="fa99b-764">以异步操作发送 HTTP 请求。</span><span class="sxs-lookup"><span data-stu-id="fa99b-764">Send an HTTP request as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="fa99b-765">表示异步操作的任务对象。</span><span class="sxs-lookup"><span data-stu-id="fa99b-765">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa99b-766">此操作不会阻止。</span><span class="sxs-lookup"><span data-stu-id="fa99b-766">This operation will not block.</span></span> <span data-ttu-id="fa99b-767"><xref:System.Threading.Tasks.Task%601>在读取包含内容的整个响应后，将完成返回的对象。</span><span class="sxs-lookup"><span data-stu-id="fa99b-767">The returned <xref:System.Threading.Tasks.Task%601> object will complete once the entire response including content is read.</span></span>  

> [!NOTE]
> <span data-ttu-id="fa99b-768">在超时情况下，不同的 .NET 实现会引发不同的异常。</span><span class="sxs-lookup"><span data-stu-id="fa99b-768">In case of timeout, different exceptions are thrown on different .NET implementations.</span></span>
> - <span data-ttu-id="fa99b-769"><xref:System.Net.Http.HttpRequestException> 所有适用的 .NET Framework 版本都将引发。</span><span class="sxs-lookup"><span data-stu-id="fa99b-769"><xref:System.Net.Http.HttpRequestException> is thrown on all applicable .NET Framework versions.</span></span>
> - <span data-ttu-id="fa99b-770"><xref:System.Threading.Tasks.TaskCanceledException> 在所有适用的 .NET Core 版本上都不会引发任何内部异常。</span><span class="sxs-lookup"><span data-stu-id="fa99b-770"><xref:System.Threading.Tasks.TaskCanceledException> without any inner exception is thrown on all applicable .NET Core versions.</span></span>
> - <span data-ttu-id="fa99b-771"><xref:System.Threading.Tasks.TaskCanceledException><xref:System.TimeoutException>在 .net 5.0 和更高版本上，将引发嵌套的。</span><span class="sxs-lookup"><span data-stu-id="fa99b-771"><xref:System.Threading.Tasks.TaskCanceledException> that nests a <xref:System.TimeoutException> is thrown on .NET 5.0 and later versions.</span></span>
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="fa99b-772"><paramref name="request" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="fa99b-772">The <paramref name="request" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="fa99b-773">请求消息已由 <see cref="T:System.Net.Http.HttpClient" /> 实例发送。</span><span class="sxs-lookup"><span data-stu-id="fa99b-773">The request message was already sent by the <see cref="T:System.Net.Http.HttpClient" /> instance.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="fa99b-774">由于基础问题（如网络连接性、DNS 失败、服务器证书验证或超时），请求失败。</span><span class="sxs-lookup"><span data-stu-id="fa99b-774">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException"><span data-ttu-id="fa99b-775">仅限 .NET Core 和 .NET 5.0 及更高版本：请求因超时而失败。</span><span class="sxs-lookup"><span data-stu-id="fa99b-775">.NET Core and .NET 5.0 and later only: The request failed due to timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; SendAsync (System.Net.Http.HttpRequestMessage request, System.Net.Http.HttpCompletionOption completionOption);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; SendAsync(class System.Net.Http.HttpRequestMessage request, valuetype System.Net.Http.HttpCompletionOption completionOption) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage,System.Net.Http.HttpCompletionOption)" />
      <MemberSignature Language="VB.NET" Value="Public Function SendAsync (request As HttpRequestMessage, completionOption As HttpCompletionOption) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ SendAsync(System::Net::Http::HttpRequestMessage ^ request, System::Net::Http::HttpCompletionOption completionOption);" />
      <MemberSignature Language="F#" Value="override this.SendAsync : System.Net.Http.HttpRequestMessage * System.Net.Http.HttpCompletionOption -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.SendAsync (request, completionOption)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.Net.Http.HttpRequestMessage" />
        <Parameter Name="completionOption" Type="System.Net.Http.HttpCompletionOption" />
      </Parameters>
      <Docs>
        <param name="request"><span data-ttu-id="fa99b-776">要发送的 HTTP 请求消息。</span><span class="sxs-lookup"><span data-stu-id="fa99b-776">The HTTP request message to send.</span></span></param>
        <param name="completionOption"><span data-ttu-id="fa99b-777">操作应完成时（在响应可利用或在读取整个响应内容之后）。</span><span class="sxs-lookup"><span data-stu-id="fa99b-777">When the operation should complete (as soon as a response is available or after reading the whole response content).</span></span></param>
        <summary><span data-ttu-id="fa99b-778">以异步操作发送 HTTP 请求。</span><span class="sxs-lookup"><span data-stu-id="fa99b-778">Send an HTTP request as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="fa99b-779">表示异步操作的任务对象。</span><span class="sxs-lookup"><span data-stu-id="fa99b-779">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa99b-780">此操作不会阻止。</span><span class="sxs-lookup"><span data-stu-id="fa99b-780">This operation will not block.</span></span> <span data-ttu-id="fa99b-781">根据参数的值 `completionOption` ，返回的 <xref:System.Threading.Tasks.Task%601> 对象将在响应可用或包含内容的整个响应（包括内容）之后立即完成。</span><span class="sxs-lookup"><span data-stu-id="fa99b-781">Depending on the value of the `completionOption` parameter, the returned <xref:System.Threading.Tasks.Task%601> object will complete as soon as a response is available or the entire response including content is read.</span></span>  

> [!NOTE]
> <span data-ttu-id="fa99b-782">在超时情况下，不同的 .NET 实现会引发不同的异常。</span><span class="sxs-lookup"><span data-stu-id="fa99b-782">In case of timeout, different exceptions are thrown on different .NET implementations.</span></span>
> - <span data-ttu-id="fa99b-783"><xref:System.Net.Http.HttpRequestException> 所有适用的 .NET Framework 版本都将引发。</span><span class="sxs-lookup"><span data-stu-id="fa99b-783"><xref:System.Net.Http.HttpRequestException> is thrown on all applicable .NET Framework versions.</span></span>
> - <span data-ttu-id="fa99b-784"><xref:System.Threading.Tasks.TaskCanceledException> 在所有适用的 .NET Core 版本上都不会引发任何内部异常。</span><span class="sxs-lookup"><span data-stu-id="fa99b-784"><xref:System.Threading.Tasks.TaskCanceledException> without any inner exception is thrown on all applicable .NET Core versions.</span></span>
> - <span data-ttu-id="fa99b-785"><xref:System.Threading.Tasks.TaskCanceledException><xref:System.TimeoutException>在 .net 5.0 和更高版本上，将引发嵌套的。</span><span class="sxs-lookup"><span data-stu-id="fa99b-785"><xref:System.Threading.Tasks.TaskCanceledException> that nests a <xref:System.TimeoutException> is thrown on .NET 5.0 and later versions.</span></span>
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="fa99b-786"><paramref name="request" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="fa99b-786">The <paramref name="request" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="fa99b-787">请求消息已由 <see cref="T:System.Net.Http.HttpClient" /> 实例发送。</span><span class="sxs-lookup"><span data-stu-id="fa99b-787">The request message was already sent by the <see cref="T:System.Net.Http.HttpClient" /> instance.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="fa99b-788">由于基础问题（如网络连接性、DNS 失败、服务器证书验证或超时），请求失败。</span><span class="sxs-lookup"><span data-stu-id="fa99b-788">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException"><span data-ttu-id="fa99b-789">仅限 .NET Core 和 .NET 5.0 及更高版本：请求因超时而失败。</span><span class="sxs-lookup"><span data-stu-id="fa99b-789">.NET Core and .NET 5.0 and later only: The request failed due to timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; SendAsync (System.Net.Http.HttpRequestMessage request, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; SendAsync(class System.Net.Http.HttpRequestMessage request, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function SendAsync (request As HttpRequestMessage, cancellationToken As CancellationToken) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ SendAsync(System::Net::Http::HttpRequestMessage ^ request, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="override this.SendAsync : System.Net.Http.HttpRequestMessage * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.SendAsync (request, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.Net.Http.HttpRequestMessage" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="request"><span data-ttu-id="fa99b-790">要发送的 HTTP 请求消息。</span><span class="sxs-lookup"><span data-stu-id="fa99b-790">The HTTP request message to send.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="fa99b-791">取消操作的取消标记。</span><span class="sxs-lookup"><span data-stu-id="fa99b-791">The cancellation token to cancel operation.</span></span></param>
        <summary><span data-ttu-id="fa99b-792">以异步操作发送 HTTP 请求。</span><span class="sxs-lookup"><span data-stu-id="fa99b-792">Send an HTTP request as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="fa99b-793">表示异步操作的任务对象。</span><span class="sxs-lookup"><span data-stu-id="fa99b-793">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa99b-794">此操作不会阻止。</span><span class="sxs-lookup"><span data-stu-id="fa99b-794">This operation will not block.</span></span> <span data-ttu-id="fa99b-795"><xref:System.Threading.Tasks.Task%601>在读取包含内容的整个响应后，将完成返回的对象。</span><span class="sxs-lookup"><span data-stu-id="fa99b-795">The returned <xref:System.Threading.Tasks.Task%601> object will complete once the entire response including content is read.</span></span>  

> [!NOTE]
> <span data-ttu-id="fa99b-796">在超时情况下，不同的 .NET 实现会引发不同的异常。</span><span class="sxs-lookup"><span data-stu-id="fa99b-796">In case of timeout, different exceptions are thrown on different .NET implementations.</span></span>
> - <span data-ttu-id="fa99b-797"><xref:System.Net.Http.HttpRequestException> 所有适用的 .NET Framework 版本都将引发。</span><span class="sxs-lookup"><span data-stu-id="fa99b-797"><xref:System.Net.Http.HttpRequestException> is thrown on all applicable .NET Framework versions.</span></span>
> - <span data-ttu-id="fa99b-798"><xref:System.Threading.Tasks.TaskCanceledException> 在所有适用的 .NET Core 版本上都不会引发任何内部异常。</span><span class="sxs-lookup"><span data-stu-id="fa99b-798"><xref:System.Threading.Tasks.TaskCanceledException> without any inner exception is thrown on all applicable .NET Core versions.</span></span>
> - <span data-ttu-id="fa99b-799"><xref:System.Threading.Tasks.TaskCanceledException><xref:System.TimeoutException>在 .net 5.0 和更高版本上，将引发嵌套的。</span><span class="sxs-lookup"><span data-stu-id="fa99b-799"><xref:System.Threading.Tasks.TaskCanceledException> that nests a <xref:System.TimeoutException> is thrown on .NET 5.0 and later versions.</span></span>
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="fa99b-800"><paramref name="request" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="fa99b-800">The <paramref name="request" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="fa99b-801">请求消息已由 <see cref="T:System.Net.Http.HttpClient" /> 实例发送。</span><span class="sxs-lookup"><span data-stu-id="fa99b-801">The request message was already sent by the <see cref="T:System.Net.Http.HttpClient" /> instance.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="fa99b-802">由于基础问题（如网络连接性、DNS 失败、服务器证书验证或超时），请求失败。</span><span class="sxs-lookup"><span data-stu-id="fa99b-802">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException"><span data-ttu-id="fa99b-803">仅限 .NET Core 和 .NET 5.0 及更高版本：请求因超时而失败。</span><span class="sxs-lookup"><span data-stu-id="fa99b-803">.NET Core and .NET 5.0 and later only: The request failed due to timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; SendAsync (System.Net.Http.HttpRequestMessage request, System.Net.Http.HttpCompletionOption completionOption, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; SendAsync(class System.Net.Http.HttpRequestMessage request, valuetype System.Net.Http.HttpCompletionOption completionOption, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function SendAsync (request As HttpRequestMessage, completionOption As HttpCompletionOption, cancellationToken As CancellationToken) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Http::HttpResponseMessage ^&gt; ^ SendAsync(System::Net::Http::HttpRequestMessage ^ request, System::Net::Http::HttpCompletionOption completionOption, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="override this.SendAsync : System.Net.Http.HttpRequestMessage * System.Net.Http.HttpCompletionOption * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="httpClient.SendAsync (request, completionOption, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.Net.Http.HttpRequestMessage" />
        <Parameter Name="completionOption" Type="System.Net.Http.HttpCompletionOption" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="request"><span data-ttu-id="fa99b-804">要发送的 HTTP 请求消息。</span><span class="sxs-lookup"><span data-stu-id="fa99b-804">The HTTP request message to send.</span></span></param>
        <param name="completionOption"><span data-ttu-id="fa99b-805">操作应完成时（在响应可利用或在读取整个响应内容之后）。</span><span class="sxs-lookup"><span data-stu-id="fa99b-805">When the operation should complete (as soon as a response is available or after reading the whole response content).</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="fa99b-806">取消操作的取消标记。</span><span class="sxs-lookup"><span data-stu-id="fa99b-806">The cancellation token to cancel operation.</span></span></param>
        <summary><span data-ttu-id="fa99b-807">以异步操作发送 HTTP 请求。</span><span class="sxs-lookup"><span data-stu-id="fa99b-807">Send an HTTP request as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="fa99b-808">表示异步操作的任务对象。</span><span class="sxs-lookup"><span data-stu-id="fa99b-808">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa99b-809">此操作不会阻止。</span><span class="sxs-lookup"><span data-stu-id="fa99b-809">This operation will not block.</span></span> <span data-ttu-id="fa99b-810">根据参数的值 `completionOption` ，返回的 <xref:System.Threading.Tasks.Task%601> 对象将在响应可用或包含内容的整个响应（包括内容）之后立即完成。</span><span class="sxs-lookup"><span data-stu-id="fa99b-810">Depending on the value of the `completionOption` parameter, the returned <xref:System.Threading.Tasks.Task%601> object will complete as soon as a response is available or the entire response including content is read.</span></span>  

> [!NOTE]
> <span data-ttu-id="fa99b-811">在超时情况下，不同的 .NET 实现会引发不同的异常。</span><span class="sxs-lookup"><span data-stu-id="fa99b-811">In case of timeout, different exceptions are thrown on different .NET implementations.</span></span>
> - <span data-ttu-id="fa99b-812"><xref:System.Net.Http.HttpRequestException> 所有适用的 .NET Framework 版本都将引发。</span><span class="sxs-lookup"><span data-stu-id="fa99b-812"><xref:System.Net.Http.HttpRequestException> is thrown on all applicable .NET Framework versions.</span></span>
> - <span data-ttu-id="fa99b-813"><xref:System.Threading.Tasks.TaskCanceledException> 在所有适用的 .NET Core 版本上都不会引发任何内部异常。</span><span class="sxs-lookup"><span data-stu-id="fa99b-813"><xref:System.Threading.Tasks.TaskCanceledException> without any inner exception is thrown on all applicable .NET Core versions.</span></span>
> - <span data-ttu-id="fa99b-814"><xref:System.Threading.Tasks.TaskCanceledException><xref:System.TimeoutException>在 .net 5.0 和更高版本上，将引发嵌套的。</span><span class="sxs-lookup"><span data-stu-id="fa99b-814"><xref:System.Threading.Tasks.TaskCanceledException> that nests a <xref:System.TimeoutException> is thrown on .NET 5.0 and later versions.</span></span>
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="fa99b-815"><paramref name="request" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="fa99b-815">The <paramref name="request" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="fa99b-816">请求消息已由 <see cref="T:System.Net.Http.HttpClient" /> 实例发送。</span><span class="sxs-lookup"><span data-stu-id="fa99b-816">The request message was already sent by the <see cref="T:System.Net.Http.HttpClient" /> instance.</span></span></exception>
        <exception cref="T:System.Net.Http.HttpRequestException"><span data-ttu-id="fa99b-817">由于基础问题（如网络连接性、DNS 失败、服务器证书验证或超时），请求失败。</span><span class="sxs-lookup"><span data-stu-id="fa99b-817">The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</span></span></exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException"><span data-ttu-id="fa99b-818">仅限 .NET Core 和 .NET 5.0 及更高版本：请求因超时而失败。</span><span class="sxs-lookup"><span data-stu-id="fa99b-818">.NET Core and .NET 5.0 and later only: The request failed due to timeout.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Timeout">
      <MemberSignature Language="C#" Value="public TimeSpan Timeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan Timeout" />
      <MemberSignature Language="DocId" Value="P:System.Net.Http.HttpClient.Timeout" />
      <MemberSignature Language="VB.NET" Value="Public Property Timeout As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan Timeout { TimeSpan get(); void set(TimeSpan value); };" />
      <MemberSignature Language="F#" Value="member this.Timeout : TimeSpan with get, set" Usage="System.Net.Http.HttpClient.Timeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="fa99b-819">获取或设置请求超时前等待的时间跨度。</span><span class="sxs-lookup"><span data-stu-id="fa99b-819">Gets or sets the timespan to wait before the request times out.</span></span></summary>
        <value><span data-ttu-id="fa99b-820">请求超时前等待的时间跨度。</span><span class="sxs-lookup"><span data-stu-id="fa99b-820">The timespan to wait before the request times out.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa99b-821">默认值是 100,000 毫秒（100 秒）。</span><span class="sxs-lookup"><span data-stu-id="fa99b-821">The default value is 100,000 milliseconds (100 seconds).</span></span>  
  
 <span data-ttu-id="fa99b-822">若要设置无限超时，请将属性值设置为 <xref:System.Threading.Timeout.InfiniteTimeSpan> 。</span><span class="sxs-lookup"><span data-stu-id="fa99b-822">To set an infinite timeout, set the property value to <xref:System.Threading.Timeout.InfiniteTimeSpan>.</span></span>  
  
 <span data-ttu-id="fa99b-823">域名系统 (DNS) 查询可能需要长达15秒钟的时间来返回或超时。如果你的请求包含需要解析的主机名，并且你将其设置 <xref:System.Net.Http.HttpClient.Timeout%2A> 为小于15秒的值，则可能需要15秒或更长时间，然后才会 <xref:System.Net.WebException> 引发以指示请求超时。</span><span class="sxs-lookup"><span data-stu-id="fa99b-823">A Domain Name System (DNS) query may take up to 15 seconds to return or time out. If your request contains a host name that requires resolution and you set <xref:System.Net.Http.HttpClient.Timeout%2A> to a value less than 15 seconds, it may take 15 seconds or more before a <xref:System.Net.WebException> is thrown to indicate a timeout on your request.</span></span>  
  
 <span data-ttu-id="fa99b-824">使用此实例的所有请求都将使用相同的超时值 <xref:System.Net.Http.HttpClient> 。</span><span class="sxs-lookup"><span data-stu-id="fa99b-824">The same timeout will apply for all requests using this <xref:System.Net.Http.HttpClient> instance.</span></span>  <span data-ttu-id="fa99b-825">你还可以使用任务上的为单个请求设置不同的超时 <xref:System.Threading.CancellationTokenSource> 。</span><span class="sxs-lookup"><span data-stu-id="fa99b-825">You may also set different timeouts for individual requests using a <xref:System.Threading.CancellationTokenSource> on a task.</span></span> <span data-ttu-id="fa99b-826">请注意，只会应用两个超时中较短的一个。</span><span class="sxs-lookup"><span data-stu-id="fa99b-826">Note that only the shorter of the two timeouts will apply.</span></span>  
  
 ## Examples
 
 <span data-ttu-id="fa99b-827">下面的示例设置 `Timeout` 属性。</span><span class="sxs-lookup"><span data-stu-id="fa99b-827">The following example sets the `Timeout` property.</span></span>
  
```csharp
HttpClient httpClient = new HttpClient();
httpClient.Timeout = TimeSpan.FromMinutes(10);
```

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="fa99b-828">指定的超时值小于或等于零，而不是 <see cref="F:System.Threading.Timeout.InfiniteTimeSpan" />。</span><span class="sxs-lookup"><span data-stu-id="fa99b-828">The timeout specified is less than or equal to zero and is not <see cref="F:System.Threading.Timeout.InfiniteTimeSpan" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="fa99b-829">已在当前实例上启动了一个操作。</span><span class="sxs-lookup"><span data-stu-id="fa99b-829">An operation has already been started on the current instance.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="fa99b-830">已释放当前实例。</span><span class="sxs-lookup"><span data-stu-id="fa99b-830">The current instance has been disposed.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>
