<Type Name="ServiceSecurityContext" FullName="System.ServiceModel.ServiceSecurityContext">
  <Metadata><Meta Name="ms.openlocfilehash" Value="fece978a9f1173faba652158fe1540bc29fe1f0d" /><Meta Name="ms.sourcegitcommit" Value="c982ad9e10a242d90f1e631b5981570f9e5d9f34" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/10/2020" /><Meta Name="ms.locfileid" Value="89900855" /></Metadata><TypeSignature Language="C#" Value="public class ServiceSecurityContext" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ServiceSecurityContext extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.ServiceSecurityContext" />
  <TypeSignature Language="VB.NET" Value="Public Class ServiceSecurityContext" />
  <TypeSignature Language="C++ CLI" Value="public ref class ServiceSecurityContext" />
  <TypeSignature Language="F#" Value="type ServiceSecurityContext = class" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>表示远程方的安全上下文。 在客户端，表示服务标识；而在服务端，则表示客户端标识。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此数据是消息的 <xref:System.ServiceModel.Security.SecurityMessageProperty> 的一部分。  
  
 使用此类可在运行时获取有关远程 *安全上下文* 的信息。 当客户端成功通过身份验证并获得访问某个方法的授权时，将会创建安全上下文。 当某个消息成功通过身份验证并获得授权时，即可从此类的实例中获取客户端和当前服务实例的安全信息。  
  
 您可以从 <xref:System.ServiceModel.ServiceSecurityContext> 类的 <xref:System.ServiceModel.OperationContext.Current%2A> 属性检索 <xref:System.ServiceModel.OperationContext> 的实例，或者在服务操作方法中使用该实例，如下面的示例所示。  
  
## <a name="parsing-a-claimset"></a>分析 ClaimSet  
 该类通常用于检索当前声明集，以便在访问方法时对客户端进行标识和授权。 <xref:System.IdentityModel.Claims.ClaimSet> 类包含 <xref:System.IdentityModel.Claims.Claim> 对象的集合，您可以分析每个对象以确定是否存在特定的声明。 如果提供的是指定的声明，即可获得授权。 此功能通过重写 <xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A> 类的 <xref:System.ServiceModel.ServiceAuthorizationManager> 方法提供。  有关完整示例，请参阅 [授权策略](/dotnet/framework/wcf/samples/authorization-policy)。  
  
## <a name="cookie-mode-and-isauthenticated"></a>Cookie 模式和 IsAuthenticated  
 请注意，在某些情况下，即使远程客户端经身份验证为匿名用户，<xref:System.Security.Principal.IIdentity.IsAuthenticated%2A> 接口的 <xref:System.Security.Principal.IIdentity> 属性仍将返回 `true`。  (<xref:System.ServiceModel.ServiceSecurityContext.PrimaryIdentity%2A> 属性返回接口的实现 <xref:System.Security.Principal.IIdentity> 。 ) 以下情况必须为 true 才能出现此情况：  
  
-   服务使用的是 Windows 身份验证。  
  
-   服务允许匿名登录。  
  
-   绑定是[ &lt; customBinding &gt; ](/dotnet/framework/configure-apps/file-schema/wcf/custombinding)。  
  
-   自定义绑定包括 `<security>` 元素。  
  
-   `<security>`元素包含属性设置为的[ &lt; secureConversationBootstrap &gt; ](/dotnet/framework/configure-apps/file-schema/wcf/secureconversationbootstrap) `requireSecurityContextCancellation` `false` 。  
  
   
  
## Examples  
 下面的示例使用 <xref:System.ServiceModel.ServiceSecurityContext> 类提供有关当前安全上下文的信息。 此代码创建一个 <xref:System.IO.StreamWriter> 类的实例，以将此信息写入文件。  
  
 [!code-csharp[ServiceSecurityContext#1](~/samples/snippets/csharp/VS_Snippets_CFX/servicesecuritycontext/cs/source.cs#1)]
 [!code-vb[ServiceSecurityContext#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/servicesecuritycontext/vb/source.vb#1)]  
  
 下面的示例演示使用 <xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A> 分析声明集的 <xref:System.ServiceModel.ServiceSecurityContext> 方法的实现。  
  
 [!code-csharp[ServiceSecurityContext#2](~/samples/snippets/csharp/VS_Snippets_CFX/servicesecuritycontext/cs/source.cs#2)]
 [!code-vb[ServiceSecurityContext#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/servicesecuritycontext/vb/source.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="P:System.ServiceModel.OperationContext.Current" />
    <altmember cref="T:System.ServiceModel.OperationContext" />
    <altmember cref="T:System.IdentityModel.Claims.Claim" />
    <altmember cref="T:System.IdentityModel.Claims.ClaimSet" />
    <altmember cref="T:System.ServiceModel.ServiceAuthorizationManager" />
    <related type="Article" href="/dotnet/framework/wcf/how-to-examine-the-security-context">如何：检查安全上下文</related>
    <related type="Article" href="/dotnet/framework/wcf/samples/authorization-policy">授权策略</related>
    <related type="Article" href="/dotnet/framework/wcf/securing-services">保证服务的安全</related>
    <related type="Article" href="/dotnet/framework/wcf/feature-details/managing-claims-and-authorization-with-the-identity-model">使用标识模型管理声明和授权</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.ServiceModel.ServiceSecurityContext" /> 类的新实例。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ServiceSecurityContext (System.Collections.ObjectModel.ReadOnlyCollection&lt;System.IdentityModel.Policy.IAuthorizationPolicy&gt; authorizationPolicies);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.IdentityModel.Policy.IAuthorizationPolicy&gt; authorizationPolicies) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.ServiceSecurityContext.#ctor(System.Collections.ObjectModel.ReadOnlyCollection{System.IdentityModel.Policy.IAuthorizationPolicy})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (authorizationPolicies As ReadOnlyCollection(Of IAuthorizationPolicy))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ServiceSecurityContext(System::Collections::ObjectModel::ReadOnlyCollection&lt;System::IdentityModel::Policy::IAuthorizationPolicy ^&gt; ^ authorizationPolicies);" />
      <MemberSignature Language="F#" Value="new System.ServiceModel.ServiceSecurityContext : System.Collections.ObjectModel.ReadOnlyCollection&lt;System.IdentityModel.Policy.IAuthorizationPolicy&gt; -&gt; System.ServiceModel.ServiceSecurityContext" Usage="new System.ServiceModel.ServiceSecurityContext authorizationPolicies" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="authorizationPolicies" Type="System.Collections.ObjectModel.ReadOnlyCollection&lt;System.IdentityModel.Policy.IAuthorizationPolicy&gt;" />
      </Parameters>
      <Docs>
        <param name="authorizationPolicies">一个包含授权策略的类型为 <see cref="T:System.IdentityModel.Policy.IAuthorizationPolicy" /> 的 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />。</param>
        <summary>使用策略对象集合初始化 <see cref="T:System.ServiceModel.ServiceSecurityContext" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此构造函数使用默认的链式策略引擎。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ServiceSecurityContext (System.IdentityModel.Policy.AuthorizationContext authorizationContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IdentityModel.Policy.AuthorizationContext authorizationContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.ServiceSecurityContext.#ctor(System.IdentityModel.Policy.AuthorizationContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (authorizationContext As AuthorizationContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ServiceSecurityContext(System::IdentityModel::Policy::AuthorizationContext ^ authorizationContext);" />
      <MemberSignature Language="F#" Value="new System.ServiceModel.ServiceSecurityContext : System.IdentityModel.Policy.AuthorizationContext -&gt; System.ServiceModel.ServiceSecurityContext" Usage="new System.ServiceModel.ServiceSecurityContext authorizationContext" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="authorizationContext" Type="System.IdentityModel.Policy.AuthorizationContext" />
      </Parameters>
      <Docs>
        <param name="authorizationContext">一个包含授权信息的 <see cref="T:System.IdentityModel.Policy.AuthorizationContext" />。</param>
        <summary>使用指定的授权参数初始化 <see cref="T:System.ServiceModel.ServiceSecurityContext" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此构造函数通常在应用程序运行自己的链式策略引擎的情况下使用，从而生成 <xref:System.IdentityModel.Policy.AuthorizationContext>。 对于默认策略引擎，请使用将 <xref:System.IdentityModel.Policy.IAuthorizationPolicy> 集合作为参数的构造函数。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ServiceSecurityContext (System.IdentityModel.Policy.AuthorizationContext authorizationContext, System.Collections.ObjectModel.ReadOnlyCollection&lt;System.IdentityModel.Policy.IAuthorizationPolicy&gt; authorizationPolicies);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IdentityModel.Policy.AuthorizationContext authorizationContext, class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.IdentityModel.Policy.IAuthorizationPolicy&gt; authorizationPolicies) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.ServiceSecurityContext.#ctor(System.IdentityModel.Policy.AuthorizationContext,System.Collections.ObjectModel.ReadOnlyCollection{System.IdentityModel.Policy.IAuthorizationPolicy})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (authorizationContext As AuthorizationContext, authorizationPolicies As ReadOnlyCollection(Of IAuthorizationPolicy))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ServiceSecurityContext(System::IdentityModel::Policy::AuthorizationContext ^ authorizationContext, System::Collections::ObjectModel::ReadOnlyCollection&lt;System::IdentityModel::Policy::IAuthorizationPolicy ^&gt; ^ authorizationPolicies);" />
      <MemberSignature Language="F#" Value="new System.ServiceModel.ServiceSecurityContext : System.IdentityModel.Policy.AuthorizationContext * System.Collections.ObjectModel.ReadOnlyCollection&lt;System.IdentityModel.Policy.IAuthorizationPolicy&gt; -&gt; System.ServiceModel.ServiceSecurityContext" Usage="new System.ServiceModel.ServiceSecurityContext (authorizationContext, authorizationPolicies)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="authorizationContext" Type="System.IdentityModel.Policy.AuthorizationContext" />
        <Parameter Name="authorizationPolicies" Type="System.Collections.ObjectModel.ReadOnlyCollection&lt;System.IdentityModel.Policy.IAuthorizationPolicy&gt;" />
      </Parameters>
      <Docs>
        <param name="authorizationContext">一个包含授权设置的 <see cref="T:System.IdentityModel.Policy.AuthorizationContext" />。</param>
        <param name="authorizationPolicies">一个包含授权策略的类型为 <see cref="T:System.IdentityModel.Policy.IAuthorizationPolicy" /> 的 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />。</param>
        <summary>使用指定的授权参数和策略集合初始化 <see cref="T:System.ServiceModel.ServiceSecurityContext" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Anonymous">
      <MemberSignature Language="C#" Value="public static System.ServiceModel.ServiceSecurityContext Anonymous { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.ServiceModel.ServiceSecurityContext Anonymous" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.ServiceSecurityContext.Anonymous" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Anonymous As ServiceSecurityContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::ServiceModel::ServiceSecurityContext ^ Anonymous { System::ServiceModel::ServiceSecurityContext ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Anonymous : System.ServiceModel.ServiceSecurityContext" Usage="System.ServiceModel.ServiceSecurityContext.Anonymous" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.ServiceSecurityContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>返回一个 <see cref="T:System.ServiceModel.ServiceSecurityContext" /> 类的实例，该实例包含空的声明集合、标识和通常用于表示匿名方的其他上下文数据。</summary>
        <value><see cref="T:System.ServiceModel.ServiceSecurityContext" /> 的空实例。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AuthorizationContext">
      <MemberSignature Language="C#" Value="public System.IdentityModel.Policy.AuthorizationContext AuthorizationContext { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IdentityModel.Policy.AuthorizationContext AuthorizationContext" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.ServiceSecurityContext.AuthorizationContext" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AuthorizationContext As AuthorizationContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IdentityModel::Policy::AuthorizationContext ^ AuthorizationContext { System::IdentityModel::Policy::AuthorizationContext ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AuthorizationContext : System.IdentityModel.Policy.AuthorizationContext" Usage="System.ServiceModel.ServiceSecurityContext.AuthorizationContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Policy.AuthorizationContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取此类的实例的授权信息。  <see cref="T:System.IdentityModel.Policy.AuthorizationContext" /> 包含一个可供应用程序询问和检索远程方信息的 <see cref="T:System.IdentityModel.Claims.ClaimSet" /> 集合。</summary>
        <value>一个包含授权设置的 <see cref="T:System.IdentityModel.Policy.AuthorizationContext" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AuthorizationPolicies">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.IdentityModel.Policy.IAuthorizationPolicy&gt; AuthorizationPolicies { get; }" FrameworkAlternate="netframework-3.0;netframework-3.5" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.IdentityModel.Policy.IAuthorizationPolicy&gt; AuthorizationPolicies" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.ServiceSecurityContext.AuthorizationPolicies" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AuthorizationPolicies As ReadOnlyCollection(Of IAuthorizationPolicy)" FrameworkAlternate="netframework-3.0;netframework-3.5" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::ObjectModel::ReadOnlyCollection&lt;System::IdentityModel::Policy::IAuthorizationPolicy ^&gt; ^ AuthorizationPolicies { System::Collections::ObjectModel::ReadOnlyCollection&lt;System::IdentityModel::Policy::IAuthorizationPolicy ^&gt; ^ get(); };" FrameworkAlternate="netframework-3.0;netframework-3.5" />
      <MemberSignature Language="F#" Value="member this.AuthorizationPolicies : System.Collections.ObjectModel.ReadOnlyCollection&lt;System.IdentityModel.Policy.IAuthorizationPolicy&gt;" Usage="System.ServiceModel.ServiceSecurityContext.AuthorizationPolicies" FrameworkAlternate="netframework-3.0;netframework-3.5" />
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.IdentityModel.Policy.IAuthorizationPolicy&gt; AuthorizationPolicies { get; set; }" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
      <MemberSignature Language="VB.NET" Value="Public Property AuthorizationPolicies As ReadOnlyCollection(Of IAuthorizationPolicy)" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::ObjectModel::ReadOnlyCollection&lt;System::IdentityModel::Policy::IAuthorizationPolicy ^&gt; ^ AuthorizationPolicies { System::Collections::ObjectModel::ReadOnlyCollection&lt;System::IdentityModel::Policy::IAuthorizationPolicy ^&gt; ^ get(); void set(System::Collections::ObjectModel::ReadOnlyCollection&lt;System::IdentityModel::Policy::IAuthorizationPolicy ^&gt; ^ value); };" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="member this.AuthorizationPolicies : System.Collections.ObjectModel.ReadOnlyCollection&lt;System.IdentityModel.Policy.IAuthorizationPolicy&gt; with get, set" Usage="System.ServiceModel.ServiceSecurityContext.AuthorizationPolicies" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.IdentityModel.Policy.IAuthorizationPolicy&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取与此类的实例关联的策略集合。</summary>
        <value>一个包含策略的类型为 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 的 <see cref="T:System.IdentityModel.Policy.IAuthorizationPolicy" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 [使用标识模型管理声明和授权](/dotnet/framework/wcf/feature-details/managing-claims-and-authorization-with-the-identity-model)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public static System.ServiceModel.ServiceSecurityContext Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.ServiceModel.ServiceSecurityContext Current" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.ServiceSecurityContext.Current" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Current As ServiceSecurityContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::ServiceModel::ServiceSecurityContext ^ Current { System::ServiceModel::ServiceSecurityContext ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Current : System.ServiceModel.ServiceSecurityContext" Usage="System.ServiceModel.ServiceSecurityContext.Current" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.ServiceSecurityContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取当前 <see cref="T:System.ServiceModel.ServiceSecurityContext" />。</summary>
        <value>当前的 <see cref="T:System.ServiceModel.ServiceSecurityContext" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsAnonymous">
      <MemberSignature Language="C#" Value="public bool IsAnonymous { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAnonymous" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.ServiceSecurityContext.IsAnonymous" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsAnonymous As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsAnonymous { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsAnonymous : bool" Usage="System.ServiceModel.ServiceSecurityContext.IsAnonymous" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示当前客户端是否已向服务提供凭据。</summary>
        <value>如果客户端已提供凭据，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PrimaryIdentity">
      <MemberSignature Language="C#" Value="public System.Security.Principal.IIdentity PrimaryIdentity { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Principal.IIdentity PrimaryIdentity" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.ServiceSecurityContext.PrimaryIdentity" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PrimaryIdentity As IIdentity" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::Principal::IIdentity ^ PrimaryIdentity { System::Security::Principal::IIdentity ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.PrimaryIdentity : System.Security.Principal.IIdentity" Usage="System.ServiceModel.ServiceSecurityContext.PrimaryIdentity" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Principal.IIdentity</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取与当前设置关联的主标识。</summary>
        <value>与当前设置关联的 <see cref="T:System.Security.Principal.IIdentity" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 主标识可从用于对当前用户进行身份验证的凭据中获得。 如果此凭据是 X.509 证书，则标识为主题名称和指纹（按此顺序）的串联。 主题名称与指纹之间用分号和空格分隔。 如果此证书的主题字段为 `null`，则主标识将只包含分号、空格和指纹。  
  
 当双工消息交换模式和 Kerberos 直接身份验证一起使用时，此属性在回调上变为空，且 Claimset 也为空。 使用 *SspiNegotiated* 而不是 Kerberos 时不会发生这种情况。  
  
 Kerberos 请求程序令牌仅用于在客户端上表示服务。 此令牌生成的授权策略包含一个声明和一个 SPN；因此，声明中没有标识。 大多数情况下不存在任何问题，因为 <xref:System.ServiceModel.ServiceSecurityContext> 没有在客户端上使用。 在回调过程的双工方案中，如果回调检查此属性，则它可以获取一个匿名标识。  
  
   
  
## Examples  
 有关使用 `PrimaryIdentity` 属性对使用证书的客户端进行授权的示例，请参阅 [如何：检查安全上下文](/dotnet/framework/wcf/how-to-examine-the-security-context)。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Security.Permissions.PrincipalPermissionAttribute" />
        <altmember cref="T:System.Security.Principal.IPrincipal" />
        <related type="Article" href="/dotnet/framework/wcf/how-to-examine-the-security-context">如何：检查安全上下文</related>
      </Docs>
    </Member>
    <Member MemberName="WindowsIdentity">
      <MemberSignature Language="C#" Value="public System.Security.Principal.WindowsIdentity WindowsIdentity { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Principal.WindowsIdentity WindowsIdentity" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.ServiceSecurityContext.WindowsIdentity" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property WindowsIdentity As WindowsIdentity" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::Principal::WindowsIdentity ^ WindowsIdentity { System::Security::Principal::WindowsIdentity ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.WindowsIdentity : System.Security.Principal.WindowsIdentity" Usage="System.ServiceModel.ServiceSecurityContext.WindowsIdentity" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Principal.WindowsIdentity</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取当前设置的 Windows 标识。</summary>
        <value>一个表示 Windows 域用户的 <see cref="T:System.Security.Principal.WindowsIdentity" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果远程方无法与 Windows 帐户关联，则 <xref:System.Security.Principal.WindowsIdentity.IsAnonymous%2A> 属性将设置为 `true`。  
  
   
  
## Examples  
 <xref:System.Security.Permissions.PrincipalPermissionAttribute>  
  
 <xref:System.Security.Principal.IPrincipal>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
