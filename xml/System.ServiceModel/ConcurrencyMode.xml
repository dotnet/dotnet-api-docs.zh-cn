<Type Name="ConcurrencyMode" FullName="System.ServiceModel.ConcurrencyMode">
  <Metadata><Meta Name="ms.openlocfilehash" Value="cca9d43f5d75d4ca5e1b48f649086195ff3502e1" /><Meta Name="ms.sourcegitcommit" Value="c982ad9e10a242d90f1e631b5981570f9e5d9f34" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/10/2020" /><Meta Name="ms.locfileid" Value="70419873" /></Metadata><TypeSignature Language="C#" Value="public enum ConcurrencyMode" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed ConcurrencyMode extends System.Enum" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.ConcurrencyMode" />
  <TypeSignature Language="VB.NET" Value="Public Enum ConcurrencyMode" />
  <TypeSignature Language="C++ CLI" Value="public enum class ConcurrencyMode" />
  <TypeSignature Language="F#" Value="type ConcurrencyMode = " />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Docs>
    <summary><span data-ttu-id="87054-101">指定服务类是支持单线程还是多线程操作模式。</span><span class="sxs-lookup"><span data-stu-id="87054-101">Specifies whether a service class supports single-threaded or multi-threaded modes of operation.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87054-102"><xref:System.ServiceModel.ConcurrencyMode> 与 <xref:System.ServiceModel.ServiceBehaviorAttribute.ConcurrencyMode%2A> 属性一起使用，可指定服务类是支持单线程还是多线程操作模式。</span><span class="sxs-lookup"><span data-stu-id="87054-102"><xref:System.ServiceModel.ConcurrencyMode> is used in conjunction with the <xref:System.ServiceModel.ServiceBehaviorAttribute.ConcurrencyMode%2A> property to specify whether a service class supports single-threaded or multi-threaded modes of operation.</span></span> <span data-ttu-id="87054-103">单线程操作可以是可重入操作，也可以是不可重入操作。</span><span class="sxs-lookup"><span data-stu-id="87054-103">A single-threaded operation can be either reentrant or non-reentrant.</span></span>  
  
 <span data-ttu-id="87054-104">下表显示 Windows Communication Foundation (WCF) 允许在另一个操作正在进行时调用操作的时间，具体取决于 <xref:System.ServiceModel.ConcurrencyMode> 。</span><span class="sxs-lookup"><span data-stu-id="87054-104">The following table shows when Windows Communication Foundation (WCF) permits an operation to be invoked while another one is in progress, depending upon the <xref:System.ServiceModel.ConcurrencyMode>.</span></span>  
  
|<span data-ttu-id="87054-105">ConcurrencyMode 值</span><span class="sxs-lookup"><span data-stu-id="87054-105">ConcurrencyMode Value</span></span>|<span data-ttu-id="87054-106">是否允许调用新操作？</span><span class="sxs-lookup"><span data-stu-id="87054-106">Can a new operation be invoked?</span></span>|  
|---------------------------|-------------------------------------|  
|<span data-ttu-id="87054-107">Single</span><span class="sxs-lookup"><span data-stu-id="87054-107">Single</span></span>|<span data-ttu-id="87054-108">从不。</span><span class="sxs-lookup"><span data-stu-id="87054-108">Never.</span></span>|  
|<span data-ttu-id="87054-109">是非</span><span class="sxs-lookup"><span data-stu-id="87054-109">Reentrant</span></span>|<span data-ttu-id="87054-110">仅在调用其他服务或回调时。</span><span class="sxs-lookup"><span data-stu-id="87054-110">Only while invoking another service or a callback.</span></span>|  
|<span data-ttu-id="87054-111">多种</span><span class="sxs-lookup"><span data-stu-id="87054-111">Multiple</span></span>|<span data-ttu-id="87054-112">始终。</span><span class="sxs-lookup"><span data-stu-id="87054-112">Always.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="87054-113">下面的代码示例演示使用单个、可重入和多个之间的不同。</span><span class="sxs-lookup"><span data-stu-id="87054-113">The following code example demonstrates the different between using Single, Reentrant, and Multiple.</span></span> <span data-ttu-id="87054-114">此示例在没有真正实现的情况下进行编译，但它演示了 WCF 所做的线程保证种类，以及这对操作代码的意义。</span><span class="sxs-lookup"><span data-stu-id="87054-114">This sample does not compile without a real implementation behind it, but does demonstrate the kind of threading guarantees that WCF makes and what that means for your operation code.</span></span>  
  
 [!code-csharp[C_BestPractices-Concurrency#1](~/samples/snippets/csharp/VS_Snippets_CFX/c_bestpractices-concurrency/cs/reentrantandmultiple.cs#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Multiple">
      <MemberSignature Language="C#" Value="Multiple" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.ServiceModel.ConcurrencyMode Multiple = int32(2)" />
      <MemberSignature Language="DocId" Value="F:System.ServiceModel.ConcurrencyMode.Multiple" />
      <MemberSignature Language="VB.NET" Value="Multiple" />
      <MemberSignature Language="C++ CLI" Value="Multiple" />
      <MemberSignature Language="F#" Value="Multiple = 2" Usage="System.ServiceModel.ConcurrencyMode.Multiple" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.ConcurrencyMode</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary><span data-ttu-id="87054-115">服务实例是多线程的。</span><span class="sxs-lookup"><span data-stu-id="87054-115">The service instance is multi-threaded.</span></span> <span data-ttu-id="87054-116">无同步保证。</span><span class="sxs-lookup"><span data-stu-id="87054-116">No synchronization guarantees are made.</span></span> <span data-ttu-id="87054-117">因为其他线程可以随时更改服务对象，所以必须始终处理同步与状态一致性。</span><span class="sxs-lookup"><span data-stu-id="87054-117">Because other threads can change your service object at any time, you must handle synchronization and state consistency at all times.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="Reentrant">
      <MemberSignature Language="C#" Value="Reentrant" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.ServiceModel.ConcurrencyMode Reentrant = int32(1)" />
      <MemberSignature Language="DocId" Value="F:System.ServiceModel.ConcurrencyMode.Reentrant" />
      <MemberSignature Language="VB.NET" Value="Reentrant" />
      <MemberSignature Language="C++ CLI" Value="Reentrant" />
      <MemberSignature Language="F#" Value="Reentrant = 1" Usage="System.ServiceModel.ConcurrencyMode.Reentrant" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.ConcurrencyMode</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary><span data-ttu-id="87054-118">服务实例是单线程的，且接受可重入调用。</span><span class="sxs-lookup"><span data-stu-id="87054-118">The service instance is single-threaded and accepts reentrant calls.</span></span> <span data-ttu-id="87054-119">可重入服务接受在调用其他服务的同时进行调用；因此在调出之前，您需要负责让对象的状态一致，而在调出之后，必须确认本地操作数据有效。</span><span class="sxs-lookup"><span data-stu-id="87054-119">The reentrant service accepts calls when you call another service; it is therefore your responsibility to leave your object state consistent before callouts and you must confirm that operation-local data is valid after callouts.</span></span> <span data-ttu-id="87054-120">请注意，只有通过 WCF 通道调用其他服务，才能解锁服务实例。</span><span class="sxs-lookup"><span data-stu-id="87054-120">Note that the service instance is unlocked only by calling another service over a WCF channel.</span></span> <span data-ttu-id="87054-121">在此情况下，已调用的服务可以通过回调重入第一个服务。</span><span class="sxs-lookup"><span data-stu-id="87054-121">In this case, the called service can reenter the first service via a callback.</span></span> <span data-ttu-id="87054-122">如果第一个服务不可重入，则该调用顺序会导致死锁。</span><span class="sxs-lookup"><span data-stu-id="87054-122">If the first service is not reentrant, the sequence of calls results in a deadlock.</span></span> <span data-ttu-id="87054-123">有关详细信息，请参阅 <see cref="P:System.ServiceModel.ServiceBehaviorAttribute.ConcurrencyMode" />。</span><span class="sxs-lookup"><span data-stu-id="87054-123">For details, see <see cref="P:System.ServiceModel.ServiceBehaviorAttribute.ConcurrencyMode" />.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="Single">
      <MemberSignature Language="C#" Value="Single" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.ServiceModel.ConcurrencyMode Single = int32(0)" />
      <MemberSignature Language="DocId" Value="F:System.ServiceModel.ConcurrencyMode.Single" />
      <MemberSignature Language="VB.NET" Value="Single" />
      <MemberSignature Language="C++ CLI" Value="Single" />
      <MemberSignature Language="F#" Value="Single = 0" Usage="System.ServiceModel.ConcurrencyMode.Single" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.ConcurrencyMode</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary><span data-ttu-id="87054-124">服务实例是单线程的，且不接受可重入调用。</span><span class="sxs-lookup"><span data-stu-id="87054-124">The service instance is single-threaded and does not accept reentrant calls.</span></span> <span data-ttu-id="87054-125">如果 <see cref="P:System.ServiceModel.ServiceBehaviorAttribute.InstanceContextMode" /> 属性为 <see cref="F:System.ServiceModel.InstanceContextMode.Single" />，且其他消息在实例处理调用的同时到达，则这些消息必须等待，直到服务可用或消息超时为止。</span><span class="sxs-lookup"><span data-stu-id="87054-125">If the <see cref="P:System.ServiceModel.ServiceBehaviorAttribute.InstanceContextMode" /> property is <see cref="F:System.ServiceModel.InstanceContextMode.Single" />, and additional messages arrive while the instance services a call, these messages must wait until the service is available or until the messages time out.</span></span></summary>
      </Docs>
    </Member>
  </Members>
</Type>
