<Type Name="ServiceContractAttribute" FullName="System.ServiceModel.ServiceContractAttribute">
  <Metadata><Meta Name="ms.openlocfilehash" Value="fdfe53713a4c2b1cb77ab3a600686188d9aa3f7f" /><Meta Name="ms.sourcegitcommit" Value="c982ad9e10a242d90f1e631b5981570f9e5d9f34" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/10/2020" /><Meta Name="ms.locfileid" Value="89971848" /></Metadata><TypeSignature Language="C#" Value="public sealed class ServiceContractAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ServiceContractAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.ServiceContractAttribute" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ServiceContractAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class ServiceContractAttribute sealed : Attribute" />
  <TypeSignature Language="F#" Value="type ServiceContractAttribute = class&#xA;    inherit Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.5.0.1</AssemblyVersion>
    <AssemblyVersion>4.5.0.3</AssemblyVersion>
    <AssemblyVersion>4.6.0.0</AssemblyVersion>
    <AssemblyVersion>4.7.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="System.ServiceModel" FromVersion="4.0.0.0" To="System.ServiceModel.Primitives" ToVersion="4.6.0.0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0" />
    <TypeForwarding From="System.ServiceModel" FromVersion="4.0.0.0" To="System.ServiceModel.Primitives" ToVersion="4.7.0.0" FrameworkAlternate="dotnet-plat-ext-3.1" />
    <TypeForwarding From="System.ServiceModel" FromVersion="4.0.0.0" To="System.ServiceModel.Primitives" ToVersion="5.0.0.0" FrameworkAlternate="dotnet-plat-ext-5.0" />
    <TypeForwarding From="System.ServiceModel" FromVersion="4.0.0.0" To="System.ServiceModel.Primitives" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;dotnet-plat-ext-5.0;dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName Language="C#">[System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Interface, AllowMultiple=false, Inherited=false)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Interface, AllowMultiple=false, Inherited=false)&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName Language="C#">[System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Interface, Inherited=false)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Interface, Inherited=false)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>指示接口或类在 Windows Communication Foundation (WCF) 应用程序中定义服务协定。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用接口（或类）上的 <xref:System.ServiceModel.ServiceContractAttribute> 属性定义服务协定。 然后使用一个或多个类（或接口）方法中的 <xref:System.ServiceModel.OperationContractAttribute> 属性定义协定的服务操作。 当实现服务协定并将其与 [绑定](/dotnet/framework/wcf/bindings) 和对象结合使用时 <xref:System.ServiceModel.EndpointAddress> ，服务协定将公开供客户端使用。 有关使用简单示例的过程的概述，请参阅 [入门教程](/dotnet/framework/wcf/getting-started-tutorial)。 有关创建服务协定的详细信息，请参阅 [设计和实现服务](/dotnet/framework/wcf/designing-and-implementing-services)。  
  
 此信息由 <xref:System.ServiceModel.ServiceContractAttribute> 表示，其接口与 Web 服务描述语言 (WSDL) `<portType>` 元素松散相关。 服务协定在服务端用于指定服务的终结点向调用方公开的内容。 它也可以在客户端使用，以指定客户端与终结点通信的协定，如果是双工协定，则用于指定客户端必须实现的回调协定（使用 <xref:System.ServiceModel.ServiceContractAttribute.CallbackContract%2A> 属性）以参与双工对话。  
  
> [!NOTE]
>  使用 <xref:System.ServiceModel.ServiceContractAttribute> 修饰的接口或类还必须至少拥有一个用 <xref:System.ServiceModel.OperationContractAttribute> 属性标记的方法以公开任意功能。 有关使用这两个属性定义和实现服务的最简单用法的代码示例，请参见“示例”部分。  
  
 使用 <xref:System.ServiceModel.ServiceContractAttribute> 属性修改服务协定。  
  
-   <xref:System.ServiceModel.ServiceContractAttribute.ConfigurationName%2A> 属性指定要使用的配置文件中的服务元素的名称。  
  
-   <xref:System.ServiceModel.ServiceContractAttribute.Name%2A> 和 <xref:System.ServiceModel.ServiceContractAttribute.Namespace%2A> 属性控制 WSDL `<portType>` 元素中的协定名称和命名空间。  
  
-   <xref:System.ServiceModel.ServiceContractAttribute.SessionMode%2A> 属性指定协定是否需要支持会话的绑定。  
  
-   <xref:System.ServiceModel.ServiceContractAttribute.CallbackContract%2A> 属性指定双向（双工）对话中的返回协定。  
  
-   <xref:System.ServiceModel.ServiceContractAttribute.HasProtectionLevel%2A> 和 <xref:System.ServiceModel.ServiceContractAttribute.ProtectionLevel%2A> 属性指示是否所有支持协定的消息都具有一个显式 <xref:System.ServiceModel.ServiceContractAttribute.ProtectionLevel%2A> 值，如果有，处于什么级别。  
  
 服务实现服务协定，此协定表示服务类型支持的数据交换。 服务类可以实现服务协定（通过实现以 <xref:System.ServiceModel.ServiceContractAttribute> 标记的接口，该接口具有以 <xref:System.ServiceModel.OperationContractAttribute> 标记的方法），或者也可以使用 <xref:System.ServiceModel.ServiceContractAttribute> 标记并将 <xref:System.ServiceModel.OperationContractAttribute> 属性应用到它自己的方法中。  (如果类实现用标记的接口 <xref:System.ServiceModel.ServiceContractAttribute> ，则它不能以本身标记 <xref:System.ServiceModel.ServiceContractAttribute> 。使用标记的服务类型的 ) 方法被 <xref:System.ServiceModel.OperationContractAttribute> 视为由服务类型本身指定的默认服务协定的一部分。 有关服务操作的详细信息，请参见 <xref:System.ServiceModel.OperationContractAttribute>。  
  
 默认情况下，<xref:System.ServiceModel.ServiceContractAttribute.Name%2A> 和 <xref:System.ServiceModel.ServiceContractAttribute.Namespace%2A> 属性分别是协定类型的名称和 `http://tempuri.org`，且 <xref:System.ServiceModel.ServiceContractAttribute.ProtectionLevel%2A> 为 <xref:System.Net.Security.ProtectionLevel.None?displayProperty=nameWithType>。 建议服务协定使用这些属性显式设置其名称、命名空间和保护级别。 这样做可以实现两个目的。 首先，它将生成一个并不直接与托管的类型信息连接的协定，从而使你可以重构托管代码和命名空间而不破坏协定，这是因为协定使用 WSDL 表示。 其次，显式要求协定本身具有特定保护级别将使运行时能够验证绑定配置是否支持该安全级别，从而防止因配置不当而公开敏感信息。 有关保护级别的详细信息，请参阅 [了解保护级别](/dotnet/framework/wcf/understanding-protection-level)。  
  
 若要公开服务以供客户端应用程序使用，请创建一个主机应用程序，用 Windows Communication Foundation (WCF) 注册服务终结点。 你可以在控制台应用程序、Windows 服务应用程序、ASP.NET 应用程序、Windows 窗体应用程序或任何其他类型的应用程序域中使用 Windows 激活服务来承载 WCF 服务)  (。  
  
 在 WAS 中承载与创建 ASP.NET 应用程序非常类似。 有关详细信息，请参阅 [如何：在 IIS 中承载 WCF 服务](/dotnet/framework/wcf/feature-details/how-to-host-a-wcf-service-in-iis)。  
  
 客户端既可以使用服务协定接口（使用 <xref:System.ServiceModel.ServiceContractAttribute> 标记的接口）创建服务的信道，也可以使用客户端对象（这些对象将服务协定接口的类型信息与 <xref:System.ServiceModel.ClientBase%601> 类相结合）与您的服务通信。 有关客户端信道到服务的详细信息，请参阅 <xref:System.ServiceModel.ChannelFactory%601> 类和 [WCF 客户端概述](/dotnet/framework/wcf/wcf-client-overview)。  
  
 使用 <xref:System.ServiceModel.ServiceContractAttribute> 类或接口从另一个 <xref:System.ServiceModel.ServiceContractAttribute> 类或接口继承将会扩展其父协定。 例如，如果 `IChildContract` 接口使用 <xref:System.ServiceModel.ServiceContractAttribute> 标记并且是从另一个服务协定接口 `IParentContract` 继承的，则 `IChildContract` 服务协定将包含 `IParentContract` 和 `IChildContract` 的方法。 扩展协定（无论在类或接口上）与扩展托管类和接口非常类似。  
  
 创建服务最灵活的方法是先定义服务协定接口，然后再让服务类实现该接口。  (如果你必须实现其他人定义的服务协定，则这也是生成服务的最简单方法。如果 <xref:System.ServiceModel.ServiceContractAttribute> <xref:System.ServiceModel.OperationContractAttribute> 服务仅公开一个协定 (但该协定可通过多个终结点) 公开，则 ) 直接生成服务。  
  
 使用 <xref:System.ServiceModel.ServiceContractAttribute.CallbackContract%2A> 属性来指示另一个服务协定，该协定在与原始服务协定结合使用时，定义可单独以两种方式流过的消息交换。 有关详细信息，请参阅 <xref:System.ServiceModel.ServiceContractAttribute.CallbackContract%2A>。  
  
   
  
## Examples  
 下面的代码示例演示如何对接口应用 <xref:System.ServiceModel.ServiceContractAttribute> 以使用一个由 <xref:System.ServiceModel.OperationContractAttribute> 指示的服务方法来定义服务协定。 在这种情况下，所有消息的绑定需要的保护级别为 <xref:System.Net.Security.ProtectionLevel.EncryptAndSign?displayProperty=nameWithType>。  
  
 然后，该代码示例将在 `SampleService` 类上实现该协定。  
  
 [!code-csharp[ServiceContractAttribute#1](~/samples/snippets/csharp/VS_Snippets_CFX/servicecontractattribute/cs/services.cs#1)]
 [!code-vb[ServiceContractAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/servicecontractattribute/vb/services.vb#1)]  
  
 下面的代码示例演示了上述服务（创建一个终结点）的简单配置文件。  
  
 [!code-xml[ServiceContractAttribute#2](~/samples/snippets/csharp/VS_Snippets_CFX/servicecontractattribute/cs/hostapplication.exe.config#2)]   
  
 下面的代码示例演示调用上述 `SampleService` 的简单客户端。  
  
 [!code-csharp[ServiceContractAttribute#3](~/samples/snippets/csharp/VS_Snippets_CFX/servicecontractattribute/cs/client.cs#3)]
 [!code-vb[ServiceContractAttribute#3](~/samples/snippets/visualbasic/VS_Snippets_CFX/servicecontractattribute/vb/client.vb#3)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.ServiceModel.OperationContractAttribute" />
    <related type="Article" href="/dotnet/framework/wcf/designing-and-implementing-services">定义服务协定</related>
    <related type="Article" href="/dotnet/framework/wcf/hosting-services">承载服务</related>
    <related type="Article" href="/dotnet/framework/wcf/basic-programming-lifecycle">服务创建概述</related>
    <related type="Article" href="/dotnet/framework/wcf/building-clients">构建客户端</related>
    <related type="Article" href="/dotnet/framework/wcf/accessing-services-using-a-wcf-client">代理创建概述</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ServiceContractAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.ServiceContractAttribute.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ServiceContractAttribute();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.7.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.ServiceModel.ServiceContractAttribute" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此构造函数创建无会话需求、无回调协定但具有默认名称和命名空间的属性实例。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CallbackContract">
      <MemberSignature Language="C#" Value="public Type CallbackContract { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type CallbackContract" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.ServiceContractAttribute.CallbackContract" />
      <MemberSignature Language="VB.NET" Value="Public Property CallbackContract As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ CallbackContract { Type ^ get(); void set(Type ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CallbackContract : Type with get, set" Usage="System.ServiceModel.ServiceContractAttribute.CallbackContract" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.7.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置当协定为双工协定时的回调协定类型。</summary>
        <value>指示回调协定的 <see cref="T:System.Type" />。 默认值为 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在属性中指定一个接口 <xref:System.ServiceModel.ServiceContractAttribute.CallbackContract%2A> ，该接口表示双向 (或双工) 消息交换中所需的相对协定。 这使得客户端应用程序能够侦听入站操作调用，该调用可以由服务器端服务应用程序独立于客户端活动进行发送。 具有单向操作的回调协定表示从客户端可以处理的服务发出的调用。  
  
> [!NOTE]
>  此 <xref:System.ServiceModel.ServiceContractAttribute> 属性在回调协定上被忽略。 若要配置回调对象的运行时行为，请使用 <xref:System.ServiceModel.CallbackBehaviorAttribute?displayProperty=nameWithType> 。  
  
   
  
## Examples  
 下面的代码示例演示了一个服务，该服务指定一个回调协定，该服务指示类型的服务 `IDuplexHello` 必须具有实现类型为的服务的 `IHelloCallbackContract` 通信。 此外，还 `IHelloCallbackContract` 实现了一个单向回调方法，使服务能够调用客户端，而无需等待回复来支持分布式的事件驱动客户端。  
  
 [!code-csharp[SCA.CallbackContract#1](~/samples/snippets/csharp/VS_Snippets_CFX/sca.callbackcontract/cs/services.cs#1)]
 [!code-vb[SCA.CallbackContract#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/sca.callbackcontract/vb/services.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConfigurationName">
      <MemberSignature Language="C#" Value="public string ConfigurationName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ConfigurationName" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.ServiceContractAttribute.ConfigurationName" />
      <MemberSignature Language="VB.NET" Value="Public Property ConfigurationName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ConfigurationName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ConfigurationName : string with get, set" Usage="System.ServiceModel.ServiceContractAttribute.ConfigurationName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.7.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置用于查找应用程序配置文件中的服务的名称。</summary>
        <value>用于查找应用程序配置文件中的服务元素的名称。 默认值是服务实现类的名称。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要设置配置系统在配置文件中查找协定值所用的值，请参阅 <xref:System.ServiceModel.ServiceBehaviorAttribute.ConfigurationName%2A> 。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">该值为 Null。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">该值是一个空字符串。</exception>
      </Docs>
    </Member>
    <Member MemberName="HasProtectionLevel">
      <MemberSignature Language="C#" Value="public bool HasProtectionLevel { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasProtectionLevel" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.ServiceContractAttribute.HasProtectionLevel" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasProtectionLevel As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasProtectionLevel { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasProtectionLevel : bool" Usage="System.ServiceModel.ServiceContractAttribute.HasProtectionLevel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示是否对成员分配保护级别。</summary>
        <value>如果 <see langword="true" /> 属性不是 <see cref="P:System.ServiceModel.ServiceContractAttribute.ProtectionLevel" />，则为 <see cref="F:System.Net.Security.ProtectionLevel.None" />；否则为 <see langword="false" />。 默认值为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceModel.ServiceContractAttribute.HasProtectionLevel%2A>属性指示是否为协定设置了以外的保护级别值 `false` 。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.ServiceContractAttribute.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Name : string with get, set" Usage="System.ServiceModel.ServiceContractAttribute.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.7.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 Web 服务描述语言 (WSDL) 中的 <see langword="&lt;portType&gt;" /> 元素的名称。</summary>
        <value>默认值为应用了 <see cref="T:System.ServiceModel.ServiceContractAttribute" /> 的类或接口的名称。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用 <xref:System.ServiceModel.ServiceContractAttribute.Name%2A> 和 <xref:System.ServiceModel.ServiceContractAttribute.Namespace%2A> 属性控制 WSDL 中元素的名称和命名空间 `<portType>` 。  
  
   
  
## Examples  
 下面的代码示例演示如何使用 <xref:System.ServiceModel.ServiceContractAttribute.Name%2A> <xref:System.ServiceModel.ServiceContractAttribute.Namespace%2A> 的和属性在 <xref:System.ServiceModel.ServiceContractAttribute> WSDL 中设置相应的值。  
  
 [!code-csharp[SCA.Names#1](~/samples/snippets/csharp/VS_Snippets_CFX/sca.names/cs/services.cs#1)]
 [!code-vb[SCA.Names#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/sca.names/vb/services.vb#1)]  
  
 下面的代码示例演示了一个 Windows Communication Foundation (WCF) 客户端，该客户端 [)  ( ](/dotnet/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe)使用带 此客户端使用 `HelloWorldProxy` 客户端，而不是 `SampleServiceProxy` 客户端 (，就像) 的 "示例" 部分中的示例那样 <xref:System.ServiceModel.ServiceContractAttribute> 。  
  
 [!code-csharp[SCA.Names#3](~/samples/snippets/csharp/VS_Snippets_CFX/sca.names/cs/client.cs#3)]
 [!code-vb[SCA.Names#3](~/samples/snippets/visualbasic/VS_Snippets_CFX/sca.names/vb/client.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">该值为 Null。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">该值是一个空字符串。</exception>
      </Docs>
    </Member>
    <Member MemberName="Namespace">
      <MemberSignature Language="C#" Value="public string Namespace { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Namespace" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.ServiceContractAttribute.Namespace" />
      <MemberSignature Language="VB.NET" Value="Public Property Namespace As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Namespace { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Namespace : string with get, set" Usage="System.ServiceModel.ServiceContractAttribute.Namespace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.7.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 Web 服务描述语言 (WSDL) 中的 <see langword="&lt;portType&gt;" /> 元素的命名空间。</summary>
        <value><see langword="&lt;portType&gt;" /> 元素的 WSDL 命名空间。 默认值为 <c>" http://tempuri.org "</c>。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例演示如何使用 <xref:System.ServiceModel.ServiceContractAttribute.Name%2A> <xref:System.ServiceModel.ServiceContractAttribute.Namespace%2A> 的和属性在 <xref:System.ServiceModel.ServiceContractAttribute> WSDL 中设置相应的值。  
  
 [!code-csharp[SCA.Names#1](~/samples/snippets/csharp/VS_Snippets_CFX/sca.names/cs/services.cs#1)]
 [!code-vb[SCA.Names#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/sca.names/vb/services.vb#1)]  
  
 下面的代码示例演示了一个 Windows Communication Foundation (WCF) 客户端，该客户端 [)  ( ](/dotnet/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe)使用带 此客户端使用 `HelloWorldClient` 客户端，而不是 `SampleServiceClient` 客户端 (，就像) 的 "示例" 部分中的示例那样 <xref:System.ServiceModel.ServiceContractAttribute> 。  
  
 [!code-csharp[SCA.Names#3](~/samples/snippets/csharp/VS_Snippets_CFX/sca.names/cs/client.cs#3)]
 [!code-vb[SCA.Names#3](~/samples/snippets/visualbasic/VS_Snippets_CFX/sca.names/vb/client.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProtectionLevel">
      <MemberSignature Language="C#" Value="public System.Net.Security.ProtectionLevel ProtectionLevel { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Net.Security.ProtectionLevel ProtectionLevel" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.ServiceContractAttribute.ProtectionLevel" />
      <MemberSignature Language="VB.NET" Value="Public Property ProtectionLevel As ProtectionLevel" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::Security::ProtectionLevel ProtectionLevel { System::Net::Security::ProtectionLevel get(); void set(System::Net::Security::ProtectionLevel value); };" />
      <MemberSignature Language="F#" Value="member this.ProtectionLevel : System.Net.Security.ProtectionLevel with get, set" Usage="System.ServiceModel.ServiceContractAttribute.ProtectionLevel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.Security.ProtectionLevel</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>指定协定的绑定是否必须支持 <see cref="P:System.ServiceModel.ServiceContractAttribute.ProtectionLevel" /> 属性的值。</summary>
        <value><see cref="T:System.Net.Security.ProtectionLevel" /> 值之一。 默认值为 <see cref="F:System.Net.Security.ProtectionLevel.None" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用 " <xref:System.ServiceModel.ServiceContractAttribute.ProtectionLevel%2A> 属性" 指定协定绑定要求对公开协定的终结点进行加密和/或数字签名的程度。 在此设置的值是为包括错误在内的所有操作消息提供的默认值。  
  
 请记住，运行时的保护行为是在下列属性中设置的保护级别值的组合，这一点很重要。 这些属性具有层次结构。 除非已为较窄范围显式设置了某个不同的值，否则设置最外层的值将为所有较窄的范围确定默认设置。 在这种情况下，外层的值将保持所有较窄的范围的默认设置，但特定的设置除外。  
  
 例如，如果将 <xref:System.ServiceModel.ServiceContractAttribute.ProtectionLevel%2A?displayProperty=nameWithType> 设置为 <xref:System.Net.Security.ProtectionLevel.EncryptAndSign?displayProperty=nameWithType>，并且其他较窄范围都没有设置保护级别，则会对操作协定中的所有消息进行加密和签名。 但是，如果其中一个操作将 <xref:System.ServiceModel.OperationContractAttribute> 设置为 <xref:System.Net.Security.ProtectionLevel.Sign?displayProperty=nameWithType>，那么只会对此操作的消息进行签名，而对协定中的所有其他消息进行加密和签名。  
  
 有关保护级别及其假设和范围的详细信息，请参阅 [了解保护级别](/dotnet/framework/wcf/understanding-protection-level)。  
  
 这些值的设置范围是：  
  
 <xref:System.ServiceModel.ServiceContractAttribute.ProtectionLevel%2A?displayProperty=nameWithType>  
  
 <xref:System.ServiceModel.OperationContractAttribute.ProtectionLevel%2A?displayProperty=nameWithType>  
  
 <xref:System.ServiceModel.FaultContractAttribute.ProtectionLevel%2A?displayProperty=nameWithType>  
  
 <xref:System.ServiceModel.MessageContractAttribute.ProtectionLevel%2A?displayProperty=nameWithType>  
  
 <xref:System.ServiceModel.MessageContractMemberAttribute.ProtectionLevel%2A?displayProperty=nameWithType> 上的 <xref:System.ServiceModel.MessageHeaderAttribute?displayProperty=nameWithType> 属性。  
  
 <xref:System.ServiceModel.MessageContractMemberAttribute.ProtectionLevel%2A?displayProperty=nameWithType> 上的 <xref:System.ServiceModel.MessageBodyMemberAttribute?displayProperty=nameWithType> 属性。  
  
 当协定上没有显式指定保护级别并且基础绑定支持安全性时（无论处于传输级别还是处于消息级别），整个协定的有效保护级别将为 <xref:System.Net.Security.ProtectionLevel.EncryptAndSign?displayProperty=nameWithType>。 如果绑定不支持安全性（如 <xref:System.ServiceModel.BasicHttpBinding>），则整个协定的有效 <xref:System.Net.Security.ProtectionLevel?displayProperty=nameWithType> 为 <xref:System.Net.Security.ProtectionLevel.None?displayProperty=nameWithType>。 因此，根据终结点绑定，即使协定指定了 <xref:System.Net.Security.ProtectionLevel.None?displayProperty=nameWithType>，客户端也可以要求不同的消息或传输级别安全保护。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">该值不是 <see cref="T:System.Net.Security.ProtectionLevel" /> 值之一。</exception>
      </Docs>
    </Member>
    <Member MemberName="SessionMode">
      <MemberSignature Language="C#" Value="public System.ServiceModel.SessionMode SessionMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.ServiceModel.SessionMode SessionMode" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.ServiceContractAttribute.SessionMode" />
      <MemberSignature Language="VB.NET" Value="Public Property SessionMode As SessionMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ServiceModel::SessionMode SessionMode { System::ServiceModel::SessionMode get(); void set(System::ServiceModel::SessionMode value); };" />
      <MemberSignature Language="F#" Value="member this.SessionMode : System.ServiceModel.SessionMode with get, set" Usage="System.ServiceModel.ServiceContractAttribute.SessionMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.7.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ServiceModel.SessionMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置是否允许、不允许或要求会话。</summary>
        <value>指示是否允许、不允许或要求会话的 <see cref="T:System.ServiceModel.SessionMode" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用 <xref:System.ServiceModel.ServiceContractAttribute.SessionMode%2A> 属性来要求在终结点之间支持会话的绑定。 会话就是将在两个或多个终结点之间交换的消息集相互关联的方式。 如果服务支持通道会话，则可以使用 <xref:System.ServiceModel.ServiceBehaviorAttribute.InstanceContextMode%2A> 属性指定服务协定实现实例与通道会话之间的关系。 如果绑定不支持会话，则会引发异常。  
  
 例如，如果将 <xref:System.ServiceModel.ServiceContractAttribute.SessionMode%2A> 属性设置为， <xref:System.ServiceModel.SessionMode.Required?displayProperty=nameWithType> 并且 <xref:System.ServiceModel.ServiceBehaviorAttribute.InstanceContextMode%2A> 属性设置为 <xref:System.ServiceModel.InstanceContextMode.PerSession> ，则客户端可以使用相同的连接对同一服务对象进行重复调用。  
  
 有关会话和服务实例的详细信息，请参阅 [使用会话](/dotnet/framework/wcf/using-sessions) 和 [会话、实例化和并发](/dotnet/framework/wcf/feature-details/sessions-instancing-and-concurrency)。  
  
> [!NOTE]
>  支持会话的信道支持服务实例与特定会话的默认关联。 但是，除了基于会话的实例化控件外，不同的会话实现支持不同的功能。 WCF 提供了四种类型的会话，您可以使用这些会话提供会话应用程序行为;每种类型的会话都提供特定于会话类型的其他行为。  
  
1.  <xref:System.ServiceModel.Channels.SecurityBindingElement?displayProperty=nameWithType>支持安全会话，在这种情况下，通信的两端都已与加密和/或数字签名过程一致; 所有消息都与该特定安全对话相关联。 有关详细信息，请参阅 [保护服务](/dotnet/framework/wcf/securing-services)。 例如，如果 <xref:System.ServiceModel.WSHttpBinding?displayProperty=nameWithType> 包含对安全会话和可靠会话的支持，则默认情况下仅使用对消息进行加密和数字签名的安全会话。  
  
2.  <xref:System.ServiceModel.NetTcpBinding?displayProperty=nameWithType>支持 tcp/ip 连接公开的会话，以确保所有消息都由套接字级别的连接会话关联。  
  
3.  用于 <xref:System.ServiceModel.Channels.ReliableSessionBindingElement?displayProperty=nameWithType> 实现 ws-reliablemessaging 规范的，提供对可靠会话的支持，在这些会话中，消息按顺序传递并且只是一次，从而使消息在会话期间跨多个节点传输。 有关详细信息，请参阅 [可靠会话](/dotnet/framework/wcf/feature-details/reliable-sessions)。  
  
4.  <xref:System.ServiceModel.NetMsmqBinding?displayProperty=nameWithType>提供 MSMQ 数据报会话。 有关详细信息，请参阅 [WCF 中的队列](/dotnet/framework/wcf/feature-details/queues-in-wcf)。  
  
 请记住，设置 <xref:System.ServiceModel.ServiceContractAttribute.SessionMode%2A> 属性并不指定协定需要的会话类型，而只指定协定需要一个会话。  
  
   
  
## Examples  
 以下服务协定要求配置的绑定在与服务实现交互时使用会话 `SampleDuplexHello` 。  
  
 [!code-csharp[SCA.Session#1](~/samples/snippets/csharp/VS_Snippets_CFX/sca.session/cs/services.cs#1)]
 [!code-vb[SCA.Session#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/sca.session/vb/services.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">该值不是 <see cref="T:System.ServiceModel.SessionMode" /> 值之一。</exception>
      </Docs>
    </Member>
  </Members>
</Type>
