<Type Name="ServiceAuthorizationManager" FullName="System.ServiceModel.ServiceAuthorizationManager">
  <Metadata><Meta Name="ms.openlocfilehash" Value="3998da15c860e0f69de92677a3a3d906256657d5" /><Meta Name="ms.sourcegitcommit" Value="b53d35b4a410c949742abd4c6a989d1af5357bca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="86591147" /></Metadata><TypeSignature Language="C#" Value="public class ServiceAuthorizationManager" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ServiceAuthorizationManager extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.ServiceAuthorizationManager" />
  <TypeSignature Language="VB.NET" Value="Public Class ServiceAuthorizationManager" />
  <TypeSignature Language="C++ CLI" Value="public ref class ServiceAuthorizationManager" />
  <TypeSignature Language="F#" Value="type ServiceAuthorizationManager = class" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>提供对服务操作的授权访问检查。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此类负责评估所有策略（定义用户可进行何种操作的规则）、比较策略与客户端所作的声明、将生成的 <xref:System.IdentityModel.Policy.AuthorizationContext> 设置为 <xref:System.ServiceModel.ServiceSecurityContext>，并提供是允许还是拒绝调用方为获取给定服务操作而进行访问的授权决定。  
  
 <xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A>每次尝试访问资源时，Windows Communication Foundation (WCF) 基础结构调用方法。 若允许访问，则该方法返回 `true`；若拒绝访问，则返回 `false`。  
  
 <xref:System.ServiceModel.ServiceAuthorizationManager>是 WCF*标识模型*基础结构的一部分。 通过“标识模型”，您可以创建自定义授权策略和自定义授权方案。 有关标识模型工作方式的详细信息，请参阅 [使用标识模型管理声明和授权](/dotnet/framework/wcf/feature-details/managing-claims-and-authorization-with-the-identity-model)。  
  
## <a name="custom-authorization"></a>自定义授权  
 此类不执行任何授权，因此允许用户访问所有服务操作。 若要提供更多的限制性授权，请务必创建一个自定义授权管理器，以检查自定义策略。 为此，请从此类继承并重写 <xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A> 方法。 通过 <xref:System.ServiceModel.Dispatcher.DispatchRuntime.ServiceAuthorizationManager%2A> 属性指定派生类的实例。  
  
 在 <xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A> 中，应用程序可以使用 <xref:System.ServiceModel.OperationContext> 对象来访问调用方标识 (<xref:System.ServiceModel.OperationContext.ServiceSecurityContext%2A>)。  
  
 通过获取返回 <xref:System.ServiceModel.OperationContext.IncomingMessageHeaders%2A> 对象的 <xref:System.ServiceModel.Channels.MessageHeaders> 属性，应用程序可以访问服务 (<xref:System.ServiceModel.Channels.MessageHeaders.To%2A>) 和操作 (<xref:System.ServiceModel.Channels.MessageHeaders.Action%2A>)。  
  
 通过获取返回 <xref:System.ServiceModel.OperationContext.RequestContext%2A> 对象的 <xref:System.ServiceModel.Channels.RequestContext> 属性，应用程序可以访问整个请求消息 (<xref:System.ServiceModel.Channels.RequestContext.RequestMessage%2A>)，并据此执行授权决定。  
  
 有关示例，请参阅 [如何：为服务创建自定义授权管理器](/dotnet/framework/wcf/extending/how-to-create-a-custom-authorization-manager-for-a-service)。  
  
 若要创建自定义授权策略，请实现 <xref:System.IdentityModel.Policy.IAuthorizationPolicy> 类。  有关示例，请参阅 [如何：创建自定义授权策略](/dotnet/framework/wcf/extending/how-to-create-a-custom-authorization-policy)。  
  
 若要创建自定义声明，请使用 <xref:System.IdentityModel.Claims.Claim> 类。  有关示例，请参阅 [如何：创建自定义声明](/dotnet/framework/wcf/extending/how-to-create-a-custom-claim)。 若要比较自定义声明，必须比较声明，如 [如何：比较声明](/dotnet/framework/wcf/extending/how-to-compare-claims)中所示。  
  
 有关详细信息，请参阅 [自定义授权](/dotnet/framework/wcf/extending/custom-authorization)。  
  
 可以使用客户端应用程序配置文件中的[ &lt; serviceAuthorization &gt; ](/dotnet/framework/configure-apps/file-schema/wcf/serviceauthorization-element)设置自定义授权管理器的类型。  
  
   
  
## Examples  
 下面示例演示一个名为 `MyServiceAuthorizationManager` 的类，该类从 <xref:System.ServiceModel.ServiceAuthorizationManager> 中继承并重写 <xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A> 方法。  
  
 [!code-csharp[c_CustomAuthMgr#2](~/samples/snippets/csharp/VS_Snippets_CFX/c_customauthmgr/cs/c_customauthmgr.cs#2)]
 [!code-vb[c_CustomAuthMgr#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/c_customauthmgr/vb/c_customauthmgr.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.IdentityModel.Claims.ClaimSet" />
    <altmember cref="T:System.IdentityModel.Claims.Claim" />
    <related type="Article" href="/dotnet/framework/wcf/extending/custom-authorization">自定义授权</related>
    <related type="Article" href="/dotnet/framework/wcf/extending/how-to-create-a-custom-authorization-manager-for-a-service">如何：为服务创建自定义 AuthorizationManager</related>
    <related type="Article" href="/dotnet/framework/wcf/extending/how-to-create-a-custom-authorization-policy">如何：创建自定义授权策略</related>
    <related type="Article" href="/dotnet/framework/wcf/extending/how-to-create-a-custom-claim">如何：创建自定义声明</related>
    <related type="Article" href="/dotnet/framework/wcf/extending/how-to-compare-claims">如何：比较声明</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ServiceAuthorizationManager ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.ServiceAuthorizationManager.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ServiceAuthorizationManager();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.ServiceModel.ServiceAuthorizationManager" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="CheckAccess">
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>检查给定操作上下文和可选消息的授权。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CheckAccess">
      <MemberSignature Language="C#" Value="public virtual bool CheckAccess (System.ServiceModel.OperationContext operationContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CheckAccess(class System.ServiceModel.OperationContext operationContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.ServiceAuthorizationManager.CheckAccess(System.ServiceModel.OperationContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CheckAccess (operationContext As OperationContext) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CheckAccess(System::ServiceModel::OperationContext ^ operationContext);" />
      <MemberSignature Language="F#" Value="abstract member CheckAccess : System.ServiceModel.OperationContext -&gt; bool&#xA;override this.CheckAccess : System.ServiceModel.OperationContext -&gt; bool" Usage="serviceAuthorizationManager.CheckAccess operationContext" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operationContext" Type="System.ServiceModel.OperationContext" />
      </Parameters>
      <Docs>
        <param name="operationContext"><see cref="T:System.ServiceModel.OperationContext" />。</param>
        <summary>检查给定操作上下文的授权。</summary>
        <returns>如果授予访问权限，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="true" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 一般而言，应用程序应该重写 <xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A> 代替这个方法。  
  
 如果应用程序为生成的 <xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccess%2A> 关联或引入一组不同的策略，或另外提供一个策略评估（链接）模型，则重写 <xref:System.ServiceModel.ServiceSecurityContext>。  
  
 此方法负责调用 <xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A>。  
  
   
  
## Examples  
 下面的代码演示如何重写此方法，以强制执行自定义访问控制需求。  
  
 [!code-csharp[c_Federation#1](~/samples/snippets/csharp/VS_Snippets_CFX/c_federation/cs/source.cs#1)]
 [!code-vb[c_Federation#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/c_federation/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckAccess">
      <MemberSignature Language="C#" Value="public virtual bool CheckAccess (System.ServiceModel.OperationContext operationContext, ref System.ServiceModel.Channels.Message message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CheckAccess(class System.ServiceModel.OperationContext operationContext, class System.ServiceModel.Channels.Message&amp; message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.ServiceAuthorizationManager.CheckAccess(System.ServiceModel.OperationContext,System.ServiceModel.Channels.Message@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CheckAccess (operationContext As OperationContext, ByRef message As Message) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CheckAccess(System::ServiceModel::OperationContext ^ operationContext, System::ServiceModel::Channels::Message ^ % message);" />
      <MemberSignature Language="F#" Value="abstract member CheckAccess : System.ServiceModel.OperationContext * Message -&gt; bool&#xA;override this.CheckAccess : System.ServiceModel.OperationContext * Message -&gt; bool" Usage="serviceAuthorizationManager.CheckAccess (operationContext, message)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operationContext" Type="System.ServiceModel.OperationContext" />
        <Parameter Name="message" Type="System.ServiceModel.Channels.Message" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="operationContext"><see cref="T:System.ServiceModel.OperationContext" />。</param>
        <param name="message">要接收检查以确定授权的 <see cref="T:System.ServiceModel.Channels.Message" />。</param>
        <summary>访问所需的消息时，检查给定操作上下文的授权。</summary>
        <returns>如果授予访问权限，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="true" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 一般而言，应用程序应该重写 <xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A> 取代这个方法，这仅在授权决定取决于消息正文的情况下使用。 由于性能问题，如有可能，应重新设计应用程序，使授权决策不需要访问消息正文。  
  
 如果应用程序为生成的  和 关联或引入一组不同的策略，或另外提供一个策略评估（链接）模型，则重写此方法。  
  
 此方法负责调用 <xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A>。  
  
   
  
## Examples  
 下面的代码演示如何重写此方法，以强制执行需要访问消息正文的自定义访问控制需求。  
  
 [!code-csharp[c_Federation#6](~/samples/snippets/csharp/VS_Snippets_CFX/c_federation/cs/source.cs#6)]
 [!code-vb[c_Federation#6](~/samples/snippets/visualbasic/VS_Snippets_CFX/c_federation/vb/source.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckAccessCore">
      <MemberSignature Language="C#" Value="protected virtual bool CheckAccessCore (System.ServiceModel.OperationContext operationContext);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool CheckAccessCore(class System.ServiceModel.OperationContext operationContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore(System.ServiceModel.OperationContext)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function CheckAccessCore (operationContext As OperationContext) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool CheckAccessCore(System::ServiceModel::OperationContext ^ operationContext);" />
      <MemberSignature Language="F#" Value="abstract member CheckAccessCore : System.ServiceModel.OperationContext -&gt; bool&#xA;override this.CheckAccessCore : System.ServiceModel.OperationContext -&gt; bool" Usage="serviceAuthorizationManager.CheckAccessCore operationContext" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operationContext" Type="System.ServiceModel.OperationContext" />
      </Parameters>
      <Docs>
        <param name="operationContext">当前授权请求的 <see cref="T:System.ServiceModel.OperationContext" />。</param>
        <summary>基于默认的策略评估，检查给定操作上下文和可选消息的授权。</summary>
        <returns>如果授予访问权限，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="true" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceModel.OperationContext.ServiceSecurityContext%2A> 通常是由默认的策略评估生成的。  
  
 重写此方法以提供自定义授权决定。  
  
 此方法可用于根据基于传入令牌所推断的或通过外部授权策略所添加的声明集做出授权决定。 此方法还可以根据传入消息（如操作标头）的属性做出授权决定。  
  
 在此方法中，应用程序可以使用 `operationContext` 参数访问调用方标识 (<xref:System.ServiceModel.OperationContext.ServiceSecurityContext%2A>)。 通过从 <xref:System.ServiceModel.Channels.RequestContext> 属性返回 <xref:System.ServiceModel.OperationContext.RequestContext%2A> 对象，应用程序可以访问整个请求消息 (<xref:System.ServiceModel.Channels.RequestContext.RequestMessage%2A>)。 通过从 <xref:System.ServiceModel.Channels.MessageHeaders> 属性返回 <xref:System.ServiceModel.OperationContext.IncomingMessageHeaders%2A> 对象，应用程序可以访问服务 URL (<xref:System.ServiceModel.Channels.MessageHeaders.To%2A>) 和操作 (<xref:System.ServiceModel.Channels.MessageHeaders.Action%2A>)。 获取这些消息后，应用程序可以据此执行授权决定。  
  
 用户做出的声明出现在由 <xref:System.IdentityModel.Claims.ClaimSet> 的 <xref:System.IdentityModel.Policy.AuthorizationContext.ClaimSets%2A> 属性所返回的 `AuthorizationContext` 中。 当前的 `AuthorizationContext` 由 <xref:System.ServiceModel.OperationContext.ServiceSecurityContext%2A> 类的 <xref:System.ServiceModel.OperationContext> 属性返回。  
  
   
  
## Examples  
 下面的示例演示对 <xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A> 方法的重写。  
  
 [!code-csharp[c_CustomAuthMgr#6](~/samples/snippets/csharp/VS_Snippets_CFX/c_customauthmgr/cs/c_customauthmgr.cs#6)]
 [!code-vb[c_CustomAuthMgr#6](~/samples/snippets/visualbasic/VS_Snippets_CFX/c_customauthmgr/vb/c_customauthmgr.vb#6)]  
  
 有关其他示例，请参阅 [如何：为服务创建自定义授权管理器](/dotnet/framework/wcf/extending/how-to-create-a-custom-authorization-manager-for-a-service)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAuthorizationPolicies">
      <MemberSignature Language="C#" Value="protected virtual System.Collections.ObjectModel.ReadOnlyCollection&lt;System.IdentityModel.Policy.IAuthorizationPolicy&gt; GetAuthorizationPolicies (System.ServiceModel.OperationContext operationContext);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.IdentityModel.Policy.IAuthorizationPolicy&gt; GetAuthorizationPolicies(class System.ServiceModel.OperationContext operationContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.ServiceAuthorizationManager.GetAuthorizationPolicies(System.ServiceModel.OperationContext)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetAuthorizationPolicies (operationContext As OperationContext) As ReadOnlyCollection(Of IAuthorizationPolicy)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Collections::ObjectModel::ReadOnlyCollection&lt;System::IdentityModel::Policy::IAuthorizationPolicy ^&gt; ^ GetAuthorizationPolicies(System::ServiceModel::OperationContext ^ operationContext);" />
      <MemberSignature Language="F#" Value="abstract member GetAuthorizationPolicies : System.ServiceModel.OperationContext -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;System.IdentityModel.Policy.IAuthorizationPolicy&gt;&#xA;override this.GetAuthorizationPolicies : System.ServiceModel.OperationContext -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;System.IdentityModel.Policy.IAuthorizationPolicy&gt;" Usage="serviceAuthorizationManager.GetAuthorizationPolicies operationContext" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.IdentityModel.Policy.IAuthorizationPolicy&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operationContext" Type="System.ServiceModel.OperationContext" />
      </Parameters>
      <Docs>
        <param name="operationContext">当前授权请求的 <see cref="T:System.ServiceModel.OperationContext" />。</param>
        <summary>获取参与策略评估的策略集。</summary>
        <returns>一个 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 类型的 <see cref="T:System.IdentityModel.Policy.IAuthorizationPolicy" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 WCF) 实现 (Windows Communication Foundation 提供一组默认的授权策略。 这些策略包括含有请求方凭据的主令牌、所有支持令牌、传输令牌以及外部策略（如果有所指定）。  
  
 您可以重写此实现，并提供一组不同的策略。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
