<Type Name="ServiceHost" FullName="System.ServiceModel.ServiceHost">
  <Metadata><Meta Name="ms.openlocfilehash" Value="9c5ff5edcf0ae31a0c16ad7ff15e4d4fa968b983" /><Meta Name="ms.sourcegitcommit" Value="b53d35b4a410c949742abd4c6a989d1af5357bca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="86591070" /></Metadata><TypeSignature Language="C#" Value="public class ServiceHost : System.ServiceModel.ServiceHostBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ServiceHost extends System.ServiceModel.ServiceHostBase" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.ServiceHost" />
  <TypeSignature Language="VB.NET" Value="Public Class ServiceHost&#xA;Inherits ServiceHostBase" />
  <TypeSignature Language="C++ CLI" Value="public ref class ServiceHost : System::ServiceModel::ServiceHostBase" />
  <TypeSignature Language="F#" Value="type ServiceHost = class&#xA;    inherit ServiceHostBase" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ServiceModel.ServiceHostBase</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="41faa-101">提供服务的主机。</span><span class="sxs-lookup"><span data-stu-id="41faa-101">Provides a host for services.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="41faa-102">实现 Windows Communication Foundation (WCF) 服务模型编程模型所使用的主机。</span><span class="sxs-lookup"><span data-stu-id="41faa-102">Implements the host used by the Windows Communication Foundation (WCF) service model programming model.</span></span>  
  
 <span data-ttu-id="41faa-103">使用 <xref:System.ServiceModel.ServiceHost> 类来配置和公开服务以供客户端应用程序使用，但不使用 Internet Information Services (IIS) 或 Windows 激活服务 () 公开服务。</span><span class="sxs-lookup"><span data-stu-id="41faa-103">Use the <xref:System.ServiceModel.ServiceHost> class to configure and expose a service for use by client applications when you are not using Internet Information Services (IIS) or Windows Activation Services (WAS) to expose a service.</span></span> <span data-ttu-id="41faa-104">IIS 和 WAS 均代表您与 <xref:System.ServiceModel.ServiceHost> 对象交互。</span><span class="sxs-lookup"><span data-stu-id="41faa-104">Both IIS and WAS interact with a <xref:System.ServiceModel.ServiceHost> object on your behalf.</span></span>  
  
 <span data-ttu-id="41faa-105">若要公开服务以供调用方使用，WCF 需要一个完整的服务说明 (<xref:System.ServiceModel.Description.ServiceDescription> 类) 表示。</span><span class="sxs-lookup"><span data-stu-id="41faa-105">To expose a service for use by callers, WCF requires a complete service description (represented by the <xref:System.ServiceModel.Description.ServiceDescription> class).</span></span> <span data-ttu-id="41faa-106"><xref:System.ServiceModel.ServiceHost>类 <xref:System.ServiceModel.Description.ServiceDescription> 从服务类型和配置信息创建，然后使用该说明为 <xref:System.ServiceModel.Dispatcher.ChannelDispatcher> 说明中的每个终结点创建对象。</span><span class="sxs-lookup"><span data-stu-id="41faa-106">The <xref:System.ServiceModel.ServiceHost> class creates a <xref:System.ServiceModel.Description.ServiceDescription> from the service type and configuration information and then uses that description to create <xref:System.ServiceModel.Dispatcher.ChannelDispatcher> objects for each endpoint in the description.</span></span>  
  
 <span data-ttu-id="41faa-107">使用 <xref:System.ServiceModel.ServiceHost> 对象加载服务、配置终结点、应用安全设置，并启动侦听器来处理传入的请求。</span><span class="sxs-lookup"><span data-stu-id="41faa-107">Use a <xref:System.ServiceModel.ServiceHost> object to load a service, configure endpoints, apply security settings, and start listeners to handle incoming requests.</span></span>  
  
   
  
## Examples  
 [!code-csharp[S_SelfHost#1](~/samples/snippets/csharp/VS_Snippets_CFX/s_selfhost/cs/wholeenchilada.cs#1)]
 [!code-vb[S_SelfHost#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/s_selfhost/vb/wholeenchilada.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="41faa-108">初始化 <see cref="T:System.ServiceModel.ServiceHost" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="41faa-108">Initializes a new instance of the <see cref="T:System.ServiceModel.ServiceHost" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ServiceHost ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.ServiceHost.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ServiceHost();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="41faa-109">初始化 <see cref="T:System.ServiceModel.ServiceHost" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="41faa-109">Initializes a new instance of the <see cref="T:System.ServiceModel.ServiceHost" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="41faa-110">有两个构造函数用于创建类的实例 <xref:System.ServiceModel.ServiceHost> 。</span><span class="sxs-lookup"><span data-stu-id="41faa-110">There are two constructors used to create an instance of the <xref:System.ServiceModel.ServiceHost> class.</span></span> <span data-ttu-id="41faa-111"><xref:System.ServiceModel.ServiceHost.%23ctor%28System.Type%2CSystem.Uri%5B%5D%29>在大多数情况下，使用将服务类型作为输入参数的构造函数。</span><span class="sxs-lookup"><span data-stu-id="41faa-111">Use the <xref:System.ServiceModel.ServiceHost.%23ctor%28System.Type%2CSystem.Uri%5B%5D%29> constructor which takes the service type as an input parameter, most of the time.</span></span> <span data-ttu-id="41faa-112">根据需要，主机还可以使用此函数创建新服务。</span><span class="sxs-lookup"><span data-stu-id="41faa-112">The host can use this to create new services as needed.</span></span> <span data-ttu-id="41faa-113"><xref:System.ServiceModel.ServiceHost.%23ctor%28System.Object%2CSystem.Uri%5B%5D%29>仅当你希望服务主机使用服务的特定单一实例时，才使用构造函数。</span><span class="sxs-lookup"><span data-stu-id="41faa-113">Use the <xref:System.ServiceModel.ServiceHost.%23ctor%28System.Object%2CSystem.Uri%5B%5D%29> constructor instead only when you want the service host to use a specific singleton instance of the service.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ServiceHost (object singletonInstance, params Uri[] baseAddresses);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object singletonInstance, class System.Uri[] baseAddresses) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.ServiceHost.#ctor(System.Object,System.Uri[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (singletonInstance As Object, ParamArray baseAddresses As Uri())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ServiceHost(System::Object ^ singletonInstance, ... cli::array &lt;Uri ^&gt; ^ baseAddresses);" />
      <MemberSignature Language="F#" Value="new System.ServiceModel.ServiceHost : obj * Uri[] -&gt; System.ServiceModel.ServiceHost" Usage="new System.ServiceModel.ServiceHost (singletonInstance, baseAddresses)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="singletonInstance" Type="System.Object" />
        <Parameter Name="baseAddresses" Type="System.Uri[]">
          <Attributes>
            <Attribute FrameworkAlternate="netframework-3.0">
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="singletonInstance"><span data-ttu-id="41faa-114">承载的服务的实例。</span><span class="sxs-lookup"><span data-stu-id="41faa-114">The instance of the hosted service.</span></span></param>
        <param name="baseAddresses"><span data-ttu-id="41faa-115"><see cref="T:System.Array" /> 类型的 <see cref="T:System.Uri" />，包含承载服务的基址。</span><span class="sxs-lookup"><span data-stu-id="41faa-115">An <see cref="T:System.Array" /> of type <see cref="T:System.Uri" /> that contains the base addresses for the hosted service.</span></span></param>
        <summary><span data-ttu-id="41faa-116">使用服务的实例及其指定的基址初始化 <see cref="T:System.ServiceModel.ServiceHost" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="41faa-116">Initializes a new instance of the <see cref="T:System.ServiceModel.ServiceHost" /> class with the instance of the service and its base addresses specified.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="41faa-117"><xref:System.ServiceModel.Dispatcher.IInstanceContextInitializer?displayProperty=nameWithType>当你希望提供特定的对象实例供单一实例服务使用时，请使用此构造函数作为实现自定义的替代方法。</span><span class="sxs-lookup"><span data-stu-id="41faa-117">Use this constructor as an alternative to implementing a custom <xref:System.ServiceModel.Dispatcher.IInstanceContextInitializer?displayProperty=nameWithType> when you want to provide a specific object instance for use by a singleton service.</span></span> <span data-ttu-id="41faa-118">当服务实现类型难以构造时（例如，如果该类型不实现无参数的默认公共构造函数），您可能希望使用此重载。</span><span class="sxs-lookup"><span data-stu-id="41faa-118">You may want to use this overload when your service implementation type is difficult to construct (for example, if it does not implement a default public constructor that has no parameters).</span></span>  
  
 <span data-ttu-id="41faa-119">请注意，向此重载提供对象时，与 Windows Communication Foundation (WCF) 实例化行为的某些功能的工作方式有所不同。</span><span class="sxs-lookup"><span data-stu-id="41faa-119">Note that when an object is provided to this overload, some features related to the Windows Communication Foundation (WCF) instancing behavior work differently.</span></span> <span data-ttu-id="41faa-120">例如， <xref:System.ServiceModel.InstanceContext.ReleaseServiceInstance%2A?displayProperty=nameWithType> 当使用此构造函数重载提供已知对象实例时，调用不起作用。</span><span class="sxs-lookup"><span data-stu-id="41faa-120">For example, calling <xref:System.ServiceModel.InstanceContext.ReleaseServiceInstance%2A?displayProperty=nameWithType> have no effect when a well-known object instance is provided using this constructor overload.</span></span> <span data-ttu-id="41faa-121">同样，也将忽略所有其他实例释放机制。</span><span class="sxs-lookup"><span data-stu-id="41faa-121">Similarly, any other instance release mechanism is ignored.</span></span> <span data-ttu-id="41faa-122"><xref:System.ServiceModel.ServiceHost> 的行为总是像对于所有操作都将 <xref:System.ServiceModel.OperationBehaviorAttribute.ReleaseInstanceMode%2A?displayProperty=nameWithType> 属性设置为 <xref:System.ServiceModel.ReleaseInstanceMode.None?displayProperty=nameWithType> 一样。</span><span class="sxs-lookup"><span data-stu-id="41faa-122">The <xref:System.ServiceModel.ServiceHost> always behaves as if the <xref:System.ServiceModel.OperationBehaviorAttribute.ReleaseInstanceMode%2A?displayProperty=nameWithType> property is set to <xref:System.ServiceModel.ReleaseInstanceMode.None?displayProperty=nameWithType> for all operations.</span></span>  
  
   
  
## Examples  
 [!code-csharp[S_UEServiceHost2#1](~/samples/snippets/csharp/VS_Snippets_CFX/s_ueservicehost2/cs/service.cs#1)]
 [!code-vb[S_UEServiceHost2#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/s_ueservicehost2/vb/service.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="41faa-123"><paramref name="singletonInstance" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="41faa-123"><paramref name="singletonInstance" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ServiceHost (Type serviceType, params Uri[] baseAddresses);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Type serviceType, class System.Uri[] baseAddresses) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.ServiceHost.#ctor(System.Type,System.Uri[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (serviceType As Type, ParamArray baseAddresses As Uri())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ServiceHost(Type ^ serviceType, ... cli::array &lt;Uri ^&gt; ^ baseAddresses);" />
      <MemberSignature Language="F#" Value="new System.ServiceModel.ServiceHost : Type * Uri[] -&gt; System.ServiceModel.ServiceHost" Usage="new System.ServiceModel.ServiceHost (serviceType, baseAddresses)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="serviceType" Type="System.Type" />
        <Parameter Name="baseAddresses" Type="System.Uri[]">
          <Attributes>
            <Attribute FrameworkAlternate="netframework-3.0">
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="serviceType"><span data-ttu-id="41faa-124">承载服务的类型。</span><span class="sxs-lookup"><span data-stu-id="41faa-124">The type of hosted service.</span></span></param>
        <param name="baseAddresses"><span data-ttu-id="41faa-125"><see cref="T:System.Uri" /> 类型的数组，包含承载服务的基址。</span><span class="sxs-lookup"><span data-stu-id="41faa-125">An array of type <see cref="T:System.Uri" /> that contains the base addresses for the hosted service.</span></span></param>
        <summary><span data-ttu-id="41faa-126">使用服务的类型及其指定的基址初始化 <see cref="T:System.ServiceModel.ServiceHost" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="41faa-126">Initializes a new instance of the <see cref="T:System.ServiceModel.ServiceHost" /> class with the type of service and its base addresses specified.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="41faa-127">当您具有服务类型并且可以根据需要（即使在需要单一实例时）创建其新实例时，请使用此构造函数。</span><span class="sxs-lookup"><span data-stu-id="41faa-127">Use this constructor when you have the service type and you can create new instances of it when needed, even when you need a singleton instance.</span></span> <span data-ttu-id="41faa-128"><xref:System.ServiceModel.ServiceHost.%23ctor%28System.Object%2CSystem.Uri%5B%5D%29>仅当你希望服务主机使用服务的特定单一实例时，才使用构造函数。</span><span class="sxs-lookup"><span data-stu-id="41faa-128">Use the <xref:System.ServiceModel.ServiceHost.%23ctor%28System.Object%2CSystem.Uri%5B%5D%29> constructor instead only when you want the service host to use a specific singleton instance of the service.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="41faa-129">此示例演示如何使用 <xref:System.ServiceModel.ServiceHost> 类来承载 Windows Communication Foundation 服务：</span><span class="sxs-lookup"><span data-stu-id="41faa-129">This sample illustrates how to use the <xref:System.ServiceModel.ServiceHost> class to host a Windows Communication Foundation service:</span></span>  
  
 [!code-csharp[S_UEServiceHost#1](~/samples/snippets/csharp/VS_Snippets_CFX/s_ueservicehost/cs/service.cs#1)]
 [!code-vb[S_UEServiceHost#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/s_ueservicehost/vb/service.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="41faa-130"><paramref name="serviceType" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="41faa-130"><paramref name="serviceType" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="AddServiceEndpoint">
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="41faa-131">将服务终结点添加到承载服务中。</span><span class="sxs-lookup"><span data-stu-id="41faa-131">Adds a service endpoint to the hosted service.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AddServiceEndpoint">
      <MemberSignature Language="C#" Value="public System.ServiceModel.Description.ServiceEndpoint AddServiceEndpoint (Type implementedContract, System.ServiceModel.Channels.Binding binding, string address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.ServiceModel.Description.ServiceEndpoint AddServiceEndpoint(class System.Type implementedContract, class System.ServiceModel.Channels.Binding binding, string address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.ServiceHost.AddServiceEndpoint(System.Type,System.ServiceModel.Channels.Binding,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddServiceEndpoint (implementedContract As Type, binding As Binding, address As String) As ServiceEndpoint" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::ServiceModel::Description::ServiceEndpoint ^ AddServiceEndpoint(Type ^ implementedContract, System::ServiceModel::Channels::Binding ^ binding, System::String ^ address);" />
      <MemberSignature Language="F#" Value="override this.AddServiceEndpoint : Type * System.ServiceModel.Channels.Binding * string -&gt; System.ServiceModel.Description.ServiceEndpoint" Usage="serviceHost.AddServiceEndpoint (implementedContract, binding, address)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Description.ServiceEndpoint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="implementedContract" Type="System.Type" />
        <Parameter Name="binding" Type="System.ServiceModel.Channels.Binding" />
        <Parameter Name="address" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="implementedContract"><span data-ttu-id="41faa-132">所添加终结点的协定的 <see cref="T:System.Type" />。</span><span class="sxs-lookup"><span data-stu-id="41faa-132">The <see cref="T:System.Type" /> of contract for the endpoint added.</span></span></param>
        <param name="binding"><span data-ttu-id="41faa-133">所添加终结点的 <see cref="T:System.ServiceModel.Channels.Binding" />。</span><span class="sxs-lookup"><span data-stu-id="41faa-133">The <see cref="T:System.ServiceModel.Channels.Binding" /> for the endpoint added.</span></span></param>
        <param name="address"><span data-ttu-id="41faa-134">所添加终结点的地址。</span><span class="sxs-lookup"><span data-stu-id="41faa-134">The address for the endpoint added.</span></span></param>
        <summary><span data-ttu-id="41faa-135">使用指定的协定、绑定和终结点地址将服务终结点添加到承载服务中。</span><span class="sxs-lookup"><span data-stu-id="41faa-135">Adds a service endpoint to the hosted service with a specified contract, binding, and endpoint address.</span></span></summary>
        <returns><span data-ttu-id="41faa-136">添加到承载服务中的 <see cref="T:System.ServiceModel.Description.ServiceEndpoint" />。</span><span class="sxs-lookup"><span data-stu-id="41faa-136">The <see cref="T:System.ServiceModel.Description.ServiceEndpoint" /> added to the hosted service.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 [!code-csharp[S_UEServiceHost#3](~/samples/snippets/csharp/VS_Snippets_CFX/s_ueservicehost/cs/service.cs#3)]
 [!code-vb[S_UEServiceHost#3](~/samples/snippets/visualbasic/VS_Snippets_CFX/s_ueservicehost/vb/service.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="41faa-137"><paramref name="implementedContract" />、<paramref name="binding" /> 或 <paramref name="address" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="41faa-137"><paramref name="implementedContract" /> or <paramref name="binding" /> or <paramref name="address" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="AddServiceEndpoint">
      <MemberSignature Language="C#" Value="public System.ServiceModel.Description.ServiceEndpoint AddServiceEndpoint (Type implementedContract, System.ServiceModel.Channels.Binding binding, Uri address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.ServiceModel.Description.ServiceEndpoint AddServiceEndpoint(class System.Type implementedContract, class System.ServiceModel.Channels.Binding binding, class System.Uri address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.ServiceHost.AddServiceEndpoint(System.Type,System.ServiceModel.Channels.Binding,System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddServiceEndpoint (implementedContract As Type, binding As Binding, address As Uri) As ServiceEndpoint" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::ServiceModel::Description::ServiceEndpoint ^ AddServiceEndpoint(Type ^ implementedContract, System::ServiceModel::Channels::Binding ^ binding, Uri ^ address);" />
      <MemberSignature Language="F#" Value="override this.AddServiceEndpoint : Type * System.ServiceModel.Channels.Binding * Uri -&gt; System.ServiceModel.Description.ServiceEndpoint" Usage="serviceHost.AddServiceEndpoint (implementedContract, binding, address)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Description.ServiceEndpoint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="implementedContract" Type="System.Type" />
        <Parameter Name="binding" Type="System.ServiceModel.Channels.Binding" />
        <Parameter Name="address" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="implementedContract"><span data-ttu-id="41faa-138">所添加终结点的协定的 <see cref="T:System.Type" />。</span><span class="sxs-lookup"><span data-stu-id="41faa-138">The <see cref="T:System.Type" /> of contract for the endpoint added.</span></span></param>
        <param name="binding"><span data-ttu-id="41faa-139">所添加终结点的 <see cref="T:System.ServiceModel.Channels.Binding" />。</span><span class="sxs-lookup"><span data-stu-id="41faa-139">The <see cref="T:System.ServiceModel.Channels.Binding" /> for the endpoint added.</span></span></param>
        <param name="address"><span data-ttu-id="41faa-140">包含所添加终结点地址的 <see cref="T:System.Uri" />。</span><span class="sxs-lookup"><span data-stu-id="41faa-140">The <see cref="T:System.Uri" /> that contains the address for the endpoint added.</span></span></param>
        <summary><span data-ttu-id="41faa-141">使用指定的协定、绑定和包含终结点地址的 URI 将服务终结点添加到承载服务中。</span><span class="sxs-lookup"><span data-stu-id="41faa-141">Adds a service endpoint to the hosted service with a specified contract, binding, and URI that contains the endpoint address.</span></span></summary>
        <returns><span data-ttu-id="41faa-142">添加到承载服务中的 <see cref="T:System.ServiceModel.Description.ServiceEndpoint" />。</span><span class="sxs-lookup"><span data-stu-id="41faa-142">The <see cref="T:System.ServiceModel.Description.ServiceEndpoint" /> added to the hosted service.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 [!code-csharp[S_UEServiceHost#4](~/samples/snippets/csharp/VS_Snippets_CFX/s_ueservicehost/cs/service.cs#4)]
 [!code-vb[S_UEServiceHost#4](~/samples/snippets/visualbasic/VS_Snippets_CFX/s_ueservicehost/vb/service.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="41faa-143"><paramref name="implementedContract" />、<paramref name="binding" /> 或 <paramref name="address" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="41faa-143"><paramref name="implementedContract" /> or <paramref name="binding" /> or <paramref name="address" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="AddServiceEndpoint">
      <MemberSignature Language="C#" Value="public System.ServiceModel.Description.ServiceEndpoint AddServiceEndpoint (Type implementedContract, System.ServiceModel.Channels.Binding binding, string address, Uri listenUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.ServiceModel.Description.ServiceEndpoint AddServiceEndpoint(class System.Type implementedContract, class System.ServiceModel.Channels.Binding binding, string address, class System.Uri listenUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.ServiceHost.AddServiceEndpoint(System.Type,System.ServiceModel.Channels.Binding,System.String,System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddServiceEndpoint (implementedContract As Type, binding As Binding, address As String, listenUri As Uri) As ServiceEndpoint" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::ServiceModel::Description::ServiceEndpoint ^ AddServiceEndpoint(Type ^ implementedContract, System::ServiceModel::Channels::Binding ^ binding, System::String ^ address, Uri ^ listenUri);" />
      <MemberSignature Language="F#" Value="override this.AddServiceEndpoint : Type * System.ServiceModel.Channels.Binding * string * Uri -&gt; System.ServiceModel.Description.ServiceEndpoint" Usage="serviceHost.AddServiceEndpoint (implementedContract, binding, address, listenUri)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Description.ServiceEndpoint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="implementedContract" Type="System.Type" />
        <Parameter Name="binding" Type="System.ServiceModel.Channels.Binding" />
        <Parameter Name="address" Type="System.String" />
        <Parameter Name="listenUri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="implementedContract"><span data-ttu-id="41faa-144">所添加终结点的协定的 <see cref="T:System.Type" />。</span><span class="sxs-lookup"><span data-stu-id="41faa-144">The <see cref="T:System.Type" /> of contract for the endpoint added.</span></span></param>
        <param name="binding"><span data-ttu-id="41faa-145">所添加终结点的 <see cref="T:System.ServiceModel.Channels.Binding" />。</span><span class="sxs-lookup"><span data-stu-id="41faa-145">The <see cref="T:System.ServiceModel.Channels.Binding" /> for the endpoint added.</span></span></param>
        <param name="address"><span data-ttu-id="41faa-146">服务的终结点地址。</span><span class="sxs-lookup"><span data-stu-id="41faa-146">The endpoint address for the service.</span></span></param>
        <param name="listenUri"><span data-ttu-id="41faa-147">服务终结点可在其上侦听的 <see cref="T:System.Uri" />。</span><span class="sxs-lookup"><span data-stu-id="41faa-147">The <see cref="T:System.Uri" /> on which the service endpoints can listen.</span></span></param>
        <summary><span data-ttu-id="41faa-148">使用指定的协定、绑定和终结点地址以及服务在其上侦听的 URI 将服务终结点添加到承载服务中。</span><span class="sxs-lookup"><span data-stu-id="41faa-148">Adds a service endpoint to the hosted service with a specified contract, binding, an endpoint address, and a URI on which the service listens.</span></span></summary>
        <returns><span data-ttu-id="41faa-149">添加到承载服务中的 <see cref="T:System.ServiceModel.Description.ServiceEndpoint" />。</span><span class="sxs-lookup"><span data-stu-id="41faa-149">The <see cref="T:System.ServiceModel.Description.ServiceEndpoint" /> added to the hosted service.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="41faa-150">当您有多个终结点需要在同一个指定的 URI 上侦听时，请使用此版本的方法。</span><span class="sxs-lookup"><span data-stu-id="41faa-150">Use this version of the method when you have multiple endpoints that need to listen on the same, specified URI.</span></span>  
  
   
  
## Examples  
 [!code-csharp[S_UEServiceHost#5](~/samples/snippets/csharp/VS_Snippets_CFX/s_ueservicehost/cs/service.cs#5)]
 [!code-vb[S_UEServiceHost#5](~/samples/snippets/visualbasic/VS_Snippets_CFX/s_ueservicehost/vb/service.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="41faa-151"><paramref name="implementedContract" />、<paramref name="binding" /> 或 <paramref name="address" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="41faa-151"><paramref name="implementedContract" /> or <paramref name="binding" /> or <paramref name="address" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="AddServiceEndpoint">
      <MemberSignature Language="C#" Value="public System.ServiceModel.Description.ServiceEndpoint AddServiceEndpoint (Type implementedContract, System.ServiceModel.Channels.Binding binding, Uri address, Uri listenUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.ServiceModel.Description.ServiceEndpoint AddServiceEndpoint(class System.Type implementedContract, class System.ServiceModel.Channels.Binding binding, class System.Uri address, class System.Uri listenUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.ServiceHost.AddServiceEndpoint(System.Type,System.ServiceModel.Channels.Binding,System.Uri,System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddServiceEndpoint (implementedContract As Type, binding As Binding, address As Uri, listenUri As Uri) As ServiceEndpoint" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::ServiceModel::Description::ServiceEndpoint ^ AddServiceEndpoint(Type ^ implementedContract, System::ServiceModel::Channels::Binding ^ binding, Uri ^ address, Uri ^ listenUri);" />
      <MemberSignature Language="F#" Value="override this.AddServiceEndpoint : Type * System.ServiceModel.Channels.Binding * Uri * Uri -&gt; System.ServiceModel.Description.ServiceEndpoint" Usage="serviceHost.AddServiceEndpoint (implementedContract, binding, address, listenUri)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Description.ServiceEndpoint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="implementedContract" Type="System.Type" />
        <Parameter Name="binding" Type="System.ServiceModel.Channels.Binding" />
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="listenUri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="implementedContract"><span data-ttu-id="41faa-152">所添加终结点的协定的 <see cref="T:System.Type" />。</span><span class="sxs-lookup"><span data-stu-id="41faa-152">The <see cref="T:System.Type" /> of contract for the endpoint added.</span></span></param>
        <param name="binding"><span data-ttu-id="41faa-153">所添加终结点的 <see cref="T:System.ServiceModel.Channels.Binding" />。</span><span class="sxs-lookup"><span data-stu-id="41faa-153">The <see cref="T:System.ServiceModel.Channels.Binding" /> for the endpoint added.</span></span></param>
        <param name="address"><span data-ttu-id="41faa-154">包含所添加终结点地址的 <see cref="T:System.Uri" />。</span><span class="sxs-lookup"><span data-stu-id="41faa-154">The <see cref="T:System.Uri" /> that contains the address for the endpoint added.</span></span></param>
        <param name="listenUri"><span data-ttu-id="41faa-155">服务终结点可在其上侦听的 <see cref="T:System.Uri" />。</span><span class="sxs-lookup"><span data-stu-id="41faa-155">The <see cref="T:System.Uri" /> on which the service endpoints can listen.</span></span></param>
        <summary><span data-ttu-id="41faa-156">使用指定的协定、绑定、包含终结点地址的 URI 以及服务在其上侦听的 URI 将服务终结点添加到承载服务中。</span><span class="sxs-lookup"><span data-stu-id="41faa-156">Adds a service endpoint to the hosted service with a specified contract, binding, a URI that contains the endpoint address, and a URI on which the service listens.</span></span></summary>
        <returns><span data-ttu-id="41faa-157">添加到承载服务中的 <see cref="T:System.ServiceModel.Description.ServiceEndpoint" />。</span><span class="sxs-lookup"><span data-stu-id="41faa-157">The <see cref="T:System.ServiceModel.Description.ServiceEndpoint" /> added to the hosted service.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="41faa-158">当您有多个终结点需要在同一个指定的 URI 上侦听时，请使用此版本的方法。</span><span class="sxs-lookup"><span data-stu-id="41faa-158">Use this version of the method when you have multiple endpoints that need to listen on the same, specified URI.</span></span>  
  
   
  
## Examples  
 [!code-csharp[S_UEServiceHost#6](~/samples/snippets/csharp/VS_Snippets_CFX/s_ueservicehost/cs/service.cs#6)]
 [!code-vb[S_UEServiceHost#6](~/samples/snippets/visualbasic/VS_Snippets_CFX/s_ueservicehost/vb/service.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="41faa-159"><paramref name="implementedContract" />、<paramref name="binding" /> 或 <paramref name="address" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="41faa-159"><paramref name="implementedContract" /> or <paramref name="binding" /> or <paramref name="address" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="41faa-160">尚未初始化协定或无法找到协定密钥。</span><span class="sxs-lookup"><span data-stu-id="41faa-160">The contracts are not initialized or the contract keys cannot be found.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ApplyConfiguration">
      <MemberSignature Language="C#" Value="protected override void ApplyConfiguration ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void ApplyConfiguration() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.ServiceHost.ApplyConfiguration" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub ApplyConfiguration ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void ApplyConfiguration();" />
      <MemberSignature Language="F#" Value="override this.ApplyConfiguration : unit -&gt; unit" Usage="serviceHost.ApplyConfiguration " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="41faa-161">从配置文件加载服务说明，并将其应用于正在构造的运行库。</span><span class="sxs-lookup"><span data-stu-id="41faa-161">Loads the service description from the configuration file and applies it to the runtime being constructed.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateDescription">
      <MemberSignature Language="C#" Value="protected override System.ServiceModel.Description.ServiceDescription CreateDescription (out System.Collections.Generic.IDictionary&lt;string,System.ServiceModel.Description.ContractDescription&gt; implementedContracts);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.ServiceModel.Description.ServiceDescription CreateDescription([out] class System.Collections.Generic.IDictionary`2&lt;string, class System.ServiceModel.Description.ContractDescription&gt;&amp; implementedContracts) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.ServiceHost.CreateDescription(System.Collections.Generic.IDictionary{System.String,System.ServiceModel.Description.ContractDescription}@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CreateDescription (ByRef implementedContracts As IDictionary(Of String, ContractDescription)) As ServiceDescription" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::ServiceModel::Description::ServiceDescription ^ CreateDescription([Runtime::InteropServices::Out] System::Collections::Generic::IDictionary&lt;System::String ^, System::ServiceModel::Description::ContractDescription ^&gt; ^ % implementedContracts);" />
      <MemberSignature Language="F#" Value="override this.CreateDescription : IDictionary -&gt; System.ServiceModel.Description.ServiceDescription" Usage="serviceHost.CreateDescription implementedContracts" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Description.ServiceDescription</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="implementedContracts" Type="System.Collections.Generic.IDictionary&lt;System.String,System.ServiceModel.Description.ContractDescription&gt;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="implementedContracts"><span data-ttu-id="41faa-162">具有密钥对类型（<see cref="T:System.Collections.Generic.IDictionary`2" />、<see cref="T:System.String" />）的 <see cref="T:System.ServiceModel.Description.ContractDescription" />，包含已实现的承载服务的键控协定。</span><span class="sxs-lookup"><span data-stu-id="41faa-162">The <see cref="T:System.Collections.Generic.IDictionary`2" /> with key pairs of type (<see cref="T:System.String" />, <see cref="T:System.ServiceModel.Description.ContractDescription" />) that contains the keyed-contracts of the hosted service that have been implemented.</span></span></param>
        <summary><span data-ttu-id="41faa-163">创建承载服务的说明。</span><span class="sxs-lookup"><span data-stu-id="41faa-163">Creates a description of the service hosted.</span></span></summary>
        <returns><span data-ttu-id="41faa-164">承载服务的 <see cref="T:System.ServiceModel.Description.ServiceDescription" />。</span><span class="sxs-lookup"><span data-stu-id="41faa-164">A <see cref="T:System.ServiceModel.Description.ServiceDescription" /> of the hosted service.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="41faa-165">此方法用于通过自定义编程模型构造协定说明。</span><span class="sxs-lookup"><span data-stu-id="41faa-165">This method is used to construct contract descriptions from customized programming models.</span></span> <span data-ttu-id="41faa-166">重写相应的基类方法 <xref:System.ServiceModel.ServiceHostBase.CreateDescription%28System.Collections.Generic.IDictionary%7BSystem.String%2CSystem.ServiceModel.Description.ContractDescription%7D%40%29> 以实现自定义模型。</span><span class="sxs-lookup"><span data-stu-id="41faa-166">Override the corresponding base class method, <xref:System.ServiceModel.ServiceHostBase.CreateDescription%28System.Collections.Generic.IDictionary%7BSystem.String%2CSystem.ServiceModel.Description.ContractDescription%7D%40%29>, to implement the customized model.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="41faa-167">承载服务的类型为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="41faa-167">The type of service hosted is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="InitializeDescription">
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="41faa-168">基于承载服务的类型或实例初始化该承载服务的说明。</span><span class="sxs-lookup"><span data-stu-id="41faa-168">Initializes a description of the service hosted based on its type or instance.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="41faa-169">此方法消除了将基址作为的一部分传递的要求 <xref:System.ServiceModel.ServiceHost.%23ctor%2A> 。</span><span class="sxs-lookup"><span data-stu-id="41faa-169">This method removes the requirement for passing base addresses as part of <xref:System.ServiceModel.ServiceHost.%23ctor%2A>.</span></span> <span data-ttu-id="41faa-170">从继承的类 <xref:System.ServiceModel.ServiceHost> 可以调用 <xref:System.ServiceModel.ServiceHost.%23ctor%2A> ，然后在 <xref:System.ServiceModel.ServiceHost.InitializeDescription%2A> 基址可用时调用的类。</span><span class="sxs-lookup"><span data-stu-id="41faa-170">Classes that inherit from <xref:System.ServiceModel.ServiceHost> can call <xref:System.ServiceModel.ServiceHost.%23ctor%2A> and then can call one of the <xref:System.ServiceModel.ServiceHost.InitializeDescription%2A> when a base address is available.</span></span> <span data-ttu-id="41faa-171">这就是服务模块元数据实用工具 (Svcutil.exe) 的实现方式。</span><span class="sxs-lookup"><span data-stu-id="41faa-171">This is how the Service Model Metadata Utility Tool (Svcutil.exe) is implemented.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="InitializeDescription">
      <MemberSignature Language="C#" Value="protected void InitializeDescription (object singletonInstance, System.ServiceModel.UriSchemeKeyedCollection baseAddresses);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void InitializeDescription(object singletonInstance, class System.ServiceModel.UriSchemeKeyedCollection baseAddresses) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.ServiceHost.InitializeDescription(System.Object,System.ServiceModel.UriSchemeKeyedCollection)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub InitializeDescription (singletonInstance As Object, baseAddresses As UriSchemeKeyedCollection)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void InitializeDescription(System::Object ^ singletonInstance, System::ServiceModel::UriSchemeKeyedCollection ^ baseAddresses);" />
      <MemberSignature Language="F#" Value="override this.InitializeDescription : obj * System.ServiceModel.UriSchemeKeyedCollection -&gt; unit" Usage="serviceHost.InitializeDescription (singletonInstance, baseAddresses)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="singletonInstance" Type="System.Object" />
        <Parameter Name="baseAddresses" Type="System.ServiceModel.UriSchemeKeyedCollection" />
      </Parameters>
      <Docs>
        <param name="singletonInstance"><span data-ttu-id="41faa-172">承载的服务的实例。</span><span class="sxs-lookup"><span data-stu-id="41faa-172">The instance of the hosted service.</span></span></param>
        <param name="baseAddresses"><span data-ttu-id="41faa-173">包含承载服务基址的 <see cref="T:System.ServiceModel.UriSchemeKeyedCollection" />。</span><span class="sxs-lookup"><span data-stu-id="41faa-173">The <see cref="T:System.ServiceModel.UriSchemeKeyedCollection" /> that contains the base addresses for the hosted service.</span></span></param>
        <summary><span data-ttu-id="41faa-174">基于承载服务的实例和指定的基址初始化该承载服务的说明。</span><span class="sxs-lookup"><span data-stu-id="41faa-174">Initializes a description of the service hosted based on its instance and specified base addresses.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="41faa-175"><paramref name="singletonInstance" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="41faa-175"><paramref name="singletonInstance" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="InitializeDescription">
      <MemberSignature Language="C#" Value="protected void InitializeDescription (Type serviceType, System.ServiceModel.UriSchemeKeyedCollection baseAddresses);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void InitializeDescription(class System.Type serviceType, class System.ServiceModel.UriSchemeKeyedCollection baseAddresses) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.ServiceHost.InitializeDescription(System.Type,System.ServiceModel.UriSchemeKeyedCollection)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub InitializeDescription (serviceType As Type, baseAddresses As UriSchemeKeyedCollection)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void InitializeDescription(Type ^ serviceType, System::ServiceModel::UriSchemeKeyedCollection ^ baseAddresses);" />
      <MemberSignature Language="F#" Value="override this.InitializeDescription : Type * System.ServiceModel.UriSchemeKeyedCollection -&gt; unit" Usage="serviceHost.InitializeDescription (serviceType, baseAddresses)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceType" Type="System.Type" />
        <Parameter Name="baseAddresses" Type="System.ServiceModel.UriSchemeKeyedCollection" />
      </Parameters>
      <Docs>
        <param name="serviceType"><span data-ttu-id="41faa-176">承载服务的 <see cref="T:System.Type" />。</span><span class="sxs-lookup"><span data-stu-id="41faa-176">The <see cref="T:System.Type" /> of service hosted.</span></span></param>
        <param name="baseAddresses"><span data-ttu-id="41faa-177">包含承载服务基址的 <see cref="T:System.ServiceModel.UriSchemeKeyedCollection" />。</span><span class="sxs-lookup"><span data-stu-id="41faa-177">The <see cref="T:System.ServiceModel.UriSchemeKeyedCollection" /> that contains the base addresses for the hosted service.</span></span></param>
        <summary><span data-ttu-id="41faa-178">基于承载服务的类型和指定的基址初始化该承载服务的说明。</span><span class="sxs-lookup"><span data-stu-id="41faa-178">Initializes a description of the service hosted based on its type and specified base addresses.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="41faa-179"><paramref name="serviceType" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="41faa-179"><paramref name="serviceType" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="OnClosed">
      <MemberSignature Language="C#" Value="protected override void OnClosed ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnClosed() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.ServiceHost.OnClosed" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnClosed ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnClosed();" />
      <MemberSignature Language="F#" Value="override this.OnClosed : unit -&gt; unit" Usage="serviceHost.OnClosed " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="41faa-180">当服务主机关闭时，释放所承载的可处置服务。</span><span class="sxs-lookup"><span data-stu-id="41faa-180">Disposes of disposable services that are being hosted when the service host is closed.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="41faa-181">重写 <xref:System.ServiceModel.ServiceHost.OnClosed%2A> 方法时，必须确保基。即使发生异常，也会调用 OnClosed 方法。</span><span class="sxs-lookup"><span data-stu-id="41faa-181">When overriding the <xref:System.ServiceModel.ServiceHost.OnClosed%2A> method you must ensure the base.OnClosed method is called, even if an exception occurs.</span></span> <span data-ttu-id="41faa-182">下面的代码演示如何执行此操作。</span><span class="sxs-lookup"><span data-stu-id="41faa-182">The following code illustrates how to do this.</span></span>  
  
```  
protected override void OnClosed()  
{  
    try  
    {  
        if (FaultFlagService.faultFlag == ThrowDuring.OnClosed)  
        {  
            FaultFlagService.faultFlag = ThrowDuring.Never;  
            throw new ServiceActivationException("Faulting the service because FaultFlagService.faultFlag = ThrowDuring.OnClosed");  
        }  
    }  
    finally  
    {  
        base.OnClosed();  
    }  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SingletonInstance">
      <MemberSignature Language="C#" Value="public object SingletonInstance { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object SingletonInstance" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.ServiceHost.SingletonInstance" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SingletonInstance As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ SingletonInstance { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SingletonInstance : obj" Usage="System.ServiceModel.ServiceHost.SingletonInstance" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="41faa-183">获取承载服务的单一实例。</span><span class="sxs-lookup"><span data-stu-id="41faa-183">Gets the singleton instance of the hosted service.</span></span></summary>
        <value><span data-ttu-id="41faa-184">承载服务对象。</span><span class="sxs-lookup"><span data-stu-id="41faa-184">The hosted service object.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="41faa-185"><xref:System.ServiceModel.ServiceHost.%23ctor%28System.Object%2CSystem.Uri%5B%5D%29>如果要控制所使用的服务实例，请使用构造函数来初始化要承载的服务的单一实例。</span><span class="sxs-lookup"><span data-stu-id="41faa-185">Use the <xref:System.ServiceModel.ServiceHost.%23ctor%28System.Object%2CSystem.Uri%5B%5D%29> constructor to initialize a singleton instance of the service to be hosted when you want to control the instance of the service that is used.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
