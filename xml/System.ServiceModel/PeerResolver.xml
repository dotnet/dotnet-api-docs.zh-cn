<Type Name="PeerResolver" FullName="System.ServiceModel.PeerResolver">
  <Metadata><Meta Name="ms.openlocfilehash" Value="a6f63fb401b0a06dc5a1f03dfb244a78e1302a50" /><Meta Name="ms.sourcegitcommit" Value="b53d35b4a410c949742abd4c6a989d1af5357bca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="86827687" /></Metadata><TypeSignature Language="C#" Value="public abstract class PeerResolver" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit PeerResolver extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.PeerResolver" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class PeerResolver" />
  <TypeSignature Language="C++ CLI" Value="public ref class PeerResolver abstract" />
  <TypeSignature Language="F#" Value="type PeerResolver = class" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="647ee-101">指定一个基类型，用于定义对等网格 ID 的注册协定以及将对等网格 ID 解析为参与网格的节点终结点地址的协定。</span><span class="sxs-lookup"><span data-stu-id="647ee-101">Specifies a base type used to define the contract for the registration and resolution of a peer mesh ID to the endpoint addresses of nodes participating in the mesh.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="647ee-102">此类是实现自定义对等名解析程序的基类。</span><span class="sxs-lookup"><span data-stu-id="647ee-102">This class is the base class for the implementation of custom peer name resolvers.</span></span> <span data-ttu-id="647ee-103">对等名解析程序是对等通道用于查找参与对等网格的对等节点的发现服务。</span><span class="sxs-lookup"><span data-stu-id="647ee-103">A peer name resolver is a discovery service used by peer channels to find peer nodes participating in a peer mesh.</span></span> <span data-ttu-id="647ee-104">它还可以用于在对等网格中“注册”节点，即对等节点在对等网格中变为已知和可用的机制。</span><span class="sxs-lookup"><span data-stu-id="647ee-104">It is also used to "register" a node with a peer mesh, the mechanism by which the peer node becomes known and available from the peer mesh.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected PeerResolver ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.PeerResolver.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; PeerResolver();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="647ee-105">初始化 <see cref="T:System.ServiceModel.PeerResolver" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="647ee-105">Initializes a new instance of the <see cref="T:System.ServiceModel.PeerResolver" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanShareReferrals">
      <MemberSignature Language="C#" Value="public abstract bool CanShareReferrals { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanShareReferrals" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.PeerResolver.CanShareReferrals" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property CanShareReferrals As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property bool CanShareReferrals { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanShareReferrals : bool" Usage="System.ServiceModel.PeerResolver.CanShareReferrals" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="647ee-106">获取对等名解析程序是否可以共享引用。</span><span class="sxs-lookup"><span data-stu-id="647ee-106">Gets whether the peer name resolver can share referrals.</span></span></summary>
        <value><span data-ttu-id="647ee-107">如果为 True，对等名解析程序就可以共享引用；如果为 False，则不能共享。</span><span class="sxs-lookup"><span data-stu-id="647ee-107">If true, the peer name resolver can share referrals; if false, it cannot.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Initialize">
      <MemberSignature Language="C#" Value="public virtual void Initialize (System.ServiceModel.EndpointAddress address, System.ServiceModel.Channels.Binding binding, System.ServiceModel.Description.ClientCredentials credentials, System.ServiceModel.PeerResolvers.PeerReferralPolicy referralPolicy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Initialize(class System.ServiceModel.EndpointAddress address, class System.ServiceModel.Channels.Binding binding, class System.ServiceModel.Description.ClientCredentials credentials, valuetype System.ServiceModel.PeerResolvers.PeerReferralPolicy referralPolicy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.PeerResolver.Initialize(System.ServiceModel.EndpointAddress,System.ServiceModel.Channels.Binding,System.ServiceModel.Description.ClientCredentials,System.ServiceModel.PeerResolvers.PeerReferralPolicy)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Initialize (address As EndpointAddress, binding As Binding, credentials As ClientCredentials, referralPolicy As PeerReferralPolicy)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Initialize(System::ServiceModel::EndpointAddress ^ address, System::ServiceModel::Channels::Binding ^ binding, System::ServiceModel::Description::ClientCredentials ^ credentials, System::ServiceModel::PeerResolvers::PeerReferralPolicy referralPolicy);" />
      <MemberSignature Language="F#" Value="abstract member Initialize : System.ServiceModel.EndpointAddress * System.ServiceModel.Channels.Binding * System.ServiceModel.Description.ClientCredentials * System.ServiceModel.PeerResolvers.PeerReferralPolicy -&gt; unit&#xA;override this.Initialize : System.ServiceModel.EndpointAddress * System.ServiceModel.Channels.Binding * System.ServiceModel.Description.ClientCredentials * System.ServiceModel.PeerResolvers.PeerReferralPolicy -&gt; unit" Usage="peerResolver.Initialize (address, binding, credentials, referralPolicy)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.ServiceModel.EndpointAddress" />
        <Parameter Name="binding" Type="System.ServiceModel.Channels.Binding" />
        <Parameter Name="credentials" Type="System.ServiceModel.Description.ClientCredentials" />
        <Parameter Name="referralPolicy" Type="System.ServiceModel.PeerResolvers.PeerReferralPolicy" />
      </Parameters>
      <Docs>
        <param name="address"><span data-ttu-id="647ee-108">包含此对等解析程序实例的新终结点地址的 <see cref="T:System.ServiceModel.EndpointAddress" />。</span><span class="sxs-lookup"><span data-stu-id="647ee-108"><see cref="T:System.ServiceModel.EndpointAddress" /> that contains the new endpoint address of this peer resolver instance.</span></span></param>
        <param name="binding"><span data-ttu-id="647ee-109">为此对等解析程序指定新网络绑定的 <see cref="T:System.ServiceModel.Channels.Binding" />。</span><span class="sxs-lookup"><span data-stu-id="647ee-109"><see cref="T:System.ServiceModel.Channels.Binding" /> that specifies the new network binding for this peer resolver.</span></span></param>
        <param name="credentials"><span data-ttu-id="647ee-110">为此对等解析程序指定新客户端凭据的 <see cref="T:System.ServiceModel.Description.ClientCredentials" />。</span><span class="sxs-lookup"><span data-stu-id="647ee-110"><see cref="T:System.ServiceModel.Description.ClientCredentials" /> that specifies the new client credentials for this peer resolver.</span></span></param>
        <param name="referralPolicy"><span data-ttu-id="647ee-111">为此对等解析程序指定新引用策略的 <see cref="T:System.ServiceModel.PeerResolvers.PeerReferralPolicy" />。</span><span class="sxs-lookup"><span data-stu-id="647ee-111"><see cref="T:System.ServiceModel.PeerResolvers.PeerReferralPolicy" /> that specifies the new referral policy for this peer resolver.</span></span></param>
        <summary><span data-ttu-id="647ee-112">使用新提供的终结点地址和设置初始化当前对等解析程序实例。</span><span class="sxs-lookup"><span data-stu-id="647ee-112">Initializes the current peer resolver instance with the new supplied endpoint address and settings.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="647ee-113">此方法仅初始化现有对等解析程序实例；它并不创建新解析程序。</span><span class="sxs-lookup"><span data-stu-id="647ee-113">This method simply initializes the existing peer resolver instance; it does not create a new one.</span></span> <span data-ttu-id="647ee-114">若要创建新的对等解析程序，请在相应的绑定元素（例如，<xref:System.ServiceModel.Channels.PnrpPeerResolverBindingElement>）上调用 CreatePeerResolver 方法。</span><span class="sxs-lookup"><span data-stu-id="647ee-114">To create a new peer resolver, call the CreatePeerResolver method on the corresponding binding element (for example, <xref:System.ServiceModel.Channels.PnrpPeerResolverBindingElement>).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Register">
      <MemberSignature Language="C#" Value="public abstract object Register (string meshId, System.ServiceModel.PeerNodeAddress nodeAddress, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Register(string meshId, class System.ServiceModel.PeerNodeAddress nodeAddress, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.PeerResolver.Register(System.String,System.ServiceModel.PeerNodeAddress,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Register (meshId As String, nodeAddress As PeerNodeAddress, timeout As TimeSpan) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Object ^ Register(System::String ^ meshId, System::ServiceModel::PeerNodeAddress ^ nodeAddress, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="abstract member Register : string * System.ServiceModel.PeerNodeAddress * TimeSpan -&gt; obj" Usage="peerResolver.Register (meshId, nodeAddress, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="meshId" Type="System.String" />
        <Parameter Name="nodeAddress" Type="System.ServiceModel.PeerNodeAddress" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="meshId"><span data-ttu-id="647ee-115">要在其中注册对等节点的对等网格的 ID。</span><span class="sxs-lookup"><span data-stu-id="647ee-115">The ID of the peer mesh in which the peer node is to be registered.</span></span></param>
        <param name="nodeAddress"><span data-ttu-id="647ee-116">要向对等网格注册的 <see cref="T:System.ServiceModel.PeerNodeAddress" />。</span><span class="sxs-lookup"><span data-stu-id="647ee-116">The <see cref="T:System.ServiceModel.PeerNodeAddress" /> to be registered with the peer mesh.</span></span></param>
        <param name="timeout"><span data-ttu-id="647ee-117">停止尝试向对等网格注册之前，等待成功注册的时间。</span><span class="sxs-lookup"><span data-stu-id="647ee-117">The length of time to wait for success before aborting the attempt to register with the peer mesh.</span></span> <span data-ttu-id="647ee-118">如果尝试失败，对等网格上将引发 <see cref="T:System.TimeoutException" />。</span><span class="sxs-lookup"><span data-stu-id="647ee-118">If the attempt fails, <see cref="T:System.TimeoutException" /> is raised on the peer.</span></span></param>
        <summary><span data-ttu-id="647ee-119">为指定的对等网格注册 <see cref="T:System.ServiceModel.PeerNodeAddress" />。</span><span class="sxs-lookup"><span data-stu-id="647ee-119">Registers a <see cref="T:System.ServiceModel.PeerNodeAddress" /> for a specific peer mesh.</span></span></summary>
        <returns><span data-ttu-id="647ee-120">表示注册 ID 的 <see cref="T:System.Object" />。</span><span class="sxs-lookup"><span data-stu-id="647ee-120">An <see cref="T:System.Object" /> that represents the registration ID.</span></span> <span data-ttu-id="647ee-121">此注册 ID 对象将传递给 <see cref="M:System.ServiceModel.PeerResolver.Update(System.Object,System.ServiceModel.PeerNodeAddress,System.TimeSpan)" /> 和 <see cref="M:System.ServiceModel.PeerResolver.Unregister(System.Object,System.TimeSpan)" /> 方法。</span><span class="sxs-lookup"><span data-stu-id="647ee-121">This registration ID object is passed to the <see cref="M:System.ServiceModel.PeerResolver.Update(System.Object,System.ServiceModel.PeerNodeAddress,System.TimeSpan)" /> and <see cref="M:System.ServiceModel.PeerResolver.Unregister(System.Object,System.TimeSpan)" /> methods.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Resolve">
      <MemberSignature Language="C#" Value="public abstract System.Collections.ObjectModel.ReadOnlyCollection&lt;System.ServiceModel.PeerNodeAddress&gt; Resolve (string meshId, int maxAddresses, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.ServiceModel.PeerNodeAddress&gt; Resolve(string meshId, int32 maxAddresses, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.PeerResolver.Resolve(System.String,System.Int32,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Resolve (meshId As String, maxAddresses As Integer, timeout As TimeSpan) As ReadOnlyCollection(Of PeerNodeAddress)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Collections::ObjectModel::ReadOnlyCollection&lt;System::ServiceModel::PeerNodeAddress ^&gt; ^ Resolve(System::String ^ meshId, int maxAddresses, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="abstract member Resolve : string * int * TimeSpan -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;System.ServiceModel.PeerNodeAddress&gt;" Usage="peerResolver.Resolve (meshId, maxAddresses, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.ServiceModel.PeerNodeAddress&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="meshId" Type="System.String" />
        <Parameter Name="maxAddresses" Type="System.Int32" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="meshId"><span data-ttu-id="647ee-122">要在其中获取表示参与节点的 <see cref="T:System.ServiceModel.PeerNodeAddress" /> 对象的对等网格的网格 ID。</span><span class="sxs-lookup"><span data-stu-id="647ee-122">The mesh ID of the peer mesh within which the <see cref="T:System.ServiceModel.PeerNodeAddress" /> objects representing participating nodes are to be obtained.</span></span></param>
        <param name="maxAddresses"><span data-ttu-id="647ee-123">要返回的终结点地址的数量。</span><span class="sxs-lookup"><span data-stu-id="647ee-123">The number of endpoint addresses to return.</span></span></param>
        <param name="timeout"><span data-ttu-id="647ee-124">停止在对等网格中尝试解析终结点地址之前，等待成功解析的时间。</span><span class="sxs-lookup"><span data-stu-id="647ee-124">The length of time to wait for success before aborting the attempt to resolve endpoint addresses within the peer mesh.</span></span> <span data-ttu-id="647ee-125">如果尝试失败，对等网格上将引发 <see cref="T:System.TimeoutException" />。</span><span class="sxs-lookup"><span data-stu-id="647ee-125">If the attempt fails, <see cref="T:System.TimeoutException" /> is raised on the peer.</span></span></param>
        <summary><span data-ttu-id="647ee-126">将提供的网格 ID 解析为零或更多参与对等网格的节点的终结点地址。</span><span class="sxs-lookup"><span data-stu-id="647ee-126">Resolves the supplied mesh ID to zero or more endpoint addresses of nodes participating in the peer mesh.</span></span></summary>
        <returns><span data-ttu-id="647ee-127">一个 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />，包含表示参与对等网格的节点的 <see cref="T:System.ServiceModel.PeerNodeAddress" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="647ee-127">A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> that contains <see cref="T:System.ServiceModel.PeerNodeAddress" /> objects representing nodes participating in the peer mesh.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Unregister">
      <MemberSignature Language="C#" Value="public abstract void Unregister (object registrationId, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Unregister(object registrationId, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.PeerResolver.Unregister(System.Object,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub Unregister (registrationId As Object, timeout As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void Unregister(System::Object ^ registrationId, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="abstract member Unregister : obj * TimeSpan -&gt; unit" Usage="peerResolver.Unregister (registrationId, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="registrationId" Type="System.Object" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="registrationId"><span data-ttu-id="647ee-128">由先前对 <see cref="M:System.ServiceModel.PeerResolver.Register(System.String,System.ServiceModel.PeerNodeAddress,System.TimeSpan)" /> 的调用所获得的节点的注册 ID。</span><span class="sxs-lookup"><span data-stu-id="647ee-128">A registration ID for the node obtained by a previous call to <see cref="M:System.ServiceModel.PeerResolver.Register(System.String,System.ServiceModel.PeerNodeAddress,System.TimeSpan)" />.</span></span></param>
        <param name="timeout"><span data-ttu-id="647ee-129">从对等网格中成功移除注册所需等待的时间。</span><span class="sxs-lookup"><span data-stu-id="647ee-129">The length of time to wait for a successful removal of the registration from the peer mesh.</span></span> <span data-ttu-id="647ee-130">如果尝试失败，对等网格上将引发 <see cref="T:System.TimeoutException" />。</span><span class="sxs-lookup"><span data-stu-id="647ee-130">If the attempt fails, <see cref="T:System.TimeoutException" /> is raised on the peer.</span></span></param>
        <summary><span data-ttu-id="647ee-131">移除对等网格中某个节点的注册项。</span><span class="sxs-lookup"><span data-stu-id="647ee-131">Removes the registration entry for a node from a peer mesh.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="647ee-132">注册 ID 是一个对等解析程序令牌，它至少可用于表示对等节点 ID 和网格 ID 的元组。</span><span class="sxs-lookup"><span data-stu-id="647ee-132">A registration ID is a peer resolver token, that, at the very minimum, represents the tuple of a peer node ID and the mesh ID.</span></span> <span data-ttu-id="647ee-133">必须已在先前对 <xref:System.ServiceModel.PeerResolver.Register%2A> 的调用中获得此 ID 值。</span><span class="sxs-lookup"><span data-stu-id="647ee-133">This ID value must have been obtained in a previous call to <xref:System.ServiceModel.PeerResolver.Register%2A>.</span></span>  
  
 <span data-ttu-id="647ee-134"><xref:System.ServiceModel.PeerResolver.Unregister%2A> 可在两个特定情况下调用：</span><span class="sxs-lookup"><span data-stu-id="647ee-134"><xref:System.ServiceModel.PeerResolver.Unregister%2A> is called in two specific cases:</span></span>  
  
-   <span data-ttu-id="647ee-135">当 <xref:System.ServiceModel.PeerNode> 离开对等网格时（通常是因为关闭了与之相关联的最后一个对等通道或服务主机）。</span><span class="sxs-lookup"><span data-stu-id="647ee-135">When the <xref:System.ServiceModel.PeerNode> is leaving the peer mesh (usually as the result of closing the last peer channel or service host that is associated with it).</span></span>  
  
-   <span data-ttu-id="647ee-136">当 <xref:System.ServiceModel.PeerNode> 找不到参与对等网格的其他节点的可用终结点地址时。</span><span class="sxs-lookup"><span data-stu-id="647ee-136">When the <xref:System.ServiceModel.PeerNode> can find no available endpoint addresses of other nodes participating in the peer mesh.</span></span> <span data-ttu-id="647ee-137">因此，<xref:System.ServiceModel.PeerNode> 将不再可以访问，它将尝试调用 <xref:System.ServiceModel.PeerResolver.Unregister%2A> 以便从 <xref:System.ServiceModel.PeerResolver> 中注销自身。</span><span class="sxs-lookup"><span data-stu-id="647ee-137">As a result, the <xref:System.ServiceModel.PeerNode> is no longer reachable, and it will attempt to call <xref:System.ServiceModel.PeerResolver.Unregister%2A> to unregister itself from the <xref:System.ServiceModel.PeerResolver>.</span></span> <span data-ttu-id="647ee-138">如果网格中的其他对等节点在注销后变为可用，节点可以通过调用 <xref:System.ServiceModel.PeerResolver.Register%2A> 并获取新的注册 ID 来重新注册。</span><span class="sxs-lookup"><span data-stu-id="647ee-138">If other peer nodes within the mesh become available subsequent to unregistration, the node can re-register itself by calling <xref:System.ServiceModel.PeerResolver.Register%2A> and obtaining a new registration ID.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public abstract void Update (object registrationId, System.ServiceModel.PeerNodeAddress updatedNodeAddress, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Update(object registrationId, class System.ServiceModel.PeerNodeAddress updatedNodeAddress, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.PeerResolver.Update(System.Object,System.ServiceModel.PeerNodeAddress,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub Update (registrationId As Object, updatedNodeAddress As PeerNodeAddress, timeout As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void Update(System::Object ^ registrationId, System::ServiceModel::PeerNodeAddress ^ updatedNodeAddress, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="abstract member Update : obj * System.ServiceModel.PeerNodeAddress * TimeSpan -&gt; unit" Usage="peerResolver.Update (registrationId, updatedNodeAddress, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="registrationId" Type="System.Object" />
        <Parameter Name="updatedNodeAddress" Type="System.ServiceModel.PeerNodeAddress" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="registrationId"><span data-ttu-id="647ee-139">节点的注册 ID 令牌，通过先前对 <see cref="M:System.ServiceModel.PeerResolver.Register(System.String,System.ServiceModel.PeerNodeAddress,System.TimeSpan)" /> 的调用获得</span><span class="sxs-lookup"><span data-stu-id="647ee-139">A registration ID token for the node, obtained by a previous call to <see cref="M:System.ServiceModel.PeerResolver.Register(System.String,System.ServiceModel.PeerNodeAddress,System.TimeSpan)" /></span></span></param>
        <param name="updatedNodeAddress"><span data-ttu-id="647ee-140">已更新的终结点地址（和其他多宿主 IP 地址）。</span><span class="sxs-lookup"><span data-stu-id="647ee-140">The updated endpoint address (and other multihoming IP addresses).</span></span></param>
        <param name="timeout"><span data-ttu-id="647ee-141">停止在对等网格中尝试更新节点的注册之前，等待成功更新的时间。</span><span class="sxs-lookup"><span data-stu-id="647ee-141">The length of time to wait for success before aborting the attempt to update the node's registration within the peer mesh.</span></span> <span data-ttu-id="647ee-142">如果尝试失败，对等网格上将引发 <see cref="T:System.TimeoutException" />。</span><span class="sxs-lookup"><span data-stu-id="647ee-142">If the attempt fails, <see cref="T:System.TimeoutException" /> is raised on the peer.</span></span></param>
        <summary><span data-ttu-id="647ee-143">为在特定对等网格中注册的节点更新 <see cref="T:System.ServiceModel.PeerNodeAddress" />。</span><span class="sxs-lookup"><span data-stu-id="647ee-143">Updates the <see cref="T:System.ServiceModel.PeerNodeAddress" /> for a node registered with a specific peer mesh.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="647ee-144">当本地计算机上的 <xref:System.ServiceModel.PeerResolver.Update%2A> 的地址更改时，将调用 <xref:System.ServiceModel.PeerNode>。</span><span class="sxs-lookup"><span data-stu-id="647ee-144"><xref:System.ServiceModel.PeerResolver.Update%2A> is called when the address of the <xref:System.ServiceModel.PeerNode> changes on the local machine.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
