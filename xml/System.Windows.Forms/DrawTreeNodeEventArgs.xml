<Type Name="DrawTreeNodeEventArgs" FullName="System.Windows.Forms.DrawTreeNodeEventArgs">
  <Metadata><Meta Name="ms.openlocfilehash" Value="e1f75254506c70c34e46a15232ae0ea696cc3f90" /><Meta Name="ms.sourcegitcommit" Value="b53d35b4a410c949742abd4c6a989d1af5357bca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="86653716" /></Metadata><TypeSignature Language="C#" Value="public class DrawTreeNodeEventArgs : EventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DrawTreeNodeEventArgs extends System.EventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.DrawTreeNodeEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public Class DrawTreeNodeEventArgs&#xA;Inherits EventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class DrawTreeNodeEventArgs : EventArgs" />
  <TypeSignature Language="F#" Value="type DrawTreeNodeEventArgs = class&#xA;    inherit EventArgs" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.EventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>为 <see cref="E:System.Windows.Forms.TreeView.DrawNode" /> 事件提供数据。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用 <xref:System.Windows.Forms.TreeView.DrawNode> 事件可自定义使用所有者描述的控件中节点的外观 <xref:System.Windows.Forms.TreeView> 。  
  
 <xref:System.Windows.Forms.TreeView.DrawNode> <xref:System.Windows.Forms.TreeView> 当控件的 <xref:System.Windows.Forms.TreeView.DrawMode%2A?displayProperty=nameWithType> 属性设置为 <xref:System.Windows.Forms.TreeViewDrawMode.OwnerDrawAll?displayProperty=nameWithType> 或 <xref:System.Windows.Forms.TreeViewDrawMode.OwnerDrawText?displayProperty=nameWithType> ，并且显示或更新节点时，该事件由控件引发。 <xref:System.Windows.Forms.DrawTreeNodeEventArgs>传递给事件处理程序的包含要绘制的节点的相关信息，并提供可帮助您绘制节点的方法。  
  
 使用 <xref:System.Windows.Forms.DrawTreeNodeEventArgs.State%2A> 或 <xref:System.Windows.Forms.DrawTreeNodeEventArgs.Node%2A> 属性检索有关要绘制的节点的信息。 使用 <xref:System.Windows.Forms.DrawTreeNodeEventArgs.Graphics%2A> 属性可以在由属性指定的区域内执行实际绘图 <xref:System.Windows.Forms.DrawTreeNodeEventArgs.Bounds%2A> 。 若要使操作系统绘制不需要所有者描述的节点，请将 <xref:System.Windows.Forms.DrawTreeNodeEventArgs.DrawDefault%2A> 属性设置为 `true` 。  
  
 当 <xref:System.Windows.Forms.TreeView.DrawMode%2A?displayProperty=nameWithType> 属性设置为时 <xref:System.Windows.Forms.TreeViewDrawMode.OwnerDrawText?displayProperty=nameWithType> ，由属性指示的区域 <xref:System.Windows.Forms.DrawTreeNodeEventArgs.Bounds%2A> 仅包含节点的标签部分。 当 <xref:System.Windows.Forms.TreeView.DrawMode%2A?displayProperty=nameWithType> 属性设置为时 <xref:System.Windows.Forms.TreeViewDrawMode.OwnerDrawAll?displayProperty=nameWithType> ， <xref:System.Windows.Forms.DrawTreeNodeEventArgs.Bounds%2A> 区域包括整个节点，包括通常用于图标、复选框、加号和减号以及连接节点的线条的区域。  
  
   
  
## Examples  
 下面的代码示例演示如何 <xref:System.Windows.Forms.TreeView> 使用所有者描述自定义控件。 <xref:System.Windows.Forms.TreeView>该示例中的控件在标准节点标签旁边显示可选节点标记。 节点标记是使用属性指定的 <xref:System.Windows.Forms.TreeNode.Tag%2A?displayProperty=nameWithType> 。 该 <xref:System.Windows.Forms.TreeView> 控件还使用自定义的突出显示颜色。  
  
 您可以 <xref:System.Windows.Forms.TreeView> 通过设置颜色属性自定义大多数颜色，但无法将选择突出显示颜色作为属性提供。 此外，默认选择突出显示矩形仅扩展到节点标签周围。 必须使用所有者绘图来绘制节点标记，并绘制一个足以容纳节点标记的自定义突出显示矩形。  
  
 在此示例中，事件的处理程序 <xref:System.Windows.Forms.TreeView.DrawNode?displayProperty=nameWithType> 手动绘制节点标记和自定义选择突出显示。 未选定的节点不需要自定义。 对于这些属性，将 <xref:System.Windows.Forms.DrawTreeNodeEventArgs.DrawDefault%2A> 属性设置为，以 `true` 使其由操作系统进行绘制。  
  
 此外，事件的处理程序 <xref:System.Windows.Forms.Control.MouseDown?displayProperty=nameWithType> 提供命中测试。 默认情况下，只能通过单击其标签周围的区域来选择节点。 <xref:System.Windows.Forms.Control.MouseDown?displayProperty=nameWithType>事件处理程序选择在此区域内或节点标记周围的区域（如果存在）内单击的节点。  
  
 [!code-cpp[TreeViewOwnerDraw#1](~/samples/snippets/cpp/VS_Snippets_Winforms/TreeViewOwnerDraw/CPP/treeviewownerdraw.cpp#1)]
 [!code-csharp[TreeViewOwnerDraw#1](~/samples/snippets/csharp/VS_Snippets_Winforms/TreeViewOwnerDraw/CS/treeviewownerdraw.cs#1)]
 [!code-vb[TreeViewOwnerDraw#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/TreeViewOwnerDraw/VB/treeviewownerdraw.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Forms.TreeView" />
    <altmember cref="P:System.Windows.Forms.TreeView.DrawMode" />
    <altmember cref="E:System.Windows.Forms.TreeView.DrawNode" />
    <altmember cref="T:System.Windows.Forms.TreeViewDrawMode" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DrawTreeNodeEventArgs (System.Drawing.Graphics graphics, System.Windows.Forms.TreeNode node, System.Drawing.Rectangle bounds, System.Windows.Forms.TreeNodeStates state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Drawing.Graphics graphics, class System.Windows.Forms.TreeNode node, valuetype System.Drawing.Rectangle bounds, valuetype System.Windows.Forms.TreeNodeStates state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DrawTreeNodeEventArgs.#ctor(System.Drawing.Graphics,System.Windows.Forms.TreeNode,System.Drawing.Rectangle,System.Windows.Forms.TreeNodeStates)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (graphics As Graphics, node As TreeNode, bounds As Rectangle, state As TreeNodeStates)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DrawTreeNodeEventArgs(System::Drawing::Graphics ^ graphics, System::Windows::Forms::TreeNode ^ node, System::Drawing::Rectangle bounds, System::Windows::Forms::TreeNodeStates state);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.DrawTreeNodeEventArgs : System.Drawing.Graphics * System.Windows.Forms.TreeNode * System.Drawing.Rectangle * System.Windows.Forms.TreeNodeStates -&gt; System.Windows.Forms.DrawTreeNodeEventArgs" Usage="new System.Windows.Forms.DrawTreeNodeEventArgs (graphics, node, bounds, state)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="graphics" Type="System.Drawing.Graphics" />
        <Parameter Name="node" Type="System.Windows.Forms.TreeNode" />
        <Parameter Name="bounds" Type="System.Drawing.Rectangle" />
        <Parameter Name="state" Type="System.Windows.Forms.TreeNodeStates" />
      </Parameters>
      <Docs>
        <param name="graphics">要在其上进行绘制的 <see cref="T:System.Drawing.Graphics" /> 表面。</param>
        <param name="node">要绘制的 <see cref="T:System.Windows.Forms.TreeNode" />。</param>
        <param name="bounds">要在其中进行绘制的 <see cref="T:System.Drawing.Rectangle" />。</param>
        <param name="state"><see cref="T:System.Windows.Forms.TreeNodeStates" /> 值的按位组合，指示要绘制的 <see cref="T:System.Windows.Forms.TreeNode" /> 的当前状态。</param>
        <summary>初始化 <see cref="T:System.Windows.Forms.DrawTreeNodeEventArgs" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Bounds">
      <MemberSignature Language="C#" Value="public System.Drawing.Rectangle Bounds { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Rectangle Bounds" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DrawTreeNodeEventArgs.Bounds" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Bounds As Rectangle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Rectangle Bounds { System::Drawing::Rectangle get(); };" />
      <MemberSignature Language="F#" Value="member this.Bounds : System.Drawing.Rectangle" Usage="System.Windows.Forms.DrawTreeNodeEventArgs.Bounds" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Rectangle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取要绘制的 <see cref="T:System.Windows.Forms.TreeNode" /> 的大小和位置。</summary>
        <value>表示要绘制的 <see cref="T:System.Drawing.Rectangle" /> 的界限的 <see cref="T:System.Windows.Forms.TreeNode" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性指定的位置相对于控件的左上角 <xref:System.Windows.Forms.TreeView> 。  
  
 当 <xref:System.Windows.Forms.TreeView.DrawMode%2A?displayProperty=nameWithType> 属性设置为时 <xref:System.Windows.Forms.TreeViewDrawMode.OwnerDrawText> ，属性指定的区域 <xref:System.Windows.Forms.DrawTreeNodeEventArgs.Bounds%2A> 是一个区域，可在其中单击节点以将其选中。 如果在此命中测试区域外绘制，则应提供自己的代码，以便在单击节点可见区域时选择节点。 当属性设置为时，可能还需要提供自己的命中测试代码 <xref:System.Windows.Forms.TreeView.DrawMode%2A?displayProperty=nameWithType> <xref:System.Windows.Forms.TreeViewDrawMode.OwnerDrawAll> 。 在此模式下， <xref:System.Windows.Forms.DrawTreeNodeEventArgs.Bounds%2A> 属性在整个控件的整个宽度内包含整个节点 <xref:System.Windows.Forms.TreeView> ，而不是仅命中测试区域。  
  
   
  
## Examples  
 下面的代码示例演示如何 <xref:System.Windows.Forms.TreeView> 使用所有者描述自定义控件。 <xref:System.Windows.Forms.TreeView>该示例中的控件在标准节点标签旁边显示可选节点标记。 节点标记是使用属性指定的 <xref:System.Windows.Forms.TreeNode.Tag%2A?displayProperty=nameWithType> 。 该 <xref:System.Windows.Forms.TreeView> 控件还使用自定义的突出显示颜色。  
  
 您可以 <xref:System.Windows.Forms.TreeView> 通过设置颜色属性自定义大多数颜色，但无法将选择突出显示颜色作为属性提供。 此外，默认选择突出显示矩形仅扩展到节点标签周围。 必须使用所有者绘图来绘制节点标记，并绘制一个足以容纳节点标记的自定义突出显示矩形。  
  
 在此示例中，事件的处理程序 <xref:System.Windows.Forms.TreeView.DrawNode?displayProperty=nameWithType> 手动绘制节点标记和自定义选择突出显示。 未选定的节点不需要自定义。 对于这些属性，将 <xref:System.Windows.Forms.DrawTreeNodeEventArgs.DrawDefault%2A> 属性设置为，以 `true` 使其由操作系统进行绘制。  
  
 有关完整示例，请参阅 <xref:System.Windows.Forms.DrawTreeNodeEventArgs> 概述参考主题。  
  
 [!code-cpp[TreeViewOwnerDraw#3](~/samples/snippets/cpp/VS_Snippets_Winforms/TreeViewOwnerDraw/CPP/treeviewownerdraw.cpp#3)]
 [!code-csharp[TreeViewOwnerDraw#3](~/samples/snippets/csharp/VS_Snippets_Winforms/TreeViewOwnerDraw/CS/treeviewownerdraw.cs#3)]
 [!code-vb[TreeViewOwnerDraw#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/TreeViewOwnerDraw/VB/treeviewownerdraw.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.TreeNode" />
        <altmember cref="T:System.Windows.Forms.TreeView" />
        <altmember cref="P:System.Windows.Forms.TreeView.DrawMode" />
        <altmember cref="T:System.Windows.Forms.TreeViewDrawMode" />
      </Docs>
    </Member>
    <Member MemberName="DrawDefault">
      <MemberSignature Language="C#" Value="public bool DrawDefault { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool DrawDefault" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DrawTreeNodeEventArgs.DrawDefault" />
      <MemberSignature Language="VB.NET" Value="Public Property DrawDefault As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool DrawDefault { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.DrawDefault : bool with get, set" Usage="System.Windows.Forms.DrawTreeNodeEventArgs.DrawDefault" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，指示是否将由操作系统绘制 <see cref="T:System.Windows.Forms.TreeNode" />，而不是所有者描述。</summary>
        <value>如果节点将由操作系统进行绘制，则为 <see langword="true" />；如果节点将由事件处理程序进行绘制，则为 <see langword="false" />。 默认值为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `true`如果你不想在处理事件时自定义节点，请将此属性设置为 <xref:System.Windows.Forms.TreeView.DrawNode> 。 例如，当你想要仅自定义处于特定状态的节点时，这非常有用。  
  
   
  
## Examples  
 下面的代码示例演示如何使用此属性。 在此示例中，事件的处理程序为 <xref:System.Windows.Forms.TreeView.DrawNode?displayProperty=nameWithType> 选定的节点手动绘制节点标记和自定义突出显示颜色。 未选择的节点不需要自定义。 对于未选定的节点，将 <xref:System.Windows.Forms.DrawTreeNodeEventArgs.DrawDefault%2A> 属性设置为， `true` 以使其由操作系统绘制，并且不具有自定义的外观。  
  
> [!NOTE]
>  如果手动绘制节点，同时将 <xref:System.Windows.Forms.DrawTreeNodeEventArgs.DrawDefault%2A> 属性设置为 `true` ，则操作系统可能会覆盖部分或全部你绘制的内容。  
  
 有关完整示例，请参阅 <xref:System.Windows.Forms.DrawTreeNodeEventArgs> 概述参考主题。  
  
 [!code-cpp[TreeViewOwnerDraw#3](~/samples/snippets/cpp/VS_Snippets_Winforms/TreeViewOwnerDraw/CPP/treeviewownerdraw.cpp#3)]
 [!code-csharp[TreeViewOwnerDraw#3](~/samples/snippets/csharp/VS_Snippets_Winforms/TreeViewOwnerDraw/CS/treeviewownerdraw.cs#3)]
 [!code-vb[TreeViewOwnerDraw#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/TreeViewOwnerDraw/VB/treeviewownerdraw.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Graphics">
      <MemberSignature Language="C#" Value="public System.Drawing.Graphics Graphics { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Drawing.Graphics Graphics" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DrawTreeNodeEventArgs.Graphics" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Graphics As Graphics" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Graphics ^ Graphics { System::Drawing::Graphics ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Graphics : System.Drawing.Graphics" Usage="System.Windows.Forms.DrawTreeNodeEventArgs.Graphics" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Graphics</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取用于绘制 <see cref="T:System.Drawing.Graphics" /> 的 <see cref="T:System.Windows.Forms.TreeNode" /> 对象。</summary>
        <value>用于绘制 <see cref="T:System.Drawing.Graphics" /> 的 <see cref="T:System.Windows.Forms.TreeNode" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Graphics>类提供的属性和方法可用于在显示设备上进行绘制。  
  
   
  
## Examples  
 下面的代码示例演示如何 <xref:System.Windows.Forms.TreeView> 使用所有者描述自定义控件。 <xref:System.Windows.Forms.TreeView>该示例中的控件在标准节点标签旁边显示可选节点标记。 节点标记是使用属性指定的 <xref:System.Windows.Forms.TreeNode.Tag%2A?displayProperty=nameWithType> 。 该 <xref:System.Windows.Forms.TreeView> 控件还使用自定义的突出显示颜色。  
  
 您可以 <xref:System.Windows.Forms.TreeView> 通过设置颜色属性自定义大多数颜色，但无法将选择突出显示颜色作为属性提供。 此外，默认选择突出显示矩形仅扩展到节点标签周围。 必须使用所有者绘图来绘制节点标记，并绘制一个足以容纳节点标记的自定义突出显示矩形。  
  
 在此示例中，事件的处理程序 <xref:System.Windows.Forms.TreeView.DrawNode?displayProperty=nameWithType> 手动绘制节点标记和自定义选择突出显示。 未选定的节点不需要自定义。 对于这些属性，将 <xref:System.Windows.Forms.DrawTreeNodeEventArgs.DrawDefault%2A> 属性设置为，以 `true` 使其由操作系统进行绘制。  
  
 有关完整示例，请参阅 <xref:System.Windows.Forms.DrawTreeNodeEventArgs> 概述参考主题。  
  
 [!code-cpp[TreeViewOwnerDraw#3](~/samples/snippets/cpp/VS_Snippets_Winforms/TreeViewOwnerDraw/CPP/treeviewownerdraw.cpp#3)]
 [!code-csharp[TreeViewOwnerDraw#3](~/samples/snippets/csharp/VS_Snippets_Winforms/TreeViewOwnerDraw/CS/treeviewownerdraw.cs#3)]
 [!code-vb[TreeViewOwnerDraw#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/TreeViewOwnerDraw/VB/treeviewownerdraw.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Drawing.Graphics" />
        <altmember cref="T:System.Windows.Forms.TreeNode" />
        <altmember cref="T:System.Windows.Forms.TreeView" />
      </Docs>
    </Member>
    <Member MemberName="Node">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.TreeNode Node { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.TreeNode Node" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DrawTreeNodeEventArgs.Node" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Node As TreeNode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::TreeNode ^ Node { System::Windows::Forms::TreeNode ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Node : System.Windows.Forms.TreeNode" Usage="System.Windows.Forms.DrawTreeNodeEventArgs.Node" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeNode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取要绘制的 <see cref="T:System.Windows.Forms.TreeNode" />。</summary>
        <value>要绘制的 <see cref="T:System.Windows.Forms.TreeNode" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用此属性可访问 <xref:System.Windows.Forms.TreeNode> 要绘制的对象。 当 <xref:System.Windows.Forms.DrawTreeNodeEventArgs.State%2A> 属性没有提供足够的信息来满足您的需求时，这非常有用。 <xref:System.Windows.Forms.DrawTreeNodeEventArgs.State%2A>属性仅提供可供您使用的基本状态信息，例如，确定节点是否处于选中状态、选中状态或焦点。 另一方面 <xref:System.Windows.Forms.DrawTreeNodeEventArgs.Node%2A> ，属性允许您访问对象的所有成员 <xref:System.Windows.Forms.TreeNode> 。 您必须直接访问该节点，例如，当您想要确定其扩展状态时。  
  
   
  
## Examples  
 下面的代码示例演示如何 <xref:System.Windows.Forms.TreeView> 使用所有者描述自定义控件。 <xref:System.Windows.Forms.TreeView>该示例中的控件在标准节点标签旁边显示可选节点标记。 节点标记是使用属性指定的 <xref:System.Windows.Forms.TreeNode.Tag%2A?displayProperty=nameWithType> 。 该 <xref:System.Windows.Forms.TreeView> 控件还使用自定义的突出显示颜色。  
  
 您可以 <xref:System.Windows.Forms.TreeView> 通过设置颜色属性自定义大多数颜色，但无法将选择突出显示颜色作为属性提供。 此外，默认选择突出显示矩形仅扩展到节点标签周围。 必须使用所有者绘图来绘制节点标记，并绘制一个足以容纳节点标记的自定义突出显示矩形。  
  
 在此示例中，事件的处理程序 <xref:System.Windows.Forms.TreeView.DrawNode?displayProperty=nameWithType> 手动绘制节点标记和自定义选择突出显示。 未选定的节点不需要自定义。 对于这些属性，将 <xref:System.Windows.Forms.DrawTreeNodeEventArgs.DrawDefault%2A> 属性设置为，以 `true` 使其由操作系统进行绘制。  
  
 有关完整示例，请参阅 <xref:System.Windows.Forms.DrawTreeNodeEventArgs> 概述参考主题。  
  
 [!code-cpp[TreeViewOwnerDraw#3](~/samples/snippets/cpp/VS_Snippets_Winforms/TreeViewOwnerDraw/CPP/treeviewownerdraw.cpp#3)]
 [!code-csharp[TreeViewOwnerDraw#3](~/samples/snippets/csharp/VS_Snippets_Winforms/TreeViewOwnerDraw/CS/treeviewownerdraw.cs#3)]
 [!code-vb[TreeViewOwnerDraw#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/TreeViewOwnerDraw/VB/treeviewownerdraw.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.DrawTreeNodeEventArgs.State" />
        <altmember cref="T:System.Windows.Forms.TreeNode" />
        <altmember cref="P:System.Windows.Forms.TreeNode.Text" />
        <altmember cref="T:System.Windows.Forms.TreeView" />
      </Docs>
    </Member>
    <Member MemberName="State">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.TreeNodeStates State { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.TreeNodeStates State" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DrawTreeNodeEventArgs.State" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property State As TreeNodeStates" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::TreeNodeStates State { System::Windows::Forms::TreeNodeStates get(); };" />
      <MemberSignature Language="F#" Value="member this.State : System.Windows.Forms.TreeNodeStates" Usage="System.Windows.Forms.DrawTreeNodeEventArgs.State" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeNodeStates</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取要绘制的 <see cref="T:System.Windows.Forms.TreeNode" /> 的当前状态。</summary>
        <value><see cref="T:System.Windows.Forms.TreeNodeStates" /> 值的按位组合，指示 <see cref="T:System.Windows.Forms.TreeNode" /> 的当前状态。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用此属性检查 <xref:System.Windows.Forms.TreeNode> 要绘制的对象是否处于特定状态。 此属性仅提供有关节点的基本状态信息。 例如，您可以使用此属性来确定节点是否处于选中状态、选中状态或焦点。 如果需要了解详细信息，请通过属性检索节点 <xref:System.Windows.Forms.DrawTreeNodeEventArgs.Node%2A> 。 例如，若要确定节点是否已展开，必须检索节点并检查 <xref:System.Windows.Forms.TreeNode.IsExpanded%2A?displayProperty=nameWithType> 属性。  
  
   
  
## Examples  
 下面的代码示例演示如何 <xref:System.Windows.Forms.TreeView> 使用所有者描述自定义控件。 <xref:System.Windows.Forms.TreeView>该示例中的控件在标准节点标签旁边显示可选节点标记。 节点标记是使用属性指定的 <xref:System.Windows.Forms.TreeNode.Tag%2A?displayProperty=nameWithType> 。 该 <xref:System.Windows.Forms.TreeView> 控件还使用自定义的突出显示颜色。  
  
 您可以 <xref:System.Windows.Forms.TreeView> 通过设置颜色属性自定义大多数颜色，但无法将选择突出显示颜色作为属性提供。 此外，默认选择突出显示矩形仅扩展到节点标签周围。 必须使用所有者绘图来绘制节点标记，并绘制一个足以容纳节点标记的自定义突出显示矩形。  
  
 在此示例中，事件的处理程序 <xref:System.Windows.Forms.TreeView.DrawNode?displayProperty=nameWithType> 手动绘制节点标记和自定义选择突出显示。 未选定的节点不需要自定义。 对于这些属性，将 <xref:System.Windows.Forms.DrawTreeNodeEventArgs.DrawDefault%2A> 属性设置为，以 `true` 使其由操作系统进行绘制。  
  
 有关完整示例，请参阅 <xref:System.Windows.Forms.DrawTreeNodeEventArgs> 概述参考主题。  
  
 [!code-cpp[TreeViewOwnerDraw#3](~/samples/snippets/cpp/VS_Snippets_Winforms/TreeViewOwnerDraw/CPP/treeviewownerdraw.cpp#3)]
 [!code-csharp[TreeViewOwnerDraw#3](~/samples/snippets/csharp/VS_Snippets_Winforms/TreeViewOwnerDraw/CS/treeviewownerdraw.cs#3)]
 [!code-vb[TreeViewOwnerDraw#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/TreeViewOwnerDraw/VB/treeviewownerdraw.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.DrawTreeNodeEventArgs.Node" />
        <altmember cref="T:System.Windows.Forms.TreeNode" />
        <altmember cref="P:System.Windows.Forms.TreeNode.IsExpanded" />
        <altmember cref="T:System.Windows.Forms.TreeView" />
      </Docs>
    </Member>
  </Members>
</Type>
