<Type Name="Binding" FullName="System.Windows.Forms.Binding">
  <Metadata><Meta Name="ms.openlocfilehash" Value="f2d51b844dd50f8952fc34c4ef9eeeb450106c9a" /><Meta Name="ms.sourcegitcommit" Value="b53d35b4a410c949742abd4c6a989d1af5357bca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="86783812" /></Metadata><TypeSignature Language="C#" Value="public class Binding" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Binding extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.Binding" />
  <TypeSignature Language="VB.NET" Value="Public Class Binding" />
  <TypeSignature Language="C++ CLI" Value="public ref class Binding" />
  <TypeSignature Language="F#" Value="type Binding = class" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[System.ComponentModel.TypeConverter(typeof(System.Windows.Forms.ListBindingConverter))]</AttributeName>
      <AttributeName Language="F#">[&lt;System.ComponentModel.TypeConverter(typeof(System.Windows.Forms.ListBindingConverter))&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>代表某对象属性值和某控件属性值之间的简单绑定。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用 <xref:System.Windows.Forms.Binding> 类来创建和维护控件的属性和对象的属性之间的简单绑定，或对象列表中当前对象的属性。  
  
 作为第一种情况的示例，可以将控件的 <xref:System.Windows.Forms.Control.Text%2A> 属性绑定 <xref:System.Windows.Forms.TextBox> 到 `FirstName` 对象的属性 `Customer` 。 作为第二种情况的示例，可以将控件的 <xref:System.Windows.Forms.Control.Text%2A> 属性绑定 <xref:System.Windows.Forms.TextBox> 到 `FirstName` 包含客户的的属性 <xref:System.Data.DataTable> 。  
  
 <xref:System.Windows.Forms.Binding>类还允许您设置值的格式，以便在 <xref:System.Windows.Forms.Binding.Format> 事件中显示，并通过事件检索格式化的值 <xref:System.Windows.Forms.Binding.Parse> 。  
  
 构造 <xref:System.Windows.Forms.Binding> 具有构造函数的实例时 <xref:System.Windows.Forms.Binding.%23ctor%2A> ，必须指定三个项：  
  
-   要绑定到的控件属性的名称。  
  
-   数据源。  
  
-   解析为数据源中的列表或属性的导航路径。 导航路径还用于创建对象的 <xref:System.Windows.Forms.Binding.BindingMemberInfo%2A> 属性。  
  
 首先，必须指定要将数据绑定到的控件属性的名称。 例如，若要在控件中显示数据 <xref:System.Windows.Forms.TextBox> ，请指定 <xref:System.Windows.Forms.TextBoxBase.Text%2A> 属性。  
  
 其次，您可以指定下表中的任何一个类的实例作为数据源。  
  
|说明|C# 示例|  
|-----------------|-----------------|  
|实现或的任何 <xref:System.ComponentModel.IBindingList> 类 <xref:System.ComponentModel.ITypedList> 。 其中包括： <xref:System.Data.DataSet> 、 <xref:System.Data.DataTable> 、 <xref:System.Data.DataView> 或 <xref:System.Data.DataViewManager> 。|`DataSet ds = new DataSet("myDataSet");`|  
|任何实现的类， <xref:System.Collections.IList> 用于创建对象的索引集合。 必须先创建并填充集合，然后才能创建 <xref:System.Windows.Forms.Binding> 。 列表中的对象必须具有相同的类型;否则，将引发异常。|`ArrayList ar1 = new ArrayList;  Customer1 cust1 = new Customer("Louis");  ar1.Add(cust1);`|  
|强类型化 <xref:System.Collections.IList> 对象的强类型化|`Customer [] custList = new Customer[3];`|  
  
 第三，您必须指定导航路径，该路径可以是空字符串 ( "" ) 、单个属性名或以句点分隔的名称的层次结构。 如果将导航路径设置为空字符串，则 <xref:System.Object.ToString%2A> 将对基础数据源对象调用方法。  
  
 如果数据源是一个 <xref:System.Data.DataTable> ，它可以包含多个 <xref:System.Data.DataColumn> 对象，则必须使用导航路径解析为特定的列。  
  
> [!NOTE]
>  如果数据源是 <xref:System.Data.DataSet> 、 <xref:System.Data.DataViewManager> 或 <xref:System.Data.DataTable> ，则实际上是绑定到 <xref:System.Data.DataView> 。 因此，绑定行实际上是 <xref:System.Data.DataRowView> 对象。  
  
 如果将数据源设置为包含多个 <xref:System.Data.DataTable> (对象的对象（例如或) ），则需要用句点分隔的导航路径 <xref:System.Data.DataSet> <xref:System.Data.DataViewManager> 。 绑定到属性返回对其他 (对象的引用的对象（例如具有返回其他类对象) 的属性的类）时，还可以使用以句点分隔的导航路径。 例如，以下导航路径都描述了有效的数据字段：  
  
-   "大小高度"  
  
-   "供应商. 公司名称"  
  
-   "RegionsToCustomers. CustomerFirstName"  
  
-   "RegionsToCustomers. customersToOrders. ordersToDetails"  
  
 路径的每个成员都可以返回一个属性，该属性可解析为单个值 (例如整数) 或值列表 (如) 的字符串数组。 尽管路径中的每个成员都可以是列表或属性，但最终成员必须解析为属性。 每个成员都是在上一个成员上生成的： "Size，Height" 解析为 <xref:System.Drawing.Size.Height%2A> 当前的属性 <xref:System.Drawing.Size> ;"RegionsToCustomers. CustomerFirstName" 解析为当前客户的名字，其中客户是当前区域的客户之一。  
  
 <xref:System.Data.DataRelation>返回值的列表，方法是将其中一项链接 <xref:System.Data.DataTable> 到中的第二个值 <xref:System.Data.DataTable> <xref:System.Data.DataSet> 。 如果 <xref:System.Data.DataSet> 包含 <xref:System.Data.DataRelation> 对象，则可以将数据成员指定为 <xref:System.Data.DataTable.TableName%2A> 后跟 <xref:System.Data.DataRelation.RelationName%2A> ，然后是 <xref:System.Data.DataColumn.ColumnName%2A> 。 例如，如果命名的 <xref:System.Data.DataTable> "供应商" 包含 <xref:System.Data.DataRelation> 名为 "suppliers2products" 的，则该数据成员可以是 "suppliers2products"。  
  
 数据源可以包含一组相关的类。 例如，假设有一组目录为太阳系的类。 名为的类 `System` 包含一个名为 `Stars` 的属性，该属性返回对象的集合 `Star` 。 每个 `Star` 对象都具有 `Name` 和 `Mass` 属性，以及 `Planets` 返回对象集合的属性 `Planet` 。 在此系统中，每个行星还具有 `Mass` 和 `Name` 属性。 每个 `Planet` 对象都有一个 `Moons` 属性，该属性返回 `Moon` 对象的集合，其中每个对象都具有 `Name` 和 `Mass` 属性。 如果指定 `System` 对象作为数据源，则可以指定以下任意项作为数据成员：  
  
-   "Stars.Name"  
  
-   "星星"  
  
-   "Stars.Planets.Name"  
  
-   "星星"  
  
-   "Stars.Planets.Moons.Name"  
  
-   "星星. 月球"  
  
 可成为简单绑定功能的控件是 <xref:System.Windows.Forms.Binding> 中的对象集合 <xref:System.Windows.Forms.ControlBindingsCollection> ，可通过控件的属性访问这些对象 <xref:System.Windows.Forms.Control.DataBindings%2A> 。 您可以 <xref:System.Windows.Forms.Binding> 通过调用方法向集合添加 <xref:System.Windows.Forms.ControlBindingsCollection.Add%2A> ，从而将控件的属性绑定到对象的属性 (或绑定到列表) 中的当前对象的属性。  
  
 您可以简单地绑定到从类派生的任何对象 <xref:System.Windows.Forms.Control?displayProperty=nameWithType> ，例如以下 Windows 控件：  
  
-   <xref:System.Windows.Forms.Button>  
  
-   <xref:System.Windows.Forms.CheckBox>  
  
-   <xref:System.Windows.Forms.CheckedListBox>  
  
-   <xref:System.Windows.Forms.ComboBox>  
  
-   <xref:System.Windows.Forms.DateTimePicker>  
  
-   <xref:System.Windows.Forms.DomainUpDown>  
  
-   <xref:System.Windows.Forms.GroupBox>  
  
-   <xref:System.Windows.Forms.HScrollBar>  
  
-   <xref:System.Windows.Forms.Label>  
  
-   <xref:System.Windows.Forms.LinkLabel>  
  
-   <xref:System.Windows.Forms.ListBox>  
  
-   <xref:System.Windows.Forms.ListView>  
  
-   <xref:System.Windows.Forms.MonthCalendar>  
  
-   <xref:System.Windows.Forms.NumericUpDown>  
  
-   <xref:System.Windows.Forms.PictureBox>  
  
-   <xref:System.Windows.Forms.ProgressBar>  
  
-   <xref:System.Windows.Forms.RadioButton>  
  
-   <xref:System.Windows.Forms.RichTextBox>  
  
-   <xref:System.Windows.Forms.ScrollBar>  
  
-   <xref:System.Windows.Forms.StatusBar>  
  
-   <xref:System.Windows.Forms.TextBox>  
  
-   <xref:System.Windows.Forms.TreeView>  
  
-   <xref:System.Windows.Forms.VScrollBar>  
  
> [!NOTE]
>  只有 <xref:System.Windows.Forms.ListControl.SelectedValue%2A> <xref:System.Windows.Forms.ComboBox> 、和控件的属性 <xref:System.Windows.Forms.CheckedListBox> <xref:System.Windows.Forms.ListBox> 为简单绑定。  
  
 <xref:System.Windows.Forms.BindingManagerBase>类是一个抽象类，用于管理 <xref:System.Windows.Forms.Binding> 特定数据源和数据成员的所有对象。 派生自的类 <xref:System.Windows.Forms.BindingManagerBase> 是 <xref:System.Windows.Forms.CurrencyManager> 和 <xref:System.Windows.Forms.PropertyManager> 类。 如何 <xref:System.Windows.Forms.Binding> 管理取决于 <xref:System.Windows.Forms.Binding> 是列表绑定还是属性绑定。 例如，如果它是一个列表绑定，则可以使用在 <xref:System.Windows.Forms.BindingManagerBase> 列表中指定， <xref:System.Windows.Forms.BindingManagerBase.Position%2A> 因此，将 <xref:System.Windows.Forms.BindingManagerBase.Position%2A> 确定哪些项 (从列表中的所有项中) 实际上绑定到控件。 若要返回合适的 <xref:System.Windows.Forms.BindingManagerBase> ，请使用 <xref:System.Windows.Forms.BindingContext> 。  
  
 若要将新行添加到绑定到相同的一组控件 <xref:System.Windows.Forms.Binding.DataSource%2A> ，请使用 <xref:System.Windows.Forms.BindingManagerBase.AddNew%2A> 类的方法 <xref:System.Windows.Forms.BindingManagerBase> 。 使用 <xref:System.Windows.Forms.BindingContext.Item%2A> 类的属性 <xref:System.Windows.Forms.BindingContext> 可返回相应的 <xref:System.Windows.Forms.CurrencyManager> 。 若要对添加新行进行转义，请使用 <xref:System.Windows.Forms.CurrencyManager.CancelCurrentEdit%2A> 方法。  
  
   
  
## Examples  
 下面的代码示例创建一个 Windows 窗体，其中包含多个演示简单数据绑定的控件。 该示例创建一个 <xref:System.Data.DataSet> 具有两个名为 `Customers` 和 `Orders` 的表以及一个 <xref:System.Data.DataRelation> 名为的 `custToOrders` 。 四个控件 (a <xref:System.Windows.Forms.DateTimePicker> 和三个 <xref:System.Windows.Forms.TextBox> 控件) 将数据绑定到表中的列。 对于每个控件，该示例通过属性创建和添加 <xref:System.Windows.Forms.Binding> 到控件中 <xref:System.Windows.Forms.Control.DataBindings%2A> 。 该示例 <xref:System.Windows.Forms.BindingManagerBase> 通过窗体的为每个表返回一个 <xref:System.Windows.Forms.BindingContext> 。 四个 <xref:System.Windows.Forms.Button> 控件递增或递减 <xref:System.Windows.Forms.BindingManagerBase.Position%2A> 对象上的属性 <xref:System.Windows.Forms.BindingManagerBase> 。  
  
 [!code-cpp[Classic Binding Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Binding Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Binding Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Binding Example/CS/source.cs#1)]
 [!code-vb[Classic Binding Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Binding Example/VB/source.vb#1)]  
 
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Forms.BindingContext" />
    <altmember cref="T:System.Windows.Forms.BindingManagerBase" />
    <altmember cref="T:System.Windows.Forms.ComboBox" />
    <altmember cref="T:System.Windows.Forms.DataGrid" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Windows.Forms.Binding" /> 类的新实例。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Binding (string propertyName, object dataSource, string dataMember);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string propertyName, object dataSource, string dataMember) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Binding.#ctor(System.String,System.Object,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (propertyName As String, dataSource As Object, dataMember As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Binding(System::String ^ propertyName, System::Object ^ dataSource, System::String ^ dataMember);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.Binding : string * obj * string -&gt; System.Windows.Forms.Binding" Usage="new System.Windows.Forms.Binding (propertyName, dataSource, dataMember)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="dataSource" Type="System.Object" />
        <Parameter Name="dataMember" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName">要绑定的控件属性的名称。</param>
        <param name="dataSource">一个表示数据源的 <see cref="T:System.Object" />。</param>
        <param name="dataMember">要绑定到的属性或列表。</param>
        <summary>初始化 <see cref="T:System.Windows.Forms.Binding" /> 类的一个新实例，该类将指示的控件属性简单绑定到数据源的指定数据成员。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以为数据源指定以下任意类的实例：  
  
-   <xref:System.Data.DataSet>  
  
-   <xref:System.Data.DataTable>  
  
-   <xref:System.Data.DataView>  
  
-   <xref:System.Data.DataViewManager>  
  
-   <xref:System.Windows.Forms.BindingSource>  
  
-   实现接口的任何类 <xref:System.Collections.IList>  
  
-   任何类  
  
 有关 <xref:System.Windows.Forms.Binding> 创建字符串的详细信息，请参阅 `dataMember` 类。  
  
 创建到控件的属性的绑定时，新的将 <xref:System.Windows.Forms.Binding> 检查绑定控件公开的事件，并附加到两个特定事件：  
  
-   <xref:System.Windows.Forms.Control.Validating?displayProperty=nameWithType>  
  
-   名为*PropertyName*的事件 `Changed` (例如， <xref:System.Windows.Forms.Control.BackColorChanged?displayProperty=nameWithType>)   
  
 如果尝试绑定到不存在的属性，则会在将 <xref:System.ArgumentException> <xref:System.Windows.Forms.Binding> 添加到控件的集合时引发 <xref:System.Windows.Forms.Control.DataBindings%2A?displayProperty=nameWithType> 。  
  
   
  
## Examples  
 下面的代码示例将 <xref:System.Windows.Forms.TextBox> 控件绑定到指定的中的表列 <xref:System.Data.DataSet> `myDataSet` 。 该示例要求您已 `myDataSet` 在模块的 "声明" 部分中声明。  
  
 [!code-cpp[Classic Binding.Binding Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Binding.Binding Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Binding.Binding Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Binding.Binding Example/CS/source.cs#1)]
 [!code-vb[Classic Binding.Binding Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Binding.Binding Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception"><paramref name="propertyName" /> 既不是控件的有效属性，也不是空字符串 ("")。</exception>
        <exception cref="T:System.ArgumentException">在该控件中不存在由 <paramref name="propertyName" /> 给出的属性。</exception>
        <altmember cref="T:System.Windows.Forms.BindingsCollection" />
        <altmember cref="T:System.Windows.Forms.CurrencyManager" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Binding (string propertyName, object dataSource, string dataMember, bool formattingEnabled);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string propertyName, object dataSource, string dataMember, bool formattingEnabled) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Binding.#ctor(System.String,System.Object,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (propertyName As String, dataSource As Object, dataMember As String, formattingEnabled As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Binding(System::String ^ propertyName, System::Object ^ dataSource, System::String ^ dataMember, bool formattingEnabled);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.Binding : string * obj * string * bool -&gt; System.Windows.Forms.Binding" Usage="new System.Windows.Forms.Binding (propertyName, dataSource, dataMember, formattingEnabled)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" Index="0" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="dataSource" Type="System.Object" Index="1" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="dataMember" Type="System.String" Index="2" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="formattingEnabled" Type="System.Boolean" Index="3" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="propertyName">要绑定的控件属性的名称。</param>
        <param name="dataSource">一个表示数据源的 <see cref="T:System.Object" />。</param>
        <param name="dataMember">要绑定到的属性或列表。</param>
        <param name="formattingEnabled">若要格式化显示的数据，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
        <summary>初始化 <see cref="T:System.Windows.Forms.Binding" /> 类的一个新实例，该实例将指示的控件属性绑定到数据源的指定数据成员，并启用要应用的格式设置（可选）。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">在该控件中不存在由 <paramref name="propertyName" /> 给出的属性。  
  
- 或 - 
给定的属性为只读属性。</exception>
        <exception cref="T:System.Exception">禁用格式设置，且 <paramref name="propertyName" /> 既不是有效的控件属性，也不是空字符串 ("")。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Binding (string propertyName, object dataSource, string dataMember, bool formattingEnabled, System.Windows.Forms.DataSourceUpdateMode dataSourceUpdateMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string propertyName, object dataSource, string dataMember, bool formattingEnabled, valuetype System.Windows.Forms.DataSourceUpdateMode dataSourceUpdateMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Binding.#ctor(System.String,System.Object,System.String,System.Boolean,System.Windows.Forms.DataSourceUpdateMode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (propertyName As String, dataSource As Object, dataMember As String, formattingEnabled As Boolean, dataSourceUpdateMode As DataSourceUpdateMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Binding(System::String ^ propertyName, System::Object ^ dataSource, System::String ^ dataMember, bool formattingEnabled, System::Windows::Forms::DataSourceUpdateMode dataSourceUpdateMode);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.Binding : string * obj * string * bool * System.Windows.Forms.DataSourceUpdateMode -&gt; System.Windows.Forms.Binding" Usage="new System.Windows.Forms.Binding (propertyName, dataSource, dataMember, formattingEnabled, dataSourceUpdateMode)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" Index="0" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="dataSource" Type="System.Object" Index="1" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="dataMember" Type="System.String" Index="2" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="formattingEnabled" Type="System.Boolean" Index="3" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="dataSourceUpdateMode" Type="System.Windows.Forms.DataSourceUpdateMode" Index="4" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="propertyName">要绑定的控件属性的名称。</param>
        <param name="dataSource">表示数据源的 <see cref="T:System.Object" />。</param>
        <param name="dataMember">要绑定到的属性或列表。</param>
        <param name="formattingEnabled">若要格式化显示的数据，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
        <param name="dataSourceUpdateMode"><see cref="T:System.Windows.Forms.DataSourceUpdateMode" /> 值之一。</param>
        <summary>初始化 <see cref="T:System.Windows.Forms.Binding" /> 类的新实例，该实例将指定的控件属性绑定到指定数据源的指定数据成员。 （可选）根据指定的更新设置，启用格式设置并将值传播到数据源。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以为数据源指定以下任意类的实例：  
  
-   <xref:System.Data.DataSet>  
  
-   <xref:System.Data.DataTable>  
  
-   <xref:System.Data.DataView>  
  
-   <xref:System.Data.DataViewManager>  
  
-   <xref:System.Windows.Forms.BindingSource>  
  
-   实现接口的任何类 <xref:System.Collections.IList>  
  
-   任何类  
  
 有关 <xref:System.Windows.Forms.Binding> 创建字符串的详细信息，请参阅 `dataMember` 类。  
  
 创建到控件的属性的绑定时，新的将 <xref:System.Windows.Forms.Binding> 检查绑定控件公开的事件，并附加到两个特定事件：  
  
-   <xref:System.Windows.Forms.Control.Validating?displayProperty=nameWithType>.  
  
-   名为*PropertyName*的事件 `Changed` (例如， <xref:System.Windows.Forms.Control.BackColorChanged?displayProperty=nameWithType>)   
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">在该控件中不存在由 <paramref name="propertyName" /> 给出的属性。  
  
- 或 - 
指定的数据源、数据成员或控件属性与集合中的另一个绑定相关联。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Binding (string propertyName, object dataSource, string dataMember, bool formattingEnabled, System.Windows.Forms.DataSourceUpdateMode dataSourceUpdateMode, object nullValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string propertyName, object dataSource, string dataMember, bool formattingEnabled, valuetype System.Windows.Forms.DataSourceUpdateMode dataSourceUpdateMode, object nullValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Binding.#ctor(System.String,System.Object,System.String,System.Boolean,System.Windows.Forms.DataSourceUpdateMode,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (propertyName As String, dataSource As Object, dataMember As String, formattingEnabled As Boolean, dataSourceUpdateMode As DataSourceUpdateMode, nullValue As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Binding(System::String ^ propertyName, System::Object ^ dataSource, System::String ^ dataMember, bool formattingEnabled, System::Windows::Forms::DataSourceUpdateMode dataSourceUpdateMode, System::Object ^ nullValue);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.Binding : string * obj * string * bool * System.Windows.Forms.DataSourceUpdateMode * obj -&gt; System.Windows.Forms.Binding" Usage="new System.Windows.Forms.Binding (propertyName, dataSource, dataMember, formattingEnabled, dataSourceUpdateMode, nullValue)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" Index="0" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="dataSource" Type="System.Object" Index="1" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="dataMember" Type="System.String" Index="2" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="formattingEnabled" Type="System.Boolean" Index="3" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="dataSourceUpdateMode" Type="System.Windows.Forms.DataSourceUpdateMode" Index="4" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="nullValue" Type="System.Object" Index="5" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="propertyName">要绑定的控件属性的名称。</param>
        <param name="dataSource">表示数据源的 <see cref="T:System.Object" />。</param>
        <param name="dataMember">要绑定到的属性或列表。</param>
        <param name="formattingEnabled">若要格式化显示的数据，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
        <param name="dataSourceUpdateMode"><see cref="T:System.Windows.Forms.DataSourceUpdateMode" /> 值之一。</param>
        <param name="nullValue">当数据源值为 <see cref="T:System.Object" /> 时要应用于绑定控件属性的 <see cref="T:System.DBNull" />。</param>
        <summary>初始化 <see cref="T:System.Windows.Forms.Binding" /> 类的新实例，该实例将指示的控件属性绑定到指定数据源的指定数据成员。 （可选）根据指定的更新设置，启用格式设置并将值传播到数据源，然后在从数据源返回 <see cref="T:System.DBNull" /> 时将该属性设置为指定值。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以为数据源指定以下任意类的实例：  
  
-   <xref:System.Data.DataSet>  
  
-   <xref:System.Data.DataTable>  
  
-   <xref:System.Data.DataView>  
  
-   <xref:System.Data.DataViewManager>  
  
-   <xref:System.Windows.Forms.BindingSource>  
  
-   实现接口的任何类 <xref:System.Collections.IList>  
  
-   任何类  
  
 有关 <xref:System.Windows.Forms.Binding> 创建字符串的详细信息，请参阅 `dataMember` 类。  
  
 创建到控件的属性的绑定时，新的将 <xref:System.Windows.Forms.Binding> 检查绑定控件公开的事件，并附加到两个特定事件：  
  
-   <xref:System.Windows.Forms.Control.Validating?displayProperty=nameWithType>  
  
-   名为*PropertyName*的事件 `Changed` (例如， <xref:System.Windows.Forms.Control.BackColorChanged?displayProperty=nameWithType>)   
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">在该控件中不存在由 <paramref name="propertyName" /> 给出的属性。  
  
- 或 - 
指定的数据源、数据成员或控件属性与集合中的另一个绑定相关联。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Binding (string propertyName, object dataSource, string dataMember, bool formattingEnabled, System.Windows.Forms.DataSourceUpdateMode dataSourceUpdateMode, object nullValue, string formatString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string propertyName, object dataSource, string dataMember, bool formattingEnabled, valuetype System.Windows.Forms.DataSourceUpdateMode dataSourceUpdateMode, object nullValue, string formatString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Binding.#ctor(System.String,System.Object,System.String,System.Boolean,System.Windows.Forms.DataSourceUpdateMode,System.Object,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (propertyName As String, dataSource As Object, dataMember As String, formattingEnabled As Boolean, dataSourceUpdateMode As DataSourceUpdateMode, nullValue As Object, formatString As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Binding(System::String ^ propertyName, System::Object ^ dataSource, System::String ^ dataMember, bool formattingEnabled, System::Windows::Forms::DataSourceUpdateMode dataSourceUpdateMode, System::Object ^ nullValue, System::String ^ formatString);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.Binding : string * obj * string * bool * System.Windows.Forms.DataSourceUpdateMode * obj * string -&gt; System.Windows.Forms.Binding" Usage="new System.Windows.Forms.Binding (propertyName, dataSource, dataMember, formattingEnabled, dataSourceUpdateMode, nullValue, formatString)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" Index="0" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="dataSource" Type="System.Object" Index="1" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="dataMember" Type="System.String" Index="2" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="formattingEnabled" Type="System.Boolean" Index="3" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="dataSourceUpdateMode" Type="System.Windows.Forms.DataSourceUpdateMode" Index="4" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="nullValue" Type="System.Object" Index="5" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="formatString" Type="System.String" Index="6" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="propertyName">要绑定的控件属性的名称。</param>
        <param name="dataSource">表示数据源的 <see cref="T:System.Object" />。</param>
        <param name="dataMember">要绑定到的属性或列表。</param>
        <param name="formattingEnabled">若要格式化显示的数据，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
        <param name="dataSourceUpdateMode"><see cref="T:System.Windows.Forms.DataSourceUpdateMode" /> 值之一。</param>
        <param name="nullValue">当数据源值为 <see cref="T:System.Object" /> 时要应用于绑定控件属性的 <see cref="T:System.DBNull" />。</param>
        <param name="formatString">一个或多个格式说明符，指示如何显示值。</param>
        <summary>初始化 <see cref="T:System.Windows.Forms.Binding" /> 类的新实例，该实例将指定的控件属性绑定到指定数据源的指定数据成员。 （可选）允许用指定的格式字符串进行格式设置；根据指定的更新设置将值传播到数据源；在从数据源返回 <see cref="T:System.DBNull" /> 时将该属性设置为指定的值。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以为数据源指定以下任意类的实例：  
  
-   <xref:System.Data.DataSet>  
  
-   <xref:System.Data.DataTable>  
  
-   <xref:System.Data.DataView>  
  
-   <xref:System.Data.DataViewManager>  
  
-   <xref:System.Windows.Forms.BindingSource>  
  
-   实现接口的任何类 <xref:System.Collections.IList>  
  
-   任何类  
  
 有关 <xref:System.Windows.Forms.Binding> 创建字符串的详细信息，请参阅 `dataMember` 类。  
  
 创建到控件的属性的绑定时，新的将 <xref:System.Windows.Forms.Binding> 检查绑定控件公开的事件，并附加到两个特定事件：  
  
-   <xref:System.Windows.Forms.Control.Validating?displayProperty=nameWithType>  
  
-   名为*PropertyName*的事件 `Changed` (例如， <xref:System.Windows.Forms.Control.BackColorChanged?displayProperty=nameWithType>)   
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">在该控件中不存在由 <paramref name="propertyName" /> 给出的属性。  
  
- 或 - 
指定的数据源、数据成员或控件属性与集合中的另一个绑定相关联。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Binding (string propertyName, object dataSource, string dataMember, bool formattingEnabled, System.Windows.Forms.DataSourceUpdateMode dataSourceUpdateMode, object nullValue, string formatString, IFormatProvider formatInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string propertyName, object dataSource, string dataMember, bool formattingEnabled, valuetype System.Windows.Forms.DataSourceUpdateMode dataSourceUpdateMode, object nullValue, string formatString, class System.IFormatProvider formatInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Binding.#ctor(System.String,System.Object,System.String,System.Boolean,System.Windows.Forms.DataSourceUpdateMode,System.Object,System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (propertyName As String, dataSource As Object, dataMember As String, formattingEnabled As Boolean, dataSourceUpdateMode As DataSourceUpdateMode, nullValue As Object, formatString As String, formatInfo As IFormatProvider)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Binding(System::String ^ propertyName, System::Object ^ dataSource, System::String ^ dataMember, bool formattingEnabled, System::Windows::Forms::DataSourceUpdateMode dataSourceUpdateMode, System::Object ^ nullValue, System::String ^ formatString, IFormatProvider ^ formatInfo);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.Binding : string * obj * string * bool * System.Windows.Forms.DataSourceUpdateMode * obj * string * IFormatProvider -&gt; System.Windows.Forms.Binding" Usage="new System.Windows.Forms.Binding (propertyName, dataSource, dataMember, formattingEnabled, dataSourceUpdateMode, nullValue, formatString, formatInfo)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" Index="0" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="dataSource" Type="System.Object" Index="1" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="dataMember" Type="System.String" Index="2" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="formattingEnabled" Type="System.Boolean" Index="3" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="dataSourceUpdateMode" Type="System.Windows.Forms.DataSourceUpdateMode" Index="4" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="nullValue" Type="System.Object" Index="5" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="formatString" Type="System.String" Index="6" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="formatInfo" Type="System.IFormatProvider" Index="7" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="propertyName">要绑定的控件属性的名称。</param>
        <param name="dataSource">表示数据源的 <see cref="T:System.Object" />。</param>
        <param name="dataMember">要绑定到的属性或列表。</param>
        <param name="formattingEnabled">若要格式化显示的数据，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
        <param name="dataSourceUpdateMode"><see cref="T:System.Windows.Forms.DataSourceUpdateMode" /> 值之一。</param>
        <param name="nullValue">当数据源值为 <see cref="T:System.Object" /> 时要应用于绑定控件属性的 <see cref="T:System.DBNull" />。</param>
        <param name="formatString">一个或多个格式说明符，指示如何显示值。</param>
        <param name="formatInfo">重写默认格式设置行为的 <see cref="T:System.IFormatProvider" /> 的实现。</param>
        <summary>初始化 <see cref="T:System.Windows.Forms.Binding" /> 类的新实例，并将指定的控件属性绑定到指定数据源的指定数据成员。 （可选）利用指定的格式字符串启用格式设置；根据指定的更新设置将值传播到数据源；利用指定的格式字符串启用格式设置；以及当从数据源返回 <see cref="T:System.DBNull" /> 时将属性设为指定值，并设置指定的格式提供程序。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以为数据源指定以下任意类的实例：  
  
-   <xref:System.Data.DataSet>  
  
-   <xref:System.Data.DataTable>  
  
-   <xref:System.Data.DataView>  
  
-   <xref:System.Data.DataViewManager>  
  
-   <xref:System.Windows.Forms.BindingSource>  
  
-   实现接口的任何类 <xref:System.Collections.IList>  
  
-   任何类  
  
 有关 <xref:System.Windows.Forms.Binding> 创建字符串的详细信息，请参阅 `dataMember` 类。  
  
 创建到控件的属性的绑定时，新的将 <xref:System.Windows.Forms.Binding> 检查绑定控件公开的事件，并附加到两个特定事件：  
  
-   <xref:System.Windows.Forms.Control.Validating?displayProperty=nameWithType>  
  
-   名为*PropertyName*的事件 `Changed` (例如， <xref:System.Windows.Forms.Control.BackColorChanged?displayProperty=nameWithType>)   
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">在该控件中不存在由 <paramref name="propertyName" /> 给出的属性。  
  
- 或 - 
指定的数据源、数据成员或控件属性与集合中的另一个绑定相关联。</exception>
      </Docs>
    </Member>
    <Member MemberName="BindableComponent">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.IBindableComponent BindableComponent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.IBindableComponent BindableComponent" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Binding.BindableComponent" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BindableComponent As IBindableComponent" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::IBindableComponent ^ BindableComponent { System::Windows::Forms::IBindableComponent ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.BindableComponent : System.Windows.Forms.IBindableComponent" Usage="System.Windows.Forms.Binding.BindableComponent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(null)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(null)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.IBindableComponent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取与 <see cref="T:System.Windows.Forms.Binding" /> 关联的控件。</summary>
        <value>与 <see cref="T:System.Windows.Forms.IBindableComponent" /> 关联的 <see cref="T:System.Windows.Forms.Binding" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BindingComplete">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.BindingCompleteEventHandler BindingComplete;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.BindingCompleteEventHandler BindingComplete" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Binding.BindingComplete" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event BindingComplete As BindingCompleteEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::BindingCompleteEventHandler ^ BindingComplete;" />
      <MemberSignature Language="F#" Value="member this.BindingComplete : System.Windows.Forms.BindingCompleteEventHandler " Usage="member this.BindingComplete : System.Windows.Forms.BindingCompleteEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.BindingCompleteEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在 <see cref="P:System.Windows.Forms.Binding.FormattingEnabled" /> 属性设置为 <see langword="true" /> 且完成绑定操作（如将数据从控件推到数据源或与之相反的操作）时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果为，则在以下任何条件下引发此 <xref:System.Windows.Forms.Binding.FormattingEnabled%2A> 事件 `true` ：  
  
-   数据源中的数据被推送到控件属性上。  
  
-   控件属性中的数据被推送到数据源。  
  
 此事件在完成这些操作时引发，与完成状态无关。 例如，如果绑定操作将 null 值绑定到 <xref:System.Windows.Forms.DateTimePicker.Value%2A> 属性，则会引发异常，但 <xref:System.Windows.Forms.Binding.BindingComplete> 仍会发生该事件。 此事件的处理程序可以根据绑定过程中的成功、错误或异常，采取相应的操作，方法是检查 <xref:System.Windows.Forms.BindingCompleteEventArgs.BindingCompleteState%2A> 参数的属性 <xref:System.Windows.Forms.BindingCompleteEventArgs> 。  
  
 有关处理事件的详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
   
  
## Examples  
 下面的代码示例演示如何处理 <xref:System.Windows.Forms.Binding.BindingComplete> 事件。  
  
 [!code-cpp[System.Windows.Forms.DataConnectorBindingComplete#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.DataConnectorBindingComplete/CPP/form1.cpp#3)]
 [!code-csharp[System.Windows.Forms.DataConnectorBindingComplete#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataConnectorBindingComplete/CS/form1.cs#3)]
 [!code-vb[System.Windows.Forms.DataConnectorBindingComplete#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataConnectorBindingComplete/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Binding.FormattingEnabled" />
        <altmember cref="M:System.Windows.Forms.Binding.OnBindingComplete(System.Windows.Forms.BindingCompleteEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="BindingManagerBase">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.BindingManagerBase BindingManagerBase { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.BindingManagerBase BindingManagerBase" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Binding.BindingManagerBase" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BindingManagerBase As BindingManagerBase" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::BindingManagerBase ^ BindingManagerBase { System::Windows::Forms::BindingManagerBase ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.BindingManagerBase : System.Windows.Forms.BindingManagerBase" Usage="System.Windows.Forms.Binding.BindingManagerBase" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.BindingManagerBase</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取此 <see cref="T:System.Windows.Forms.BindingManagerBase" /> 的 <see cref="T:System.Windows.Forms.Binding" />。</summary>
        <value>管理该 <see cref="T:System.Windows.Forms.BindingManagerBase" /> 的 <see cref="T:System.Windows.Forms.Binding" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.BindingManagerBase>通过递增或递减属性，使用来循环访问数据绑定列表 <xref:System.Windows.Forms.BindingManagerBase.Position%2A> 。 <xref:System.Windows.Forms.BindingManagerBase>类是抽象类。 <xref:System.Windows.Forms.CurrencyManager>用于管理数据绑定列表的类继承自 <xref:System.Windows.Forms.BindingManagerBase> 类。  
  
   
  
## Examples  
 下面的代码示例获取 <xref:System.Windows.Forms.BindingManagerBase> <xref:System.Windows.Forms.Binding> 窗体上每个的，并打印 <xref:System.Windows.Forms.BindingManagerBase.Position%2A> 每个的的属性 <xref:System.Windows.Forms.BindingManagerBase> 。  
  
 [!code-cpp[Classic Binding.BindingManagerBase Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Binding.BindingManagerBase Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Binding.BindingManagerBase Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Binding.BindingManagerBase Example/CS/source.cs#1)]
 [!code-vb[Classic Binding.BindingManagerBase Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Binding.BindingManagerBase Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BindingMemberInfo">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.BindingMemberInfo BindingMemberInfo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.BindingMemberInfo BindingMemberInfo" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Binding.BindingMemberInfo" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BindingMemberInfo As BindingMemberInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::BindingMemberInfo BindingMemberInfo { System::Windows::Forms::BindingMemberInfo get(); };" />
      <MemberSignature Language="F#" Value="member this.BindingMemberInfo : System.Windows.Forms.BindingMemberInfo" Usage="System.Windows.Forms.Binding.BindingMemberInfo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.BindingMemberInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取包含有关该绑定的信息的对象（基于 <see cref="Overload:System.Windows.Forms.Binding.#ctor" /> 构造函数中的 <paramref name="dataMember" /> 参数）。</summary>
        <value>一个 <see cref="T:System.Windows.Forms.BindingMemberInfo" />，它包含有关该 <see cref="T:System.Windows.Forms.Binding" /> 的信息。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.BindingMemberInfo>是从 `dataMember` 传递给构造函数的字符串创建的 <xref:System.Windows.Forms.Binding.%23ctor%2A> 。  
  
   
  
## Examples  
 下面的代码示例获取 <xref:System.Windows.Forms.BindingMemberInfo> 窗体上每个的， <xref:System.Windows.Forms.Binding> 并打印 <xref:System.Windows.Forms.BindingMemberInfo.BindingPath%2A> 该的、 <xref:System.Windows.Forms.BindingMemberInfo.BindingField%2A> 和 <xref:System.Windows.Forms.BindingMemberInfo.BindingMember%2A> 属性值 <xref:System.Windows.Forms.Binding> 。  
  
 [!code-cpp[Classic Binding.BindingMemberInfo Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Binding.BindingMemberInfo Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Binding.BindingMemberInfo Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Binding.BindingMemberInfo Example/CS/source.cs#1)]
 [!code-vb[Classic Binding.BindingMemberInfo Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Binding.BindingMemberInfo Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.BindingsCollection" />
      </Docs>
    </Member>
    <Member MemberName="Control">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Control Control { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.Control Control" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Binding.Control" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Control As Control" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::Control ^ Control { System::Windows::Forms::Control ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Control : System.Windows.Forms.Control" Usage="System.Windows.Forms.Binding.Control" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(null)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(null)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Control</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取绑定所属的控件。</summary>
        <value>绑定所属的 <see cref="T:System.Windows.Forms.Control" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例获取 <xref:System.Windows.Forms.BindingManagerBase> 特定数据源的，并打印与 <xref:System.Windows.Forms.Binding.Control%2A> 绑定到该数据源的每个属性有关的信息。 该示例使用 <xref:System.Windows.Forms.BindingManagerBase.Bindings%2A> 的属性 <xref:System.Windows.Forms.BindingManagerBase> 来获取所有控件。  
  
 [!code-cpp[Classic Binding.Control Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Binding.Control Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Binding.Control Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Binding.Control Example/CS/source.cs#1)]
 [!code-vb[Classic Binding.Control Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Binding.Control Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ControlUpdateMode">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ControlUpdateMode ControlUpdateMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.ControlUpdateMode ControlUpdateMode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Binding.ControlUpdateMode" />
      <MemberSignature Language="VB.NET" Value="Public Property ControlUpdateMode As ControlUpdateMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ControlUpdateMode ControlUpdateMode { System::Windows::Forms::ControlUpdateMode get(); void set(System::Windows::Forms::ControlUpdateMode value); };" />
      <MemberSignature Language="F#" Value="member this.ControlUpdateMode : System.Windows.Forms.ControlUpdateMode with get, set" Usage="System.Windows.Forms.Binding.ControlUpdateMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ControlUpdateMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置将数据源的更改传播到绑定控件属性的时间。</summary>
        <value><see cref="T:System.Windows.Forms.ControlUpdateMode" /> 值之一。 默认为 <see cref="F:System.Windows.Forms.ControlUpdateMode.OnPropertyChanged" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DataSource">
      <MemberSignature Language="C#" Value="public object DataSource { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object DataSource" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Binding.DataSource" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DataSource As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ DataSource { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DataSource : obj" Usage="System.Windows.Forms.Binding.DataSource" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取该绑定的数据源。</summary>
        <value>一个表示数据源的 <see cref="T:System.Object" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 可能的数据源包括：  
  
-   一个 <xref:System.Data.DataSet>  
  
-   一个 <xref:System.Data.DataTable>  
  
-   一个 <xref:System.Data.DataView>  
  
-   一个 <xref:System.Data.DataViewManager>  
  
-   实现接口的任何对象 <xref:System.Collections.IList>  
  
-   任何对象  
  
   
  
## Examples  
 下面的代码示例使用 <xref:System.Windows.Forms.Binding.DataSource%2A> 属性返回 <xref:System.Data.DataSet> 。  
  
 [!code-cpp[Classic Binding.DataSource Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Binding.DataSource Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Binding.DataSource Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Binding.DataSource Example/CS/source.cs#1)]
 [!code-vb[Classic Binding.DataSource Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Binding.DataSource Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DataSourceNullValue">
      <MemberSignature Language="C#" Value="public object DataSourceNullValue { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object DataSourceNullValue" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Binding.DataSourceNullValue" />
      <MemberSignature Language="VB.NET" Value="Public Property DataSourceNullValue As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ DataSourceNullValue { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DataSourceNullValue : obj with get, set" Usage="System.Windows.Forms.Binding.DataSourceNullValue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置将存储在数据源中的值（如果控件值为 <see langword="null" /> 或为空）。</summary>
        <value>当控件属性为空或为 <see langword="null" /> 时，将存储在数据源中的 <see cref="T:System.Object" />。 对于值类型，默认为 <see cref="T:System.DBNull" />；对于非值类型，则默认为 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.Binding.NullValue%2A>当数据源包含时，可以使用属性来指定绑定控件中显示的值 <xref:System.DBNull> 。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Binding.NullValue" />
      </Docs>
    </Member>
    <Member MemberName="DataSourceUpdateMode">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataSourceUpdateMode DataSourceUpdateMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.DataSourceUpdateMode DataSourceUpdateMode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Binding.DataSourceUpdateMode" />
      <MemberSignature Language="VB.NET" Value="Public Property DataSourceUpdateMode As DataSourceUpdateMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::DataSourceUpdateMode DataSourceUpdateMode { System::Windows::Forms::DataSourceUpdateMode get(); void set(System::Windows::Forms::DataSourceUpdateMode value); };" />
      <MemberSignature Language="F#" Value="member this.DataSourceUpdateMode : System.Windows.Forms.DataSourceUpdateMode with get, set" Usage="System.Windows.Forms.Binding.DataSourceUpdateMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataSourceUpdateMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示将绑定控件属性的更改传播到数据源的时间。</summary>
        <value>指示当传播更改时的值。 默认为 <see cref="F:System.Windows.Forms.DataSourceUpdateMode.OnValidation" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 请注意，即使此属性设置为 <xref:System.Windows.Forms.DataSourceUpdateMode.Never> ，绑定将至少在第一次建立时进行更新。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Format">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.ConvertEventHandler Format;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.ConvertEventHandler Format" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Binding.Format" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Format As ConvertEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::ConvertEventHandler ^ Format;" />
      <MemberSignature Language="F#" Value="member this.Format : System.Windows.Forms.ConvertEventHandler " Usage="member this.Format : System.Windows.Forms.ConvertEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ConvertEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当将某控件的属性绑定到某个数据值时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.Binding.Format>当数据从数据源推送到控件中时，将引发事件。 可以处理该 <xref:System.Windows.Forms.Binding.Format> 事件，将未格式化的数据从数据源转换为要显示的格式化数据。 将数据从控件请求到数据源时，将 <xref:System.Windows.Forms.Binding.Parse> 引发事件以 unformat 显示的值，然后 <xref:System.Windows.Forms.Binding.Format> 发生事件以便重新设置要显示的数据的格式。 这可确保绑定控件显示格式正确的数据，而不管用户是否在控件中输入已设置格式或未格式化的数据。  
  
 <xref:System.Windows.Forms.Binding.Format>和 <xref:System.Windows.Forms.Binding.Parse> 事件允许您创建用于显示数据的自定义格式。 例如，如果表中的数据是类型 <xref:System.Decimal> ，则可以通过将 <xref:System.Windows.Forms.ConvertEventArgs.Value%2A> 的属性设置 <xref:System.Windows.Forms.ConvertEventArgs> 为事件中的格式化值，以本地货币格式显示数据 <xref:System.Windows.Forms.Binding.Format> 。 因此，必须 unformat 事件中显示的值 <xref:System.Windows.Forms.Binding.Parse> 。  
  
 <xref:System.Windows.Forms.Binding.Format>只要更改的值，就会发生此事件 <xref:System.Windows.Forms.BindingManagerBase.Current%2A> <xref:System.Windows.Forms.BindingManagerBase> ，其中包括：  
  
-   第一次绑定属性时。  
  
-   任何时间 <xref:System.Windows.Forms.BindingManagerBase.Position%2A> 发生更改。  
  
-   只要对数据绑定列表进行排序或筛选，就会在提供列表时完成此操作 <xref:System.Data.DataView> 。  
  
 事件 <xref:System.Windows.Forms.Binding.Format> 也会在事件之后发生 <xref:System.Windows.Forms.Binding.Parse> 。 例如，当控件失去焦点时，将分析其内容。 此后，当新数据推送到控件中时，将 <xref:System.Windows.Forms.Binding.Format> 发生事件，从而允许对新内容进行格式设置。  
  
 有关处理事件的详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
   
  
## Examples  
 下面的代码示例创建一个 <xref:System.Windows.Forms.Binding> ，将 <xref:System.Windows.Forms.ConvertEventHandler> 委托添加到 <xref:System.Windows.Forms.Binding.Parse> 和 <xref:System.Windows.Forms.Binding.Format> 事件，并通过属性将添加 <xref:System.Windows.Forms.Binding> 到 <xref:System.Windows.Forms.BindingsCollection> 控件的 <xref:System.Windows.Forms.TextBox> <xref:System.Windows.Forms.Control.DataBindings%2A> 。 `DecimalToCurrencyString`添加到事件中的事件委托 <xref:System.Windows.Forms.Binding.Format> ，使用方法将绑定值的格式 (<xref:System.Decimal> 类型) 为货币 <xref:System.Decimal.ToString%2A> 。 `CurrencyStringToDecimal`添加到事件中的事件委托 <xref:System.Windows.Forms.Binding.Parse> 将控件显示的值转换回 <xref:System.Decimal> 类型。  
  
 此示例假定存在一个 <xref:System.Data.DataSet> 名为的 `ds` 。  
  
 [!code-cpp[Classic Binding.Format Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Binding.Format Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Binding.Format Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Binding.Format Example/CS/source.cs#1)]
 [!code-vb[Classic Binding.Format Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Binding.Format Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.Binding.Parse" />
        <altmember cref="M:System.Windows.Forms.Binding.OnFormat(System.Windows.Forms.ConvertEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="FormatInfo">
      <MemberSignature Language="C#" Value="public IFormatProvider FormatInfo { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IFormatProvider FormatInfo" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Binding.FormatInfo" />
      <MemberSignature Language="VB.NET" Value="Public Property FormatInfo As IFormatProvider" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IFormatProvider ^ FormatInfo { IFormatProvider ^ get(); void set(IFormatProvider ^ value); };" />
      <MemberSignature Language="F#" Value="member this.FormatInfo : IFormatProvider with get, set" Usage="System.Windows.Forms.Binding.FormatInfo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(null)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(null)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IFormatProvider</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置提供自定义格式设置行为的 <see cref="T:System.IFormatProvider" />。</summary>
        <value>提供自定义格式设置行为的 <see cref="T:System.IFormatProvider" /> 实现。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 设置此属性将重写默认格式设置行为，该行为使用 <xref:System.Windows.Forms.Application.CurrentCulture%2A?displayProperty=nameWithType> 属性设置。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FormatString">
      <MemberSignature Language="C#" Value="public string FormatString { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FormatString" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Binding.FormatString" />
      <MemberSignature Language="VB.NET" Value="Public Property FormatString As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ FormatString { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.FormatString : string with get, set" Usage="System.Windows.Forms.Binding.FormatString" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置指示如何显示值的格式说明符。</summary>
        <value>一个字符串，包含指示如何显示值的格式说明符。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用的格式字符串应遵循标准 .NET Framework 格式规范。 有关详细信息，请参阅 [.NET Framework 中的格式设置类型](/dotnet/standard/base-types/formatting-types)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FormattingEnabled">
      <MemberSignature Language="C#" Value="public bool FormattingEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool FormattingEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Binding.FormattingEnabled" />
      <MemberSignature Language="VB.NET" Value="Public Property FormattingEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool FormattingEnabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.FormattingEnabled : bool with get, set" Usage="System.Windows.Forms.Binding.FormattingEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示是否对控件属性数据应用类型转换和格式设置。</summary>
        <value>如果已针对控件属性数据启用类型转换和格式设置，则为 <see langword="true" />；否则为 <see langword="false" />。 默认为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果将此属性设置为，则 `true` 还会启用错误处理行为，并 <xref:System.Windows.Forms.Binding.BindingComplete> 引发事件。 此事件的处理程序可以根据绑定过程中的成功、错误或异常，采取相应的操作，方法是检查 <xref:System.Windows.Forms.BindingCompleteEventArgs.BindingCompleteState%2A> 参数的属性 <xref:System.Windows.Forms.BindingCompleteEventArgs> 。  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.Binding.BindingComplete" />
        <altmember cref="T:System.Windows.Forms.BindingCompleteEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="IsBinding">
      <MemberSignature Language="C#" Value="public bool IsBinding { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsBinding" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Binding.IsBinding" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsBinding As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsBinding { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsBinding : bool" Usage="System.Windows.Forms.Binding.IsBinding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取指示绑定是否活动的值。</summary>
        <value>如果绑定处于活动状态，为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 绑定在满足以下条件时处于活动状态：  
  
-   设置其所有属性。  
  
-   用户未对所属的调用 <xref:System.Windows.Forms.BindingManagerBase.ResumeBinding%2A> 或 <xref:System.Windows.Forms.BindingManagerBase.SuspendBinding%2A> <xref:System.Windows.Forms.BindingManagerBase> <xref:System.Windows.Forms.Binding> 。  
  
-   已创建所属的控件 <xref:System.Windows.Forms.Binding> 。  
  
   
  
## Examples  
 下面的代码示例 <xref:System.Windows.Forms.Binding.PropertyName%2A> <xref:System.Windows.Forms.Binding.IsBinding%2A> <xref:System.Windows.Forms.Binding> 在窗体上打印每个的和值。  
  
 [!code-cpp[Classic Binding.IsBinding Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Binding.IsBinding Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Binding.IsBinding Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Binding.IsBinding Example/CS/source.cs#1)]
 [!code-vb[Classic Binding.IsBinding Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Binding.IsBinding Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NullValue">
      <MemberSignature Language="C#" Value="public object NullValue { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object NullValue" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Binding.NullValue" />
      <MemberSignature Language="VB.NET" Value="Public Property NullValue As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ NullValue { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.NullValue : obj with get, set" Usage="System.Windows.Forms.Binding.NullValue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置当数据源包含 <see cref="T:System.Object" /> 值时，作为控件属性设置的 <see cref="T:System.DBNull" />。</summary>
        <value>当数据源包含 <see cref="T:System.Object" /> 值时，作为控件属性设置的 <see cref="T:System.DBNull" />。 默认为 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 数据源必须包含， <xref:System.DBNull> <xref:System.Windows.Forms.Binding.NullValue%2A> 才能正确应用属性。 如果数据源类型为类型（如字符串或整数），则 <xref:System.Windows.Forms.Binding.NullValue%2A> 将忽略属性的值。 此外， <xref:System.Windows.Forms.Binding.NullValue%2A> 如果将属性设置为，则忽略该属性 `null` 。  
  
 如果将控件属性设置为的对象，则会向数据源中添加 null 值 <xref:System.Windows.Forms.Binding.NullValue%2A> 。 如果 <xref:System.Windows.Forms.Binding.NullValue%2A> 设置为字符串值，则比较不区分大小写。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnBindingComplete">
      <MemberSignature Language="C#" Value="protected virtual void OnBindingComplete (System.Windows.Forms.BindingCompleteEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnBindingComplete(class System.Windows.Forms.BindingCompleteEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Binding.OnBindingComplete(System.Windows.Forms.BindingCompleteEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnBindingComplete (e As BindingCompleteEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnBindingComplete(System::Windows::Forms::BindingCompleteEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnBindingComplete : System.Windows.Forms.BindingCompleteEventArgs -&gt; unit&#xA;override this.OnBindingComplete : System.Windows.Forms.BindingCompleteEventArgs -&gt; unit" Usage="binding.OnBindingComplete e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.BindingCompleteEventArgs" Index="0" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.Windows.Forms.BindingCompleteEventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.Binding.BindingComplete" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
 <xref:System.Windows.Forms.Binding.OnBindingComplete%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>在派生类中重写 <see cref="M:System.Windows.Forms.Binding.OnBindingComplete(System.Windows.Forms.BindingCompleteEventArgs)" /> 时，一定要调用基类的 <see cref="M:System.Windows.Forms.Binding.OnBindingComplete(System.Windows.Forms.BindingCompleteEventArgs)" /> 方法，以便已注册的委托对事件进行接收。</para></block>
      </Docs>
    </Member>
    <Member MemberName="OnFormat">
      <MemberSignature Language="C#" Value="protected virtual void OnFormat (System.Windows.Forms.ConvertEventArgs cevent);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnFormat(class System.Windows.Forms.ConvertEventArgs cevent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Binding.OnFormat(System.Windows.Forms.ConvertEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnFormat (cevent As ConvertEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnFormat(System::Windows::Forms::ConvertEventArgs ^ cevent);" />
      <MemberSignature Language="F#" Value="abstract member OnFormat : System.Windows.Forms.ConvertEventArgs -&gt; unit&#xA;override this.OnFormat : System.Windows.Forms.ConvertEventArgs -&gt; unit" Usage="binding.OnFormat cevent" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cevent" Type="System.Windows.Forms.ConvertEventArgs" />
      </Parameters>
      <Docs>
        <param name="cevent">包含事件数据的 <see cref="T:System.Windows.Forms.ConvertEventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.Binding.Format" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
 <xref:System.Windows.Forms.Binding.OnFormat%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>在派生类中重写 <see cref="M:System.Windows.Forms.Binding.OnFormat(System.Windows.Forms.ConvertEventArgs)" /> 时，一定要调用基类的 <see cref="M:System.Windows.Forms.Binding.OnFormat(System.Windows.Forms.ConvertEventArgs)" /> 方法，以便已注册的委托对事件进行接收。</para></block>
        <altmember cref="E:System.Windows.Forms.Binding.Format" />
        <altmember cref="M:System.Windows.Forms.Binding.OnParse(System.Windows.Forms.ConvertEventArgs)" />
        <altmember cref="E:System.Windows.Forms.Binding.Parse" />
      </Docs>
    </Member>
    <Member MemberName="OnParse">
      <MemberSignature Language="C#" Value="protected virtual void OnParse (System.Windows.Forms.ConvertEventArgs cevent);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnParse(class System.Windows.Forms.ConvertEventArgs cevent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Binding.OnParse(System.Windows.Forms.ConvertEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnParse (cevent As ConvertEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnParse(System::Windows::Forms::ConvertEventArgs ^ cevent);" />
      <MemberSignature Language="F#" Value="abstract member OnParse : System.Windows.Forms.ConvertEventArgs -&gt; unit&#xA;override this.OnParse : System.Windows.Forms.ConvertEventArgs -&gt; unit" Usage="binding.OnParse cevent" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cevent" Type="System.Windows.Forms.ConvertEventArgs" />
      </Parameters>
      <Docs>
        <param name="cevent">包含事件数据的 <see cref="T:System.Windows.Forms.ConvertEventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.Binding.Parse" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
 <xref:System.Windows.Forms.Binding.OnParse%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>在派生类中重写 <see cref="M:System.Windows.Forms.Binding.OnParse(System.Windows.Forms.ConvertEventArgs)" /> 时，一定要调用基类的 <see cref="M:System.Windows.Forms.Binding.OnParse(System.Windows.Forms.ConvertEventArgs)" /> 方法，以便已注册的委托对事件进行接收。</para></block>
        <altmember cref="E:System.Windows.Forms.Binding.Format" />
        <altmember cref="M:System.Windows.Forms.Binding.OnFormat(System.Windows.Forms.ConvertEventArgs)" />
        <altmember cref="E:System.Windows.Forms.Binding.Parse" />
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.ConvertEventHandler Parse;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.ConvertEventHandler Parse" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Binding.Parse" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Parse As ConvertEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::ConvertEventHandler ^ Parse;" />
      <MemberSignature Language="F#" Value="member this.Parse : System.Windows.Forms.ConvertEventHandler " Usage="member this.Parse : System.Windows.Forms.ConvertEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ConvertEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在数据绑定控件的值更改时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.Binding.Format>和 <xref:System.Windows.Forms.Binding.Parse> 事件允许您创建用于显示数据的自定义格式。 例如，如果表中的数据是类型 <xref:System.Decimal> ，则可以通过将 <xref:System.Windows.Forms.ConvertEventArgs.Value%2A> 的属性设置 <xref:System.Windows.Forms.ConvertEventArgs> 为事件中的格式化值，以本地货币格式显示数据 <xref:System.Windows.Forms.Binding.Format> 。 因此，必须 unformat 事件中显示的值 <xref:System.Windows.Forms.Binding.Parse> 。  
  
 <xref:System.Windows.Forms.Binding.Parse>事件发生在下列情况下：  
  
-   <xref:System.Windows.Forms.Control.Validated>发生事件后 <xref:System.Windows.Forms.Control> 。  
  
-   调用的 <xref:System.Windows.Forms.BindingManagerBase.EndCurrentEdit%2A> 方法时 <xref:System.Windows.Forms.BindingManagerBase> 。  
  
-   <xref:System.Windows.Forms.BindingManagerBase.Current%2A>换言之，当更改 <xref:System.Windows.Forms.BindingManagerBase>) 时，更改 (<xref:System.Windows.Forms.BindingManagerBase.Position%2A> 。  
  
 有关处理事件的详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
   
  
## Examples  
 下面的代码示例创建一个 <xref:System.Windows.Forms.Binding> ，将 <xref:System.Windows.Forms.ConvertEventHandler> 委托添加到 <xref:System.Windows.Forms.Binding.Parse> 和 <xref:System.Windows.Forms.Binding.Format> 事件，并通过属性将添加 <xref:System.Windows.Forms.Binding> 到 <xref:System.Windows.Forms.BindingsCollection> 控件的 <xref:System.Windows.Forms.TextBox> <xref:System.Windows.Forms.Control.DataBindings%2A> 。 `DecimalToCurrencyString`添加到事件中的事件委托 <xref:System.Windows.Forms.Binding.Format> ，使用方法将绑定值的格式 (<xref:System.Decimal> 类型) 为货币 <xref:System.Decimal.ToString%2A> 。 `CurrencyStringToDecimal`添加到事件中的事件委托 <xref:System.Windows.Forms.Binding.Parse> 将控件显示的值转换回 <xref:System.Decimal> 类型。  
  
 [!code-cpp[Classic Binding.Parse Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Binding.Parse Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Binding.Parse Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Binding.Parse Example/CS/source.cs#1)]
 [!code-vb[Classic Binding.Parse Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Binding.Parse Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.Binding.Format" />
        <altmember cref="M:System.Windows.Forms.Binding.OnParse(System.Windows.Forms.ConvertEventArgs)" />
        <altmember cref="E:System.Windows.Forms.BindingManagerBase.PositionChanged" />
        <altmember cref="E:System.Windows.Forms.BindingManagerBase.CurrentChanged" />
      </Docs>
    </Member>
    <Member MemberName="PropertyName">
      <MemberSignature Language="C#" Value="public string PropertyName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PropertyName" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Binding.PropertyName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PropertyName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ PropertyName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.PropertyName : string" Usage="System.Windows.Forms.Binding.PropertyName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue("")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue("")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取控件的数据绑定属性的名称。</summary>
        <value>要绑定到的控件属性的名称。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用 <xref:System.Windows.Forms.Binding.PropertyName%2A> 指定要绑定到数据源中的列表的控件属性。 最常见的情况是绑定显示属性（如 <xref:System.Windows.Forms.Control.Text%2A> 控件的属性） <xref:System.Windows.Forms.TextBox> 。 但是，由于可以绑定控件的任何属性，因此可以使用数据库中的数据以编程方式在运行时创建控件。  
  
   
  
## Examples  
 下面的代码示例将 <xref:System.Windows.Forms.Binding.PropertyName%2A> <xref:System.Windows.Forms.Binding> 为窗体上的每个控件打印各自的值。  
  
 [!code-cpp[Classic Binding.PropertyName Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Binding.PropertyName Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Binding.PropertyName Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Binding.PropertyName Example/CS/source.cs#1)]
 [!code-vb[Classic Binding.PropertyName Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Binding.PropertyName Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadValue">
      <MemberSignature Language="C#" Value="public void ReadValue ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReadValue() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Binding.ReadValue" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReadValue ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReadValue();" />
      <MemberSignature Language="F#" Value="member this.ReadValue : unit -&gt; unit" Usage="binding.ReadValue " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>将控件属性设置为从数据源读取的值。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteValue">
      <MemberSignature Language="C#" Value="public void WriteValue ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteValue() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Binding.WriteValue" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteValue ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteValue();" />
      <MemberSignature Language="F#" Value="member this.WriteValue : unit -&gt; unit" Usage="binding.WriteValue " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>读取控件属性的当前值并将其写入数据源。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
