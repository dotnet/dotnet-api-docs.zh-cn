<Type Name="SendKeys" FullName="System.Windows.Forms.SendKeys">
  <Metadata><Meta Name="ms.openlocfilehash" Value="cb4ca3d0d114fd40deab9a2207b941a46f7e0e76" /><Meta Name="ms.sourcegitcommit" Value="b53d35b4a410c949742abd4c6a989d1af5357bca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="86727166" /></Metadata><TypeSignature Language="C#" Value="public class SendKeys" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi SendKeys extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.SendKeys" />
  <TypeSignature Language="VB.NET" Value="Public Class SendKeys" />
  <TypeSignature Language="C++ CLI" Value="public ref class SendKeys" />
  <TypeSignature Language="F#" Value="type SendKeys = class" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>提供将键击发送到应用程序的方法。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 用于向 <xref:System.Windows.Forms.SendKeys> 活动应用程序发送击键和击键组合。 此类无法实例化。 若要将击键发送到类并立即继续处理程序，请使用 <xref:System.Windows.Forms.SendKeys.Send%2A> 。 若要等待击键启动的任何进程，请使用 <xref:System.Windows.Forms.SendKeys.SendWait%2A> 。  
  
 每个键由一个或多个字符表示。 若要指定单个键盘字符，请使用字符本身。 例如，若要表示字母 A，请将字符串 "A" 传递给方法。 若要表示多个字符，请将每个附加字符追加到其前面的字符。 若要表示字母 A、B 和 C，请将参数指定为 "ABC"。  
  
 加号 (+) ，脱字号 (^) ，百分比符号 (% ) ，颚化 (~) ，括号 ( # A9 具有特殊意义 <xref:System.Windows.Forms.SendKeys> 。 若要指定其中一个字符，请将其括在大括号内 ({}) 。 例如，若要指定加号，请使用 "{+}"。 若要指定大括号字符，请使用 "{ {} " 和 " {} }"。 方括号 ( [] ) 没有任何特殊含义 <xref:System.Windows.Forms.SendKeys> ，但必须将它们括在大括号中。 在其他应用程序中，括号确实有一个特殊含义，当动态数据交换 (DDE) 发生时，这可能很重要。  
  
> [!CAUTION]
>  如果你的应用程序旨在用于全球各种键盘，使用 <xref:System.Windows.Forms.SendKeys.Send%2A> 可能会产生不可预知的结果，应当避免。  
  
 若要指定按下某个键时未显示的字符（如 ENTER 或 TAB）以及表示操作而不是字符的键，请使用下表中的代码。  
  
|密钥|代码|  
|---------|----------|  
|Backspace|{BACKSPACE}、{BS.1770} 或 {BKSP}|  
|BREAK|分|  
|Caps Lock|{CAPSLOCK}|  
|DEL 或 DELETE|{DELETE} 或 {DEL}|  
|向下键|分解|  
|End|{END}|  
|Enter|{ENTER} 或 ~|  
|Esc|ECS|  
|HELP|{HELP}|  
|Home|{HOME}|  
|INS 或 INSERT|{INSERT} 或 {INS}|  
|向左键|{LEFT}|  
|Num Lock|{NUMLOCK}|  
|Page Down|{PGDN}|  
|Page Up|PGUP|  
|打印屏幕|{PRTSC} (保留以供将来使用) |  
|向右键|{RIGHT}|  
|Scroll Lock|{SCROLLLOCK}|  
|Tab|{TAB}|  
|向上键|UP|  
|F1|按|  
|F2|组合键|  
|F3|键|  
|F4|F4|  
|F5|F5|  
|F6|组合键|  
|F7|F7|  
|F8|组合键|  
|F9|时更新|  
|F10|F10|  
|F11|F11|  
|F12|F12|  
|F13|F13|  
|F14|F14|  
|F15|F15|  
|F16|F16|  
|小键盘加|把|  
|小键盘减|{SUBTRACT}|  
|小键盘乘|{MULTIPLY}|  
|小键盘除|拆分|  
  
 若要指定与 SHIFT、CTRL 和 ALT 键的任意组合组合的键，请在键代码前面加上一个或多个以下代码。  
  
|密钥|代码|  
|---------|----------|  
|SHIFT|+|  
|Ctrl|^|  
|ALT|%|  
  
 若要指定在按多个其他键的同时按下 SHIFT、CTRL 和 ALT 的任意组合，请将这些键的代码括在括号中。 例如，若要指定在按 E 和 C 的同时按住 SHIFT，请使用 "+ (EC) "。 若要指定在按 E 的同时按住 SHIFT，请在不带 SHIFT 的情况下使用 C，并使用 "+ EC"。  
  
 若要指定重复键，请使用格式 {key number}。 必须在键和数字之间添加一个空格。 例如，{LEFT 42} 表示按左箭头键42次;{h 10} 表示按 H 10 次。  
  
> [!NOTE]
>  由于没有用于激活其他应用程序的托管方法，您可以在当前应用程序中使用此类，也可以使用本机 Windows 方法（如 `FindWindow` 和 `SetForegroundWindow` ）强制集中于其他应用程序。  
  
> [!NOTE]
>  <xref:System.Windows.Forms.SendKeys> 类已更新为 .NET Framework 3.0，从而可用于在 Windows Vista 上运行的应用程序。 Windows Vista 增强的安全性（称为用户帐户控件或 UAC）可避免以前的实现按预期运行。  
>   
>  <xref:System.Windows.Forms.SendKeys> 类容易遭受某些开发人员不得不解决的计时问题。 更新后的实现仍然容易遇到计时问题，但速度稍微快一些，并且可能需要更改解决方法。 <xref:System.Windows.Forms.SendKeys> 类先尝试使用以前的实现，失败后再使用新的实现。 因此， <xref:System.Windows.Forms.SendKeys> 类在不同操作系统上的运行方式可能不同。 此外，当 <xref:System.Windows.Forms.SendKeys> 类使用新的实现时， <xref:System.Windows.Forms.SendKeys.SendWait%2A> 方法不会等到消息被处理后才将其发送至其他进程。  
>   
>  如果如论使用何种操作系统，你的应用程序均依赖于一致的行为，则可通过将以下应用程序设置添加至 app.config 文件强制执行 <xref:System.Windows.Forms.SendKeys> 类以使用新的实现。  
>   
>  `<appSettings>`  
>   
>  `<add key="SendKeys" value="SendInput"/>`  
>   
>  `</appSettings>`  
>   
>  若要强制执行 <xref:System.Windows.Forms.SendKeys> 类以使用以前的实现，请改用 `"JournalHook"` 值。  
  
   
  
## Examples  
 下面的代码示例演示如何使用 <xref:System.Windows.Forms.SendKeys.Send%2A> 方法。 若要运行该示例，请将以下代码粘贴到一个名为 Form1 的窗体中，其中包含一个名为 "Button1" 请确保单击事件与其在此示例中的事件处理方法相关联。 按钮控件的 <xref:System.Windows.Forms.Control.TabIndex%2A> 属性应设置为0。 当示例运行时，双击窗体以触发按钮的 click 事件。  
  
 [!code-cpp[System.Windows.Forms.SendKeys#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.SendKeys/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.SendKeys#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.SendKeys/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.SendKeys#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.SendKeys/VB/form1.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public static void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Flush() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.SendKeys.Flush" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Flush ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Flush();" />
      <MemberSignature Language="F#" Value="static member Flush : unit -&gt; unit" Usage="System.Windows.Forms.SendKeys.Flush " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>处理消息队列中当前的所有 Windows 消息。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用 <xref:System.Windows.Forms.SendKeys.Flush%2A> 等待应用程序处理消息队列中的击键和其他操作系统消息。 这等效于调用， <xref:System.Windows.Forms.Application.DoEvents%2A?displayProperty=nameWithType> 直到没有更多要处理的键。  
  
> [!NOTE]
>  由于没有用于激活其他应用程序的托管方法，您可以在当前应用程序中使用此类，也可以使用本机 Windows 方法（如 `FindWindow` 和 `SetForegroundWindow` ）强制集中于其他应用程序。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public static void Send (string keys);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Send(string keys) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.SendKeys.Send(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Send (keys As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Send(System::String ^ keys);" />
      <MemberSignature Language="F#" Value="static member Send : string -&gt; unit" Usage="System.Windows.Forms.SendKeys.Send keys" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keys" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="keys">要发送的击键字符串。</param>
        <summary>向活动应用程序发送击键。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 每个键由一个或多个字符表示。 若要指定单个键盘字符，请使用字符本身。 例如，若要表示字母 A，请将字符串 "A" 传递给方法。 若要表示多个字符，请将每个附加字符追加到其前面的字符。 若要表示字母 A、B 和 C，请将参数指定为 "ABC"。  
  
 加号 (+) ，脱字号 (^) ，百分比符号 (% ) ，颚化 (~) ，括号 ( # A9 具有特殊意义 <xref:System.Windows.Forms.SendKeys> 。 若要指定其中一个字符，请将其括在大括号内 ({}) 。 例如，若要指定加号，请使用 "{+}"。 若要指定大括号字符，请使用 "{ {} " 和 " {} }"。 方括号 ( [] ) 没有任何特殊含义 <xref:System.Windows.Forms.SendKeys> ，但必须将它们括在大括号中。 在其他应用程序中，括号确实有一个特殊含义，当动态数据交换 (DDE) 发生时，这可能很重要。  
  
> [!CAUTION]
>  如果你的应用程序旨在用于全球各种键盘，使用 <xref:System.Windows.Forms.SendKeys.Send%2A> 可能会产生不可预知的结果，应当避免。  
  
 若要指定按下某个键时未显示的字符（如 ENTER 或 TAB）以及表示操作而不是字符的键，请使用下表中的代码。  
  
|密钥|代码|  
|---------|----------|  
|Backspace|{BACKSPACE}、{BS.1770} 或 {BKSP}|  
|BREAK|分|  
|Caps Lock|{CAPSLOCK}|  
|DEL 或 DELETE|{DELETE} 或 {DEL}|  
|向下键|分解|  
|End|{END}|  
|Enter|{ENTER} 或 ~|  
|Esc|ECS|  
|HELP|{HELP}|  
|Home|{HOME}|  
|INS 或 INSERT|{INSERT} 或 {INS}|  
|向左键|{LEFT}|  
|Num Lock|{NUMLOCK}|  
|Page Down|{PGDN}|  
|Page Up|PGUP|  
|打印屏幕|{PRTSC} (保留以供将来使用) |  
|向右键|{RIGHT}|  
|Scroll Lock|{SCROLLLOCK}|  
|Tab|{TAB}|  
|向上键|UP|  
|F1|按|  
|F2|组合键|  
|F3|键|  
|F4|F4|  
|F5|F5|  
|F6|组合键|  
|F7|F7|  
|F8|组合键|  
|F9|时更新|  
|F10|F10|  
|F11|F11|  
|F12|F12|  
|F13|F13|  
|F14|F14|  
|F15|F15|  
|F16|F16|  
|小键盘加|把|  
|小键盘减|{SUBTRACT}|  
|小键盘乘|{MULTIPLY}|  
|小键盘除|拆分|  
  
 若要指定与 SHIFT、CTRL 和 ALT 键的任意组合组合的键，请在键代码前面加上一个或多个以下代码。  
  
|密钥|代码|  
|---------|----------|  
|SHIFT|+|  
|Ctrl|^|  
|ALT|%|  
  
 若要指定在按多个其他键的同时按下 SHIFT、CTRL 和 ALT 的任意组合，请将这些键的代码括在括号中。 例如，若要指定在按 E 和 C 的同时按住 SHIFT，请使用 "+ (EC) "。 若要指定在按 E 的同时按住 SHIFT，请在不带 SHIFT 的情况下使用 C，并使用 "+ EC"。  
  
 若要指定重复键，请使用格式 {key number}。 必须在键和数字之间添加一个空格。 例如，{LEFT 42} 表示按左箭头键42次;{h 10} 表示按 H 10 次。  
  
> [!NOTE]
>  由于没有用于激活其他应用程序的托管方法，您可以在当前应用程序中使用此类，也可以使用本机 Windows 方法（如 `FindWindow` 和 `SetForegroundWindow` ）强制集中于其他应用程序。  
  
> [!NOTE]
>  <xref:System.Windows.Forms.SendKeys> 类已更新为 .NET Framework 3.0，从而可用于在 Windows Vista 上运行的应用程序。 Windows Vista 增强的安全性（称为用户帐户控件或 UAC）可避免以前的实现按预期运行。  
>   
>  <xref:System.Windows.Forms.SendKeys> 类容易遭受某些开发人员不得不解决的计时问题。 更新后的实现仍然容易遇到计时问题，但速度稍微快一些，并且可能需要更改解决方法。 <xref:System.Windows.Forms.SendKeys> 类先尝试使用以前的实现，失败后再使用新的实现。 因此， <xref:System.Windows.Forms.SendKeys> 类在不同操作系统上的运行方式可能不同。 此外，当 <xref:System.Windows.Forms.SendKeys> 类使用新的实现时， <xref:System.Windows.Forms.SendKeys.SendWait%2A> 方法不会等到消息被处理后才将其发送至其他进程。  
>   
>  如果如论使用何种操作系统，你的应用程序均依赖于一致的行为，则可通过将以下应用程序设置添加至 app.config 文件强制执行 <xref:System.Windows.Forms.SendKeys> 类以使用新的实现。  
>   
>  `<appSettings>`  
>   
>  `<add key="SendKeys" value="SendInput"/>`  
>   
>  `</appSettings>`  
>   
>  若要强制执行 <xref:System.Windows.Forms.SendKeys> 类以使用以前的实现，请改用 `"JournalHook"` 值。  
  
   
  
## Examples  
 下面的代码示例演示如何使用 <xref:System.Windows.Forms.SendKeys.Send%2A> 方法。若要运行该示例，请将以下代码粘贴到一个名为 Form1 的窗体中，其中包含一个名为 "Button1" 请确保单击事件与其在此示例中的事件处理方法相关联。 按钮控件的 <xref:System.Windows.Forms.Control.TabIndex%2A> 属性应设置为0。 当示例运行时，双击窗体以触发按钮的 click 事件。  
  
 [!code-cpp[System.Windows.Forms.SendKeys#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.SendKeys/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.SendKeys#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.SendKeys/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.SendKeys#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.SendKeys/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">没有可向其发送击键的活动应用程序。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="keys" /> 并不表示有效击键</exception>
      </Docs>
    </Member>
    <Member MemberName="SendWait">
      <MemberSignature Language="C#" Value="public static void SendWait (string keys);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SendWait(string keys) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.SendKeys.SendWait(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SendWait (keys As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SendWait(System::String ^ keys);" />
      <MemberSignature Language="F#" Value="static member SendWait : string -&gt; unit" Usage="System.Windows.Forms.SendKeys.SendWait keys" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keys" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="keys">要发送的击键字符串。</param>
        <summary>向活动应用程序发送给定的键，然后等待消息被处理。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 用于向 <xref:System.Windows.Forms.SendKeys.SendWait%2A> 活动应用程序发送击键或键组合，并等待处理击键消息。 您可以使用此方法将键击发送到应用程序，并等待由击键启动的任何进程完成。 如果其他应用程序必须先完成，然后你的应用程序才能继续，这一点可能很重要。  
  
> [!NOTE]
>  由于没有用于激活其他应用程序的托管方法，您可以在当前应用程序中使用此类，也可以使用本机 Windows 方法（如 `FindWindow` 和 `SetForegroundWindow` ）强制集中于其他应用程序。  
  
> [!NOTE]
>  <xref:System.Windows.Forms.SendKeys> 类已更新为 .NET Framework 3.0，从而可用于在 Windows Vista 上运行的应用程序。 Windows Vista 增强的安全性（称为用户帐户控件或 UAC）可避免以前的实现按预期运行。  
>   
>  <xref:System.Windows.Forms.SendKeys> 类容易遭受某些开发人员不得不解决的计时问题。 更新后的实现仍然容易遇到计时问题，但速度稍微快一些，并且可能需要更改解决方法。 <xref:System.Windows.Forms.SendKeys> 类先尝试使用以前的实现，失败后再使用新的实现。 因此， <xref:System.Windows.Forms.SendKeys> 类在不同操作系统上的运行方式可能不同。 此外，当 <xref:System.Windows.Forms.SendKeys> 类使用新的实现时， <xref:System.Windows.Forms.SendKeys.SendWait%2A> 方法不会等到消息被处理后才将其发送至其他进程。  
>   
>  如果如论使用何种操作系统，你的应用程序均依赖于一致的行为，则可通过将以下应用程序设置添加至 app.config 文件强制执行 <xref:System.Windows.Forms.SendKeys> 类以使用新的实现。  
>   
>  `<appSettings>`  
>   
>  `<add key="SendKeys" value="SendInput"/>`  
>   
>  `</appSettings>`  
>   
>  若要强制执行 <xref:System.Windows.Forms.SendKeys> 类以使用以前的实现，请改用 `"JournalHook"` 值。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
