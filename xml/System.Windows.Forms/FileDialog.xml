<Type Name="FileDialog" FullName="System.Windows.Forms.FileDialog">
  <Metadata><Meta Name="ms.openlocfilehash" Value="7562d1da605a0979d15a031ba1a7f81836191917" /><Meta Name="ms.sourcegitcommit" Value="11d168140aa8fade0768c2a9dde3e3bcacfdfb7d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="05/27/2020" /><Meta Name="ms.locfileid" Value="83944459" /></Metadata><TypeSignature Language="C#" Value="public abstract class FileDialog : System.Windows.Forms.CommonDialog" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit FileDialog extends System.Windows.Forms.CommonDialog" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.FileDialog" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class FileDialog&#xA;Inherits CommonDialog" />
  <TypeSignature Language="C++ CLI" Value="public ref class FileDialog abstract : System::Windows::Forms::CommonDialog" />
  <TypeSignature Language="F#" Value="type FileDialog = class&#xA;    inherit CommonDialog" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Forms.CommonDialog</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("FileOk")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("FileName")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>显示一个用户可从中选择文件的对话框窗口。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.FileDialog> 是包含 <xref:System.Windows.Forms.OpenFileDialog> 和 <xref:System.Windows.Forms.SaveFileDialog> 类的常见行为的抽象类。 它不应直接使用，但包含这两个类的常见行为。 不能创建 <xref:System.Windows.Forms.FileDialog>的实例。 尽管类是公开的，但您不能从它继承，因为它包含内部抽象方法。 若要创建对话框以选择或保存文件，请使用 <xref:System.Windows.Forms.OpenFileDialog> 或 <xref:System.Windows.Forms.SaveFileDialog>。  
  
 <xref:System.Windows.Forms.FileDialog> 是模式对话框;因此，在显示时，它会阻止应用程序的其余部分，直到用户选择了文件。 当对话框模式显示时，除了对话框上的对象之外，不会出现任何输入（键盘或鼠标单击）。 在输入调用程序之前，程序必须隐藏或关闭对话框（通常是为了响应某些用户操作）。  
  
> [!CAUTION]
>  当使用派生自 <xref:System.Windows.Forms.FileDialog>的类（如 <xref:System.Windows.Forms.OpenFileDialog> 和 <xref:System.Windows.Forms.SaveFileDialog>）时，请避免使用包含绝对路径的字符串。 相反，请使用下表中所述的一种或多种方法动态获取路径。  
  
 如果要使用户能够选择文件夹而不是文件，请使用 <xref:System.Windows.Forms.FolderBrowserDialog>。  
  
 根据应用程序的类型、如何存储与应用程序相关联的数据，以及访问文件系统的原因，您可以使用多种方法来创建目录路径。 下表显示了用于动态创建路径的方法。  
  
|路径或程序类别|要使用的类和成员|  
|------------------------------|------------------------------|  
|标准 Windows 路径，如程序文件、MyDocuments、桌面等|<xref:System.Environment?displayProperty=nameWithType> 类是使用 <xref:System.Environment.SpecialFolder> 枚举值之一，通过其静态方法（如 <xref:System.Environment.SystemDirectory%2A>或通过 <xref:System.Environment.GetFolderPath%2A> 方法）最完整的源。|  
|与当前应用程序相关的路径|<xref:System.Windows.Forms.Application> 类具有静态成员，用于获取特定路径，如 <xref:System.Windows.Forms.Application.StartupPath%2A>、<xref:System.Windows.Forms.Application.ExecutablePath%2A>、<xref:System.Windows.Forms.Application.LocalUserAppDataPath%2A>和 <xref:System.Windows.Forms.Application.CommonAppDataPath%2A>。<br /><br /> <xref:System.IO.Path?displayProperty=nameWithType> 的 <xref:System.IO.Path.GetTempPath%2A> 方法返回临时文件夹的路径。<br /><br /> <xref:System.IO.Directory?displayProperty=nameWithType> 类的 <xref:System.IO.Directory.GetCurrentDirectory%2A> 方法返回应用程序的当前执行目录。<br /><br /> <xref:System.IO.DriveInfo> 类的 <xref:System.IO.DriveInfo.RootDirectory%2A> 属性表示指定驱动器的根目录。|  
|存储为应用程序设置的路径|访问从 <xref:System.Configuration.ApplicationSettingsBase>派生的包装器类的相应应用程序设置属性。 有关详细信息，请参阅[Windows 窗体的应用程序设置](/dotnet/framework/winforms/advanced/application-settings-for-windows-forms)。|  
|注册表存储|某些应用程序将目录信息存储在注册表中。 <xref:System.Windows.Forms.Application> 类具有解析为 <xref:Microsoft.Win32.RegistryKey> 值的 <xref:System.Windows.Forms.Application.CommonAppDataPath%2A> 和 <xref:System.Windows.Forms.Application.LocalUserAppDataPath%2A> 属性。|  
|ClickOnce 应用程序|对于 ClickOnce 应用程序，请使用 <xref:System.Windows.Forms.Application> 类成员，如 <xref:System.Windows.Forms.Application.UserAppDataPath%2A>，这将返回指向 ClickOnce 数据目录的指针。 有关详细信息，请参阅[在 ClickOnce 应用程序中访问本地数据和远程数据](/visualstudio/deployment/accessing-local-and-remote-data-in-clickonce-applications)。|  
|国际应用程序|对于国际化应用程序，请使用 <xref:System.Resources.ResourceReader?displayProperty=nameWithType> 类从应用程序中的字符串资源检索相对路径部分。 有关全球化和本地化的详细信息，请参阅主题[全球化和本地化](/dotnet/standard/globalization-localization/)。|  
  
 请注意，可以使用一个或多个所述的技术来构建完整的路径。 例如，<xref:System.Environment.GetFolderPath%2A> 方法可用于获取 MyDocuments 文件夹的路径，则可使用应用程序设置来添加相对子目录部分。  
  
 <xref:System.IO.Path?displayProperty=nameWithType> 类包含静态成员，以帮助操作绝对路径和相对路径字符串，而 <xref:System.IO.File?displayProperty=nameWithType> 和 <xref:System.IO.Directory?displayProperty=nameWithType> 类的静态成员分别操作文件和目录。  
  
> [!IMPORTANT]
>  如果你的应用程序的用户更改了 <xref:System.Windows.Forms.FileDialog>中的文件夹，则你的应用程序的当前工作目录将设置为 <xref:System.Windows.Forms.FileDialog>中指定的位置。 若要防止出现这种情况，请将 <xref:System.Windows.Forms.FileDialog.RestoreDirectory%2A> 属性设置为 `true`。  
  
   
  
## Examples  
 下面的代码示例使用 <xref:System.Windows.Forms.FileDialog> 的 <xref:System.Windows.Forms.OpenFileDialog> 实现，并说明了如何创建、设置属性和显示对话框。 该示例使用 <xref:System.Windows.Forms.CommonDialog.ShowDialog%2A> 方法来显示对话框并返回 <xref:System.Windows.Forms.DialogResult>。 该示例要求在窗体上放置了一个 <xref:System.Windows.Forms.Button>，并向其添加了 <xref:System.IO> 命名空间。  
  
 [!code-cpp[Classic OpenFileDialog Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic OpenFileDialog Example/CPP/source.cpp#1)]
 [!code-csharp[Classic OpenFileDialog Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic OpenFileDialog Example/CS/source.cs#1)]
 [!code-vb[Classic OpenFileDialog Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic OpenFileDialog Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Forms.CommonDialog" />
    <altmember cref="T:System.Windows.Forms.OpenFileDialog" />
    <altmember cref="T:System.Windows.Forms.SaveFileDialog" />
    <altmember cref="T:System.Windows.Forms.FolderBrowserDialog" />
    <altmember cref="T:System.IO.Path" />
    <altmember cref="T:System.IO.File" />
    <altmember cref="T:System.IO.Directory" />
    <altmember cref="T:System.Environment" />
    <altmember cref="T:System.Windows.Forms.Application" />
    <altmember cref="T:Microsoft.Win32.Registry" />
    <altmember cref="T:System.Resources.ResourceReader" />
  </Docs>
  <Members>
    <Member MemberName="AddExtension">
      <MemberSignature Language="C#" Value="public bool AddExtension { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AddExtension" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.FileDialog.AddExtension" />
      <MemberSignature Language="VB.NET" Value="Public Property AddExtension As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AddExtension { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AddExtension : bool with get, set" Usage="System.Windows.Forms.FileDialog.AddExtension" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示如果用户省略扩展名，对话框是否自动在文件名中添加扩展名。</summary>
        <value>当用户省略了扩展名时，如果对话框在文件名中添加扩展名，值为 <see langword="true" />；反之，值为 <see langword="false" />。 默认值是 <see langword="true" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 添加到文件名的扩展名取决于当前选定的文件筛选器和 <xref:System.Windows.Forms.FileDialog.CheckFileExists%2A> 属性的值。  
  
 如果 `true`<xref:System.Windows.Forms.FileDialog.CheckFileExists%2A> 属性，则对话框将添加当前文件筛选器中与现有文件匹配的第一个扩展。 如果没有文件与当前文件筛选器匹配，则对话框将添加在 <xref:System.Windows.Forms.FileDialog.DefaultExt%2A> 属性中指定的扩展。  
  
 如果 `false`<xref:System.Windows.Forms.FileDialog.CheckFileExists%2A> 属性，则对话框将从当前文件筛选器添加第一个有效的文件扩展名。 如果当前文件筛选器不包含有效的文件扩展名，则对话框将添加在 <xref:System.Windows.Forms.FileDialog.DefaultExt%2A> 属性中指定的扩展。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.FileDialog.Filter" />
        <altmember cref="P:System.Windows.Forms.FileDialog.FilterIndex" />
      </Docs>
    </Member>
    <Member MemberName="AutoUpgradeEnabled">
      <MemberSignature Language="C#" Value="public bool AutoUpgradeEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoUpgradeEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.FileDialog.AutoUpgradeEnabled" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoUpgradeEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AutoUpgradeEnabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AutoUpgradeEnabled : bool with get, set" Usage="System.Windows.Forms.FileDialog.AutoUpgradeEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0;dotnet-plat-ext-5.0">
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示此 <see cref="T:System.Windows.Forms.FileDialog" /> 实例在 [!INCLUDE[wiprlhext](~/includes/wiprlhext-md.md)] 上运行时是否应自动升级外观和行为。</summary>
        <value>如果此 <see cref="T:System.Windows.Forms.FileDialog" /> 实例在 [!INCLUDE[wiprlhext](~/includes/wiprlhext-md.md)] 上运行时应自动升级外观和行为，则为 <see langword="true" />；否则为 <see langword="false" />。 默认为 <see langword="true" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果 `false`此属性，则 <xref:System.Windows.Forms.FileDialog> 类将在 [!INCLUDE[wiprlhext](~/includes/wiprlhext-md.md)]上具有 [!INCLUDE[winxp](~/includes/winxp-md.md)]样式的外观和行为。  
  
 在 [!INCLUDE[winxp](~/includes/winxp-md.md)]上，此属性不会有任何影响。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckFileExists">
      <MemberSignature Language="C#" Value="public virtual bool CheckFileExists { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CheckFileExists" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.FileDialog.CheckFileExists" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property CheckFileExists As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CheckFileExists { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.CheckFileExists : bool with get, set" Usage="System.Windows.Forms.FileDialog.CheckFileExists" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示如果用户指定不存在的文件名，对话框是否显示警告。</summary>
        <value>当用户指定不存在的文件名时，如果对话框显示警告，值为 <see langword="true" />；反之，值为 <see langword="false" />。 默认值是 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 默认值为继承的 <xref:System.Windows.Forms.SaveFileDialog>的继承 <xref:System.Windows.Forms.OpenFileDialog> 和 `false` `true`。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.FileDialog.CheckPathExists" />
      </Docs>
    </Member>
    <Member MemberName="CheckPathExists">
      <MemberSignature Language="C#" Value="public bool CheckPathExists { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CheckPathExists" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.FileDialog.CheckPathExists" />
      <MemberSignature Language="VB.NET" Value="Public Property CheckPathExists As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CheckPathExists { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.CheckPathExists : bool with get, set" Usage="System.Windows.Forms.FileDialog.CheckPathExists" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示如果用户指定不存在的路径，对话框是否显示警告。</summary>
        <value>当用户指定不存在的路径时，如果对话框显示警告，值为 <see langword="true" />；反之，值为 <see langword="false" />。 默认值是 <see langword="true" />。</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Windows.Forms.FileDialog.CheckFileExists" />
      </Docs>
    </Member>
    <Member MemberName="ClientGuid">
      <MemberSignature Language="C#" Value="public Guid? ClientGuid { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;valuetype System.Guid&gt; ClientGuid" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.FileDialog.ClientGuid" />
      <MemberSignature Language="VB.NET" Value="Public Property ClientGuid As Nullable(Of Guid)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Nullable&lt;Guid&gt; ClientGuid { Nullable&lt;Guid&gt; get(); void set(Nullable&lt;Guid&gt; value); };" />
      <MemberSignature Language="F#" Value="member this.ClientGuid : Nullable&lt;Guid&gt; with get, set" Usage="System.Windows.Forms.FileDialog.ClientGuid" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0">
          <AttributeName>System.ComponentModel.Localizable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Guid&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CustomPlaces">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.FileDialogCustomPlacesCollection CustomPlaces { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.FileDialogCustomPlacesCollection CustomPlaces" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.FileDialog.CustomPlaces" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CustomPlaces As FileDialogCustomPlacesCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::FileDialogCustomPlacesCollection ^ CustomPlaces { System::Windows::Forms::FileDialogCustomPlacesCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CustomPlaces : System.Windows.Forms.FileDialogCustomPlacesCollection" Usage="System.Windows.Forms.FileDialog.CustomPlaces" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0;dotnet-plat-ext-5.0">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0;dotnet-plat-ext-5.0">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.FileDialogCustomPlacesCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取此 <see cref="T:System.Windows.Forms.FileDialog" /> 实例的自定义空间的集合。</summary>
        <value>此 <see cref="T:System.Windows.Forms.FileDialog" /> 实例的自定义空间的集合。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在 [!INCLUDE[winxp](~/includes/winxp-md.md)]上，此属性不会有任何影响。  
  
   
  
## Examples  
 下面的代码示例演示如何使用 <xref:System.Windows.Forms.FileDialog.CustomPlaces%2A> 集合。 若要运行此示例，请将以下代码粘贴到 Windows 窗体中，并从窗体的构造函数或 <xref:System.Windows.Forms.Form.Load> 事件处理方法调用 `InitializeDialogAndButton`。  
  
 [!code-csharp[System.Windows.Forms.FileDialogCommonPlaces#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.FileDialogCommonPlaces/CS/Form1.cs#1)]
 [!code-vb[System.Windows.Forms.FileDialogCommonPlaces#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.FileDialogCommonPlaces/VB/Form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultExt">
      <MemberSignature Language="C#" Value="public string DefaultExt { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DefaultExt" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.FileDialog.DefaultExt" />
      <MemberSignature Language="VB.NET" Value="Public Property DefaultExt As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DefaultExt { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DefaultExt : string with get, set" Usage="System.Windows.Forms.FileDialog.DefaultExt" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置默认文件扩展名。</summary>
        <value>默认的文件扩展名。 返回的字符串不包含句点。 默认值为空字符串 ("")。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当应用程序的用户指定一个不带扩展名的文件名时，<xref:System.Windows.Forms.FileDialog> 会将扩展名附加到文件名。 使用的扩展由 <xref:System.Windows.Forms.FileDialog.Filter%2A> 和 <xref:System.Windows.Forms.FileDialog.DefaultExt%2A> 属性确定。 如果在 <xref:System.Windows.Forms.FileDialog> 中选择了筛选器，并且筛选器指定了扩展，则使用该扩展。 如果所选筛选器使用通配符代替扩展，则使用 <xref:System.Windows.Forms.FileDialog.DefaultExt%2A> 属性中指定的扩展。  
  
   
  
## Examples  
 下面的代码示例演示如何将 <xref:System.Windows.Forms.RichTextBox.SaveFile%2A?displayProperty=nameWithType> 和 <xref:System.Windows.Forms.RichTextBox.LoadFile%2A?displayProperty=nameWithType> 方法与流一起使用。 它还演示了如何使用 <xref:System.Windows.Forms.FileDialog.FileName%2A>、<xref:System.Windows.Forms.FileDialog.DefaultExt%2A>、<xref:System.Windows.Forms.SaveFileDialog.CreatePrompt%2A?displayProperty=nameWithType>和 <xref:System.Windows.Forms.SaveFileDialog.OverwritePrompt%2A?displayProperty=nameWithType> 成员。  
  
 这是一个完整的示例，可以在将其复制到项目时运行。  
  
 [!code-cpp[System.Windows.Forms.RichTextBoxSaveFile#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.RichTextBoxSaveFile/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.RichTextBoxSaveFile#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.RichTextBoxSaveFile/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.RichTextBoxSaveFile#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.RichTextBoxSaveFile/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DereferenceLinks">
      <MemberSignature Language="C#" Value="public bool DereferenceLinks { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool DereferenceLinks" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.FileDialog.DereferenceLinks" />
      <MemberSignature Language="VB.NET" Value="Public Property DereferenceLinks As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool DereferenceLinks { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.DereferenceLinks : bool with get, set" Usage="System.Windows.Forms.FileDialog.DereferenceLinks" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示对话框是否返回快捷方式引用的文件的位置，或者是否返回快捷方式 (.lnk) 的位置。</summary>
        <value>如果对话框返回快捷方式引用的文件位置，值为 <see langword="true" />；反之，值为 <see langword="false" />。 默认值是 <see langword="true" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EventFileOk">
      <MemberSignature Language="C#" Value="protected static readonly object EventFileOk;" />
      <MemberSignature Language="ILAsm" Value=".field family static initonly object EventFileOk" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Forms.FileDialog.EventFileOk" />
      <MemberSignature Language="VB.NET" Value="Protected Shared ReadOnly EventFileOk As Object " />
      <MemberSignature Language="C++ CLI" Value="protected: static initonly System::Object ^ EventFileOk;" />
      <MemberSignature Language="F#" Value=" staticval mutable EventFileOk : obj" Usage="System.Windows.Forms.FileDialog.EventFileOk" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>具有 <see cref="E:System.Windows.Forms.FileDialog.FileOk" /> 事件。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FileName">
      <MemberSignature Language="C#" Value="public string FileName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FileName" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.FileDialog.FileName" />
      <MemberSignature Language="VB.NET" Value="Public Property FileName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ FileName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.FileName : string with get, set" Usage="System.Windows.Forms.FileDialog.FileName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个包含在文件对话框中选定的文件名的字符串。</summary>
        <value>对话框中选择的文件名。 默认值为空字符串 ("")。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 文件名包括文件路径和扩展名。 如果未选择任何文件，则此方法返回一个空字符串（""）。  
  
 当从 <xref:System.Windows.Forms.SaveFileDialog> 类中使用时，此属性表示要保存的文件;当从 <xref:System.Windows.Forms.OpenFileDialog> 类中使用时，它表示正在打开的文件。  
  
 此属性只能是选定文件的名称。 如果要返回包含多选对话框中所有选定文件的名称的数组，请使用 <xref:System.Windows.Forms.FileDialog.FileNames%2A>。  
  
   
  
## Examples  
 下面的代码示例演示如何将 <xref:System.Windows.Forms.RichTextBox.SaveFile%2A?displayProperty=nameWithType> 和 <xref:System.Windows.Forms.RichTextBox.LoadFile%2A?displayProperty=nameWithType> 方法与流一起使用。 它还演示了如何使用 <xref:System.Windows.Forms.FileDialog.FileName%2A>、<xref:System.Windows.Forms.FileDialog.DefaultExt%2A>、<xref:System.Windows.Forms.SaveFileDialog.CreatePrompt%2A?displayProperty=nameWithType>和 <xref:System.Windows.Forms.SaveFileDialog.OverwritePrompt%2A?displayProperty=nameWithType> 成员。  
  
 这是一个完整的示例，可以在将其复制到项目时运行。  
  
 [!code-cpp[System.Windows.Forms.RichTextBoxSaveFile#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.RichTextBoxSaveFile/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.RichTextBoxSaveFile#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.RichTextBoxSaveFile/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.RichTextBoxSaveFile#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.RichTextBoxSaveFile/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.FileDialog.FileNames" />
        <altmember cref="T:System.Windows.Forms.SaveFileDialog" />
        <altmember cref="T:System.Windows.Forms.OpenFileDialog" />
      </Docs>
    </Member>
    <Member MemberName="FileNames">
      <MemberSignature Language="C#" Value="public string[] FileNames { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] FileNames" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.FileDialog.FileNames" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FileNames As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::String ^&gt; ^ FileNames { cli::array &lt;System::String ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.FileNames : string[]" Usage="System.Windows.Forms.FileDialog.FileNames" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取对话框中所有选定文件的文件名。</summary>
        <value>包含对话框中所有选定文件的文件名的 <see cref="T:System.String" /> 类型数组。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 每个文件名同时包含文件路径和扩展名。 如果未选择任何文件，则此方法返回一个空数组。  
  
   
  
## Examples  
 下面的代码示例允许用户选择多个图像，并在窗体上 <xref:System.Windows.Forms.PictureBox> 控件中显示这些图像。 它演示如何初始化 <xref:System.Windows.Forms.OpenFileDialog>、设置 <xref:System.Windows.Forms.FileDialog.Title%2A> 和 <xref:System.Windows.Forms.FileDialog.Filter%2A> 属性，以及允许用户通过将 <xref:System.Windows.Forms.OpenFileDialog.Multiselect%2A> 属性设置为 true 来选择多个文件。 此代码示例假定您的窗体已具有一个名为 `openFileDialog1`的 <xref:System.Windows.Forms.OpenFileDialog> 控件、一个名为 `SelectFileButton`<xref:System.Windows.Forms.Button> 和一个名为 <xref:System.Windows.Forms.FlowLayoutPanel> 的 `flowLayoutPanel1`。  
  
 [!code-csharp[System.Windows.Forms.OpenFileDialog.MultiSelect#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.OpenFileDialog.MultiSelect/CS/Form1.cs#1)]
 [!code-vb[System.Windows.Forms.OpenFileDialog.MultiSelect#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.OpenFileDialog.MultiSelect/VB/Form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.FileDialog.FileName" />
      </Docs>
    </Member>
    <Member MemberName="FileOk">
      <MemberSignature Language="C#" Value="public event System.ComponentModel.CancelEventHandler FileOk;" />
      <MemberSignature Language="ILAsm" Value=".event class System.ComponentModel.CancelEventHandler FileOk" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.FileDialog.FileOk" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event FileOk As CancelEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::ComponentModel::CancelEventHandler ^ FileOk;" />
      <MemberSignature Language="F#" Value="member this.FileOk : System.ComponentModel.CancelEventHandler " Usage="member this.FileOk : System.ComponentModel.CancelEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.CancelEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当用户单击文件对话框中的“打开”或 “保存”按钮时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关处理事件的信息，请参阅[处理和引发事件](/dotnet/standard/events/)。  
  
   
  
## Examples  
 下面的代码示例演示如何使用 <xref:System.Windows.Forms.FileDialog.FileNames%2A> 属性，处理 <xref:System.Windows.Forms.FileDialog.FileOk> 事件并使用 <xref:System.Windows.Forms.Application.DoEvents%2A?displayProperty=nameWithType> 方法。 当示例运行时，用户可以从 <xref:System.Windows.Forms.OpenFileDialog> 对象中选择图形文件。 选择的文件将显示在窗体中。 <xref:System.Windows.Forms.Application.DoEvents%2A?displayProperty=nameWithType> 方法强制为打开的每个图形文件重新绘制窗体。 若要运行此示例，请将以下代码粘贴到包含名为 `PictureBox1`的 <xref:System.Windows.Forms.PictureBox> 的窗体中，名为 `OpenFileDialog1`<xref:System.Windows.Forms.OpenFileDialog>，并将名为 <xref:System.Windows.Forms.Button>。`fileButton` 从窗体的构造函数或 `Load` 方法调用 `InitializePictureBox` 和 `InitializeOpenFileDialog` 方法。 当示例运行时，单击按钮即可显示该对话框。  
  
 [!code-cpp[System.Windows.Forms.FileDialog#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.FileDialog/CPP/filedialogform.cpp#1)]
 [!code-csharp[System.Windows.Forms.FileDialog#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.FileDialog/CS/filedialogform.cs#1)]
 [!code-vb[System.Windows.Forms.FileDialog#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.FileDialog/VB/filedialogform.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.FileDialog.OnFileOk(System.ComponentModel.CancelEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="Filter">
      <MemberSignature Language="C#" Value="public string Filter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Filter" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.FileDialog.Filter" />
      <MemberSignature Language="VB.NET" Value="Public Property Filter As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Filter { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Filter : string with get, set" Usage="System.Windows.Forms.FileDialog.Filter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置当前文件名筛选器字符串，该字符串决定对话框的“另存为文件类型”或“文件类型”框中出现的选择内容。</summary>
        <value>对话框中可用的文件筛选选项。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 对于每个筛选选项，筛选器字符串都包含筛选器的说明，后跟竖线（&#124;）和筛选器模式。 不同筛选选项的字符串用竖线分隔。  
  
 下面是筛选器字符串的示例：  
  
 `Text files (*.txt)|*.txt|All files (*.*)|*.*`  
  
 可以通过用分号分隔文件类型将多个筛选模式添加到筛选器，例如：  
  
 `Image Files(*.BMP;*.JPG;*.GIF)|*.BMP;*.JPG;*.GIF|All files (*.*)|*.*`  
  
 使用 "<xref:System.Windows.Forms.FileDialog.FilterIndex%2A>" 属性可设置首先向用户显示的筛选选项。  
  
   
  
## Examples  
 下面的代码示例使用 <xref:System.Windows.Forms.FileDialog> 的 <xref:System.Windows.Forms.OpenFileDialog> 实现，并说明了如何创建、设置属性和显示对话框。 该示例使用 "<xref:System.Windows.Forms.FileDialog.Filter%2A>" 和 "<xref:System.Windows.Forms.FileDialog.FilterIndex%2A>" 属性为用户提供筛选器列表。 该示例要求在窗体上放置了一个 <xref:System.Windows.Forms.Button>，并向其添加了 <xref:System.IO> 命名空间。  
  
 [!code-cpp[Classic OpenFileDialog Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic OpenFileDialog Example/CPP/source.cpp#1)]
 [!code-csharp[Classic OpenFileDialog Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic OpenFileDialog Example/CS/source.cs#1)]
 [!code-vb[Classic OpenFileDialog Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic OpenFileDialog Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Filter" /> 格式无效。</exception>
        <altmember cref="P:System.Windows.Forms.FileDialog.CheckFileExists" />
        <altmember cref="P:System.Windows.Forms.FileDialog.FilterIndex" />
      </Docs>
    </Member>
    <Member MemberName="FilterIndex">
      <MemberSignature Language="C#" Value="public int FilterIndex { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 FilterIndex" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.FileDialog.FilterIndex" />
      <MemberSignature Language="VB.NET" Value="Public Property FilterIndex As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int FilterIndex { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.FilterIndex : int with get, set" Usage="System.Windows.Forms.FileDialog.FilterIndex" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(1)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置文件对话框中当前选定筛选器的索引。</summary>
        <value>包含文件对话框中当前选定筛选器的索引的值。 默认值为 1。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用 "<xref:System.Windows.Forms.FileDialog.FilterIndex%2A>" 属性可设置首先向用户显示的筛选选项。 你还可以在显示文件对话框后使用 <xref:System.Windows.Forms.FileDialog.FilterIndex%2A> 的值，以根据所选的筛选器执行特殊的文件操作。  
  
> [!NOTE]
>  第一个筛选器条目的索引值为1。  
  
   
  
## Examples  
 下面的代码示例使用 <xref:System.Windows.Forms.FileDialog> 的 <xref:System.Windows.Forms.OpenFileDialog> 实现，并说明了如何创建、设置属性和显示对话框。 该示例使用 "<xref:System.Windows.Forms.FileDialog.Filter%2A>" 和 "<xref:System.Windows.Forms.FileDialog.FilterIndex%2A>" 属性为用户提供筛选器列表。 该示例要求在窗体上放置了一个 <xref:System.Windows.Forms.Button>，并向其添加了 <xref:System.IO> 命名空间。  
  
 [!code-cpp[Classic OpenFileDialog Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic OpenFileDialog Example/CPP/source.cpp#1)]
 [!code-csharp[Classic OpenFileDialog Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic OpenFileDialog Example/CS/source.cs#1)]
 [!code-vb[Classic OpenFileDialog Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic OpenFileDialog Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.FileDialog.CheckFileExists" />
        <altmember cref="P:System.Windows.Forms.FileDialog.Filter" />
      </Docs>
    </Member>
    <Member MemberName="HookProc">
      <MemberSignature Language="C#" Value="protected override IntPtr HookProc (IntPtr hWnd, int msg, IntPtr wparam, IntPtr lparam);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance native int HookProc(native int hWnd, int32 msg, native int wparam, native int lparam) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.FileDialog.HookProc(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function HookProc (hWnd As IntPtr, msg As Integer, wparam As IntPtr, lparam As IntPtr) As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override IntPtr HookProc(IntPtr hWnd, int msg, IntPtr wparam, IntPtr lparam);" />
      <MemberSignature Language="F#" Value="override this.HookProc : nativeint * int * nativeint * nativeint -&gt; nativeint" Usage="fileDialog.HookProc (hWnd, msg, wparam, lparam)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hWnd" Type="System.IntPtr" />
        <Parameter Name="msg" Type="System.Int32" />
        <Parameter Name="wparam" Type="System.IntPtr" />
        <Parameter Name="lparam" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="hWnd">对话框窗口的句柄。</param>
        <param name="msg">对话框接收的消息。</param>
        <param name="wparam">关于消息的附加信息。</param>
        <param name="lparam">关于消息的附加信息。</param>
        <summary>定义要重写的通用对话框挂钩过程，以便向文件对话框添加特定功能。</summary>
        <returns>如果默认对话框过程处理此消息，则返回零；如果默认对话框过程忽略此消息，则返回非零值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 挂钩过程允许用户出于调试或增强功能的目的，将其他例程连接或插入到例程或应用程序中。  
  
 默认情况下，挂钩过程在屏幕上将对话框显示为响应 WM_INITDIALOG 消息。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>当在派生类中重写 <see cref="M:System.Windows.Forms.FileDialog.HookProc(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)" /> 时，请确保调用基类的 <see cref="M:System.Windows.Forms.CommonDialog.HookProc(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)" /> 方法。</para></block>
      </Docs>
    </Member>
    <Member MemberName="InitialDirectory">
      <MemberSignature Language="C#" Value="public string InitialDirectory { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string InitialDirectory" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.FileDialog.InitialDirectory" />
      <MemberSignature Language="VB.NET" Value="Public Property InitialDirectory As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ InitialDirectory { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.InitialDirectory : string with get, set" Usage="System.Windows.Forms.FileDialog.InitialDirectory" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置文件对话框显示的初始目录。</summary>
        <value>文件对话框中显示的初始目录。 默认值为空字符串("")。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 通常使用以下源之一设置 <xref:System.Windows.Forms.FileDialog.InitialDirectory%2A> 属性：  
  
-   以前在程序中使用的路径，可能会从最后一个目录或文件操作中保留。  
  
-   在应用程序中从永久性源（如应用程序设置、<xref:Microsoft.Win32.Registry> 或字符串资源）读取的路径。  
  
-   标准 Windows 系统和用户路径（如程序文件、MyDocuments、MyMusic 等）（可使用 <xref:System.Environment.GetFolderPath%2A> 方法获取）  
  
-   与当前应用程序相关的路径，如其启动目录（可以使用 <xref:System.Windows.Forms.Application> 对象上的属性获取）。  
  
 有关创建动态路径的详细信息，请参阅 <xref:System.Windows.Forms.FileDialog> 类概述。  
  
 在 [!INCLUDE[wiprlhext](~/includes/wiprlhext-md.md)]上，如果将 <xref:System.Windows.Forms.FileDialog.InitialDirectory%2A> 设置为完整文件名而不只是目录路径，则初始目录将默认为应用程序路径或用户上次从中选择文件的目录。  
  
   
  
## Examples  
 下面的代码示例使用 <xref:System.Windows.Forms.FileDialog> 的 <xref:System.Windows.Forms.OpenFileDialog> 实现，并说明了如何创建、设置属性和显示对话框。 当对话框向用户显示时，此示例使用 <xref:System.Windows.Forms.FileDialog.InitialDirectory%2A> 属性设置初始目录的内容。 该示例要求在窗体上放置了一个 <xref:System.Windows.Forms.Button>，并向其添加了 <xref:System.IO> 命名空间。  
  
 [!code-cpp[Classic OpenFileDialog Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic OpenFileDialog Example/CPP/source.cpp#1)]
 [!code-csharp[Classic OpenFileDialog Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic OpenFileDialog Example/CS/source.cs#1)]
 [!code-vb[Classic OpenFileDialog Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic OpenFileDialog Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.FileDialog.RestoreDirectory" />
        <altmember cref="T:Microsoft.Win32.Registry" />
        <altmember cref="T:System.Windows.Forms.Application" />
        <altmember cref="T:System.Environment" />
        <altmember cref="T:System.IO.Path" />
      </Docs>
    </Member>
    <Member MemberName="Instance">
      <MemberSignature Language="C#" Value="protected virtual IntPtr Instance { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int Instance" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.FileDialog.Instance" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property Instance As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property IntPtr Instance { IntPtr get(); };" />
      <MemberSignature Language="F#" Value="member this.Instance : nativeint" Usage="System.Windows.Forms.FileDialog.Instance" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取应用程序的 Win32 实例句柄。</summary>
        <value>应用程序的 Win32 实例句柄。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnFileOk">
      <MemberSignature Language="C#" Value="protected void OnFileOk (System.ComponentModel.CancelEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void OnFileOk(class System.ComponentModel.CancelEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.FileDialog.OnFileOk(System.ComponentModel.CancelEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub OnFileOk (e As CancelEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void OnFileOk(System::ComponentModel::CancelEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="member this.OnFileOk : System.ComponentModel.CancelEventArgs -&gt; unit" Usage="fileDialog.OnFileOk e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.ComponentModel.CancelEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">一个包含事件数据的 <see cref="T:System.ComponentModel.CancelEventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.FileDialog.FileOk" /> 事件。</summary>
        <remarks>To be added.</remarks>
        <altmember cref="E:System.Windows.Forms.FileDialog.FileOk" />
      </Docs>
    </Member>
    <Member MemberName="Options">
      <MemberSignature Language="C#" Value="protected int Options { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Options" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.FileDialog.Options" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property Options As Integer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property int Options { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Options : int" Usage="System.Windows.Forms.FileDialog.Options" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取用来初始化 <see cref="T:System.Windows.Forms.FileDialog" /> 的值。</summary>
        <value>内部值的按位组合，用于初始化 <see cref="T:System.Windows.Forms.FileDialog" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.FileDialog.Options%2A> 属性对应于使用 Win32 初始化文件对话框时使用的标志。 使用 <xref:System.Windows.Forms.FileDialog> 类的属性获取并设置选项。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public override void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.FileDialog.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Reset();" />
      <MemberSignature Language="F#" Value="override this.Reset : unit -&gt; unit" Usage="fileDialog.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>将所有属性重新设置为其默认值。</summary>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides"><para>当在派生类中重写 <see cref="M:System.Windows.Forms.FileDialog.Reset" /> 时，请确保调用基类的 <see cref="M:System.Windows.Forms.CommonDialog.Reset" /> 方法。</para></block>
      </Docs>
    </Member>
    <Member MemberName="RestoreDirectory">
      <MemberSignature Language="C#" Value="public bool RestoreDirectory { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool RestoreDirectory" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.FileDialog.RestoreDirectory" />
      <MemberSignature Language="VB.NET" Value="Public Property RestoreDirectory As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool RestoreDirectory { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.RestoreDirectory : bool with get, set" Usage="System.Windows.Forms.FileDialog.RestoreDirectory" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示该对话框在关闭前是否将目录还原为之前选定的目录。</summary>
        <value>假如用户在搜索文件的过程中更改了目录，那么，如果对话框将当前目录还原为之前选定的目录，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值是 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例使用 <xref:System.Windows.Forms.FileDialog> 的 <xref:System.Windows.Forms.OpenFileDialog> 实现，并说明了如何创建、设置属性和显示对话框。 该示例使用 <xref:System.Windows.Forms.FileDialog.RestoreDirectory%2A> 属性，以确保在关闭对话框时还原以前选择的目录。 该示例要求在窗体上放置了一个 <xref:System.Windows.Forms.Button>，并向其添加了 <xref:System.IO> 命名空间。  
  
 [!code-cpp[Classic OpenFileDialog Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic OpenFileDialog Example/CPP/source.cpp#1)]
 [!code-csharp[Classic OpenFileDialog Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic OpenFileDialog Example/CS/source.cs#1)]
 [!code-vb[Classic OpenFileDialog Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic OpenFileDialog Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.FileDialog.InitialDirectory" />
      </Docs>
    </Member>
    <Member MemberName="RunDialog">
      <MemberSignature Language="C#" Value="protected override bool RunDialog (IntPtr hWndOwner);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool RunDialog(native int hWndOwner) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.FileDialog.RunDialog(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function RunDialog (hWndOwner As IntPtr) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool RunDialog(IntPtr hWndOwner);" />
      <MemberSignature Language="F#" Value="override this.RunDialog : nativeint -&gt; bool" Usage="fileDialog.RunDialog hWndOwner" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hWndOwner" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="hWndOwner">一个值，该值表示用于常见对话框的所有者窗口的窗口控点。</param>
        <summary>指定通用对话框。</summary>
        <returns>如果可以打开文件，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法提供 <xref:System.Windows.Forms.CommonDialog.RunDialog%2A>的实现，在文件对话框的用户调用 <xref:System.Windows.Forms.CommonDialog.ShowDialog%2A>时调用。  
  
 在派生类中 <xref:System.Windows.Forms.OpenFileDialog> 和 <xref:System.Windows.Forms.SaveFileDialog> 可能会引发无效的文件名 <xref:System.Exception>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowHelp">
      <MemberSignature Language="C#" Value="public bool ShowHelp { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowHelp" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.FileDialog.ShowHelp" />
      <MemberSignature Language="VB.NET" Value="Public Property ShowHelp As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ShowHelp { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ShowHelp : bool with get, set" Usage="System.Windows.Forms.FileDialog.ShowHelp" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示文件对话框中是否显示“帮助”按钮。</summary>
        <value>如果对话框包含帮助按钮，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值是 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 用户单击 "**帮助**" 按钮时将引发 <xref:System.Windows.Forms.Control.HelpRequested> 事件。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SupportMultiDottedExtensions">
      <MemberSignature Language="C#" Value="public bool SupportMultiDottedExtensions { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SupportMultiDottedExtensions" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.FileDialog.SupportMultiDottedExtensions" />
      <MemberSignature Language="VB.NET" Value="Public Property SupportMultiDottedExtensions As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool SupportMultiDottedExtensions { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.SupportMultiDottedExtensions : bool with get, set" Usage="System.Windows.Forms.FileDialog.SupportMultiDottedExtensions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0;dotnet-plat-ext-5.0">
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置对话框是否支持显示和保存具有多个文件扩展名的文件。</summary>
        <value>如果对话框支持多个文件扩展名，则为 <see langword="true" />；否则为 <see langword="false" />。 默认为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有时，用户必须打开并保存使用多个文件扩展名的文件。 例如，[!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)] 部署技术所使用的应用程序清单文件以复杂文件扩展名 ".exe" 结尾。 如果将此属性设置为 `true`，则可以将 <xref:System.Windows.Forms.FileDialog.Filter%2A> 属性设置为多点扩展。  
  
 如果 `false`<xref:System.Windows.Forms.FileDialog.SupportMultiDottedExtensions%2A>，并将多点扩展分配给 <xref:System.Windows.Forms.FileDialog.Filter%2A>，则 <xref:System.Windows.Forms.SaveFileDialog> 的派生控件将仅使用字符串中的最后一个扩展。 例如，将使用 ".manifest" 而不是 ".exe"。  
  
   
  
## Examples  
 下面的代码示例保存扩展名为 ".txt" 的文件。 此代码示例要求你的应用程序承载名为 `saveFileDialog1` 的 <xref:System.Windows.Forms.SaveFileDialog> 以及一个名为 `button1`的 <xref:System.Windows.Forms.Button>。  
  
 [!code-csharp[SupportMultiDottedExtensions#1](~/samples/snippets/csharp/VS_Snippets_Winforms/SupportMultiDottedExtensions/CS/Form1.cs#1)]
 [!code-vb[SupportMultiDottedExtensions#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/SupportMultiDottedExtensions/VB/Form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.FileDialog.Filter" />
      </Docs>
    </Member>
    <Member MemberName="Title">
      <MemberSignature Language="C#" Value="public string Title { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Title" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.FileDialog.Title" />
      <MemberSignature Language="VB.NET" Value="Public Property Title As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Title { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Title : string with get, set" Usage="System.Windows.Forms.FileDialog.Title" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置文件对话框标题。</summary>
        <value>文件对话框标题。 默认值为空字符串 ("")。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 该字符串放置在对话框的标题栏中。 如果标题为空字符串，则系统将使用默认标题，即 "另存为" 或 "打开"。  
  
   
  
## Examples  
 下面的代码示例演示如何初始化 <xref:System.Windows.Forms.OpenFileDialog>、设置 <xref:System.Windows.Forms.FileDialog.Title%2A> 和 <xref:System.Windows.Forms.FileDialog.Filter%2A> 属性，以及允许用户通过将 <xref:System.Windows.Forms.OpenFileDialog.Multiselect%2A?displayProperty=nameWithType> 属性设置为 true 来选择多个文件。 若要运行此示例，请将以下代码粘贴到包含名为 `OpenFileDialog1` 的 <xref:System.Windows.Forms.OpenFileDialog> 的窗体中，并将一个名为 `fileButton`的 <xref:System.Windows.Forms.Button>。 在窗体的构造函数或 `Load` 方法中调用 `InitializeOpenFileDialog` 方法。 该示例还要求 `Button` 控件的 `Click` 事件连接到本示例中定义的事件处理程序。  
  
 [!code-cpp[System.Windows.Forms.FileDialog#6](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.FileDialog/CPP/filedialogform.cpp#6)]
 [!code-csharp[System.Windows.Forms.FileDialog#6](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.FileDialog/CS/filedialogform.cs#6)]
 [!code-vb[System.Windows.Forms.FileDialog#6](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.FileDialog/VB/filedialogform.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.FileDialog.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="fileDialog.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>提供此对象的字符串版本。</summary>
        <returns>此对象的字符串版本。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidateNames">
      <MemberSignature Language="C#" Value="public bool ValidateNames { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ValidateNames" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.FileDialog.ValidateNames" />
      <MemberSignature Language="VB.NET" Value="Public Property ValidateNames As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ValidateNames { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ValidateNames : bool with get, set" Usage="System.Windows.Forms.FileDialog.ValidateNames" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示对话框是否只接受有效的 Win32 文件名。</summary>
        <value>如果对话框只接受有效 Win32 文件名，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值是 <see langword="true" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果在用户单击 **"确定**" 时编辑控件包含除空格外的任何内容，则对话框将返回文件名，无论其是否有效。 不会向文本中添加默认扩展。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
