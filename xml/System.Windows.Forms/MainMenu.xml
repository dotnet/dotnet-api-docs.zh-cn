<Type Name="MainMenu" FullName="System.Windows.Forms.MainMenu">
  <Metadata><Meta Name="ms.openlocfilehash" Value="d9a7bcd60be8fb00ffe48fdeb8311708a95c2648" /><Meta Name="ms.sourcegitcommit" Value="11d168140aa8fade0768c2a9dde3e3bcacfdfb7d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="05/27/2020" /><Meta Name="ms.locfileid" Value="83977450" /></Metadata><TypeSignature Language="C#" Value="public class MainMenu : System.Windows.Forms.Menu" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MainMenu extends System.Windows.Forms.Menu" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.MainMenu" />
  <TypeSignature Language="VB.NET" Value="Public Class MainMenu&#xA;Inherits Menu" />
  <TypeSignature Language="C++ CLI" Value="public ref class MainMenu : System::Windows::Forms::Menu" />
  <TypeSignature Language="F#" Value="type MainMenu = class&#xA;    inherit Menu" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Forms.Menu</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.ToolboxItemFilter("System.Windows.Forms.MainMenu")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>表示窗体的菜单结构。 尽管 <see cref="T:System.Windows.Forms.MenuStrip" /> 替换了早期版本的 <see cref="T:System.Windows.Forms.MainMenu" /> 控件并添加了功能；但是也可选择保留 <see cref="T:System.Windows.Forms.MainMenu" /> 以备向后兼容和将来使用。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MainMenu> 控件表示窗体的菜单结构的容器。 菜单由 <xref:System.Windows.Forms.MenuItem> 对象组成，这些对象表示菜单结构中的各个菜单命令。 每个 <xref:System.Windows.Forms.MenuItem> 都可以是应用程序的命令或其他子菜单项的父菜单。 若要将 <xref:System.Windows.Forms.MainMenu> 绑定到将显示它的 <xref:System.Windows.Forms.Form>，请将 <xref:System.Windows.Forms.MainMenu> 分配给 <xref:System.Windows.Forms.Form>的 <xref:System.Windows.Forms.Form.Menu%2A> 属性。  
  
 对于将支持多种语言的应用程序，可以使用 <xref:System.Windows.Forms.MainMenu.RightToLeft%2A> 属性以从右向左显示菜单的文本，以支持阿拉伯语等语言。  
  
 可以创建不同的 <xref:System.Windows.Forms.MainMenu> 对象来表示窗体的不同菜单结构。 如果要重用特定 <xref:System.Windows.Forms.MainMenu>中包含的菜单结构，可以使用其 <xref:System.Windows.Forms.MainMenu.CloneMenu%2A> 方法来创建副本。 获得菜单结构副本后，您可以对新的菜单结构进行适当的修改。  
  
> [!NOTE]
>  如果粘贴到的窗体中未定义菜单项，则在设计器中从一种窗体剪切和粘贴菜单项可能无法按预期方式工作。  
  
   
  
## Examples  
 下面的代码示例创建 <xref:System.Windows.Forms.MainMenu>，并将两个 <xref:System.Windows.Forms.MenuItem> 对象分配给 <xref:System.Windows.Forms.MainMenu>，并将其绑定到窗体。 此示例要求创建一个名为 `Form1`的 <xref:System.Windows.Forms.Form>。  
  
 [!code-cpp[Classic MainMenu.MainMenu Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MainMenu.MainMenu Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MainMenu.MainMenu Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MainMenu.MainMenu Example/CS/source.cs#1)]
 [!code-vb[Classic MainMenu.MainMenu Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MainMenu.MainMenu Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Forms.MenuItem" />
    <altmember cref="M:System.Windows.Forms.Menu.MenuItemCollection.Add(System.String)" />
    <altmember cref="P:System.Windows.Forms.Form.Menu" />
    <altmember cref="P:System.Windows.Forms.Menu.MenuItems" />
    <altmember cref="T:System.Windows.Forms.MenuStrip" />
    <altmember cref="T:System.Windows.Forms.ContextMenuStrip" />
    <related type="Article" href="https://msdn.microsoft.com/library/e361bf98-eed8-4ed3-9dfb-5a2e865e3ce6">MenuStrip 控件（Windows 窗体）</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Windows.Forms.MainMenu" /> 类的新实例。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MainMenu ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MainMenu.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MainMenu();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化没有任何指定菜单项的 <see cref="T:System.Windows.Forms.MainMenu" /> 类的一个新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此版本的构造函数创建一个没有任何指定 <xref:System.Windows.Forms.MenuItem> 对象的 <xref:System.Windows.Forms.MainMenu>。 若要向控件添加菜单项，请使用此构造函数的另一个版本，该版本接受 <xref:System.Windows.Forms.MenuItem> 对象的数组作为其参数，或使用 <xref:System.Windows.Forms.Menu.MenuItems%2A> 属性的 <xref:System.Windows.Forms.Menu.MenuItemCollection.Add%2A> 方法。  
  
   
  
## Examples  
 下面的代码示例创建 <xref:System.Windows.Forms.MainMenu>，并将两个 <xref:System.Windows.Forms.MenuItem> 对象分配给 <xref:System.Windows.Forms.MainMenu>，并将其绑定到窗体。 此示例要求创建一个名为 `Form1`的 <xref:System.Windows.Forms.Form>。  
  
 [!code-cpp[Classic MainMenu.MainMenu Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MainMenu.MainMenu Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MainMenu.MainMenu Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MainMenu.MainMenu Example/CS/source.cs#1)]
 [!code-vb[Classic MainMenu.MainMenu Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MainMenu.MainMenu Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.MenuItem" />
        <altmember cref="M:System.Windows.Forms.Menu.MenuItemCollection.Add(System.String)" />
        <altmember cref="P:System.Windows.Forms.Form.Menu" />
        <altmember cref="P:System.Windows.Forms.Menu.MenuItems" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MainMenu (System.ComponentModel.IContainer container);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.ComponentModel.IContainer container) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MainMenu.#ctor(System.ComponentModel.IContainer)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (container As IContainer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MainMenu(System::ComponentModel::IContainer ^ container);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.MainMenu : System.ComponentModel.IContainer -&gt; System.Windows.Forms.MainMenu" Usage="new System.Windows.Forms.MainMenu container" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="container" Type="System.ComponentModel.IContainer" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="container">一个 <see cref="T:System.ComponentModel.IContainer" />，它表示 <see cref="T:System.Windows.Forms.MainMenu" /> 的容器。</param>
        <summary>使用指定的容器初始化 <see cref="T:System.Windows.Forms.MainMenu" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MainMenu (System.Windows.Forms.MenuItem[] items);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Forms.MenuItem[] items) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MainMenu.#ctor(System.Windows.Forms.MenuItem[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (items As MenuItem())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MainMenu(cli::array &lt;System::Windows::Forms::MenuItem ^&gt; ^ items);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.MainMenu : System.Windows.Forms.MenuItem[] -&gt; System.Windows.Forms.MainMenu" Usage="new System.Windows.Forms.MainMenu items" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="items" Type="System.Windows.Forms.MenuItem[]" />
      </Parameters>
      <Docs>
        <param name="items">将添加到 <see cref="T:System.Windows.Forms.MenuItem" /> 的一组 <see cref="T:System.Windows.Forms.MainMenu" /> 对象。</param>
        <summary>使用一组指定的 <see cref="T:System.Windows.Forms.MainMenu" /> 对象初始化 <see cref="T:System.Windows.Forms.MenuItem" /> 的一个新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 可以使用此构造函数在创建时将 <xref:System.Windows.Forms.MenuItem> 对象数组分配给 <xref:System.Windows.Forms.MainMenu>。 创建 <xref:System.Windows.Forms.MainMenu> 后，可以使用 <xref:System.Windows.Forms.Menu.MenuItems%2A> 属性的 <xref:System.Windows.Forms.Menu.MenuItemCollection.Add%2A> 方法将其他 <xref:System.Windows.Forms.MenuItem> 对象添加到 <xref:System.Windows.Forms.MainMenu>。  
  
   
  
## Examples  
 下面的代码示例创建 <xref:System.Windows.Forms.MainMenu>，并使用此版本的构造函数将两个 <xref:System.Windows.Forms.MenuItem> 对象分配给 <xref:System.Windows.Forms.MainMenu>。 然后，该示例将 <xref:System.Windows.Forms.MainMenu> 绑定到 <xref:System.Windows.Forms.Form>。 此示例要求创建一个名为 `Form1`的 <xref:System.Windows.Forms.Form>。  
  
 [!code-cpp[Classic MainMenu.MainMenu1 Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MainMenu.MainMenu1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MainMenu.MainMenu1 Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MainMenu.MainMenu1 Example/CS/source.cs#1)]
 [!code-vb[Classic MainMenu.MainMenu1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MainMenu.MainMenu1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.MenuItem" />
      </Docs>
    </Member>
    <Member MemberName="CloneMenu">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.MainMenu CloneMenu ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Forms.MainMenu CloneMenu() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MainMenu.CloneMenu" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CloneMenu () As MainMenu" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Windows::Forms::MainMenu ^ CloneMenu();" />
      <MemberSignature Language="F#" Value="override this.CloneMenu : unit -&gt; System.Windows.Forms.MainMenu" Usage="mainMenu.CloneMenu " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MainMenu</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>创建一个新 <see cref="T:System.Windows.Forms.MainMenu" />，它是当前 <see cref="T:System.Windows.Forms.MainMenu" /> 的副本。</summary>
        <returns>表示克隆菜单的 <see cref="T:System.Windows.Forms.MainMenu" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 可以使用此方法创建存储在 <xref:System.Windows.Forms.MainMenu>中的菜单结构的副本。 您可以使用此方法将存储在 <xref:System.Windows.Forms.MainMenu> 中的菜单结构作为新 <xref:System.Windows.Forms.MainMenu>的基础。 例如，如果想要创建具有与现有 <xref:System.Windows.Forms.MainMenu> 相同的菜单项的菜单结构，但同时还添加了其他 <xref:System.Windows.Forms.MenuItem> 对象，则可以使用 <xref:System.Windows.Forms.MainMenu.CloneMenu%2A> 方法创建原始 <xref:System.Windows.Forms.MainMenu> 的副本，然后将新的 <xref:System.Windows.Forms.MenuItem> 对象添加到克隆的 <xref:System.Windows.Forms.MainMenu>中。  
  
   
  
## Examples  
 下面的代码示例使用 <xref:System.Windows.Forms.MainMenu.GetForm%2A> 方法来确定 <xref:System.Windows.Forms.MainMenu> 当前是否为窗体的父级。 如果要 <xref:System.Windows.Forms.MainMenu.GetForm%2A> 的示例代码中的调用未返回 `null`，则代码将使用 <xref:System.Windows.Forms.MainMenu.CloneMenu%2A> 方法克隆 <xref:System.Windows.Forms.MainMenu> 的菜单结构。 然后，该代码将 <xref:System.Windows.Forms.MainMenu> 的新副本上的 <xref:System.Windows.Forms.MainMenu.RightToLeft%2A> 属性设置为 true，以创建可用于支持从右向左文本的语言的 <xref:System.Windows.Forms.MainMenu>。 此示例要求创建一个名为 `mainMenu1`的 <xref:System.Windows.Forms.MainMenu>。  
  
 [!code-cpp[Classic MainMenu.GetForm Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MainMenu.GetForm Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MainMenu.GetForm Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MainMenu.GetForm Example/CS/source.cs#1)]
 [!code-vb[Classic MainMenu.GetForm Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MainMenu.GetForm Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Collapse">
      <MemberSignature Language="C#" Value="public event EventHandler Collapse;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Collapse" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.MainMenu.Collapse" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Collapse As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Collapse;" />
      <MemberSignature Language="F#" Value="member this.Collapse : EventHandler " Usage="member this.Collapse : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当主菜单折叠时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关处理事件的详细信息，请参阅[处理和引发事件](/dotnet/standard/events/)。  
  
   
  
## Examples  
 下面的代码示例演示如何使用此成员。 在此示例中，事件处理程序报告 <xref:System.Windows.Forms.MainMenu.Collapse> 事件的发生。 此报表可帮助你了解何时发生事件，并可帮助你进行调试。 若要报告多个事件或频繁发生的事件，请考虑将 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> 替换为 <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 或将消息附加到多行 <xref:System.Windows.Forms.TextBox>中。  
  
 若要运行示例代码，请将其粘贴到包含名为 `MainMenu1`<xref:System.Windows.Forms.MainMenu> 类型实例的项目中。 然后，确保事件处理程序与 <xref:System.Windows.Forms.MainMenu.Collapse> 事件关联。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#483](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#483)]
 [!code-vb[System.Windows.Forms.EventExamples#483](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#483)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateMenuHandle">
      <MemberSignature Language="C#" Value="protected override IntPtr CreateMenuHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance native int CreateMenuHandle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MainMenu.CreateMenuHandle" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CreateMenuHandle () As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override IntPtr CreateMenuHandle();" />
      <MemberSignature Language="F#" Value="override this.CreateMenuHandle : unit -&gt; nativeint" Usage="mainMenu.CreateMenuHandle " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>创建 Menu 的新句柄。</summary>
        <returns>如果该方法成功，则为菜单的句柄；否则为 <see langword="null" />。</returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.Menu.CreateMenuHandle" />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MainMenu.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="mainMenu.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">如果为 <see langword="true" />，则托管及非托管资源都释放；如果为 <see langword="false" />，则仅释放非托管资源。</param>
        <summary>处置由 <see cref="T:System.Windows.Forms.MainMenu" /> 占用的资源（内存除外）。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在完成使用 <xref:System.Windows.Forms.MainMenu.Dispose%2A> 后，应调用 <xref:System.Windows.Forms.MainMenu>。 <xref:System.Windows.Forms.MainMenu.Dispose%2A> 方法使 <xref:System.Windows.Forms.MainMenu> 处于不可用状态。 调用 <xref:System.Windows.Forms.MainMenu.Dispose%2A>后，必须释放对 <xref:System.Windows.Forms.MainMenu> 的所有引用，以便垃圾回收将其占用的内存回收。  
  
> [!NOTE]
>  每次释放对 <xref:System.Windows.Forms.MainMenu.Dispose%2A> 的最后一个引用前，均应调用 <xref:System.Windows.Forms.MainMenu>。 否则，在垃圾回收调用 <xref:System.Windows.Forms.MainMenu> 对象的析构函数之前，将不会释放 <xref:System.Windows.Forms.MainMenu> 正在使用的资源。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetForm">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Form GetForm ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.Form GetForm() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MainMenu.GetForm" />
      <MemberSignature Language="VB.NET" Value="Public Function GetForm () As Form" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::Form ^ GetForm();" />
      <MemberSignature Language="F#" Value="member this.GetForm : unit -&gt; System.Windows.Forms.Form" Usage="mainMenu.GetForm " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Form</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>获取包含该控件的 <see cref="T:System.Windows.Forms.Form" />。</summary>
        <returns>一个 <see cref="T:System.Windows.Forms.Form" />，它是该控件的容器。 如果 <see cref="T:System.Windows.Forms.MainMenu" /> 当前没有在窗体上寄宿，则返回 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性使您能够确定特定 <xref:System.Windows.Forms.MainMenu> 是否是窗体的父级。 当窗体上使用了多个 <xref:System.Windows.Forms.MainMenu> 对象并且需要确定窗体当前正在使用哪个对象时，通常会使用属性。  
  
   
  
## Examples  
 下面的代码示例使用 <xref:System.Windows.Forms.MainMenu.GetForm%2A> 方法来确定 <xref:System.Windows.Forms.MainMenu> 当前是否为窗体的父级。 如果要 <xref:System.Windows.Forms.MainMenu.GetForm%2A> 的示例代码中的调用未返回 `null`，则代码将使用 <xref:System.Windows.Forms.MainMenu.CloneMenu%2A> 方法克隆 <xref:System.Windows.Forms.MainMenu> 的菜单结构。 然后，该代码将 <xref:System.Windows.Forms.MainMenu> 的新副本上的 <xref:System.Windows.Forms.MainMenu.RightToLeft%2A> 属性设置为 true，以创建可用于支持从右向左文本的语言的 <xref:System.Windows.Forms.MainMenu>。 此示例要求创建一个名为 `mainMenu1`的 <xref:System.Windows.Forms.MainMenu>。  
  
 [!code-cpp[Classic MainMenu.GetForm Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MainMenu.GetForm Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MainMenu.GetForm Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MainMenu.GetForm Example/CS/source.cs#1)]
 [!code-vb[Classic MainMenu.GetForm Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MainMenu.GetForm Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.Form" />
      </Docs>
    </Member>
    <Member MemberName="OnCollapse">
      <MemberSignature Language="C#" Value="protected internal virtual void OnCollapse (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnCollapse(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MainMenu.OnCollapse(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnCollapse (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnCollapse(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnCollapse : EventArgs -&gt; unit&#xA;override this.OnCollapse : EventArgs -&gt; unit" Usage="mainMenu.OnCollapse e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.EventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.MainMenu.Collapse" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅[处理和引发事件](/dotnet/standard/events/)。  
  
 <xref:System.Windows.Forms.MainMenu.OnCollapse%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>当在派生类中重写 <see cref="M:System.Windows.Forms.MainMenu.OnCollapse(System.EventArgs)" /> 时，请确保调用基类的 "<see cref="M:System.Windows.Forms.MainMenu.OnCollapse(System.EventArgs)" /> 方法，以便注册的委托接收事件。</para></block>
      </Docs>
    </Member>
    <Member MemberName="RightToLeft">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.RightToLeft RightToLeft { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.RightToLeft RightToLeft" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MainMenu.RightToLeft" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property RightToLeft As RightToLeft" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Windows::Forms::RightToLeft RightToLeft { System::Windows::Forms::RightToLeft get(); void set(System::Windows::Forms::RightToLeft value); };" />
      <MemberSignature Language="F#" Value="member this.RightToLeft : System.Windows.Forms.RightToLeft with get, set" Usage="System.Windows.Forms.MainMenu.RightToLeft" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1">
          <AttributeName>System.ComponentModel.AmbientValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.RightToLeft</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置控件显示的文本是否从右向左显示。</summary>
        <value><see cref="T:System.Windows.Forms.RightToLeft" /> 值之一。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 通过此属性，您的菜单可以支持从右到左书写的语言。 如果将此属性设置为 `RightToLeft.Yes`，则菜单项文本将从右到左而不是从左到右的默认方法显示。  
  
> [!NOTE]
>  有关启用从右到左对齐对 Windows 窗体控件的影响的详细信息，请参阅 <xref:System.Windows.Forms.Control.RightToLeft%2A> 属性。  
  
   
  
## Examples  
 下面的代码示例使用 <xref:System.Windows.Forms.MainMenu.GetForm%2A> 方法来确定 <xref:System.Windows.Forms.MainMenu> 当前是否为窗体的父级。 如果要 <xref:System.Windows.Forms.MainMenu.GetForm%2A> 的示例代码中的调用未返回 `null`，则代码将使用 <xref:System.Windows.Forms.MainMenu.CloneMenu%2A> 方法克隆 <xref:System.Windows.Forms.MainMenu> 的菜单结构。 然后，示例代码将 <xref:System.Windows.Forms.MainMenu.RightToLeft%2A> 属性设置为在 <xref:System.Windows.Forms.MainMenu> 的新副本上 `RightToLeft.Yes`，以创建可用于支持从右向左文本的语言的 <xref:System.Windows.Forms.MainMenu>。 此示例要求创建一个名为 `mainMenu1`的 <xref:System.Windows.Forms.MainMenu>。  
  
 [!code-cpp[Classic MainMenu.RightToLeft Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MainMenu.RightToLeft Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MainMenu.RightToLeft Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MainMenu.RightToLeft Example/CS/source.cs#1)]
 [!code-vb[Classic MainMenu.RightToLeft Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MainMenu.RightToLeft Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">分配给该属性的值不是 <see cref="T:System.Windows.Forms.RightToLeft" /> 枚举的有效成员。</exception>
        <altmember cref="T:System.Windows.Forms.RightToLeft" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MainMenu.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="mainMenu.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返回表示 <see cref="T:System.Windows.Forms.MainMenu" /> 的字符串。</summary>
        <returns>表示当前 <see cref="T:System.Windows.Forms.MainMenu" /> 的字符串。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果 <xref:System.Windows.Forms.MainMenu> 分配给窗体，则返回字符串包括 <xref:System.Windows.Forms.Form.ToString%2A> 方法返回的类型和字符串。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
