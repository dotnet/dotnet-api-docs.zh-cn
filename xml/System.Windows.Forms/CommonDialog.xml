<Type Name="CommonDialog" FullName="System.Windows.Forms.CommonDialog">
  <Metadata><Meta Name="ms.openlocfilehash" Value="6278aff3a367c01b8b9acc14e225f30db11af25c" /><Meta Name="ms.sourcegitcommit" Value="c982ad9e10a242d90f1e631b5981570f9e5d9f34" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/10/2020" /><Meta Name="ms.locfileid" Value="89870367" /></Metadata><TypeSignature Language="C#" Value="public abstract class CommonDialog : System.ComponentModel.Component" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit CommonDialog extends System.ComponentModel.Component" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.CommonDialog" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class CommonDialog&#xA;Inherits Component" />
  <TypeSignature Language="C++ CLI" Value="public ref class CommonDialog abstract : System::ComponentModel::Component" />
  <TypeSignature Language="F#" Value="type CommonDialog = class&#xA;    inherit Component" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.Component</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[System.ComponentModel.ToolboxItemFilter("System.Windows.Forms")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.ComponentModel.ToolboxItemFilter("System.Windows.Forms")&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>指定用于在屏幕上显示对话框的基类。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要实现继承类，需要 <xref:System.Windows.Forms.CommonDialog.RunDialog%2A> 通过调用 <xref:System.Windows.Forms.CommonDialog.ShowDialog%2A> 来创建特定的通用对话框。 继承的类可以有选择地重写 <xref:System.Windows.Forms.CommonDialog.HookProc%2A> 以实现特定的对话框挂钩功能。  
  
   
  
## Examples  
 下面的代码示例使用的 <xref:System.Windows.Forms.ColorDialog> 实现 <xref:System.Windows.Forms.CommonDialog> ，并说明了如何创建并显示一个对话框。 此示例需要从现有窗体中调用方法，该窗体具有 <xref:System.Windows.Forms.TextBox> 并 <xref:System.Windows.Forms.Button> 放置在该窗体上。  
  
 [!code-cpp[Classic ColorDialog Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic ColorDialog Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ColorDialog Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic ColorDialog Example/CS/source.cs#1)]
 [!code-vb[Classic ColorDialog Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic ColorDialog Example/VB/Form1.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CommonDialog ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.CommonDialog.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CommonDialog();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Windows.Forms.CommonDialog" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HelpRequest">
      <MemberSignature Language="C#" Value="public event EventHandler HelpRequest;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler HelpRequest" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.CommonDialog.HelpRequest" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event HelpRequest As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ HelpRequest;" />
      <MemberSignature Language="F#" Value="member this.HelpRequest : EventHandler " Usage="member this.HelpRequest : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当用户单击通用对话框中的“帮助”按钮时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关处理事件的信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
   
  
## Examples  
 下面的代码示例演示如何初始化 <xref:System.Windows.Forms.ColorDialog> 设置 <xref:System.Windows.Forms.ColorDialog.AnyColor%2A> 、属性的对象 <xref:System.Windows.Forms.ColorDialog.AllowFullOpen%2A> 。 <xref:System.Windows.Forms.ColorDialog>对象不允许用户设置自定义颜色，但允许显示一组完整的基本颜色。 通过将 <xref:System.Windows.Forms.ColorDialog.SolidColorOnly%2A> 属性设置为 "false"，可以在颜色为256或更低的系统上显示与其他颜色组合的颜色。 该示例还演示了如何设置 <xref:System.Windows.Forms.ColorDialog.ShowHelp%2A> 属性和处理 <xref:System.Windows.Forms.CommonDialog.HelpRequest> 对话框的事件。 若要运行该示例，请将以下代码粘贴到窗体中，并 `InitializeColorDialog` 在窗体的构造函数或方法中调用方法 `Load` 。 此示例要求按钮的 `Click` 事件已连接到该示例中定义的事件处理程序。  
  
 [!code-cpp[System.Windows.Forms.ColorDialogHelp#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ColorDialogHelp/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ColorDialogHelp#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ColorDialogHelp/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ColorDialogHelp#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ColorDialogHelp/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.CommonDialog.OnHelpRequest(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="HookProc">
      <MemberSignature Language="C#" Value="protected virtual IntPtr HookProc (IntPtr hWnd, int msg, IntPtr wparam, IntPtr lparam);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance native int HookProc(native int hWnd, int32 msg, native int wparam, native int lparam) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.CommonDialog.HookProc(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function HookProc (hWnd As IntPtr, msg As Integer, wparam As IntPtr, lparam As IntPtr) As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual IntPtr HookProc(IntPtr hWnd, int msg, IntPtr wparam, IntPtr lparam);" />
      <MemberSignature Language="F#" Value="abstract member HookProc : nativeint * int * nativeint * nativeint -&gt; nativeint&#xA;override this.HookProc : nativeint * int * nativeint * nativeint -&gt; nativeint" Usage="commonDialog.HookProc (hWnd, msg, wparam, lparam)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hWnd" Type="System.IntPtr" />
        <Parameter Name="msg" Type="System.Int32" />
        <Parameter Name="wparam" Type="System.IntPtr" />
        <Parameter Name="lparam" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="hWnd">对话框窗口的句柄。</param>
        <param name="msg">正在接收的消息。</param>
        <param name="wparam">关于消息的附加信息。</param>
        <param name="lparam">关于消息的附加信息。</param>
        <summary>定义要重写的通用对话框挂钩过程，以便向通用对话框添加特定功能。</summary>
        <returns>如果默认对话框过程处理此消息，则为零值；如果默认对话框过程忽略此消息，则为非零值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 挂钩过程是一种机制，通过该机制，函数可在事件到达应用程序之前截获这些事件。 当你重写 <xref:System.Windows.Forms.CommonDialog.HookProc%2A> 类的方法时 <xref:System.Windows.Forms.CommonDialog> ，操作系统将调用函数的重写，以将操作系统消息发布到窗口。  
  
 默认情况下，挂钩过程在屏幕上将对话框显示为响应 WM_INITDIALOG 消息。  
  
> [!NOTE]
>  此方法使用 <xref:System.Security.Permissions.SecurityAction.LinkDemand?displayProperty=nameWithType> 来防止不受信任的代码调用该方法; 只有直接调用方才需要具有 <xref:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode%2A?displayProperty=nameWithType> 权限。 如果你的代码可从部分受信任的代码调用，则不要将用户输入传递给 <xref:System.Runtime.InteropServices.Marshal> 不带验证的类方法。 有关使用成员的重要限制 `LinkDemand` ，请参阅 [Demand 与 LinkDemand](https://msdn.microsoft.com/library/1ab877f2-70f4-4e0d-8116-943999dfe8f5)。  
  
 此属性还使用 <xref:System.Security.Permissions.SecurityAction.InheritanceDemand?displayProperty=nameWithType> 安全特性; 若要重写此成员，派生类必须具有 `CustomPermission` 权限。  
  
   
  
## Examples  
 下面的代码示例演示如何重写 <xref:System.Windows.Forms.CommonDialog.HookProc%2A> 方法。 该示例包含继承类的类 <xref:System.Windows.Forms.CommonDialog> 。 在类的 <xref:System.Windows.Forms.CommonDialog.HookProc%2A> 重写中，此示例 `msg` 针对特定窗口消息的常量值计算方法的参数。 如果 `msg` 参数等于指定的常量，则该示例将写入标识传递到该方法的 Windows 消息的跟踪输出 <xref:System.Windows.Forms.CommonDialog.HookProc%2A> 。 此示例假定 <xref:System.Windows.Forms.CommonDialog.HookProc%2A> 声明方法的类继承 <xref:System.Windows.Forms.CommonDialog> 类。  
  
 [!code-cpp[HookProc Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/HookProc Example/CPP/fontdialogoverride.cpp#1)]
 [!code-csharp[HookProc Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/HookProc Example/CS/fontdialogoverride.cs#1)]
 [!code-vb[HookProc Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/HookProc Example/VB/fontdialogoverride.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>继承类可以重写此方法，以便向通用对话框添加特定功能。 当 <see cref="M:System.Windows.Forms.CommonDialog.HookProc(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)" /> 在派生类中重写时，请确保调用基类的 <see cref="M:System.Windows.Forms.CommonDialog.HookProc(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)" /> 方法。</para></block>
      </Docs>
    </Member>
    <Member MemberName="OnHelpRequest">
      <MemberSignature Language="C#" Value="protected virtual void OnHelpRequest (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnHelpRequest(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.CommonDialog.OnHelpRequest(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnHelpRequest (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnHelpRequest(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnHelpRequest : EventArgs -&gt; unit&#xA;override this.OnHelpRequest : EventArgs -&gt; unit" Usage="commonDialog.OnHelpRequest e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">提供事件数据的 <see cref="T:System.Windows.Forms.HelpEventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.CommonDialog.HelpRequest" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 单击 "帮助" 按钮时，将调用此方法。 继承类可以重写此方法以处理事件。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OwnerWndProc">
      <MemberSignature Language="C#" Value="protected virtual IntPtr OwnerWndProc (IntPtr hWnd, int msg, IntPtr wparam, IntPtr lparam);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance native int OwnerWndProc(native int hWnd, int32 msg, native int wparam, native int lparam) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.CommonDialog.OwnerWndProc(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function OwnerWndProc (hWnd As IntPtr, msg As Integer, wparam As IntPtr, lparam As IntPtr) As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual IntPtr OwnerWndProc(IntPtr hWnd, int msg, IntPtr wparam, IntPtr lparam);" />
      <MemberSignature Language="F#" Value="abstract member OwnerWndProc : nativeint * int * nativeint * nativeint -&gt; nativeint&#xA;override this.OwnerWndProc : nativeint * int * nativeint * nativeint -&gt; nativeint" Usage="commonDialog.OwnerWndProc (hWnd, msg, wparam, lparam)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hWnd" Type="System.IntPtr" />
        <Parameter Name="msg" Type="System.Int32" />
        <Parameter Name="wparam" Type="System.IntPtr" />
        <Parameter Name="lparam" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="hWnd">要发送的消息的窗口句柄。</param>
        <param name="msg">要发送的 Win32 消息。</param>
        <param name="wparam">要与消息一起发送的 <paramref name="wparam" />。</param>
        <param name="lparam">要与消息一起发送的 <paramref name="lparam" />。</param>
        <summary>定义要重写的所有者窗口过程，以便向通用对话框添加特定功能。</summary>
        <returns>消息处理的结果，它依赖于所发送的消息。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当消息发送到通用对话框的所有者窗口时，将在此传输控件。 继承类可以重写此方法，以便向通用对话框添加特定功能。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public abstract void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.CommonDialog.Reset" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void Reset();" />
      <MemberSignature Language="F#" Value="abstract member Reset : unit -&gt; unit" Usage="commonDialog.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>在派生类中被重写时，将通用对话框的属性重置为默认值。</summary>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides"><para>继承类可以重写此方法以重置其属性。</para></block>
      </Docs>
    </Member>
    <Member MemberName="RunDialog">
      <MemberSignature Language="C#" Value="protected abstract bool RunDialog (IntPtr hwndOwner);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool RunDialog(native int hwndOwner) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.CommonDialog.RunDialog(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function RunDialog (hwndOwner As IntPtr) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract bool RunDialog(IntPtr hwndOwner);" />
      <MemberSignature Language="F#" Value="abstract member RunDialog : nativeint -&gt; bool" Usage="commonDialog.RunDialog hwndOwner" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hwndOwner" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="hwndOwner">一个值，表示通用对话框所有者窗口的窗口句柄。</param>
        <summary>在派生类中被重写时，指定通用对话框。</summary>
        <returns>如果该对话框成功运行，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当通用对话框的用户调用时，将调用此方法 <xref:System.Windows.Forms.CommonDialog.ShowDialog%2A> ，并且必须由的继承类重写 <xref:System.Windows.Forms.CommonDialog> 以实现特定的通用对话框。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.CommonDialog.ShowDialog" />
        <altmember cref="M:System.Windows.Forms.CommonDialog.HookProc(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ShowDialog">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>运行通用对话框。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ShowDialog">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DialogResult ShowDialog ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Windows.Forms.DialogResult ShowDialog() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.CommonDialog.ShowDialog" />
      <MemberSignature Language="VB.NET" Value="Public Function ShowDialog () As DialogResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::DialogResult ShowDialog();" />
      <MemberSignature Language="F#" Value="member this.ShowDialog : unit -&gt; System.Windows.Forms.DialogResult" Usage="commonDialog.ShowDialog " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DialogResult</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>用默认的所有者运行通用对话框。</summary>
        <returns>如果用户在对话框中单击“确定”，则为 <see cref="F:System.Windows.Forms.DialogResult.OK" />；否则为 <see cref="F:System.Windows.Forms.DialogResult.Cancel" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法实现 <xref:System.Windows.Forms.CommonDialog.RunDialog%2A>。  
  
   
  
## Examples  
 下面的代码示例使用的 <xref:System.Windows.Forms.ColorDialog> 实现 <xref:System.Windows.Forms.CommonDialog> ，并说明了如何创建并显示一个对话框。 此示例需要从现有窗体中调用方法，该窗体具有 <xref:System.Windows.Forms.TextBox> 并 <xref:System.Windows.Forms.Button> 放置在该窗体上。  
  
 [!code-cpp[Classic ColorDialog Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic ColorDialog Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ColorDialog Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic ColorDialog Example/CS/source.cs#1)]
 [!code-vb[Classic ColorDialog Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic ColorDialog Example/VB/Form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.CommonDialog.RunDialog(System.IntPtr)" />
        <altmember cref="T:System.Windows.Forms.DialogResult" />
      </Docs>
    </Member>
    <Member MemberName="ShowDialog">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DialogResult ShowDialog (System.Windows.Forms.IWin32Window owner);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Windows.Forms.DialogResult ShowDialog(class System.Windows.Forms.IWin32Window owner) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.CommonDialog.ShowDialog(System.Windows.Forms.IWin32Window)" />
      <MemberSignature Language="VB.NET" Value="Public Function ShowDialog (owner As IWin32Window) As DialogResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::DialogResult ShowDialog(System::Windows::Forms::IWin32Window ^ owner);" />
      <MemberSignature Language="F#" Value="member this.ShowDialog : System.Windows.Forms.IWin32Window -&gt; System.Windows.Forms.DialogResult" Usage="commonDialog.ShowDialog owner" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DialogResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="owner" Type="System.Windows.Forms.IWin32Window" />
      </Parameters>
      <Docs>
        <param name="owner">任何实现 <see cref="T:System.Windows.Forms.IWin32Window" />（表示将拥有模式对话框的顶级窗口）的对象。</param>
        <summary>运行具有指定所有者的通用对话框。</summary>
        <returns>如果用户在对话框中单击“确定”，则为 <see cref="F:System.Windows.Forms.DialogResult.OK" />；否则为 <see cref="F:System.Windows.Forms.DialogResult.Cancel" />****。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此版本的 <xref:System.Windows.Forms.CommonDialog.ShowDialog%2A> 方法允许您指定特定的窗体或控件，该窗体或控件将拥有显示的对话框。 如果使用不带任何参数的此方法的版本，则当前应用程序的当前活动窗口将自动拥有显示的对话框。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Tag">
      <MemberSignature Language="C#" Value="public object Tag { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Tag" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.CommonDialog.Tag" />
      <MemberSignature Language="VB.NET" Value="Public Property Tag As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Tag { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Tag : obj with get, set" Usage="System.Windows.Forms.CommonDialog.Tag" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.ComponentModel.Bindable(true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Bindable(true)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(null)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(null)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.ComponentModel.Localizable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Localizable(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.ComponentModel.TypeConverter(typeof(System.ComponentModel.StringConverter))]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.TypeConverter(typeof(System.ComponentModel.StringConverter))&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个对象，该对象包含控件的数据。</summary>
        <value>包含有关 <see cref="T:System.Windows.Forms.CommonDialog" /> 的数据的对象。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用此属性可存储有关控件的任意信息。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
