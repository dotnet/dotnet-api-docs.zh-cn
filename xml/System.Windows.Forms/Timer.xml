<Type Name="Timer" FullName="System.Windows.Forms.Timer">
  <Metadata><Meta Name="ms.openlocfilehash" Value="571b1beb4daa0761a85dc459f2434aca77ce703d" /><Meta Name="ms.sourcegitcommit" Value="11d168140aa8fade0768c2a9dde3e3bcacfdfb7d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="05/27/2020" /><Meta Name="ms.locfileid" Value="83948494" /></Metadata><TypeSignature Language="C#" Value="public class Timer : System.ComponentModel.Component" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Timer extends System.ComponentModel.Component" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.Timer" />
  <TypeSignature Language="VB.NET" Value="Public Class Timer&#xA;Inherits Component" />
  <TypeSignature Language="C++ CLI" Value="public ref class Timer : System::ComponentModel::Component" />
  <TypeSignature Language="F#" Value="type Timer = class&#xA;    inherit Component" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.Component</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("Tick")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("Interval")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.ToolboxItemFilter("System.Windows.Forms")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="302f5-101">实现按用户定义的时间间隔引发事件的计时器。</span><span class="sxs-lookup"><span data-stu-id="302f5-101">Implements a timer that raises an event at user-defined intervals.</span></span> <span data-ttu-id="302f5-102">此计时器最宜用于 Windows 窗体应用程序中，并且必须在窗口中使用。</span><span class="sxs-lookup"><span data-stu-id="302f5-102">This timer is optimized for use in Windows Forms applications and must be used in a window.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="302f5-103"><xref:System.Windows.Forms.Timer> 用于按用户定义的时间间隔引发事件。</span><span class="sxs-lookup"><span data-stu-id="302f5-103">A <xref:System.Windows.Forms.Timer> is used to raise an event at user-defined intervals.</span></span> <span data-ttu-id="302f5-104">此 Windows 计时器适用于单线程环境，在此环境中，UI 线程用于执行处理。</span><span class="sxs-lookup"><span data-stu-id="302f5-104">This Windows timer is designed for a single-threaded environment where UI threads are used to perform processing.</span></span> <span data-ttu-id="302f5-105">它要求用户代码提供 UI 消息泵，并且始终从同一线程操作，或将调用封送到其他线程。</span><span class="sxs-lookup"><span data-stu-id="302f5-105">It requires that the user code have a UI message pump available and always operate from the same thread, or marshal the call onto another thread.</span></span>  
  
 <span data-ttu-id="302f5-106">使用此计时器时，请使用 <xref:System.Windows.Forms.Timer.Tick> 事件执行轮询操作，或在指定的时间段内显示初始屏幕。</span><span class="sxs-lookup"><span data-stu-id="302f5-106">When you use this timer, use the <xref:System.Windows.Forms.Timer.Tick> event to perform a polling operation or to display a splash screen for a specified period of time.</span></span> <span data-ttu-id="302f5-107">每当 <xref:System.Windows.Forms.Timer.Enabled%2A> 属性设置为 `true` 并且 <xref:System.Windows.Forms.Timer.Interval%2A> 属性大于零时，将根据 <xref:System.Windows.Forms.Timer.Interval%2A> 属性设置以时间间隔引发 <xref:System.Windows.Forms.Timer.Tick> 事件。</span><span class="sxs-lookup"><span data-stu-id="302f5-107">Whenever the <xref:System.Windows.Forms.Timer.Enabled%2A> property is set to `true` and the <xref:System.Windows.Forms.Timer.Interval%2A> property is greater than zero, the <xref:System.Windows.Forms.Timer.Tick> event is raised at intervals based on the <xref:System.Windows.Forms.Timer.Interval%2A> property setting.</span></span>  
  
 <span data-ttu-id="302f5-108">此类提供一些方法来设置间隔，以及启动和停止计时器。</span><span class="sxs-lookup"><span data-stu-id="302f5-108">This class provides methods to set the interval, and to start and stop the timer.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="302f5-109">Windows 窗体计时器组件是单线程的，且限制为55毫秒的准确度。</span><span class="sxs-lookup"><span data-stu-id="302f5-109">The Windows Forms Timer component is single-threaded, and is limited to an accuracy of 55 milliseconds.</span></span> <span data-ttu-id="302f5-110">如果需要具有更高准确性的多线程计时器，请使用 <xref:System.Timers> 命名空间中的 <xref:System.Timers.Timer> 类。</span><span class="sxs-lookup"><span data-stu-id="302f5-110">If you require a multithreaded timer with greater accuracy, use the <xref:System.Timers.Timer> class in the <xref:System.Timers> namespace.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="302f5-111">下面的示例实现了一个简单的间隔计时器，每隔五秒就会发出警报。</span><span class="sxs-lookup"><span data-stu-id="302f5-111">The following example implements a simple interval timer, which sets off an alarm every five seconds.</span></span> <span data-ttu-id="302f5-112">当出现警报时，<xref:System.Windows.Forms.MessageBox> 会显示警报启动的次数，并提示用户确定计时器是否应继续运行。</span><span class="sxs-lookup"><span data-stu-id="302f5-112">When the alarm occurs, a <xref:System.Windows.Forms.MessageBox> displays a count of the number of times the alarm has started and prompts the user as to whether the timer should continue to run.</span></span>  
  
 [!code-cpp[Classic Timer Example 2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Timer Example 2/CPP/source.cpp#1)]
 [!code-csharp[Classic Timer Example 2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Timer Example 2/CS/source.cs#1)]
 [!code-vb[Classic Timer Example 2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Timer Example 2/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="302f5-113">初始化 <see cref="T:System.Windows.Forms.Timer" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="302f5-113">Initializes a new instance of the <see cref="T:System.Windows.Forms.Timer" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Timer.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="302f5-114">初始化 <see cref="T:System.Windows.Forms.Timer" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="302f5-114">Initializes a new instance of the <see cref="T:System.Windows.Forms.Timer" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="302f5-115">创建新计时器时，它将被禁用;也就是说，<xref:System.Windows.Forms.Timer.Enabled%2A> 设置为 `false`。</span><span class="sxs-lookup"><span data-stu-id="302f5-115">When a new timer is created, it is disabled; that is, <xref:System.Windows.Forms.Timer.Enabled%2A> is set to `false`.</span></span> <span data-ttu-id="302f5-116">若要启用计时器，请调用 <xref:System.Windows.Forms.Timer.Start%2A> 方法或将 <xref:System.Windows.Forms.Timer.Enabled%2A> 设置为 `true`。</span><span class="sxs-lookup"><span data-stu-id="302f5-116">To enable the timer, call the <xref:System.Windows.Forms.Timer.Start%2A> method or set <xref:System.Windows.Forms.Timer.Enabled%2A> to `true`.</span></span>  
  
 <span data-ttu-id="302f5-117">如果计时器处于禁用状态，并且计时器超出范围，则在发生垃圾回收时将释放计时器。</span><span class="sxs-lookup"><span data-stu-id="302f5-117">If the timer is disabled and the timer is out of scope, the timer will be disposed when garbage collection occurs.</span></span> <span data-ttu-id="302f5-118">如果计时器已启用（即使它超出范围），则不会进行垃圾回收。</span><span class="sxs-lookup"><span data-stu-id="302f5-118">If the timer is enabled, even if it is out of scope, it is not subject to garbage collection.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Timer.Enabled" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer (System.ComponentModel.IContainer container);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.ComponentModel.IContainer container) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Timer.#ctor(System.ComponentModel.IContainer)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (container As IContainer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer(System::ComponentModel::IContainer ^ container);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.Timer : System.ComponentModel.IContainer -&gt; System.Windows.Forms.Timer" Usage="new System.Windows.Forms.Timer container" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="container" Type="System.ComponentModel.IContainer" />
      </Parameters>
      <Docs>
        <param name="container"><span data-ttu-id="302f5-119">表示计时器的容器的 <see cref="T:System.ComponentModel.IContainer" />。</span><span class="sxs-lookup"><span data-stu-id="302f5-119">An <see cref="T:System.ComponentModel.IContainer" /> that represents the container for the timer.</span></span></param>
        <summary><span data-ttu-id="302f5-120">将指定的容器与 <see cref="T:System.Windows.Forms.Timer" /> 类的新实例一起初始化。</span><span class="sxs-lookup"><span data-stu-id="302f5-120">Initializes a new instance of the <see cref="T:System.Windows.Forms.Timer" /> class together with the specified container.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="302f5-121"><xref:System.Windows.Forms.Timer> 构造函数使你能够将 <xref:System.Windows.Forms.Timer> 与任何 <xref:System.ComponentModel.Container> 对象相关联。</span><span class="sxs-lookup"><span data-stu-id="302f5-121">The <xref:System.Windows.Forms.Timer> constructor enables you to associate a <xref:System.Windows.Forms.Timer> with any <xref:System.ComponentModel.Container> object.</span></span> <span data-ttu-id="302f5-122">通过将 <xref:System.Windows.Forms.Timer> 与此关联，你可以将对 <xref:System.Windows.Forms.Timer> 生存期的控制移交给 <xref:System.ComponentModel.Container>。</span><span class="sxs-lookup"><span data-stu-id="302f5-122">By associating the <xref:System.Windows.Forms.Timer> like this, you hand over control of the lifetime of the <xref:System.Windows.Forms.Timer> to the <xref:System.ComponentModel.Container>.</span></span> <span data-ttu-id="302f5-123">如果你在应用程序中使用多个组件，并且想要同时处理它们，这会很有用。</span><span class="sxs-lookup"><span data-stu-id="302f5-123">This can be useful if you use a number of components in your application and want to dispose of all of them simultaneously.</span></span> <span data-ttu-id="302f5-124">例如，如果将 <xref:System.Windows.Forms.ToolTip>、<xref:System.Windows.Forms.ImageList>和 <xref:System.Windows.Forms.Timer> 与 <xref:System.ComponentModel.Container>相关联，则对 <xref:System.ComponentModel.Container.Dispose%2A> 调用 <xref:System.ComponentModel.Container> 也将强制处理这些组件。</span><span class="sxs-lookup"><span data-stu-id="302f5-124">For example, if you associate a <xref:System.Windows.Forms.ToolTip>, an <xref:System.Windows.Forms.ImageList>, and a <xref:System.Windows.Forms.Timer> with a <xref:System.ComponentModel.Container>, calling <xref:System.ComponentModel.Container.Dispose%2A> on the <xref:System.ComponentModel.Container> will force disposal of all of these components as well.</span></span>  
  
 <span data-ttu-id="302f5-125">创建新计时器时，它将被禁用;也就是说，<xref:System.Windows.Forms.Timer.Enabled%2A> 设置为 `false`。</span><span class="sxs-lookup"><span data-stu-id="302f5-125">When a new timer is created, it is disabled; that is, <xref:System.Windows.Forms.Timer.Enabled%2A> is set to `false`.</span></span> <span data-ttu-id="302f5-126">若要启用计时器，请调用 <xref:System.Windows.Forms.Timer.Start%2A> 方法或将 <xref:System.Windows.Forms.Timer.Enabled%2A> 设置为 `true`。</span><span class="sxs-lookup"><span data-stu-id="302f5-126">To enable the timer, call the <xref:System.Windows.Forms.Timer.Start%2A> method or set <xref:System.Windows.Forms.Timer.Enabled%2A> to `true`.</span></span>  
  
 <span data-ttu-id="302f5-127">此实例将一直存在，直到其容器将其发布到垃圾回收。</span><span class="sxs-lookup"><span data-stu-id="302f5-127">This instance will exist until its container releases it to garbage collection.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Timer.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="timer.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing"><span data-ttu-id="302f5-128"><see langword="true" /> 表示释放托管资源和非托管资源。</span><span class="sxs-lookup"><span data-stu-id="302f5-128"><see langword="true" /> to release both managed and unmanaged resources.</span></span> <span data-ttu-id="302f5-129">设置为 <see langword="false" /> 将只释放非托管资源。</span><span class="sxs-lookup"><span data-stu-id="302f5-129"><see langword="false" /> to release only the unmanaged resources.</span></span></param>
        <summary><span data-ttu-id="302f5-130">释放由计时器使用的资源（内存除外）。</span><span class="sxs-lookup"><span data-stu-id="302f5-130">Disposes of the resources, other than memory, used by the timer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="302f5-131">使用完计时器后，调用 <xref:System.Windows.Forms.Timer.Dispose%2A>。</span><span class="sxs-lookup"><span data-stu-id="302f5-131">Call <xref:System.Windows.Forms.Timer.Dispose%2A> when you are finished using the timer.</span></span> <span data-ttu-id="302f5-132"><xref:System.Windows.Forms.Timer.Dispose%2A> 方法使计时器处于不可用状态。</span><span class="sxs-lookup"><span data-stu-id="302f5-132">The <xref:System.Windows.Forms.Timer.Dispose%2A> method leaves the timer in an unusable state.</span></span> <span data-ttu-id="302f5-133">调用 <xref:System.Windows.Forms.Timer.Dispose%2A>后，必须释放对计时器的所有引用，以便垃圾回收将其占用的内存回收。</span><span class="sxs-lookup"><span data-stu-id="302f5-133">After you call <xref:System.Windows.Forms.Timer.Dispose%2A>, you must release all references to the timer so the memory it was occupying can be reclaimed by garbage collection.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="302f5-134">在释放对计时器的最后一个引用之前，请始终调用 <xref:System.Windows.Forms.Timer.Dispose%2A>。</span><span class="sxs-lookup"><span data-stu-id="302f5-134">Always call <xref:System.Windows.Forms.Timer.Dispose%2A> before you release your last reference to the timer.</span></span> <span data-ttu-id="302f5-135">否则，在垃圾回收调用 timer 对象的析构函数之前，将不会释放计时器使用的资源。</span><span class="sxs-lookup"><span data-stu-id="302f5-135">Otherwise, the resources the timer is using will not be freed until garbage collection calls the destructor of the timer object.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Enabled">
      <MemberSignature Language="C#" Value="public virtual bool Enabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Enabled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Timer.Enabled" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property Enabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool Enabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Enabled : bool with get, set" Usage="System.Windows.Forms.Timer.Enabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="302f5-136">获取或设置计时器是否正在运行。</span><span class="sxs-lookup"><span data-stu-id="302f5-136">Gets or sets whether the timer is running.</span></span></summary>
        <value><span data-ttu-id="302f5-137">如果计时器当前处于启用状态，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="302f5-137"><see langword="true" /> if the timer is currently enabled; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="302f5-138">默认为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="302f5-138">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="302f5-139">当值 `true`时，计时器不会进行垃圾回收。</span><span class="sxs-lookup"><span data-stu-id="302f5-139">The timer is not subject to garbage collection when the value is `true`.</span></span>  
  
 <span data-ttu-id="302f5-140">调用 <xref:System.Windows.Forms.Timer.Start%2A> 方法与将 <xref:System.Windows.Forms.Timer.Enabled%2A> 设置为 `true`相同。</span><span class="sxs-lookup"><span data-stu-id="302f5-140">Calling the <xref:System.Windows.Forms.Timer.Start%2A> method is the same as setting <xref:System.Windows.Forms.Timer.Enabled%2A> to `true`.</span></span> <span data-ttu-id="302f5-141">同样，调用 <xref:System.Windows.Forms.Timer.Stop%2A> 方法与将 <xref:System.Windows.Forms.Timer.Enabled%2A> 设置为 `false`相同。</span><span class="sxs-lookup"><span data-stu-id="302f5-141">Likewise, calling the <xref:System.Windows.Forms.Timer.Stop%2A> method is the same as setting <xref:System.Windows.Forms.Timer.Enabled%2A> to `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="302f5-142">下面的示例实现了一个简单的间隔计时器，每隔五秒就会发出警报。</span><span class="sxs-lookup"><span data-stu-id="302f5-142">The following example implements a simple interval timer, which sets off an alarm every five seconds.</span></span> <span data-ttu-id="302f5-143">警报发生时，<xref:System.Windows.Forms.MessageBox> 会显示警报启动的次数，并提示用户计时器是否应继续运行。</span><span class="sxs-lookup"><span data-stu-id="302f5-143">When the alarm occurs, a <xref:System.Windows.Forms.MessageBox> displays a count of the number of times the alarm has started and prompts the user whether the timer should continue to run.</span></span>  
  
 [!code-cpp[Classic Timer Example 2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Timer Example 2/CPP/source.cpp#1)]
 [!code-csharp[Classic Timer Example 2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Timer Example 2/CS/source.cs#1)]
 [!code-vb[Classic Timer Example 2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Timer Example 2/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Interval">
      <MemberSignature Language="C#" Value="public int Interval { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Interval" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Timer.Interval" />
      <MemberSignature Language="VB.NET" Value="Public Property Interval As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Interval { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.Interval : int with get, set" Usage="System.Windows.Forms.Timer.Interval" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(100)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="302f5-144">获取或设置在相对于上一次发生的 <see cref="E:System.Windows.Forms.Timer.Tick" /> 事件引发 <see cref="E:System.Windows.Forms.Timer.Tick" /> 事件之前的时间（以毫秒为单位）。</span><span class="sxs-lookup"><span data-stu-id="302f5-144">Gets or sets the time, in milliseconds, before the <see cref="E:System.Windows.Forms.Timer.Tick" /> event is raised relative to the last occurrence of the <see cref="E:System.Windows.Forms.Timer.Tick" /> event.</span></span></summary>
        <value><span data-ttu-id="302f5-145"><see cref="T:System.Int32" /> 指定在相对于上一次发生的 <see cref="E:System.Windows.Forms.Timer.Tick" /> 事件引发 <see cref="E:System.Windows.Forms.Timer.Tick" /> 事件之前的毫秒数。</span><span class="sxs-lookup"><span data-stu-id="302f5-145">An <see cref="T:System.Int32" /> specifying the number of milliseconds before the <see cref="E:System.Windows.Forms.Timer.Tick" /> event is raised relative to the last occurrence of the <see cref="E:System.Windows.Forms.Timer.Tick" /> event.</span></span> <span data-ttu-id="302f5-146">该值不能小于 1。</span><span class="sxs-lookup"><span data-stu-id="302f5-146">The value cannot be less than one.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="302f5-147">若要获取间隔中的秒数，请将此数字除以1000。</span><span class="sxs-lookup"><span data-stu-id="302f5-147">To get the number of seconds in the interval, divide this number by 1,000.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="302f5-148">下面的代码示例实现了一个简单的间隔计时器，每隔五秒就会发出警报。</span><span class="sxs-lookup"><span data-stu-id="302f5-148">The following code example implements a simple interval timer, which sets off an alarm every five seconds.</span></span> <span data-ttu-id="302f5-149">警报发生时，<xref:System.Windows.Forms.MessageBox> 会显示警报启动的次数，并提示用户计时器是否应继续运行。</span><span class="sxs-lookup"><span data-stu-id="302f5-149">When the alarm occurs, a <xref:System.Windows.Forms.MessageBox> displays a count of the number of times the alarm has started and prompts the user whether the timer should continue to run.</span></span>  
  
 [!code-cpp[Classic Timer Example 2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Timer Example 2/CPP/source.cpp#1)]
 [!code-csharp[Classic Timer Example 2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Timer Example 2/CS/source.cs#1)]
 [!code-vb[Classic Timer Example 2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Timer Example 2/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnTick">
      <MemberSignature Language="C#" Value="protected virtual void OnTick (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnTick(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Timer.OnTick(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnTick (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnTick(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnTick : EventArgs -&gt; unit&#xA;override this.OnTick : EventArgs -&gt; unit" Usage="timer.OnTick e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="302f5-150">包含事件数据的 <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="302f5-150">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span> <span data-ttu-id="302f5-151">这始终是 <see cref="F:System.EventArgs.Empty" />。</span><span class="sxs-lookup"><span data-stu-id="302f5-151">This is always <see cref="F:System.EventArgs.Empty" />.</span></span></param>
        <summary><span data-ttu-id="302f5-152">引发 <see cref="E:System.Windows.Forms.Timer.Tick" /> 事件。</span><span class="sxs-lookup"><span data-stu-id="302f5-152">Raises the <see cref="E:System.Windows.Forms.Timer.Tick" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="302f5-153">为每个计时器计时周期调用此方法。</span><span class="sxs-lookup"><span data-stu-id="302f5-153">This method is called for each timer tick.</span></span> <span data-ttu-id="302f5-154">它调用通过 <xref:System.Windows.Forms.Timer.Tick>添加的任何方法。</span><span class="sxs-lookup"><span data-stu-id="302f5-154">It calls any methods that are added through <xref:System.Windows.Forms.Timer.Tick>.</span></span> <span data-ttu-id="302f5-155">如果要从 <xref:System.Windows.Forms.Timer>继承，可以重写此方法。</span><span class="sxs-lookup"><span data-stu-id="302f5-155">If you are inheriting from <xref:System.Windows.Forms.Timer>, you can override this method.</span></span>  
  
 <span data-ttu-id="302f5-156">引发事件时，将通过委托调用事件处理程序。</span><span class="sxs-lookup"><span data-stu-id="302f5-156">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="302f5-157">有关详细信息，请参阅[处理和引发事件](/dotnet/standard/events/)。</span><span class="sxs-lookup"><span data-stu-id="302f5-157">For more information, see [Handling and Raising Events](/dotnet/standard/events/).</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="302f5-158">当在派生类中重写 <see cref="M:System.Windows.Forms.Timer.OnTick(System.EventArgs)" /> 时，请确保调用基类的 <see cref="M:System.Windows.Forms.Timer.OnTick(System.EventArgs)" /> 方法。</span><span class="sxs-lookup"><span data-stu-id="302f5-158">When overriding <see cref="M:System.Windows.Forms.Timer.OnTick(System.EventArgs)" /> in a derived class, make sure that you call the base class's <see cref="M:System.Windows.Forms.Timer.OnTick(System.EventArgs)" /> method.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public void Start ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Start() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Timer.Start" />
      <MemberSignature Language="VB.NET" Value="Public Sub Start ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Start();" />
      <MemberSignature Language="F#" Value="member this.Start : unit -&gt; unit" Usage="timer.Start " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="302f5-159">启动计时器。</span><span class="sxs-lookup"><span data-stu-id="302f5-159">Starts the timer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="302f5-160">还可以通过将 <xref:System.Windows.Forms.Timer.Enabled%2A> 属性设置为 `true`来启动计时器。</span><span class="sxs-lookup"><span data-stu-id="302f5-160">You can also start the timer by setting the <xref:System.Windows.Forms.Timer.Enabled%2A> property to `true`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="302f5-161">下面的代码示例实现了一个简单的间隔计时器，每隔五秒就会发出警报。</span><span class="sxs-lookup"><span data-stu-id="302f5-161">The following code example implements a simple interval timer, which sets off an alarm every five seconds.</span></span> <span data-ttu-id="302f5-162">警报发生时，<xref:System.Windows.Forms.MessageBox> 会显示警报启动的次数，并提示用户计时器是否应继续运行。</span><span class="sxs-lookup"><span data-stu-id="302f5-162">When the alarm occurs, a <xref:System.Windows.Forms.MessageBox> displays a count of the number of times the alarm has started and prompts the user whether the timer should continue to run.</span></span>  
  
 [!code-cpp[Classic Timer Example 2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Timer Example 2/CPP/source.cpp#1)]
 [!code-csharp[Classic Timer Example 2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Timer Example 2/CS/source.cs#1)]
 [!code-vb[Classic Timer Example 2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Timer Example 2/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Timer.Enabled" />
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public void Stop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Stop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Timer.Stop" />
      <MemberSignature Language="VB.NET" Value="Public Sub Stop ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Stop();" />
      <MemberSignature Language="F#" Value="member this.Stop : unit -&gt; unit" Usage="timer.Stop " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="302f5-163">停止计时器。</span><span class="sxs-lookup"><span data-stu-id="302f5-163">Stops the timer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="302f5-164">还可以通过将 <xref:System.Windows.Forms.Timer.Enabled%2A> 属性设置为 `false`来停止计时器。</span><span class="sxs-lookup"><span data-stu-id="302f5-164">You can also stop the timer by setting the <xref:System.Windows.Forms.Timer.Enabled%2A> property to `false`.</span></span> <span data-ttu-id="302f5-165">可以在同一应用程序会话中多次启用和禁用 <xref:System.Windows.Forms.Timer> 对象。</span><span class="sxs-lookup"><span data-stu-id="302f5-165">A <xref:System.Windows.Forms.Timer> object may be enabled and disabled multiple times within the same application session.</span></span>  
  
 <span data-ttu-id="302f5-166">如果通过调用 <xref:System.Windows.Forms.Timer.Stop%2A> 禁用了 <xref:System.Windows.Forms.Timer>，则调用 <xref:System.Windows.Forms.Timer.Start%2A> 将导致 <xref:System.Windows.Forms.Timer> 重新启动中断的间隔。</span><span class="sxs-lookup"><span data-stu-id="302f5-166">Calling <xref:System.Windows.Forms.Timer.Start%2A> after you have disabled a <xref:System.Windows.Forms.Timer> by calling <xref:System.Windows.Forms.Timer.Stop%2A> will cause the <xref:System.Windows.Forms.Timer> to restart the interrupted interval.</span></span> <span data-ttu-id="302f5-167">如果将 <xref:System.Windows.Forms.Timer> 设置为5000毫秒的间隔，并在3000毫秒内调用 <xref:System.Windows.Forms.Timer.Stop%2A>，则调用 <xref:System.Windows.Forms.Timer.Start%2A> 将导致 <xref:System.Windows.Forms.Timer> 在引发 <xref:System.Windows.Forms.Timer.Tick> 事件之前等待5000毫秒。</span><span class="sxs-lookup"><span data-stu-id="302f5-167">If your <xref:System.Windows.Forms.Timer> is set for a 5000-millisecond interval, and you call <xref:System.Windows.Forms.Timer.Stop%2A> at around 3000 milliseconds, calling <xref:System.Windows.Forms.Timer.Start%2A> will cause the <xref:System.Windows.Forms.Timer> to wait 5000 milliseconds before raising the <xref:System.Windows.Forms.Timer.Tick> event.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="302f5-168">对 Windows 窗体应用程序内的任何 <xref:System.Windows.Forms.Timer> 调用 Stop 可能导致立即处理来自应用程序中其他 <xref:System.Windows.Forms.Timer> 组件的消息，因为所有 <xref:System.Windows.Forms.Timer> 组件都在主应用程序线程上运行。</span><span class="sxs-lookup"><span data-stu-id="302f5-168">Calling Stop on any <xref:System.Windows.Forms.Timer> within a Windows Forms application can cause messages from other <xref:System.Windows.Forms.Timer> components in the application to be processed immediately, because all <xref:System.Windows.Forms.Timer> components operate on the main application thread.</span></span> <span data-ttu-id="302f5-169">如果有两个 <xref:System.Windows.Forms.Timer> 组件，一个设置为700毫秒，一组设置为500毫秒，在第一 <xref:System.Windows.Forms.Timer>调用 <xref:System.Windows.Forms.Timer.Stop%2A> 时，应用程序可能首先收到第二个组件的事件回调。</span><span class="sxs-lookup"><span data-stu-id="302f5-169">If you have two <xref:System.Windows.Forms.Timer> components, one set to 700 milliseconds and one set to 500 milliseconds, and you call <xref:System.Windows.Forms.Timer.Stop%2A> on the first <xref:System.Windows.Forms.Timer>, your application may receive an event callback for the second component first.</span></span> <span data-ttu-id="302f5-170">如果这证明有问题，请考虑改用 <xref:System.Threading> 命名空间中的 <xref:System.Threading.Timer> 类。</span><span class="sxs-lookup"><span data-stu-id="302f5-170">If this proves problematic, consider using the <xref:System.Threading.Timer> class in the <xref:System.Threading> namespace instead.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="302f5-171">下面的代码示例实现了一个简单的间隔计时器，每隔五秒就会发出警报。</span><span class="sxs-lookup"><span data-stu-id="302f5-171">The following code example implements a simple interval timer, which sets off an alarm every five seconds.</span></span> <span data-ttu-id="302f5-172">警报发生时，<xref:System.Windows.Forms.MessageBox> 会显示警报启动的次数，并提示用户计时器是否应继续运行。</span><span class="sxs-lookup"><span data-stu-id="302f5-172">When the alarm occurs, a <xref:System.Windows.Forms.MessageBox> displays a count of the number of times the alarm has started and prompts the user whether the timer should continue to run.</span></span>  
  
 [!code-cpp[Classic Timer Example 2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Timer Example 2/CPP/source.cpp#1)]
 [!code-csharp[Classic Timer Example 2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Timer Example 2/CS/source.cs#1)]
 [!code-vb[Classic Timer Example 2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Timer Example 2/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Timer.Enabled" />
      </Docs>
    </Member>
    <Member MemberName="Tag">
      <MemberSignature Language="C#" Value="public object Tag { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Tag" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Timer.Tag" />
      <MemberSignature Language="VB.NET" Value="Public Property Tag As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Tag { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Tag : obj with get, set" Usage="System.Windows.Forms.Timer.Tag" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0;dotnet-plat-ext-5.0">
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0;dotnet-plat-ext-5.0">
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0;dotnet-plat-ext-5.0">
          <AttributeName>System.ComponentModel.Localizable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0;dotnet-plat-ext-5.0">
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.ComponentModel.StringConverter))</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="302f5-173">获取或设置一个任意字符串，表示某种类型的用户状态。</span><span class="sxs-lookup"><span data-stu-id="302f5-173">Gets or sets an arbitrary string representing some type of user state.</span></span></summary>
        <value><span data-ttu-id="302f5-174">一个任意字符串，表示某种类型的用户状态。</span><span class="sxs-lookup"><span data-stu-id="302f5-174">An arbitrary string representing some type of user state.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Tick">
      <MemberSignature Language="C#" Value="public event EventHandler Tick;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Tick" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Timer.Tick" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Tick As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Tick;" />
      <MemberSignature Language="F#" Value="member this.Tick : EventHandler " Usage="member this.Tick : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="302f5-175">当指定的计时器间隔已过去而且计时器处于启用状态时发生。</span><span class="sxs-lookup"><span data-stu-id="302f5-175">Occurs when the specified timer interval has elapsed and the timer is enabled.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="302f5-176">从 <xref:System.Windows.Forms.Timer.Tick> 事件内对 <xref:System.Diagnostics.Debug> 类调用 <xref:System.Diagnostics.Debug.Assert%2A> 方法可能不会按预期方式运行，因为显示 "断言" 对话框可能会导致 Windows 反复引发 <xref:System.Windows.Forms.Timer.Tick> 事件。</span><span class="sxs-lookup"><span data-stu-id="302f5-176">Calling the <xref:System.Diagnostics.Debug.Assert%2A> method on the <xref:System.Diagnostics.Debug> class from within the <xref:System.Windows.Forms.Timer.Tick> event may not behave as expected, as displaying the assertion dialog box may cause Windows to raise the <xref:System.Windows.Forms.Timer.Tick> event repeatedly.</span></span> <span data-ttu-id="302f5-177">建议你避免在此事件内测试断言，并改为使用 <xref:System.Diagnostics.Debug.Write%2A>、<xref:System.Diagnostics.Debug.WriteIf%2A>、<xref:System.Diagnostics.Debug.WriteLine%2A>或 <xref:System.Diagnostics.Debug.WriteLineIf%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="302f5-177">We recommend that you refrain from testing assertions within this event, and use the <xref:System.Diagnostics.Debug.Write%2A>, <xref:System.Diagnostics.Debug.WriteIf%2A>, <xref:System.Diagnostics.Debug.WriteLine%2A>, or <xref:System.Diagnostics.Debug.WriteLineIf%2A> methods instead.</span></span>  
  
 <span data-ttu-id="302f5-178">有关处理事件的详细信息，请参阅[处理和引发事件](/dotnet/standard/events/)。</span><span class="sxs-lookup"><span data-stu-id="302f5-178">For more information about handling events, see [Handling and Raising Events](/dotnet/standard/events/).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="302f5-179">下面的代码示例实现了一个简单的间隔计时器，每隔五秒就会发出警报。</span><span class="sxs-lookup"><span data-stu-id="302f5-179">The following code example implements a simple interval timer, which sets off an alarm every five seconds.</span></span> <span data-ttu-id="302f5-180">警报发生时，<xref:System.Windows.Forms.MessageBox> 会显示警报启动的次数，并提示用户计时器是否应继续运行。</span><span class="sxs-lookup"><span data-stu-id="302f5-180">When the alarm occurs, a <xref:System.Windows.Forms.MessageBox> displays a count of the number of times the alarm has started and prompts the user whether the timer should continue to run.</span></span>  
  
 [!code-cpp[Classic Timer Example 2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Timer Example 2/CPP/source.cpp#1)]
 [!code-csharp[Classic Timer Example 2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Timer Example 2/CS/source.cs#1)]
 [!code-vb[Classic Timer Example 2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Timer Example 2/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Timer.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="timer.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="302f5-181">返回表示 <see cref="T:System.Windows.Forms.Timer" /> 的字符串。</span><span class="sxs-lookup"><span data-stu-id="302f5-181">Returns a string that represents the <see cref="T:System.Windows.Forms.Timer" />.</span></span></summary>
        <returns><span data-ttu-id="302f5-182">表示当前 <see cref="T:System.Windows.Forms.Timer" /> 的字符串。</span><span class="sxs-lookup"><span data-stu-id="302f5-182">A string that represents the current <see cref="T:System.Windows.Forms.Timer" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="302f5-183"><xref:System.Windows.Forms.Timer.ToString%2A> 方法返回一个字符串，其中包含 <xref:System.Windows.Forms.Timer.Interval%2A> 属性的值。</span><span class="sxs-lookup"><span data-stu-id="302f5-183">The <xref:System.Windows.Forms.Timer.ToString%2A> method returns a string that includes the value of the <xref:System.Windows.Forms.Timer.Interval%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
