<Type Name="DataGridView" FullName="System.Windows.Forms.DataGridView">
  <Metadata><Meta Name="ms.openlocfilehash" Value="53dcd8a829bf858d82ac716d1a5cb08586e66cb0" /><Meta Name="ms.sourcegitcommit" Value="13a6cb6fba7e05947f15d8d6cc802703ae9c21d5" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/18/2020" /><Meta Name="ms.locfileid" Value="90792339" /></Metadata><TypeSignature Language="C#" Value="public class DataGridView : System.Windows.Forms.Control, System.ComponentModel.ISupportInitialize" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DataGridView extends System.Windows.Forms.Control implements class System.ComponentModel.ISupportInitialize" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.DataGridView" />
  <TypeSignature Language="VB.NET" Value="Public Class DataGridView&#xA;Inherits Control&#xA;Implements ISupportInitialize" />
  <TypeSignature Language="C++ CLI" Value="public ref class DataGridView : System::Windows::Forms::Control, System::ComponentModel::ISupportInitialize" />
  <TypeSignature Language="F#" Value="type DataGridView = class&#xA;    inherit Control&#xA;    interface ISupportInitialize" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Forms.Control</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ComponentModel.ISupportInitialize</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[System.ComponentModel.ComplexBindingProperties("DataSource", "DataMember")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.ComponentModel.ComplexBindingProperties("DataSource", "DataMember")&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[System.ComponentModel.DefaultEvent("CellContentClick")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultEvent("CellContentClick")&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName Language="C#">[System.ComponentModel.Designer("System.Windows.Forms.Design.DataGridViewDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.ComponentModel.Designer("System.Windows.Forms.Design.DataGridViewDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName Language="C#">[System.ComponentModel.Editor("System.Windows.Forms.Design.DataGridViewComponentEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.ComponentModel.ComponentEditor))]</AttributeName>
      <AttributeName Language="F#">[&lt;System.ComponentModel.Editor("System.Windows.Forms.Design.DataGridViewComponentEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.ComponentModel.ComponentEditor))&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[System.Windows.Forms.Docking(System.Windows.Forms.DockingBehavior.Ask)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Windows.Forms.Docking(System.Windows.Forms.DockingBehavior.Ask)&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName Language="C#">[System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.AutoDispatch)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.AutoDispatch)&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName Language="C#">[System.Runtime.InteropServices.ComVisible(true)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.ComVisible(true)&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
      <AttributeName Language="C#">[System.ComponentModel.Designer("System.Windows.Forms.Design.DataGridViewDesigner, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.ComponentModel.Designer("System.Windows.Forms.Design.DataGridViewDesigner, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
      <AttributeName Language="C#">[System.ComponentModel.Editor("System.Windows.Forms.Design.DataGridViewComponentEditor, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.ComponentModel.ComponentEditor))]</AttributeName>
      <AttributeName Language="F#">[&lt;System.ComponentModel.Editor("System.Windows.Forms.Design.DataGridViewComponentEditor, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.ComponentModel.ComponentEditor))&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>在可自定义的网格中显示数据。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.DataGridView>控件提供了一个可自定义的表来显示数据。 <xref:System.Windows.Forms.DataGridView>类允许通过使用、、和等属性自定义单元格、行、列和边框 <xref:System.Windows.Forms.DataGridView.DefaultCellStyle%2A> <xref:System.Windows.Forms.DataGridView.ColumnHeadersDefaultCellStyle%2A> <xref:System.Windows.Forms.DataGridView.CellBorderStyle%2A> <xref:System.Windows.Forms.DataGridView.GridColor%2A> 。 有关详细信息，请参阅 [Windows 窗体 DataGridView 控件中的基本格式设置和样式](/dotnet/framework/winforms/controls/basic-formatting-and-styling-in-the-windows-forms-datagridview-control)。  
  
 您可以使用 <xref:System.Windows.Forms.DataGridView> 控件来显示包含或不包含基础数据源的数据。 如果没有指定数据源，则可以创建包含数据的列和行，并 <xref:System.Windows.Forms.DataGridView> 使用和属性将它们直接添加到中 <xref:System.Windows.Forms.DataGridView.Rows%2A> <xref:System.Windows.Forms.DataGridView.Columns%2A> 。 你还可以使用 <xref:System.Windows.Forms.DataGridView.Rows%2A> 集合来访问 <xref:System.Windows.Forms.DataGridViewRow> 对象，并使用 <xref:System.Windows.Forms.DataGridViewRow.Cells%2A?displayProperty=nameWithType> 属性直接读取或写入单元格值。 <xref:System.Windows.Forms.DataGridView.Item%2A>索引器还提供对单元格的直接访问。  
  
 作为手动填充控件的替代方法，您可以设置 <xref:System.Windows.Forms.DataGridView.DataSource%2A> 和 <xref:System.Windows.Forms.DataGridView.DataMember%2A> 属性以将绑定 <xref:System.Windows.Forms.DataGridView> 到数据源，并使用数据自动填充。 有关详细信息，请参阅在 [Windows 窗体 DataGridView 控件中显示数据](/dotnet/framework/winforms/controls/displaying-data-in-the-windows-forms-datagridview-control)。  
  
 处理大量数据时，可以将 <xref:System.Windows.Forms.DataGridView.VirtualMode%2A> 属性设置为， `true` 以显示可用数据的子集。 虚拟模式要求实现从其填充控件的数据缓存 <xref:System.Windows.Forms.DataGridView> 。 有关详细信息，请参阅 [Windows 窗体 DataGridView 控件中的数据显示模式](/dotnet/framework/winforms/controls/data-display-modes-in-the-windows-forms-datagridview-control)。  
  
 有关控件中可用功能的其他信息 <xref:System.Windows.Forms.DataGridView> ，请参阅 [DataGridView 控件](/dotnet/framework/winforms/controls/datagridview-control-windows-forms)。 下表提供了指向常见任务的直接链接。  
  
-   [如何：将数据绑定到 Windows 窗体 DataGridView 控件](/dotnet/framework/winforms/controls/how-to-bind-data-to-the-windows-forms-datagridview-control)  
  
-   [如何：向 Windows 窗体 DataGridView 控件中的各个单元格添加工具提示](/dotnet/framework/winforms/controls/add-tooltips-to-individual-cells-in-a-wf-datagridview-control)  
  
-   [如何：在 Windows 窗体 DataGridView 控件中设置字体和颜色样式](/dotnet/framework/winforms/controls/how-to-set-font-and-color-styles-in-the-windows-forms-datagridview-control)  
  
-   [如何：使用设计器更改 Windows 窗体 DataGridView 列类型](/dotnet/framework/winforms/controls/change-the-type-of-a-wf-datagridview-column-using-the-designer)  
  
-   [如何：使用设计器将数据绑定到 Windows 窗体 DataGridView 控件](/dotnet/framework/winforms/controls/bind-data-to-the-datagrid-using-the-designer)  
  
-   [如何：使用设计器设置 Windows 窗体 DataGridView 控件的默认单元格样式和数据格式](/dotnet/framework/winforms/controls/default-cell-styles-datagridview)  
  
-   [如何：在 Windows 窗体 DataGridView 控件中设置数据格式](/dotnet/framework/winforms/controls/how-to-format-data-in-the-windows-forms-datagridview-control)  
  
-   [演练：在 Windows 窗体 DataGridView 控件中验证数据](/dotnet/framework/winforms/controls/walkthrough-validating-data-in-the-windows-forms-datagridview-control)  
  
-   [如何：在 Windows 窗体 DataGridView 控件中自定义数据格式设置](/dotnet/framework/winforms/controls/how-to-customize-data-formatting-in-the-windows-forms-datagridview-control)  
  
-   [演练：使用两个 Windows 窗体 DataGridView 控件创建主窗体/详细信息窗体](/dotnet/framework/winforms/controls/creating-a-master-detail-form-using-two-datagridviews)  
  
<xref:System.Windows.Forms.DataGridView>控件将替换并扩展 <xref:System.Windows.Forms.DataGrid> 控件。 有关详细信息，请参阅 [Windows 窗体 DataGridView 和 DataGrid 控件之间的差异](/dotnet/framework/winforms/controls/differences-between-the-windows-forms-datagridview-and-datagrid-controls)。  
  
> [!NOTE]
> <xref:System.Windows.Forms.DataGridView>控件 <xref:System.Windows.Forms.Control.ContextMenu%2A> 从继承和 <xref:System.Windows.Forms.Control.ContextMenuStrip%2A> 属性 <xref:System.Windows.Forms.Control> ，但仅支持 <xref:System.Windows.Forms.Control.ContextMenuStrip%2A> 属性。 将 <xref:System.Windows.Forms.Control.ContextMenu%2A> 属性与控件一起使用 <xref:System.Windows.Forms.DataGridView> 不起作用。
  
## Examples  
 下面的代码示例演示如何初始化未绑定的 <xref:System.Windows.Forms.DataGridView> 控件。  
  
 [!code-csharp[System.Windows.Forms.DataGridViewSimpleUnbound#00](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewSimpleUnbound/CS/simpleunbound.cs#00)]
 [!code-vb[System.Windows.Forms.DataGridViewSimpleUnbound#00](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewSimpleUnbound/VB/simpleunbound.vb#00)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
    <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-overview-windows-forms">DataGridView 控件概述（Windows 窗体）</related>
    <related type="Article" href="/dotnet/framework/winforms/controls/basic-formatting-and-styling-in-the-windows-forms-datagridview-control">Windows 窗体 DataGridView 控件中的基本格式设置和样式设置</related>
    <related type="Article" href="/dotnet/framework/winforms/controls/displaying-data-in-the-windows-forms-datagridview-control">在 Windows 窗体 DataGridView 控件中显示数据</related>
    <related type="Article" href="/dotnet/framework/winforms/controls/data-display-modes-in-the-windows-forms-datagridview-control">Windows 窗体 DataGridView 控件中的数据显示模式</related>
    <related type="Article" href="/dotnet/framework/winforms/controls/differences-between-the-windows-forms-datagridview-and-datagrid-controls">Windows 窗体 DataGridView 控件和 DataGrid 控件之间的区别</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataGridView ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DataGridView();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Windows.Forms.DataGridView" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 下表显示了 <xref:System.Windows.Forms.DataGridView> 类的某个实例的初始属性值。  
  
|Property|初始值|  
|--------------|-------------------|  
|<xref:System.Windows.Forms.DataGridView.AllowUserToAddRows%2A>|`true`|  
|<xref:System.Windows.Forms.DataGridView.AllowUserToDeleteRows%2A>|`true`|  
|<xref:System.Windows.Forms.DataGridView.AllowUserToOrderColumns%2A>|`false`|  
|<xref:System.Windows.Forms.DataGridView.AllowUserToResizeColumns%2A>|`true`|  
|<xref:System.Windows.Forms.DataGridView.AllowUserToResizeRows%2A>|`true`|  
|<xref:System.Windows.Forms.DataGridView.AutoGenerateColumns%2A>|`true`|  
|<xref:System.Windows.Forms.DataGridView.AutoSizeColumnsMode%2A>|<xref:System.Windows.Forms.DataGridViewAutoSizeColumnsMode.None>|  
|<xref:System.Windows.Forms.DataGridView.AutoSizeRowsMode%2A>|<xref:System.Windows.Forms.DataGridViewAutoSizeRowsMode.None>|  
|<xref:System.Windows.Forms.DataGridView.ClipboardCopyMode%2A>|<xref:System.Windows.Forms.DataGridViewClipboardCopyMode.EnableWithAutoHeaderText>|  
|<xref:System.Windows.Forms.DataGridView.ColumnHeadersHeightSizeMode%2A>|<xref:System.Windows.Forms.DataGridViewColumnHeadersHeightSizeMode.EnableResizing>|  
|<xref:System.Windows.Forms.DataGridView.ColumnHeadersVisible%2A>|`true`|  
|<xref:System.Windows.Forms.DataGridView.EditMode%2A>|<xref:System.Windows.Forms.DataGridViewEditMode.EditOnKeystrokeOrF2>|  
|<xref:System.Windows.Forms.DataGridView.MultiSelect%2A>|`true`|  
|<xref:System.Windows.Forms.DataGridView.ReadOnly%2A>|`false`|  
|<xref:System.Windows.Forms.DataGridView.RowHeadersVisible%2A>|`true`|  
|<xref:System.Windows.Forms.DataGridView.RowHeadersWidthSizeMode%2A>|<xref:System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode.EnableResizing>|  
|<xref:System.Windows.Forms.DataGridView.SelectionMode%2A>|<xref:System.Windows.Forms.DataGridViewSelectionMode.RowHeaderSelect>|  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="AccessibilityNotifyCurrentCellChanged">
      <MemberSignature Language="C#" Value="protected virtual void AccessibilityNotifyCurrentCellChanged (System.Drawing.Point cellAddress);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void AccessibilityNotifyCurrentCellChanged(valuetype System.Drawing.Point cellAddress) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.AccessibilityNotifyCurrentCellChanged(System.Drawing.Point)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub AccessibilityNotifyCurrentCellChanged (cellAddress As Point)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void AccessibilityNotifyCurrentCellChanged(System::Drawing::Point cellAddress);" />
      <MemberSignature Language="F#" Value="abstract member AccessibilityNotifyCurrentCellChanged : System.Drawing.Point -&gt; unit&#xA;override this.AccessibilityNotifyCurrentCellChanged : System.Drawing.Point -&gt; unit" Usage="dataGridView.AccessibilityNotifyCurrentCellChanged cellAddress" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cellAddress" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="cellAddress">一个 <see cref="T:System.Drawing.Point" />，指示新的当前单元格的行和列索引。</param>
        <summary>当新单元格成为当前的单元格时，通知可访问的客户端应用程序。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法将指定的行索引和列索引转换为 `objectID` 和 `childID` 参数，并 <xref:System.Windows.Forms.Control.AccessibilityNotifyClients%28System.Windows.Forms.AccessibleEvents%2CSystem.Int32%2CSystem.Int32%29> 使用枚举的和值调用方法重载两次 <xref:System.Windows.Forms.AccessibleEvents.Focus> <xref:System.Windows.Forms.AccessibleEvents.Selection> <xref:System.Windows.Forms.AccessibleEvents> 。 `objectID`和 `childID` 通过对显示顺序中的可见行和列进行编号来确定，如果行标题或列标题可见，则对其进行计数，从1开始。 例如，如果列标题可见，则 `objectID` 第一个可见 nonheader 行的是2。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="cellAddress" /> 的 <see cref="P:System.Drawing.Point.X" /> 属性值小于 0 或大于控件中的列数减 1。  
  
- 或 - 
<paramref name="cellAddress" /> 的 <see cref="P:System.Drawing.Point.Y" /> 属性值小于 0 或大于控件中的行数减 1。</exception>
        <block subset="none" type="overrides"><para>自定义 <see cref="T:System.Windows.Forms.DataGridView" /> 控件和修改当前单元格的更改方式和时间时，重写此方法。 例如，如果您创建了一个自定义行类型，该类型将多个单元格合并为单个单元，并相应地修改了导航，则可以重写此方法以提供对所做更改的辅助功能支持。</para></block>
        <altmember cref="T:System.Windows.Forms.AccessibleEvents" />
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="AdjustColumnHeaderBorderStyle">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.DataGridViewAdvancedBorderStyle AdjustColumnHeaderBorderStyle (System.Windows.Forms.DataGridViewAdvancedBorderStyle dataGridViewAdvancedBorderStyleInput, System.Windows.Forms.DataGridViewAdvancedBorderStyle dataGridViewAdvancedBorderStylePlaceholder, bool isFirstDisplayedColumn, bool isLastVisibleColumn);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Forms.DataGridViewAdvancedBorderStyle AdjustColumnHeaderBorderStyle(class System.Windows.Forms.DataGridViewAdvancedBorderStyle dataGridViewAdvancedBorderStyleInput, class System.Windows.Forms.DataGridViewAdvancedBorderStyle dataGridViewAdvancedBorderStylePlaceholder, bool isFirstDisplayedColumn, bool isLastVisibleColumn) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.AdjustColumnHeaderBorderStyle(System.Windows.Forms.DataGridViewAdvancedBorderStyle,System.Windows.Forms.DataGridViewAdvancedBorderStyle,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AdjustColumnHeaderBorderStyle (dataGridViewAdvancedBorderStyleInput As DataGridViewAdvancedBorderStyle, dataGridViewAdvancedBorderStylePlaceholder As DataGridViewAdvancedBorderStyle, isFirstDisplayedColumn As Boolean, isLastVisibleColumn As Boolean) As DataGridViewAdvancedBorderStyle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Windows::Forms::DataGridViewAdvancedBorderStyle ^ AdjustColumnHeaderBorderStyle(System::Windows::Forms::DataGridViewAdvancedBorderStyle ^ dataGridViewAdvancedBorderStyleInput, System::Windows::Forms::DataGridViewAdvancedBorderStyle ^ dataGridViewAdvancedBorderStylePlaceholder, bool isFirstDisplayedColumn, bool isLastVisibleColumn);" />
      <MemberSignature Language="F#" Value="abstract member AdjustColumnHeaderBorderStyle : System.Windows.Forms.DataGridViewAdvancedBorderStyle * System.Windows.Forms.DataGridViewAdvancedBorderStyle * bool * bool -&gt; System.Windows.Forms.DataGridViewAdvancedBorderStyle&#xA;override this.AdjustColumnHeaderBorderStyle : System.Windows.Forms.DataGridViewAdvancedBorderStyle * System.Windows.Forms.DataGridViewAdvancedBorderStyle * bool * bool -&gt; System.Windows.Forms.DataGridViewAdvancedBorderStyle" Usage="dataGridView.AdjustColumnHeaderBorderStyle (dataGridViewAdvancedBorderStyleInput, dataGridViewAdvancedBorderStylePlaceholder, isFirstDisplayedColumn, isLastVisibleColumn)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewAdvancedBorderStyle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataGridViewAdvancedBorderStyleInput" Type="System.Windows.Forms.DataGridViewAdvancedBorderStyle" />
        <Parameter Name="dataGridViewAdvancedBorderStylePlaceholder" Type="System.Windows.Forms.DataGridViewAdvancedBorderStyle" />
        <Parameter Name="isFirstDisplayedColumn" Type="System.Boolean" />
        <Parameter Name="isLastVisibleColumn" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="dataGridViewAdvancedBorderStyleInput">一个 <see cref="T:System.Windows.Forms.DataGridViewAdvancedBorderStyle" />，它表示要修改的列标题边框样式。</param>
        <param name="dataGridViewAdvancedBorderStylePlaceholder">一个 <see cref="T:System.Windows.Forms.DataGridViewAdvancedBorderStyle" />，用于存储对列标题边框样式进行的中间更改。</param>
        <param name="isFirstDisplayedColumn">如果要指示当前正在绘制的 <see cref="T:System.Windows.Forms.DataGridViewCell" /> 位于 <see cref="T:System.Windows.Forms.DataGridView" /> 上显示的第一列中，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
        <param name="isLastVisibleColumn">如果要指示当前正在绘制的 <see cref="T:System.Windows.Forms.DataGridViewCell" /> 位于 <see cref="P:System.Windows.Forms.DataGridViewColumn.Visible" /> 属性设置为 <see langword="true" /> 的 <see cref="T:System.Windows.Forms.DataGridView" /> 中的最后一列，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
        <summary>为当前正在绘制的 <see cref="T:System.Windows.Forms.DataGridView" /> 的列标题单元格调整 <see cref="T:System.Windows.Forms.DataGridViewAdvancedBorderStyle" />。</summary>
        <returns>一个 <see cref="T:System.Windows.Forms.DataGridViewAdvancedBorderStyle" />，表示当前列标题的边框样式。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.DataGridView>控件在内部调用 <xref:System.Windows.Forms.DataGridView.AdjustColumnHeaderBorderStyle%2A> 方法来确定列标题单元格的边框的外观。 <xref:System.Windows.Forms.DataGridView>控件通常使用 <xref:System.Windows.Forms.DataGridView.AdvancedColumnHeadersBorderStyle%2A> 参数的属性值 `dataGridViewAdvancedBorderStyleInput` 。

## Examples  
 下面的代码示例演示如何重写 <xref:System.Windows.Forms.DataGridView.AdjustColumnHeaderBorderStyle%2A> 方法以自定义列标题单元格的边框。 此代码示例是为类提供的更大示例的一部分 <xref:System.Windows.Forms.DataGridViewAdvancedBorderStyle> 。  
  
 [!code-csharp[System.Windows.Forms.DataGridViewAdvancedBorderStyle#15](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewAdvancedBorderStyle/CS/advancedborderstyle.cs#15)]
 [!code-vb[System.Windows.Forms.DataGridViewAdvancedBorderStyle#15](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewAdvancedBorderStyle/VB/advancedborderstyle.vb#15)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>如果要自定义列标题单元格的边框外观，请重写此方法。</para></block>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="AdjustedTopLeftHeaderBorderStyle">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.DataGridViewAdvancedBorderStyle AdjustedTopLeftHeaderBorderStyle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.DataGridViewAdvancedBorderStyle AdjustedTopLeftHeaderBorderStyle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.AdjustedTopLeftHeaderBorderStyle" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property AdjustedTopLeftHeaderBorderStyle As DataGridViewAdvancedBorderStyle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Windows::Forms::DataGridViewAdvancedBorderStyle ^ AdjustedTopLeftHeaderBorderStyle { System::Windows::Forms::DataGridViewAdvancedBorderStyle ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AdjustedTopLeftHeaderBorderStyle : System.Windows.Forms.DataGridViewAdvancedBorderStyle" Usage="System.Windows.Forms.DataGridView.AdjustedTopLeftHeaderBorderStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewAdvancedBorderStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 <see cref="T:System.Windows.Forms.DataGridView" /> 左上角单元格的边框样式。</summary>
        <value>一个 <see cref="T:System.Windows.Forms.DataGridViewAdvancedBorderStyle" />，表示 <see cref="T:System.Windows.Forms.DataGridView" /> 左上角单元格的边框样式。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 左上角的单元格是由列标题行和行标题列共享的单元格。 <xref:System.Windows.Forms.DataGridView>绘制左上角的单元格时，获取此属性的值。

## Examples  
 下面的代码示例演示如何重写 <xref:System.Windows.Forms.DataGridView.AdjustedTopLeftHeaderBorderStyle%2A> 属性以自定义左上角单元格的边框。 此代码示例是为类提供的更大示例的一部分 <xref:System.Windows.Forms.DataGridViewAdvancedBorderStyle> 。  
  
 [!code-csharp[System.Windows.Forms.DataGridViewAdvancedBorderStyle#12](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewAdvancedBorderStyle/CS/advancedborderstyle.cs#12)]
 [!code-vb[System.Windows.Forms.DataGridViewAdvancedBorderStyle#12](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewAdvancedBorderStyle/VB/advancedborderstyle.vb#12)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>如果要自定义左上角标题单元格的边框外观，请覆盖此属性。</para></block>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="AdvancedCellBorderStyle">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataGridViewAdvancedBorderStyle AdvancedCellBorderStyle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.DataGridViewAdvancedBorderStyle AdvancedCellBorderStyle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.AdvancedCellBorderStyle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AdvancedCellBorderStyle As DataGridViewAdvancedBorderStyle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::DataGridViewAdvancedBorderStyle ^ AdvancedCellBorderStyle { System::Windows::Forms::DataGridViewAdvancedBorderStyle ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AdvancedCellBorderStyle : System.Windows.Forms.DataGridViewAdvancedBorderStyle" Usage="System.Windows.Forms.DataGridView.AdvancedCellBorderStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewAdvancedBorderStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 <see cref="T:System.Windows.Forms.DataGridView" /> 中单元格的边框样式。</summary>
        <value>一个 <see cref="T:System.Windows.Forms.DataGridViewAdvancedBorderStyle" />，表示 <see cref="T:System.Windows.Forms.DataGridView" /> 中的单元格的边框样式。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用 <xref:System.Windows.Forms.DataGridView.AdvancedCellBorderStyle%2A> 属性自定义单元格边框的外观。 若要使用内置样式更改边框样式，请使用 <xref:System.Windows.Forms.DataGridView.CellBorderStyle%2A> 属性。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="AdvancedColumnHeadersBorderStyle">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataGridViewAdvancedBorderStyle AdvancedColumnHeadersBorderStyle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.DataGridViewAdvancedBorderStyle AdvancedColumnHeadersBorderStyle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.AdvancedColumnHeadersBorderStyle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AdvancedColumnHeadersBorderStyle As DataGridViewAdvancedBorderStyle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::DataGridViewAdvancedBorderStyle ^ AdvancedColumnHeadersBorderStyle { System::Windows::Forms::DataGridViewAdvancedBorderStyle ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AdvancedColumnHeadersBorderStyle : System.Windows.Forms.DataGridViewAdvancedBorderStyle" Usage="System.Windows.Forms.DataGridView.AdvancedColumnHeadersBorderStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewAdvancedBorderStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 <see cref="T:System.Windows.Forms.DataGridView" /> 中列标题单元格的边框样式。</summary>
        <value>一个 <see cref="T:System.Windows.Forms.DataGridViewAdvancedBorderStyle" />，表示 <see cref="T:System.Windows.Forms.DataGridView" /> 中的 <see cref="T:System.Windows.Forms.DataGridViewColumnHeaderCell" /> 对象的边框样式。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用 <xref:System.Windows.Forms.DataGridView.AdvancedColumnHeadersBorderStyle%2A> 属性自定义列标题单元格边框的外观。 若要使用内置样式更改边框样式，请使用 <xref:System.Windows.Forms.DataGridView.ColumnHeadersBorderStyle%2A> 属性。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="AdvancedRowHeadersBorderStyle">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataGridViewAdvancedBorderStyle AdvancedRowHeadersBorderStyle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.DataGridViewAdvancedBorderStyle AdvancedRowHeadersBorderStyle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.AdvancedRowHeadersBorderStyle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AdvancedRowHeadersBorderStyle As DataGridViewAdvancedBorderStyle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::DataGridViewAdvancedBorderStyle ^ AdvancedRowHeadersBorderStyle { System::Windows::Forms::DataGridViewAdvancedBorderStyle ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AdvancedRowHeadersBorderStyle : System.Windows.Forms.DataGridViewAdvancedBorderStyle" Usage="System.Windows.Forms.DataGridView.AdvancedRowHeadersBorderStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewAdvancedBorderStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 <see cref="T:System.Windows.Forms.DataGridView" /> 中行标题单元格的边框样式。</summary>
        <value>一个 <see cref="T:System.Windows.Forms.DataGridViewAdvancedBorderStyle" />，表示 <see cref="T:System.Windows.Forms.DataGridView" /> 中的 <see cref="T:System.Windows.Forms.DataGridViewRowHeaderCell" /> 对象的边框样式。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用 <xref:System.Windows.Forms.DataGridView.AdvancedRowHeadersBorderStyle%2A> 属性可自定义派生控件中行标题单元格边框的外观 <xref:System.Windows.Forms.DataGridView> 。 若要使用内置样式更改边框样式，请使用 <xref:System.Windows.Forms.DataGridView.RowHeadersBorderStyle%2A> 属性。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="AllowUserToAddRows">
      <MemberSignature Language="C#" Value="public bool AllowUserToAddRows { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowUserToAddRows" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.AllowUserToAddRows" />
      <MemberSignature Language="VB.NET" Value="Public Property AllowUserToAddRows As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AllowUserToAddRows { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AllowUserToAddRows : bool with get, set" Usage="System.Windows.Forms.DataGridView.AllowUserToAddRows" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(true)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示是否向用户显示添加行的选项。</summary>
        <value>如果向用户显示“添加行”选项，为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="true" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果 <xref:System.Windows.Forms.DataGridView> 绑定到数据，则如果此属性和数据源的 <xref:System.ComponentModel.IBindingList.AllowNew%2A?displayProperty=nameWithType> 属性均设置为，则允许用户添加行 `true` 。

## Examples  
 下面的代码示例演示如何在 <xref:System.Windows.Forms.DataGridView> 主要用于显示的控件中使用此属性。 在此示例中，控件的可视外观是通过多种方式自定义的，并且控件配置为具有有限的交互功能。 此示例是类概述中提供的一个更大示例的一部分 <xref:System.Windows.Forms.DataGridViewCellStyle> 。  
  
 [!code-csharp[System.Windows.Forms.DataGridViewStyleDemo#20](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewStyleDemo/CS/form1.cs#20)]
 [!code-vb[System.Windows.Forms.DataGridViewStyleDemo#20](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewStyleDemo/VB/form1.vb#20)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="AllowUserToAddRowsChanged">
      <MemberSignature Language="C#" Value="public event EventHandler AllowUserToAddRowsChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler AllowUserToAddRowsChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.AllowUserToAddRowsChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event AllowUserToAddRowsChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ AllowUserToAddRowsChanged;" />
      <MemberSignature Language="F#" Value="member this.AllowUserToAddRowsChanged : EventHandler " Usage="member this.AllowUserToAddRowsChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当 <see cref="P:System.Windows.Forms.DataGridView.AllowUserToAddRows" /> 属性的值更改时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关如何处理事件的详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。

## Examples  
 下面的代码示例演示如何使用此成员。 在此示例中，事件处理程序报告事件的发生 <xref:System.Windows.Forms.DataGridView.AllowUserToAddRowsChanged> 。 此报表可帮助你了解何时发生事件，并可帮助你进行调试。 若要报告多个事件或频繁发生的事件，请考虑 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 将消息替换为多行或将其追加到多行 <xref:System.Windows.Forms.TextBox> 。  
  
 若要运行示例代码，请将其粘贴到包含名为的类型的实例的项目中 <xref:System.Windows.Forms.DataGridView> `DataGridView1` 。 然后，确保事件处理程序与事件相关联 <xref:System.Windows.Forms.DataGridView.AllowUserToAddRowsChanged> 。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#250](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#250)]
 [!code-vb[System.Windows.Forms.EventExamples#250](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#250)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="AllowUserToDeleteRows">
      <MemberSignature Language="C#" Value="public bool AllowUserToDeleteRows { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowUserToDeleteRows" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.AllowUserToDeleteRows" />
      <MemberSignature Language="VB.NET" Value="Public Property AllowUserToDeleteRows As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AllowUserToDeleteRows { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AllowUserToDeleteRows : bool with get, set" Usage="System.Windows.Forms.DataGridView.AllowUserToDeleteRows" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(true)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示是否允许用户从 <see cref="T:System.Windows.Forms.DataGridView" /> 中删除行。</summary>
        <value>如果用户可以删除行，为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="true" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果 <xref:System.Windows.Forms.DataGridView> 绑定到数据，则如果此属性和 <xref:System.ComponentModel.IBindingList.AllowRemove%2A?displayProperty=nameWithType> 属性都设置为，则允许用户删除行 `true` 。

## Examples  
 下面的代码示例演示如何在 <xref:System.Windows.Forms.DataGridView> 主要用于显示的控件中使用此属性。 在此示例中，控件的可视外观是通过多种方式自定义的，并且控件配置为具有有限的交互功能。 此示例是类概述中提供的一个更大示例的一部分 <xref:System.Windows.Forms.DataGridViewCellStyle> 。  
  
 [!code-csharp[System.Windows.Forms.DataGridViewStyleDemo#20](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewStyleDemo/CS/form1.cs#20)]
 [!code-vb[System.Windows.Forms.DataGridViewStyleDemo#20](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewStyleDemo/VB/form1.vb#20)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="AllowUserToDeleteRowsChanged">
      <MemberSignature Language="C#" Value="public event EventHandler AllowUserToDeleteRowsChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler AllowUserToDeleteRowsChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.AllowUserToDeleteRowsChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event AllowUserToDeleteRowsChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ AllowUserToDeleteRowsChanged;" />
      <MemberSignature Language="F#" Value="member this.AllowUserToDeleteRowsChanged : EventHandler " Usage="member this.AllowUserToDeleteRowsChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当 <see cref="E:System.Windows.Forms.DataGridView.AllowUserToDeleteRowsChanged" /> 属性的值更改时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关如何处理事件的详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。

## Examples  
 下面的代码示例演示如何使用此成员。 在此示例中，事件处理程序报告事件的发生 <xref:System.Windows.Forms.DataGridView.AllowUserToDeleteRowsChanged> 。 此报表可帮助你了解何时发生事件，并可帮助你进行调试。 若要报告多个事件或频繁发生的事件，请考虑 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 将消息替换为多行或将其追加到多行 <xref:System.Windows.Forms.TextBox> 。  
  
 若要运行示例代码，请将其粘贴到包含名为的类型的实例的项目中 <xref:System.Windows.Forms.DataGridView> `DataGridView1` 。 然后，确保事件处理程序与事件相关联 <xref:System.Windows.Forms.DataGridView.AllowUserToDeleteRowsChanged> 。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#251](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#251)]
 [!code-vb[System.Windows.Forms.EventExamples#251](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#251)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="AllowUserToOrderColumns">
      <MemberSignature Language="C#" Value="public bool AllowUserToOrderColumns { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowUserToOrderColumns" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.AllowUserToOrderColumns" />
      <MemberSignature Language="VB.NET" Value="Public Property AllowUserToOrderColumns As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AllowUserToOrderColumns { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AllowUserToOrderColumns : bool with get, set" Usage="System.Windows.Forms.DataGridView.AllowUserToOrderColumns" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示是否允许通过手动对列重新定位。</summary>
        <value>如果用户可以更改列的顺序，为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 启用列重定位时，用户可以将列标题拖到新位置。 请注意，冻结和未冻结的列形成两个不同的组;用户可以重新定位组中的列，但不能将列从一个组移到另一个组。  
  
> [!NOTE]
> <xref:System.Windows.Forms.DataGridView>控件不支持双缓冲。 如果 <xref:System.Windows.Forms.Control.DoubleBuffered%2A> `true` 在派生控件中将设置为，则在对 <xref:System.Windows.Forms.DataGridView> 行、列或标题进行调整或对列重新排序时，用户不会收到视觉反馈。

## Examples  
 下面的代码示例演示如何在 <xref:System.Windows.Forms.DataGridView> 主要用于显示的控件中使用此属性。 在此示例中，控件的可视外观是通过多种方式自定义的，并且控件配置为具有有限的交互功能。 此示例是类概述中提供的一个更大示例的一部分 <xref:System.Windows.Forms.DataGridViewCellStyle> 。  
  
 [!code-csharp[System.Windows.Forms.DataGridViewStyleDemo#20](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewStyleDemo/CS/form1.cs#20)]
 [!code-vb[System.Windows.Forms.DataGridViewStyleDemo#20](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewStyleDemo/VB/form1.vb#20)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="AllowUserToOrderColumnsChanged">
      <MemberSignature Language="C#" Value="public event EventHandler AllowUserToOrderColumnsChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler AllowUserToOrderColumnsChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.AllowUserToOrderColumnsChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event AllowUserToOrderColumnsChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ AllowUserToOrderColumnsChanged;" />
      <MemberSignature Language="F#" Value="member this.AllowUserToOrderColumnsChanged : EventHandler " Usage="member this.AllowUserToOrderColumnsChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当 <see cref="P:System.Windows.Forms.DataGridView.AllowUserToOrderColumns" /> 属性的值更改时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关如何处理事件的详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。
  
## Examples  
 下面的代码示例演示如何使用此成员。 在此示例中，事件处理程序报告事件的发生 <xref:System.Windows.Forms.DataGridView.AllowUserToOrderColumnsChanged> 。 此报表可帮助你了解何时发生事件，并可帮助你进行调试。 若要报告多个事件或频繁发生的事件，请考虑 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 将消息替换为多行或将其追加到多行 <xref:System.Windows.Forms.TextBox> 。  
  
 若要运行示例代码，请将其粘贴到包含名为的类型的实例的项目中 <xref:System.Windows.Forms.DataGridView> `DataGridView1` 。 然后，确保事件处理程序与事件相关联 <xref:System.Windows.Forms.DataGridView.AllowUserToOrderColumnsChanged> 。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#252](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#252)]
 [!code-vb[System.Windows.Forms.EventExamples#252](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#252)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="AllowUserToResizeColumns">
      <MemberSignature Language="C#" Value="public bool AllowUserToResizeColumns { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowUserToResizeColumns" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.AllowUserToResizeColumns" />
      <MemberSignature Language="VB.NET" Value="Public Property AllowUserToResizeColumns As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AllowUserToResizeColumns { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AllowUserToResizeColumns : bool with get, set" Usage="System.Windows.Forms.DataGridView.AllowUserToResizeColumns" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(true)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示用户是否可以调整列的大小。</summary>
        <value>如果用户可以调整列的大小，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="true" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用此属性可防止用户手动更改列宽。 这很有用，例如，对于仅限显示的列，其中的数据将被加载一次并且列在该时间调整大小。  
  
 有关用户调整大小的详细信息，请参阅 [Windows 窗体 DataGridView 控件中的调整大小选项](/dotnet/framework/winforms/controls/sizing-options-in-the-windows-forms-datagridview-control)。  
  
> [!NOTE]
> <xref:System.Windows.Forms.DataGridView>控件不支持双缓冲。 如果 <xref:System.Windows.Forms.Control.DoubleBuffered%2A> `true` 在派生控件中将设置为，则在对 <xref:System.Windows.Forms.DataGridView> 行、列或标题进行调整或对列重新排序时，用户不会收到视觉反馈。
  
## Examples  
 下面的代码示例演示如何在 <xref:System.Windows.Forms.DataGridView> 主要用于显示的控件中使用此属性。 在此示例中，控件的可视外观是通过多种方式自定义的，并且控件配置为具有有限的交互功能。 此示例是类概述中提供的一个更大示例的一部分 <xref:System.Windows.Forms.DataGridViewCellStyle> 。  
  
 [!code-csharp[System.Windows.Forms.DataGridViewStyleDemo#20](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewStyleDemo/CS/form1.cs#20)]
 [!code-vb[System.Windows.Forms.DataGridViewStyleDemo#20](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewStyleDemo/VB/form1.vb#20)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="AllowUserToResizeColumnsChanged">
      <MemberSignature Language="C#" Value="public event EventHandler AllowUserToResizeColumnsChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler AllowUserToResizeColumnsChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.AllowUserToResizeColumnsChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event AllowUserToResizeColumnsChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ AllowUserToResizeColumnsChanged;" />
      <MemberSignature Language="F#" Value="member this.AllowUserToResizeColumnsChanged : EventHandler " Usage="member this.AllowUserToResizeColumnsChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当 <see cref="P:System.Windows.Forms.DataGridView.AllowUserToResizeColumns" /> 属性的值更改时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关如何处理事件的详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。
  
## Examples  
 下面的代码示例演示如何使用此成员。 在此示例中，事件处理程序报告事件的发生 <xref:System.Windows.Forms.DataGridView.AllowUserToResizeColumnsChanged> 。 此报表可帮助你了解何时发生事件，并可帮助你进行调试。 若要报告多个事件或频繁发生的事件，请考虑 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 将消息替换为多行或将其追加到多行 <xref:System.Windows.Forms.TextBox> 。  
  
 若要运行示例代码，请将其粘贴到包含名为的类型的实例的项目中 <xref:System.Windows.Forms.DataGridView> `DataGridView1` 。 然后，确保事件处理程序与事件相关联 <xref:System.Windows.Forms.DataGridView.AllowUserToResizeColumnsChanged> 。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#253](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#253)]
 [!code-vb[System.Windows.Forms.EventExamples#253](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#253)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="AllowUserToResizeRows">
      <MemberSignature Language="C#" Value="public bool AllowUserToResizeRows { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowUserToResizeRows" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.AllowUserToResizeRows" />
      <MemberSignature Language="VB.NET" Value="Public Property AllowUserToResizeRows As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AllowUserToResizeRows { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AllowUserToResizeRows : bool with get, set" Usage="System.Windows.Forms.DataGridView.AllowUserToResizeRows" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(true)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示用户是否可以调整行的大小。</summary>
        <value>如果可以对所有的行进行大小调整，为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="true" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用此属性可防止用户手动更改行高。 这很有用，例如，通过仅限显示的控件，其中的数据加载一次并且在该时间调整行的大小。  
  
 当调整行大小时，若要将单元格内容换行，则单元格的有效单元格样式的 <xref:System.Windows.Forms.DataGridViewCellStyle.WrapMode%2A> 属性值必须为 <xref:System.Windows.Forms.DataGridViewTriState.True> 。  
  
 有关用户调整大小的详细信息，请参阅 [Windows 窗体 DataGridView 控件中的调整大小选项](/dotnet/framework/winforms/controls/sizing-options-in-the-windows-forms-datagridview-control)。  
  
> [!NOTE]
> <xref:System.Windows.Forms.DataGridView>控件不支持双缓冲。 如果 <xref:System.Windows.Forms.Control.DoubleBuffered%2A> `true` 在派生控件中将设置为，则在对 <xref:System.Windows.Forms.DataGridView> 行、列或标题进行调整或对列重新排序时，用户不会收到视觉反馈。
  
## Examples  
 下面的代码示例演示如何在 <xref:System.Windows.Forms.DataGridView> 主要用于显示的控件中使用此属性。 在此示例中，控件的可视外观是通过多种方式自定义的，并且控件配置为具有有限的交互功能。 此示例是类概述中提供的一个更大示例的一部分 <xref:System.Windows.Forms.DataGridViewCellStyle> 。  
  
 [!code-csharp[System.Windows.Forms.DataGridViewStyleDemo#20](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewStyleDemo/CS/form1.cs#20)]
 [!code-vb[System.Windows.Forms.DataGridViewStyleDemo#20](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewStyleDemo/VB/form1.vb#20)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="AllowUserToResizeRowsChanged">
      <MemberSignature Language="C#" Value="public event EventHandler AllowUserToResizeRowsChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler AllowUserToResizeRowsChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.AllowUserToResizeRowsChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event AllowUserToResizeRowsChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ AllowUserToResizeRowsChanged;" />
      <MemberSignature Language="F#" Value="member this.AllowUserToResizeRowsChanged : EventHandler " Usage="member this.AllowUserToResizeRowsChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当 <see cref="P:System.Windows.Forms.DataGridView.AllowUserToResizeRows" /> 属性的值更改时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关如何处理事件的详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。
  
## Examples  
 下面的代码示例演示如何使用此成员。 在此示例中，事件处理程序报告事件的发生 <xref:System.Windows.Forms.DataGridView.AllowUserToResizeRowsChanged> 。 此报表可帮助你了解何时发生事件，并可帮助你进行调试。 若要报告多个事件或频繁发生的事件，请考虑 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 将消息替换为多行或将其追加到多行 <xref:System.Windows.Forms.TextBox> 。  
  
 若要运行示例代码，请将其粘贴到包含名为的类型的实例的项目中 <xref:System.Windows.Forms.DataGridView> `DataGridView1` 。 然后，确保事件处理程序与事件相关联 <xref:System.Windows.Forms.DataGridView.AllowUserToResizeRowsChanged> 。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#254](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#254)]
 [!code-vb[System.Windows.Forms.EventExamples#254](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#254)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="AlternatingRowsDefaultCellStyle">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataGridViewCellStyle AlternatingRowsDefaultCellStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.DataGridViewCellStyle AlternatingRowsDefaultCellStyle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.AlternatingRowsDefaultCellStyle" />
      <MemberSignature Language="VB.NET" Value="Public Property AlternatingRowsDefaultCellStyle As DataGridViewCellStyle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::DataGridViewCellStyle ^ AlternatingRowsDefaultCellStyle { System::Windows::Forms::DataGridViewCellStyle ^ get(); void set(System::Windows::Forms::DataGridViewCellStyle ^ value); };" />
      <MemberSignature Language="F#" Value="member this.AlternatingRowsDefaultCellStyle : System.Windows.Forms.DataGridViewCellStyle with get, set" Usage="System.Windows.Forms.DataGridView.AlternatingRowsDefaultCellStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewCellStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置应用于 <see cref="T:System.Windows.Forms.DataGridView" /> 的奇数行的默认单元格样式。</summary>
        <value>一个应用于奇数行的 <see cref="T:System.Windows.Forms.DataGridViewCellStyle" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.DataGridView>控件使用 cells 属性指示的样式显示单元格 <xref:System.Windows.Forms.DataGridViewCell.InheritedStyle%2A> ，该样式继承类型的其他属性的样式 <xref:System.Windows.Forms.DataGridViewCellStyle> 。 对于行中具有奇数索引号的单元格，通过属性指定的样式将重写通过、和指定的样式， <xref:System.Windows.Forms.DataGridView.AlternatingRowsDefaultCellStyle%2A> <xref:System.Windows.Forms.DataGridView.DefaultCellStyle%2A> <xref:System.Windows.Forms.DataGridViewColumn.DefaultCellStyle%2A?displayProperty=nameWithType> <xref:System.Windows.Forms.DataGridView.RowsDefaultCellStyle%2A> 并由通过和属性指定的样式重写 <xref:System.Windows.Forms.DataGridViewRow.DefaultCellStyle%2A?displayProperty=nameWithType> <xref:System.Windows.Forms.DataGridViewCell.Style%2A?displayProperty=nameWithType> 。  
  
 有关详细信息，请参阅 [Windows 窗体 DataGridView 控件中的单元格样式](/dotnet/framework/winforms/controls/cell-styles-in-the-windows-forms-datagridview-control)。  
  
 获取此属性时， <xref:System.Windows.Forms.DataGridViewCellStyle> 如果尚未访问属性，将创建具有默认值的。 在为多个行获取此属性时，这可能会影响性能。 请尽可能使用 single <xref:System.Windows.Forms.DataGridViewCellStyle> 为多行设置此属性。 有关详细信息，请参阅 [缩放 Windows 窗体 DataGridView 控件的最佳做法](/dotnet/framework/winforms/controls/best-practices-for-scaling-the-windows-forms-datagridview-control)。

## Examples  
 下面的代码示例演示如何使用此属性在控件中创建帐目型效果 <xref:System.Windows.Forms.DataGridView> 。 此示例是类概述中提供的一个更大示例的一部分 <xref:System.Windows.Forms.DataGridViewCellStyle> 。  
  
 [!code-csharp[System.Windows.Forms.DataGridViewStyleDemo#20](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewStyleDemo/CS/form1.cs#20)]
 [!code-vb[System.Windows.Forms.DataGridViewStyleDemo#20](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewStyleDemo/VB/form1.vb#20)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DataGridViewCellStyle" />
        <related type="Article" href="/dotnet/framework/winforms/controls/cell-styles-in-the-windows-forms-datagridview-control">Windows 窗体 DataGridView 控件中的单元格样式</related>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="AlternatingRowsDefaultCellStyleChanged">
      <MemberSignature Language="C#" Value="public event EventHandler AlternatingRowsDefaultCellStyleChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler AlternatingRowsDefaultCellStyleChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.AlternatingRowsDefaultCellStyleChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event AlternatingRowsDefaultCellStyleChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ AlternatingRowsDefaultCellStyleChanged;" />
      <MemberSignature Language="F#" Value="member this.AlternatingRowsDefaultCellStyleChanged : EventHandler " Usage="member this.AlternatingRowsDefaultCellStyleChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当 <see cref="P:System.Windows.Forms.DataGridView.AlternatingRowsDefaultCellStyle" /> 属性的值更改时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当属性返回的的任何属性 <xref:System.Windows.Forms.DataGridViewCellStyle> <xref:System.Windows.Forms.DataGridView.AlternatingRowsDefaultCellStyle%2A> 设置为新值时，或者当 <xref:System.Windows.Forms.DataGridView.AlternatingRowsDefaultCellStyle%2A> 属性设置为新 <xref:System.Windows.Forms.DataGridViewCellStyle> 的，且至少有一个属性值与上一个单元格样式对象不同时，将发生此事件。  
  
 有关如何处理事件的详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。

## Examples  
 下面的代码示例演示如何使用此成员。 在此示例中，事件处理程序报告事件的发生 <xref:System.Windows.Forms.DataGridView.AlternatingRowsDefaultCellStyleChanged> 。 此报表可帮助你了解何时发生事件，并可帮助你进行调试。 若要报告多个事件或频繁发生的事件，请考虑 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 将消息替换为多行或将其追加到多行 <xref:System.Windows.Forms.TextBox> 。  
  
 若要运行示例代码，请将其粘贴到包含名为的类型的实例的项目中 <xref:System.Windows.Forms.DataGridView> `DataGridView1` 。 然后，确保事件处理程序与事件相关联 <xref:System.Windows.Forms.DataGridView.AlternatingRowsDefaultCellStyleChanged> 。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#255](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#255)]
 [!code-vb[System.Windows.Forms.EventExamples#255](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#255)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DataGridViewCellStyle" />
        <related type="Article" href="/dotnet/framework/winforms/controls/cell-styles-in-the-windows-forms-datagridview-control">Windows 窗体 DataGridView 控件中的单元格样式</related>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="AreAllCellsSelected">
      <MemberSignature Language="C#" Value="public bool AreAllCellsSelected (bool includeInvisibleCells);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool AreAllCellsSelected(bool includeInvisibleCells) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.AreAllCellsSelected(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function AreAllCellsSelected (includeInvisibleCells As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool AreAllCellsSelected(bool includeInvisibleCells);" />
      <MemberSignature Language="F#" Value="member this.AreAllCellsSelected : bool -&gt; bool" Usage="dataGridView.AreAllCellsSelected includeInvisibleCells" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="includeInvisibleCells" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="includeInvisibleCells">如果包括 <see cref="P:System.Windows.Forms.DataGridViewBand.Visible" /> 属性值为 <see langword="false" /> 的行和列，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
        <summary>返回一个值，该值指示当前是否选择了所有的 <see cref="T:System.Windows.Forms.DataGridView" /> 单元格。</summary>
        <returns>如果选择了所有的单元格（或所有可见的单元格）或者没有单元格（或没有可见的单元格），则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此 <xref:System.Windows.Forms.DataGridView.SelectedCells%2A> 集合不能有效地执行大范围选择。 若要确定在访问集合内容之前是否选择了中的所有单元格 <xref:System.Windows.Forms.DataGridView> <xref:System.Windows.Forms.DataGridView.SelectedCells%2A> ，请检查方法的返回值 <xref:System.Windows.Forms.DataGridView.AreAllCellsSelected%2A> 。 但是，此方法可能导致行成为非共享行。 有关性能的详细信息 <xref:System.Windows.Forms.DataGridView> ，请参阅 [缩放 Windows 窗体 DataGridView 控件的最佳做法](/dotnet/framework/winforms/controls/best-practices-for-scaling-the-windows-forms-datagridview-control)。

## Examples  
 下面的代码示例演示如何使用此方法来避免涉及集合的计算 <xref:System.Windows.Forms.DataGridView.SelectedCells%2A> 。  
  
 [!code-csharp[System.Windows.Forms.DataGridViewSelectedCollections#10](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewSelectedCollections/CS/DataGridViewSelectedCollections.cs#10)]
 [!code-vb[System.Windows.Forms.DataGridViewSelectedCollections#10](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewSelectedCollections/VB/DataGridViewSelectedCollections.vb#10)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.DataGridViewBand.Visible" />
        <altmember cref="P:System.Windows.Forms.DataGridView.SelectedCells" />
        <related type="Article" href="/dotnet/framework/winforms/controls/best-practices-for-scaling-the-windows-forms-datagridview-control">缩放 Windows 窗体 DataGridView 控件的最佳做法</related>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="AutoGenerateColumns">
      <MemberSignature Language="C#" Value="public bool AutoGenerateColumns { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoGenerateColumns" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.AutoGenerateColumns" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoGenerateColumns As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AutoGenerateColumns { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AutoGenerateColumns : bool with get, set" Usage="System.Windows.Forms.DataGridView.AutoGenerateColumns" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(true)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示在设置 <see cref="P:System.Windows.Forms.DataGridView.DataSource" /> 或 <see cref="P:System.Windows.Forms.DataGridView.DataMember" /> 属性时是否自动创建列。</summary>
        <value>如果应自动创建列，为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="true" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果将此属性设置为 `true` 并设置或更改属性，将自动生成列 <xref:System.Windows.Forms.DataGridView.DataSource%2A> <xref:System.Windows.Forms.DataGridView.DataMember%2A> 。 当 <xref:System.Windows.Forms.DataGridView.AutoGenerateColumns%2A> 属性从更改为时，还可以自动生成列 `false` `true` 。 如果此属性为 `true` ，并且所 <xref:System.Windows.Forms.DataGridView.DataSource%2A> 做的更改导致与上一个值的列不匹配的列，则将放弃不匹配 <xref:System.Windows.Forms.DataGridView.DataSource%2A> 列中的数据。 如果 <xref:System.Windows.Forms.DataGridView.DataSource%2A> 未设置或属性，则忽略此属性 <xref:System.Windows.Forms.DataGridView.DataMember%2A> 。  
  
 当 <xref:System.Windows.Forms.DataGridView.AutoGenerateColumns%2A> 设置为时 `true` ， <xref:System.Windows.Forms.DataGridView> 控件为数据源中的对象的每个公共属性生成一列。 如果绑定对象实现 <xref:System.ComponentModel.ICustomTypeDescriptor> 接口，则该控件会为方法返回的每个属性生成一列 <xref:System.ComponentModel.ICustomTypeDescriptor.GetProperties%2A> 。 每个列标题将包含列所表示的属性名称的值。  
  
 如果设置了 <xref:System.Windows.Forms.DataGridView.DataSource%2A> 属性，但将设置 <xref:System.Windows.Forms.DataGridView.AutoGenerateColumns%2A> 为 `false` ，则必须手动添加列。 可以通过将 <xref:System.Windows.Forms.DataGridViewColumn.DataPropertyName%2A?displayProperty=nameWithType> 属性设置为绑定对象公开的属性名称，将每个已添加的列绑定到数据源。  
  
> [!NOTE]
> <xref:System.Windows.Forms.DataGridView.DataSource%2A>在 Windows 窗体设计器中设置会自动将 <xref:System.Windows.Forms.DataGridView.AutoGenerateColumns%2A> 属性设置为 `false` ，并为数据源中的每个属性生成代码以添加和绑定列。 在设计时生成的代码等效于下面的示例中所示的手动添加的代码。 它与在运行时自动生成列不同，在 <xref:System.Windows.Forms.DataGridView.AutoGenerateColumns%2A> 属性设置为时发生 `true` 。

## Examples  
 下面的代码示例演示如何在您将设置为时，手动添加列并将它们绑定到数据源 <xref:System.Windows.Forms.DataGridView.AutoGenerateColumns%2A> `false` 。 在此示例中， <xref:System.Windows.Forms.DataGridView> 控件绑定到业务对象的列表 `Task` 。 然后，将添加列并通过属性将其绑定到 `Task` 属性 <xref:System.Windows.Forms.DataGridViewColumn.DataPropertyName%2A?displayProperty=nameWithType> 。 此示例摘自 [如何： Access Windows 窗体 DataGridViewComboBoxCell "下拉列表](/dotnet/framework/winforms/controls/access-objects-in-a-wf-datagridviewcomboboxcell-drop-down-list)中的对象中提供的一个更大的示例。  
  
 [!code-csharp[System.Windows.Forms.DataGridViewComboBoxObjectBinding#100](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewComboBoxObjectBinding/CS/form1.cs#100)]
 [!code-vb[System.Windows.Forms.DataGridViewComboBoxObjectBinding#100](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewComboBoxObjectBinding/vb/form1.vb#100)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.DataGridView.DataSource" />
        <altmember cref="P:System.Windows.Forms.DataGridView.DataMember" />
        <altmember cref="M:System.ComponentModel.ICustomTypeDescriptor.GetProperties" />
        <altmember cref="P:System.Windows.Forms.DataGridViewColumn.DataPropertyName" />
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="AutoGenerateColumnsChanged">
      <MemberSignature Language="C#" Value="public event EventHandler AutoGenerateColumnsChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler AutoGenerateColumnsChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.AutoGenerateColumnsChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event AutoGenerateColumnsChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ AutoGenerateColumnsChanged;" />
      <MemberSignature Language="F#" Value="member this.AutoGenerateColumnsChanged : EventHandler " Usage="member this.AutoGenerateColumnsChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当 <see cref="E:System.Windows.Forms.DataGridView.AutoGenerateColumnsChanged" /> 属性的值更改时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关如何处理事件的详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。

## Examples  
 下面的代码示例演示如何使用此成员。 在此示例中，事件处理程序报告事件的发生 <xref:System.Windows.Forms.DataGridView.AutoGenerateColumnsChanged> 。 此报表可帮助你了解何时发生事件，并可帮助你进行调试。 若要报告多个事件或频繁发生的事件，请考虑 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 将消息替换为多行或将其追加到多行 <xref:System.Windows.Forms.TextBox> 。  
  
 若要运行示例代码，请将其粘贴到包含名为的类型的实例的项目中 <xref:System.Windows.Forms.DataGridView> `DataGridView1` 。 然后，确保事件处理程序与事件相关联 <xref:System.Windows.Forms.DataGridView.AutoGenerateColumnsChanged> 。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#256](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#256)]
 [!code-vb[System.Windows.Forms.EventExamples#256](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#256)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="AutoResizeColumn">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>调整指定列的宽度以适应其单元格的内容。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AutoResizeColumn">
      <MemberSignature Language="C#" Value="public void AutoResizeColumn (int columnIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AutoResizeColumn(int32 columnIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.AutoResizeColumn(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AutoResizeColumn (columnIndex As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AutoResizeColumn(int columnIndex);" />
      <MemberSignature Language="F#" Value="member this.AutoResizeColumn : int -&gt; unit" Usage="dataGridView.AutoResizeColumn columnIndex" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="columnIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="columnIndex">要调整大小的列的索引。</param>
        <summary>调整指定列的宽度以适应其所有单元格（包括标题单元格）的内容。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果要控制列的大小调整，此方法非常有用。 列宽仅针对每个方法调用进行一次调整;如果以后列中的内容发生更改，列将不会自动调整。 若要调整所有列的大小，请使用 <xref:System.Windows.Forms.DataGridView.AutoResizeColumns%2A> 方法。 若要将列设置为在其内容更改时自动调整大小，请使用 <xref:System.Windows.Forms.DataGridView.AutoSizeColumnsMode%2A> 属性或列 <xref:System.Windows.Forms.DataGridViewColumn.AutoSizeMode%2A> 属性。  
  
 有关以编程方式调整大小的详细信息，请参阅 [Windows 窗体 DataGridView 控件中的调整大小选项](/dotnet/framework/winforms/controls/sizing-options-in-the-windows-forms-datagridview-control)。

## Examples  
 下面的代码示例使用此方法来使列宽足够大以容纳新的单元值。 此示例摘自 [如何：操作 Windows 窗体 DataGridView 控件](/dotnet/framework/winforms/controls/how-to-manipulate-rows-in-the-windows-forms-datagridview-control)中的行中提供的一个更大的示例。  
  
 [!code-cpp[System.Windows.Forms.DataGridView.ButtonDemos#211](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.DataGridView.ButtonDemos/CPP/DataGridViewRowDemo.cpp#211)]
 [!code-csharp[System.Windows.Forms.DataGridView.ButtonDemos#211](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridView.ButtonDemos/CS/DataGridViewRowDemo.cs#211)]
 [!code-vb[System.Windows.Forms.DataGridView.ButtonDemos#211](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridView.ButtonDemos/VB/datagridviewrowdemo.vb#211)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="columnIndex" /> 不在 0 到列数减 1 的有效范围内。</exception>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="AutoResizeColumn">
      <MemberSignature Language="C#" Value="public void AutoResizeColumn (int columnIndex, System.Windows.Forms.DataGridViewAutoSizeColumnMode autoSizeColumnMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AutoResizeColumn(int32 columnIndex, valuetype System.Windows.Forms.DataGridViewAutoSizeColumnMode autoSizeColumnMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.AutoResizeColumn(System.Int32,System.Windows.Forms.DataGridViewAutoSizeColumnMode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AutoResizeColumn (columnIndex As Integer, autoSizeColumnMode As DataGridViewAutoSizeColumnMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AutoResizeColumn(int columnIndex, System::Windows::Forms::DataGridViewAutoSizeColumnMode autoSizeColumnMode);" />
      <MemberSignature Language="F#" Value="member this.AutoResizeColumn : int * System.Windows.Forms.DataGridViewAutoSizeColumnMode -&gt; unit" Usage="dataGridView.AutoResizeColumn (columnIndex, autoSizeColumnMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="columnIndex" Type="System.Int32" />
        <Parameter Name="autoSizeColumnMode" Type="System.Windows.Forms.DataGridViewAutoSizeColumnMode" />
      </Parameters>
      <Docs>
        <param name="columnIndex">要调整大小的列的索引。</param>
        <param name="autoSizeColumnMode"><see cref="T:System.Windows.Forms.DataGridViewAutoSizeColumnMode" /> 值之一。</param>
        <summary>使用指定的大小调整模式调整指定列的宽度。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果要控制列的大小调整，此方法非常有用。 列宽仅针对每个方法调用进行一次调整;如果以后列中的内容发生更改，列将不会自动调整。 若要调整所有列的大小，请使用 <xref:System.Windows.Forms.DataGridView.AutoResizeColumns%2A> 方法。 若要将列设置为在其内容更改时自动调整大小，请使用 <xref:System.Windows.Forms.DataGridView.AutoSizeColumnsMode%2A> 属性或列 <xref:System.Windows.Forms.DataGridViewColumn.AutoSizeMode%2A> 属性。  
  
 此重载允许您指定调整大小模式，该模式基于有限单元格集中的值（例如，仅显示的行中的值）计算新的宽度。 这会提高控件包含大量行时的性能。  
  
 有关以编程方式调整大小的详细信息，请参阅 [Windows 窗体 DataGridView 控件中的调整大小选项](/dotnet/framework/winforms/controls/sizing-options-in-the-windows-forms-datagridview-control)。

## Examples  
 下面的代码示例使用此方法来使列宽足够大以容纳新的单元值。 此示例摘自 [如何：操作 Windows 窗体 DataGridView 控件](/dotnet/framework/winforms/controls/how-to-manipulate-rows-in-the-windows-forms-datagridview-control)中的行中提供的一个更大的示例。  
  
 [!code-cpp[System.Windows.Forms.DataGridView.ButtonDemos#211](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.DataGridView.ButtonDemos/CPP/DataGridViewRowDemo.cpp#211)]
 [!code-csharp[System.Windows.Forms.DataGridView.ButtonDemos#211](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridView.ButtonDemos/CS/DataGridViewRowDemo.cs#211)]
 [!code-vb[System.Windows.Forms.DataGridView.ButtonDemos#211](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridView.ButtonDemos/VB/datagridviewrowdemo.vb#211)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><paramref name="autoSizeColumnMode" /> 具有值 <see cref="F:System.Windows.Forms.DataGridViewAutoSizeColumnMode.ColumnHeader" />，且 <see cref="P:System.Windows.Forms.DataGridView.ColumnHeadersVisible" /> 为 <see langword="false" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="autoSizeColumnMode" /> 具有值 <see cref="F:System.Windows.Forms.DataGridViewAutoSizeColumnMode.NotSet" />、<see cref="F:System.Windows.Forms.DataGridViewAutoSizeColumnMode.None" /> 或 <see cref="F:System.Windows.Forms.DataGridViewAutoSizeColumnMode.Fill" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="columnIndex" /> 不在 0 到列数减 1 的有效范围内。</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="autoSizeColumnMode" /> 不是有效的 <see cref="T:System.Windows.Forms.DataGridViewAutoSizeColumnMode" /> 值。</exception>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="AutoResizeColumn">
      <MemberSignature Language="C#" Value="protected void AutoResizeColumn (int columnIndex, System.Windows.Forms.DataGridViewAutoSizeColumnMode autoSizeColumnMode, bool fixedHeight);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void AutoResizeColumn(int32 columnIndex, valuetype System.Windows.Forms.DataGridViewAutoSizeColumnMode autoSizeColumnMode, bool fixedHeight) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.AutoResizeColumn(System.Int32,System.Windows.Forms.DataGridViewAutoSizeColumnMode,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub AutoResizeColumn (columnIndex As Integer, autoSizeColumnMode As DataGridViewAutoSizeColumnMode, fixedHeight As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void AutoResizeColumn(int columnIndex, System::Windows::Forms::DataGridViewAutoSizeColumnMode autoSizeColumnMode, bool fixedHeight);" />
      <MemberSignature Language="F#" Value="member this.AutoResizeColumn : int * System.Windows.Forms.DataGridViewAutoSizeColumnMode * bool -&gt; unit" Usage="dataGridView.AutoResizeColumn (columnIndex, autoSizeColumnMode, fixedHeight)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="columnIndex" Type="System.Int32" />
        <Parameter Name="autoSizeColumnMode" Type="System.Windows.Forms.DataGridViewAutoSizeColumnMode" />
        <Parameter Name="fixedHeight" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="columnIndex">要调整大小的列的索引。</param>
        <param name="autoSizeColumnMode"><see cref="T:System.Windows.Forms.DataGridViewAutoSizeColumnMode" /> 值之一。</param>
        <param name="fixedHeight">如果要基于当前的行高计算新宽度，则为 <see langword="true" />；如果要在行高也进行调整的假定条件下计算宽度，则为 <see langword="false" />。</param>
        <summary>使用指定的大小调整模式调整指定列的宽度，还可以选择在行高随后进行调整的假定条件下计算宽度。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果要控制列的大小调整，此方法非常有用。 列宽仅针对每个方法调用进行一次调整;如果以后列中的内容发生更改，列将不会自动调整。 若要调整所有列的大小，请使用 <xref:System.Windows.Forms.DataGridView.AutoResizeColumns%2A> 方法。 若要将列设置为在其内容更改时自动调整大小，请使用 <xref:System.Windows.Forms.DataGridView.AutoSizeColumnsMode%2A> 属性或列 <xref:System.Windows.Forms.DataGridViewColumn.AutoSizeMode%2A> 属性。  
  
 此重载允许您指定调整大小模式，该模式基于有限单元格集中的值（例如，仅显示的行中的值）计算新的宽度。 这会提高控件包含大量行时的性能。  
  
 此重载受到保护，旨在使您能够在派生类中实现理想的单元格高度与宽度的比率 <xref:System.Windows.Forms.DataGridView> 。 如果 `fixedHeight` 为，则将根据 `false` 你将调用或方法的预期来计算列宽 <xref:System.Windows.Forms.DataGridView.AutoResizeRow%2A> <xref:System.Windows.Forms.DataGridView.AutoResizeRows%2A> 。  
  
 有关以编程方式调整大小的详细信息，请参阅 [Windows 窗体 DataGridView 控件中的调整大小选项](/dotnet/framework/winforms/controls/sizing-options-in-the-windows-forms-datagridview-control)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><paramref name="autoSizeColumnMode" /> 具有值 <see cref="F:System.Windows.Forms.DataGridViewAutoSizeColumnMode.ColumnHeader" />，且 <see cref="P:System.Windows.Forms.DataGridView.ColumnHeadersVisible" /> 为 <see langword="false" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="autoSizeColumnMode" /> 具有值 <see cref="F:System.Windows.Forms.DataGridViewAutoSizeColumnMode.NotSet" />、<see cref="F:System.Windows.Forms.DataGridViewAutoSizeColumnMode.None" /> 或 <see cref="F:System.Windows.Forms.DataGridViewAutoSizeColumnMode.Fill" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="columnIndex" /> 不在 0 到列数减 1 的有效范围内。</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="autoSizeColumnMode" /> 不是有效的 <see cref="T:System.Windows.Forms.DataGridViewAutoSizeColumnMode" /> 值。</exception>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="AutoResizeColumnHeadersHeight">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>调整列标题的高度以适应标题内容。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AutoResizeColumnHeadersHeight">
      <MemberSignature Language="C#" Value="public void AutoResizeColumnHeadersHeight ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AutoResizeColumnHeadersHeight() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.AutoResizeColumnHeadersHeight" />
      <MemberSignature Language="VB.NET" Value="Public Sub AutoResizeColumnHeadersHeight ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AutoResizeColumnHeadersHeight();" />
      <MemberSignature Language="F#" Value="member this.AutoResizeColumnHeadersHeight : unit -&gt; unit" Usage="dataGridView.AutoResizeColumnHeadersHeight " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>调整列标题的高度以适应最大列标题的内容。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果要控制列标题调整的时间，此方法非常有用。 列标题的高度仅在每个方法调用中进行了一次调整;如果以后列标题的内容发生更改，则列标题不会自动调整。 若要将列标题设置为在其内容更改时自动调整大小，请使用 <xref:System.Windows.Forms.DataGridView.ColumnHeadersHeightSizeMode%2A> 属性。  
  
 当调整列标题的大小时，若要将单元格内容换行，则单元格的有效单元格样式的 <xref:System.Windows.Forms.DataGridViewCellStyle.WrapMode%2A> 属性值必须为 <xref:System.Windows.Forms.DataGridViewTriState.True> 。  
  
 有关以编程方式调整大小的详细信息，请参阅 [Windows 窗体 DataGridView 控件中的调整大小选项](/dotnet/framework/winforms/controls/sizing-options-in-the-windows-forms-datagridview-control)。

## Examples  
 下面的代码示例演示如何在按钮单击时调整列标题和行的大小。  
  
 [!code-cpp[System.Windows.Forms.GridViewAutoSize#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.GridViewAutoSize/CPP/form1.cpp#3)]
 [!code-csharp[System.Windows.Forms.GridViewAutoSize#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.GridViewAutoSize/CS/form1.cs#3)]
 [!code-vb[System.Windows.Forms.GridViewAutoSize#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.GridViewAutoSize/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="AutoResizeColumnHeadersHeight">
      <MemberSignature Language="C#" Value="public void AutoResizeColumnHeadersHeight (int columnIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AutoResizeColumnHeadersHeight(int32 columnIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.AutoResizeColumnHeadersHeight(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AutoResizeColumnHeadersHeight (columnIndex As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AutoResizeColumnHeadersHeight(int columnIndex);" />
      <MemberSignature Language="F#" Value="member this.AutoResizeColumnHeadersHeight : int -&gt; unit" Usage="dataGridView.AutoResizeColumnHeadersHeight columnIndex" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="columnIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="columnIndex">某一列的索引，该列包含内容已更改的标题。</param>
        <summary>基于指定列中的标题内容的更改来调整列标题的高度。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果您想要控制列标题调整的时间，如果用户编辑或更改了绑定数据源，则只更改指定列中标题的内容。 如果内容更改需要列标题的高度，则仅对每个方法调用进行一次调整;如果以后列标题的内容发生更改，则列标题不会自动调整。 若要将列标题设置为在其内容更改时自动调整大小，请使用 <xref:System.Windows.Forms.DataGridView.ColumnHeadersHeightSizeMode%2A> 属性。  
  
 当调整列标题的大小时，若要将单元格内容换行，则单元格的有效单元格样式的 <xref:System.Windows.Forms.DataGridViewCellStyle.WrapMode%2A> 属性值必须为 <xref:System.Windows.Forms.DataGridViewTriState.True> 。  
  
 有关以编程方式调整大小的详细信息，请参阅 [Windows 窗体 DataGridView 控件中的调整大小选项](/dotnet/framework/winforms/controls/sizing-options-in-the-windows-forms-datagridview-control)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="columnIndex" /> 不在 0 到列数减 1 的有效范围内。</exception>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="AutoResizeColumnHeadersHeight">
      <MemberSignature Language="C#" Value="protected void AutoResizeColumnHeadersHeight (bool fixedRowHeadersWidth, bool fixedColumnsWidth);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void AutoResizeColumnHeadersHeight(bool fixedRowHeadersWidth, bool fixedColumnsWidth) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.AutoResizeColumnHeadersHeight(System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub AutoResizeColumnHeadersHeight (fixedRowHeadersWidth As Boolean, fixedColumnsWidth As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void AutoResizeColumnHeadersHeight(bool fixedRowHeadersWidth, bool fixedColumnsWidth);" />
      <MemberSignature Language="F#" Value="member this.AutoResizeColumnHeadersHeight : bool * bool -&gt; unit" Usage="dataGridView.AutoResizeColumnHeadersHeight (fixedRowHeadersWidth, fixedColumnsWidth)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fixedRowHeadersWidth" Type="System.Boolean" />
        <Parameter Name="fixedColumnsWidth" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="fixedRowHeadersWidth">如果要基于行标题的当前宽度来计算新高度，则为 <see langword="true" />；如果要在行标题的宽度也进行调整的假定条件下计算高度，则为 <see langword="false" />。</param>
        <param name="fixedColumnsWidth">如果基于当前的列宽计算新高度，则为 <see langword="true" />；如果在列宽也进行调整的假定条件下计算高度，则为 <see langword="false" />。</param>
        <summary>调整列标题的高度以适应其内容，还可以选择在列和/或行标题的宽度随后进行调整的假定条件下计算高度。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果要控制列标题调整的时间，此方法非常有用。 列标题的高度仅在每个方法调用中进行了一次调整;如果以后列标题的内容发生更改，则列标题不会自动调整。 若要将列标题设置为在其内容更改时自动调整大小，请使用 <xref:System.Windows.Forms.DataGridView.ColumnHeadersHeightSizeMode%2A> 属性。  
  
 当调整列标题的大小时，若要将单元格内容换行，则单元格的有效单元格样式的 <xref:System.Windows.Forms.DataGridViewCellStyle.WrapMode%2A> 属性值必须为 <xref:System.Windows.Forms.DataGridViewTriState.True> 。  
  
 此重载受到保护，旨在使您能够在派生类中实现理想的单元格高度与宽度的比率 <xref:System.Windows.Forms.DataGridView> 。 如果 `fixedColumnsWidth` 或 `fixedRowHeadersWidth` 参数为，则将 `false` 计算列标题的高度，并假定你将调用 <xref:System.Windows.Forms.DataGridView.AutoResizeColumns%2A> 和 <xref:System.Windows.Forms.DataGridView.AutoResizeRowHeadersWidth%2A> 下一等方法。  
  
 有关以编程方式调整大小的详细信息，请参阅 [Windows 窗体 DataGridView 控件中的调整大小选项](/dotnet/framework/winforms/controls/sizing-options-in-the-windows-forms-datagridview-control)。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="AutoResizeColumnHeadersHeight">
      <MemberSignature Language="C#" Value="protected void AutoResizeColumnHeadersHeight (int columnIndex, bool fixedRowHeadersWidth, bool fixedColumnWidth);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void AutoResizeColumnHeadersHeight(int32 columnIndex, bool fixedRowHeadersWidth, bool fixedColumnWidth) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.AutoResizeColumnHeadersHeight(System.Int32,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub AutoResizeColumnHeadersHeight (columnIndex As Integer, fixedRowHeadersWidth As Boolean, fixedColumnWidth As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void AutoResizeColumnHeadersHeight(int columnIndex, bool fixedRowHeadersWidth, bool fixedColumnWidth);" />
      <MemberSignature Language="F#" Value="member this.AutoResizeColumnHeadersHeight : int * bool * bool -&gt; unit" Usage="dataGridView.AutoResizeColumnHeadersHeight (columnIndex, fixedRowHeadersWidth, fixedColumnWidth)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="columnIndex" Type="System.Int32" />
        <Parameter Name="fixedRowHeadersWidth" Type="System.Boolean" />
        <Parameter Name="fixedColumnWidth" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="columnIndex">其内容应当用于确定新高度的列标题的索引。</param>
        <param name="fixedRowHeadersWidth">如果要基于行标题的当前宽度来计算新高度，则为<see langword="true" /> ；如果要在行标题的宽度也进行调整的假定条件下计算高度，则为 <see langword="false" /> 。</param>
        <param name="fixedColumnWidth">如果要基于指定列的当前宽度计算新高度，则为 <see langword="true" />；如果要在列宽也进行调整的假定条件下计算高度，则为 <see langword="false" />。</param>
        <summary>基于指定列中标题内容的更改来调整列标题的高度，还可以选择在列和/或行标题的宽度随后进行调整的假定条件下计算高度。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果您想要控制列标题调整的时间，如果用户编辑或更改了绑定数据源，则只更改指定列中标题的内容。 如果内容更改需要列标题的高度，则仅对每个方法调用进行一次调整;如果以后列标题的内容发生更改，则列标题不会自动调整。 若要将列标题设置为在其内容更改时自动调整大小，请使用 <xref:System.Windows.Forms.DataGridView.ColumnHeadersHeightSizeMode%2A> 属性。  
  
 当调整列标题的大小时，若要将单元格内容换行，则单元格的有效单元格样式的 <xref:System.Windows.Forms.DataGridViewCellStyle.WrapMode%2A> 属性值必须为 <xref:System.Windows.Forms.DataGridViewTriState.True> 。  
  
 此重载受到保护，旨在使您能够在派生类中实现理想的单元格高度与宽度的比率 <xref:System.Windows.Forms.DataGridView> 。 如果 `fixedColumnWidth` 或 `fixedRowHeadersWidth` 参数为，则将 `false` 计算列标题的高度，并假定你将调用 <xref:System.Windows.Forms.DataGridView.AutoResizeColumns%2A> 和 <xref:System.Windows.Forms.DataGridView.AutoResizeRowHeadersWidth%2A> 下一等方法。  
  
 有关以编程方式调整大小的详细信息，请参阅 [Windows 窗体 DataGridView 控件中的调整大小选项](/dotnet/framework/winforms/controls/sizing-options-in-the-windows-forms-datagridview-control)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="columnIndex" /> 不在 0 到列数减 1 的有效范围内。</exception>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="AutoResizeColumns">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>调整所有列的宽度以适应其单元格的内容。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AutoResizeColumns">
      <MemberSignature Language="C#" Value="public void AutoResizeColumns ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AutoResizeColumns() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.AutoResizeColumns" />
      <MemberSignature Language="VB.NET" Value="Public Sub AutoResizeColumns ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AutoResizeColumns();" />
      <MemberSignature Language="F#" Value="member this.AutoResizeColumns : unit -&gt; unit" Usage="dataGridView.AutoResizeColumns " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>调整所有列的宽度以适应其所有单元格（包括标题单元格）的内容。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果要控制列的大小调整，此方法非常有用。 列宽仅在每个方法调用中进行一次调整;如果之后列中的内容发生更改，则这些列将不会自动调整。 若要调整特定列的大小，请使用 <xref:System.Windows.Forms.DataGridView.AutoResizeColumn%2A> 方法。 若要将列设置为在其内容更改时自动调整大小，请使用 <xref:System.Windows.Forms.DataGridView.AutoSizeColumnsMode%2A> 属性或列 <xref:System.Windows.Forms.DataGridViewColumn.AutoSizeMode%2A> 属性。  
  
 有关以编程方式调整大小的详细信息，请参阅 [Windows 窗体 DataGridView 控件中的调整大小选项](/dotnet/framework/winforms/controls/sizing-options-in-the-windows-forms-datagridview-control)。

## Examples  
 下面的代码示例将调整所有列的大小，以适合列和列标题的内容。 此代码示例摘自 [如何：以编程方式调整单元格大小以适应 Windows 窗体 DataGridView 控件中的内容](/dotnet/framework/winforms/controls/programmatically-resize-cells-to-fit-content-in-the-datagrid)的更大示例。  
  
 [!code-cpp[System.Windows.Forms.DataGridView.ProgrammaticResizing#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.DataGridView.ProgrammaticResizing/CPP/programmaticsizing.cpp#3)]
 [!code-csharp[System.Windows.Forms.DataGridView.ProgrammaticResizing#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridView.ProgrammaticResizing/CS/programmaticsizing.cs#3)]
 [!code-vb[System.Windows.Forms.DataGridView.ProgrammaticResizing#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridView.ProgrammaticResizing/VB/programmaticsizing.vb#3)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="AutoResizeColumns">
      <MemberSignature Language="C#" Value="public void AutoResizeColumns (System.Windows.Forms.DataGridViewAutoSizeColumnsMode autoSizeColumnsMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AutoResizeColumns(valuetype System.Windows.Forms.DataGridViewAutoSizeColumnsMode autoSizeColumnsMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.AutoResizeColumns(System.Windows.Forms.DataGridViewAutoSizeColumnsMode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AutoResizeColumns (autoSizeColumnsMode As DataGridViewAutoSizeColumnsMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AutoResizeColumns(System::Windows::Forms::DataGridViewAutoSizeColumnsMode autoSizeColumnsMode);" />
      <MemberSignature Language="F#" Value="member this.AutoResizeColumns : System.Windows.Forms.DataGridViewAutoSizeColumnsMode -&gt; unit" Usage="dataGridView.AutoResizeColumns autoSizeColumnsMode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="autoSizeColumnsMode" Type="System.Windows.Forms.DataGridViewAutoSizeColumnsMode" />
      </Parameters>
      <Docs>
        <param name="autoSizeColumnsMode"><see cref="T:System.Windows.Forms.DataGridViewAutoSizeColumnsMode" /> 值之一。</param>
        <summary>使用指定的大小调整模式调整所有列的宽度。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果要控制列的大小调整，此方法非常有用。 列宽仅在每个方法调用中进行一次调整;如果之后列中的内容发生更改，则这些列将不会自动调整。 若要调整特定列的大小，请使用 <xref:System.Windows.Forms.DataGridView.AutoResizeColumn%2A> 方法。 若要将列设置为在其内容更改时自动调整大小，请使用 <xref:System.Windows.Forms.DataGridView.AutoSizeColumnsMode%2A> 属性或列 <xref:System.Windows.Forms.DataGridViewColumn.AutoSizeMode%2A> 属性。  
  
 此重载允许您指定调整大小模式，该模式基于有限单元格集中的值（例如，仅显示的行中的值）计算新的宽度。 这会提高控件包含大量行时的性能。  
  
 有关以编程方式调整大小的详细信息，请参阅 [Windows 窗体 DataGridView 控件中的调整大小选项](/dotnet/framework/winforms/controls/sizing-options-in-the-windows-forms-datagridview-control)。

## Examples  
 下面的代码示例将调整所有列的大小，以适合列和列标题的内容。 此代码示例摘自 [如何：以编程方式调整单元格大小以适应 Windows 窗体 DataGridView 控件中的内容](/dotnet/framework/winforms/controls/programmatically-resize-cells-to-fit-content-in-the-datagrid)的更大示例。  
  
 [!code-cpp[System.Windows.Forms.DataGridView.ProgrammaticResizing#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.DataGridView.ProgrammaticResizing/CPP/programmaticsizing.cpp#3)]
 [!code-csharp[System.Windows.Forms.DataGridView.ProgrammaticResizing#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridView.ProgrammaticResizing/CS/programmaticsizing.cs#3)]
 [!code-vb[System.Windows.Forms.DataGridView.ProgrammaticResizing#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridView.ProgrammaticResizing/VB/programmaticsizing.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><paramref name="autoSizeColumnsMode" /> 具有值 <see cref="F:System.Windows.Forms.DataGridViewAutoSizeColumnsMode.ColumnHeader" />，且 <see cref="P:System.Windows.Forms.DataGridView.ColumnHeadersVisible" /> 为 <see langword="false" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="autoSizeColumnsMode" /> 具有值 <see cref="F:System.Windows.Forms.DataGridViewAutoSizeColumnsMode.None" /> 或 <see cref="F:System.Windows.Forms.DataGridViewAutoSizeColumnsMode.Fill" />。</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="autoSizeColumnsMode" /> 不是有效的 <see cref="T:System.Windows.Forms.DataGridViewAutoSizeColumnsMode" /> 值。</exception>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="AutoResizeColumns">
      <MemberSignature Language="C#" Value="protected void AutoResizeColumns (System.Windows.Forms.DataGridViewAutoSizeColumnsMode autoSizeColumnsMode, bool fixedHeight);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void AutoResizeColumns(valuetype System.Windows.Forms.DataGridViewAutoSizeColumnsMode autoSizeColumnsMode, bool fixedHeight) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.AutoResizeColumns(System.Windows.Forms.DataGridViewAutoSizeColumnsMode,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub AutoResizeColumns (autoSizeColumnsMode As DataGridViewAutoSizeColumnsMode, fixedHeight As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void AutoResizeColumns(System::Windows::Forms::DataGridViewAutoSizeColumnsMode autoSizeColumnsMode, bool fixedHeight);" />
      <MemberSignature Language="F#" Value="member this.AutoResizeColumns : System.Windows.Forms.DataGridViewAutoSizeColumnsMode * bool -&gt; unit" Usage="dataGridView.AutoResizeColumns (autoSizeColumnsMode, fixedHeight)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="autoSizeColumnsMode" Type="System.Windows.Forms.DataGridViewAutoSizeColumnsMode" />
        <Parameter Name="fixedHeight" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="autoSizeColumnsMode"><see cref="T:System.Windows.Forms.DataGridViewAutoSizeColumnsMode" /> 值之一。</param>
        <param name="fixedHeight">如果要基于当前的行高计算新宽度，则为 <see langword="true" />；如果要在行高也进行调整的假定条件下计算宽度，则为 <see langword="false" />。</param>
        <summary>使用指定的大小调整模式调整所有列的宽度，还可以选择在行高随后进行调整的假定条件下计算宽度。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果要控制列的大小调整，此方法非常有用。 列宽仅在每个方法调用中进行一次调整;如果之后列中的内容发生更改，则这些列将不会自动调整。 若要调整特定列的大小，请使用 <xref:System.Windows.Forms.DataGridView.AutoResizeColumn%2A> 方法。 若要将列设置为在其内容更改时自动调整大小，请使用 <xref:System.Windows.Forms.DataGridView.AutoSizeColumnsMode%2A> 属性或列 <xref:System.Windows.Forms.DataGridViewColumn.AutoSizeMode%2A> 属性。  
  
 此重载允许您指定调整大小模式，该模式基于有限单元格集中的值（例如，仅显示的行中的值）计算新的宽度。 这会提高控件包含大量行时的性能。  
  
 此重载受到保护，旨在使您能够在派生类中实现理想的单元格高度与宽度的比率 <xref:System.Windows.Forms.DataGridView> 。 如果 `fixedHeight` 为 `false` ，则将按您将调用或方法的预期计算列宽 <xref:System.Windows.Forms.DataGridView.AutoResizeRow%2A> <xref:System.Windows.Forms.DataGridView.AutoResizeRows%2A> 。  
  
 有关以编程方式调整大小的详细信息，请参阅 [Windows 窗体 DataGridView 控件中的调整大小选项](/dotnet/framework/winforms/controls/sizing-options-in-the-windows-forms-datagridview-control)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><paramref name="autoSizeColumnsMode" /> 具有值 <see cref="F:System.Windows.Forms.DataGridViewAutoSizeColumnsMode.ColumnHeader" />，且 <see cref="P:System.Windows.Forms.DataGridView.ColumnHeadersVisible" /> 为 <see langword="false" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="autoSizeColumnsMode" /> 具有值 <see cref="F:System.Windows.Forms.DataGridViewAutoSizeColumnsMode.None" /> 或 <see cref="F:System.Windows.Forms.DataGridViewAutoSizeColumnsMode.Fill" />。</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="autoSizeColumnsMode" /> 不是有效的 <see cref="T:System.Windows.Forms.DataGridViewAutoSizeColumnsMode" /> 值。</exception>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="AutoResizeRow">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>调整指定行的高度以适应其单元格的内容。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AutoResizeRow">
      <MemberSignature Language="C#" Value="public void AutoResizeRow (int rowIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AutoResizeRow(int32 rowIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.AutoResizeRow(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AutoResizeRow (rowIndex As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AutoResizeRow(int rowIndex);" />
      <MemberSignature Language="F#" Value="member this.AutoResizeRow : int -&gt; unit" Usage="dataGridView.AutoResizeRow rowIndex" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rowIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="rowIndex">要调整大小的行的索引。</param>
        <summary>调整指定行的高度以适应其所有单元格（包括标题单元格）的内容。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果要控制行的调整时间，此方法非常有用。 对于每个方法调用，行高只进行一次调整;如果后续行的内容发生更改，则该行不会自动调整。 若要调整所有行的大小，请使用 <xref:System.Windows.Forms.DataGridView.AutoResizeRows%2A> 方法。 若要将行设置为在其内容更改时自动调整大小，请使用 <xref:System.Windows.Forms.DataGridView.AutoSizeRowsMode%2A> 属性。  
  
 当调整行大小时，若要将单元格内容换行，则单元格的有效单元格样式的 <xref:System.Windows.Forms.DataGridViewCellStyle.WrapMode%2A> 属性值必须为 <xref:System.Windows.Forms.DataGridViewTriState.True> 。  
  
 有关以编程方式调整大小的详细信息，请参阅 [Windows 窗体 DataGridView 控件中的调整大小选项](/dotnet/framework/winforms/controls/sizing-options-in-the-windows-forms-datagridview-control)。

## Examples  
 下面的代码示例将调整中第三行的大小 <xref:System.Windows.Forms.DataGridView> 以适合列内容。 此代码示例摘自 [如何：以编程方式调整单元格大小以适应 Windows 窗体 DataGridView 控件中的内容](/dotnet/framework/winforms/controls/programmatically-resize-cells-to-fit-content-in-the-datagrid)的更大示例。  
  
 [!code-cpp[System.Windows.Forms.DataGridView.ProgrammaticResizing#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.DataGridView.ProgrammaticResizing/CPP/programmaticsizing.cpp#4)]
 [!code-csharp[System.Windows.Forms.DataGridView.ProgrammaticResizing#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridView.ProgrammaticResizing/CS/programmaticsizing.cs#4)]
 [!code-vb[System.Windows.Forms.DataGridView.ProgrammaticResizing#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridView.ProgrammaticResizing/VB/programmaticsizing.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="rowIndex" /> 不在 0 到行数减 1 的有效范围内。</exception>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="AutoResizeRow">
      <MemberSignature Language="C#" Value="public void AutoResizeRow (int rowIndex, System.Windows.Forms.DataGridViewAutoSizeRowMode autoSizeRowMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AutoResizeRow(int32 rowIndex, valuetype System.Windows.Forms.DataGridViewAutoSizeRowMode autoSizeRowMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.AutoResizeRow(System.Int32,System.Windows.Forms.DataGridViewAutoSizeRowMode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AutoResizeRow (rowIndex As Integer, autoSizeRowMode As DataGridViewAutoSizeRowMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AutoResizeRow(int rowIndex, System::Windows::Forms::DataGridViewAutoSizeRowMode autoSizeRowMode);" />
      <MemberSignature Language="F#" Value="member this.AutoResizeRow : int * System.Windows.Forms.DataGridViewAutoSizeRowMode -&gt; unit" Usage="dataGridView.AutoResizeRow (rowIndex, autoSizeRowMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rowIndex" Type="System.Int32" />
        <Parameter Name="autoSizeRowMode" Type="System.Windows.Forms.DataGridViewAutoSizeRowMode" />
      </Parameters>
      <Docs>
        <param name="rowIndex">要调整大小的行的索引。</param>
        <param name="autoSizeRowMode"><see cref="T:System.Windows.Forms.DataGridViewAutoSizeRowMode" /> 值之一。</param>
        <summary>使用指定的大小调整模式调整指定行的高度。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果要控制行的调整时间，此方法非常有用。 对于每个方法调用，行高只进行一次调整;如果后续行的内容发生更改，则该行不会自动调整。 若要调整所有行的大小，请使用 <xref:System.Windows.Forms.DataGridView.AutoResizeRows%2A> 方法。 若要将行设置为在其内容更改时自动调整大小，请使用 <xref:System.Windows.Forms.DataGridView.AutoSizeRowsMode%2A> 属性。  
  
 当调整行大小时，若要将单元格内容换行，则单元格的有效单元格样式的 <xref:System.Windows.Forms.DataGridViewCellStyle.WrapMode%2A> 属性值必须为 <xref:System.Windows.Forms.DataGridViewTriState.True> 。  
  
 此重载允许您指定调整大小模式，该模式基于有限单元格集中的值（例如，仅显示的行中的值）计算新高度。 这会提高控件包含大量行时的性能。  
  
 有关以编程方式调整大小的详细信息，请参阅 [Windows 窗体 DataGridView 控件中的调整大小选项](/dotnet/framework/winforms/controls/sizing-options-in-the-windows-forms-datagridview-control)。

## Examples  
 下面的代码示例将调整中第三行的大小 <xref:System.Windows.Forms.DataGridView> 以适合列内容。 此代码示例摘自 [如何：以编程方式调整单元格大小以适应 Windows 窗体 DataGridView 控件中的内容](/dotnet/framework/winforms/controls/programmatically-resize-cells-to-fit-content-in-the-datagrid)的更大示例。  
  
 [!code-cpp[System.Windows.Forms.DataGridView.ProgrammaticResizing#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.DataGridView.ProgrammaticResizing/CPP/programmaticsizing.cpp#4)]
 [!code-csharp[System.Windows.Forms.DataGridView.ProgrammaticResizing#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridView.ProgrammaticResizing/CS/programmaticsizing.cs#4)]
 [!code-vb[System.Windows.Forms.DataGridView.ProgrammaticResizing#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridView.ProgrammaticResizing/VB/programmaticsizing.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><paramref name="autoSizeRowMode" /> 具有值 <see cref="F:System.Windows.Forms.DataGridViewAutoSizeRowMode.RowHeader" />，且 <see cref="P:System.Windows.Forms.DataGridView.RowHeadersVisible" /> 为 <see langword="false" />。</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="autoSizeRowMode" /> 不是有效的 <see cref="T:System.Windows.Forms.DataGridViewAutoSizeRowMode" /> 值。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="rowIndex" /> 不在 0 到行数减 1 的有效范围内。</exception>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="AutoResizeRow">
      <MemberSignature Language="C#" Value="protected void AutoResizeRow (int rowIndex, System.Windows.Forms.DataGridViewAutoSizeRowMode autoSizeRowMode, bool fixedWidth);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void AutoResizeRow(int32 rowIndex, valuetype System.Windows.Forms.DataGridViewAutoSizeRowMode autoSizeRowMode, bool fixedWidth) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.AutoResizeRow(System.Int32,System.Windows.Forms.DataGridViewAutoSizeRowMode,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub AutoResizeRow (rowIndex As Integer, autoSizeRowMode As DataGridViewAutoSizeRowMode, fixedWidth As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void AutoResizeRow(int rowIndex, System::Windows::Forms::DataGridViewAutoSizeRowMode autoSizeRowMode, bool fixedWidth);" />
      <MemberSignature Language="F#" Value="member this.AutoResizeRow : int * System.Windows.Forms.DataGridViewAutoSizeRowMode * bool -&gt; unit" Usage="dataGridView.AutoResizeRow (rowIndex, autoSizeRowMode, fixedWidth)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rowIndex" Type="System.Int32" />
        <Parameter Name="autoSizeRowMode" Type="System.Windows.Forms.DataGridViewAutoSizeRowMode" />
        <Parameter Name="fixedWidth" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="rowIndex">要调整大小的行的索引。</param>
        <param name="autoSizeRowMode"><see cref="T:System.Windows.Forms.DataGridViewAutoSizeRowMode" /> 值之一。</param>
        <param name="fixedWidth">如果要基于列的当前宽度计算新高度，则为 <see langword="true" />；如果要在列宽也进行调整的假定条件下计算高度，则为 <see langword="false" />。</param>
        <summary>使用指定的大小调整模式调整指定行的高度，还可以选择在列宽随后进行调整的假定条件下计算高度。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果要控制行的调整时间，此方法非常有用。 对于每个方法调用，行高只进行一次调整;如果后续行的内容发生更改，则该行不会自动调整。 若要调整所有行的大小，请使用 <xref:System.Windows.Forms.DataGridView.AutoResizeRows%2A> 方法。 若要将行设置为在其内容更改时自动调整大小，请使用 <xref:System.Windows.Forms.DataGridView.AutoSizeRowsMode%2A> 属性。  
  
 当调整行大小时，若要将单元格内容换行，则单元格的有效单元格样式的 <xref:System.Windows.Forms.DataGridViewCellStyle.WrapMode%2A> 属性值必须为 <xref:System.Windows.Forms.DataGridViewTriState.True> 。  
  
 此重载允许您指定调整大小模式，该模式基于有限单元格集中的值（例如，仅显示的行中的值）计算新高度。 这会提高控件包含大量行时的性能。  
  
 此重载受到保护，旨在使您能够在派生类中实现理想的单元格高度与宽度的比率 <xref:System.Windows.Forms.DataGridView> 。 如果 `fixedWidth` 为，则将根据 `false` 您将调用或方法的预期来计算行高 <xref:System.Windows.Forms.DataGridView.AutoResizeColumn%2A> <xref:System.Windows.Forms.DataGridView.AutoResizeColumns%2A> 。  
  
 有关以编程方式调整大小的详细信息，请参阅 [Windows 窗体 DataGridView 控件中的调整大小选项](/dotnet/framework/winforms/controls/sizing-options-in-the-windows-forms-datagridview-control)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><paramref name="autoSizeRowMode" /> 具有值 <see cref="F:System.Windows.Forms.DataGridViewAutoSizeRowMode.RowHeader" />，且 <see cref="P:System.Windows.Forms.DataGridView.RowHeadersVisible" /> 为 <see langword="false" />。</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="autoSizeRowMode" /> 不是有效的 <see cref="T:System.Windows.Forms.DataGridViewAutoSizeRowMode" /> 值。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="rowIndex" /> 不在 0 到行数减 1 的有效范围内。</exception>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="AutoResizeRowHeadersWidth">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>调整行标题的宽度以适应标题内容。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AutoResizeRowHeadersWidth">
      <MemberSignature Language="C#" Value="public void AutoResizeRowHeadersWidth (System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode rowHeadersWidthSizeMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AutoResizeRowHeadersWidth(valuetype System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode rowHeadersWidthSizeMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.AutoResizeRowHeadersWidth(System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AutoResizeRowHeadersWidth (rowHeadersWidthSizeMode As DataGridViewRowHeadersWidthSizeMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AutoResizeRowHeadersWidth(System::Windows::Forms::DataGridViewRowHeadersWidthSizeMode rowHeadersWidthSizeMode);" />
      <MemberSignature Language="F#" Value="member this.AutoResizeRowHeadersWidth : System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode -&gt; unit" Usage="dataGridView.AutoResizeRowHeadersWidth rowHeadersWidthSizeMode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rowHeadersWidthSizeMode" Type="System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode" />
      </Parameters>
      <Docs>
        <param name="rowHeadersWidthSizeMode"><see cref="T:System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode" /> 值之一。</param>
        <summary>使用指定的大小调整模式调整行标题的宽度。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果要控制行标题的大小调整，此方法非常有用。 仅对每个方法调用调整行标题的宽度;如果后续行标题的内容发生更改，则不会自动调整行标题。 若要将行标题设置为在其内容更改时自动调整大小，请使用 <xref:System.Windows.Forms.DataGridView.RowHeadersWidthSizeMode%2A> 属性。  
  
 此方法允许您指定一个调整大小模式，该模式基于有限的一组标头中的值（例如，仅显示的行中的值）计算新的宽度。 这会提高控件包含大量行时的性能。  
  
 有关以编程方式调整大小的详细信息，请参阅 [Windows 窗体 DataGridView 控件中的调整大小选项](/dotnet/framework/winforms/controls/sizing-options-in-the-windows-forms-datagridview-control)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="rowHeadersWidthSizeMode" /> 具有值 <see cref="F:System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode.EnableResizing" /> 或 <see cref="F:System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode.DisableResizing" />。</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="rowHeadersWidthSizeMode" /> 不是有效的 <see cref="T:System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode" /> 值。</exception>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="AutoResizeRowHeadersWidth">
      <MemberSignature Language="C#" Value="public void AutoResizeRowHeadersWidth (int rowIndex, System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode rowHeadersWidthSizeMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AutoResizeRowHeadersWidth(int32 rowIndex, valuetype System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode rowHeadersWidthSizeMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.AutoResizeRowHeadersWidth(System.Int32,System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AutoResizeRowHeadersWidth (rowIndex As Integer, rowHeadersWidthSizeMode As DataGridViewRowHeadersWidthSizeMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AutoResizeRowHeadersWidth(int rowIndex, System::Windows::Forms::DataGridViewRowHeadersWidthSizeMode rowHeadersWidthSizeMode);" />
      <MemberSignature Language="F#" Value="member this.AutoResizeRowHeadersWidth : int * System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode -&gt; unit" Usage="dataGridView.AutoResizeRowHeadersWidth (rowIndex, rowHeadersWidthSizeMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rowIndex" Type="System.Int32" />
        <Parameter Name="rowHeadersWidthSizeMode" Type="System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode" />
      </Parameters>
      <Docs>
        <param name="rowIndex">内容已更改的行标题的索引。</param>
        <param name="rowHeadersWidthSizeMode"><see cref="T:System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode" /> 值之一。</param>
        <summary>使用指定的大小调整模式，基于指定行中标题内容的更改调整行标题的宽度。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果您想要控制行标题调整行标题的时间，如果用户编辑或更改了绑定数据源，则此方法很有用。 如果内容更改需要行标题，则只对每个方法调用调整行标题的宽度;如果后续行标题的内容发生更改，则不会自动调整行标题。 若要将行标题设置为在其内容更改时自动调整大小，请使用 <xref:System.Windows.Forms.DataGridView.RowHeadersWidthSizeMode%2A> 属性。  
  
 此方法允许您指定一个调整大小模式，该模式基于有限的一组标头中的值（例如，仅显示的行中的值）计算新的宽度。 这会提高控件包含大量行时的性能。  
  
 有关以编程方式调整大小的详细信息，请参阅 [Windows 窗体 DataGridView 控件中的调整大小选项](/dotnet/framework/winforms/controls/sizing-options-in-the-windows-forms-datagridview-control)。

## Examples  
 下面的代码示例演示如何根据第一个行标题的内容的更改调整行标题的宽度。 此代码示例摘自 [如何：以编程方式调整单元格大小以适应 Windows 窗体 DataGridView 控件中的内容](/dotnet/framework/winforms/controls/programmatically-resize-cells-to-fit-content-in-the-datagrid)的更大示例。  
  
 [!code-cpp[System.Windows.Forms.DataGridView.ProgrammaticResizing#5](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.DataGridView.ProgrammaticResizing/CPP/programmaticsizing.cpp#5)]
 [!code-csharp[System.Windows.Forms.DataGridView.ProgrammaticResizing#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridView.ProgrammaticResizing/CS/programmaticsizing.cs#5)]
 [!code-vb[System.Windows.Forms.DataGridView.ProgrammaticResizing#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridView.ProgrammaticResizing/VB/programmaticsizing.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="rowIndex" /> 不在 0 到行数减 1 的有效范围内。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="rowHeadersWidthSizeMode" /> 具有值 <see cref="F:System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode.EnableResizing" /> 或 <see cref="F:System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode.DisableResizing" /></exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="rowHeadersWidthSizeMode" /> 不是有效的 <see cref="T:System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode" /> 值。</exception>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="AutoResizeRowHeadersWidth">
      <MemberSignature Language="C#" Value="protected void AutoResizeRowHeadersWidth (System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode rowHeadersWidthSizeMode, bool fixedColumnHeadersHeight, bool fixedRowsHeight);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void AutoResizeRowHeadersWidth(valuetype System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode rowHeadersWidthSizeMode, bool fixedColumnHeadersHeight, bool fixedRowsHeight) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.AutoResizeRowHeadersWidth(System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub AutoResizeRowHeadersWidth (rowHeadersWidthSizeMode As DataGridViewRowHeadersWidthSizeMode, fixedColumnHeadersHeight As Boolean, fixedRowsHeight As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void AutoResizeRowHeadersWidth(System::Windows::Forms::DataGridViewRowHeadersWidthSizeMode rowHeadersWidthSizeMode, bool fixedColumnHeadersHeight, bool fixedRowsHeight);" />
      <MemberSignature Language="F#" Value="member this.AutoResizeRowHeadersWidth : System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode * bool * bool -&gt; unit" Usage="dataGridView.AutoResizeRowHeadersWidth (rowHeadersWidthSizeMode, fixedColumnHeadersHeight, fixedRowsHeight)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rowHeadersWidthSizeMode" Type="System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode" />
        <Parameter Name="fixedColumnHeadersHeight" Type="System.Boolean" />
        <Parameter Name="fixedRowsHeight" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="rowHeadersWidthSizeMode"><see cref="T:System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode" /> 值之一。</param>
        <param name="fixedColumnHeadersHeight">如果要基于列标题的当前高度计算新宽度，则为<see langword="true" /> ；如果要在列标题的高度也进行调整的假定条件下计算宽度，则为 <see langword="false" /> 。</param>
        <param name="fixedRowsHeight">如果要基于当前的行高计算新宽度，则为 <see langword="true" />；如果要在行高也进行调整的假定条件下计算宽度，则为 <see langword="false" />。</param>
        <summary>使用指定的大小调整模式调整行标题的宽度，还可以选择在行和/或列标题的高度随后进行调整的假定条件下计算宽度。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果要控制行标题的大小调整，此方法非常有用。 仅对每个方法调用调整行标题的宽度;如果后续行标题的内容发生更改，则不会自动调整行标题。 若要将行标题设置为在其内容更改时自动调整大小，请使用 <xref:System.Windows.Forms.DataGridView.RowHeadersWidthSizeMode%2A> 属性。  
  
 此方法允许您指定一个调整大小模式，该模式基于有限的一组标头中的值（例如，仅显示的行中的值）计算新的宽度。 这会提高控件包含大量行时的性能。  
  
 此重载受到保护，旨在使您能够在派生类中实现理想的单元格高度与宽度的比率 <xref:System.Windows.Forms.DataGridView> 。 如果 `fixedColumnHeadersHeight` 或 `fixedRowsHeight` 参数为，则将 `false` 计算行标题的宽度，并假定你将调用 <xref:System.Windows.Forms.DataGridView.AutoResizeRows%2A> 和 <xref:System.Windows.Forms.DataGridView.AutoResizeColumnHeadersHeight%2A> 下一等方法。  
  
 有关以编程方式调整大小的详细信息，请参阅 [Windows 窗体 DataGridView 控件中的调整大小选项](/dotnet/framework/winforms/controls/sizing-options-in-the-windows-forms-datagridview-control)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="rowHeadersWidthSizeMode" /> 具有值 <see cref="F:System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode.EnableResizing" /> 或 <see cref="F:System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode.DisableResizing" />。</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="rowHeadersWidthSizeMode" /> 不是有效的 <see cref="T:System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode" /> 值。</exception>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="AutoResizeRowHeadersWidth">
      <MemberSignature Language="C#" Value="protected void AutoResizeRowHeadersWidth (int rowIndex, System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode rowHeadersWidthSizeMode, bool fixedColumnHeadersHeight, bool fixedRowHeight);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void AutoResizeRowHeadersWidth(int32 rowIndex, valuetype System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode rowHeadersWidthSizeMode, bool fixedColumnHeadersHeight, bool fixedRowHeight) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.AutoResizeRowHeadersWidth(System.Int32,System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub AutoResizeRowHeadersWidth (rowIndex As Integer, rowHeadersWidthSizeMode As DataGridViewRowHeadersWidthSizeMode, fixedColumnHeadersHeight As Boolean, fixedRowHeight As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void AutoResizeRowHeadersWidth(int rowIndex, System::Windows::Forms::DataGridViewRowHeadersWidthSizeMode rowHeadersWidthSizeMode, bool fixedColumnHeadersHeight, bool fixedRowHeight);" />
      <MemberSignature Language="F#" Value="member this.AutoResizeRowHeadersWidth : int * System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode * bool * bool -&gt; unit" Usage="dataGridView.AutoResizeRowHeadersWidth (rowIndex, rowHeadersWidthSizeMode, fixedColumnHeadersHeight, fixedRowHeight)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rowIndex" Type="System.Int32" />
        <Parameter Name="rowHeadersWidthSizeMode" Type="System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode" />
        <Parameter Name="fixedColumnHeadersHeight" Type="System.Boolean" />
        <Parameter Name="fixedRowHeight" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="rowIndex">某一行的索引，该行包含内容已更改的标题。</param>
        <param name="rowHeadersWidthSizeMode"><see cref="T:System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode" /> 值之一。</param>
        <param name="fixedColumnHeadersHeight">如果要基于列标题的当前高度计算新宽度，则为 <see langword="true" />；如果要在列标题的高度也进行调整的假定条件下计算宽度，则为 <see langword="false" />。</param>
        <param name="fixedRowHeight">如果要基于指定行的当前高度计算新宽度，则为 <see langword="true" />；如果要在行高也进行调整的假定条件下计算宽度，则为 <see langword="false" />。</param>
        <summary>使用指定的大小调整模式基于指定行中标题内容的更改来调整行标题的宽度，还可以选择在列和/或行标题的高度随后进行调整的假定条件下计算宽度。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果您想要控制行标题调整行标题的时间，如果用户编辑或更改了绑定数据源，则此方法很有用。 如果内容更改需要行标题，则只对每个方法调用调整行标题的宽度;如果后续行标题的内容发生更改，则不会自动调整行标题。 若要将行标题设置为在其内容更改时自动调整大小，请使用 <xref:System.Windows.Forms.DataGridView.RowHeadersWidthSizeMode%2A> 属性。  
  
 此方法允许您指定一个调整大小模式，该模式基于有限的一组标头中的值（例如，仅显示的行中的值）计算新的宽度。 这会提高控件包含大量行时的性能。  
  
 此重载受到保护，旨在使您能够在派生类中实现理想的单元格高度与宽度的比率 <xref:System.Windows.Forms.DataGridView> 。 如果 `fixedColumnHeadersHeight` 或 `fixedRowHeight` 参数为，则将 `false` 计算行标题的宽度，并假定你将调用 <xref:System.Windows.Forms.DataGridView.AutoResizeRows%2A> 和 <xref:System.Windows.Forms.DataGridView.AutoResizeColumnHeadersHeight%2A> 下一等方法。  
  
 有关以编程方式调整大小的详细信息，请参阅 [Windows 窗体 DataGridView 控件中的调整大小选项](/dotnet/framework/winforms/controls/sizing-options-in-the-windows-forms-datagridview-control)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="rowIndex" /> 不在 0 到行数减 1 的有效范围内。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="rowHeadersWidthSizeMode" /> 具有值 <see cref="F:System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode.EnableResizing" /> 或 <see cref="F:System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode.DisableResizing" />。</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="rowHeadersWidthSizeMode" /> 不是有效的 <see cref="T:System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode" /> 值。</exception>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="AutoResizeRows">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>调整某些或所有行的高度以适应其内容。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AutoResizeRows">
      <MemberSignature Language="C#" Value="public void AutoResizeRows ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AutoResizeRows() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.AutoResizeRows" />
      <MemberSignature Language="VB.NET" Value="Public Sub AutoResizeRows ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AutoResizeRows();" />
      <MemberSignature Language="F#" Value="member this.AutoResizeRows : unit -&gt; unit" Usage="dataGridView.AutoResizeRows " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>调整所有行的高度以适应其所有单元格（包括标题单元格）的内容。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果要控制行的调整时间，此方法非常有用。 对于每个方法调用，行高只进行一次调整;如果后续行的内容发生更改，则不会自动调整行。 若要调整特定行的大小，请使用 <xref:System.Windows.Forms.DataGridView.AutoResizeRow%2A> 方法。 若要调整行子集的大小，请使用 <xref:System.Windows.Forms.DataGridView.AutoResizeRows%28System.Int32%2CSystem.Int32%2CSystem.Windows.Forms.DataGridViewAutoSizeRowMode%2CSystem.Boolean%29> 重载。 若要将行设置为在其内容更改时自动调整大小，请使用 <xref:System.Windows.Forms.DataGridView.AutoSizeRowsMode%2A> 属性。  
  
 当调整行大小时，若要将单元格内容换行，则单元格的有效单元格样式的 <xref:System.Windows.Forms.DataGridViewCellStyle.WrapMode%2A> 属性值必须为 <xref:System.Windows.Forms.DataGridViewTriState.True> 。  
  
 有关以编程方式调整大小的详细信息，请参阅 [Windows 窗体 DataGridView 控件中的调整大小选项](/dotnet/framework/winforms/controls/sizing-options-in-the-windows-forms-datagridview-control)。

## Examples  
 下面的代码示例演示如何基于非标题单元格内容调整所有行的大小。 此代码示例摘自 [如何：以编程方式调整单元格大小以适应 Windows 窗体 DataGridView 控件中的内容](/dotnet/framework/winforms/controls/programmatically-resize-cells-to-fit-content-in-the-datagrid)的更大示例。  
  
 [!code-cpp[System.Windows.Forms.DataGridView.ProgrammaticResizing#7](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.DataGridView.ProgrammaticResizing/CPP/programmaticsizing.cpp#7)]
 [!code-csharp[System.Windows.Forms.DataGridView.ProgrammaticResizing#7](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridView.ProgrammaticResizing/CS/programmaticsizing.cs#7)]
 [!code-vb[System.Windows.Forms.DataGridView.ProgrammaticResizing#7](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridView.ProgrammaticResizing/VB/programmaticsizing.vb#7)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="AutoResizeRows">
      <MemberSignature Language="C#" Value="public void AutoResizeRows (System.Windows.Forms.DataGridViewAutoSizeRowsMode autoSizeRowsMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AutoResizeRows(valuetype System.Windows.Forms.DataGridViewAutoSizeRowsMode autoSizeRowsMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.AutoResizeRows(System.Windows.Forms.DataGridViewAutoSizeRowsMode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AutoResizeRows (autoSizeRowsMode As DataGridViewAutoSizeRowsMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AutoResizeRows(System::Windows::Forms::DataGridViewAutoSizeRowsMode autoSizeRowsMode);" />
      <MemberSignature Language="F#" Value="member this.AutoResizeRows : System.Windows.Forms.DataGridViewAutoSizeRowsMode -&gt; unit" Usage="dataGridView.AutoResizeRows autoSizeRowsMode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="autoSizeRowsMode" Type="System.Windows.Forms.DataGridViewAutoSizeRowsMode" />
      </Parameters>
      <Docs>
        <param name="autoSizeRowsMode"><see cref="T:System.Windows.Forms.DataGridViewAutoSizeRowsMode" /> 值之一。</param>
        <summary>使用指定的大小调整模式值调整行高。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果要控制行的调整时间，此方法非常有用。 对于每个方法调用，行高只进行一次调整;如果后续行的内容发生更改，则不会自动调整行。 若要调整特定行的大小，请使用 <xref:System.Windows.Forms.DataGridView.AutoResizeRow%2A> 方法。 若要调整行子集的大小，请使用 <xref:System.Windows.Forms.DataGridView.AutoResizeRows%28System.Int32%2CSystem.Int32%2CSystem.Windows.Forms.DataGridViewAutoSizeRowMode%2CSystem.Boolean%29> 重载。 若要将行设置为在其内容更改时自动调整大小，请使用 <xref:System.Windows.Forms.DataGridView.AutoSizeRowsMode%2A> 属性。  
  
 当调整行大小时，若要将单元格内容换行，则单元格的有效单元格样式的 <xref:System.Windows.Forms.DataGridViewCellStyle.WrapMode%2A> 属性值必须为 <xref:System.Windows.Forms.DataGridViewTriState.True> 。  
  
 此重载允许您指定调整大小模式，该模式基于有限单元格集中的值（例如，仅显示的行中的值）计算新高度。 这会提高控件包含大量行时的性能。  
  
 有关以编程方式调整大小的详细信息，请参阅 [Windows 窗体 DataGridView 控件中的调整大小选项](/dotnet/framework/winforms/controls/sizing-options-in-the-windows-forms-datagridview-control)。

## Examples  
 下面的代码示例演示如何基于非标题单元格内容调整所有行的大小。 此代码示例摘自 [如何：以编程方式调整单元格大小以适应 Windows 窗体 DataGridView 控件中的内容](/dotnet/framework/winforms/controls/programmatically-resize-cells-to-fit-content-in-the-datagrid)的更大示例。  
  
 [!code-cpp[System.Windows.Forms.DataGridView.ProgrammaticResizing#7](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.DataGridView.ProgrammaticResizing/CPP/programmaticsizing.cpp#7)]
 [!code-csharp[System.Windows.Forms.DataGridView.ProgrammaticResizing#7](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridView.ProgrammaticResizing/CS/programmaticsizing.cs#7)]
 [!code-vb[System.Windows.Forms.DataGridView.ProgrammaticResizing#7](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridView.ProgrammaticResizing/VB/programmaticsizing.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><paramref name="autoSizeRowsMode" /> 具有值 <see cref="F:System.Windows.Forms.DataGridViewAutoSizeRowsMode.AllHeaders" /> 或 <see cref="F:System.Windows.Forms.DataGridViewAutoSizeRowsMode.DisplayedHeaders" />，并且 <see cref="P:System.Windows.Forms.DataGridView.RowHeadersVisible" /> 为 <see langword="false" />。</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="autoSizeRowsMode" /> 不是有效的 <see cref="T:System.Windows.Forms.DataGridViewAutoSizeRowsMode" /> 值。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="autoSizeRowsMode" /> 具有值 <see cref="F:System.Windows.Forms.DataGridViewAutoSizeRowsMode.None" />。</exception>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="AutoResizeRows">
      <MemberSignature Language="C#" Value="protected void AutoResizeRows (System.Windows.Forms.DataGridViewAutoSizeRowsMode autoSizeRowsMode, bool fixedWidth);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void AutoResizeRows(valuetype System.Windows.Forms.DataGridViewAutoSizeRowsMode autoSizeRowsMode, bool fixedWidth) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.AutoResizeRows(System.Windows.Forms.DataGridViewAutoSizeRowsMode,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub AutoResizeRows (autoSizeRowsMode As DataGridViewAutoSizeRowsMode, fixedWidth As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void AutoResizeRows(System::Windows::Forms::DataGridViewAutoSizeRowsMode autoSizeRowsMode, bool fixedWidth);" />
      <MemberSignature Language="F#" Value="member this.AutoResizeRows : System.Windows.Forms.DataGridViewAutoSizeRowsMode * bool -&gt; unit" Usage="dataGridView.AutoResizeRows (autoSizeRowsMode, fixedWidth)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="autoSizeRowsMode" Type="System.Windows.Forms.DataGridViewAutoSizeRowsMode" />
        <Parameter Name="fixedWidth" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="autoSizeRowsMode"><see cref="T:System.Windows.Forms.DataGridViewAutoSizeRowsMode" /> 值之一。</param>
        <param name="fixedWidth">如果基于当前的列宽计算新高度，则为 <see langword="true" />；如果在列宽也进行调整的假定条件下计算高度，则为 <see langword="false" />。</param>
        <summary>使用指定的大小调整模式调整所有行的高度，还可以选择在列宽随后进行调整的假定条件下计算高度。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果要控制行的调整时间，此方法非常有用。 对于每个方法调用，行高只进行一次调整;如果后续行的内容发生更改，则不会自动调整行。 若要调整特定行的大小，请使用 <xref:System.Windows.Forms.DataGridView.AutoResizeRow%2A> 方法。 若要调整行子集的大小，请使用 <xref:System.Windows.Forms.DataGridView.AutoResizeRows%28System.Int32%2CSystem.Int32%2CSystem.Windows.Forms.DataGridViewAutoSizeRowMode%2CSystem.Boolean%29> 重载。 若要将行设置为在其内容更改时自动调整大小，请使用 <xref:System.Windows.Forms.DataGridView.AutoSizeRowsMode%2A> 属性。  
  
 当调整行大小时，若要将单元格内容换行，则单元格的有效单元格样式的 <xref:System.Windows.Forms.DataGridViewCellStyle.WrapMode%2A> 属性值必须为 <xref:System.Windows.Forms.DataGridViewTriState.True> 。  
  
 此重载允许您指定调整大小模式，该模式基于有限单元格集中的值（例如，仅显示的行中的值）计算新高度。 这会提高控件包含大量行时的性能。  
  
 此重载受到保护，旨在使您能够在派生类中实现理想的单元格高度与宽度的比率 <xref:System.Windows.Forms.DataGridView> 。 如果 `fixedWidth` 参数为，则将 `false` 按您将调用或方法的预期计算行高度 <xref:System.Windows.Forms.DataGridView.AutoResizeColumn%2A> <xref:System.Windows.Forms.DataGridView.AutoResizeColumns%2A> 。  
  
 有关以编程方式调整大小的详细信息，请参阅 [Windows 窗体 DataGridView 控件中的调整大小选项](/dotnet/framework/winforms/controls/sizing-options-in-the-windows-forms-datagridview-control)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><paramref name="autoSizeRowsMode" /> 具有值 <see cref="F:System.Windows.Forms.DataGridViewAutoSizeRowsMode.AllHeaders" /> 或 <see cref="F:System.Windows.Forms.DataGridViewAutoSizeRowsMode.DisplayedHeaders" />，并且 <see cref="P:System.Windows.Forms.DataGridView.RowHeadersVisible" /> 为 <see langword="false" />。</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="autoSizeRowsMode" /> 不是有效的 <see cref="T:System.Windows.Forms.DataGridViewAutoSizeRowsMode" /> 值。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="autoSizeRowsMode" /> 具有值 <see cref="F:System.Windows.Forms.DataGridViewAutoSizeRowsMode.None" />。</exception>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="AutoResizeRows">
      <MemberSignature Language="C#" Value="protected void AutoResizeRows (int rowIndexStart, int rowsCount, System.Windows.Forms.DataGridViewAutoSizeRowMode autoSizeRowMode, bool fixedWidth);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void AutoResizeRows(int32 rowIndexStart, int32 rowsCount, valuetype System.Windows.Forms.DataGridViewAutoSizeRowMode autoSizeRowMode, bool fixedWidth) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.AutoResizeRows(System.Int32,System.Int32,System.Windows.Forms.DataGridViewAutoSizeRowMode,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub AutoResizeRows (rowIndexStart As Integer, rowsCount As Integer, autoSizeRowMode As DataGridViewAutoSizeRowMode, fixedWidth As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void AutoResizeRows(int rowIndexStart, int rowsCount, System::Windows::Forms::DataGridViewAutoSizeRowMode autoSizeRowMode, bool fixedWidth);" />
      <MemberSignature Language="F#" Value="member this.AutoResizeRows : int * int * System.Windows.Forms.DataGridViewAutoSizeRowMode * bool -&gt; unit" Usage="dataGridView.AutoResizeRows (rowIndexStart, rowsCount, autoSizeRowMode, fixedWidth)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rowIndexStart" Type="System.Int32" />
        <Parameter Name="rowsCount" Type="System.Int32" />
        <Parameter Name="autoSizeRowMode" Type="System.Windows.Forms.DataGridViewAutoSizeRowMode" />
        <Parameter Name="fixedWidth" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="rowIndexStart">要调整大小的第一行的索引。</param>
        <param name="rowsCount">要调整大小的行数。</param>
        <param name="autoSizeRowMode"><see cref="T:System.Windows.Forms.DataGridViewAutoSizeRowMode" /> 值之一。</param>
        <param name="fixedWidth">如果基于当前的列宽计算新高度，则为 <see langword="true" />；如果在列宽也进行调整的假定条件下计算高度，则为 <see langword="false" />。</param>
        <summary>使用指定的大小调整模式调整指定行的高度，还可以选择在列宽随后进行调整的假定条件下计算高度。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果要控制行的大小调整，则此方法非常有用，但您希望只调整行的特定子集的大小，例如那些已更新的绑定记录范围内的行。 仅对每个方法调用调整指定行的行高;如果后续行的内容发生更改，则不会自动调整行。 若要调整特定行的大小，请使用 <xref:System.Windows.Forms.DataGridView.AutoResizeRow%2A> 方法。 若要调整所有行的大小，请使用方法的其他重载 <xref:System.Windows.Forms.DataGridView.AutoResizeRows%2A> 。 若要将行设置为在其内容更改时自动调整大小，请使用 <xref:System.Windows.Forms.DataGridView.AutoSizeRowsMode%2A> 属性。  
  
 当调整行大小时，若要将单元格内容换行，则单元格的有效单元格样式的 <xref:System.Windows.Forms.DataGridViewCellStyle.WrapMode%2A> 属性值必须为 <xref:System.Windows.Forms.DataGridViewTriState.True> 。  
  
 此重载允许您指定调整大小模式，该模式基于有限单元格集中的值（例如，仅显示的行中的值）计算新高度。 这会提高控件包含大量行时的性能。  
  
 此重载受到保护，旨在使您能够在派生类中实现理想的单元格高度与宽度的比率 <xref:System.Windows.Forms.DataGridView> 。 如果 `fixedWidth` 参数为，则将 `false` 按您将调用或方法的预期计算行高度 <xref:System.Windows.Forms.DataGridView.AutoResizeColumn%2A> <xref:System.Windows.Forms.DataGridView.AutoResizeColumns%2A> 。  
  
 有关以编程方式调整大小的详细信息，请参阅 [Windows 窗体 DataGridView 控件中的调整大小选项](/dotnet/framework/winforms/controls/sizing-options-in-the-windows-forms-datagridview-control)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><paramref name="autoSizeRowsMode" /> 具有值 <see cref="F:System.Windows.Forms.DataGridViewAutoSizeRowsMode.AllHeaders" /> 或 <see cref="F:System.Windows.Forms.DataGridViewAutoSizeRowsMode.DisplayedHeaders" />，并且 <see cref="P:System.Windows.Forms.DataGridView.RowHeadersVisible" /> 为 <see langword="false" />。</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="autoSizeRowsMode" /> 不是有效的 <see cref="T:System.Windows.Forms.DataGridViewAutoSizeRowsMode" /> 值。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="autoSizeRowsMode" /> 具有值 <see cref="F:System.Windows.Forms.DataGridViewAutoSizeRowsMode.None" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="rowIndexStart" /> 小于 0。  
  
- 或 - 
 <paramref name="rowsCount" /> 小于 0。</exception>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="AutoSize">
      <MemberSignature Language="C#" Value="public override bool AutoSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.AutoSize" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property AutoSize As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool AutoSize { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AutoSize : bool with get, set" Usage="System.Windows.Forms.DataGridView.AutoSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>此属性与此类无关。</summary>
        <value>如果已启用，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Windows.Forms.Control.AutoSize" />
      </Docs>
    </Member>
    <Member MemberName="AutoSizeColumnModeChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewAutoSizeColumnModeEventHandler AutoSizeColumnModeChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewAutoSizeColumnModeEventHandler AutoSizeColumnModeChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.AutoSizeColumnModeChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event AutoSizeColumnModeChanged As DataGridViewAutoSizeColumnModeEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::DataGridViewAutoSizeColumnModeEventHandler ^ AutoSizeColumnModeChanged;" />
      <MemberSignature Language="F#" Value="member this.AutoSizeColumnModeChanged : System.Windows.Forms.DataGridViewAutoSizeColumnModeEventHandler " Usage="member this.AutoSizeColumnModeChanged : System.Windows.Forms.DataGridViewAutoSizeColumnModeEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewAutoSizeColumnModeEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当列的 <see cref="P:System.Windows.Forms.DataGridViewColumn.AutoSizeMode" /> 属性值更改时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关如何处理事件的详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。

## Examples  
 下面的代码示例演示如何使用此事件。 此示例是 [如何：操作 Windows 窗体 DataGridView 控件](/dotnet/framework/winforms/controls/how-to-manipulate-columns-in-the-windows-forms-datagridview-control)中的列的一个更大示例的一部分。  
  
 [!code-cpp[System.Windows.Forms.DataGridView.ButtonDemos#180](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.DataGridView.ButtonDemos/CPP/DataGridViewColumnDemo.cpp#180)]
 [!code-csharp[System.Windows.Forms.DataGridView.ButtonDemos#180](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridView.ButtonDemos/CS/DataGridViewColumnDemo.cs#180)]
 [!code-vb[System.Windows.Forms.DataGridView.ButtonDemos#180](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridView.ButtonDemos/VB/datagridviewcolumndemo.vb#180)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.DataGridViewColumn.AutoSizeMode" />
        <altmember cref="T:System.Windows.Forms.DataGridViewAutoSizeColumnModeEventHandler" />
        <altmember cref="T:System.Windows.Forms.DataGridViewAutoSizeColumnModeEventArgs" />
        <altmember cref="M:System.Windows.Forms.DataGridView.OnAutoSizeColumnModeChanged(System.Windows.Forms.DataGridViewAutoSizeColumnModeEventArgs)" />
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="AutoSizeColumnsMode">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataGridViewAutoSizeColumnsMode AutoSizeColumnsMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.DataGridViewAutoSizeColumnsMode AutoSizeColumnsMode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.AutoSizeColumnsMode" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoSizeColumnsMode As DataGridViewAutoSizeColumnsMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::DataGridViewAutoSizeColumnsMode AutoSizeColumnsMode { System::Windows::Forms::DataGridViewAutoSizeColumnsMode get(); void set(System::Windows::Forms::DataGridViewAutoSizeColumnsMode value); };" />
      <MemberSignature Language="F#" Value="member this.AutoSizeColumnsMode : System.Windows.Forms.DataGridViewAutoSizeColumnsMode with get, set" Usage="System.Windows.Forms.DataGridView.AutoSizeColumnsMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewAutoSizeColumnsMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示如何确定列宽。</summary>
        <value>一个 <see cref="T:System.Windows.Forms.DataGridViewAutoSizeColumnsMode" /> 值。 默认值为 <see cref="F:System.Windows.Forms.DataGridViewAutoSizeColumnsMode.None" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性可让你配置控件，以使列宽自动调整为填充控件或调整单元格内容。 每当控件的宽度发生变化时，都会在填充模式下调整大小。 在基于内容的大小调整模式下，只要单元格内容发生更改，或者 <xref:System.Windows.Forms.DataGridViewCellStyle.WrapMode%2A> 只要启用了行高，就会发生大小调整。 某些基于内容的大小调整模式允许您将调整大小限制为当前显示的行，以便提高性能。  
  
 若要更改单个列的大小调整模式，请设置其 <xref:System.Windows.Forms.DataGridViewColumn.AutoSizeMode%2A> 属性。 此属性的默认值为 <xref:System.Windows.Forms.DataGridViewAutoSizeColumnMode.NotSet> ，指示列继承控件的行为及其 <xref:System.Windows.Forms.DataGridViewColumn.InheritedAutoSizeMode%2A> 属性值。  
  
 填充模式中的列按其属性值指示的比例划分可用控件的宽度 <xref:System.Windows.Forms.DataGridViewColumn.FillWeight%2A> 。 填充模式可用的宽度是通过从控件工作区的宽度减去所有其他列的宽度来确定的。 如果此宽度小于 <xref:System.Windows.Forms.DataGridViewColumn.MinimumWidth%2A> 所有填充模式列的组合值，将显示水平滚动条，所有填充模式列都以最小宽度显示，并禁用用户列大小调整。 有关列填充模式的详细信息，请参阅 [Windows 窗体 DataGridView 控件中的列填充模式](/dotnet/framework/winforms/controls/column-fill-mode-in-the-windows-forms-datagridview-control)。  
  
 只有 <xref:System.Windows.Forms.DataGridViewColumn.Visible%2A> 属性值为的列才 `true` 会自动调整大小，更改列的可见性不会导致调整大小。 此外，如果将列设置为自动调整大小，则用户无法用鼠标调整列宽。  
  
 若要以编程方式调整列宽，请使用 <xref:System.Windows.Forms.DataGridView.AutoResizeColumn%2A> 或 <xref:System.Windows.Forms.DataGridView.AutoResizeColumns%2A> 方法或设置列 <xref:System.Windows.Forms.DataGridViewColumn.Width%2A> 属性。  
  
 有关基于内容的自动调整大小的详细信息，请参阅 [Windows 窗体 DataGridView 控件中的调整大小选项](/dotnet/framework/winforms/controls/sizing-options-in-the-windows-forms-datagridview-control)。

## Examples  
 下面的代码示例演示如何在主/从方案中使用此属性，这两个 <xref:System.Windows.Forms.DataGridView> 控件在父/子关系中显示两个表中的数据。 在此示例中，主控件的列大小调整模式为 <xref:System.Windows.Forms.DataGridViewAutoSizeColumnsMode.None> ，列宽度以编程方式初始化以适应加载的值。 详细信息控件设置为自动列大小调整模式，以便每当值改变时，列将自动调整 (例如，当用户更改父表) 中的当前行时。 此示例是 [如何：使用两个 Windows 窗体 DataGridView 控件创建主窗体/详细信息窗体](/dotnet/framework/winforms/controls/create-a-master-detail-form-using-two-datagridviews)中提供的更大示例的一部分。  
  
 [!code-csharp[System.Windows.Forms.DataGridViewMasterDetails#10](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewMasterDetails/CS/masterdetails.cs#10)]
 [!code-vb[System.Windows.Forms.DataGridViewMasterDetails#10](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewMasterDetails/VB/masterdetails.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">当设置此属性时，指定的值不是有效的 <see cref="T:System.Windows.Forms.DataGridViewAutoSizeColumnsMode" /> 值。</exception>
        <exception cref="T:System.InvalidOperationException">当设置此属性时，指定值为 <see cref="F:System.Windows.Forms.DataGridViewAutoSizeColumnsMode.ColumnHeader" />，列标题被隐藏，并且至少有一个可见列具有 <see cref="F:System.Windows.Forms.DataGridViewAutoSizeColumnMode.NotSet" /> 的 <see cref="P:System.Windows.Forms.DataGridViewColumn.AutoSizeMode" /> 属性值。  
  
- 或 - 
当设置此属性时，指定值为 <see cref="F:System.Windows.Forms.DataGridViewAutoSizeColumnsMode.Fill" />，并且至少一个具有 <see cref="F:System.Windows.Forms.DataGridViewAutoSizeColumnMode.NotSet" /> 的 <see cref="P:System.Windows.Forms.DataGridViewColumn.AutoSizeMode" /> 属性值的可见列被冻结。</exception>
        <altmember cref="T:System.Windows.Forms.DataGridViewAutoSizeColumnsMode" />
        <altmember cref="P:System.Windows.Forms.DataGridViewColumn.FillWeight" />
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="AutoSizeColumnsModeChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewAutoSizeColumnsModeEventHandler AutoSizeColumnsModeChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewAutoSizeColumnsModeEventHandler AutoSizeColumnsModeChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.AutoSizeColumnsModeChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event AutoSizeColumnsModeChanged As DataGridViewAutoSizeColumnsModeEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::DataGridViewAutoSizeColumnsModeEventHandler ^ AutoSizeColumnsModeChanged;" />
      <MemberSignature Language="F#" Value="member this.AutoSizeColumnsModeChanged : System.Windows.Forms.DataGridViewAutoSizeColumnsModeEventHandler " Usage="member this.AutoSizeColumnsModeChanged : System.Windows.Forms.DataGridViewAutoSizeColumnsModeEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewAutoSizeColumnsModeEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当 <see cref="P:System.Windows.Forms.DataGridView.AutoSizeColumnsMode" /> 属性的值更改时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关如何处理事件的详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。

## Examples  
 下面的代码示例演示如何使用此成员。 在此示例中，事件处理程序报告事件的发生 <xref:System.Windows.Forms.DataGridView.AutoSizeColumnsModeChanged> 。 此报表可帮助你了解何时发生事件，并可帮助你进行调试。 若要报告多个事件或频繁发生的事件，请考虑 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 将消息替换为多行或将其追加到多行 <xref:System.Windows.Forms.TextBox> 。  
  
 若要运行示例代码，请将其粘贴到包含名为的类型的实例的项目中 <xref:System.Windows.Forms.DataGridView> `DataGridView1` 。 然后，确保事件处理程序与事件相关联 <xref:System.Windows.Forms.DataGridView.AutoSizeColumnsModeChanged> 。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#257](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#257)]
 [!code-vb[System.Windows.Forms.EventExamples#257](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#257)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DataGridViewAutoSizeColumnsModeEventHandler" />
        <altmember cref="T:System.Windows.Forms.DataGridViewAutoSizeColumnsModeEventArgs" />
        <altmember cref="M:System.Windows.Forms.DataGridView.OnAutoSizeColumnsModeChanged(System.Windows.Forms.DataGridViewAutoSizeColumnsModeEventArgs)" />
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="AutoSizeRowsMode">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataGridViewAutoSizeRowsMode AutoSizeRowsMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.DataGridViewAutoSizeRowsMode AutoSizeRowsMode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.AutoSizeRowsMode" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoSizeRowsMode As DataGridViewAutoSizeRowsMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::DataGridViewAutoSizeRowsMode AutoSizeRowsMode { System::Windows::Forms::DataGridViewAutoSizeRowsMode get(); void set(System::Windows::Forms::DataGridViewAutoSizeRowsMode value); };" />
      <MemberSignature Language="F#" Value="member this.AutoSizeRowsMode : System.Windows.Forms.DataGridViewAutoSizeRowsMode with get, set" Usage="System.Windows.Forms.DataGridView.AutoSizeRowsMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewAutoSizeRowsMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示如何确定行高。</summary>
        <value>一个 <see cref="T:System.Windows.Forms.DataGridViewAutoSizeRowsMode" /> 值，指示大小调整模式。 默认值为 <see cref="F:System.Windows.Forms.DataGridViewAutoSizeRowsMode.None" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性可让你配置控件，以便在内容发生更改时自动调整行高以适应其内容。 如果 <xref:System.Windows.Forms.DataGridViewCellStyle.WrapMode%2A> 启用，则当列宽发生变化时，还会调整行高度。 某些大小调整模式允许将大小调整限制为当前显示的行，以便提高性能。  
  
 只有 <xref:System.Windows.Forms.DataGridViewRow.Visible%2A> 属性值为的行才 `true` 会自动调整大小，更改行的可见性不会导致调整大小。 此外，如果将行设置为自动调整大小，则用户无法用鼠标调整行高。  
  
 <xref:System.Windows.Forms.DataGridViewRow.Height%2A>自动调整大小的行的值将在布局期间重新计算，以确定所使用字体的大小。 若要获取正确的 <xref:System.Windows.Forms.DataGridViewRow.Height%2A> ，应在窗体的 <xref:System.Windows.Forms.Control.Layout> 事件而不是在窗体的构造函数中检索值。  
  
 若要以编程方式调整行高，请使用 <xref:System.Windows.Forms.DataGridView.AutoResizeRow%2A> 或 <xref:System.Windows.Forms.DataGridView.AutoResizeRows%2A> 方法，或设置行 <xref:System.Windows.Forms.DataGridViewRow.Height%2A> 属性。  
  
 当调整行大小时，若要将单元格内容换行，则单元格的有效单元格样式的 <xref:System.Windows.Forms.DataGridViewCellStyle.WrapMode%2A> 属性值必须为 <xref:System.Windows.Forms.DataGridViewTriState.True> 。  
  
 有关基于内容的自动调整大小的详细信息，请参阅 [Windows 窗体 DataGridView 控件中的调整大小选项](/dotnet/framework/winforms/controls/sizing-options-in-the-windows-forms-datagridview-control)。

## Examples  
 下面的代码示例演示如何将行设置为基于行标题和所有列的内容自动调整大小。 此代码示例摘自 [如何：在 Windows 窗体 DataGridView 控件中的内容更改时自动调整单元格大小](/dotnet/framework/winforms/controls/automatically-resize-cells-when-content-changes-in-the-datagrid)的示例中提供的一个更大示例的一部分。  
  
 [!code-cpp[System.Windows.Forms.DataGridView.AutoSizing#9](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.DataGridView.AutoSizing/CPP/autosizing.cpp#9)]
 [!code-csharp[System.Windows.Forms.DataGridView.AutoSizing#9](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridView.AutoSizing/CS/autosizing.cs#9)]
 [!code-vb[System.Windows.Forms.DataGridView.AutoSizing#9](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridView.AutoSizing/VB/autosizing.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">当设置此属性时，指定的值不是有效的 <see cref="T:System.Windows.Forms.DataGridViewAutoSizeRowsMode" /> 值。</exception>
        <exception cref="T:System.InvalidOperationException">当设置此属性时，指定的值是 <see cref="F:System.Windows.Forms.DataGridViewAutoSizeRowsMode.AllHeaders" /> 或 <see cref="F:System.Windows.Forms.DataGridViewAutoSizeRowsMode.DisplayedHeaders" />，且行标题被隐藏。</exception>
        <altmember cref="T:System.Windows.Forms.DataGridViewAutoSizeRowsMode" />
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
        <related type="Article" href="/dotnet/framework/winforms/controls/automatically-resize-cells-when-content-changes-in-the-datagrid">如何：自动调整单元格的大小来适应 Windows 窗体 DataGridView 控件中的内容变化</related>
      </Docs>
    </Member>
    <Member MemberName="AutoSizeRowsModeChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewAutoSizeModeEventHandler AutoSizeRowsModeChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewAutoSizeModeEventHandler AutoSizeRowsModeChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.AutoSizeRowsModeChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event AutoSizeRowsModeChanged As DataGridViewAutoSizeModeEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::DataGridViewAutoSizeModeEventHandler ^ AutoSizeRowsModeChanged;" />
      <MemberSignature Language="F#" Value="member this.AutoSizeRowsModeChanged : System.Windows.Forms.DataGridViewAutoSizeModeEventHandler " Usage="member this.AutoSizeRowsModeChanged : System.Windows.Forms.DataGridViewAutoSizeModeEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewAutoSizeModeEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当 <see cref="T:System.Windows.Forms.DataGridViewAutoSizeRowsMode" /> 属性的值更改时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关如何处理事件的详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。

## Examples  
 下面的代码示例演示如何使用此事件。 此示例摘自 [如何：在 Windows 窗体 DataGridView 控件中的内容更改时自动调整单元格大小](/dotnet/framework/winforms/controls/automatically-resize-cells-when-content-changes-in-the-datagrid)的示例。  
  
 [!code-cpp[System.Windows.Forms.DataGridView.AutoSizing#10](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.DataGridView.AutoSizing/CPP/autosizing.cpp#10)]
 [!code-csharp[System.Windows.Forms.DataGridView.AutoSizing#10](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridView.AutoSizing/CS/autosizing.cs#10)]
 [!code-vb[System.Windows.Forms.DataGridView.AutoSizing#10](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridView.AutoSizing/VB/autosizing.vb#10)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="BackColor">
      <MemberSignature Language="C#" Value="public override System.Drawing.Color BackColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color BackColor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.BackColor" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property BackColor As Color" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Drawing::Color BackColor { System::Drawing::Color get(); void set(System::Drawing::Color value); };" />
      <MemberSignature Language="F#" Value="member this.BackColor : System.Drawing.Color with get, set" Usage="System.Windows.Forms.DataGridView.BackColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置控件的背景色。</summary>
        <value>表示控件背景色的 <see cref="T:System.Drawing.Color" />。 默认为 <see cref="P:System.Windows.Forms.Control.DefaultBackColor" /> 属性的值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性与此控件无关。 若要设置 <xref:System.Windows.Forms.DataGridView> 控件未被单元格占用的部分的背景色，请使用 <xref:System.Windows.Forms.DataGridView.BackgroundColor%2A> 属性。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.DataGridView.BackgroundColor" />
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="BackColorChanged">
      <MemberSignature Language="C#" Value="public event EventHandler BackColorChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler BackColorChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.BackColorChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event BackColorChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ BackColorChanged;" />
      <MemberSignature Language="F#" Value="member this.BackColorChanged : EventHandler " Usage="member this.BackColorChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当 <see cref="P:System.Windows.Forms.DataGridView.BackColor" /> 属性的值更改时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.DataGridView.BackColorChanged>如果 <xref:System.Windows.Forms.DataGridView.BackColor%2A> 以编程方式或通过用户交互更改了属性，则会引发事件。  
  
 有关如何处理事件的详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="BackgroundColor">
      <MemberSignature Language="C#" Value="public System.Drawing.Color BackgroundColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color BackgroundColor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.BackgroundColor" />
      <MemberSignature Language="VB.NET" Value="Public Property BackgroundColor As Color" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Color BackgroundColor { System::Drawing::Color get(); void set(System::Drawing::Color value); };" />
      <MemberSignature Language="F#" Value="member this.BackgroundColor : System.Drawing.Color with get, set" Usage="System.Windows.Forms.DataGridView.BackgroundColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:System.Windows.Forms.DataGridView" /> 的背景色。</summary>
        <value>一个 <see cref="T:System.Drawing.Color" /> ，表示 <see cref="T:System.Windows.Forms.DataGridView" />的背景色。 默认值为 <see cref="P:System.Drawing.SystemColors.AppWorkspace" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.DataGridView.BackgroundColor%2A>属性确定 <xref:System.Windows.Forms.DataGridView> 未填充单元格的区域的颜色。

## Examples  
 下面的代码示例演示如何设置 <xref:System.Windows.Forms.DataGridView.BackgroundColor%2A> 属性。 此外，该代码示例还演示如何设置 <xref:System.Windows.Forms.DataGridViewColumn.Name%2A?displayProperty=nameWithType> 和 <xref:System.Windows.Forms.DataGridViewColumn.DefaultCellStyle%2A?displayProperty=nameWithType> 属性。 若要运行此示例，请将代码粘贴到包含名为的的窗体中 <xref:System.Windows.Forms.DataGridView> `dataGridView1` ，然后 `SetUpDataGridView` 从窗体的构造函数或 <xref:System.Windows.Forms.Form.Load> 事件处理程序调用方法。 确保所有事件都与事件处理程序相关联。  
  
 [!code-cpp[System.Windows.Forms.GridViewUnbound#5](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.GridViewUnbound/CPP/form1.cpp#5)]
 [!code-csharp[System.Windows.Forms.GridViewUnbound#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.GridViewUnbound/CS/form1.cs#5)]
 [!code-vb[System.Windows.Forms.GridViewUnbound#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.GridViewUnbound/VB/form1.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">当设置此属性时，指定的值为 <see cref="F:System.Drawing.Color.Empty" />。  
  
- 或 - 
当设置此属性时，指定的值具有小于 255 的 <see cref="P:System.Drawing.Color.A" /> 属性值。</exception>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="BackgroundColorChanged">
      <MemberSignature Language="C#" Value="public event EventHandler BackgroundColorChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler BackgroundColorChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.BackgroundColorChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event BackgroundColorChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ BackgroundColorChanged;" />
      <MemberSignature Language="F#" Value="member this.BackgroundColorChanged : EventHandler " Usage="member this.BackgroundColorChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当 <see cref="P:System.Windows.Forms.DataGridView.BackgroundColor" /> 属性的值更改时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关如何处理事件的详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。

## Examples  
 下面的代码示例演示如何使用此成员。 在此示例中，事件处理程序报告事件的发生 <xref:System.Windows.Forms.DataGridView.BackgroundColorChanged> 。 此报表可帮助你了解何时发生事件，并可帮助你进行调试。 若要报告多个事件或频繁发生的事件，请考虑 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 将消息替换为多行或将其追加到多行 <xref:System.Windows.Forms.TextBox> 。  
  
 若要运行示例代码，请将其粘贴到包含名为的类型的实例的项目中 <xref:System.Windows.Forms.DataGridView> `DataGridView1` 。 然后，确保事件处理程序与事件相关联 <xref:System.Windows.Forms.DataGridView.BackgroundColorChanged> 。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#259](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#259)]
 [!code-vb[System.Windows.Forms.EventExamples#259](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#259)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="BackgroundImage">
      <MemberSignature Language="C#" Value="public override System.Drawing.Image BackgroundImage { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Drawing.Image BackgroundImage" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.BackgroundImage" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property BackgroundImage As Image" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Drawing::Image ^ BackgroundImage { System::Drawing::Image ^ get(); void set(System::Drawing::Image ^ value); };" />
      <MemberSignature Language="F#" Value="member this.BackgroundImage : System.Drawing.Image with get, set" Usage="System.Windows.Forms.DataGridView.BackgroundImage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Image</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置在控件中显示的背景图像。</summary>
        <value>一个 <see cref="T:System.Drawing.Image" />，表示在控件背景中显示的图像。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性与此控件无关。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="BackgroundImageChanged">
      <MemberSignature Language="C#" Value="public event EventHandler BackgroundImageChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler BackgroundImageChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.BackgroundImageChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event BackgroundImageChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ BackgroundImageChanged;" />
      <MemberSignature Language="F#" Value="member this.BackgroundImageChanged : EventHandler " Usage="member this.BackgroundImageChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当 <see cref="P:System.Windows.Forms.DataGridView.BackgroundImage" /> 属性的值更改时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关如何处理事件的详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="BackgroundImageLayout">
      <MemberSignature Language="C#" Value="public override System.Windows.Forms.ImageLayout BackgroundImageLayout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.ImageLayout BackgroundImageLayout" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.BackgroundImageLayout" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property BackgroundImageLayout As ImageLayout" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Windows::Forms::ImageLayout BackgroundImageLayout { System::Windows::Forms::ImageLayout get(); void set(System::Windows::Forms::ImageLayout value); };" />
      <MemberSignature Language="F#" Value="member this.BackgroundImageLayout : System.Windows.Forms.ImageLayout with get, set" Usage="System.Windows.Forms.DataGridView.BackgroundImageLayout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ImageLayout</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置在 <see cref="T:System.Windows.Forms.ImageLayout" /> 枚举中定义的背景图像布局。</summary>
        <value>一个 <see cref="T:System.Windows.Forms.ImageLayout" /> 值，指示背景图像的布局。 默认值为 <see cref="F:System.Windows.Forms.ImageLayout.Tile" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性与此控件无关。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="BackgroundImageLayoutChanged">
      <MemberSignature Language="C#" Value="public event EventHandler BackgroundImageLayoutChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler BackgroundImageLayoutChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.BackgroundImageLayoutChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event BackgroundImageLayoutChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ BackgroundImageLayoutChanged;" />
      <MemberSignature Language="F#" Value="member this.BackgroundImageLayoutChanged : EventHandler " Usage="member this.BackgroundImageLayoutChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当 <see cref="P:System.Windows.Forms.DataGridView.BackgroundImageLayout" /> 属性更改时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 尽管此事件如所述发生，但 <xref:System.Windows.Forms.DataGridView.BackgroundImageLayout%2A> 属性与此控件无关。  
  
 有关如何处理事件的详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="BeginEdit">
      <MemberSignature Language="C#" Value="public virtual bool BeginEdit (bool selectAll);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool BeginEdit(bool selectAll) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.BeginEdit(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function BeginEdit (selectAll As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool BeginEdit(bool selectAll);" />
      <MemberSignature Language="F#" Value="abstract member BeginEdit : bool -&gt; bool&#xA;override this.BeginEdit : bool -&gt; bool" Usage="dataGridView.BeginEdit selectAll" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="selectAll" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="selectAll">如果选择该单元格的所有内容，为 <see langword="true" />；如果不选择任何内容，则为 <see langword="false" />。</param>
        <summary>将当前的单元格置于编辑模式下。</summary>
        <returns>如果当前的单元格已经处于编辑模式或者成功进入编辑模式，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `false`如果单元格未能进入编辑模式，此方法将返回，这可能是由于多种原因引起的。 `false`如果当前单元格为只读，则此方法返回。 `false`如果单元 <xref:System.Windows.Forms.DataGridViewCell.EditType%2A> 属性是 `null` (表示单元格不能承载编辑控件) 并且单元类型未实现接口，则它也会返回 <xref:System.Windows.Forms.IDataGridViewEditingCell> 。  
  
 如果单元支持编辑，此方法将引发 <xref:System.Windows.Forms.DataGridView.CellBeginEdit> 事件，该事件可以取消，并 `false` 在事件处理程序取消编辑时返回。 如果未取消编辑并且单元格可以承载编辑控件，则此方法将初始化控件并显示该控件。 如果初始化失败，则此方法返回 `false` 。  
  
 如果单元格成功进入编辑模式，则 <xref:System.Windows.Forms.DataGridView.IsCurrentCellInEditMode%2A> 属性将返回 `true` 。

## Examples  
 下面的代码示例演示如何使用此方法。  
  
 [!code-csharp[System.Windows.Forms.DataGridViewMisc2#10](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewMisc2/cs/misc2.cs#10)]
 [!code-vb[System.Windows.Forms.DataGridViewMisc2#10](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewMisc2/vb/misc2.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="P:System.Windows.Forms.DataGridView.CurrentCell" /> 未设置为有效的单元格。  
  
- 或 - 
已在 <see cref="E:System.Windows.Forms.DataGridView.CellBeginEdit" /> 事件的处理程序中调用过此方法。</exception>
        <exception cref="T:System.InvalidCastException">由单元格的 <see cref="P:System.Windows.Forms.DataGridViewCell.EditType" /> 属性指示的类型并非派生自 <see cref="T:System.Windows.Forms.Control" /> 类型。  
  
- 或 - 
由单元格的 <see cref="P:System.Windows.Forms.DataGridViewCell.EditType" /> 属性指示的类型并不实现 <see cref="T:System.Windows.Forms.IDataGridViewEditingControl" /> 接口。</exception>
        <exception cref="T:System.Exception">编辑单元格值的初始化失败，<see cref="E:System.Windows.Forms.DataGridView.DataError" /> 事件没有处理程序，或者处理程序已将 <see cref="P:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException" /> 属性设置为 <see langword="true" />。 通常情况下，可将该异常对象强制转换为类型  <see cref="T:System.FormatException" />。</exception>
        <altmember cref="P:System.Windows.Forms.DataGridView.CurrentCell" />
        <altmember cref="P:System.Windows.Forms.DataGridViewCell.EditType" />
        <altmember cref="T:System.Windows.Forms.Control" />
        <altmember cref="T:System.Windows.Forms.IDataGridViewEditingControl" />
        <altmember cref="T:System.Windows.Forms.IDataGridViewEditingCell" />
        <altmember cref="E:System.Windows.Forms.DataGridView.CellBeginEdit" />
        <altmember cref="P:System.Windows.Forms.DataGridView.IsCurrentCellInEditMode" />
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="BorderStyle">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.BorderStyle BorderStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.BorderStyle BorderStyle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.BorderStyle" />
      <MemberSignature Language="VB.NET" Value="Public Property BorderStyle As BorderStyle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::BorderStyle BorderStyle { System::Windows::Forms::BorderStyle get(); void set(System::Windows::Forms::BorderStyle value); };" />
      <MemberSignature Language="F#" Value="member this.BorderStyle : System.Windows.Forms.BorderStyle with get, set" Usage="System.Windows.Forms.DataGridView.BorderStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.BorderStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:System.Windows.Forms.DataGridView" /> 的边框样式。</summary>
        <value><see cref="T:System.Windows.Forms.BorderStyle" /> 值之一。 默认值为 <see cref="F:System.Windows.Forms.BorderStyle.FixedSingle" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性将影响的外边框 <xref:System.Windows.Forms.DataGridView> 。 若要设置单元格边框的样式，请使用 <xref:System.Windows.Forms.DataGridView.CellBorderStyle%2A> 属性。

## Examples  
 下面的代码示例演示如何初始化简单的数据绑定 <xref:System.Windows.Forms.DataGridView> 。 它还演示如何设置 <xref:System.Windows.Forms.DataGridView.BorderStyle%2A> 属性。  
  
 [!code-cpp[System.Windows.Forms.GridViewSimpleBound#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.GridViewSimpleBound/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.GridViewSimpleBound#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.GridViewSimpleBound/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.GridViewSimpleBound#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.GridViewSimpleBound/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">当设置此属性时，指定的值不是有效的 <see cref="T:System.Windows.Forms.BorderStyle" /> 值。</exception>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="BorderStyleChanged">
      <MemberSignature Language="C#" Value="public event EventHandler BorderStyleChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler BorderStyleChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.BorderStyleChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event BorderStyleChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ BorderStyleChanged;" />
      <MemberSignature Language="F#" Value="member this.BorderStyleChanged : EventHandler " Usage="member this.BorderStyleChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当 <see cref="P:System.Windows.Forms.DataGridView.BorderStyle" /> 属性的值更改时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关如何处理事件的详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。

## Examples  
 下面的代码示例演示如何使用此成员。 在此示例中，事件处理程序报告事件的发生 <xref:System.Windows.Forms.DataGridView.BorderStyleChanged> 。 此报表可帮助你了解何时发生事件，并可帮助你进行调试。 若要报告多个事件或频繁发生的事件，请考虑 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 将消息替换为多行或将其追加到多行 <xref:System.Windows.Forms.TextBox> 。  
  
 若要运行示例代码，请将其粘贴到包含名为的类型的实例的项目中 <xref:System.Windows.Forms.DataGridView> `DataGridView1` 。 然后，确保事件处理程序与事件相关联 <xref:System.Windows.Forms.DataGridView.BorderStyleChanged> 。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#260](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#260)]
 [!code-vb[System.Windows.Forms.EventExamples#260](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#260)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="CancelEdit">
      <MemberSignature Language="C#" Value="public bool CancelEdit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CancelEdit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.CancelEdit" />
      <MemberSignature Language="VB.NET" Value="Public Function CancelEdit () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CancelEdit();" />
      <MemberSignature Language="F#" Value="member this.CancelEdit : unit -&gt; bool" Usage="dataGridView.CancelEdit " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>取消当前选定单元格的编辑模式并丢弃所有更改。</summary>
        <returns>如果取消操作成功，为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例演示如何使用此方法。 此示例是 [Windows 窗体 DataGridView 控件中的列填充模式下](/dotnet/framework/winforms/controls/column-fill-mode-in-the-windows-forms-datagridview-control)提供的更大示例的一部分。  
  
 [!code-csharp[System.Windows.Forms.DataGridViewFillColumnsDemo#20](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewFillColumnsDemo/CS/fillcolumns.cs#20)]
 [!code-vb[System.Windows.Forms.DataGridViewFillColumnsDemo#20](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewFillColumnsDemo/vb/fillcolumns.vb#20)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="CancelRowEdit">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.QuestionEventHandler CancelRowEdit;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.QuestionEventHandler CancelRowEdit" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.CancelRowEdit" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event CancelRowEdit As QuestionEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::QuestionEventHandler ^ CancelRowEdit;" />
      <MemberSignature Language="F#" Value="member this.CancelRowEdit : System.Windows.Forms.QuestionEventHandler " Usage="member this.CancelRowEdit : System.Windows.Forms.QuestionEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.QuestionEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在 <see cref="T:System.Windows.Forms.DataGridView" /> 控件的 <see cref="P:System.Windows.Forms.DataGridView.VirtualMode" /> 属性为 <see langword="true" /> 并且取消行中的编辑时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.DataGridView>处于虚拟模式时，默认情况下，会将更改提交到单元级的数据缓存。 <xref:System.Windows.Forms.DataGridView.CancelRowEdit>实现行级事务时，可以使用事件。  
  
 有关如何处理事件的详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。

## Examples  
 下面的代码示例演示如何 <xref:System.Windows.Forms.DataGridView> 在虚拟模式下为控件处理此事件。 当控件处于编辑模式时，变量将 `rowInEdit` 保留正在编辑的行的索引，并且该变量将 `customerInEdit` 保留对对应于该行的客户对象的引用。 当用户取消编辑模式时，可以放弃此对象。 但是，如果用户正在编辑的行是新记录的行，则将放弃旧的 Customer 对象并将其替换为新的对象，以便用户可以再次开始编辑。 此示例摘自 [演练：在 Windows 窗体 DataGridView 控件中实现虚拟模式](/dotnet/framework/winforms/controls/implementing-virtual-mode-wf-datagridview-control)中提供的一个更大的示例。  
  
 [!code-cpp[System.Windows.Forms.DataGridView.VirtualMode#170](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.DataGridView.VirtualMode/CPP/virtualmode.cpp#170)]
 [!code-csharp[System.Windows.Forms.DataGridView.VirtualMode#170](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridView.VirtualMode/CS/virtualmode.cs#170)]
 [!code-vb[System.Windows.Forms.DataGridView.VirtualMode#170](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridView.VirtualMode/VB/virtualmode.vb#170)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="CanEnableIme">
      <MemberSignature Language="C#" Value="protected override bool CanEnableIme { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanEnableIme" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.CanEnableIme" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property CanEnableIme As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property bool CanEnableIme { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanEnableIme : bool" Usage="System.Windows.Forms.DataGridView.CanEnableIme" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个用以指示是否可以将 <see cref="P:System.Windows.Forms.Control.ImeMode" /> 属性设置为活动值的值，以启用 IME 支持。</summary>
        <value>如果存在选定的可编辑单元格，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>To be added.</remarks>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="CellBeginEdit">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewCellCancelEventHandler CellBeginEdit;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewCellCancelEventHandler CellBeginEdit" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.CellBeginEdit" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event CellBeginEdit As DataGridViewCellCancelEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::DataGridViewCellCancelEventHandler ^ CellBeginEdit;" />
      <MemberSignature Language="F#" Value="member this.CellBeginEdit : System.Windows.Forms.DataGridViewCellCancelEventHandler " Usage="member this.CellBeginEdit : System.Windows.Forms.DataGridViewCellCancelEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewCellCancelEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>选定单元格的编辑模式启动时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关如何处理事件的详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。

## Examples  
 下面的代码示例演示如何处理此事件以反映当前 <xref:System.Windows.Forms.DataGridViewCell> 正在编辑。 在此示例中，将 <xref:System.Windows.Forms.Control.Text%2A> 设置包含的属性， <xref:System.Windows.Forms.Form> 以反映正在编辑的单元格。 若要运行此示例，请将代码粘贴到包含名为的的窗体中 <xref:System.Windows.Forms.DataGridView> `dataGridView1` ，并确保所有事件都与它们的事件处理程序相关联。  
  
 [!code-csharp[System.Windows.Forms.DataGridViewMisc#220](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewMisc/CS/datagridviewmisc.cs#220)]
 [!code-vb[System.Windows.Forms.DataGridViewMisc#220](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewMisc/VB/datagridviewmisc.vb#220)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="CellBorderStyle">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataGridViewCellBorderStyle CellBorderStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.DataGridViewCellBorderStyle CellBorderStyle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.CellBorderStyle" />
      <MemberSignature Language="VB.NET" Value="Public Property CellBorderStyle As DataGridViewCellBorderStyle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::DataGridViewCellBorderStyle CellBorderStyle { System::Windows::Forms::DataGridViewCellBorderStyle get(); void set(System::Windows::Forms::DataGridViewCellBorderStyle value); };" />
      <MemberSignature Language="F#" Value="member this.CellBorderStyle : System.Windows.Forms.DataGridViewCellBorderStyle with get, set" Usage="System.Windows.Forms.DataGridView.CellBorderStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Browsable(true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(true)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewCellBorderStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 <see cref="T:System.Windows.Forms.DataGridView" /> 的单元格边框样式。</summary>
        <value>一个 <see cref="T:System.Windows.Forms.DataGridViewCellBorderStyle" />，表示包含在 <see cref="T:System.Windows.Forms.DataGridView" /> 中的单元格的边框样式。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果 <xref:System.Windows.Forms.DataGridView.CellBorderStyle%2A> 将属性设置为、或以外的任何内容， <xref:System.Windows.Forms.DataGridViewCellBorderStyle.Single> <xref:System.Windows.Forms.DataGridViewCellBorderStyle.SingleHorizontal> <xref:System.Windows.Forms.DataGridViewCellBorderStyle.SingleVertical> 则 <xref:System.Windows.Forms.DataGridView.GridColor%2A> 属性必须是系统颜色。  
  
 不能将此属性设置为 <xref:System.Windows.Forms.DataGridViewCellBorderStyle.Custom> 值，该值是一个只读值，指示已通过使用属性自定义了单元格边框样式 <xref:System.Windows.Forms.DataGridView.AdvancedCellBorderStyle%2A> 。

## Examples  
 下面的代码示例演示如何使用 <xref:System.Windows.Forms.DataGridView.CellBorderStyle%2A> 属性。 若要运行此示例，请将代码粘贴到包含名为的的窗体中 <xref:System.Windows.Forms.DataGridView> `dataGridView1` ，然后 `SetUpDataGridView` 从窗体的构造函数或 <xref:System.Windows.Forms.Form.Load> 事件处理程序调用方法。 确保所有事件都与事件处理程序相关联。  
  
 [!code-cpp[System.Windows.Forms.GridViewUnbound#5](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.GridViewUnbound/CPP/form1.cpp#5)]
 [!code-csharp[System.Windows.Forms.GridViewUnbound#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.GridViewUnbound/CS/form1.cs#5)]
 [!code-vb[System.Windows.Forms.GridViewUnbound#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.GridViewUnbound/VB/form1.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">当设置此属性时，指定的值不是有效的 <see cref="T:System.Windows.Forms.DataGridViewCellBorderStyle" /> 值。</exception>
        <exception cref="T:System.ArgumentException">当设置此属性时，指定的值为 <see cref="F:System.Windows.Forms.DataGridViewCellBorderStyle.Custom" />。</exception>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="CellBorderStyleChanged">
      <MemberSignature Language="C#" Value="public event EventHandler CellBorderStyleChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler CellBorderStyleChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.CellBorderStyleChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event CellBorderStyleChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ CellBorderStyleChanged;" />
      <MemberSignature Language="F#" Value="member this.CellBorderStyleChanged : EventHandler " Usage="member this.CellBorderStyleChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>单元格边框样式更改时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关如何处理事件的详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。

## Examples  
 下面的代码示例演示如何使用此成员。 在此示例中，事件处理程序报告事件的发生 <xref:System.Windows.Forms.DataGridView.CellBorderStyleChanged> 。 此报表可帮助你了解何时发生事件，并可帮助你进行调试。 若要报告多个事件或频繁发生的事件，请考虑 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 将消息替换为多行或将其追加到多行 <xref:System.Windows.Forms.TextBox> 。  
  
 若要运行示例代码，请将其粘贴到包含名为的类型的实例的项目中 <xref:System.Windows.Forms.DataGridView> `DataGridView1` 。 然后，确保事件处理程序与事件相关联 <xref:System.Windows.Forms.DataGridView.CellBorderStyleChanged> 。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#261](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#261)]
 [!code-vb[System.Windows.Forms.EventExamples#261](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#261)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="CellClick">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewCellEventHandler CellClick;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewCellEventHandler CellClick" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.CellClick" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event CellClick As DataGridViewCellEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::DataGridViewCellEventHandler ^ CellClick;" />
      <MemberSignature Language="F#" Value="member this.CellClick : System.Windows.Forms.DataGridViewCellEventHandler " Usage="member this.CellClick : System.Windows.Forms.DataGridViewCellEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewCellEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在单元格的任何部分被单击时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在单击单元格的任何部分（包括边框和填充）时发生此事件。 当用户按下并释放空格键，而按钮单元格或复选框单元格有焦点时，也会发生这种情况，如果在按下空格键时单击该单元格，则会对这些单元格类型发生两次。  
  
 若要确定何时单击单元格内容，请处理 <xref:System.Windows.Forms.DataGridView.CellContentClick> 事件。  
  
 此事件不会接收有关鼠标位置的信息。 如果事件处理程序需要有关鼠标位置的信息，请使用 <xref:System.Windows.Forms.DataGridView.CellMouseClick> 事件。  
  
 对于在中单击的 <xref:System.Windows.Forms.DataGridViewCheckBoxCell> ，此事件发生在复选框更改值之前，因此，如果您不希望基于当前值计算预期值，则通常会处理 <xref:System.Windows.Forms.DataGridView.CellValueChanged?displayProperty=nameWithType> 事件。 由于该事件仅在提交用户指定的值时才发生，这通常发生在焦点离开单元格时，您还必须处理 <xref:System.Windows.Forms.DataGridView.CurrentCellDirtyStateChanged?displayProperty=nameWithType> 事件。 在该处理程序中，如果当前单元格为复选框单元，则调用 <xref:System.Windows.Forms.DataGridView.CommitEdit%2A?displayProperty=nameWithType> 方法并传入 <xref:System.Windows.Forms.DataGridViewDataErrorContexts.Commit> 值。  
  
 有关如何处理事件的详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。

## Examples  
 下面的代码示例演示了 <xref:System.Windows.Forms.DataGridView.CellClick> 使用控件中的图像列的票游戏实现中的事件处理程序 <xref:System.Windows.Forms.DataGridView> 。 除非游戏结束或已单击该单元格，否则，该事件处理程序会将单元值设置为由 <xref:System.Drawing.Bitmap> 变量和表示的两个对象中的一个 `x` `o` 。  
  
 此代码是在 [如何：处理 Windows 窗体 DataGridView 控件中的图像列](/dotnet/framework/winforms/controls/how-to-work-with-image-columns-in-the-windows-forms-datagridview-control)的更大示例的一部分。  
  
 [!code-cpp[System.Windows.Forms.DataGridView.ImageColumn_TicTacToe#10](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.DataGridView.ImageColumn_TicTacToe/CPP/tictactoe.cpp#10)]
 [!code-csharp[System.Windows.Forms.DataGridView.ImageColumn_TicTacToe#10](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridView.ImageColumn_TicTacToe/CS/tictactoe.cs#10)]
 [!code-vb[System.Windows.Forms.DataGridView.ImageColumn_TicTacToe#10](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridView.ImageColumn_TicTacToe/VB/tictactoe.vb#10)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="CellContentClick">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewCellEventHandler CellContentClick;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewCellEventHandler CellContentClick" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.CellContentClick" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event CellContentClick As DataGridViewCellEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::DataGridViewCellEventHandler ^ CellContentClick;" />
      <MemberSignature Language="F#" Value="member this.CellContentClick : System.Windows.Forms.DataGridViewCellEventHandler " Usage="member this.CellContentClick : System.Windows.Forms.DataGridViewCellEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewCellEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>单击单元格的内容时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 单击单元格内容时发生此事件。 当用户按下并释放空格键而按钮单元格或复选框单元格有焦点时，也会发生这种情况，如果在按空格键时单击单元格内容，将对这些单元格类型发生两次。  
  
 使用此事件检测单击的按钮，或单击以 <xref:System.Windows.Forms.DataGridViewButtonCell> 查看 <xref:System.Windows.Forms.DataGridViewLinkCell> 。  
  
 对于在中单击的 <xref:System.Windows.Forms.DataGridViewCheckBoxCell> ，此事件发生在复选框更改值之前，因此，如果您不希望基于当前值计算预期值，则通常会处理 <xref:System.Windows.Forms.DataGridView.CellValueChanged?displayProperty=nameWithType> 事件。 由于该事件仅在提交用户指定的值时才发生，这通常发生在焦点离开单元格时，您还必须处理 <xref:System.Windows.Forms.DataGridView.CurrentCellDirtyStateChanged?displayProperty=nameWithType> 事件。 在该处理程序中，如果当前单元格为复选框单元，则调用 <xref:System.Windows.Forms.DataGridView.CommitEdit%2A?displayProperty=nameWithType> 方法并传入 <xref:System.Windows.Forms.DataGridViewDataErrorContexts.Commit> 值。  
  
 有关如何处理事件的详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。

## Examples  
 下面的代码示例为此事件提供了一个处理程序，该处理程序确定所单击的单元格是链接单元还是按钮单元格，并作为结果执行相应的操作。 此示例是类概述主题中提供的一个更大示例的一部分 <xref:System.Windows.Forms.DataGridViewComboBoxColumn> 。  
  
 [!code-cpp[System.Windows.Forms.DataGridViewColumn_AllColumns_Bound_Employees#60](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewColumn_AllColumns_Bound_Employees/CPP/employees.cpp#60)]
 [!code-csharp[System.Windows.Forms.DataGridViewColumn_AllColumns_Bound_Employees#60](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewColumn_AllColumns_Bound_Employees/CS/employees.cs#60)]
 [!code-vb[System.Windows.Forms.DataGridViewColumn_AllColumns_Bound_Employees#60](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewColumn_AllColumns_Bound_Employees/VB/employees.vb#60)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="CellContentDoubleClick">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewCellEventHandler CellContentDoubleClick;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewCellEventHandler CellContentDoubleClick" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.CellContentDoubleClick" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event CellContentDoubleClick As DataGridViewCellEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::DataGridViewCellEventHandler ^ CellContentDoubleClick;" />
      <MemberSignature Language="F#" Value="member this.CellContentDoubleClick : System.Windows.Forms.DataGridViewCellEventHandler " Usage="member this.CellContentDoubleClick : System.Windows.Forms.DataGridViewCellEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewCellEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在用户双击单元格的内容时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关如何处理事件的详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。

## Examples  
 下面的代码示例演示如何使用此成员。 在此示例中，事件处理程序报告事件的发生 <xref:System.Windows.Forms.DataGridView.CellContentDoubleClick> 。 此报表可帮助你了解何时发生事件，并可帮助你进行调试。 若要报告多个事件或频繁发生的事件，请考虑 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 将消息替换为多行或将其追加到多行 <xref:System.Windows.Forms.TextBox> 。  
  
 若要运行示例代码，请将其粘贴到包含名为的类型的实例的项目中 <xref:System.Windows.Forms.DataGridView> `DataGridView1` 。 然后，确保事件处理程序与事件相关联 <xref:System.Windows.Forms.DataGridView.CellContentDoubleClick> 。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#285](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#285)]
 [!code-vb[System.Windows.Forms.EventExamples#285](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#285)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="CellContextMenuStripChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewCellEventHandler CellContextMenuStripChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewCellEventHandler CellContextMenuStripChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.CellContextMenuStripChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event CellContextMenuStripChanged As DataGridViewCellEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::DataGridViewCellEventHandler ^ CellContextMenuStripChanged;" />
      <MemberSignature Language="F#" Value="member this.CellContextMenuStripChanged : System.Windows.Forms.DataGridViewCellEventHandler " Usage="member this.CellContextMenuStripChanged : System.Windows.Forms.DataGridViewCellEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewCellEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当 <see cref="P:System.Windows.Forms.DataGridViewCell.ContextMenuStrip" /> 属性更改时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关如何处理事件的详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。

## Examples  
 下面的代码示例演示如何使用此成员。 在此示例中，事件处理程序报告事件的发生 <xref:System.Windows.Forms.DataGridView.CellContextMenuStripChanged> 。 此报表可帮助你了解何时发生事件，并可帮助你进行调试。 若要报告多个事件或频繁发生的事件，请考虑 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 将消息替换为多行或将其追加到多行 <xref:System.Windows.Forms.TextBox> 。  
  
 若要运行示例代码，请将其粘贴到包含名为的类型的实例的项目中 <xref:System.Windows.Forms.DataGridView> `DataGridView1` 。 然后，确保事件处理程序与事件相关联 <xref:System.Windows.Forms.DataGridView.CellContextMenuStripChanged> 。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#286](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#286)]
 [!code-vb[System.Windows.Forms.EventExamples#286](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#286)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="CellContextMenuStripNeeded">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewCellContextMenuStripNeededEventHandler CellContextMenuStripNeeded;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewCellContextMenuStripNeededEventHandler CellContextMenuStripNeeded" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.CellContextMenuStripNeeded" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event CellContextMenuStripNeeded As DataGridViewCellContextMenuStripNeededEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::DataGridViewCellContextMenuStripNeededEventHandler ^ CellContextMenuStripNeeded;" />
      <MemberSignature Language="F#" Value="member this.CellContextMenuStripNeeded : System.Windows.Forms.DataGridViewCellContextMenuStripNeededEventHandler " Usage="member this.CellContextMenuStripNeeded : System.Windows.Forms.DataGridViewCellContextMenuStripNeededEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewCellContextMenuStripNeededEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在需要单元格的快捷菜单时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.DataGridView.CellContextMenuStripNeeded>仅当 <xref:System.Windows.Forms.DataGridView> 控件 <xref:System.Windows.Forms.DataGridView.DataSource%2A> 属性已设置或其 <xref:System.Windows.Forms.DataGridView.VirtualMode%2A> 属性为时，才会发生此事件 `true` 。  
  
 处理 <xref:System.Windows.Forms.DataGridView.CellContextMenuStripNeeded> 事件时，无论用户何时右键单击单元格，都将显示您在处理程序中指定的快捷菜单。 当您想要显示由单元的当前状态或值决定的快捷菜单时，这非常有用。  
  
 在 <xref:System.Windows.Forms.DataGridView.CellContextMenuStripNeeded> <xref:System.Windows.Forms.DataGridViewCell.ContextMenuStrip%2A?displayProperty=nameWithType> 以编程方式或在用户右键单击单元格的情况下检索属性值时，也会发生该事件。  
  
 您可以使用 <xref:System.Windows.Forms.DataGridViewCellEventArgs.ColumnIndex%2A?displayProperty=nameWithType> 和 <xref:System.Windows.Forms.DataGridViewCellEventArgs.RowIndex%2A> 属性来确定单元的状态或值，并使用此信息来更改或修改 <xref:System.Windows.Forms.DataGridViewCellContextMenuStripNeededEventArgs.ContextMenuStrip%2A?displayProperty=nameWithType> 属性。 此属性将用单元属性的值进行初始化，该属性的值将 <xref:System.Windows.Forms.DataGridViewCell.ContextMenuStrip%2A> 重写。  
  
 处理 <xref:System.Windows.Forms.DataGridView.CellContextMenuStripNeeded> 大量数据时处理事件，以避免为多个单元格设置单元值时的性能损失 <xref:System.Windows.Forms.DataGridViewCell.ContextMenuStrip%2A> 。 有关详细信息，请参阅 [缩放 Windows 窗体 DataGridView 控件的最佳做法](/dotnet/framework/winforms/controls/best-practices-for-scaling-the-windows-forms-datagridview-control)。  
  
 您还可以通过设置行 <xref:System.Windows.Forms.DataGridViewRow.ContextMenuStrip%2A> 属性或处理事件，为单独的行而不是单个单元指定快捷菜单 <xref:System.Windows.Forms.DataGridView.RowContextMenuStripNeeded> 。 单元 <xref:System.Windows.Forms.DataGridViewCell.ContextMenuStrip%2A> 属性设置将重写 row <xref:System.Windows.Forms.DataGridViewRow.ContextMenuStrip%2A> 属性设置，并且该 <xref:System.Windows.Forms.DataGridView.CellContextMenuStripNeeded> 事件会重写 <xref:System.Windows.Forms.DataGridView.RowContextMenuStripNeeded> 事件和行 <xref:System.Windows.Forms.DataGridViewRow.ContextMenuStrip%2A> 属性设置。 不过，您可以 `null` 为单元格快捷菜单指定以防止重写行快捷菜单。  
  
 有关如何处理事件的详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。

## Examples  
 下面的代码示例演示如何使用 <xref:System.Windows.Forms.DataGridView.CellContextMenuStripNeeded> 事件处理程序显示在用户右键单击单元格时使用的自定义快捷菜单。  
  
 [!code-cpp[System.Windows.Forms.DataGridView_SharedRowScenarios#20](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.DataGridView_SharedRowScenarios/CPP/sharedrows.cpp#20)]
 [!code-csharp[System.Windows.Forms.DataGridView_SharedRowScenarios#20](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridView_SharedRowScenarios/CS/sharedrows.cs#20)]
 [!code-vb[System.Windows.Forms.DataGridView_SharedRowScenarios#20](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridView_SharedRowScenarios/VB/sharedrows.vb#20)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ContextMenuStrip" />
        <altmember cref="P:System.Windows.Forms.DataGridView.DataSource" />
        <altmember cref="P:System.Windows.Forms.DataGridView.VirtualMode" />
        <altmember cref="T:System.Windows.Forms.DataGridViewCellContextMenuStripNeededEventHandler" />
        <altmember cref="T:System.Windows.Forms.DataGridViewCellContextMenuStripNeededEventArgs" />
        <altmember cref="P:System.Windows.Forms.DataGridViewCellContextMenuStripNeededEventArgs.ContextMenuStrip" />
        <altmember cref="P:System.Windows.Forms.DataGridViewCell.ContextMenuStrip" />
        <altmember cref="M:System.Windows.Forms.DataGridView.OnCellContextMenuStripNeeded(System.Windows.Forms.DataGridViewCellContextMenuStripNeededEventArgs)" />
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="CellDoubleClick">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewCellEventHandler CellDoubleClick;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewCellEventHandler CellDoubleClick" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.CellDoubleClick" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event CellDoubleClick As DataGridViewCellEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::DataGridViewCellEventHandler ^ CellDoubleClick;" />
      <MemberSignature Language="F#" Value="member this.CellDoubleClick : System.Windows.Forms.DataGridViewCellEventHandler " Usage="member this.CellDoubleClick : System.Windows.Forms.DataGridViewCellEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewCellEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>用户双击单元格中的任意位置时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关如何处理事件的详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。

## Examples  
 下面的代码示例演示如何使用此成员。 在此示例中，事件处理程序报告事件的发生 <xref:System.Windows.Forms.DataGridView.CellDoubleClick> 。 此报表可帮助你了解何时发生事件，并可帮助你进行调试。 若要报告多个事件或频繁发生的事件，请考虑 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 将消息替换为多行或将其追加到多行 <xref:System.Windows.Forms.TextBox> 。  
  
 若要运行示例代码，请将其粘贴到包含名为的类型的实例的项目中 <xref:System.Windows.Forms.DataGridView> `DataGridView1` 。 然后，确保事件处理程序与事件相关联 <xref:System.Windows.Forms.DataGridView.CellDoubleClick> 。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#288](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#288)]
 [!code-vb[System.Windows.Forms.EventExamples#288](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#288)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="CellEndEdit">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewCellEventHandler CellEndEdit;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewCellEventHandler CellEndEdit" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.CellEndEdit" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event CellEndEdit As DataGridViewCellEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::DataGridViewCellEventHandler ^ CellEndEdit;" />
      <MemberSignature Language="F#" Value="member this.CellEndEdit : System.Windows.Forms.DataGridViewCellEventHandler " Usage="member this.CellEndEdit : System.Windows.Forms.DataGridViewCellEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewCellEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当前选定单元格的编辑模式停止时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关如何处理事件的详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。

## Examples  
 下面的代码示例演示如何处理此事件，以 <xref:System.Windows.Forms.DataGridViewRow.ErrorText%2A?displayProperty=nameWithType> 在以前由 <xref:System.Windows.Forms.DataGridView.CellValidating> 事件处理程序设置的情况下清除 row 属性。 <xref:System.Windows.Forms.DataGridView.CellValidating>当新单元格的值满足验证条件时，事件处理程序可以清除错误文本，但当用户通过按 ESC 恢复为旧单元值时， <xref:System.Windows.Forms.DataGridView.CellValidating> 不会发生该事件。 此示例摘自 [演练：验证 Windows 窗体 DataGridView 控件中的数据中](/dotnet/framework/winforms/controls/walkthrough-validating-data-in-the-windows-forms-datagridview-control)提供的一个更大的示例。  
  
 [!code-csharp[System.Windows.Forms.DataGridViewDataValidation#20](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewDataValidation/CS/datavalidation.cs#20)]
 [!code-vb[System.Windows.Forms.DataGridViewDataValidation#20](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewDataValidation/VB/datavalidation.vb#20)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="CellEnter">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewCellEventHandler CellEnter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewCellEventHandler CellEnter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.CellEnter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event CellEnter As DataGridViewCellEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::DataGridViewCellEventHandler ^ CellEnter;" />
      <MemberSignature Language="F#" Value="member this.CellEnter : System.Windows.Forms.DataGridViewCellEventHandler " Usage="member this.CellEnter : System.Windows.Forms.DataGridViewCellEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewCellEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在 <see cref="T:System.Windows.Forms.DataGridView" /> 控件中的当前单元格更改或者该控件接收到输入焦点时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果控件没有输入焦点，且单击的单元格以前不是当前单元格，则单击一次即可发生此事件。  
  
 有关如何处理事件的详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。

## Examples  
 下面的代码示例演示如何处理此事件以更改 <xref:System.Windows.Forms.DataGridViewCellStyle.SelectionBackColor%2A> 当前单元格的属性。 在此示例中，将在事件中设置选择背景颜色 <xref:System.Windows.Forms.DataGridView.CellEnter> ，然后在事件中将重置为 <xref:System.Drawing.Color.Empty> <xref:System.Windows.Forms.DataGridView.CellLeave> 。 若要运行此示例，请将代码粘贴到包含命名的的窗体中， <xref:System.Windows.Forms.DataGridView> `dataGridView1` 并确保所有事件都与事件处理程序相关联。  
  
 [!code-csharp[System.Windows.Forms.DataGridViewMisc#190](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewMisc/CS/datagridviewmisc.cs#190)]
 [!code-vb[System.Windows.Forms.DataGridViewMisc#190](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewMisc/VB/datagridviewmisc.vb#190)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="CellErrorTextChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewCellEventHandler CellErrorTextChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewCellEventHandler CellErrorTextChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.CellErrorTextChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event CellErrorTextChanged As DataGridViewCellEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::DataGridViewCellEventHandler ^ CellErrorTextChanged;" />
      <MemberSignature Language="F#" Value="member this.CellErrorTextChanged : System.Windows.Forms.DataGridViewCellEventHandler " Usage="member this.CellErrorTextChanged : System.Windows.Forms.DataGridViewCellEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewCellEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在单元格的 <see cref="P:System.Windows.Forms.DataGridViewCell.ErrorText" /> 属性值更改时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关如何处理事件的详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。

## Examples  
 下面的代码示例演示如何使用此成员。 在此示例中，事件处理程序报告事件的发生 <xref:System.Windows.Forms.DataGridView.CellErrorTextChanged> 。 此报表可帮助你了解何时发生事件，并可帮助你进行调试。 若要报告多个事件或频繁发生的事件，请考虑 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 将消息替换为多行或将其追加到多行 <xref:System.Windows.Forms.TextBox> 。  
  
 若要运行示例代码，请将其粘贴到包含名为的类型的实例的项目中 <xref:System.Windows.Forms.DataGridView> `DataGridView1` 。 然后，确保事件处理程序与事件相关联 <xref:System.Windows.Forms.DataGridView.CellErrorTextChanged> 。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#291](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#291)]
 [!code-vb[System.Windows.Forms.EventExamples#291](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#291)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="CellErrorTextNeeded">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewCellErrorTextNeededEventHandler CellErrorTextNeeded;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewCellErrorTextNeededEventHandler CellErrorTextNeeded" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.CellErrorTextNeeded" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event CellErrorTextNeeded As DataGridViewCellErrorTextNeededEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::DataGridViewCellErrorTextNeededEventHandler ^ CellErrorTextNeeded;" />
      <MemberSignature Language="F#" Value="member this.CellErrorTextNeeded : System.Windows.Forms.DataGridViewCellErrorTextNeededEventHandler " Usage="member this.CellErrorTextNeeded : System.Windows.Forms.DataGridViewCellErrorTextNeededEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewCellErrorTextNeededEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>需要单元格的错误文本时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.DataGridView.CellErrorTextNeeded>仅当 <xref:System.Windows.Forms.DataGridView> 控件 <xref:System.Windows.Forms.DataGridView.DataSource%2A> 属性已设置或其 <xref:System.Windows.Forms.DataGridView.VirtualMode%2A> 属性为时，才会发生此事件 `true` 。 <xref:System.Windows.Forms.DataGridView.CellErrorTextNeeded>当你希望根据单元格的值或状态确定其错误时，处理事件很有用。  
  
 处理 <xref:System.Windows.Forms.DataGridView.CellErrorTextNeeded> 事件并在处理程序中指定错误文本时，将在单元格中显示错误标志符号，除非将 <xref:System.Windows.Forms.DataGridView.ShowCellErrors%2A> 属性设置为 `false` 或单元格处于编辑模式。 当用户将鼠标指针移到错误标志符号上或使用键盘导航到该单元格时，将在工具提示中显示错误文本。  
  
 <xref:System.Windows.Forms.DataGridView.CellErrorTextNeeded>如果检索属性的值，也会发生该事件 <xref:System.Windows.Forms.DataGridViewCell.ErrorText%2A?displayProperty=nameWithType> 。  
  
 您可以使用 <xref:System.Windows.Forms.DataGridViewCellEventArgs.RowIndex%2A?displayProperty=nameWithType> 和 <xref:System.Windows.Forms.DataGridViewCellEventArgs.ColumnIndex%2A> 属性来确定单元的状态或值，并使用此信息来更改或修改 <xref:System.Windows.Forms.DataGridViewCellErrorTextNeededEventArgs.ErrorText%2A?displayProperty=nameWithType> 属性。 此属性将用单元属性的值进行初始化，该属性的值将 <xref:System.Windows.Forms.DataGridViewCell.ErrorText%2A> 重写。  
  
 处理 <xref:System.Windows.Forms.DataGridView.CellErrorTextNeeded> 大量数据时处理事件，以避免为多个单元格设置单元值时的性能损失 <xref:System.Windows.Forms.DataGridViewCell.ErrorText%2A> 。 有关详细信息，请参阅 [缩放 Windows 窗体 DataGridView 控件的最佳做法](/dotnet/framework/winforms/controls/best-practices-for-scaling-the-windows-forms-datagridview-control)。  
  
 有关如何处理事件的详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。

## Examples  
 下面的代码示例演示了如何为单元创建错误消息，而无需取消行的共享，或者在所有共享单元格上复制单元格错误。  
  
 [!code-cpp[System.Windows.Forms.DataGridView_SharedRowScenarios#20](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.DataGridView_SharedRowScenarios/CPP/sharedrows.cpp#20)]
 [!code-csharp[System.Windows.Forms.DataGridView_SharedRowScenarios#20](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridView_SharedRowScenarios/CS/sharedrows.cs#20)]
 [!code-vb[System.Windows.Forms.DataGridView_SharedRowScenarios#20](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridView_SharedRowScenarios/VB/sharedrows.vb#20)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.DataGridView.DataSource" />
        <altmember cref="P:System.Windows.Forms.DataGridView.VirtualMode" />
        <altmember cref="P:System.Windows.Forms.DataGridView.ShowCellErrors" />
        <altmember cref="T:System.Windows.Forms.DataGridViewCellErrorTextNeededEventHandler" />
        <altmember cref="T:System.Windows.Forms.DataGridViewCellErrorTextNeededEventArgs" />
        <altmember cref="P:System.Windows.Forms.DataGridViewCellErrorTextNeededEventArgs.ErrorText" />
        <altmember cref="P:System.Windows.Forms.DataGridViewCell.ErrorText" />
        <altmember cref="M:System.Windows.Forms.DataGridView.OnCellErrorTextNeeded(System.Windows.Forms.DataGridViewCellErrorTextNeededEventArgs)" />
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
        <related type="Article" href="/dotnet/framework/winforms/controls/best-practices-for-scaling-the-windows-forms-datagridview-control">缩放 Windows 窗体 DataGridView 控件的最佳做法</related>
      </Docs>
    </Member>
    <Member MemberName="CellFormatting">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewCellFormattingEventHandler CellFormatting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewCellFormattingEventHandler CellFormatting" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.CellFormatting" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event CellFormatting As DataGridViewCellFormattingEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::DataGridViewCellFormattingEventHandler ^ CellFormatting;" />
      <MemberSignature Language="F#" Value="member this.CellFormatting : System.Windows.Forms.DataGridViewCellFormattingEventHandler " Usage="member this.CellFormatting : System.Windows.Forms.DataGridViewCellFormattingEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewCellFormattingEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>需要设置单元格内容的显示格式时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 默认情况下，该 <xref:System.Windows.Forms.DataGridView> 控件将尝试将单元格的值转换为适合显示的格式。 例如，它会将数值转换为字符串，以便在文本框单元格中显示。 可以通过设置属性返回的属性 <xref:System.Windows.Forms.DataGridViewCellStyle.Format%2A> <xref:System.Windows.Forms.DataGridViewCellStyle> （如属性）来指示要使用的格式设置约定 <xref:System.Windows.Forms.DataGridView.DefaultCellStyle%2A> 。  
  
 如果标准格式不充分，可以通过处理事件来自定义格式 <xref:System.Windows.Forms.DataGridView.CellFormatting> 。 此事件使你可以指示要用于单元显示的精确显示值以及单元格样式，如背景和前景色。 这意味着，无论单元格值本身是否需要设置格式，都可以为任何类型的单元格格式处理此事件。  
  
 每 <xref:System.Windows.Forms.DataGridView.CellFormatting> 次绘制每个单元格时都会发生此事件，因此，在处理此事件时应避免冗长的处理。 当检索单元格或 <xref:System.Windows.Forms.DataGridViewCell.FormattedValue%2A> 调用其方法时，也会发生此事件 <xref:System.Windows.Forms.DataGridViewCell.GetFormattedValue%2A> 。  
  
 处理 <xref:System.Windows.Forms.DataGridView.CellFormatting> 事件时，将 <xref:System.Windows.Forms.ConvertEventArgs.Value%2A?displayProperty=nameWithType> 用单元值初始化属性。 如果提供了从单元值到显示值的自定义转换，请将 <xref:System.Windows.Forms.ConvertEventArgs.Value%2A?displayProperty=nameWithType> 属性设置为转换后的值，确保新值的类型为 cell 属性指定的类型 <xref:System.Windows.Forms.DataGridViewCell.FormattedValueType%2A> 。 若要指示不需要进一步设置值格式，请将 <xref:System.Windows.Forms.DataGridViewCellFormattingEventArgs.FormattingApplied%2A?displayProperty=nameWithType> 属性设置为 `true` 。  
  
 当事件处理程序完成时，如果 <xref:System.Windows.Forms.ConvertEventArgs.Value%2A?displayProperty=nameWithType> 为 `null` 或不是正确的类型，或者 <xref:System.Windows.Forms.DataGridViewCellFormattingEventArgs.FormattingApplied%2A?displayProperty=nameWithType> 属性为，则 `false` <xref:System.Windows.Forms.ConvertEventArgs.Value%2A> 使用 <xref:System.Windows.Forms.DataGridViewCellStyle.Format%2A> <xref:System.Windows.Forms.DataGridViewCellStyle.NullValue%2A> 由属性返回的单元格样式的、、和属性来设置格式，该 <xref:System.Windows.Forms.DataGridViewCellStyle.DataSourceNullValue%2A> 单元格 <xref:System.Windows.Forms.DataGridViewCellStyle.FormatProvider%2A> <xref:System.Windows.Forms.DataGridViewCellFormattingEventArgs.CellStyle%2A?displayProperty=nameWithType> 是使用单元属性进行初始化的 <xref:System.Windows.Forms.DataGridViewCell.InheritedStyle%2A> 。  
  
 无论属性的值 <xref:System.Windows.Forms.DataGridViewCellFormattingEventArgs.FormattingApplied%2A?displayProperty=nameWithType> 如何，都将使用属性返回的对象的显示属性 <xref:System.Windows.Forms.DataGridViewCellFormattingEventArgs.CellStyle%2A?displayProperty=nameWithType> 来呈现单元。  
  
 有关使用事件进行自定义格式设置的详细信息 <xref:System.Windows.Forms.DataGridView.CellFormatting> ，请参阅 [如何：自定义 Windows 窗体 DataGridView 控件中的数据格式](/dotnet/framework/winforms/controls/how-to-customize-data-formatting-in-the-windows-forms-datagridview-control)。  
  
 若要避免在处理此事件时性能受到影响，请通过事件处理程序的参数而不是直接访问单元来访问单元。  
  
 若要自定义格式的、用户指定的值到实际单元值的转换，请处理 <xref:System.Windows.Forms.DataGridView.CellParsing> 事件。  
  
 有关如何处理事件的详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。

## Examples  
 下面的代码示例演示如何处理 <xref:System.Windows.Forms.DataGridView.CellFormatting> 事件。  
  
 [!code-cpp[System.Windows.Forms.GridViewUnbound#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.GridViewUnbound/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.GridViewUnbound#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.GridViewUnbound/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.GridViewUnbound#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.GridViewUnbound/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.DataGridView.DefaultCellStyle" />
        <altmember cref="T:System.Windows.Forms.DataGridViewCellStyle" />
        <altmember cref="P:System.Windows.Forms.DataGridViewCellStyle.Format" />
        <altmember cref="P:System.Windows.Forms.DataGridViewCellStyle.FormatProvider" />
        <altmember cref="P:System.Windows.Forms.DataGridViewCellStyle.NullValue" />
        <altmember cref="P:System.Windows.Forms.DataGridViewCellStyle.DataSourceNullValue" />
        <altmember cref="P:System.Windows.Forms.DataGridViewCell.InheritedStyle" />
        <altmember cref="P:System.Windows.Forms.DataGridViewCell.Value" />
        <altmember cref="P:System.Windows.Forms.DataGridViewCell.FormattedValue" />
        <altmember cref="P:System.Windows.Forms.DataGridViewCell.FormattedValueType" />
        <altmember cref="M:System.Windows.Forms.DataGridViewCell.GetFormattedValue(System.Object,System.Int32,System.Windows.Forms.DataGridViewCellStyle@,System.ComponentModel.TypeConverter,System.ComponentModel.TypeConverter,System.Windows.Forms.DataGridViewDataErrorContexts)" />
        <altmember cref="T:System.Windows.Forms.DataGridViewCellFormattingEventHandler" />
        <altmember cref="T:System.Windows.Forms.DataGridViewCellFormattingEventArgs" />
        <altmember cref="P:System.Windows.Forms.DataGridViewCellFormattingEventArgs.FormattingApplied" />
        <altmember cref="P:System.Windows.Forms.DataGridViewCellFormattingEventArgs.CellStyle" />
        <altmember cref="P:System.Windows.Forms.ConvertEventArgs.Value" />
        <altmember cref="M:System.Windows.Forms.DataGridView.OnCellFormatting(System.Windows.Forms.DataGridViewCellFormattingEventArgs)" />
        <altmember cref="E:System.Windows.Forms.DataGridView.CellParsing" />
        <related type="Article" href="/dotnet/framework/winforms/controls/cell-styles-in-the-windows-forms-datagridview-control">Windows 窗体 DataGridView 控件中的单元格样式</related>
        <related type="Article" href="/dotnet/framework/winforms/controls/how-to-customize-data-formatting-in-the-windows-forms-datagridview-control">如何：自定义 Windows 窗体 DataGridView 控件中的数据格式设置</related>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="CellLeave">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewCellEventHandler CellLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewCellEventHandler CellLeave" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.CellLeave" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event CellLeave As DataGridViewCellEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::DataGridViewCellEventHandler ^ CellLeave;" />
      <MemberSignature Language="F#" Value="member this.CellLeave : System.Windows.Forms.DataGridViewCellEventHandler " Usage="member this.CellLeave : System.Windows.Forms.DataGridViewCellEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewCellEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>单元格失去输入焦点并且不再是当前单元格时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关如何处理事件的详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。

## Examples  
 下面的代码示例演示如何处理此事件以更改 <xref:System.Windows.Forms.DataGridViewCellStyle.SelectionBackColor%2A> 当前单元格的属性。 在此示例中，将在事件中设置选择背景颜色 <xref:System.Windows.Forms.DataGridView.CellEnter> ，然后在事件中将重置为 <xref:System.Drawing.Color.Empty> <xref:System.Windows.Forms.DataGridView.CellLeave> 。 若要运行此示例，请将代码粘贴到包含命名的的窗体中， <xref:System.Windows.Forms.DataGridView> `dataGridView1` 并确保所有事件都与事件处理程序相关联。  
  
 [!code-csharp[System.Windows.Forms.DataGridViewMisc#190](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewMisc/CS/datagridviewmisc.cs#190)]
 [!code-vb[System.Windows.Forms.DataGridViewMisc#190](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewMisc/VB/datagridviewmisc.vb#190)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="CellMouseClick">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewCellMouseEventHandler CellMouseClick;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewCellMouseEventHandler CellMouseClick" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.CellMouseClick" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event CellMouseClick As DataGridViewCellMouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::DataGridViewCellMouseEventHandler ^ CellMouseClick;" />
      <MemberSignature Language="F#" Value="member this.CellMouseClick : System.Windows.Forms.DataGridViewCellMouseEventHandler " Usage="member this.CellMouseClick : System.Windows.Forms.DataGridViewCellMouseEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewCellMouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在用户用鼠标单击单元格中的任何位置时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当用户单击鼠标按钮时，将发生此事件。 使用 <xref:System.Windows.Forms.MouseEventArgs.Button%2A?displayProperty=nameWithType> 属性可确定单击了哪个按钮。  
  
 若要检测某个单元格的内容（如单元中的按钮或链接），请使用 <xref:System.Windows.Forms.DataGridView.CellContentClick> 事件。  
  
 此事件的处理程序接收鼠标指针位置的列索引和行索引。  
  
 对于在中单击的 <xref:System.Windows.Forms.DataGridViewCheckBoxCell> ，此事件发生在复选框更改值之前，因此，如果您不希望基于当前值计算预期值，则通常会处理 <xref:System.Windows.Forms.DataGridView.CellValueChanged> 事件。 由于该事件仅在提交用户指定的值时才发生，这通常发生在焦点离开单元格时，您还必须处理 <xref:System.Windows.Forms.DataGridView.CurrentCellDirtyStateChanged> 事件。 在该处理程序中，如果当前单元格为复选框单元，则调用 <xref:System.Windows.Forms.DataGridView.CommitEdit%2A> 方法并传入 <xref:System.Windows.Forms.DataGridViewDataErrorContexts.Commit> 值。  
  
 有关如何处理事件的详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。

## Examples  
 下面的代码示例演示如何使用此成员。 在此示例中，事件处理程序报告事件的发生 <xref:System.Windows.Forms.DataGridView.CellMouseClick> 。 此报表可帮助你了解何时发生事件，并可帮助你进行调试。 若要报告多个事件或频繁发生的事件，请考虑 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 将消息替换为多行或将其追加到多行 <xref:System.Windows.Forms.TextBox> 。  
  
 若要运行示例代码，请将其粘贴到包含名为的类型的实例的项目中 <xref:System.Windows.Forms.DataGridView> `DataGridView1` 。 然后，确保事件处理程序与事件相关联 <xref:System.Windows.Forms.DataGridView.CellMouseClick> 。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#295](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#295)]
 [!code-vb[System.Windows.Forms.EventExamples#295](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#295)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.MouseEventHandler" />
        <altmember cref="T:System.Windows.Forms.MouseEventArgs" />
        <altmember cref="P:System.Windows.Forms.MouseEventArgs.Button" />
        <altmember cref="E:System.Windows.Forms.DataGridView.CellContentClick" />
        <altmember cref="T:System.Windows.Forms.DataGridViewCheckBoxCell" />
        <altmember cref="E:System.Windows.Forms.DataGridView.CellValueChanged" />
        <altmember cref="E:System.Windows.Forms.DataGridView.CurrentCellDirtyStateChanged" />
        <altmember cref="M:System.Windows.Forms.DataGridView.CommitEdit(System.Windows.Forms.DataGridViewDataErrorContexts)" />
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="CellMouseDoubleClick">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewCellMouseEventHandler CellMouseDoubleClick;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewCellMouseEventHandler CellMouseDoubleClick" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.CellMouseDoubleClick" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event CellMouseDoubleClick As DataGridViewCellMouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::DataGridViewCellMouseEventHandler ^ CellMouseDoubleClick;" />
      <MemberSignature Language="F#" Value="member this.CellMouseDoubleClick : System.Windows.Forms.DataGridViewCellMouseEventHandler " Usage="member this.CellMouseDoubleClick : System.Windows.Forms.DataGridViewCellMouseEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewCellMouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在双击 <see cref="T:System.Windows.Forms.DataGridView" /> 中的单元格时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当用户使用任意鼠标按钮双击时发生此事件。 使用 <xref:System.Windows.Forms.MouseEventArgs.Button%2A?displayProperty=nameWithType> 属性可确定单击了哪个按钮。  
  
 有关如何处理事件的详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。

## Examples  
 下面的代码示例演示如何使用此成员。 在此示例中，事件处理程序报告事件的发生 <xref:System.Windows.Forms.DataGridView.CellMouseDoubleClick> 。 此报表可帮助你了解何时发生事件，并可帮助你进行调试。 若要报告多个事件或频繁发生的事件，请考虑 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 将消息替换为多行或将其追加到多行 <xref:System.Windows.Forms.TextBox> 。  
  
 若要运行示例代码，请将其粘贴到包含名为的类型的实例的项目中 <xref:System.Windows.Forms.DataGridView> `DataGridView1` 。 然后，确保事件处理程序与事件相关联 <xref:System.Windows.Forms.DataGridView.CellMouseDoubleClick> 。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#296](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#296)]
 [!code-vb[System.Windows.Forms.EventExamples#296](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#296)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="CellMouseDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewCellMouseEventHandler CellMouseDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewCellMouseEventHandler CellMouseDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.CellMouseDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event CellMouseDown As DataGridViewCellMouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::DataGridViewCellMouseEventHandler ^ CellMouseDown;" />
      <MemberSignature Language="F#" Value="member this.CellMouseDown : System.Windows.Forms.DataGridViewCellMouseEventHandler " Usage="member this.CellMouseDown : System.Windows.Forms.DataGridViewCellMouseEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewCellMouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当用户在鼠标指针位于单元格边界内时按鼠标按钮时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当用户按下任意鼠标按钮时发生此事件。 使用 <xref:System.Windows.Forms.MouseEventArgs.Button%2A?displayProperty=nameWithType> 属性可确定单击了哪个按钮。  
  
 有关如何处理事件的详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。

## Examples  
 下面的代码示例演示如何使用此成员。 在此示例中，事件处理程序报告事件的发生 <xref:System.Windows.Forms.DataGridView.CellMouseDown> 。 此报表可帮助你了解何时发生事件，并可帮助你进行调试。 若要报告多个事件或频繁发生的事件，请考虑 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 将消息替换为多行或将其追加到多行 <xref:System.Windows.Forms.TextBox> 。  
  
 若要运行示例代码，请将其粘贴到包含名为的类型的实例的项目中 <xref:System.Windows.Forms.DataGridView> `DataGridView1` 。 然后，确保事件处理程序与事件相关联 <xref:System.Windows.Forms.DataGridView.CellMouseDown> 。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#297](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#297)]
 [!code-vb[System.Windows.Forms.EventExamples#297](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#297)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="CellMouseEnter">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewCellEventHandler CellMouseEnter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewCellEventHandler CellMouseEnter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.CellMouseEnter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event CellMouseEnter As DataGridViewCellEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::DataGridViewCellEventHandler ^ CellMouseEnter;" />
      <MemberSignature Language="F#" Value="member this.CellMouseEnter : System.Windows.Forms.DataGridViewCellEventHandler " Usage="member this.CellMouseEnter : System.Windows.Forms.DataGridViewCellEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewCellEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>鼠标指针进入单元格时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关如何处理事件的详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。

## Examples  
 下面的代码示例演示了 <xref:System.Windows.Forms.DataGridView.CellMouseEnter> 使用控件中的图像列的票游戏实现中的事件处理程序 <xref:System.Windows.Forms.DataGridView> 。 事件处理程序使用单元格值来确定要显示的光标和工具提示。  
  
 此代码是在 [如何：处理 Windows 窗体 DataGridView 控件中的图像列](/dotnet/framework/winforms/controls/how-to-work-with-image-columns-in-the-windows-forms-datagridview-control)的更大示例的一部分。  
  
 [!code-cpp[System.Windows.Forms.DataGridView.ImageColumn_TicTacToe#15](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.DataGridView.ImageColumn_TicTacToe/CPP/tictactoe.cpp#15)]
 [!code-csharp[System.Windows.Forms.DataGridView.ImageColumn_TicTacToe#15](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridView.ImageColumn_TicTacToe/CS/tictactoe.cs#15)]
 [!code-vb[System.Windows.Forms.DataGridView.ImageColumn_TicTacToe#15](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridView.ImageColumn_TicTacToe/VB/tictactoe.vb#15)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="CellMouseLeave">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewCellEventHandler CellMouseLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewCellEventHandler CellMouseLeave" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.CellMouseLeave" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event CellMouseLeave As DataGridViewCellEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::DataGridViewCellEventHandler ^ CellMouseLeave;" />
      <MemberSignature Language="F#" Value="member this.CellMouseLeave : System.Windows.Forms.DataGridViewCellEventHandler " Usage="member this.CellMouseLeave : System.Windows.Forms.DataGridViewCellEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewCellEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>鼠标指针离开单元格时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关如何处理事件的详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。

## Examples  
 下面的代码示例演示了 <xref:System.Windows.Forms.DataGridView.CellMouseLeave> 使用控件中的图像列的票游戏实现中的事件处理程序 <xref:System.Windows.Forms.DataGridView> 。 事件处理程序重置在事件处理程序中设置的光标和工具提示 <xref:System.Windows.Forms.DataGridView.CellMouseEnter> 。  
  
 此代码是在 [如何：处理 Windows 窗体 DataGridView 控件中的图像列](/dotnet/framework/winforms/controls/how-to-work-with-image-columns-in-the-windows-forms-datagridview-control)的更大示例的一部分。  
  
 [!code-cpp[System.Windows.Forms.DataGridView.ImageColumn_TicTacToe#15](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.DataGridView.ImageColumn_TicTacToe/CPP/tictactoe.cpp#15)]
 [!code-csharp[System.Windows.Forms.DataGridView.ImageColumn_TicTacToe#15](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridView.ImageColumn_TicTacToe/CS/tictactoe.cs#15)]
 [!code-vb[System.Windows.Forms.DataGridView.ImageColumn_TicTacToe#15](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridView.ImageColumn_TicTacToe/VB/tictactoe.vb#15)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="CellMouseMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewCellMouseEventHandler CellMouseMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewCellMouseEventHandler CellMouseMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.CellMouseMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event CellMouseMove As DataGridViewCellMouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::DataGridViewCellMouseEventHandler ^ CellMouseMove;" />
      <MemberSignature Language="F#" Value="member this.CellMouseMove : System.Windows.Forms.DataGridViewCellMouseEventHandler " Usage="member this.CellMouseMove : System.Windows.Forms.DataGridViewCellMouseEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewCellMouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在鼠标指针移到 <see cref="T:System.Windows.Forms.DataGridView" /> 控件上时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关如何处理事件的详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。

## Examples  
 下面的代码示例演示如何使用此成员。 在此示例中，事件处理程序报告事件的发生 <xref:System.Windows.Forms.DataGridView.CellMouseMove> 。 此报表可帮助你了解何时发生事件，并可帮助你进行调试。 若要报告多个事件或频繁发生的事件，请考虑 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 将消息替换为多行或将其追加到多行 <xref:System.Windows.Forms.TextBox> 。  
  
 若要运行示例代码，请将其粘贴到包含名为的类型的实例的项目中 <xref:System.Windows.Forms.DataGridView> `DataGridView1` 。 然后，确保事件处理程序与事件相关联 <xref:System.Windows.Forms.DataGridView.CellMouseMove> 。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#300](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#300)]
 [!code-vb[System.Windows.Forms.EventExamples#300](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#300)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="CellMouseUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewCellMouseEventHandler CellMouseUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewCellMouseEventHandler CellMouseUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.CellMouseUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event CellMouseUp As DataGridViewCellMouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::DataGridViewCellMouseEventHandler ^ CellMouseUp;" />
      <MemberSignature Language="F#" Value="member this.CellMouseUp : System.Windows.Forms.DataGridViewCellMouseEventHandler " Usage="member this.CellMouseUp : System.Windows.Forms.DataGridViewCellMouseEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewCellMouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>用户在单元格上方释放鼠标按钮时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当用户释放任意鼠标按钮时发生此事件。 使用 <xref:System.Windows.Forms.MouseEventArgs.Button%2A?displayProperty=nameWithType> 属性可确定单击了哪个按钮。  
  
 有关如何处理事件的详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。

## Examples  
 下面的代码示例演示如何使用此成员。 在此示例中，事件处理程序报告事件的发生 <xref:System.Windows.Forms.DataGridView.CellMouseUp> 。 此报表可帮助你了解何时发生事件，并可帮助你进行调试。 若要报告多个事件或频繁发生的事件，请考虑 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 将消息替换为多行或将其追加到多行 <xref:System.Windows.Forms.TextBox> 。  
  
 若要运行示例代码，请将其粘贴到包含名为的类型的实例的项目中 <xref:System.Windows.Forms.DataGridView> `DataGridView1` 。 然后，确保事件处理程序与事件相关联 <xref:System.Windows.Forms.DataGridView.CellMouseUp> 。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#301](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#301)]
 [!code-vb[System.Windows.Forms.EventExamples#301](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#301)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="CellPainting">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewCellPaintingEventHandler CellPainting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewCellPaintingEventHandler CellPainting" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.CellPainting" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event CellPainting As DataGridViewCellPaintingEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::DataGridViewCellPaintingEventHandler ^ CellPainting;" />
      <MemberSignature Language="F#" Value="member this.CellPainting : System.Windows.Forms.DataGridViewCellPaintingEventHandler " Usage="member this.CellPainting : System.Windows.Forms.DataGridViewCellPaintingEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewCellPaintingEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>需要绘制单元格时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 可以处理此事件，以自定义控件中单元格的外观。 您可以自行绘制单元格，或绘制单元格的特定部分，并使用 <xref:System.Windows.Forms.DataGridViewCellPaintingEventArgs.PaintBackground%2A?displayProperty=nameWithType> 或 <xref:System.Windows.Forms.DataGridViewCellPaintingEventArgs.PaintContent%2A?displayProperty=nameWithType> 方法来绘制其他部分。 你还可以使用 <xref:System.Windows.Forms.VisualStyles.VisualStyleRenderer> 类来绘制使用当前主题的标准控件。 有关详细信息，请参阅[使用视觉样式呈现控件](/dotnet/framework/winforms/controls/rendering-controls-with-visual-styles)。 如果使用的是 [!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)] ，则还可以访问可用于控件的大型标准图像库 <xref:System.Windows.Forms.DataGridView> 。  
  
 当处理此事件时，应通过事件处理程序的参数访问单元，而不是直接访问单元。  
  
 有关如何处理事件的详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。

## Examples  
 下面的代码示例演示如何使用此事件来自定义特定列中所有单元格的外观。  
  
 此代码是 [如何：自定义 Windows 窗体 DataGridView 控件中的单元格外观](/dotnet/framework/winforms/controls/customize-the-appearance-of-cells-in-the-datagrid)的更大示例的一部分。  
  
 [!code-csharp[System.Windows.Forms.DataGridViewCellPainting#10](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewCellPainting/CS/form1.cs#10)]
 [!code-vb[System.Windows.Forms.DataGridViewCellPainting#10](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewCellPainting/VB/form1.vb#10)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DataGridViewCellPaintingEventHandler" />
        <altmember cref="T:System.Windows.Forms.DataGridViewCellPaintingEventArgs" />
        <altmember cref="M:System.Windows.Forms.DataGridView.OnCellPainting(System.Windows.Forms.DataGridViewCellPaintingEventArgs)" />
        <altmember cref="T:System.Windows.Forms.DataGridViewCell" />
        <related type="Article" href="/dotnet/framework/winforms/controls/customize-the-appearance-of-cells-in-the-datagrid">如何：自定义 Windows 窗体 DataGridView 控件中单元格的外观</related>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="CellParsing">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewCellParsingEventHandler CellParsing;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewCellParsingEventHandler CellParsing" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.CellParsing" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event CellParsing As DataGridViewCellParsingEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::DataGridViewCellParsingEventHandler ^ CellParsing;" />
      <MemberSignature Language="F#" Value="member this.CellParsing : System.Windows.Forms.DataGridViewCellParsingEventHandler " Usage="member this.CellParsing : System.Windows.Forms.DataGridViewCellParsingEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewCellParsingEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在单元格值已修改的情况下，当单元格退出编辑模式时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 默认情况下，该 <xref:System.Windows.Forms.DataGridView> 控件将尝试将单元格中显示的用户指定值转换为 cell 属性所指定的类型中的实际基础单元值 <xref:System.Windows.Forms.DataGridViewCell.ValueType%2A> 。 此转换使用 cell 属性返回的单元格样式的格式设置属性 <xref:System.Windows.Forms.DataGridViewCell.InheritedStyle%2A> 。  
  
 如果标准转换无法满足您的需要，请处理 <xref:System.Windows.Forms.DataGridView.CellParsing> 事件以提供到所需类型的自定义值转换。  
  
 用户可以使用由属性指定的方法进入编辑模式 <xref:System.Windows.Forms.DataGridView.EditMode%2A> ，还可以退出编辑模式，通过移动到其他单元或按 enter 来提交对单元格所做的任何更改。 按 ESC 将在提交之前恢复对值所做的任何更改，并且 <xref:System.Windows.Forms.DataGridView.CellParsing> 不会发生该事件。 <xref:System.Windows.Forms.DataGridView.CellParsing>仅当单元格值已实际修改时才发生事件，即使最终值与原始值相同也是如此。 如果调用方法，也会发生这种情况 <xref:System.Windows.Forms.DataGridView.CommitEdit%2A> 。  
  
 处理 <xref:System.Windows.Forms.DataGridView.CellParsing> 事件时，可以自行转换值，也可以自定义默认转换。 例如，您可以使用单元格 <xref:System.Windows.Forms.DataGridViewCell.ParseFormattedValue%2A> 方法和所选的类型转换器来自行转换值。 或者，您可以让默认的类型转换器分析值，但是修改 <xref:System.Windows.Forms.DataGridViewCellStyle.NullValue%2A> <xref:System.Windows.Forms.DataGridViewCellStyle.DataSourceNullValue%2A> 属性返回的对象的、和 <xref:System.Windows.Forms.DataGridViewCellStyle.FormatProvider%2A> 属性 <xref:System.Windows.Forms.DataGridViewCellParsingEventArgs.InheritedCellStyle%2A?displayProperty=nameWithType> ，该属性是使用单元属性初始化的 <xref:System.Windows.Forms.DataGridViewCell.InheritedStyle%2A> 。  
  
 当你自行转换值时，请将属性的初始格式化值替换为 <xref:System.Windows.Forms.ConvertEventArgs.Value%2A?displayProperty=nameWithType> cell 属性所指定的类型中的转换后的值 <xref:System.Windows.Forms.DataGridViewCell.ValueType%2A> 。 若要指示无需进行进一步分析，请将 <xref:System.Windows.Forms.DataGridViewCellParsingEventArgs.ParsingApplied%2A?displayProperty=nameWithType> 属性设置为 `true` 。  
  
 当事件处理程序完成时，如果 <xref:System.Windows.Forms.ConvertEventArgs.Value%2A?displayProperty=nameWithType> 为 `null` 或不是正确的类型，或者 <xref:System.Windows.Forms.DataGridViewCellParsingEventArgs.ParsingApplied%2A?displayProperty=nameWithType> 属性为，则 `false` <xref:System.Windows.Forms.ConvertEventArgs.Value%2A> 使用 <xref:System.Windows.Forms.DataGridViewCell.ParseFormattedValue%2A> 带有默认类型转换器的单元方法来分析。 此方法的默认实现使用 <xref:System.Windows.Forms.DataGridViewCellStyle.NullValue%2A> <xref:System.Windows.Forms.DataGridViewCellStyle.DataSourceNullValue%2A> <xref:System.Windows.Forms.DataGridViewCellStyle.FormatProvider%2A> 传入的单元格样式的、和属性分析值。 如果该值不等于 <xref:System.Windows.Forms.DataGridViewCellStyle.NullValue%2A> ，则使用 <xref:System.Windows.Forms.DataGridViewCellStyle.FormatProvider%2A> 属性和传入的类型转换器分析该值。  
  
 若要自定义单元格值到格式化值的转换以便显示，请处理 <xref:System.Windows.Forms.DataGridView.CellFormatting> 事件。  
  
 有关如何处理事件的详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。

## Examples  
 下面的代码示例演示如何处理 <xref:System.Windows.Forms.DataGridView.CellParsing> 事件。 它还演示如何使用 <xref:System.Windows.Forms.DataGridViewCellParsingEventArgs> 类。  
  
 [!code-cpp[System.Windows.Forms.GridViewUnbound#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.GridViewUnbound/CPP/form1.cpp#2)]
 [!code-csharp[System.Windows.Forms.GridViewUnbound#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.GridViewUnbound/CS/form1.cs#2)]
 [!code-vb[System.Windows.Forms.GridViewUnbound#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.GridViewUnbound/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.DataGridView.CellParsing" />
        <altmember cref="M:System.Windows.Forms.DataGridView.OnCellParsing(System.Windows.Forms.DataGridViewCellParsingEventArgs)" />
        <altmember cref="M:System.Windows.Forms.DataGridView.CommitEdit(System.Windows.Forms.DataGridViewDataErrorContexts)" />
        <altmember cref="E:System.Windows.Forms.DataGridView.CellFormatting" />
        <altmember cref="P:System.Windows.Forms.DataGridView.EditMode" />
        <altmember cref="P:System.Windows.Forms.DataGridViewCell.ValueType" />
        <altmember cref="P:System.Windows.Forms.DataGridViewCell.InheritedStyle" />
        <altmember cref="M:System.Windows.Forms.DataGridViewCell.ParseFormattedValue(System.Object,System.Windows.Forms.DataGridViewCellStyle,System.ComponentModel.TypeConverter,System.ComponentModel.TypeConverter)" />
        <altmember cref="T:System.Windows.Forms.DataGridViewCellParsingEventHandler" />
        <altmember cref="T:System.Windows.Forms.DataGridViewCellParsingEventArgs" />
        <altmember cref="P:System.Windows.Forms.DataGridViewCellParsingEventArgs.InheritedCellStyle" />
        <altmember cref="P:System.Windows.Forms.DataGridViewCellParsingEventArgs.ParsingApplied" />
        <altmember cref="P:System.Windows.Forms.ConvertEventArgs.Value" />
        <altmember cref="T:System.Windows.Forms.DataGridViewCellStyle" />
        <altmember cref="P:System.Windows.Forms.DataGridViewCellStyle.NullValue" />
        <altmember cref="P:System.Windows.Forms.DataGridViewCellStyle.Format" />
        <altmember cref="P:System.Windows.Forms.DataGridViewCellStyle.FormatProvider" />
        <related type="Article" href="/dotnet/framework/winforms/controls/cell-styles-in-the-windows-forms-datagridview-control">Windows 窗体 DataGridView 控件中的单元格样式</related>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="CellStateChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewCellStateChangedEventHandler CellStateChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewCellStateChangedEventHandler CellStateChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.CellStateChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event CellStateChanged As DataGridViewCellStateChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::DataGridViewCellStateChangedEventHandler ^ CellStateChanged;" />
      <MemberSignature Language="F#" Value="member this.CellStateChanged : System.Windows.Forms.DataGridViewCellStateChangedEventHandler " Usage="member this.CellStateChanged : System.Windows.Forms.DataGridViewCellStateChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewCellStateChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>单元格状态更改(例如单元格失去或获得焦点)时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关如何处理事件的详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。

## Examples  
 下面的代码示例演示如何使用此事件。  
  
 [!code-csharp[System.Windows.Forms.DataGridViewMisc#135](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewMisc/CS/datagridviewmisc.cs#135)]
 [!code-vb[System.Windows.Forms.DataGridViewMisc#135](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewMisc/VB/datagridviewmisc.vb#135)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DataGridViewCellStateChangedEventHandler" />
        <altmember cref="T:System.Windows.Forms.DataGridViewCellStateChangedEventArgs" />
        <altmember cref="P:System.Windows.Forms.DataGridViewCellStateChangedEventArgs.StateChanged" />
        <altmember cref="T:System.Windows.Forms.DataGridViewElementStates" />
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="CellStyleChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewCellEventHandler CellStyleChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewCellEventHandler CellStyleChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.CellStyleChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event CellStyleChanged As DataGridViewCellEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::DataGridViewCellEventHandler ^ CellStyleChanged;" />
      <MemberSignature Language="F#" Value="member this.CellStyleChanged : System.Windows.Forms.DataGridViewCellEventHandler " Usage="member this.CellStyleChanged : System.Windows.Forms.DataGridViewCellEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewCellEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在 <see cref="T:System.Windows.Forms.DataGridViewCell" /> 的 <see cref="P:System.Windows.Forms.DataGridViewCell.Style" /> 属性更改时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当属性返回的的任何属性 <xref:System.Windows.Forms.DataGridViewCellStyle> <xref:System.Windows.Forms.DataGridViewCell.Style%2A?displayProperty=nameWithType> 设置为新值时，或者当 <xref:System.Windows.Forms.DataGridViewCell.Style%2A?displayProperty=nameWithType> 属性设置为新 <xref:System.Windows.Forms.DataGridViewCellStyle> 的，且至少有一个属性值与上一个单元格样式对象不同时，将发生此事件。  
  
 有关如何处理事件的详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。

## Examples  
 下面的代码示例演示如何使用此成员。 在此示例中，事件处理程序报告事件的发生 <xref:System.Windows.Forms.DataGridView.CellStyleChanged> 。 此报表可帮助你了解何时发生事件，并可帮助你进行调试。 若要报告多个事件或频繁发生的事件，请考虑 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 将消息替换为多行或将其追加到多行 <xref:System.Windows.Forms.TextBox> 。  
  
 若要运行示例代码，请将其粘贴到包含名为的类型的实例的项目中 <xref:System.Windows.Forms.DataGridView> `DataGridView1` 。 然后，确保事件处理程序与事件相关联 <xref:System.Windows.Forms.DataGridView.CellStyleChanged> 。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#305](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#305)]
 [!code-vb[System.Windows.Forms.EventExamples#305](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#305)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DataGridViewCellStyle" />
        <related type="Article" href="/dotnet/framework/winforms/controls/cell-styles-in-the-windows-forms-datagridview-control">Windows 窗体 DataGridView 控件中的单元格样式</related>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="CellStyleContentChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewCellStyleContentChangedEventHandler CellStyleContentChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewCellStyleContentChangedEventHandler CellStyleContentChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.CellStyleContentChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event CellStyleContentChanged As DataGridViewCellStyleContentChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::DataGridViewCellStyleContentChangedEventHandler ^ CellStyleContentChanged;" />
      <MemberSignature Language="F#" Value="member this.CellStyleContentChanged : System.Windows.Forms.DataGridViewCellStyleContentChangedEventHandler " Usage="member this.CellStyleContentChanged : System.Windows.Forms.DataGridViewCellStyleContentChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewCellStyleContentChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>单元格样式的某个值更改时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.DataGridView.CellStyleContentChanged>当 <xref:System.Windows.Forms.DataGridViewCellStyle> 以下某个属性返回的对象的属性值发生更改时，将发生该事件：  
  
-   <xref:System.Windows.Forms.DataGridViewCell.Style%2A?displayProperty=nameWithType> 
  
-   <xref:System.Windows.Forms.DataGridViewColumn.DefaultCellStyle%2A?displayProperty=nameWithType> 
  
-   <xref:System.Windows.Forms.DataGridViewRow.DefaultCellStyle%2A?displayProperty=nameWithType> 
  
-   <xref:System.Windows.Forms.DataGridView.RowHeadersDefaultCellStyle%2A?displayProperty=nameWithType> 
  
-   <xref:System.Windows.Forms.DataGridView.RowsDefaultCellStyle%2A?displayProperty=nameWithType> 
  
-   <xref:System.Windows.Forms.DataGridView.ColumnHeadersDefaultCellStyle%2A?displayProperty=nameWithType> 
  
-   <xref:System.Windows.Forms.DataGridView.AlternatingRowsDefaultCellStyle%2A?displayProperty=nameWithType> 
  
-   <xref:System.Windows.Forms.DataGridView.DefaultCellStyle%2A?displayProperty=nameWithType> 
  
 但是，如果将其中一个属性设置为其他属性 <xref:System.Windows.Forms.DataGridViewCellStyle> ，则会发生相应的*PropertyName* `Changed` 事件，但 <xref:System.Windows.Forms.DataGridView.CellStyleContentChanged> 不会发生该事件。  
  
 对于行、列和单元属性，PropertyName 事件的名称以*PropertyName* `Changed` " `Row` "、" `Column` " 或 " `Cell` " 开头 (例如 <xref:System.Windows.Forms.DataGridView.RowDefaultCellStyleChanged>) 。  
  
 有关如何处理事件的详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。

## Examples  
 下面的代码示例演示如何使用此成员。 在此示例中，事件处理程序报告事件的发生 <xref:System.Windows.Forms.DataGridView.CellStyleContentChanged> 。 此报表可帮助你了解何时发生事件，并可帮助你进行调试。 若要报告多个事件或频繁发生的事件，请考虑 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 将消息替换为多行或将其追加到多行 <xref:System.Windows.Forms.TextBox> 。  
  
 若要运行示例代码，请将其粘贴到包含名为的类型的实例的项目中 <xref:System.Windows.Forms.DataGridView> `DataGridView1` 。 然后，确保事件处理程序与事件相关联 <xref:System.Windows.Forms.DataGridView.CellStyleContentChanged> 。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#306](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#306)]
 [!code-vb[System.Windows.Forms.EventExamples#306](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#306)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DataGridViewCellStyle" />
        <altmember cref="T:System.Windows.Forms.DataGridViewCellStyleContentChangedEventHandler" />
        <altmember cref="T:System.Windows.Forms.DataGridViewCellStyleContentChangedEventArgs" />
        <altmember cref="M:System.Windows.Forms.DataGridView.OnCellStyleContentChanged(System.Windows.Forms.DataGridViewCellStyleContentChangedEventArgs)" />
        <related type="Article" href="/dotnet/framework/winforms/controls/cell-styles-in-the-windows-forms-datagridview-control">Windows 窗体 DataGridView 控件中的单元格样式</related>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="CellToolTipTextChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewCellEventHandler CellToolTipTextChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewCellEventHandler CellToolTipTextChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.CellToolTipTextChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event CellToolTipTextChanged As DataGridViewCellEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::DataGridViewCellEventHandler ^ CellToolTipTextChanged;" />
      <MemberSignature Language="F#" Value="member this.CellToolTipTextChanged : System.Windows.Forms.DataGridViewCellEventHandler " Usage="member this.CellToolTipTextChanged : System.Windows.Forms.DataGridViewCellEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewCellEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在 <see cref="T:System.Windows.Forms.DataGridView" /> 中某一单元格的 <see cref="P:System.Windows.Forms.DataGridViewCell.ToolTipText" /> 属性值更改时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关如何处理事件的详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。

## Examples  
 下面的代码示例演示如何使用此成员。 在此示例中，事件处理程序报告事件的发生 <xref:System.Windows.Forms.DataGridView.CellToolTipTextChanged> 。 此报表可帮助你了解何时发生事件，并可帮助你进行调试。 若要报告多个事件或频繁发生的事件，请考虑 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 将消息替换为多行或将其追加到多行 <xref:System.Windows.Forms.TextBox> 。  
  
 若要运行示例代码，请将其粘贴到包含名为的类型的实例的项目中 <xref:System.Windows.Forms.DataGridView> `DataGridView1` 。 然后，确保事件处理程序与事件相关联 <xref:System.Windows.Forms.DataGridView.CellToolTipTextChanged> 。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#307](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#307)]
 [!code-vb[System.Windows.Forms.EventExamples#307](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#307)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="CellToolTipTextNeeded">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewCellToolTipTextNeededEventHandler CellToolTipTextNeeded;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewCellToolTipTextNeededEventHandler CellToolTipTextNeeded" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.CellToolTipTextNeeded" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event CellToolTipTextNeeded As DataGridViewCellToolTipTextNeededEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::DataGridViewCellToolTipTextNeededEventHandler ^ CellToolTipTextNeeded;" />
      <MemberSignature Language="F#" Value="member this.CellToolTipTextNeeded : System.Windows.Forms.DataGridViewCellToolTipTextNeededEventHandler " Usage="member this.CellToolTipTextNeeded : System.Windows.Forms.DataGridViewCellToolTipTextNeededEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewCellToolTipTextNeededEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>需要单元格的工具提示文本时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.DataGridView.CellToolTipTextNeeded>仅当 <xref:System.Windows.Forms.DataGridView> 控件 <xref:System.Windows.Forms.DataGridView.DataSource%2A> 属性已设置或其 <xref:System.Windows.Forms.DataGridView.VirtualMode%2A> 属性为时，才会发生此事件 `true` 。  
  
 处理 <xref:System.Windows.Forms.DataGridView.CellToolTipTextNeeded> 事件时，如果属性值为，则在处理程序中指定的工具提示文本将显示在 <xref:System.Windows.Forms.DataGridView.ShowCellToolTips%2A> `true` 单元格中，或者用户使用键盘导航到单元格。 <xref:System.Windows.Forms.DataGridView.CellToolTipTextNeeded>若要显示由当前状态或单元值决定的工具提示，事件会很有用。  
  
 <xref:System.Windows.Forms.DataGridView.CellToolTipTextNeeded>只要 <xref:System.Windows.Forms.DataGridViewCell.ToolTipText%2A?displayProperty=nameWithType> 以编程方式或当用户通过鼠标或键盘导航到单元格时，就会发生该事件的值。  
  
 您可以使用 <xref:System.Windows.Forms.DataGridViewCellEventArgs.ColumnIndex%2A?displayProperty=nameWithType> 和 <xref:System.Windows.Forms.DataGridViewCellEventArgs.RowIndex%2A> 属性来确定单元的状态或值，并使用此信息来更改或修改 <xref:System.Windows.Forms.DataGridViewCellToolTipTextNeededEventArgs.ToolTipText%2A?displayProperty=nameWithType> 属性。 此属性将用单元属性的值进行初始化，该属性的值将 <xref:System.Windows.Forms.DataGridViewCell.ToolTipText%2A> 重写。  
  
 处理 <xref:System.Windows.Forms.DataGridView.CellToolTipTextNeeded> 大量数据时处理事件，以避免为多个单元格设置单元值时的性能损失 <xref:System.Windows.Forms.DataGridViewCell.ToolTipText%2A> 。 有关详细信息，请参阅 [缩放 Windows 窗体 DataGridView 控件的最佳做法](/dotnet/framework/winforms/controls/best-practices-for-scaling-the-windows-forms-datagridview-control)。  
  
 有关如何处理事件的详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。

## Examples  
 下面的代码示例演示如何使用 <xref:System.Windows.Forms.DataGridView.CellToolTipTextNeeded> 事件处理程序在数据绑定控件中显示隐藏列的信息 <xref:System.Windows.Forms.DataGridView> 。  
  
 [!code-csharp[System.Windows.Forms.DataGridView_NeededEvents#20](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridView_NeededEvents/CS/Form1.cs#20)]
 [!code-vb[System.Windows.Forms.DataGridView_NeededEvents#20](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridView_NeededEvents/VB/Form1.vb#20)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.DataGridView.DataSource" />
        <altmember cref="P:System.Windows.Forms.DataGridView.VirtualMode" />
        <altmember cref="P:System.Windows.Forms.DataGridView.ShowCellToolTips" />
        <altmember cref="T:System.Windows.Forms.DataGridViewCellToolTipTextNeededEventHandler" />
        <altmember cref="T:System.Windows.Forms.DataGridViewCellToolTipTextNeededEventArgs" />
        <altmember cref="P:System.Windows.Forms.DataGridViewCellToolTipTextNeededEventArgs.ToolTipText" />
        <altmember cref="P:System.Windows.Forms.DataGridViewCell.ToolTipText" />
        <altmember cref="M:System.Windows.Forms.DataGridView.OnCellToolTipTextNeeded(System.Windows.Forms.DataGridViewCellToolTipTextNeededEventArgs)" />
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="CellValidated">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewCellEventHandler CellValidated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewCellEventHandler CellValidated" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.CellValidated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event CellValidated As DataGridViewCellEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::DataGridViewCellEventHandler ^ CellValidated;" />
      <MemberSignature Language="F#" Value="member this.CellValidated : System.Windows.Forms.DataGridViewCellEventHandler " Usage="member this.CellValidated : System.Windows.Forms.DataGridViewCellEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewCellEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>单元格完成验证时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 处理此事件对于单元格值的验证后处理非常有用。  
  
 有关如何处理事件的详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。

## Examples  
 下面的代码示例演示如何使用 <xref:System.Windows.Forms.DataGridView.CellValidated> 事件来清除 <xref:System.Windows.Forms.DataGridViewRow.ErrorText%2A> 属性。 在此示例中， <xref:System.Windows.Forms.DataGridView.CellValidating> <xref:System.Windows.Forms.DataGridViewRow.ErrorText%2A> 如果用户在单元格中输入无效数据，则该事件将设置。 此示例是事件中提供的一个更大示例的一部分 <xref:System.Windows.Forms.DataGridView.SelectionChanged> 。  
  
 [!code-csharp[System.Windows.Forms.DataGridViewSelectionSum#50](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewSelectionSum/CS/form1.cs#50)]
 [!code-vb[System.Windows.Forms.DataGridViewSelectionSum#50](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewSelectionSum/VB/form1.vb#50)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.DataGridView.CellValidating" />
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="CellValidating">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewCellValidatingEventHandler CellValidating;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewCellValidatingEventHandler CellValidating" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.CellValidating" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event CellValidating As DataGridViewCellValidatingEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::DataGridViewCellValidatingEventHandler ^ CellValidating;" />
      <MemberSignature Language="F#" Value="member this.CellValidating : System.Windows.Forms.DataGridViewCellValidatingEventHandler " Usage="member this.CellValidating : System.Windows.Forms.DataGridViewCellValidatingEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewCellValidatingEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在单元格失去输入焦点时发生，并启用内容验证功能。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 取消此事件将取消对当前单元格所做的更改。 如果在数据绑定模式下取消此事件，则不会将新值推送到基础数据源。 如果在虚拟模式下取消此事件，则 <xref:System.Windows.Forms.DataGridView.CellValuePushed> 不会引发事件。  
  
 处理 <xref:System.Windows.Forms.DataGridView.CellValidated> 事件以执行验证后处理。  
  
 有关如何处理事件的详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。

## Examples  
 下面的代码示例将处理 <xref:System.Windows.Forms.DataGridView.CellValidating> 事件，以确保仅用户输入正整数。 此示例是参考主题中提供的一个更大示例的一部分 <xref:System.Windows.Forms.DataGridView.VirtualMode%2A> 。  
  
 [!code-cpp[System.Windows.Forms.DataGridView._Virtual#40](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.DataGridView._Virtual/CPP/virtual.cpp#40)]
 [!code-csharp[System.Windows.Forms.DataGridView._Virtual#40](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridView._Virtual/CS/virtual.cs#40)]
 [!code-vb[System.Windows.Forms.DataGridView._Virtual#40](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridView._Virtual/VB/virtual.vb#40)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DataGridViewCellValidatingEventHandler" />
        <altmember cref="T:System.Windows.Forms.DataGridViewCellValidatingEventArgs" />
        <altmember cref="E:System.Windows.Forms.DataGridView.CellValidated" />
        <altmember cref="T:System.Windows.Forms.DataGridViewCell" />
        <altmember cref="M:System.Windows.Forms.DataGridView.OnCellValidating(System.Windows.Forms.DataGridViewCellValidatingEventArgs)" />
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="CellValueChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewCellEventHandler CellValueChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewCellEventHandler CellValueChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.CellValueChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event CellValueChanged As DataGridViewCellEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::DataGridViewCellEventHandler ^ CellValueChanged;" />
      <MemberSignature Language="F#" Value="member this.CellValueChanged : System.Windows.Forms.DataGridViewCellEventHandler " Usage="member this.CellValueChanged : System.Windows.Forms.DataGridViewCellEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewCellEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>单元格的值更改时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此 <xref:System.Windows.Forms.DataGridView.CellValueChanged?displayProperty=nameWithType> 事件在用户指定的值提交时发生，通常是在焦点离开单元格时发生。  
  
 但对于复选框单元格，你通常会希望立即处理更改。 若要在单击单元格时提交更改，则必须处理 <xref:System.Windows.Forms.DataGridView.CurrentCellDirtyStateChanged?displayProperty=nameWithType> 事件。 在处理程序中，如果当前单元格为复选框单元，则调用 <xref:System.Windows.Forms.DataGridView.CommitEdit%2A?displayProperty=nameWithType> 方法并传入 <xref:System.Windows.Forms.DataGridViewDataErrorContexts.Commit> 值。  
  
 更改单元格的值时，不会自动对控件中的行进行排序。 若要在用户修改单元格时对控件进行排序，请 <xref:System.Windows.Forms.DataGridView.Sort%2A> 在 <xref:System.Windows.Forms.DataGridView.CellValueChanged> 事件处理程序中调用方法。  
  
 有关如何处理事件的详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。

## Examples  
 下面的代码示例演示如何使用 <xref:System.Windows.Forms.DataGridView.CellValueChanged> 事件更新的余额列中的值 <xref:System.Windows.Forms.DataGridView> 。 此示例是事件中提供的一个更大示例的一部分 <xref:System.Windows.Forms.DataGridView.SelectionChanged> 。  
  
 [!code-csharp[System.Windows.Forms.DataGridViewSelectionSum#30](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewSelectionSum/CS/form1.cs#30)]
 [!code-vb[System.Windows.Forms.DataGridViewSelectionSum#30](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewSelectionSum/VB/form1.vb#30)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="CellValueNeeded">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewCellValueEventHandler CellValueNeeded;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewCellValueEventHandler CellValueNeeded" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.CellValueNeeded" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event CellValueNeeded As DataGridViewCellValueEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::DataGridViewCellValueEventHandler ^ CellValueNeeded;" />
      <MemberSignature Language="F#" Value="member this.CellValueNeeded : System.Windows.Forms.DataGridViewCellValueEventHandler " Usage="member this.CellValueNeeded : System.Windows.Forms.DataGridViewCellValueEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewCellValueEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在以下情况下发生：当 <see cref="T:System.Windows.Forms.DataGridView" /> 控件的 <see cref="P:System.Windows.Forms.DataGridView.VirtualMode" /> 属性为 <see langword="true" />，并且 <see cref="T:System.Windows.Forms.DataGridView" /> 只有在单元格中有值的情况下才格式化和显示单元格时。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用虚拟模式下的此事件，可使用自定义数据存储区中的数据填充单元，而不会导致行成为非共享行。 有关行共享的详细信息，请参阅 [缩放 Windows 窗体 DataGridView 控件的最佳做法](/dotnet/framework/winforms/controls/best-practices-for-scaling-the-windows-forms-datagridview-control)。 有关虚拟模式的详细信息，请参阅 [Windows 窗体 DataGridView 控件中的虚拟模式](/dotnet/framework/winforms/controls/virtual-mode-in-the-windows-forms-datagridview-control)。  
  
 若要将用户指定的值添加到自定义数据存储，请处理 <xref:System.Windows.Forms.DataGridView.CellValuePushed> 事件。  
  
 有关如何处理事件的详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。

## Examples  
 下面的代码示例处理 <xref:System.Windows.Forms.DataGridView.CellValueNeeded> 事件以便用正整数填充单元格。 此示例是参考主题中提供的一个更大示例的一部分 <xref:System.Windows.Forms.DataGridView.VirtualMode%2A> 。  
  
 [!code-cpp[System.Windows.Forms.DataGridView._Virtual#10](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.DataGridView._Virtual/CPP/virtual.cpp#10)]
 [!code-csharp[System.Windows.Forms.DataGridView._Virtual#10](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridView._Virtual/CS/virtual.cs#10)]
 [!code-vb[System.Windows.Forms.DataGridView._Virtual#10](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridView._Virtual/VB/virtual.vb#10)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.DataGridView.VirtualMode" />
        <altmember cref="T:System.Windows.Forms.DataGridViewCellValueEventHandler" />
        <altmember cref="T:System.Windows.Forms.DataGridViewCellValueEventArgs" />
        <altmember cref="E:System.Windows.Forms.DataGridView.CellValuePushed" />
        <altmember cref="M:System.Windows.Forms.DataGridView.OnCellValueNeeded(System.Windows.Forms.DataGridViewCellValueEventArgs)" />
        <related type="Article" href="/dotnet/framework/winforms/controls/best-practices-for-scaling-the-windows-forms-datagridview-control">缩放 Windows 窗体 DataGridView 控件的最佳做法</related>
        <related type="Article" href="/dotnet/framework/winforms/controls/virtual-mode-in-the-windows-forms-datagridview-control">Windows 窗体 DataGridView 控件中的虚拟模式</related>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="CellValuePushed">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewCellValueEventHandler CellValuePushed;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewCellValueEventHandler CellValuePushed" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.CellValuePushed" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event CellValuePushed As DataGridViewCellValueEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::DataGridViewCellValueEventHandler ^ CellValuePushed;" />
      <MemberSignature Language="F#" Value="member this.CellValuePushed : System.Windows.Forms.DataGridViewCellValueEventHandler " Usage="member this.CellValuePushed : System.Windows.Forms.DataGridViewCellValueEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewCellValueEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在以下情况下发生：当 <see cref="T:System.Windows.Forms.DataGridView" /> 控件的 <see cref="P:System.Windows.Forms.DataGridView.VirtualMode" /> 属性为 <see langword="true" />，并且单元格值已更改并需要存储在基础数据源中时。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在虚拟模式下使用此事件可使用用户指定的数据更新自定义数据存储。 处理 <xref:System.Windows.Forms.DataGridView.CellValueNeeded> 事件以从数据存储中检索要在控件中显示的值。  
  
 有关虚拟模式的详细信息，请参阅 [Windows 窗体 DataGridView 控件中的虚拟模式](/dotnet/framework/winforms/controls/virtual-mode-in-the-windows-forms-datagridview-control)。  
  
 有关如何处理事件的详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。

## Examples  
 下面的代码示例处理 <xref:System.Windows.Forms.DataGridView.CellValuePushed> 事件，以在数据存储对象中存储更新和新条目。 此示例是参考主题中提供的一个更大示例的一部分 <xref:System.Windows.Forms.DataGridView.VirtualMode%2A> 。  
  
 [!code-cpp[System.Windows.Forms.DataGridView._Virtual#10](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.DataGridView._Virtual/CPP/virtual.cpp#10)]
 [!code-csharp[System.Windows.Forms.DataGridView._Virtual#10](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridView._Virtual/CS/virtual.cs#10)]
 [!code-vb[System.Windows.Forms.DataGridView._Virtual#10](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridView._Virtual/VB/virtual.vb#10)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.DataGridView.VirtualMode" />
        <altmember cref="T:System.Windows.Forms.DataGridViewCellValueEventHandler" />
        <altmember cref="T:System.Windows.Forms.DataGridViewCellValueEventArgs" />
        <altmember cref="E:System.Windows.Forms.DataGridView.CellValueNeeded" />
        <altmember cref="M:System.Windows.Forms.DataGridView.OnCellValuePushed(System.Windows.Forms.DataGridViewCellValueEventArgs)" />
        <related type="Article" href="/dotnet/framework/winforms/controls/virtual-mode-in-the-windows-forms-datagridview-control">Windows 窗体 DataGridView 控件中的虚拟模式</related>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ClearSelection">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>取消对当前选定的单元格的选择。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ClearSelection">
      <MemberSignature Language="C#" Value="public void ClearSelection ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClearSelection() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.ClearSelection" />
      <MemberSignature Language="VB.NET" Value="Public Sub ClearSelection ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ClearSelection();" />
      <MemberSignature Language="F#" Value="member this.ClearSelection : unit -&gt; unit" Usage="dataGridView.ClearSelection " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>通过取消选择所有的选定单元格来清除当前的选择。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 调用此方法时，每个列和行的 <xref:System.Windows.Forms.DataGridViewBand.Selected%2A> 属性都设置为 `false` 。

## Examples  
 下面的代码示例清除了的选定内容 <xref:System.Windows.Forms.DataGridView> 。 若要运行此示例，请将代码粘贴到包含名为的和名为的的窗体中 <xref:System.Windows.Forms.DataGridView> `dataGridView1` <xref:System.Windows.Forms.Button> `clearSelectionButton` ，并确保所有事件都与事件处理程序相关联。  
  
 [!code-csharp[System.Windows.Forms.DataGridViewMisc#170](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewMisc/CS/datagridviewmisc.cs#170)]
 [!code-vb[System.Windows.Forms.DataGridViewMisc#170](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewMisc/VB/datagridviewmisc.vb#170)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="ClearSelection">
      <MemberSignature Language="C#" Value="protected void ClearSelection (int columnIndexException, int rowIndexException, bool selectExceptionElement);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void ClearSelection(int32 columnIndexException, int32 rowIndexException, bool selectExceptionElement) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.ClearSelection(System.Int32,System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub ClearSelection (columnIndexException As Integer, rowIndexException As Integer, selectExceptionElement As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void ClearSelection(int columnIndexException, int rowIndexException, bool selectExceptionElement);" />
      <MemberSignature Language="F#" Value="member this.ClearSelection : int * int * bool -&gt; unit" Usage="dataGridView.ClearSelection (columnIndexException, rowIndexException, selectExceptionElement)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="columnIndexException" Type="System.Int32" />
        <Parameter Name="rowIndexException" Type="System.Int32" />
        <Parameter Name="selectExceptionElement" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="columnIndexException">要排除的列索引。</param>
        <param name="rowIndexException">要排除的行索引。</param>
        <param name="selectExceptionElement">如果要选择已排除的单元格、行或列，则为 <see langword="true" />；如果要保留它的初始状态，则为 <see langword="false" />。</param>
        <summary>取消选择当前选定的所有单元格（所指示的单元格除外），可以选择确保所指示的单元格处于选定状态。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `rowIndexException`值-1 表示列标题， `columnIndexException` 值为-1 表示行标题。  
  
 此方法可用于清除当前所选内容，而无需取消选择由异常索引指示的单元格、行或列。  
  
 如果 <xref:System.Windows.Forms.DataGridView.SelectionMode%2A> 属性值允许单独的单元格选择，则此方法将 <xref:System.Windows.Forms.DataGridViewCell.Selected%2A> 每个单元格的属性设置为 `false` ，但不包括指定的行和列中的单元格。 如果 <xref:System.Windows.Forms.DataGridView.SelectionMode%2A> 属性值允许整行或列选择，则此方法还将 <xref:System.Windows.Forms.DataGridViewBand.Selected%2A> 每个行或列的属性设置为 `false` ，排除包含指定单元格的行或列。  
  
 调用此方法时，排除的单元格、行或列可能处于选定状态，也可能不处于选定状态。 如果参数值为，则此方法选择它 `selectExceptionElement` `true` 。 根据选择模式，还可以选择整个行或列作为结果。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="columnIndexException" /> 大于最高的列索引。  
  
- 或 - 
 当<paramref name="columnIndexException" /> 为 <see cref="P:System.Windows.Forms.DataGridView.SelectionMode" /> 时， <see cref="F:System.Windows.Forms.DataGridViewSelectionMode.FullRowSelect" />; otherw时，e, <paramref name="columnIndexException" /> 时， less than 0.  
  
- 或 - 
 <paramref name="rowIndexException" /> 大于最高的行索引。  
  
- 或 - 
 当 <see cref="P:System.Windows.Forms.DataGridView.SelectionMode" /> 为 <see cref="F:System.Windows.Forms.DataGridViewSelectionMode.FullColumnSelect" /> 时，<paramref name="rowIndexException" /> 小于 -1；否则 <paramref name="rowIndexException" /> 小于 0。</exception>
        <altmember cref="P:System.Windows.Forms.DataGridView.SelectionMode" />
        <altmember cref="P:System.Windows.Forms.DataGridViewCell.Selected" />
        <altmember cref="P:System.Windows.Forms.DataGridViewBand.Selected" />
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="ClipboardCopyMode">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataGridViewClipboardCopyMode ClipboardCopyMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.DataGridViewClipboardCopyMode ClipboardCopyMode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.ClipboardCopyMode" />
      <MemberSignature Language="VB.NET" Value="Public Property ClipboardCopyMode As DataGridViewClipboardCopyMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::DataGridViewClipboardCopyMode ClipboardCopyMode { System::Windows::Forms::DataGridViewClipboardCopyMode get(); void set(System::Windows::Forms::DataGridViewClipboardCopyMode value); };" />
      <MemberSignature Language="F#" Value="member this.ClipboardCopyMode : System.Windows.Forms.DataGridViewClipboardCopyMode with get, set" Usage="System.Windows.Forms.DataGridView.ClipboardCopyMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Browsable(true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(true)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewClipboardCopyMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示用户是否可以将单元格的文本值复制到 <see cref="T:System.Windows.Forms.Clipboard" />，以及是否包括行标题和列标题文本。</summary>
        <value><see cref="T:System.Windows.Forms.DataGridViewClipboardCopyMode" /> 值之一。 默认值为 <see cref="F:System.Windows.Forms.DataGridViewClipboardCopyMode.EnableWithAutoHeaderText" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.DataGridView>控件将每个所选单元格的文本表示形式复制到剪贴板。 此值是转换为字符串的单元值，对于图像单元，则为属性的值 <xref:System.Windows.Forms.DataGridViewImageCell.Description%2A> 。  
  
 值以 <xref:System.Windows.Forms.DataFormats.Text> 、、 <xref:System.Windows.Forms.DataFormats.UnicodeText> <xref:System.Windows.Forms.DataFormats.Html> 和格式复制到剪贴板 <xref:System.Windows.Forms.DataFormats.CommaSeparatedValue> 。 这些格式适用于将内容粘贴到记事本、Microsoft Excel 和之类的应用程序中 [!INCLUDE[ofprword](~/includes/ofprword-md.md)] 。  
  
 <xref:System.Windows.Forms.DataGridView>控件复制包含所选所有单元格的最小矩形中包含的单元。 不包含任何选定单元格的行和列不会在复制的数据中表示。 其余行和列中未选定的单元格由空白占位符表示。 根据复制模式和选择模式，还可以复制复制的行和列的标头值。  
  
 当用户复制内容时， <xref:System.Windows.Forms.DataGridView> 控件将添加 <xref:System.Windows.Forms.DataObject> 到剪贴板。 将从方法中检索此数据对象 <xref:System.Windows.Forms.DataGridView.GetClipboardContent%2A> 。 如果要以编程方式将数据对象添加到剪贴板，则可以调用此方法。  
  
 <xref:System.Windows.Forms.DataGridView.GetClipboardContent%2A>方法通过调用方法来检索各个单元格的值 <xref:System.Windows.Forms.DataGridViewCell.GetClipboardContent%2A?displayProperty=nameWithType> 。 您可以在派生类中重写这些方法中的一个或两个，以自定义复制单元格的布局或支持其他数据格式。  
  
 有关剪贴板操作和数据格式的详细信息，请参阅 <xref:System.Windows.Forms.Clipboard> 类。

## Examples  
 下面的代码示例演示如何在控件中启用复制 <xref:System.Windows.Forms.DataGridView> 。 此示例摘自 [如何：使用户能够将多个单元格从 Windows 窗体 DataGridView 控件复制到剪贴板](/dotnet/framework/winforms/controls/enable-users-to-copy-multiple-cells-to-the-clipboard-datagridview)的更大示例的一部分。  
  
 [!code-csharp[System.Windows.Forms.DataGridViewClipboardDemo#10](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewClipboardDemo/CS/datagridviewclipboarddemo.cs#10)]
 [!code-vb[System.Windows.Forms.DataGridViewClipboardDemo#10](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewClipboardDemo/VB/datagridviewclipboarddemo.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">当设置此属性时，指定的值不是有效的 <see cref="T:System.Windows.Forms.DataGridViewClipboardCopyMode" /> 值。</exception>
        <altmember cref="T:System.Windows.Forms.Clipboard" />
        <altmember cref="T:System.Windows.Forms.DataGridViewClipboardCopyMode" />
        <altmember cref="M:System.Windows.Forms.DataGridView.GetClipboardContent" />
        <altmember cref="P:System.Windows.Forms.DataGridView.SelectionMode" />
        <altmember cref="M:System.Windows.Forms.DataGridViewCell.GetClipboardContent(System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.String)" />
        <altmember cref="P:System.Windows.Forms.DataGridViewImageCell.Description" />
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="ColumnAdded">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewColumnEventHandler ColumnAdded;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewColumnEventHandler ColumnAdded" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.ColumnAdded" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ColumnAdded As DataGridViewColumnEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::DataGridViewColumnEventHandler ^ ColumnAdded;" />
      <MemberSignature Language="F#" Value="member this.ColumnAdded : System.Windows.Forms.DataGridViewColumnEventHandler " Usage="member this.ColumnAdded : System.Windows.Forms.DataGridViewColumnEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewColumnEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>将列添加到控件时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关如何处理事件的详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。

## Examples  
 下面的代码示例演示如何使用此成员。 在此示例中，事件处理程序报告事件的发生 <xref:System.Windows.Forms.DataGridView.ColumnAdded> 。 此报表可帮助你了解何时发生事件，并可帮助你进行调试。 若要报告多个事件或频繁发生的事件，请考虑 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 将消息替换为多行或将其追加到多行 <xref:System.Windows.Forms.TextBox> 。  
  
 若要运行示例代码，请将其粘贴到包含名为的类型的实例的项目中 <xref:System.Windows.Forms.DataGridView> `DataGridView1` 。 然后，确保事件处理程序与事件相关联 <xref:System.Windows.Forms.DataGridView.ColumnAdded> 。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#314](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#314)]
 [!code-vb[System.Windows.Forms.EventExamples#314](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#314)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="ColumnContextMenuStripChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewColumnEventHandler ColumnContextMenuStripChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewColumnEventHandler ColumnContextMenuStripChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.ColumnContextMenuStripChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ColumnContextMenuStripChanged As DataGridViewColumnEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::DataGridViewColumnEventHandler ^ ColumnContextMenuStripChanged;" />
      <MemberSignature Language="F#" Value="member this.ColumnContextMenuStripChanged : System.Windows.Forms.DataGridViewColumnEventHandler " Usage="member this.ColumnContextMenuStripChanged : System.Windows.Forms.DataGridViewColumnEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewColumnEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在列的 <see cref="P:System.Windows.Forms.DataGridViewColumn.ContextMenuStrip" /> 属性更改时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关如何处理事件的详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。

## Examples  
 下面的代码示例演示如何使用此成员。 在此示例中，事件处理程序报告事件的发生 <xref:System.Windows.Forms.DataGridView.ColumnContextMenuStripChanged> 。 此报表可帮助你了解何时发生事件，并可帮助你进行调试。 若要报告多个事件或频繁发生的事件，请考虑 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 将消息替换为多行或将其追加到多行 <xref:System.Windows.Forms.TextBox> 。  
  
 若要运行示例代码，请将其粘贴到包含名为的类型的实例的项目中 <xref:System.Windows.Forms.DataGridView> `DataGridView1` 。 然后，确保事件处理程序与事件相关联 <xref:System.Windows.Forms.DataGridView.ColumnContextMenuStripChanged> 。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#315](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#315)]
 [!code-vb[System.Windows.Forms.EventExamples#315](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#315)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="ColumnCount">
      <MemberSignature Language="C#" Value="public int ColumnCount { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ColumnCount" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.ColumnCount" />
      <MemberSignature Language="VB.NET" Value="Public Property ColumnCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ColumnCount { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.ColumnCount : int with get, set" Usage="System.Windows.Forms.DataGridView.ColumnCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(0)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(0)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:System.Windows.Forms.DataGridView" /> 中显示的列数。</summary>
        <value><see cref="T:System.Windows.Forms.DataGridView" /> 中显示的列数。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.DataGridView.ColumnCount%2A>将属性设置为0会从中删除所有列 <xref:System.Windows.Forms.DataGridView> 。  
  
 如果 <xref:System.Windows.Forms.DataGridView.ColumnCount%2A> 重置为小于当前值的值，则将从集合末尾删除列 <xref:System.Windows.Forms.DataGridView.Columns%2A> 。 如果将 <xref:System.Windows.Forms.DataGridView.ColumnCount%2A> 设置为大于当前值的值，则列将添加到集合的末尾 <xref:System.Windows.Forms.DataGridView.Columns%2A> 。  
  
 此属性可与属性一起使用 <xref:System.Windows.Forms.DataGridView.RowCount%2A> ，以创建一个简单 <xref:System.Windows.Forms.DataGridView> 的，用于显示和编辑文本。  
  
 有关如何处理事件的详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。

## Examples  
 下面的代码示例演示如何设置、、、、、、、、 <xref:System.Windows.Forms.DataGridView.ColumnHeadersDefaultCellStyle%2A> <xref:System.Windows.Forms.DataGridView.AutoSizeRowsMode%2A> <xref:System.Windows.Forms.DataGridView.ColumnHeadersBorderStyle%2A> <xref:System.Windows.Forms.DataGridView.CellBorderStyle%2A> <xref:System.Windows.Forms.DataGridView.GridColor%2A> <xref:System.Windows.Forms.DataGridView.BackgroundColor%2A> <xref:System.Windows.Forms.DataGridView.RowHeadersVisible%2A> <xref:System.Windows.Forms.DataGridView.SelectionMode%2A> <xref:System.Windows.Forms.DataGridView.ColumnCount%2A> 和 <xref:System.Windows.Forms.DataGridView.MultiSelect%2A> 属性。 此外，该代码示例还演示如何设置 <xref:System.Windows.Forms.DataGridViewColumn.Name%2A?displayProperty=nameWithType> 和 <xref:System.Windows.Forms.DataGridViewColumn.DefaultCellStyle%2A?displayProperty=nameWithType> 属性。 若要运行此示例，请将代码粘贴到包含名为的的窗体中 <xref:System.Windows.Forms.DataGridView> `dataGridView1` ，然后 `SetUpDataGridView` 从窗体的构造函数或 <xref:System.Windows.Forms.Form.Load> 事件处理程序调用方法。 确保所有事件都与事件处理程序相关联。  
  
 [!code-cpp[System.Windows.Forms.GridViewUnbound#5](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.GridViewUnbound/CPP/form1.cpp#5)]
 [!code-csharp[System.Windows.Forms.GridViewUnbound#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.GridViewUnbound/CS/form1.cs#5)]
 [!code-vb[System.Windows.Forms.GridViewUnbound#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.GridViewUnbound/VB/form1.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">当设置此属性时，指定的值小于 0。</exception>
        <exception cref="T:System.InvalidOperationException">当设置此属性时，已设置了 <see cref="P:System.Windows.Forms.DataGridView.DataSource" /> 属性。</exception>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="ColumnDataPropertyNameChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewColumnEventHandler ColumnDataPropertyNameChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewColumnEventHandler ColumnDataPropertyNameChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.ColumnDataPropertyNameChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ColumnDataPropertyNameChanged As DataGridViewColumnEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::DataGridViewColumnEventHandler ^ ColumnDataPropertyNameChanged;" />
      <MemberSignature Language="F#" Value="member this.ColumnDataPropertyNameChanged : System.Windows.Forms.DataGridViewColumnEventHandler " Usage="member this.ColumnDataPropertyNameChanged : System.Windows.Forms.DataGridViewColumnEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewColumnEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当列的 <see cref="P:System.Windows.Forms.DataGridViewColumn.DataPropertyName" /> 属性值更改时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例演示如何使用此成员。 在此示例中，事件处理程序报告事件的发生 <xref:System.Windows.Forms.DataGridView.ColumnDataPropertyNameChanged> 。 此报表可帮助你了解何时发生事件，并可帮助你进行调试。 若要报告多个事件或频繁发生的事件，请考虑 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 将消息替换为多行或将其追加到多行 <xref:System.Windows.Forms.TextBox> 。  
  
 若要运行示例代码，请将其粘贴到包含名为的类型的实例的项目中 <xref:System.Windows.Forms.DataGridView> `DataGridView1` 。 然后，确保事件处理程序与事件相关联 <xref:System.Windows.Forms.DataGridView.ColumnDataPropertyNameChanged> 。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#316](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#316)]
 [!code-vb[System.Windows.Forms.EventExamples#316](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#316)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="ColumnDefaultCellStyleChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewColumnEventHandler ColumnDefaultCellStyleChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewColumnEventHandler ColumnDefaultCellStyleChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.ColumnDefaultCellStyleChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ColumnDefaultCellStyleChanged As DataGridViewColumnEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::DataGridViewColumnEventHandler ^ ColumnDefaultCellStyleChanged;" />
      <MemberSignature Language="F#" Value="member this.ColumnDefaultCellStyleChanged : System.Windows.Forms.DataGridViewColumnEventHandler " Usage="member this.ColumnDefaultCellStyleChanged : System.Windows.Forms.DataGridViewColumnEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewColumnEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当列的 <see cref="P:System.Windows.Forms.DataGridViewBand.DefaultCellStyle" /> 属性值更改时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当某 <xref:System.Windows.Forms.DataGridViewCellStyle> 一列的属性返回的的任何属性 <xref:System.Windows.Forms.DataGridViewBand.DefaultCellStyle%2A> 设置为新值时，或者当 <xref:System.Windows.Forms.DataGridViewBand.DefaultCellStyle%2A> 某一列的属性设置为新 <xref:System.Windows.Forms.DataGridViewCellStyle> 的，且至少有一个属性值与上一个单元格样式对象不同时，将发生此事件。  
  
 有关如何处理事件的详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。

## Examples  
 下面的代码示例演示如何使用此成员。 在此示例中，事件处理程序报告事件的发生 <xref:System.Windows.Forms.DataGridView.ColumnDefaultCellStyleChanged> 。 此报表可帮助你了解何时发生事件，并可帮助你进行调试。 若要报告多个事件或频繁发生的事件，请考虑 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 将消息替换为多行或将其追加到多行 <xref:System.Windows.Forms.TextBox> 。  
  
 若要运行示例代码，请将其粘贴到包含名为的类型的实例的项目中 <xref:System.Windows.Forms.DataGridView> `DataGridView1` 。 然后，确保事件处理程序与事件相关联 <xref:System.Windows.Forms.DataGridView.ColumnDefaultCellStyleChanged> 。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#317](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#317)]
 [!code-vb[System.Windows.Forms.EventExamples#317](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#317)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DataGridViewCellStyle" />
        <related type="Article" href="/dotnet/framework/winforms/controls/cell-styles-in-the-windows-forms-datagridview-control">Windows 窗体 DataGridView 控件中的单元格样式</related>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="ColumnDisplayIndexChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewColumnEventHandler ColumnDisplayIndexChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewColumnEventHandler ColumnDisplayIndexChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.ColumnDisplayIndexChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ColumnDisplayIndexChanged As DataGridViewColumnEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::DataGridViewColumnEventHandler ^ ColumnDisplayIndexChanged;" />
      <MemberSignature Language="F#" Value="member this.ColumnDisplayIndexChanged : System.Windows.Forms.DataGridViewColumnEventHandler " Usage="member this.ColumnDisplayIndexChanged : System.Windows.Forms.DataGridViewColumnEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewColumnEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在列的 <see cref="P:System.Windows.Forms.DataGridViewColumn.DisplayIndex" /> 属性值更改时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关如何处理事件的详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。

## Examples  
 下面的代码示例演示如何使用此成员。 在此示例中，事件处理程序报告事件的发生 <xref:System.Windows.Forms.DataGridView.ColumnDisplayIndexChanged> 。 此报表可帮助你了解何时发生事件，并可帮助你进行调试。 若要报告多个事件或频繁发生的事件，请考虑 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 将消息替换为多行或将其追加到多行 <xref:System.Windows.Forms.TextBox> 。  
  
 若要运行示例代码，请将其粘贴到包含名为的类型的实例的项目中 <xref:System.Windows.Forms.DataGridView> `DataGridView1` 。 然后，确保事件处理程序与事件相关联 <xref:System.Windows.Forms.DataGridView.ColumnDisplayIndexChanged> 。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#318](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#318)]
 [!code-vb[System.Windows.Forms.EventExamples#318](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#318)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="ColumnDividerDoubleClick">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewColumnDividerDoubleClickEventHandler ColumnDividerDoubleClick;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewColumnDividerDoubleClickEventHandler ColumnDividerDoubleClick" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.ColumnDividerDoubleClick" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ColumnDividerDoubleClick As DataGridViewColumnDividerDoubleClickEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::DataGridViewColumnDividerDoubleClickEventHandler ^ ColumnDividerDoubleClick;" />
      <MemberSignature Language="F#" Value="member this.ColumnDividerDoubleClick : System.Windows.Forms.DataGridViewColumnDividerDoubleClickEventHandler " Usage="member this.ColumnDividerDoubleClick : System.Windows.Forms.DataGridViewColumnDividerDoubleClickEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewColumnDividerDoubleClickEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>用户双击两列之间的分隔符时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 可以使用此事件自定义用户双击列分隔符时发生的自动调整大小行为。 例如，你可以处理此事件以编程方式仅基于当前可见行中的内容来调整列的大小，以避免在处理大量行时对默认行为产生的性能影响。  
  
 "列" <xref:System.Windows.Forms.DataGridViewColumn.DividerWidth%2A> 属性不会扩展用户可以双击的区域。 如果通过使用此属性增加了分隔线的宽度，则当用户双击分隔符与相邻列之间的边界时发生此事件。  
  
 有关如何处理事件的详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。

## Examples  
 下面的代码示例演示如何使用此成员。 在此示例中，事件处理程序报告事件的发生 <xref:System.Windows.Forms.DataGridView.ColumnDividerDoubleClick> 。 此报表可帮助你了解何时发生事件，并可帮助你进行调试。 若要报告多个事件或频繁发生的事件，请考虑 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 将消息替换为多行或将其追加到多行 <xref:System.Windows.Forms.TextBox> 。  
  
 若要运行示例代码，请将其粘贴到包含名为的类型的实例的项目中 <xref:System.Windows.Forms.DataGridView> `DataGridView1` 。 然后，确保事件处理程序与事件相关联 <xref:System.Windows.Forms.DataGridView.ColumnDividerDoubleClick> 。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#319](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#319)]
 [!code-vb[System.Windows.Forms.EventExamples#319](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#319)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="ColumnDividerWidthChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewColumnEventHandler ColumnDividerWidthChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewColumnEventHandler ColumnDividerWidthChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.ColumnDividerWidthChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ColumnDividerWidthChanged As DataGridViewColumnEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::DataGridViewColumnEventHandler ^ ColumnDividerWidthChanged;" />
      <MemberSignature Language="F#" Value="member this.ColumnDividerWidthChanged : System.Windows.Forms.DataGridViewColumnEventHandler " Usage="member this.ColumnDividerWidthChanged : System.Windows.Forms.DataGridViewColumnEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewColumnEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当 <see cref="P:System.Windows.Forms.DataGridViewColumn.DividerWidth" /> 属性更改时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关如何处理事件的详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。

## Examples  
 下面的代码示例演示如何使用此成员。 在此示例中，事件处理程序报告事件的发生 <xref:System.Windows.Forms.DataGridView.ColumnDividerWidthChanged> 。 此报表可帮助你了解何时发生事件，并可帮助你进行调试。 若要报告多个事件或频繁发生的事件，请考虑 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 将消息替换为多行或将其追加到多行 <xref:System.Windows.Forms.TextBox> 。  
  
 若要运行示例代码，请将其粘贴到包含名为的类型的实例的项目中 <xref:System.Windows.Forms.DataGridView> `DataGridView1` 。 然后，确保事件处理程序与事件相关联 <xref:System.Windows.Forms.DataGridView.ColumnDividerWidthChanged> 。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#320](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#320)]
 [!code-vb[System.Windows.Forms.EventExamples#320](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#320)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="ColumnHeaderCellChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewColumnEventHandler ColumnHeaderCellChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewColumnEventHandler ColumnHeaderCellChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.ColumnHeaderCellChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ColumnHeaderCellChanged As DataGridViewColumnEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::DataGridViewColumnEventHandler ^ ColumnHeaderCellChanged;" />
      <MemberSignature Language="F#" Value="member this.ColumnHeaderCellChanged : System.Windows.Forms.DataGridViewColumnEventHandler " Usage="member this.ColumnHeaderCellChanged : System.Windows.Forms.DataGridViewColumnEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewColumnEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>列标题单元格的内容更改时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关如何处理事件的详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。

## Examples  
 下面的代码示例演示如何使用此成员。 在此示例中，事件处理程序报告事件的发生 <xref:System.Windows.Forms.DataGridView.ColumnHeaderCellChanged> 。 此报表可帮助你了解何时发生事件，并可帮助你进行调试。 若要报告多个事件或频繁发生的事件，请考虑 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 将消息替换为多行或将其追加到多行 <xref:System.Windows.Forms.TextBox> 。  
  
 若要运行示例代码，请将其粘贴到包含名为的类型的实例的项目中 <xref:System.Windows.Forms.DataGridView> `DataGridView1` 。 然后，确保事件处理程序与事件相关联 <xref:System.Windows.Forms.DataGridView.ColumnHeaderCellChanged> 。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#323](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#323)]
 [!code-vb[System.Windows.Forms.EventExamples#323](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#323)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="ColumnHeaderMouseClick">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewCellMouseEventHandler ColumnHeaderMouseClick;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewCellMouseEventHandler ColumnHeaderMouseClick" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.ColumnHeaderMouseClick" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ColumnHeaderMouseClick As DataGridViewCellMouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::DataGridViewCellMouseEventHandler ^ ColumnHeaderMouseClick;" />
      <MemberSignature Language="F#" Value="member this.ColumnHeaderMouseClick : System.Windows.Forms.DataGridViewCellMouseEventHandler " Usage="member this.ColumnHeaderMouseClick : System.Windows.Forms.DataGridViewCellMouseEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewCellMouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>用户单击列标题时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关如何处理事件的详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。

## Examples  
 当单击中的列标题时 <xref:System.Windows.Forms.DataGridView> ，默认行为是根据所单击的列对网格行进行排序，或者如果网格已经按被单击的列进行排序，则为反转排序顺序。 下面的代码示例演示如何使用此事件来执行编程排序，该排序模拟在 <xref:System.Windows.Forms.DataGridViewColumnHeaderCell> 默认行为已禁用时单击的默认行为。 在此示例中，将 <xref:System.Windows.Forms.DataGridView.SelectionMode%2A> 设置为 <xref:System.Windows.Forms.DataGridViewSelectionMode.ColumnHeaderSelect> ，因此单击 <xref:System.Windows.Forms.DataGridViewColumnHeaderCell> 选择列的内容。 为了使示例代码按预期运行，每次将数据加载到中时，都需要更改默认列标题单击行为 <xref:System.Windows.Forms.DataGridView> 。 添加 <xref:System.Windows.Forms.DataGridView.DataBindingComplete> 事件处理程序以提供更改默认行为的代码。 若要运行此示例，请将代码粘贴到包含命名的的窗体中， <xref:System.Windows.Forms.DataGridView> `dataGridView1` 并确保所有事件都与事件处理程序相关联。  
  
 [!code-csharp[System.Windows.Forms.DataGridViewMisc#160](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewMisc/CS/datagridviewmisc.cs#160)]
 [!code-vb[System.Windows.Forms.DataGridViewMisc#160](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewMisc/VB/datagridviewmisc.vb#160)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="ColumnHeaderMouseDoubleClick">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewCellMouseEventHandler ColumnHeaderMouseDoubleClick;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewCellMouseEventHandler ColumnHeaderMouseDoubleClick" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.ColumnHeaderMouseDoubleClick" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ColumnHeaderMouseDoubleClick As DataGridViewCellMouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::DataGridViewCellMouseEventHandler ^ ColumnHeaderMouseDoubleClick;" />
      <MemberSignature Language="F#" Value="member this.ColumnHeaderMouseDoubleClick : System.Windows.Forms.DataGridViewCellMouseEventHandler " Usage="member this.ColumnHeaderMouseDoubleClick : System.Windows.Forms.DataGridViewCellMouseEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewCellMouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>双击列标题时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关如何处理事件的详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。

## Examples  
 下面的代码示例演示如何使用此成员。 在此示例中，事件处理程序报告事件的发生 <xref:System.Windows.Forms.DataGridView.ColumnHeaderMouseDoubleClick> 。 此报表可帮助你了解何时发生事件，并可帮助你进行调试。 若要报告多个事件或频繁发生的事件，请考虑 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 将消息替换为多行或将其追加到多行 <xref:System.Windows.Forms.TextBox> 。  
  
 若要运行示例代码，请将其粘贴到包含名为的类型的实例的项目中 <xref:System.Windows.Forms.DataGridView> `DataGridView1` 。 然后，确保事件处理程序与事件相关联 <xref:System.Windows.Forms.DataGridView.ColumnHeaderMouseDoubleClick> 。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#322](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#322)]
 [!code-vb[System.Windows.Forms.EventExamples#322](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#322)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="ColumnHeadersBorderStyle">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataGridViewHeaderBorderStyle ColumnHeadersBorderStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.DataGridViewHeaderBorderStyle ColumnHeadersBorderStyle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.ColumnHeadersBorderStyle" />
      <MemberSignature Language="VB.NET" Value="Public Property ColumnHeadersBorderStyle As DataGridViewHeaderBorderStyle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::DataGridViewHeaderBorderStyle ColumnHeadersBorderStyle { System::Windows::Forms::DataGridViewHeaderBorderStyle get(); void set(System::Windows::Forms::DataGridViewHeaderBorderStyle value); };" />
      <MemberSignature Language="F#" Value="member this.ColumnHeadersBorderStyle : System.Windows.Forms.DataGridViewHeaderBorderStyle with get, set" Usage="System.Windows.Forms.DataGridView.ColumnHeadersBorderStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Browsable(true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(true)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewHeaderBorderStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取应用于列标题的边框样式。</summary>
        <value><see cref="T:System.Windows.Forms.DataGridViewHeaderBorderStyle" /> 值之一。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果 <xref:System.Windows.Forms.DataGridView.ColumnHeadersBorderStyle%2A> 将属性设置为以外的任何内容 <xref:System.Windows.Forms.DataGridViewHeaderBorderStyle.Single> ，则 <xref:System.Windows.Forms.DataGridView.GridColor%2A> 属性必须是系统颜色。  
  
 不能将此属性设置为 <xref:System.Windows.Forms.DataGridViewHeaderBorderStyle.Custom> 值，这是一个只读值，指示边框样式已通过使用属性进行自定义 <xref:System.Windows.Forms.DataGridView.AdvancedColumnHeadersBorderStyle%2A> 。  
  
> [!NOTE]
> 如果通过方法为应用程序启用了视觉样式 <xref:System.Windows.Forms.Application.EnableVisualStyles%2A?displayProperty=nameWithType> <xref:System.Windows.Forms.DataGridView.EnableHeadersVisualStyles%2A> ，并且属性为 `true` ，则使用当前主题绘制列标题。 在这种情况下，将 <xref:System.Windows.Forms.DataGridView.ColumnHeadersBorderStyle%2A> 忽略不应用主题的所有列标题的属性值 <xref:System.Windows.Forms.DataGridView.TopLeftHeaderCell%2A> 。

## Examples  
 下面的代码示例演示如何设置、、、、、、、、 <xref:System.Windows.Forms.DataGridView.ColumnHeadersDefaultCellStyle%2A> <xref:System.Windows.Forms.DataGridView.AutoSizeRowsMode%2A> <xref:System.Windows.Forms.DataGridView.ColumnHeadersBorderStyle%2A> <xref:System.Windows.Forms.DataGridView.CellBorderStyle%2A> <xref:System.Windows.Forms.DataGridView.GridColor%2A> <xref:System.Windows.Forms.DataGridView.BackgroundColor%2A> <xref:System.Windows.Forms.DataGridView.RowHeadersVisible%2A> <xref:System.Windows.Forms.DataGridView.SelectionMode%2A> <xref:System.Windows.Forms.DataGridView.ColumnCount%2A> 和 <xref:System.Windows.Forms.DataGridView.MultiSelect%2A> 属性。 此外，该代码示例还演示如何设置 <xref:System.Windows.Forms.DataGridViewColumn.Name%2A?displayProperty=nameWithType> 和 <xref:System.Windows.Forms.DataGridViewColumn.DefaultCellStyle%2A?displayProperty=nameWithType> 属性。 若要运行此示例，请将代码粘贴到包含名为的的窗体中 <xref:System.Windows.Forms.DataGridView> `dataGridView1` ，然后 `SetUpDataGridView` 从窗体的构造函数或 <xref:System.Windows.Forms.Form.Load> 事件处理程序调用方法。 确保所有事件都与事件处理程序相关联。  
  
 [!code-cpp[System.Windows.Forms.GridViewUnbound#5](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.GridViewUnbound/CPP/form1.cpp#5)]
 [!code-csharp[System.Windows.Forms.GridViewUnbound#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.GridViewUnbound/CS/form1.cs#5)]
 [!code-vb[System.Windows.Forms.GridViewUnbound#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.GridViewUnbound/VB/form1.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">当设置此属性时，指定的值不是有效的 <see cref="T:System.Windows.Forms.DataGridViewHeaderBorderStyle" /> 值。</exception>
        <exception cref="T:System.ArgumentException">当设置此属性时，指定的值为 <see cref="F:System.Windows.Forms.DataGridViewHeaderBorderStyle.Custom" />。</exception>
        <altmember cref="T:System.Windows.Forms.DataGridViewHeaderBorderStyle" />
        <altmember cref="P:System.Windows.Forms.DataGridView.RowHeadersBorderStyle" />
        <altmember cref="M:System.Windows.Forms.Application.EnableVisualStyles" />
        <altmember cref="P:System.Windows.Forms.DataGridView.EnableHeadersVisualStyles" />
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="ColumnHeadersBorderStyleChanged">
      <MemberSignature Language="C#" Value="public event EventHandler ColumnHeadersBorderStyleChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler ColumnHeadersBorderStyleChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.ColumnHeadersBorderStyleChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ColumnHeadersBorderStyleChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ ColumnHeadersBorderStyleChanged;" />
      <MemberSignature Language="F#" Value="member this.ColumnHeadersBorderStyleChanged : EventHandler " Usage="member this.ColumnHeadersBorderStyleChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当 <see cref="P:System.Windows.Forms.DataGridView.ColumnHeadersBorderStyle" /> 属性更改时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关如何处理事件的详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。

## Examples  
 下面的代码示例演示如何使用此成员。 在此示例中，事件处理程序报告事件的发生 <xref:System.Windows.Forms.DataGridView.ColumnHeadersBorderStyleChanged> 。 此报表可帮助你了解何时发生事件，并可帮助你进行调试。 若要报告多个事件或频繁发生的事件，请考虑 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 将消息替换为多行或将其追加到多行 <xref:System.Windows.Forms.TextBox> 。  
  
 若要运行示例代码，请将其粘贴到包含名为的类型的实例的项目中 <xref:System.Windows.Forms.DataGridView> `DataGridView1` 。 然后，确保事件处理程序与事件相关联 <xref:System.Windows.Forms.DataGridView.ColumnHeadersBorderStyleChanged> 。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#262](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#262)]
 [!code-vb[System.Windows.Forms.EventExamples#262](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#262)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="ColumnHeadersDefaultCellStyle">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataGridViewCellStyle ColumnHeadersDefaultCellStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.DataGridViewCellStyle ColumnHeadersDefaultCellStyle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.ColumnHeadersDefaultCellStyle" />
      <MemberSignature Language="VB.NET" Value="Public Property ColumnHeadersDefaultCellStyle As DataGridViewCellStyle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::DataGridViewCellStyle ^ ColumnHeadersDefaultCellStyle { System::Windows::Forms::DataGridViewCellStyle ^ get(); void set(System::Windows::Forms::DataGridViewCellStyle ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ColumnHeadersDefaultCellStyle : System.Windows.Forms.DataGridViewCellStyle with get, set" Usage="System.Windows.Forms.DataGridView.ColumnHeadersDefaultCellStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.AmbientValue(null)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.AmbientValue(null)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewCellStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置默认列标题样式。</summary>
        <value>一个 <see cref="T:System.Windows.Forms.DataGridViewCellStyle" />，表示默认列标题样式。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.DataGridViewCellStyle>此属性返回的默认值具有以下初始属性值：  
  
|`DataGridViewCellStyle` 属性|默认值|  
|--------------------------------------|-------------------|  
|<xref:System.Windows.Forms.DataGridViewCellStyle.BackColor%2A>|<xref:System.Drawing.SystemBrushes.Control%2A?displayProperty=nameWithType> 属性的值。|  
|<xref:System.Windows.Forms.DataGridViewCellStyle.ForeColor%2A>|<xref:System.Drawing.SystemBrushes.WindowText%2A?displayProperty=nameWithType> 属性的值。|  
|<xref:System.Windows.Forms.DataGridViewCellStyle.SelectionBackColor%2A>|<xref:System.Drawing.SystemBrushes.Highlight%2A?displayProperty=nameWithType> 属性的值。|  
|<xref:System.Windows.Forms.DataGridViewCellStyle.SelectionForeColor%2A>|<xref:System.Drawing.SystemBrushes.HighlightText%2A?displayProperty=nameWithType> 属性的值。|  
|<xref:System.Windows.Forms.DataGridViewCellStyle.Font%2A>|<xref:System.Windows.Forms.DataGridView.Font%2A> 属性的值。|  
|<xref:System.Windows.Forms.DataGridViewCellStyle.Alignment%2A>|<xref:System.Windows.Forms.DataGridViewContentAlignment.MiddleLeft?displayProperty=nameWithType>|  
|<xref:System.Windows.Forms.DataGridViewCellStyle.WrapMode%2A>|<xref:System.Windows.Forms.DataGridViewTriState.True?displayProperty=nameWithType>|  
  
 这些值自动覆盖通过属性设置的值 <xref:System.Windows.Forms.DataGridView.DefaultCellStyle%2A> 。 若要强制列标题继承这些 <xref:System.Windows.Forms.DataGridView.DefaultCellStyle%2A> 值，则必须将对象中的值设置 <xref:System.Windows.Forms.DataGridView.ColumnHeadersDefaultCellStyle%2A> 为为类指定的默认值 <xref:System.Windows.Forms.DataGridViewCellStyle> 。  
  
 有关单元样式继承的详细信息，请参阅 [Windows 窗体 DataGridView 控件中的单元格样式](/dotnet/framework/winforms/controls/cell-styles-in-the-windows-forms-datagridview-control)。  
  
 如果视觉样式已启用并且 <xref:System.Windows.Forms.DataGridView.EnableHeadersVisualStyles%2A> 设置为 `true` ，则除之外的所有标题单元 <xref:System.Windows.Forms.DataGridView.TopLeftHeaderCell%2A> 均使用当前主题进行绘制，并且这些 <xref:System.Windows.Forms.DataGridView.ColumnHeadersDefaultCellStyle%2A> 值将被忽略。

## Examples  
 下面的代码示例演示如何设置、、、、、、、、 <xref:System.Windows.Forms.DataGridView.ColumnHeadersDefaultCellStyle%2A> <xref:System.Windows.Forms.DataGridView.AutoSizeRowsMode%2A> <xref:System.Windows.Forms.DataGridView.ColumnHeadersBorderStyle%2A> <xref:System.Windows.Forms.DataGridView.CellBorderStyle%2A> <xref:System.Windows.Forms.DataGridView.GridColor%2A> <xref:System.Windows.Forms.DataGridView.BackgroundColor%2A> <xref:System.Windows.Forms.DataGridView.RowHeadersVisible%2A> <xref:System.Windows.Forms.DataGridView.SelectionMode%2A> <xref:System.Windows.Forms.DataGridView.ColumnCount%2A> 和 <xref:System.Windows.Forms.DataGridView.MultiSelect%2A> 属性。 此外，该代码示例还演示如何设置 <xref:System.Windows.Forms.DataGridViewColumn.Name%2A?displayProperty=nameWithType> 和 <xref:System.Windows.Forms.DataGridViewColumn.DefaultCellStyle%2A?displayProperty=nameWithType> 属性。 若要运行此示例，请将代码粘贴到包含名为的的窗体中 <xref:System.Windows.Forms.DataGridView> `dataGridView1` ，然后 `SetUpDataGridView` 从窗体的构造函数或 <xref:System.Windows.Forms.Form.Load> 事件处理程序调用方法。 确保所有事件都与事件处理程序相关联。  
  
 [!code-cpp[System.Windows.Forms.GridViewUnbound#5](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.GridViewUnbound/CPP/form1.cpp#5)]
 [!code-csharp[System.Windows.Forms.GridViewUnbound#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.GridViewUnbound/CS/form1.cs#5)]
 [!code-vb[System.Windows.Forms.GridViewUnbound#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.GridViewUnbound/VB/form1.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DataGridViewCellStyle" />
        <related type="Article" href="/dotnet/framework/winforms/controls/cell-styles-in-the-windows-forms-datagridview-control">Windows 窗体 DataGridView 控件中的单元格样式</related>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="ColumnHeadersDefaultCellStyleChanged">
      <MemberSignature Language="C#" Value="public event EventHandler ColumnHeadersDefaultCellStyleChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler ColumnHeadersDefaultCellStyleChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.ColumnHeadersDefaultCellStyleChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ColumnHeadersDefaultCellStyleChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ ColumnHeadersDefaultCellStyleChanged;" />
      <MemberSignature Language="F#" Value="member this.ColumnHeadersDefaultCellStyleChanged : EventHandler " Usage="member this.ColumnHeadersDefaultCellStyleChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当 <see cref="P:System.Windows.Forms.DataGridView.ColumnHeadersDefaultCellStyle" /> 属性的值更改时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当属性返回的的任何属性 <xref:System.Windows.Forms.DataGridViewCellStyle> <xref:System.Windows.Forms.DataGridView.ColumnHeadersDefaultCellStyle%2A> 设置为新值时，或者当 <xref:System.Windows.Forms.DataGridView.ColumnHeadersDefaultCellStyle%2A> 属性设置为新 <xref:System.Windows.Forms.DataGridViewCellStyle> 的，且至少有一个属性值与上一个单元格样式对象不同时，将发生此事件。

## Examples  
 下面的代码示例演示如何使用此成员。 在此示例中，事件处理程序报告事件的发生 <xref:System.Windows.Forms.DataGridView.ColumnHeadersDefaultCellStyleChanged> 。 此报表可帮助你了解何时发生事件，并可帮助你进行调试。 若要报告多个事件或频繁发生的事件，请考虑 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 将消息替换为多行或将其追加到多行 <xref:System.Windows.Forms.TextBox> 。  
  
 若要运行示例代码，请将其粘贴到包含名为的类型的实例的项目中 <xref:System.Windows.Forms.DataGridView> `DataGridView1` 。 然后，确保事件处理程序与事件相关联 <xref:System.Windows.Forms.DataGridView.ColumnHeadersDefaultCellStyleChanged> 。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#263](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#263)]
 [!code-vb[System.Windows.Forms.EventExamples#263](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#263)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DataGridViewCellStyle" />
        <related type="Article" href="/dotnet/framework/winforms/controls/cell-styles-in-the-windows-forms-datagridview-control">Windows 窗体 DataGridView 控件中的单元格样式</related>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="ColumnHeadersHeight">
      <MemberSignature Language="C#" Value="public int ColumnHeadersHeight { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ColumnHeadersHeight" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.ColumnHeadersHeight" />
      <MemberSignature Language="VB.NET" Value="Public Property ColumnHeadersHeight As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ColumnHeadersHeight { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.ColumnHeadersHeight : int with get, set" Usage="System.Windows.Forms.DataGridView.ColumnHeadersHeight" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Localizable(true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Localizable(true)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置列标题行的高度（以像素为单位）。</summary>
        <value>列标题行的高度（以像素为单位）。 默认值为 23。</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">当设置此属性时，指定的值小于 4 像素的最小高度或大于 32768 像素的最大高度。</exception>
      </Docs>
    </Member>
    <Member MemberName="ColumnHeadersHeightChanged">
      <MemberSignature Language="C#" Value="public event EventHandler ColumnHeadersHeightChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler ColumnHeadersHeightChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.ColumnHeadersHeightChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ColumnHeadersHeightChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ ColumnHeadersHeightChanged;" />
      <MemberSignature Language="F#" Value="member this.ColumnHeadersHeightChanged : EventHandler " Usage="member this.ColumnHeadersHeightChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当 <see cref="P:System.Windows.Forms.DataGridView.ColumnHeadersHeight" /> 属性的值更改时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关如何处理事件的详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。

## Examples  
 下面的代码示例演示如何使用此成员。 在此示例中，事件处理程序报告事件的发生 <xref:System.Windows.Forms.DataGridView.ColumnHeadersHeightChanged> 。 此报表可帮助你了解何时发生事件，并可帮助你进行调试。 若要报告多个事件或频繁发生的事件，请考虑 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 将消息替换为多行或将其追加到多行 <xref:System.Windows.Forms.TextBox> 。  
  
 若要运行示例代码，请将其粘贴到包含名为的类型的实例的项目中 <xref:System.Windows.Forms.DataGridView> `DataGridView1` 。 然后，确保事件处理程序与事件相关联 <xref:System.Windows.Forms.DataGridView.ColumnHeadersHeightChanged> 。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#264](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#264)]
 [!code-vb[System.Windows.Forms.EventExamples#264](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#264)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="ColumnHeadersHeightSizeMode">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataGridViewColumnHeadersHeightSizeMode ColumnHeadersHeightSizeMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.DataGridViewColumnHeadersHeightSizeMode ColumnHeadersHeightSizeMode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.ColumnHeadersHeightSizeMode" />
      <MemberSignature Language="VB.NET" Value="Public Property ColumnHeadersHeightSizeMode As DataGridViewColumnHeadersHeightSizeMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::DataGridViewColumnHeadersHeightSizeMode ColumnHeadersHeightSizeMode { System::Windows::Forms::DataGridViewColumnHeadersHeightSizeMode get(); void set(System::Windows::Forms::DataGridViewColumnHeadersHeightSizeMode value); };" />
      <MemberSignature Language="F#" Value="member this.ColumnHeadersHeightSizeMode : System.Windows.Forms.DataGridViewColumnHeadersHeightSizeMode with get, set" Usage="System.Windows.Forms.DataGridView.ColumnHeadersHeightSizeMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.RefreshProperties(System.ComponentModel.RefreshProperties.All)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.RefreshProperties(System.ComponentModel.RefreshProperties.All)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewColumnHeadersHeightSizeMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示是否可以调整列标题的高度，以及它是由用户调整还是根据标题的内容自动调整。</summary>
        <value>一个 <see cref="T:System.Windows.Forms.DataGridViewColumnHeadersHeightSizeMode" /> 值，指示可以在什么模式下调整列标题行的高度。 默认值为 <see cref="F:System.Windows.Forms.DataGridViewColumnHeadersHeightSizeMode.EnableResizing" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当此属性设置为时 <xref:System.Windows.Forms.DataGridViewColumnHeadersHeightSizeMode.AutoSize> ，不能由用户调整列标题的高度。  
  
 若要以编程方式调整列标题的高度，请使用 <xref:System.Windows.Forms.DataGridView.AutoResizeColumnHeadersHeight%2A> 方法或设置 <xref:System.Windows.Forms.DataGridView.ColumnHeadersHeight%2A> 属性。  
  
 若要设置行标题的大小调整模式，请使用 <xref:System.Windows.Forms.DataGridView.RowHeadersWidthSizeMode%2A> 属性。  
  
 当调整列标题的大小时，若要将单元格内容换行，则单元格的有效单元格样式的 <xref:System.Windows.Forms.DataGridViewCellStyle.WrapMode%2A> 属性值必须为 <xref:System.Windows.Forms.DataGridViewTriState.True> 。  
  
 有关标头大小的详细信息，请参阅 [Windows 窗体 DataGridView 控件中的调整大小选项](/dotnet/framework/winforms/controls/sizing-options-in-the-windows-forms-datagridview-control)。  
  
> [!NOTE]
> <xref:System.Windows.Forms.DataGridView>控件不支持双缓冲。 如果 <xref:System.Windows.Forms.Control.DoubleBuffered%2A> `true` 在派生控件中将设置为，则在对 <xref:System.Windows.Forms.DataGridView> 行、列或标题进行调整或对列重新排序时，用户不会收到视觉反馈。

## Examples  
 下面的代码示例演示如何在 <xref:System.Windows.Forms.DataGridView> 主要用于显示的控件中使用此属性。 在此示例中，控件的可视外观是通过多种方式自定义的，并且控件配置为具有有限的交互功能。 此示例是类概述中提供的一个更大示例的一部分 <xref:System.Windows.Forms.DataGridViewCellStyle> 。  
  
 [!code-csharp[System.Windows.Forms.DataGridViewStyleDemo#20](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewStyleDemo/CS/form1.cs#20)]
 [!code-vb[System.Windows.Forms.DataGridViewStyleDemo#20](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewStyleDemo/VB/form1.vb#20)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">当设置此属性时，指定的值不是有效的 <see cref="T:System.Windows.Forms.DataGridViewColumnHeadersHeightSizeMode" /> 值。</exception>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="ColumnHeadersHeightSizeModeChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewAutoSizeModeEventHandler ColumnHeadersHeightSizeModeChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewAutoSizeModeEventHandler ColumnHeadersHeightSizeModeChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.ColumnHeadersHeightSizeModeChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ColumnHeadersHeightSizeModeChanged As DataGridViewAutoSizeModeEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::DataGridViewAutoSizeModeEventHandler ^ ColumnHeadersHeightSizeModeChanged;" />
      <MemberSignature Language="F#" Value="member this.ColumnHeadersHeightSizeModeChanged : System.Windows.Forms.DataGridViewAutoSizeModeEventHandler " Usage="member this.ColumnHeadersHeightSizeModeChanged : System.Windows.Forms.DataGridViewAutoSizeModeEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewAutoSizeModeEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当 <see cref="P:System.Windows.Forms.DataGridView.ColumnHeadersHeightSizeMode" /> 属性的值更改时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关如何处理事件的详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。

## Examples  
 下面的代码示例演示如何使用此成员。 在此示例中，事件处理程序报告事件的发生 <xref:System.Windows.Forms.DataGridView.ColumnHeadersHeightSizeModeChanged> 。 此报表可帮助你了解何时发生事件，并可帮助你进行调试。 若要报告多个事件或频繁发生的事件，请考虑 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 将消息替换为多行或将其追加到多行 <xref:System.Windows.Forms.TextBox> 。  
  
 若要运行示例代码，请将其粘贴到包含名为的类型的实例的项目中 <xref:System.Windows.Forms.DataGridView> `DataGridView1` 。 然后，确保事件处理程序与事件相关联 <xref:System.Windows.Forms.DataGridView.ColumnHeadersHeightSizeModeChanged> 。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#265](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#265)]
 [!code-vb[System.Windows.Forms.EventExamples#265](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#265)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="ColumnHeadersVisible">
      <MemberSignature Language="C#" Value="public bool ColumnHeadersVisible { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ColumnHeadersVisible" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.ColumnHeadersVisible" />
      <MemberSignature Language="VB.NET" Value="Public Property ColumnHeadersVisible As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ColumnHeadersVisible { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ColumnHeadersVisible : bool with get, set" Usage="System.Windows.Forms.DataGridView.ColumnHeadersVisible" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(true)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示是否显示列标题行。</summary>
        <value>如果显示列标题，为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="true" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果 <xref:System.Windows.Forms.DataGridView.ColumnHeadersVisible%2A> 属性为 `false` ，则 <xref:System.Windows.Forms.DataGridViewColumn.Resizable%2A> `true` 仍可在用户界面中将属性设置为的列 (UI) ，方法是在要调整大小的列的右边框的任意位置单击鼠标光标。

## Examples  
 下面的代码示例填充未绑定的 <xref:System.Windows.Forms.DataGridView> 控件，并将 <xref:System.Windows.Forms.DataGridView.ColumnHeadersVisible%2A> 属性设置为， `true` 以确保显示列标题。  
  
 [!code-cpp[System.Windows.Forms.GridViewAutoSize#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.GridViewAutoSize/CPP/form1.cpp#2)]
 [!code-csharp[System.Windows.Forms.GridViewAutoSize#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.GridViewAutoSize/CS/form1.cs#2)]
 [!code-vb[System.Windows.Forms.GridViewAutoSize#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.GridViewAutoSize/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">当设置此属性时，指定的值为 <see langword="false" />，并且一个或多个列具有 <see cref="F:System.Windows.Forms.DataGridViewAutoSizeColumnMode.ColumnHeader" /> 的 <see cref="P:System.Windows.Forms.DataGridViewColumn.InheritedAutoSizeMode" /> 属性值。</exception>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="ColumnMinimumWidthChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewColumnEventHandler ColumnMinimumWidthChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewColumnEventHandler ColumnMinimumWidthChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.ColumnMinimumWidthChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ColumnMinimumWidthChanged As DataGridViewColumnEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::DataGridViewColumnEventHandler ^ ColumnMinimumWidthChanged;" />
      <MemberSignature Language="F#" Value="member this.ColumnMinimumWidthChanged : System.Windows.Forms.DataGridViewColumnEventHandler " Usage="member this.ColumnMinimumWidthChanged : System.Windows.Forms.DataGridViewColumnEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewColumnEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当列的 <see cref="P:System.Windows.Forms.DataGridViewColumn.MinimumWidth" /> 属性值更改时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关如何处理事件的详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。

## Examples  
 下面的代码示例演示如何使用此成员。 在此示例中，事件处理程序报告事件的发生 <xref:System.Windows.Forms.DataGridView.ColumnMinimumWidthChanged> 。 此报表可帮助你了解何时发生事件，并可帮助你进行调试。 若要报告多个事件或频繁发生的事件，请考虑 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 将消息替换为多行或将其追加到多行 <xref:System.Windows.Forms.TextBox> 。  
  
 若要运行示例代码，请将其粘贴到包含名为的类型的实例的项目中 <xref:System.Windows.Forms.DataGridView> `DataGridView1` 。 然后，确保事件处理程序与事件相关联 <xref:System.Windows.Forms.DataGridView.ColumnMinimumWidthChanged> 。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#324](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#324)]
 [!code-vb[System.Windows.Forms.EventExamples#324](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#324)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="ColumnNameChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewColumnEventHandler ColumnNameChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewColumnEventHandler ColumnNameChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.ColumnNameChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ColumnNameChanged As DataGridViewColumnEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::DataGridViewColumnEventHandler ^ ColumnNameChanged;" />
      <MemberSignature Language="F#" Value="member this.ColumnNameChanged : System.Windows.Forms.DataGridViewColumnEventHandler " Usage="member this.ColumnNameChanged : System.Windows.Forms.DataGridViewColumnEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewColumnEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当列的 <see cref="P:System.Windows.Forms.DataGridViewColumn.Name" /> 属性值更改时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关如何处理事件的详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。

## Examples  
 下面的代码示例演示如何使用此成员。 在此示例中，事件处理程序报告事件的发生 <xref:System.Windows.Forms.DataGridView.ColumnNameChanged> 。 此报表可帮助你了解何时发生事件，并可帮助你进行调试。 若要报告多个事件或频繁发生的事件，请考虑 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 将消息替换为多行或将其追加到多行 <xref:System.Windows.Forms.TextBox> 。  
  
 若要运行示例代码，请将其粘贴到包含名为的类型的实例的项目中 <xref:System.Windows.Forms.DataGridView> `DataGridView1` 。 然后，确保事件处理程序与事件相关联 <xref:System.Windows.Forms.DataGridView.ColumnNameChanged> 。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#325](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#325)]
 [!code-vb[System.Windows.Forms.EventExamples#325](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#325)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="ColumnRemoved">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewColumnEventHandler ColumnRemoved;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewColumnEventHandler ColumnRemoved" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.ColumnRemoved" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ColumnRemoved As DataGridViewColumnEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::DataGridViewColumnEventHandler ^ ColumnRemoved;" />
      <MemberSignature Language="F#" Value="member this.ColumnRemoved : System.Windows.Forms.DataGridViewColumnEventHandler " Usage="member this.ColumnRemoved : System.Windows.Forms.DataGridViewColumnEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewColumnEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>从控件中移除列时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关如何处理事件的详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。

## Examples  
 下面的代码示例演示如何使用此成员。 在此示例中，事件处理程序报告事件的发生 <xref:System.Windows.Forms.DataGridView.ColumnRemoved> 。 此报表可帮助你了解何时发生事件，并可帮助你进行调试。 若要报告多个事件或频繁发生的事件，请考虑 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 将消息替换为多行或将其追加到多行 <xref:System.Windows.Forms.TextBox> 。  
  
 若要运行示例代码，请将其粘贴到包含名为的类型的实例的项目中 <xref:System.Windows.Forms.DataGridView> `DataGridView1` 。 然后，确保事件处理程序与事件相关联 <xref:System.Windows.Forms.DataGridView.ColumnRemoved> 。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#326](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#326)]
 [!code-vb[System.Windows.Forms.EventExamples#326](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#326)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="Columns">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataGridViewColumnCollection Columns { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.DataGridViewColumnCollection Columns" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.Columns" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Columns As DataGridViewColumnCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::DataGridViewColumnCollection ^ Columns { System::Windows::Forms::DataGridViewColumnCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Columns : System.Windows.Forms.DataGridViewColumnCollection" Usage="System.Windows.Forms.DataGridView.Columns" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.ComponentModel.Editor("System.Windows.Forms.Design.DataGridViewColumnCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Editor("System.Windows.Forms.Design.DataGridViewColumnCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.MergableProperty(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.MergableProperty(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName Language="C#">[System.ComponentModel.Editor("System.Windows.Forms.Design.DataGridViewColumnCollectionEditor, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Editor("System.Windows.Forms.Design.DataGridViewColumnCollectionEditor, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewColumnCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个集合，它包含控件中的所有列。</summary>
        <value>一个 <see cref="T:System.Windows.Forms.DataGridViewColumnCollection" />，包含 <see cref="T:System.Windows.Forms.DataGridView" /> 控件中的所有列。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 通过使用 <xref:System.Windows.Forms.DataGridViewColumnCollection> 此属性返回的，您可以添加列、删除列并获取控件中包含的列的计数 <xref:System.Windows.Forms.DataGridView> 。 有关详细信息，请参阅 <xref:System.Windows.Forms.DataGridViewColumnCollection>。

## Examples  
 下面的代码示例演示如何创建未绑定的 <xref:System.Windows.Forms.DataGridView> ; 设置 <xref:System.Windows.Forms.DataGridView.ColumnHeadersVisible%2A> 、 <xref:System.Windows.Forms.DataGridView.ColumnHeadersDefaultCellStyle%2A> 和 <xref:System.Windows.Forms.DataGridView.ColumnCount%2A> 属性; 以及使用 <xref:System.Windows.Forms.DataGridView.Rows%2A> 和 <xref:System.Windows.Forms.DataGridView.Columns%2A> 属性。 它还演示了如何使用和方法的版本 <xref:System.Windows.Forms.DataGridView.AutoResizeColumnHeadersHeight%2A> <xref:System.Windows.Forms.DataGridView.AutoResizeRows%2A> 来正确调整列标题和行的大小。 若要运行此示例，请将以下代码粘贴到包含名为的和名为的按钮的窗体中 <xref:System.Windows.Forms.DataGridView> `dataGridView1` `Button1` ，然后 `InitializeDataGridView` 从窗体的构造函数或 <xref:System.Windows.Forms.Form.Load> 事件处理程序调用方法。 确保所有事件都与其事件处理程序连接。  
  
 [!code-cpp[System.Windows.Forms.GridViewAutoSize#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.GridViewAutoSize/CPP/form1.cpp#2)]
 [!code-csharp[System.Windows.Forms.GridViewAutoSize#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.GridViewAutoSize/CS/form1.cs#2)]
 [!code-vb[System.Windows.Forms.GridViewAutoSize#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.GridViewAutoSize/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DataGridViewColumnCollection" />
        <altmember cref="T:System.Windows.Forms.DataGridViewColumn" />
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="ColumnSortModeChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewColumnEventHandler ColumnSortModeChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewColumnEventHandler ColumnSortModeChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.ColumnSortModeChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ColumnSortModeChanged As DataGridViewColumnEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::DataGridViewColumnEventHandler ^ ColumnSortModeChanged;" />
      <MemberSignature Language="F#" Value="member this.ColumnSortModeChanged : System.Windows.Forms.DataGridViewColumnEventHandler " Usage="member this.ColumnSortModeChanged : System.Windows.Forms.DataGridViewColumnEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewColumnEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当列的 <see cref="P:System.Windows.Forms.DataGridViewColumn.SortMode" /> 属性值更改时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关如何处理事件的详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。

## Examples  
 下面的代码示例演示如何使用此成员。 在此示例中，事件处理程序报告事件的发生 <xref:System.Windows.Forms.DataGridView.ColumnSortModeChanged> 。 此报表可帮助你了解何时发生事件，并可帮助你进行调试。 若要报告多个事件或频繁发生的事件，请考虑 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 将消息替换为多行或将其追加到多行 <xref:System.Windows.Forms.TextBox> 。  
  
 若要运行示例代码，请将其粘贴到包含名为的类型的实例的项目中 <xref:System.Windows.Forms.DataGridView> `DataGridView1` 。 然后，确保事件处理程序与事件相关联 <xref:System.Windows.Forms.DataGridView.ColumnSortModeChanged> 。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#327](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#327)]
 [!code-vb[System.Windows.Forms.EventExamples#327](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#327)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="ColumnStateChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewColumnStateChangedEventHandler ColumnStateChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewColumnStateChangedEventHandler ColumnStateChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.ColumnStateChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ColumnStateChanged As DataGridViewColumnStateChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::DataGridViewColumnStateChangedEventHandler ^ ColumnStateChanged;" />
      <MemberSignature Language="F#" Value="member this.ColumnStateChanged : System.Windows.Forms.DataGridViewColumnStateChangedEventHandler " Usage="member this.ColumnStateChanged : System.Windows.Forms.DataGridViewColumnStateChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewColumnStateChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>列状态更改(例如获得焦点或失去焦点)时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当控件中的以下某一列属性的值发生更改时，将引发此事件 <xref:System.Windows.Forms.DataGridViewColumn> ：  
  
-   <xref:System.Windows.Forms.DataGridViewBand.Displayed%2A> 
  
-   <xref:System.Windows.Forms.DataGridViewColumn.Frozen%2A> 
  
-   <xref:System.Windows.Forms.DataGridViewColumn.ReadOnly%2A> 
  
-   <xref:System.Windows.Forms.DataGridViewColumn.Resizable%2A> 
  
-   <xref:System.Windows.Forms.DataGridViewBand.Selected%2A> 
  
-   <xref:System.Windows.Forms.DataGridViewColumn.Visible%2A> 
  
 有关如何处理事件的详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。

## Examples  
 下面的代码示例演示如何使用此成员。 在此示例中，事件处理程序报告事件的发生 <xref:System.Windows.Forms.DataGridView.ColumnStateChanged> 。 此报表可帮助你了解何时发生事件，并可帮助你进行调试。 若要报告多个事件或频繁发生的事件，请考虑 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 将消息替换为多行或将其追加到多行 <xref:System.Windows.Forms.TextBox> 。  
  
 若要运行示例代码，请将其粘贴到包含名为的类型的实例的项目中 <xref:System.Windows.Forms.DataGridView> `DataGridView1` 。 然后，确保事件处理程序与事件相关联 <xref:System.Windows.Forms.DataGridView.ColumnStateChanged> 。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#328](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#328)]
 [!code-vb[System.Windows.Forms.EventExamples#328](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#328)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DataGridViewColumnStateChangedEventHandler" />
        <altmember cref="T:System.Windows.Forms.DataGridViewColumnStateChangedEventArgs" />
        <altmember cref="T:System.Windows.Forms.DataGridViewColumn" />
        <altmember cref="M:System.Windows.Forms.DataGridView.OnColumnStateChanged(System.Windows.Forms.DataGridViewColumnStateChangedEventArgs)" />
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="ColumnToolTipTextChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewColumnEventHandler ColumnToolTipTextChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewColumnEventHandler ColumnToolTipTextChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.ColumnToolTipTextChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ColumnToolTipTextChanged As DataGridViewColumnEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::DataGridViewColumnEventHandler ^ ColumnToolTipTextChanged;" />
      <MemberSignature Language="F#" Value="member this.ColumnToolTipTextChanged : System.Windows.Forms.DataGridViewColumnEventHandler " Usage="member this.ColumnToolTipTextChanged : System.Windows.Forms.DataGridViewColumnEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewColumnEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在 <see cref="P:System.Windows.Forms.DataGridViewColumn.ToolTipText" /> 中某一列的 <see cref="T:System.Windows.Forms.DataGridView" /> 属性值更改时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关如何处理事件的详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。

## Examples  
 下面的代码示例演示如何使用此成员。 在此示例中，事件处理程序报告事件的发生 <xref:System.Windows.Forms.DataGridView.ColumnToolTipTextChanged> 。 此报表可帮助你了解何时发生事件，并可帮助你进行调试。 若要报告多个事件或频繁发生的事件，请考虑 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 将消息替换为多行或将其追加到多行 <xref:System.Windows.Forms.TextBox> 。  
  
 若要运行示例代码，请将其粘贴到包含名为的类型的实例的项目中 <xref:System.Windows.Forms.DataGridView> `DataGridView1` 。 然后，确保事件处理程序与事件相关联 <xref:System.Windows.Forms.DataGridView.ColumnToolTipTextChanged> 。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#329](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#329)]
 [!code-vb[System.Windows.Forms.EventExamples#329](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#329)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="ColumnWidthChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewColumnEventHandler ColumnWidthChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewColumnEventHandler ColumnWidthChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.ColumnWidthChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ColumnWidthChanged As DataGridViewColumnEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::DataGridViewColumnEventHandler ^ ColumnWidthChanged;" />
      <MemberSignature Language="F#" Value="member this.ColumnWidthChanged : System.Windows.Forms.DataGridViewColumnEventHandler " Usage="member this.ColumnWidthChanged : System.Windows.Forms.DataGridViewColumnEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewColumnEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当列的 <see cref="P:System.Windows.Forms.DataGridViewColumn.Width" /> 属性值更改时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关如何处理事件的详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。

## Examples  
 下面的代码示例演示如何使用此事件。 此示例摘自 [如何：自定义 Windows 窗体 DataGridView 控件中行的外观](/dotnet/framework/winforms/controls/customize-the-appearance-of-rows-in-the-datagrid)的更大示例的一部分。  
  
 [!code-csharp[System.Windows.Forms.DataGridViewRowPainting#18](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewRowPainting/CS/datagridviewrowpainting.cs#18)]
 [!code-vb[System.Windows.Forms.DataGridViewRowPainting#18](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewRowPainting/VB/datagridviewrowpainting.vb#18)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="CommitEdit">
      <MemberSignature Language="C#" Value="public bool CommitEdit (System.Windows.Forms.DataGridViewDataErrorContexts context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CommitEdit(valuetype System.Windows.Forms.DataGridViewDataErrorContexts context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.CommitEdit(System.Windows.Forms.DataGridViewDataErrorContexts)" />
      <MemberSignature Language="VB.NET" Value="Public Function CommitEdit (context As DataGridViewDataErrorContexts) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CommitEdit(System::Windows::Forms::DataGridViewDataErrorContexts context);" />
      <MemberSignature Language="F#" Value="member this.CommitEdit : System.Windows.Forms.DataGridViewDataErrorContexts -&gt; bool" Usage="dataGridView.CommitEdit context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Windows.Forms.DataGridViewDataErrorContexts" />
      </Parameters>
      <Docs>
        <param name="context"><see cref="T:System.Windows.Forms.DataGridViewDataErrorContexts" /> 值的按位组合，指定可能出错的上下文。</param>
        <summary>将当前单元格中的更改提交到数据缓存，但不结束编辑模式。</summary>
        <returns>如果更改已提交，为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法尝试将格式的、用户指定的值转换为基础单元数据类型。 为此，它将引发 <xref:System.Windows.Forms.DataGridView.CellParsing> 事件，您可以处理该事件以自定义类型转换。 否则，将使用默认类型转换器。 如果 <xref:System.Windows.Forms.DataGridView.DataError> 未处理事件来防止事件发生，转换错误可能会导致异常。 如果值已成功转换，则将其提交到数据存储，并 <xref:System.Windows.Forms.DataGridView.CellValuePushed> 在 <xref:System.Windows.Forms.DataGridView.VirtualMode%2A> 属性值为时为非数据绑定单元引发事件 `true` 。 如果值已成功提交，则 <xref:System.Windows.Forms.DataGridView.CellValueChanged> 会发生该事件。

## Examples  
 下面的代码示例在 <xref:System.Windows.Forms.DataGridView.CommitEdit%2A> <xref:System.Windows.Forms.DataGridView.CurrentCellDirtyStateChanged> 事件处理程序中调用方法来引发 <xref:System.Windows.Forms.DataGridView.CellValueChanged> 事件。 此代码示例摘自 [如何：禁用 Windows 窗体 DataGridView 控件的按钮列](/dotnet/framework/winforms/controls/disable-buttons-in-a-button-column-in-the-datagrid)中的按钮中提供的一个更大的示例。  
  
 [!code-csharp[System.Windows.Forms.DataGridView.DisabledButtons#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridView.DisabledButtons/CS/form1.cs#5)]
 [!code-vb[System.Windows.Forms.DataGridView.DisabledButtons#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridView.DisabledButtons/VB/form1.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">无法提交单元格值，且没有 <see cref="E:System.Windows.Forms.DataGridView.DataError" /> 事件的处理程序或处理程序已将 <see cref="P:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException" /> 属性设置为 <see langword="true" />。</exception>
        <altmember cref="T:System.Windows.Forms.DataGridViewDataErrorContexts" />
        <altmember cref="E:System.Windows.Forms.DataGridView.CellParsing" />
        <altmember cref="E:System.Windows.Forms.DataGridView.DataError" />
        <altmember cref="E:System.Windows.Forms.DataGridView.CellValuePushed" />
        <altmember cref="P:System.Windows.Forms.DataGridView.VirtualMode" />
        <altmember cref="E:System.Windows.Forms.DataGridView.CellValueChanged" />
        <altmember cref="Overload:System.Windows.Forms.DataGridView.EndEdit" />
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="CreateAccessibilityInstance">
      <MemberSignature Language="C#" Value="protected override System.Windows.Forms.AccessibleObject CreateAccessibilityInstance ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Forms.AccessibleObject CreateAccessibilityInstance() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.CreateAccessibilityInstance" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CreateAccessibilityInstance () As AccessibleObject" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Forms::AccessibleObject ^ CreateAccessibilityInstance();" />
      <MemberSignature Language="F#" Value="override this.CreateAccessibilityInstance : unit -&gt; System.Windows.Forms.AccessibleObject" Usage="dataGridView.CreateAccessibilityInstance " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.AccessibleObject</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>为 <see cref="T:System.Windows.Forms.DataGridView" /> 创建一个新的可访问对象。</summary>
        <returns><see cref="T:System.Windows.Forms.DataGridView.DataGridViewAccessibleObject" /> 的新 <see cref="T:System.Windows.Forms.DataGridView" />。</returns>
        <remarks>To be added.</remarks>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="CreateColumnsInstance">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.Forms.DataGridViewColumnCollection CreateColumnsInstance ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Windows.Forms.DataGridViewColumnCollection CreateColumnsInstance() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.CreateColumnsInstance" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function CreateColumnsInstance () As DataGridViewColumnCollection" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Windows::Forms::DataGridViewColumnCollection ^ CreateColumnsInstance();" />
      <MemberSignature Language="F#" Value="abstract member CreateColumnsInstance : unit -&gt; System.Windows.Forms.DataGridViewColumnCollection&#xA;override this.CreateColumnsInstance : unit -&gt; System.Windows.Forms.DataGridViewColumnCollection" Usage="dataGridView.CreateColumnsInstance " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewColumnCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>创建并返回一个新的 <see cref="T:System.Windows.Forms.DataGridViewColumnCollection" />。</summary>
        <returns>一个空 <see cref="T:System.Windows.Forms.DataGridViewColumnCollection" />。</returns>
        <remarks>To be added.</remarks>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="CreateControlsInstance">
      <MemberSignature Language="C#" Value="protected override System.Windows.Forms.Control.ControlCollection CreateControlsInstance ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Forms.Control/ControlCollection CreateControlsInstance() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.CreateControlsInstance" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CreateControlsInstance () As Control.ControlCollection" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Forms::Control::ControlCollection ^ CreateControlsInstance();" />
      <MemberSignature Language="F#" Value="override this.CreateControlsInstance : unit -&gt; System.Windows.Forms.Control.ControlCollection" Usage="dataGridView.CreateControlsInstance " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Control+ControlCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>创建并返回一个新的 <see cref="T:System.Windows.Forms.Control.ControlCollection" />，该集合可以强制转换为 <see cref="T:System.Windows.Forms.DataGridView.DataGridViewControlCollection" /> 类型。</summary>
        <returns>一个空 <see cref="T:System.Windows.Forms.Control.ControlCollection" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法由 <xref:System.Windows.Forms.Control.Controls%2A> 属性调用来初始化其值。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="CreateRowsInstance">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.Forms.DataGridViewRowCollection CreateRowsInstance ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Windows.Forms.DataGridViewRowCollection CreateRowsInstance() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.CreateRowsInstance" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function CreateRowsInstance () As DataGridViewRowCollection" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Windows::Forms::DataGridViewRowCollection ^ CreateRowsInstance();" />
      <MemberSignature Language="F#" Value="abstract member CreateRowsInstance : unit -&gt; System.Windows.Forms.DataGridViewRowCollection&#xA;override this.CreateRowsInstance : unit -&gt; System.Windows.Forms.DataGridViewRowCollection" Usage="dataGridView.CreateRowsInstance " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewRowCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>创建并返回一个新的 <see cref="T:System.Windows.Forms.DataGridViewRowCollection" />。</summary>
        <returns>一个空 <see cref="T:System.Windows.Forms.DataGridViewRowCollection" />。</returns>
        <remarks>To be added.</remarks>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="CurrentCell">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataGridViewCell CurrentCell { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.DataGridViewCell CurrentCell" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.CurrentCell" />
      <MemberSignature Language="VB.NET" Value="Public Property CurrentCell As DataGridViewCell" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::DataGridViewCell ^ CurrentCell { System::Windows::Forms::DataGridViewCell ^ get(); void set(System::Windows::Forms::DataGridViewCell ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CurrentCell : System.Windows.Forms.DataGridViewCell with get, set" Usage="System.Windows.Forms.DataGridView.CurrentCell" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewCell</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置当前处于活动状态的单元格。</summary>
        <value>表示当前单元格的 <see cref="T:System.Windows.Forms.DataGridViewCell" />，如果没有当前单元格，则为 <see langword="null" />。 默认值是第一列中的第一个单元格，如果控件中没有单元格，则为 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 将单元格设置为当前单元格时，它将滚动到视图（如果当前未显示）。 当前单元不能是标题单元、禁用的单元格或隐藏的行或列中的单元。  
  
 您可以将此属性设置为 `null` 以暂时删除聚焦框，但当控件接收焦点并且此属性的值为时 `null` ，它会自动设置为属性的值 <xref:System.Windows.Forms.DataGridView.FirstDisplayedCell%2A> 。  
  
 当你更改此属性的值时，该 <xref:System.Windows.Forms.DataGridView.SelectionChanged> 事件将在事件之前发生 <xref:System.Windows.Forms.DataGridView.CurrentCellChanged> 。 此时 <xref:System.Windows.Forms.DataGridView.SelectionChanged> 访问属性的任何事件处理程序 <xref:System.Windows.Forms.DataGridView.CurrentCell%2A> 都将获得其以前的值。  
  
 将绑定 <xref:System.Windows.Forms.DataGridView> 到外部数据源时，此属性会重置为其默认值。

## Examples  
 下面的代码示例演示了如何通过将 <xref:System.Windows.Forms.DataGridView.FirstDisplayedCell%2A> 属性设置为通过属性检索的单元格，以确保当前单元格在排序后可见 <xref:System.Windows.Forms.DataGridView.CurrentCell%2A> 。 此代码仅适用于未绑定的 <xref:System.Windows.Forms.DataGridView> 控件。 <xref:System.Windows.Forms.DataGridView>当控件绑定到外部数据源时，当前单元格不会在排序时自动保留。  
  
 若要运行此示例，请将以下代码粘贴到包含名为的的窗体中 <xref:System.Windows.Forms.DataGridView> `dataGridView1` 。 在 c # 中，还必须将 <xref:System.Windows.Forms.DataGridView.Sorted> 事件连接到事件处理程序。  
  
 [!code-csharp[System.Windows.Forms.DataGridViewMisc#150](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewMisc/CS/datagridviewmisc.cs#150)]
 [!code-vb[System.Windows.Forms.DataGridViewMisc#150](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewMisc/VB/datagridviewmisc.vb#150)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">不能设置此属性的值，因为不能提交或取消对当前单元格所做的更改。  
  
- 或 - 
设置此属性时，指定的单元格在隐藏的行或列中。  
  
仅当 <see cref="T:System.Windows.Forms.DataGridView" /> 绑定到 <see cref="P:System.Windows.Forms.DataGridView.DataSource" /> 时，才允许重入调用。 对基础数据进行更改将导致重入调用。</exception>
        <exception cref="T:System.ArgumentException">设置此属性时，指定的单元格不在 <see cref="T:System.Windows.Forms.DataGridView" /> 中。</exception>
        <altmember cref="P:System.Windows.Forms.DataGridView.CurrentRow" />
        <altmember cref="E:System.Windows.Forms.DataGridView.SelectionChanged" />
        <altmember cref="E:System.Windows.Forms.DataGridView.CurrentCellChanged" />
        <altmember cref="P:System.Windows.Forms.DataGridView.FirstDisplayedCell" />
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
        <related type="Article" href="/dotnet/framework/winforms/controls/get-and-set-the-current-cell-wf-datagridview-control">如何：获取和设置 Windows 窗体 DataGridView 控件中的当前单元格</related>
      </Docs>
    </Member>
    <Member MemberName="CurrentCellAddress">
      <MemberSignature Language="C#" Value="public System.Drawing.Point CurrentCellAddress { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Point CurrentCellAddress" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.CurrentCellAddress" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CurrentCellAddress As Point" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Point CurrentCellAddress { System::Drawing::Point get(); };" />
      <MemberSignature Language="F#" Value="member this.CurrentCellAddress : System.Drawing.Point" Usage="System.Windows.Forms.DataGridView.CurrentCellAddress" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Point</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取当前处于活动状态的单元格的行索引和列索引。</summary>
        <value>一个 <see cref="T:System.Drawing.Point" />，表示当前处于活动状态的单元格的行索引和列索引。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用此属性可以确定当前单元格的行和列，而无需直接访问该单元。 这有助于避免取消共享共享行。 有关行共享的详细信息，请参阅 [缩放 Windows 窗体 DataGridView 控件的最佳做法](/dotnet/framework/winforms/controls/best-practices-for-scaling-the-windows-forms-datagridview-control)。

## Examples  
 下面的代码示例演示如何 <xref:System.Windows.Forms.DataGridView.CurrentCellAddress%2A> 在行绘制方案中使用属性。 在此示例中，此属性用于存储当前单元格的行索引。 当用户将当前单元格更改为其他行时，将强制该行自行重绘。  
  
 此代码是 [如何：自定义 Windows 窗体 DataGridView 控件中的行的外观](/dotnet/framework/winforms/controls/customize-the-appearance-of-rows-in-the-datagrid)的更大示例的一部分。  
  
 [!code-csharp[System.Windows.Forms.DataGridViewRowPainting#19](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewRowPainting/CS/datagridviewrowpainting.cs#19)]
 [!code-vb[System.Windows.Forms.DataGridViewRowPainting#19](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewRowPainting/VB/datagridviewrowpainting.vb#19)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="CurrentCellChanged">
      <MemberSignature Language="C#" Value="public event EventHandler CurrentCellChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler CurrentCellChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.CurrentCellChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event CurrentCellChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ CurrentCellChanged;" />
      <MemberSignature Language="F#" Value="member this.CurrentCellChanged : EventHandler " Usage="member this.CurrentCellChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当 <see cref="P:System.Windows.Forms.DataGridView.CurrentCell" /> 属性更改时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关如何处理事件的详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。

## Examples  
 下面的代码示例演示如何使用此事件。 此示例摘自 [如何：自定义 Windows 窗体 DataGridView 控件中行的外观](/dotnet/framework/winforms/controls/customize-the-appearance-of-rows-in-the-datagrid)的更大示例的一部分。  
  
 [!code-csharp[System.Windows.Forms.DataGridViewRowPainting#19](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewRowPainting/CS/datagridviewrowpainting.cs#19)]
 [!code-vb[System.Windows.Forms.DataGridViewRowPainting#19](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewRowPainting/VB/datagridviewrowpainting.vb#19)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="CurrentCellDirtyStateChanged">
      <MemberSignature Language="C#" Value="public event EventHandler CurrentCellDirtyStateChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler CurrentCellDirtyStateChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.CurrentCellDirtyStateChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event CurrentCellDirtyStateChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ CurrentCellDirtyStateChanged;" />
      <MemberSignature Language="F#" Value="member this.CurrentCellDirtyStateChanged : EventHandler " Usage="member this.CurrentCellDirtyStateChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>单元格状态因其内容更改而更改时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果单元格的内容已更改但尚未保存更改，则将其标记为已修改。  
  
 此事件通常在以下情况下发生：已编辑单元格，但尚未将更改提交到数据缓存，或者当取消编辑操作时。  
  
 有关如何处理事件的详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。

## Examples  
 下面的代码示例演示如何处理 <xref:System.Windows.Forms.DataGridView.CurrentCellDirtyStateChanged> 事件。 在此示例中，事件处理程序调用 <xref:System.Windows.Forms.DataGridView.CommitEdit%2A> 方法来引发 <xref:System.Windows.Forms.DataGridView.CellValueChanged> 事件，并确定的当前值 <xref:System.Windows.Forms.DataGridViewCheckBoxCell> 。 此代码示例摘自 [如何：禁用 Windows 窗体 DataGridView 控件的按钮列](/dotnet/framework/winforms/controls/disable-buttons-in-a-button-column-in-the-datagrid)中的按钮中提供的一个更大的示例。  
  
 [!code-csharp[System.Windows.Forms.DataGridView.DisabledButtons#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridView.DisabledButtons/CS/form1.cs#5)]
 [!code-vb[System.Windows.Forms.DataGridView.DisabledButtons#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridView.DisabledButtons/VB/form1.vb#5)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="CurrentRow">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataGridViewRow CurrentRow { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.DataGridViewRow CurrentRow" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.CurrentRow" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CurrentRow As DataGridViewRow" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::DataGridViewRow ^ CurrentRow { System::Windows::Forms::DataGridViewRow ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CurrentRow : System.Windows.Forms.DataGridViewRow" Usage="System.Windows.Forms.DataGridView.CurrentRow" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewRow</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取包含当前单元格的行。</summary>
        <value>表示当前单元格所在的行的 <see cref="T:System.Windows.Forms.DataGridViewRow" />，如果没有当前单元格，则为 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要更改当前行，必须将属性设置 <xref:System.Windows.Forms.DataGridView.CurrentCell%2A> 为所需行中的单元格。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.DataGridView.CurrentCell" />
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="DataBindingComplete">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewBindingCompleteEventHandler DataBindingComplete;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewBindingCompleteEventHandler DataBindingComplete" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.DataBindingComplete" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DataBindingComplete As DataGridViewBindingCompleteEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::DataGridViewBindingCompleteEventHandler ^ DataBindingComplete;" />
      <MemberSignature Language="F#" Value="member this.DataBindingComplete : System.Windows.Forms.DataGridViewBindingCompleteEventHandler " Usage="member this.DataBindingComplete : System.Windows.Forms.DataGridViewBindingCompleteEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewBindingCompleteEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在数据绑定操作完成之后发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当数据源的内容更改或 <xref:System.Windows.Forms.DataGridView.DataSource%2A> 、或属性的值发生更改时，将引发此事件 <xref:System.Windows.Forms.DataGridView.DataMember%2A> <xref:System.Windows.Forms.Control.BindingContext%2A> 。  
  
 此事件的处理非常有用，例如，可以基于内容更新以编程方式调整行和列的大小。 有关详细信息，请参阅 [Windows 窗体 DataGridView 控件中的调整大小选项](/dotnet/framework/winforms/controls/sizing-options-in-the-windows-forms-datagridview-control)。  
  
 有关如何处理事件的详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。

## Examples  
 下面的代码示例演示如何使用此事件。 此示例是类概述中提供的一个更大示例的一部分 <xref:System.Windows.Forms.DataGridViewRowContextMenuStripNeededEventArgs> 。  
  
 [!code-csharp[System.Windows.Forms.DataGridView_NeededEvents#05](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridView_NeededEvents/CS/Form1.cs#05)]
 [!code-vb[System.Windows.Forms.DataGridView_NeededEvents#05](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridView_NeededEvents/VB/Form1.vb#05)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DataGridViewBindingCompleteEventHandler" />
        <altmember cref="T:System.Windows.Forms.DataGridViewBindingCompleteEventArgs" />
        <altmember cref="P:System.Windows.Forms.DataGridView.DataSource" />
        <altmember cref="P:System.Windows.Forms.DataGridView.DataMember" />
        <altmember cref="P:System.Windows.Forms.Control.BindingContext" />
        <altmember cref="E:System.Windows.Forms.CurrencyManager.ListChanged" />
        <altmember cref="M:System.Windows.Forms.DataGridView.OnDataBindingComplete(System.Windows.Forms.DataGridViewBindingCompleteEventArgs)" />
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="DataError">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewDataErrorEventHandler DataError;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewDataErrorEventHandler DataError" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.DataError" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DataError As DataGridViewDataErrorEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::DataGridViewDataErrorEventHandler ^ DataError;" />
      <MemberSignature Language="F#" Value="member this.DataError : System.Windows.Forms.DataGridViewDataErrorEventHandler " Usage="member this.DataError : System.Windows.Forms.DataGridViewDataErrorEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewDataErrorEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在以下情况下发生：当外部数据分析或验证操作引发异常时，或者当尝试将数据提交到数据源失败时。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.DataGridView.DataError>事件使你可以处理数据处理操作期间由控件调用的代码中引发的异常。  
  
 有关如何处理事件的详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
> [!NOTE]
> <xref:System.Windows.Forms.DataGridViewCellCancelEventArgs.ColumnIndex%2A> <xref:System.Windows.Forms.DataGridViewCellCancelEventArgs.RowIndex%2A> <xref:System.Windows.Forms.DataGridViewDataErrorEventArgs> 与此事件关联的对象的和属性通常指示发生了数据错误的单元格。 但是，在外部数据源中出现错误时，数据源可能不提供发生错误的列。 在这种情况下， <xref:System.Windows.Forms.DataGridViewCellCancelEventArgs.ColumnIndex%2A> 属性通常指示在发生错误时当前单元的列。

## Examples  
 下面的代码示例演示了一个 <xref:System.Windows.Forms.DataGridView.DataError> 事件处理程序。 此示例是类概述主题中提供的一个更大示例的一部分 <xref:System.Windows.Forms.DataGridViewComboBoxColumn> 。  
  
 [!code-cpp[System.Windows.Forms.DataGridViewColumn_AllColumns_Bound_Employees#50](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewColumn_AllColumns_Bound_Employees/CPP/employees.cpp#50)]
 [!code-csharp[System.Windows.Forms.DataGridViewColumn_AllColumns_Bound_Employees#50](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewColumn_AllColumns_Bound_Employees/CS/employees.cs#50)]
 [!code-vb[System.Windows.Forms.DataGridViewColumn_AllColumns_Bound_Employees#50](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewColumn_AllColumns_Bound_Employees/VB/employees.vb#50)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DataGridViewDataErrorEventHandler" />
        <altmember cref="T:System.Windows.Forms.DataGridViewDataErrorEventArgs" />
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="DataMember">
      <MemberSignature Language="C#" Value="public string DataMember { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DataMember" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.DataMember" />
      <MemberSignature Language="VB.NET" Value="Public Property DataMember As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DataMember { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DataMember : string with get, set" Usage="System.Windows.Forms.DataGridView.DataMember" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue("")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue("")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.ComponentModel.Editor("System.Windows.Forms.Design.DataMemberListEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Editor("System.Windows.Forms.Design.DataMemberListEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName Language="C#">[System.ComponentModel.Editor("System.Windows.Forms.Design.DataMemberListEditor, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Editor("System.Windows.Forms.Design.DataMemberListEditor, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:System.Windows.Forms.DataGridView" /> 正在为其显示数据的数据源中的列表或表的名称。</summary>
        <value><see cref="P:System.Windows.Forms.DataGridView.DataSource" /> 中 <see cref="T:System.Windows.Forms.DataGridView" /> 显示其数据的表或列表的名称。 默认值为 <see cref="F:System.String.Empty" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 绑定到包含多个列表或表的数据源时，此属性很有用。 绑定到包含单个列表或表的数据源时，无需设置此属性。 例如，可以将 <xref:System.Windows.Forms.DataGridView> 控件绑定到 <xref:System.Data.DataSet> 包含单个表的，而无需设置此属性。 但是，如果 <xref:System.Data.DataSet> 包含多个表，则必须将此属性设置为其中一个表的名称。

## Examples  
 下面的代码示例说明了此属性的常见用法。 在此示例中， <xref:System.Windows.Forms.DataGridView> 名为的控件 `customersDataGridView` 绑定到一个名为的控件 <xref:System.Data.DataSet> `customersDataSet` 。 此 <xref:System.Data.DataSet> 表包含一个名为 "Customers" 的表。 <xref:System.Windows.Forms.DataGridView.DataMember%2A>属性设置为表的名称。  
  
 [!code-csharp[System.Windows.Forms.DataGridViewMisc#020](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewMisc/CS/datagridviewmisc.cs#020)]
 [!code-vb[System.Windows.Forms.DataGridViewMisc#020](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewMisc/VB/datagridviewmisc.vb#020)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">数据源中出现错误，这是由于没有 <see cref="E:System.Windows.Forms.DataGridView.DataError" /> 事件的处理程序或处理程序已将 <see cref="P:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException" /> 属性设置为 <see langword="true" />。 通常情况下，可将该异常对象强制转换为类型  <see cref="T:System.FormatException" />。</exception>
        <altmember cref="P:System.Windows.Forms.DataGridView.DataSource" />
        <altmember cref="T:System.Data.DataSet" />
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="DataMemberChanged">
      <MemberSignature Language="C#" Value="public event EventHandler DataMemberChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler DataMemberChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.DataMemberChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DataMemberChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ DataMemberChanged;" />
      <MemberSignature Language="F#" Value="member this.DataMemberChanged : EventHandler " Usage="member this.DataMemberChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当 <see cref="P:System.Windows.Forms.DataGridView.DataMember" /> 属性的值更改时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关如何处理事件的详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。

## Examples  
 下面的代码示例演示如何使用此成员。 在此示例中，事件处理程序报告事件的发生 <xref:System.Windows.Forms.DataGridView.DataMemberChanged> 。 此报表可帮助你了解何时发生事件，并可帮助你进行调试。 若要报告多个事件或频繁发生的事件，请考虑 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 将消息替换为多行或将其追加到多行 <xref:System.Windows.Forms.TextBox> 。  
  
 若要运行示例代码，请将其粘贴到包含名为的类型的实例的项目中 <xref:System.Windows.Forms.DataGridView> `DataGridView1` 。 然后，确保事件处理程序与事件相关联 <xref:System.Windows.Forms.DataGridView.DataMemberChanged> 。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#266](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#266)]
 [!code-vb[System.Windows.Forms.EventExamples#266](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#266)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="DataSource">
      <MemberSignature Language="C#" Value="public object DataSource { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object DataSource" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.DataSource" />
      <MemberSignature Language="VB.NET" Value="Public Property DataSource As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ DataSource { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DataSource : obj with get, set" Usage="System.Windows.Forms.DataGridView.DataSource" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.AttributeProvider(typeof(System.ComponentModel.IListSource))]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.AttributeProvider(typeof(System.ComponentModel.IListSource))&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(null)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(null)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.RefreshProperties(System.ComponentModel.RefreshProperties.Repaint)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.RefreshProperties(System.ComponentModel.RefreshProperties.Repaint)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:System.Windows.Forms.DataGridView" /> 所显示数据的数据源。</summary>
        <value>包括要显示的 <see cref="T:System.Windows.Forms.DataGridView" /> 的数据的对象。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.DataGridView>类支持标准 Windows 窗体的数据绑定模型。 这意味着数据源可以是实现以下接口之一的任何类型：  
  
-   <xref:System.Collections.IList>接口，包括一维数组。  
  
-   <xref:System.ComponentModel.IListSource>接口，如 <xref:System.Data.DataTable> 和 <xref:System.Data.DataSet> 类。  
  
-   <xref:System.ComponentModel.IBindingList>接口，如 <xref:System.ComponentModel.BindingList%601> 类。  
  
-   <xref:System.ComponentModel.IBindingListView>接口，如 <xref:System.Windows.Forms.BindingSource> 类。  
  
 有关具体示例，请参阅本节末尾的 "示例" 部分和任务表。  
  
 通常，你将绑定到一个 <xref:System.Windows.Forms.BindingSource> 组件，并将该 <xref:System.Windows.Forms.BindingSource> 组件绑定到另一个数据源，或者使用业务对象来填充它。 <xref:System.Windows.Forms.BindingSource>组件是首选数据源，因为它可以绑定到各种数据源，并可自动解决许多数据绑定问题。  
  
 绑定到包含多个列表或表的数据源时，必须将属性设置 <xref:System.Windows.Forms.DataGridView.DataMember%2A> 为指定要绑定到的列表或表的字符串。 但在绑定到 <xref:System.Windows.Forms.BindingSource> 包含多个列表或表的组件时，可以改为设置 <xref:System.Windows.Forms.BindingSource.DataMember%2A> 该组件的属性 <xref:System.Windows.Forms.BindingSource> 。  
  
 当绑定到对象集合而不是数据库数据时，通常会将 <xref:System.Windows.Forms.DataGridViewCellStyle.DataSourceNullValue%2A> 属性返回的对象的属性设置 <xref:System.Windows.Forms.DataGridView.DefaultCellStyle%2A> 为 `null` ，而不是使用的默认值 <xref:System.DBNull.Value?displayProperty=nameWithType> （适用于数据库数据）。  
  
 有关详细信息，请参阅在 [Windows 窗体 DataGridView 控件中显示数据](/dotnet/framework/winforms/controls/displaying-data-in-the-windows-forms-datagridview-control)。 下表提供了与属性相关的常见任务的直接链接 <xref:System.Windows.Forms.DataGridView.DataSource%2A> 。  
  
 请参阅 [演练：使用两个 Windows 窗体 DataGridView 控件创建主/详细信息窗体](/dotnet/framework/winforms/controls/creating-a-master-detail-form-using-two-datagridviews) 和 [如何：将对象绑定到 Windows 窗体 datagridview 控件](/dotnet/framework/winforms/controls/how-to-bind-objects-to-windows-forms-datagridview-controls)。

## Examples  
 下面的代码示例演示如何初始化简单的数据绑定 <xref:System.Windows.Forms.DataGridView> 。 它还演示如何设置 <xref:System.Windows.Forms.DataGridView.DataSource%2A> 属性。  
  
 [!code-cpp[System.Windows.Forms.GridViewSimpleBound#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.GridViewSimpleBound/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.GridViewSimpleBound#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.GridViewSimpleBound/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.GridViewSimpleBound#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.GridViewSimpleBound/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">数据源中出现错误，这是由于没有 <see cref="E:System.Windows.Forms.DataGridView.DataError" /> 事件的处理程序或处理程序已将 <see cref="P:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException" /> 属性设置为 <see langword="true" />。 通常情况下，可将该异常对象强制转换为类型  <see cref="T:System.FormatException" />。</exception>
        <altmember cref="T:System.Collections.IList" />
        <altmember cref="T:System.ComponentModel.IListSource" />
        <altmember cref="T:System.Data.DataTable" />
        <altmember cref="T:System.Data.DataSet" />
        <altmember cref="T:System.ComponentModel.IBindingList" />
        <altmember cref="T:System.ComponentModel.BindingList`1" />
        <altmember cref="T:System.ComponentModel.IBindingListView" />
        <altmember cref="T:System.Windows.Forms.BindingSource" />
        <altmember cref="T:System.Windows.Forms.DataGridViewCellStyle" />
        <altmember cref="P:System.Windows.Forms.DataGridViewCellStyle.DataSourceNullValue" />
        <altmember cref="P:System.Windows.Forms.DataGridView.DefaultCellStyle" />
        <altmember cref="P:System.Windows.Forms.DataGridView.DataMember" />
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
        <related type="Article" href="/dotnet/framework/winforms/controls/displaying-data-in-the-windows-forms-datagridview-control">在 Windows 窗体 DataGridView 控件中显示数据</related>
      </Docs>
    </Member>
    <Member MemberName="DataSourceChanged">
      <MemberSignature Language="C#" Value="public event EventHandler DataSourceChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler DataSourceChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.DataSourceChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DataSourceChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ DataSourceChanged;" />
      <MemberSignature Language="F#" Value="member this.DataSourceChanged : EventHandler " Usage="member this.DataSourceChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当 <see cref="P:System.Windows.Forms.DataGridView.DataSource" /> 属性的值更改时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关如何处理事件的详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。

## Examples  
 下面的代码示例演示如何使用此成员。 在此示例中，事件处理程序报告事件的发生 <xref:System.Windows.Forms.DataGridView.DataSourceChanged> 。 此报表可帮助你了解何时发生事件，并可帮助你进行调试。 若要报告多个事件或频繁发生的事件，请考虑 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 将消息替换为多行或将其追加到多行 <xref:System.Windows.Forms.TextBox> 。  
  
 若要运行示例代码，请将其粘贴到包含名为的类型的实例的项目中 <xref:System.Windows.Forms.DataGridView> `DataGridView1` 。 然后，确保事件处理程序与事件相关联 <xref:System.Windows.Forms.DataGridView.DataSourceChanged> 。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#267](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#267)]
 [!code-vb[System.Windows.Forms.EventExamples#267](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#267)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="DefaultCellStyle">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataGridViewCellStyle DefaultCellStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.DataGridViewCellStyle DefaultCellStyle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.DefaultCellStyle" />
      <MemberSignature Language="VB.NET" Value="Public Property DefaultCellStyle As DataGridViewCellStyle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::DataGridViewCellStyle ^ DefaultCellStyle { System::Windows::Forms::DataGridViewCellStyle ^ get(); void set(System::Windows::Forms::DataGridViewCellStyle ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DefaultCellStyle : System.Windows.Forms.DataGridViewCellStyle with get, set" Usage="System.Windows.Forms.DataGridView.DefaultCellStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.AmbientValue(null)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.AmbientValue(null)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewCellStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在未设置其他单元格样式属性的情况下，获取或设置应用于 <see cref="T:System.Windows.Forms.DataGridView" /> 中的单元格的默认单元格样式。</summary>
        <value>作为默认样式应用的 <see cref="T:System.Windows.Forms.DataGridViewCellStyle" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.DataGridView>控件使用 cells 属性指示的样式显示单元格 <xref:System.Windows.Forms.DataGridViewCell.InheritedStyle%2A> ，该样式继承类型的其他属性的样式 <xref:System.Windows.Forms.DataGridViewCellStyle> 。 通过属性指定的样式将 <xref:System.Windows.Forms.DataGridView.DefaultCellStyle%2A> 影响所有单元，但当由通过以下属性指定的样式重写时除外：  
  
-   <xref:System.Windows.Forms.DataGridViewColumn.DefaultCellStyle%2A?displayProperty=nameWithType> 
  
-   <xref:System.Windows.Forms.DataGridView.RowsDefaultCellStyle%2A> 
  
-   <xref:System.Windows.Forms.DataGridView.AlternatingRowsDefaultCellStyle%2A> 
  
-   <xref:System.Windows.Forms.DataGridViewRow.DefaultCellStyle%2A?displayProperty=nameWithType> 
  
-   <xref:System.Windows.Forms.DataGridViewCell.Style%2A?displayProperty=nameWithType> 
  
 有关详细信息，请参阅 [Windows 窗体 DataGridView 控件中的单元格样式](/dotnet/framework/winforms/controls/cell-styles-in-the-windows-forms-datagridview-control)。  
  
 获取此属性时， <xref:System.Windows.Forms.DataGridViewCellStyle> 如果尚未访问属性，将创建具有默认值的。 在为多个行获取此属性时，这可能会影响性能。 请尽可能使用 single <xref:System.Windows.Forms.DataGridViewCellStyle> 为多行设置此属性。 有关详细信息，请参阅 [缩放 Windows 窗体 DataGridView 控件的最佳做法](/dotnet/framework/winforms/controls/best-practices-for-scaling-the-windows-forms-datagridview-control)。

## Examples  
 下面的代码示例演示如何在 <xref:System.Windows.Forms.DataGridView> 主要用于显示的控件中使用此属性。 在此示例中，控件的可视外观是通过多种方式自定义的，并且控件配置为具有有限的交互功能。 此示例是类概述中提供的一个更大示例的一部分 <xref:System.Windows.Forms.DataGridViewCellStyle> 。  
  
 [!code-csharp[System.Windows.Forms.DataGridViewStyleDemo#20](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewStyleDemo/CS/form1.cs#20)]
 [!code-vb[System.Windows.Forms.DataGridViewStyleDemo#20](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewStyleDemo/VB/form1.vb#20)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DataGridViewCellStyle" />
        <related type="Article" href="/dotnet/framework/winforms/controls/cell-styles-in-the-windows-forms-datagridview-control">Windows 窗体 DataGridView 控件中的单元格样式</related>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="DefaultCellStyleChanged">
      <MemberSignature Language="C#" Value="public event EventHandler DefaultCellStyleChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler DefaultCellStyleChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.DefaultCellStyleChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DefaultCellStyleChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ DefaultCellStyleChanged;" />
      <MemberSignature Language="F#" Value="member this.DefaultCellStyleChanged : EventHandler " Usage="member this.DefaultCellStyleChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当 <see cref="P:System.Windows.Forms.DataGridView.DefaultCellStyle" /> 属性的值更改时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当属性返回的的任何属性 <xref:System.Windows.Forms.DataGridViewCellStyle> <xref:System.Windows.Forms.DataGridView.DefaultCellStyle%2A> 设置为新值时，或者当 <xref:System.Windows.Forms.DataGridView.DefaultCellStyle%2A> 属性设置为新 <xref:System.Windows.Forms.DataGridViewCellStyle> 的，且至少有一个属性值与上一个单元格样式对象不同时，将发生此事件。  
  
 有关如何处理事件的详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。

## Examples  
 下面的代码示例演示如何使用此成员。 在此示例中，事件处理程序报告事件的发生 <xref:System.Windows.Forms.DataGridView.DefaultCellStyleChanged> 。 此报表可帮助你了解何时发生事件，并可帮助你进行调试。 若要报告多个事件或频繁发生的事件，请考虑 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 将消息替换为多行或将其追加到多行 <xref:System.Windows.Forms.TextBox> 。  
  
 若要运行示例代码，请将其粘贴到包含名为的类型的实例的项目中 <xref:System.Windows.Forms.DataGridView> `DataGridView1` 。 然后，确保事件处理程序与事件相关联 <xref:System.Windows.Forms.DataGridView.DefaultCellStyleChanged> 。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#268](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#268)]
 [!code-vb[System.Windows.Forms.EventExamples#268](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#268)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DataGridViewCellStyle" />
        <related type="Article" href="/dotnet/framework/winforms/controls/cell-styles-in-the-windows-forms-datagridview-control">Windows 窗体 DataGridView 控件中的单元格样式</related>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="DefaultSize">
      <MemberSignature Language="C#" Value="protected override System.Drawing.Size DefaultSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Size DefaultSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.DefaultSize" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property DefaultSize As Size" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property System::Drawing::Size DefaultSize { System::Drawing::Size get(); };" />
      <MemberSignature Language="F#" Value="member this.DefaultSize : System.Drawing.Size" Usage="System.Windows.Forms.DataGridView.DefaultSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取控件的默认初始大小。</summary>
        <value>一个 <see cref="T:System.Drawing.Size" />，表示控件的初始大小（宽度为 240 个像素，高度为 150 个像素）。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultValuesNeeded">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewRowEventHandler DefaultValuesNeeded;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewRowEventHandler DefaultValuesNeeded" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.DefaultValuesNeeded" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DefaultValuesNeeded As DataGridViewRowEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::DataGridViewRowEventHandler ^ DefaultValuesNeeded;" />
      <MemberSignature Language="F#" Value="member this.DefaultValuesNeeded : System.Windows.Forms.DataGridViewRowEventHandler " Usage="member this.DefaultValuesNeeded : System.Windows.Forms.DataGridViewRowEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewRowEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>用户输入新记录行以便可以使用默认值填充该行时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此事件允许您在用户输入行时填充新记录行。 行的初始值来自 <xref:System.Windows.Forms.DataGridViewCell.DefaultNewRowValue%2A> <xref:System.Windows.Forms.DataGridViewCell> 每个列的属性返回的的属性 <xref:System.Windows.Forms.DataGridViewColumn.CellTemplate%2A> 。  
  
 在数据绑定模式下，数据绑定列的所有单元值都存储在外部数据源中。 当用户输入新记录行时，在该事件发生之前，将在数据源中创建新行 <xref:System.Windows.Forms.DataGridView.DefaultValuesNeeded> 。 在 <xref:System.Windows.Forms.DataGridViewRowEventArgs.Row%2A?displayProperty=nameWithType> 事件处理程序中填充属性时，会将值直接添加到数据源。  
  
 在虚拟模式下，此事件发生后， <xref:System.Windows.Forms.DataGridView.CellValuePushed> 新行中的每个单元格都会发生事件，因此，您可以在自定义数据存储中存储默认值。 然后，将 <xref:System.Windows.Forms.DataGridView.CellValueNeeded> 为新行中的每个单元格执行该事件，并检索在事件中存储的值 <xref:System.Windows.Forms.DataGridView.CellValuePushed> ，然后显示这些值。  
  
 有关如何处理事件的详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。

## Examples  
 下面的代码示例演示如何处理此事件。 在此示例中，给定列的单元格用默认值填充。 对于 `CustomerID` 列，将从单独的方法中检索值， (未实现生成唯一客户 ID) 。  
  
 若要运行此示例，请将列名替换为实际控件中的列对象的名称 <xref:System.Windows.Forms.DataGridView> ，并提供适当的默认值。 按名称指定列时，必须使用列对象的名称，而不是列标题文本。  
  
 [!code-csharp[System.Windows.Forms.DataGridViewMisc#120](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewMisc/CS/datagridviewmisc.cs#120)]
 [!code-vb[System.Windows.Forms.DataGridViewMisc#120](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewMisc/VB/datagridviewmisc.vb#120)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="DisplayedColumnCount">
      <MemberSignature Language="C#" Value="public int DisplayedColumnCount (bool includePartialColumns);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 DisplayedColumnCount(bool includePartialColumns) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.DisplayedColumnCount(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function DisplayedColumnCount (includePartialColumns As Boolean) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int DisplayedColumnCount(bool includePartialColumns);" />
      <MemberSignature Language="F#" Value="member this.DisplayedColumnCount : bool -&gt; int" Usage="dataGridView.DisplayedColumnCount includePartialColumns" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="includePartialColumns" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="includePartialColumns">如果要包括显示列数中的部分列，为 <see langword="true" />；否则为 <see langword="false" />。</param>
        <summary>返回向用户显示的列数。</summary>
        <returns>向用户显示的列数。</returns>
        <remarks>To be added.</remarks>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="DisplayedRowCount">
      <MemberSignature Language="C#" Value="public int DisplayedRowCount (bool includePartialRow);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 DisplayedRowCount(bool includePartialRow) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.DisplayedRowCount(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function DisplayedRowCount (includePartialRow As Boolean) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int DisplayedRowCount(bool includePartialRow);" />
      <MemberSignature Language="F#" Value="member this.DisplayedRowCount : bool -&gt; int" Usage="dataGridView.DisplayedRowCount includePartialRow" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="includePartialRow" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="includePartialRow">如果要包括显示行数中的部分行，为 <see langword="true" />；否则为 <see langword="false" />。</param>
        <summary>返回向用户显示的行数。</summary>
        <returns>向用户显示的行数。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DisplayRectangle">
      <MemberSignature Language="C#" Value="public override System.Drawing.Rectangle DisplayRectangle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Rectangle DisplayRectangle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.DisplayRectangle" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property DisplayRectangle As Rectangle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Drawing::Rectangle DisplayRectangle { System::Drawing::Rectangle get(); };" />
      <MemberSignature Language="F#" Value="member this.DisplayRectangle : System.Drawing.Rectangle" Usage="System.Windows.Forms.DataGridView.DisplayRectangle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Rectangle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取表示控件的显示区域的矩形。</summary>
        <value>一个 <see cref="T:System.Drawing.Rectangle" />，它表示控件的显示区域。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.DataGridView.DisplayRectangle%2A>属性返回控件的显示区域的客户端矩形，而不包括显示的任何滚动条占用的区域。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>当在 <see cref="P:System.Windows.Forms.DataGridView.DisplayRectangle" /> 派生类中重写属性时，使用基类的 <see cref="P:System.Windows.Forms.DataGridView.DisplayRectangle" /> 属性扩展基实现。 或者，您必须提供所有实现。</para></block>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="dataGridView.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">若要释放托管资源和非托管资源，则为 <see langword="true" />；若仅释放非托管资源，则为 <see langword="false" />。</param>
        <summary>释放由 <see cref="T:System.Windows.Forms.Control" /> 和它的子控件占用的非托管资源，另外还可以释放托管资源。</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.Control.Dispose(System.Boolean)" />
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="EditingControl">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Control EditingControl { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.Control EditingControl" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.EditingControl" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property EditingControl As Control" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::Control ^ EditingControl { System::Windows::Forms::Control ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.EditingControl : System.Windows.Forms.Control" Usage="System.Windows.Forms.DataGridView.EditingControl" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Control</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取当前单元格承载的控件（如果包含编辑控件的单元格处于编辑模式下）。</summary>
        <value>当前单元格承载的 <see cref="T:System.Windows.Forms.Control" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果该单元格未处于编辑模式，或该单元格类型不能容纳编辑控件，则此属性返回 `null` 。

## Examples  
 下面的代码示例演示如何在自定义单元类型的重写方法中使用此属性。 在此示例中，检索对编辑控件的引用，强制转换为自定义编辑控件类型，然后使用单元的当前值进行填充。  
  
 此示例摘自 [如何：在 Windows 窗体 DataGridView 单元格中承载控件](/dotnet/framework/winforms/controls/how-to-host-controls-in-windows-forms-datagridview-cells)中提供的一个更大的示例。  
  
 [!code-csharp[System.Windows.Forms.DataGridViewCalendarColumn#210](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewCalendarColumn/CS/datagridviewcalendarcolumn.cs#210)]
 [!code-vb[System.Windows.Forms.DataGridViewCalendarColumn#210](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewCalendarColumn/VB/datagridviewcalendarcolumn.vb#210)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="EditingControlShowing">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewEditingControlShowingEventHandler EditingControlShowing;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewEditingControlShowingEventHandler EditingControlShowing" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.EditingControlShowing" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event EditingControlShowing As DataGridViewEditingControlShowingEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::DataGridViewEditingControlShowingEventHandler ^ EditingControlShowing;" />
      <MemberSignature Language="F#" Value="member this.EditingControlShowing : System.Windows.Forms.DataGridViewEditingControlShowingEventHandler " Usage="member this.EditingControlShowing : System.Windows.Forms.DataGridViewEditingControlShowingEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewEditingControlShowingEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>显示用于编辑单元格的控件时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当单元格进入编辑模式时，您可以处理此事件以对编辑控件执行自定义初始化。 若要自定义控件的显示特性，请设置由属性返回的对象的属性 <xref:System.Windows.Forms.DataGridViewEditingControlShowingEventArgs.CellStyle%2A?displayProperty=nameWithType> 。 若要执行其他初始化，请将属性的值强制转换 <xref:System.Windows.Forms.DataGridViewEditingControlShowingEventArgs.Control%2A?displayProperty=nameWithType> 为特定的控件类型并直接访问成员。 例如，可以处理 <xref:System.Windows.Forms.DataGridView.EditingControlShowing> 事件，以将事件处理程序附加到编辑控件的事件。  
  
> [!NOTE]
> <xref:System.Windows.Forms.DataGridView>控件一次承载一个编辑控件，并在每次编辑时重复使用编辑控件。 将事件处理程序附加到编辑控件时，必须采取预防措施以避免多次附加同一处理程序。 若要避免此问题，请在将处理程序附加到事件之前，从事件中删除处理程序。 如果处理程序已附加到事件，则这会阻止重复，但否则将不起作用。 有关详细信息，请参阅类概述中的代码示例 <xref:System.Windows.Forms.DataGridViewComboBoxEditingControl> 。  
  
 有关如何处理事件的详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。

## Examples  
 下面的代码示例演示如何处理此事件以更改 <xref:System.Windows.Forms.DataGridViewCellStyle.BackColor%2A> 当前单元格的属性。 若要运行此示例，请将代码粘贴到包含名为的的窗体中， <xref:System.Windows.Forms.DataGridView> `dataGridView1` 并确保该 <xref:System.Windows.Forms.DataGridView.EditingControlShowing> 事件与事件处理程序相关联。  
  
 [!code-csharp[System.Windows.Forms.DataGridViewMisc#210](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewMisc/CS/datagridviewmisc.cs#210)]
 [!code-vb[System.Windows.Forms.DataGridViewMisc#210](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewMisc/VB/datagridviewmisc.vb#210)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DataGridViewTextBoxEditingControl" />
        <altmember cref="T:System.Windows.Forms.DataGridViewComboBoxEditingControl" />
        <altmember cref="T:System.Windows.Forms.IDataGridViewEditingControl" />
        <altmember cref="T:System.Windows.Forms.DataGridViewEditingControlShowingEventHandler" />
        <altmember cref="T:System.Windows.Forms.DataGridViewEditingControlShowingEventArgs" />
        <altmember cref="P:System.Windows.Forms.DataGridViewEditingControlShowingEventArgs.CellStyle" />
        <altmember cref="P:System.Windows.Forms.DataGridViewEditingControlShowingEventArgs.Control" />
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="EditingPanel">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Panel EditingPanel { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.Panel EditingPanel" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.EditingPanel" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property EditingPanel As Panel" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::Panel ^ EditingPanel { System::Windows::Forms::Panel ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.EditingPanel : System.Windows.Forms.Panel" Usage="System.Windows.Forms.DataGridView.EditingPanel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Panel</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取包含 <see cref="P:System.Windows.Forms.DataGridView.EditingControl" /> 的面板。</summary>
        <value>包含 <see cref="T:System.Windows.Forms.Panel" /> 的 <see cref="P:System.Windows.Forms.DataGridView.EditingControl" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 与 <xref:System.Windows.Forms.DataGridView.EditingControl%2A> 属性不同，这是 `null` 当前单元格不处于编辑模式时， <xref:System.Windows.Forms.DataGridView.EditingPanel%2A> 属性始终可用。

## Examples  
 下面的代码示例演示如何使用控件中的 <xref:System.Windows.Forms.DataGridView.EditingPanel%2A> 属性在 <xref:System.Windows.Forms.DataGridView> 单元格处于编辑模式时对其进行可视化区分。 在此示例中，将 <xref:System.Windows.Forms.Panel.BorderStyle%2A> 单元格的编辑面板的设置为 <xref:System.Windows.Forms.BorderStyle.Fixed3D> 。 若要运行此示例，请将代码粘贴到包含名为的的窗体中 <xref:System.Windows.Forms.DataGridView> `dataGridView1` 。  
  
 [!code-csharp[System.Windows.Forms.DataGridViewMisc#069](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewMisc/CS/datagridviewmisc.cs#069)]
 [!code-vb[System.Windows.Forms.DataGridViewMisc#069](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewMisc/VB/datagridviewmisc.vb#069)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="EditMode">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataGridViewEditMode EditMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.DataGridViewEditMode EditMode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.EditMode" />
      <MemberSignature Language="VB.NET" Value="Public Property EditMode As DataGridViewEditMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::DataGridViewEditMode EditMode { System::Windows::Forms::DataGridViewEditMode get(); void set(System::Windows::Forms::DataGridViewEditMode value); };" />
      <MemberSignature Language="F#" Value="member this.EditMode : System.Windows.Forms.DataGridViewEditMode with get, set" Usage="System.Windows.Forms.DataGridView.EditMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewEditMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示如何开始编辑单元格。</summary>
        <value><see cref="T:System.Windows.Forms.DataGridViewEditMode" /> 值之一。 默认值为 <see cref="F:System.Windows.Forms.DataGridViewEditMode.EditOnKeystrokeOrF2" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.DataGridViewEditMode>除之外的所有值 <xref:System.Windows.Forms.DataGridViewEditMode.EditProgrammatically> 还允许用户双击单元格开始编辑。

## Examples  
 下面的代码示例演示如何初始化简单的数据绑定 <xref:System.Windows.Forms.DataGridView> 。 它还演示如何设置 <xref:System.Windows.Forms.DataGridView.EditMode%2A> 属性。  
  
 [!code-cpp[System.Windows.Forms.GridViewSimpleBound#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.GridViewSimpleBound/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.GridViewSimpleBound#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.GridViewSimpleBound/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.GridViewSimpleBound#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.GridViewSimpleBound/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">当设置此属性时，指定的值不是有效的 <see cref="T:System.Windows.Forms.DataGridViewEditMode" /> 值。</exception>
        <exception cref="T:System.Exception">当设置此属性时，指定的值将导致控件进入编辑模式，但是对正在编辑的单元格值的初始化失败，并且 <see cref="E:System.Windows.Forms.DataGridView.DataError" /> 事件没有处理程序，或者处理程序已将 <see cref="P:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException" /> 属性设置为 <see langword="true" />。 通常情况下，可将该异常对象强制转换为类型  <see cref="T:System.FormatException" />。</exception>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="EditModeChanged">
      <MemberSignature Language="C#" Value="public event EventHandler EditModeChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler EditModeChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.EditModeChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event EditModeChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ EditModeChanged;" />
      <MemberSignature Language="F#" Value="member this.EditModeChanged : EventHandler " Usage="member this.EditModeChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当 <see cref="P:System.Windows.Forms.DataGridView.EditMode" /> 属性的值更改时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关如何处理事件的详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。

## Examples  
 下面的代码示例演示如何使用此成员。 在此示例中，事件处理程序报告事件的发生 <xref:System.Windows.Forms.DataGridView.EditModeChanged> 。 此报表可帮助你了解何时发生事件，并可帮助你进行调试。 若要报告多个事件或频繁发生的事件，请考虑 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 将消息替换为多行或将其追加到多行 <xref:System.Windows.Forms.TextBox> 。  
  
 若要运行示例代码，请将其粘贴到包含名为的类型的实例的项目中 <xref:System.Windows.Forms.DataGridView> `DataGridView1` 。 然后，确保事件处理程序与事件相关联 <xref:System.Windows.Forms.DataGridView.EditModeChanged> 。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#269](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#269)]
 [!code-vb[System.Windows.Forms.EventExamples#269](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#269)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="EnableHeadersVisualStyles">
      <MemberSignature Language="C#" Value="public bool EnableHeadersVisualStyles { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableHeadersVisualStyles" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.EnableHeadersVisualStyles" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableHeadersVisualStyles As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableHeadersVisualStyles { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnableHeadersVisualStyles : bool with get, set" Usage="System.Windows.Forms.DataGridView.EnableHeadersVisualStyles" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(true)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示在对应用程序启用了可视样式的情况下，行标题和列标题是否使用用户当前主题的可视样式。</summary>
        <value>如果对标题启用了可视样式，则为<see langword="true" /> ；否则为 <see langword="false" />。 默认值为 <see langword="true" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 可以通过在调用方法之前调用方法，为应用程序启用视觉样式 <xref:System.Windows.Forms.Application.EnableVisualStyles%2A?displayProperty=nameWithType> <xref:System.Windows.Forms.Application.Run%2A?displayProperty=nameWithType> 。 如果 <xref:System.Windows.Forms.DataGridView.EnableHeadersVisualStyles%2A> 设置为 `true` ，则 <xref:System.Windows.Forms.DataGridView.TopLeftHeaderCell%2A> 将使用当前主题绘制除之外的所有标头单元格。

## Examples  
 下面的代码示例演示如何为启用了视觉样式的应用程序中的行标题和列标题禁用视觉样式。 在此示例中，已通过调用中的方法为应用程序启用了视觉样式 <xref:System.Windows.Forms.Application.EnableVisualStyles%2A> `Main` 。 但是，由于设置为，因此不会将视觉样式应用于行标题和列标题 <xref:System.Windows.Forms.DataGridView.EnableHeadersVisualStyles%2A> `false` 。 此代码示例是为类提供的更大示例的一部分 <xref:System.Windows.Forms.DataGridViewAdvancedBorderStyle> 。  
  
 [!code-csharp[System.Windows.Forms.DataGridViewAdvancedBorderStyle#10](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewAdvancedBorderStyle/CS/advancedborderstyle.cs#10)]
 [!code-vb[System.Windows.Forms.DataGridViewAdvancedBorderStyle#10](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewAdvancedBorderStyle/VB/advancedborderstyle.vb#10)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Application.EnableVisualStyles" />
        <altmember cref="Overload:System.Windows.Forms.Application.Run" />
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="EndEdit">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>提交对当前单元格进行的编辑并结束编辑操作。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="EndEdit">
      <MemberSignature Language="C#" Value="public bool EndEdit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool EndEdit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.EndEdit" />
      <MemberSignature Language="VB.NET" Value="Public Function EndEdit () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool EndEdit();" />
      <MemberSignature Language="F#" Value="member this.EndEdit : unit -&gt; bool" Usage="dataGridView.EndEdit " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>使用默认错误上下文提交对当前单元格进行的编辑并结束编辑操作。</summary>
        <returns>如果编辑操作已提交并结束，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法调用 <xref:System.Windows.Forms.DataGridView.EndEdit%2A> 重载，并传入和值的按位组合 <xref:System.Windows.Forms.DataGridViewDataErrorContexts.Parsing> <xref:System.Windows.Forms.DataGridViewDataErrorContexts.Commit> 。  
  
 此方法引发 <xref:System.Windows.Forms.DataGridView.CellEndEdit> 事件。  
  
 如果未使用事件处理错误，则此方法可能会导致异常 <xref:System.Windows.Forms.DataGridView.DataError> 。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">无法提交单元格值，且没有 <see cref="E:System.Windows.Forms.DataGridView.DataError" /> 事件的处理程序或处理程序已将 <see cref="P:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException" /> 属性设置为 <see langword="true" />。</exception>
        <altmember cref="M:System.Windows.Forms.DataGridView.EndEdit(System.Windows.Forms.DataGridViewDataErrorContexts)" />
        <altmember cref="M:System.Windows.Forms.DataGridView.CommitEdit(System.Windows.Forms.DataGridViewDataErrorContexts)" />
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="EndEdit">
      <MemberSignature Language="C#" Value="public bool EndEdit (System.Windows.Forms.DataGridViewDataErrorContexts context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool EndEdit(valuetype System.Windows.Forms.DataGridViewDataErrorContexts context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.EndEdit(System.Windows.Forms.DataGridViewDataErrorContexts)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndEdit (context As DataGridViewDataErrorContexts) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool EndEdit(System::Windows::Forms::DataGridViewDataErrorContexts context);" />
      <MemberSignature Language="F#" Value="member this.EndEdit : System.Windows.Forms.DataGridViewDataErrorContexts -&gt; bool" Usage="dataGridView.EndEdit context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Windows.Forms.DataGridViewDataErrorContexts" />
      </Parameters>
      <Docs>
        <param name="context"><see cref="T:System.Windows.Forms.DataGridViewDataErrorContexts" /> 值的按位组合，指定可能出错的上下文。</param>
        <summary>使用指定的错误上下文提交对当前单元格进行的编辑并结束编辑操作。</summary>
        <returns>如果编辑操作已提交并结束，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法引发 <xref:System.Windows.Forms.DataGridView.CellEndEdit> 事件。  
  
 如果未使用事件处理错误，则此方法可能会导致异常 <xref:System.Windows.Forms.DataGridView.DataError> 。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">无法提交单元格值，且没有 <see cref="E:System.Windows.Forms.DataGridView.DataError" /> 事件的处理程序或处理程序已将 <see cref="P:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException" /> 属性设置为 <see langword="true" />。</exception>
        <altmember cref="M:System.Windows.Forms.DataGridView.CommitEdit(System.Windows.Forms.DataGridViewDataErrorContexts)" />
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="FirstDisplayedCell">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataGridViewCell FirstDisplayedCell { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.DataGridViewCell FirstDisplayedCell" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.FirstDisplayedCell" />
      <MemberSignature Language="VB.NET" Value="Public Property FirstDisplayedCell As DataGridViewCell" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::DataGridViewCell ^ FirstDisplayedCell { System::Windows::Forms::DataGridViewCell ^ get(); void set(System::Windows::Forms::DataGridViewCell ^ value); };" />
      <MemberSignature Language="F#" Value="member this.FirstDisplayedCell : System.Windows.Forms.DataGridViewCell with get, set" Usage="System.Windows.Forms.DataGridView.FirstDisplayedCell" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewCell</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置当前显示在 <see cref="T:System.Windows.Forms.DataGridView" /> 中的第一个单元格；此单元格通常位于左上角。</summary>
        <value>当前显示在控件中的第一个 <see cref="T:System.Windows.Forms.DataGridViewCell" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以使用此属性来确定哪个单元格位于控件中当前显示的第一行和第一列中。 通常，这是在左上角，但对于从右到左的语言，它在右上角。 您还可以将此属性设置为将控件滚动到指定的单元格。

## Examples  
 下面的代码示例演示如何确保当前单元格在排序后可见。 此代码仅适用于未绑定的 <xref:System.Windows.Forms.DataGridView> 控件。 <xref:System.Windows.Forms.DataGridView>当控件绑定到外部数据源时，当前单元格不会在排序时自动保留。  
  
 若要运行此示例，请将以下代码粘贴到包含名为的的窗体中 <xref:System.Windows.Forms.DataGridView> `dataGridView1` 。 在 c # 中，还必须将 <xref:System.Windows.Forms.DataGridView.Sorted> 事件连接到事件处理程序。  
  
 [!code-csharp[System.Windows.Forms.DataGridViewMisc#150](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewMisc/CS/datagridviewmisc.cs#150)]
 [!code-vb[System.Windows.Forms.DataGridViewMisc#150](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewMisc/VB/datagridviewmisc.vb#150)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">设置此属性时，指定的单元格不在 <see cref="T:System.Windows.Forms.DataGridView" /> 中。</exception>
        <exception cref="T:System.InvalidOperationException">当设置此属性时，指定的单元格的 <see cref="P:System.Windows.Forms.DataGridViewCell.RowIndex" /> 或 <see cref="P:System.Windows.Forms.DataGridViewCell.ColumnIndex" /> 属性值为 -1，指示它为标题单元格或共享单元格。  
  
- 或 - 
当设置此属性时，指定的单元格的 <see cref="P:System.Windows.Forms.DataGridViewCell.Visible" /> 属性值为 <see langword="false" />。</exception>
        <altmember cref="P:System.Windows.Forms.DataGridView.CurrentCell" />
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="FirstDisplayedScrollingColumnHiddenWidth">
      <MemberSignature Language="C#" Value="public int FirstDisplayedScrollingColumnHiddenWidth { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 FirstDisplayedScrollingColumnHiddenWidth" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.FirstDisplayedScrollingColumnHiddenWidth" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FirstDisplayedScrollingColumnHiddenWidth As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int FirstDisplayedScrollingColumnHiddenWidth { int get(); };" />
      <MemberSignature Language="F#" Value="member this.FirstDisplayedScrollingColumnHiddenWidth : int" Usage="System.Windows.Forms.DataGridView.FirstDisplayedScrollingColumnHiddenWidth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取该列中当前不在视图区域内的部分的宽度。</summary>
        <value>该列中不在视图区域内的部分的宽度。</value>
        <remarks>To be added.</remarks>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="FirstDisplayedScrollingColumnIndex">
      <MemberSignature Language="C#" Value="public int FirstDisplayedScrollingColumnIndex { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 FirstDisplayedScrollingColumnIndex" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.FirstDisplayedScrollingColumnIndex" />
      <MemberSignature Language="VB.NET" Value="Public Property FirstDisplayedScrollingColumnIndex As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int FirstDisplayedScrollingColumnIndex { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.FirstDisplayedScrollingColumnIndex : int with get, set" Usage="System.Windows.Forms.DataGridView.FirstDisplayedScrollingColumnIndex" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置某一列的索引，该列是显示在 <see cref="T:System.Windows.Forms.DataGridView" /> 上的第一列。</summary>
        <value>某一列的索引，该列是显示在 <see cref="T:System.Windows.Forms.DataGridView" /> 上的第一列。</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">当设置此属性时，指定的值小于 0 或大于控件中的列数减 1。</exception>
        <exception cref="T:System.InvalidOperationException">当设置此属性时，指定的值指示具有 <see langword="false" /> 的 <see cref="P:System.Windows.Forms.DataGridViewColumn.Visible" /> 属性值的列。  
  
- 或 - 
当设置此属性时，指定的值指示具有 <see langword="true" /> 的 <see cref="P:System.Windows.Forms.DataGridViewColumn.Frozen" /> 属性值的列。</exception>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="FirstDisplayedScrollingRowIndex">
      <MemberSignature Language="C#" Value="public int FirstDisplayedScrollingRowIndex { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 FirstDisplayedScrollingRowIndex" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.FirstDisplayedScrollingRowIndex" />
      <MemberSignature Language="VB.NET" Value="Public Property FirstDisplayedScrollingRowIndex As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int FirstDisplayedScrollingRowIndex { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.FirstDisplayedScrollingRowIndex : int with get, set" Usage="System.Windows.Forms.DataGridView.FirstDisplayedScrollingRowIndex" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置某一行的索引，该行是显示在 <see cref="T:System.Windows.Forms.DataGridView" /> 上的第一行。</summary>
        <value>某一行的索引，该行是显示在 <see cref="T:System.Windows.Forms.DataGridView" /> 上的第一行。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 设置此属性将引发 <xref:System.Windows.Forms.DataGridView.Scroll> 事件。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">当设置此属性时，指定的值小于 0 或大于控件中的行数减 1。</exception>
        <exception cref="T:System.InvalidOperationException">当设置此属性时，指定的值指示具有 <see langword="false" /> 的 <see cref="P:System.Windows.Forms.DataGridViewRow.Visible" /> 属性值的行。  
  
- 或 - 
当设置此属性时，指定的值指示具有 <see langword="true" /> 的 <see cref="P:System.Windows.Forms.DataGridViewRow.Frozen" /> 属性值的列。</exception>
        <altmember cref="E:System.Windows.Forms.DataGridView.Scroll" />
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="Font">
      <MemberSignature Language="C#" Value="public override System.Drawing.Font Font { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Drawing.Font Font" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.Font" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Font As Font" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Drawing::Font ^ Font { System::Drawing::Font ^ get(); void set(System::Drawing::Font ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Font : System.Drawing.Font with get, set" Usage="System.Windows.Forms.DataGridView.Font" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Font</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:System.Windows.Forms.DataGridView" /> 显示的文本的字体。</summary>
        <value>要应用于由控件显示的文本的 <see cref="T:System.Drawing.Font" />。 默认为 <see cref="P:System.Windows.Forms.Control.DefaultFont" /> 属性的值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.Control.Font%2A>属性为环境属性。 环境属性是一个控件属性，如果未设置，则将从父控件中检索该属性。 例如， <xref:System.Windows.Forms.Button> <xref:System.Windows.Forms.Control.BackColor%2A> 默认情况下，将与其父级相同 <xref:System.Windows.Forms.Form> 。 有关环境属性的详细信息，请参阅 <xref:System.Windows.Forms.AmbientProperties> 类或 <xref:System.Windows.Forms.Control> 类概述。  
  
 因为 <xref:System.Drawing.Font> 是不可变 (这意味着不能) 调整其任何属性，所以只能为 <xref:System.Windows.Forms.Control.Font%2A> 属性分配一个新 <xref:System.Drawing.Font> 对象。 不过，您可以将新字体基于现有字体。  
  
 <xref:System.Windows.Forms.DataGridView>控件使用属性的值 <xref:System.Windows.Forms.DataGridView.Font%2A> 作为 <xref:System.Windows.Forms.DataGridViewCellStyle.Font%2A> <xref:System.Windows.Forms.DataGridViewCellStyle> <xref:System.Windows.Forms.DataGridView.DefaultCellStyle%2A> 、和属性所返回对象的属性的默认值 <xref:System.Windows.Forms.DataGridView.ColumnHeadersDefaultCellStyle%2A> <xref:System.Windows.Forms.DataGridView.RowHeadersDefaultCellStyle%2A> 。 更改 <xref:System.Windows.Forms.DataGridView.Font%2A> 该值会自动更新 <xref:System.Windows.Forms.DataGridView.DefaultCellStyle%2A> 、 <xref:System.Windows.Forms.DataGridView.ColumnHeadersDefaultCellStyle%2A> 和 <xref:System.Windows.Forms.DataGridView.RowHeadersDefaultCellStyle%2A> 属性，并为继承值的任何单元更改字体。 标题单元在默认情况下会重写该值，您可以重写特定行、列和单元格的值。 有关单元样式继承的详细信息，请参阅 [Windows 窗体 DataGridView 控件中的单元格样式](/dotnet/framework/winforms/controls/cell-styles-in-the-windows-forms-datagridview-control)。

## Examples  
 下面的代码示例演示如何使用此属性。 此示例摘自 [如何：创建未绑定 Windows 窗体 DataGridView 控件](/dotnet/framework/winforms/controls/how-to-create-an-unbound-windows-forms-datagridview-control)中提供的一个更大的示例。  
  
 [!code-csharp[System.Windows.Forms.DataGridViewSimpleUnbound#30](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewSimpleUnbound/CS/simpleunbound.cs#30)]
 [!code-vb[System.Windows.Forms.DataGridViewSimpleUnbound#30](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewSimpleUnbound/VB/simpleunbound.vb#30)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.DataGridView.DefaultCellStyle" />
        <altmember cref="P:System.Windows.Forms.DataGridView.ColumnHeadersDefaultCellStyle" />
        <altmember cref="P:System.Windows.Forms.DataGridView.RowHeadersDefaultCellStyle" />
        <altmember cref="T:System.Windows.Forms.DataGridViewCellStyle" />
        <altmember cref="P:System.Windows.Forms.DataGridViewCellStyle.Font" />
        <altmember cref="T:System.Drawing.Font" />
        <related type="Article" href="/dotnet/framework/winforms/controls/cell-styles-in-the-windows-forms-datagridview-control">Windows 窗体 DataGridView 控件中的单元格样式</related>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="FontChanged">
      <MemberSignature Language="C#" Value="public event EventHandler FontChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler FontChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.FontChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event FontChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ FontChanged;" />
      <MemberSignature Language="F#" Value="member this.FontChanged : EventHandler " Usage="member this.FontChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在 <see cref="P:System.Windows.Forms.DataGridView.Font" /> 属性值更改时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关如何处理事件的详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。

## Examples  
 下面的代码示例演示如何使用此成员。 在此示例中，事件处理程序报告事件的发生 <xref:System.Windows.Forms.DataGridView.FontChanged> 。 此报表可帮助你了解何时发生事件，并可帮助你进行调试。 若要报告多个事件或频繁发生的事件，请考虑 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 将消息替换为多行或将其追加到多行 <xref:System.Windows.Forms.TextBox> 。  
  
 若要运行示例代码，请将其粘贴到包含名为的类型的实例的项目中 <xref:System.Windows.Forms.DataGridView> `DataGridView1` 。 然后，确保事件处理程序与事件相关联 <xref:System.Windows.Forms.DataGridView.FontChanged> 。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#271](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#271)]
 [!code-vb[System.Windows.Forms.EventExamples#271](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#271)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.DataGridView.Font" />
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="ForeColor">
      <MemberSignature Language="C#" Value="public override System.Drawing.Color ForeColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color ForeColor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.ForeColor" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property ForeColor As Color" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Drawing::Color ForeColor { System::Drawing::Color get(); void set(System::Drawing::Color value); };" />
      <MemberSignature Language="F#" Value="member this.ForeColor : System.Drawing.Color with get, set" Usage="System.Windows.Forms.DataGridView.ForeColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:System.Windows.Forms.DataGridView" /> 的前景色。</summary>
        <value>表示 <see cref="T:System.Drawing.Color" /> 的前景色的 <see cref="T:System.Windows.Forms.DataGridView" />。 默认为 <see cref="P:System.Windows.Forms.Control.DefaultForeColor" /> 属性的值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.Control.ForeColor%2A>属性为环境属性。 环境属性是一个控件属性，如果未设置，则将从父控件中检索该属性。 例如， <xref:System.Windows.Forms.Button> <xref:System.Windows.Forms.Control.BackColor%2A> 默认情况下，将与其父级相同 <xref:System.Windows.Forms.Form> 。 有关环境属性的详细信息，请参阅 <xref:System.Windows.Forms.AmbientProperties> 类或 <xref:System.Windows.Forms.Control> 类概述。  
  
 因为 <xref:System.Drawing.Font> 是不可变 (这意味着不能) 调整其任何属性，所以只能为 <xref:System.Windows.Forms.Control.Font%2A> 属性分配一个新 <xref:System.Drawing.Font> 对象。 不过，您可以将新字体基于现有字体。  
  
 <xref:System.Windows.Forms.DataGridView>控件使用属性的值 <xref:System.Windows.Forms.DataGridView.ForeColor%2A> 作为属性返回的的属性的默认值 <xref:System.Windows.Forms.DataGridViewCellStyle.ForeColor%2A> <xref:System.Windows.Forms.DataGridViewCellStyle> <xref:System.Windows.Forms.DataGridView.DefaultCellStyle%2A> 。 更改 <xref:System.Windows.Forms.DataGridView.ForeColor%2A> 该值会自动更新 <xref:System.Windows.Forms.DataGridView.DefaultCellStyle%2A> 属性，并为继承值的任何单元更改前景文本颜色。 标题单元在默认情况下会重写该值，您可以重写特定行、列和单元格的值。 有关单元样式继承的详细信息，请参阅 [Windows 窗体 DataGridView 控件中的单元格样式](/dotnet/framework/winforms/controls/cell-styles-in-the-windows-forms-datagridview-control)。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.DataGridView.DefaultCellStyle" />
        <altmember cref="T:System.Windows.Forms.DataGridViewCellStyle" />
        <altmember cref="P:System.Windows.Forms.DataGridViewCellStyle.ForeColor" />
        <altmember cref="T:System.Drawing.Color" />
        <related type="Article" href="/dotnet/framework/winforms/controls/cell-styles-in-the-windows-forms-datagridview-control">Windows 窗体 DataGridView 控件中的单元格样式</related>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="ForeColorChanged">
      <MemberSignature Language="C#" Value="public event EventHandler ForeColorChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler ForeColorChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.ForeColorChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ForeColorChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ ForeColorChanged;" />
      <MemberSignature Language="F#" Value="member this.ForeColorChanged : EventHandler " Usage="member this.ForeColorChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在 <see cref="P:System.Windows.Forms.DataGridView.ForeColor" /> 属性值更改时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关如何处理事件的详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。

## Examples  
 下面的代码示例演示如何使用此成员。 在此示例中，事件处理程序报告事件的发生 <xref:System.Windows.Forms.DataGridView.ForeColorChanged> 。 此报表可帮助你了解何时发生事件，并可帮助你进行调试。 若要报告多个事件或频繁发生的事件，请考虑 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 将消息替换为多行或将其追加到多行 <xref:System.Windows.Forms.TextBox> 。  
  
 若要运行示例代码，请将其粘贴到包含名为的类型的实例的项目中 <xref:System.Windows.Forms.DataGridView> `DataGridView1` 。 然后，确保事件处理程序与事件相关联 <xref:System.Windows.Forms.DataGridView.ForeColorChanged> 。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#270](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#270)]
 [!code-vb[System.Windows.Forms.EventExamples#270](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#270)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="GetAccessibilityObjectById">
      <MemberSignature Language="C#" Value="protected override System.Windows.Forms.AccessibleObject GetAccessibilityObjectById (int objectId);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Forms.AccessibleObject GetAccessibilityObjectById(int32 objectId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.GetAccessibilityObjectById(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function GetAccessibilityObjectById (objectId As Integer) As AccessibleObject" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Forms::AccessibleObject ^ GetAccessibilityObjectById(int objectId);" />
      <MemberSignature Language="F#" Value="override this.GetAccessibilityObjectById : int -&gt; System.Windows.Forms.AccessibleObject" Usage="dataGridView.GetAccessibilityObjectById objectId" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.AccessibleObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="objectId" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="objectId">一个 <see cref="T:System.Int32" />，标识要检索的 <see cref="T:System.Windows.Forms.AccessibleObject" />。</param>
        <summary>检索指定的 <see cref="T:System.Windows.Forms.AccessibleObject" />。</summary>
        <returns>指定的 <see cref="T:System.Windows.Forms.AccessibleObject" />。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCellCount">
      <MemberSignature Language="C#" Value="public int GetCellCount (System.Windows.Forms.DataGridViewElementStates includeFilter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetCellCount(valuetype System.Windows.Forms.DataGridViewElementStates includeFilter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.GetCellCount(System.Windows.Forms.DataGridViewElementStates)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCellCount (includeFilter As DataGridViewElementStates) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetCellCount(System::Windows::Forms::DataGridViewElementStates includeFilter);" />
      <MemberSignature Language="F#" Value="member this.GetCellCount : System.Windows.Forms.DataGridViewElementStates -&gt; int" Usage="dataGridView.GetCellCount includeFilter" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="includeFilter" Type="System.Windows.Forms.DataGridViewElementStates" />
      </Parameters>
      <Docs>
        <param name="includeFilter"><see cref="T:System.Windows.Forms.DataGridViewElementStates" /> 值的按位组合，指定要计数的单元格。</param>
        <summary>获取满足所提供筛选器的单元格的数目。</summary>
        <returns>与 <paramref name="includeFilter" /> 参数匹配的单元格的数目。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法可用于确定处于特定状态的单元格的数目。 例如，若要检索所选单元格的数目，请将此方法与值一起使用 <xref:System.Windows.Forms.DataGridViewElementStates.Selected?displayProperty=nameWithType> 。 这通常比使用属性更有效 <xref:System.Windows.Forms.DataGridView.SelectedCells%2A> 。

## Examples  
 下面的代码示例演示如何使用此方法来确定控件中是否有任何单元格处于选定状态 <xref:System.Windows.Forms.DataGridView> 。 在此示例中，如果选择了任何单元格，则会通过方法检索其值 <xref:System.Windows.Forms.DataGridView.GetClipboardContent%2A> 并在控件中显示这些值 <xref:System.Windows.Forms.TextBox> 。  
  
 此代码是说明如何使用控件的剪贴板功能的更大示例的一部分 <xref:System.Windows.Forms.DataGridView> 。 此示例摘自 [如何：使用户能够将多个单元格从 Windows 窗体 DataGridView 控件复制到剪贴板](/dotnet/framework/winforms/controls/enable-users-to-copy-multiple-cells-to-the-clipboard-datagridview)的更大示例的一部分。  
  
 [!code-csharp[System.Windows.Forms.DataGridViewClipboardDemo#16](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewClipboardDemo/CS/datagridviewclipboarddemo.cs#16)]
 [!code-vb[System.Windows.Forms.DataGridViewClipboardDemo#16](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewClipboardDemo/VB/datagridviewclipboarddemo.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="includeFilter" /> 包括 <see cref="F:System.Windows.Forms.DataGridViewElementStates.ResizableSet" /> 值。</exception>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="GetCellDisplayRectangle">
      <MemberSignature Language="C#" Value="public System.Drawing.Rectangle GetCellDisplayRectangle (int columnIndex, int rowIndex, bool cutOverflow);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.Rectangle GetCellDisplayRectangle(int32 columnIndex, int32 rowIndex, bool cutOverflow) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.GetCellDisplayRectangle(System.Int32,System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCellDisplayRectangle (columnIndex As Integer, rowIndex As Integer, cutOverflow As Boolean) As Rectangle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::Rectangle GetCellDisplayRectangle(int columnIndex, int rowIndex, bool cutOverflow);" />
      <MemberSignature Language="F#" Value="member this.GetCellDisplayRectangle : int * int * bool -&gt; System.Drawing.Rectangle" Usage="dataGridView.GetCellDisplayRectangle (columnIndex, rowIndex, cutOverflow)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Rectangle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="columnIndex" Type="System.Int32" />
        <Parameter Name="rowIndex" Type="System.Int32" />
        <Parameter Name="cutOverflow" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="columnIndex">所需单元格的列索引。</param>
        <param name="rowIndex">所需单元格的行索引。</param>
        <param name="cutOverflow">如果只返回该单元格的显示部分，则为 <see langword="true" />；如果返回整个单元格界限，则为 <see langword="false" />。</param>
        <summary>返回表示单元格显示区域的矩形。</summary>
        <returns>表示单元格显示矩形的 <see cref="T:System.Drawing.Rectangle" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法仅返回整个单元格边界或显示的部分。 若要仅获取单元格内容的边界，请使用单元 <xref:System.Windows.Forms.DataGridViewCell.ContentBounds%2A> 属性。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="columnIndex" /> 小于 -1 或大于控件中的列数减 1。  
  
- 或 - 
 <paramref name="rowIndex" /> 小于 -1 或大于控件中的行数减 1。</exception>
        <altmember cref="P:System.Windows.Forms.DataGridViewCell.ContentBounds" />
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="GetClipboardContent">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.DataObject GetClipboardContent ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Forms.DataObject GetClipboardContent() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.GetClipboardContent" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetClipboardContent () As DataObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Windows::Forms::DataObject ^ GetClipboardContent();" />
      <MemberSignature Language="F#" Value="abstract member GetClipboardContent : unit -&gt; System.Windows.Forms.DataObject&#xA;override this.GetClipboardContent : unit -&gt; System.Windows.Forms.DataObject" Usage="dataGridView.GetClipboardContent " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataObject</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>检索表示选定单元格内容的格式化值，以便将其复制到 <see cref="T:System.Windows.Forms.Clipboard" />。</summary>
        <returns>一个 <see cref="T:System.Windows.Forms.DataObject" />，表示选定单元格的内容。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法检索表示由选定单元格定义的区域的数据。 此区域是包含所有所选单元格的最小矩形。 通过调用方法来检索此区域中每个选定的单元格的值 <xref:System.Windows.Forms.DataGridViewCell.GetClipboardContent%2A?displayProperty=nameWithType> 。 空白占位符值用于此区域中未选定的单元格。 此方法将这些值合并为， <xref:System.Windows.Forms.DataObject> 其中包含用于复制到剪贴板的多种格式。 支持的剪贴板格式包括 <xref:System.Windows.Forms.DataFormats.Text?displayProperty=nameWithType> 、 <xref:System.Windows.Forms.DataFormats.UnicodeText?displayProperty=nameWithType> 、 <xref:System.Windows.Forms.DataFormats.Html?displayProperty=nameWithType> 和 <xref:System.Windows.Forms.DataFormats.CommaSeparatedValue?displayProperty=nameWithType> 。  
  
 有关更多信息，请参见 <xref:System.Windows.Forms.Clipboard> 类。

## Examples  
 下面的代码示例演示如何以编程方式将所选 <xref:System.Windows.Forms.DataGridView> 内容添加到剪贴板。 此示例摘自 [如何：使用户能够将多个单元格从 Windows 窗体 DataGridView 控件复制到剪贴板](/dotnet/framework/winforms/controls/enable-users-to-copy-multiple-cells-to-the-clipboard-datagridview)的更大示例的一部分。  
  
 [!code-csharp[System.Windows.Forms.DataGridViewClipboardDemo#10](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewClipboardDemo/CS/datagridviewclipboarddemo.cs#10)]
 [!code-vb[System.Windows.Forms.DataGridViewClipboardDemo#10](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewClipboardDemo/VB/datagridviewclipboarddemo.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">将 <see cref="P:System.Windows.Forms.DataGridView.ClipboardCopyMode" /> 设置为 <see cref="F:System.Windows.Forms.DataGridViewClipboardCopyMode.Disable" />。</exception>
        <block subset="none" type="overrides"><para>重写此方法以提供自定义的剪贴板值。 这非常有用，例如，支持从自定义单元格类型复制值。</para></block>
        <altmember cref="P:System.Windows.Forms.DataGridView.ClipboardCopyMode" />
        <altmember cref="T:System.Windows.Forms.DataGridViewClipboardCopyMode" />
        <altmember cref="T:System.Windows.Forms.DataFormats" />
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="GetColumnDisplayRectangle">
      <MemberSignature Language="C#" Value="public System.Drawing.Rectangle GetColumnDisplayRectangle (int columnIndex, bool cutOverflow);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.Rectangle GetColumnDisplayRectangle(int32 columnIndex, bool cutOverflow) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.GetColumnDisplayRectangle(System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetColumnDisplayRectangle (columnIndex As Integer, cutOverflow As Boolean) As Rectangle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::Rectangle GetColumnDisplayRectangle(int columnIndex, bool cutOverflow);" />
      <MemberSignature Language="F#" Value="member this.GetColumnDisplayRectangle : int * bool -&gt; System.Drawing.Rectangle" Usage="dataGridView.GetColumnDisplayRectangle (columnIndex, cutOverflow)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Rectangle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="columnIndex" Type="System.Int32" />
        <Parameter Name="cutOverflow" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="columnIndex">所需单元格的列索引。</param>
        <param name="cutOverflow">如果要返回 <see cref="T:System.Windows.Forms.DataGridView" /> 界限内可见的列矩形，为 <see langword="true" />；如果要返回整个列矩形，为 <see langword="false" />。</param>
        <summary>返回表示某一列（由列索引确定）的显示区域的矩形。</summary>
        <returns>表示列显示矩形的 <see cref="T:System.Drawing.Rectangle" />。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="columnIndex" /> 不在 0 到列数减 1 的有效范围内。</exception>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="GetRowDisplayRectangle">
      <MemberSignature Language="C#" Value="public System.Drawing.Rectangle GetRowDisplayRectangle (int rowIndex, bool cutOverflow);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.Rectangle GetRowDisplayRectangle(int32 rowIndex, bool cutOverflow) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.GetRowDisplayRectangle(System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetRowDisplayRectangle (rowIndex As Integer, cutOverflow As Boolean) As Rectangle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::Rectangle GetRowDisplayRectangle(int rowIndex, bool cutOverflow);" />
      <MemberSignature Language="F#" Value="member this.GetRowDisplayRectangle : int * bool -&gt; System.Drawing.Rectangle" Usage="dataGridView.GetRowDisplayRectangle (rowIndex, cutOverflow)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Rectangle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rowIndex" Type="System.Int32" />
        <Parameter Name="cutOverflow" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="rowIndex">所需单元格的行索引。</param>
        <param name="cutOverflow">如果要返回 <see cref="T:System.Windows.Forms.DataGridView" /> 界限内可见的行矩形，为 <see langword="true" />；如果要返回整个行矩形，为 <see langword="false" />。</param>
        <summary>返回表示某一行（由行索引确定）的显示区域的矩形。</summary>
        <returns>表示行显示矩形的 <see cref="T:System.Drawing.Rectangle" />。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="rowIndex" /> 不在 0 到行数减 1 的有效范围内。</exception>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="GridColor">
      <MemberSignature Language="C#" Value="public System.Drawing.Color GridColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color GridColor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.GridColor" />
      <MemberSignature Language="VB.NET" Value="Public Property GridColor As Color" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Color GridColor { System::Drawing::Color get(); void set(System::Drawing::Color value); };" />
      <MemberSignature Language="F#" Value="member this.GridColor : System.Drawing.Color with get, set" Usage="System.Windows.Forms.DataGridView.GridColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取和设置网格线的颜色，网格线对 <see cref="T:System.Windows.Forms.DataGridView" /> 的单元格进行分隔。</summary>
        <value>表示网格线颜色的 <see cref="T:System.Drawing.Color" /> 或 <see cref="T:System.Drawing.SystemColors" />。 默认值为 <see cref="F:System.Drawing.KnownColor.ControlDarkDark" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.DataGridView.GridColor%2A>使用单个边框时，可以将属性设置为任何颜色; 对于其他类型的边框，颜色由操作系统指定。 如果通过方法为应用程序启用了视觉样式 <xref:System.Windows.Forms.Application.EnableVisualStyles%2A?displayProperty=nameWithType> ，则将 <xref:System.Windows.Forms.DataGridView.GridColor%2A> 忽略属性，并使用当前主题的颜色。

## Examples  
 下面的代码示例演示如何设置、、、、、、、、 <xref:System.Windows.Forms.DataGridView.ColumnHeadersDefaultCellStyle%2A> <xref:System.Windows.Forms.DataGridView.AutoSizeRowsMode%2A> <xref:System.Windows.Forms.DataGridView.ColumnHeadersBorderStyle%2A> <xref:System.Windows.Forms.DataGridView.CellBorderStyle%2A> <xref:System.Windows.Forms.DataGridView.GridColor%2A> <xref:System.Windows.Forms.DataGridView.BackgroundColor%2A> <xref:System.Windows.Forms.DataGridView.RowHeadersVisible%2A> <xref:System.Windows.Forms.DataGridView.SelectionMode%2A> <xref:System.Windows.Forms.DataGridView.ColumnCount%2A> 和 <xref:System.Windows.Forms.DataGridView.MultiSelect%2A> 属性。 此外，该代码示例还演示如何设置 <xref:System.Windows.Forms.DataGridViewColumn.Name%2A?displayProperty=nameWithType> 和 <xref:System.Windows.Forms.DataGridViewColumn.DefaultCellStyle%2A?displayProperty=nameWithType> 属性。 若要运行此示例，请将代码粘贴到包含名为的的窗体中 <xref:System.Windows.Forms.DataGridView> `dataGridView1` ，然后 `SetUpDataGridView` 从窗体的构造函数或 <xref:System.Windows.Forms.Form.Load> 事件处理程序调用方法。 确保所有事件都与事件处理程序相关联。  
  
 [!code-cpp[System.Windows.Forms.GridViewUnbound#5](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.GridViewUnbound/CPP/form1.cpp#5)]
 [!code-csharp[System.Windows.Forms.GridViewUnbound#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.GridViewUnbound/CS/form1.cs#5)]
 [!code-vb[System.Windows.Forms.GridViewUnbound#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.GridViewUnbound/VB/form1.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">当设置此属性时，指定的值为 <see cref="F:System.Drawing.Color.Empty" />。  
  
- 或 - 
当设置此属性时，指定的值具有小于 255 的 <see cref="P:System.Drawing.Color.A" /> 属性值。</exception>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="GridColorChanged">
      <MemberSignature Language="C#" Value="public event EventHandler GridColorChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler GridColorChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.GridColorChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GridColorChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ GridColorChanged;" />
      <MemberSignature Language="F#" Value="member this.GridColorChanged : EventHandler " Usage="member this.GridColorChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当 <see cref="P:System.Windows.Forms.DataGridView.GridColor" /> 属性的值更改时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关如何处理事件的详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。

## Examples  
 下面的代码示例演示如何使用此成员。 在此示例中，事件处理程序报告事件的发生 <xref:System.Windows.Forms.DataGridView.GridColorChanged> 。 此报表可帮助你了解何时发生事件，并可帮助你进行调试。 若要报告多个事件或频繁发生的事件，请考虑 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 将消息替换为多行或将其追加到多行 <xref:System.Windows.Forms.TextBox> 。  
  
 若要运行示例代码，请将其粘贴到包含名为的类型的实例的项目中 <xref:System.Windows.Forms.DataGridView> `DataGridView1` 。 然后，确保事件处理程序与事件相关联 <xref:System.Windows.Forms.DataGridView.GridColorChanged> 。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#272](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#272)]
 [!code-vb[System.Windows.Forms.EventExamples#272](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#272)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="HitTest">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataGridView.HitTestInfo HitTest (int x, int y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.DataGridView/HitTestInfo HitTest(int32 x, int32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.HitTest(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function HitTest (x As Integer, y As Integer) As DataGridView.HitTestInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::DataGridView::HitTestInfo ^ HitTest(int x, int y);" />
      <MemberSignature Language="F#" Value="member this.HitTest : int * int -&gt; System.Windows.Forms.DataGridView.HitTestInfo" Usage="dataGridView.HitTest (x, y)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridView+HitTestInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="x">x 坐标。</param>
        <param name="y">y 坐标。</param>
        <summary>在给定了 x 坐标和 y 坐标的情况下返回位置信息，例如，行索引和列索引。</summary>
        <returns>包含位置信息的 <see cref="T:System.Windows.Forms.DataGridView.HitTestInfo" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以使用此方法来确定控件的哪个部分 <xref:System.Windows.Forms.DataGridView> 位于指定的坐标处。 例如，您可以调用此方法-指定鼠标单击的坐标，以确定单击的单元格的行索引和列索引，或者是否单击了标题单元或滚动条。

## Examples  
 下面的代码示例演示如何使用此方法。 此示例是属性参考主题中提供的一个更大示例的一部分 <xref:System.Windows.Forms.DataGridView.Columns%2A> 。  
  
 [!code-csharp[System.Windows.Forms.GridViewAutoSize#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.GridViewAutoSize/CS/form1.cs#4)]
 [!code-vb[System.Windows.Forms.GridViewAutoSize#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.GridViewAutoSize/VB/form1.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DataGridView.HitTestInfo" />
        <altmember cref="T:System.Windows.Forms.DataGridViewHitTestType" />
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="HorizontalScrollBar">
      <MemberSignature Language="C#" Value="protected System.Windows.Forms.ScrollBar HorizontalScrollBar { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ScrollBar HorizontalScrollBar" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.HorizontalScrollBar" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property HorizontalScrollBar As ScrollBar" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Windows::Forms::ScrollBar ^ HorizontalScrollBar { System::Windows::Forms::ScrollBar ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.HorizontalScrollBar : System.Windows.Forms.ScrollBar" Usage="System.Windows.Forms.DataGridView.HorizontalScrollBar" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ScrollBar</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取控件的水平滚动条。</summary>
        <value>一个 <see cref="T:System.Windows.Forms.ScrollBar" />，表示水平滚动条。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HorizontalScrollingOffset">
      <MemberSignature Language="C#" Value="public int HorizontalScrollingOffset { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 HorizontalScrollingOffset" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.HorizontalScrollingOffset" />
      <MemberSignature Language="VB.NET" Value="Public Property HorizontalScrollingOffset As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int HorizontalScrollingOffset { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.HorizontalScrollingOffset : int with get, set" Usage="System.Windows.Forms.DataGridView.HorizontalScrollingOffset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置控件水平滚动的像素数。</summary>
        <value>控件水平滚动的像素数。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例演示如何使用此属性。 此示例摘自 [如何：自定义 Windows 窗体 DataGridView 控件中行的外观](/dotnet/framework/winforms/controls/customize-the-appearance-of-rows-in-the-datagrid)的更大示例的一部分。  
  
 [!code-csharp[System.Windows.Forms.DataGridViewRowPainting#20](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewRowPainting/CS/datagridviewrowpainting.cs#20)]
 [!code-vb[System.Windows.Forms.DataGridViewRowPainting#20](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewRowPainting/VB/datagridviewrowpainting.vb#20)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">当设置此属性时，指定的值小于 0。</exception>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="InvalidateCell">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>使 <see cref="T:System.Windows.Forms.DataGridView" /> 中的某个单元格无效，并强制对它进行重新绘制。</summary>
        <altmember cref="Overload:System.Windows.Forms.Control.Invalidate" />
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="InvalidateCell">
      <MemberSignature Language="C#" Value="public void InvalidateCell (System.Windows.Forms.DataGridViewCell dataGridViewCell);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvalidateCell(class System.Windows.Forms.DataGridViewCell dataGridViewCell) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.InvalidateCell(System.Windows.Forms.DataGridViewCell)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvalidateCell (dataGridViewCell As DataGridViewCell)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvalidateCell(System::Windows::Forms::DataGridViewCell ^ dataGridViewCell);" />
      <MemberSignature Language="F#" Value="member this.InvalidateCell : System.Windows.Forms.DataGridViewCell -&gt; unit" Usage="dataGridView.InvalidateCell dataGridViewCell" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataGridViewCell" Type="System.Windows.Forms.DataGridViewCell" />
      </Parameters>
      <Docs>
        <param name="dataGridViewCell">要使之无效的 <see cref="T:System.Windows.Forms.DataGridViewCell" />。</param>
        <summary>使 <see cref="T:System.Windows.Forms.DataGridView" /> 中的指定单元格无效，并强制对它进行重新绘制。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法可用于在不会通常导致重绘单元格的条件下强制单元格重绘。 例如，可以将此方法与自定义单元类型一起使用，该类型可更改其外观作为外部事件的结果。  
  
 有关绘制和无效的详细信息，请参阅 <xref:System.Windows.Forms.Control.Invalidate%2A> 。

## Examples  
 下面的代码示例演示如何在自定义的中使用此方法， <xref:System.Windows.Forms.DataGridViewCell> 当鼠标指针停留在该自定义边框时，将使用该边框进行绘制。 在此示例中，当鼠标指针进入或离开该单元格时，该单元格将无效。  
  
 此代码摘自 [如何：自定义 Windows 窗体 DataGridView 控件中的单元格和列，方法是扩展其行为和外观](/dotnet/framework/winforms/controls/customize-cells-and-columns-in-the-datagrid-by-extending-behavior)。  
  
 [!code-csharp[System.Windows.Forms.DataGridViewRolloverCell#220](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewRolloverCell/CS/rollovercell.cs#220)]
 [!code-vb[System.Windows.Forms.DataGridViewRolloverCell#220](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewRolloverCell/VB/rollovercell.vb#220)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="dataGridViewCell" /> 不属于 <see cref="T:System.Windows.Forms.DataGridView" />。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="dataGridViewCell" /> 为 <see langword="null" />。</exception>
        <altmember cref="Overload:System.Windows.Forms.Control.Invalidate" />
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="InvalidateCell">
      <MemberSignature Language="C#" Value="public void InvalidateCell (int columnIndex, int rowIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvalidateCell(int32 columnIndex, int32 rowIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.InvalidateCell(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvalidateCell (columnIndex As Integer, rowIndex As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvalidateCell(int columnIndex, int rowIndex);" />
      <MemberSignature Language="F#" Value="member this.InvalidateCell : int * int -&gt; unit" Usage="dataGridView.InvalidateCell (columnIndex, rowIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="columnIndex" Type="System.Int32" />
        <Parameter Name="rowIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="columnIndex">要使其无效的单元格的列索引。</param>
        <param name="rowIndex">要使其无效的单元格的行索引。</param>
        <summary>使具有指定的行索引和列索引的单元格无效，并强制对它进行重新绘制。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法可用于在不会通常导致重绘单元格的条件下强制单元格重绘。 例如，可以将此方法与自定义单元类型一起使用，该类型可更改其外观作为外部事件的结果。  
  
 有关绘制和无效的详细信息，请参阅 <xref:System.Windows.Forms.Control.Invalidate%2A> 。

## Examples  
 下面的代码示例演示如何在自定义单元格类型中使用此方法，当用户将鼠标指针悬停在其上方时更改单元格的外观。 此示例摘自 [如何：通过扩展其行为和外观自定义 Windows 窗体 DataGridView 控件中的单元格和列](/dotnet/framework/winforms/controls/customize-cells-and-columns-in-the-datagrid-by-extending-behavior)的更大示例。  
  
 [!code-csharp[System.Windows.Forms.DataGridViewRolloverCell#220](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewRolloverCell/CS/rollovercell.cs#220)]
 [!code-vb[System.Windows.Forms.DataGridViewRolloverCell#220](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewRolloverCell/VB/rollovercell.vb#220)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="columnIndex" /> 小于 -1 或大于控件中的列数减 1。  
  
- 或 - 
 <paramref name="rowIndex" /> 小于 -1 或大于控件中的行数减 1。</exception>
        <altmember cref="Overload:System.Windows.Forms.Control.Invalidate" />
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="InvalidateColumn">
      <MemberSignature Language="C#" Value="public void InvalidateColumn (int columnIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvalidateColumn(int32 columnIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.InvalidateColumn(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvalidateColumn (columnIndex As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvalidateColumn(int columnIndex);" />
      <MemberSignature Language="F#" Value="member this.InvalidateColumn : int -&gt; unit" Usage="dataGridView.InvalidateColumn columnIndex" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="columnIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="columnIndex">要使其无效的列的索引。</param>
        <summary>使 <see cref="T:System.Windows.Forms.DataGridView" /> 中的指定列无效，并强制对它进行重新绘制。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关绘制和无效的详细信息，请参阅 <xref:System.Windows.Forms.Control.Invalidate%2A> 。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="columnIndex" /> 不在 0 到列数减 1 的有效范围内。</exception>
        <altmember cref="Overload:System.Windows.Forms.Control.Invalidate" />
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="InvalidateRow">
      <MemberSignature Language="C#" Value="public void InvalidateRow (int rowIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvalidateRow(int32 rowIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.InvalidateRow(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvalidateRow (rowIndex As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvalidateRow(int rowIndex);" />
      <MemberSignature Language="F#" Value="member this.InvalidateRow : int -&gt; unit" Usage="dataGridView.InvalidateRow rowIndex" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rowIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="rowIndex">要使其无效的行的索引。</param>
        <summary>使 <see cref="T:System.Windows.Forms.DataGridView" /> 中的指定行无效，并强制对它进行重新绘制。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用此方法强制行重绘自身。 此方法在处理或事件的所有者描述方案中非常有用 <xref:System.Windows.Forms.DataGridView.RowPrePaint> <xref:System.Windows.Forms.DataGridView.RowPostPaint> 。  
  
 有关绘制和无效的详细信息，请参阅 <xref:System.Windows.Forms.Control.Invalidate%2A> 。

## Examples  
 下面的代码示例演示如何 <xref:System.Windows.Forms.DataGridView.InvalidateRow%2A> 在行绘制方案中使用方法。 在此示例中，如果当前单元格发生更改，则行失效，并强制该行自行重绘。  
  
 此代码是 [如何：自定义 Windows 窗体 DataGridView 控件中的行的外观](/dotnet/framework/winforms/controls/customize-the-appearance-of-rows-in-the-datagrid)的更大示例的一部分。  
  
 [!code-csharp[System.Windows.Forms.DataGridViewRowPainting#19](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewRowPainting/CS/datagridviewrowpainting.cs#19)]
 [!code-vb[System.Windows.Forms.DataGridViewRowPainting#19](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewRowPainting/VB/datagridviewrowpainting.vb#19)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="rowIndex" /> 不在 0 到行数减 1 的有效范围内。</exception>
        <altmember cref="Overload:System.Windows.Forms.Control.Invalidate" />
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="IsCurrentCellDirty">
      <MemberSignature Language="C#" Value="public bool IsCurrentCellDirty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCurrentCellDirty" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.IsCurrentCellDirty" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsCurrentCellDirty As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsCurrentCellDirty { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsCurrentCellDirty : bool" Usage="System.Windows.Forms.DataGridView.IsCurrentCellDirty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示当前单元格是否有未提交的更改。</summary>
        <value>如果当前单元格有未提交的更改，为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果 <xref:System.Windows.Forms.DataGridView> 未绑定到数据，则当用户移到另一个单元格时，将会将单元格编辑视为已提交。  
  
 如果行标题可见，则包含带有未提交更改的单元格的行标题中将出现一个铅笔标志符号。  
  
 如果 <xref:System.Windows.Forms.DataGridView.IsCurrentCellDirty%2A> 为 `true` ，并且当前单元格承载编辑控件，则可以通过属性检索它 <xref:System.Windows.Forms.DataGridView.EditingControl%2A> 。

## Examples  
 下面的代码示例使用 <xref:System.Windows.Forms.DataGridView.IsCurrentCellDirty%2A> 属性来确定是否提交单元值并 <xref:System.Windows.Forms.DataGridView.CellValueChanged> 从事件的处理程序引发事件 <xref:System.Windows.Forms.DataGridView.CurrentCellDirtyStateChanged> 。 此代码示例摘自 [如何：禁用 Windows 窗体 DataGridView 控件的按钮列](/dotnet/framework/winforms/controls/disable-buttons-in-a-button-column-in-the-datagrid)中的按钮中提供的一个更大的示例。  
  
 [!code-csharp[System.Windows.Forms.DataGridView.DisabledButtons#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridView.DisabledButtons/CS/form1.cs#5)]
 [!code-vb[System.Windows.Forms.DataGridView.DisabledButtons#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridView.DisabledButtons/VB/form1.vb#5)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="IsCurrentCellInEditMode">
      <MemberSignature Language="C#" Value="public bool IsCurrentCellInEditMode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCurrentCellInEditMode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.IsCurrentCellInEditMode" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsCurrentCellInEditMode As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsCurrentCellInEditMode { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsCurrentCellInEditMode : bool" Usage="System.Windows.Forms.DataGridView.IsCurrentCellInEditMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示是否正在编辑当前处于活动状态的单元格。</summary>
        <value>如果正在编辑当前单元格，为<see langword="true" /> ；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.DataGridViewCheckBoxCell>具有焦点的始终处于编辑模式。 如果当前的单元格承载编辑控件并且 <xref:System.Windows.Forms.DataGridView.IsCurrentCellInEditMode%2A> 为 `true` ，则可以通过属性检索编辑控件 <xref:System.Windows.Forms.DataGridView.EditingControl%2A> 。

## Examples  
 下面的代码示例演示如何使用此属性。 此示例是参考主题中提供的一个更大示例的一部分 <xref:System.Windows.Forms.DataGridView.VirtualMode%2A> 。  
  
 [!code-cpp[System.Windows.Forms.DataGridView._Virtual#10](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.DataGridView._Virtual/CPP/virtual.cpp#10)]
 [!code-csharp[System.Windows.Forms.DataGridView._Virtual#10](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridView._Virtual/CS/virtual.cs#10)]
 [!code-vb[System.Windows.Forms.DataGridView._Virtual#10](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridView._Virtual/VB/virtual.vb#10)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.DataGridView.CurrentCell" />
        <altmember cref="P:System.Windows.Forms.DataGridView.EditingControl" />
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="IsCurrentRowDirty">
      <MemberSignature Language="C#" Value="public bool IsCurrentRowDirty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCurrentRowDirty" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.IsCurrentRowDirty" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsCurrentRowDirty As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsCurrentRowDirty { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsCurrentRowDirty : bool" Usage="System.Windows.Forms.DataGridView.IsCurrentRowDirty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示当前行是否有未提交的更改。</summary>
        <value>如果当前行有未提交的更改，为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `true`当行中显示铅笔标志符号时，此属性返回。 默认情况下， <xref:System.Windows.Forms.DataGridView.IsCurrentRowDirty%2A> 属性将始终等于属性的值 <xref:System.Windows.Forms.DataGridView.IsCurrentCellDirty%2A> ，除非 <xref:System.Windows.Forms.DataGridView> 绑定到支持编辑的数据源，或者已实现虚拟模式以使用行级别提交范围。 在这些情况下， <xref:System.Windows.Forms.DataGridView> 将在行级别计算此属性。  
  
 当用户离开行时，控件提交所有行更改。 用户还可以按 CTRL + ENTER 来提交行更改而无需离开该行。 若要以编程方式提交行更改，请调用窗体的 <xref:System.Windows.Forms.ContainerControl.Validate%2A> 方法。 如果数据源是 <xref:System.Windows.Forms.BindingSource> ，则还可以调用 <xref:System.Windows.Forms.BindingSource.EndEdit%2A?displayProperty=nameWithType> 。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="IsInputChar">
      <MemberSignature Language="C#" Value="protected override bool IsInputChar (char charCode);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool IsInputChar(char charCode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.IsInputChar(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function IsInputChar (charCode As Char) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool IsInputChar(char charCode);" />
      <MemberSignature Language="F#" Value="override this.IsInputChar : char -&gt; bool" Usage="dataGridView.IsInputChar charCode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="charCode" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="charCode">要测试的字符。</param>
        <summary>确定字符是否为 <see cref="T:System.Windows.Forms.DataGridView" /> 可识别的输入字符。</summary>
        <returns>如果该字符被识别为输入字符，为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 字符被识别为输入字符，具体取决于控件是否处于编辑模式，以及当前编辑控件是否可以接受字符。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="IsInputKey">
      <MemberSignature Language="C#" Value="protected override bool IsInputKey (System.Windows.Forms.Keys keyData);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool IsInputKey(valuetype System.Windows.Forms.Keys keyData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.IsInputKey(System.Windows.Forms.Keys)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function IsInputKey (keyData As Keys) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool IsInputKey(System::Windows::Forms::Keys keyData);" />
      <MemberSignature Language="F#" Value="override this.IsInputKey : System.Windows.Forms.Keys -&gt; bool" Usage="dataGridView.IsInputKey keyData" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyData" Type="System.Windows.Forms.Keys" />
      </Parameters>
      <Docs>
        <param name="keyData"><see cref="T:System.Windows.Forms.Keys" /> 值之一。</param>
        <summary>确定指定的键是常规输入键还是需要预处理的特殊键。</summary>
        <returns>如果指定的键是常规输入键，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.Control.IsInputKey(System.Windows.Forms.Keys)" />
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Item">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>提供索引器以获取或设置位于指定行和指定列交叉点处的单元格。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataGridViewCell this[int columnIndex, int rowIndex] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.DataGridViewCell Item(int32, int32)" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.Item(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Default Public Property Item(columnIndex As Integer, rowIndex As Integer) As DataGridViewCell" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::DataGridViewCell ^ default[int, int] { System::Windows::Forms::DataGridViewCell ^ get(int columnIndex, int rowIndex); void set(int columnIndex, int rowIndex, System::Windows::Forms::DataGridViewCell ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Item(int * int) : System.Windows.Forms.DataGridViewCell with get, set" Usage="System.Windows.Forms.DataGridView.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewCell</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="columnIndex" Type="System.Int32" />
        <Parameter Name="rowIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="columnIndex">包含单元格的列的索引。</param>
        <param name="rowIndex">包含该单元格的行的索引。</param>
        <summary>提供索引器以获取或设置位于具有指定索引的列和行的交叉点处的单元格。</summary>
        <value>位于指定位置的 <see cref="T:System.Windows.Forms.DataGridViewCell" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此索引器是通过集合的集合访问单元格的替代方法 <xref:System.Windows.Forms.DataGridViewRow.Cells%2A> <xref:System.Windows.Forms.DataGridView.Rows%2A> 。

## Examples  
 下面的代码示例演示如何使用此索引器。  
  
 [!code-csharp[System.Windows.Forms.DataGridViewMisc#230](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewMisc/CS/datagridviewmisc.cs#230)]
 [!code-vb[System.Windows.Forms.DataGridViewMisc#230](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewMisc/VB/datagridviewmisc.vb#230)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="columnIndex" /> 小于 0 或大于控件中的列数减 1。  
  
- 或 - 
 <paramref name="rowIndex" /> 小于 0 或大于控件中的行数减 1。</exception>
        <altmember cref="P:System.Windows.Forms.DataGridViewRow.Cells" />
        <altmember cref="T:System.Windows.Forms.DataGridViewCellCollection" />
        <altmember cref="P:System.Windows.Forms.DataGridView.Rows" />
        <altmember cref="T:System.Windows.Forms.DataGridViewRowCollection" />
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataGridViewCell this[string columnName, int rowIndex] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.DataGridViewCell Item(string, int32)" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.Item(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Default Public Property Item(columnName As String, rowIndex As Integer) As DataGridViewCell" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::DataGridViewCell ^ default[System::String ^, int] { System::Windows::Forms::DataGridViewCell ^ get(System::String ^ columnName, int rowIndex); void set(System::String ^ columnName, int rowIndex, System::Windows::Forms::DataGridViewCell ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Item(string * int) : System.Windows.Forms.DataGridViewCell with get, set" Usage="System.Windows.Forms.DataGridView.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewCell</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="columnName" Type="System.String" />
        <Parameter Name="rowIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="columnName">包含该单元格的列的名称。</param>
        <param name="rowIndex">包含该单元格的行的索引。</param>
        <summary>提供索引器以获取或设置位于具有指定索引的行和具有指定名称的列的交叉点处的单元格。</summary>
        <value>位于指定位置的 <see cref="T:System.Windows.Forms.DataGridViewCell" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此索引器是通过集合的集合访问单元格的替代方法 <xref:System.Windows.Forms.DataGridViewRow.Cells%2A> <xref:System.Windows.Forms.DataGridView.Rows%2A> 。

## Examples  
 下面的代码示例演示如何使用此索引器。  
  
 [!code-csharp[System.Windows.Forms.DataGridViewMisc#230](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewMisc/CS/datagridviewmisc.cs#230)]
 [!code-vb[System.Windows.Forms.DataGridViewMisc#230](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewMisc/VB/datagridviewmisc.vb#230)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.DataGridViewRow.Cells" />
        <altmember cref="T:System.Windows.Forms.DataGridViewCellCollection" />
        <altmember cref="P:System.Windows.Forms.DataGridView.Rows" />
        <altmember cref="T:System.Windows.Forms.DataGridViewRowCollection" />
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="MultiSelect">
      <MemberSignature Language="C#" Value="public bool MultiSelect { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool MultiSelect" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.MultiSelect" />
      <MemberSignature Language="VB.NET" Value="Public Property MultiSelect As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool MultiSelect { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.MultiSelect : bool with get, set" Usage="System.Windows.Forms.DataGridView.MultiSelect" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(true)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示是否允许用户一次选择 <see cref="T:System.Windows.Forms.DataGridView" /> 的多个单元格、行或列。</summary>
        <value>如果用户一次可以选择多个单元格、行或列，为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="true" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当 <xref:System.Windows.Forms.DataGridView.MultiSelect%2A> 属性设置为时 `true` ，可以在控件中选择 (单元) 单元格、行或列的多个元素 <xref:System.Windows.Forms.DataGridView> 。 若要选择多个元素，用户可以按住 CTRL 键并单击要选择的元素。 通过单击要选择的第一个元素，然后在按住 SHIFT 键的同时单击最后一个要选择的元素，可选择连续的元素。 选择范围基于 <xref:System.Windows.Forms.DataGridView.SelectionMode%2A> 属性。 例如，如果将 <xref:System.Windows.Forms.DataGridView.SelectionMode%2A> 设置为 <xref:System.Windows.Forms.DataGridViewSelectionMode.FullColumnSelect?displayProperty=nameWithType> ，则用户可以选择多个列。  
  
 您可以使用 <xref:System.Windows.Forms.DataGridView.MultiSelect%2A> 属性来允许用户选择控件中的多个元素 <xref:System.Windows.Forms.DataGridView> ，并对所有选定元素执行操作。 例如，用户可以选择多个单元格，然后右键单击选定的单元格以显示一个快捷菜单，其中显示了一组要对所选单元执行的任务。  
  
 若要确定控件中选定的单元格、行或列 <xref:System.Windows.Forms.DataGridView> ，可以访问 <xref:System.Windows.Forms.DataGridView.SelectedCells%2A> 、 <xref:System.Windows.Forms.DataGridView.SelectedRows%2A> 或 <xref:System.Windows.Forms.DataGridView.SelectedColumns%2A> 属性。 若要确定所选单元格的数目，请调用 <xref:System.Windows.Forms.DataGridView.GetCellCount%2A> 参数值为的方法 <xref:System.Windows.Forms.DataGridViewElementStates.Selected?displayProperty=nameWithType> 。 使用 <xref:System.Windows.Forms.DataGridViewRowCollection.GetRowCount%2A> 方法检索选定行的数目，并使用方法检索 <xref:System.Windows.Forms.DataGridViewColumnCollection.GetColumnCount%2A> 列数。 在处理大量数据时，这些方法比直接访问集合更有效。 有关详细信息，请参阅 [缩放 Windows 窗体 DataGridView 控件的最佳做法](/dotnet/framework/winforms/controls/best-practices-for-scaling-the-windows-forms-datagridview-control)。

## Examples  
 下面的代码示例演示如何使用 <xref:System.Windows.Forms.DataGridView.MultiSelect%2A> 属性。 若要运行此示例，请将代码粘贴到包含名为的的窗体中 <xref:System.Windows.Forms.DataGridView> `dataGridView1` ，然后 `SetUpDataGridView` 从窗体的构造函数或 <xref:System.Windows.Forms.Form.Load> 事件处理程序调用方法。 确保所有事件都与事件处理程序相关联。  
  
 [!code-cpp[System.Windows.Forms.GridViewUnbound#5](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.GridViewUnbound/CPP/form1.cpp#5)]
 [!code-csharp[System.Windows.Forms.GridViewUnbound#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.GridViewUnbound/CS/form1.cs#5)]
 [!code-vb[System.Windows.Forms.GridViewUnbound#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.GridViewUnbound/VB/form1.vb#5)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="MultiSelectChanged">
      <MemberSignature Language="C#" Value="public event EventHandler MultiSelectChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler MultiSelectChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.MultiSelectChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MultiSelectChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ MultiSelectChanged;" />
      <MemberSignature Language="F#" Value="member this.MultiSelectChanged : EventHandler " Usage="member this.MultiSelectChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当 <see cref="P:System.Windows.Forms.DataGridView.MultiSelect" /> 属性的值更改时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关如何处理事件的详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。

## Examples  
 下面的代码示例演示如何使用此成员。 在此示例中，事件处理程序报告事件的发生 <xref:System.Windows.Forms.DataGridView.MultiSelectChanged> 。 此报表可帮助你了解何时发生事件，并可帮助你进行调试。 若要报告多个事件或频繁发生的事件，请考虑 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 将消息替换为多行或将其追加到多行 <xref:System.Windows.Forms.TextBox> 。  
  
 若要运行示例代码，请将其粘贴到包含名为的类型的实例的项目中 <xref:System.Windows.Forms.DataGridView> `DataGridView1` 。 然后，确保事件处理程序与事件相关联 <xref:System.Windows.Forms.DataGridView.MultiSelectChanged> 。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#273](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#273)]
 [!code-vb[System.Windows.Forms.EventExamples#273](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#273)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="NewRowIndex">
      <MemberSignature Language="C#" Value="public int NewRowIndex { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 NewRowIndex" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.NewRowIndex" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property NewRowIndex As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int NewRowIndex { int get(); };" />
      <MemberSignature Language="F#" Value="member this.NewRowIndex : int" Usage="System.Windows.Forms.DataGridView.NewRowIndex" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取新记录所在行的索引。</summary>
        <value>新记录所在行的索引，如果 <see cref="P:System.Windows.Forms.DataGridView.AllowUserToAddRows" /> 为 <see langword="false" />，则为 -1。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 除非 <xref:System.Windows.Forms.DataGridView.AllowUserToAddRows%2A> 为 `false` ，否则此属性的值等于控件中的行数减1。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="NewRowNeeded">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewRowEventHandler NewRowNeeded;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewRowEventHandler NewRowNeeded" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.NewRowNeeded" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event NewRowNeeded As DataGridViewRowEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::DataGridViewRowEventHandler ^ NewRowNeeded;" />
      <MemberSignature Language="F#" Value="member this.NewRowNeeded : System.Windows.Forms.DataGridViewRowEventHandler " Usage="member this.NewRowNeeded : System.Windows.Forms.DataGridViewRowEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewRowEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当 <see cref="P:System.Windows.Forms.DataGridView.VirtualMode" /> 的 <see cref="T:System.Windows.Forms.DataGridView" /> 属性为 <see langword="true" /> 时，将在用户定位到 <see cref="T:System.Windows.Forms.DataGridView" /> 底部的新行时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.DataGridView>处于虚拟模式时，此事件允许在数据存储中为新行创建新项，并且它还允许使用默认值填充行。  
  
 有关如何处理事件的详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。

## Examples  
 下面的代码示例使用 <xref:System.Windows.Forms.DataGridView.NewRowNeeded> 事件来跟踪新行的添加时间，因此， <xref:System.Windows.Forms.DataGridView.CellValueNeeded> 事件处理程序中的逻辑可以将新行的单元格初始化为初始值。 此示例是参考主题中提供的一个更大示例的一部分 <xref:System.Windows.Forms.DataGridView.VirtualMode%2A> 。  
  
 [!code-cpp[System.Windows.Forms.DataGridView._Virtual#20](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.DataGridView._Virtual/CPP/virtual.cpp#20)]
 [!code-csharp[System.Windows.Forms.DataGridView._Virtual#20](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridView._Virtual/CS/virtual.cs#20)]
 [!code-vb[System.Windows.Forms.DataGridView._Virtual#20](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridView._Virtual/VB/virtual.vb#20)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="NotifyCurrentCellDirty">
      <MemberSignature Language="C#" Value="public virtual void NotifyCurrentCellDirty (bool dirty);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void NotifyCurrentCellDirty(bool dirty) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.NotifyCurrentCellDirty(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub NotifyCurrentCellDirty (dirty As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void NotifyCurrentCellDirty(bool dirty);" />
      <MemberSignature Language="F#" Value="abstract member NotifyCurrentCellDirty : bool -&gt; unit&#xA;override this.NotifyCurrentCellDirty : bool -&gt; unit" Usage="dataGridView.NotifyCurrentCellDirty dirty" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dirty" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="dirty">如果要指示该单元格有未提交的更改，为 <see langword="true" />；否则为 <see langword="false" />。</param>
        <summary>通知 <see cref="T:System.Windows.Forms.DataGridView" /> 当前单元格有未提交的更改。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法可用于允许自定义单元格类型在 <xref:System.Windows.Forms.DataGridView> 有未提交的更改时通知。

## Examples  
 下面的代码示例演示如何在自定义单元格方案中使用此方法。 在此示例中， <xref:System.Windows.Forms.IDataGridViewEditingControl> 从类派生的实现将 <xref:System.Windows.Forms.DateTimePicker> 重写 <xref:System.Windows.Forms.DateTimePicker.OnValueChanged%2A> 方法，并使用 <xref:System.Windows.Forms.DataGridView.NotifyCurrentCellDirty%2A> 方法指示对控件的更改 <xref:System.Windows.Forms.DataGridView> 。  
  
 此示例是 [如何：在 Windows 窗体 DataGridView 单元格中承载控件](/dotnet/framework/winforms/controls/how-to-host-controls-in-windows-forms-datagridview-cells)中所示的一个更大示例的一部分。  
  
 [!code-csharp[System.Windows.Forms.DataGridViewCalendarColumn#310](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewCalendarColumn/CS/datagridviewcalendarcolumn.cs#310)]
 [!code-vb[System.Windows.Forms.DataGridViewCalendarColumn#310](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewCalendarColumn/VB/datagridviewcalendarcolumn.vb#310)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="OnAllowUserToAddRowsChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnAllowUserToAddRowsChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnAllowUserToAddRowsChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnAllowUserToAddRowsChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnAllowUserToAddRowsChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnAllowUserToAddRowsChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnAllowUserToAddRowsChanged : EventArgs -&gt; unit&#xA;override this.OnAllowUserToAddRowsChanged : EventArgs -&gt; unit" Usage="dataGridView.OnAllowUserToAddRowsChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.EventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.DataGridView.AllowUserToAddRowsChanged" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
 <xref:System.Windows.Forms.DataGridView.OnAllowUserToAddRowsChanged%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>在派生类中重写 <see cref="M:System.Windows.Forms.DataGridView.OnAllowUserToAddRowsChanged(System.EventArgs)" /> 时，一定要调用基类的 <see cref="M:System.Windows.Forms.DataGridView.OnAllowUserToAddRowsChanged(System.EventArgs)" /> 方法，以便已注册的委托对事件进行接收。</para></block>
        <altmember cref="E:System.Windows.Forms.DataGridView.AllowUserToAddRowsChanged" />
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="OnAllowUserToDeleteRowsChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnAllowUserToDeleteRowsChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnAllowUserToDeleteRowsChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnAllowUserToDeleteRowsChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnAllowUserToDeleteRowsChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnAllowUserToDeleteRowsChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnAllowUserToDeleteRowsChanged : EventArgs -&gt; unit&#xA;override this.OnAllowUserToDeleteRowsChanged : EventArgs -&gt; unit" Usage="dataGridView.OnAllowUserToDeleteRowsChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.EventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.DataGridView.AllowUserToDeleteRowsChanged" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
 <xref:System.Windows.Forms.DataGridView.OnAllowUserToDeleteRowsChanged%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>在派生类中重写 <see cref="M:System.Windows.Forms.DataGridView.OnAllowUserToDeleteRowsChanged(System.EventArgs)" /> 时，一定要调用基类的 <see cref="M:System.Windows.Forms.DataGridView.OnAllowUserToDeleteRowsChanged(System.EventArgs)" /> 方法，以便已注册的委托对事件进行接收。</para></block>
        <altmember cref="E:System.Windows.Forms.DataGridView.AllowUserToDeleteRowsChanged" />
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="OnAllowUserToOrderColumnsChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnAllowUserToOrderColumnsChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnAllowUserToOrderColumnsChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnAllowUserToOrderColumnsChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnAllowUserToOrderColumnsChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnAllowUserToOrderColumnsChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnAllowUserToOrderColumnsChanged : EventArgs -&gt; unit&#xA;override this.OnAllowUserToOrderColumnsChanged : EventArgs -&gt; unit" Usage="dataGridView.OnAllowUserToOrderColumnsChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.EventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.DataGridView.AllowUserToOrderColumnsChanged" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
 <xref:System.Windows.Forms.DataGridView.OnAllowUserToOrderColumnsChanged%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>在派生类中重写 <see cref="M:System.Windows.Forms.DataGridView.OnAllowUserToOrderColumnsChanged(System.EventArgs)" /> 时，一定要调用基类的 <see cref="M:System.Windows.Forms.DataGridView.OnAllowUserToOrderColumnsChanged(System.EventArgs)" /> 方法，以便已注册的委托对事件进行接收。</para></block>
        <altmember cref="E:System.Windows.Forms.DataGridView.AllowUserToOrderColumnsChanged" />
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="OnAllowUserToResizeColumnsChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnAllowUserToResizeColumnsChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnAllowUserToResizeColumnsChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnAllowUserToResizeColumnsChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnAllowUserToResizeColumnsChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnAllowUserToResizeColumnsChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnAllowUserToResizeColumnsChanged : EventArgs -&gt; unit&#xA;override this.OnAllowUserToResizeColumnsChanged : EventArgs -&gt; unit" Usage="dataGridView.OnAllowUserToResizeColumnsChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.EventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.DataGridView.AllowUserToResizeColumnsChanged" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
 <xref:System.Windows.Forms.DataGridView.OnAllowUserToResizeColumnsChanged%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>当 <see cref="M:System.Windows.Forms.DataGridView.OnAllowUserToResizeColumnsChanged(System.EventArgs)" /> 在派生类中重写时，请确保调用基类的 <see cref="M:System.Windows.Forms.DataGridView.OnAllowUserToResizeColumnsChanged(System.EventArgs)" /> 方法，以便注册的委托接收事件。</para></block>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="OnAllowUserToResizeRowsChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnAllowUserToResizeRowsChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnAllowUserToResizeRowsChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnAllowUserToResizeRowsChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnAllowUserToResizeRowsChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnAllowUserToResizeRowsChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnAllowUserToResizeRowsChanged : EventArgs -&gt; unit&#xA;override this.OnAllowUserToResizeRowsChanged : EventArgs -&gt; unit" Usage="dataGridView.OnAllowUserToResizeRowsChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.EventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.DataGridView.AllowUserToResizeRowsChanged" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
 <xref:System.Windows.Forms.DataGridView.OnAllowUserToResizeRowsChanged%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>当 <see cref="M:System.Windows.Forms.DataGridView.OnAllowUserToResizeRowsChanged(System.EventArgs)" /> 在派生类中重写时，请确保调用基类的 <see cref="M:System.Windows.Forms.DataGridView.OnAllowUserToResizeRowsChanged(System.EventArgs)" /> 方法，以便注册的委托接收事件。</para></block>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="OnAlternatingRowsDefaultCellStyleChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnAlternatingRowsDefaultCellStyleChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnAlternatingRowsDefaultCellStyleChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnAlternatingRowsDefaultCellStyleChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnAlternatingRowsDefaultCellStyleChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnAlternatingRowsDefaultCellStyleChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnAlternatingRowsDefaultCellStyleChanged : EventArgs -&gt; unit&#xA;override this.OnAlternatingRowsDefaultCellStyleChanged : EventArgs -&gt; unit" Usage="dataGridView.OnAlternatingRowsDefaultCellStyleChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.EventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.DataGridView.AlternatingRowsDefaultCellStyleChanged" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
 <xref:System.Windows.Forms.DataGridView.OnAlternatingRowsDefaultCellStyleChanged%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>在派生类中重写 <see cref="M:System.Windows.Forms.DataGridView.OnAlternatingRowsDefaultCellStyleChanged(System.EventArgs)" /> 时，一定要调用基类的 <see cref="M:System.Windows.Forms.DataGridView.OnAlternatingRowsDefaultCellStyleChanged(System.EventArgs)" /> 方法，以便已注册的委托对事件进行接收。</para></block>
        <altmember cref="T:System.Windows.Forms.DataGridViewCellStyle" />
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
        <related type="Article" href="/dotnet/framework/winforms/controls/cell-styles-in-the-windows-forms-datagridview-control">Windows 窗体 DataGridView 控件中的单元格样式</related>
      </Docs>
    </Member>
    <Member MemberName="OnAutoGenerateColumnsChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnAutoGenerateColumnsChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnAutoGenerateColumnsChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnAutoGenerateColumnsChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnAutoGenerateColumnsChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnAutoGenerateColumnsChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnAutoGenerateColumnsChanged : EventArgs -&gt; unit&#xA;override this.OnAutoGenerateColumnsChanged : EventArgs -&gt; unit" Usage="dataGridView.OnAutoGenerateColumnsChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.EventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.DataGridView.AutoGenerateColumnsChanged" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
 <xref:System.Windows.Forms.DataGridView.OnAutoGenerateColumnsChanged%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>在派生类中重写 <see cref="M:System.Windows.Forms.DataGridView.OnAutoGenerateColumnsChanged(System.EventArgs)" /> 时，一定要调用基类的 <see cref="M:System.Windows.Forms.DataGridView.OnAutoGenerateColumnsChanged(System.EventArgs)" /> 方法，以便已注册的委托对事件进行接收。</para></block>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="OnAutoSizeColumnModeChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnAutoSizeColumnModeChanged (System.Windows.Forms.DataGridViewAutoSizeColumnModeEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnAutoSizeColumnModeChanged(class System.Windows.Forms.DataGridViewAutoSizeColumnModeEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnAutoSizeColumnModeChanged(System.Windows.Forms.DataGridViewAutoSizeColumnModeEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnAutoSizeColumnModeChanged (e As DataGridViewAutoSizeColumnModeEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnAutoSizeColumnModeChanged(System::Windows::Forms::DataGridViewAutoSizeColumnModeEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnAutoSizeColumnModeChanged : System.Windows.Forms.DataGridViewAutoSizeColumnModeEventArgs -&gt; unit&#xA;override this.OnAutoSizeColumnModeChanged : System.Windows.Forms.DataGridViewAutoSizeColumnModeEventArgs -&gt; unit" Usage="dataGridView.OnAutoSizeColumnModeChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewAutoSizeColumnModeEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.Windows.Forms.DataGridViewAutoSizeColumnModeEventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.DataGridView.AutoSizeColumnModeChanged" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
 <xref:System.Windows.Forms.DataGridView.OnAutoSizeColumnModeChanged%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><paramref name="e" /> 的 <see cref="P:System.Windows.Forms.DataGridViewAutoSizeColumnModeEventArgs.Column" /> 属性的值为 null。</exception>
        <block subset="none" type="overrides"><para>当 <see cref="M:System.Windows.Forms.DataGridView.OnAutoSizeColumnModeChanged(System.Windows.Forms.DataGridViewAutoSizeColumnModeEventArgs)" /> 在派生类中重写时，请确保调用基类的 <see cref="M:System.Windows.Forms.DataGridView.OnAutoSizeColumnModeChanged(System.Windows.Forms.DataGridViewAutoSizeColumnModeEventArgs)" /> 方法，以便注册的委托接收事件。</para></block>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="OnAutoSizeColumnsModeChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnAutoSizeColumnsModeChanged (System.Windows.Forms.DataGridViewAutoSizeColumnsModeEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnAutoSizeColumnsModeChanged(class System.Windows.Forms.DataGridViewAutoSizeColumnsModeEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnAutoSizeColumnsModeChanged(System.Windows.Forms.DataGridViewAutoSizeColumnsModeEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnAutoSizeColumnsModeChanged (e As DataGridViewAutoSizeColumnsModeEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnAutoSizeColumnsModeChanged(System::Windows::Forms::DataGridViewAutoSizeColumnsModeEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnAutoSizeColumnsModeChanged : System.Windows.Forms.DataGridViewAutoSizeColumnsModeEventArgs -&gt; unit&#xA;override this.OnAutoSizeColumnsModeChanged : System.Windows.Forms.DataGridViewAutoSizeColumnsModeEventArgs -&gt; unit" Usage="dataGridView.OnAutoSizeColumnsModeChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewAutoSizeColumnsModeEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.Windows.Forms.DataGridViewAutoSizeColumnsModeEventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.DataGridView.AutoSizeColumnsModeChanged" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
 <xref:System.Windows.Forms.DataGridView.OnAutoSizeColumnsModeChanged%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="e" /> 的 <see cref="P:System.Windows.Forms.DataGridViewAutoSizeColumnsModeEventArgs.PreviousModes" /> 属性的值为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">由 <paramref name="e" /> 的 <see cref="P:System.Windows.Forms.DataGridViewAutoSizeColumnsModeEventArgs.PreviousModes" /> 属性返回的数组中的条目数不等于此控件中的列数。</exception>
        <block subset="none" type="overrides"><para>当 <see cref="M:System.Windows.Forms.DataGridView.OnAutoSizeColumnsModeChanged(System.Windows.Forms.DataGridViewAutoSizeColumnsModeEventArgs)" /> 在派生类中重写时，请确保调用基类的 <see cref="M:System.Windows.Forms.DataGridView.OnAutoSizeColumnsModeChanged(System.Windows.Forms.DataGridViewAutoSizeColumnsModeEventArgs)" /> 方法，以便注册的委托接收事件。</para></block>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="OnAutoSizeRowsModeChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnAutoSizeRowsModeChanged (System.Windows.Forms.DataGridViewAutoSizeModeEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnAutoSizeRowsModeChanged(class System.Windows.Forms.DataGridViewAutoSizeModeEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnAutoSizeRowsModeChanged(System.Windows.Forms.DataGridViewAutoSizeModeEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnAutoSizeRowsModeChanged (e As DataGridViewAutoSizeModeEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnAutoSizeRowsModeChanged(System::Windows::Forms::DataGridViewAutoSizeModeEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnAutoSizeRowsModeChanged : System.Windows.Forms.DataGridViewAutoSizeModeEventArgs -&gt; unit&#xA;override this.OnAutoSizeRowsModeChanged : System.Windows.Forms.DataGridViewAutoSizeModeEventArgs -&gt; unit" Usage="dataGridView.OnAutoSizeRowsModeChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewAutoSizeModeEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.Windows.Forms.DataGridViewAutoSizeModeEventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.DataGridView.AutoSizeRowsModeChanged" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
 <xref:System.Windows.Forms.DataGridView.OnAutoSizeRowsModeChanged%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>在派生类中重写 <see cref="M:System.Windows.Forms.DataGridView.OnAutoSizeRowsModeChanged(System.Windows.Forms.DataGridViewAutoSizeModeEventArgs)" /> 时，一定要调用基类的 <see cref="M:System.Windows.Forms.DataGridView.OnAutoSizeRowsModeChanged(System.Windows.Forms.DataGridViewAutoSizeModeEventArgs)" /> 方法，以便已注册的委托对事件进行接收。</para></block>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="OnBackgroundColorChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnBackgroundColorChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnBackgroundColorChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnBackgroundColorChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnBackgroundColorChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnBackgroundColorChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnBackgroundColorChanged : EventArgs -&gt; unit&#xA;override this.OnBackgroundColorChanged : EventArgs -&gt; unit" Usage="dataGridView.OnBackgroundColorChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.EventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.DataGridView.BackgroundColorChanged" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
 <xref:System.Windows.Forms.DataGridView.OnBackgroundColorChanged%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>在派生类中重写 <see cref="M:System.Windows.Forms.DataGridView.OnBackgroundColorChanged(System.EventArgs)" /> 时，一定要调用基类的 <see cref="M:System.Windows.Forms.DataGridView.OnBackgroundColorChanged(System.EventArgs)" /> 方法，以便已注册的委托对事件进行接收。</para></block>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="OnBindingContextChanged">
      <MemberSignature Language="C#" Value="protected override void OnBindingContextChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnBindingContextChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnBindingContextChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnBindingContextChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnBindingContextChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnBindingContextChanged : EventArgs -&gt; unit" Usage="dataGridView.OnBindingContextChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.EventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.Control.BindingContextChanged" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
 <xref:System.Windows.Forms.DataGridView.OnBindingContextChanged%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>在派生类中重写 <see cref="M:System.Windows.Forms.DataGridView.OnBindingContextChanged(System.EventArgs)" /> 时，一定要调用基类的 <see cref="M:System.Windows.Forms.DataGridView.OnBindingContextChanged(System.EventArgs)" /> 方法，以便已注册的委托对事件进行接收。</para></block>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="OnBorderStyleChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnBorderStyleChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnBorderStyleChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnBorderStyleChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnBorderStyleChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnBorderStyleChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnBorderStyleChanged : EventArgs -&gt; unit&#xA;override this.OnBorderStyleChanged : EventArgs -&gt; unit" Usage="dataGridView.OnBorderStyleChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.EventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.DataGridView.BorderStyleChanged" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
 <xref:System.Windows.Forms.DataGridView.OnBorderStyleChanged%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>在派生类中重写 <see cref="M:System.Windows.Forms.DataGridView.OnBorderStyleChanged(System.EventArgs)" /> 时，一定要调用基类的 <see cref="M:System.Windows.Forms.DataGridView.OnBorderStyleChanged(System.EventArgs)" /> 方法，以便已注册的委托对事件进行接收。</para></block>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="OnCancelRowEdit">
      <MemberSignature Language="C#" Value="protected virtual void OnCancelRowEdit (System.Windows.Forms.QuestionEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCancelRowEdit(class System.Windows.Forms.QuestionEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnCancelRowEdit(System.Windows.Forms.QuestionEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnCancelRowEdit (e As QuestionEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnCancelRowEdit(System::Windows::Forms::QuestionEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnCancelRowEdit : System.Windows.Forms.QuestionEventArgs -&gt; unit&#xA;override this.OnCancelRowEdit : System.Windows.Forms.QuestionEventArgs -&gt; unit" Usage="dataGridView.OnCancelRowEdit e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.QuestionEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.Windows.Forms.QuestionEventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.DataGridView.CancelRowEdit" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
 <xref:System.Windows.Forms.DataGridView.OnCancelRowEdit%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>在派生类中重写 <see cref="M:System.Windows.Forms.DataGridView.OnCancelRowEdit(System.Windows.Forms.QuestionEventArgs)" /> 时，一定要调用基类的 <see cref="M:System.Windows.Forms.DataGridView.OnCancelRowEdit(System.Windows.Forms.QuestionEventArgs)" /> 方法，以便已注册的委托对事件进行接收。</para></block>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="OnCellBeginEdit">
      <MemberSignature Language="C#" Value="protected virtual void OnCellBeginEdit (System.Windows.Forms.DataGridViewCellCancelEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCellBeginEdit(class System.Windows.Forms.DataGridViewCellCancelEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnCellBeginEdit(System.Windows.Forms.DataGridViewCellCancelEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnCellBeginEdit (e As DataGridViewCellCancelEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnCellBeginEdit(System::Windows::Forms::DataGridViewCellCancelEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnCellBeginEdit : System.Windows.Forms.DataGridViewCellCancelEventArgs -&gt; unit&#xA;override this.OnCellBeginEdit : System.Windows.Forms.DataGridViewCellCancelEventArgs -&gt; unit" Usage="dataGridView.OnCellBeginEdit e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewCellCancelEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.Windows.Forms.DataGridViewCellCancelEventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.DataGridView.CellBeginEdit" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
 <xref:System.Windows.Forms.DataGridView.OnCellBeginEdit%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="e" /> 的 <see cref="P:System.Windows.Forms.DataGridViewCellCancelEventArgs.ColumnIndex" /> 属性值大于控件中的列数减一。  
  
- 或 - 
<paramref name="e" /> 的 <see cref="P:System.Windows.Forms.DataGridViewCellCancelEventArgs.RowIndex" /> 属性值大于控件中的行数减一。</exception>
        <block subset="none" type="overrides"><para>在派生类中重写 <see cref="M:System.Windows.Forms.DataGridView.OnCellBeginEdit(System.Windows.Forms.DataGridViewCellCancelEventArgs)" /> 时，一定要调用基类的 <see cref="M:System.Windows.Forms.DataGridView.OnCellBeginEdit(System.Windows.Forms.DataGridViewCellCancelEventArgs)" /> 方法，以便已注册的委托对事件进行接收。</para></block>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="OnCellBorderStyleChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnCellBorderStyleChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCellBorderStyleChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnCellBorderStyleChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnCellBorderStyleChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnCellBorderStyleChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnCellBorderStyleChanged : EventArgs -&gt; unit&#xA;override this.OnCellBorderStyleChanged : EventArgs -&gt; unit" Usage="dataGridView.OnCellBorderStyleChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.EventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.DataGridView.CellBorderStyleChanged" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
 <xref:System.Windows.Forms.DataGridView.OnCellBorderStyleChanged%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>在派生类中重写 <see cref="M:System.Windows.Forms.DataGridView.OnCellBorderStyleChanged(System.EventArgs)" /> 时，一定要调用基类的 <see cref="M:System.Windows.Forms.DataGridView.OnCellBorderStyleChanged(System.EventArgs)" /> 方法，以便已注册的委托对事件进行接收。</para></block>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="OnCellClick">
      <MemberSignature Language="C#" Value="protected virtual void OnCellClick (System.Windows.Forms.DataGridViewCellEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCellClick(class System.Windows.Forms.DataGridViewCellEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnCellClick(System.Windows.Forms.DataGridViewCellEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnCellClick (e As DataGridViewCellEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnCellClick(System::Windows::Forms::DataGridViewCellEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnCellClick : System.Windows.Forms.DataGridViewCellEventArgs -&gt; unit&#xA;override this.OnCellClick : System.Windows.Forms.DataGridViewCellEventArgs -&gt; unit" Usage="dataGridView.OnCellClick e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewCellEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.Windows.Forms.DataGridViewCellEventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.DataGridView.CellClick" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
 <xref:System.Windows.Forms.DataGridView.OnCellClick%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="e" /> 的 <see cref="P:System.Windows.Forms.DataGridViewCellEventArgs.ColumnIndex" /> 属性值大于控件中的列数减一。  
  
- 或 - 
<paramref name="e" /> 的 <see cref="P:System.Windows.Forms.DataGridViewCellEventArgs.RowIndex" /> 属性值大于控件中的行数减一。</exception>
        <block subset="none" type="overrides"><para>在派生类中重写 <see cref="M:System.Windows.Forms.DataGridView.OnCellClick(System.Windows.Forms.DataGridViewCellEventArgs)" /> 时，一定要调用基类的 <see cref="M:System.Windows.Forms.DataGridView.OnCellClick(System.Windows.Forms.DataGridViewCellEventArgs)" /> 方法，以便已注册的委托对事件进行接收。</para></block>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="OnCellContentClick">
      <MemberSignature Language="C#" Value="protected virtual void OnCellContentClick (System.Windows.Forms.DataGridViewCellEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCellContentClick(class System.Windows.Forms.DataGridViewCellEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnCellContentClick(System.Windows.Forms.DataGridViewCellEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnCellContentClick (e As DataGridViewCellEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnCellContentClick(System::Windows::Forms::DataGridViewCellEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnCellContentClick : System.Windows.Forms.DataGridViewCellEventArgs -&gt; unit&#xA;override this.OnCellContentClick : System.Windows.Forms.DataGridViewCellEventArgs -&gt; unit" Usage="dataGridView.OnCellContentClick e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewCellEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">一个 <see cref="T:System.Windows.Forms.DataGridViewCellEventArgs" />，包含有关内容被单击的单元格的信息。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.DataGridView.CellContentClick" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
 <xref:System.Windows.Forms.DataGridView.OnCellContentClick%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="e" /> 的 <see cref="P:System.Windows.Forms.DataGridViewCellEventArgs.ColumnIndex" /> 属性值大于控件中的列数减一。  
  
- 或 - 
<paramref name="e" /> 的 <see cref="P:System.Windows.Forms.DataGridViewCellEventArgs.RowIndex" /> 属性值大于控件中的行数减一。</exception>
        <block subset="none" type="overrides"><para>当 <see cref="M:System.Windows.Forms.DataGridView.OnCellContentClick(System.Windows.Forms.DataGridViewCellEventArgs)" /> 在派生类中重写时，请确保调用基类的 <see cref="M:System.Windows.Forms.DataGridView.OnCellContentClick(System.Windows.Forms.DataGridViewCellEventArgs)" /> 方法，以便注册的委托接收事件。</para></block>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="OnCellContentDoubleClick">
      <MemberSignature Language="C#" Value="protected virtual void OnCellContentDoubleClick (System.Windows.Forms.DataGridViewCellEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCellContentDoubleClick(class System.Windows.Forms.DataGridViewCellEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnCellContentDoubleClick(System.Windows.Forms.DataGridViewCellEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnCellContentDoubleClick (e As DataGridViewCellEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnCellContentDoubleClick(System::Windows::Forms::DataGridViewCellEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnCellContentDoubleClick : System.Windows.Forms.DataGridViewCellEventArgs -&gt; unit&#xA;override this.OnCellContentDoubleClick : System.Windows.Forms.DataGridViewCellEventArgs -&gt; unit" Usage="dataGridView.OnCellContentDoubleClick e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewCellEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.Windows.Forms.DataGridViewCellEventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.DataGridView.CellContentDoubleClick" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
 <xref:System.Windows.Forms.DataGridView.OnCellContentDoubleClick%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="e" /> 的 <see cref="P:System.Windows.Forms.DataGridViewCellEventArgs.ColumnIndex" /> 属性值大于控件中的列数减一。  
  
- 或 - 
<paramref name="e" /> 的 <see cref="P:System.Windows.Forms.DataGridViewCellEventArgs.RowIndex" /> 属性值大于控件中的行数减一。</exception>
        <block subset="none" type="overrides"><para>当 <see cref="M:System.Windows.Forms.DataGridView.OnCellContentDoubleClick(System.Windows.Forms.DataGridViewCellEventArgs)" /> 在派生类中重写时，请确保调用基类的 <see cref="M:System.Windows.Forms.DataGridView.OnCellContentDoubleClick(System.Windows.Forms.DataGridViewCellEventArgs)" /> 方法，以便注册的委托接收事件。</para></block>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="OnCellContextMenuStripChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnCellContextMenuStripChanged (System.Windows.Forms.DataGridViewCellEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCellContextMenuStripChanged(class System.Windows.Forms.DataGridViewCellEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnCellContextMenuStripChanged(System.Windows.Forms.DataGridViewCellEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnCellContextMenuStripChanged (e As DataGridViewCellEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnCellContextMenuStripChanged(System::Windows::Forms::DataGridViewCellEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnCellContextMenuStripChanged : System.Windows.Forms.DataGridViewCellEventArgs -&gt; unit&#xA;override this.OnCellContextMenuStripChanged : System.Windows.Forms.DataGridViewCellEventArgs -&gt; unit" Usage="dataGridView.OnCellContextMenuStripChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewCellEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.Windows.Forms.DataGridViewCellEventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.DataGridView.CellContextMenuStripChanged" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
 <xref:System.Windows.Forms.DataGridView.OnCellContextMenuStripChanged%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="e" /> 的 <see cref="P:System.Windows.Forms.DataGridViewCellEventArgs.ColumnIndex" /> 属性值大于控件中的列数减一。  
  
- 或 - 
<paramref name="e" /> 的 <see cref="P:System.Windows.Forms.DataGridViewCellEventArgs.RowIndex" /> 属性值大于控件中的行数减一。</exception>
        <block subset="none" type="overrides"><para>当 <see cref="M:System.Windows.Forms.DataGridView.OnCellContextMenuStripChanged(System.Windows.Forms.DataGridViewCellEventArgs)" /> 在派生类中重写时，请确保调用基类的 <see cref="M:System.Windows.Forms.DataGridView.OnCellContextMenuStripChanged(System.Windows.Forms.DataGridViewCellEventArgs)" /> 方法，以便注册的委托接收事件。</para></block>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="OnCellContextMenuStripNeeded">
      <MemberSignature Language="C#" Value="protected virtual void OnCellContextMenuStripNeeded (System.Windows.Forms.DataGridViewCellContextMenuStripNeededEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCellContextMenuStripNeeded(class System.Windows.Forms.DataGridViewCellContextMenuStripNeededEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnCellContextMenuStripNeeded(System.Windows.Forms.DataGridViewCellContextMenuStripNeededEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnCellContextMenuStripNeeded (e As DataGridViewCellContextMenuStripNeededEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnCellContextMenuStripNeeded(System::Windows::Forms::DataGridViewCellContextMenuStripNeededEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnCellContextMenuStripNeeded : System.Windows.Forms.DataGridViewCellContextMenuStripNeededEventArgs -&gt; unit&#xA;override this.OnCellContextMenuStripNeeded : System.Windows.Forms.DataGridViewCellContextMenuStripNeededEventArgs -&gt; unit" Usage="dataGridView.OnCellContextMenuStripNeeded e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewCellContextMenuStripNeededEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.Windows.Forms.DataGridViewCellContextMenuStripNeededEventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.DataGridView.CellContextMenuStripNeeded" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
 <xref:System.Windows.Forms.DataGridView.OnCellContextMenuStripNeeded%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="e" /> 的 <see cref="P:System.Windows.Forms.DataGridViewCellEventArgs.ColumnIndex" /> 属性值大于控件中的列数减一。  
  
- 或 - 
<paramref name="e" /> 的 <see cref="P:System.Windows.Forms.DataGridViewCellEventArgs.RowIndex" /> 属性值大于控件中的行数减一。</exception>
        <block subset="none" type="overrides"><para>当 <see cref="M:System.Windows.Forms.DataGridView.OnCellContextMenuStripNeeded(System.Windows.Forms.DataGridViewCellContextMenuStripNeededEventArgs)" /> 在派生类中重写时，请确保调用基类的 <see cref="M:System.Windows.Forms.DataGridView.OnCellContextMenuStripNeeded(System.Windows.Forms.DataGridViewCellContextMenuStripNeededEventArgs)" /> 方法，以便注册的委托接收事件。</para></block>
        <altmember cref="E:System.Windows.Forms.DataGridView.CellContextMenuStripNeeded" />
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="OnCellDoubleClick">
      <MemberSignature Language="C#" Value="protected virtual void OnCellDoubleClick (System.Windows.Forms.DataGridViewCellEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCellDoubleClick(class System.Windows.Forms.DataGridViewCellEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnCellDoubleClick(System.Windows.Forms.DataGridViewCellEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnCellDoubleClick (e As DataGridViewCellEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnCellDoubleClick(System::Windows::Forms::DataGridViewCellEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnCellDoubleClick : System.Windows.Forms.DataGridViewCellEventArgs -&gt; unit&#xA;override this.OnCellDoubleClick : System.Windows.Forms.DataGridViewCellEventArgs -&gt; unit" Usage="dataGridView.OnCellDoubleClick e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewCellEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.Windows.Forms.DataGridViewCellEventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.DataGridView.CellDoubleClick" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
 <xref:System.Windows.Forms.DataGridView.OnCellDoubleClick%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="e" /> 的 <see cref="P:System.Windows.Forms.DataGridViewCellEventArgs.ColumnIndex" /> 属性值大于控件中的列数减一。  
  
- 或 - 
<paramref name="e" /> 的 <see cref="P:System.Windows.Forms.DataGridViewCellEventArgs.RowIndex" /> 属性值大于控件中的行数减一。</exception>
        <block subset="none" type="overrides"><para>当 <see cref="M:System.Windows.Forms.DataGridView.OnCellDoubleClick(System.Windows.Forms.DataGridViewCellEventArgs)" /> 在派生类中重写时，请确保调用基类的 <see cref="M:System.Windows.Forms.DataGridView.OnCellDoubleClick(System.Windows.Forms.DataGridViewCellEventArgs)" /> 方法，以便注册的委托接收事件。</para></block>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="OnCellEndEdit">
      <MemberSignature Language="C#" Value="protected virtual void OnCellEndEdit (System.Windows.Forms.DataGridViewCellEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCellEndEdit(class System.Windows.Forms.DataGridViewCellEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnCellEndEdit(System.Windows.Forms.DataGridViewCellEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnCellEndEdit (e As DataGridViewCellEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnCellEndEdit(System::Windows::Forms::DataGridViewCellEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnCellEndEdit : System.Windows.Forms.DataGridViewCellEventArgs -&gt; unit&#xA;override this.OnCellEndEdit : System.Windows.Forms.DataGridViewCellEventArgs -&gt; unit" Usage="dataGridView.OnCellEndEdit e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewCellEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.Windows.Forms.DataGridViewCellEventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.DataGridView.CellEndEdit" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
 <xref:System.Windows.Forms.DataGridView.OnCellEndEdit%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="e" /> 的 <see cref="P:System.Windows.Forms.DataGridViewCellEventArgs.ColumnIndex" /> 属性值大于控件中的列数减一。  
  
- 或 - 
<paramref name="e" /> 的 <see cref="P:System.Windows.Forms.DataGridViewCellEventArgs.RowIndex" /> 属性值大于控件中的行数减一。</exception>
        <block subset="none" type="overrides"><para>在派生类中重写 <see cref="M:System.Windows.Forms.DataGridView.OnCellEndEdit(System.Windows.Forms.DataGridViewCellEventArgs)" /> 时，一定要调用基类的 <see cref="M:System.Windows.Forms.DataGridView.OnCellEndEdit(System.Windows.Forms.DataGridViewCellEventArgs)" /> 方法，以便已注册的委托对事件进行接收。</para></block>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="OnCellEnter">
      <MemberSignature Language="C#" Value="protected virtual void OnCellEnter (System.Windows.Forms.DataGridViewCellEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCellEnter(class System.Windows.Forms.DataGridViewCellEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnCellEnter(System.Windows.Forms.DataGridViewCellEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnCellEnter (e As DataGridViewCellEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnCellEnter(System::Windows::Forms::DataGridViewCellEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnCellEnter : System.Windows.Forms.DataGridViewCellEventArgs -&gt; unit&#xA;override this.OnCellEnter : System.Windows.Forms.DataGridViewCellEventArgs -&gt; unit" Usage="dataGridView.OnCellEnter e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewCellEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.Windows.Forms.DataGridViewCellEventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.DataGridView.CellEnter" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
 <xref:System.Windows.Forms.DataGridView.OnCellEnter%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="e" /> 的 <see cref="P:System.Windows.Forms.DataGridViewCellEventArgs.ColumnIndex" /> 属性值大于控件中的列数减一。  
  
- 或 - 
<paramref name="e" /> 的 <see cref="P:System.Windows.Forms.DataGridViewCellEventArgs.RowIndex" /> 属性值大于控件中的行数减一。</exception>
        <block subset="none" type="overrides"><para>在派生类中重写 <see cref="M:System.Windows.Forms.DataGridView.OnCellEnter(System.Windows.Forms.DataGridViewCellEventArgs)" /> 时，一定要调用基类的 <see cref="M:System.Windows.Forms.DataGridView.OnCellEnter(System.Windows.Forms.DataGridViewCellEventArgs)" /> 方法，以便已注册的委托对事件进行接收。</para></block>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="OnCellErrorTextChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnCellErrorTextChanged (System.Windows.Forms.DataGridViewCellEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCellErrorTextChanged(class System.Windows.Forms.DataGridViewCellEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnCellErrorTextChanged(System.Windows.Forms.DataGridViewCellEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnCellErrorTextChanged (e As DataGridViewCellEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnCellErrorTextChanged(System::Windows::Forms::DataGridViewCellEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnCellErrorTextChanged : System.Windows.Forms.DataGridViewCellEventArgs -&gt; unit&#xA;override this.OnCellErrorTextChanged : System.Windows.Forms.DataGridViewCellEventArgs -&gt; unit" Usage="dataGridView.OnCellErrorTextChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewCellEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.Windows.Forms.DataGridViewCellEventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.DataGridView.CellErrorTextChanged" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
 <xref:System.Windows.Forms.DataGridView.OnCellErrorTextChanged%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="e" /> 的 <see cref="P:System.Windows.Forms.DataGridViewCellEventArgs.ColumnIndex" /> 属性值小于 -1 或大于控件中的列数减一。  
  
- 或 - 
<paramref name="e" /> 的 <see cref="P:System.Windows.Forms.DataGridViewCellEventArgs.RowIndex" /> 属性值小于 -1 或大于控件中的行数减一。</exception>
        <block subset="none" type="overrides"><para>在派生类中重写 <see cref="M:System.Windows.Forms.DataGridView.OnCellErrorTextChanged(System.Windows.Forms.DataGridViewCellEventArgs)" /> 时，一定要调用基类的 <see cref="M:System.Windows.Forms.DataGridView.OnCellErrorTextChanged(System.Windows.Forms.DataGridViewCellEventArgs)" /> 方法，以便已注册的委托对事件进行接收。</para></block>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="OnCellErrorTextNeeded">
      <MemberSignature Language="C#" Value="protected virtual void OnCellErrorTextNeeded (System.Windows.Forms.DataGridViewCellErrorTextNeededEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCellErrorTextNeeded(class System.Windows.Forms.DataGridViewCellErrorTextNeededEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnCellErrorTextNeeded(System.Windows.Forms.DataGridViewCellErrorTextNeededEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnCellErrorTextNeeded (e As DataGridViewCellErrorTextNeededEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnCellErrorTextNeeded(System::Windows::Forms::DataGridViewCellErrorTextNeededEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnCellErrorTextNeeded : System.Windows.Forms.DataGridViewCellErrorTextNeededEventArgs -&gt; unit&#xA;override this.OnCellErrorTextNeeded : System.Windows.Forms.DataGridViewCellErrorTextNeededEventArgs -&gt; unit" Usage="dataGridView.OnCellErrorTextNeeded e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewCellErrorTextNeededEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.Windows.Forms.DataGridViewCellErrorTextNeededEventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.DataGridView.CellErrorTextNeeded" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
 <xref:System.Windows.Forms.DataGridView.OnCellErrorTextNeeded%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="e" /> 的 <see cref="P:System.Windows.Forms.DataGridViewCellEventArgs.ColumnIndex" /> 属性值大于控件中的列数减一。  
  
- 或 - 
<paramref name="e" /> 的 <see cref="P:System.Windows.Forms.DataGridViewCellEventArgs.RowIndex" /> 属性值大于控件中的行数减一。</exception>
        <block subset="none" type="overrides"><para>当 <see cref="M:System.Windows.Forms.DataGridView.OnCellErrorTextNeeded(System.Windows.Forms.DataGridViewCellErrorTextNeededEventArgs)" /> 在派生类中重写时，请确保调用基类的 <see cref="M:System.Windows.Forms.DataGridView.OnCellErrorTextNeeded(System.Windows.Forms.DataGridViewCellErrorTextNeededEventArgs)" /> 方法，以便注册的委托接收事件。</para></block>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="OnCellFormatting">
      <MemberSignature Language="C#" Value="protected virtual void OnCellFormatting (System.Windows.Forms.DataGridViewCellFormattingEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCellFormatting(class System.Windows.Forms.DataGridViewCellFormattingEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnCellFormatting(System.Windows.Forms.DataGridViewCellFormattingEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnCellFormatting (e As DataGridViewCellFormattingEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnCellFormatting(System::Windows::Forms::DataGridViewCellFormattingEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnCellFormatting : System.Windows.Forms.DataGridViewCellFormattingEventArgs -&gt; unit&#xA;override this.OnCellFormatting : System.Windows.Forms.DataGridViewCellFormattingEventArgs -&gt; unit" Usage="dataGridView.OnCellFormatting e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewCellFormattingEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.Windows.Forms.DataGridViewCellFormattingEventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.DataGridView.CellFormatting" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
 <xref:System.Windows.Forms.DataGridView.OnCellFormatting%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="e" /> 的 <see cref="P:System.Windows.Forms.DataGridViewCellFormattingEventArgs.ColumnIndex" /> 属性值大于控件中的列数减一。  
  
- 或 - 
<paramref name="e" /> 的 <see cref="P:System.Windows.Forms.DataGridViewCellFormattingEventArgs.RowIndex" /> 属性值大于控件中的行数减一。</exception>
        <block subset="none" type="overrides"><para>在派生类中重写 <see cref="M:System.Windows.Forms.DataGridView.OnCellFormatting(System.Windows.Forms.DataGridViewCellFormattingEventArgs)" /> 时，一定要调用基类的 <see cref="M:System.Windows.Forms.DataGridView.OnCellFormatting(System.Windows.Forms.DataGridViewCellFormattingEventArgs)" /> 方法，以便已注册的委托对事件进行接收。</para></block>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="OnCellLeave">
      <MemberSignature Language="C#" Value="protected virtual void OnCellLeave (System.Windows.Forms.DataGridViewCellEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCellLeave(class System.Windows.Forms.DataGridViewCellEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnCellLeave(System.Windows.Forms.DataGridViewCellEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnCellLeave (e As DataGridViewCellEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnCellLeave(System::Windows::Forms::DataGridViewCellEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnCellLeave : System.Windows.Forms.DataGridViewCellEventArgs -&gt; unit&#xA;override this.OnCellLeave : System.Windows.Forms.DataGridViewCellEventArgs -&gt; unit" Usage="dataGridView.OnCellLeave e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewCellEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.Windows.Forms.DataGridViewCellEventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.DataGridView.CellLeave" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
 <xref:System.Windows.Forms.DataGridView.OnCellLeave%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="e" /> 的 <see cref="P:System.Windows.Forms.DataGridViewCellEventArgs.ColumnIndex" /> 属性值大于控件中的列数减一。  
  
- 或 - 
<paramref name="e" /> 的 <see cref="P:System.Windows.Forms.DataGridViewCellEventArgs.RowIndex" /> 属性值大于控件中的行数减一。</exception>
        <block subset="none" type="overrides"><para>在派生类中重写 <see cref="M:System.Windows.Forms.DataGridView.OnCellLeave(System.Windows.Forms.DataGridViewCellEventArgs)" /> 时，一定要调用基类的 <see cref="M:System.Windows.Forms.DataGridView.OnCellLeave(System.Windows.Forms.DataGridViewCellEventArgs)" /> 方法，以便已注册的委托对事件进行接收。</para></block>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="OnCellMouseClick">
      <MemberSignature Language="C#" Value="protected virtual void OnCellMouseClick (System.Windows.Forms.DataGridViewCellMouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCellMouseClick(class System.Windows.Forms.DataGridViewCellMouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnCellMouseClick(System.Windows.Forms.DataGridViewCellMouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnCellMouseClick (e As DataGridViewCellMouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnCellMouseClick(System::Windows::Forms::DataGridViewCellMouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnCellMouseClick : System.Windows.Forms.DataGridViewCellMouseEventArgs -&gt; unit&#xA;override this.OnCellMouseClick : System.Windows.Forms.DataGridViewCellMouseEventArgs -&gt; unit" Usage="dataGridView.OnCellMouseClick e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewCellMouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.Windows.Forms.DataGridViewCellMouseEventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.DataGridView.CellMouseClick" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
 <xref:System.Windows.Forms.DataGridView.OnCellMouseClick%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="e" /> 的 <see cref="P:System.Windows.Forms.DataGridViewCellMouseEventArgs.ColumnIndex" /> 属性值大于控件中的列数减一。  
  
- 或 - 
<paramref name="e" /> 的 <see cref="P:System.Windows.Forms.DataGridViewCellMouseEventArgs.RowIndex" /> 属性值大于控件中的行数减一。</exception>
        <block subset="none" type="overrides"><para>在派生类中重写 <see cref="M:System.Windows.Forms.DataGridView.OnCellMouseClick(System.Windows.Forms.DataGridViewCellMouseEventArgs)" /> 时，一定要调用基类的 <see cref="M:System.Windows.Forms.DataGridView.OnCellMouseClick(System.Windows.Forms.DataGridViewCellMouseEventArgs)" /> 方法，以便已注册的委托对事件进行接收。</para></block>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="OnCellMouseDoubleClick">
      <MemberSignature Language="C#" Value="protected virtual void OnCellMouseDoubleClick (System.Windows.Forms.DataGridViewCellMouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCellMouseDoubleClick(class System.Windows.Forms.DataGridViewCellMouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnCellMouseDoubleClick(System.Windows.Forms.DataGridViewCellMouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnCellMouseDoubleClick (e As DataGridViewCellMouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnCellMouseDoubleClick(System::Windows::Forms::DataGridViewCellMouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnCellMouseDoubleClick : System.Windows.Forms.DataGridViewCellMouseEventArgs -&gt; unit&#xA;override this.OnCellMouseDoubleClick : System.Windows.Forms.DataGridViewCellMouseEventArgs -&gt; unit" Usage="dataGridView.OnCellMouseDoubleClick e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewCellMouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.Windows.Forms.DataGridViewCellMouseEventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.DataGridView.CellMouseDoubleClick" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 通常，双击某个单元会使该单元格进入编辑模式。  
  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
 <xref:System.Windows.Forms.DataGridView.OnCellMouseDoubleClick%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="e" /> 的 <see cref="P:System.Windows.Forms.DataGridViewCellMouseEventArgs.ColumnIndex" /> 属性值大于控件中的列数减一。  
  
- 或 - 
<paramref name="e" /> 的 <see cref="P:System.Windows.Forms.DataGridViewCellMouseEventArgs.RowIndex" /> 属性值大于控件中的行数减一。</exception>
        <block subset="none" type="overrides"><para>当 <see cref="M:System.Windows.Forms.DataGridView.OnCellMouseDoubleClick(System.Windows.Forms.DataGridViewCellMouseEventArgs)" /> 在派生类中重写时，请确保调用基类的 <see cref="M:System.Windows.Forms.DataGridView.OnCellMouseDoubleClick(System.Windows.Forms.DataGridViewCellMouseEventArgs)" /> 方法，以便注册的委托接收事件。</para></block>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="OnCellMouseDown">
      <MemberSignature Language="C#" Value="protected virtual void OnCellMouseDown (System.Windows.Forms.DataGridViewCellMouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCellMouseDown(class System.Windows.Forms.DataGridViewCellMouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnCellMouseDown(System.Windows.Forms.DataGridViewCellMouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnCellMouseDown (e As DataGridViewCellMouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnCellMouseDown(System::Windows::Forms::DataGridViewCellMouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnCellMouseDown : System.Windows.Forms.DataGridViewCellMouseEventArgs -&gt; unit&#xA;override this.OnCellMouseDown : System.Windows.Forms.DataGridViewCellMouseEventArgs -&gt; unit" Usage="dataGridView.OnCellMouseDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewCellMouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.Windows.Forms.DataGridViewCellMouseEventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.DataGridView.CellMouseDown" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
 <xref:System.Windows.Forms.DataGridView.OnCellMouseDown%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="e" /> 的 <see cref="P:System.Windows.Forms.DataGridViewCellMouseEventArgs.ColumnIndex" /> 属性值大于控件中的列数减一。  
  
- 或 - 
<paramref name="e" /> 的 <see cref="P:System.Windows.Forms.DataGridViewCellMouseEventArgs.RowIndex" /> 属性值大于控件中的行数减一。</exception>
        <exception cref="T:System.Exception">此操作将提交一个单元格值或者进入编辑模式，但是数据源中的错误禁止执行此操作，<see cref="E:System.Windows.Forms.DataGridView.DataError" /> 事件没有处理程序，或者处理程序已将 <see cref="P:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException" /> 属性设置为 <see langword="true" />。</exception>
        <block subset="none" type="overrides"><para>在派生类中重写 <see cref="M:System.Windows.Forms.DataGridView.OnCellMouseDown(System.Windows.Forms.DataGridViewCellMouseEventArgs)" /> 时，一定要调用基类的 <see cref="M:System.Windows.Forms.DataGridView.OnCellMouseDown(System.Windows.Forms.DataGridViewCellMouseEventArgs)" /> 方法，以便已注册的委托对事件进行接收。</para></block>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="OnCellMouseEnter">
      <MemberSignature Language="C#" Value="protected virtual void OnCellMouseEnter (System.Windows.Forms.DataGridViewCellEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCellMouseEnter(class System.Windows.Forms.DataGridViewCellEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnCellMouseEnter(System.Windows.Forms.DataGridViewCellEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnCellMouseEnter (e As DataGridViewCellEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnCellMouseEnter(System::Windows::Forms::DataGridViewCellEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnCellMouseEnter : System.Windows.Forms.DataGridViewCellEventArgs -&gt; unit&#xA;override this.OnCellMouseEnter : System.Windows.Forms.DataGridViewCellEventArgs -&gt; unit" Usage="dataGridView.OnCellMouseEnter e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewCellEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.Windows.Forms.DataGridViewCellEventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.DataGridView.CellMouseEnter" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
 <xref:System.Windows.Forms.DataGridView.OnCellMouseEnter%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="e" /> 的 <see cref="P:System.Windows.Forms.DataGridViewCellEventArgs.ColumnIndex" /> 属性值大于控件中的列数减一。  
  
- 或 - 
<paramref name="e" /> 的 <see cref="P:System.Windows.Forms.DataGridViewCellEventArgs.RowIndex" /> 属性值大于控件中的行数减一。</exception>
        <block subset="none" type="overrides"><para>在派生类中重写 <see cref="M:System.Windows.Forms.DataGridView.OnCellMouseEnter(System.Windows.Forms.DataGridViewCellEventArgs)" /> 时，一定要调用基类的 <see cref="M:System.Windows.Forms.DataGridView.OnCellMouseEnter(System.Windows.Forms.DataGridViewCellEventArgs)" /> 方法，以便已注册的委托对事件进行接收。</para></block>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="OnCellMouseLeave">
      <MemberSignature Language="C#" Value="protected virtual void OnCellMouseLeave (System.Windows.Forms.DataGridViewCellEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCellMouseLeave(class System.Windows.Forms.DataGridViewCellEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnCellMouseLeave(System.Windows.Forms.DataGridViewCellEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnCellMouseLeave (e As DataGridViewCellEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnCellMouseLeave(System::Windows::Forms::DataGridViewCellEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnCellMouseLeave : System.Windows.Forms.DataGridViewCellEventArgs -&gt; unit&#xA;override this.OnCellMouseLeave : System.Windows.Forms.DataGridViewCellEventArgs -&gt; unit" Usage="dataGridView.OnCellMouseLeave e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewCellEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.Windows.Forms.DataGridViewCellEventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.DataGridView.CellMouseLeave" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
 <xref:System.Windows.Forms.DataGridView.OnCellMouseLeave%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="e" /> 的 <see cref="P:System.Windows.Forms.DataGridViewCellEventArgs.ColumnIndex" /> 属性值大于控件中的列数减一。  
  
- 或 - 
<paramref name="e" /> 的 <see cref="P:System.Windows.Forms.DataGridViewCellEventArgs.RowIndex" /> 属性值大于控件中的行数减一。</exception>
        <block subset="none" type="overrides"><para>在派生类中重写 <see cref="M:System.Windows.Forms.DataGridView.OnCellMouseLeave(System.Windows.Forms.DataGridViewCellEventArgs)" /> 时，一定要调用基类的 <see cref="M:System.Windows.Forms.DataGridView.OnCellMouseLeave(System.Windows.Forms.DataGridViewCellEventArgs)" /> 方法，以便已注册的委托对事件进行接收。</para></block>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="OnCellMouseMove">
      <MemberSignature Language="C#" Value="protected virtual void OnCellMouseMove (System.Windows.Forms.DataGridViewCellMouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCellMouseMove(class System.Windows.Forms.DataGridViewCellMouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnCellMouseMove(System.Windows.Forms.DataGridViewCellMouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnCellMouseMove (e As DataGridViewCellMouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnCellMouseMove(System::Windows::Forms::DataGridViewCellMouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnCellMouseMove : System.Windows.Forms.DataGridViewCellMouseEventArgs -&gt; unit&#xA;override this.OnCellMouseMove : System.Windows.Forms.DataGridViewCellMouseEventArgs -&gt; unit" Usage="dataGridView.OnCellMouseMove e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewCellMouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.Windows.Forms.DataGridViewCellMouseEventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.DataGridView.CellMouseMove" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
 <xref:System.Windows.Forms.DataGridView.OnCellMouseMove%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="e" /> 的 <see cref="P:System.Windows.Forms.DataGridViewCellMouseEventArgs.ColumnIndex" /> 属性值大于控件中的列数减一。  
  
- 或 - 
<paramref name="e" /> 的 <see cref="P:System.Windows.Forms.DataGridViewCellMouseEventArgs.RowIndex" /> 属性值大于控件中的行数减一。</exception>
        <block subset="none" type="overrides"><para>在派生类中重写 <see cref="M:System.Windows.Forms.DataGridView.OnCellMouseMove(System.Windows.Forms.DataGridViewCellMouseEventArgs)" /> 时，一定要调用基类的 <see cref="M:System.Windows.Forms.DataGridView.OnCellMouseMove(System.Windows.Forms.DataGridViewCellMouseEventArgs)" /> 方法，以便已注册的委托对事件进行接收。</para></block>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="OnCellMouseUp">
      <MemberSignature Language="C#" Value="protected virtual void OnCellMouseUp (System.Windows.Forms.DataGridViewCellMouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCellMouseUp(class System.Windows.Forms.DataGridViewCellMouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnCellMouseUp(System.Windows.Forms.DataGridViewCellMouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnCellMouseUp (e As DataGridViewCellMouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnCellMouseUp(System::Windows::Forms::DataGridViewCellMouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnCellMouseUp : System.Windows.Forms.DataGridViewCellMouseEventArgs -&gt; unit&#xA;override this.OnCellMouseUp : System.Windows.Forms.DataGridViewCellMouseEventArgs -&gt; unit" Usage="dataGridView.OnCellMouseUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewCellMouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.Windows.Forms.DataGridViewCellMouseEventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.DataGridView.CellMouseUp" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
 <xref:System.Windows.Forms.DataGridView.OnCellMouseUp%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="e" /> 的 <see cref="P:System.Windows.Forms.DataGridViewCellMouseEventArgs.ColumnIndex" /> 属性值大于控件中的列数减一。  
  
- 或 - 
<paramref name="e" /> 的 <see cref="P:System.Windows.Forms.DataGridViewCellMouseEventArgs.RowIndex" /> 属性值大于控件中的行数减一。</exception>
        <block subset="none" type="overrides"><para>在派生类中重写 <see cref="M:System.Windows.Forms.DataGridView.OnCellMouseUp(System.Windows.Forms.DataGridViewCellMouseEventArgs)" /> 时，一定要调用基类的 <see cref="M:System.Windows.Forms.DataGridView.OnCellMouseUp(System.Windows.Forms.DataGridViewCellMouseEventArgs)" /> 方法，以便已注册的委托对事件进行接收。</para></block>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="OnCellPainting">
      <MemberSignature Language="C#" Value="protected internal virtual void OnCellPainting (System.Windows.Forms.DataGridViewCellPaintingEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnCellPainting(class System.Windows.Forms.DataGridViewCellPaintingEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnCellPainting(System.Windows.Forms.DataGridViewCellPaintingEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnCellPainting (e As DataGridViewCellPaintingEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnCellPainting(System::Windows::Forms::DataGridViewCellPaintingEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnCellPainting : System.Windows.Forms.DataGridViewCellPaintingEventArgs -&gt; unit&#xA;override this.OnCellPainting : System.Windows.Forms.DataGridViewCellPaintingEventArgs -&gt; unit" Usage="dataGridView.OnCellPainting e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewCellPaintingEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.Windows.Forms.DataGridViewCellPaintingEventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.DataGridView.CellPainting" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
 <xref:System.Windows.Forms.DataGridView.OnCellPainting%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="e" /> 的 <see cref="P:System.Windows.Forms.DataGridViewCellPaintingEventArgs.ColumnIndex" /> 属性值大于控件中的列数减一。  
  
- 或 - 
<paramref name="e" /> 的 <see cref="P:System.Windows.Forms.DataGridViewCellPaintingEventArgs.RowIndex" /> 属性值大于控件中的行数减一。</exception>
        <block subset="none" type="overrides"><para>在派生类中重写 <see cref="M:System.Windows.Forms.DataGridView.OnCellPainting(System.Windows.Forms.DataGridViewCellPaintingEventArgs)" /> 时，一定要调用基类的 <see cref="M:System.Windows.Forms.DataGridView.OnCellPainting(System.Windows.Forms.DataGridViewCellPaintingEventArgs)" /> 方法，以便已注册的委托对事件进行接收。</para></block>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="OnCellParsing">
      <MemberSignature Language="C#" Value="protected virtual void OnCellParsing (System.Windows.Forms.DataGridViewCellParsingEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCellParsing(class System.Windows.Forms.DataGridViewCellParsingEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnCellParsing(System.Windows.Forms.DataGridViewCellParsingEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnCellParsing (e As DataGridViewCellParsingEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnCellParsing(System::Windows::Forms::DataGridViewCellParsingEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnCellParsing : System.Windows.Forms.DataGridViewCellParsingEventArgs -&gt; unit&#xA;override this.OnCellParsing : System.Windows.Forms.DataGridViewCellParsingEventArgs -&gt; unit" Usage="dataGridView.OnCellParsing e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewCellParsingEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.Windows.Forms.DataGridViewCellParsingEventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.DataGridView.CellParsing" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
 <xref:System.Windows.Forms.DataGridView.OnCellParsing%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="e" /> 的 <see cref="P:System.Windows.Forms.DataGridViewCellParsingEventArgs.ColumnIndex" /> 属性值大于控件中的列数减一。  
  
- 或 - 
<paramref name="e" /> 的 <see cref="P:System.Windows.Forms.DataGridViewCellParsingEventArgs.RowIndex" /> 属性值大于控件中的行数减一。</exception>
        <block subset="none" type="overrides"><para>在派生类中重写 <see cref="M:System.Windows.Forms.DataGridView.OnCellParsing(System.Windows.Forms.DataGridViewCellParsingEventArgs)" /> 时，一定要调用基类的 <see cref="M:System.Windows.Forms.DataGridView.OnCellParsing(System.Windows.Forms.DataGridViewCellParsingEventArgs)" /> 方法，以便已注册的委托对事件进行接收。</para></block>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="OnCellStateChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnCellStateChanged (System.Windows.Forms.DataGridViewCellStateChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCellStateChanged(class System.Windows.Forms.DataGridViewCellStateChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnCellStateChanged(System.Windows.Forms.DataGridViewCellStateChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnCellStateChanged (e As DataGridViewCellStateChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnCellStateChanged(System::Windows::Forms::DataGridViewCellStateChangedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnCellStateChanged : System.Windows.Forms.DataGridViewCellStateChangedEventArgs -&gt; unit&#xA;override this.OnCellStateChanged : System.Windows.Forms.DataGridViewCellStateChangedEventArgs -&gt; unit" Usage="dataGridView.OnCellStateChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewCellStateChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.Windows.Forms.DataGridViewCellStateChangedEventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.DataGridView.CellStateChanged" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
 <xref:System.Windows.Forms.DataGridView.OnCellStateChanged%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>在派生类中重写 <see cref="M:System.Windows.Forms.DataGridView.OnCellStateChanged(System.Windows.Forms.DataGridViewCellStateChangedEventArgs)" /> 时，一定要调用基类的 <see cref="M:System.Windows.Forms.DataGridView.OnCellStateChanged(System.Windows.Forms.DataGridViewCellStateChangedEventArgs)" /> 方法，以便已注册的委托对事件进行接收。</para></block>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="OnCellStyleChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnCellStyleChanged (System.Windows.Forms.DataGridViewCellEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCellStyleChanged(class System.Windows.Forms.DataGridViewCellEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnCellStyleChanged(System.Windows.Forms.DataGridViewCellEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnCellStyleChanged (e As DataGridViewCellEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnCellStyleChanged(System::Windows::Forms::DataGridViewCellEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnCellStyleChanged : System.Windows.Forms.DataGridViewCellEventArgs -&gt; unit&#xA;override this.OnCellStyleChanged : System.Windows.Forms.DataGridViewCellEventArgs -&gt; unit" Usage="dataGridView.OnCellStyleChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewCellEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.Windows.Forms.DataGridViewCellEventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.DataGridView.CellStyleChanged" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
 <xref:System.Windows.Forms.DataGridView.OnCellStyleChanged%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="e" /> 的 <see cref="P:System.Windows.Forms.DataGridViewCellEventArgs.ColumnIndex" /> 属性值大于控件中的列数减一。  
  
- 或 - 
<paramref name="e" /> 的 <see cref="P:System.Windows.Forms.DataGridViewCellEventArgs.RowIndex" /> 属性值大于控件中的行数减一。</exception>
        <block subset="none" type="overrides"><para>在派生类中重写 <see cref="M:System.Windows.Forms.DataGridView.OnCellStyleChanged(System.Windows.Forms.DataGridViewCellEventArgs)" /> 时，一定要调用基类的 <see cref="M:System.Windows.Forms.DataGridView.OnCellStyleChanged(System.Windows.Forms.DataGridViewCellEventArgs)" /> 方法，以便已注册的委托对事件进行接收。</para></block>
        <altmember cref="T:System.Windows.Forms.DataGridViewCellStyle" />
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
        <related type="Article" href="/dotnet/framework/winforms/controls/cell-styles-in-the-windows-forms-datagridview-control">Windows 窗体 DataGridView 控件中的单元格样式</related>
      </Docs>
    </Member>
    <Member MemberName="OnCellStyleContentChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnCellStyleContentChanged (System.Windows.Forms.DataGridViewCellStyleContentChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCellStyleContentChanged(class System.Windows.Forms.DataGridViewCellStyleContentChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnCellStyleContentChanged(System.Windows.Forms.DataGridViewCellStyleContentChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnCellStyleContentChanged (e As DataGridViewCellStyleContentChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnCellStyleContentChanged(System::Windows::Forms::DataGridViewCellStyleContentChangedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnCellStyleContentChanged : System.Windows.Forms.DataGridViewCellStyleContentChangedEventArgs -&gt; unit&#xA;override this.OnCellStyleContentChanged : System.Windows.Forms.DataGridViewCellStyleContentChangedEventArgs -&gt; unit" Usage="dataGridView.OnCellStyleContentChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewCellStyleContentChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.Windows.Forms.DataGridViewCellStyleContentChangedEventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.DataGridView.CellStyleContentChanged" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
 <xref:System.Windows.Forms.DataGridView.OnCellStyleContentChanged%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>在派生类中重写 <see cref="M:System.Windows.Forms.DataGridView.OnCellStyleContentChanged(System.Windows.Forms.DataGridViewCellStyleContentChangedEventArgs)" /> 时，一定要调用基类的 <see cref="M:System.Windows.Forms.DataGridView.OnCellStyleContentChanged(System.Windows.Forms.DataGridViewCellStyleContentChangedEventArgs)" /> 方法，以便已注册的委托对事件进行接收。</para></block>
        <altmember cref="T:System.Windows.Forms.DataGridViewCellStyle" />
        <altmember cref="E:System.Windows.Forms.DataGridView.CellStyleContentChanged" />
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
        <related type="Article" href="/dotnet/framework/winforms/controls/cell-styles-in-the-windows-forms-datagridview-control">Windows 窗体 DataGridView 控件中的单元格样式</related>
      </Docs>
    </Member>
    <Member MemberName="OnCellToolTipTextChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnCellToolTipTextChanged (System.Windows.Forms.DataGridViewCellEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCellToolTipTextChanged(class System.Windows.Forms.DataGridViewCellEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnCellToolTipTextChanged(System.Windows.Forms.DataGridViewCellEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnCellToolTipTextChanged (e As DataGridViewCellEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnCellToolTipTextChanged(System::Windows::Forms::DataGridViewCellEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnCellToolTipTextChanged : System.Windows.Forms.DataGridViewCellEventArgs -&gt; unit&#xA;override this.OnCellToolTipTextChanged : System.Windows.Forms.DataGridViewCellEventArgs -&gt; unit" Usage="dataGridView.OnCellToolTipTextChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewCellEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">一个 <see cref="T:System.Windows.Forms.DataGridViewCellEventArgs" />，包含有关单元格的信息。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.DataGridView.CellToolTipTextChanged" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
 <xref:System.Windows.Forms.DataGridView.OnCellToolTipTextChanged%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="e" /> 的 <see cref="P:System.Windows.Forms.DataGridViewCellEventArgs.ColumnIndex" /> 属性值大于控件中的列数减一。  
  
- 或 - 
<paramref name="e" /> 的 <see cref="P:System.Windows.Forms.DataGridViewCellEventArgs.RowIndex" /> 属性值大于控件中的行数减一。</exception>
        <block subset="none" type="overrides"><para>当 <see cref="M:System.Windows.Forms.DataGridView.OnCellToolTipTextChanged(System.Windows.Forms.DataGridViewCellEventArgs)" /> 在派生类中重写时，请确保调用基类的 <see cref="M:System.Windows.Forms.DataGridView.OnCellToolTipTextChanged(System.Windows.Forms.DataGridViewCellEventArgs)" /> 方法，以便注册的委托接收事件。</para></block>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="OnCellToolTipTextNeeded">
      <MemberSignature Language="C#" Value="protected virtual void OnCellToolTipTextNeeded (System.Windows.Forms.DataGridViewCellToolTipTextNeededEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCellToolTipTextNeeded(class System.Windows.Forms.DataGridViewCellToolTipTextNeededEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnCellToolTipTextNeeded(System.Windows.Forms.DataGridViewCellToolTipTextNeededEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnCellToolTipTextNeeded (e As DataGridViewCellToolTipTextNeededEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnCellToolTipTextNeeded(System::Windows::Forms::DataGridViewCellToolTipTextNeededEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnCellToolTipTextNeeded : System.Windows.Forms.DataGridViewCellToolTipTextNeededEventArgs -&gt; unit&#xA;override this.OnCellToolTipTextNeeded : System.Windows.Forms.DataGridViewCellToolTipTextNeededEventArgs -&gt; unit" Usage="dataGridView.OnCellToolTipTextNeeded e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewCellToolTipTextNeededEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.Windows.Forms.DataGridViewCellToolTipTextNeededEventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.DataGridView.CellToolTipTextNeeded" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
 <xref:System.Windows.Forms.DataGridView.OnCellToolTipTextNeeded%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="e" /> 的 <see cref="P:System.Windows.Forms.DataGridViewCellEventArgs.ColumnIndex" /> 属性值大于控件中的列数减一。  
  
- 或 - 
<paramref name="e" /> 的 <see cref="P:System.Windows.Forms.DataGridViewCellEventArgs.RowIndex" /> 属性值大于控件中的行数减一。</exception>
        <block subset="none" type="overrides"><para>当 <see cref="M:System.Windows.Forms.DataGridView.OnCellToolTipTextNeeded(System.Windows.Forms.DataGridViewCellToolTipTextNeededEventArgs)" /> 在派生类中重写时，请确保调用基类的 <see cref="M:System.Windows.Forms.DataGridView.OnCellToolTipTextNeeded(System.Windows.Forms.DataGridViewCellToolTipTextNeededEventArgs)" /> 方法，以便注册的委托接收事件。</para></block>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="OnCellValidated">
      <MemberSignature Language="C#" Value="protected virtual void OnCellValidated (System.Windows.Forms.DataGridViewCellEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCellValidated(class System.Windows.Forms.DataGridViewCellEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnCellValidated(System.Windows.Forms.DataGridViewCellEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnCellValidated (e As DataGridViewCellEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnCellValidated(System::Windows::Forms::DataGridViewCellEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnCellValidated : System.Windows.Forms.DataGridViewCellEventArgs -&gt; unit&#xA;override this.OnCellValidated : System.Windows.Forms.DataGridViewCellEventArgs -&gt; unit" Usage="dataGridView.OnCellValidated e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewCellEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.Windows.Forms.DataGridViewCellEventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.DataGridView.CellValidated" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
 <xref:System.Windows.Forms.DataGridView.OnCellValidated%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="e" /> 的 <see cref="P:System.Windows.Forms.DataGridViewCellEventArgs.ColumnIndex" /> 属性值大于控件中的列数减一。  
  
- 或 - 
<paramref name="e" /> 的 <see cref="P:System.Windows.Forms.DataGridViewCellEventArgs.RowIndex" /> 属性值大于控件中的行数减一。</exception>
        <block subset="none" type="overrides"><para>在派生类中重写 <see cref="M:System.Windows.Forms.DataGridView.OnCellValidated(System.Windows.Forms.DataGridViewCellEventArgs)" /> 时，一定要调用基类的 <see cref="M:System.Windows.Forms.DataGridView.OnCellValidated(System.Windows.Forms.DataGridViewCellEventArgs)" /> 方法，以便已注册的委托对事件进行接收。</para></block>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="OnCellValidating">
      <MemberSignature Language="C#" Value="protected virtual void OnCellValidating (System.Windows.Forms.DataGridViewCellValidatingEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCellValidating(class System.Windows.Forms.DataGridViewCellValidatingEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnCellValidating(System.Windows.Forms.DataGridViewCellValidatingEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnCellValidating (e As DataGridViewCellValidatingEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnCellValidating(System::Windows::Forms::DataGridViewCellValidatingEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnCellValidating : System.Windows.Forms.DataGridViewCellValidatingEventArgs -&gt; unit&#xA;override this.OnCellValidating : System.Windows.Forms.DataGridViewCellValidatingEventArgs -&gt; unit" Usage="dataGridView.OnCellValidating e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewCellValidatingEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.Windows.Forms.DataGridViewCellValidatingEventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.DataGridView.CellValidating" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
 <xref:System.Windows.Forms.DataGridView.OnCellValidating%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="e" /> 的 <see cref="P:System.Windows.Forms.DataGridViewCellValidatingEventArgs.ColumnIndex" /> 属性值大于控件中的列数减一。  
  
- 或 - 
<paramref name="e" /> 的 <see cref="P:System.Windows.Forms.DataGridViewCellValidatingEventArgs.RowIndex" /> 属性值大于控件中的行数减一。</exception>
        <block subset="none" type="overrides"><para>当 <see cref="M:System.Windows.Forms.DataGridView.OnCellValidating(System.Windows.Forms.DataGridViewCellValidatingEventArgs)" /> 在派生类中重写时，请确保调用基类的 <see cref="M:System.Windows.Forms.DataGridView.OnCellValidating(System.Windows.Forms.DataGridViewCellValidatingEventArgs)" /> 方法，以便注册的委托接收事件。</para></block>
        <altmember cref="E:System.Windows.Forms.DataGridView.CellValidating" />
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="OnCellValueChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnCellValueChanged (System.Windows.Forms.DataGridViewCellEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCellValueChanged(class System.Windows.Forms.DataGridViewCellEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnCellValueChanged(System.Windows.Forms.DataGridViewCellEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnCellValueChanged (e As DataGridViewCellEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnCellValueChanged(System::Windows::Forms::DataGridViewCellEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnCellValueChanged : System.Windows.Forms.DataGridViewCellEventArgs -&gt; unit&#xA;override this.OnCellValueChanged : System.Windows.Forms.DataGridViewCellEventArgs -&gt; unit" Usage="dataGridView.OnCellValueChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewCellEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.Windows.Forms.DataGridViewCellEventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.DataGridView.CellValueChanged" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
 <xref:System.Windows.Forms.DataGridView.OnCellValueChanged%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="e" /> 的 <see cref="P:System.Windows.Forms.DataGridViewCellEventArgs.ColumnIndex" /> 属性值大于控件中的列数减一。  
  
- 或 - 
<paramref name="e" /> 的 <see cref="P:System.Windows.Forms.DataGridViewCellEventArgs.RowIndex" /> 属性值大于控件中的行数减一。</exception>
        <block subset="none" type="overrides"><para>在派生类中重写 <see cref="M:System.Windows.Forms.DataGridView.OnCellValueChanged(System.Windows.Forms.DataGridViewCellEventArgs)" /> 时，一定要调用基类的 <see cref="M:System.Windows.Forms.DataGridView.OnCellValueChanged(System.Windows.Forms.DataGridViewCellEventArgs)" /> 方法，以便已注册的委托对事件进行接收。</para></block>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="OnCellValueNeeded">
      <MemberSignature Language="C#" Value="protected virtual void OnCellValueNeeded (System.Windows.Forms.DataGridViewCellValueEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCellValueNeeded(class System.Windows.Forms.DataGridViewCellValueEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnCellValueNeeded(System.Windows.Forms.DataGridViewCellValueEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnCellValueNeeded (e As DataGridViewCellValueEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnCellValueNeeded(System::Windows::Forms::DataGridViewCellValueEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnCellValueNeeded : System.Windows.Forms.DataGridViewCellValueEventArgs -&gt; unit&#xA;override this.OnCellValueNeeded : System.Windows.Forms.DataGridViewCellValueEventArgs -&gt; unit" Usage="dataGridView.OnCellValueNeeded e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewCellValueEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.Windows.Forms.DataGridViewCellValueEventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.DataGridView.CellValueNeeded" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
 <xref:System.Windows.Forms.DataGridView.OnCellValueNeeded%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="e" /> 的 <see cref="P:System.Windows.Forms.DataGridViewCellValueEventArgs.ColumnIndex" /> 属性值小于零或大于控件中的列数减一。  
  
- 或 - 
<paramref name="e" /> 的 <see cref="P:System.Windows.Forms.DataGridViewCellValueEventArgs.RowIndex" /> 属性值小于零或大于控件中的行数减一。</exception>
        <block subset="none" type="overrides"><para>在派生类中重写 <see cref="M:System.Windows.Forms.DataGridView.OnCellValueNeeded(System.Windows.Forms.DataGridViewCellValueEventArgs)" /> 时，一定要调用基类的 <see cref="M:System.Windows.Forms.DataGridView.OnCellValueNeeded(System.Windows.Forms.DataGridViewCellValueEventArgs)" /> 方法，以便已注册的委托对事件进行接收。</para></block>
        <altmember cref="E:System.Windows.Forms.DataGridView.CellValueNeeded" />
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="OnCellValuePushed">
      <MemberSignature Language="C#" Value="protected virtual void OnCellValuePushed (System.Windows.Forms.DataGridViewCellValueEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCellValuePushed(class System.Windows.Forms.DataGridViewCellValueEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnCellValuePushed(System.Windows.Forms.DataGridViewCellValueEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnCellValuePushed (e As DataGridViewCellValueEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnCellValuePushed(System::Windows::Forms::DataGridViewCellValueEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnCellValuePushed : System.Windows.Forms.DataGridViewCellValueEventArgs -&gt; unit&#xA;override this.OnCellValuePushed : System.Windows.Forms.DataGridViewCellValueEventArgs -&gt; unit" Usage="dataGridView.OnCellValuePushed e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewCellValueEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.Windows.Forms.DataGridViewCellValueEventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.DataGridView.CellValuePushed" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
 <xref:System.Windows.Forms.DataGridView.OnCellValuePushed%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="e" /> 的 <see cref="P:System.Windows.Forms.DataGridViewCellValueEventArgs.ColumnIndex" /> 属性值小于零或大于控件中的列数减一。  
  
- 或 - 
<paramref name="e" /> 的 <see cref="P:System.Windows.Forms.DataGridViewCellValueEventArgs.RowIndex" /> 属性值小于零或大于控件中的行数减一。</exception>
        <block subset="none" type="overrides"><para>在派生类中重写 <see cref="M:System.Windows.Forms.DataGridView.OnCellValuePushed(System.Windows.Forms.DataGridViewCellValueEventArgs)" /> 时，一定要调用基类的 <see cref="M:System.Windows.Forms.DataGridView.OnCellValuePushed(System.Windows.Forms.DataGridViewCellValueEventArgs)" /> 方法，以便已注册的委托对事件进行接收。</para></block>
        <altmember cref="E:System.Windows.Forms.DataGridView.CellValuePushed" />
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="OnColumnAdded">
      <MemberSignature Language="C#" Value="protected virtual void OnColumnAdded (System.Windows.Forms.DataGridViewColumnEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnColumnAdded(class System.Windows.Forms.DataGridViewColumnEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnColumnAdded(System.Windows.Forms.DataGridViewColumnEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnColumnAdded (e As DataGridViewColumnEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnColumnAdded(System::Windows::Forms::DataGridViewColumnEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnColumnAdded : System.Windows.Forms.DataGridViewColumnEventArgs -&gt; unit&#xA;override this.OnColumnAdded : System.Windows.Forms.DataGridViewColumnEventArgs -&gt; unit" Usage="dataGridView.OnColumnAdded e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewColumnEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.Windows.Forms.DataGridViewColumnEventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.DataGridView.ColumnAdded" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
 <xref:System.Windows.Forms.DataGridView.OnColumnAdded%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">由 <paramref name="e" /> 的 <see cref="P:System.Windows.Forms.DataGridViewColumnEventArgs.Column" /> 属性指示的列不属于此 <see cref="T:System.Windows.Forms.DataGridView" /> 控件。</exception>
        <block subset="none" type="overrides"><para>当 <see cref="M:System.Windows.Forms.DataGridView.OnColumnAdded(System.Windows.Forms.DataGridViewColumnEventArgs)" /> 在派生类中重写时，请确保调用基类的 <see cref="M:System.Windows.Forms.DataGridView.OnColumnAdded(System.Windows.Forms.DataGridViewColumnEventArgs)" /> 方法，以便注册的委托接收事件。</para></block>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="OnColumnContextMenuStripChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnColumnContextMenuStripChanged (System.Windows.Forms.DataGridViewColumnEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnColumnContextMenuStripChanged(class System.Windows.Forms.DataGridViewColumnEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnColumnContextMenuStripChanged(System.Windows.Forms.DataGridViewColumnEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnColumnContextMenuStripChanged (e As DataGridViewColumnEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnColumnContextMenuStripChanged(System::Windows::Forms::DataGridViewColumnEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnColumnContextMenuStripChanged : System.Windows.Forms.DataGridViewColumnEventArgs -&gt; unit&#xA;override this.OnColumnContextMenuStripChanged : System.Windows.Forms.DataGridViewColumnEventArgs -&gt; unit" Usage="dataGridView.OnColumnContextMenuStripChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewColumnEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.Windows.Forms.DataGridViewColumnEventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.DataGridView.ColumnContextMenuStripChanged" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
 <xref:System.Windows.Forms.DataGridView.OnColumnContextMenuStripChanged%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">由 <paramref name="e" /> 的 <see cref="P:System.Windows.Forms.DataGridViewColumnEventArgs.Column" /> 属性指示的列不属于此 <see cref="T:System.Windows.Forms.DataGridView" /> 控件。</exception>
        <block subset="none" type="overrides"><para>当 <see cref="M:System.Windows.Forms.DataGridView.OnColumnContextMenuStripChanged(System.Windows.Forms.DataGridViewColumnEventArgs)" /> 在派生类中重写时，请确保调用基类的 <see cref="M:System.Windows.Forms.DataGridView.OnColumnContextMenuStripChanged(System.Windows.Forms.DataGridViewColumnEventArgs)" /> 方法，以便注册的委托接收事件。</para></block>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="OnColumnDataPropertyNameChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnColumnDataPropertyNameChanged (System.Windows.Forms.DataGridViewColumnEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnColumnDataPropertyNameChanged(class System.Windows.Forms.DataGridViewColumnEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnColumnDataPropertyNameChanged(System.Windows.Forms.DataGridViewColumnEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnColumnDataPropertyNameChanged (e As DataGridViewColumnEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnColumnDataPropertyNameChanged(System::Windows::Forms::DataGridViewColumnEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnColumnDataPropertyNameChanged : System.Windows.Forms.DataGridViewColumnEventArgs -&gt; unit&#xA;override this.OnColumnDataPropertyNameChanged : System.Windows.Forms.DataGridViewColumnEventArgs -&gt; unit" Usage="dataGridView.OnColumnDataPropertyNameChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewColumnEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.Windows.Forms.DataGridViewColumnEventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.DataGridView.ColumnDataPropertyNameChanged" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
 <xref:System.Windows.Forms.DataGridView.OnColumnDataPropertyNameChanged%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">由 <paramref name="e" /> 的 <see cref="P:System.Windows.Forms.DataGridViewColumnEventArgs.Column" /> 属性指示的列不属于此 <see cref="T:System.Windows.Forms.DataGridView" /> 控件。</exception>
        <block subset="none" type="overrides"><para>在派生类中重写 <see cref="M:System.Windows.Forms.DataGridView.OnColumnDataPropertyNameChanged(System.Windows.Forms.DataGridViewColumnEventArgs)" /> 时，一定要调用基类的 <see cref="M:System.Windows.Forms.DataGridView.OnColumnDataPropertyNameChanged(System.Windows.Forms.DataGridViewColumnEventArgs)" /> 方法，以便已注册的委托对事件进行接收。</para></block>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="OnColumnDefaultCellStyleChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnColumnDefaultCellStyleChanged (System.Windows.Forms.DataGridViewColumnEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnColumnDefaultCellStyleChanged(class System.Windows.Forms.DataGridViewColumnEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnColumnDefaultCellStyleChanged(System.Windows.Forms.DataGridViewColumnEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnColumnDefaultCellStyleChanged (e As DataGridViewColumnEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnColumnDefaultCellStyleChanged(System::Windows::Forms::DataGridViewColumnEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnColumnDefaultCellStyleChanged : System.Windows.Forms.DataGridViewColumnEventArgs -&gt; unit&#xA;override this.OnColumnDefaultCellStyleChanged : System.Windows.Forms.DataGridViewColumnEventArgs -&gt; unit" Usage="dataGridView.OnColumnDefaultCellStyleChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewColumnEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.Windows.Forms.DataGridViewColumnEventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.DataGridView.ColumnDefaultCellStyleChanged" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
 <xref:System.Windows.Forms.DataGridView.OnColumnDefaultCellStyleChanged%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">由 <paramref name="e" /> 的 <see cref="P:System.Windows.Forms.DataGridViewColumnEventArgs.Column" /> 属性指示的列不属于此 <see cref="T:System.Windows.Forms.DataGridView" /> 控件。</exception>
        <block subset="none" type="overrides"><para>在派生类中重写 <see cref="M:System.Windows.Forms.DataGridView.OnColumnDefaultCellStyleChanged(System.Windows.Forms.DataGridViewColumnEventArgs)" /> 时，一定要调用基类的 <see cref="M:System.Windows.Forms.DataGridView.OnColumnDefaultCellStyleChanged(System.Windows.Forms.DataGridViewColumnEventArgs)" /> 方法，以便已注册的委托对事件进行接收。</para></block>
        <altmember cref="T:System.Windows.Forms.DataGridViewCellStyle" />
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
        <related type="Article" href="/dotnet/framework/winforms/controls/cell-styles-in-the-windows-forms-datagridview-control">Windows 窗体 DataGridView 控件中的单元格样式</related>
      </Docs>
    </Member>
    <Member MemberName="OnColumnDisplayIndexChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnColumnDisplayIndexChanged (System.Windows.Forms.DataGridViewColumnEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnColumnDisplayIndexChanged(class System.Windows.Forms.DataGridViewColumnEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnColumnDisplayIndexChanged(System.Windows.Forms.DataGridViewColumnEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnColumnDisplayIndexChanged (e As DataGridViewColumnEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnColumnDisplayIndexChanged(System::Windows::Forms::DataGridViewColumnEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnColumnDisplayIndexChanged : System.Windows.Forms.DataGridViewColumnEventArgs -&gt; unit&#xA;override this.OnColumnDisplayIndexChanged : System.Windows.Forms.DataGridViewColumnEventArgs -&gt; unit" Usage="dataGridView.OnColumnDisplayIndexChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewColumnEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.Windows.Forms.DataGridViewColumnEventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.DataGridView.ColumnDisplayIndexChanged" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
 <xref:System.Windows.Forms.DataGridView.OnColumnDisplayIndexChanged%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">由 <paramref name="e" /> 的 <see cref="P:System.Windows.Forms.DataGridViewColumnEventArgs.Column" /> 属性指示的列不属于此 <see cref="T:System.Windows.Forms.DataGridView" /> 控件。</exception>
        <block subset="none" type="overrides"><para>在派生类中重写 <see cref="M:System.Windows.Forms.DataGridView.OnColumnDisplayIndexChanged(System.Windows.Forms.DataGridViewColumnEventArgs)" /> 时，一定要调用基类的 <see cref="M:System.Windows.Forms.DataGridView.OnColumnDisplayIndexChanged(System.Windows.Forms.DataGridViewColumnEventArgs)" /> 方法，以便已注册的委托对事件进行接收。</para></block>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="OnColumnDividerDoubleClick">
      <MemberSignature Language="C#" Value="protected virtual void OnColumnDividerDoubleClick (System.Windows.Forms.DataGridViewColumnDividerDoubleClickEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnColumnDividerDoubleClick(class System.Windows.Forms.DataGridViewColumnDividerDoubleClickEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnColumnDividerDoubleClick(System.Windows.Forms.DataGridViewColumnDividerDoubleClickEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnColumnDividerDoubleClick (e As DataGridViewColumnDividerDoubleClickEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnColumnDividerDoubleClick(System::Windows::Forms::DataGridViewColumnDividerDoubleClickEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnColumnDividerDoubleClick : System.Windows.Forms.DataGridViewColumnDividerDoubleClickEventArgs -&gt; unit&#xA;override this.OnColumnDividerDoubleClick : System.Windows.Forms.DataGridViewColumnDividerDoubleClickEventArgs -&gt; unit" Usage="dataGridView.OnColumnDividerDoubleClick e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewColumnDividerDoubleClickEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.Windows.Forms.DataGridViewColumnDividerDoubleClickEventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.DataGridView.ColumnDividerDoubleClick" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
 <xref:System.Windows.Forms.DataGridView.OnColumnDividerDoubleClick%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>当 <see cref="M:System.Windows.Forms.DataGridView.OnColumnDividerDoubleClick(System.Windows.Forms.DataGridViewColumnDividerDoubleClickEventArgs)" /> 在派生类中重写时，请确保调用基类的 <see cref="M:System.Windows.Forms.DataGridView.OnColumnDividerDoubleClick(System.Windows.Forms.DataGridViewColumnDividerDoubleClickEventArgs)" /> 方法，以便注册的委托接收事件。</para></block>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="OnColumnDividerWidthChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnColumnDividerWidthChanged (System.Windows.Forms.DataGridViewColumnEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnColumnDividerWidthChanged(class System.Windows.Forms.DataGridViewColumnEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnColumnDividerWidthChanged(System.Windows.Forms.DataGridViewColumnEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnColumnDividerWidthChanged (e As DataGridViewColumnEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnColumnDividerWidthChanged(System::Windows::Forms::DataGridViewColumnEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnColumnDividerWidthChanged : System.Windows.Forms.DataGridViewColumnEventArgs -&gt; unit&#xA;override this.OnColumnDividerWidthChanged : System.Windows.Forms.DataGridViewColumnEventArgs -&gt; unit" Usage="dataGridView.OnColumnDividerWidthChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewColumnEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.Windows.Forms.DataGridViewColumnEventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.DataGridView.ColumnDividerWidthChanged" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
 <xref:System.Windows.Forms.DataGridView.OnColumnDividerWidthChanged%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">由 <paramref name="e" /> 的 <see cref="P:System.Windows.Forms.DataGridViewColumnEventArgs.Column" /> 属性指示的列不属于此 <see cref="T:System.Windows.Forms.DataGridView" /> 控件。</exception>
        <block subset="none" type="overrides"><para>当 <see cref="M:System.Windows.Forms.DataGridView.OnColumnDividerWidthChanged(System.Windows.Forms.DataGridViewColumnEventArgs)" /> 在派生类中重写时，请确保调用基类的 <see cref="M:System.Windows.Forms.DataGridView.OnColumnDividerWidthChanged(System.Windows.Forms.DataGridViewColumnEventArgs)" /> 方法，以便注册的委托接收事件。</para></block>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="OnColumnHeaderCellChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnColumnHeaderCellChanged (System.Windows.Forms.DataGridViewColumnEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnColumnHeaderCellChanged(class System.Windows.Forms.DataGridViewColumnEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnColumnHeaderCellChanged(System.Windows.Forms.DataGridViewColumnEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnColumnHeaderCellChanged (e As DataGridViewColumnEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnColumnHeaderCellChanged(System::Windows::Forms::DataGridViewColumnEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnColumnHeaderCellChanged : System.Windows.Forms.DataGridViewColumnEventArgs -&gt; unit&#xA;override this.OnColumnHeaderCellChanged : System.Windows.Forms.DataGridViewColumnEventArgs -&gt; unit" Usage="dataGridView.OnColumnHeaderCellChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewColumnEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.Windows.Forms.DataGridViewColumnEventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.DataGridView.ColumnHeaderCellChanged" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
 <xref:System.Windows.Forms.DataGridView.OnColumnHeaderCellChanged%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">由 <paramref name="e" /> 的 <see cref="P:System.Windows.Forms.DataGridViewColumnEventArgs.Column" /> 属性指示的列不属于此 <see cref="T:System.Windows.Forms.DataGridView" /> 控件。</exception>
        <block subset="none" type="overrides"><para>在派生类中重写 <see cref="M:System.Windows.Forms.DataGridView.OnColumnHeaderCellChanged(System.Windows.Forms.DataGridViewColumnEventArgs)" /> 时，一定要调用基类的 <see cref="M:System.Windows.Forms.DataGridView.OnColumnHeaderCellChanged(System.Windows.Forms.DataGridViewColumnEventArgs)" /> 方法，以便已注册的委托对事件进行接收。</para></block>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="OnColumnHeaderMouseClick">
      <MemberSignature Language="C#" Value="protected virtual void OnColumnHeaderMouseClick (System.Windows.Forms.DataGridViewCellMouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnColumnHeaderMouseClick(class System.Windows.Forms.DataGridViewCellMouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnColumnHeaderMouseClick(System.Windows.Forms.DataGridViewCellMouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnColumnHeaderMouseClick (e As DataGridViewCellMouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnColumnHeaderMouseClick(System::Windows::Forms::DataGridViewCellMouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnColumnHeaderMouseClick : System.Windows.Forms.DataGridViewCellMouseEventArgs -&gt; unit&#xA;override this.OnColumnHeaderMouseClick : System.Windows.Forms.DataGridViewCellMouseEventArgs -&gt; unit" Usage="dataGridView.OnColumnHeaderMouseClick e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewCellMouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.Windows.Forms.DataGridViewCellMouseEventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.DataGridView.ColumnHeaderMouseClick" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
 <xref:System.Windows.Forms.DataGridView.OnColumnHeaderMouseClick%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="e" /> 的 <see cref="P:System.Windows.Forms.DataGridViewCellMouseEventArgs.ColumnIndex" /> 属性值小于零或大于控件中的列数减一。</exception>
        <block subset="none" type="overrides"><para>在派生类中重写 <see cref="M:System.Windows.Forms.DataGridView.OnColumnHeaderMouseClick(System.Windows.Forms.DataGridViewCellMouseEventArgs)" /> 时，一定要调用基类的 <see cref="M:System.Windows.Forms.DataGridView.OnColumnHeaderMouseClick(System.Windows.Forms.DataGridViewCellMouseEventArgs)" /> 方法，以便已注册的委托对事件进行接收。</para></block>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="OnColumnHeaderMouseDoubleClick">
      <MemberSignature Language="C#" Value="protected virtual void OnColumnHeaderMouseDoubleClick (System.Windows.Forms.DataGridViewCellMouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnColumnHeaderMouseDoubleClick(class System.Windows.Forms.DataGridViewCellMouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnColumnHeaderMouseDoubleClick(System.Windows.Forms.DataGridViewCellMouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnColumnHeaderMouseDoubleClick (e As DataGridViewCellMouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnColumnHeaderMouseDoubleClick(System::Windows::Forms::DataGridViewCellMouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnColumnHeaderMouseDoubleClick : System.Windows.Forms.DataGridViewCellMouseEventArgs -&gt; unit&#xA;override this.OnColumnHeaderMouseDoubleClick : System.Windows.Forms.DataGridViewCellMouseEventArgs -&gt; unit" Usage="dataGridView.OnColumnHeaderMouseDoubleClick e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewCellMouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">一个 <see cref="T:System.Windows.Forms.DataGridViewCellMouseEventArgs" />，包含有关单元格和鼠标指针位置的信息。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.DataGridView.ColumnHeaderMouseDoubleClick" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
 <xref:System.Windows.Forms.DataGridView.OnColumnHeaderMouseDoubleClick%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>当 <see cref="M:System.Windows.Forms.DataGridView.OnColumnHeaderMouseDoubleClick(System.Windows.Forms.DataGridViewCellMouseEventArgs)" /> 在派生类中重写时，请确保调用基类的 <see cref="M:System.Windows.Forms.DataGridView.OnColumnHeaderMouseDoubleClick(System.Windows.Forms.DataGridViewCellMouseEventArgs)" /> 方法，以便注册的委托接收事件。</para></block>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="OnColumnHeadersBorderStyleChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnColumnHeadersBorderStyleChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnColumnHeadersBorderStyleChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnColumnHeadersBorderStyleChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnColumnHeadersBorderStyleChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnColumnHeadersBorderStyleChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnColumnHeadersBorderStyleChanged : EventArgs -&gt; unit&#xA;override this.OnColumnHeadersBorderStyleChanged : EventArgs -&gt; unit" Usage="dataGridView.OnColumnHeadersBorderStyleChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.EventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.DataGridView.ColumnHeadersBorderStyleChanged" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
 <xref:System.Windows.Forms.DataGridView.OnColumnHeadersBorderStyleChanged%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>当 <see cref="M:System.Windows.Forms.DataGridView.OnColumnHeadersBorderStyleChanged(System.EventArgs)" /> 在派生类中重写时，请确保调用基类的 <see cref="M:System.Windows.Forms.DataGridView.OnColumnHeadersBorderStyleChanged(System.EventArgs)" /> 方法，以便注册的委托接收事件。</para></block>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="OnColumnHeadersDefaultCellStyleChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnColumnHeadersDefaultCellStyleChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnColumnHeadersDefaultCellStyleChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnColumnHeadersDefaultCellStyleChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnColumnHeadersDefaultCellStyleChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnColumnHeadersDefaultCellStyleChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnColumnHeadersDefaultCellStyleChanged : EventArgs -&gt; unit&#xA;override this.OnColumnHeadersDefaultCellStyleChanged : EventArgs -&gt; unit" Usage="dataGridView.OnColumnHeadersDefaultCellStyleChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.EventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.DataGridView.ColumnHeadersDefaultCellStyleChanged" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
 <xref:System.Windows.Forms.DataGridView.OnColumnHeadersDefaultCellStyleChanged%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>在派生类中重写 <see cref="M:System.Windows.Forms.DataGridView.OnColumnHeadersDefaultCellStyleChanged(System.EventArgs)" /> 时，一定要调用基类的 <see cref="M:System.Windows.Forms.DataGridView.OnColumnHeadersDefaultCellStyleChanged(System.EventArgs)" /> 方法，以便已注册的委托对事件进行接收。</para></block>
        <altmember cref="T:System.Windows.Forms.DataGridViewCellStyle" />
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
        <related type="Article" href="/dotnet/framework/winforms/controls/cell-styles-in-the-windows-forms-datagridview-control">Windows 窗体 DataGridView 控件中的单元格样式</related>
      </Docs>
    </Member>
    <Member MemberName="OnColumnHeadersHeightChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnColumnHeadersHeightChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnColumnHeadersHeightChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnColumnHeadersHeightChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnColumnHeadersHeightChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnColumnHeadersHeightChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnColumnHeadersHeightChanged : EventArgs -&gt; unit&#xA;override this.OnColumnHeadersHeightChanged : EventArgs -&gt; unit" Usage="dataGridView.OnColumnHeadersHeightChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.EventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.DataGridView.ColumnHeadersHeightChanged" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
 <xref:System.Windows.Forms.DataGridView.OnColumnHeadersHeightChanged%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>在派生类中重写 <see cref="M:System.Windows.Forms.DataGridView.OnColumnHeadersHeightChanged(System.EventArgs)" /> 时，一定要调用基类的 <see cref="M:System.Windows.Forms.DataGridView.OnColumnHeadersHeightChanged(System.EventArgs)" /> 方法，以便已注册的委托对事件进行接收。</para></block>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="OnColumnHeadersHeightSizeModeChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnColumnHeadersHeightSizeModeChanged (System.Windows.Forms.DataGridViewAutoSizeModeEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnColumnHeadersHeightSizeModeChanged(class System.Windows.Forms.DataGridViewAutoSizeModeEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnColumnHeadersHeightSizeModeChanged(System.Windows.Forms.DataGridViewAutoSizeModeEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnColumnHeadersHeightSizeModeChanged (e As DataGridViewAutoSizeModeEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnColumnHeadersHeightSizeModeChanged(System::Windows::Forms::DataGridViewAutoSizeModeEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnColumnHeadersHeightSizeModeChanged : System.Windows.Forms.DataGridViewAutoSizeModeEventArgs -&gt; unit&#xA;override this.OnColumnHeadersHeightSizeModeChanged : System.Windows.Forms.DataGridViewAutoSizeModeEventArgs -&gt; unit" Usage="dataGridView.OnColumnHeadersHeightSizeModeChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewAutoSizeModeEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.Windows.Forms.DataGridViewAutoSizeModeEventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.DataGridView.ColumnHeadersHeightSizeModeChanged" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
 <xref:System.Windows.Forms.DataGridView.OnColumnHeadersHeightSizeModeChanged%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>当 <see cref="M:System.Windows.Forms.DataGridView.OnColumnHeadersHeightSizeModeChanged(System.Windows.Forms.DataGridViewAutoSizeModeEventArgs)" /> 在派生类中重写时，请确保调用基类的 <see cref="M:System.Windows.Forms.DataGridView.OnColumnHeadersHeightSizeModeChanged(System.Windows.Forms.DataGridViewAutoSizeModeEventArgs)" /> 方法，以便注册的委托接收事件。</para></block>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="OnColumnMinimumWidthChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnColumnMinimumWidthChanged (System.Windows.Forms.DataGridViewColumnEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnColumnMinimumWidthChanged(class System.Windows.Forms.DataGridViewColumnEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnColumnMinimumWidthChanged(System.Windows.Forms.DataGridViewColumnEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnColumnMinimumWidthChanged (e As DataGridViewColumnEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnColumnMinimumWidthChanged(System::Windows::Forms::DataGridViewColumnEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnColumnMinimumWidthChanged : System.Windows.Forms.DataGridViewColumnEventArgs -&gt; unit&#xA;override this.OnColumnMinimumWidthChanged : System.Windows.Forms.DataGridViewColumnEventArgs -&gt; unit" Usage="dataGridView.OnColumnMinimumWidthChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewColumnEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.Windows.Forms.DataGridViewColumnEventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.DataGridView.ColumnMinimumWidthChanged" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
 <xref:System.Windows.Forms.DataGridView.OnColumnMinimumWidthChanged%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">由 <paramref name="e" /> 的 <see cref="P:System.Windows.Forms.DataGridViewColumnEventArgs.Column" /> 属性指示的列不属于此 <see cref="T:System.Windows.Forms.DataGridView" /> 控件。</exception>
        <block subset="none" type="overrides"><para>在派生类中重写 <see cref="M:System.Windows.Forms.DataGridView.OnColumnMinimumWidthChanged(System.Windows.Forms.DataGridViewColumnEventArgs)" /> 时，一定要调用基类的 <see cref="M:System.Windows.Forms.DataGridView.OnColumnMinimumWidthChanged(System.Windows.Forms.DataGridViewColumnEventArgs)" /> 方法，以便已注册的委托对事件进行接收。</para></block>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="OnColumnNameChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnColumnNameChanged (System.Windows.Forms.DataGridViewColumnEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnColumnNameChanged(class System.Windows.Forms.DataGridViewColumnEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnColumnNameChanged(System.Windows.Forms.DataGridViewColumnEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnColumnNameChanged (e As DataGridViewColumnEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnColumnNameChanged(System::Windows::Forms::DataGridViewColumnEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnColumnNameChanged : System.Windows.Forms.DataGridViewColumnEventArgs -&gt; unit&#xA;override this.OnColumnNameChanged : System.Windows.Forms.DataGridViewColumnEventArgs -&gt; unit" Usage="dataGridView.OnColumnNameChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewColumnEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.Windows.Forms.DataGridViewColumnEventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.DataGridView.ColumnNameChanged" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
 <xref:System.Windows.Forms.DataGridView.OnColumnNameChanged%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">由 <paramref name="e" /> 的 <see cref="P:System.Windows.Forms.DataGridViewColumnEventArgs.Column" /> 属性指示的列不属于此 <see cref="T:System.Windows.Forms.DataGridView" /> 控件。</exception>
        <block subset="none" type="overrides"><para>在派生类中重写 <see cref="M:System.Windows.Forms.DataGridView.OnColumnNameChanged(System.Windows.Forms.DataGridViewColumnEventArgs)" /> 时，一定要调用基类的 <see cref="M:System.Windows.Forms.DataGridView.OnColumnNameChanged(System.Windows.Forms.DataGridViewColumnEventArgs)" /> 方法，以便已注册的委托对事件进行接收。</para></block>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="OnColumnRemoved">
      <MemberSignature Language="C#" Value="protected virtual void OnColumnRemoved (System.Windows.Forms.DataGridViewColumnEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnColumnRemoved(class System.Windows.Forms.DataGridViewColumnEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnColumnRemoved(System.Windows.Forms.DataGridViewColumnEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnColumnRemoved (e As DataGridViewColumnEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnColumnRemoved(System::Windows::Forms::DataGridViewColumnEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnColumnRemoved : System.Windows.Forms.DataGridViewColumnEventArgs -&gt; unit&#xA;override this.OnColumnRemoved : System.Windows.Forms.DataGridViewColumnEventArgs -&gt; unit" Usage="dataGridView.OnColumnRemoved e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewColumnEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.Windows.Forms.DataGridViewColumnEventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.DataGridView.ColumnRemoved" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
 <xref:System.Windows.Forms.DataGridView.OnColumnRemoved%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>当 <see cref="M:System.Windows.Forms.DataGridView.OnColumnRemoved(System.Windows.Forms.DataGridViewColumnEventArgs)" /> 在派生类中重写时，请确保调用基类的 <see cref="M:System.Windows.Forms.DataGridView.OnColumnRemoved(System.Windows.Forms.DataGridViewColumnEventArgs)" /> 方法，以便注册的委托接收事件。</para></block>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="OnColumnSortModeChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnColumnSortModeChanged (System.Windows.Forms.DataGridViewColumnEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnColumnSortModeChanged(class System.Windows.Forms.DataGridViewColumnEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnColumnSortModeChanged(System.Windows.Forms.DataGridViewColumnEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnColumnSortModeChanged (e As DataGridViewColumnEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnColumnSortModeChanged(System::Windows::Forms::DataGridViewColumnEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnColumnSortModeChanged : System.Windows.Forms.DataGridViewColumnEventArgs -&gt; unit&#xA;override this.OnColumnSortModeChanged : System.Windows.Forms.DataGridViewColumnEventArgs -&gt; unit" Usage="dataGridView.OnColumnSortModeChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewColumnEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.Windows.Forms.DataGridViewColumnEventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.DataGridView.ColumnSortModeChanged" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
 <xref:System.Windows.Forms.DataGridView.OnColumnSortModeChanged%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">由 <paramref name="e" /> 的 <see cref="P:System.Windows.Forms.DataGridViewColumnEventArgs.Column" /> 属性指示的列不属于此 <see cref="T:System.Windows.Forms.DataGridView" /> 控件。</exception>
        <block subset="none" type="overrides"><para>在派生类中重写 <see cref="M:System.Windows.Forms.DataGridView.OnColumnSortModeChanged(System.Windows.Forms.DataGridViewColumnEventArgs)" /> 时，一定要调用基类的 <see cref="M:System.Windows.Forms.DataGridView.OnColumnSortModeChanged(System.Windows.Forms.DataGridViewColumnEventArgs)" /> 方法，以便已注册的委托对事件进行接收。</para></block>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="OnColumnStateChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnColumnStateChanged (System.Windows.Forms.DataGridViewColumnStateChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnColumnStateChanged(class System.Windows.Forms.DataGridViewColumnStateChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnColumnStateChanged(System.Windows.Forms.DataGridViewColumnStateChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnColumnStateChanged (e As DataGridViewColumnStateChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnColumnStateChanged(System::Windows::Forms::DataGridViewColumnStateChangedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnColumnStateChanged : System.Windows.Forms.DataGridViewColumnStateChangedEventArgs -&gt; unit&#xA;override this.OnColumnStateChanged : System.Windows.Forms.DataGridViewColumnStateChangedEventArgs -&gt; unit" Usage="dataGridView.OnColumnStateChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewColumnStateChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.Windows.Forms.DataGridViewColumnStateChangedEventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.DataGridView.ColumnStateChanged" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
 <xref:System.Windows.Forms.DataGridView.OnColumnStateChanged%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">从只读更改为读/写的列，启用了当前单元格以进入编辑模式，但是当前单元格的 <see cref="P:System.Windows.Forms.DataGridViewCell.EditType" /> 属性不指示派生自 <see cref="T:System.Windows.Forms.Control" /> 且实现 <see cref="T:System.Windows.Forms.IDataGridViewEditingControl" /> 的类。</exception>
        <block subset="none" type="overrides"><para>在派生类中重写 <see cref="M:System.Windows.Forms.DataGridView.OnColumnStateChanged(System.Windows.Forms.DataGridViewColumnStateChangedEventArgs)" /> 时，一定要调用基类的 <see cref="M:System.Windows.Forms.DataGridView.OnColumnStateChanged(System.Windows.Forms.DataGridViewColumnStateChangedEventArgs)" /> 方法，以便已注册的委托对事件进行接收。</para></block>
        <altmember cref="E:System.Windows.Forms.DataGridView.ColumnStateChanged" />
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="OnColumnToolTipTextChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnColumnToolTipTextChanged (System.Windows.Forms.DataGridViewColumnEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnColumnToolTipTextChanged(class System.Windows.Forms.DataGridViewColumnEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnColumnToolTipTextChanged(System.Windows.Forms.DataGridViewColumnEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnColumnToolTipTextChanged (e As DataGridViewColumnEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnColumnToolTipTextChanged(System::Windows::Forms::DataGridViewColumnEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnColumnToolTipTextChanged : System.Windows.Forms.DataGridViewColumnEventArgs -&gt; unit&#xA;override this.OnColumnToolTipTextChanged : System.Windows.Forms.DataGridViewColumnEventArgs -&gt; unit" Usage="dataGridView.OnColumnToolTipTextChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewColumnEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Forms.DataGridViewColumnEventArgs" />，包含有关该列的信息。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.DataGridView.ColumnToolTipTextChanged" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
 <xref:System.Windows.Forms.DataGridView.OnColumnToolTipTextChanged%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">由 <paramref name="e" /> 的 <see cref="P:System.Windows.Forms.DataGridViewColumnEventArgs.Column" /> 属性指示的列不属于此 <see cref="T:System.Windows.Forms.DataGridView" /> 控件。</exception>
        <block subset="none" type="overrides"><para>当 <see cref="M:System.Windows.Forms.DataGridView.OnColumnToolTipTextChanged(System.Windows.Forms.DataGridViewColumnEventArgs)" /> 在派生类中重写时，请确保调用基类的 <see cref="M:System.Windows.Forms.DataGridView.OnColumnToolTipTextChanged(System.Windows.Forms.DataGridViewColumnEventArgs)" /> 方法，以便注册的委托接收事件。</para></block>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="OnColumnWidthChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnColumnWidthChanged (System.Windows.Forms.DataGridViewColumnEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnColumnWidthChanged(class System.Windows.Forms.DataGridViewColumnEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnColumnWidthChanged(System.Windows.Forms.DataGridViewColumnEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnColumnWidthChanged (e As DataGridViewColumnEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnColumnWidthChanged(System::Windows::Forms::DataGridViewColumnEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnColumnWidthChanged : System.Windows.Forms.DataGridViewColumnEventArgs -&gt; unit&#xA;override this.OnColumnWidthChanged : System.Windows.Forms.DataGridViewColumnEventArgs -&gt; unit" Usage="dataGridView.OnColumnWidthChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewColumnEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.Windows.Forms.DataGridViewColumnEventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.DataGridView.ColumnWidthChanged" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
 <xref:System.Windows.Forms.DataGridView.OnColumnWidthChanged%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">由 <paramref name="e" /> 的 <see cref="P:System.Windows.Forms.DataGridViewColumnEventArgs.Column" /> 属性指示的列不属于此 <see cref="T:System.Windows.Forms.DataGridView" /> 控件。</exception>
        <block subset="none" type="overrides"><para>在派生类中重写 <see cref="M:System.Windows.Forms.DataGridView.OnColumnWidthChanged(System.Windows.Forms.DataGridViewColumnEventArgs)" /> 时，一定要调用基类的 <see cref="M:System.Windows.Forms.DataGridView.OnColumnWidthChanged(System.Windows.Forms.DataGridViewColumnEventArgs)" /> 方法，以便已注册的委托对事件进行接收。</para></block>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="OnCurrentCellChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnCurrentCellChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCurrentCellChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnCurrentCellChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnCurrentCellChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnCurrentCellChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnCurrentCellChanged : EventArgs -&gt; unit&#xA;override this.OnCurrentCellChanged : EventArgs -&gt; unit" Usage="dataGridView.OnCurrentCellChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.EventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.DataGridView.CurrentCellChanged" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
 <xref:System.Windows.Forms.DataGridView.OnCurrentCellChanged%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>当 <see cref="M:System.Windows.Forms.DataGridView.OnCurrentCellChanged(System.EventArgs)" /> 在派生类中重写时，请确保调用基类的 <see cref="M:System.Windows.Forms.DataGridView.OnCurrentCellChanged(System.EventArgs)" /> 方法，以便注册的委托接收事件。</para></block>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="OnCurrentCellDirtyStateChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnCurrentCellDirtyStateChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCurrentCellDirtyStateChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnCurrentCellDirtyStateChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnCurrentCellDirtyStateChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnCurrentCellDirtyStateChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnCurrentCellDirtyStateChanged : EventArgs -&gt; unit&#xA;override this.OnCurrentCellDirtyStateChanged : EventArgs -&gt; unit" Usage="dataGridView.OnCurrentCellDirtyStateChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.EventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.DataGridView.CurrentCellDirtyStateChanged" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
 <xref:System.Windows.Forms.DataGridView.OnCurrentCellDirtyStateChanged%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>在派生类中重写 <see cref="M:System.Windows.Forms.DataGridView.OnCurrentCellDirtyStateChanged(System.EventArgs)" /> 时，一定要调用基类的 <see cref="M:System.Windows.Forms.DataGridView.OnCurrentCellDirtyStateChanged(System.EventArgs)" /> 方法，以便已注册的委托对事件进行接收。</para></block>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="OnCursorChanged">
      <MemberSignature Language="C#" Value="protected override void OnCursorChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnCursorChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnCursorChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnCursorChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnCursorChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnCursorChanged : EventArgs -&gt; unit" Usage="dataGridView.OnCursorChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.EventArgs" />。</param>
        <summary>如果光标在用户代码中更改，将会引发 <see cref="E:System.Windows.Forms.Control.CursorChanged" /> 事件并更新 <see cref="P:System.Windows.Forms.DataGridView.UserSetCursor" /> 属性。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.DataGridView>控件根据 <xref:System.Windows.Forms.Control.Cursor%2A> 鼠标指针的位置更改属性值。 <xref:System.Windows.Forms.DataGridView.UserSetCursor%2A>属性存储属性的法线值 <xref:System.Windows.Forms.Control.Cursor%2A> 并忽略控件的更改。 事件发生时调用此方法 <xref:System.Windows.Forms.Control.CursorChanged> ，并且在必要时还会更新 <xref:System.Windows.Forms.DataGridView.UserSetCursor%2A> 属性（如有必要），并调用任何事件处理程序。  
  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
 <xref:System.Windows.Forms.DataGridView.OnCursorChanged%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>当 <see cref="M:System.Windows.Forms.DataGridView.OnCursorChanged(System.EventArgs)" /> 在派生类中重写时，请确保调用基类的 <see cref="M:System.Windows.Forms.DataGridView.OnCursorChanged(System.EventArgs)" /> 方法，以便注册的委托接收事件。</para></block>
        <altmember cref="P:System.Windows.Forms.DataGridView.UserSetCursor" />
        <altmember cref="T:System.Windows.Forms.Cursor" />
        <altmember cref="E:System.Windows.Forms.Control.CursorChanged" />
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="OnDataBindingComplete">
      <MemberSignature Language="C#" Value="protected virtual void OnDataBindingComplete (System.Windows.Forms.DataGridViewBindingCompleteEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDataBindingComplete(class System.Windows.Forms.DataGridViewBindingCompleteEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnDataBindingComplete(System.Windows.Forms.DataGridViewBindingCompleteEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDataBindingComplete (e As DataGridViewBindingCompleteEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDataBindingComplete(System::Windows::Forms::DataGridViewBindingCompleteEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnDataBindingComplete : System.Windows.Forms.DataGridViewBindingCompleteEventArgs -&gt; unit&#xA;override this.OnDataBindingComplete : System.Windows.Forms.DataGridViewBindingCompleteEventArgs -&gt; unit" Usage="dataGridView.OnDataBindingComplete e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewBindingCompleteEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.Windows.Forms.DataGridViewBindingCompleteEventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.DataGridView.DataBindingComplete" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当使用中的数据发生更改时，将发生绑定操作 <xref:System.Windows.Forms.CurrencyManager> 。 例如，如果 <xref:System.Windows.Forms.CurrencyManager.ListChanged> 发生事件，则 <xref:System.Windows.Forms.DataGridView> 会更新其视图，并在 <xref:System.Windows.Forms.DataGridView.DataBindingComplete> 事件完成后引发事件。  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.DataGridView.DataBindingComplete" />
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="OnDataError">
      <MemberSignature Language="C#" Value="protected virtual void OnDataError (bool displayErrorDialogIfNoHandler, System.Windows.Forms.DataGridViewDataErrorEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDataError(bool displayErrorDialogIfNoHandler, class System.Windows.Forms.DataGridViewDataErrorEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnDataError(System.Boolean,System.Windows.Forms.DataGridViewDataErrorEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDataError (displayErrorDialogIfNoHandler As Boolean, e As DataGridViewDataErrorEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDataError(bool displayErrorDialogIfNoHandler, System::Windows::Forms::DataGridViewDataErrorEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnDataError : bool * System.Windows.Forms.DataGridViewDataErrorEventArgs -&gt; unit&#xA;override this.OnDataError : bool * System.Windows.Forms.DataGridViewDataErrorEventArgs -&gt; unit" Usage="dataGridView.OnDataError (displayErrorDialogIfNoHandler, e)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="displayErrorDialogIfNoHandler" Type="System.Boolean" />
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewDataErrorEventArgs" />
      </Parameters>
      <Docs>
        <param name="displayErrorDialogIfNoHandler">如果要在没有 <see cref="E:System.Windows.Forms.DataGridView.DataError" /> 事件的处理程序的情况下显示错误对话框，则为 <see langword="true" />。</param>
        <param name="e">包含事件数据的 <see cref="T:System.Windows.Forms.DataGridViewDataErrorEventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.DataGridView.DataError" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
 <xref:System.Windows.Forms.DataGridView.OnDataError%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>当 <see cref="M:System.Windows.Forms.DataGridView.OnDataError(System.Boolean,System.Windows.Forms.DataGridViewDataErrorEventArgs)" /> 在派生类中重写时，请确保调用基类的 <see cref="M:System.Windows.Forms.DataGridView.OnDataError(System.Boolean,System.Windows.Forms.DataGridViewDataErrorEventArgs)" /> 方法，以便注册的委托接收事件。</para></block>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="OnDataMemberChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnDataMemberChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDataMemberChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnDataMemberChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDataMemberChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDataMemberChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnDataMemberChanged : EventArgs -&gt; unit&#xA;override this.OnDataMemberChanged : EventArgs -&gt; unit" Usage="dataGridView.OnDataMemberChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.EventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.DataGridView.DataMemberChanged" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
 <xref:System.Windows.Forms.DataGridView.OnDataMemberChanged%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>在派生类中重写 <see cref="M:System.Windows.Forms.DataGridView.OnDataMemberChanged(System.EventArgs)" /> 时，一定要调用基类的 <see cref="M:System.Windows.Forms.DataGridView.OnDataMemberChanged(System.EventArgs)" /> 方法，以便已注册的委托对事件进行接收。</para></block>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="OnDataSourceChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnDataSourceChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDataSourceChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnDataSourceChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDataSourceChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDataSourceChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnDataSourceChanged : EventArgs -&gt; unit&#xA;override this.OnDataSourceChanged : EventArgs -&gt; unit" Usage="dataGridView.OnDataSourceChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.EventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.DataGridView.DataSourceChanged" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
 <xref:System.Windows.Forms.DataGridView.OnDataSourceChanged%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>在派生类中重写 <see cref="M:System.Windows.Forms.DataGridView.OnDataSourceChanged(System.EventArgs)" /> 时，一定要调用基类的 <see cref="M:System.Windows.Forms.DataGridView.OnDataSourceChanged(System.EventArgs)" /> 方法，以便已注册的委托对事件进行接收。</para></block>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="OnDefaultCellStyleChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnDefaultCellStyleChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDefaultCellStyleChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnDefaultCellStyleChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDefaultCellStyleChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDefaultCellStyleChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnDefaultCellStyleChanged : EventArgs -&gt; unit&#xA;override this.OnDefaultCellStyleChanged : EventArgs -&gt; unit" Usage="dataGridView.OnDefaultCellStyleChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.EventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.DataGridView.DefaultCellStyleChanged" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
 <xref:System.Windows.Forms.DataGridView.OnDefaultCellStyleChanged%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>在派生类中重写 <see cref="M:System.Windows.Forms.DataGridView.OnDefaultCellStyleChanged(System.EventArgs)" /> 时，一定要调用基类的 <see cref="M:System.Windows.Forms.DataGridView.OnDefaultCellStyleChanged(System.EventArgs)" /> 方法，以便已注册的委托对事件进行接收。</para></block>
        <altmember cref="T:System.Windows.Forms.DataGridViewCellStyle" />
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
        <related type="Article" href="/dotnet/framework/winforms/controls/cell-styles-in-the-windows-forms-datagridview-control">Windows 窗体 DataGridView 控件中的单元格样式</related>
      </Docs>
    </Member>
    <Member MemberName="OnDefaultValuesNeeded">
      <MemberSignature Language="C#" Value="protected virtual void OnDefaultValuesNeeded (System.Windows.Forms.DataGridViewRowEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDefaultValuesNeeded(class System.Windows.Forms.DataGridViewRowEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnDefaultValuesNeeded(System.Windows.Forms.DataGridViewRowEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDefaultValuesNeeded (e As DataGridViewRowEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDefaultValuesNeeded(System::Windows::Forms::DataGridViewRowEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnDefaultValuesNeeded : System.Windows.Forms.DataGridViewRowEventArgs -&gt; unit&#xA;override this.OnDefaultValuesNeeded : System.Windows.Forms.DataGridViewRowEventArgs -&gt; unit" Usage="dataGridView.OnDefaultValuesNeeded e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewRowEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.Windows.Forms.DataGridViewRowEventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.DataGridView.DefaultValuesNeeded" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
 <xref:System.Windows.Forms.DataGridView.OnDefaultValuesNeeded%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>在派生类中重写 <see cref="M:System.Windows.Forms.DataGridView.OnDefaultValuesNeeded(System.Windows.Forms.DataGridViewRowEventArgs)" /> 时，一定要调用基类的 <see cref="M:System.Windows.Forms.DataGridView.OnDefaultValuesNeeded(System.Windows.Forms.DataGridViewRowEventArgs)" /> 方法，以便已注册的委托对事件进行接收。</para></block>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="OnDoubleClick">
      <MemberSignature Language="C#" Value="protected override void OnDoubleClick (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnDoubleClick(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnDoubleClick(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnDoubleClick (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnDoubleClick(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnDoubleClick : EventArgs -&gt; unit" Usage="dataGridView.OnDoubleClick e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.EventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.Control.DoubleClick" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
 <xref:System.Windows.Forms.DataGridView.OnDoubleClick%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>当 <see cref="M:System.Windows.Forms.DataGridView.OnDoubleClick(System.EventArgs)" /> 在派生类中重写时，请确保调用基类的 <see cref="M:System.Windows.Forms.DataGridView.OnDoubleClick(System.EventArgs)" /> 方法，以便注册的委托接收事件。</para></block>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="OnEditingControlShowing">
      <MemberSignature Language="C#" Value="protected virtual void OnEditingControlShowing (System.Windows.Forms.DataGridViewEditingControlShowingEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnEditingControlShowing(class System.Windows.Forms.DataGridViewEditingControlShowingEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnEditingControlShowing(System.Windows.Forms.DataGridViewEditingControlShowingEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnEditingControlShowing (e As DataGridViewEditingControlShowingEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnEditingControlShowing(System::Windows::Forms::DataGridViewEditingControlShowingEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnEditingControlShowing : System.Windows.Forms.DataGridViewEditingControlShowingEventArgs -&gt; unit&#xA;override this.OnEditingControlShowing : System.Windows.Forms.DataGridViewEditingControlShowingEventArgs -&gt; unit" Usage="dataGridView.OnEditingControlShowing e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewEditingControlShowingEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">一个 <see cref="T:System.Windows.Forms.DataGridViewEditingControlShowingEventArgs" />，包含有关编辑控件的信息。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.DataGridView.EditingControlShowing" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
 <xref:System.Windows.Forms.DataGridView.OnEditingControlShowing%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>当 <see cref="M:System.Windows.Forms.DataGridView.OnEditingControlShowing(System.Windows.Forms.DataGridViewEditingControlShowingEventArgs)" /> 在派生类中重写时，请确保调用基类的 <see cref="M:System.Windows.Forms.DataGridView.OnEditingControlShowing(System.Windows.Forms.DataGridViewEditingControlShowingEventArgs)" /> 方法，以便注册的委托接收事件。</para></block>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="OnEditModeChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnEditModeChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnEditModeChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnEditModeChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnEditModeChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnEditModeChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnEditModeChanged : EventArgs -&gt; unit&#xA;override this.OnEditModeChanged : EventArgs -&gt; unit" Usage="dataGridView.OnEditModeChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.EventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.DataGridView.EditModeChanged" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.DataGridView.EditModeChanged>当属性发生更改时，将引发事件 <xref:System.Windows.Forms.DataGridView.EditMode%2A> 。  
  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
 <xref:System.Windows.Forms.DataGridView.OnEditModeChanged%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">进入编辑模式后，当前单元格的 <see cref="P:System.Windows.Forms.DataGridViewCell.EditType" /> 属性不表示派生自 <see cref="T:System.Windows.Forms.Control" /> 并实现 <see cref="T:System.Windows.Forms.IDataGridViewEditingControl" /> 的类。</exception>
        <block subset="none" type="overrides"><para>当 <see cref="M:System.Windows.Forms.DataGridView.OnEditModeChanged(System.EventArgs)" /> 在派生类中重写时，请确保调用基类的 <see cref="M:System.Windows.Forms.DataGridView.OnEditModeChanged(System.EventArgs)" /> 方法，以便注册的委托接收事件。</para></block>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="OnEnabledChanged">
      <MemberSignature Language="C#" Value="protected override void OnEnabledChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnEnabledChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnEnabledChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnEnabledChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnEnabledChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnEnabledChanged : EventArgs -&gt; unit" Usage="dataGridView.OnEnabledChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.EventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.Control.EnabledChanged" /> 事件。</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnEnabledChanged(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnEnter">
      <MemberSignature Language="C#" Value="protected override void OnEnter (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnEnter(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnEnter(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnEnter (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnEnter(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnEnter : EventArgs -&gt; unit" Usage="dataGridView.OnEnter e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.EventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.Control.Enter" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
 <xref:System.Windows.Forms.DataGridView.OnEnter%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">此控件配置为在接收到焦点后进入编辑模式，但是进入焦点后，当前单元格的 <see cref="P:System.Windows.Forms.DataGridViewCell.EditType" /> 属性不表示从 <see cref="T:System.Windows.Forms.Control" /> 派生并实现 <see cref="T:System.Windows.Forms.IDataGridViewEditingControl" /> 的类。</exception>
        <exception cref="T:System.Exception">该控件配置为在收到焦点时进入编辑模式，但是对编辑单元格值的初始化失败，<see cref="E:System.Windows.Forms.DataGridView.DataError" /> 事件没有处理程序，或者处理程序已将 <see cref="P:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException" /> 属性设置为 <see langword="true" />。 通常情况下，可将该异常对象强制转换为类型  <see cref="T:System.FormatException" />。</exception>
        <block subset="none" type="overrides"><para>在派生类中重写 <see cref="M:System.Windows.Forms.DataGridView.OnEnter(System.EventArgs)" /> 时，一定要调用基类的 <see cref="M:System.Windows.Forms.DataGridView.OnEnter(System.EventArgs)" /> 方法，以便已注册的委托对事件进行接收。</para></block>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="OnFontChanged">
      <MemberSignature Language="C#" Value="protected override void OnFontChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnFontChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnFontChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnFontChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnFontChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnFontChanged : EventArgs -&gt; unit" Usage="dataGridView.OnFontChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.EventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.DataGridView.FontChanged" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 除了引发 <xref:System.Windows.Forms.DataGridView.FontChanged> 事件外，此方法还使用属性的新值 <xref:System.Windows.Forms.DataGridView.Font%2A> 来更新 <xref:System.Windows.Forms.DataGridViewCellStyle.Font%2A> <xref:System.Windows.Forms.DataGridViewCellStyle> <xref:System.Windows.Forms.DataGridView.DefaultCellStyle%2A> 、和属性返回的对象的属性 <xref:System.Windows.Forms.DataGridView.ColumnHeadersDefaultCellStyle%2A> <xref:System.Windows.Forms.DataGridView.RowHeadersDefaultCellStyle%2A> 。  
  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
 <xref:System.Windows.Forms.DataGridView.OnFontChanged%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>在派生类中重写 <see cref="M:System.Windows.Forms.DataGridView.OnFontChanged(System.EventArgs)" /> 时，一定要调用基类的 <see cref="M:System.Windows.Forms.DataGridView.OnFontChanged(System.EventArgs)" /> 方法，以便已注册的委托对事件进行接收。</para></block>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="OnForeColorChanged">
      <MemberSignature Language="C#" Value="protected override void OnForeColorChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnForeColorChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnForeColorChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnForeColorChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnForeColorChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnForeColorChanged : EventArgs -&gt; unit" Usage="dataGridView.OnForeColorChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.EventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.DataGridView.ForeColorChanged" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 除了引发 <xref:System.Windows.Forms.DataGridView.FontChanged> 事件外，此方法还使用属性的新值 <xref:System.Windows.Forms.DataGridView.ForeColor%2A> 来更新 <xref:System.Windows.Forms.DataGridViewCellStyle.ForeColor%2A> 属性返回的的属性 <xref:System.Windows.Forms.DataGridViewCellStyle> <xref:System.Windows.Forms.DataGridView.DefaultCellStyle%2A> 。  
  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
 <xref:System.Windows.Forms.DataGridView.OnForeColorChanged%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>在派生类中重写 <see cref="M:System.Windows.Forms.DataGridView.OnForeColorChanged(System.EventArgs)" /> 时，一定要调用基类的 <see cref="M:System.Windows.Forms.DataGridView.OnForeColorChanged(System.EventArgs)" /> 方法，以便已注册的委托对事件进行接收。</para></block>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="OnGotFocus">
      <MemberSignature Language="C#" Value="protected override void OnGotFocus (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnGotFocus(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnGotFocus(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnGotFocus (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnGotFocus(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnGotFocus : EventArgs -&gt; unit" Usage="dataGridView.OnGotFocus e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.EventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.Control.GotFocus" /> 事件。</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnGotFocus(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnGridColorChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnGridColorChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnGridColorChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnGridColorChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnGridColorChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnGridColorChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnGridColorChanged : EventArgs -&gt; unit&#xA;override this.OnGridColorChanged : EventArgs -&gt; unit" Usage="dataGridView.OnGridColorChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.EventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.DataGridView.GridColorChanged" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
 <xref:System.Windows.Forms.DataGridView.OnGridColorChanged%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>在派生类中重写 <see cref="M:System.Windows.Forms.DataGridView.OnGridColorChanged(System.EventArgs)" /> 时，一定要调用基类的 <see cref="M:System.Windows.Forms.DataGridView.OnGridColorChanged(System.EventArgs)" /> 方法，以便已注册的委托对事件进行接收。</para></block>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="OnHandleCreated">
      <MemberSignature Language="C#" Value="protected override void OnHandleCreated (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnHandleCreated(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnHandleCreated(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnHandleCreated (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnHandleCreated(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnHandleCreated : EventArgs -&gt; unit" Usage="dataGridView.OnHandleCreated e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.EventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.Control.HandleCreated" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
 <xref:System.Windows.Forms.DataGridView.OnHandleCreated%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>在派生类中重写 <see cref="M:System.Windows.Forms.DataGridView.OnHandleCreated(System.EventArgs)" /> 时，一定要调用基类的 <see cref="M:System.Windows.Forms.DataGridView.OnHandleCreated(System.EventArgs)" /> 方法，以便已注册的委托对事件进行接收。</para></block>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="OnHandleDestroyed">
      <MemberSignature Language="C#" Value="protected override void OnHandleDestroyed (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnHandleDestroyed(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnHandleDestroyed(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnHandleDestroyed (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnHandleDestroyed(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnHandleDestroyed : EventArgs -&gt; unit" Usage="dataGridView.OnHandleDestroyed e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.EventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.Control.HandleDestroyed" /> 事件。</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnHandleDestroyed(System.EventArgs)" />
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="OnKeyDown">
      <MemberSignature Language="C#" Value="protected override void OnKeyDown (System.Windows.Forms.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnKeyDown(class System.Windows.Forms.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnKeyDown(System.Windows.Forms.KeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnKeyDown (e As KeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnKeyDown(System::Windows::Forms::KeyEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnKeyDown : System.Windows.Forms.KeyEventArgs -&gt; unit" Usage="dataGridView.OnKeyDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.Windows.Forms.KeyEventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.Control.KeyDown" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
 <xref:System.Windows.Forms.DataGridView.OnKeyDown%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">此操作将导致控件进入编辑模式，但是对正在编辑的单元格值的初始化失败，并且 <see cref="E:System.Windows.Forms.DataGridView.DataError" /> 事件没有处理程序，或者处理程序已将 <see cref="P:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException" /> 属性设置为 <see langword="true" />。 通常情况下，可将该异常对象强制转换为类型  <see cref="T:System.FormatException" />。</exception>
        <block subset="none" type="overrides"><para>在派生类中重写 <see cref="M:System.Windows.Forms.DataGridView.OnKeyDown(System.Windows.Forms.KeyEventArgs)" /> 时，一定要调用基类的 <see cref="M:System.Windows.Forms.DataGridView.OnKeyDown(System.Windows.Forms.KeyEventArgs)" /> 方法，以便已注册的委托对事件进行接收。</para></block>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="OnKeyPress">
      <MemberSignature Language="C#" Value="protected override void OnKeyPress (System.Windows.Forms.KeyPressEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnKeyPress(class System.Windows.Forms.KeyPressEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnKeyPress (e As KeyPressEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnKeyPress(System::Windows::Forms::KeyPressEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnKeyPress : System.Windows.Forms.KeyPressEventArgs -&gt; unit" Usage="dataGridView.OnKeyPress e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.KeyPressEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.Windows.Forms.KeyPressEventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.Control.KeyPress" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
 <xref:System.Windows.Forms.DataGridView.OnKeyPress%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>在派生类中重写 <see cref="M:System.Windows.Forms.DataGridView.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)" /> 时，一定要调用基类的 <see cref="M:System.Windows.Forms.DataGridView.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)" /> 方法，以便已注册的委托对事件进行接收。</para></block>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="OnKeyUp">
      <MemberSignature Language="C#" Value="protected override void OnKeyUp (System.Windows.Forms.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnKeyUp(class System.Windows.Forms.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnKeyUp(System.Windows.Forms.KeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnKeyUp (e As KeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnKeyUp(System::Windows::Forms::KeyEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnKeyUp : System.Windows.Forms.KeyEventArgs -&gt; unit" Usage="dataGridView.OnKeyUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.Windows.Forms.KeyEventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.Control.KeyUp" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
 <xref:System.Windows.Forms.DataGridView.OnKeyUp%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>在派生类中重写 <see cref="M:System.Windows.Forms.DataGridView.OnKeyUp(System.Windows.Forms.KeyEventArgs)" /> 时，一定要调用基类的 <see cref="M:System.Windows.Forms.DataGridView.OnKeyUp(System.Windows.Forms.KeyEventArgs)" /> 方法，以便已注册的委托对事件进行接收。</para></block>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="OnLayout">
      <MemberSignature Language="C#" Value="protected override void OnLayout (System.Windows.Forms.LayoutEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnLayout(class System.Windows.Forms.LayoutEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnLayout(System.Windows.Forms.LayoutEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnLayout (e As LayoutEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnLayout(System::Windows::Forms::LayoutEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnLayout : System.Windows.Forms.LayoutEventArgs -&gt; unit" Usage="dataGridView.OnLayout e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.LayoutEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.Windows.Forms.LayoutEventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.Control.Layout" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
 <xref:System.Windows.Forms.DataGridView.OnLayout%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>在派生类中重写 <see cref="M:System.Windows.Forms.DataGridView.OnLayout(System.Windows.Forms.LayoutEventArgs)" /> 时，一定要调用基类的 <see cref="M:System.Windows.Forms.DataGridView.OnLayout(System.Windows.Forms.LayoutEventArgs)" /> 方法，以便已注册的委托对事件进行接收。</para></block>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="OnLeave">
      <MemberSignature Language="C#" Value="protected override void OnLeave (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnLeave(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnLeave(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnLeave (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnLeave(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnLeave : EventArgs -&gt; unit" Usage="dataGridView.OnLeave e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.EventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.Control.Leave" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
 <xref:System.Windows.Forms.DataGridView.OnLeave%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>在派生类中重写 <see cref="M:System.Windows.Forms.DataGridView.OnLeave(System.EventArgs)" /> 时，一定要调用基类的 <see cref="M:System.Windows.Forms.DataGridView.OnLeave(System.EventArgs)" /> 方法，以便已注册的委托对事件进行接收。</para></block>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="OnLostFocus">
      <MemberSignature Language="C#" Value="protected override void OnLostFocus (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnLostFocus(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnLostFocus(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnLostFocus (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnLostFocus(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnLostFocus : EventArgs -&gt; unit" Usage="dataGridView.OnLostFocus e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.EventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.Control.LostFocus" /> 事件。</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnLostFocus(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseClick">
      <MemberSignature Language="C#" Value="protected override void OnMouseClick (System.Windows.Forms.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnMouseClick(class System.Windows.Forms.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnMouseClick(System.Windows.Forms.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnMouseClick (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnMouseClick(System::Windows::Forms::MouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnMouseClick : System.Windows.Forms.MouseEventArgs -&gt; unit" Usage="dataGridView.OnMouseClick e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.Windows.Forms.MouseEventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.Control.MouseClick" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
 <xref:System.Windows.Forms.DataGridView.OnMouseClick%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。

## Examples  
 下面的代码示例演示如何使用此方法。  
  
 [!code-csharp[System.Windows.Forms.DataGridViewMisc2#10](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewMisc2/cs/misc2.cs#10)]
 [!code-vb[System.Windows.Forms.DataGridViewMisc2#10](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewMisc2/vb/misc2.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">该控件配置为在收到焦点时进入编辑模式，但是对编辑单元格值的初始化失败，<see cref="E:System.Windows.Forms.DataGridView.DataError" /> 事件没有处理程序，或者处理程序已将 <see cref="P:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException" /> 属性设置为 <see langword="true" />。 通常情况下，可将该异常对象强制转换为类型  <see cref="T:System.FormatException" />。</exception>
        <block subset="none" type="overrides"><para>在派生类中重写 <see cref="M:System.Windows.Forms.DataGridView.OnMouseClick(System.Windows.Forms.MouseEventArgs)" /> 时，一定要调用基类的 <see cref="M:System.Windows.Forms.DataGridView.OnMouseClick(System.Windows.Forms.MouseEventArgs)" /> 方法，以便已注册的委托对事件进行接收。</para></block>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="OnMouseDoubleClick">
      <MemberSignature Language="C#" Value="protected override void OnMouseDoubleClick (System.Windows.Forms.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnMouseDoubleClick(class System.Windows.Forms.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnMouseDoubleClick(System.Windows.Forms.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnMouseDoubleClick (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnMouseDoubleClick(System::Windows::Forms::MouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnMouseDoubleClick : System.Windows.Forms.MouseEventArgs -&gt; unit" Usage="dataGridView.OnMouseDoubleClick e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.Windows.Forms.MouseEventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.Control.MouseDoubleClick" /> 事件。</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnMouseDoubleClick(System.Windows.Forms.MouseEventArgs)" />
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="OnMouseDown">
      <MemberSignature Language="C#" Value="protected override void OnMouseDown (System.Windows.Forms.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnMouseDown(class System.Windows.Forms.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnMouseDown(System.Windows.Forms.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnMouseDown (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnMouseDown(System::Windows::Forms::MouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnMouseDown : System.Windows.Forms.MouseEventArgs -&gt; unit" Usage="dataGridView.OnMouseDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.Windows.Forms.MouseEventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.Control.MouseDown" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
 <xref:System.Windows.Forms.DataGridView.OnMouseDown%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">该控件配置为在收到焦点时进入编辑模式，但是对编辑单元格值的初始化失败，<see cref="E:System.Windows.Forms.DataGridView.DataError" /> 事件没有处理程序，或者处理程序已将 <see cref="P:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException" /> 属性设置为 <see langword="true" />。 通常情况下，可将该异常对象强制转换为类型  <see cref="T:System.FormatException" />。</exception>
        <block subset="none" type="overrides"><para>在派生类中重写 <see cref="M:System.Windows.Forms.DataGridView.OnMouseDown(System.Windows.Forms.MouseEventArgs)" /> 时，一定要调用基类的 <see cref="M:System.Windows.Forms.DataGridView.OnMouseDown(System.Windows.Forms.MouseEventArgs)" /> 方法，以便已注册的委托对事件进行接收。</para></block>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="OnMouseEnter">
      <MemberSignature Language="C#" Value="protected override void OnMouseEnter (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnMouseEnter(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnMouseEnter(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnMouseEnter (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnMouseEnter(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnMouseEnter : EventArgs -&gt; unit" Usage="dataGridView.OnMouseEnter e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.EventArgs" />。</param>
        <summary>引发 <see cref="M:System.Windows.Forms.Control.OnMouseEnter(System.EventArgs)" /> 事件。</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.ButtonBase.OnMouseEnter(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseLeave">
      <MemberSignature Language="C#" Value="protected override void OnMouseLeave (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnMouseLeave(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnMouseLeave(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnMouseLeave (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnMouseLeave(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnMouseLeave : EventArgs -&gt; unit" Usage="dataGridView.OnMouseLeave e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.EventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.Control.MouseLeave" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
 <xref:System.Windows.Forms.DataGridView.OnMouseLeave%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。

## Examples  
 下面的代码示例演示如何使用此方法。 此示例摘自 [如何：通过扩展其行为和外观自定义 Windows 窗体 DataGridView 控件中的单元格和列](/dotnet/framework/winforms/controls/customize-cells-and-columns-in-the-datagrid-by-extending-behavior)的更大示例。  
  
 [!code-csharp[System.Windows.Forms.DataGridViewRolloverCell#220](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewRolloverCell/CS/rollovercell.cs#220)]
 [!code-vb[System.Windows.Forms.DataGridViewRolloverCell#220](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewRolloverCell/VB/rollovercell.vb#220)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>在派生类中重写 <see cref="M:System.Windows.Forms.DataGridView.OnMouseLeave(System.EventArgs)" /> 时，一定要调用基类的 <see cref="M:System.Windows.Forms.DataGridView.OnMouseLeave(System.EventArgs)" /> 方法，以便已注册的委托对事件进行接收。</para></block>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="OnMouseMove">
      <MemberSignature Language="C#" Value="protected override void OnMouseMove (System.Windows.Forms.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnMouseMove(class System.Windows.Forms.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnMouseMove(System.Windows.Forms.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnMouseMove (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnMouseMove(System::Windows::Forms::MouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnMouseMove : System.Windows.Forms.MouseEventArgs -&gt; unit" Usage="dataGridView.OnMouseMove e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.Windows.Forms.MouseEventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.Control.MouseMove" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
 <xref:System.Windows.Forms.DataGridView.OnMouseMove%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>在派生类中重写 <see cref="M:System.Windows.Forms.DataGridView.OnMouseMove(System.Windows.Forms.MouseEventArgs)" /> 时，一定要调用基类的 <see cref="M:System.Windows.Forms.DataGridView.OnMouseMove(System.Windows.Forms.MouseEventArgs)" /> 方法，以便已注册的委托对事件进行接收。</para></block>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="OnMouseUp">
      <MemberSignature Language="C#" Value="protected override void OnMouseUp (System.Windows.Forms.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnMouseUp(class System.Windows.Forms.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnMouseUp(System.Windows.Forms.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnMouseUp (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnMouseUp(System::Windows::Forms::MouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnMouseUp : System.Windows.Forms.MouseEventArgs -&gt; unit" Usage="dataGridView.OnMouseUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.Windows.Forms.MouseEventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.Control.MouseUp" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
 <xref:System.Windows.Forms.DataGridView.OnMouseUp%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>在派生类中重写 <see cref="M:System.Windows.Forms.DataGridView.OnMouseUp(System.Windows.Forms.MouseEventArgs)" /> 时，一定要调用基类的 <see cref="M:System.Windows.Forms.DataGridView.OnMouseUp(System.Windows.Forms.MouseEventArgs)" /> 方法，以便已注册的委托对事件进行接收。</para></block>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="OnMouseWheel">
      <MemberSignature Language="C#" Value="protected override void OnMouseWheel (System.Windows.Forms.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnMouseWheel(class System.Windows.Forms.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnMouseWheel(System.Windows.Forms.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnMouseWheel (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnMouseWheel(System::Windows::Forms::MouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnMouseWheel : System.Windows.Forms.MouseEventArgs -&gt; unit" Usage="dataGridView.OnMouseWheel e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.Windows.Forms.MouseEventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.Control.MouseWheel" /> 事件。</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnMouseWheel(System.Windows.Forms.MouseEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnMultiSelectChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnMultiSelectChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMultiSelectChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnMultiSelectChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMultiSelectChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMultiSelectChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMultiSelectChanged : EventArgs -&gt; unit&#xA;override this.OnMultiSelectChanged : EventArgs -&gt; unit" Usage="dataGridView.OnMultiSelectChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.EventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.DataGridView.MultiSelectChanged" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
 <xref:System.Windows.Forms.DataGridView.OnMultiSelectChanged%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>在派生类中重写 <see cref="M:System.Windows.Forms.DataGridView.OnMultiSelectChanged(System.EventArgs)" /> 时，一定要调用基类的 <see cref="M:System.Windows.Forms.DataGridView.OnMultiSelectChanged(System.EventArgs)" /> 方法，以便已注册的委托对事件进行接收。</para></block>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="OnNewRowNeeded">
      <MemberSignature Language="C#" Value="protected virtual void OnNewRowNeeded (System.Windows.Forms.DataGridViewRowEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnNewRowNeeded(class System.Windows.Forms.DataGridViewRowEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnNewRowNeeded(System.Windows.Forms.DataGridViewRowEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnNewRowNeeded (e As DataGridViewRowEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnNewRowNeeded(System::Windows::Forms::DataGridViewRowEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnNewRowNeeded : System.Windows.Forms.DataGridViewRowEventArgs -&gt; unit&#xA;override this.OnNewRowNeeded : System.Windows.Forms.DataGridViewRowEventArgs -&gt; unit" Usage="dataGridView.OnNewRowNeeded e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewRowEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.Windows.Forms.DataGridViewRowEventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.DataGridView.NewRowNeeded" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
 <xref:System.Windows.Forms.DataGridView.OnNewRowNeeded%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">由 <paramref name="e" /> 的 <see cref="P:System.Windows.Forms.DataGridViewRowEventArgs.Row" /> 属性指示的行不属于此 <see cref="T:System.Windows.Forms.DataGridView" /> 控件。</exception>
        <block subset="none" type="overrides"><para>在派生类中重写 <see cref="M:System.Windows.Forms.DataGridView.OnNewRowNeeded(System.Windows.Forms.DataGridViewRowEventArgs)" /> 时，一定要调用基类的 <see cref="M:System.Windows.Forms.DataGridView.OnNewRowNeeded(System.Windows.Forms.DataGridViewRowEventArgs)" /> 方法，以便已注册的委托对事件进行接收。</para></block>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="OnPaint">
      <MemberSignature Language="C#" Value="protected override void OnPaint (System.Windows.Forms.PaintEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnPaint(class System.Windows.Forms.PaintEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnPaint(System.Windows.Forms.PaintEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnPaint (e As PaintEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnPaint(System::Windows::Forms::PaintEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnPaint : System.Windows.Forms.PaintEventArgs -&gt; unit" Usage="dataGridView.OnPaint e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.PaintEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.Windows.Forms.PaintEventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.Control.Paint" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
 <xref:System.Windows.Forms.DataGridView.OnPaint%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">在执行此方法的过程中发生的任何异常都将被忽略，除非它们是下列项之一： 
-   <see cref="T:System.NullReferenceException" /> 
  
-   <see cref="T:System.StackOverflowException" /> 
  
-   <see cref="T:System.OutOfMemoryException" /> 
  
-   <see cref="T:System.Threading.ThreadAbortException" /> 
  
-   <see cref="T:System.ExecutionEngineException" /> 
  
-   <see cref="T:System.IndexOutOfRangeException" /> 
  
-   <see cref="T:System.AccessViolationException" /></exception>
        <block subset="none" type="overrides"><para>在派生类中重写 <see cref="M:System.Windows.Forms.DataGridView.OnPaint(System.Windows.Forms.PaintEventArgs)" /> 时，一定要调用基类的 <see cref="M:System.Windows.Forms.DataGridView.OnPaint(System.Windows.Forms.PaintEventArgs)" /> 方法，以便已注册的委托对事件进行接收。</para></block>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="OnReadOnlyChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnReadOnlyChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnReadOnlyChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnReadOnlyChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnReadOnlyChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnReadOnlyChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnReadOnlyChanged : EventArgs -&gt; unit&#xA;override this.OnReadOnlyChanged : EventArgs -&gt; unit" Usage="dataGridView.OnReadOnlyChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.EventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.DataGridView.ReadOnlyChanged" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
 <xref:System.Windows.Forms.DataGridView.OnReadOnlyChanged%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">控件从只读更改为读/写，使得当前单元格进入编辑模式，但是当前单元格的 <see cref="P:System.Windows.Forms.DataGridViewCell.EditType" /> 属性不指示派生自 <see cref="T:System.Windows.Forms.Control" /> 且实现 <see cref="T:System.Windows.Forms.IDataGridViewEditingControl" /> 的类。</exception>
        <block subset="none" type="overrides"><para>在派生类中重写 <see cref="M:System.Windows.Forms.DataGridView.OnReadOnlyChanged(System.EventArgs)" /> 时，一定要调用基类的 <see cref="M:System.Windows.Forms.DataGridView.OnReadOnlyChanged(System.EventArgs)" /> 方法，以便已注册的委托对事件进行接收。</para></block>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="OnResize">
      <MemberSignature Language="C#" Value="protected override void OnResize (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnResize(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnResize(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnResize (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnResize(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnResize : EventArgs -&gt; unit" Usage="dataGridView.OnResize e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.EventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.Control.Resize" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
 <xref:System.Windows.Forms.DataGridView.OnResize%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>在派生类中重写 <see cref="M:System.Windows.Forms.DataGridView.OnResize(System.EventArgs)" /> 时，一定要调用基类的 <see cref="M:System.Windows.Forms.DataGridView.OnResize(System.EventArgs)" /> 方法，以便已注册的委托对事件进行接收。</para></block>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="OnRightToLeftChanged">
      <MemberSignature Language="C#" Value="protected override void OnRightToLeftChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnRightToLeftChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnRightToLeftChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnRightToLeftChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnRightToLeftChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnRightToLeftChanged : EventArgs -&gt; unit" Usage="dataGridView.OnRightToLeftChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.EventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.Control.RightToLeftChanged" /> 事件。</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnRightToLeftChanged(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnRowContextMenuStripChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnRowContextMenuStripChanged (System.Windows.Forms.DataGridViewRowEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRowContextMenuStripChanged(class System.Windows.Forms.DataGridViewRowEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnRowContextMenuStripChanged(System.Windows.Forms.DataGridViewRowEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnRowContextMenuStripChanged (e As DataGridViewRowEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnRowContextMenuStripChanged(System::Windows::Forms::DataGridViewRowEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnRowContextMenuStripChanged : System.Windows.Forms.DataGridViewRowEventArgs -&gt; unit&#xA;override this.OnRowContextMenuStripChanged : System.Windows.Forms.DataGridViewRowEventArgs -&gt; unit" Usage="dataGridView.OnRowContextMenuStripChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewRowEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.Windows.Forms.DataGridViewRowEventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.DataGridView.RowContextMenuStripChanged" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
 <xref:System.Windows.Forms.DataGridView.OnRowContextMenuStripChanged%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">由 <paramref name="e" /> 的 <see cref="P:System.Windows.Forms.DataGridViewRowEventArgs.Row" /> 属性指示的行不属于此 <see cref="T:System.Windows.Forms.DataGridView" /> 控件。</exception>
        <block subset="none" type="overrides"><para>当 <see cref="M:System.Windows.Forms.DataGridView.OnRowContextMenuStripChanged(System.Windows.Forms.DataGridViewRowEventArgs)" /> 在派生类中重写时，请确保调用基类的 <see cref="M:System.Windows.Forms.DataGridView.OnRowContextMenuStripChanged(System.Windows.Forms.DataGridViewRowEventArgs)" /> 方法，以便注册的委托接收事件。</para></block>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="OnRowContextMenuStripNeeded">
      <MemberSignature Language="C#" Value="protected virtual void OnRowContextMenuStripNeeded (System.Windows.Forms.DataGridViewRowContextMenuStripNeededEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRowContextMenuStripNeeded(class System.Windows.Forms.DataGridViewRowContextMenuStripNeededEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnRowContextMenuStripNeeded(System.Windows.Forms.DataGridViewRowContextMenuStripNeededEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnRowContextMenuStripNeeded (e As DataGridViewRowContextMenuStripNeededEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnRowContextMenuStripNeeded(System::Windows::Forms::DataGridViewRowContextMenuStripNeededEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnRowContextMenuStripNeeded : System.Windows.Forms.DataGridViewRowContextMenuStripNeededEventArgs -&gt; unit&#xA;override this.OnRowContextMenuStripNeeded : System.Windows.Forms.DataGridViewRowContextMenuStripNeededEventArgs -&gt; unit" Usage="dataGridView.OnRowContextMenuStripNeeded e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewRowContextMenuStripNeededEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.Windows.Forms.DataGridViewRowContextMenuStripNeededEventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.DataGridView.RowContextMenuStripNeeded" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
 <xref:System.Windows.Forms.DataGridView.OnRowContextMenuStripNeeded%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>当 <see cref="M:System.Windows.Forms.DataGridView.OnRowContextMenuStripNeeded(System.Windows.Forms.DataGridViewRowContextMenuStripNeededEventArgs)" /> 在派生类中重写时，请确保调用基类的 <see cref="M:System.Windows.Forms.DataGridView.OnRowContextMenuStripNeeded(System.Windows.Forms.DataGridViewRowContextMenuStripNeededEventArgs)" /> 方法，以便注册的委托接收事件。</para></block>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="OnRowDefaultCellStyleChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnRowDefaultCellStyleChanged (System.Windows.Forms.DataGridViewRowEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRowDefaultCellStyleChanged(class System.Windows.Forms.DataGridViewRowEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnRowDefaultCellStyleChanged(System.Windows.Forms.DataGridViewRowEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnRowDefaultCellStyleChanged (e As DataGridViewRowEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnRowDefaultCellStyleChanged(System::Windows::Forms::DataGridViewRowEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnRowDefaultCellStyleChanged : System.Windows.Forms.DataGridViewRowEventArgs -&gt; unit&#xA;override this.OnRowDefaultCellStyleChanged : System.Windows.Forms.DataGridViewRowEventArgs -&gt; unit" Usage="dataGridView.OnRowDefaultCellStyleChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewRowEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.Windows.Forms.DataGridViewRowEventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.DataGridView.RowDefaultCellStyleChanged" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
 <xref:System.Windows.Forms.DataGridView.OnRowDefaultCellStyleChanged%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">由 <paramref name="e" /> 的 <see cref="P:System.Windows.Forms.DataGridViewRowEventArgs.Row" /> 属性指示的行不属于此 <see cref="T:System.Windows.Forms.DataGridView" /> 控件。</exception>
        <block subset="none" type="overrides"><para>在派生类中重写 <see cref="M:System.Windows.Forms.DataGridView.OnRowDefaultCellStyleChanged(System.Windows.Forms.DataGridViewRowEventArgs)" /> 时，一定要调用基类的 <see cref="M:System.Windows.Forms.DataGridView.OnRowDefaultCellStyleChanged(System.Windows.Forms.DataGridViewRowEventArgs)" /> 方法，以便已注册的委托对事件进行接收。</para></block>
        <altmember cref="T:System.Windows.Forms.DataGridViewCellStyle" />
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
        <related type="Article" href="/dotnet/framework/winforms/controls/cell-styles-in-the-windows-forms-datagridview-control">Windows 窗体 DataGridView 控件中的单元格样式</related>
      </Docs>
    </Member>
    <Member MemberName="OnRowDirtyStateNeeded">
      <MemberSignature Language="C#" Value="protected virtual void OnRowDirtyStateNeeded (System.Windows.Forms.QuestionEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRowDirtyStateNeeded(class System.Windows.Forms.QuestionEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnRowDirtyStateNeeded(System.Windows.Forms.QuestionEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnRowDirtyStateNeeded (e As QuestionEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnRowDirtyStateNeeded(System::Windows::Forms::QuestionEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnRowDirtyStateNeeded : System.Windows.Forms.QuestionEventArgs -&gt; unit&#xA;override this.OnRowDirtyStateNeeded : System.Windows.Forms.QuestionEventArgs -&gt; unit" Usage="dataGridView.OnRowDirtyStateNeeded e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.QuestionEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.Windows.Forms.QuestionEventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.DataGridView.RowDirtyStateNeeded" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
 <xref:System.Windows.Forms.DataGridView.OnRowDirtyStateNeeded%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>在派生类中重写 <see cref="M:System.Windows.Forms.DataGridView.OnRowDirtyStateNeeded(System.Windows.Forms.QuestionEventArgs)" /> 时，一定要调用基类的 <see cref="M:System.Windows.Forms.DataGridView.OnRowDirtyStateNeeded(System.Windows.Forms.QuestionEventArgs)" /> 方法，以便已注册的委托对事件进行接收。</para></block>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="OnRowDividerDoubleClick">
      <MemberSignature Language="C#" Value="protected virtual void OnRowDividerDoubleClick (System.Windows.Forms.DataGridViewRowDividerDoubleClickEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRowDividerDoubleClick(class System.Windows.Forms.DataGridViewRowDividerDoubleClickEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnRowDividerDoubleClick(System.Windows.Forms.DataGridViewRowDividerDoubleClickEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnRowDividerDoubleClick (e As DataGridViewRowDividerDoubleClickEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnRowDividerDoubleClick(System::Windows::Forms::DataGridViewRowDividerDoubleClickEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnRowDividerDoubleClick : System.Windows.Forms.DataGridViewRowDividerDoubleClickEventArgs -&gt; unit&#xA;override this.OnRowDividerDoubleClick : System.Windows.Forms.DataGridViewRowDividerDoubleClickEventArgs -&gt; unit" Usage="dataGridView.OnRowDividerDoubleClick e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewRowDividerDoubleClickEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.Windows.Forms.DataGridViewRowDividerDoubleClickEventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.DataGridView.RowDividerDoubleClick" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
 <xref:System.Windows.Forms.DataGridView.OnRowDividerDoubleClick%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>当 <see cref="M:System.Windows.Forms.DataGridView.OnRowDividerDoubleClick(System.Windows.Forms.DataGridViewRowDividerDoubleClickEventArgs)" /> 在派生类中重写时，请确保调用基类的 <see cref="M:System.Windows.Forms.DataGridView.OnRowDividerDoubleClick(System.Windows.Forms.DataGridViewRowDividerDoubleClickEventArgs)" /> 方法，以便注册的委托接收事件。</para></block>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="OnRowDividerHeightChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnRowDividerHeightChanged (System.Windows.Forms.DataGridViewRowEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRowDividerHeightChanged(class System.Windows.Forms.DataGridViewRowEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnRowDividerHeightChanged(System.Windows.Forms.DataGridViewRowEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnRowDividerHeightChanged (e As DataGridViewRowEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnRowDividerHeightChanged(System::Windows::Forms::DataGridViewRowEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnRowDividerHeightChanged : System.Windows.Forms.DataGridViewRowEventArgs -&gt; unit&#xA;override this.OnRowDividerHeightChanged : System.Windows.Forms.DataGridViewRowEventArgs -&gt; unit" Usage="dataGridView.OnRowDividerHeightChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewRowEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.Windows.Forms.DataGridViewRowEventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.DataGridView.RowDividerHeightChanged" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
 <xref:System.Windows.Forms.DataGridView.OnRowDividerHeightChanged%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">由 <paramref name="e" /> 的 <see cref="P:System.Windows.Forms.DataGridViewRowEventArgs.Row" /> 属性指示的行不属于此 <see cref="T:System.Windows.Forms.DataGridView" /> 控件。</exception>
        <block subset="none" type="overrides"><para>当 <see cref="M:System.Windows.Forms.DataGridView.OnRowDividerHeightChanged(System.Windows.Forms.DataGridViewRowEventArgs)" /> 在派生类中重写时，请确保调用基类的 <see cref="M:System.Windows.Forms.DataGridView.OnRowDividerHeightChanged(System.Windows.Forms.DataGridViewRowEventArgs)" /> 方法，以便注册的委托接收事件。</para></block>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="OnRowEnter">
      <MemberSignature Language="C#" Value="protected virtual void OnRowEnter (System.Windows.Forms.DataGridViewCellEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRowEnter(class System.Windows.Forms.DataGridViewCellEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnRowEnter(System.Windows.Forms.DataGridViewCellEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnRowEnter (e As DataGridViewCellEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnRowEnter(System::Windows::Forms::DataGridViewCellEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnRowEnter : System.Windows.Forms.DataGridViewCellEventArgs -&gt; unit&#xA;override this.OnRowEnter : System.Windows.Forms.DataGridViewCellEventArgs -&gt; unit" Usage="dataGridView.OnRowEnter e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewCellEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.Windows.Forms.DataGridViewCellEventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.DataGridView.RowEnter" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
 <xref:System.Windows.Forms.DataGridView.OnRowEnter%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>在派生类中重写 <see cref="M:System.Windows.Forms.DataGridView.OnRowEnter(System.Windows.Forms.DataGridViewCellEventArgs)" /> 时，一定要调用基类的 <see cref="M:System.Windows.Forms.DataGridView.OnRowEnter(System.Windows.Forms.DataGridViewCellEventArgs)" /> 方法，以便已注册的委托对事件进行接收。</para></block>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="OnRowErrorTextChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnRowErrorTextChanged (System.Windows.Forms.DataGridViewRowEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRowErrorTextChanged(class System.Windows.Forms.DataGridViewRowEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnRowErrorTextChanged(System.Windows.Forms.DataGridViewRowEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnRowErrorTextChanged (e As DataGridViewRowEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnRowErrorTextChanged(System::Windows::Forms::DataGridViewRowEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnRowErrorTextChanged : System.Windows.Forms.DataGridViewRowEventArgs -&gt; unit&#xA;override this.OnRowErrorTextChanged : System.Windows.Forms.DataGridViewRowEventArgs -&gt; unit" Usage="dataGridView.OnRowErrorTextChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewRowEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.Windows.Forms.DataGridViewRowEventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.DataGridView.RowErrorTextChanged" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
 <xref:System.Windows.Forms.DataGridView.OnRowErrorTextChanged%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">由 <paramref name="e" /> 的 <see cref="P:System.Windows.Forms.DataGridViewRowEventArgs.Row" /> 属性指示的行不属于此 <see cref="T:System.Windows.Forms.DataGridView" /> 控件。</exception>
        <block subset="none" type="overrides"><para>在派生类中重写 <see cref="M:System.Windows.Forms.DataGridView.OnRowEnter(System.Windows.Forms.DataGridViewCellEventArgs)" /> 时，一定要调用基类的 <see cref="M:System.Windows.Forms.DataGridView.OnRowEnter(System.Windows.Forms.DataGridViewCellEventArgs)" /> 方法，以便已注册的委托对事件进行接收。</para></block>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="OnRowErrorTextNeeded">
      <MemberSignature Language="C#" Value="protected virtual void OnRowErrorTextNeeded (System.Windows.Forms.DataGridViewRowErrorTextNeededEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRowErrorTextNeeded(class System.Windows.Forms.DataGridViewRowErrorTextNeededEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnRowErrorTextNeeded(System.Windows.Forms.DataGridViewRowErrorTextNeededEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnRowErrorTextNeeded (e As DataGridViewRowErrorTextNeededEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnRowErrorTextNeeded(System::Windows::Forms::DataGridViewRowErrorTextNeededEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnRowErrorTextNeeded : System.Windows.Forms.DataGridViewRowErrorTextNeededEventArgs -&gt; unit&#xA;override this.OnRowErrorTextNeeded : System.Windows.Forms.DataGridViewRowErrorTextNeededEventArgs -&gt; unit" Usage="dataGridView.OnRowErrorTextNeeded e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewRowErrorTextNeededEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.Windows.Forms.DataGridViewRowErrorTextNeededEventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.DataGridView.RowErrorTextNeeded" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
 <xref:System.Windows.Forms.DataGridView.OnRowErrorTextNeeded%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>当 <see cref="M:System.Windows.Forms.DataGridView.OnRowErrorTextNeeded(System.Windows.Forms.DataGridViewRowErrorTextNeededEventArgs)" /> 在派生类中重写时，请确保调用基类的 <see cref="M:System.Windows.Forms.DataGridView.OnRowErrorTextNeeded(System.Windows.Forms.DataGridViewRowErrorTextNeededEventArgs)" /> 方法，以便注册的委托接收事件。</para></block>
        <altmember cref="E:System.Windows.Forms.DataGridView.RowErrorTextNeeded" />
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="OnRowHeaderCellChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnRowHeaderCellChanged (System.Windows.Forms.DataGridViewRowEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRowHeaderCellChanged(class System.Windows.Forms.DataGridViewRowEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnRowHeaderCellChanged(System.Windows.Forms.DataGridViewRowEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnRowHeaderCellChanged (e As DataGridViewRowEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnRowHeaderCellChanged(System::Windows::Forms::DataGridViewRowEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnRowHeaderCellChanged : System.Windows.Forms.DataGridViewRowEventArgs -&gt; unit&#xA;override this.OnRowHeaderCellChanged : System.Windows.Forms.DataGridViewRowEventArgs -&gt; unit" Usage="dataGridView.OnRowHeaderCellChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewRowEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.Windows.Forms.DataGridViewRowEventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.DataGridView.RowHeaderCellChanged" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
 <xref:System.Windows.Forms.DataGridView.OnRowHeaderCellChanged%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">由 <paramref name="e" /> 的 <see cref="P:System.Windows.Forms.DataGridViewRowEventArgs.Row" /> 属性指示的行不属于此 <see cref="T:System.Windows.Forms.DataGridView" /> 控件。</exception>
        <block subset="none" type="overrides"><para>在派生类中重写 <see cref="M:System.Windows.Forms.DataGridView.OnRowHeaderCellChanged(System.Windows.Forms.DataGridViewRowEventArgs)" /> 时，一定要调用基类的 <see cref="M:System.Windows.Forms.DataGridView.OnRowHeaderCellChanged(System.Windows.Forms.DataGridViewRowEventArgs)" /> 方法，以便已注册的委托对事件进行接收。</para></block>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="OnRowHeaderMouseClick">
      <MemberSignature Language="C#" Value="protected virtual void OnRowHeaderMouseClick (System.Windows.Forms.DataGridViewCellMouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRowHeaderMouseClick(class System.Windows.Forms.DataGridViewCellMouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnRowHeaderMouseClick(System.Windows.Forms.DataGridViewCellMouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnRowHeaderMouseClick (e As DataGridViewCellMouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnRowHeaderMouseClick(System::Windows::Forms::DataGridViewCellMouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnRowHeaderMouseClick : System.Windows.Forms.DataGridViewCellMouseEventArgs -&gt; unit&#xA;override this.OnRowHeaderMouseClick : System.Windows.Forms.DataGridViewCellMouseEventArgs -&gt; unit" Usage="dataGridView.OnRowHeaderMouseClick e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewCellMouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">一个 <see cref="T:System.Windows.Forms.DataGridViewCellMouseEventArgs" />，包含有关鼠标和被单击的标题单元格的信息。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.DataGridView.RowHeaderMouseClick" /> 事件。</summary>
        <remarks>To be added.</remarks>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="OnRowHeaderMouseDoubleClick">
      <MemberSignature Language="C#" Value="protected virtual void OnRowHeaderMouseDoubleClick (System.Windows.Forms.DataGridViewCellMouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRowHeaderMouseDoubleClick(class System.Windows.Forms.DataGridViewCellMouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnRowHeaderMouseDoubleClick(System.Windows.Forms.DataGridViewCellMouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnRowHeaderMouseDoubleClick (e As DataGridViewCellMouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnRowHeaderMouseDoubleClick(System::Windows::Forms::DataGridViewCellMouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnRowHeaderMouseDoubleClick : System.Windows.Forms.DataGridViewCellMouseEventArgs -&gt; unit&#xA;override this.OnRowHeaderMouseDoubleClick : System.Windows.Forms.DataGridViewCellMouseEventArgs -&gt; unit" Usage="dataGridView.OnRowHeaderMouseDoubleClick e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewCellMouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">一个 <see cref="T:System.Windows.Forms.DataGridViewCellMouseEventArgs" />，包含有关鼠标和被单击的标题单元格的信息。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.DataGridView.RowHeaderMouseDoubleClick" /> 事件。</summary>
        <remarks>To be added.</remarks>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="OnRowHeadersBorderStyleChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnRowHeadersBorderStyleChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRowHeadersBorderStyleChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnRowHeadersBorderStyleChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnRowHeadersBorderStyleChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnRowHeadersBorderStyleChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnRowHeadersBorderStyleChanged : EventArgs -&gt; unit&#xA;override this.OnRowHeadersBorderStyleChanged : EventArgs -&gt; unit" Usage="dataGridView.OnRowHeadersBorderStyleChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.EventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.DataGridView.RowHeadersBorderStyleChanged" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
 <xref:System.Windows.Forms.DataGridView.OnRowHeadersBorderStyleChanged%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>当 <see cref="M:System.Windows.Forms.DataGridView.OnRowHeadersBorderStyleChanged(System.EventArgs)" /> 在派生类中重写时，请确保调用基类的 <see cref="M:System.Windows.Forms.DataGridView.OnRowHeadersBorderStyleChanged(System.EventArgs)" /> 方法，以便注册的委托接收事件。</para></block>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="OnRowHeadersDefaultCellStyleChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnRowHeadersDefaultCellStyleChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRowHeadersDefaultCellStyleChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnRowHeadersDefaultCellStyleChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnRowHeadersDefaultCellStyleChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnRowHeadersDefaultCellStyleChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnRowHeadersDefaultCellStyleChanged : EventArgs -&gt; unit&#xA;override this.OnRowHeadersDefaultCellStyleChanged : EventArgs -&gt; unit" Usage="dataGridView.OnRowHeadersDefaultCellStyleChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.EventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.DataGridView.RowHeadersDefaultCellStyleChanged" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
 <xref:System.Windows.Forms.DataGridView.OnRowHeadersDefaultCellStyleChanged%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>在派生类中重写 <see cref="M:System.Windows.Forms.DataGridView.OnRowHeadersDefaultCellStyleChanged(System.EventArgs)" /> 时，一定要调用基类的 <see cref="M:System.Windows.Forms.DataGridView.OnRowHeadersDefaultCellStyleChanged(System.EventArgs)" /> 方法，以便已注册的委托对事件进行接收。</para></block>
        <altmember cref="T:System.Windows.Forms.DataGridViewCellStyle" />
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
        <related type="Article" href="/dotnet/framework/winforms/controls/cell-styles-in-the-windows-forms-datagridview-control">Windows 窗体 DataGridView 控件中的单元格样式</related>
      </Docs>
    </Member>
    <Member MemberName="OnRowHeadersWidthChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnRowHeadersWidthChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRowHeadersWidthChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnRowHeadersWidthChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnRowHeadersWidthChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnRowHeadersWidthChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnRowHeadersWidthChanged : EventArgs -&gt; unit&#xA;override this.OnRowHeadersWidthChanged : EventArgs -&gt; unit" Usage="dataGridView.OnRowHeadersWidthChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.EventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.DataGridView.RowHeadersWidthChanged" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
 <xref:System.Windows.Forms.DataGridView.OnRowHeadersWidthChanged%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>在派生类中重写 <see cref="M:System.Windows.Forms.DataGridView.OnRowHeadersWidthChanged(System.EventArgs)" /> 时，一定要调用基类的 <see cref="M:System.Windows.Forms.DataGridView.OnRowHeadersWidthChanged(System.EventArgs)" /> 方法，以便已注册的委托对事件进行接收。</para></block>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="OnRowHeadersWidthSizeModeChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnRowHeadersWidthSizeModeChanged (System.Windows.Forms.DataGridViewAutoSizeModeEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRowHeadersWidthSizeModeChanged(class System.Windows.Forms.DataGridViewAutoSizeModeEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnRowHeadersWidthSizeModeChanged(System.Windows.Forms.DataGridViewAutoSizeModeEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnRowHeadersWidthSizeModeChanged (e As DataGridViewAutoSizeModeEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnRowHeadersWidthSizeModeChanged(System::Windows::Forms::DataGridViewAutoSizeModeEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnRowHeadersWidthSizeModeChanged : System.Windows.Forms.DataGridViewAutoSizeModeEventArgs -&gt; unit&#xA;override this.OnRowHeadersWidthSizeModeChanged : System.Windows.Forms.DataGridViewAutoSizeModeEventArgs -&gt; unit" Usage="dataGridView.OnRowHeadersWidthSizeModeChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewAutoSizeModeEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.Windows.Forms.DataGridViewAutoSizeModeEventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.DataGridView.RowHeadersWidthSizeModeChanged" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
 <xref:System.Windows.Forms.DataGridView.OnRowHeadersWidthSizeModeChanged%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>当 <see cref="M:System.Windows.Forms.DataGridView.OnRowHeadersWidthSizeModeChanged(System.Windows.Forms.DataGridViewAutoSizeModeEventArgs)" /> 在派生类中重写时，请确保调用基类的 <see cref="M:System.Windows.Forms.DataGridView.OnRowHeadersWidthSizeModeChanged(System.Windows.Forms.DataGridViewAutoSizeModeEventArgs)" /> 方法，以便注册的委托接收事件。</para></block>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="OnRowHeightChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnRowHeightChanged (System.Windows.Forms.DataGridViewRowEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRowHeightChanged(class System.Windows.Forms.DataGridViewRowEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnRowHeightChanged(System.Windows.Forms.DataGridViewRowEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnRowHeightChanged (e As DataGridViewRowEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnRowHeightChanged(System::Windows::Forms::DataGridViewRowEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnRowHeightChanged : System.Windows.Forms.DataGridViewRowEventArgs -&gt; unit&#xA;override this.OnRowHeightChanged : System.Windows.Forms.DataGridViewRowEventArgs -&gt; unit" Usage="dataGridView.OnRowHeightChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewRowEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.Windows.Forms.DataGridViewRowEventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.DataGridView.RowHeightChanged" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
 <xref:System.Windows.Forms.DataGridView.OnRowHeightChanged%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">由 <paramref name="e" /> 的 <see cref="P:System.Windows.Forms.DataGridViewRowEventArgs.Row" /> 属性指示的行不属于此 <see cref="T:System.Windows.Forms.DataGridView" /> 控件。</exception>
        <block subset="none" type="overrides"><para>在派生类中重写 <see cref="M:System.Windows.Forms.DataGridView.OnRowHeightChanged(System.Windows.Forms.DataGridViewRowEventArgs)" /> 时，一定要调用基类的 <see cref="M:System.Windows.Forms.DataGridView.OnRowHeightChanged(System.Windows.Forms.DataGridViewRowEventArgs)" /> 方法，以便已注册的委托对事件进行接收。</para></block>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="OnRowHeightInfoNeeded">
      <MemberSignature Language="C#" Value="protected virtual void OnRowHeightInfoNeeded (System.Windows.Forms.DataGridViewRowHeightInfoNeededEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRowHeightInfoNeeded(class System.Windows.Forms.DataGridViewRowHeightInfoNeededEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnRowHeightInfoNeeded(System.Windows.Forms.DataGridViewRowHeightInfoNeededEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnRowHeightInfoNeeded (e As DataGridViewRowHeightInfoNeededEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnRowHeightInfoNeeded(System::Windows::Forms::DataGridViewRowHeightInfoNeededEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnRowHeightInfoNeeded : System.Windows.Forms.DataGridViewRowHeightInfoNeededEventArgs -&gt; unit&#xA;override this.OnRowHeightInfoNeeded : System.Windows.Forms.DataGridViewRowHeightInfoNeededEventArgs -&gt; unit" Usage="dataGridView.OnRowHeightInfoNeeded e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewRowHeightInfoNeededEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.Windows.Forms.DataGridViewRowHeightInfoNeededEventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.DataGridView.RowHeightInfoNeeded" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
 <xref:System.Windows.Forms.DataGridView.OnRowHeightInfoNeeded%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>当 <see cref="M:System.Windows.Forms.DataGridView.OnRowHeightInfoNeeded(System.Windows.Forms.DataGridViewRowHeightInfoNeededEventArgs)" /> 在派生类中重写时，请确保调用基类的 <see cref="M:System.Windows.Forms.DataGridView.OnRowHeightInfoNeeded(System.Windows.Forms.DataGridViewRowHeightInfoNeededEventArgs)" /> 方法，以便注册的委托接收事件。</para></block>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="OnRowHeightInfoPushed">
      <MemberSignature Language="C#" Value="protected virtual void OnRowHeightInfoPushed (System.Windows.Forms.DataGridViewRowHeightInfoPushedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRowHeightInfoPushed(class System.Windows.Forms.DataGridViewRowHeightInfoPushedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnRowHeightInfoPushed(System.Windows.Forms.DataGridViewRowHeightInfoPushedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnRowHeightInfoPushed (e As DataGridViewRowHeightInfoPushedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnRowHeightInfoPushed(System::Windows::Forms::DataGridViewRowHeightInfoPushedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnRowHeightInfoPushed : System.Windows.Forms.DataGridViewRowHeightInfoPushedEventArgs -&gt; unit&#xA;override this.OnRowHeightInfoPushed : System.Windows.Forms.DataGridViewRowHeightInfoPushedEventArgs -&gt; unit" Usage="dataGridView.OnRowHeightInfoPushed e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewRowHeightInfoPushedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.Windows.Forms.DataGridViewRowHeightInfoPushedEventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.DataGridView.RowHeightInfoPushed" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
 <xref:System.Windows.Forms.DataGridView.OnRowHeightInfoPushed%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>当 <see cref="M:System.Windows.Forms.DataGridView.OnRowHeightInfoPushed(System.Windows.Forms.DataGridViewRowHeightInfoPushedEventArgs)" /> 在派生类中重写时，请确保调用基类的 <see cref="M:System.Windows.Forms.DataGridView.OnRowHeightInfoPushed(System.Windows.Forms.DataGridViewRowHeightInfoPushedEventArgs)" /> 方法，以便注册的委托接收事件。</para></block>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="OnRowLeave">
      <MemberSignature Language="C#" Value="protected virtual void OnRowLeave (System.Windows.Forms.DataGridViewCellEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRowLeave(class System.Windows.Forms.DataGridViewCellEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnRowLeave(System.Windows.Forms.DataGridViewCellEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnRowLeave (e As DataGridViewCellEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnRowLeave(System::Windows::Forms::DataGridViewCellEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnRowLeave : System.Windows.Forms.DataGridViewCellEventArgs -&gt; unit&#xA;override this.OnRowLeave : System.Windows.Forms.DataGridViewCellEventArgs -&gt; unit" Usage="dataGridView.OnRowLeave e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewCellEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.Windows.Forms.DataGridViewCellEventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.DataGridView.RowLeave" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
 <xref:System.Windows.Forms.DataGridView.OnRowLeave%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>在派生类中重写 <see cref="M:System.Windows.Forms.DataGridView.OnRowLeave(System.Windows.Forms.DataGridViewCellEventArgs)" /> 时，一定要调用基类的 <see cref="M:System.Windows.Forms.DataGridView.OnRowLeave(System.Windows.Forms.DataGridViewCellEventArgs)" /> 方法，以便已注册的委托对事件进行接收。</para></block>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="OnRowMinimumHeightChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnRowMinimumHeightChanged (System.Windows.Forms.DataGridViewRowEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRowMinimumHeightChanged(class System.Windows.Forms.DataGridViewRowEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnRowMinimumHeightChanged(System.Windows.Forms.DataGridViewRowEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnRowMinimumHeightChanged (e As DataGridViewRowEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnRowMinimumHeightChanged(System::Windows::Forms::DataGridViewRowEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnRowMinimumHeightChanged : System.Windows.Forms.DataGridViewRowEventArgs -&gt; unit&#xA;override this.OnRowMinimumHeightChanged : System.Windows.Forms.DataGridViewRowEventArgs -&gt; unit" Usage="dataGridView.OnRowMinimumHeightChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewRowEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.Windows.Forms.DataGridViewRowEventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.DataGridView.RowMinimumHeightChanged" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
 <xref:System.Windows.Forms.DataGridView.OnRowMinimumHeightChanged%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">由 <paramref name="e" /> 的 <see cref="P:System.Windows.Forms.DataGridViewRowEventArgs.Row" /> 属性指示的行不属于此 <see cref="T:System.Windows.Forms.DataGridView" /> 控件。</exception>
        <block subset="none" type="overrides"><para>在派生类中重写 <see cref="M:System.Windows.Forms.DataGridView.OnRowMinimumHeightChanged(System.Windows.Forms.DataGridViewRowEventArgs)" /> 时，一定要调用基类的 <see cref="M:System.Windows.Forms.DataGridView.OnRowMinimumHeightChanged(System.Windows.Forms.DataGridViewRowEventArgs)" /> 方法，以便已注册的委托对事件进行接收。</para></block>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="OnRowPostPaint">
      <MemberSignature Language="C#" Value="protected internal virtual void OnRowPostPaint (System.Windows.Forms.DataGridViewRowPostPaintEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnRowPostPaint(class System.Windows.Forms.DataGridViewRowPostPaintEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnRowPostPaint(System.Windows.Forms.DataGridViewRowPostPaintEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnRowPostPaint (e As DataGridViewRowPostPaintEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnRowPostPaint(System::Windows::Forms::DataGridViewRowPostPaintEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnRowPostPaint : System.Windows.Forms.DataGridViewRowPostPaintEventArgs -&gt; unit&#xA;override this.OnRowPostPaint : System.Windows.Forms.DataGridViewRowPostPaintEventArgs -&gt; unit" Usage="dataGridView.OnRowPostPaint e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewRowPostPaintEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.Windows.Forms.DataGridViewRowPostPaintEventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.DataGridView.RowPostPaint" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
 <xref:System.Windows.Forms.DataGridView.OnRowPostPaint%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>当 <see cref="M:System.Windows.Forms.DataGridView.OnRowPostPaint(System.Windows.Forms.DataGridViewRowPostPaintEventArgs)" /> 在派生类中重写时，请确保调用基类的 <see cref="M:System.Windows.Forms.DataGridView.OnRowPostPaint(System.Windows.Forms.DataGridViewRowPostPaintEventArgs)" /> 方法，以便注册的委托接收事件。</para></block>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="OnRowPrePaint">
      <MemberSignature Language="C#" Value="protected internal virtual void OnRowPrePaint (System.Windows.Forms.DataGridViewRowPrePaintEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnRowPrePaint(class System.Windows.Forms.DataGridViewRowPrePaintEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnRowPrePaint(System.Windows.Forms.DataGridViewRowPrePaintEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnRowPrePaint (e As DataGridViewRowPrePaintEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnRowPrePaint(System::Windows::Forms::DataGridViewRowPrePaintEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnRowPrePaint : System.Windows.Forms.DataGridViewRowPrePaintEventArgs -&gt; unit&#xA;override this.OnRowPrePaint : System.Windows.Forms.DataGridViewRowPrePaintEventArgs -&gt; unit" Usage="dataGridView.OnRowPrePaint e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewRowPrePaintEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.Windows.Forms.DataGridViewRowPrePaintEventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.DataGridView.RowPrePaint" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
 <xref:System.Windows.Forms.DataGridView.OnRowPrePaint%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>当 <see cref="M:System.Windows.Forms.DataGridView.OnRowPrePaint(System.Windows.Forms.DataGridViewRowPrePaintEventArgs)" /> 在派生类中重写时，请确保调用基类的 <see cref="M:System.Windows.Forms.DataGridView.OnRowPrePaint(System.Windows.Forms.DataGridViewRowPrePaintEventArgs)" /> 方法，以便注册的委托接收事件。</para></block>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="OnRowsAdded">
      <MemberSignature Language="C#" Value="protected virtual void OnRowsAdded (System.Windows.Forms.DataGridViewRowsAddedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRowsAdded(class System.Windows.Forms.DataGridViewRowsAddedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnRowsAdded(System.Windows.Forms.DataGridViewRowsAddedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnRowsAdded (e As DataGridViewRowsAddedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnRowsAdded(System::Windows::Forms::DataGridViewRowsAddedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnRowsAdded : System.Windows.Forms.DataGridViewRowsAddedEventArgs -&gt; unit&#xA;override this.OnRowsAdded : System.Windows.Forms.DataGridViewRowsAddedEventArgs -&gt; unit" Usage="dataGridView.OnRowsAdded e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewRowsAddedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">一个 <see cref="T:System.Windows.Forms.DataGridViewRowsAddedEventArgs" />，包含有关已添加的行的信息。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.DataGridView.RowsAdded" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
 <xref:System.Windows.Forms.DataGridView.OnRowsAdded%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>当 <see cref="M:System.Windows.Forms.DataGridView.OnRowsAdded(System.Windows.Forms.DataGridViewRowsAddedEventArgs)" /> 在派生类中重写时，请确保调用基类的 <see cref="M:System.Windows.Forms.DataGridView.OnRowsAdded(System.Windows.Forms.DataGridViewRowsAddedEventArgs)" /> 方法，以便注册的委托接收事件。</para></block>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="OnRowsDefaultCellStyleChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnRowsDefaultCellStyleChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRowsDefaultCellStyleChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnRowsDefaultCellStyleChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnRowsDefaultCellStyleChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnRowsDefaultCellStyleChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnRowsDefaultCellStyleChanged : EventArgs -&gt; unit&#xA;override this.OnRowsDefaultCellStyleChanged : EventArgs -&gt; unit" Usage="dataGridView.OnRowsDefaultCellStyleChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.EventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.DataGridView.RowsDefaultCellStyleChanged" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
 <xref:System.Windows.Forms.DataGridView.OnRowsDefaultCellStyleChanged%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>在派生类中重写 <see cref="M:System.Windows.Forms.DataGridView.OnRowsDefaultCellStyleChanged(System.EventArgs)" /> 时，一定要调用基类的 <see cref="M:System.Windows.Forms.DataGridView.OnRowsDefaultCellStyleChanged(System.EventArgs)" /> 方法，以便已注册的委托对事件进行接收。</para></block>
        <altmember cref="T:System.Windows.Forms.DataGridViewCellStyle" />
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
        <related type="Article" href="/dotnet/framework/winforms/controls/cell-styles-in-the-windows-forms-datagridview-control">Windows 窗体 DataGridView 控件中的单元格样式</related>
      </Docs>
    </Member>
    <Member MemberName="OnRowsRemoved">
      <MemberSignature Language="C#" Value="protected virtual void OnRowsRemoved (System.Windows.Forms.DataGridViewRowsRemovedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRowsRemoved(class System.Windows.Forms.DataGridViewRowsRemovedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnRowsRemoved(System.Windows.Forms.DataGridViewRowsRemovedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnRowsRemoved (e As DataGridViewRowsRemovedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnRowsRemoved(System::Windows::Forms::DataGridViewRowsRemovedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnRowsRemoved : System.Windows.Forms.DataGridViewRowsRemovedEventArgs -&gt; unit&#xA;override this.OnRowsRemoved : System.Windows.Forms.DataGridViewRowsRemovedEventArgs -&gt; unit" Usage="dataGridView.OnRowsRemoved e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewRowsRemovedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">一个 <see cref="T:System.Windows.Forms.DataGridViewRowsRemovedEventArgs" />，包含有关已删除的行的信息。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.DataGridView.RowsRemoved" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
 <xref:System.Windows.Forms.DataGridView.OnRowsRemoved%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>当 <see cref="M:System.Windows.Forms.DataGridView.OnRowsRemoved(System.Windows.Forms.DataGridViewRowsRemovedEventArgs)" /> 在派生类中重写时，请确保调用基类的 <see cref="M:System.Windows.Forms.DataGridView.OnRowsRemoved(System.Windows.Forms.DataGridViewRowsRemovedEventArgs)" /> 方法，以便注册的委托接收事件。</para></block>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="OnRowStateChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnRowStateChanged (int rowIndex, System.Windows.Forms.DataGridViewRowStateChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRowStateChanged(int32 rowIndex, class System.Windows.Forms.DataGridViewRowStateChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnRowStateChanged(System.Int32,System.Windows.Forms.DataGridViewRowStateChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnRowStateChanged (rowIndex As Integer, e As DataGridViewRowStateChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnRowStateChanged(int rowIndex, System::Windows::Forms::DataGridViewRowStateChangedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnRowStateChanged : int * System.Windows.Forms.DataGridViewRowStateChangedEventArgs -&gt; unit&#xA;override this.OnRowStateChanged : int * System.Windows.Forms.DataGridViewRowStateChangedEventArgs -&gt; unit" Usage="dataGridView.OnRowStateChanged (rowIndex, e)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rowIndex" Type="System.Int32" />
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewRowStateChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="rowIndex">正在更改状态的行的索引。</param>
        <param name="e">包含事件数据的 <see cref="T:System.Windows.Forms.DataGridViewRowStateChangedEventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.DataGridView.RowStateChanged" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
 <xref:System.Windows.Forms.DataGridView.OnRowStateChanged%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">从只读更改为读/写的行，启用当前单元格以进入编辑模式，但当前单元格的 <see cref="P:System.Windows.Forms.DataGridViewCell.EditType" /> 属性不指示派生自 <see cref="T:System.Windows.Forms.Control" /> 并实现 <see cref="T:System.Windows.Forms.IDataGridViewEditingControl" /> 的类。</exception>
        <block subset="none" type="overrides"><para>在派生类中重写 <see cref="M:System.Windows.Forms.DataGridView.OnRowStateChanged(System.Int32,System.Windows.Forms.DataGridViewRowStateChangedEventArgs)" /> 时，一定要调用基类的 <see cref="M:System.Windows.Forms.DataGridView.OnRowStateChanged(System.Int32,System.Windows.Forms.DataGridViewRowStateChangedEventArgs)" /> 方法，以便已注册的委托对事件进行接收。</para></block>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="OnRowUnshared">
      <MemberSignature Language="C#" Value="protected virtual void OnRowUnshared (System.Windows.Forms.DataGridViewRowEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRowUnshared(class System.Windows.Forms.DataGridViewRowEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnRowUnshared(System.Windows.Forms.DataGridViewRowEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnRowUnshared (e As DataGridViewRowEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnRowUnshared(System::Windows::Forms::DataGridViewRowEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnRowUnshared : System.Windows.Forms.DataGridViewRowEventArgs -&gt; unit&#xA;override this.OnRowUnshared : System.Windows.Forms.DataGridViewRowEventArgs -&gt; unit" Usage="dataGridView.OnRowUnshared e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewRowEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.Windows.Forms.DataGridViewRowEventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.DataGridView.RowUnshared" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
 <xref:System.Windows.Forms.DataGridView.OnRowUnshared%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">由 <paramref name="e" /> 的 <see cref="P:System.Windows.Forms.DataGridViewRowEventArgs.Row" /> 属性指示的行不属于此 <see cref="T:System.Windows.Forms.DataGridView" /> 控件。</exception>
        <block subset="none" type="overrides"><para>在派生类中重写 <see cref="M:System.Windows.Forms.DataGridView.OnRowUnshared(System.Windows.Forms.DataGridViewRowEventArgs)" /> 时，一定要调用基类的 <see cref="M:System.Windows.Forms.DataGridView.OnRowUnshared(System.Windows.Forms.DataGridViewRowEventArgs)" /> 方法，以便已注册的委托对事件进行接收。</para></block>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="OnRowValidated">
      <MemberSignature Language="C#" Value="protected virtual void OnRowValidated (System.Windows.Forms.DataGridViewCellEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRowValidated(class System.Windows.Forms.DataGridViewCellEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnRowValidated(System.Windows.Forms.DataGridViewCellEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnRowValidated (e As DataGridViewCellEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnRowValidated(System::Windows::Forms::DataGridViewCellEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnRowValidated : System.Windows.Forms.DataGridViewCellEventArgs -&gt; unit&#xA;override this.OnRowValidated : System.Windows.Forms.DataGridViewCellEventArgs -&gt; unit" Usage="dataGridView.OnRowValidated e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewCellEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.Windows.Forms.DataGridViewCellEventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.DataGridView.RowValidated" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
 <xref:System.Windows.Forms.DataGridView.OnRowValidated%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>在派生类中重写 <see cref="M:System.Windows.Forms.DataGridView.OnRowValidated(System.Windows.Forms.DataGridViewCellEventArgs)" /> 时，一定要调用基类的 <see cref="M:System.Windows.Forms.DataGridView.OnRowValidated(System.Windows.Forms.DataGridViewCellEventArgs)" /> 方法，以便已注册的委托对事件进行接收。</para></block>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="OnRowValidating">
      <MemberSignature Language="C#" Value="protected virtual void OnRowValidating (System.Windows.Forms.DataGridViewCellCancelEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRowValidating(class System.Windows.Forms.DataGridViewCellCancelEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnRowValidating(System.Windows.Forms.DataGridViewCellCancelEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnRowValidating (e As DataGridViewCellCancelEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnRowValidating(System::Windows::Forms::DataGridViewCellCancelEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnRowValidating : System.Windows.Forms.DataGridViewCellCancelEventArgs -&gt; unit&#xA;override this.OnRowValidating : System.Windows.Forms.DataGridViewCellCancelEventArgs -&gt; unit" Usage="dataGridView.OnRowValidating e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewCellCancelEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.Windows.Forms.DataGridViewCellCancelEventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.DataGridView.RowValidating" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
 <xref:System.Windows.Forms.DataGridView.OnRowValidating%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>在派生类中重写 <see cref="M:System.Windows.Forms.DataGridView.OnRowValidating(System.Windows.Forms.DataGridViewCellCancelEventArgs)" /> 时，一定要调用基类的 <see cref="M:System.Windows.Forms.DataGridView.OnRowValidating(System.Windows.Forms.DataGridViewCellCancelEventArgs)" /> 方法，以便已注册的委托对事件进行接收。</para></block>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="OnScroll">
      <MemberSignature Language="C#" Value="protected virtual void OnScroll (System.Windows.Forms.ScrollEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnScroll(class System.Windows.Forms.ScrollEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnScroll(System.Windows.Forms.ScrollEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnScroll (e As ScrollEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnScroll(System::Windows::Forms::ScrollEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnScroll : System.Windows.Forms.ScrollEventArgs -&gt; unit&#xA;override this.OnScroll : System.Windows.Forms.ScrollEventArgs -&gt; unit" Usage="dataGridView.OnScroll e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.ScrollEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.Windows.Forms.ScrollEventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.DataGridView.Scroll" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
 <xref:System.Windows.Forms.DataGridView.OnScroll%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>当 <see cref="M:System.Windows.Forms.DataGridView.OnScroll(System.Windows.Forms.ScrollEventArgs)" /> 在派生类中重写时，请确保调用基类的 <see cref="M:System.Windows.Forms.DataGridView.OnScroll(System.Windows.Forms.ScrollEventArgs)" /> 方法，以便注册的委托接收事件。</para></block>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="OnSelectionChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnSelectionChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnSelectionChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnSelectionChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnSelectionChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnSelectionChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnSelectionChanged : EventArgs -&gt; unit&#xA;override this.OnSelectionChanged : EventArgs -&gt; unit" Usage="dataGridView.OnSelectionChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">一个 <see cref="T:System.EventArgs" />，包含有关事件的信息。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.DataGridView.SelectionChanged" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
 <xref:System.Windows.Forms.DataGridView.OnSelectionChanged%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>当 <see cref="M:System.Windows.Forms.DataGridView.OnSelectionChanged(System.EventArgs)" /> 在派生类中重写时，请确保调用基类的 <see cref="M:System.Windows.Forms.DataGridView.OnSelectionChanged(System.EventArgs)" /> 方法，以便注册的委托接收事件。</para></block>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="OnSortCompare">
      <MemberSignature Language="C#" Value="protected virtual void OnSortCompare (System.Windows.Forms.DataGridViewSortCompareEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnSortCompare(class System.Windows.Forms.DataGridViewSortCompareEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnSortCompare(System.Windows.Forms.DataGridViewSortCompareEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnSortCompare (e As DataGridViewSortCompareEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnSortCompare(System::Windows::Forms::DataGridViewSortCompareEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnSortCompare : System.Windows.Forms.DataGridViewSortCompareEventArgs -&gt; unit&#xA;override this.OnSortCompare : System.Windows.Forms.DataGridViewSortCompareEventArgs -&gt; unit" Usage="dataGridView.OnSortCompare e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewSortCompareEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.Windows.Forms.DataGridViewSortCompareEventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.DataGridView.SortCompare" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
 <xref:System.Windows.Forms.DataGridView.OnSortCompare%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>在派生类中重写 <see cref="M:System.Windows.Forms.DataGridView.OnSortCompare(System.Windows.Forms.DataGridViewSortCompareEventArgs)" /> 时，一定要调用基类的 <see cref="M:System.Windows.Forms.DataGridView.OnSortCompare(System.Windows.Forms.DataGridViewSortCompareEventArgs)" /> 方法，以便已注册的委托对事件进行接收。</para></block>
        <altmember cref="E:System.Windows.Forms.DataGridView.SortCompare" />
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="OnSorted">
      <MemberSignature Language="C#" Value="protected virtual void OnSorted (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnSorted(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnSorted(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnSorted (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnSorted(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnSorted : EventArgs -&gt; unit&#xA;override this.OnSorted : EventArgs -&gt; unit" Usage="dataGridView.OnSorted e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.EventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.DataGridView.Sorted" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
 <xref:System.Windows.Forms.DataGridView.OnSorted%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>当 <see cref="M:System.Windows.Forms.DataGridView.OnSorted(System.EventArgs)" /> 在派生类中重写时，请确保调用基类的 <see cref="M:System.Windows.Forms.DataGridView.OnSorted(System.EventArgs)" /> 方法，以便注册的委托接收事件。</para></block>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="OnUserAddedRow">
      <MemberSignature Language="C#" Value="protected virtual void OnUserAddedRow (System.Windows.Forms.DataGridViewRowEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnUserAddedRow(class System.Windows.Forms.DataGridViewRowEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnUserAddedRow(System.Windows.Forms.DataGridViewRowEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnUserAddedRow (e As DataGridViewRowEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnUserAddedRow(System::Windows::Forms::DataGridViewRowEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnUserAddedRow : System.Windows.Forms.DataGridViewRowEventArgs -&gt; unit&#xA;override this.OnUserAddedRow : System.Windows.Forms.DataGridViewRowEventArgs -&gt; unit" Usage="dataGridView.OnUserAddedRow e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewRowEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.Windows.Forms.DataGridViewRowEventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.DataGridView.UserAddedRow" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
 <xref:System.Windows.Forms.DataGridView.OnUserAddedRow%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">由 <paramref name="e" /> 的 <see cref="P:System.Windows.Forms.DataGridViewRowEventArgs.Row" /> 属性指示的行不属于此 <see cref="T:System.Windows.Forms.DataGridView" /> 控件。</exception>
        <block subset="none" type="overrides"><para>在派生类中重写 <see cref="M:System.Windows.Forms.DataGridView.OnUserAddedRow(System.Windows.Forms.DataGridViewRowEventArgs)" /> 时，一定要调用基类的 <see cref="M:System.Windows.Forms.DataGridView.OnUserAddedRow(System.Windows.Forms.DataGridViewRowEventArgs)" /> 方法，以便已注册的委托对事件进行接收。</para></block>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="OnUserDeletedRow">
      <MemberSignature Language="C#" Value="protected virtual void OnUserDeletedRow (System.Windows.Forms.DataGridViewRowEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnUserDeletedRow(class System.Windows.Forms.DataGridViewRowEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnUserDeletedRow(System.Windows.Forms.DataGridViewRowEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnUserDeletedRow (e As DataGridViewRowEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnUserDeletedRow(System::Windows::Forms::DataGridViewRowEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnUserDeletedRow : System.Windows.Forms.DataGridViewRowEventArgs -&gt; unit&#xA;override this.OnUserDeletedRow : System.Windows.Forms.DataGridViewRowEventArgs -&gt; unit" Usage="dataGridView.OnUserDeletedRow e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewRowEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.Windows.Forms.DataGridViewRowEventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.DataGridView.UserDeletedRow" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
 <xref:System.Windows.Forms.DataGridView.OnUserDeletedRow%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>在派生类中重写 <see cref="M:System.Windows.Forms.DataGridView.OnUserDeletedRow(System.Windows.Forms.DataGridViewRowEventArgs)" /> 时，一定要调用基类的 <see cref="M:System.Windows.Forms.DataGridView.OnUserDeletedRow(System.Windows.Forms.DataGridViewRowEventArgs)" /> 方法，以便已注册的委托对事件进行接收。</para></block>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="OnUserDeletingRow">
      <MemberSignature Language="C#" Value="protected virtual void OnUserDeletingRow (System.Windows.Forms.DataGridViewRowCancelEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnUserDeletingRow(class System.Windows.Forms.DataGridViewRowCancelEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnUserDeletingRow(System.Windows.Forms.DataGridViewRowCancelEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnUserDeletingRow (e As DataGridViewRowCancelEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnUserDeletingRow(System::Windows::Forms::DataGridViewRowCancelEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnUserDeletingRow : System.Windows.Forms.DataGridViewRowCancelEventArgs -&gt; unit&#xA;override this.OnUserDeletingRow : System.Windows.Forms.DataGridViewRowCancelEventArgs -&gt; unit" Usage="dataGridView.OnUserDeletingRow e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewRowCancelEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.Windows.Forms.DataGridViewRowCancelEventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.DataGridView.UserDeletingRow" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
 <xref:System.Windows.Forms.DataGridView.OnUserDeletingRow%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>在派生类中重写 <see cref="M:System.Windows.Forms.DataGridView.OnUserDeletingRow(System.Windows.Forms.DataGridViewRowCancelEventArgs)" /> 时，一定要调用基类的 <see cref="M:System.Windows.Forms.DataGridView.OnUserDeletingRow(System.Windows.Forms.DataGridViewRowCancelEventArgs)" /> 方法，以便已注册的委托对事件进行接收。</para></block>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="OnValidating">
      <MemberSignature Language="C#" Value="protected override void OnValidating (System.ComponentModel.CancelEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnValidating(class System.ComponentModel.CancelEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnValidating(System.ComponentModel.CancelEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnValidating (e As CancelEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnValidating(System::ComponentModel::CancelEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnValidating : System.ComponentModel.CancelEventArgs -&gt; unit" Usage="dataGridView.OnValidating e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.ComponentModel.CancelEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.ComponentModel.CancelEventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.Control.Validating" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 除了引发 <xref:System.Windows.Forms.Control.Validating> 事件外，此方法还结束当前单元格编辑并验证单元和行值。  
  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
 <xref:System.Windows.Forms.DataGridView.OnValidating%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">验证失败，且没有 <see cref="E:System.Windows.Forms.DataGridView.DataError" /> 事件的处理程序或处理程序已将 <see cref="P:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException" /> 属性设置为 <see langword="true" />。 通常情况下，可将该异常对象强制转换为类型  <see cref="T:System.FormatException" />。</exception>
        <block subset="none" type="overrides"><para>在派生类中重写 <see cref="M:System.Windows.Forms.DataGridView.OnValidating(System.ComponentModel.CancelEventArgs)" /> 时，一定要调用基类的 <see cref="M:System.Windows.Forms.DataGridView.OnValidating(System.ComponentModel.CancelEventArgs)" /> 方法，以便已注册的委托对事件进行接收。</para></block>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="OnVisibleChanged">
      <MemberSignature Language="C#" Value="protected override void OnVisibleChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnVisibleChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.OnVisibleChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnVisibleChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnVisibleChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnVisibleChanged : EventArgs -&gt; unit" Usage="dataGridView.OnVisibleChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.EventArgs" /> 对象。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.Control.VisibleChanged" /> 事件。</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnVisibleChanged(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="Padding">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Padding Padding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.Padding Padding" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.Padding" />
      <MemberSignature Language="VB.NET" Value="Public Property Padding As Padding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::Padding Padding { System::Windows::Forms::Padding get(); void set(System::Windows::Forms::Padding value); };" />
      <MemberSignature Language="F#" Value="member this.Padding : System.Windows.Forms.Padding with get, set" Usage="System.Windows.Forms.DataGridView.Padding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Padding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>此属性与此控件无关。</summary>
        <value>一个 <see cref="T:System.Windows.Forms.Padding" /> 实例。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性与此控件无关。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="PaddingChanged">
      <MemberSignature Language="C#" Value="public event EventHandler PaddingChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler PaddingChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.PaddingChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PaddingChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ PaddingChanged;" />
      <MemberSignature Language="F#" Value="member this.PaddingChanged : EventHandler " Usage="member this.PaddingChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当 <see cref="P:System.Windows.Forms.DataGridView.Padding" /> 属性的值更改时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.DataGridView.Padding%2A>此属性与此控件无关，不过您可以更改其值并通过处理此事件来响应此类更改。  
  
 有关如何处理事件的详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.DataGridView.Padding" />
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="PaintBackground">
      <MemberSignature Language="C#" Value="protected virtual void PaintBackground (System.Drawing.Graphics graphics, System.Drawing.Rectangle clipBounds, System.Drawing.Rectangle gridBounds);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void PaintBackground(class System.Drawing.Graphics graphics, valuetype System.Drawing.Rectangle clipBounds, valuetype System.Drawing.Rectangle gridBounds) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.PaintBackground(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Rectangle)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub PaintBackground (graphics As Graphics, clipBounds As Rectangle, gridBounds As Rectangle)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void PaintBackground(System::Drawing::Graphics ^ graphics, System::Drawing::Rectangle clipBounds, System::Drawing::Rectangle gridBounds);" />
      <MemberSignature Language="F#" Value="override this.PaintBackground : System.Drawing.Graphics * System.Drawing.Rectangle * System.Drawing.Rectangle -&gt; unit" Usage="dataGridView.PaintBackground (graphics, clipBounds, gridBounds)" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5" />
      <MemberSignature Language="F#" Value="abstract member PaintBackground : System.Drawing.Graphics * System.Drawing.Rectangle * System.Drawing.Rectangle -&gt; unit&#xA;override this.PaintBackground : System.Drawing.Graphics * System.Drawing.Rectangle * System.Drawing.Rectangle -&gt; unit" Usage="dataGridView.PaintBackground (graphics, clipBounds, gridBounds)" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="graphics" Type="System.Drawing.Graphics" />
        <Parameter Name="clipBounds" Type="System.Drawing.Rectangle" />
        <Parameter Name="gridBounds" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="graphics">用于绘制背景的 <see cref="T:System.Drawing.Graphics" />。</param>
        <param name="clipBounds"><see cref="T:System.Drawing.Rectangle" />，它表示需要绘制的 <see cref="T:System.Windows.Forms.DataGridView" /> 区域。</param>
        <param name="gridBounds">一个 <see cref="T:System.Drawing.Rectangle" />，表示绘制单元格的区域。</param>
        <summary>绘制 <see cref="T:System.Windows.Forms.DataGridView" /> 的背景。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `clipBounds`参数表示需要重新绘制的区域 <xref:System.Windows.Forms.DataGridView> 。 例如，如果用户在 <xref:System.Windows.Forms.DataGridView> 另一个窗口中涵盖整个，然后将其显示，则 `clipBounds` 表示整个 <xref:System.Windows.Forms.DataGridView> 。 如果用户涵盖的小区域，然后将 <xref:System.Windows.Forms.DataGridView> 其发现，则 `clipBounds` 表示已覆盖的小区域。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="ProcessAKey">
      <MemberSignature Language="C#" Value="protected bool ProcessAKey (System.Windows.Forms.Keys keyData);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance bool ProcessAKey(valuetype System.Windows.Forms.Keys keyData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.ProcessAKey(System.Windows.Forms.Keys)" />
      <MemberSignature Language="VB.NET" Value="Protected Function ProcessAKey (keyData As Keys) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; bool ProcessAKey(System::Windows::Forms::Keys keyData);" />
      <MemberSignature Language="F#" Value="member this.ProcessAKey : System.Windows.Forms.Keys -&gt; bool" Usage="dataGridView.ProcessAKey keyData" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyData" Type="System.Windows.Forms.Keys" />
      </Parameters>
      <Docs>
        <param name="keyData"><see cref="T:System.Windows.Forms.Keys" /> 值的按位组合，这些值表示要处理的一个或多个键。</param>
        <summary>处理 A 键。</summary>
        <returns>如果已处理该键，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `true`当用户按下 CTRL + A 并且属性为时，此方法返回 <xref:System.Windows.Forms.DataGridView.MultiSelect%2A> `true` 。 默认情况下，此方法选择控件中的所有单元格。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="ProcessControlShiftF10Keys">
      <MemberSignature Language="C#" Value="protected bool ProcessControlShiftF10Keys (System.Windows.Forms.Keys keyData);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance bool ProcessControlShiftF10Keys(valuetype System.Windows.Forms.Keys keyData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.ProcessControlShiftF10Keys(System.Windows.Forms.Keys)" />
      <MemberSignature Language="VB.NET" Value="Protected Function ProcessControlShiftF10Keys (keyData As Keys) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; bool ProcessControlShiftF10Keys(System::Windows::Forms::Keys keyData);" />
      <MemberSignature Language="F#" Value="member this.ProcessControlShiftF10Keys : System.Windows.Forms.Keys -&gt; bool" Usage="dataGridView.ProcessControlShiftF10Keys keyData" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyData" Type="System.Windows.Forms.Keys" Index="0" FrameworkAlternate="net-5.0;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="keyData">枚举值的按位组合，这些值表示要处理的一个或多个键。</param>
        <summary>激活键盘工具提示。</summary>
        <returns>如果已处理该键，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ProcessDataGridViewKey">
      <MemberSignature Language="C#" Value="protected virtual bool ProcessDataGridViewKey (System.Windows.Forms.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool ProcessDataGridViewKey(class System.Windows.Forms.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.ProcessDataGridViewKey(System.Windows.Forms.KeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function ProcessDataGridViewKey (e As KeyEventArgs) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool ProcessDataGridViewKey(System::Windows::Forms::KeyEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member ProcessDataGridViewKey : System.Windows.Forms.KeyEventArgs -&gt; bool&#xA;override this.ProcessDataGridViewKey : System.Windows.Forms.KeyEventArgs -&gt; bool" Usage="dataGridView.ProcessDataGridViewKey e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含有关所按键的信息。</param>
        <summary>处理用于在 <see cref="T:System.Windows.Forms.DataGridView" /> 中导航的键。</summary>
        <returns>如果已处理该键，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法调用适用于按下的键的键处理方法 (例如， <xref:System.Windows.Forms.DataGridView.ProcessF2Key%2A> 按下 F2 时的方法) 并返回该方法的返回值。

## Examples  
 下面的代码示例演示如何 <xref:System.Windows.Forms.DataGridView> 通过重写和方法更改子类中的 ENTER 键的行为 <xref:System.Windows.Forms.DataGridView.ProcessDataGridViewKey%2A> <xref:System.Windows.Forms.DataGridView.ProcessDialogKey%2A> 。 在此示例中，ENTER 键的行为与向右箭头键相同，使用户可以更轻松地编辑单个数据行中的多个单元格。  
  
 [!code-csharp[System.Windows.Forms.DataGridViewMisc2#70](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewMisc2/cs/misc2.cs#70)]
 [!code-vb[System.Windows.Forms.DataGridViewMisc2#70](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewMisc2/vb/misc2.vb#70)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">按下的键将导致该控件进入编辑模式，但当前单元格的 <see cref="P:System.Windows.Forms.DataGridViewCell.EditType" /> 属性不指示派生自 <see cref="T:System.Windows.Forms.Control" /> 并实现 <see cref="T:System.Windows.Forms.IDataGridViewEditingControl" /> 的类。</exception>
        <exception cref="T:System.Exception">此操作将提交一个单元格值或者进入编辑模式，但是数据源中的错误禁止执行此操作，<see cref="E:System.Windows.Forms.DataGridView.DataError" /> 事件没有处理程序，或者处理程序已将 <see cref="P:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException" /> 属性设置为 <see langword="true" />。  
  
- 或 - 
删除键将删除一行或多行，但数据源中的错误将阻止删除，并且将没有针对 <see cref="E:System.Windows.Forms.DataGridView.DataError" /> 事件的处理程序，或处理程序已将 <see cref="P:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException" /> 属性设置为 <see langword="true" />。</exception>
        <block subset="none" type="overrides"><para>重写此方法时，控件应返回 <see langword="true" /> 以指示它已处理该键。 对于不是由控件处理的键，返回此方法的基版本的结果。</para></block>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="ProcessDeleteKey">
      <MemberSignature Language="C#" Value="protected bool ProcessDeleteKey (System.Windows.Forms.Keys keyData);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance bool ProcessDeleteKey(valuetype System.Windows.Forms.Keys keyData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.ProcessDeleteKey(System.Windows.Forms.Keys)" />
      <MemberSignature Language="VB.NET" Value="Protected Function ProcessDeleteKey (keyData As Keys) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; bool ProcessDeleteKey(System::Windows::Forms::Keys keyData);" />
      <MemberSignature Language="F#" Value="member this.ProcessDeleteKey : System.Windows.Forms.Keys -&gt; bool" Usage="dataGridView.ProcessDeleteKey keyData" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyData" Type="System.Windows.Forms.Keys" />
      </Parameters>
      <Docs>
        <param name="keyData"><see cref="T:System.Windows.Forms.Keys" /> 值的按位组合，这些值表示要处理的一个或多个键。</param>
        <summary>处理 Delete 键。</summary>
        <returns>如果已处理该键，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `true`当用户按 delete 删除控件中的行时，此方法将返回。 如果将 <xref:System.Windows.Forms.DataGridView.SelectionMode%2A> 属性设置为 <xref:System.Windows.Forms.DataGridViewSelectionMode.FullRowSelect> 或 <xref:System.Windows.Forms.DataGridViewSelectionMode.RowHeaderSelect> ，并且 <xref:System.Windows.Forms.DataGridView.MultiSelect%2A> 属性设置为， `true` 则用户可以删除行。 如果 <xref:System.Windows.Forms.DataGridView> 绑定到数据，则 <xref:System.ComponentModel.IBindingList.AllowRemove%2A?displayProperty=nameWithType> 数据源的属性还必须设置为 `true` 。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">删除键将删除一行或多行，但数据源中的错误将阻止删除，并且将没有针对 <see cref="E:System.Windows.Forms.DataGridView.DataError" /> 事件的处理程序，或处理程序已将 <see cref="P:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException" /> 属性设置为 <see langword="true" />。</exception>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="ProcessDialogKey">
      <MemberSignature Language="C#" Value="protected override bool ProcessDialogKey (System.Windows.Forms.Keys keyData);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool ProcessDialogKey(valuetype System.Windows.Forms.Keys keyData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.ProcessDialogKey(System.Windows.Forms.Keys)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function ProcessDialogKey (keyData As Keys) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool ProcessDialogKey(System::Windows::Forms::Keys keyData);" />
      <MemberSignature Language="F#" Value="override this.ProcessDialogKey : System.Windows.Forms.Keys -&gt; bool" Usage="dataGridView.ProcessDialogKey keyData" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyData" Type="System.Windows.Forms.Keys" />
      </Parameters>
      <Docs>
        <param name="keyData"><see cref="T:System.Windows.Forms.Keys" /> 值的按位组合，这些值表示要处理的一个或多个键。</param>
        <summary>处理用来控制对话框的键，例如 Tab、Esc、Enter 和箭头键。</summary>
        <returns>如果已处理该键，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法在编辑模式下调用，以处理不是由寄宿编辑控件处理的键盘输入。  
  
 如果将按键确定为不是输入键，则会将其发送到基类进行处理。

## Examples  
 下面的代码示例演示如何 <xref:System.Windows.Forms.DataGridView> 通过重写和方法更改子类中的 ENTER 键的行为 <xref:System.Windows.Forms.DataGridView.ProcessDataGridViewKey%2A> <xref:System.Windows.Forms.DataGridView.ProcessDialogKey%2A> 。 在此示例中，ENTER 键的行为与向右箭头键相同，使用户可以更轻松地编辑单个数据行中的多个单元格。  
  
 [!code-csharp[System.Windows.Forms.DataGridViewMisc2#70](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewMisc2/cs/misc2.cs#70)]
 [!code-vb[System.Windows.Forms.DataGridViewMisc2#70](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewMisc2/vb/misc2.vb#70)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">按下的键将导致该控件进入编辑模式，但当前单元格的 <see cref="P:System.Windows.Forms.DataGridViewCell.EditType" /> 属性不指示派生自 <see cref="T:System.Windows.Forms.Control" /> 并实现 <see cref="T:System.Windows.Forms.IDataGridViewEditingControl" /> 的类。</exception>
        <exception cref="T:System.Exception">此操作将提交一个单元格值或者进入编辑模式，但是数据源中的错误禁止执行此操作，<see cref="E:System.Windows.Forms.DataGridView.DataError" /> 事件没有处理程序，或者处理程序已将 <see cref="P:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException" /> 属性设置为 <see langword="true" />。</exception>
        <block subset="none" type="overrides"><para>重写此方法时，控件应返回 <see langword="true" /> 以指示它已处理该键。 对于不是由控件处理的键，返回此方法的基版本的结果。</para></block>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="ProcessDownKey">
      <MemberSignature Language="C#" Value="protected bool ProcessDownKey (System.Windows.Forms.Keys keyData);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance bool ProcessDownKey(valuetype System.Windows.Forms.Keys keyData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.ProcessDownKey(System.Windows.Forms.Keys)" />
      <MemberSignature Language="VB.NET" Value="Protected Function ProcessDownKey (keyData As Keys) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; bool ProcessDownKey(System::Windows::Forms::Keys keyData);" />
      <MemberSignature Language="F#" Value="member this.ProcessDownKey : System.Windows.Forms.Keys -&gt; bool" Usage="dataGridView.ProcessDownKey keyData" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyData" Type="System.Windows.Forms.Keys" />
      </Parameters>
      <Docs>
        <param name="keyData"><see cref="T:System.Windows.Forms.Keys" /> 值的按位组合，这些值表示要处理的一个或多个键。</param>
        <summary>处理向下键。</summary>
        <returns>如果已处理该键，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">“向下箭头”键将导致该控件进入编辑模式，但当前新的单元格的 <see cref="P:System.Windows.Forms.DataGridViewCell.EditType" /> 属性不指示派生自 <see cref="T:System.Windows.Forms.Control" /> 并实现 <see cref="T:System.Windows.Forms.IDataGridViewEditingControl" />的类。</exception>
        <exception cref="T:System.Exception">此操作将提交一个单元格值或者进入编辑模式，但是数据源中的错误禁止执行此操作，<see cref="E:System.Windows.Forms.DataGridView.DataError" /> 事件没有处理程序，或者处理程序已将 <see cref="P:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException" /> 属性设置为 <see langword="true" />。</exception>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="ProcessEndKey">
      <MemberSignature Language="C#" Value="protected bool ProcessEndKey (System.Windows.Forms.Keys keyData);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance bool ProcessEndKey(valuetype System.Windows.Forms.Keys keyData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.ProcessEndKey(System.Windows.Forms.Keys)" />
      <MemberSignature Language="VB.NET" Value="Protected Function ProcessEndKey (keyData As Keys) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; bool ProcessEndKey(System::Windows::Forms::Keys keyData);" />
      <MemberSignature Language="F#" Value="member this.ProcessEndKey : System.Windows.Forms.Keys -&gt; bool" Usage="dataGridView.ProcessEndKey keyData" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyData" Type="System.Windows.Forms.Keys" />
      </Parameters>
      <Docs>
        <param name="keyData"><see cref="T:System.Windows.Forms.Keys" /> 值的按位组合，这些值表示要处理的一个或多个键。</param>
        <summary>处理 End 键。</summary>
        <returns>如果已处理该键，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">按下 END 键将导致控件进入编辑模式，但当前新的单元格的 <see cref="P:System.Windows.Forms.DataGridViewCell.EditType" /> 属性不指示派生自 <see cref="T:System.Windows.Forms.Control" /> 并实现 <see cref="T:System.Windows.Forms.IDataGridViewEditingControl" />的类。</exception>
        <exception cref="T:System.Exception">此操作将提交一个单元格值或者进入编辑模式，但是数据源中的错误禁止执行此操作，<see cref="E:System.Windows.Forms.DataGridView.DataError" /> 事件没有处理程序，或者处理程序已将 <see cref="P:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException" /> 属性设置为 <see langword="true" />。</exception>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="ProcessEnterKey">
      <MemberSignature Language="C#" Value="protected bool ProcessEnterKey (System.Windows.Forms.Keys keyData);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance bool ProcessEnterKey(valuetype System.Windows.Forms.Keys keyData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.ProcessEnterKey(System.Windows.Forms.Keys)" />
      <MemberSignature Language="VB.NET" Value="Protected Function ProcessEnterKey (keyData As Keys) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; bool ProcessEnterKey(System::Windows::Forms::Keys keyData);" />
      <MemberSignature Language="F#" Value="member this.ProcessEnterKey : System.Windows.Forms.Keys -&gt; bool" Usage="dataGridView.ProcessEnterKey keyData" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyData" Type="System.Windows.Forms.Keys" />
      </Parameters>
      <Docs>
        <param name="keyData"><see cref="T:System.Windows.Forms.Keys" /> 值的按位组合，这些值表示要处理的一个或多个键。</param>
        <summary>处理 Enter 键。</summary>
        <returns>如果已处理该键，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">ENTER 键将导致该控件进入编辑模式，但当前新的单元格的 <see cref="P:System.Windows.Forms.DataGridViewCell.EditType" /> 属性不指示派生自 <see cref="T:System.Windows.Forms.Control" /> 并实现 <see cref="T:System.Windows.Forms.IDataGridViewEditingControl" />的类。</exception>
        <exception cref="T:System.Exception">此操作将提交一个单元格值或者进入编辑模式，但是数据源中的错误禁止执行此操作，<see cref="E:System.Windows.Forms.DataGridView.DataError" /> 事件没有处理程序，或者处理程序已将 <see cref="P:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException" /> 属性设置为 <see langword="true" />。</exception>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="ProcessEscapeKey">
      <MemberSignature Language="C#" Value="protected bool ProcessEscapeKey (System.Windows.Forms.Keys keyData);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance bool ProcessEscapeKey(valuetype System.Windows.Forms.Keys keyData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.ProcessEscapeKey(System.Windows.Forms.Keys)" />
      <MemberSignature Language="VB.NET" Value="Protected Function ProcessEscapeKey (keyData As Keys) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; bool ProcessEscapeKey(System::Windows::Forms::Keys keyData);" />
      <MemberSignature Language="F#" Value="member this.ProcessEscapeKey : System.Windows.Forms.Keys -&gt; bool" Usage="dataGridView.ProcessEscapeKey keyData" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyData" Type="System.Windows.Forms.Keys" />
      </Parameters>
      <Docs>
        <param name="keyData"><see cref="T:System.Windows.Forms.Keys" /> 值的按位组合，这些值表示要处理的一个或多个键。</param>
        <summary>处理 Esc 键。</summary>
        <returns>如果已处理该键，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="ProcessF2Key">
      <MemberSignature Language="C#" Value="protected bool ProcessF2Key (System.Windows.Forms.Keys keyData);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance bool ProcessF2Key(valuetype System.Windows.Forms.Keys keyData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.ProcessF2Key(System.Windows.Forms.Keys)" />
      <MemberSignature Language="VB.NET" Value="Protected Function ProcessF2Key (keyData As Keys) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; bool ProcessF2Key(System::Windows::Forms::Keys keyData);" />
      <MemberSignature Language="F#" Value="member this.ProcessF2Key : System.Windows.Forms.Keys -&gt; bool" Usage="dataGridView.ProcessF2Key keyData" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyData" Type="System.Windows.Forms.Keys" />
      </Parameters>
      <Docs>
        <param name="keyData"><see cref="T:System.Windows.Forms.Keys" /> 值的按位组合，这些值表示要处理的一个或多个键。</param>
        <summary>处理 F2 键。</summary>
        <returns>如果已处理该键，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">按下 F2 键将导致控件进入编辑模式，但当前单元格的 <see cref="P:System.Windows.Forms.DataGridViewCell.EditType" /> 属性不指示派生自 <see cref="T:System.Windows.Forms.Control" /> 并实现 <see cref="T:System.Windows.Forms.IDataGridViewEditingControl" />的类。</exception>
        <exception cref="T:System.Exception">按下 F2 键将导致控件进入编辑模式，但数据源中的错误会阻止操作，并且没有 <see cref="E:System.Windows.Forms.DataGridView.DataError" /> 事件的处理程序或处理程序已将 <see cref="P:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException" /> 属性设置为 <see langword="true" />。</exception>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="ProcessF3Key">
      <MemberSignature Language="C#" Value="protected bool ProcessF3Key (System.Windows.Forms.Keys keyData);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance bool ProcessF3Key(valuetype System.Windows.Forms.Keys keyData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.ProcessF3Key(System.Windows.Forms.Keys)" />
      <MemberSignature Language="VB.NET" Value="Protected Function ProcessF3Key (keyData As Keys) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; bool ProcessF3Key(System::Windows::Forms::Keys keyData);" />
      <MemberSignature Language="F#" Value="member this.ProcessF3Key : System.Windows.Forms.Keys -&gt; bool" Usage="dataGridView.ProcessF3Key keyData" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyData" Type="System.Windows.Forms.Keys" Index="0" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="keyData">值的按位组合，这些值表示要处理的一个或多个键。</param>
        <summary>通过对当前列进行排序来处理 F3 键。</summary>
        <returns>如果已处理该键，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ProcessHomeKey">
      <MemberSignature Language="C#" Value="protected bool ProcessHomeKey (System.Windows.Forms.Keys keyData);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance bool ProcessHomeKey(valuetype System.Windows.Forms.Keys keyData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.ProcessHomeKey(System.Windows.Forms.Keys)" />
      <MemberSignature Language="VB.NET" Value="Protected Function ProcessHomeKey (keyData As Keys) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; bool ProcessHomeKey(System::Windows::Forms::Keys keyData);" />
      <MemberSignature Language="F#" Value="member this.ProcessHomeKey : System.Windows.Forms.Keys -&gt; bool" Usage="dataGridView.ProcessHomeKey keyData" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyData" Type="System.Windows.Forms.Keys" />
      </Parameters>
      <Docs>
        <param name="keyData">按下的键。</param>
        <summary>处理 Home 键。</summary>
        <returns>如果已处理该键，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">“HOME”键将导致该控件进入编辑模式，但当前新的单元格的 <see cref="P:System.Windows.Forms.DataGridViewCell.EditType" /> 属性不指示派生自 <see cref="T:System.Windows.Forms.Control" /> 并实现 <see cref="T:System.Windows.Forms.IDataGridViewEditingControl" />的类。</exception>
        <exception cref="T:System.Exception">此操作将提交一个单元格值或者进入编辑模式，但是数据源中的错误禁止执行此操作，<see cref="E:System.Windows.Forms.DataGridView.DataError" /> 事件没有处理程序，或者处理程序已将 <see cref="P:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException" /> 属性设置为 <see langword="true" />。</exception>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="ProcessInsertKey">
      <MemberSignature Language="C#" Value="protected bool ProcessInsertKey (System.Windows.Forms.Keys keyData);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance bool ProcessInsertKey(valuetype System.Windows.Forms.Keys keyData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.ProcessInsertKey(System.Windows.Forms.Keys)" />
      <MemberSignature Language="VB.NET" Value="Protected Function ProcessInsertKey (keyData As Keys) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; bool ProcessInsertKey(System::Windows::Forms::Keys keyData);" />
      <MemberSignature Language="F#" Value="member this.ProcessInsertKey : System.Windows.Forms.Keys -&gt; bool" Usage="dataGridView.ProcessInsertKey keyData" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyData" Type="System.Windows.Forms.Keys" />
      </Parameters>
      <Docs>
        <param name="keyData"><see cref="T:System.Windows.Forms.Keys" /> 值之一，表示要处理的键。</param>
        <summary>处理 Insert 键。</summary>
        <returns>如果已处理该键，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="ProcessKeyEventArgs">
      <MemberSignature Language="C#" Value="protected override bool ProcessKeyEventArgs (ref System.Windows.Forms.Message m);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool ProcessKeyEventArgs(valuetype System.Windows.Forms.Message&amp; m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.ProcessKeyEventArgs(System.Windows.Forms.Message@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function ProcessKeyEventArgs (ByRef m As Message) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool ProcessKeyEventArgs(System::Windows::Forms::Message % m);" />
      <MemberSignature Language="F#" Value="override this.ProcessKeyEventArgs : Message -&gt; bool" Usage="dataGridView.ProcessKeyEventArgs m" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Windows.Forms.Message" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="m">通过引用传递的 <see cref="T:System.Windows.Forms.Message" />，表示要处理的窗口消息。</param>
        <summary>处理键消息并生成适当的控件事件。</summary>
        <returns>如果已处理该消息，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关详细信息，请参阅 <xref:System.Windows.Forms.Control.ProcessKeyEventArgs%2A?displayProperty=nameWithType> 基类上的方法。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">按下的键将导致该控件进入编辑模式，但当前单元格的 <see cref="P:System.Windows.Forms.DataGridViewCell.EditType" /> 属性不指示派生自 <see cref="T:System.Windows.Forms.Control" /> 并实现 <see cref="T:System.Windows.Forms.IDataGridViewEditingControl" /> 的类。</exception>
        <exception cref="T:System.Exception">此操作将提交一个单元格值或者进入编辑模式，但是数据源中的错误禁止执行此操作，<see cref="E:System.Windows.Forms.DataGridView.DataError" /> 事件没有处理程序，或者处理程序已将 <see cref="P:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException" /> 属性设置为 <see langword="true" />。</exception>
        <block subset="none" type="overrides"><para>重写此方法时，控件应返回 <see langword="true" /> 以指示它已处理消息。 对于不是由控件处理的消息，返回此方法的基版本的结果。</para></block>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="ProcessKeyPreview">
      <MemberSignature Language="C#" Value="protected override bool ProcessKeyPreview (ref System.Windows.Forms.Message m);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool ProcessKeyPreview(valuetype System.Windows.Forms.Message&amp; m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.ProcessKeyPreview(System.Windows.Forms.Message@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function ProcessKeyPreview (ByRef m As Message) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool ProcessKeyPreview(System::Windows::Forms::Message % m);" />
      <MemberSignature Language="F#" Value="override this.ProcessKeyPreview : Message -&gt; bool" Usage="dataGridView.ProcessKeyPreview m" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Windows.Forms.Message" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="m">通过引用传递的 <see cref="T:System.Windows.Forms.Message" />，表示要处理的窗口消息。</param>
        <summary>预览键盘消息。</summary>
        <returns>如果已处理该消息，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关详细信息，请参阅 <xref:System.Windows.Forms.Control.ProcessKeyPreview%2A?displayProperty=nameWithType> 基类上的方法。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">按下的键将导致该控件进入编辑模式，但当前单元格的 <see cref="P:System.Windows.Forms.DataGridViewCell.EditType" /> 属性不指示派生自 <see cref="T:System.Windows.Forms.Control" /> 并实现 <see cref="T:System.Windows.Forms.IDataGridViewEditingControl" /> 的类。</exception>
        <exception cref="T:System.Exception">此操作将提交一个单元格值或者进入编辑模式，但是数据源中的错误禁止执行此操作，<see cref="E:System.Windows.Forms.DataGridView.DataError" /> 事件没有处理程序，或者处理程序已将 <see cref="P:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException" /> 属性设置为 <see langword="true" />。</exception>
        <block subset="none" type="overrides"><para>重写此方法时，控件应返回 <see langword="true" /> 以指示它已处理消息。 对于不是由控件处理的消息，返回此方法的基版本的结果。</para></block>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="ProcessLeftKey">
      <MemberSignature Language="C#" Value="protected bool ProcessLeftKey (System.Windows.Forms.Keys keyData);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance bool ProcessLeftKey(valuetype System.Windows.Forms.Keys keyData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.ProcessLeftKey(System.Windows.Forms.Keys)" />
      <MemberSignature Language="VB.NET" Value="Protected Function ProcessLeftKey (keyData As Keys) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; bool ProcessLeftKey(System::Windows::Forms::Keys keyData);" />
      <MemberSignature Language="F#" Value="member this.ProcessLeftKey : System.Windows.Forms.Keys -&gt; bool" Usage="dataGridView.ProcessLeftKey keyData" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyData" Type="System.Windows.Forms.Keys" />
      </Parameters>
      <Docs>
        <param name="keyData"><see cref="T:System.Windows.Forms.Keys" /> 值的按位组合，这些值表示要处理的一个或多个键。</param>
        <summary>处理向左键。</summary>
        <returns>如果已处理该键，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">“向左箭头”键将导致该控件进入编辑模式，但当前新的单元格的 <see cref="P:System.Windows.Forms.DataGridViewCell.EditType" /> 属性不指示派生自 <see cref="T:System.Windows.Forms.Control" /> 并实现 <see cref="T:System.Windows.Forms.IDataGridViewEditingControl" />的类。</exception>
        <exception cref="T:System.Exception">此操作将提交一个单元格值或者进入编辑模式，但是数据源中的错误禁止执行此操作，<see cref="E:System.Windows.Forms.DataGridView.DataError" /> 事件没有处理程序，或者处理程序已将 <see cref="P:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException" /> 属性设置为 <see langword="true" />。</exception>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="ProcessNextKey">
      <MemberSignature Language="C#" Value="protected bool ProcessNextKey (System.Windows.Forms.Keys keyData);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance bool ProcessNextKey(valuetype System.Windows.Forms.Keys keyData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.ProcessNextKey(System.Windows.Forms.Keys)" />
      <MemberSignature Language="VB.NET" Value="Protected Function ProcessNextKey (keyData As Keys) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; bool ProcessNextKey(System::Windows::Forms::Keys keyData);" />
      <MemberSignature Language="F#" Value="member this.ProcessNextKey : System.Windows.Forms.Keys -&gt; bool" Usage="dataGridView.ProcessNextKey keyData" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyData" Type="System.Windows.Forms.Keys" />
      </Parameters>
      <Docs>
        <param name="keyData"><see cref="T:System.Windows.Forms.Keys" /> 值的按位组合，这些值表示要处理的一个或多个键。</param>
        <summary>处理 Page Down 键。</summary>
        <returns>如果已处理该键，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">“向下翻页”键将导致该控件进入编辑模式，但当前新的单元格的 <see cref="P:System.Windows.Forms.DataGridViewCell.EditType" /> 属性不指示派生自 <see cref="T:System.Windows.Forms.Control" /> 并实现 <see cref="T:System.Windows.Forms.IDataGridViewEditingControl" />的类。</exception>
        <exception cref="T:System.Exception">此操作将提交一个单元格值或者进入编辑模式，但是数据源中的错误禁止执行此操作，<see cref="E:System.Windows.Forms.DataGridView.DataError" /> 事件没有处理程序，或者处理程序已将 <see cref="P:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException" /> 属性设置为 <see langword="true" />。</exception>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="ProcessPriorKey">
      <MemberSignature Language="C#" Value="protected bool ProcessPriorKey (System.Windows.Forms.Keys keyData);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance bool ProcessPriorKey(valuetype System.Windows.Forms.Keys keyData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.ProcessPriorKey(System.Windows.Forms.Keys)" />
      <MemberSignature Language="VB.NET" Value="Protected Function ProcessPriorKey (keyData As Keys) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; bool ProcessPriorKey(System::Windows::Forms::Keys keyData);" />
      <MemberSignature Language="F#" Value="member this.ProcessPriorKey : System.Windows.Forms.Keys -&gt; bool" Usage="dataGridView.ProcessPriorKey keyData" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyData" Type="System.Windows.Forms.Keys" />
      </Parameters>
      <Docs>
        <param name="keyData"><see cref="T:System.Windows.Forms.Keys" /> 值的按位组合，这些值表示要处理的一个或多个键。</param>
        <summary>处理 Page Up 键。</summary>
        <returns>如果已处理该键，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">“向上翻页”键将导致该控件进入编辑模式，但当前新的单元格的 <see cref="P:System.Windows.Forms.DataGridViewCell.EditType" /> 属性不指示派生自 <see cref="T:System.Windows.Forms.Control" /> 并实现 <see cref="T:System.Windows.Forms.IDataGridViewEditingControl" /> 的类。</exception>
        <exception cref="T:System.Exception">此操作将提交一个单元格值或者进入编辑模式，但是数据源中的错误禁止执行此操作，<see cref="E:System.Windows.Forms.DataGridView.DataError" /> 事件没有处理程序，或者处理程序已将 <see cref="P:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException" /> 属性设置为 <see langword="true" />。</exception>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="ProcessRightKey">
      <MemberSignature Language="C#" Value="protected bool ProcessRightKey (System.Windows.Forms.Keys keyData);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance bool ProcessRightKey(valuetype System.Windows.Forms.Keys keyData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.ProcessRightKey(System.Windows.Forms.Keys)" />
      <MemberSignature Language="VB.NET" Value="Protected Function ProcessRightKey (keyData As Keys) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; bool ProcessRightKey(System::Windows::Forms::Keys keyData);" />
      <MemberSignature Language="F#" Value="member this.ProcessRightKey : System.Windows.Forms.Keys -&gt; bool" Usage="dataGridView.ProcessRightKey keyData" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyData" Type="System.Windows.Forms.Keys" />
      </Parameters>
      <Docs>
        <param name="keyData"><see cref="T:System.Windows.Forms.Keys" /> 值的按位组合，这些值表示要处理的一个或多个键。</param>
        <summary>处理向右键。</summary>
        <returns>如果已处理该键，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例演示如何 <xref:System.Windows.Forms.DataGridView> 通过重写和方法更改子类中的 ENTER 键的行为 <xref:System.Windows.Forms.DataGridView.ProcessDataGridViewKey%2A> <xref:System.Windows.Forms.DataGridView.ProcessDialogKey%2A> 。 在此示例中，ENTER 键的行为与向右箭头键相同，使用户可以更轻松地编辑单个数据行中的多个单元格。  
  
 [!code-csharp[System.Windows.Forms.DataGridViewMisc2#70](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewMisc2/cs/misc2.cs#70)]
 [!code-vb[System.Windows.Forms.DataGridViewMisc2#70](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewMisc2/vb/misc2.vb#70)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">“向右箭头”键将导致该控件进入编辑模式，但当前新的单元格的 <see cref="P:System.Windows.Forms.DataGridViewCell.EditType" /> 属性不指示派生自 <see cref="T:System.Windows.Forms.Control" /> 并实现 <see cref="T:System.Windows.Forms.IDataGridViewEditingControl" /> 的类。</exception>
        <exception cref="T:System.Exception">此操作将提交一个单元格值或者进入编辑模式，但是数据源中的错误禁止执行此操作，<see cref="E:System.Windows.Forms.DataGridView.DataError" /> 事件没有处理程序，或者处理程序已将 <see cref="P:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException" /> 属性设置为 <see langword="true" />。</exception>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="ProcessSpaceKey">
      <MemberSignature Language="C#" Value="protected bool ProcessSpaceKey (System.Windows.Forms.Keys keyData);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance bool ProcessSpaceKey(valuetype System.Windows.Forms.Keys keyData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.ProcessSpaceKey(System.Windows.Forms.Keys)" />
      <MemberSignature Language="VB.NET" Value="Protected Function ProcessSpaceKey (keyData As Keys) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; bool ProcessSpaceKey(System::Windows::Forms::Keys keyData);" />
      <MemberSignature Language="F#" Value="member this.ProcessSpaceKey : System.Windows.Forms.Keys -&gt; bool" Usage="dataGridView.ProcessSpaceKey keyData" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyData" Type="System.Windows.Forms.Keys" />
      </Parameters>
      <Docs>
        <param name="keyData"><see cref="T:System.Windows.Forms.Keys" /> 值之一，表示要处理的键。</param>
        <summary>处理空格键。</summary>
        <returns>如果已处理该键，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="ProcessTabKey">
      <MemberSignature Language="C#" Value="protected bool ProcessTabKey (System.Windows.Forms.Keys keyData);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance bool ProcessTabKey(valuetype System.Windows.Forms.Keys keyData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.ProcessTabKey(System.Windows.Forms.Keys)" />
      <MemberSignature Language="VB.NET" Value="Protected Function ProcessTabKey (keyData As Keys) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; bool ProcessTabKey(System::Windows::Forms::Keys keyData);" />
      <MemberSignature Language="F#" Value="member this.ProcessTabKey : System.Windows.Forms.Keys -&gt; bool" Usage="dataGridView.ProcessTabKey keyData" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyData" Type="System.Windows.Forms.Keys" />
      </Parameters>
      <Docs>
        <param name="keyData"><see cref="T:System.Windows.Forms.Keys" /> 值的按位组合，这些值表示要处理的一个或多个键。</param>
        <summary>处理 Tab 键。</summary>
        <returns>如果已处理该键，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">按下 TAB 键将导致控件进入编辑模式，但当前新的单元格的 <see cref="P:System.Windows.Forms.DataGridViewCell.EditType" /> 属性不指示派生自 <see cref="T:System.Windows.Forms.Control" /> 并实现 <see cref="T:System.Windows.Forms.IDataGridViewEditingControl" />的类。</exception>
        <exception cref="T:System.Exception">此操作将提交一个单元格值或者进入编辑模式，但是数据源中的错误禁止执行此操作，<see cref="E:System.Windows.Forms.DataGridView.DataError" /> 事件没有处理程序，或者处理程序已将 <see cref="P:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException" /> 属性设置为 <see langword="true" />。</exception>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="ProcessUpKey">
      <MemberSignature Language="C#" Value="protected bool ProcessUpKey (System.Windows.Forms.Keys keyData);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance bool ProcessUpKey(valuetype System.Windows.Forms.Keys keyData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.ProcessUpKey(System.Windows.Forms.Keys)" />
      <MemberSignature Language="VB.NET" Value="Protected Function ProcessUpKey (keyData As Keys) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; bool ProcessUpKey(System::Windows::Forms::Keys keyData);" />
      <MemberSignature Language="F#" Value="member this.ProcessUpKey : System.Windows.Forms.Keys -&gt; bool" Usage="dataGridView.ProcessUpKey keyData" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyData" Type="System.Windows.Forms.Keys" />
      </Parameters>
      <Docs>
        <param name="keyData"><see cref="T:System.Windows.Forms.Keys" /> 值的按位组合，这些值表示要处理的一个或多个键。</param>
        <summary>处理向上键。</summary>
        <returns>如果已处理该键，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">“向上箭头”键将导致该控件进入编辑模式，但当前新的单元格的 <see cref="P:System.Windows.Forms.DataGridViewCell.EditType" /> 属性不指示派生自 <see cref="T:System.Windows.Forms.Control" /> 并实现 <see cref="T:System.Windows.Forms.IDataGridViewEditingControl" />的类。</exception>
        <exception cref="T:System.Exception">此操作将提交一个单元格值或者进入编辑模式，但是数据源中的错误禁止执行此操作，<see cref="E:System.Windows.Forms.DataGridView.DataError" /> 事件没有处理程序，或者处理程序已将 <see cref="P:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException" /> 属性设置为 <see langword="true" />。</exception>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="ProcessZeroKey">
      <MemberSignature Language="C#" Value="protected bool ProcessZeroKey (System.Windows.Forms.Keys keyData);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance bool ProcessZeroKey(valuetype System.Windows.Forms.Keys keyData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.ProcessZeroKey(System.Windows.Forms.Keys)" />
      <MemberSignature Language="VB.NET" Value="Protected Function ProcessZeroKey (keyData As Keys) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; bool ProcessZeroKey(System::Windows::Forms::Keys keyData);" />
      <MemberSignature Language="F#" Value="member this.ProcessZeroKey : System.Windows.Forms.Keys -&gt; bool" Usage="dataGridView.ProcessZeroKey keyData" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyData" Type="System.Windows.Forms.Keys" />
      </Parameters>
      <Docs>
        <param name="keyData"><see cref="T:System.Windows.Forms.Keys" /> 值的按位组合，这些值表示要处理的一个或多个键。</param>
        <summary>处理 0 键。</summary>
        <returns>如果已处理该键，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">按下 0 键将导致控件进入编辑模式，但当前单元格的 <see cref="P:System.Windows.Forms.DataGridViewCell.EditType" /> 属性不指示派生自 <see cref="T:System.Windows.Forms.Control" /> 并实现 <see cref="T:System.Windows.Forms.IDataGridViewEditingControl" />的类。</exception>
        <exception cref="T:System.Exception">此操作将导致控件进入编辑模式，但数据源中的错误会阻止操作，并且没有 <see cref="E:System.Windows.Forms.DataGridView.DataError" /> 事件的处理程序，或者处理程序已将 <see cref="P:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException" /> 属性设置为 <see langword="true" />。</exception>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="ReadOnly">
      <MemberSignature Language="C#" Value="public bool ReadOnly { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.ReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public Property ReadOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ReadOnly { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ReadOnly : bool with get, set" Usage="System.Windows.Forms.DataGridView.ReadOnly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Browsable(true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(true)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示用户是否可以编辑 <see cref="T:System.Windows.Forms.DataGridView" /> 控件的单元格。</summary>
        <value>如果用户不能编辑<see langword="true" /> 控件的单元格，为 <see cref="T:System.Windows.Forms.DataGridView" /> ；否则为 <see langword="false" />。 默认值为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果属性的值为 <xref:System.Windows.Forms.DataGridView.ReadOnly%2A> `true` 单元、单元格的行、单元格的列或，则单元格为只读 <xref:System.Windows.Forms.DataGridView> 。

## Examples  
 下面的代码示例演示如何在 <xref:System.Windows.Forms.DataGridView> 主要用于显示的控件中使用此属性。 在此示例中，控件的可视外观是通过多种方式自定义的，并且控件配置为具有有限的交互功能。 此示例是类概述中提供的一个更大示例的一部分 <xref:System.Windows.Forms.DataGridViewCellStyle> 。  
  
 [!code-csharp[System.Windows.Forms.DataGridViewStyleDemo#20](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewStyleDemo/CS/form1.cs#20)]
 [!code-vb[System.Windows.Forms.DataGridViewStyleDemo#20](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewStyleDemo/VB/form1.vb#20)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">设置此属性时指定的值为 <see langword="true" />，当前单元格处于编辑模式，并且当前单元格包含无法提交的更改。</exception>
        <exception cref="T:System.Exception">当设置此属性时，指定的值将导致控件进入编辑模式，但是对正在编辑的单元格值的初始化失败，并且 <see cref="E:System.Windows.Forms.DataGridView.DataError" /> 事件没有处理程序，或者处理程序已将 <see cref="P:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException" /> 属性设置为 <see langword="true" />。 通常情况下，可将该异常对象强制转换为类型  <see cref="T:System.FormatException" />。</exception>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="ReadOnlyChanged">
      <MemberSignature Language="C#" Value="public event EventHandler ReadOnlyChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler ReadOnlyChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.ReadOnlyChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ReadOnlyChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ ReadOnlyChanged;" />
      <MemberSignature Language="F#" Value="member this.ReadOnlyChanged : EventHandler " Usage="member this.ReadOnlyChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当 <see cref="P:System.Windows.Forms.DataGridView.ReadOnly" /> 属性更改时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关如何处理事件的详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。

## Examples  
 下面的代码示例演示如何使用此成员。 在此示例中，事件处理程序报告事件的发生 <xref:System.Windows.Forms.DataGridView.ReadOnlyChanged> 。 此报表可帮助你了解何时发生事件，并可帮助你进行调试。 若要报告多个事件或频繁发生的事件，请考虑 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 将消息替换为多行或将其追加到多行 <xref:System.Windows.Forms.TextBox> 。  
  
 若要运行示例代码，请将其粘贴到包含名为的类型的实例的项目中 <xref:System.Windows.Forms.DataGridView> `DataGridView1` 。 然后，确保事件处理程序与事件相关联 <xref:System.Windows.Forms.DataGridView.ReadOnlyChanged> 。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#274](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#274)]
 [!code-vb[System.Windows.Forms.EventExamples#274](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#274)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="RefreshEdit">
      <MemberSignature Language="C#" Value="public bool RefreshEdit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool RefreshEdit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.RefreshEdit" />
      <MemberSignature Language="VB.NET" Value="Public Function RefreshEdit () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool RefreshEdit();" />
      <MemberSignature Language="F#" Value="member this.RefreshEdit : unit -&gt; bool" Usage="dataGridView.RefreshEdit " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>当前单元格在处于编辑模式时，用基础单元格的值刷新当前单元格的值会丢弃以前的任何值。</summary>
        <returns>如果成功，则为 <see langword="true" />；如果发生了 <see cref="E:System.Windows.Forms.DataGridView.DataError" /> 事件，则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 调用此方法可强制单元格在编辑模式下更新其显示值。 当外部进程修改单元格值并且你想要通知用户更改时，即使在用户指定的更改结果丢失时，这一点非常有用。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="ResetText">
      <MemberSignature Language="C#" Value="public override void ResetText ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void ResetText() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.ResetText" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub ResetText ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void ResetText();" />
      <MemberSignature Language="F#" Value="override this.ResetText : unit -&gt; unit" Usage="dataGridView.ResetText " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>将 <see cref="P:System.Windows.Forms.DataGridView.Text" /> 属性重置为其默认值 (<see cref="F:System.String.Empty" />)。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 尽管此方法的行为如所述，但 <xref:System.Windows.Forms.DataGridView.Text%2A> 属性与此控件无关。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.DataGridView.Text" />
      </Docs>
    </Member>
    <Member MemberName="RowContextMenuStripChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewRowEventHandler RowContextMenuStripChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewRowEventHandler RowContextMenuStripChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.RowContextMenuStripChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event RowContextMenuStripChanged As DataGridViewRowEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::DataGridViewRowEventHandler ^ RowContextMenuStripChanged;" />
      <MemberSignature Language="F#" Value="member this.RowContextMenuStripChanged : System.Windows.Forms.DataGridViewRowEventHandler " Usage="member this.RowContextMenuStripChanged : System.Windows.Forms.DataGridViewRowEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewRowEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当 <see cref="P:System.Windows.Forms.DataGridViewRow.ContextMenuStrip" /> 属性更改时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关如何处理事件的详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。

## Examples  
 下面的代码示例演示如何使用此成员。 在此示例中，事件处理程序报告事件的发生 <xref:System.Windows.Forms.DataGridView.RowContextMenuStripChanged> 。 此报表可帮助你了解何时发生事件，并可帮助你进行调试。 若要报告多个事件或频繁发生的事件，请考虑 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 将消息替换为多行或将其追加到多行 <xref:System.Windows.Forms.TextBox> 。  
  
 若要运行示例代码，请将其粘贴到包含名为的类型的实例的项目中 <xref:System.Windows.Forms.DataGridView> `DataGridView1` 。 然后，确保事件处理程序与事件相关联 <xref:System.Windows.Forms.DataGridView.RowContextMenuStripChanged> 。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#338](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#338)]
 [!code-vb[System.Windows.Forms.EventExamples#338](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#338)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="RowContextMenuStripNeeded">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewRowContextMenuStripNeededEventHandler RowContextMenuStripNeeded;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewRowContextMenuStripNeededEventHandler RowContextMenuStripNeeded" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.RowContextMenuStripNeeded" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event RowContextMenuStripNeeded As DataGridViewRowContextMenuStripNeededEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::DataGridViewRowContextMenuStripNeededEventHandler ^ RowContextMenuStripNeeded;" />
      <MemberSignature Language="F#" Value="member this.RowContextMenuStripNeeded : System.Windows.Forms.DataGridViewRowContextMenuStripNeededEventHandler " Usage="member this.RowContextMenuStripNeeded : System.Windows.Forms.DataGridViewRowContextMenuStripNeededEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewRowContextMenuStripNeededEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在需要行的快捷菜单时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.DataGridView.RowContextMenuStripNeeded>仅当 <xref:System.Windows.Forms.DataGridView> 控件 <xref:System.Windows.Forms.DataGridView.DataSource%2A> 属性已设置或其 <xref:System.Windows.Forms.DataGridView.VirtualMode%2A> 属性为时，才会发生此事件 `true` 。 <xref:System.Windows.Forms.DataGridView.RowContextMenuStripNeeded>当您想要显示由行的当前状态或它包含的值确定的快捷菜单时，处理事件很有用。  
  
 处理 <xref:System.Windows.Forms.DataGridView.RowContextMenuStripNeeded> 事件时，每当用户右键单击行时，都会显示您在处理程序中指定的快捷菜单，除非 <xref:System.Windows.Forms.DataGridView.CellContextMenuStripNeeded> 覆盖所单击的特定单元格的快捷菜单。  
  
 在 <xref:System.Windows.Forms.DataGridView.RowContextMenuStripNeeded> <xref:System.Windows.Forms.DataGridViewRow.ContextMenuStrip%2A?displayProperty=nameWithType> 以编程方式或在用户右键单击行的情况下检索属性值时，也会发生该事件。  
  
 您可以使用 <xref:System.Windows.Forms.DataGridViewRowContextMenuStripNeededEventArgs.RowIndex%2A?displayProperty=nameWithType> 属性来确定行的状态或它包含的值，并使用此信息来更改或修改 <xref:System.Windows.Forms.DataGridViewRowContextMenuStripNeededEventArgs.ContextMenuStrip%2A?displayProperty=nameWithType> 属性。 此属性将用行属性的值进行初始化，该属性的值将 <xref:System.Windows.Forms.DataGridViewRow.ContextMenuStrip%2A> 重写。  
  
 处理 <xref:System.Windows.Forms.DataGridView.RowContextMenuStripNeeded> 大量数据时处理事件，以避免设置多行的行值时的性能损失 <xref:System.Windows.Forms.DataGridViewRow.ContextMenuStrip%2A> 。 有关详细信息，请参阅 [缩放 Windows 窗体 DataGridView 控件的最佳做法](/dotnet/framework/winforms/controls/best-practices-for-scaling-the-windows-forms-datagridview-control)。  
  
 有关如何处理事件的详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。

## Examples  
 下面的代码示例将处理 <xref:System.Windows.Forms.DataGridView.RowContextMenuStripNeeded> 事件，以便 <xref:System.Windows.Forms.ContextMenuStrip> 基于员工的标题提供。 在此示例中，有两个快捷菜单，一个用于经理，另一个用于所有其他员工。  
  
 [!code-csharp[System.Windows.Forms.DataGridView_NeededEvents#10](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridView_NeededEvents/CS/Form1.cs#10)]
 [!code-vb[System.Windows.Forms.DataGridView_NeededEvents#10](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridView_NeededEvents/VB/Form1.vb#10)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ContextMenuStrip" />
        <altmember cref="P:System.Windows.Forms.DataGridView.DataSource" />
        <altmember cref="P:System.Windows.Forms.DataGridView.VirtualMode" />
        <altmember cref="T:System.Windows.Forms.DataGridViewRowContextMenuStripNeededEventHandler" />
        <altmember cref="T:System.Windows.Forms.DataGridViewRowContextMenuStripNeededEventArgs" />
        <altmember cref="P:System.Windows.Forms.DataGridViewRowContextMenuStripNeededEventArgs.ContextMenuStrip" />
        <altmember cref="P:System.Windows.Forms.DataGridViewRow.ContextMenuStrip" />
        <altmember cref="M:System.Windows.Forms.DataGridView.OnRowContextMenuStripNeeded(System.Windows.Forms.DataGridViewRowContextMenuStripNeededEventArgs)" />
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="RowCount">
      <MemberSignature Language="C#" Value="public int RowCount { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 RowCount" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.RowCount" />
      <MemberSignature Language="VB.NET" Value="Public Property RowCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int RowCount { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.RowCount : int with get, set" Usage="System.Windows.Forms.DataGridView.RowCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(0)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(0)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:System.Windows.Forms.DataGridView" /> 中显示的行数。</summary>
        <value>要在 <see cref="T:System.Windows.Forms.DataGridView" /> 中显示的行数。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果 <xref:System.Windows.Forms.DataGridView.RowCount%2A> 设置为小于当前值的值，则将从集合末尾删除行 <xref:System.Windows.Forms.DataGridView.Rows%2A> 。 如果 <xref:System.Windows.Forms.DataGridView.RowCount%2A> 设置为大于当前值的值，则将行添加到集合的末尾 <xref:System.Windows.Forms.DataGridView.Rows%2A> 。 其他行基于属性中指定的行 <xref:System.Windows.Forms.DataGridView.RowTemplate%2A> 。  
  
 如果将属性设置 <xref:System.Windows.Forms.DataGridView.RowCount%2A> 为0，则会从中删除所有行 <xref:System.Windows.Forms.DataGridView> 。 这等效于调用 <xref:System.Windows.Forms.DataGridViewRowCollection.Clear%2A?displayProperty=nameWithType> 方法。  
  
> [!NOTE]
> 如果 <xref:System.Windows.Forms.DataGridView.AllowUserToAddRows%2A> 为 `true` ，则不能将设置 <xref:System.Windows.Forms.DataGridView.RowCount%2A> 为0。 在这种情况下，请调用 <xref:System.Windows.Forms.DataGridViewRowCollection.Clear%2A?displayProperty=nameWithType> 方法以删除新记录行之外的所有行。 <xref:System.Windows.Forms.DataGridViewRowCollection.Clear%2A> <xref:System.Windows.Forms.DataGridView.RowCount%2A> 在这种情况下，调用与设置为1的结果相同，但速度要快得多。  
  
 <xref:System.Windows.Forms.DataGridView.RowCount%2A>属性可与属性一起使用 <xref:System.Windows.Forms.DataGridView.ColumnCount%2A> ，以创建 <xref:System.Windows.Forms.DataGridView> 用于显示和编辑文本的简单。 如果将控件的 <xref:System.Windows.Forms.DataGridView.RowCount%2A> 属性设置为大于0的值，则将 <xref:System.Windows.Forms.DataGridView> <xref:System.Windows.Forms.DataGridViewTextBoxColumn> 自动添加。

## Examples  
 下面的代码示例演示属性的用法 <xref:System.Windows.Forms.DataGridView.RowCount%2A> 。 在此示例中，此属性用于跟踪中的项数 <xref:System.Windows.Forms.DataGridView> 。 此示例是事件中提供的一个更大示例的一部分 <xref:System.Windows.Forms.DataGridView.SelectionChanged> 。  
  
 [!code-csharp[System.Windows.Forms.DataGridViewSelectionSum#10](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewSelectionSum/CS/form1.cs#10)]
 [!code-vb[System.Windows.Forms.DataGridViewSelectionSum#10](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewSelectionSum/VB/form1.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">当设置此属性时，指定的值小于 0。  
  
- 或 - 
指定的值小于 1，并且 <see cref="P:System.Windows.Forms.DataGridView.AllowUserToAddRows" /> 设置为 <see langword="true" />。</exception>
        <exception cref="T:System.InvalidOperationException">设置此属性的同时设置了 <see cref="P:System.Windows.Forms.DataGridView.DataSource" /> 属性。</exception>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="RowDefaultCellStyleChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewRowEventHandler RowDefaultCellStyleChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewRowEventHandler RowDefaultCellStyleChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.RowDefaultCellStyleChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event RowDefaultCellStyleChanged As DataGridViewRowEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::DataGridViewRowEventHandler ^ RowDefaultCellStyleChanged;" />
      <MemberSignature Language="F#" Value="member this.RowDefaultCellStyleChanged : System.Windows.Forms.DataGridViewRowEventHandler " Usage="member this.RowDefaultCellStyleChanged : System.Windows.Forms.DataGridViewRowEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewRowEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当行的 <see cref="P:System.Windows.Forms.DataGridViewBand.DefaultCellStyle" /> 属性值更改时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当某个行的属性返回的的任何属性 <xref:System.Windows.Forms.DataGridViewCellStyle> <xref:System.Windows.Forms.DataGridViewBand.DefaultCellStyle%2A> 设置为新值时，或者当 <xref:System.Windows.Forms.DataGridViewBand.DefaultCellStyle%2A> 某行的属性设置为 <xref:System.Windows.Forms.DataGridViewCellStyle> 与上一个单元格样式对象至少有一个属性值的新值时，将发生此事件。  
  
 有关如何处理事件的详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。

## Examples  
 下面的代码示例演示如何使用此成员。 在此示例中，事件处理程序报告事件的发生 <xref:System.Windows.Forms.DataGridView.RowDefaultCellStyleChanged> 。 此报表可帮助你了解何时发生事件，并可帮助你进行调试。 若要报告多个事件或频繁发生的事件，请考虑 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 将消息替换为多行或将其追加到多行 <xref:System.Windows.Forms.TextBox> 。  
  
 若要运行示例代码，请将其粘贴到包含名为的类型的实例的项目中 <xref:System.Windows.Forms.DataGridView> `DataGridView1` 。 然后，确保事件处理程序与事件相关联 <xref:System.Windows.Forms.DataGridView.RowDefaultCellStyleChanged> 。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#340](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#340)]
 [!code-vb[System.Windows.Forms.EventExamples#340](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#340)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DataGridViewCellStyle" />
        <related type="Article" href="/dotnet/framework/winforms/controls/cell-styles-in-the-windows-forms-datagridview-control">Windows 窗体 DataGridView 控件中的单元格样式</related>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="RowDirtyStateNeeded">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.QuestionEventHandler RowDirtyStateNeeded;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.QuestionEventHandler RowDirtyStateNeeded" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.RowDirtyStateNeeded" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event RowDirtyStateNeeded As QuestionEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::QuestionEventHandler ^ RowDirtyStateNeeded;" />
      <MemberSignature Language="F#" Value="member this.RowDirtyStateNeeded : System.Windows.Forms.QuestionEventHandler " Usage="member this.RowDirtyStateNeeded : System.Windows.Forms.QuestionEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.QuestionEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在以下情况下发生：当 <see cref="P:System.Windows.Forms.DataGridView.VirtualMode" /> 控件的 <see cref="T:System.Windows.Forms.DataGridView" /> 属性为 <see langword="true" />，并且 <see cref="T:System.Windows.Forms.DataGridView" /> 需要确定当前行是否有未提交的更改时。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 默认情况下， <xref:System.Windows.Forms.QuestionEventArgs.Response%2A?displayProperty=nameWithType> `true` 如果当前行中的任何单元格已被修改，则此事件会将属性设置为。 这会导致在 <xref:System.Windows.Forms.DataGridView.CancelRowEdit> 用户将编辑还原到行时发生事件。 当单元格处于编辑模式或超出编辑模式时，用户可以通过按 ESC 两次，将编辑还原到行。 此事件可用于在虚拟模式下自定义提交范围，方法是将 <xref:System.Windows.Forms.QuestionEventArgs.Response%2A?displayProperty=nameWithType> 属性设置为正确的值，具体取决于所选的提交范围。  
  
 有关如何处理事件的详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。

## Examples  
 下面的代码示例演示如何处理此事件以提供单元级提交范围，这意味着用户只能将更改还原为当前单元格。 在单元级别提交范围内，仅当当前单元格有未提交的更改（而不是行中的任何单元格有未提交的更改时），才将行视为具有未提交的更改。 此示例摘自 [演练：在 Windows 窗体 DataGridView 控件中实现虚拟模式](/dotnet/framework/winforms/controls/implementing-virtual-mode-wf-datagridview-control)中提供的一个更大的示例。  
  
 [!code-cpp[System.Windows.Forms.DataGridView.VirtualMode#160](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.DataGridView.VirtualMode/CPP/virtualmode.cpp#160)]
 [!code-csharp[System.Windows.Forms.DataGridView.VirtualMode#160](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridView.VirtualMode/CS/virtualmode.cs#160)]
 [!code-vb[System.Windows.Forms.DataGridView.VirtualMode#160](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridView.VirtualMode/VB/virtualmode.vb#160)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="RowDividerDoubleClick">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewRowDividerDoubleClickEventHandler RowDividerDoubleClick;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewRowDividerDoubleClickEventHandler RowDividerDoubleClick" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.RowDividerDoubleClick" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event RowDividerDoubleClick As DataGridViewRowDividerDoubleClickEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::DataGridViewRowDividerDoubleClickEventHandler ^ RowDividerDoubleClick;" />
      <MemberSignature Language="F#" Value="member this.RowDividerDoubleClick : System.Windows.Forms.DataGridViewRowDividerDoubleClickEventHandler " Usage="member this.RowDividerDoubleClick : System.Windows.Forms.DataGridViewRowDividerDoubleClickEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewRowDividerDoubleClickEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>用户双击两行间的分隔符时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 可以使用此事件自定义用户双击行分隔符时发生的自动调整大小行为。  
  
 "行" <xref:System.Windows.Forms.DataGridViewColumn.DividerWidth%2A> 属性不会扩展用户可以双击的区域。 如果通过使用此属性增加了分隔符的高度，则当用户双击分隔符与相邻列之间的边界时发生此事件。  
  
 有关如何处理事件的详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。

## Examples  
 下面的代码示例演示如何使用此成员。 在此示例中，事件处理程序报告事件的发生 <xref:System.Windows.Forms.DataGridView.RowDividerDoubleClick> 。 此报表可帮助你了解何时发生事件，并可帮助你进行调试。 若要报告多个事件或频繁发生的事件，请考虑 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 将消息替换为多行或将其追加到多行 <xref:System.Windows.Forms.TextBox> 。  
  
 若要运行示例代码，请将其粘贴到包含名为的类型的实例的项目中 <xref:System.Windows.Forms.DataGridView> `DataGridView1` 。 然后，确保事件处理程序与事件相关联 <xref:System.Windows.Forms.DataGridView.RowDividerDoubleClick> 。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#342](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#342)]
 [!code-vb[System.Windows.Forms.EventExamples#342](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#342)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="RowDividerHeightChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewRowEventHandler RowDividerHeightChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewRowEventHandler RowDividerHeightChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.RowDividerHeightChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event RowDividerHeightChanged As DataGridViewRowEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::DataGridViewRowEventHandler ^ RowDividerHeightChanged;" />
      <MemberSignature Language="F#" Value="member this.RowDividerHeightChanged : System.Windows.Forms.DataGridViewRowEventHandler " Usage="member this.RowDividerHeightChanged : System.Windows.Forms.DataGridViewRowEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewRowEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当 <see cref="P:System.Windows.Forms.DataGridViewRow.DividerHeight" /> 属性更改时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 通过设置属性来修改分隔符的高度 <xref:System.Windows.Forms.DataGridViewRow.DividerHeight%2A> 。  
  
 有关如何处理事件的详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。

## Examples  
 下面的代码示例演示如何使用此成员。 在此示例中，事件处理程序报告事件的发生 <xref:System.Windows.Forms.DataGridView.RowDividerHeightChanged> 。 此报表可帮助你了解何时发生事件，并可帮助你进行调试。 若要报告多个事件或频繁发生的事件，请考虑 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 将消息替换为多行或将其追加到多行 <xref:System.Windows.Forms.TextBox> 。  
  
 若要运行示例代码，请将其粘贴到包含名为的类型的实例的项目中 <xref:System.Windows.Forms.DataGridView> `DataGridView1` 。 然后，确保事件处理程序与事件相关联 <xref:System.Windows.Forms.DataGridView.RowDividerHeightChanged> 。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#343](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#343)]
 [!code-vb[System.Windows.Forms.EventExamples#343](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#343)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="RowEnter">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewCellEventHandler RowEnter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewCellEventHandler RowEnter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.RowEnter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event RowEnter As DataGridViewCellEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::DataGridViewCellEventHandler ^ RowEnter;" />
      <MemberSignature Language="F#" Value="member this.RowEnter : System.Windows.Forms.DataGridViewCellEventHandler " Usage="member this.RowEnter : System.Windows.Forms.DataGridViewCellEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewCellEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在某一行接收到输入焦点但变成当前行之前发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当 <xref:System.Windows.Forms.DataGridView> 最初加载时，以及当用户选择的行不是当前行时，将发生此事件。  
  
 此事件发生在 <xref:System.Windows.Forms.DataGridView.CurrentRow%2A> 更新属性之前。 若要检索新输入行的索引，请使用 <xref:System.Windows.Forms.DataGridViewCellEventArgs.RowIndex%2A?displayProperty=nameWithType> 事件处理程序中的属性。  
  
 有关如何处理事件的详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。

## Examples  
 下面的代码示例演示如何处理此事件以更改 <xref:System.Windows.Forms.DataGridViewCellStyle.BackColor%2A> 当前行中单元格的属性。 在此示例中，背景色在事件中设置 <xref:System.Windows.Forms.DataGridView.RowEnter> ，然后 <xref:System.Drawing.Color.Empty> 在事件上重置为 <xref:System.Windows.Forms.DataGridView.RowLeave> 。 若要运行此示例，请将代码粘贴到包含名为的的窗体中 <xref:System.Windows.Forms.DataGridView> `dataGridView1` ，并确保所有事件都与它们的事件处理程序相关联。  
  
 [!code-csharp[System.Windows.Forms.DataGridViewMisc#200](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewMisc/CS/datagridviewmisc.cs#200)]
 [!code-vb[System.Windows.Forms.DataGridViewMisc#200](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewMisc/VB/datagridviewmisc.vb#200)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="RowErrorTextChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewRowEventHandler RowErrorTextChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewRowEventHandler RowErrorTextChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.RowErrorTextChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event RowErrorTextChanged As DataGridViewRowEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::DataGridViewRowEventHandler ^ RowErrorTextChanged;" />
      <MemberSignature Language="F#" Value="member this.RowErrorTextChanged : System.Windows.Forms.DataGridViewRowEventHandler " Usage="member this.RowErrorTextChanged : System.Windows.Forms.DataGridViewRowEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewRowEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在行的 <see cref="P:System.Windows.Forms.DataGridViewRow.ErrorText" /> 属性更改时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关如何处理事件的详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。

## Examples  
 下面的代码示例演示如何使用此成员。 在此示例中，事件处理程序报告事件的发生 <xref:System.Windows.Forms.DataGridView.RowErrorTextChanged> 。 此报表可帮助你了解何时发生事件，并可帮助你进行调试。 若要报告多个事件或频繁发生的事件，请考虑 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 将消息替换为多行或将其追加到多行 <xref:System.Windows.Forms.TextBox> 。  
  
 若要运行示例代码，请将其粘贴到包含名为的类型的实例的项目中 <xref:System.Windows.Forms.DataGridView> `DataGridView1` 。 然后，确保事件处理程序与事件相关联 <xref:System.Windows.Forms.DataGridView.RowErrorTextChanged> 。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#345](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#345)]
 [!code-vb[System.Windows.Forms.EventExamples#345](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#345)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="RowErrorTextNeeded">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewRowErrorTextNeededEventHandler RowErrorTextNeeded;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewRowErrorTextNeededEventHandler RowErrorTextNeeded" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.RowErrorTextNeeded" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event RowErrorTextNeeded As DataGridViewRowErrorTextNeededEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::DataGridViewRowErrorTextNeededEventHandler ^ RowErrorTextNeeded;" />
      <MemberSignature Language="F#" Value="member this.RowErrorTextNeeded : System.Windows.Forms.DataGridViewRowErrorTextNeededEventHandler " Usage="member this.RowErrorTextNeeded : System.Windows.Forms.DataGridViewRowErrorTextNeededEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewRowErrorTextNeededEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在需要某一行的错误文本时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.DataGridView.RowErrorTextNeeded>仅当设置了控件的 <xref:System.Windows.Forms.DataGridView.DataSource%2A> 属性 <xref:System.Windows.Forms.DataGridView> 或其 <xref:System.Windows.Forms.DataGridView.VirtualMode%2A> 属性为时，才会发生此事件 `true` 。 <xref:System.Windows.Forms.DataGridView.RowErrorTextNeeded>如果要根据行的状态和其包含的值确定行的错误，则处理事件会很有用。  
  
 处理 <xref:System.Windows.Forms.DataGridView.RowErrorTextNeeded> 事件并在处理程序中指定错误文本时，除非将属性设置为，否则行标题中将显示错误标志符号 <xref:System.Windows.Forms.DataGridView.ShowRowErrors%2A> `false` 。 当用户将鼠标指针移到错误标志符号上方时，错误文本将显示在工具提示中。  
  
 <xref:System.Windows.Forms.DataGridView.RowErrorTextNeeded>如果检索属性的值，也会发生该事件 <xref:System.Windows.Forms.DataGridViewRow.ErrorText%2A?displayProperty=nameWithType> 。  
  
 您可以使用 <xref:System.Windows.Forms.DataGridViewRowErrorTextNeededEventArgs.RowIndex%2A?displayProperty=nameWithType> 属性来确定行的状态或它包含的值，并使用此信息来更改或修改 <xref:System.Windows.Forms.DataGridViewRowErrorTextNeededEventArgs.ErrorText%2A?displayProperty=nameWithType> 属性。 此属性将用行属性的值进行初始化，该属性的值将 <xref:System.Windows.Forms.DataGridViewRow.ErrorText%2A> 重写。  
  
 处理 <xref:System.Windows.Forms.DataGridView.RowErrorTextNeeded> 大量数据时处理事件，以避免设置多行的行值时的性能损失 <xref:System.Windows.Forms.DataGridViewRow.ErrorText%2A> 。 有关详细信息，请参阅 [缩放 Windows 窗体 DataGridView 控件的最佳做法](/dotnet/framework/winforms/controls/best-practices-for-scaling-the-windows-forms-datagridview-control)。  
  
 有关如何处理事件的详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。

## Examples  
 下面的代码示例演示如何使用此成员。 在此示例中，事件处理程序报告事件的发生 <xref:System.Windows.Forms.DataGridView.RowErrorTextNeeded> 。 此报表可帮助你了解何时发生事件，并可帮助你进行调试。 若要报告多个事件或频繁发生的事件，请考虑 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 将消息替换为多行或将其追加到多行 <xref:System.Windows.Forms.TextBox> 。  
  
 若要运行示例代码，请将其粘贴到包含名为的类型的实例的项目中 <xref:System.Windows.Forms.DataGridView> `DataGridView1` 。 然后，确保事件处理程序与事件相关联 <xref:System.Windows.Forms.DataGridView.RowErrorTextNeeded> 。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#346](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#346)]
 [!code-vb[System.Windows.Forms.EventExamples#346](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#346)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.DataGridView.DataSource" />
        <altmember cref="P:System.Windows.Forms.DataGridView.VirtualMode" />
        <altmember cref="P:System.Windows.Forms.DataGridView.ShowRowErrors" />
        <altmember cref="T:System.Windows.Forms.DataGridViewRowErrorTextNeededEventHandler" />
        <altmember cref="T:System.Windows.Forms.DataGridViewRowErrorTextNeededEventArgs" />
        <altmember cref="P:System.Windows.Forms.DataGridViewRowErrorTextNeededEventArgs.ErrorText" />
        <altmember cref="P:System.Windows.Forms.DataGridViewRow.ErrorText" />
        <altmember cref="M:System.Windows.Forms.DataGridView.OnRowErrorTextNeeded(System.Windows.Forms.DataGridViewRowErrorTextNeededEventArgs)" />
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="RowHeaderCellChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewRowEventHandler RowHeaderCellChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewRowEventHandler RowHeaderCellChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.RowHeaderCellChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event RowHeaderCellChanged As DataGridViewRowEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::DataGridViewRowEventHandler ^ RowHeaderCellChanged;" />
      <MemberSignature Language="F#" Value="member this.RowHeaderCellChanged : System.Windows.Forms.DataGridViewRowEventHandler " Usage="member this.RowHeaderCellChanged : System.Windows.Forms.DataGridViewRowEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewRowEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>用户更改行标题单元格的内容时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关如何处理事件的详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。

## Examples  
 下面的代码示例演示如何使用此成员。 在此示例中，事件处理程序报告事件的发生 <xref:System.Windows.Forms.DataGridView.RowHeaderCellChanged> 。 此报表可帮助你了解何时发生事件，并可帮助你进行调试。 若要报告多个事件或频繁发生的事件，请考虑 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 将消息替换为多行或将其追加到多行 <xref:System.Windows.Forms.TextBox> 。  
  
 若要运行示例代码，请将其粘贴到包含名为的类型的实例的项目中 <xref:System.Windows.Forms.DataGridView> `DataGridView1` 。 然后，确保事件处理程序与事件相关联 <xref:System.Windows.Forms.DataGridView.RowHeaderCellChanged> 。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#349](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#349)]
 [!code-vb[System.Windows.Forms.EventExamples#349](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#349)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="RowHeaderMouseClick">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewCellMouseEventHandler RowHeaderMouseClick;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewCellMouseEventHandler RowHeaderMouseClick" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.RowHeaderMouseClick" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event RowHeaderMouseClick As DataGridViewCellMouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::DataGridViewCellMouseEventHandler ^ RowHeaderMouseClick;" />
      <MemberSignature Language="F#" Value="member this.RowHeaderMouseClick : System.Windows.Forms.DataGridViewCellMouseEventHandler " Usage="member this.RowHeaderMouseClick : System.Windows.Forms.DataGridViewCellMouseEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewCellMouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>用户在行标题边界内部单击时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关如何处理事件的详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。

## Examples  
 下面的代码示例演示如何使用此事件。  
  
 [!code-csharp[System.Windows.Forms.DataGridViewSelectedCollections#05](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewSelectedCollections/CS/DataGridViewSelectedCollections.cs#05)]
 [!code-vb[System.Windows.Forms.DataGridViewSelectedCollections#05](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewSelectedCollections/VB/DataGridViewSelectedCollections.vb#05)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="RowHeaderMouseDoubleClick">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewCellMouseEventHandler RowHeaderMouseDoubleClick;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewCellMouseEventHandler RowHeaderMouseDoubleClick" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.RowHeaderMouseDoubleClick" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event RowHeaderMouseDoubleClick As DataGridViewCellMouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::DataGridViewCellMouseEventHandler ^ RowHeaderMouseDoubleClick;" />
      <MemberSignature Language="F#" Value="member this.RowHeaderMouseDoubleClick : System.Windows.Forms.DataGridViewCellMouseEventHandler " Usage="member this.RowHeaderMouseDoubleClick : System.Windows.Forms.DataGridViewCellMouseEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewCellMouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>双击行标题时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关如何处理事件的详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。

## Examples  
 下面的代码示例演示如何使用此成员。 在此示例中，事件处理程序报告事件的发生 <xref:System.Windows.Forms.DataGridView.RowHeaderMouseDoubleClick> 。 此报表可帮助你了解何时发生事件，并可帮助你进行调试。 若要报告多个事件或频繁发生的事件，请考虑 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 将消息替换为多行或将其追加到多行 <xref:System.Windows.Forms.TextBox> 。  
  
 若要运行示例代码，请将其粘贴到包含名为的类型的实例的项目中 <xref:System.Windows.Forms.DataGridView> `DataGridView1` 。 然后，确保事件处理程序与事件相关联 <xref:System.Windows.Forms.DataGridView.RowHeaderMouseDoubleClick> 。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#348](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#348)]
 [!code-vb[System.Windows.Forms.EventExamples#348](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#348)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="RowHeadersBorderStyle">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataGridViewHeaderBorderStyle RowHeadersBorderStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.DataGridViewHeaderBorderStyle RowHeadersBorderStyle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.RowHeadersBorderStyle" />
      <MemberSignature Language="VB.NET" Value="Public Property RowHeadersBorderStyle As DataGridViewHeaderBorderStyle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::DataGridViewHeaderBorderStyle RowHeadersBorderStyle { System::Windows::Forms::DataGridViewHeaderBorderStyle get(); void set(System::Windows::Forms::DataGridViewHeaderBorderStyle value); };" />
      <MemberSignature Language="F#" Value="member this.RowHeadersBorderStyle : System.Windows.Forms.DataGridViewHeaderBorderStyle with get, set" Usage="System.Windows.Forms.DataGridView.RowHeadersBorderStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Browsable(true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(true)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewHeaderBorderStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置行标题单元格的边框样式。</summary>
        <value><see cref="T:System.Windows.Forms.DataGridViewHeaderBorderStyle" /> 值之一。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果 <xref:System.Windows.Forms.DataGridView.RowHeadersBorderStyle%2A> 将属性设置为以外的任何内容 <xref:System.Windows.Forms.DataGridViewHeaderBorderStyle.Single> ，则 <xref:System.Windows.Forms.DataGridView.GridColor%2A> 属性必须是系统颜色。  
  
 不能将此属性设置为 <xref:System.Windows.Forms.DataGridViewHeaderBorderStyle.Custom> 值，这是一个只读值，指示边框样式已通过使用属性进行自定义 <xref:System.Windows.Forms.DataGridView.AdvancedRowHeadersBorderStyle%2A> 。  
  
> [!NOTE]
> 如果通过方法为应用程序启用了视觉样式 <xref:System.Windows.Forms.Application.EnableVisualStyles%2A?displayProperty=nameWithType> <xref:System.Windows.Forms.DataGridView.EnableHeadersVisualStyles%2A> ，并且属性为 `true` ，则使用当前主题绘制行标题。 在这种情况下， <xref:System.Windows.Forms.DataGridView.RowHeadersBorderStyle%2A> 对于不应用主题的所有行标题，将忽略属性的值 <xref:System.Windows.Forms.DataGridView.TopLeftHeaderCell%2A> 。

## Examples  
 下面的代码示例演示如何使用此属性。  
  
 [!code-csharp[System.Windows.Forms.DataGridViewMisc#030](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewMisc/CS/datagridviewmisc.cs#030)]
 [!code-vb[System.Windows.Forms.DataGridViewMisc#030](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewMisc/VB/datagridviewmisc.vb#030)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">当设置此属性时，指定的值不是有效的 <see cref="T:System.Windows.Forms.DataGridViewHeaderBorderStyle" /> 值。</exception>
        <exception cref="T:System.ArgumentException">当设置此属性时，指定的值为 <see cref="F:System.Windows.Forms.DataGridViewHeaderBorderStyle.Custom" />。</exception>
        <altmember cref="T:System.Windows.Forms.DataGridViewHeaderBorderStyle" />
        <altmember cref="P:System.Windows.Forms.DataGridView.ColumnHeadersBorderStyle" />
        <altmember cref="M:System.Windows.Forms.Application.EnableVisualStyles" />
        <altmember cref="P:System.Windows.Forms.DataGridView.EnableHeadersVisualStyles" />
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="RowHeadersBorderStyleChanged">
      <MemberSignature Language="C#" Value="public event EventHandler RowHeadersBorderStyleChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler RowHeadersBorderStyleChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.RowHeadersBorderStyleChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event RowHeadersBorderStyleChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ RowHeadersBorderStyleChanged;" />
      <MemberSignature Language="F#" Value="member this.RowHeadersBorderStyleChanged : EventHandler " Usage="member this.RowHeadersBorderStyleChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当 <see cref="P:System.Windows.Forms.DataGridView.RowHeadersBorderStyle" /> 属性更改时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关如何处理事件的详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。

## Examples  
 下面的代码示例演示如何使用此成员。 在此示例中，事件处理程序报告事件的发生 <xref:System.Windows.Forms.DataGridView.RowHeadersBorderStyleChanged> 。 此报表可帮助你了解何时发生事件，并可帮助你进行调试。 若要报告多个事件或频繁发生的事件，请考虑 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 将消息替换为多行或将其追加到多行 <xref:System.Windows.Forms.TextBox> 。  
  
 若要运行示例代码，请将其粘贴到包含名为的类型的实例的项目中 <xref:System.Windows.Forms.DataGridView> `DataGridView1` 。 然后，确保事件处理程序与事件相关联 <xref:System.Windows.Forms.DataGridView.RowHeadersBorderStyleChanged> 。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#275](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#275)]
 [!code-vb[System.Windows.Forms.EventExamples#275](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#275)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="RowHeadersDefaultCellStyle">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataGridViewCellStyle RowHeadersDefaultCellStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.DataGridViewCellStyle RowHeadersDefaultCellStyle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.RowHeadersDefaultCellStyle" />
      <MemberSignature Language="VB.NET" Value="Public Property RowHeadersDefaultCellStyle As DataGridViewCellStyle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::DataGridViewCellStyle ^ RowHeadersDefaultCellStyle { System::Windows::Forms::DataGridViewCellStyle ^ get(); void set(System::Windows::Forms::DataGridViewCellStyle ^ value); };" />
      <MemberSignature Language="F#" Value="member this.RowHeadersDefaultCellStyle : System.Windows.Forms.DataGridViewCellStyle with get, set" Usage="System.Windows.Forms.DataGridView.RowHeadersDefaultCellStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.AmbientValue(null)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.AmbientValue(null)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewCellStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置应用于行标题单元格的默认样式。</summary>
        <value><see cref="T:System.Windows.Forms.DataGridViewCellStyle" />，表示应用于行标题单元格的默认样式。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.DataGridViewCellStyle>此属性返回的默认值具有以下初始属性值。  
  
|DataGridViewCellStyle 属性|默认值|  
|------------------------------------|-------------------|  
|<xref:System.Windows.Forms.DataGridViewCellStyle.BackColor%2A>|<xref:System.Drawing.SystemBrushes.Control%2A?displayProperty=nameWithType> 属性的值。|  
|<xref:System.Windows.Forms.DataGridViewCellStyle.ForeColor%2A>|<xref:System.Drawing.SystemBrushes.WindowText%2A?displayProperty=nameWithType> 属性的值。|  
|<xref:System.Windows.Forms.DataGridViewCellStyle.SelectionBackColor%2A>|<xref:System.Drawing.SystemBrushes.Highlight%2A?displayProperty=nameWithType> 属性的值。|  
|<xref:System.Windows.Forms.DataGridViewCellStyle.SelectionForeColor%2A>|<xref:System.Drawing.SystemBrushes.HighlightText%2A?displayProperty=nameWithType> 属性的值。|  
|<xref:System.Windows.Forms.DataGridViewCellStyle.Font%2A>|<xref:System.Windows.Forms.DataGridView.Font%2A> 属性的值。|  
|<xref:System.Windows.Forms.DataGridViewCellStyle.Alignment%2A>|<xref:System.Windows.Forms.DataGridViewContentAlignment.MiddleLeft?displayProperty=nameWithType>|  
|<xref:System.Windows.Forms.DataGridViewCellStyle.WrapMode%2A>|<xref:System.Windows.Forms.DataGridViewTriState.True?displayProperty=nameWithType>|  
  
 这些值自动覆盖通过属性设置的值 <xref:System.Windows.Forms.DataGridView.DefaultCellStyle%2A> 。 若要强制行标题继承这些 <xref:System.Windows.Forms.DataGridView.DefaultCellStyle%2A> 值，则必须将对象中的值设置 <xref:System.Windows.Forms.DataGridView.RowHeadersDefaultCellStyle%2A> 为为类指定的默认值 <xref:System.Windows.Forms.DataGridViewCellStyle> 。  
  
 有关单元样式继承的详细信息，请参阅 [Windows 窗体 DataGridView 控件中的单元格样式](/dotnet/framework/winforms/controls/cell-styles-in-the-windows-forms-datagridview-control)。

## Examples  
 下面的代码示例演示如何在 <xref:System.Windows.Forms.DataGridView> 具有自定义颜色的中使用此属性。 请注意 <xref:System.Windows.Forms.DataGridViewCellStyle.SelectionBackColor%2A?displayProperty=nameWithType> 属性如何设置为， <xref:System.Drawing.Color.Empty?displayProperty=nameWithType> 以使值从 <xref:System.Windows.Forms.DataGridView.DefaultCellStyle%2A> 对象继承。  
  
 此示例是类概述中提供的一个更大示例的一部分 <xref:System.Windows.Forms.DataGridViewCellStyle> 。  
  
 [!code-csharp[System.Windows.Forms.DataGridViewStyleDemo#20](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewStyleDemo/CS/form1.cs#20)]
 [!code-vb[System.Windows.Forms.DataGridViewStyleDemo#20](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewStyleDemo/VB/form1.vb#20)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DataGridViewCellStyle" />
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
        <related type="Article" href="/dotnet/framework/winforms/controls/cell-styles-in-the-windows-forms-datagridview-control">Windows 窗体 DataGridView 控件中的单元格样式</related>
      </Docs>
    </Member>
    <Member MemberName="RowHeadersDefaultCellStyleChanged">
      <MemberSignature Language="C#" Value="public event EventHandler RowHeadersDefaultCellStyleChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler RowHeadersDefaultCellStyleChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.RowHeadersDefaultCellStyleChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event RowHeadersDefaultCellStyleChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ RowHeadersDefaultCellStyleChanged;" />
      <MemberSignature Language="F#" Value="member this.RowHeadersDefaultCellStyleChanged : EventHandler " Usage="member this.RowHeadersDefaultCellStyleChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当 <see cref="P:System.Windows.Forms.DataGridView.RowHeadersDefaultCellStyle" /> 属性的值更改时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当属性返回的的属性 <xref:System.Windows.Forms.DataGridViewCellStyle> <xref:System.Windows.Forms.DataGridView.RowHeadersDefaultCellStyle%2A> 设置为新值时，或者当 <xref:System.Windows.Forms.DataGridView.RowHeadersDefaultCellStyle%2A> 属性设置为新 <xref:System.Windows.Forms.DataGridViewCellStyle> 的，且至少有一个属性值与上一个单元格样式对象不同时，将发生此事件。  
  
 有关处理事件的详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。

## Examples  
 下面的代码示例演示如何使用此成员。 在此示例中，事件处理程序报告事件的发生 <xref:System.Windows.Forms.DataGridView.RowHeadersDefaultCellStyleChanged> 。 此报表可帮助你了解何时发生事件，并可帮助你进行调试。 若要报告多个事件或频繁发生的事件，请考虑 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 将消息替换为多行或将其追加到多行 <xref:System.Windows.Forms.TextBox> 。  
  
 若要运行示例代码，请将其粘贴到包含名为的类型的实例的项目中 <xref:System.Windows.Forms.DataGridView> `DataGridView1` 。 然后，确保事件处理程序与事件相关联 <xref:System.Windows.Forms.DataGridView.RowHeadersDefaultCellStyleChanged> 。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#276](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#276)]
 [!code-vb[System.Windows.Forms.EventExamples#276](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#276)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DataGridViewCellStyle" />
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
        <related type="Article" href="/dotnet/framework/winforms/controls/cell-styles-in-the-windows-forms-datagridview-control">Windows 窗体 DataGridView 控件中的单元格样式</related>
      </Docs>
    </Member>
    <Member MemberName="RowHeadersVisible">
      <MemberSignature Language="C#" Value="public bool RowHeadersVisible { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool RowHeadersVisible" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.RowHeadersVisible" />
      <MemberSignature Language="VB.NET" Value="Public Property RowHeadersVisible As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool RowHeadersVisible { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.RowHeadersVisible : bool with get, set" Usage="System.Windows.Forms.DataGridView.RowHeadersVisible" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(true)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示是否显示包含行标题的列。</summary>
        <value>如果显示包含行标题的列，为<see langword="true" /> ；否则为 <see langword="false" />。 默认值为 <see langword="true" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果 <xref:System.Windows.Forms.DataGridView.RowHeadersVisible%2A> 属性为，则在 `false` <xref:System.Windows.Forms.DataGridViewBand.Resizable%2A> 用户界面中，将其属性设置为的行 `true` 仍可以在用户界面中调整大小 (UI) 单击要调整大小的行下边框的任意位置。

## Examples  
 下面的代码示例演示如何设置、、、、、、、、 <xref:System.Windows.Forms.DataGridView.ColumnHeadersDefaultCellStyle%2A> <xref:System.Windows.Forms.DataGridView.AutoSizeRowsMode%2A> <xref:System.Windows.Forms.DataGridView.ColumnHeadersBorderStyle%2A> <xref:System.Windows.Forms.DataGridView.CellBorderStyle%2A> <xref:System.Windows.Forms.DataGridView.GridColor%2A> <xref:System.Windows.Forms.DataGridView.BackgroundColor%2A> <xref:System.Windows.Forms.DataGridView.RowHeadersVisible%2A> <xref:System.Windows.Forms.DataGridView.SelectionMode%2A> <xref:System.Windows.Forms.DataGridView.ColumnCount%2A> 和 <xref:System.Windows.Forms.DataGridView.MultiSelect%2A> 属性。 此外，该代码示例还演示如何设置 <xref:System.Windows.Forms.DataGridViewColumn.Name%2A?displayProperty=nameWithType> 和 <xref:System.Windows.Forms.DataGridViewColumn.DefaultCellStyle%2A?displayProperty=nameWithType> 属性。 若要运行此示例，请将代码粘贴到包含名为的的窗体中 <xref:System.Windows.Forms.DataGridView> `dataGridView1` ，然后 `SetUpDataGridView` 从窗体的构造函数或 <xref:System.Windows.Forms.Form.Load> 事件处理程序调用方法。 确保所有事件都与事件处理程序相关联。  
  
 [!code-cpp[System.Windows.Forms.GridViewUnbound#5](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.GridViewUnbound/CPP/form1.cpp#5)]
 [!code-csharp[System.Windows.Forms.GridViewUnbound#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.GridViewUnbound/CS/form1.cs#5)]
 [!code-vb[System.Windows.Forms.GridViewUnbound#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.GridViewUnbound/VB/form1.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">当设置此属性时，指定的值为 <see langword="false" />，并且 <see cref="P:System.Windows.Forms.DataGridView.AutoSizeRowsMode" /> 属性设置为 <see cref="F:System.Windows.Forms.DataGridViewAutoSizeRowsMode.AllHeaders" /> 或 <see cref="F:System.Windows.Forms.DataGridViewAutoSizeRowsMode.DisplayedHeaders" />。</exception>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="RowHeadersWidth">
      <MemberSignature Language="C#" Value="public int RowHeadersWidth { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 RowHeadersWidth" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.RowHeadersWidth" />
      <MemberSignature Language="VB.NET" Value="Public Property RowHeadersWidth As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int RowHeadersWidth { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.RowHeadersWidth : int with get, set" Usage="System.Windows.Forms.DataGridView.RowHeadersWidth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Localizable(true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Localizable(true)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置包含行标题的列的宽度（以像素为单位）。</summary>
        <value>包含行标题的列的宽度（以像素为单位）。 默认值为 43。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.DataGridView.RowHeadersWidth%2A>属性可用于将行标题列的大小调整为指定宽度。 若要调整此列的宽度以适应行标题单元格的内容，请使用 <xref:System.Windows.Forms.DataGridView.AutoResizeRowHeadersWidth%2A> 方法。

## Examples  
 下面的代码示例演示如何 <xref:System.Windows.Forms.DataGridView.RowHeadersWidth%2A> 在行绘制方案中使用属性。 在此示例中，此属性的值用于计算在其中绘制自定义背景的边界。  
  
 此代码是[如何：自定义 Windows 窗体 DataGridView 控件中的行的外观](/dotnet/framework/winforms/controls/customize-the-appearance-of-rows-in-the-datagrid)的更大示例的一部分。  
  
 [!code-csharp[System.Windows.Forms.DataGridViewRowPainting#20](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewRowPainting/CS/datagridviewrowpainting.cs#20)]
 [!code-vb[System.Windows.Forms.DataGridViewRowPainting#20](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewRowPainting/VB/datagridviewrowpainting.vb#20)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">设置此属性时，指定的值小于 4 像素的最小宽度或大于 32768 像素的最大宽度。</exception>
        <altmember cref="Overload:System.Windows.Forms.DataGridView.AutoResizeRowHeadersWidth" />
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="RowHeadersWidthChanged">
      <MemberSignature Language="C#" Value="public event EventHandler RowHeadersWidthChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler RowHeadersWidthChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.RowHeadersWidthChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event RowHeadersWidthChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ RowHeadersWidthChanged;" />
      <MemberSignature Language="F#" Value="member this.RowHeadersWidthChanged : EventHandler " Usage="member this.RowHeadersWidthChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当 <see cref="P:System.Windows.Forms.DataGridView.RowHeadersWidth" /> 属性的值更改时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关如何处理事件的详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。

## Examples  
 下面的代码示例演示如何使用此成员。 在此示例中，事件处理程序报告事件的发生 <xref:System.Windows.Forms.DataGridView.RowHeadersWidthChanged> 。 此报表可帮助你了解何时发生事件，并可帮助你进行调试。 若要报告多个事件或频繁发生的事件，请考虑 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 将消息替换为多行或将其追加到多行 <xref:System.Windows.Forms.TextBox> 。  
  
 若要运行示例代码，请将其粘贴到包含名为的类型的实例的项目中 <xref:System.Windows.Forms.DataGridView> `DataGridView1` 。 然后，确保事件处理程序与事件相关联 <xref:System.Windows.Forms.DataGridView.RowHeadersWidthChanged> 。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#277](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#277)]
 [!code-vb[System.Windows.Forms.EventExamples#277](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#277)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="RowHeadersWidthSizeMode">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode RowHeadersWidthSizeMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode RowHeadersWidthSizeMode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.RowHeadersWidthSizeMode" />
      <MemberSignature Language="VB.NET" Value="Public Property RowHeadersWidthSizeMode As DataGridViewRowHeadersWidthSizeMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::DataGridViewRowHeadersWidthSizeMode RowHeadersWidthSizeMode { System::Windows::Forms::DataGridViewRowHeadersWidthSizeMode get(); void set(System::Windows::Forms::DataGridViewRowHeadersWidthSizeMode value); };" />
      <MemberSignature Language="F#" Value="member this.RowHeadersWidthSizeMode : System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode with get, set" Usage="System.Windows.Forms.DataGridView.RowHeadersWidthSizeMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.RefreshProperties(System.ComponentModel.RefreshProperties.All)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.RefreshProperties(System.ComponentModel.RefreshProperties.All)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示是否可以调整行标题的宽度，以及它是由用户调整还是根据标题的内容自动调整。</summary>
        <value>一个 <see cref="T:System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode" /> 值，指示可以在什么模式下调整行标题的宽度。 默认值为 <see cref="F:System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode.EnableResizing" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果将此属性设置为自动调整大小模式，则用户无法调整行标题的宽度。  
  
 若要以编程方式调整行标题的高度，请使用 <xref:System.Windows.Forms.DataGridView.AutoResizeRowHeadersWidth%2A> 方法或设置 <xref:System.Windows.Forms.DataGridView.RowHeadersWidth%2A> 属性。  
  
 若要设置列标题的大小调整模式，请使用 <xref:System.Windows.Forms.DataGridView.ColumnHeadersHeightSizeMode%2A> 属性。  
  
 有关标头大小的详细信息，请参阅 [Windows 窗体 DataGridView 控件中的调整大小选项](/dotnet/framework/winforms/controls/sizing-options-in-the-windows-forms-datagridview-control)。  
  
> [!NOTE]
> <xref:System.Windows.Forms.DataGridView>控件不支持双缓冲。 如果 <xref:System.Windows.Forms.Control.DoubleBuffered%2A> `true` 在派生控件中将设置为，则在对 <xref:System.Windows.Forms.DataGridView> 行、列或标题进行调整或对列重新排序时，用户不会收到视觉反馈。

## Examples  
 下面的代码示例演示如何在 <xref:System.Windows.Forms.DataGridView> 主要用于显示的控件中使用此属性。 在此示例中，控件的可视外观是通过多种方式自定义的，并且控件配置为具有有限的交互功能。 此示例是类概述中提供的一个更大示例的一部分 <xref:System.Windows.Forms.DataGridViewCellStyle> 。  
  
 [!code-csharp[System.Windows.Forms.DataGridViewStyleDemo#20](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewStyleDemo/CS/form1.cs#20)]
 [!code-vb[System.Windows.Forms.DataGridViewStyleDemo#20](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewStyleDemo/VB/form1.vb#20)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">当设置此属性时，指定的值不是有效的 <see cref="T:System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode" /> 值。</exception>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="RowHeadersWidthSizeModeChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewAutoSizeModeEventHandler RowHeadersWidthSizeModeChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewAutoSizeModeEventHandler RowHeadersWidthSizeModeChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.RowHeadersWidthSizeModeChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event RowHeadersWidthSizeModeChanged As DataGridViewAutoSizeModeEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::DataGridViewAutoSizeModeEventHandler ^ RowHeadersWidthSizeModeChanged;" />
      <MemberSignature Language="F#" Value="member this.RowHeadersWidthSizeModeChanged : System.Windows.Forms.DataGridViewAutoSizeModeEventHandler " Usage="member this.RowHeadersWidthSizeModeChanged : System.Windows.Forms.DataGridViewAutoSizeModeEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewAutoSizeModeEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当 <see cref="P:System.Windows.Forms.DataGridView.RowHeadersWidthSizeMode" /> 属性的值更改时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关如何处理事件的详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。

## Examples  
 下面的代码示例演示如何使用此成员。 在此示例中，事件处理程序报告事件的发生 <xref:System.Windows.Forms.DataGridView.RowHeadersWidthSizeModeChanged> 。 此报表可帮助你了解何时发生事件，并可帮助你进行调试。 若要报告多个事件或频繁发生的事件，请考虑 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 将消息替换为多行或将其追加到多行 <xref:System.Windows.Forms.TextBox> 。  
  
 若要运行示例代码，请将其粘贴到包含名为的类型的实例的项目中 <xref:System.Windows.Forms.DataGridView> `DataGridView1` 。 然后，确保事件处理程序与事件相关联 <xref:System.Windows.Forms.DataGridView.RowHeadersWidthSizeModeChanged> 。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#278](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#278)]
 [!code-vb[System.Windows.Forms.EventExamples#278](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#278)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="RowHeightChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewRowEventHandler RowHeightChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewRowEventHandler RowHeightChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.RowHeightChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event RowHeightChanged As DataGridViewRowEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::DataGridViewRowEventHandler ^ RowHeightChanged;" />
      <MemberSignature Language="F#" Value="member this.RowHeightChanged : System.Windows.Forms.DataGridViewRowEventHandler " Usage="member this.RowHeightChanged : System.Windows.Forms.DataGridViewRowEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewRowEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当行的 <see cref="P:System.Windows.Forms.DataGridViewRow.Height" /> 属性值更改时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关如何处理事件的详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。

## Examples  
 下面的代码示例演示如何使用此事件。 此示例摘自 [如何：自定义 Windows 窗体 DataGridView 控件中行的外观](/dotnet/framework/winforms/controls/customize-the-appearance-of-rows-in-the-datagrid)的更大示例的一部分。  
  
 [!code-csharp[System.Windows.Forms.DataGridViewRowPainting#40](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewRowPainting/CS/datagridviewrowpainting.cs#40)]
 [!code-vb[System.Windows.Forms.DataGridViewRowPainting#40](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewRowPainting/VB/datagridviewrowpainting.vb#40)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="RowHeightInfoNeeded">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewRowHeightInfoNeededEventHandler RowHeightInfoNeeded;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewRowHeightInfoNeededEventHandler RowHeightInfoNeeded" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.RowHeightInfoNeeded" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event RowHeightInfoNeeded As DataGridViewRowHeightInfoNeededEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::DataGridViewRowHeightInfoNeededEventHandler ^ RowHeightInfoNeeded;" />
      <MemberSignature Language="F#" Value="member this.RowHeightInfoNeeded : System.Windows.Forms.DataGridViewRowHeightInfoNeededEventHandler " Usage="member this.RowHeightInfoNeeded : System.Windows.Forms.DataGridViewRowHeightInfoNeededEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewRowHeightInfoNeededEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>请求有关行高度的信息时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此事件可用于在执行排序操作后保留自定义行高度。 这是必需的，因为排序操作通常由数据源进行处理，而数据源并不跟踪数据行和控件中各行之间的对应关系。 仅当 <xref:System.Windows.Forms.DataGridView.DataSource%2A> 设置了属性或属性为时，才会发生此事件 <xref:System.Windows.Forms.DataGridView.VirtualMode%2A> `true` 。 在后一种情况下，你将提供自己的数据存储和排序操作。 处理 <xref:System.Windows.Forms.DataGridView.RowHeightInfoPushed> 事件，以便在用户更改行高时存储更新的高度信息。 <xref:System.Windows.Forms.DataGridView.RowHeightInfoNeeded>当控件需要时，使用检索存储的高度信息。  
  
 有关如何处理事件的详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。

## Examples  
 下面的代码示例演示如何使用此成员。 在此示例中，事件处理程序报告事件的发生 <xref:System.Windows.Forms.DataGridView.RowHeightInfoNeeded> 。 此报表可帮助你了解何时发生事件，并可帮助你进行调试。 若要报告多个事件或频繁发生的事件，请考虑 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 将消息替换为多行或将其追加到多行 <xref:System.Windows.Forms.TextBox> 。  
  
 若要运行示例代码，请将其粘贴到包含名为的类型的实例的项目中 <xref:System.Windows.Forms.DataGridView> `DataGridView1` 。 然后，确保事件处理程序与事件相关联 <xref:System.Windows.Forms.DataGridView.RowHeightInfoNeeded> 。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#351](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#351)]
 [!code-vb[System.Windows.Forms.EventExamples#351](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#351)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.DataGridView.RowHeightInfoPushed" />
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="RowHeightInfoPushed">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewRowHeightInfoPushedEventHandler RowHeightInfoPushed;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewRowHeightInfoPushedEventHandler RowHeightInfoPushed" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.RowHeightInfoPushed" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event RowHeightInfoPushed As DataGridViewRowHeightInfoPushedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::DataGridViewRowHeightInfoPushedEventHandler ^ RowHeightInfoPushed;" />
      <MemberSignature Language="F#" Value="member this.RowHeightInfoPushed : System.Windows.Forms.DataGridViewRowHeightInfoPushedEventHandler " Usage="member this.RowHeightInfoPushed : System.Windows.Forms.DataGridViewRowHeightInfoPushedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewRowHeightInfoPushedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>用户更改行高度时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当 <xref:System.Windows.Forms.DataGridView.VirtualMode%2A> 属性设置为 `true` 或 <xref:System.Windows.Forms.DataGridView.DataSource%2A> 将属性设置为以外的值时，将引发此事件 `null` 。 此事件用于跟踪和存储行高度信息，以便可以在进行排序操作后还原。 若要还原高度信息，请处理 <xref:System.Windows.Forms.DataGridView.RowHeightInfoNeeded> 事件。 请注意，仅当用户更改行的高度时，才发生此事件。 如果以编程方式更改行的高度，则必须同时存储新的高度信息。  
  
 有关如何处理事件的详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。

## Examples  
 下面的代码示例演示如何使用此成员。 在此示例中，事件处理程序报告事件的发生 <xref:System.Windows.Forms.DataGridView.RowHeightInfoPushed> 。 此报表可帮助你了解何时发生事件，并可帮助你进行调试。 若要报告多个事件或频繁发生的事件，请考虑 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 将消息替换为多行或将其追加到多行 <xref:System.Windows.Forms.TextBox> 。  
  
 若要运行示例代码，请将其粘贴到包含名为的类型的实例的项目中 <xref:System.Windows.Forms.DataGridView> `DataGridView1` 。 然后，确保事件处理程序与事件相关联 <xref:System.Windows.Forms.DataGridView.RowHeightInfoPushed> 。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#352](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#352)]
 [!code-vb[System.Windows.Forms.EventExamples#352](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#352)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.DataGridView.RowHeightInfoNeeded" />
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="RowLeave">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewCellEventHandler RowLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewCellEventHandler RowLeave" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.RowLeave" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event RowLeave As DataGridViewCellEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::DataGridViewCellEventHandler ^ RowLeave;" />
      <MemberSignature Language="F#" Value="member this.RowLeave : System.Windows.Forms.DataGridViewCellEventHandler " Usage="member this.RowLeave : System.Windows.Forms.DataGridViewCellEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewCellEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>行失去输入焦点因而不再是当前行时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关如何处理事件的详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。

## Examples  
 下面的代码示例演示如何处理此事件以更改 <xref:System.Windows.Forms.DataGridViewCellStyle.BackColor%2A> 当前行中单元格的属性。 在此示例中，背景色在事件中设置 <xref:System.Windows.Forms.DataGridView.RowEnter> ，然后 <xref:System.Drawing.Color.Empty> 在事件上重置为 <xref:System.Windows.Forms.DataGridView.RowLeave> 。 若要运行此示例，请将代码粘贴到包含命名的的窗体中， <xref:System.Windows.Forms.DataGridView> `dataGridView1` 并确保所有事件都与事件处理程序相关联。  
  
 [!code-csharp[System.Windows.Forms.DataGridViewMisc#200](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewMisc/CS/datagridviewmisc.cs#200)]
 [!code-vb[System.Windows.Forms.DataGridViewMisc#200](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewMisc/VB/datagridviewmisc.vb#200)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="RowMinimumHeightChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewRowEventHandler RowMinimumHeightChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewRowEventHandler RowMinimumHeightChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.RowMinimumHeightChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event RowMinimumHeightChanged As DataGridViewRowEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::DataGridViewRowEventHandler ^ RowMinimumHeightChanged;" />
      <MemberSignature Language="F#" Value="member this.RowMinimumHeightChanged : System.Windows.Forms.DataGridViewRowEventHandler " Usage="member this.RowMinimumHeightChanged : System.Windows.Forms.DataGridViewRowEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewRowEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当行的 <see cref="P:System.Windows.Forms.DataGridViewRow.MinimumHeight" /> 属性值更改时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关如何处理事件的详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。

## Examples  
 下面的代码示例演示如何使用此成员。 在此示例中，事件处理程序报告事件的发生 <xref:System.Windows.Forms.DataGridView.RowMinimumHeightChanged> 。 此报表可帮助你了解何时发生事件，并可帮助你进行调试。 若要报告多个事件或频繁发生的事件，请考虑 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 将消息替换为多行或将其追加到多行 <xref:System.Windows.Forms.TextBox> 。  
  
 若要运行示例代码，请将其粘贴到包含名为的类型的实例的项目中 <xref:System.Windows.Forms.DataGridView> `DataGridView1` 。 然后，确保事件处理程序与事件相关联 <xref:System.Windows.Forms.DataGridView.RowMinimumHeightChanged> 。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#354](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#354)]
 [!code-vb[System.Windows.Forms.EventExamples#354](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#354)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="RowPostPaint">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewRowPostPaintEventHandler RowPostPaint;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewRowPostPaintEventHandler RowPostPaint" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.RowPostPaint" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event RowPostPaint As DataGridViewRowPostPaintEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::DataGridViewRowPostPaintEventHandler ^ RowPostPaint;" />
      <MemberSignature Language="F#" Value="member this.RowPostPaint : System.Windows.Forms.DataGridViewRowPostPaintEventHandler " Usage="member this.RowPostPaint : System.Windows.Forms.DataGridViewRowPostPaintEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewRowPostPaintEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在绘制 <see cref="T:System.Windows.Forms.DataGridViewRow" /> 后发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以单独处理此事件，也可以结合事件处理此事件 <xref:System.Windows.Forms.DataGridView.RowPrePaint> ，以自定义控件中行的外观。 您可以自行绘制整行，或绘制行的特定部分，并使用类的以下方法 <xref:System.Windows.Forms.DataGridViewRowPostPaintEventArgs> 来绘制其他部分：  
  
-   <xref:System.Windows.Forms.DataGridViewRowPostPaintEventArgs.DrawFocus%2A> 
  
-   <xref:System.Windows.Forms.DataGridViewRowPostPaintEventArgs.PaintCells%2A> 
  
-   <xref:System.Windows.Forms.DataGridViewRowPostPaintEventArgs.PaintCellsBackground%2A> 
  
-   <xref:System.Windows.Forms.DataGridViewRowPostPaintEventArgs.PaintCellsContent%2A> 
  
-   <xref:System.Windows.Forms.DataGridViewRowPostPaintEventArgs.PaintHeader%2A> 
  
 你还可以使用 <xref:System.Windows.Forms.VisualStyles.VisualStyleRenderer> 类来绘制使用当前主题的标准控件。 有关详细信息，请参阅[使用视觉样式呈现控件](/dotnet/framework/winforms/controls/rendering-controls-with-visual-styles)。 如果使用的是 [!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)] ，则还可以访问可用于控件的大型标准图像库 <xref:System.Windows.Forms.DataGridView> 。  
  
 有关如何处理事件的详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。

## Examples  
 下面的代码示例演示如何使用事件的处理程序 <xref:System.Windows.Forms.DataGridView.RowPostPaint> 绘制跨普通单元值下方整行的文本内容。 此示例摘自 [如何：自定义 Windows 窗体 DataGridView 控件中行的外观](/dotnet/framework/winforms/controls/customize-the-appearance-of-rows-in-the-datagrid)的更大示例的一部分。  
  
 [!code-csharp[System.Windows.Forms.DataGridViewRowPainting#30](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewRowPainting/CS/datagridviewrowpainting.cs#30)]
 [!code-vb[System.Windows.Forms.DataGridViewRowPainting#30](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewRowPainting/VB/datagridviewrowpainting.vb#30)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="RowPrePaint">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewRowPrePaintEventHandler RowPrePaint;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewRowPrePaintEventHandler RowPrePaint" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.RowPrePaint" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event RowPrePaint As DataGridViewRowPrePaintEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::DataGridViewRowPrePaintEventHandler ^ RowPrePaint;" />
      <MemberSignature Language="F#" Value="member this.RowPrePaint : System.Windows.Forms.DataGridViewRowPrePaintEventHandler " Usage="member this.RowPrePaint : System.Windows.Forms.DataGridViewRowPrePaintEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewRowPrePaintEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在绘制 <see cref="T:System.Windows.Forms.DataGridViewRow" /> 前发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以单独处理此事件，也可以结合事件处理此事件 <xref:System.Windows.Forms.DataGridView.RowPostPaint> ，以自定义控件中行的外观。 您可以自行绘制整行，或绘制行的特定部分，并使用类的以下方法 <xref:System.Windows.Forms.DataGridViewRowPrePaintEventArgs> 来绘制其他部分：  
  
-   <xref:System.Windows.Forms.DataGridViewRowPrePaintEventArgs.DrawFocus%2A> 
  
-   <xref:System.Windows.Forms.DataGridViewRowPrePaintEventArgs.PaintCells%2A> 
  
-   <xref:System.Windows.Forms.DataGridViewRowPrePaintEventArgs.PaintCellsBackground%2A> 
  
-   <xref:System.Windows.Forms.DataGridViewRowPrePaintEventArgs.PaintCellsContent%2A> 
  
-   <xref:System.Windows.Forms.DataGridViewRowPrePaintEventArgs.PaintHeader%2A> 
  
 你还可以使用 <xref:System.Windows.Forms.VisualStyles.VisualStyleRenderer> 类来绘制使用当前主题的标准控件。 有关详细信息，请参阅[使用视觉样式呈现控件](/dotnet/framework/winforms/controls/rendering-controls-with-visual-styles)。 如果使用的是 [!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)] ，则还可以访问可用于控件的大型标准图像库 <xref:System.Windows.Forms.DataGridView> 。  
  
 有关如何处理事件的详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。

## Examples  
 下面的代码示例演示如何使用事件的处理程序 <xref:System.Windows.Forms.DataGridView.RowPrePaint> 来绘制渐变行背景（如果选中该行）。 此示例摘自 [如何：自定义 Windows 窗体 DataGridView 控件中行的外观](/dotnet/framework/winforms/controls/customize-the-appearance-of-rows-in-the-datagrid)的更大示例的一部分。  
  
 [!code-csharp[System.Windows.Forms.DataGridViewRowPainting#20](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewRowPainting/CS/datagridviewrowpainting.cs#20)]
 [!code-vb[System.Windows.Forms.DataGridViewRowPainting#20](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewRowPainting/VB/datagridviewrowpainting.vb#20)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="Rows">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataGridViewRowCollection Rows { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.DataGridViewRowCollection Rows" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.Rows" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Rows As DataGridViewRowCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::DataGridViewRowCollection ^ Rows { System::Windows::Forms::DataGridViewRowCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Rows : System.Windows.Forms.DataGridViewRowCollection" Usage="System.Windows.Forms.DataGridView.Rows" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewRowCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个集合，该集合包含 <see cref="T:System.Windows.Forms.DataGridView" /> 控件中的所有行。</summary>
        <value>一个 <see cref="T:System.Windows.Forms.DataGridViewRowCollection" />，包含 <see cref="T:System.Windows.Forms.DataGridView" /> 控件中的所有行。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以使用该 <xref:System.Windows.Forms.DataGridView.Rows%2A> 集合手动填充控件， <xref:System.Windows.Forms.DataGridView> 而不是将其绑定到数据源。 下面的示例演示如何手动添加和插入行。 此示例假设您已将四个 <xref:System.Windows.Forms.DataGridViewTextBoxColumn> 实例添加到控件的 <xref:System.Windows.Forms.DataGridView.Columns%2A> 集合中。  
  
```vb  
Me.dataGridView1.Rows.Add("five", "six", "seven", "eight")  
Me.dataGridView1.Rows.Insert(0, "one", "two", "three", "four")  
```  
  
```csharp  
this.dataGridView1.Rows.Add("five", "six", "seven", "eight");this.dataGridView1.Rows.Insert(0, "one", "two", "three", "four");  
```  
  
 有关以编程方式填充未绑定控件的详细示例 <xref:System.Windows.Forms.DataGridView> ，请参见 "示例" 部分。  
  
 除单元格值外，行还包括样式信息。 出于此原因，你可能想要基于已设置样式的现有行添加或插入行。 您可以使用 <xref:System.Windows.Forms.DataGridViewRowCollection.AddCopy%2A> 、 <xref:System.Windows.Forms.DataGridViewRowCollection.AddCopies%2A> 、 <xref:System.Windows.Forms.DataGridViewRowCollection.InsertCopy%2A> 和方法执行此操作 <xref:System.Windows.Forms.DataGridViewRowCollection.InsertCopies%2A> 。  
  
 你还可以使用 <xref:System.Windows.Forms.DataGridView.Rows%2A> 集合来修改控件中的值或删除行。 无论控件是否绑定到外部数据源，都可以修改值或删除行。 如果有数据源，则会直接对数据源进行更改。 但是，你可能仍需要将数据源更新推送到远程数据库。 有关详细信息，请参阅 [如何：将数据绑定到 Windows 窗体 DataGridView 控件](/dotnet/framework/winforms/controls/how-to-bind-data-to-the-windows-forms-datagridview-control)。  
  
 下面的示例演示如何以编程方式修改单元格值。  
  
```vb  
' Modify the value in the first cell of the second row.  
Me.dataGridView1.Rows[1].Cells[0].Value = "new value"  
  
' The previous line is equivalent to the following line.  
Me.dataGridView1[0, 1].Value = "new value"  
```  
  
```csharp  
// Modify the value in the first cell of the second row.  
this.dataGridView1.Rows[1].Cells[0].Value = "new value";  
  
// The previous line is equivalent to the following line.  
this.dataGridView1[0, 1].Value = "new value";  
```  
  
 除了标准集合功能，还可以使用 <xref:System.Windows.Forms.DataGridView.Rows%2A> 集合来检索有关行的信息。 使用 <xref:System.Windows.Forms.DataGridViewRowCollection.GetRowState%2A> 方法可确定特定行的状态。 使用 <xref:System.Windows.Forms.DataGridViewRowCollection.GetRowCount%2A> 和 <xref:System.Windows.Forms.DataGridViewRowCollection.GetRowsHeight%2A> 方法来确定行数或处于特定状态的行的组合高度。 若要检索具有特定状态的行的索引，请使用 <xref:System.Windows.Forms.DataGridViewRowCollection.GetFirstRow%2A> 、 <xref:System.Windows.Forms.DataGridViewRowCollection.GetLastRow%2A> 、 <xref:System.Windows.Forms.DataGridViewRowCollection.GetNextRow%2A> 和 <xref:System.Windows.Forms.DataGridViewRowCollection.GetPreviousRow%2A> 方法。  
  
 下面的示例演示如何检索第一个选定行的索引，然后使用它以编程方式删除该行。  
  
```vb  
Dim rowToDelete As Int32 = Me.dataGridView1.Rows.GetFirstRow( _  
    DataGridViewElementStates.Selected)  
If rowToDelete > -1 Then  
    Me.dataGridView1.Rows.RemoveAt(rowToDelete)  
End If  
```  
  
```csharp  
Int32 rowToDelete = this.dataGridView1.Rows.GetFirstRow(  
    DataGridViewElementStates.Selected);  
if (rowToDelete > -1)  
{  
    this.dataGridView1.Rows.RemoveAt(rowToDelete);  
}  
```  
  
 为了提高性能， <xref:System.Windows.Forms.DataGridViewRowCollection> 属性返回的 <xref:System.Windows.Forms.DataGridView.Rows%2A> 可能包括共享和非共享行。 共享行共享内存以降低大型记录集的成本。 如果您的记录集非常大，则在访问属性时应谨慎地保持行共享 <xref:System.Windows.Forms.DataGridView.Rows%2A> 。  
  
 有关详细信息，请参阅 [缩放 Windows 窗体 DataGridView 控件的最佳做法](/dotnet/framework/winforms/controls/best-practices-for-scaling-the-windows-forms-datagridview-control)。

## Examples  
 下面的代码示例演示如何创建未绑定的 <xref:System.Windows.Forms.DataGridView> ; 设置 <xref:System.Windows.Forms.DataGridView.ColumnHeadersVisible%2A> 、 <xref:System.Windows.Forms.DataGridView.ColumnHeadersDefaultCellStyle%2A> 和 <xref:System.Windows.Forms.DataGridView.ColumnCount%2A> 属性; 以及使用 <xref:System.Windows.Forms.DataGridView.Rows%2A> 和 <xref:System.Windows.Forms.DataGridView.Columns%2A> 属性。 它还演示了如何使用和方法的版本 <xref:System.Windows.Forms.DataGridView.AutoResizeColumnHeadersHeight%2A> <xref:System.Windows.Forms.DataGridView.AutoResizeRows%2A> 来正确调整列标题和行的大小。 若要运行此示例，请将以下代码粘贴到包含名为的和名为的按钮的窗体中 <xref:System.Windows.Forms.DataGridView> `dataGridView1` `Button1` ，然后 `InitializeDataGridView` 从窗体的构造函数或 <xref:System.Windows.Forms.Form.Load> 事件处理程序调用方法。 确保所有事件都与其事件处理程序连接。  
  
 [!code-cpp[System.Windows.Forms.GridViewAutoSize#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.GridViewAutoSize/CPP/form1.cpp#2)]
 [!code-csharp[System.Windows.Forms.GridViewAutoSize#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.GridViewAutoSize/CS/form1.cs#2)]
 [!code-vb[System.Windows.Forms.GridViewAutoSize#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.GridViewAutoSize/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="RowsAdded">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewRowsAddedEventHandler RowsAdded;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewRowsAddedEventHandler RowsAdded" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.RowsAdded" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event RowsAdded As DataGridViewRowsAddedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::DataGridViewRowsAddedEventHandler ^ RowsAdded;" />
      <MemberSignature Language="F#" Value="member this.RowsAdded : System.Windows.Forms.DataGridViewRowsAddedEventHandler " Usage="member this.RowsAdded : System.Windows.Forms.DataGridViewRowsAddedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewRowsAddedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在向 <see cref="T:System.Windows.Forms.DataGridView" /> 中添加新行之后发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 添加新行时，不会自动对控件中的行进行排序。 若要将新行排序到其正确位置，请 <xref:System.Windows.Forms.DataGridView.Sort%2A> 在 <xref:System.Windows.Forms.DataGridView.RowsAdded> 事件处理程序中调用方法。  
  
 当用户使用新记录的行添加新行时， <xref:System.Windows.Forms.DataGridViewRowsAddedEventArgs.RowIndex%2A?displayProperty=nameWithType> 此事件的处理程序中的值等于新记录行的新位置的索引，该索引大于刚添加的行。 但是，以编程方式添加行时， <xref:System.Windows.Forms.DataGridViewRowsAddedEventArgs.RowIndex%2A> 值是添加的第一行的索引。  
  
 在虚拟模式下，此事件发生在 <xref:System.Windows.Forms.DataGridView.CellValuePushed> 事件之前，可用于在数据存储区中创建新记录，然后您可以在事件处理程序中填充该记录 <xref:System.Windows.Forms.DataGridView.CellValuePushed> 。  
  
 有关如何处理事件的详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。

## Examples  
 下面的代码示例处理 <xref:System.Windows.Forms.DataGridView.RowsAdded> 事件以便递增虚拟中的行数 <xref:System.Windows.Forms.DataGridView> 。 处理程序中使用的行数 <xref:System.Windows.Forms.DataGridView.CellValueNeeded> ，因此它知道何时为新行显示空白单元格和初始化的单元格。 此示例是参考主题中提供的一个更大示例的一部分 <xref:System.Windows.Forms.DataGridView.VirtualMode%2A> 。  
  
 [!code-cpp[System.Windows.Forms.DataGridView._Virtual#20](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.DataGridView._Virtual/CPP/virtual.cpp#20)]
 [!code-csharp[System.Windows.Forms.DataGridView._Virtual#20](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridView._Virtual/CS/virtual.cs#20)]
 [!code-vb[System.Windows.Forms.DataGridView._Virtual#20](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridView._Virtual/VB/virtual.vb#20)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DataGridViewRowsAddedEventHandler" />
        <altmember cref="T:System.Windows.Forms.DataGridViewRowsAddedEventArgs" />
        <altmember cref="P:System.Windows.Forms.DataGridViewRowsAddedEventArgs.RowIndex" />
        <altmember cref="E:System.Windows.Forms.DataGridView.CellValuePushed" />
        <altmember cref="M:System.Windows.Forms.DataGridView.OnRowsAdded(System.Windows.Forms.DataGridViewRowsAddedEventArgs)" />
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="RowsDefaultCellStyle">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataGridViewCellStyle RowsDefaultCellStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.DataGridViewCellStyle RowsDefaultCellStyle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.RowsDefaultCellStyle" />
      <MemberSignature Language="VB.NET" Value="Public Property RowsDefaultCellStyle As DataGridViewCellStyle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::DataGridViewCellStyle ^ RowsDefaultCellStyle { System::Windows::Forms::DataGridViewCellStyle ^ get(); void set(System::Windows::Forms::DataGridViewCellStyle ^ value); };" />
      <MemberSignature Language="F#" Value="member this.RowsDefaultCellStyle : System.Windows.Forms.DataGridViewCellStyle with get, set" Usage="System.Windows.Forms.DataGridView.RowsDefaultCellStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewCellStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置应用于 <see cref="T:System.Windows.Forms.DataGridView" /> 的行单元格的默认样式。</summary>
        <value>要应用于 <see cref="T:System.Windows.Forms.DataGridView" /> 的行单元格的 <see cref="T:System.Windows.Forms.DataGridViewCellStyle" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.DataGridView>控件使用 cells 属性指示的样式显示单元格 <xref:System.Windows.Forms.DataGridViewCell.InheritedStyle%2A> ，该样式继承类型的其他属性的样式 <xref:System.Windows.Forms.DataGridViewCellStyle> 。 对于所有行中的单元格（不包括标题单元格），通过属性指定的样式将 <xref:System.Windows.Forms.DataGridView.RowsDefaultCellStyle%2A> 重写通过和属性指定的样式 <xref:System.Windows.Forms.DataGridView.DefaultCellStyle%2A> <xref:System.Windows.Forms.DataGridViewColumn.DefaultCellStyle%2A?displayProperty=nameWithType> ，并由通过 <xref:System.Windows.Forms.DataGridView.AlternatingRowsDefaultCellStyle%2A> 、 <xref:System.Windows.Forms.DataGridViewRow.DefaultCellStyle%2A?displayProperty=nameWithType> 和属性指定的样式重写 <xref:System.Windows.Forms.DataGridViewCell.Style%2A?displayProperty=nameWithType> 。  
  
 有关详细信息，请参阅 [Windows 窗体 DataGridView 控件中的单元格样式](/dotnet/framework/winforms/controls/cell-styles-in-the-windows-forms-datagridview-control)。  
  
 获取此属性时， <xref:System.Windows.Forms.DataGridViewCellStyle> 如果尚未访问属性，将创建具有默认值的。 在为多个行获取此属性时，这可能会影响性能。 请尽可能使用 single <xref:System.Windows.Forms.DataGridViewCellStyle> 为多行设置此属性。 有关详细信息，请参阅 [缩放 Windows 窗体 DataGridView 控件的最佳做法](/dotnet/framework/winforms/controls/best-practices-for-scaling-the-windows-forms-datagridview-control)。

## Examples  
 下面的代码示例演示如何使用此属性在控件中创建帐目型效果 <xref:System.Windows.Forms.DataGridView> 。 此示例是类概述中提供的一个更大示例的一部分 <xref:System.Windows.Forms.DataGridViewCellStyle> 。  
  
 [!code-csharp[System.Windows.Forms.DataGridViewStyleDemo#20](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewStyleDemo/CS/form1.cs#20)]
 [!code-vb[System.Windows.Forms.DataGridViewStyleDemo#20](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewStyleDemo/VB/form1.vb#20)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DataGridViewCellStyle" />
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
        <related type="Article" href="/dotnet/framework/winforms/controls/cell-styles-in-the-windows-forms-datagridview-control">Windows 窗体 DataGridView 控件中的单元格样式</related>
      </Docs>
    </Member>
    <Member MemberName="RowsDefaultCellStyleChanged">
      <MemberSignature Language="C#" Value="public event EventHandler RowsDefaultCellStyleChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler RowsDefaultCellStyleChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.RowsDefaultCellStyleChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event RowsDefaultCellStyleChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ RowsDefaultCellStyleChanged;" />
      <MemberSignature Language="F#" Value="member this.RowsDefaultCellStyleChanged : EventHandler " Usage="member this.RowsDefaultCellStyleChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当 <see cref="P:System.Windows.Forms.DataGridView.RowsDefaultCellStyle" /> 属性的值更改时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当属性返回的的属性 <xref:System.Windows.Forms.DataGridViewCellStyle> <xref:System.Windows.Forms.DataGridView.RowsDefaultCellStyle%2A> 设置为新值时，或者当 <xref:System.Windows.Forms.DataGridView.RowsDefaultCellStyle%2A> 属性设置为新 <xref:System.Windows.Forms.DataGridViewCellStyle> 的，且至少有一个属性值与上一个单元格样式对象不同时，将发生此事件。  
  
 有关如何处理事件的详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。

## Examples  
 下面的代码示例演示如何使用此成员。 在此示例中，事件处理程序报告事件的发生 <xref:System.Windows.Forms.DataGridView.RowsDefaultCellStyleChanged> 。 此报表可帮助你了解何时发生事件，并可帮助你进行调试。 若要报告多个事件或频繁发生的事件，请考虑 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 将消息替换为多行或将其追加到多行 <xref:System.Windows.Forms.TextBox> 。  
  
 若要运行示例代码，请将其粘贴到包含名为的类型的实例的项目中 <xref:System.Windows.Forms.DataGridView> `DataGridView1` 。 然后，确保事件处理程序与事件相关联 <xref:System.Windows.Forms.DataGridView.RowsDefaultCellStyleChanged> 。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#279](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#279)]
 [!code-vb[System.Windows.Forms.EventExamples#279](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#279)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DataGridViewCellStyle" />
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
        <related type="Article" href="/dotnet/framework/winforms/controls/cell-styles-in-the-windows-forms-datagridview-control">Windows 窗体 DataGridView 控件中的单元格样式</related>
      </Docs>
    </Member>
    <Member MemberName="RowsRemoved">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewRowsRemovedEventHandler RowsRemoved;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewRowsRemovedEventHandler RowsRemoved" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.RowsRemoved" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event RowsRemoved As DataGridViewRowsRemovedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::DataGridViewRowsRemovedEventHandler ^ RowsRemoved;" />
      <MemberSignature Language="F#" Value="member this.RowsRemoved : System.Windows.Forms.DataGridViewRowsRemovedEventHandler " Usage="member this.RowsRemoved : System.Windows.Forms.DataGridViewRowsRemovedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewRowsRemovedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在从 <see cref="T:System.Windows.Forms.DataGridView" /> 中删除一行或多行时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 从控件中删除行后 <xref:System.Windows.Forms.DataGridView> ，后续行的索引号将降低为补偿。  
  
 有关如何处理事件的详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。

## Examples  
 下面的代码示例演示如何使用此事件来更新的余额列中的值 <xref:System.Windows.Forms.DataGridView> 。 此示例是事件中提供的一个更大示例的一部分 <xref:System.Windows.Forms.DataGridView.SelectionChanged> 。  
  
 [!code-csharp[System.Windows.Forms.DataGridViewSelectionSum#30](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewSelectionSum/CS/form1.cs#30)]
 [!code-vb[System.Windows.Forms.DataGridViewSelectionSum#30](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewSelectionSum/VB/form1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DataGridViewRowsRemovedEventHandler" />
        <altmember cref="T:System.Windows.Forms.DataGridViewRowsRemovedEventArgs" />
        <altmember cref="M:System.Windows.Forms.DataGridView.OnRowsRemoved(System.Windows.Forms.DataGridViewRowsRemovedEventArgs)" />
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="RowStateChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewRowStateChangedEventHandler RowStateChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewRowStateChangedEventHandler RowStateChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.RowStateChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event RowStateChanged As DataGridViewRowStateChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::DataGridViewRowStateChangedEventHandler ^ RowStateChanged;" />
      <MemberSignature Language="F#" Value="member this.RowStateChanged : System.Windows.Forms.DataGridViewRowStateChangedEventHandler " Usage="member this.RowStateChanged : System.Windows.Forms.DataGridViewRowStateChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewRowStateChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>行状态更改(例如失去或获得输入焦点)时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关如何处理事件的详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。

## Examples  
 下面的代码示例演示如何使用此成员。 在此示例中，事件处理程序报告事件的发生 <xref:System.Windows.Forms.DataGridView.RowStateChanged> 。 此报表可帮助你了解何时发生事件，并可帮助你进行调试。 若要报告多个事件或频繁发生的事件，请考虑 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 将消息替换为多行或将其追加到多行 <xref:System.Windows.Forms.TextBox> 。  
  
 若要运行示例代码，请将其粘贴到包含名为的类型的实例的项目中 <xref:System.Windows.Forms.DataGridView> `DataGridView1` 。 然后，确保事件处理程序与事件相关联 <xref:System.Windows.Forms.DataGridView.RowStateChanged> 。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#359](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#359)]
 [!code-vb[System.Windows.Forms.EventExamples#359](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#359)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="RowTemplate">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataGridViewRow RowTemplate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.DataGridViewRow RowTemplate" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.RowTemplate" />
      <MemberSignature Language="VB.NET" Value="Public Property RowTemplate As DataGridViewRow" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::DataGridViewRow ^ RowTemplate { System::Windows::Forms::DataGridViewRow ^ get(); void set(System::Windows::Forms::DataGridViewRow ^ value); };" />
      <MemberSignature Language="F#" Value="member this.RowTemplate : System.Windows.Forms.DataGridViewRow with get, set" Usage="System.Windows.Forms.DataGridView.RowTemplate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Browsable(true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(true)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewRow</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一行，该行表示控件中所有行的模板。</summary>
        <value>表示行模板的 <see cref="T:System.Windows.Forms.DataGridViewRow" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有时，您需要更好地控制 <xref:System.Windows.Forms.DataGridView> 不同 <xref:System.Windows.Forms.DataGridView> 单元格样式属性所提供的行的外观。 <xref:System.Windows.Forms.DataGridView.RowTemplate%2A>使用属性，您可以创建和初始化，以 <xref:System.Windows.Forms.DataGridViewRow> 用作模板的所有行，包括新记录的行（如果 <xref:System.Windows.Forms.DataGridView.AllowUserToAddRows%2A> 为） `true` 。  
  
 当你为行高设置默认值时，这非常有用。 例如，您可能希望增加默认行高，以便在普通单元格内容下提供额外的空间，以便显示跨多个列的内容。  
  
 使用派生自类的自定义类型显示外部数据时，必须设置行模板 <xref:System.Windows.Forms.DataGridViewRow> 。 对于未绑定 <xref:System.Windows.Forms.DataGridView> 控件，可以通过编程方式填充 <xref:System.Windows.Forms.DataGridView.Rows%2A> 自定义行类型的实例的集合。 但是，在显示外部数据时，将自动生成行，但这些行基于行模板，您可以将其设置为自定义行类型的实例。  
  
 如果在第一次检索其值时未设置此属性，则将 <xref:System.Windows.Forms.DataGridViewRow> 创建并返回一个新的。

## Examples  
 下面的代码示例演示如何使用行模板来指定初始行高和最小行高。  
  
 [!code-cpp[System.Windows.Forms.DataGridView.RowTemplate#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.DataGridView.RowTemplate/CPP/datagridviewrowtemplate.cpp#1)]
 [!code-csharp[System.Windows.Forms.DataGridView.RowTemplate#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridView.RowTemplate/CS/datagridviewrowtemplate.cs#1)]
 [!code-vb[System.Windows.Forms.DataGridView.RowTemplate#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridView.RowTemplate/VB/datagridviewrowtemplate.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">设置此属性时指定的行具有其 <see cref="P:System.Windows.Forms.DataGridViewElement.DataGridView" /> 属性集。</exception>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="RowUnshared">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewRowEventHandler RowUnshared;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewRowEventHandler RowUnshared" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.RowUnshared" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event RowUnshared As DataGridViewRowEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::DataGridViewRowEventHandler ^ RowUnshared;" />
      <MemberSignature Language="F#" Value="member this.RowUnshared : System.Windows.Forms.DataGridViewRowEventHandler " Usage="member this.RowUnshared : System.Windows.Forms.DataGridViewRowEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewRowEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>行的状态从共享更改为不共享时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 你可以在开发和测试过程中使用此事件，以帮助标识导致行从共享更改为非共享状态的代码。 当缩放控件以显示大量数据时，这很有用。  
  
 有关如何处理事件的详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。

## Examples  
 下面的代码示例演示如何使用此成员。 在此示例中，事件处理程序报告事件的发生 <xref:System.Windows.Forms.DataGridView.RowUnshared> 。 此报表可帮助你了解何时发生事件，并可帮助你进行调试。 若要报告多个事件或频繁发生的事件，请考虑 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 将消息替换为多行或将其追加到多行 <xref:System.Windows.Forms.TextBox> 。  
  
 若要运行示例代码，请将其粘贴到包含名为的类型的实例的项目中 <xref:System.Windows.Forms.DataGridView> `DataGridView1` 。 然后，确保事件处理程序与事件相关联 <xref:System.Windows.Forms.DataGridView.RowUnshared> 。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#360](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#360)]
 [!code-vb[System.Windows.Forms.EventExamples#360](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#360)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="RowValidated">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewCellEventHandler RowValidated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewCellEventHandler RowValidated" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.RowValidated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event RowValidated As DataGridViewCellEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::DataGridViewCellEventHandler ^ RowValidated;" />
      <MemberSignature Language="F#" Value="member this.RowValidated : System.Windows.Forms.DataGridViewCellEventHandler " Usage="member this.RowValidated : System.Windows.Forms.DataGridViewCellEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewCellEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>行完成验证时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此事件与 <xref:System.Windows.Forms.Control.Validated> 事件类似。 使用此事件可以对值的行执行后续处理。  
  
 有关如何处理事件的详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。

## Examples  
 下面的代码示例使用此事件来清除在验证行后可能已遗留的任何错误批注。  
  
 [!code-csharp[System.Windows.Forms.DataGridView.RowOperations#10](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridView.RowOperations/CS/rowoperations.cs#10)]
 [!code-vb[System.Windows.Forms.DataGridView.RowOperations#10](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridView.RowOperations/VB/rowoperations.vb#10)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="RowValidating">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewCellCancelEventHandler RowValidating;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewCellCancelEventHandler RowValidating" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.RowValidating" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event RowValidating As DataGridViewCellCancelEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::DataGridViewCellCancelEventHandler ^ RowValidating;" />
      <MemberSignature Language="F#" Value="member this.RowValidating : System.Windows.Forms.DataGridViewCellCancelEventHandler " Usage="member this.RowValidating : System.Windows.Forms.DataGridViewCellCancelEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewCellCancelEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>行验证时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此事件与 <xref:System.Windows.Forms.Control.Validating?displayProperty=nameWithType> 事件类似。 使用此事件对行的所有值执行验证。 如果行未通过验证，则将属性设置 <xref:System.ComponentModel.CancelEventArgs.Cancel%2A?displayProperty=nameWithType> 为 `true` 。 取消此事件会阻止 <xref:System.Windows.Forms.DataGridView.RowValidated> 、 <xref:System.Windows.Forms.Control.Validating?displayProperty=nameWithType> 和 <xref:System.Windows.Forms.Control.Validated?displayProperty=nameWithType> 事件发生，并且还会阻止用户离开无效行并防止将行保存到数据绑定模式下的外部数据源。  
  
 有关如何处理事件的详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。

## Examples  
 下面的代码示例使用 <xref:System.Windows.Forms.DataGridView.RowValidating> 检查是否输入了有效的曲目和发布日期。  
  
 [!code-csharp[System.Windows.Forms.DataGridView.RowOperations#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridView.RowOperations/CS/rowoperations.cs#5)]
 [!code-vb[System.Windows.Forms.DataGridView.RowOperations#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridView.RowOperations/VB/rowoperations.vb#5)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="Scroll">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.ScrollEventHandler Scroll;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.ScrollEventHandler Scroll" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.Scroll" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Scroll As ScrollEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::ScrollEventHandler ^ Scroll;" />
      <MemberSignature Language="F#" Value="member this.Scroll : System.Windows.Forms.ScrollEventHandler " Usage="member this.Scroll : System.Windows.Forms.ScrollEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ScrollEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在用户滚动控件内容时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关如何处理事件的详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。

## Examples  
 下面的代码示例演示如何使用此成员。 在此示例中，事件处理程序报告事件的发生 <xref:System.Windows.Forms.DataGridView.Scroll> 。 此报表可帮助你了解何时发生事件，并可帮助你进行调试。 若要报告多个事件或频繁发生的事件，请考虑 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 将消息替换为多行或将其追加到多行 <xref:System.Windows.Forms.TextBox> 。  
  
 若要运行示例代码，请将其粘贴到包含名为的类型的实例的项目中 <xref:System.Windows.Forms.DataGridView> `DataGridView1` 。 然后，确保事件处理程序与事件相关联 <xref:System.Windows.Forms.DataGridView.Scroll> 。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#363](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#363)]
 [!code-vb[System.Windows.Forms.EventExamples#363](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#363)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="ScrollBars">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ScrollBars ScrollBars { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.ScrollBars ScrollBars" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.ScrollBars" />
      <MemberSignature Language="VB.NET" Value="Public Property ScrollBars As ScrollBars" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ScrollBars ScrollBars { System::Windows::Forms::ScrollBars get(); void set(System::Windows::Forms::ScrollBars value); };" />
      <MemberSignature Language="F#" Value="member this.ScrollBars : System.Windows.Forms.ScrollBars with get, set" Usage="System.Windows.Forms.DataGridView.ScrollBars" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Localizable(true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Localizable(true)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ScrollBars</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置要在 <see cref="T:System.Windows.Forms.DataGridView" /> 控件中显示的滚动条的类型。</summary>
        <value><see cref="T:System.Windows.Forms.ScrollBars" /> 值之一。 默认值为 <see cref="F:System.Windows.Forms.ScrollBars.Both" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 无论该属性的值如何，滚动条仅在需要时才会显示。 使用此属性可防止显示滚动条。 这很有用，例如，当你想要 (UI) 提供一个可供滚动的备用用户界面时。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">当设置此属性时，指定的值不是有效的 <see cref="T:System.Windows.Forms.ScrollBars" /> 值。</exception>
        <exception cref="T:System.InvalidOperationException">无法设置此属性的值，因为无法提交或取消一个单元格更改而导致 <see cref="T:System.Windows.Forms.DataGridView" /> 无法滚动。</exception>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="SelectAll">
      <MemberSignature Language="C#" Value="public void SelectAll ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SelectAll() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.SelectAll" />
      <MemberSignature Language="VB.NET" Value="Public Sub SelectAll ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SelectAll();" />
      <MemberSignature Language="F#" Value="member this.SelectAll : unit -&gt; unit" Usage="dataGridView.SelectAll " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>选择 <see cref="T:System.Windows.Forms.DataGridView" /> 中的所有单元格。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当 <xref:System.Windows.Forms.DataGridView> 处于列选择模式并且调用此方法时，每个列的 <xref:System.Windows.Forms.DataGridViewBand.Selected%2A> 属性都设置为 `true` ，并且每个行的 <xref:System.Windows.Forms.DataGridViewBand.Selected%2A> 属性都设置为 `false` 。  
  
 相反，当 <xref:System.Windows.Forms.DataGridView> 处于行选择模式并且调用此方法时，每一行的 <xref:System.Windows.Forms.DataGridViewBand.Selected%2A> 属性都设置为 `true` ，并且每个列的 <xref:System.Windows.Forms.DataGridViewBand.Selected%2A> 属性都设置为 `false` 。

## Examples  
 下面的代码示例演示方法的用法 <xref:System.Windows.Forms.DataGridView.SelectAll%2A> 。 若要运行此示例，请将代码粘贴到包含名为的和名为的的窗体中 <xref:System.Windows.Forms.DataGridView> `dataGridView1` <xref:System.Windows.Forms.Button> `selectAllButton` ，并确保所有事件都与事件处理程序相关联。  
  
 [!code-csharp[System.Windows.Forms.DataGridViewMisc#180](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewMisc/CS/datagridviewmisc.cs#180)]
 [!code-vb[System.Windows.Forms.DataGridViewMisc#180](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewMisc/VB/datagridviewmisc.vb#180)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="SelectedCells">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataGridViewSelectedCellCollection SelectedCells { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.DataGridViewSelectedCellCollection SelectedCells" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.SelectedCells" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SelectedCells As DataGridViewSelectedCellCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::DataGridViewSelectedCellCollection ^ SelectedCells { System::Windows::Forms::DataGridViewSelectedCellCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SelectedCells : System.Windows.Forms.DataGridViewSelectedCellCollection" Usage="System.Windows.Forms.DataGridView.SelectedCells" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewSelectedCellCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取用户选定的单元格的集合。</summary>
        <value>一个 <see cref="T:System.Windows.Forms.DataGridViewSelectedCellCollection" />，表示用户选定的单元格。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 无论属性值如何，都将 <xref:System.Windows.Forms.DataGridView.SelectedCells%2A> 始终填充属性 <xref:System.Windows.Forms.DataGridView.SelectionMode%2A> 。  
  
 此属性包含所选内容在引用时的只读快照。 如果你保存在此集合的副本上，则它可能不同于 <xref:System.Windows.Forms.DataGridView> 用户可能更改了所选内容的实际后续状态。 因此，不应在集合的副本上进行操作。

## Examples  
 下面的代码示例演示如何使用 <xref:System.Windows.Forms.DataGridView.SelectedCells%2A> 集合查找所选内容中的值之和。 在此示例中，将循环访问此集合，并将有效值添加到在标签中显示的和。 此示例是事件中提供的一个更大示例的一部分 <xref:System.Windows.Forms.DataGridView.SelectionChanged> 。  
  
 [!code-csharp[System.Windows.Forms.DataGridViewSelectionSum#10](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewSelectionSum/CS/form1.cs#10)]
 [!code-vb[System.Windows.Forms.DataGridViewSelectionSum#10](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewSelectionSum/VB/form1.vb#10)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="SelectedColumns">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataGridViewSelectedColumnCollection SelectedColumns { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.DataGridViewSelectedColumnCollection SelectedColumns" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.SelectedColumns" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SelectedColumns As DataGridViewSelectedColumnCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::DataGridViewSelectedColumnCollection ^ SelectedColumns { System::Windows::Forms::DataGridViewSelectedColumnCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SelectedColumns : System.Windows.Forms.DataGridViewSelectedColumnCollection" Usage="System.Windows.Forms.DataGridView.SelectedColumns" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewSelectedColumnCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取用户选定的列的集合。</summary>
        <value>一个 <see cref="T:System.Windows.Forms.DataGridViewSelectedColumnCollection" />，表示用户选定的列。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.DataGridView.SelectionMode%2A> <xref:System.Windows.Forms.DataGridViewSelectionMode.FullColumnSelect?displayProperty=nameWithType> <xref:System.Windows.Forms.DataGridViewSelectionMode.ColumnHeaderSelect?displayProperty=nameWithType> 若要 <xref:System.Windows.Forms.DataGridView.SelectedColumns%2A> 用选定的列填充属性，必须将属性设置为或。  
  
 此属性包含所选内容在引用时的只读快照。 如果你保存在此集合的副本上，则它可能不同于 <xref:System.Windows.Forms.DataGridView> 用户可能更改了所选内容的实际后续状态。 因此，不应在集合的副本上进行操作。

## Examples  
 下面的代码示例演示如何使用 <xref:System.Windows.Forms.DataGridView.SelectedColumns%2A> 属性以编程方式获取所选列。 在此示例中，在方法中使用此属性 <xref:System.Windows.Forms.DataGridView.Sort%2A> 来确定排序的方向。  
  
 [!code-csharp[System.Windows.Forms.DatagridViewProgrammaticSort#10](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewProgrammaticSort/CS/form1.cs#10)]
 [!code-vb[System.Windows.Forms.DatagridViewProgrammaticSort#10](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewProgrammaticSort/VB/form1.vb#10)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="SelectedRows">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataGridViewSelectedRowCollection SelectedRows { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.DataGridViewSelectedRowCollection SelectedRows" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.SelectedRows" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SelectedRows As DataGridViewSelectedRowCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::DataGridViewSelectedRowCollection ^ SelectedRows { System::Windows::Forms::DataGridViewSelectedRowCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SelectedRows : System.Windows.Forms.DataGridViewSelectedRowCollection" Usage="System.Windows.Forms.DataGridView.SelectedRows" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewSelectedRowCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取用户选定的行的集合。</summary>
        <value>一个 <see cref="T:System.Windows.Forms.DataGridViewSelectedRowCollection" />，包含用户选定的行。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.DataGridView.SelectionMode%2A>必须将属性设置为 <xref:System.Windows.Forms.DataGridViewSelectionMode.FullRowSelect> 或， <xref:System.Windows.Forms.DataGridViewSelectionMode.RowHeaderSelect> <xref:System.Windows.Forms.DataGridView.SelectedRows%2A> 才能用所选行填充属性。  
  
 此属性包含所选内容在引用时的只读快照。 如果你保存在此集合的副本上，则它可能不同于 <xref:System.Windows.Forms.DataGridView> 用户可能更改了所选内容的实际后续状态。 因此，不应在集合的副本上进行操作。  
  
 若要以编程方式选择行，请将其 <xref:System.Windows.Forms.DataGridViewRow.Selected%2A> 属性设置为 `true` 。

## Examples  
 下面的代码示例演示如何使用 <xref:System.Windows.Forms.DataGridView.SelectedRows%2A> 事件中的属性 <xref:System.Windows.Forms.DataGridView.UserDeletingRow> 。 在此示例中，如果集合中包含第一行 <xref:System.Windows.Forms.DataGridView.SelectedRows%2A> ，则取消删除操作。 此示例是事件中提供的一个更大示例的一部分 <xref:System.Windows.Forms.DataGridView.SelectionChanged> 。  
  
 [!code-csharp[System.Windows.Forms.DataGridViewSelectionSum#20](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewSelectionSum/CS/form1.cs#20)]
 [!code-vb[System.Windows.Forms.DataGridViewSelectionSum#20](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewSelectionSum/VB/form1.vb#20)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.DataGridViewRow.Selected" />
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="SelectionChanged">
      <MemberSignature Language="C#" Value="public event EventHandler SelectionChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler SelectionChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.SelectionChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event SelectionChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ SelectionChanged;" />
      <MemberSignature Language="F#" Value="member this.SelectionChanged : EventHandler " Usage="member this.SelectionChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当前所选内容更改时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 只要选择了单元或取消选择（无论是以编程方式还是通过用户操作），就会发生此事件。 例如，当您想要显示当前选定单元格的总和时，此事件很有用。  
  
 当你更改属性的值时 <xref:System.Windows.Forms.DataGridView.CurrentCell%2A> ，该事件将在 <xref:System.Windows.Forms.DataGridView.SelectionChanged> 事件之前发生 <xref:System.Windows.Forms.DataGridView.CurrentCellChanged> 。 此时 <xref:System.Windows.Forms.DataGridView.SelectionChanged> 访问属性的任何事件处理程序 <xref:System.Windows.Forms.DataGridView.CurrentCell%2A> 都将获得其以前的值。  
  
 有关如何处理事件的详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。

## Examples  
 下面的代码示例演示如何使用此事件。 在此示例中，窗体显示选定单元格中的值的总和，并在选择更改时更新和。  
  
 [!code-csharp[System.Windows.Forms.DataGridViewSelectionSum#00](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewSelectionSum/CS/form1.cs#00)]
 [!code-vb[System.Windows.Forms.DataGridViewSelectionSum#00](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewSelectionSum/VB/form1.vb#00)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.DataGridView.CurrentCell" />
        <altmember cref="E:System.Windows.Forms.DataGridView.SelectionChanged" />
        <altmember cref="E:System.Windows.Forms.DataGridView.CurrentCellChanged" />
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="SelectionMode">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataGridViewSelectionMode SelectionMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.DataGridViewSelectionMode SelectionMode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.SelectionMode" />
      <MemberSignature Language="VB.NET" Value="Public Property SelectionMode As DataGridViewSelectionMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::DataGridViewSelectionMode SelectionMode { System::Windows::Forms::DataGridViewSelectionMode get(); void set(System::Windows::Forms::DataGridViewSelectionMode value); };" />
      <MemberSignature Language="F#" Value="member this.SelectionMode : System.Windows.Forms.DataGridViewSelectionMode with get, set" Usage="System.Windows.Forms.DataGridView.SelectionMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Browsable(true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(true)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewSelectionMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示如何选择 <see cref="T:System.Windows.Forms.DataGridView" /> 的单元格。</summary>
        <value><see cref="T:System.Windows.Forms.DataGridViewSelectionMode" /> 值之一。 默认值为 <see cref="F:System.Windows.Forms.DataGridViewSelectionMode.RowHeaderSelect" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 更改属性的值将 <xref:System.Windows.Forms.DataGridView.SelectionMode%2A> 清除当前所选内容。

## Examples  
 下面的代码示例演示如何设置、、、、、、、、 <xref:System.Windows.Forms.DataGridView.ColumnHeadersDefaultCellStyle%2A> <xref:System.Windows.Forms.DataGridView.AutoSizeRowsMode%2A> <xref:System.Windows.Forms.DataGridView.ColumnHeadersBorderStyle%2A> <xref:System.Windows.Forms.DataGridView.CellBorderStyle%2A> <xref:System.Windows.Forms.DataGridView.GridColor%2A> <xref:System.Windows.Forms.DataGridView.BackgroundColor%2A> <xref:System.Windows.Forms.DataGridView.RowHeadersVisible%2A> <xref:System.Windows.Forms.DataGridView.SelectionMode%2A> <xref:System.Windows.Forms.DataGridView.ColumnCount%2A> 和 <xref:System.Windows.Forms.DataGridView.MultiSelect%2A> 属性。 此外，该代码示例还演示如何设置 <xref:System.Windows.Forms.DataGridViewColumn.Name%2A?displayProperty=nameWithType> 和 <xref:System.Windows.Forms.DataGridViewColumn.DefaultCellStyle%2A?displayProperty=nameWithType> 属性。 若要运行此示例，请将代码粘贴到包含名为的的窗体中 <xref:System.Windows.Forms.DataGridView> `dataGridView1` ，然后 `SetUpDataGridView` 从窗体的构造函数或 <xref:System.Windows.Forms.Form.Load> 事件处理程序调用方法。 确保所有事件都与事件处理程序相关联。  
  
 [!code-cpp[System.Windows.Forms.GridViewUnbound#5](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.GridViewUnbound/CPP/form1.cpp#5)]
 [!code-csharp[System.Windows.Forms.GridViewUnbound#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.GridViewUnbound/CS/form1.cs#5)]
 [!code-vb[System.Windows.Forms.GridViewUnbound#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.GridViewUnbound/VB/form1.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">当设置此属性时，指定的值不是有效的 <see cref="T:System.Windows.Forms.DataGridViewSelectionMode" /> 值。</exception>
        <exception cref="T:System.InvalidOperationException">当设置此属性时，指定的值为 <see cref="F:System.Windows.Forms.DataGridViewSelectionMode.FullColumnSelect" /> 或 <see cref="F:System.Windows.Forms.DataGridViewSelectionMode.ColumnHeaderSelect" />，并且一个或多个列的 <see cref="P:System.Windows.Forms.DataGridViewColumn.SortMode" /> 属性设置为 <see cref="F:System.Windows.Forms.DataGridViewColumnSortMode.Automatic" />。</exception>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="SetBoundsCore">
      <MemberSignature Language="C#" Value="protected override void SetBoundsCore (int x, int y, int width, int height, System.Windows.Forms.BoundsSpecified specified);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void SetBoundsCore(int32 x, int32 y, int32 width, int32 height, valuetype System.Windows.Forms.BoundsSpecified specified) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub SetBoundsCore (x As Integer, y As Integer, width As Integer, height As Integer, specified As BoundsSpecified)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void SetBoundsCore(int x, int y, int width, int height, System::Windows::Forms::BoundsSpecified specified);" />
      <MemberSignature Language="F#" Value="override this.SetBoundsCore : int * int * int * int * System.Windows.Forms.BoundsSpecified -&gt; unit" Usage="dataGridView.SetBoundsCore (x, y, width, height, specified)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
        <Parameter Name="specified" Type="System.Windows.Forms.BoundsSpecified" />
      </Parameters>
      <Docs>
        <param name="x">控件的新 <see cref="P:System.Windows.Forms.Control.Left" /> 属性值。</param>
        <param name="y">控件的新 <see cref="P:System.Windows.Forms.Control.Top" /> 属性值。</param>
        <param name="width">控件的新 <see cref="P:System.Windows.Forms.Control.Width" /> 属性值。</param>
        <param name="height">控件的新 <see cref="P:System.Windows.Forms.Control.Height" /> 属性值。</param>
        <param name="specified"><see cref="T:System.Windows.Forms.BoundsSpecified" /> 值的按位组合。</param>
        <summary>此成员重写 <see cref="M:System.Windows.Forms.Control.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)" />。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">一个或两个宽度或高度值超过最大值 8,388,607。</exception>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="SetCurrentCellAddressCore">
      <MemberSignature Language="C#" Value="protected virtual bool SetCurrentCellAddressCore (int columnIndex, int rowIndex, bool setAnchorCellAddress, bool validateCurrentCell, bool throughMouseClick);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool SetCurrentCellAddressCore(int32 columnIndex, int32 rowIndex, bool setAnchorCellAddress, bool validateCurrentCell, bool throughMouseClick) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.SetCurrentCellAddressCore(System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function SetCurrentCellAddressCore (columnIndex As Integer, rowIndex As Integer, setAnchorCellAddress As Boolean, validateCurrentCell As Boolean, throughMouseClick As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool SetCurrentCellAddressCore(int columnIndex, int rowIndex, bool setAnchorCellAddress, bool validateCurrentCell, bool throughMouseClick);" />
      <MemberSignature Language="F#" Value="abstract member SetCurrentCellAddressCore : int * int * bool * bool * bool -&gt; bool&#xA;override this.SetCurrentCellAddressCore : int * int * bool * bool * bool -&gt; bool" Usage="dataGridView.SetCurrentCellAddressCore (columnIndex, rowIndex, setAnchorCellAddress, validateCurrentCell, throughMouseClick)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="columnIndex" Type="System.Int32" />
        <Parameter Name="rowIndex" Type="System.Int32" />
        <Parameter Name="setAnchorCellAddress" Type="System.Boolean" />
        <Parameter Name="validateCurrentCell" Type="System.Boolean" />
        <Parameter Name="throughMouseClick" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="columnIndex">包含单元格的列的索引。</param>
        <param name="rowIndex">包含该单元格的行的索引。</param>
        <param name="setAnchorCellAddress"><see langword="true" /> to make the new current cell the anchor cell for a subsequent multicell selection using the SHIFT key; otherwise, <see langword="false" />.</param>
        <param name="validateCurrentCell"><see langword="true" /> to validate the value in the old current cell and cancel the change if validation fails; otherwise, <see langword="false" />.</param>
        <param name="throughMouseClick">如果当前的单元格是通过单击鼠标设置的，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
        <summary>设置当前处于活动状态的单元格。</summary>
        <returns>如果当前单元格设置成功，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.DataGridView>每当控件更改当前单元格时，都会使用此方法。 此方法将更改当前单元格，而不会更改选择，也可以选择不验证上一个单元格或更改选择定位点单元格。 定位单元格是多个单元格块的第一个单元格，用户可以通过按住 SHIFT 键并单击块的最后一个单元格来选择该单元格。  
  
 如果 `rowIndex` 和 `columnIndex` 都为-1，则 <xref:System.Windows.Forms.DataGridView.CurrentCell%2A> 属性返回 `null` 。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="columnIndex" /> 小于 0 或大于控件中的列数减 1，并且 <paramref name="rowIndex" /> 不是 -1。  
  
- 或 - 
 <paramref name="rowIndex" /> 小于 0 或大于控件中的行数减 1，并且 <paramref name="columnIndex" /> 不是 -1。</exception>
        <exception cref="T:System.InvalidOperationException">指定单元格的 <see cref="P:System.Windows.Forms.DataGridViewCell.Visible" /> 属性值为 <see langword="false" />。  
  
- 或 - 
已调用此方法，但其原因不是因为正在重置基础数据源，且另一个线程当前正在执行此方法。</exception>
        <exception cref="T:System.InvalidCastException">新的当前单元格尝试进入编辑模式，但是它的 <see cref="P:System.Windows.Forms.DataGridViewCell.EditType" /> 属性不指示从 <see cref="T:System.Windows.Forms.Control" /> 派生并实现 <see cref="T:System.Windows.Forms.IDataGridViewEditingControl" /> 的类。</exception>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="SetSelectedCellCore">
      <MemberSignature Language="C#" Value="protected virtual void SetSelectedCellCore (int columnIndex, int rowIndex, bool selected);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void SetSelectedCellCore(int32 columnIndex, int32 rowIndex, bool selected) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.SetSelectedCellCore(System.Int32,System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub SetSelectedCellCore (columnIndex As Integer, rowIndex As Integer, selected As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void SetSelectedCellCore(int columnIndex, int rowIndex, bool selected);" />
      <MemberSignature Language="F#" Value="abstract member SetSelectedCellCore : int * int * bool -&gt; unit&#xA;override this.SetSelectedCellCore : int * int * bool -&gt; unit" Usage="dataGridView.SetSelectedCellCore (columnIndex, rowIndex, selected)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="columnIndex" Type="System.Int32" />
        <Parameter Name="rowIndex" Type="System.Int32" />
        <Parameter Name="selected" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="columnIndex">包含单元格的列的索引。</param>
        <param name="rowIndex">包含该单元格的行的索引。</param>
        <param name="selected">如果选择该单元格，则为 <see langword="true" />；如果取消选择该单元格，则为 <see langword="false" />。</param>
        <summary>更改具有指定的行索引和列索引的单元格的选择状态。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.DataGridView>控件在更改单元格的选择状态时使用此方法。 选择状态更改，而不考虑当前的 <xref:System.Windows.Forms.DataGridView.SelectionMode%2A> 属性值，也不更改 <xref:System.Windows.Forms.DataGridView.CurrentCell%2A> 属性值。 当您想要实现自己的选择模式时，这非常有用。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="columnIndex" /> 小于 0 或大于控件中的列数减 1。  
  
- 或 - 
 <paramref name="rowIndex" /> 小于 0 或大于控件中的行数减 1。</exception>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="SetSelectedColumnCore">
      <MemberSignature Language="C#" Value="protected virtual void SetSelectedColumnCore (int columnIndex, bool selected);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void SetSelectedColumnCore(int32 columnIndex, bool selected) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.SetSelectedColumnCore(System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub SetSelectedColumnCore (columnIndex As Integer, selected As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void SetSelectedColumnCore(int columnIndex, bool selected);" />
      <MemberSignature Language="F#" Value="abstract member SetSelectedColumnCore : int * bool -&gt; unit&#xA;override this.SetSelectedColumnCore : int * bool -&gt; unit" Usage="dataGridView.SetSelectedColumnCore (columnIndex, selected)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="columnIndex" Type="System.Int32" />
        <Parameter Name="selected" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="columnIndex">该列的索引。</param>
        <param name="selected">如果选择该列，则为 <see langword="true" />；如果取消选择该列，则为 <see langword="false" />。</param>
        <summary>更改具有指定索引的列的选择状态。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.DataGridView>控件在更改列的选择状态时使用此方法。 选择状态更改，而不考虑当前的 <xref:System.Windows.Forms.DataGridView.SelectionMode%2A> 属性值，也不更改 <xref:System.Windows.Forms.DataGridView.CurrentCell%2A> 属性值。 当您想要实现自己的选择模式时，这非常有用。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="columnIndex" /> 小于 0 或大于控件中的列数减 1。</exception>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="SetSelectedRowCore">
      <MemberSignature Language="C#" Value="protected virtual void SetSelectedRowCore (int rowIndex, bool selected);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void SetSelectedRowCore(int32 rowIndex, bool selected) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.SetSelectedRowCore(System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub SetSelectedRowCore (rowIndex As Integer, selected As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void SetSelectedRowCore(int rowIndex, bool selected);" />
      <MemberSignature Language="F#" Value="abstract member SetSelectedRowCore : int * bool -&gt; unit&#xA;override this.SetSelectedRowCore : int * bool -&gt; unit" Usage="dataGridView.SetSelectedRowCore (rowIndex, selected)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rowIndex" Type="System.Int32" />
        <Parameter Name="selected" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="rowIndex">行的索引。</param>
        <param name="selected">如果选择该行，则为 <see langword="true" />；如果取消选择该行，则为 <see langword="false" />。</param>
        <summary>更改具有指定索引的行的选择状态。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.DataGridView>控件在更改行的选择状态时使用此方法。 选择状态更改，而不考虑当前的 <xref:System.Windows.Forms.DataGridView.SelectionMode%2A> 属性值，也不更改 <xref:System.Windows.Forms.DataGridView.CurrentCell%2A> 属性值。 当您想要实现自己的选择模式时，这非常有用。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="rowIndex" /> 小于 0 或大于控件中的行数减 1。</exception>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="ShowCellErrors">
      <MemberSignature Language="C#" Value="public bool ShowCellErrors { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowCellErrors" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.ShowCellErrors" />
      <MemberSignature Language="VB.NET" Value="Public Property ShowCellErrors As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ShowCellErrors { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ShowCellErrors : bool with get, set" Usage="System.Windows.Forms.DataGridView.ShowCellErrors" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(true)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示是否显示单元格错误。</summary>
        <value>如果将在未通过验证的单元格中显示红色标志符号，为<see langword="true" /> ；否则为 <see langword="false" />。 默认值为 <see langword="true" />。</value>
        <remarks>To be added.</remarks>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="ShowCellToolTips">
      <MemberSignature Language="C#" Value="public bool ShowCellToolTips { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowCellToolTips" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.ShowCellToolTips" />
      <MemberSignature Language="VB.NET" Value="Public Property ShowCellToolTips As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ShowCellToolTips { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ShowCellToolTips : bool with get, set" Usage="System.Windows.Forms.DataGridView.ShowCellToolTips" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(true)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示当鼠标指针停留在单元格上或用户通过键盘导航到该单元格上时，是否显示工具提示。</summary>
        <value>如果启用单元格工具提示，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果此属性的值为 `true` ，且鼠标指针位于某个单元格上，或用户已使用键盘导航到该单元格，则当满足以下条件之一时，该单元将显示一个工具提示：  
  
-   属性的值 <xref:System.Windows.Forms.DataGridView.DataSource%2A> 不是 `null` ，或者属性的值 <xref:System.Windows.Forms.DataGridView.VirtualMode%2A> 为 `true` ，而事件的处理程序 <xref:System.Windows.Forms.DataGridView.CellToolTipTextNeeded> 将 <xref:System.Windows.Forms.DataGridViewCellToolTipTextNeededEventArgs.ToolTipText%2A?displayProperty=nameWithType> 属性设置为以外的值 <xref:System.String.Empty?displayProperty=nameWithType> 。  
  
-   <xref:System.Windows.Forms.DataGridViewCell.ToolTipText%2A>单元格的属性的值不是 <xref:System.String.Empty?displayProperty=nameWithType> 。 如果存在事件处理程序，则设置此属性不起作用 <xref:System.Windows.Forms.DataGridView.CellToolTipTextNeeded> ，因为获取属性的值会自动引发事件，并返回事件处理程序中指定的工具提示文本。  
  
-   单元格的值会在单元格中显示。 当 cell <xref:System.Windows.Forms.DataGridViewCell.ToolTipText%2A> 属性值为时 <xref:System.String.Empty?displayProperty=nameWithType> ，已截断单元值的完整值将显示在工具提示中。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.DataGridView.DataSource" />
        <altmember cref="P:System.Windows.Forms.DataGridView.VirtualMode" />
        <altmember cref="E:System.Windows.Forms.DataGridView.CellToolTipTextNeeded" />
        <altmember cref="P:System.Windows.Forms.DataGridViewCellToolTipTextNeededEventArgs.ToolTipText" />
        <altmember cref="P:System.Windows.Forms.DataGridViewCell.ToolTipText" />
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="ShowEditingIcon">
      <MemberSignature Language="C#" Value="public bool ShowEditingIcon { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowEditingIcon" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.ShowEditingIcon" />
      <MemberSignature Language="VB.NET" Value="Public Property ShowEditingIcon As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ShowEditingIcon { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ShowEditingIcon : bool with get, set" Usage="System.Windows.Forms.DataGridView.ShowEditingIcon" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(true)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示编辑标志符号是否在所编辑的单元格的行标题中可见。</summary>
        <value>如果编辑标志符号可见，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="true" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当当前单元格处于编辑模式并且用户已更改单元格时，行标题将显示一个编辑标志符号，该标志符号看起来像铅笔。 编辑字形使用 <xref:System.Windows.Forms.DataGridViewCellStyle.ForeColor%2A> 行标题单元格的属性进行着色。 如果没有足够的空间来完全显示该标志符号，则不会呈现该标志符号。 例如，如果行标题单元格的属性已 <xref:System.Windows.Forms.DataGridViewCell.Value%2A> 设置为，则当文本和字形没有足够的空间时，将删除该标志符号。  
  
 编辑标志符号的显示是由 <xref:System.Windows.Forms.DataGridView.IsCurrentRowDirty%2A> 虚拟模式中属性的值控制的。 否则，它由 <xref:System.Windows.Forms.DataGridView.IsCurrentCellDirty%2A> 属性控制。  
  
 标准字形不公开。 若要自定义标志符号，你可以创建一个自定义 <xref:System.Windows.Forms.DataGridViewRowHeaderCell> 类。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="ShowRowErrors">
      <MemberSignature Language="C#" Value="public bool ShowRowErrors { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowRowErrors" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.ShowRowErrors" />
      <MemberSignature Language="VB.NET" Value="Public Property ShowRowErrors As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ShowRowErrors { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ShowRowErrors : bool with get, set" Usage="System.Windows.Forms.DataGridView.ShowRowErrors" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(true)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示行标题是否为包含数据输入错误的每一行显示错误标志符号。</summary>
        <value>如果<see langword="true" /> 指示有错误，则为 <see cref="T:System.Windows.Forms.DataGridViewRow" /> ；否则为 <see langword="false" />。 默认值为 <see langword="true" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.DataGridViewRow.ErrorText%2A>属性指示行中某个单元格是否有错误。 如果 <xref:System.Windows.Forms.DataGridViewRow.ErrorText%2A> 将设置为以外的值 <xref:System.String.Empty> ，则行标题中将显示错误标志符号 (![ErrorProvider 图标](~/add/media/vberrorprovidericon.gif "ErrorProvider 图标")) 。  
  
 不管是否显示标志符号，行标题的默认宽度都包含足够的空间来显示错误标志符号。 如果调整行标题大小，以便没有足够的空间来完全显示标志符号，则不会呈现该标志符号。  
  
 因为行标题可以同时显示文本和字形，所以标题内容按优先级显示，如下所示：  
  
1.  行标题单元格中显示的文本。  
  
2.  编辑符号。  
  
3.  错误标志符号。  
  
 例如，如果行宽度降低，错误标志符号将先消失，然后是标准标志符号，然后是文本。  
  
 高级用户可以通过开发自定义 <xref:System.Windows.Forms.DataGridViewRowHeaderCell> 类或类来自定义错误标志符号 <xref:System.Windows.Forms.DataGridViewCell> 。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Sort">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>对 <see cref="T:System.Windows.Forms.DataGridView" /> 控件的内容进行排序。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Sort">
      <MemberSignature Language="C#" Value="public virtual void Sort (System.Collections.IComparer comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Sort(class System.Collections.IComparer comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.Sort(System.Collections.IComparer)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Sort (comparer As IComparer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Sort(System::Collections::IComparer ^ comparer);" />
      <MemberSignature Language="F#" Value="abstract member Sort : System.Collections.IComparer -&gt; unit&#xA;override this.Sort : System.Collections.IComparer -&gt; unit" Usage="dataGridView.Sort comparer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comparer" Type="System.Collections.IComparer" />
      </Parameters>
      <Docs>
        <param name="comparer">执行自定义排序操作的 <see cref="T:System.Collections.IComparer" /> 的实现。</param>
        <summary>使用 <see cref="T:System.Collections.IComparer" /> 接口的实现来对 <see cref="T:System.Windows.Forms.DataGridView" /> 控件的内容进行排序。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法允许对类的排序功能进行高级自定义 <xref:System.Windows.Forms.DataGridView> 。 为了实现高度自定义的排序操作，可以编写事件的事件处理程序， <xref:System.Windows.Forms.DataGridView.ColumnHeaderMouseClick> 并使用实现接口的类的实例作为参数来调用此方法 <xref:System.Collections.IComparer?displayProperty=nameWithType> 。 在这种情况下，通常会将 <xref:System.Windows.Forms.DataGridViewColumn.SortMode%2A?displayProperty=nameWithType> 属性设置为以 <xref:System.Windows.Forms.DataGridViewColumnSortMode.Programmatic?displayProperty=nameWithType> 禁用自动排序，并为排序标志符号留出空间。 如果按设置为编程排序模式的列进行排序，则必须通过设置属性来自行显示排序标志符号 <xref:System.Windows.Forms.DataGridViewColumnHeaderCell.SortGlyphDirection%2A?displayProperty=nameWithType> 。  
  
 仅当未设置属性时，此方法才有效 <xref:System.Windows.Forms.DataGridView.DataSource%2A> 。 将 <xref:System.Windows.Forms.DataGridView> 控件绑定到外部数据源时，必须使用该数据源提供的排序操作。 通过实现虚拟模式提供自己的数据源时，还必须自行处理排序操作。  
  
 调用此方法会将属性自动设置 <xref:System.Windows.Forms.DataGridView.CurrentCell%2A> 为 `null` 。

## Examples  
 下面的代码示例演示如何 <xref:System.Windows.Forms.DataGridView.Sort%2A> 在多列排序方案中使用方法重载。 在此示例中， <xref:System.Collections.IComparer> 接口是在类中实现的 `RowComparer` 。  
  
 [!code-csharp[System.Windows.Forms.DataGridViewIComparerSort#10](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewIComparerSort/CS/form1.cs#10)]
 [!code-vb[System.Windows.Forms.DataGridViewIComparerSort#10](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewIComparerSort/VB/form1.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="comparer" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.InvalidOperationException">将 <see cref="P:System.Windows.Forms.DataGridView.VirtualMode" /> 设置为 <see langword="true" />。  
  
- 或 - 
 <see cref="P:System.Windows.Forms.DataGridView.DataSource" /> 不是 <see langword="null" />。</exception>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="Sort">
      <MemberSignature Language="C#" Value="public virtual void Sort (System.Windows.Forms.DataGridViewColumn dataGridViewColumn, System.ComponentModel.ListSortDirection direction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Sort(class System.Windows.Forms.DataGridViewColumn dataGridViewColumn, valuetype System.ComponentModel.ListSortDirection direction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.Sort(System.Windows.Forms.DataGridViewColumn,System.ComponentModel.ListSortDirection)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Sort (dataGridViewColumn As DataGridViewColumn, direction As ListSortDirection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Sort(System::Windows::Forms::DataGridViewColumn ^ dataGridViewColumn, System::ComponentModel::ListSortDirection direction);" />
      <MemberSignature Language="F#" Value="abstract member Sort : System.Windows.Forms.DataGridViewColumn * System.ComponentModel.ListSortDirection -&gt; unit&#xA;override this.Sort : System.Windows.Forms.DataGridViewColumn * System.ComponentModel.ListSortDirection -&gt; unit" Usage="dataGridView.Sort (dataGridViewColumn, direction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataGridViewColumn" Type="System.Windows.Forms.DataGridViewColumn" />
        <Parameter Name="direction" Type="System.ComponentModel.ListSortDirection" />
      </Parameters>
      <Docs>
        <param name="dataGridViewColumn">对 <see cref="T:System.Windows.Forms.DataGridView" /> 的内容进行排序时所依据的列。</param>
        <param name="direction"><see cref="T:System.ComponentModel.ListSortDirection" /> 值之一。</param>
        <summary>基于指定列的内容，按升序或降序对 <see cref="T:System.Windows.Forms.DataGridView" /> 控件的内容进行排序。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法 <xref:System.Windows.Forms.DataGridView> 通过比较指定列中的值对的内容进行排序。 默认情况下，排序操作将使用 <xref:System.Collections.Comparer.Compare%2A> 属性来比较列中的单元对 <xref:System.Windows.Forms.DataGridViewCell.Value%2A?displayProperty=nameWithType> 。  
  
 对于 <xref:System.Windows.Forms.DataGridViewColumn.SortMode%2A> 属性设置为的列 <xref:System.Windows.Forms.DataGridViewColumnSortMode.Automatic?displayProperty=nameWithType> ， <xref:System.Windows.Forms.DataGridView.SortedColumn%2A> 和属性将 <xref:System.Windows.Forms.DataGridView.SortOrder%2A> 自动设置并显示相应的排序标志符号。 对于 <xref:System.Windows.Forms.DataGridViewColumn.SortMode%2A> 属性设置为的列 <xref:System.Windows.Forms.DataGridViewColumnSortMode.Programmatic?displayProperty=nameWithType> ，必须通过属性自行显示排序标志符号 <xref:System.Windows.Forms.DataGridViewColumnHeaderCell.SortGlyphDirection%2A?displayProperty=nameWithType> 。  
  
 您可以通过处理该事件来自定义此方法使用的排序操作 <xref:System.Windows.Forms.DataGridView.SortCompare> 。 此事件仅在未设置属性的情况下发生 <xref:System.Windows.Forms.DataGridView.DataSource%2A> 。  
  
 <xref:System.Windows.Forms.DataGridView.DataSource%2A>设置属性后，此方法仅适用于数据绑定列。 数据绑定列已 <xref:System.Windows.Forms.DataGridViewColumn.DataPropertyName%2A?displayProperty=nameWithType> 设置其属性。 这将导致 <xref:System.Windows.Forms.DataGridViewColumn.IsDataBound%2A?displayProperty=nameWithType> 属性返回 `true` 。  
  
 如果 <xref:System.Windows.Forms.DataGridView> 控件同时包含绑定列和未绑定列，则当控件按绑定列进行排序时，必须实现虚模式来维护未绑定列的值。 可以通过将 <xref:System.Windows.Forms.DataGridView.VirtualMode%2A> 属性设置为 `true` 并处理事件来执行此操作 <xref:System.Windows.Forms.DataGridView.CellValueNeeded> 。 如果列可编辑，还应处理 <xref:System.Windows.Forms.DataGridView.CellValuePushed> 事件。 有关虚拟模式的详细信息，请参阅 [如何：在 Windows 窗体 DataGridView 控件中实现虚拟模式](/dotnet/framework/winforms/controls/how-to-implement-virtual-mode-in-the-windows-forms-datagridview-control)。 在控件被数据绑定时不支持按未绑定列进行排序。

## Examples  
 下面的代码示例演示如何 <xref:System.Windows.Forms.DataGridView.Sort%2A> 在编程排序中使用。  
  
 [!code-csharp[System.Windows.Forms.DataGridViewProgrammaticSort#10](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewProgrammaticSort/CS/form1.cs#10)]
 [!code-vb[System.Windows.Forms.DataGridViewProgrammaticSort#10](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewProgrammaticSort/VB/form1.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">指定的列不属于此 <see cref="T:System.Windows.Forms.DataGridView" />。  
  
- 或 - 
<see cref="P:System.Windows.Forms.DataGridView.DataSource" /> 属性已设置，而指定列的 <see cref="P:System.Windows.Forms.DataGridViewColumn.IsDataBound" /> 属性返回 <see langword="false" />。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="dataGridViewColumn" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.InvalidOperationException"><see cref="P:System.Windows.Forms.DataGridView.VirtualMode" /> 属性设置为 <see langword="true" /> ，而指定列的 <see cref="P:System.Windows.Forms.DataGridViewColumn.IsDataBound" /> 属性返回 <see langword="false" />。  
  
- 或 - 
<see cref="P:System.Windows.Forms.DataGridView.DataSource" /> 属性指定的对象未实现 <see cref="T:System.ComponentModel.IBindingList" /> 接口。  
  
- 或 - 
<see cref="P:System.Windows.Forms.DataGridView.DataSource" /> 属性指定的对象的 <see cref="P:System.ComponentModel.IBindingList.SupportsSorting" /> 属性值为 <see langword="false" />。</exception>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="SortCompare">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewSortCompareEventHandler SortCompare;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewSortCompareEventHandler SortCompare" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.SortCompare" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event SortCompare As DataGridViewSortCompareEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::DataGridViewSortCompareEventHandler ^ SortCompare;" />
      <MemberSignature Language="F#" Value="member this.SortCompare : System.Windows.Forms.DataGridViewSortCompareEventHandler " Usage="member this.SortCompare : System.Windows.Forms.DataGridViewSortCompareEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewSortCompareEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在 <see cref="T:System.Windows.Forms.DataGridView" /> 对两个单元格的值进行比较以执行排序操作时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 仅当 <xref:System.Windows.Forms.DataGridView.DataSource%2A> 未设置属性并且 <xref:System.Windows.Forms.DataGridView.VirtualMode%2A> 属性值为时，才会发生此事件 `false` 。  
  
 此事件比较要排序的列中的单元对。 仅当用户单击属性值为的列的标头时 <xref:System.Windows.Forms.DataGridViewColumn.SortMode%2A> <xref:System.Windows.Forms.DataGridViewColumnSortMode.Automatic> ，或在调用重载时才会发生这种情况 <xref:System.Windows.Forms.DataGridView.Sort%28System.Windows.Forms.DataGridViewColumn%2CSystem.ComponentModel.ListSortDirection%29> 。 对于属性值为的列发生此事件时 <xref:System.Windows.Forms.DataGridViewColumn.SortMode%2A> <xref:System.Windows.Forms.DataGridViewColumnSortMode.Programmatic> ，必须通过属性自行显示排序标志符号 <xref:System.Windows.Forms.DataGridViewColumnHeaderCell.SortGlyphDirection%2A?displayProperty=nameWithType> 。  
  
 使用此事件可以使用一列或多列中的单元值对行进行排序。 使用 <xref:System.Windows.Forms.DataGridViewSortCompareEventArgs.CellValue1%2A> 和 <xref:System.Windows.Forms.DataGridViewSortCompareEventArgs.CellValue2%2A> 属性来比较属性中指定的列中的单元值 <xref:System.Windows.Forms.DataGridViewSortCompareEventArgs.Column%2A> 。 使用 <xref:System.Windows.Forms.DataGridViewSortCompareEventArgs.RowIndex1%2A> 和 <xref:System.Windows.Forms.DataGridViewSortCompareEventArgs.RowIndex2%2A> 属性可以通过集合访问其他列中的值 <xref:System.Windows.Forms.DataGridView.Rows%2A> 。  
  
 有关如何处理事件的详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。

## Examples  
 下面的代码示例演示如何 <xref:System.Windows.Forms.DataGridView.SortCompare> 在多列排序中使用。 此示例摘自 [如何：自定义 Windows 窗体 DataGridView 控件中的排序](/dotnet/framework/winforms/controls/how-to-customize-sorting-in-the-windows-forms-datagridview-control)中提供的一个更大的示例。  
  
 [!code-csharp[System.Windows.Forms.DataGridView.SortCompare#10](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridView.SortCompare/CS/form1.cs#10)]
 [!code-vb[System.Windows.Forms.DataGridView.SortCompare#10](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridView.SortCompare/VB/form1.vb#10)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DataGridViewSortCompareEventHandler" />
        <altmember cref="T:System.Windows.Forms.DataGridViewSortCompareEventArgs" />
        <altmember cref="M:System.Windows.Forms.DataGridView.OnSortCompare(System.Windows.Forms.DataGridViewSortCompareEventArgs)" />
        <altmember cref="P:System.Windows.Forms.DataGridViewColumn.SortMode" />
        <altmember cref="P:System.Windows.Forms.DataGridViewColumnHeaderCell.SortGlyphDirection" />
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
        <related type="Article" href="/dotnet/framework/winforms/controls/how-to-customize-sorting-in-the-windows-forms-datagridview-control">如何：自定义 Windows 窗体 DataGridView 控件中的排序方式</related>
      </Docs>
    </Member>
    <Member MemberName="Sorted">
      <MemberSignature Language="C#" Value="public event EventHandler Sorted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Sorted" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.Sorted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Sorted As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Sorted;" />
      <MemberSignature Language="F#" Value="member this.Sorted : EventHandler " Usage="member this.Sorted : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在 <see cref="T:System.Windows.Forms.DataGridView" /> 控件完成排序操作时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当 <xref:System.Windows.Forms.DataGridView.VirtualMode%2A> 属性设置为 `true` 并且控件按未绑定的列进行排序时，不会发生此事件。  
  
 有关如何处理事件的详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。

## Examples  
 下面的代码示例演示如何确保当前单元格在排序后可见。 此代码仅适用于未绑定的 <xref:System.Windows.Forms.DataGridView> 控件。 <xref:System.Windows.Forms.DataGridView>当控件绑定到外部数据源时，当前单元格不会在排序时自动保留。  
  
 若要运行此示例，请将以下代码粘贴到包含名为的的窗体中 <xref:System.Windows.Forms.DataGridView> `dataGridView1` 。 在 c # 中，还必须将 <xref:System.Windows.Forms.DataGridView.Sorted> 事件连接到事件处理程序。  
  
 [!code-csharp[System.Windows.Forms.DataGridViewMisc#150](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewMisc/CS/datagridviewmisc.cs#150)]
 [!code-vb[System.Windows.Forms.DataGridViewMisc#150](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewMisc/VB/datagridviewmisc.vb#150)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="SortedColumn">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataGridViewColumn SortedColumn { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.DataGridViewColumn SortedColumn" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.SortedColumn" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SortedColumn As DataGridViewColumn" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::DataGridViewColumn ^ SortedColumn { System::Windows::Forms::DataGridViewColumn ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SortedColumn : System.Windows.Forms.DataGridViewColumn" Usage="System.Windows.Forms.DataGridView.SortedColumn" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewColumn</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 <see cref="T:System.Windows.Forms.DataGridView" /> 内容的当前排序所依据的列。</summary>
        <value><see cref="T:System.Windows.Forms.DataGridView" /> 内容的当前排序所依据的 <see cref="T:System.Windows.Forms.DataGridViewColumn" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果 <xref:System.Windows.Forms.DataGridView> 未排序，则此属性将返回 `null` 。  
  
 当此属性指示的列的 <xref:System.Windows.Forms.DataGridViewColumn.SortMode%2A> 属性值为时 <xref:System.Windows.Forms.DataGridViewColumnSortMode.Automatic?displayProperty=nameWithType> ，它将基于属性的值显示排序标志符号 <xref:System.Windows.Forms.DataGridView.SortOrder%2A> 。  
  
 当列的 <xref:System.Windows.Forms.DataGridViewColumn.SortMode%2A> 属性值为时 <xref:System.Windows.Forms.DataGridViewColumnSortMode.Programmatic?displayProperty=nameWithType> ，必须通过属性自行显示排序标志符号 <xref:System.Windows.Forms.DataGridViewColumnHeaderCell.SortGlyphDirection%2A?displayProperty=nameWithType> 。  
  
> [!NOTE]
> 使用自定义排序对控件进行排序时，此属性的值没有意义。 有关自定义排序的详细信息，请参阅 <xref:System.Windows.Forms.DataGridView.Sort%28System.Collections.IComparer%29> 方法和 <xref:System.Windows.Forms.DataGridView.SortCompare> 事件。

## Examples  
 下面的代码示例演示如何 <xref:System.Windows.Forms.DataGridView.SortedColumn%2A> 在编程排序中使用属性。  
  
 [!code-csharp[System.Windows.Forms.DataGridViewProgrammaticSort#10](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewProgrammaticSort/CS/form1.cs#10)]
 [!code-vb[System.Windows.Forms.DataGridViewProgrammaticSort#10](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewProgrammaticSort/VB/form1.vb#10)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="SortOrder">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.SortOrder SortOrder { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.SortOrder SortOrder" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.SortOrder" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SortOrder As SortOrder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::SortOrder SortOrder { System::Windows::Forms::SortOrder get(); };" />
      <MemberSignature Language="F#" Value="member this.SortOrder : System.Windows.Forms.SortOrder" Usage="System.Windows.Forms.DataGridView.SortOrder" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.SortOrder</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示是按升序或降序对 <see cref="T:System.Windows.Forms.DataGridView" /> 控件中的项进行排序，还是不排序。</summary>
        <value><see cref="T:System.Windows.Forms.SortOrder" /> 值之一。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性用于确定当属性指定的列 <xref:System.Windows.Forms.DataGridView.SortedColumn%2A> 具有 <xref:System.Windows.Forms.DataGridViewColumn.SortMode%2A> 的属性值时，将显示哪种排序标志符号 <xref:System.Windows.Forms.DataGridViewColumnSortMode.Automatic> 。 当列的 <xref:System.Windows.Forms.DataGridViewColumn.SortMode%2A> 属性值为时 <xref:System.Windows.Forms.DataGridViewColumnSortMode.Programmatic> ，必须通过属性自行显示和隐藏排序标志符号 <xref:System.Windows.Forms.DataGridViewColumnHeaderCell.SortGlyphDirection%2A> 。 如果列的 <xref:System.Windows.Forms.DataGridViewColumn.SortMode%2A> 属性值为 <xref:System.Windows.Forms.DataGridViewColumnSortMode.NotSortable> ，则可以显示排序标志符号，但如果列自动调整大小，则不会为它保留空间。  
  
> [!NOTE]
> 使用自定义排序对控件进行排序时，此属性的值没有意义。 有关自定义排序的详细信息，请参阅 <xref:System.Windows.Forms.DataGridView.Sort%2A> 方法和 <xref:System.Windows.Forms.DataGridView.SortCompare> 事件。

## Examples  
 下面的代码示例演示如何 <xref:System.Windows.Forms.DataGridView.SortOrder%2A> 在编程排序中使用属性。  
  
 [!code-csharp[System.Windows.Forms.DataGridViewProgrammaticSort#10](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewProgrammaticSort/CS/form1.cs#10)]
 [!code-vb[System.Windows.Forms.DataGridViewProgrammaticSort#10](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewProgrammaticSort/VB/form1.vb#10)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="StandardTab">
      <MemberSignature Language="C#" Value="public bool StandardTab { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool StandardTab" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.StandardTab" />
      <MemberSignature Language="VB.NET" Value="Public Property StandardTab As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool StandardTab { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.StandardTab : bool with get, set" Usage="System.Windows.Forms.DataGridView.StandardTab" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示按 Tab 键是否会将焦点按 Tab 键顺序移到下一个控件，而不是将焦点移到控件中的下一个单元格。</summary>
        <value>如果按 Tab 键会将焦点按 Tab 键顺序移到下一个控件，为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果将此属性设置为 `false` ，则 TAB 键将焦点移动到单元格的网格中。 下表描述按下给定的 TAB 键组合时单元格焦点如何变化。  
  
|组合键|结果|  
|---------------------|------------|  
|Tab|如果 <xref:System.Windows.Forms.DataGridView.StandardTab%2A> 属性为 `false` ，则焦点将移动到行中的下一个单元格。 如果焦点位于行中的最后一个单元格，则焦点将移到下一行中的第一个单元格。 如果焦点位于中的最后一个单元格 <xref:System.Windows.Forms.DataGridView> ，则焦点按 tab 键顺序移到下一个控件。|  
|Shift+Tab|如果 <xref:System.Windows.Forms.DataGridView.StandardTab%2A> 为 `false` ，则焦点将移动到行中的上一个单元格。 如果焦点位于行中的第一个单元格，则焦点将移到上一行中的最后一个单元格。 如果焦点位于中的第一个单元格 <xref:System.Windows.Forms.DataGridView> ，则焦点按 tab 键顺序移到上一个控件。|  
|Ctrl+Tab|焦点按 tab 键顺序移到下一个控件。|  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="StyleChanged">
      <MemberSignature Language="C#" Value="public event EventHandler StyleChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler StyleChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.StyleChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StyleChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ StyleChanged;" />
      <MemberSignature Language="F#" Value="member this.StyleChanged : EventHandler " Usage="member this.StyleChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在控件样式更改时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此事件与此控件无关。  
  
 有关如何处理事件的详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.ISupportInitialize.BeginInit">
      <MemberSignature Language="C#" Value="void ISupportInitialize.BeginInit ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.ComponentModel.ISupportInitialize.BeginInit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.System#ComponentModel#ISupportInitialize#BeginInit" />
      <MemberSignature Language="VB.NET" Value="Sub BeginInit () Implements ISupportInitialize.BeginInit" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.ComponentModel.ISupportInitialize.BeginInit() = System::ComponentModel::ISupportInitialize::BeginInit;" />
      <MemberSignature Language="F#" Value="abstract member System.ComponentModel.ISupportInitialize.BeginInit : unit -&gt; unit&#xA;override this.System.ComponentModel.ISupportInitialize.BeginInit : unit -&gt; unit" Usage="dataGridView.System.ComponentModel.ISupportInitialize.BeginInit " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.ISupportInitialize.BeginInit</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>有关此成员的说明，请参见 <see cref="M:System.ComponentModel.ISupportInitialize.BeginInit" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此成员是显式接口成员的实现。 它只能在 <xref:System.Windows.Forms.DataGridView> 实例强制转换为实例时使用 <xref:System.ComponentModel.ISupportInitialize> 。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">已对此控件调用了此方法。</exception>
        <altmember cref="T:System.ComponentModel.ISupportInitialize" />
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.ISupportInitialize.EndInit">
      <MemberSignature Language="C#" Value="void ISupportInitialize.EndInit ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.ComponentModel.ISupportInitialize.EndInit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.System#ComponentModel#ISupportInitialize#EndInit" />
      <MemberSignature Language="VB.NET" Value="Sub EndInit () Implements ISupportInitialize.EndInit" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.ComponentModel.ISupportInitialize.EndInit() = System::ComponentModel::ISupportInitialize::EndInit;" />
      <MemberSignature Language="F#" Value="abstract member System.ComponentModel.ISupportInitialize.EndInit : unit -&gt; unit&#xA;override this.System.ComponentModel.ISupportInitialize.EndInit : unit -&gt; unit" Usage="dataGridView.System.ComponentModel.ISupportInitialize.EndInit " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.ISupportInitialize.EndInit</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>有关此成员的说明，请参见 <see cref="M:System.ComponentModel.ISupportInitialize.EndInit" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此成员是显式接口成员的实现。 它只能在 <xref:System.Windows.Forms.DataGridView> 实例强制转换为实例时使用 <xref:System.ComponentModel.ISupportInitialize> 。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.ISupportInitialize" />
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="Text">
      <MemberSignature Language="C#" Value="public override string Text { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Text" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.Text" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Text As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Text { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Text : string with get, set" Usage="System.Windows.Forms.DataGridView.Text" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Bindable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Bindable(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置与控件关联的文本。</summary>
        <value>与控件关联的文本。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性对于此控件无意义。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="TextChanged">
      <MemberSignature Language="C#" Value="public event EventHandler TextChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler TextChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.TextChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TextChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ TextChanged;" />
      <MemberSignature Language="F#" Value="member this.TextChanged : EventHandler " Usage="member this.TextChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当 <see cref="P:System.Windows.Forms.DataGridView.Text" /> 属性的值更改时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 尽管 <xref:System.Windows.Forms.DataGridView.Text%2A> 属性对于此控件无意义，但它的值可以更改，从而导致此事件发生。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="TopLeftHeaderCell">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataGridViewHeaderCell TopLeftHeaderCell { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.DataGridViewHeaderCell TopLeftHeaderCell" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.TopLeftHeaderCell" />
      <MemberSignature Language="VB.NET" Value="Public Property TopLeftHeaderCell As DataGridViewHeaderCell" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::DataGridViewHeaderCell ^ TopLeftHeaderCell { System::Windows::Forms::DataGridViewHeaderCell ^ get(); void set(System::Windows::Forms::DataGridViewHeaderCell ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TopLeftHeaderCell : System.Windows.Forms.DataGridViewHeaderCell with get, set" Usage="System.Windows.Forms.DataGridView.TopLeftHeaderCell" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewHeaderCell</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置位于 <see cref="T:System.Windows.Forms.DataGridView" /> 控件左上角的标题单元格。</summary>
        <value>位于 <see cref="T:System.Windows.Forms.DataGridViewHeaderCell" /> 左上角的 <see cref="T:System.Windows.Forms.DataGridView" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 通过设置此属性，可设置单元格的值，将快捷菜单与该单元关联，或执行可以在上执行的任何其他操作 <xref:System.Windows.Forms.DataGridViewHeaderCell> 。  
  
 在设计用于与从右到左的语言一起使用的应用程序中，此属性所表示的单元格通常位于右上角。

## Examples  
 下面的代码示例使用此属性在控件的左上角显示一个值 <xref:System.Windows.Forms.DataGridView> 。 此值在主/从方案中标记子表。 此示例是类概述主题中提供的一个更大示例的一部分 <xref:System.Windows.Forms.DataGridViewComboBoxColumn> 。  
  
 [!code-cpp[System.Windows.Forms.DataGridViewColumn_AllColumns_Bound_Employees#80](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewColumn_AllColumns_Bound_Employees/CPP/employees.cpp#80)]
 [!code-csharp[System.Windows.Forms.DataGridViewColumn_AllColumns_Bound_Employees#80](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewColumn_AllColumns_Bound_Employees/CS/employees.cs#80)]
 [!code-vb[System.Windows.Forms.DataGridViewColumn_AllColumns_Bound_Employees#80](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewColumn_AllColumns_Bound_Employees/VB/employees.vb#80)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="UpdateCellErrorText">
      <MemberSignature Language="C#" Value="public void UpdateCellErrorText (int columnIndex, int rowIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UpdateCellErrorText(int32 columnIndex, int32 rowIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.UpdateCellErrorText(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub UpdateCellErrorText (columnIndex As Integer, rowIndex As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UpdateCellErrorText(int columnIndex, int rowIndex);" />
      <MemberSignature Language="F#" Value="member this.UpdateCellErrorText : int * int -&gt; unit" Usage="dataGridView.UpdateCellErrorText (columnIndex, rowIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="columnIndex" Type="System.Int32" />
        <Parameter Name="rowIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="columnIndex">要更新的单元格的列索引，或者为 -1（指示行标题单元格）。</param>
        <param name="rowIndex">要更新的单元格的行索引，或者为 -1（指示列标题单元格）。</param>
        <summary>强制指定位置的单元格更新其错误文本。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 通过处理事件自行维护单元格错误文本时，请使用此方法 <xref:System.Windows.Forms.DataGridView.CellErrorTextNeeded> 。 更改指定单元格的存储错误文本时，请调用此方法。 这会使单元格无效， <xref:System.Windows.Forms.DataGridView> 并强制控件通过事件处理程序检索更新后的错误文本 <xref:System.Windows.Forms.DataGridView.CellErrorTextNeeded> 。  
  
 尽管可以使用此方法来更新标题单元格的错误，但列标题单元格不显示错误标志符号。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="columnIndex" /> 小于 -1 或大于控件中的列数减 1。  
  
- 或 - 
 <paramref name="rowIndex" /> 小于 -1 或大于控件中的行数减 1。</exception>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="UpdateCellValue">
      <MemberSignature Language="C#" Value="public void UpdateCellValue (int columnIndex, int rowIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UpdateCellValue(int32 columnIndex, int32 rowIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.UpdateCellValue(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub UpdateCellValue (columnIndex As Integer, rowIndex As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UpdateCellValue(int columnIndex, int rowIndex);" />
      <MemberSignature Language="F#" Value="member this.UpdateCellValue : int * int -&gt; unit" Usage="dataGridView.UpdateCellValue (columnIndex, rowIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="columnIndex" Type="System.Int32" />
        <Parameter Name="rowIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="columnIndex">具有新值的单元格的从零开始的列索引。</param>
        <param name="rowIndex">具有新值的单元格的从零开始的行索引。</param>
        <summary>强制该控件基于它的新值更新在指定位置显示的单元格，并应用当前有效的任何自动调整大小模式。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在虚拟模式下维护单元格值，并在事件处理程序外更新自定义数据缓存中的值时，请使用此方法 <xref:System.Windows.Forms.DataGridView.CellValuePushed> 。  
  
 此方法使单元格无效，并强制控件通过事件处理程序检索新值， <xref:System.Windows.Forms.DataGridView.CellValueNeeded> 并应用有效的任何自动调整大小模式。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="columnIndex" /> 小于 0 或大于控件中的列数减 1。  
  
- 或 - 
 <paramref name="rowIndex" /> 小于 0 或大于控件中的行数减 1。</exception>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="UpdateRowErrorText">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>强制一行或多行更新其错误文本。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="UpdateRowErrorText">
      <MemberSignature Language="C#" Value="public void UpdateRowErrorText (int rowIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UpdateRowErrorText(int32 rowIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.UpdateRowErrorText(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub UpdateRowErrorText (rowIndex As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UpdateRowErrorText(int rowIndex);" />
      <MemberSignature Language="F#" Value="member this.UpdateRowErrorText : int -&gt; unit" Usage="dataGridView.UpdateRowErrorText rowIndex" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rowIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="rowIndex">要更新的行的索引（从零开始）。</param>
        <summary>强制给定行索引处的行更新其错误文本。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当你通过处理事件自行维护行错误文本时，此方法非常有用 <xref:System.Windows.Forms.DataGridView.RowErrorTextNeeded> 。 当您更改指定行的存储错误文本时，请调用此方法。 这会强制 <xref:System.Windows.Forms.DataGridView> 控件通过事件处理程序检索更新后的文本 <xref:System.Windows.Forms.DataGridView.RowErrorTextNeeded> 。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="rowIndex" /> 不在 0 到控件中的行数减 1 的有效范围内。</exception>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="UpdateRowErrorText">
      <MemberSignature Language="C#" Value="public void UpdateRowErrorText (int rowIndexStart, int rowIndexEnd);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UpdateRowErrorText(int32 rowIndexStart, int32 rowIndexEnd) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.UpdateRowErrorText(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub UpdateRowErrorText (rowIndexStart As Integer, rowIndexEnd As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UpdateRowErrorText(int rowIndexStart, int rowIndexEnd);" />
      <MemberSignature Language="F#" Value="member this.UpdateRowErrorText : int * int -&gt; unit" Usage="dataGridView.UpdateRowErrorText (rowIndexStart, rowIndexEnd)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rowIndexStart" Type="System.Int32" />
        <Parameter Name="rowIndexEnd" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="rowIndexStart">要更新的一组行中第一行的索引（从零开始）。</param>
        <param name="rowIndexEnd">要更新的一组行中最后一行的索引（从零开始）。</param>
        <summary>强制给定范围中的行更新其错误文本。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当你通过处理事件自行维护行错误文本时，此方法非常有用 <xref:System.Windows.Forms.DataGridView.RowErrorTextNeeded> 。 当您更改指定行的存储错误文本时，请调用此方法。 这会强制 <xref:System.Windows.Forms.DataGridView> 控件通过事件处理程序检索更新后的文本 <xref:System.Windows.Forms.DataGridView.RowErrorTextNeeded> 。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="rowIndexStart" /> 不在 0 到控件中的行数减 1 的有效范围内。  
  
- 或 - 
 <paramref name="rowIndexEnd" /> 不在 0 到控件中的行数减 1 的有效范围内。  
  
- 或 - 
 <paramref name="rowIndexEnd" /> 小于 <paramref name="rowIndexStart" />。</exception>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="UpdateRowHeightInfo">
      <MemberSignature Language="C#" Value="public void UpdateRowHeightInfo (int rowIndex, bool updateToEnd);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UpdateRowHeightInfo(int32 rowIndex, bool updateToEnd) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.UpdateRowHeightInfo(System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub UpdateRowHeightInfo (rowIndex As Integer, updateToEnd As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UpdateRowHeightInfo(int rowIndex, bool updateToEnd);" />
      <MemberSignature Language="F#" Value="member this.UpdateRowHeightInfo : int * bool -&gt; unit" Usage="dataGridView.UpdateRowHeightInfo (rowIndex, updateToEnd)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rowIndex" Type="System.Int32" />
        <Parameter Name="updateToEnd" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="rowIndex">要更新的第一行的索引（从零开始）。</param>
        <param name="updateToEnd">如果要更新指定的行及其后面的所有行，则为 <see langword="true" />。</param>
        <summary>强制指定的一行或多行更新其高度信息。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当你使用和事件的处理程序来自行维护行高时，此方法非常有用 <xref:System.Windows.Forms.DataGridView.RowHeightInfoNeeded> <xref:System.Windows.Forms.DataGridView.RowHeightInfoPushed> 。 只要更改了事件处理程序外部存储的行高，就调用此方法 <xref:System.Windows.Forms.DataGridView.RowHeightInfoPushed> 。 这会强制 <xref:System.Windows.Forms.DataGridView> 控件通过事件处理程序检索更新后的高度信息 <xref:System.Windows.Forms.DataGridView.RowHeightInfoNeeded> 。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="rowIndex" /> 小于 0 且 <paramref name="updateToEnd" /> 为 <see langword="true" />。  
  
- 或 - 
 <paramref name="rowIndex" /> 小于 -1 且 <paramref name="updateToEnd" /> 为 <see langword="false" />。  
  
- 或 - 
 <paramref name="rowIndex" /> 大于 <see cref="P:System.Windows.Forms.DataGridView.Rows" /> 集合中的最高行索引。</exception>
        <altmember cref="E:System.Windows.Forms.DataGridView.RowHeightInfoNeeded" />
        <altmember cref="E:System.Windows.Forms.DataGridView.RowHeightInfoPushed" />
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="UserAddedRow">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewRowEventHandler UserAddedRow;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewRowEventHandler UserAddedRow" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.UserAddedRow" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event UserAddedRow As DataGridViewRowEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::DataGridViewRowEventHandler ^ UserAddedRow;" />
      <MemberSignature Language="F#" Value="member this.UserAddedRow : System.Windows.Forms.DataGridViewRowEventHandler " Usage="member this.UserAddedRow : System.Windows.Forms.DataGridViewRowEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewRowEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在用户完成向 <see cref="T:System.Windows.Forms.DataGridView" /> 控件中添加行时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关如何处理事件的详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。

## Examples  
 下面的代码示例演示如何使用 <xref:System.Windows.Forms.DataGridView.UserAddedRow> 事件来更新一个标签，其中显示中的总项数 <xref:System.Windows.Forms.DataGridView> 。 此示例是事件中提供的一个更大示例的一部分 <xref:System.Windows.Forms.DataGridView.SelectionChanged> 。  
  
 [!code-csharp[System.Windows.Forms.DataGridViewSelectionSum#40](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewSelectionSum/CS/form1.cs#40)]
 [!code-vb[System.Windows.Forms.DataGridViewSelectionSum#40](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewSelectionSum/VB/form1.vb#40)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="UserDeletedRow">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewRowEventHandler UserDeletedRow;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewRowEventHandler UserDeletedRow" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.UserDeletedRow" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event UserDeletedRow As DataGridViewRowEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::DataGridViewRowEventHandler ^ UserDeletedRow;" />
      <MemberSignature Language="F#" Value="member this.UserDeletedRow : System.Windows.Forms.DataGridViewRowEventHandler " Usage="member this.UserDeletedRow : System.Windows.Forms.DataGridViewRowEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewRowEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在用户完成从 <see cref="T:System.Windows.Forms.DataGridView" /> 控件中删除行时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关如何处理事件的详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。

## Examples  
 下面的代码示例演示如何使用此成员。 在此示例中，事件处理程序报告事件的发生 <xref:System.Windows.Forms.DataGridView.UserDeletedRow> 。 此报表可帮助你了解何时发生事件，并可帮助你进行调试。 若要报告多个事件或频繁发生的事件，请考虑 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 将消息替换为多行或将其追加到多行 <xref:System.Windows.Forms.TextBox> 。  
  
 若要运行示例代码，请将其粘贴到包含名为的类型的实例的项目中 <xref:System.Windows.Forms.DataGridView> `DataGridView1` 。 然后，确保事件处理程序与事件相关联 <xref:System.Windows.Forms.DataGridView.UserDeletedRow> 。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#368](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#368)]
 [!code-vb[System.Windows.Forms.EventExamples#368](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#368)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="UserDeletingRow">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DataGridViewRowCancelEventHandler UserDeletingRow;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DataGridViewRowCancelEventHandler UserDeletingRow" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.DataGridView.UserDeletingRow" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event UserDeletingRow As DataGridViewRowCancelEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::DataGridViewRowCancelEventHandler ^ UserDeletingRow;" />
      <MemberSignature Language="F#" Value="member this.UserDeletingRow : System.Windows.Forms.DataGridViewRowCancelEventHandler " Usage="member this.UserDeletingRow : System.Windows.Forms.DataGridViewRowCancelEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewRowCancelEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在用户从 <see cref="T:System.Windows.Forms.DataGridView" /> 控件中删除行时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 可以取消此事件，以防行删除被完成。  
  
 有关如何处理事件的详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。

## Examples  
 下面的代码示例演示了在选择中包含 "起始余额" 行时，如何使用 <xref:System.Windows.Forms.DataGridView.UserDeletingRow> 事件取消从中删除行 <xref:System.Windows.Forms.DataGridView> 。 此示例是事件中提供的一个更大示例的一部分 <xref:System.Windows.Forms.DataGridView.SelectionChanged> 。  
  
 [!code-csharp[System.Windows.Forms.DataGridViewSelectionSum#20](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewSelectionSum/CS/form1.cs#20)]
 [!code-vb[System.Windows.Forms.DataGridViewSelectionSum#20](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewSelectionSum/VB/form1.vb#20)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="UserSetCursor">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Cursor UserSetCursor { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.Cursor UserSetCursor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.UserSetCursor" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UserSetCursor As Cursor" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::Cursor ^ UserSetCursor { System::Windows::Forms::Cursor ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.UserSetCursor : System.Windows.Forms.Cursor" Usage="System.Windows.Forms.DataGridView.UserSetCursor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Cursor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 <see cref="P:System.Windows.Forms.Control.Cursor" /> 属性的默认值或用户指定值。</summary>
        <value>一个 <see cref="T:System.Windows.Forms.Cursor" />，表示 <see cref="P:System.Windows.Forms.Control.Cursor" /> 属性的正常值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 尽管可以设置属性的值，但 <xref:System.Windows.Forms.Control.Cursor%2A> 它的值会根据鼠标指针的位置而更改。 使用此属性可以检索 <xref:System.Windows.Forms.Control.Cursor%2A> 其正常状态下的属性的值，即其默认值或在 "代码" 中指定的值。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.Cursor" />
        <altmember cref="T:System.Windows.Forms.Cursor" />
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="VerticalScrollBar">
      <MemberSignature Language="C#" Value="protected System.Windows.Forms.ScrollBar VerticalScrollBar { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ScrollBar VerticalScrollBar" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.VerticalScrollBar" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property VerticalScrollBar As ScrollBar" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Windows::Forms::ScrollBar ^ VerticalScrollBar { System::Windows::Forms::ScrollBar ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.VerticalScrollBar : System.Windows.Forms.ScrollBar" Usage="System.Windows.Forms.DataGridView.VerticalScrollBar" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ScrollBar</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取控件的垂直滚动条。</summary>
        <value>一个 <see cref="T:System.Windows.Forms.ScrollBar" />，表示垂直滚动条。</value>
        <remarks>To be added.</remarks>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="VerticalScrollingOffset">
      <MemberSignature Language="C#" Value="public int VerticalScrollingOffset { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 VerticalScrollingOffset" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.VerticalScrollingOffset" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property VerticalScrollingOffset As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int VerticalScrollingOffset { int get(); };" />
      <MemberSignature Language="F#" Value="member this.VerticalScrollingOffset : int" Usage="System.Windows.Forms.DataGridView.VerticalScrollingOffset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取控件垂直滚动的像素数。</summary>
        <value>控件垂直滚动的像素数。</value>
        <remarks>To be added.</remarks>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="VirtualMode">
      <MemberSignature Language="C#" Value="public bool VirtualMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool VirtualMode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridView.VirtualMode" />
      <MemberSignature Language="VB.NET" Value="Public Property VirtualMode As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool VirtualMode { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.VirtualMode : bool with get, set" Usage="System.Windows.Forms.DataGridView.VirtualMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示你是否为 <see cref="T:System.Windows.Forms.DataGridView" /> 控件提供了自己的数据管理操作。</summary>
        <value>如果<see langword="true" /> 使用你所提供的数据管理操作，则为 <see cref="T:System.Windows.Forms.DataGridView" /> ；否则为 <see langword="false" />。 默认值为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 虚拟模式适用于大数据存储。 当 <xref:System.Windows.Forms.DataGridView.VirtualMode%2A> 属性为时 `true` ，您创建 <xref:System.Windows.Forms.DataGridView> 具有设置的行数和列数的，然后处理 <xref:System.Windows.Forms.DataGridView.CellValueNeeded> 事件以填充单元格。 虚拟模式要求基础数据缓存的实现基于用户的操作来处理单元的填充、编辑和删除 <xref:System.Windows.Forms.DataGridView> 。 有关实现虚拟模式的详细信息，请参阅 [如何：在 Windows 窗体 DataGridView 控件中实现虚拟模式](/dotnet/framework/winforms/controls/how-to-implement-virtual-mode-in-the-windows-forms-datagridview-control)。  
  
 当控件处于绑定模式时，必须使用虚拟模式来维护未绑定列的值 <xref:System.Windows.Forms.DataGridView> 。 不支持在绑定模式下按未绑定列进行排序。

## Examples  
 下面的代码示例使用虚拟模式创建正整数表。  
  
 [!code-csharp[System.Windows.Forms.DataGridView._Virtual#0](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridView._Virtual/CS/virtual.cs#0)]
 [!code-vb[System.Windows.Forms.DataGridView._Virtual#0](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridView._Virtual/VB/virtual.vb#0)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
    <Member MemberName="WndProc">
      <MemberSignature Language="C#" Value="protected override void WndProc (ref System.Windows.Forms.Message m);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void WndProc(valuetype System.Windows.Forms.Message&amp; m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridView.WndProc(System.Windows.Forms.Message@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub WndProc (ByRef m As Message)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void WndProc(System::Windows::Forms::Message % m);" />
      <MemberSignature Language="F#" Value="override this.WndProc : Message -&gt; unit" Usage="dataGridView.WndProc m" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Windows.Forms.Message" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="m">通过引用传递的 <see cref="T:System.Windows.Forms.Message" />，表示要处理的窗口消息。</param>
        <summary>处理窗口消息。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关详细信息，请参阅 <xref:System.Windows.Forms.Control.WndProc%2A?displayProperty=nameWithType> 基类上的方法。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/winforms/controls/datagridview-control-windows-forms">DataGridView 控件（Windows 窗体）</related>
      </Docs>
    </Member>
  </Members>
</Type>
