<Type Name="ListBox" FullName="System.Windows.Forms.ListBox">
  <Metadata><Meta Name="ms.openlocfilehash" Value="b35e11b9de7617a03608fd5e40d5a8122dc2b580" /><Meta Name="ms.sourcegitcommit" Value="11d168140aa8fade0768c2a9dde3e3bcacfdfb7d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="05/27/2020" /><Meta Name="ms.locfileid" Value="83943921" /></Metadata><TypeSignature Language="C#" Value="public class ListBox : System.Windows.Forms.ListControl" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ListBox extends System.Windows.Forms.ListControl" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.ListBox" />
  <TypeSignature Language="VB.NET" Value="Public Class ListBox&#xA;Inherits ListControl" />
  <TypeSignature Language="C++ CLI" Value="public ref class ListBox : System::Windows::Forms::ListControl" />
  <TypeSignature Language="F#" Value="type ListBox = class&#xA;    inherit ListControl" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Forms.ListControl</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0;dotnet-plat-ext-5.0">
      <AttributeName>System.ComponentModel.DefaultBindingProperty("SelectedValue")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("SelectedIndexChanged")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("Items")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0;dotnet-plat-ext-5.0">
      <AttributeName>System.ComponentModel.Designer("System.Windows.Forms.Design.ListBoxDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0;dotnet-plat-ext-5.0">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1">
      <AttributeName>System.ComponentModel.Designer("System.Windows.Forms.Design.ListBoxDesigner, System.Design, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
      <AttributeName>System.ComponentModel.Designer("System.Windows.Forms.Design.ListBoxDesigner, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0;dotnet-plat-ext-5.0">
      <AttributeName>System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.AutoDispatch)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>表示用于显示项列表的 Windows 控件。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用 "<xref:System.Windows.Forms.ListBox>" 控件，可以显示用户可以通过单击选择的项目列表。 <xref:System.Windows.Forms.ListBox> 控件可以使用 <xref:System.Windows.Forms.ListBox.SelectionMode%2A> 属性提供单个或多个选择。 <xref:System.Windows.Forms.ListBox> 还提供了 <xref:System.Windows.Forms.ListBox.MultiColumn%2A> 属性，以允许在列中显示项，而不是直接显示项的垂直列表。 这样，控件可以显示更多可见项，用户不再需要滚动到项。  
  
 通常，Windows 会处理绘制要在 <xref:System.Windows.Forms.ListBox>中显示的项的任务。 您可以使用 <xref:System.Windows.Forms.ListBox.DrawMode%2A> 属性，处理 <xref:System.Windows.Forms.ListBox.MeasureItem> 并 <xref:System.Windows.Forms.ListBox.DrawItem> 事件，以便您可以重写 Windows 提供的自动绘图并自己绘制项。 您可以使用所有者描述的 <xref:System.Windows.Forms.ListBox> 控件来显示可变高度项、图像，或者为列表中每一项的文本显示不同的颜色或字体。 <xref:System.Windows.Forms.ListBox.HorizontalExtent%2A> 属性，<xref:System.Windows.Forms.ListBox.GetItemHeight%2A>和 <xref:System.Windows.Forms.ListBox.GetItemRectangle%2A> 还有助于您绘制自己的项。  
  
 除了显示和选择功能外，<xref:System.Windows.Forms.ListBox> 还提供了一些功能，使您能够有效地将项添加到 <xref:System.Windows.Forms.ListBox> 并在列表的项中查找文本。 使用 <xref:System.Windows.Forms.ListBox.BeginUpdate%2A> 和 <xref:System.Windows.Forms.ListBox.EndUpdate%2A> 方法，您可以将大量的项添加到 <xref:System.Windows.Forms.ListBox>，而不会在每次向列表中添加项时重新绘制控件。 使用 <xref:System.Windows.Forms.ListBox.FindString%2A> 和 <xref:System.Windows.Forms.ListBox.FindStringExact%2A> 方法，您可以搜索列表中包含特定搜索字符串的项。  
  
 <xref:System.Windows.Forms.ListBox.Items%2A>、<xref:System.Windows.Forms.ListBox.SelectedItems%2A>和 <xref:System.Windows.Forms.ListBox.SelectedIndices%2A> 属性提供对 <xref:System.Windows.Forms.ListBox>所使用的三个集合的访问。 下表概述了 <xref:System.Windows.Forms.ListBox> 在控件中使用的三个集合。  
  
|集合类|在 <xref:System.Windows.Forms.ListBox> 中使用|  
|----------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------|  
|<xref:System.Windows.Forms.ListBox.ObjectCollection>|包含 <xref:System.Windows.Forms.ListBox> 控件中包含的所有项。|  
|<xref:System.Windows.Forms.ListBox.SelectedObjectCollection>|包含选定项的集合，这些项是 <xref:System.Windows.Forms.ListBox> 控件中包含的项的子集。|  
|<xref:System.Windows.Forms.ListBox.SelectedIndexCollection>|包含所选索引的集合，该集合是 <xref:System.Windows.Forms.ListBox.ObjectCollection>的索引的子集。 这些索引指定选定的项。|  
  
 以下三个示例演示了 <xref:System.Windows.Forms.ListBox> 类支持的三个索引集合。  
  
 下表显示了一个示例，该示例演示了 <xref:System.Windows.Forms.ListBox.ObjectCollection> 如何在 <xref:System.Windows.Forms.ListBox>示例中存储 <xref:System.Windows.Forms.ListBox> 的项以及其选择状态。  
  
|Index|项|列表框中的选择状态|  
|-----------|----------|----------------------------------------|  
|0|object1|未选定|  
|1|object2|已选定|  
|2|object3|未选定|  
|3|object4|已选定|  
|4|object5|已选定|  
  
 根据上表中显示的 <xref:System.Windows.Forms.ListBox.ObjectCollection>，此表显示了 <xref:System.Windows.Forms.ListBox.SelectedObjectCollection> 的显示方式。  
  
|Index|项|  
|-----------|----------|  
|0|object2|  
|1|object4|  
|2|object5|  
  
 根据上表中显示的 <xref:System.Windows.Forms.ListBox.ObjectCollection>，此表显示了 <xref:System.Windows.Forms.ListBox.SelectedIndexCollection> 的显示方式。  
  
|Index|项的索引|  
|-----------|-------------------|  
|0|1|  
|1|3|  
|2|4|  
  
 通过 <xref:System.Windows.Forms.ListBox.ObjectCollection> 类的 <xref:System.Windows.Forms.ListBox.ObjectCollection.Add%2A> 方法，你可以将项添加到 <xref:System.Windows.Forms.ListBox>。 将成员添加到 <xref:System.Windows.Forms.ListBox>时，<xref:System.Windows.Forms.ListBox.ObjectCollection.Add%2A> 方法可接受任何对象。 将对象添加到 <xref:System.Windows.Forms.ListBox>时，控件将使用对象的 <xref:System.Object.ToString%2A> 方法中定义的文本，除非在 <xref:System.Windows.Forms.ListControl.DisplayMember%2A> 属性中指定了该对象中的成员名称。 除了使用 <xref:System.Windows.Forms.ListBox.ObjectCollection> 类的 <xref:System.Windows.Forms.ListBox.ObjectCollection.Add%2A> 方法添加项外，还可以使用 <xref:System.Windows.Forms.ListControl> 类的 <xref:System.Windows.Forms.ListControl.DataSource%2A> 属性添加项。  
  
> [!NOTE]
>  如果在基 Windows 窗体上有 <xref:System.Windows.Forms.ListBox>、<xref:System.Windows.Forms.ComboBox>或 <xref:System.Windows.Forms.CheckedListBox>，并且想要在派生的 Windows 窗体中修改这些控件的字符串集合，则基本 Windows 窗体中这些控件的字符串集合必须为空。 如果字符串集合不为空，则当您派生另一个 Windows 窗体时，它们将变为只读。  
  
   
  
## Examples  
 下面的代码示例演示如何创建一个 <xref:System.Windows.Forms.ListBox> 控件，该控件在列中显示多个项，并且可以在控件的列表中选择多个项。 示例的代码使用 <xref:System.Windows.Forms.ListBox.ObjectCollection> 类的 <xref:System.Windows.Forms.ListBox.ObjectCollection.Add%2A> 方法将50项添加到 <xref:System.Windows.Forms.ListBox>，然后使用 <xref:System.Windows.Forms.ListBox.SetSelected%2A> 方法从列表中选择三项。 然后，该代码通过 <xref:System.Windows.Forms.ListBox.SelectedIndices%2A> 属性，从 <xref:System.Windows.Forms.ListBox.SelectedObjectCollection> 集合、<xref:System.Windows.Forms.ListBox.SelectedItems%2A> 属性和 <xref:System.Windows.Forms.ListBox.SelectedIndexCollection>显示值。 此示例要求代码位于 <xref:System.Windows.Forms.Form>的和中。  
  
 [!code-cpp[Classic ListBox Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic ListBox Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ListBox Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic ListBox Example/CS/source.cs#1)]
 [!code-vb[Classic ListBox Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic ListBox Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ListBox ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ListBox();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Windows.Forms.ListBox" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例演示如何创建一个 <xref:System.Windows.Forms.ListBox> 控件，该控件在列中显示多个项，并且可以在控件的列表中选择多个项。 示例的代码使用 <xref:System.Windows.Forms.ListBox.ObjectCollection> 类的 <xref:System.Windows.Forms.ListBox.ObjectCollection.Add%2A> 方法将50项添加到 <xref:System.Windows.Forms.ListBox>，然后使用 <xref:System.Windows.Forms.ListBox.SetSelected%2A> 方法从列表中选择三项。 然后，该代码通过 <xref:System.Windows.Forms.ListBox.SelectedIndices%2A> 属性，从 <xref:System.Windows.Forms.ListBox.SelectedObjectCollection> 集合、<xref:System.Windows.Forms.ListBox.SelectedItems%2A> 属性和 <xref:System.Windows.Forms.ListBox.SelectedIndexCollection>显示值。 此示例要求代码位于 <xref:System.Windows.Forms.Form>的和中。  
  
 [!code-cpp[Classic ListBox Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic ListBox Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ListBox Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic ListBox Example/CS/source.cs#1)]
 [!code-vb[Classic ListBox Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic ListBox Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddItemsCore">
      <MemberSignature Language="C#" Value="protected virtual void AddItemsCore (object[] value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void AddItemsCore(object[] value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.AddItemsCore(System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub AddItemsCore (value As Object())" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void AddItemsCore(cli::array &lt;System::Object ^&gt; ^ value);" />
      <MemberSignature Language="F#" Value="abstract member AddItemsCore : obj[] -&gt; unit&#xA;override this.AddItemsCore : obj[] -&gt; unit" Usage="listBox.AddItemsCore value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.1;net-5.0;dotnet-plat-ext-5.0">
          <AttributeName>System.Obsolete("This method has been deprecated.  There is no replacement.  http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="value">一个 对象的数组。</param>
        <summary>此成员已过时，且无替代项。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowSelection">
      <MemberSignature Language="C#" Value="protected override bool AllowSelection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowSelection" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.AllowSelection" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property AllowSelection As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property bool AllowSelection { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.AllowSelection : bool" Usage="System.Windows.Forms.ListBox.AllowSelection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示 <see cref="T:System.Windows.Forms.ListBox" /> 当前是否启用了列表项的选择。</summary>
        <value>如果 <see cref="T:System.Windows.Forms.SelectionMode" /> 不是 <see cref="F:System.Windows.Forms.SelectionMode.None" />，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BackColor">
      <MemberSignature Language="C#" Value="public override System.Drawing.Color BackColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color BackColor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.BackColor" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property BackColor As Color" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Drawing::Color BackColor { System::Drawing::Color get(); void set(System::Drawing::Color value); };" />
      <MemberSignature Language="F#" Value="member this.BackColor : System.Drawing.Color with get, set" Usage="System.Windows.Forms.ListBox.BackColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置控件的背景色。</summary>
        <value>表示控件背景色的 <see cref="T:System.Drawing.Color" />。 默认为 <see cref="P:System.Windows.Forms.Control.DefaultBackColor" /> 属性的值。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BackgroundImage">
      <MemberSignature Language="C#" Value="public override System.Drawing.Image BackgroundImage { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Drawing.Image BackgroundImage" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.BackgroundImage" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property BackgroundImage As Image" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Drawing::Image ^ BackgroundImage { System::Drawing::Image ^ get(); void set(System::Drawing::Image ^ value); };" />
      <MemberSignature Language="F#" Value="member this.BackgroundImage : System.Drawing.Image with get, set" Usage="System.Windows.Forms.ListBox.BackgroundImage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Image</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>此属性与此类无关。</summary>
        <value>窗体的背景图像。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性与此类无关。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BackgroundImageChanged">
      <MemberSignature Language="C#" Value="public event EventHandler BackgroundImageChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler BackgroundImageChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListBox.BackgroundImageChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event BackgroundImageChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ BackgroundImageChanged;" />
      <MemberSignature Language="F#" Value="member this.BackgroundImageChanged : EventHandler " Usage="member this.BackgroundImageChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在标签的 <see cref="P:System.Windows.Forms.ListBox.BackgroundImage" /> 属性更改时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此事件与此类无关。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BackgroundImageLayout">
      <MemberSignature Language="C#" Value="public override System.Windows.Forms.ImageLayout BackgroundImageLayout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.ImageLayout BackgroundImageLayout" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.BackgroundImageLayout" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property BackgroundImageLayout As ImageLayout" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Windows::Forms::ImageLayout BackgroundImageLayout { System::Windows::Forms::ImageLayout get(); void set(System::Windows::Forms::ImageLayout value); };" />
      <MemberSignature Language="F#" Value="member this.BackgroundImageLayout : System.Windows.Forms.ImageLayout with get, set" Usage="System.Windows.Forms.ListBox.BackgroundImageLayout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0;dotnet-plat-ext-5.0">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0;dotnet-plat-ext-5.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ImageLayout</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>按照 <see cref="T:System.Windows.Forms.ListBox" /> 枚举中的定义获取或设置 <see cref="T:System.Windows.Forms.ImageLayout" /> 的背景图像布局。</summary>
        <value><see cref="T:System.Windows.Forms.ImageLayout" /> 值之一。 值为 <see langword="Center" />、<see langword="None" />、<see langword="Stretch" />、<see langword="Tile" /> 或 <see langword="Zoom" />。 默认值为 <see langword="Center" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性与此类无关。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">指定的枚举值不存在。</exception>
      </Docs>
    </Member>
    <Member MemberName="BackgroundImageLayoutChanged">
      <MemberSignature Language="C#" Value="public event EventHandler BackgroundImageLayoutChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler BackgroundImageLayoutChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListBox.BackgroundImageLayoutChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event BackgroundImageLayoutChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ BackgroundImageLayoutChanged;" />
      <MemberSignature Language="F#" Value="member this.BackgroundImageLayoutChanged : EventHandler " Usage="member this.BackgroundImageLayoutChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0;dotnet-plat-ext-5.0">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0;dotnet-plat-ext-5.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当 <see cref="P:System.Windows.Forms.ListBox.BackgroundImageLayout" /> 属性更改时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此事件与此类无关。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginUpdate">
      <MemberSignature Language="C#" Value="public void BeginUpdate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BeginUpdate() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.BeginUpdate" />
      <MemberSignature Language="VB.NET" Value="Public Sub BeginUpdate ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BeginUpdate();" />
      <MemberSignature Language="F#" Value="member this.BeginUpdate : unit -&gt; unit" Usage="listBox.BeginUpdate " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>当向 <see cref="T:System.Windows.Forms.ListBox" /> 中一次添加一个项时，通过防止该控件绘图来维护性能，直到调用 <see cref="M:System.Windows.Forms.ListBox.EndUpdate" /> 方法为止。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 将多个项添加到 <xref:System.Windows.Forms.ListBox> 的首选方法是使用 <xref:System.Windows.Forms.ListBox.ObjectCollection> 类的 <xref:System.Windows.Forms.ListBox.ObjectCollection.AddRange%2A> 方法（通过 <xref:System.Windows.Forms.ListBox>的 <xref:System.Windows.Forms.ListBox.Items%2A> 属性）。 这使您可以在单个操作中将一组项添加到列表中。 但是，如果你想要使用 <xref:System.Windows.Forms.ListBox.ObjectCollection> 类的 <xref:System.Windows.Forms.ListBox.ObjectCollection.Add%2A> 方法一次添加一个项，则可以使用 <xref:System.Windows.Forms.ListBox.BeginUpdate%2A> 方法来防止控件在每次向列表中添加项时重新绘制 <xref:System.Windows.Forms.ListBox>。 完成向列表中添加项的任务后，调用 <xref:System.Windows.Forms.ListBox.EndUpdate%2A> 方法，以允许 <xref:System.Windows.Forms.ListBox> 重绘。 当向列表中添加大量项时，这种添加项的方法可能会阻止 flickered 的 <xref:System.Windows.Forms.ListBox> 绘图。  
  
   
  
## Examples  
 下面的代码示例使用 <xref:System.Windows.Forms.ListBox.BeginUpdate%2A> 和 <xref:System.Windows.Forms.ListBox.EndUpdate%2A> 方法，同时将5000项添加到 <xref:System.Windows.Forms.ListBox>。 此示例要求已将名为 `listBox1`<xref:System.Windows.Forms.ListBox> 控件添加到 <xref:System.Windows.Forms.Form>，并将此方法放置在窗体中并从其调用。  
  
 [!code-cpp[Classic ListBox.BeginUpdate Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic ListBox.BeginUpdate Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ListBox.BeginUpdate Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic ListBox.BeginUpdate Example/CS/source.cs#1)]
 [!code-vb[Classic ListBox.BeginUpdate Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic ListBox.BeginUpdate Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.ListBox.EndUpdate" />
      </Docs>
    </Member>
    <Member MemberName="BorderStyle">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.BorderStyle BorderStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.BorderStyle BorderStyle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.BorderStyle" />
      <MemberSignature Language="VB.NET" Value="Public Property BorderStyle As BorderStyle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::BorderStyle BorderStyle { System::Windows::Forms::BorderStyle get(); void set(System::Windows::Forms::BorderStyle value); };" />
      <MemberSignature Language="F#" Value="member this.BorderStyle : System.Windows.Forms.BorderStyle with get, set" Usage="System.Windows.Forms.ListBox.BorderStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(-504)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.BorderStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置在 <see cref="T:System.Windows.Forms.ListBox" /> 四周绘制的边框的类型。</summary>
        <value><see cref="T:System.Windows.Forms.BorderStyle" /> 值之一。 默认为 <see cref="F:System.Windows.Forms.BorderStyle.Fixed3D" />。</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">该值不是 <see cref="T:System.Windows.Forms.BorderStyle" /> 值之一。</exception>
        <altmember cref="T:System.Windows.Forms.BorderStyle" />
      </Docs>
    </Member>
    <Member MemberName="ClearSelected">
      <MemberSignature Language="C#" Value="public void ClearSelected ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClearSelected() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.ClearSelected" />
      <MemberSignature Language="VB.NET" Value="Public Sub ClearSelected ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ClearSelected();" />
      <MemberSignature Language="F#" Value="member this.ClearSelected : unit -&gt; unit" Usage="listBox.ClearSelected " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>取消选择 <see cref="T:System.Windows.Forms.ListBox" /> 中的所有项。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 调用此方法等效于将 <xref:System.Windows.Forms.ListBox.SelectedIndex%2A> 属性设置为负一（-1）。 您可以使用此方法快速取消选择列表中的所有项。  
  
   
  
## Examples  
 下面的代码示例演示如何将 <xref:System.Windows.Forms.ListBox.SelectedIndex%2A> 属性与 <xref:System.Windows.Forms.ListBox.TopIndex%2A> 属性一起使用，以将当前选定项移到 <xref:System.Windows.Forms.ListBox>显示区域中项列表的顶部。 该示例还演示了如何使用 <xref:System.Windows.Forms.ListBox.ObjectCollection?displayProperty=nameWithType> 类的 <xref:System.Windows.Forms.ListBox.ObjectCollection.RemoveAt%2A> 方法删除项，以及如何使用 <xref:System.Windows.Forms.ListBox.ClearSelected%2A> 方法清除所有项选择。 代码首先将 <xref:System.Windows.Forms.ListBox> 中当前选定的项移动到列表的顶部。 然后，该代码移除当前选定项之前的所有项，并清除 <xref:System.Windows.Forms.ListBox>中的所有选择。 此示例要求将包含项的 <xref:System.Windows.Forms.ListBox> 添加到窗体中，并且当前在 <xref:System.Windows.Forms.ListBox>中选择了该项。  
  
 [!code-cpp[ListBox.SelectedIndex#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListBox.SelectedIndex/CPP/form1.cpp#1)]
 [!code-csharp[ListBox.SelectedIndex#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListBox.SelectedIndex/CS/form1.cs#1)]
 [!code-vb[ListBox.SelectedIndex#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListBox.SelectedIndex/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ListBox.SelectedIndex" />
      </Docs>
    </Member>
    <Member MemberName="Click">
      <MemberSignature Language="C#" Value="public event EventHandler Click;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Click" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListBox.Click" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Click As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Click;" />
      <MemberSignature Language="F#" Value="member this.Click : EventHandler " Usage="member this.Click : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0;dotnet-plat-ext-5.0">
          <AttributeName>System.ComponentModel.Browsable(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0;dotnet-plat-ext-5.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Always)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在单击 <see cref="T:System.Windows.Forms.ListBox" /> 控件时发生。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ColumnWidth">
      <MemberSignature Language="C#" Value="public int ColumnWidth { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ColumnWidth" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.ColumnWidth" />
      <MemberSignature Language="VB.NET" Value="Public Property ColumnWidth As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ColumnWidth { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.ColumnWidth : int with get, set" Usage="System.Windows.Forms.ListBox.ColumnWidth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置多列 <see cref="T:System.Windows.Forms.ListBox" /> 中列的宽度。</summary>
        <value>控件中每列的宽度（以像素为单位）。 默认值为 0。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果将该值设置为零（0），则将为每个列分配一个默认宽度。 如果 <xref:System.Windows.Forms.ListBox> 是多列 <xref:System.Windows.Forms.ListBox>，则此属性返回列表中每一列的当前宽度。 您可以使用此属性来确保多列 <xref:System.Windows.Forms.ListBox> 中的每一列都可以正确地显示其项。  
  
   
  
## Examples  
 下面的代码示例演示了一个简单的两列 <xref:System.Windows.Forms.ListBox>。  
  
 [!code-csharp[System.Windows.Forms.ListBox.MultiColumn#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListBox.MultiColumn/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ListBox.MultiColumn#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListBox.MultiColumn/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">给此属性分配一个小于零的值。</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateAccessibilityInstance">
      <MemberSignature Language="C#" Value="protected override System.Windows.Forms.AccessibleObject CreateAccessibilityInstance ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Forms.AccessibleObject CreateAccessibilityInstance() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.CreateAccessibilityInstance" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CreateAccessibilityInstance () As AccessibleObject" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Forms::AccessibleObject ^ CreateAccessibilityInstance();" />
      <MemberSignature Language="F#" Value="override this.CreateAccessibilityInstance : unit -&gt; System.Windows.Forms.AccessibleObject" Usage="listBox.CreateAccessibilityInstance " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.AccessibleObject</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>为该控件新建一个可访问性对象。</summary>
        <returns>该控件的可访问性对象。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateItemCollection">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.Forms.ListBox.ObjectCollection CreateItemCollection ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Windows.Forms.ListBox/ObjectCollection CreateItemCollection() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.CreateItemCollection" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function CreateItemCollection () As ListBox.ObjectCollection" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Windows::Forms::ListBox::ObjectCollection ^ CreateItemCollection();" />
      <MemberSignature Language="F#" Value="abstract member CreateItemCollection : unit -&gt; System.Windows.Forms.ListBox.ObjectCollection&#xA;override this.CreateItemCollection : unit -&gt; System.Windows.Forms.ListBox.ObjectCollection" Usage="listBox.CreateItemCollection " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListBox+ObjectCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>创建项集合的新实例。</summary>
        <returns>表示新项集合的 <see cref="T:System.Windows.Forms.ListBox.ObjectCollection" />。</returns>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides"><para>可以在派生类中重写此项，以提供不同的集合来存储项。</para></block>
        <altmember cref="T:System.Windows.Forms.ListBox.ObjectCollection" />
      </Docs>
    </Member>
    <Member MemberName="CreateParams">
      <MemberSignature Language="C#" Value="protected override System.Windows.Forms.CreateParams CreateParams { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.CreateParams CreateParams" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.CreateParams" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property CreateParams As CreateParams" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property System::Windows::Forms::CreateParams ^ CreateParams { System::Windows::Forms::CreateParams ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CreateParams : System.Windows.Forms.CreateParams" Usage="System.Windows.Forms.ListBox.CreateParams" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.CreateParams</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取创建控件句柄时所需要的创建参数。</summary>
        <value><see cref="T:System.Windows.Forms.CreateParams" />，包含创建控件的句柄时所需的创建参数。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CustomTabOffsets">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListBox.IntegerCollection CustomTabOffsets { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ListBox/IntegerCollection CustomTabOffsets" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.CustomTabOffsets" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CustomTabOffsets As ListBox.IntegerCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ListBox::IntegerCollection ^ CustomTabOffsets { System::Windows::Forms::ListBox::IntegerCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CustomTabOffsets : System.Windows.Forms.ListBox.IntegerCollection" Usage="System.Windows.Forms.ListBox.CustomTabOffsets" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0;dotnet-plat-ext-5.0">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0;dotnet-plat-ext-5.0">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListBox+IntegerCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 <see cref="T:System.Windows.Forms.ListBox" /> 中的项之间的制表符的宽度。</summary>
        <value>表示制表符宽度的整数的集合。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 整数数组包含以升序排列的制表符。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultItemHeight">
      <MemberSignature Language="C#" Value="public const int DefaultItemHeight = 13;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int32 DefaultItemHeight = (13)" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Forms.ListBox.DefaultItemHeight" />
      <MemberSignature Language="VB.NET" Value="Public Const DefaultItemHeight As Integer  = 13" />
      <MemberSignature Language="C++ CLI" Value="public: int DefaultItemHeight = 13;" />
      <MemberSignature Language="F#" Value="val mutable DefaultItemHeight : int" Usage="System.Windows.Forms.ListBox.DefaultItemHeight" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <MemberValue>13</MemberValue>
      <Docs>
        <summary>为所有者描述的 <see cref="T:System.Windows.Forms.ListBox" /> 指定默认项高度。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultSize">
      <MemberSignature Language="C#" Value="protected override System.Drawing.Size DefaultSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Size DefaultSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.DefaultSize" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property DefaultSize As Size" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property System::Drawing::Size DefaultSize { System::Drawing::Size get(); };" />
      <MemberSignature Language="F#" Value="member this.DefaultSize : System.Drawing.Size" Usage="System.Windows.Forms.ListBox.DefaultSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取控件的默认大小。</summary>
        <value>控件的默认 <see cref="T:System.Drawing.Size" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawItem">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DrawItemEventHandler DrawItem;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DrawItemEventHandler DrawItem" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListBox.DrawItem" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DrawItem As DrawItemEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::DrawItemEventHandler ^ DrawItem;" />
      <MemberSignature Language="F#" Value="member this.DrawItem : System.Windows.Forms.DrawItemEventHandler " Usage="member this.DrawItem : System.Windows.Forms.DrawItemEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DrawItemEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在所有者绘制的 <see cref="T:System.Windows.Forms.ListBox" /> 的可视方位更改时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此事件由所有者描述的 <xref:System.Windows.Forms.ListBox>使用。 仅当 <xref:System.Windows.Forms.ListBox.DrawMode%2A> 属性设置为 `DrawMode.OwnerDrawFixed` 或 `DrawMode.OwnerDrawVariable`时才引发事件。 你可以使用此事件来执行在 <xref:System.Windows.Forms.ListBox>中绘制项所需的任务。 如果有一个可变大小的项（<xref:System.Windows.Forms.ListBox.DrawMode%2A> 属性设置为 `DrawMode.OwnerDrawVariable`），则在绘制项之前，将引发 <xref:System.Windows.Forms.ListBox.MeasureItem> 事件。 可以为 <xref:System.Windows.Forms.ListBox.MeasureItem> 事件创建事件处理程序，以指定要在事件处理程序中为 <xref:System.Windows.Forms.ListBox.DrawItem> 事件绘制的项的大小。  
  
 有关处理事件的详细信息，请参阅[处理和引发事件](/dotnet/standard/events/)。  
  
   
  
## Examples  
 下面的代码示例演示如何创建所有者描述的 <xref:System.Windows.Forms.ListBox> 项。 此代码使用 <xref:System.Windows.Forms.ListBox.DrawMode%2A> 属性来指定所绘制的项固定大小，并使用 <xref:System.Windows.Forms.ListBox.DrawItem> 事件来执行每个项到 <xref:System.Windows.Forms.ListBox>的绘制。 示例代码使用作为参数传递给事件处理程序的 <xref:System.Windows.Forms.DrawItemEventArgs> 类的属性和方法来绘制项。 此示例要求将 `listBox1` <xref:System.Windows.Forms.ListBox> 控件添加到窗体中，并且 <xref:System.Windows.Forms.ListBox.DrawItem> 事件由示例代码中定义的事件处理程序进行处理。 该示例还要求使用文本 "Apple"、"橙色" 和 "Plum" 将项添加到 <xref:System.Windows.Forms.ListBox> 中。  
  
 [!code-csharp[ListBox.DrawMode#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListBox.DrawMode/CS/form1.cs#1)]
 [!code-vb[ListBox.DrawMode#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListBox.DrawMode/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.ListBox.OnDrawItem(System.Windows.Forms.DrawItemEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="DrawMode">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.DrawMode DrawMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.DrawMode DrawMode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.DrawMode" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property DrawMode As DrawMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Windows::Forms::DrawMode DrawMode { System::Windows::Forms::DrawMode get(); void set(System::Windows::Forms::DrawMode value); };" />
      <MemberSignature Language="F#" Value="member this.DrawMode : System.Windows.Forms.DrawMode with get, set" Usage="System.Windows.Forms.ListBox.DrawMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties(System.ComponentModel.RefreshProperties.Repaint)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DrawMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置控件的绘图模式。</summary>
        <value><see cref="T:System.Windows.Forms.DrawMode" /> 值之一，表示用于绘制控件的项的模式。 默认为 <see langword="DrawMode.Normal" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例演示如何创建所有者描述的 <xref:System.Windows.Forms.ListBox> 项。 此代码使用 <xref:System.Windows.Forms.ListBox.DrawMode%2A> 属性来指定所绘制的项固定大小，并使用 <xref:System.Windows.Forms.ListBox.DrawItem> 事件来执行每个项到 <xref:System.Windows.Forms.ListBox>的绘制。 示例代码使用作为参数传递给事件处理程序的 <xref:System.Windows.Forms.DrawItemEventArgs> 类的属性和方法来绘制项。 此示例要求将 `listBox1` <xref:System.Windows.Forms.ListBox> 控件添加到窗体中，并且 <xref:System.Windows.Forms.ListBox.DrawItem> 事件由示例代码中定义的事件处理程序进行处理。 该示例还要求使用文本 "Apple"、"橙色" 和 "Plum" 将项添加到 <xref:System.Windows.Forms.ListBox> 中。  
  
 [!code-csharp[ListBox.DrawMode#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListBox.DrawMode/CS/form1.cs#1)]
 [!code-vb[ListBox.DrawMode#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListBox.DrawMode/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">分配给属性的值不是 <see cref="T:System.Windows.Forms.DrawMode" /> 枚举的成员。</exception>
        <exception cref="T:System.ArgumentException">多列 <see cref="T:System.Windows.Forms.ListBox" /> 的高度不能变化。</exception>
        <altmember cref="T:System.Windows.Forms.DrawMode" />
        <altmember cref="E:System.Windows.Forms.ListBox.DrawItem" />
      </Docs>
    </Member>
    <Member MemberName="EndUpdate">
      <MemberSignature Language="C#" Value="public void EndUpdate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndUpdate() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.EndUpdate" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndUpdate ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EndUpdate();" />
      <MemberSignature Language="F#" Value="member this.EndUpdate : unit -&gt; unit" Usage="listBox.EndUpdate " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>在 <see cref="M:System.Windows.Forms.ListBox.BeginUpdate" /> 方法挂起绘制后，该方法恢复绘制 <see cref="T:System.Windows.Forms.ListBox" /> 控件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 向 <xref:System.Windows.Forms.ListBox> 中添加项的首选方法是使用 <xref:System.Windows.Forms.ListBox.ObjectCollection> 类的 <xref:System.Windows.Forms.ListBox.ObjectCollection.AddRange%2A> 方法（通过 <xref:System.Windows.Forms.ListBox>的 <xref:System.Windows.Forms.ListBox.Items%2A> 属性）。 这使您可以一次向列表中添加一组项。 但是，如果你想要使用 <xref:System.Windows.Forms.ListBox.ObjectCollection> 类的 <xref:System.Windows.Forms.ListBox.ObjectCollection.Add%2A> 方法一次添加一个项，则可以使用 <xref:System.Windows.Forms.ListBox.BeginUpdate%2A> 方法来防止控件在每次向列表中添加项时重新绘制 <xref:System.Windows.Forms.ListBox>。 完成向列表中添加项的任务后，调用 <xref:System.Windows.Forms.ListBox.EndUpdate%2A> 方法，以允许 <xref:System.Windows.Forms.ListBox> 重绘。 当向列表中添加大量项时，这种添加项的方法可能会阻止 flickered 的 <xref:System.Windows.Forms.ListBox> 绘图。  
  
   
  
## Examples  
 下面的代码示例使用 <xref:System.Windows.Forms.ListBox.BeginUpdate%2A> 和 <xref:System.Windows.Forms.ListBox.EndUpdate%2A> 方法，同时将5000项添加到 <xref:System.Windows.Forms.ListBox>。 此示例要求已将名为 `listBox1`<xref:System.Windows.Forms.ListBox> 控件添加到 <xref:System.Windows.Forms.Form>，并将此方法放置在窗体中并从其调用。  
  
 [!code-cpp[Classic ListBox.BeginUpdate Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic ListBox.BeginUpdate Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ListBox.BeginUpdate Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic ListBox.BeginUpdate Example/CS/source.cs#1)]
 [!code-vb[Classic ListBox.BeginUpdate Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic ListBox.BeginUpdate Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.ListBox.BeginUpdate" />
      </Docs>
    </Member>
    <MemberGroup MemberName="FindString">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>查找 <see cref="T:System.Windows.Forms.ListBox" /> 中以指定字符串开始的第一个项。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FindString">
      <MemberSignature Language="C#" Value="public int FindString (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 FindString(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.FindString(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindString (s As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int FindString(System::String ^ s);" />
      <MemberSignature Language="F#" Value="member this.FindString : string -&gt; int" Usage="listBox.FindString s" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">要搜索的文本。</param>
        <summary>查找 <see cref="T:System.Windows.Forms.ListBox" /> 中以指定字符串开始的第一个项。</summary>
        <returns>找到的第一个项的从零开始的索引；如果找不到匹配项，则返回 <see langword="ListBox.NoMatches" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法执行的搜索不区分大小写。 搜索将查找与指定的搜索字符串参数部分匹配的单词，`s`。 您可以使用此方法搜索与指定字符串匹配的第一项。 然后，可以使用 <xref:System.Windows.Forms.ListBox.ObjectCollection.Remove%2A> 方法或更改项的文本，执行删除包含搜索文本的项等任务。 找到指定的文本后，如果要在 <xref:System.Windows.Forms.ListBox>中搜索文本的其他实例，则可以使用提供参数的 <xref:System.Windows.Forms.ListBox.FindString%2A> 方法的版本，该版本用于指定 <xref:System.Windows.Forms.ListBox>内的起始索引。 如果希望搜索完全匹配的单词而不是部分匹配项，请使用 <xref:System.Windows.Forms.ListBox.FindStringExact%2A> 方法。  
  
   
  
## Examples  
 下面的代码示例演示如何使用 <xref:System.Windows.Forms.ListBox.FindString%2A> 方法在 <xref:System.Windows.Forms.ListBox>中搜索字符串的第一个实例。 如果找不到与搜索字符串匹配的项 <xref:System.Windows.Forms.ListBox.FindString%2A> 将返回-1 值，该示例将显示 <xref:System.Windows.Forms.MessageBox>。 如果找到与搜索文本匹配的项，则该示例使用 <xref:System.Windows.Forms.ListBox.SetSelected%2A> 方法选择 <xref:System.Windows.Forms.ListBox>中的项。  
  
 [!code-cpp[ListBox.FindString2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListBox.FindString2/CPP/form1.cpp#1)]
 [!code-csharp[ListBox.FindString2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListBox.FindString2/CS/form1.cs#1)]
 [!code-vb[ListBox.FindString2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListBox.FindString2/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="s" /> 参数的值小于 -1，或者大于或等于项的计数。</exception>
        <altmember cref="M:System.Windows.Forms.ListBox.FindStringExact(System.String)" />
        <altmember cref="M:System.Windows.Forms.ListBox.ObjectCollection.Contains(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="FindString">
      <MemberSignature Language="C#" Value="public int FindString (string s, int startIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 FindString(string s, int32 startIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.FindString(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindString (s As String, startIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int FindString(System::String ^ s, int startIndex);" />
      <MemberSignature Language="F#" Value="member this.FindString : string * int -&gt; int" Usage="listBox.FindString (s, startIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="startIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s">要搜索的文本。</param>
        <param name="startIndex">项的从零开始的索引，该项在要搜索的第一个项之前。 设置为负一 (-1) 以从控件的开始处进行搜索。</param>
        <summary>查找 <see cref="T:System.Windows.Forms.ListBox" /> 中以指定字符串开始的第一个项。 搜索从特定的起始索引处开始。</summary>
        <returns>找到的第一个项的从零开始的索引；如果找不到匹配项，则返回 <see langword="ListBox.NoMatches" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法执行的搜索不区分大小写。 搜索将查找与指定的搜索字符串参数部分匹配的单词，`s`。 您可以使用此方法在 <xref:System.Windows.Forms.ListBox>的项列表中搜索与指定字符串匹配的第一项。 然后，可以使用 <xref:System.Windows.Forms.ListBox.ObjectCollection.Remove%2A> 方法或更改项的文本，执行删除包含搜索文本的项等任务。 此方法通常在使用未指定起始索引的此方法的版本进行调用之后使用。 在列表中找到了初始项后，此方法通常用于通过在搜索文本的第一个找到实例之后指定该项的 `startIndex` 参数中的索引位置来查找更多的搜索文本实例。 如果希望搜索完全匹配的单词而不是部分匹配项，请使用 <xref:System.Windows.Forms.ListBox.FindStringExact%2A> 方法。  
  
> [!NOTE]
>  当搜索到达 <xref:System.Windows.Forms.ListBox>底部时，它将继续从 <xref:System.Windows.Forms.ListBox> 顶部搜索 `startIndex` 参数指定的项。  
  
   
  
## Examples  
 下面的代码示例演示如何使用 <xref:System.Windows.Forms.ListBox.FindString%2A> 方法来搜索 <xref:System.Windows.Forms.ListBox>的项中搜索文本的所有实例。 该示例使用 <xref:System.Windows.Forms.ListBox.FindString%2A> 方法的版本，通过该方法可以指定起始搜索索引，以便对 <xref:System.Windows.Forms.ListBox>中的所有项进行持续搜索。 该示例还演示了如何确定当 <xref:System.Windows.Forms.ListBox.FindString%2A> 方法到达项列表的底部时从列表顶部开始搜索，以防止递归搜索。 在 <xref:System.Windows.Forms.ListBox>中找到项后，将使用 <xref:System.Windows.Forms.ListBox.SetSelected%2A> 方法选择项。  
  
 [!code-cpp[ListBox.FindString#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListBox.FindString/CPP/form1.cpp#1)]
 [!code-csharp[ListBox.FindString#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListBox.FindString/CS/form1.cs#1)]
 [!code-vb[ListBox.FindString#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListBox.FindString/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startIndex" /> 参数或者小于零，或者大于或等于 <see cref="P:System.Windows.Forms.ListBox.ObjectCollection.Count" /> 类的 <see cref="T:System.Windows.Forms.ListBox.ObjectCollection" /> 属性的值。</exception>
        <altmember cref="M:System.Windows.Forms.ListBox.FindStringExact(System.String)" />
        <altmember cref="M:System.Windows.Forms.ListBox.ObjectCollection.Contains(System.Object)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="FindStringExact">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>查找 <see cref="T:System.Windows.Forms.ListBox" /> 中第一个精确匹配指定字符串的项。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FindStringExact">
      <MemberSignature Language="C#" Value="public int FindStringExact (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 FindStringExact(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.FindStringExact(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindStringExact (s As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int FindStringExact(System::String ^ s);" />
      <MemberSignature Language="F#" Value="member this.FindStringExact : string -&gt; int" Usage="listBox.FindStringExact s" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">要搜索的文本。</param>
        <summary>查找 <see cref="T:System.Windows.Forms.ListBox" /> 中第一个精确匹配指定字符串的项。</summary>
        <returns>找到的第一个项的从零开始的索引；如果找不到匹配项，则返回 <see langword="ListBox.NoMatches" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法执行的搜索不区分大小写。 搜索将查找与搜索字符串参数中指定的单词完全匹配的内容，`s`。 您可以使用此方法搜索与指定字符串匹配的第一项。 然后，可以使用 <xref:System.Windows.Forms.ListBox.ObjectCollection.Remove%2A> 方法或更改项的文本，执行删除包含搜索文本的项等任务。 找到指定的文本后，如果要在 <xref:System.Windows.Forms.ListBox>中搜索文本的其他实例，则可以使用提供参数的 <xref:System.Windows.Forms.ListBox.FindStringExact%2A> 方法的版本，该版本用于指定 <xref:System.Windows.Forms.ListBox>内的起始索引。 如果要执行部分单词搜索而不是完全匹配的单词，请使用 <xref:System.Windows.Forms.ListBox.FindString%2A> 方法。  
  
   
  
## Examples  
 下面的代码示例演示如何使用 <xref:System.Windows.Forms.ListBox.FindStringExact%2A?displayProperty=nameWithType> 方法在 <xref:System.Windows.Forms.ListBox> 控件中搜索与指定字符串完全匹配的项。 如果找不到与搜索字符串匹配的项，<xref:System.Windows.Forms.ListBox.FindStringExact%2A> 将返回-1 值，该示例将显示一个 <xref:System.Windows.Forms.MessageBox>。 如果找到与搜索文本匹配的项，则该示例使用 <xref:System.Windows.Forms.ListBox.SetSelected%2A> 方法选择 <xref:System.Windows.Forms.ListBox>中的项。  
  
 [!code-cpp[ListBox.FindStringExact#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListBox.FindStringExact/CPP/form1.cpp#1)]
 [!code-csharp[ListBox.FindStringExact#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListBox.FindStringExact/CS/form1.cs#1)]
 [!code-vb[ListBox.FindStringExact#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListBox.FindStringExact/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.ListBox.FindString(System.String)" />
        <altmember cref="M:System.Windows.Forms.ListBox.ObjectCollection.Contains(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="FindStringExact">
      <MemberSignature Language="C#" Value="public int FindStringExact (string s, int startIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 FindStringExact(string s, int32 startIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.FindStringExact(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindStringExact (s As String, startIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int FindStringExact(System::String ^ s, int startIndex);" />
      <MemberSignature Language="F#" Value="member this.FindStringExact : string * int -&gt; int" Usage="listBox.FindStringExact (s, startIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="startIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s">要搜索的文本。</param>
        <param name="startIndex">项的从零开始的索引，该项在要搜索的第一个项之前。 设置为负一 (-1) 以从控件的开始处进行搜索。</param>
        <summary>查找 <see cref="T:System.Windows.Forms.ListBox" /> 中第一个精确匹配指定字符串的项。 搜索从特定的起始索引处开始。</summary>
        <returns>找到的第一个项的从零开始的索引；如果找不到匹配项，则返回 <see langword="ListBox.NoMatches" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法执行的搜索不区分大小写。 搜索将查找与指定的搜索字符串参数完全匹配的单词，`s`。 您可以使用此方法在 <xref:System.Windows.Forms.ListBox>的项列表中搜索与指定字符串匹配的第一项。 然后，您可以使用 <xref:System.Windows.Forms.ListBox.ObjectCollection.Remove%2A> 方法或更改项的文本，执行删除包含搜索文本的项等任务。 此方法通常在使用未指定起始索引的此方法的版本进行调用之后使用。 在列表中找到了初始项后，此方法通常用于通过在搜索文本的第一个找到实例之后指定该项的 `startIndex` 参数中的索引位置来查找更多的搜索文本实例。 如果要执行部分单词搜索而不是完全匹配的单词，请使用 <xref:System.Windows.Forms.ListBox.FindString%2A> 方法。  
  
> [!NOTE]
>  当搜索到达 <xref:System.Windows.Forms.ListBox>底部时，它将继续从 <xref:System.Windows.Forms.ListBox> 顶部搜索 `startIndex` 参数指定的项。  
  
   
  
## Examples  
 下面的代码示例演示如何使用 <xref:System.Windows.Forms.ListBox.FindStringExact%2A> 方法搜索与指定的搜索文本完全匹配的 <xref:System.Windows.Forms.ListBox> 中的所有项。 该示例使用 <xref:System.Windows.Forms.ListBox.FindStringExact%2A> 方法的版本，通过该方法可以指定起始搜索索引，以便对 <xref:System.Windows.Forms.ListBox>中的所有项进行持续搜索。 该示例还演示了如何确定在 <xref:System.Windows.Forms.ListBox.FindStringExact%2A> 方法到达项列表的底部后从列表顶部开始搜索，以防止递归搜索。 在 <xref:System.Windows.Forms.ListBox>中找到项后，将使用 <xref:System.Windows.Forms.ListBox.SetSelected%2A> 方法选择项。  
  
 [!code-cpp[ListBox.FindStringExact2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListBox.FindStringExact2/CPP/form1.cpp#1)]
 [!code-csharp[ListBox.FindStringExact2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListBox.FindStringExact2/CS/form1.cs#1)]
 [!code-vb[ListBox.FindStringExact2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListBox.FindStringExact2/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startIndex" /> 参数或者小于零，或者大于或等于 <see cref="P:System.Windows.Forms.ListBox.ObjectCollection.Count" /> 类的 <see cref="T:System.Windows.Forms.ListBox.ObjectCollection" /> 属性的值。</exception>
        <altmember cref="M:System.Windows.Forms.ListBox.FindString(System.String)" />
        <altmember cref="M:System.Windows.Forms.ListBox.ObjectCollection.Contains(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Font">
      <MemberSignature Language="C#" Value="public override System.Drawing.Font Font { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Drawing.Font Font" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.Font" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Font As Font" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Drawing::Font ^ Font { System::Drawing::Font ^ get(); void set(System::Drawing::Font ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Font : System.Drawing.Font with get, set" Usage="System.Windows.Forms.ListBox.Font" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Font</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置控件显示的文字的字体。</summary>
        <value>要应用于由控件显示的文本的 <see cref="T:System.Drawing.Font" />。 默认为 <see cref="P:System.Windows.Forms.Control.DefaultFont" /> 属性的值。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ForeColor">
      <MemberSignature Language="C#" Value="public override System.Drawing.Color ForeColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color ForeColor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.ForeColor" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property ForeColor As Color" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Drawing::Color ForeColor { System::Drawing::Color get(); void set(System::Drawing::Color value); };" />
      <MemberSignature Language="F#" Value="member this.ForeColor : System.Drawing.Color with get, set" Usage="System.Windows.Forms.ListBox.ForeColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置控件的前景色。</summary>
        <value>控件的前景 <see cref="T:System.Drawing.Color" />。 默认为 <see cref="P:System.Windows.Forms.Control.DefaultForeColor" /> 属性的值。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetItemHeight">
      <MemberSignature Language="C#" Value="public int GetItemHeight (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetItemHeight(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.GetItemHeight(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetItemHeight (index As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetItemHeight(int index);" />
      <MemberSignature Language="F#" Value="member this.GetItemHeight : int -&gt; int" Usage="listBox.GetItemHeight index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">要返回其高度的项的从零开始的索引。</param>
        <summary>返回 <see cref="T:System.Windows.Forms.ListBox" /> 中某项的高度。</summary>
        <returns>指定的项的高度，以像素为单位。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果 <xref:System.Windows.Forms.ListBox.DrawMode%2A> 属性未设置为 `DrawMode.OwnerDrawVariable`，则将忽略 index 参数的值，因为标准 <xref:System.Windows.Forms.ListBox> 中的所有项都具有相同的大小。 当使用所有者描述的 <xref:System.Windows.Forms.ListBox> 确定 <xref:System.Windows.Forms.ListBox>内任何项的大小时，可以使用此属性。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">指定的 <paramref name="index" /> 参数值小于零或大于项的计数。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetItemRectangle">
      <MemberSignature Language="C#" Value="public System.Drawing.Rectangle GetItemRectangle (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.Rectangle GetItemRectangle(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.GetItemRectangle(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetItemRectangle (index As Integer) As Rectangle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::Rectangle GetItemRectangle(int index);" />
      <MemberSignature Language="F#" Value="member this.GetItemRectangle : int -&gt; System.Drawing.Rectangle" Usage="listBox.GetItemRectangle index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Rectangle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">要返回其边框的项的从零开始的索引。</param>
        <summary>返回 <see cref="T:System.Windows.Forms.ListBox" /> 中的项的边框。</summary>
        <returns><see cref="T:System.Drawing.Rectangle" />，表示指定项的边框。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果 `index` 参数中指定的项不可见，则此方法返回的矩形将位于控件的可见部分之外。 您可以使用此方法来确定项在列表中的大小和位置。 若要获取项的高度（特别是可变高度所有者描述的列表项），可以使用 <xref:System.Windows.Forms.ListBox.GetItemHeight%2A> 方法。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" /> 参数或者小于零，或者大于或等于 <see cref="P:System.Windows.Forms.ListBox.ObjectCollection.Count" /> 类的 <see cref="T:System.Windows.Forms.ListBox.ObjectCollection" /> 属性的值。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetScaledBounds">
      <MemberSignature Language="C#" Value="protected override System.Drawing.Rectangle GetScaledBounds (System.Drawing.Rectangle bounds, System.Drawing.SizeF factor, System.Windows.Forms.BoundsSpecified specified);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance valuetype System.Drawing.Rectangle GetScaledBounds(valuetype System.Drawing.Rectangle bounds, valuetype System.Drawing.SizeF factor, valuetype System.Windows.Forms.BoundsSpecified specified) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.GetScaledBounds(System.Drawing.Rectangle,System.Drawing.SizeF,System.Windows.Forms.BoundsSpecified)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function GetScaledBounds (bounds As Rectangle, factor As SizeF, specified As BoundsSpecified) As Rectangle" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Drawing::Rectangle GetScaledBounds(System::Drawing::Rectangle bounds, System::Drawing::SizeF factor, System::Windows::Forms::BoundsSpecified specified);" />
      <MemberSignature Language="F#" Value="override this.GetScaledBounds : System.Drawing.Rectangle * System.Drawing.SizeF * System.Windows.Forms.BoundsSpecified -&gt; System.Drawing.Rectangle" Usage="listBox.GetScaledBounds (bounds, factor, specified)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0;dotnet-plat-ext-5.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Rectangle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bounds" Type="System.Drawing.Rectangle" Index="0" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="factor" Type="System.Drawing.SizeF" Index="1" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="specified" Type="System.Windows.Forms.BoundsSpecified" Index="2" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="bounds">指定要在显示器边界中检索的区域的 <see cref="T:System.Drawing.Rectangle" />。</param>
        <param name="factor">控件边界的高度和宽度。</param>
        <param name="specified"><see cref="T:System.Windows.Forms.BoundsSpecified" /> 值之一，指定在定义控件大小和位置时要使用的控件边界。</param>
        <summary>检索 <see cref="T:System.Windows.Forms.ListBox" /> 在其中进行缩放的边界。</summary>
        <returns>一个表示控件缩放边界的 <see cref="T:System.Drawing.Rectangle" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListBox> 类将重写 <xref:System.Windows.Forms.Control.GetScaledBounds%2A?displayProperty=nameWithType> 方法，以确保缩放请求的高度而不是当前高度。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSelected">
      <MemberSignature Language="C#" Value="public bool GetSelected (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool GetSelected(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.GetSelected(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetSelected (index As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool GetSelected(int index);" />
      <MemberSignature Language="F#" Value="member this.GetSelected : int -&gt; bool" Usage="listBox.GetSelected index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">项的从零开始的索引，根据该索引确定该项是否被选定。</param>
        <summary>返回一个值，该值指示是否选定了指定的项。</summary>
        <returns>如果当前在 <see cref="T:System.Windows.Forms.ListBox" /> 中选定了指定的项，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以使用此方法快速确定是否选择了指定的项。 当选择多重选择 <xref:System.Windows.Forms.ListBox> 中的特定项时，此方法非常有用。  
  
   
  
## Examples  
 下面的代码示例演示如何使用 <xref:System.Windows.Forms.ListBox.GetSelected%2A> 方法来确定 <xref:System.Windows.Forms.ListBox> 中选择了哪些项，以便选择未选择的项并取消选择所选的项。 该示例还演示了如何使用 <xref:System.Windows.Forms.ListBox.SelectionMode%2A> 属性使某个 <xref:System.Windows.Forms.ListBox> 具有多个选定项，并使用 <xref:System.Windows.Forms.ListBox.Sorted%2A> 属性演示如何自动对 <xref:System.Windows.Forms.ListBox> 中的项进行排序。 此示例要求已将名为 `listBox1`的 <xref:System.Windows.Forms.ListBox>添加到窗体中，并且该示例中定义的 `InitializeMyListBox` 方法是从窗体的 <xref:System.Windows.Forms.Form.Load> 事件中调用的。  
  
 [!code-cpp[ListBox.GetSelected#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListBox.GetSelected/CPP/form1.cpp#1)]
 [!code-csharp[ListBox.GetSelected#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListBox.GetSelected/CS/form1.cs#1)]
 [!code-vb[ListBox.GetSelected#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListBox.GetSelected/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" /> 参数或者小于零，或者大于或等于 <see cref="P:System.Windows.Forms.ListBox.ObjectCollection.Count" /> 类的 <see cref="T:System.Windows.Forms.ListBox.ObjectCollection" /> 属性的值。</exception>
      </Docs>
    </Member>
    <Member MemberName="HorizontalExtent">
      <MemberSignature Language="C#" Value="public int HorizontalExtent { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 HorizontalExtent" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.HorizontalExtent" />
      <MemberSignature Language="VB.NET" Value="Public Property HorizontalExtent As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int HorizontalExtent { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.HorizontalExtent : int with get, set" Usage="System.Windows.Forms.ListBox.HorizontalExtent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:System.Windows.Forms.ListBox" /> 的水平滚动条可滚动的宽度。</summary>
        <value>水平滚动条可滚动控件的宽度，以像素为单位。 默认值为 0。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果 <xref:System.Windows.Forms.ListBox.HorizontalScrollbar%2A> 属性设置为 `true`，则此属性仅报告有用值。 如果 <xref:System.Windows.Forms.ListBox> 的宽度小于此属性的值，水平滚动条将水平滚动 <xref:System.Windows.Forms.ListBox>中的项。 如果 <xref:System.Windows.Forms.ListBox> 的宽度等于或大于此值，则会隐藏水平滚动条。 <xref:System.Windows.Forms.ListBox>不会动态更新此属性的值。 当 <xref:System.Windows.Forms.ListBox> 的项是所有者描述时，此属性很有用。 例如，如果 <xref:System.Windows.Forms.ListBox> 的所有者绘制的项的宽度为200像素，但 <xref:System.Windows.Forms.ListBox> 为60像素宽，则需要将 <xref:System.Windows.Forms.ListBox.HorizontalExtent%2A> 属性设置为200，以便将项的右边缘滚动到控件的可见区域。  
  
   
  
## Examples  
 下面的代码示例演示如何使用 <xref:System.Windows.Forms.ListBox.HorizontalScrollbar%2A> 和 <xref:System.Windows.Forms.ListBox.HorizontalExtent%2A> 属性来显示水平滚动条，其中显示 <xref:System.Windows.Forms.ListBox> 控件中的所有项文本。 该示例还使用 <xref:System.Windows.Forms.ListBox.IntegralHeight%2A> 属性，以确保由于 <xref:System.Windows.Forms.ListBox> 控件的大小而未部分显示项。 此示例要求已将名为 `listBox1`<xref:System.Windows.Forms.ListBox> 控件添加到窗体中。  
  
 [!code-cpp[ListView.HorizontalExtent#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListView.HorizontalExtent/CPP/form1.cpp#1)]
 [!code-csharp[ListView.HorizontalExtent#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListView.HorizontalExtent/CS/form1.cs#1)]
 [!code-vb[ListView.HorizontalExtent#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListView.HorizontalExtent/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ListBox.HorizontalScrollbar" />
      </Docs>
    </Member>
    <Member MemberName="HorizontalScrollbar">
      <MemberSignature Language="C#" Value="public bool HorizontalScrollbar { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HorizontalScrollbar" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.HorizontalScrollbar" />
      <MemberSignature Language="VB.NET" Value="Public Property HorizontalScrollbar As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HorizontalScrollbar { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.HorizontalScrollbar : bool with get, set" Usage="System.Windows.Forms.ListBox.HorizontalScrollbar" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示是否在控件中显示水平滚动条。</summary>
        <value>如果为 <see langword="true" />，则在控件中显示水平滚动条；否则为 <see langword="false" />。 默认为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListBox.HorizontalScrollbar%2A> 属性决定当 <xref:System.Windows.Forms.ListBox> 内项的宽度超出控件的右边缘时，<xref:System.Windows.Forms.ListBox> 是否应显示水平滚动条。 如果将此属性设置为 "`true`"，则将根据 <xref:System.Windows.Forms.ListBox>中项的宽度自动显示滚动条。 如果 <xref:System.Windows.Forms.ListBox> 是所有者描述的 <xref:System.Windows.Forms.ListBox>，为了正确地显示水平滚动条，必须设置 <xref:System.Windows.Forms.ListBox.HorizontalExtent%2A> 属性。  
  
   
  
## Examples  
 下面的代码示例演示如何使用 <xref:System.Windows.Forms.ListBox.HorizontalScrollbar%2A> 和 <xref:System.Windows.Forms.ListBox.HorizontalExtent%2A> 属性来显示水平滚动条，其中显示 <xref:System.Windows.Forms.ListBox> 控件中的所有项文本。 该示例还使用 <xref:System.Windows.Forms.ListBox.IntegralHeight%2A> 属性，以确保由于 <xref:System.Windows.Forms.ListBox> 控件的大小而未部分显示项。 此示例要求已将名为 `listBox1`<xref:System.Windows.Forms.ListBox> 控件添加到窗体中。  
  
 [!code-cpp[ListView.HorizontalExtent#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListView.HorizontalExtent/CPP/form1.cpp#1)]
 [!code-csharp[ListView.HorizontalExtent#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListView.HorizontalExtent/CS/form1.cs#1)]
 [!code-vb[ListView.HorizontalExtent#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListView.HorizontalExtent/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ListBox.HorizontalExtent" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IndexFromPoint">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>返回指定坐标处的项的从零开始的索引。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IndexFromPoint">
      <MemberSignature Language="C#" Value="public int IndexFromPoint (System.Drawing.Point p);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IndexFromPoint(valuetype System.Drawing.Point p) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.IndexFromPoint(System.Drawing.Point)" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexFromPoint (p As Point) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int IndexFromPoint(System::Drawing::Point p);" />
      <MemberSignature Language="F#" Value="member this.IndexFromPoint : System.Drawing.Point -&gt; int" Usage="listBox.IndexFromPoint p" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="p" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="p"><see cref="T:System.Drawing.Point" /> 对象，包含用于获取项索引的坐标。</param>
        <summary>返回指定坐标处的项的从零开始的索引。</summary>
        <returns>在指定坐标处找到的项的从零开始的索引；如果找不到匹配项，则返回 <see langword="ListBox.NoMatches" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法使您能够确定哪个项位于控件中的特定位置。 您可以使用此方法来确定在用户右键单击 <xref:System.Windows.Forms.ListBox>时选择列表中的哪一项。 可以确定游标的位置，并将其传递给 <xref:System.Windows.Forms.ListBox.IndexFromPoint%2A> 方法的 `p` 参数，以确定用户鼠标右键单击的项。 然后，您可以向用户显示一个快捷菜单，以提供基于特定项的任务和功能。  
  
   
  
## Examples  
 下面的代码示例演示如何使用包含要放置到 <xref:System.Windows.Forms.RichTextBox> 控件中的项的 <xref:System.Windows.Forms.ListBox> 控件执行拖放操作。 窗体的构造函数将 <xref:System.Windows.Forms.RichTextBox.AllowDrop%2A> 属性设置为 `true`，以便在 <xref:System.Windows.Forms.RichTextBox>中执行拖放操作。 该示例使用 <xref:System.Windows.Forms.ListBox> 的 <xref:System.Windows.Forms.Control.MouseDown> 事件通过调用 <xref:System.Windows.Forms.Control.DoDragDrop%2A> 方法来启动拖动操作。 该示例使用 <xref:System.Windows.Forms.Control.DragEnter> 事件确定要拖动到 <xref:System.Windows.Forms.RichTextBox> 中的项是否为有效的数据类型。 <xref:System.Windows.Forms.Control.DragDrop>事件执行拖动的项到实际放<xref:System.Windows.Forms.RichTextBox>控件中的当前光标位置在<xref:System.Windows.Forms.RichTextBox>。 此示例要求 <xref:System.Windows.Forms.Control.DragDrop> 和 <xref:System.Windows.Forms.Control.DragEnter> 事件已连接到该示例中定义的事件处理程序。  
  
 [!code-cpp[RichTextBox.AllowDrop#1](~/samples/snippets/cpp/VS_Snippets_Winforms/RichTextBox.AllowDrop/CPP/form1.cpp#1)]
 [!code-csharp[RichTextBox.AllowDrop#1](~/samples/snippets/csharp/VS_Snippets_Winforms/RichTextBox.AllowDrop/CS/form1.cs#1)]
 [!code-vb[RichTextBox.AllowDrop#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/RichTextBox.AllowDrop/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IndexFromPoint">
      <MemberSignature Language="C#" Value="public int IndexFromPoint (int x, int y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IndexFromPoint(int32 x, int32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.IndexFromPoint(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexFromPoint (x As Integer, y As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int IndexFromPoint(int x, int y);" />
      <MemberSignature Language="F#" Value="member this.IndexFromPoint : int * int -&gt; int" Usage="listBox.IndexFromPoint (x, y)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="x">要搜索的位置的 x 坐标。</param>
        <param name="y">要搜索的位置的 y 坐标。</param>
        <summary>返回指定坐标处的项的从零开始的索引。</summary>
        <returns>在指定坐标处找到的项的从零开始的索引；如果找不到匹配项，则返回 <see langword="ListBox.NoMatches" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法使您能够确定位于控件中特定位置的项。 您可以使用此方法来确定在用户右键单击 <xref:System.Windows.Forms.ListBox>时选择列表中的哪一项。 可以确定光标的位置，并将其传递给`x`并`y`的参数<xref:System.Windows.Forms.ListBox.IndexFromPoint%2A>方法，以确定哪一项用户通过右键单击鼠标。 然后，您可以向用户显示一个快捷菜单，以提供基于特定项的任务和功能。  
  
   
  
## Examples  
 下面的代码示例演示如何使用包含要放置到 <xref:System.Windows.Forms.RichTextBox> 控件中的项的 <xref:System.Windows.Forms.ListBox> 控件执行拖放操作。 窗体的构造函数将 <xref:System.Windows.Forms.RichTextBox.AllowDrop%2A> 属性设置为 `true`，以便在 <xref:System.Windows.Forms.RichTextBox>中执行拖放操作。 该示例使用 <xref:System.Windows.Forms.ListBox> 的 <xref:System.Windows.Forms.Control.MouseDown> 事件通过调用 <xref:System.Windows.Forms.Control.DoDragDrop%2A> 方法来启动拖动操作。 该示例使用 <xref:System.Windows.Forms.Control.DragEnter> 事件确定要拖动到 <xref:System.Windows.Forms.RichTextBox> 中的项是否为有效的数据类型。 <xref:System.Windows.Forms.Control.DragDrop>事件执行拖动的项到实际放<xref:System.Windows.Forms.RichTextBox>控件中的当前光标位置在<xref:System.Windows.Forms.RichTextBox>。 此示例要求 <xref:System.Windows.Forms.Control.DragDrop> 和 <xref:System.Windows.Forms.Control.DragEnter> 事件已连接到该示例中定义的事件处理程序。  
  
 [!code-cpp[RichTextBox.AllowDrop#1](~/samples/snippets/cpp/VS_Snippets_Winforms/RichTextBox.AllowDrop/CPP/form1.cpp#1)]
 [!code-csharp[RichTextBox.AllowDrop#1](~/samples/snippets/csharp/VS_Snippets_Winforms/RichTextBox.AllowDrop/CS/form1.cs#1)]
 [!code-vb[RichTextBox.AllowDrop#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/RichTextBox.AllowDrop/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IntegralHeight">
      <MemberSignature Language="C#" Value="public bool IntegralHeight { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IntegralHeight" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.IntegralHeight" />
      <MemberSignature Language="VB.NET" Value="Public Property IntegralHeight As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IntegralHeight { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IntegralHeight : bool with get, set" Usage="System.Windows.Forms.ListBox.IntegralHeight" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties(System.ComponentModel.RefreshProperties.Repaint)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示控件是否应调整大小以避免只显示项的局部。</summary>
        <value>如果该控件调整大小以便不显示不完整的项，则为 <see langword="true" />；否则为 <see langword="false" />。 默认为 <see langword="true" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果将此属性设置为 `true`，则控件会自动调整大小，以确保不会部分显示某个项。 如果要根据窗体的空间要求来维护 <xref:System.Windows.Forms.ListBox> 的原始大小，请将此属性设置为 "`false`"。  
  
 默认情况下，<xref:System.Windows.Forms.ListBox> 和 <xref:System.Windows.Forms.CheckedListBox> 大小均为仅显示整个项。 如果希望 <xref:System.Windows.Forms.ListBox> 或 <xref:System.Windows.Forms.CheckedListBox> 完全填充停靠区域，请将 "<xref:System.Windows.Forms.ListBox.IntegralHeight%2A> 设置为" `false`"。 这将导致控件完全填充区域，但不会完全显示最后一项。  
  
 如果 <xref:System.Windows.Forms.ListBox> 不包含任何项，则此属性不起作用。  
  
> [!NOTE]
>  整数高度取决于 <xref:System.Windows.Forms.ListBox>的高度，而不是客户端区域的高度。 因此，当 <xref:System.Windows.Forms.ListBox.IntegralHeight%2A> 属性设置 `true`时，如果显示滚动条，则仍可以部分显示项。  
  
> [!NOTE]
>  如果 <xref:System.Windows.Forms.ListBox.DrawMode%2A> 属性设置为 `DrawMode.OwnerDrawVariable`，则此属性不起作用。  
  
   
  
## Examples  
 下面的代码示例演示如何使用 <xref:System.Windows.Forms.ListBox.HorizontalScrollbar%2A> 和 <xref:System.Windows.Forms.ListBox.HorizontalExtent%2A> 属性来显示水平滚动条，其中显示 <xref:System.Windows.Forms.ListBox> 控件中的所有项文本。 该示例还使用 <xref:System.Windows.Forms.ListBox.IntegralHeight%2A> 属性，以确保由于 <xref:System.Windows.Forms.ListBox> 控件的大小而未部分显示项。 此示例要求已将名为 `listBox1`<xref:System.Windows.Forms.ListBox> 控件添加到窗体中。  
  
 [!code-cpp[ListView.HorizontalExtent#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListView.HorizontalExtent/CPP/form1.cpp#1)]
 [!code-csharp[ListView.HorizontalExtent#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListView.HorizontalExtent/CS/form1.cs#1)]
 [!code-vb[ListView.HorizontalExtent#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListView.HorizontalExtent/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ListBox.DrawMode" />
      </Docs>
    </Member>
    <Member MemberName="ItemHeight">
      <MemberSignature Language="C#" Value="public virtual int ItemHeight { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ItemHeight" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.ItemHeight" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property ItemHeight As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int ItemHeight { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.ItemHeight : int with get, set" Usage="System.Windows.Forms.ListBox.ItemHeight" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(13)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties(System.ComponentModel.RefreshProperties.Repaint)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:System.Windows.Forms.ListBox" /> 中项的高度。</summary>
        <value>控件中项的高度（以像素为单位）。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListBox.DrawMode%2A> 属性设置为 `DrawMode.OwnerDrawFixed`时，所有项都具有相同的高度。 <xref:System.Windows.Forms.ListBox.DrawMode%2A> 属性设置为 `DrawMode.OwnerDrawVariable`时，<xref:System.Windows.Forms.ListBox.ItemHeight%2A> 属性指定添加到 <xref:System.Windows.Forms.ListBox>中的每一项的高度。 由于所有者描述列表中的每一项都有不同的高度，因此您可以使用 <xref:System.Windows.Forms.ListBox.GetItemHeight%2A> 方法来获取 <xref:System.Windows.Forms.ListBox>中特定项的高度。 如果对具有可变高度项的 <xref:System.Windows.Forms.ListBox> 使用 <xref:System.Windows.Forms.ListBox.ItemHeight%2A> 属性，则此属性将返回控件中第一项的高度。  
  
 <xref:System.Windows.Forms.ListBox> 项的最大高度为255像素。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><see cref="P:System.Windows.Forms.ListBox.ItemHeight" /> 属性被设置为小于 0 或大于 255 像素。</exception>
        <altmember cref="M:System.Windows.Forms.ListBox.GetItemHeight(System.Int32)" />
        <altmember cref="P:System.Windows.Forms.ListBox.DrawMode" />
        <altmember cref="E:System.Windows.Forms.ListBox.MeasureItem" />
      </Docs>
    </Member>
    <Member MemberName="Items">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListBox.ObjectCollection Items { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ListBox/ObjectCollection Items" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.Items" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Items As ListBox.ObjectCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ListBox::ObjectCollection ^ Items { System::Windows::Forms::ListBox::ObjectCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Items : System.Windows.Forms.ListBox.ObjectCollection" Usage="System.Windows.Forms.ListBox.Items" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0;dotnet-plat-ext-5.0">
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.ListControlStringCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0;dotnet-plat-ext-5.0">
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.ListControlStringCollectionEditor, System.Design, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.ListControlStringCollectionEditor, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListBox+ObjectCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 <see cref="T:System.Windows.Forms.ListBox" /> 的项。</summary>
        <value><see cref="T:System.Windows.Forms.ListBox.ObjectCollection" />，表示 <see cref="T:System.Windows.Forms.ListBox" /> 中的项。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性可让你获取对当前存储在 <xref:System.Windows.Forms.ListBox>中的项列表的引用。 通过此引用，你可以添加项、移除项以及获取集合中项的计数。 有关可通过项集合执行的任务的详细信息，请参阅 <xref:System.Windows.Forms.ListBox.ObjectCollection> 类参考主题。  
  
 你还可以使用 <xref:System.Windows.Forms.ListControl.DataSource%2A> 属性来操作 <xref:System.Windows.Forms.ListBox> 的项。 如果使用 <xref:System.Windows.Forms.ListControl.DataSource%2A> 属性将项添加到 <xref:System.Windows.Forms.ListBox>中，则可以使用 <xref:System.Windows.Forms.ListBox.Items%2A> 属性查看 <xref:System.Windows.Forms.ListBox> 中的项，但不能使用 <xref:System.Windows.Forms.ListBox.ObjectCollection>的方法在列表中添加或移除项。  
  
   
  
## Examples  
 下面的代码示例演示如何创建一个 <xref:System.Windows.Forms.ListBox> 控件，该控件在列中显示多个项，并且可以在控件的列表中选择多个项。 示例的代码使用 <xref:System.Windows.Forms.ListBox.ObjectCollection> 类的 <xref:System.Windows.Forms.ListBox.ObjectCollection.Add%2A> 方法将50项添加到 <xref:System.Windows.Forms.ListBox>，然后使用 <xref:System.Windows.Forms.ListBox.SetSelected%2A> 方法从列表中选择三项。 然后，该代码显示来自 <xref:System.Windows.Forms.ListBox.SelectedObjectCollection> 集合（通过 <xref:System.Windows.Forms.ListBox.SelectedItems%2A> 属性）和 <xref:System.Windows.Forms.ListBox.SelectedIndexCollection> 的值（通过 <xref:System.Windows.Forms.ListBox.SelectedIndices%2A> 属性）。 此示例要求代码位于 <xref:System.Windows.Forms.Form>的和中。  
  
 [!code-cpp[Classic ListBox Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic ListBox Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ListBox Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic ListBox Example/CS/source.cs#1)]
 [!code-vb[Classic ListBox Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic ListBox Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ListBox.ObjectCollection" />
      </Docs>
    </Member>
    <Member MemberName="MeasureItem">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.MeasureItemEventHandler MeasureItem;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.MeasureItemEventHandler MeasureItem" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListBox.MeasureItem" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MeasureItem As MeasureItemEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::MeasureItemEventHandler ^ MeasureItem;" />
      <MemberSignature Language="F#" Value="member this.MeasureItem : System.Windows.Forms.MeasureItemEventHandler " Usage="member this.MeasureItem : System.Windows.Forms.MeasureItemEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MeasureItemEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>创建所有者描述的 <see cref="T:System.Windows.Forms.ListBox" /> 和确定列表项的大小时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以为此事件创建事件处理程序，以便在 <xref:System.Windows.Forms.ListBox.DrawItem> 事件中绘制项之前指定项的大小。 仅当 <xref:System.Windows.Forms.ListBox.DrawMode%2A> 属性设置为 <xref:System.Windows.Forms.DrawMode.OwnerDrawVariable>时才引发事件。  
  
 <xref:System.Windows.Forms.ListBox> 项的最大有效高度为255像素。 处理此事件时，如果将 <xref:System.Windows.Forms.MeasureItemEventArgs> 的 <xref:System.Windows.Forms.MeasureItemEventArgs.ItemHeight%2A> 属性设置为大于255的值，则可能会产生意外的结果。  
  
 有关处理事件的详细信息，请参阅[处理和引发事件](/dotnet/standard/events/)。  
  
   
  
## Examples  
 下面的代码示例演示了一个所有者描述的 <xref:System.Windows.Forms.ListBox>，方法是将 <xref:System.Windows.Forms.ListBox.DrawMode%2A> 属性设置为 <xref:System.Windows.Forms.DrawMode.OwnerDrawVariable> 并处理 <xref:System.Windows.Forms.ListBox.DrawItem> 和 <xref:System.Windows.Forms.ListBox.MeasureItem> 事件。 它还演示如何设置 <xref:System.Windows.Forms.ListBox.BorderStyle%2A> 和 <xref:System.Windows.Forms.ListBox.ScrollAlwaysVisible%2A> 属性以及如何使用 <xref:System.Windows.Forms.ListBox.ObjectCollection.AddRange%2A> 方法。  
  
 若要运行此示例，请将其粘贴到导入 <xref:System.Drawing> 命名空间和 <xref:System.Windows.Forms> 命名空间的空窗体中。 从窗体的构造函数或 <xref:System.Windows.Forms.Form.Load> 事件处理方法调用 `InitializeOwnerDrawnListBox`。  
  
 [!code-cpp[System.Windows.Forms.ListBoxExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListBoxExample/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ListBoxExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListBoxExample/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ListBoxExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListBoxExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ListBox.ItemHeight" />
      </Docs>
    </Member>
    <Member MemberName="MouseClick">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.MouseEventHandler MouseClick;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.MouseEventHandler MouseClick" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListBox.MouseClick" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseClick As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::MouseEventHandler ^ MouseClick;" />
      <MemberSignature Language="F#" Value="member this.MouseClick : System.Windows.Forms.MouseEventHandler " Usage="member this.MouseClick : System.Windows.Forms.MouseEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0;dotnet-plat-ext-5.0">
          <AttributeName>System.ComponentModel.Browsable(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0;dotnet-plat-ext-5.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Always)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当用户使用鼠标指针单击 <see cref="T:System.Windows.Forms.ListBox" /> 控件时发生。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MultiColumn">
      <MemberSignature Language="C#" Value="public bool MultiColumn { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool MultiColumn" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.MultiColumn" />
      <MemberSignature Language="VB.NET" Value="Public Property MultiColumn As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool MultiColumn { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.MultiColumn : bool with get, set" Usage="System.Windows.Forms.ListBox.MultiColumn" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示 <see cref="T:System.Windows.Forms.ListBox" /> 是否支持多列。</summary>
        <value>如果 <see cref="T:System.Windows.Forms.ListBox" /> 支持多个列，则为 <see langword="true" />；否则为 <see langword="false" />。 默认为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 多列 <xref:System.Windows.Forms.ListBox> 将项放入所需的列数，以使垂直滚动不必要。 用户可以使用键盘导航到当前不可见的列。 将 <xref:System.Windows.Forms.ListBox.HorizontalScrollbar%2A> 属性设置为 "`true` 以显示水平滚动条，该滚动条使用户能够滚动到当前未显示在 <xref:System.Windows.Forms.ListBox>可见区域中的列。 <xref:System.Windows.Forms.ListBox.ColumnWidth%2A> 属性的值确定每列的宽度。  
  
   
  
## Examples  
 下面的代码示例演示了一个简单的两列 <xref:System.Windows.Forms.ListBox>。  
  
 [!code-csharp[System.Windows.Forms.ListBox.MultiColumn#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListBox.MultiColumn/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ListBox.MultiColumn#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListBox.MultiColumn/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">多列 <see cref="T:System.Windows.Forms.ListBox" /> 的高度不能变化。</exception>
        <altmember cref="P:System.Windows.Forms.ListBox.HorizontalScrollbar" />
        <altmember cref="P:System.Windows.Forms.ListBox.ColumnWidth" />
      </Docs>
    </Member>
    <Member MemberName="NoMatches">
      <MemberSignature Language="C#" Value="public const int NoMatches = -1;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int32 NoMatches = (-1)" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Forms.ListBox.NoMatches" />
      <MemberSignature Language="VB.NET" Value="Public Const NoMatches As Integer  = -1" />
      <MemberSignature Language="C++ CLI" Value="public: int NoMatches = -1;" />
      <MemberSignature Language="F#" Value="val mutable NoMatches : int" Usage="System.Windows.Forms.ListBox.NoMatches" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <MemberValue>-1</MemberValue>
      <Docs>
        <summary>指定在搜索过程中没有找到匹配项。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果在搜索中找不到匹配值，则 <xref:System.Windows.Forms.ListBox.FindString%2A>、<xref:System.Windows.Forms.ListBox.FindStringExact%2A>和 <xref:System.Windows.Forms.ListBox.IndexFromPoint%2A> 方法返回此常量。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnChangeUICues">
      <MemberSignature Language="C#" Value="protected override void OnChangeUICues (System.Windows.Forms.UICuesEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnChangeUICues(class System.Windows.Forms.UICuesEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.OnChangeUICues(System.Windows.Forms.UICuesEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnChangeUICues (e As UICuesEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnChangeUICues(System::Windows::Forms::UICuesEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnChangeUICues : System.Windows.Forms.UICuesEventArgs -&gt; unit" Usage="listBox.OnChangeUICues e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.UICuesEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">一个包含事件数据的 <see cref="T:System.Windows.Forms.UICuesEventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.Control.ChangeUICues" /> 事件。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnDataSourceChanged">
      <MemberSignature Language="C#" Value="protected override void OnDataSourceChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnDataSourceChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.OnDataSourceChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnDataSourceChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnDataSourceChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnDataSourceChanged : EventArgs -&gt; unit" Usage="listBox.OnDataSourceChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.EventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.ListControl.DataSourceChanged" /> 事件。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnDisplayMemberChanged">
      <MemberSignature Language="C#" Value="protected override void OnDisplayMemberChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnDisplayMemberChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.OnDisplayMemberChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnDisplayMemberChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnDisplayMemberChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnDisplayMemberChanged : EventArgs -&gt; unit" Usage="listBox.OnDisplayMemberChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.EventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.ListControl.DisplayMemberChanged" /> 事件。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnDrawItem">
      <MemberSignature Language="C#" Value="protected virtual void OnDrawItem (System.Windows.Forms.DrawItemEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDrawItem(class System.Windows.Forms.DrawItemEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.OnDrawItem(System.Windows.Forms.DrawItemEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDrawItem (e As DrawItemEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDrawItem(System::Windows::Forms::DrawItemEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnDrawItem : System.Windows.Forms.DrawItemEventArgs -&gt; unit&#xA;override this.OnDrawItem : System.Windows.Forms.DrawItemEventArgs -&gt; unit" Usage="listBox.OnDrawItem e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DrawItemEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">一个包含事件数据的 <see cref="T:System.Windows.Forms.DrawItemEventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.ListBox.DrawItem" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅[处理和引发事件](/dotnet/standard/events/)。  
  
 利用 <xref:System.Windows.Forms.ListBox.OnDrawItem%2A> 方法，派生类还可以处理事件，而无需附加委托。 这是在派生类中处理事件的首选技术。  
  
   
  
## Examples  
 下面的代码示例演示如何创建所有者描述的 <xref:System.Windows.Forms.ListBox> 项。 此代码使用 <xref:System.Windows.Forms.ListBox.DrawMode%2A> 属性来指定所绘制的项固定大小，并使用 <xref:System.Windows.Forms.ListBox.DrawItem> 事件来执行每个项到 <xref:System.Windows.Forms.ListBox>的绘制。 示例代码使用作为参数传递给事件处理程序的 <xref:System.Windows.Forms.DrawItemEventArgs> 类的属性和方法来绘制项。 此示例要求将 `listBox1` <xref:System.Windows.Forms.ListBox> 控件添加到窗体中，并且 <xref:System.Windows.Forms.ListBox.DrawItem> 事件由示例代码中定义的事件处理程序进行处理。 该示例还要求使用文本 "Apple"、"橙色" 和 "Plum" 将项添加到 <xref:System.Windows.Forms.ListBox> 中。  
  
 [!code-csharp[ListBox.DrawMode#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListBox.DrawMode/CS/form1.cs#1)]
 [!code-vb[ListBox.DrawMode#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListBox.DrawMode/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>在派生类中重写 <see cref="M:System.Windows.Forms.ListBox.OnDrawItem(System.Windows.Forms.DrawItemEventArgs)" /> 时，一定要调用基类的 <see cref="M:System.Windows.Forms.ListBox.OnDrawItem(System.Windows.Forms.DrawItemEventArgs)" /> 方法，以便已注册的委托对事件进行接收。</para></block>
        <altmember cref="E:System.Windows.Forms.ListBox.DrawItem" />
      </Docs>
    </Member>
    <Member MemberName="OnFontChanged">
      <MemberSignature Language="C#" Value="protected override void OnFontChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnFontChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.OnFontChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnFontChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnFontChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnFontChanged : EventArgs -&gt; unit" Usage="listBox.OnFontChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.EventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.Control.FontChanged" /> 事件。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnGotFocus">
      <MemberSignature Language="C#" Value="protected override void OnGotFocus (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnGotFocus(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.OnGotFocus(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnGotFocus (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnGotFocus(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnGotFocus : EventArgs -&gt; unit" Usage="listBox.OnGotFocus e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" Index="0" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="e">事件数据实例。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.Control.GotFocus" /> 事件。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnHandleCreated">
      <MemberSignature Language="C#" Value="protected override void OnHandleCreated (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnHandleCreated(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.OnHandleCreated(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnHandleCreated (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnHandleCreated(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnHandleCreated : EventArgs -&gt; unit" Usage="listBox.OnHandleCreated e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.EventArgs" />。</param>
        <summary>指定已创建窗口句柄的时间，以便可以设置列宽和其他特征。 继承类应调用 <see langword="base.OnHandleCreated" />。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnHandleDestroyed">
      <MemberSignature Language="C#" Value="protected override void OnHandleDestroyed (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnHandleDestroyed(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.OnHandleDestroyed(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnHandleDestroyed (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnHandleDestroyed(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnHandleDestroyed : EventArgs -&gt; unit" Usage="listBox.OnHandleDestroyed e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.EventArgs" />。</param>
        <summary>被重写以确保正确设置和清除项。 继承控件应调用 <see langword="base.OnHandleDestroyed" />。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMeasureItem">
      <MemberSignature Language="C#" Value="protected virtual void OnMeasureItem (System.Windows.Forms.MeasureItemEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMeasureItem(class System.Windows.Forms.MeasureItemEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.OnMeasureItem(System.Windows.Forms.MeasureItemEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMeasureItem (e As MeasureItemEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMeasureItem(System::Windows::Forms::MeasureItemEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMeasureItem : System.Windows.Forms.MeasureItemEventArgs -&gt; unit&#xA;override this.OnMeasureItem : System.Windows.Forms.MeasureItemEventArgs -&gt; unit" Usage="listBox.OnMeasureItem e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.MeasureItemEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">一个包含事件数据的 <see cref="T:System.Windows.Forms.MeasureItemEventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.ListBox.MeasureItem" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅[处理和引发事件](/dotnet/standard/events/)。  
  
 利用 <xref:System.Windows.Forms.ListBox.OnMeasureItem%2A> 方法，派生类还可以处理事件，而无需附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>在派生类中重写 <see cref="M:System.Windows.Forms.ListBox.OnMeasureItem(System.Windows.Forms.MeasureItemEventArgs)" /> 时，一定要调用基类的 <see cref="M:System.Windows.Forms.ListBox.OnMeasureItem(System.Windows.Forms.MeasureItemEventArgs)" /> 方法，以便已注册的委托对事件进行接收。</para></block>
        <altmember cref="E:System.Windows.Forms.ListBox.MeasureItem" />
      </Docs>
    </Member>
    <Member MemberName="OnParentChanged">
      <MemberSignature Language="C#" Value="protected override void OnParentChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnParentChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.OnParentChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnParentChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnParentChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnParentChanged : EventArgs -&gt; unit" Usage="listBox.OnParentChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.EventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.Control.ParentChanged" /> 事件。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnResize">
      <MemberSignature Language="C#" Value="protected override void OnResize (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnResize(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.OnResize(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnResize (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnResize(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnResize : EventArgs -&gt; unit" Usage="listBox.OnResize e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.EventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.Control.Resize" /> 事件。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnSelectedIndexChanged">
      <MemberSignature Language="C#" Value="protected override void OnSelectedIndexChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnSelectedIndexChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.OnSelectedIndexChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnSelectedIndexChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnSelectedIndexChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnSelectedIndexChanged : EventArgs -&gt; unit" Usage="listBox.OnSelectedIndexChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.EventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.ListControl.SelectedValueChanged" /> 事件。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnSelectedValueChanged">
      <MemberSignature Language="C#" Value="protected override void OnSelectedValueChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnSelectedValueChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.OnSelectedValueChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnSelectedValueChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnSelectedValueChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnSelectedValueChanged : EventArgs -&gt; unit" Usage="listBox.OnSelectedValueChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.EventArgs" />。</param>
        <summary>引发 <see cref="E:System.Windows.Forms.ListControl.SelectedValueChanged" /> 事件。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Padding">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Padding Padding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.Padding Padding" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.Padding" />
      <MemberSignature Language="VB.NET" Value="Public Property Padding As Padding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::Padding Padding { System::Windows::Forms::Padding get(); void set(System::Windows::Forms::Padding value); };" />
      <MemberSignature Language="F#" Value="member this.Padding : System.Windows.Forms.Padding with get, set" Usage="System.Windows.Forms.ListBox.Padding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0;dotnet-plat-ext-5.0">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0;dotnet-plat-ext-5.0">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0;dotnet-plat-ext-5.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Padding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>此属性与此类无关。</summary>
        <value>一个 <see cref="T:System.Windows.Forms.Padding" /> 值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性与此类无关。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PaddingChanged">
      <MemberSignature Language="C#" Value="public event EventHandler PaddingChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler PaddingChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListBox.PaddingChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PaddingChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ PaddingChanged;" />
      <MemberSignature Language="F#" Value="member this.PaddingChanged : EventHandler " Usage="member this.PaddingChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0;dotnet-plat-ext-5.0">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0;dotnet-plat-ext-5.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当 <see cref="P:System.Windows.Forms.ListBox.Padding" /> 属性的值更改时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关处理事件的详细信息，请参阅[处理和引发事件](/dotnet/standard/events/)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Paint">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.PaintEventHandler Paint;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.PaintEventHandler Paint" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListBox.Paint" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Paint As PaintEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::PaintEventHandler ^ Paint;" />
      <MemberSignature Language="F#" Value="member this.Paint : System.Windows.Forms.PaintEventHandler " Usage="member this.Paint : System.Windows.Forms.PaintEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.PaintEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在绘制 <see cref="T:System.Windows.Forms.ListBox" /> 控件时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此事件与此类无关。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreferredHeight">
      <MemberSignature Language="C#" Value="public int PreferredHeight { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 PreferredHeight" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.PreferredHeight" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PreferredHeight As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int PreferredHeight { int get(); };" />
      <MemberSignature Language="F#" Value="member this.PreferredHeight : int" Usage="System.Windows.Forms.ListBox.PreferredHeight" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 <see cref="T:System.Windows.Forms.ListBox" /> 中所有项的组合高度。</summary>
        <value>控件中所有项的组合高度（以像素为单位）。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性使您可以确定需要调整 <xref:System.Windows.Forms.ListBox> 大小的高度，以便在列表中显示每个可用项并避免显示垂直滚动条。 如果 <xref:System.Windows.Forms.ListBox> 中的项数很大，则使用 <xref:System.Windows.Forms.ListBox.PreferredHeight%2A> 属性的值调整控件大小可能会导致 <xref:System.Windows.Forms.ListBox> 在窗体或 <xref:System.Windows.Forms.ListBox> 容器的工作区之外大小。  
  
   
  
## Examples  
 下面的代码示例演示如何根据 <xref:System.Windows.Forms.ListBox.PreferredHeight%2A> 属性的值设置 <xref:System.Windows.Forms.ListBox> 的 <xref:System.Windows.Forms.Control.Size%2A> 属性，以便在不使用滚动条的情况下显示 <xref:System.Windows.Forms.ListBox> 中的所有项。 此示例要求已将名为 `listBox1`<xref:System.Windows.Forms.ListBox> 控件添加到窗体中。  
  
 [!code-cpp[ListBox.PreferredHeight#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListBox.PreferredHeight/CPP/form1.cpp#1)]
 [!code-csharp[ListBox.PreferredHeight#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListBox.PreferredHeight/CS/form1.cs#1)]
 [!code-vb[ListBox.PreferredHeight#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListBox.PreferredHeight/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.Height" />
      </Docs>
    </Member>
    <Member MemberName="Refresh">
      <MemberSignature Language="C#" Value="public override void Refresh ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Refresh() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.Refresh" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Refresh ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Refresh();" />
      <MemberSignature Language="F#" Value="override this.Refresh : unit -&gt; unit" Usage="listBox.Refresh " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>强制控件使其工作区无效并立即重绘自己和任何子控件。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RefreshItem">
      <MemberSignature Language="C#" Value="protected override void RefreshItem (int index);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void RefreshItem(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.RefreshItem(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub RefreshItem (index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void RefreshItem(int index);" />
      <MemberSignature Language="F#" Value="override this.RefreshItem : int -&gt; unit" Usage="listBox.RefreshItem index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">要刷新的元素的从零开始的索引。</param>
        <summary>刷新指定索引处的项。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果设置了 <xref:System.Windows.Forms.ListControl.DisplayMember%2A> 属性并且数据源中的属性被分配到 <xref:System.Windows.Forms.ListControl.DisplayMember%2A> 更改，请使用 <xref:System.Windows.Forms.ListBox.RefreshItem%2A> 方法更新 <xref:System.Windows.Forms.ListBox> 控件中的值。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RefreshItems">
      <MemberSignature Language="C#" Value="protected override void RefreshItems ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void RefreshItems() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.RefreshItems" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub RefreshItems ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void RefreshItems();" />
      <MemberSignature Language="F#" Value="override this.RefreshItems : unit -&gt; unit" Usage="listBox.RefreshItems " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>刷新所有 <see cref="T:System.Windows.Forms.ListBox" /> 项并为其检索新字符串。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RescaleConstantsForDpi">
      <MemberSignature Language="C#" Value="protected override void RescaleConstantsForDpi (int deviceDpiOld, int deviceDpiNew);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void RescaleConstantsForDpi(int32 deviceDpiOld, int32 deviceDpiNew) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.RescaleConstantsForDpi(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub RescaleConstantsForDpi (deviceDpiOld As Integer, deviceDpiNew As Integer)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void RescaleConstantsForDpi(int deviceDpiOld, int deviceDpiNew);" />
      <MemberSignature Language="F#" Value="override this.RescaleConstantsForDpi : int * int -&gt; unit" Usage="listBox.RescaleConstantsForDpi (deviceDpiOld, deviceDpiNew)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="deviceDpiOld" Type="System.Int32" Index="0" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="deviceDpiNew" Type="System.Int32" Index="1" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="deviceDpiOld">更改前的 DPI 值。</param>
        <param name="deviceDpiNew">更改后的 DPI 值。</param>
        <summary>发生 DPI 更改时，提供用于重新缩放控件的常数。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResetBackColor">
      <MemberSignature Language="C#" Value="public override void ResetBackColor ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void ResetBackColor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.ResetBackColor" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub ResetBackColor ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void ResetBackColor();" />
      <MemberSignature Language="F#" Value="override this.ResetBackColor : unit -&gt; unit" Usage="listBox.ResetBackColor " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>将 <see cref="P:System.Windows.Forms.Control.BackColor" /> 属性重置为其默认值。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResetForeColor">
      <MemberSignature Language="C#" Value="public override void ResetForeColor ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void ResetForeColor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.ResetForeColor" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub ResetForeColor ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void ResetForeColor();" />
      <MemberSignature Language="F#" Value="override this.ResetForeColor : unit -&gt; unit" Usage="listBox.ResetForeColor " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>将 <see cref="P:System.Windows.Forms.Control.ForeColor" /> 属性重置为其默认值。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RightToLeft">
      <MemberSignature Language="C#" Value="public override System.Windows.Forms.RightToLeft RightToLeft { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.RightToLeft RightToLeft" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.RightToLeft" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property RightToLeft As RightToLeft" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Windows::Forms::RightToLeft RightToLeft { System::Windows::Forms::RightToLeft get(); void set(System::Windows::Forms::RightToLeft value); };" />
      <MemberSignature Language="F#" Value="member this.RightToLeft : System.Windows.Forms.RightToLeft with get, set" Usage="System.Windows.Forms.ListBox.RightToLeft" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.RightToLeft</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示由控件显示的文本是否从右向左显示。</summary>
        <value><see cref="T:System.Windows.Forms.RightToLeft" /> 值之一。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 通过此属性，您的菜单可以支持从右到左书写的语言。 如果将此属性设置为 "`true`"，则将从右到左（而不是从左到右的方法）显示项文本。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ScaleControl">
      <MemberSignature Language="C#" Value="protected override void ScaleControl (System.Drawing.SizeF factor, System.Windows.Forms.BoundsSpecified specified);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void ScaleControl(valuetype System.Drawing.SizeF factor, valuetype System.Windows.Forms.BoundsSpecified specified) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.ScaleControl(System.Drawing.SizeF,System.Windows.Forms.BoundsSpecified)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub ScaleControl (factor As SizeF, specified As BoundsSpecified)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void ScaleControl(System::Drawing::SizeF factor, System::Windows::Forms::BoundsSpecified specified);" />
      <MemberSignature Language="F#" Value="override this.ScaleControl : System.Drawing.SizeF * System.Windows.Forms.BoundsSpecified -&gt; unit" Usage="listBox.ScaleControl (factor, specified)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="factor" Type="System.Drawing.SizeF" Index="0" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="specified" Type="System.Windows.Forms.BoundsSpecified" Index="1" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="factor">控件高度和宽度的缩放因子。</param>
        <param name="specified">一个 <see cref="T:System.Windows.Forms.BoundsSpecified" /> 值，指定在定义控件的大小和位置时要使用的控件边界。</param>
        <summary>缩放控件的位置、大小、空白和边距。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ScrollAlwaysVisible">
      <MemberSignature Language="C#" Value="public bool ScrollAlwaysVisible { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ScrollAlwaysVisible" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.ScrollAlwaysVisible" />
      <MemberSignature Language="VB.NET" Value="Public Property ScrollAlwaysVisible As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ScrollAlwaysVisible { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ScrollAlwaysVisible : bool with get, set" Usage="System.Windows.Forms.ListBox.ScrollAlwaysVisible" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示是否任何时候都显示垂直滚动条。</summary>
        <value>如果应始终显示垂直滚动条，则为 <see langword="true" />；否则为 <see langword="false" />。 默认为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListBox.ScrollAlwaysVisible%2A> 属性指示是否始终显示垂直滚动条（即使 <xref:System.Windows.Forms.ListBox> 中的项目数不需要显示垂直滚动条）。 默认情况下，仅当有足够的项来保证显示时，<xref:System.Windows.Forms.ListBox> 才会显示垂直滚动条。 对于多列 <xref:System.Windows.Forms.ListBox>，<xref:System.Windows.Forms.ListBox.ScrollAlwaysVisible%2A> 属性指示显示水平滚动条。 无论多列 <xref:System.Windows.Forms.ListBox>的此属性的值如何，都不会显示垂直滚动条。  
  
   
  
## Examples  
 下面的代码示例演示了一个所有者描述的 <xref:System.Windows.Forms.ListBox>，方法是将 <xref:System.Windows.Forms.ListBox.DrawMode%2A> 属性设置为 `OwnerDrawVariable` 值并处理 <xref:System.Windows.Forms.ListBox.DrawItem> 和 <xref:System.Windows.Forms.ListBox.MeasureItem> 事件。 它还演示如何设置 <xref:System.Windows.Forms.ListBox.BorderStyle%2A> 和 <xref:System.Windows.Forms.ListBox.ScrollAlwaysVisible%2A> 属性以及如何使用 <xref:System.Windows.Forms.ListBox.ObjectCollection.AddRange%2A> 方法。  
  
 若要运行此示例，请将其粘贴到导入 <xref:System.Drawing> 命名空间和 <xref:System.Windows.Forms> 命名空间的空窗体中。 从窗体的构造函数或 <xref:System.Windows.Forms.Form.Load> 事件处理方法调用 `InitializeOwnerDrawnListBox`。  
  
 [!code-cpp[System.Windows.Forms.ListBoxExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListBoxExample/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ListBoxExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListBoxExample/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ListBoxExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListBoxExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ListBox.HorizontalScrollbar" />
      </Docs>
    </Member>
    <Member MemberName="SelectedIndex">
      <MemberSignature Language="C#" Value="public override int SelectedIndex { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 SelectedIndex" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.SelectedIndex" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property SelectedIndex As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int SelectedIndex { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.SelectedIndex : int with get, set" Usage="System.Windows.Forms.ListBox.SelectedIndex" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:System.Windows.Forms.ListBox" /> 中当前选定项的从零开始的索引。</summary>
        <value>当前选定项的从零开始的索引。 如果未选定任何项，则返回值为负一 (-1)。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 对于标准 <xref:System.Windows.Forms.ListBox>，可以使用此属性来确定在 <xref:System.Windows.Forms.ListBox>中选择的项的索引。 如果 <xref:System.Windows.Forms.ListBox> 的 <xref:System.Windows.Forms.ListBox.SelectionMode%2A> 属性设置为 `SelectionMode.MultiSimple` 或 `SelectionMode.MultiExtended` （这指示多选 <xref:System.Windows.Forms.ListBox>），并且在列表中选择了多个项，则此属性可以将索引返回到任何选定项。  
  
 若要检索包含多重选择 <xref:System.Windows.Forms.ListBox>中所有选定项的索引的集合，请使用 "<xref:System.Windows.Forms.ListBox.SelectedIndices%2A>" 属性。 如果要获取 <xref:System.Windows.Forms.ListBox>中当前选定的项，请使用 <xref:System.Windows.Forms.ListBox.SelectedItem%2A> 属性。 此外，还可以使用 <xref:System.Windows.Forms.ListBox.SelectedItems%2A> 属性获取多选 <xref:System.Windows.Forms.ListBox>中的所有选定项。  
  
   
  
## Examples  
 下面的代码示例演示如何将 <xref:System.Windows.Forms.ListBox.SelectedIndex%2A> 属性与 <xref:System.Windows.Forms.ListBox.TopIndex%2A> 属性一起使用，以将当前选定项移到 <xref:System.Windows.Forms.ListBox>显示区域中项列表的顶部。 该示例还演示了如何使用 <xref:System.Windows.Forms.ListBox.ObjectCollection?displayProperty=nameWithType> 类的 <xref:System.Windows.Forms.ListBox.ObjectCollection.RemoveAt%2A> 方法删除项，以及如何使用 <xref:System.Windows.Forms.ListBox.ClearSelected%2A> 方法清除所有项选择。 代码首先将 <xref:System.Windows.Forms.ListBox> 中当前选定的项移动到列表的顶部。 然后，该代码移除当前选定项之前的所有项，并清除 <xref:System.Windows.Forms.ListBox>中的所有选择。 此示例要求将包含项的 <xref:System.Windows.Forms.ListBox> 添加到窗体中，并且当前在 <xref:System.Windows.Forms.ListBox>中选择了该项。  
  
 [!code-cpp[ListBox.SelectedIndex#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListBox.SelectedIndex/CPP/form1.cpp#1)]
 [!code-csharp[ListBox.SelectedIndex#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListBox.SelectedIndex/CS/form1.cs#1)]
 [!code-vb[ListBox.SelectedIndex#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListBox.SelectedIndex/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">指定的值小于 -1，或者大于或等于项的计数。</exception>
        <exception cref="T:System.ArgumentException"><see cref="P:System.Windows.Forms.ListBox.SelectionMode" /> 属性设置为 <see langword="None" />。</exception>
        <altmember cref="P:System.Windows.Forms.ListBox.SelectedIndices" />
        <altmember cref="P:System.Windows.Forms.ListBox.SelectedItems" />
        <altmember cref="P:System.Windows.Forms.ListBox.SelectedItem" />
      </Docs>
    </Member>
    <Member MemberName="SelectedIndexChanged">
      <MemberSignature Language="C#" Value="public event EventHandler SelectedIndexChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler SelectedIndexChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListBox.SelectedIndexChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event SelectedIndexChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ SelectedIndexChanged;" />
      <MemberSignature Language="F#" Value="member this.SelectedIndexChanged : EventHandler " Usage="member this.SelectedIndexChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在 <see cref="P:System.Windows.Forms.ListBox.SelectedIndex" /> 属性或 <see cref="P:System.Windows.Forms.ListBox.SelectedIndices" /> 集合更改后发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以为此事件创建事件处理程序，以确定何时更改了 <xref:System.Windows.Forms.ListBox> 中的选定索引。 当你需要根据 <xref:System.Windows.Forms.ListBox>中的当前选定内容在其他控件中显示信息时，这会很有用。 您可以使用此事件的事件处理程序将信息加载到其他控件中。  
  
 如果 <xref:System.Windows.Forms.ListBox.SelectionMode%2A> 属性设置为 <xref:System.Windows.Forms.SelectionMode.MultiSimple?displayProperty=nameWithType> 或 <xref:System.Windows.Forms.SelectionMode.MultiExtended?displayProperty=nameWithType>，则对 <xref:System.Windows.Forms.ListBox.SelectedIndices%2A> 集合的任何更改（包括从选定内容中删除项）都将引发此事件。  
  
 有关处理事件的详细信息，请参阅[处理和引发事件](/dotnet/standard/events/)。  
  
   
  
## Examples  
 下面的代码示例演示如何使用 <xref:System.Windows.Forms.ListBox.SelectedIndexChanged> 事件搜索和选择其他 <xref:System.Windows.Forms.ListBox> 控件中的项。 该示例使用 <xref:System.Windows.Forms.ListBox.SelectedIndexChanged> 事件确定 <xref:System.Windows.Forms.ListBox> 中的选定项发生更改的时间。 然后，示例代码使用 <xref:System.Windows.Forms.ListBox.SelectedItem%2A> 属性读取项的文本，并使用第一个 <xref:System.Windows.Forms.ListBox>中 <xref:System.Windows.Forms.ListBox.SelectedItem%2A> 返回的文本对不同 <xref:System.Windows.Forms.ListBox> 调用 <xref:System.Windows.Forms.ListBox.FindString%2A> 方法。 如果在另一个 <xref:System.Windows.Forms.ListBox>中找到了项，则选择该项。 此示例要求将两个名为 `listBox1` 和 `listBox2`的 <xref:System.Windows.Forms.ListBox> 控件添加到窗体中，并且两个 <xref:System.Windows.Forms.ListBox> 控件都包含完全相同的项。 该示例还要求在示例中定义的事件处理方法连接到 `listBox1`的 <xref:System.Windows.Forms.ListBox.SelectedIndexChanged> 事件。  
  
 [!code-cpp[ListBox.SelectedIndexChanged#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListBox.SelectedIndexChanged/CPP/form1.cpp#1)]
 [!code-csharp[ListBox.SelectedIndexChanged#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListBox.SelectedIndexChanged/CS/form1.cs#1)]
 [!code-vb[ListBox.SelectedIndexChanged#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListBox.SelectedIndexChanged/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ListBox.SelectedIndex" />
      </Docs>
    </Member>
    <Member MemberName="SelectedIndices">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListBox.SelectedIndexCollection SelectedIndices { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ListBox/SelectedIndexCollection SelectedIndices" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.SelectedIndices" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SelectedIndices As ListBox.SelectedIndexCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ListBox::SelectedIndexCollection ^ SelectedIndices { System::Windows::Forms::ListBox::SelectedIndexCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SelectedIndices : System.Windows.Forms.ListBox.SelectedIndexCollection" Usage="System.Windows.Forms.ListBox.SelectedIndices" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListBox+SelectedIndexCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个集合，该集合包含 <see cref="T:System.Windows.Forms.ListBox" /> 中所有当前选定项的从零开始的索引。</summary>
        <value><see cref="T:System.Windows.Forms.ListBox.SelectedIndexCollection" />，包含控件中当前选定项的索引。 如果当前没有选定的项，则返回空 <see cref="T:System.Windows.Forms.ListBox.SelectedIndexCollection" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 对于多重选择 <xref:System.Windows.Forms.ListBox>，此属性将返回一个集合，其中包含在 <xref:System.Windows.Forms.ListBox>中选择的所有项的索引。 对于单项选择 <xref:System.Windows.Forms.ListBox>，此属性将返回一个集合，其中包含单个元素，该元素包含 <xref:System.Windows.Forms.ListBox>中唯一选定项的索引。 有关如何操作集合项的详细信息，请参阅 <xref:System.Windows.Forms.ListBox.SelectedIndexCollection>。  
  
 <xref:System.Windows.Forms.ListBox> 类提供了许多用于引用所选项目的方法。 您可以使用 <xref:System.Windows.Forms.ListBox.SelectedIndex%2A> 属性，而不是使用 <xref:System.Windows.Forms.ListBox.SelectedIndices%2A> 属性获取单选 <xref:System.Windows.Forms.ListBox>中当前选定项的索引位置。 如果要获取 <xref:System.Windows.Forms.ListBox>中当前选定的项，而不是项的索引位置，请使用 <xref:System.Windows.Forms.ListBox.SelectedItem%2A> 属性。 此外，如果想要获取多选 <xref:System.Windows.Forms.ListBox>中的所有选定项，则可以使用 "<xref:System.Windows.Forms.ListBox.SelectedItems%2A>" 属性。  
  
   
  
## Examples  
 下面的代码示例演示如何使用 <xref:System.Windows.Forms.ListBox.FindString%2A> 方法来搜索 <xref:System.Windows.Forms.ListBox>的项中搜索文本的所有实例。 该示例使用 <xref:System.Windows.Forms.ListBox.FindString%2A> 方法的版本，通过该方法可以指定起始搜索索引，以便对 <xref:System.Windows.Forms.ListBox>中的所有项进行持续搜索。 该示例还演示了如何确定当 <xref:System.Windows.Forms.ListBox.FindString%2A> 方法到达项列表的底部时从列表顶部开始搜索，以防止递归搜索。 在 <xref:System.Windows.Forms.ListBox>中找到项后，将使用 <xref:System.Windows.Forms.ListBox.SetSelected%2A> 方法选择项。  
  
 [!code-cpp[ListBox.FindString#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListBox.FindString/CPP/form1.cpp#1)]
 [!code-csharp[ListBox.FindString#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListBox.FindString/CS/form1.cs#1)]
 [!code-vb[ListBox.FindString#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListBox.FindString/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ListBox.SelectedIndex" />
        <altmember cref="P:System.Windows.Forms.ListBox.SelectedItem" />
        <altmember cref="P:System.Windows.Forms.ListBox.SelectedItems" />
      </Docs>
    </Member>
    <Member MemberName="SelectedItem">
      <MemberSignature Language="C#" Value="public object SelectedItem { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object SelectedItem" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.SelectedItem" />
      <MemberSignature Language="VB.NET" Value="Public Property SelectedItem As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ SelectedItem { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SelectedItem : obj with get, set" Usage="System.Windows.Forms.ListBox.SelectedItem" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:System.Windows.Forms.ListBox" /> 中的当前选定项。</summary>
        <value>表示控件中当前选定内容的对象。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 对于标准 <xref:System.Windows.Forms.ListBox>，你可以使用此属性来确定在 <xref:System.Windows.Forms.ListBox>中选择了哪一项。 如果 <xref:System.Windows.Forms.ListBox> 的 <xref:System.Windows.Forms.ListBox.SelectionMode%2A> 属性设置为 `SelectionMode.MultiSimple` 或 `SelectionMode.MultiExtended` （指示多选 <xref:System.Windows.Forms.ListBox>），并且在列表中选择了多个项，则此属性可以返回任何选定项。  
  
 若要检索包含多重选择 <xref:System.Windows.Forms.ListBox>中所有选定项的集合，请使用 <xref:System.Windows.Forms.ListBox.SelectedItems%2A> 属性。 如果要获取 <xref:System.Windows.Forms.ListBox>中当前选定项的索引位置，请使用 <xref:System.Windows.Forms.ListBox.SelectedIndex%2A> 属性。 此外，还可以使用 <xref:System.Windows.Forms.ListBox.SelectedIndices%2A> 属性获取多选 <xref:System.Windows.Forms.ListBox>中的所有选择的索引。  
  
   
  
## Examples  
 下面的代码示例演示如何使用 <xref:System.Windows.Forms.ListBox.SelectedIndexChanged> 事件搜索和选择其他 <xref:System.Windows.Forms.ListBox> 控件中的项。 该示例使用 <xref:System.Windows.Forms.ListBox.SelectedIndexChanged> 事件确定 <xref:System.Windows.Forms.ListBox> 中的选定项发生更改的时间。 然后，示例代码使用 <xref:System.Windows.Forms.ListBox.SelectedItem%2A> 属性读取项的文本，并使用第一个 <xref:System.Windows.Forms.ListBox>中 <xref:System.Windows.Forms.ListBox.SelectedItem%2A> 返回的文本对不同 <xref:System.Windows.Forms.ListBox> 调用 <xref:System.Windows.Forms.ListBox.FindString%2A> 方法。 如果在另一个 <xref:System.Windows.Forms.ListBox>中找到了项，则选择该项。 此示例要求将两个名为 `listBox1` 和 `listBox2`的 <xref:System.Windows.Forms.ListBox> 控件添加到窗体中，并且两个 <xref:System.Windows.Forms.ListBox> 控件都包含完全相同的项。 该示例还要求在示例中定义的事件处理方法连接到 `listBox1`的 <xref:System.Windows.Forms.ListBox.SelectedIndexChanged> 事件。  
  
 [!code-cpp[ListBox.SelectedIndexChanged#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListBox.SelectedIndexChanged/CPP/form1.cpp#1)]
 [!code-csharp[ListBox.SelectedIndexChanged#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListBox.SelectedIndexChanged/CS/form1.cs#1)]
 [!code-vb[ListBox.SelectedIndexChanged#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListBox.SelectedIndexChanged/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectedItems">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListBox.SelectedObjectCollection SelectedItems { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ListBox/SelectedObjectCollection SelectedItems" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.SelectedItems" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SelectedItems As ListBox.SelectedObjectCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ListBox::SelectedObjectCollection ^ SelectedItems { System::Windows::Forms::ListBox::SelectedObjectCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SelectedItems : System.Windows.Forms.ListBox.SelectedObjectCollection" Usage="System.Windows.Forms.ListBox.SelectedItems" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListBox+SelectedObjectCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取包含 <see cref="T:System.Windows.Forms.ListBox" /> 中当前选定项的集合。</summary>
        <value><see cref="T:System.Windows.Forms.ListBox.SelectedObjectCollection" />，包含控件中的当前选定项。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 对于多重选择 <xref:System.Windows.Forms.ListBox>，此属性将返回一个集合，其中包含在 <xref:System.Windows.Forms.ListBox>中选择的所有项。 对于单项选择 <xref:System.Windows.Forms.ListBox>，此属性返回一个集合，其中包含单个元素，该元素包含 <xref:System.Windows.Forms.ListBox>中唯一选定的项。 有关如何操作集合项的详细信息，请参阅 <xref:System.Windows.Forms.ListBox.SelectedObjectCollection>。  
  
 <xref:System.Windows.Forms.ListBox> 类提供了许多用于引用所选项目的方法。 您可以使用 <xref:System.Windows.Forms.ListBox.SelectedItem%2A> 属性，而不是使用 <xref:System.Windows.Forms.ListBox.SelectedItems%2A> 属性获取单选 <xref:System.Windows.Forms.ListBox>中的当前选定项。 如果要获取 <xref:System.Windows.Forms.ListBox>中当前选定项的索引位置，而不是项本身，则使用 <xref:System.Windows.Forms.ListBox.SelectedIndex%2A> 属性。 此外，如果想要获取多选 <xref:System.Windows.Forms.ListBox>中所有选定项的索引位置，则可以使用 "<xref:System.Windows.Forms.ListBox.SelectedIndices%2A>" 属性。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectionMode">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.SelectionMode SelectionMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.SelectionMode SelectionMode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.SelectionMode" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property SelectionMode As SelectionMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Windows::Forms::SelectionMode SelectionMode { System::Windows::Forms::SelectionMode get(); void set(System::Windows::Forms::SelectionMode value); };" />
      <MemberSignature Language="F#" Value="member this.SelectionMode : System.Windows.Forms.SelectionMode with get, set" Usage="System.Windows.Forms.ListBox.SelectionMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.SelectionMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置在 <see cref="T:System.Windows.Forms.ListBox" /> 中选择项所用的方法。</summary>
        <value><see cref="T:System.Windows.Forms.SelectionMode" /> 值之一。 默认为 <see langword="SelectionMode.One" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 利用 <xref:System.Windows.Forms.ListBox.SelectionMode%2A> 属性，您可以确定用户一次可以选择 <xref:System.Windows.Forms.ListBox> 中的多少项以及用户如何进行多项选择。 当 <xref:System.Windows.Forms.ListBox.SelectionMode%2A> 属性设置为 `SelectionMode.MultiExtended`时，按 SHIFT 键并单击鼠标或按 SHIFT 键和箭头键之一（向上键、向下键、向左键和向右键）可将所选内容从之前选择的项扩展到当前项。 按下 CTRL 键并单击鼠标即可选择或取消选择列表中的项。 如果将属性设置为 `SelectionMode.MultiSimple`，鼠标单击或按空格键会选择或取消选择列表中的项。  
  
   
  
## Examples  
 下面的代码示例演示如何使用 <xref:System.Windows.Forms.ListBox.GetSelected%2A> 方法来确定 <xref:System.Windows.Forms.ListBox> 中选择了哪些项，以便选择未选择的项并取消选择所选的项。 该示例还演示了如何使用 <xref:System.Windows.Forms.ListBox.SelectionMode%2A> 属性使某个 <xref:System.Windows.Forms.ListBox> 具有多个选定项，并使用 <xref:System.Windows.Forms.ListBox.Sorted%2A> 属性演示如何自动对 <xref:System.Windows.Forms.ListBox> 中的项进行排序。 此示例要求已将名为 `listBox1`的 <xref:System.Windows.Forms.ListBox>添加到窗体中，并且该示例中定义的 `InitializeMyListBox` 方法是从窗体的 <xref:System.Windows.Forms.Form.Load> 事件中调用的。  
  
 [!code-cpp[ListBox.GetSelected#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListBox.GetSelected/CPP/form1.cpp#1)]
 [!code-csharp[ListBox.GetSelected#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListBox.GetSelected/CS/form1.cs#1)]
 [!code-vb[ListBox.GetSelected#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListBox.GetSelected/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">分配的值不是 <see cref="T:System.Windows.Forms.SelectionMode" /> 值之一。</exception>
        <altmember cref="T:System.Windows.Forms.SelectionMode" />
      </Docs>
    </Member>
    <Member MemberName="SetBoundsCore">
      <MemberSignature Language="C#" Value="protected override void SetBoundsCore (int x, int y, int width, int height, System.Windows.Forms.BoundsSpecified specified);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void SetBoundsCore(int32 x, int32 y, int32 width, int32 height, valuetype System.Windows.Forms.BoundsSpecified specified) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub SetBoundsCore (x As Integer, y As Integer, width As Integer, height As Integer, specified As BoundsSpecified)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void SetBoundsCore(int x, int y, int width, int height, System::Windows::Forms::BoundsSpecified specified);" />
      <MemberSignature Language="F#" Value="override this.SetBoundsCore : int * int * int * int * System.Windows.Forms.BoundsSpecified -&gt; unit" Usage="listBox.SetBoundsCore (x, y, width, height, specified)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
        <Parameter Name="specified" Type="System.Windows.Forms.BoundsSpecified" />
      </Parameters>
      <Docs>
        <param name="x">控件的新 <see cref="P:System.Windows.Forms.Control.Left" /> 属性值。</param>
        <param name="y">控件的新 <see cref="P:System.Windows.Forms.Control.Top" /> 属性值。</param>
        <param name="width">控件的新 <see cref="P:System.Windows.Forms.Control.Width" /> 属性值。</param>
        <param name="height">控件的新 <see cref="P:System.Windows.Forms.Control.Height" /> 属性值。</param>
        <param name="specified"><see cref="T:System.Windows.Forms.BoundsSpecified" /> 值的按位组合。</param>
        <summary>设置 <see cref="T:System.Windows.Forms.ListBox" /> 控件的指定边界。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListBox> 控件的高度通过 <xref:System.Windows.Forms.ListBox.ItemHeight%2A> 属性的倍数增加和减少。 如果 height 是 <xref:System.Windows.Forms.ListBox.ItemHeight%2A>的倍数的数字，则 <xref:System.Windows.Forms.ListBox> 的高度将由小于高度的最大倍数更改。  
  
 通常，与指定参数中未包含的边界对应的参数将与当前值一起传入。 例如，可以使用对控件的当前实例的引用来传入 <xref:System.Windows.Forms.Control.Location%2A> 属性的 `height`、`width``x` 或 `y` 属性。 但是，传入的所有值都将生效并应用于控件。  
  
 `specified` 参数表示应用程序更改 <xref:System.Windows.Forms.Control.Bounds%2A> 控件的元素。 例如，如果更改控件的 <xref:System.Windows.Forms.Control.Size%2A>，则 `specified` 参数值 <xref:System.Windows.Forms.BoundsSpecified.Size>。 但是，如果根据要设置的 <xref:System.Windows.Forms.Control.Dock%2A> 属性对 <xref:System.Windows.Forms.Control.Size%2A> 进行调整，则 <xref:System.Windows.Forms.BoundsSpecified.None>`specified` 参数值。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>当在派生类中重写 <see cref="M:System.Windows.Forms.ListBox.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)" /> 时，请确保调用基类的 <see cref="M:System.Windows.Forms.ListBox.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)" /> 方法来强制更改控件的边界。 派生类可以向 <see cref="M:System.Windows.Forms.ListBox.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)" /> 方法添加大小限制。</para></block>
      </Docs>
    </Member>
    <Member MemberName="SetItemCore">
      <MemberSignature Language="C#" Value="protected override void SetItemCore (int index, object value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void SetItemCore(int32 index, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.SetItemCore(System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub SetItemCore (index As Integer, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void SetItemCore(int index, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="override this.SetItemCore : int * obj -&gt; unit" Usage="listBox.SetItemCore (index, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="index">对象的数组索引。</param>
        <param name="value">对象。</param>
        <summary>在派生类中设置具有指定索引的对象。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetItemsCore">
      <MemberSignature Language="C#" Value="protected override void SetItemsCore (System.Collections.IList value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void SetItemsCore(class System.Collections.IList value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.SetItemsCore(System.Collections.IList)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub SetItemsCore (value As IList)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void SetItemsCore(System::Collections::IList ^ value);" />
      <MemberSignature Language="F#" Value="override this.SetItemsCore : System.Collections.IList -&gt; unit" Usage="listBox.SetItemsCore value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Collections.IList" />
      </Parameters>
      <Docs>
        <param name="value">要插入控件中的对象的数组。</param>
        <summary>清除 <see cref="T:System.Windows.Forms.ListBox" /> 的内容，并向控件中添加指定项。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetSelected">
      <MemberSignature Language="C#" Value="public void SetSelected (int index, bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetSelected(int32 index, bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.SetSelected(System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetSelected (index As Integer, value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetSelected(int index, bool value);" />
      <MemberSignature Language="F#" Value="member this.SetSelected : int * bool -&gt; unit" Usage="listBox.SetSelected (index, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="index"><see cref="T:System.Windows.Forms.ListBox" /> 中要选择或清除对其选定的项的从零开始的索引。</param>
        <param name="value">如果为 <see langword="true" />，则选择指定的项；否则为 <see langword="false" />。</param>
        <summary>选择或清除对 <see cref="T:System.Windows.Forms.ListBox" /> 中指定项的选定。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以使用此属性在多选 <xref:System.Windows.Forms.ListBox>中设置选择项。 若要在单项选择 <xref:System.Windows.Forms.ListBox>中选择项，请使用 <xref:System.Windows.Forms.ListBox.SelectedIndex%2A> 属性。  
  
   
  
## Examples  
 下面的代码示例演示如何创建一个 <xref:System.Windows.Forms.ListBox> 控件，该控件在列中显示多个项，并且可以在控件的列表中选择多个项。 示例的代码使用 <xref:System.Windows.Forms.ListBox.ObjectCollection> 类的 <xref:System.Windows.Forms.ListBox.ObjectCollection.Add%2A> 方法将50项添加到 <xref:System.Windows.Forms.ListBox>，然后使用 <xref:System.Windows.Forms.ListBox.SetSelected%2A> 方法从列表中选择三项。 然后，该代码显示来自 <xref:System.Windows.Forms.ListBox.SelectedObjectCollection> 集合（通过 <xref:System.Windows.Forms.ListBox.SelectedItems%2A> 属性）和 <xref:System.Windows.Forms.ListBox.SelectedIndexCollection> 的值（通过 <xref:System.Windows.Forms.ListBox.SelectedIndices%2A> 属性）。 此示例要求代码位于 <xref:System.Windows.Forms.Form>的和中。  
  
 [!code-cpp[Classic ListBox Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic ListBox Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ListBox Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic ListBox Example/CS/source.cs#1)]
 [!code-vb[Classic ListBox Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic ListBox Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">指定索引位于有效值范围之外。</exception>
        <exception cref="T:System.InvalidOperationException"><see cref="P:System.Windows.Forms.ListBox.SelectionMode" /> 属性已设置为 <see langword="None" />。</exception>
        <altmember cref="P:System.Windows.Forms.ListBox.SelectedIndex" />
      </Docs>
    </Member>
    <Member MemberName="Sort">
      <MemberSignature Language="C#" Value="protected virtual void Sort ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Sort() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.Sort" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Sort ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Sort();" />
      <MemberSignature Language="F#" Value="abstract member Sort : unit -&gt; unit&#xA;override this.Sort : unit -&gt; unit" Usage="listBox.Sort " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>对 <see cref="T:System.Windows.Forms.ListBox" /> 中的项排序。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果 `true`<xref:System.Windows.Forms.ListBox.Sorted%2A> 属性，<xref:System.Windows.Forms.ListBox.Sort%2A> 强制集合将每个项重新添加到其自身。 然后，每个项都将插入到正确的位置。  
  
   
  
## Examples  
 下面的代码示例演示如何使用 <xref:System.Windows.Forms.ListBox.Sort%2A> 方法。 该示例演示如何从 <xref:System.Windows.Forms.ListBox> 类继承并重写派生类中的 <xref:System.Windows.Forms.ListBox.Sort%2A> 方法，以执行用户定义的排序。 若要运行此示例，请将以下代码粘贴到一个空窗体中。  
  
 [!code-cpp[System.Windows.Forms.ListBoxSort#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListBoxSort/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ListBoxSort#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListBoxSort/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ListBoxSort#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListBoxSort/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>您可以在派生类中重写此方法，以提供您自己的排序例程。 通过将 <see cref="P:System.Windows.Forms.ListBox.Sorted" /> 属性设置为 <see langword="true" />，访问重写的 <see cref="M:System.Windows.Forms.ListBox.Sort" /> 方法的结果。 向 <see cref="T:System.Windows.Forms.ListBox" />添加项时，先对项进行排序并添加新项会更有效。</para></block>
        <altmember cref="P:System.Windows.Forms.ListBox.Sorted" />
      </Docs>
    </Member>
    <Member MemberName="Sorted">
      <MemberSignature Language="C#" Value="public bool Sorted { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Sorted" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.Sorted" />
      <MemberSignature Language="VB.NET" Value="Public Property Sorted As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Sorted { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Sorted : bool with get, set" Usage="System.Windows.Forms.ListBox.Sorted" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示 <see cref="T:System.Windows.Forms.ListBox" /> 中的项是否按字母顺序排序。</summary>
        <value>如果排序控件中的项，则为 <see langword="true" />；否则为 <see langword="false" />。 默认为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用 <xref:System.Windows.Forms.ListBox.Sorted%2A> 属性自动对 <xref:System.Windows.Forms.ListBox>中的字符串进行排序。 在将项添加到排序的 <xref:System.Windows.Forms.ListBox>时，项将移动到排序列表中的适当位置。 向 <xref:System.Windows.Forms.ListBox>添加项时，先对项进行排序并添加新项会更有效。  
  
 其 <xref:System.Windows.Forms.ListBox.Sorted%2A> 设置为 `true` 的 <xref:System.Windows.Forms.ListBox> 不应使用 <xref:System.Windows.Forms.ListControl.DataSource%2A> 属性绑定到数据。 若要在绑定 <xref:System.Windows.Forms.ListBox>中显示已排序的数据，应绑定到支持排序的数据源，并使数据源提供排序。  
  
   
  
## Examples  
 下面的代码示例演示如何使用 <xref:System.Windows.Forms.ListBox.GetSelected%2A> 方法来确定 <xref:System.Windows.Forms.ListBox> 中选择了哪些项，以便选择未选择的项并取消选择所选的项。 该示例还演示了如何使用 <xref:System.Windows.Forms.ListBox.SelectionMode%2A> 属性使某个 <xref:System.Windows.Forms.ListBox> 具有多个选定项，并使用 <xref:System.Windows.Forms.ListBox.Sorted%2A> 属性演示如何自动对 <xref:System.Windows.Forms.ListBox> 中的项进行排序。 此示例要求已将名为 `listBox1`的 <xref:System.Windows.Forms.ListBox>添加到窗体中，并且该示例中定义的 `InitializeMyListBox` 方法是从窗体的 <xref:System.Windows.Forms.Form.Load> 事件中调用的。  
  
 [!code-cpp[ListBox.GetSelected#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListBox.GetSelected/CPP/form1.cpp#1)]
 [!code-csharp[ListBox.GetSelected#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListBox.GetSelected/CS/form1.cs#1)]
 [!code-vb[ListBox.GetSelected#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListBox.GetSelected/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Text">
      <MemberSignature Language="C#" Value="public override string Text { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Text" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.Text" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Text As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Text { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Text : string with get, set" Usage="System.Windows.Forms.ListBox.Text" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或搜索 <see cref="T:System.Windows.Forms.ListBox" /> 中当前选定项的文本。</summary>
        <value>控件中当前选定项的文本。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果将此属性的值设置为字符串值，则 <xref:System.Windows.Forms.ListBox> 搜索与指定文本匹配的 <xref:System.Windows.Forms.ListBox> 中的项，然后选择该项。 你还可以使用此属性来确定当前在 <xref:System.Windows.Forms.ListBox>中选择的项。 如果 <xref:System.Windows.Forms.ListBox> 的 <xref:System.Windows.Forms.ListBox.SelectionMode%2A> 属性设置为 `SelectionMode.MultiExtended`，则此属性将返回选定的第一个项的文本。 如果 <xref:System.Windows.Forms.ListBox> 的 <xref:System.Windows.Forms.ListBox.SelectionMode%2A> 属性未设置为 `SelectionMode.None`，则此属性返回选定的第一个项的文本。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextChanged">
      <MemberSignature Language="C#" Value="public event EventHandler TextChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler TextChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListBox.TextChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TextChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ TextChanged;" />
      <MemberSignature Language="F#" Value="member this.TextChanged : EventHandler " Usage="member this.TextChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当 <see cref="P:System.Windows.Forms.ListBox.Text" /> 属性更改时发生。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TopIndex">
      <MemberSignature Language="C#" Value="public int TopIndex { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 TopIndex" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.TopIndex" />
      <MemberSignature Language="VB.NET" Value="Public Property TopIndex As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int TopIndex { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.TopIndex : int with get, set" Usage="System.Windows.Forms.ListBox.TopIndex" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:System.Windows.Forms.ListBox" /> 中第一个可见项的索引。</summary>
        <value>控件中第一个可见项的从零开始的索引。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 最初，索引位置为零（0）的项位于 <xref:System.Windows.Forms.ListBox>可见区域的顶部。 如果 <xref:System.Windows.Forms.ListBox> 的内容已滚动，则另一项可能位于控件的显示区域的顶部。 您可以使用此属性来获取 <xref:System.Windows.Forms.ListBox.ObjectCollection> 中当前位于控件可见区域顶部的项的 <xref:System.Windows.Forms.ListBox> 的索引。 还可以使用此属性将列表中的项定位到控件的可见区域的顶部。  
  
   
  
## Examples  
 下面的代码示例演示如何将 <xref:System.Windows.Forms.ListBox.SelectedIndex%2A> 属性与 <xref:System.Windows.Forms.ListBox.TopIndex%2A> 属性一起使用，以将当前选定项移到 <xref:System.Windows.Forms.ListBox>显示区域中项列表的顶部。 该示例还演示了如何使用 <xref:System.Windows.Forms.ListBox.ObjectCollection?displayProperty=nameWithType> 类的 <xref:System.Windows.Forms.ListBox.ObjectCollection.RemoveAt%2A> 方法删除项，以及如何使用 <xref:System.Windows.Forms.ListBox.ClearSelected%2A> 方法清除所有项选择。 代码首先将 <xref:System.Windows.Forms.ListBox> 中当前选定的项移动到列表的顶部。 然后，该代码移除当前选定项之前的所有项，并清除 <xref:System.Windows.Forms.ListBox>中的所有选择。 此示例要求将包含项的 <xref:System.Windows.Forms.ListBox> 添加到窗体中，并且当前在 <xref:System.Windows.Forms.ListBox>中选择了该项。  
  
 [!code-cpp[ListBox.SelectedIndex#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListBox.SelectedIndex/CPP/form1.cpp#1)]
 [!code-csharp[ListBox.SelectedIndex#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListBox.SelectedIndex/CS/form1.cs#1)]
 [!code-vb[ListBox.SelectedIndex#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListBox.SelectedIndex/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="listBox.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返回 <see cref="T:System.Windows.Forms.ListBox" /> 的字符串表示形式。</summary>
        <returns>一个字符串，它描述控件类型、<see cref="T:System.Windows.Forms.ListBox" /> 控件中的项计数，如果该计数不为 0，则还描述 <see cref="T:System.Windows.Forms.ListBox" /> 中第一项的 Text 属性。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UseCustomTabOffsets">
      <MemberSignature Language="C#" Value="public bool UseCustomTabOffsets { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseCustomTabOffsets" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.UseCustomTabOffsets" />
      <MemberSignature Language="VB.NET" Value="Public Property UseCustomTabOffsets As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UseCustomTabOffsets { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.UseCustomTabOffsets : bool with get, set" Usage="System.Windows.Forms.ListBox.UseCustomTabOffsets" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0;dotnet-plat-ext-5.0">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0;dotnet-plat-ext-5.0">
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，它指示 <see cref="T:System.Windows.Forms.ListBox" /> 在通过使用 <see cref="P:System.Windows.Forms.ListBox.CustomTabOffsets" /> 整数数组绘制字符串时是否识别并展开制表符。</summary>
        <value>如果 <see cref="T:System.Windows.Forms.ListBox" /> 识别并展开制表符，则为 <see langword="true" />；否则为 <see langword="false" />。 默认为 <see langword="false" />。</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Windows.Forms.ListBox.CustomTabOffsets" />
      </Docs>
    </Member>
    <Member MemberName="UseTabStops">
      <MemberSignature Language="C#" Value="public bool UseTabStops { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseTabStops" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.UseTabStops" />
      <MemberSignature Language="VB.NET" Value="Public Property UseTabStops As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UseTabStops { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.UseTabStops : bool with get, set" Usage="System.Windows.Forms.ListBox.UseTabStops" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示 <see cref="T:System.Windows.Forms.ListBox" /> 在绘制其字符串时是否可识别和展开制表符。</summary>
        <value>如果控件可展开制表符，则为 <see langword="true" />；否则为 <see langword="false" />。 默认为 <see langword="true" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例演示如何创建显示带有制表符的项的 <xref:System.Windows.Forms.ListBox>。  
  
 [!code-cpp[ListBox.UseTabStops#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListBox.UseTabStops/CPP/form1.cpp#1)]
 [!code-csharp[ListBox.UseTabStops#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListBox.UseTabStops/CS/form1.cs#1)]
 [!code-vb[ListBox.UseTabStops#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListBox.UseTabStops/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WmReflectCommand">
      <MemberSignature Language="C#" Value="protected virtual void WmReflectCommand (ref System.Windows.Forms.Message m);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void WmReflectCommand(valuetype System.Windows.Forms.Message&amp; m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.WmReflectCommand(System.Windows.Forms.Message@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub WmReflectCommand (ByRef m As Message)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void WmReflectCommand(System::Windows::Forms::Message % m);" />
      <MemberSignature Language="F#" Value="abstract member WmReflectCommand : Message -&gt; unit&#xA;override this.WmReflectCommand : Message -&gt; unit" Usage="listBox.WmReflectCommand m" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Windows.Forms.Message" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="m">顶级窗口发送到 <see cref="T:System.Windows.Forms.Message" /> 控件的 <see cref="T:System.Windows.Forms.ListBox" />。</param>
        <summary>处理 <see cref="T:System.Windows.Forms.ListView" /> 控件从顶级窗口中接收的命令消息。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WndProc">
      <MemberSignature Language="C#" Value="protected override void WndProc (ref System.Windows.Forms.Message m);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void WndProc(valuetype System.Windows.Forms.Message&amp; m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.WndProc(System.Windows.Forms.Message@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub WndProc (ByRef m As Message)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void WndProc(System::Windows::Forms::Message % m);" />
      <MemberSignature Language="F#" Value="override this.WndProc : Message -&gt; unit" Usage="listBox.WndProc m" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Windows.Forms.Message" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="m">一个 Windows 消息对象。</param>
        <summary>列表的窗口过程。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 继承类可以重写此方法以添加额外的功能，但应调用基类上的 <xref:System.Windows.Forms.ListBox.WndProc%2A> 方法，以确保列表继续正常运行。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
