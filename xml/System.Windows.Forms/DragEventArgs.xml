<Type Name="DragEventArgs" FullName="System.Windows.Forms.DragEventArgs">
  <Metadata><Meta Name="ms.openlocfilehash" Value="3ce15aa7c13deddddc09cbb5b657c00c8b96df8f" /><Meta Name="ms.sourcegitcommit" Value="9506e50ec7beb4fa30206b9840dc546b035a6600" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/23/2020" /><Meta Name="ms.locfileid" Value="86993520" /></Metadata><TypeSignature Language="C#" Value="public class DragEventArgs : EventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DragEventArgs extends System.EventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.DragEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public Class DragEventArgs&#xA;Inherits EventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class DragEventArgs : EventArgs" />
  <TypeSignature Language="F#" Value="type DragEventArgs = class&#xA;    inherit EventArgs" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.EventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName Language="C#">[System.Runtime.InteropServices.ComVisible(true)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.ComVisible(true)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>为 <see cref="E:System.Windows.Forms.Control.DragDrop" />、<see cref="E:System.Windows.Forms.Control.DragEnter" /> 或 <see cref="E:System.Windows.Forms.Control.DragOver" /> 事件提供数据。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.Control.DragDrop>当用户通过将对象拖到控件上并通过释放鼠标按钮将其放到控件上来完成拖放操作时发生该事件。 <xref:System.Windows.Forms.Control.DragEnter>当用户将鼠标指针移到控件上并使用鼠标拖动对象时，会发生该事件。 <xref:System.Windows.Forms.Control.DragOver>当用户将鼠标指针移到控件上并使用鼠标拖动对象时，会发生该事件。  
  
 <xref:System.Windows.Forms.DragEventArgs>对象指定与此事件相关联的任何数据、SHIFT、CTRL 和 ALT 键的当前状态、鼠标指针的位置以及拖动事件的源和目标所允许的拖放效果。  
  
 有关事件模型的信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。  
  
   
  
## Examples  
 下面的示例演示两个控件之间的拖放操作 <xref:System.Windows.Forms.ListBox> 。 该示例在 <xref:System.Windows.Forms.Control.DoDragDrop%2A> 拖动操作开始时调用方法。 如果在事件过程中鼠标移动了多个鼠标位置，则拖动操作将启动 <xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=nameWithType> <xref:System.Windows.Forms.Control.MouseDown> 。 <xref:System.Windows.Forms.ListBox.IndexFromPoint%2A>方法用于确定事件期间要拖动的项的索引 `MouseDown` 。  
  
 该示例还演示了如何对拖放操作使用自定义光标。 该示例假定应用程序目录中有两个光标文件， `3dwarro.cur` `3dwno.cur` 分别用于自定义的拖放游标和非删除光标。 如果选中，则将使用自定义光标 `UseCustomCursorsCheck` <xref:System.Windows.Forms.CheckBox> 。 自定义游标是在 <xref:System.Windows.Forms.Control.GiveFeedback> 事件处理程序中设置的。  
  
 键盘状态在 <xref:System.Windows.Forms.Control.DragOver> 右侧的事件处理程序中进行计算 `ListBox` ，以根据 SHIFT、CTRL、ALT 或 CTRL + ALT 键确定拖动操作的状态。 此 `ListBox` 事件期间也会确定放置过程中的位置 `DragOver` 。 如果要删除的数据不是，则将 `String` <xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=nameWithType> 设置为 <xref:System.Windows.Forms.DragDropEffects.None?displayProperty=nameWithType> 。 最后，放置的状态显示在中 `DropLocationLabel` <xref:System.Windows.Forms.Label> 。  
  
 要放置给权限的数据 `ListBox` 在 <xref:System.Windows.Forms.Control.DragDrop> 事件处理程序中确定，并将 `String` 值添加到中的适当位置 `ListBox` 。 如果拖动操作移到窗体的边界之外，则会在事件处理程序中取消拖放操作 <xref:System.Windows.Forms.Control.QueryContinueDrag> 。  
  
 此代码摘录演示了如何使用 <xref:System.Windows.Forms.DragEventArgs> 类。 <xref:System.Windows.Forms.Control.DoDragDrop%2A>有关完整的代码示例，请参阅方法。  
  
 [!code-cpp[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CPP/form1.cpp#4)]
 [!code-csharp[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CS/form1.cs#4)]
 [!code-vb[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/VB/form1.vb#4)]  
  
 下面的示例演示如何在 <xref:System.Windows.Forms.DragEventArgs> 拖放操作的源和目标之间传递。 在此示例中， <xref:System.Windows.Forms.ListBox> 控件是数据源， <xref:System.Windows.Forms.RichTextBox> 控件是目标。 该示例假设已 <xref:System.Windows.Forms.ListBox> 使用有效文件名的列表填充了控件。 当用户将其中一个显示的文件名从控件拖动 <xref:System.Windows.Forms.ListBox> 到控件上时 <xref:System.Windows.Forms.RichTextBox> ，将打开文件名中引用的文件。  
  
 在 <xref:System.Windows.Forms.ListBox> 控件的 MouseDown 事件中启动该操作。 在 <xref:System.Windows.Forms.RichTextBox.DragEnter> 事件处理程序中，该示例使用 <xref:System.Windows.Forms.IDataObject.GetDataPresent%2A> 方法来验证数据是否为控件可以显示的格式， <xref:System.Windows.Forms.RichTextBox> 然后设置 <xref:System.Windows.Forms.DragDropEffects> 属性以指定应将数据从源控件复制到目标控件。 最后， <xref:System.Windows.Forms.RichTextBox> 控件的 system.windows.dragdrop.drop> 事件处理程序使用 <xref:System.Windows.Forms.IDataObject.GetData%2A> 方法来检索要打开的文件名。  
  
 [!code-cpp[RichTextDragDrop#1](~/samples/snippets/cpp/VS_Snippets_Winforms/RichTextDragDrop/CPP/form1.cpp#1)]
 [!code-csharp[RichTextDragDrop#1](~/samples/snippets/csharp/VS_Snippets_Winforms/RichTextDragDrop/CS/form1.cs#1)]
 [!code-vb[RichTextDragDrop#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/RichTextDragDrop/VB/form1.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Forms.DragDropEffects" />
    <altmember cref="M:System.Windows.Forms.Control.OnDragDrop(System.Windows.Forms.DragEventArgs)" />
    <altmember cref="E:System.Windows.Forms.Control.DragDrop" />
    <altmember cref="M:System.Windows.Forms.Control.OnDragEnter(System.Windows.Forms.DragEventArgs)" />
    <altmember cref="E:System.Windows.Forms.Control.DragEnter" />
    <altmember cref="M:System.Windows.Forms.Control.OnDragOver(System.Windows.Forms.DragEventArgs)" />
    <altmember cref="E:System.Windows.Forms.Control.DragOver" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DragEventArgs (System.Windows.Forms.IDataObject data, int keyState, int x, int y, System.Windows.Forms.DragDropEffects allowedEffect, System.Windows.Forms.DragDropEffects effect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Forms.IDataObject data, int32 keyState, int32 x, int32 y, valuetype System.Windows.Forms.DragDropEffects allowedEffect, valuetype System.Windows.Forms.DragDropEffects effect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DragEventArgs.#ctor(System.Windows.Forms.IDataObject,System.Int32,System.Int32,System.Int32,System.Windows.Forms.DragDropEffects,System.Windows.Forms.DragDropEffects)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (data As IDataObject, keyState As Integer, x As Integer, y As Integer, allowedEffect As DragDropEffects, effect As DragDropEffects)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DragEventArgs(System::Windows::Forms::IDataObject ^ data, int keyState, int x, int y, System::Windows::Forms::DragDropEffects allowedEffect, System::Windows::Forms::DragDropEffects effect);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.DragEventArgs : System.Windows.Forms.IDataObject * int * int * int * System.Windows.Forms.DragDropEffects * System.Windows.Forms.DragDropEffects -&gt; System.Windows.Forms.DragEventArgs" Usage="new System.Windows.Forms.DragEventArgs (data, keyState, x, y, allowedEffect, effect)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="data" Type="System.Windows.Forms.IDataObject" />
        <Parameter Name="keyState" Type="System.Int32" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="allowedEffect" Type="System.Windows.Forms.DragDropEffects" />
        <Parameter Name="effect" Type="System.Windows.Forms.DragDropEffects" />
      </Parameters>
      <Docs>
        <param name="data">与此事件关联的数据。</param>
        <param name="keyState">Shift、Ctrl 和 Alt 键的当前状态。</param>
        <param name="x">鼠标光标的 X 坐标（以像素为单位）。</param>
        <param name="y">鼠标光标的 Y 坐标（以像素为单位）。</param>
        <param name="allowedEffect"><see cref="T:System.Windows.Forms.DragDropEffects" /> 值之一。</param>
        <param name="effect"><see cref="T:System.Windows.Forms.DragDropEffects" /> 值之一。</param>
        <summary>初始化 <see cref="T:System.Windows.Forms.DragEventArgs" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.Forms.DragDropEffects" />
        <altmember cref="T:System.Windows.Forms.IDataObject" />
      </Docs>
    </Member>
    <Member MemberName="AllowedEffect">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DragDropEffects AllowedEffect { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.DragDropEffects AllowedEffect" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DragEventArgs.AllowedEffect" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AllowedEffect As DragDropEffects" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::DragDropEffects AllowedEffect { System::Windows::Forms::DragDropEffects get(); };" />
      <MemberSignature Language="F#" Value="member this.AllowedEffect : System.Windows.Forms.DragDropEffects" Usage="System.Windows.Forms.DragEventArgs.AllowedEffect" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DragDropEffects</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取拖动事件的发起方（或源）所允许的拖放操作。</summary>
        <value><see cref="T:System.Windows.Forms.DragDropEffects" /> 值之一。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当控件通过调用方法启动拖放操作时 <xref:System.Windows.Forms.Control.DoDragDrop%2A?displayProperty=nameWithType> ，它指定操作的允许效果。 例如，当您从源拖动某个文件时，如果该文件是只读的 (或从只读存储介质（如 CD) ），则源将指示可以将该文件复制到目标，但不能将其传输到目标。  
  
 尝试对拖动的数据执行操作之前，应检查此属性以确保允许该操作。  
  
   
  
## Examples  
 下面的示例演示两个控件之间的拖放操作 <xref:System.Windows.Forms.ListBox> 。 该示例在 <xref:System.Windows.Forms.Control.DoDragDrop%2A> 拖动操作开始时调用方法。 如果在事件过程中鼠标移动了多个鼠标位置，则拖动操作将启动 <xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=nameWithType> <xref:System.Windows.Forms.Control.MouseDown> 。 <xref:System.Windows.Forms.ListBox.IndexFromPoint%2A>方法用于确定事件期间要拖动的项的索引 `MouseDown` 。  
  
 该示例还演示了如何对拖放操作使用自定义光标。 该示例假定应用程序目录中有两个光标文件， `3dwarro.cur` `3dwno.cur` 分别用于自定义的拖放游标和非删除光标。 如果选中，则将使用自定义光标 `UseCustomCursorsCheck` <xref:System.Windows.Forms.CheckBox> 。 自定义游标是在 <xref:System.Windows.Forms.Control.GiveFeedback> 事件处理程序中设置的。  
  
 键盘状态在 <xref:System.Windows.Forms.Control.DragOver> 右侧的事件处理程序中进行计算 `ListBox` ，以根据 SHIFT、CTRL、ALT 或 CTRL + ALT 键确定拖动操作的状态。 此 `ListBox` 事件期间也会确定放置过程中的位置 `DragOver` 。 如果要删除的数据不是，则将 `String` <xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=nameWithType> 设置为 <xref:System.Windows.Forms.DragDropEffects.None?displayProperty=nameWithType> 。 最后，放置的状态显示在中 `DropLocationLabel` <xref:System.Windows.Forms.Label> 。  
  
 要放置给权限的数据 `ListBox` 在 <xref:System.Windows.Forms.Control.DragDrop> 事件处理程序中确定，并将 `String` 值添加到中的适当位置 `ListBox` 。 如果拖动操作移到窗体的边界之外，则会在事件处理程序中取消拖放操作 <xref:System.Windows.Forms.Control.QueryContinueDrag> 。  
  
 此代码摘录演示了如何使用 <xref:System.Windows.Forms.DragEventArgs> 类。 <xref:System.Windows.Forms.Control.DoDragDrop%2A>有关完整的代码示例，请参阅方法。  
  
 [!code-cpp[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CPP/form1.cpp#4)]
 [!code-csharp[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CS/form1.cs#4)]
 [!code-vb[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/VB/form1.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DragDropEffects" />
      </Docs>
    </Member>
    <Member MemberName="Data">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.IDataObject Data { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.IDataObject Data" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DragEventArgs.Data" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Data As IDataObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::IDataObject ^ Data { System::Windows::Forms::IDataObject ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Data : System.Windows.Forms.IDataObject" Usage="System.Windows.Forms.DragEventArgs.Data" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.IDataObject</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 <see cref="T:System.Windows.Forms.IDataObject" />，它包含与此事件关联的数据。</summary>
        <value>与此事件关联的数据。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在事件处理程序的正文中，可以使用 <xref:System.Windows.Forms.IDataObject.GetDataPresent%2A> 方法来确定数据是否与要将数据拖动到的控件的格式要求相匹配。 还可以指定是否想要尝试转换数据以满足格式要求。 如果拖动的数据满足格式要求，请使用 <xref:System.Windows.Forms.IDataObject.GetData%2A> 方法检索数据。  
  
   
  
## Examples  
 下面的示例演示两个控件之间的拖放操作 <xref:System.Windows.Forms.ListBox> 。 该示例在 <xref:System.Windows.Forms.Control.DoDragDrop%2A> 拖动操作开始时调用方法。 如果在事件过程中鼠标移动了多个鼠标位置，则拖动操作将启动 <xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=nameWithType> <xref:System.Windows.Forms.Control.MouseDown> 。 <xref:System.Windows.Forms.ListBox.IndexFromPoint%2A>方法用于确定事件期间要拖动的项的索引 `MouseDown` 。  
  
 该示例还演示了如何对拖放操作使用自定义光标。 该示例假定应用程序目录中有两个光标文件， `3dwarro.cur` `3dwno.cur` 分别用于自定义的拖放游标和非删除光标。 如果选中，则将使用自定义光标 `UseCustomCursorsCheck` <xref:System.Windows.Forms.CheckBox> 。 自定义游标是在 <xref:System.Windows.Forms.Control.GiveFeedback> 事件处理程序中设置的。  
  
 键盘状态在 <xref:System.Windows.Forms.Control.DragOver> 右侧的事件处理程序中进行计算 `ListBox` ，以根据 SHIFT、CTRL、ALT 或 CTRL + ALT 键确定拖动操作的状态。 此 `ListBox` 事件期间也会确定放置过程中的位置 `DragOver` 。 如果要删除的数据不是，则将 `String` <xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=nameWithType> 设置为 <xref:System.Windows.Forms.DragDropEffects.None?displayProperty=nameWithType> 。 最后，放置的状态显示在中 `DropLocationLabel` <xref:System.Windows.Forms.Label> 。  
  
 要放置给权限的数据 `ListBox` 在 <xref:System.Windows.Forms.Control.DragDrop> 事件处理程序中确定，并将 `String` 值添加到中的适当位置 `ListBox` 。 如果拖动操作移到窗体的边界之外，则会在事件处理程序中取消拖放操作 <xref:System.Windows.Forms.Control.QueryContinueDrag> 。  
  
 此代码摘录演示了如何使用 <xref:System.Windows.Forms.DragEventArgs> 类。 <xref:System.Windows.Forms.Control.DoDragDrop%2A>有关完整的代码示例，请参阅方法。  
  
 [!code-cpp[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CPP/form1.cpp#4)]
 [!code-csharp[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CS/form1.cs#4)]
 [!code-vb[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/VB/form1.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.IDataObject" />
      </Docs>
    </Member>
    <Member MemberName="Effect">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DragDropEffects Effect { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.DragDropEffects Effect" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DragEventArgs.Effect" />
      <MemberSignature Language="VB.NET" Value="Public Property Effect As DragDropEffects" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::DragDropEffects Effect { System::Windows::Forms::DragDropEffects get(); void set(System::Windows::Forms::DragDropEffects value); };" />
      <MemberSignature Language="F#" Value="member this.Effect : System.Windows.Forms.DragDropEffects with get, set" Usage="System.Windows.Forms.DragEventArgs.Effect" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DragDropEffects</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置拖放操作中目标放置效果。</summary>
        <value><see cref="T:System.Windows.Forms.DragDropEffects" /> 值之一。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 默认情况下，应用的效果将决定拖放操作目标的鼠标光标。 这对于向用户提供有关将发生的操作的反馈非常有用。 例如，如果在从源拖动文件时按下 CTRL 键，则指定 <xref:System.Windows.Forms.DragDropEffects.Copy?displayProperty=nameWithType> 以指示目标将尝试执行复制操作。  
  
 若要将自定义游标用于拖动操作，请参阅 <xref:System.Windows.Forms.GiveFeedbackEventArgs.UseDefaultCursors%2A?displayProperty=nameWithType> 。  
  
   
  
## Examples  
 下面的示例演示两个控件之间的拖放操作 <xref:System.Windows.Forms.ListBox> 。 该示例在 <xref:System.Windows.Forms.Control.DoDragDrop%2A> 拖动操作开始时调用方法。 如果在事件过程中鼠标移动了多个鼠标位置，则拖动操作将启动 <xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=nameWithType> <xref:System.Windows.Forms.Control.MouseDown> 。 <xref:System.Windows.Forms.ListBox.IndexFromPoint%2A>方法用于确定事件期间要拖动的项的索引 `MouseDown` 。  
  
 该示例还演示了如何对拖放操作使用自定义光标。 该示例假定应用程序目录中有两个光标文件， `3dwarro.cur` `3dwno.cur` 分别用于自定义的拖放游标和非删除光标。 如果选中，则将使用自定义光标 `UseCustomCursorsCheck` <xref:System.Windows.Forms.CheckBox> 。 自定义游标是在 <xref:System.Windows.Forms.Control.GiveFeedback> 事件处理程序中设置的。  
  
 键盘状态在 <xref:System.Windows.Forms.Control.DragOver> 右侧的事件处理程序中进行计算 `ListBox` ，以根据 SHIFT、CTRL、ALT 或 CTRL + ALT 键确定拖动操作的状态。 此 `ListBox` 事件期间也会确定放置过程中的位置 `DragOver` 。 如果要删除的数据不是，则将 `String` <xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=nameWithType> 设置为 <xref:System.Windows.Forms.DragDropEffects.None?displayProperty=nameWithType> 。 最后，放置的状态显示在中 `DropLocationLabel` <xref:System.Windows.Forms.Label> 。  
  
 要放置给权限的数据 `ListBox` 在 <xref:System.Windows.Forms.Control.DragDrop> 事件处理程序中确定，并将 `String` 值添加到中的适当位置 `ListBox` 。 如果拖动操作移到窗体的边界之外，则会在事件处理程序中取消拖放操作 <xref:System.Windows.Forms.Control.QueryContinueDrag> 。  
  
 此代码摘录演示了如何使用 <xref:System.Windows.Forms.DragEventArgs> 类。 <xref:System.Windows.Forms.Control.DoDragDrop%2A>有关完整的代码示例，请参阅方法。  
  
 [!code-cpp[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CPP/form1.cpp#4)]
 [!code-csharp[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CS/form1.cs#4)]
 [!code-vb[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/VB/form1.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DragDropEffects" />
      </Docs>
    </Member>
    <Member MemberName="KeyState">
      <MemberSignature Language="C#" Value="public int KeyState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 KeyState" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DragEventArgs.KeyState" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property KeyState As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int KeyState { int get(); };" />
      <MemberSignature Language="F#" Value="member this.KeyState : int" Usage="System.Windows.Forms.DragEventArgs.KeyState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 Shift、Ctrl 和 Alt 键的当前状态以及鼠标按钮的状态。</summary>
        <value>Shift、Ctrl、Alt 键以及鼠标按钮的当前状态。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以使拖放操作的效果依赖于特定键的状态。 例如，你可以根据在拖放操作期间是否按下 CTRL 或 SHIFT 键来决定复制或移动数据。  
  
 属性中设置的位标识在 <xref:System.Windows.Forms.DragEventArgs.KeyState%2A> 操作过程中按下的键或鼠标按钮。 例如，如果按下鼠标左键，则会设置属性中的第一位 <xref:System.Windows.Forms.DragEventArgs.KeyState%2A> 。 可以使用按位 "与" 运算符来测试给定的键状态。  
  
 下表列出了用于指定事件的值。  
  
|值|密钥|  
|-----------|---------|  
|1 (位 0) |鼠标左按钮。|  
|2 (位 1) |鼠标右按钮。|  
|4 (位 2) |Shift 键。|  
|8 (位 3) |CTRL 键。|  
|16 (位 4) |鼠标中键。|  
|32 (位 5) |Alt 键。|  
  
   
  
## Examples  
 下面的示例演示两个控件之间的拖放操作 <xref:System.Windows.Forms.ListBox> 。 该示例在 <xref:System.Windows.Forms.Control.DoDragDrop%2A> 拖动操作开始时调用方法。 如果在事件过程中鼠标移动了多个鼠标位置，则拖动操作将启动 <xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=nameWithType> <xref:System.Windows.Forms.Control.MouseDown> 。 <xref:System.Windows.Forms.ListBox.IndexFromPoint%2A>方法用于确定事件期间要拖动的项的索引 `MouseDown` 。  
  
 该示例还演示了如何对拖放操作使用自定义光标。 该示例假定应用程序目录中有两个光标文件， `3dwarro.cur` `3dwno.cur` 分别用于自定义的拖放游标和非删除光标。 如果选中，则将使用自定义光标 `UseCustomCursorsCheck` <xref:System.Windows.Forms.CheckBox> 。 自定义游标是在 <xref:System.Windows.Forms.Control.GiveFeedback> 事件处理程序中设置的。  
  
 键盘状态在 <xref:System.Windows.Forms.Control.DragOver> 右侧的事件处理程序中进行计算 `ListBox` ，以根据 SHIFT、CTRL、ALT 或 CTRL + ALT 键确定拖动操作的状态。 此 `ListBox` 事件期间也会确定放置过程中的位置 `DragOver` 。 如果要删除的数据不是，则将 `String` <xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=nameWithType> 设置为 <xref:System.Windows.Forms.DragDropEffects.None?displayProperty=nameWithType> 。 最后，放置的状态显示在中 `DropLocationLabel` <xref:System.Windows.Forms.Label> 。  
  
 要放置给权限的数据 `ListBox` 在 <xref:System.Windows.Forms.Control.DragDrop> 事件处理程序中确定，并将 `String` 值添加到中的适当位置 `ListBox` 。 如果拖动操作移到窗体的边界之外，则会在事件处理程序中取消拖放操作 <xref:System.Windows.Forms.Control.QueryContinueDrag> 。  
  
 此代码摘录演示了如何使用 <xref:System.Windows.Forms.DragEventArgs> 类。 <xref:System.Windows.Forms.Control.DoDragDrop%2A>有关完整的代码示例，请参阅方法。  
  
 [!code-cpp[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CPP/form1.cpp#4)]
 [!code-csharp[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CS/form1.cs#4)]
 [!code-vb[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/VB/form1.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="X">
      <MemberSignature Language="C#" Value="public int X { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 X" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DragEventArgs.X" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property X As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int X { int get(); };" />
      <MemberSignature Language="F#" Value="member this.X : int" Usage="System.Windows.Forms.DragEventArgs.X" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取鼠标指针在屏幕坐标系中的 x 坐标。</summary>
        <value>鼠标指针的 X 坐标（以像素为单位）。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的示例演示两个控件之间的拖放操作 <xref:System.Windows.Forms.ListBox> 。 该示例在 <xref:System.Windows.Forms.Control.DoDragDrop%2A> 拖动操作开始时调用方法。 如果在事件过程中鼠标移动了多个鼠标位置，则拖动操作将启动 <xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=nameWithType> <xref:System.Windows.Forms.Control.MouseDown> 。 <xref:System.Windows.Forms.ListBox.IndexFromPoint%2A>方法用于确定事件期间要拖动的项的索引 `MouseDown` 。  
  
 该示例还演示了如何对拖放操作使用自定义光标。 该示例假定应用程序目录中有两个光标文件， `3dwarro.cur` `3dwno.cur` 分别用于自定义的拖放游标和非删除光标。 如果选中，则将使用自定义光标 `UseCustomCursorsCheck` <xref:System.Windows.Forms.CheckBox> 。 自定义游标是在 <xref:System.Windows.Forms.Control.GiveFeedback> 事件处理程序中设置的。  
  
 键盘状态在 <xref:System.Windows.Forms.Control.DragOver> 右侧的事件处理程序中进行计算 `ListBox` ，以根据 SHIFT、CTRL、ALT 或 CTRL + ALT 键确定拖动操作的状态。 此 `ListBox` 事件期间也会确定放置过程中的位置 `DragOver` 。 如果要删除的数据不是，则将 `String` <xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=nameWithType> 设置为 <xref:System.Windows.Forms.DragDropEffects.None?displayProperty=nameWithType> 。 最后，放置的状态显示在中 `DropLocationLabel` <xref:System.Windows.Forms.Label> 。  
  
 要放置给权限的数据 `ListBox` 在 <xref:System.Windows.Forms.Control.DragDrop> 事件处理程序中确定，并将 `String` 值添加到中的适当位置 `ListBox` 。 如果拖动操作移到窗体的边界之外，则会在事件处理程序中取消拖放操作 <xref:System.Windows.Forms.Control.QueryContinueDrag> 。  
  
 此代码摘录演示了如何使用 <xref:System.Windows.Forms.DragEventArgs> 类。 <xref:System.Windows.Forms.Control.DoDragDrop%2A>有关完整的代码示例，请参阅方法。  
  
 [!code-cpp[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CPP/form1.cpp#4)]
 [!code-csharp[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CS/form1.cs#4)]
 [!code-vb[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/VB/form1.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.DragEventArgs.Y" />
      </Docs>
    </Member>
    <Member MemberName="Y">
      <MemberSignature Language="C#" Value="public int Y { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Y" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DragEventArgs.Y" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Y As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Y { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Y : int" Usage="System.Windows.Forms.DragEventArgs.Y" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取鼠标指针在屏幕坐标系中的 y 坐标。</summary>
        <value>鼠标指针的 Y 坐标（以像素为单位）。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的示例演示两个控件之间的拖放操作 <xref:System.Windows.Forms.ListBox> 。 该示例在 <xref:System.Windows.Forms.Control.DoDragDrop%2A> 拖动操作开始时调用方法。 如果在事件过程中鼠标移动了多个鼠标位置，则拖动操作将启动 <xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=nameWithType> <xref:System.Windows.Forms.Control.MouseDown> 。 <xref:System.Windows.Forms.ListBox.IndexFromPoint%2A>方法用于确定事件期间要拖动的项的索引 `MouseDown` 。  
  
 该示例还演示了如何对拖放操作使用自定义光标。 该示例假定应用程序目录中有两个光标文件， `3dwarro.cur` `3dwno.cur` 分别用于自定义的拖放游标和非删除光标。 如果选中，则将使用自定义光标 `UseCustomCursorsCheck` <xref:System.Windows.Forms.CheckBox> 。 自定义游标是在 <xref:System.Windows.Forms.Control.GiveFeedback> 事件处理程序中设置的。  
  
 键盘状态在 <xref:System.Windows.Forms.Control.DragOver> 右侧的事件处理程序中进行计算 `ListBox` ，以根据 SHIFT、CTRL、ALT 或 CTRL + ALT 键确定拖动操作的状态。 此 `ListBox` 事件期间也会确定放置过程中的位置 `DragOver` 。 如果要删除的数据不是，则将 `String` <xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=nameWithType> 设置为 <xref:System.Windows.Forms.DragDropEffects.None?displayProperty=nameWithType> 。 最后，放置的状态显示在中 `DropLocationLabel` <xref:System.Windows.Forms.Label> 。  
  
 要放置给权限的数据 `ListBox` 在 <xref:System.Windows.Forms.Control.DragDrop> 事件处理程序中确定，并将 `String` 值添加到中的适当位置 `ListBox` 。 如果拖动操作移到窗体的边界之外，则会在事件处理程序中取消拖放操作 <xref:System.Windows.Forms.Control.QueryContinueDrag> 。  
  
 此代码摘录演示了如何使用 <xref:System.Windows.Forms.DragEventArgs> 类。 <xref:System.Windows.Forms.Control.DoDragDrop%2A>有关完整的代码示例，请参阅方法。  
  
 [!code-cpp[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CPP/form1.cpp#4)]
 [!code-csharp[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CS/form1.cs#4)]
 [!code-vb[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/VB/form1.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.DragEventArgs.X" />
      </Docs>
    </Member>
  </Members>
</Type>
