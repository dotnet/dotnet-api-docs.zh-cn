<Type Name="HtmlElement" FullName="System.Windows.Forms.HtmlElement">
  <Metadata><Meta Name="ms.openlocfilehash" Value="a31de15c194e036f2789861045e4625cad440580" /><Meta Name="ms.sourcegitcommit" Value="b53d35b4a410c949742abd4c6a989d1af5357bca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="86728518" /></Metadata><TypeSignature Language="C#" Value="public sealed class HtmlElement" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit HtmlElement extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.HtmlElement" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class HtmlElement" />
  <TypeSignature Language="C++ CLI" Value="public ref class HtmlElement sealed" />
  <TypeSignature Language="F#" Value="type HtmlElement = class" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>表示网页内的一个 HTML 元素。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlElement> 表示 HTML 文档中任何可能的元素类型，如、 `BODY` `TABLE` 和 `FORM` 。 类公开可在所有元素上找到的最常见属性。  
  
 大多数元素可以有 *子元素*：位于它们下面的其他 HTML 元素。 使用 <xref:System.Windows.Forms.HtmlElement.CanHaveChildren%2A> 属性可测试给定元素是否具有子级，并使用 <xref:System.Windows.Forms.HtmlElement.Children%2A> 集合来对其进行循环访问。 <xref:System.Windows.Forms.HtmlElement.Parent%2A>属性返回 <xref:System.Windows.Forms.HtmlElement> 当前元素嵌套的。  
  
 通常需要访问不直接由公开的基础元素上的特性、属性和方法 <xref:System.Windows.Forms.HtmlElement> ，例如 `SRC` 元素上的特性 `IMG` 或中的 `Submit` 方法 `FORM` 。 使用 <xref:System.Windows.Forms.HtmlElement.GetAttribute%2A> 和 <xref:System.Windows.Forms.HtmlElement.SetAttribute%2A> 方法可以检索和更改特定元素上的任何属性或属性，同时 <xref:System.Windows.Forms.HtmlElement.InvokeMember%2A> 提供对未在托管文档对象模型 (DOM) 中公开的任何方法的访问。 如果你的应用程序具有非托管代码权限，则还可以使用特性访问未公开的属性和方法 <xref:System.Windows.Forms.HtmlElement.DomElement%2A> 。  
  
 使用 <xref:System.Windows.Forms.HtmlElement.TagName%2A> 属性可测试元素是否为特定类型。  
  
 可以在运行时修改任何 HTML 文档。 您可以使用的 <xref:System.Windows.Forms.HtmlElement> 方法创建新对象 <xref:System.Windows.Forms.HtmlDocument.CreateElement%2A> <xref:System.Windows.Forms.HtmlDocument> ，并使用或方法将其添加到另一个元素 <xref:System.Windows.Forms.HtmlElement.AppendChild%2A> <xref:System.Windows.Forms.HtmlElement.InsertAdjacentElement%2A> 。 你还可以将元素创建为 HTML 标记，并将其分配给现有的元素的 <xref:System.Windows.Forms.HtmlElement.InnerHtml%2A> 属性。  
  
   
  
## Examples  
 下面的代码示例演示如何检查任意 HTML 文档并派生一个描述 HTML 元素的字符串，并使用缩进和级别号来指示元素在文档中的嵌套深度。 此代码示例要求你的应用程序承载 <xref:System.Windows.Forms.WebBrowser> 名为的控件 `WebBrowser1` 。  
  
 [!code-csharp[System.Windows.Forms.HtmlElement#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlElement/CS/Form1.cs#1)]
 [!code-vb[System.Windows.Forms.HtmlElement#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlElement/VB/Form1.vb#1)]  
  
 ]]></format>
    </remarks>
    <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=104876">IHTMLElement 接口</related>
    <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=104877">IHTMLElement2 接口</related>
    <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=104878">IHTMLElement3 接口</related>
    <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=104879">IHTMLElement4 接口</related>
  </Docs>
  <Members>
    <Member MemberName="All">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlElementCollection All { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.HtmlElementCollection All" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlElement.All" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property All As HtmlElementCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::HtmlElementCollection ^ All { System::Windows::Forms::HtmlElementCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.All : System.Windows.Forms.HtmlElementCollection" Usage="System.Windows.Forms.HtmlElement.All" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取当前元素下的所有元素的 <see cref="T:System.Windows.Forms.HtmlElementCollection" />。</summary>
        <value>作为当前元素的直接或间接子级的所有元素的集合。 例如，如果当前元素是一个 <c>表</c>，则 <see cref="P:System.Windows.Forms.HtmlElement.All" /> 将返回表中的每个 <c>TH</c>、 <c>TR</c>和 <c>TD</c> 元素，以及单元格中包含的任何其他元素（如 <c>DIV</c> 和 <c>SPAN</c> 元素）。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要仅访问将当前元素作为其直接父级的元素，请改用 <xref:System.Windows.Forms.HtmlElement.Children%2A> 集合。  
  
 此集合中的元素不一定按源顺序返回。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.HtmlElement.Children" />
      </Docs>
    </Member>
    <Member MemberName="AppendChild">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlElement AppendChild (System.Windows.Forms.HtmlElement newElement);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.HtmlElement AppendChild(class System.Windows.Forms.HtmlElement newElement) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlElement.AppendChild(System.Windows.Forms.HtmlElement)" />
      <MemberSignature Language="VB.NET" Value="Public Function AppendChild (newElement As HtmlElement) As HtmlElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::HtmlElement ^ AppendChild(System::Windows::Forms::HtmlElement ^ newElement);" />
      <MemberSignature Language="F#" Value="member this.AppendChild : System.Windows.Forms.HtmlElement -&gt; System.Windows.Forms.HtmlElement" Usage="htmlElement.AppendChild newElement" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newElement" Type="System.Windows.Forms.HtmlElement" />
      </Parameters>
      <Docs>
        <param name="newElement">要追加到树中此位置的 <see cref="T:System.Windows.Forms.HtmlElement" />。</param>
        <summary>将元素添加到其他元素的子树中。</summary>
        <returns>它之后的元素已添加到树。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 利用 HTML 文档对象模型 (DOM) ，可以通过多种方式来更改 HTML 文件的运行时内容。 使用 <xref:System.Windows.Forms.HtmlElement.AppendChild%2A> 将新元素添加到现有文档，或在页面上移动元素。  
  
 如果某个元素已经是父级元素，则向另一个元素追加一个元素将自动从其以前的父元素中移除该元素。  
  
 <xref:System.Windows.Forms.HtmlElement.AppendChild%2A>当你在控件上调用方法时，使用在运行时对文档进行的任何添加都不会被保留 <xref:System.Windows.Forms.WebBrowser.ShowSaveAsDialog%2A> <xref:System.Windows.Forms.WebBrowser> 。  
  
   
  
## Examples  
 下面的代码示例使用方法创建一个新的超链接 <xref:System.Windows.Forms.HtmlDocument.CreateElement%2A> ，并使用元素将其添加到页的末尾 `AppendChild` `BODY` 。 该示例要求你的应用程序包含一个 <xref:System.Windows.Forms.WebBrowser> 名为的控件 `WebBrowser1` 。  
  
 [!code-csharp[System.Windows.Forms.HtmlElement#8](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlElement/CS/Form1.cs#8)]
 [!code-vb[System.Windows.Forms.HtmlElement#8](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlElement/VB/Form1.vb#8)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.HtmlDocument.CreateElement(System.String)" />
        <related type="ExternalDocumentation" href="https://developer.mozilla.org/docs/Web/API/Node/appendChild">appendChild 方法</related>
      </Docs>
    </Member>
    <Member MemberName="AttachEventHandler">
      <MemberSignature Language="C#" Value="public void AttachEventHandler (string eventName, EventHandler eventHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AttachEventHandler(string eventName, class System.EventHandler eventHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlElement.AttachEventHandler(System.String,System.EventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AttachEventHandler (eventName As String, eventHandler As EventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AttachEventHandler(System::String ^ eventName, EventHandler ^ eventHandler);" />
      <MemberSignature Language="F#" Value="member this.AttachEventHandler : string * EventHandler -&gt; unit" Usage="htmlElement.AttachEventHandler (eventName, eventHandler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventName" Type="System.String" />
        <Parameter Name="eventHandler" Type="System.EventHandler" />
      </Parameters>
      <Docs>
        <param name="eventName">要处理的事件的名称。</param>
        <param name="eventHandler">用于处理事件的托管代码。</param>
        <summary>为 HTML 文档对象模型 (DOM) 上的命名事件添加事件处理程序。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 托管文档对象模型 (DOM) 只公开选定数量的事件。 大多数未公开事件仅针对特定类型的元素进行定义;例如 `submit` ，事件仅对 `FORM` 元素有效。 用于向 <xref:System.Windows.Forms.HtmlElement.AttachEventHandler%2A> 这些未公开事件添加事件处理程序。  
  
 在文档完成加载之前，不应将事件附加到文档或其对象之一。 应最早调用此方法的是在 <xref:System.Windows.Forms.WebBrowser.DocumentCompleted> 控件的事件中 <xref:System.Windows.Forms.WebBrowser> 。  
  
 有关可用的非托管事件的详细信息，请参阅 [访问托管 HTML 文档对象模型](/dotnet/framework/winforms/controls/accessing-unexposed-members-on-the-managed-html-document-object-model) 和 IHTMLElement 接口上的未公开成员： [IHTMLElement](https://go.microsoft.com/fwlink/?LinkId=104876)、 [IHTMLElement2](https://go.microsoft.com/fwlink/?LinkId=104877)、 [IHTMLElement3](https://go.microsoft.com/fwlink/?LinkId=104878)、 [IHTMLElement4](https://go.microsoft.com/fwlink/?LinkId=104879)。  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener">EventTarget. addEventListener ( # A1</related>
      </Docs>
    </Member>
    <Member MemberName="CanHaveChildren">
      <MemberSignature Language="C#" Value="public bool CanHaveChildren { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanHaveChildren" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlElement.CanHaveChildren" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CanHaveChildren As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CanHaveChildren { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanHaveChildren : bool" Usage="System.Windows.Forms.HtmlElement.CanHaveChildren" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示此元素是否可以拥有子元素。</summary>
        <value>如果元素可以拥有子元素，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 某些元素（如 `IMG` 和 `SCRIPT` ）不能具有任何子级。 在对任意元素调用或之前，请使用此属性 <xref:System.Windows.Forms.HtmlElement.AppendChild%2A> <xref:System.Windows.Forms.HtmlElement.InsertAdjacentElement%2A> 。  
  
   
  
## Examples  
 下面的代码示例 <xref:System.Windows.Forms.HtmlElement.Click> 对上的事件进行处理 <xref:System.Windows.Forms.HtmlDocument> 。 如果先前未使用鼠标单击选定某个元素，则代码会将该元素分配给名为的私有类变量 `MoveElement` 。 如果选择了某个元素，则代码会尝试将其追加到刚刚单击的元素中。 此代码示例要求你的应用程序承载 <xref:System.Windows.Forms.WebBrowser> 名为的控件 `WebBrowser1` ，并且已为该事件添加了事件处理程序 <xref:System.Windows.Forms.HtmlElement.Click> <xref:System.Windows.Forms.HtmlDocument> 。  
  
 [!code-csharp[System.Windows.Forms.HtmlElement#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlElement/CS/Form1.cs#2)]
 [!code-vb[System.Windows.Forms.HtmlElement#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlElement/VB/Form1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Children">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlElementCollection Children { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.HtmlElementCollection Children" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlElement.Children" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Children As HtmlElementCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::HtmlElementCollection ^ Children { System::Windows::Forms::HtmlElementCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Children : System.Windows.Forms.HtmlElementCollection" Usage="System.Windows.Forms.HtmlElement.Children" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取当前元素的所有子级的 <see cref="T:System.Windows.Forms.HtmlElementCollection" />。</summary>
        <value>将当前元素作为父级的所有 <see cref="T:System.Windows.Forms.HtmlElement" /> 对象的集合。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 HTML 文件中的许多元素在其下可以包含其他 HTML 元素。 <xref:System.Windows.Forms.HtmlElement.Children%2A>集合提供了一种简单的机制来浏览文档的树状结构。  
  
 <xref:System.Windows.Forms.HtmlElement.Children%2A> 仅公开其直接父级为当前元素的元素。 如果有一个 <xref:System.Windows.Forms.HtmlElement> `TABLE` 元素的，则 <xref:System.Windows.Forms.HtmlElement.Children%2A> 将为你提供中所有 `TR` (行) 元素 `TABLE` 。 若要检索 `TD` 包含在元素内的 (单元) 元素 `TR` ，需要使用 <xref:System.Windows.Forms.HtmlElement.Children%2A> 每个元素的集合 `TR` ，或使用 <xref:System.Windows.Forms.HtmlElement.All%2A> 上的集合 <xref:System.Windows.Forms.HtmlElement> 。  
  
 不保证此集合中的元素按源顺序排列。  
  
 如果 <xref:System.Windows.Forms.HtmlElement.CanHaveChildren%2A> 为 `false` ， `Children` 将始终为空。  
  
   
  
## Examples  
 下面的代码示例检查任意 HTML 文档并派生一个描述元素的字符串，并使用缩进和级别号来指示元素在文档中的嵌套深度。 为此，它将 `Children` 以递归方式搜索所有元素的集合，从文档顶部的 HTML 元素开始。 此代码示例要求你的应用程序具有一个 <xref:System.Windows.Forms.WebBrowser> 名为的控件 `WebBrowser1` 。  
  
 [!code-csharp[System.Windows.Forms.HtmlElement#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlElement/CS/Form1.cs#1)]
 [!code-vb[System.Windows.Forms.HtmlElement#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlElement/VB/Form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.HtmlElement.All" />
      </Docs>
    </Member>
    <Member MemberName="Click">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler Click;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler Click" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlElement.Click" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Click As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ Click;" />
      <MemberSignature Language="F#" Value="member this.Click : System.Windows.Forms.HtmlElementEventHandler " Usage="member this.Click : System.Windows.Forms.HtmlElementEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当用户使用鼠标左键单击此元素时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlElement.Click>通过将类的属性设置为，可以取消元素上的事件的默认操作 <xref:System.Windows.Forms.HtmlElementEventArgs.ReturnValue%2A> <xref:System.Windows.Forms.HtmlElementEventArgs> `true` 。  
  
 <xref:System.Windows.Forms.HtmlElement.Click> <xref:System.Windows.Forms.HtmlDocument> 除非您将类的属性设置为，否则元素上的事件也将出现在该元素的父元素和类本身上 <xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A> <xref:System.Windows.Forms.HtmlElementEventArgs> `true` 。  
  
 如果用户单击当前没有输入焦点的元素，该 <xref:System.Windows.Forms.HtmlElement.Click> 事件将在 <xref:System.Windows.Forms.HtmlElement.Focusing> 事件之后、该元素发生之前发生 <xref:System.Windows.Forms.HtmlElement.LostFocus> 。  
  
   
  
## Examples  
 下面的代码示例演示如何使用此成员。 在此示例中，事件处理程序报告事件的发生 <xref:System.Windows.Forms.HtmlElement.Click> 。 此报表可帮助你了解何时发生事件，并可帮助你进行调试。 若要报告多个事件或频繁发生的事件，请考虑 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 将消息替换为多行或将其追加到多行 <xref:System.Windows.Forms.TextBox> 。  
  
 若要运行示例代码，请将其粘贴到包含名为的类型的实例的项目中 <xref:System.Windows.Forms.HtmlElement> `HtmlElement1` 。 然后，确保事件处理程序与事件相关联 <xref:System.Windows.Forms.HtmlElement.Click> 。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#432](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#432)]
 [!code-vb[System.Windows.Forms.EventExamples#432](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#432)]  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://developer.mozilla.org/en-us/docs/web/api/element/click_event">onclick 事件</related>
      </Docs>
    </Member>
    <Member MemberName="ClientRectangle">
      <MemberSignature Language="C#" Value="public System.Drawing.Rectangle ClientRectangle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Rectangle ClientRectangle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlElement.ClientRectangle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ClientRectangle As Rectangle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Rectangle ClientRectangle { System::Drawing::Rectangle get(); };" />
      <MemberSignature Language="F#" Value="member this.ClientRectangle : System.Drawing.Rectangle" Usage="System.Windows.Forms.HtmlElement.ClientRectangle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Rectangle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 HTML 文档中元素工作区的边界。</summary>
        <value>元素占用的工作区，不包括边框及滚动条占用的任何区域。 若要获得此元素的位置及尺寸（包括其修饰），请改用 <see cref="P:System.Windows.Forms.HtmlElement.OffsetRectangle" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlElement.ClientRectangle%2A> 将仅为已分配显式高度和宽度的元素返回位置数据，或返回使用绝对定位的元素。 如果文档的位置样式设置为，则该文档绝对定位 `absolute` ，之后它可位于 HTML 页面上的任何坐标处。  
  
   
  
## Examples  
 假设已将以下 HTML 页面加载到控件的托管实例 <xref:System.Windows.Forms.WebBrowser> 。  
  
```  
<HTML>  
  
    <BODY>  
  
        <DIV id="div1" style="position:absolute;top:100px;left:100px;border-      style:solid;border-width:1px;">  
            Edit this text.  
        </DIV>  
  
    </BODY>  
  
</HTML>  
```  
  
 下面的代码示例演示如何检索此元素并在客户端区域的宽度小于400像素（高50像素）的情况下扩展其维度，还会将设置 `DIV` 为 `contentEditable` 状态，以便用户可以输入文本。  
  
 [!code-csharp[System.Windows.Forms.HtmlElement#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlElement/CS/Form1.cs#3)]
 [!code-vb[System.Windows.Forms.HtmlElement#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlElement/VB/Form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.HtmlElement.OffsetRectangle" />
        <related type="ExternalDocumentation" href="https://developer.mozilla.org/en-us/docs/web/api/element/clientleft">clientLeft 属性</related>
        <related type="ExternalDocumentation" href="https://developer.mozilla.org/en-us/docs/web/api/element/clienttop">clientTop 属性</related>
        <related type="ExternalDocumentation" href="https://developer.mozilla.org/en-us/docs/web/api/element/clientwidth">clientWidth 属性</related>
        <related type="ExternalDocumentation" href="https://developer.mozilla.org/en-us/docs/web/api/element/clientheight">clientHeight 属性</related>
      </Docs>
    </Member>
    <Member MemberName="DetachEventHandler">
      <MemberSignature Language="C#" Value="public void DetachEventHandler (string eventName, EventHandler eventHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DetachEventHandler(string eventName, class System.EventHandler eventHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlElement.DetachEventHandler(System.String,System.EventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DetachEventHandler (eventName As String, eventHandler As EventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DetachEventHandler(System::String ^ eventName, EventHandler ^ eventHandler);" />
      <MemberSignature Language="F#" Value="member this.DetachEventHandler : string * EventHandler -&gt; unit" Usage="htmlElement.DetachEventHandler (eventName, eventHandler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventName" Type="System.String" />
        <Parameter Name="eventHandler" Type="System.EventHandler" />
      </Parameters>
      <Docs>
        <param name="eventName">要处理的事件的名称。</param>
        <param name="eventHandler">用于处理事件的托管代码。</param>
        <summary>从 HTML 文档对象模型 (DOM) 上的指定事件中移除事件处理程序。</summary>
        <remarks>To be added.</remarks>
        <related type="ExternalDocumentation" href="https://developer.mozilla.org/en-us/docs/web/api/eventtarget/removeeventlistener">detachEvent 方法</related>
      </Docs>
    </Member>
    <Member MemberName="Document">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlDocument Document { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.HtmlDocument Document" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlElement.Document" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Document As HtmlDocument" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::HtmlDocument ^ Document { System::Windows::Forms::HtmlDocument ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Document : System.Windows.Forms.HtmlDocument" Usage="System.Windows.Forms.HtmlElement.Document" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlDocument</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取此元素所属的 <see cref="T:System.Windows.Forms.HtmlDocument" />。</summary>
        <value>此元素的父文档。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 某些 HTML 页面可以使用标记来承载帧 `FRAMESET` 。 在这种情况下，每个单个 `FRAME` 元素都将包含其自己的实例 <xref:System.Windows.Forms.HtmlDocument> 。 如果已从中接收到对事件处理程序中的元素的引用 <xref:System.Windows.Forms.HtmlElementEventArgs> ，并且需要对该元素所在的文档执行某些操作，则此属性最有用。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.HtmlDocument" />
      </Docs>
    </Member>
    <Member MemberName="DomElement">
      <MemberSignature Language="C#" Value="public object DomElement { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object DomElement" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlElement.DomElement" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DomElement As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ DomElement { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DomElement : obj" Usage="System.Windows.Forms.HtmlElement.DomElement" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取此元素的非托管接口指针。</summary>
        <value>元素的 COM <c>IUnknown</c> 指针，你可以将其强制转换为 HTML 元素接口中的一个（如 <c>IHTMLElement</c>）。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlElement> 是 Internet Explorer 文档对象模型的包装器 (DOM) ，它是使用组件对象模型 (COM) 编写的。 如果需要访问基础 COM 接口上的未公开的属性或方法（例如 `IHTMLElement` ），则可以使用此对象来查询它们。  
  
 要使用非托管接口，需要将 MSHTML 库 ( # A0) 导入应用程序。 但是，您还可以使用方法执行未公开的属性和方法 `Invoke` 。  
  
   
  
## Examples  
 下面的代码示例使用非托管接口获取当前选定的文本，并使用用户选择的 URL 将其转换为超链接。 此代码的编写假设窗体具有 <xref:System.Windows.Forms.WebBrowser> 名为的控件 `WebBrowser1` ，并且已添加非托管 MSHTML 库作为对项目的引用。  
  
 [!code-csharp[System.Windows.Forms.HtmlElement#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlElement/CS/Form1.cs#4)]
 [!code-vb[System.Windows.Forms.HtmlElement#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlElement/VB/Form1.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.HtmlDocument.DomDocument" />
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=104877">IHTMLElement2 接口</related>
      </Docs>
    </Member>
    <Member MemberName="DoubleClick">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler DoubleClick;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler DoubleClick" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlElement.DoubleClick" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DoubleClick As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ DoubleClick;" />
      <MemberSignature Language="F#" Value="member this.DoubleClick : System.Windows.Forms.HtmlElementEventHandler " Usage="member this.DoubleClick : System.Windows.Forms.HtmlElementEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当用户用鼠标左键快速连续单击元素两次时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 双击由用户操作系统的鼠标设置确定。 用户可以设置两次单击鼠标按钮之间的时间以便将这两次单击认为是双击而不是两次单击。  
  
 <xref:System.Windows.Forms.HtmlElement.DoubleClick>通过将类的属性设置为，可以取消元素上的事件的默认操作 <xref:System.Windows.Forms.HtmlElementEventArgs.ReturnValue%2A> <xref:System.Windows.Forms.HtmlElementEventArgs> `true` 。  
  
 <xref:System.Windows.Forms.HtmlElement.DoubleClick> <xref:System.Windows.Forms.HtmlDocument> 除非您将类的属性设置为，否则元素上的事件也将出现在该元素的父元素和类本身上 <xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A> <xref:System.Windows.Forms.HtmlElementEventArgs> `true` 。  
  
   
  
## Examples  
 下面的代码示例演示如何使用此成员。 在此示例中，事件处理程序报告事件的发生 <xref:System.Windows.Forms.HtmlElement.DoubleClick> 。 此报表可帮助你了解何时发生事件，并可帮助你进行调试。 若要报告多个事件或频繁发生的事件，请考虑 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 将消息替换为多行或将其追加到多行 <xref:System.Windows.Forms.TextBox> 。  
  
 若要运行示例代码，请将其粘贴到包含名为的类型的实例的项目中 <xref:System.Windows.Forms.HtmlElement> `HtmlElement1` 。 然后，确保事件处理程序与事件相关联 <xref:System.Windows.Forms.HtmlElement.DoubleClick> 。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#433](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#433)]
 [!code-vb[System.Windows.Forms.EventExamples#433](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#433)]  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://developer.mozilla.org/en-us/docs/web/api/element/dblclick_event">ondblclick 事件</related>
      </Docs>
    </Member>
    <Member MemberName="Drag">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler Drag;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler Drag" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlElement.Drag" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Drag As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ Drag;" />
      <MemberSignature Language="F#" Value="member this.Drag : System.Windows.Forms.HtmlElementEventHandler " Usage="member this.Drag : System.Windows.Forms.HtmlElementEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当用户将文本拖动到各个位置时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 将文本拖到以下位置时发生此事件：  
  
-   在 <xref:System.Windows.Forms.WebBrowser> 控件或 Internet Explorer 中承载的 HTML 页面内或之间  
  
-   到其他应用程序  
  
-   到 Windows 桌面  
  
 <xref:System.Windows.Forms.HtmlElement.Drag>通过将类的属性设置为，可以取消元素上的事件的默认操作 <xref:System.Windows.Forms.HtmlElementEventArgs.ReturnValue%2A> <xref:System.Windows.Forms.HtmlElementEventArgs> `true` 。  
  
 <xref:System.Windows.Forms.HtmlElement.Drag> <xref:System.Windows.Forms.HtmlDocument> 除非您将类的属性设置为，否则元素上的事件也将出现在该元素的父元素和类本身上 <xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A> <xref:System.Windows.Forms.HtmlElementEventArgs> `true` 。  
  
   
  
## Examples  
 下面的代码示例演示如何使用此成员。 在此示例中，事件处理程序报告事件的发生 <xref:System.Windows.Forms.HtmlElement.Drag> 。 此报表可帮助你了解何时发生事件，并可帮助你进行调试。 若要报告多个事件或频繁发生的事件，请考虑 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 将消息替换为多行或将其追加到多行 <xref:System.Windows.Forms.TextBox> 。  
  
 若要运行示例代码，请将其粘贴到包含名为的类型的实例的项目中 <xref:System.Windows.Forms.HtmlElement> `HtmlElement1` 。 然后，确保事件处理程序与事件相关联 <xref:System.Windows.Forms.HtmlElement.Drag> 。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#434](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#434)]
 [!code-vb[System.Windows.Forms.EventExamples#434](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#434)]  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://developer.mozilla.org/en-us/docs/web/api/document/drag_event">ondrag 事件</related>
      </Docs>
    </Member>
    <Member MemberName="DragEnd">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler DragEnd;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler DragEnd" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlElement.DragEnd" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DragEnd As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ DragEnd;" />
      <MemberSignature Language="F#" Value="member this.DragEnd : System.Windows.Forms.HtmlElementEventHandler " Usage="member this.DragEnd : System.Windows.Forms.HtmlElementEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当用户完成拖动操作时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlElement.DragEnd>通过将类的属性设置为，可以取消元素上的事件的默认操作 <xref:System.Windows.Forms.HtmlElementEventArgs.ReturnValue%2A> <xref:System.Windows.Forms.HtmlElementEventArgs> `true` 。  
  
 <xref:System.Windows.Forms.HtmlElement.DragEnd> <xref:System.Windows.Forms.HtmlDocument> 除非您将类的属性设置为，否则元素上的事件也将出现在该元素的父元素和类本身上 <xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A> <xref:System.Windows.Forms.HtmlElementEventArgs> `true` 。  
  
   
  
## Examples  
 下面的代码示例演示如何使用此成员。 在此示例中，事件处理程序报告事件的发生 <xref:System.Windows.Forms.HtmlElement.DragEnd> 。 此报表可帮助你了解何时发生事件，并可帮助你进行调试。 若要报告多个事件或频繁发生的事件，请考虑 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 将消息替换为多行或将其追加到多行 <xref:System.Windows.Forms.TextBox> 。  
  
 若要运行示例代码，请将其粘贴到包含名为的类型的实例的项目中 <xref:System.Windows.Forms.HtmlElement> `HtmlElement1` 。 然后，确保事件处理程序与事件相关联 <xref:System.Windows.Forms.HtmlElement.DragEnd> 。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#435](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#435)]
 [!code-vb[System.Windows.Forms.EventExamples#435](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#435)]  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://developer.mozilla.org/en-us/docs/web/api/document/dragend_event">ondragend 事件</related>
      </Docs>
    </Member>
    <Member MemberName="DragLeave">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler DragLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler DragLeave" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlElement.DragLeave" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DragLeave As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ DragLeave;" />
      <MemberSignature Language="F#" Value="member this.DragLeave : System.Windows.Forms.HtmlElementEventHandler " Usage="member this.DragLeave : System.Windows.Forms.HtmlElementEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当用户不再在此元素上拖动项时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例演示如何使用此成员。 在此示例中，事件处理程序报告事件的发生 <xref:System.Windows.Forms.HtmlElement.DragLeave> 。 此报表可帮助你了解何时发生事件，并可帮助你进行调试。 若要报告多个事件或频繁发生的事件，请考虑 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 将消息替换为多行或将其追加到多行 <xref:System.Windows.Forms.TextBox> 。  
  
 若要运行示例代码，请将其粘贴到包含名为的类型的实例的项目中 <xref:System.Windows.Forms.HtmlElement> `HtmlElement1` 。 然后，确保事件处理程序与事件相关联 <xref:System.Windows.Forms.HtmlElement.DragLeave> 。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#436](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#436)]
 [!code-vb[System.Windows.Forms.EventExamples#436](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#436)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DragOver">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler DragOver;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler DragOver" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlElement.DragOver" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DragOver As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ DragOver;" />
      <MemberSignature Language="F#" Value="member this.DragOver : System.Windows.Forms.HtmlElementEventHandler " Usage="member this.DragOver : System.Windows.Forms.HtmlElementEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当用户将文本拖动到元素上时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlElement.DragOver>通过将类的属性设置为，可以取消元素上的事件的默认操作 <xref:System.Windows.Forms.HtmlElementEventArgs.ReturnValue%2A> <xref:System.Windows.Forms.HtmlElementEventArgs> `true` 。  
  
 <xref:System.Windows.Forms.HtmlElement.DragOver> <xref:System.Windows.Forms.HtmlDocument> 除非您将类的属性设置为，否则元素上的事件也将出现在该元素的父元素和类本身上 <xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A> <xref:System.Windows.Forms.HtmlElementEventArgs> `true` 。  
  
   
  
## Examples  
 下面的代码示例演示如何使用此成员。 在此示例中，事件处理程序报告事件的发生 <xref:System.Windows.Forms.HtmlElement.DragOver> 。 此报表可帮助你了解何时发生事件，并可帮助你进行调试。 若要报告多个事件或频繁发生的事件，请考虑 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 将消息替换为多行或将其追加到多行 <xref:System.Windows.Forms.TextBox> 。  
  
 若要运行示例代码，请将其粘贴到包含名为的类型的实例的项目中 <xref:System.Windows.Forms.HtmlElement> `HtmlElement1` 。 然后，确保事件处理程序与事件相关联 <xref:System.Windows.Forms.HtmlElement.DragOver> 。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#437](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#437)]
 [!code-vb[System.Windows.Forms.EventExamples#437](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#437)]  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://developer.mozilla.org/en-us/docs/web/api/document/dragover_event">system.windows.uielement.ondragover 事件</related>
      </Docs>
    </Member>
    <Member MemberName="Enabled">
      <MemberSignature Language="C#" Value="public bool Enabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Enabled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlElement.Enabled" />
      <MemberSignature Language="VB.NET" Value="Public Property Enabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Enabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Enabled : bool with get, set" Usage="System.Windows.Forms.HtmlElement.Enabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置用户是否可以向此元素输入数据。</summary>
        <value>如果此元素允许用户输入，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 对于 `FORM` 文本框和单选按钮等元素，将设置 <xref:System.Windows.Forms.HtmlElement.Enabled%2A> 为 `false` 会阻止用户使用这些表单字段。 对于其他元素（如 `DIV` 或 `SPAN` ），将设置 <xref:System.Windows.Forms.HtmlElement.Enabled%2A> 为 `false` 将使元素中的所有文本显示为灰色; 但是，文本仍可选择。 若要取消选择，请使用方法为未公开事件添加事件处理程序 `onselectstart` <xref:System.Windows.Forms.HtmlElement.AttachEventHandler%2A> 。  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://developer.mozilla.org/en-us/docs/web/api/htmlfieldsetelement">disabled 属性</related>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlElement.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="htmlElement.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">要测试相等的对象。</param>
        <summary>测试提供的对象是否等于当前元素。</summary>
        <returns>如果 <paramref name="obj" /> 是 <see cref="T:System.Windows.Forms.HtmlElement" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FirstChild">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlElement FirstChild { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.HtmlElement FirstChild" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlElement.FirstChild" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FirstChild As HtmlElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::HtmlElement ^ FirstChild { System::Windows::Forms::HtmlElement ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.FirstChild : System.Windows.Forms.HtmlElement" Usage="System.Windows.Forms.HtmlElement.FirstChild" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElement</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取文档树中此元素下的下一个元素。</summary>
        <value>一个 <see cref="T:System.Windows.Forms.HtmlElement" />，表示当前元素下所包含的第一个元素（按源顺序）。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 将 <xref:System.Windows.Forms.HtmlElement.FirstChild%2A> 与结合使用 <xref:System.Windows.Forms.HtmlElement.NextSibling%2A> 来遍历 HTML 文档的文档树。  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://developer.mozilla.org/en-us/docs/web/api/node/firstchild">firstChild 属性</related>
      </Docs>
    </Member>
    <Member MemberName="Focus">
      <MemberSignature Language="C#" Value="public void Focus ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Focus() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlElement.Focus" />
      <MemberSignature Language="VB.NET" Value="Public Sub Focus ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Focus();" />
      <MemberSignature Language="F#" Value="member this.Focus : unit -&gt; unit" Usage="htmlElement.Focus " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>将用户输入焦点置于当前元素上。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 将焦点设置到元素上都将使该元素成为焦点，并使其成为活动元素;例如，具有焦点的元素将由的 <xref:System.Windows.Forms.HtmlDocument.ActiveElement%2A> 属性返回 <xref:System.Windows.Forms.HtmlDocument> 。  
  
 在调用后，用户输入的任何密钥笔划 <xref:System.Windows.Forms.HtmlElement.Focus%2A> 都将发送到该元素。  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://developer.mozilla.org/en-us/docs/web/api/htmlorforeignelement/focus">focus 方法</related>
      </Docs>
    </Member>
    <Member MemberName="Focusing">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler Focusing;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler Focusing" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlElement.Focusing" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Focusing As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ Focusing;" />
      <MemberSignature Language="F#" Value="member this.Focusing : System.Windows.Forms.HtmlElementEventHandler " Usage="member this.Focusing : System.Windows.Forms.HtmlElementEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当元素首次接收用户输入焦点时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当用户切换 <xref:System.Windows.Forms.HtmlElement.Focusing> 回应用程序时，如果用户使用任务栏或 ALT + TAB 键切换到其他应用程序，则具有焦点的元素将再次收到和 <xref:System.Windows.Forms.HtmlElement.GotFocus> 事件。  
  
 不能取消此事件的默认行为。 若要从元素中删除焦点，请 <xref:System.Windows.Forms.HtmlElement.Focus%2A> 从事件内的其他元素调用 <xref:System.Windows.Forms.HtmlElement.GotFocus> 。  
  
 <xref:System.Windows.Forms.HtmlElement.Focusing> <xref:System.Windows.Forms.HtmlDocument> 除非将类的属性设置为，否则元素上的事件也将出现在该元素的父级和类本身上 <xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A> <xref:System.Windows.Forms.HtmlElementEventArgs> `true` 。  
  
   
  
## Examples  
 下面的代码示例演示如何使用此成员。 在此示例中，事件处理程序报告事件的发生 <xref:System.Windows.Forms.HtmlElement.Focusing> 。 此报表可帮助你了解何时发生事件，并可帮助你进行调试。  
  
 若要运行示例代码，请将其粘贴到包含名为的类型的实例的项目中 <xref:System.Windows.Forms.HtmlElement> `HtmlElement1` 。 然后，确保事件处理程序与事件相关联 <xref:System.Windows.Forms.HtmlElement.Focusing> 。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#438](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#438)]
 [!code-vb[System.Windows.Forms.EventExamples#438](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#438)]  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://developer.mozilla.org/en-us/docs/web/api/element/focusin_event">onfocusin 事件</related>
      </Docs>
    </Member>
    <Member MemberName="GetAttribute">
      <MemberSignature Language="C#" Value="public string GetAttribute (string attributeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetAttribute(string attributeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlElement.GetAttribute(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAttribute (attributeName As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetAttribute(System::String ^ attributeName);" />
      <MemberSignature Language="F#" Value="member this.GetAttribute : string -&gt; string" Usage="htmlElement.GetAttribute attributeName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="attributeName">属性名。 此自变量区分大小写。</param>
        <summary>检索元素中已命名特性的值。</summary>
        <returns>元素中此特性 <see cref="T:System.String" /> 形式的值。 如果此元素中不存在指定的特性，则返回一个空字符串。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 HTML 中的属性是该元素的任何有效名称/值对。 <xref:System.Windows.Forms.HtmlElement> 仅公开所有元素共有的属性，而不是仅适用于某些类型的元素的属性; `SRC` 是标记的预定义特性 `IMG` ，例如，而不是标记的特性 `DIV` 。 使用 <xref:System.Windows.Forms.HtmlElement.GetAttribute%2A> 和 <xref:System.Windows.Forms.HtmlElement.SetAttribute%2A> 操作在托管文档对象模型 (DOM) 上未公开的属性。  
  
 <xref:System.Windows.Forms.HtmlElement.GetAttribute%2A> 和 <xref:System.Windows.Forms.HtmlElement.SetAttribute%2A> 不区分大小写。  
  
   
  
## Examples  
 下面的代码示例 `META` 使用 <xref:System.Windows.Forms.HtmlElement.GetAttribute%2A> 查找名称为的标记，从而检索 HTML 文档中的所有标记 `META` `Description` 。 该示例要求你的应用程序具有一个 <xref:System.Windows.Forms.WebBrowser> 名为的控件 `WebBrowser1` 。  
  
 [!code-csharp[System.Windows.Forms.HtmlDocument#6](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/CS/Form1.cs#6)]
 [!code-vb[System.Windows.Forms.HtmlDocument#6](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/VB/Form1.vb#6)]  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://developer.mozilla.org/en-us/docs/web/api/element/getattribute">getAttribute 方法</related>
      </Docs>
    </Member>
    <Member MemberName="GetElementsByTagName">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlElementCollection GetElementsByTagName (string tagName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.HtmlElementCollection GetElementsByTagName(string tagName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlElement.GetElementsByTagName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetElementsByTagName (tagName As String) As HtmlElementCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::HtmlElementCollection ^ GetElementsByTagName(System::String ^ tagName);" />
      <MemberSignature Language="F#" Value="member this.GetElementsByTagName : string -&gt; System.Windows.Forms.HtmlElementCollection" Usage="htmlElement.GetElementsByTagName tagName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tagName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="tagName">希望检索的 <see cref="T:System.Windows.Forms.HtmlElement" /> 对象所属的标记名称。</param>
        <summary>检索 HTML 中由指定 <c>HTML</c> 标记表示的元素的集合。</summary>
        <returns>一个 <see cref="T:System.Windows.Forms.HtmlElementCollection" />，包含其 <c>HTML</c> 标记名称等于 <paramref name="tagName" /> 的所有元素。</returns>
        <remarks>To be added.</remarks>
        <related type="ExternalDocumentation" href="https://developer.mozilla.org/en-us/docs/web/api/document/getelementsbytagname">getElementsByTagName 方法</related>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlElement.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="htmlElement.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>用作特定类型的哈希函数。</summary>
        <returns>当前 <see cref="T:System.Object" /> 的哈希代码。</returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Object.GetHashCode" />
      </Docs>
    </Member>
    <Member MemberName="GotFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler GotFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler GotFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlElement.GotFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GotFocus As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ GotFocus;" />
      <MemberSignature Language="F#" Value="member this.GotFocus : System.Windows.Forms.HtmlElementEventHandler " Usage="member this.GotFocus : System.Windows.Forms.HtmlElementEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当元素已收到用户输入焦点时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 既不能取消此事件的默认行为，也不能阻止它进行冒泡。 若要从元素中删除焦点，请 <xref:System.Windows.Forms.HtmlElement.Focus%2A> 从事件内的其他元素调用 <xref:System.Windows.Forms.HtmlElement.GotFocus> 。  
  
   
  
## Examples  
 将以下 HTML 代码保存到文件中，并将文件加载到 <xref:System.Windows.Forms.WebBrowser> Windows 窗体项目中的控件。  
  
```  
<HTML>  
    <BODY>  
        <FORM name="form1">  
            <INPUT type="text" size=20 name="text1">  
            <INPUT type="text" size=20 name="text2">  
            <INPUT type="text" size=20 name="text3">  
        </FORM>  
    </BODY>  
</HTML>  
```  
  
 `INPUT`如果上一个元素包含的字符少于五个，以下代码示例将阻止 tab 键顺序中的下一个元素收到用户输入焦点。 该示例要求将前面提到的 HTML 文件加载到 <xref:System.Windows.Forms.WebBrowser> 名为的控件的实例中 `WebBrowser1` 。  
  
 [!code-csharp[System.Windows.Forms.HtmlElement#15](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlElement/CS/Form1.cs#15)]
 [!code-vb[System.Windows.Forms.HtmlElement#15](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlElement/VB/Form1.vb#15)]  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://developer.mozilla.org/en-us/docs/web/api/element/focus_event">onfocus 事件</related>
      </Docs>
    </Member>
    <Member MemberName="Id">
      <MemberSignature Language="C#" Value="public string Id { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Id" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlElement.Id" />
      <MemberSignature Language="VB.NET" Value="Public Property Id As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Id { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Id : string with get, set" Usage="System.Windows.Forms.HtmlElement.Id" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置用于标识此元素的标签。</summary>
        <value>元素的唯一标识符。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlElement.Id%2A> 必须唯一;同一文档内不能有两个相同的元素 <xref:System.Windows.Forms.HtmlElement.Id%2A> 。 使用 <xref:System.Windows.Forms.HtmlElement.Name%2A> 属性可为一组逻辑相关的元素指定相同的标识符。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.HtmlElement.Name" />
        <related type="ExternalDocumentation" href="https://developer.mozilla.org/en-us/docs/web/html/global_attributes/id">id 属性</related>
        <related type="ExternalDocumentation" href="https://developer.mozilla.org/en-us/docs/web/html/attributes">name 属性</related>
      </Docs>
    </Member>
    <Member MemberName="InnerHtml">
      <MemberSignature Language="C#" Value="public string InnerHtml { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string InnerHtml" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlElement.InnerHtml" />
      <MemberSignature Language="VB.NET" Value="Public Property InnerHtml As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ InnerHtml { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.InnerHtml : string with get, set" Usage="System.Windows.Forms.HtmlElement.InnerHtml" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置此元素下的 HTML 标记。</summary>
        <value>定义当前元素的子元素的 HTML 标记。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有多种方法可将新元素添加到现有 HTML 页，如 <xref:System.Windows.Forms.HtmlElement.AppendChild%2A> 和 <xref:System.Windows.Forms.HtmlElement.InsertAdjacentElement%2A> 方法。 <xref:System.Windows.Forms.HtmlElement.InnerHtml%2A>如果你必须在新元素上设置多个属性或样式，则使用通常是添加新内容的最快方法。  
  
 <xref:System.Windows.Forms.HtmlElement.InnerHtml%2A> 与 <xref:System.Windows.Forms.HtmlElement.OuterHtml%2A> 中不同，其中 <xref:System.Windows.Forms.HtmlElement.InnerHtml%2A> 不包括表示正在调用的对象的 HTML。 有关 <xref:System.Windows.Forms.HtmlElement.OuterHtml%2A> 这两个属性之间的差异的详细信息，请参阅。  
  
 设置会 <xref:System.Windows.Forms.HtmlElement.InnerHtml%2A> 销毁先前追加到元素的所有子级。 如果从 DOM 中检索一个元素，然后将新的 HTML 分配给其父 <xref:System.Windows.Forms.HtmlElement.InnerHtml%2A> 属性，则对该元素的引用将毫无用处，在其调用其属性和方法时，其行为不确定。  
  
 对于某些元素，设置 <xref:System.Windows.Forms.HtmlElement.InnerHtml%2A> 不是有效的操作。 某些 HTML 标记没有结束标记，如 `IMG` 标记，因此不能包含嵌套元素。 有些标记，如 `SCRIPT` 标记，只能包含文本内容; 设置 <xref:System.Windows.Forms.HtmlElement.InnerHtml%2A> 将导致错误。 对于这两种类型的标记， <xref:System.Windows.Forms.HtmlElement.CanHaveChildren%2A> 属性将返回 `false` 。 不过，您也不能 <xref:System.Windows.Forms.HtmlElement.InnerHtml%2A> 设置 `TABLE` 和 `TR` 元素，因为向这些元素分配格式不正确的 HTML 可能会损坏文档的呈现。 使用 <xref:System.Windows.Forms.HtmlElement.AppendChild%2A> 或 `insertRow` `insertCell` 非托管接口上的和方法将 `IHTMLTable` 行和单元格添加到 `TABLE` 中。  
  
 如果只需将文本分配给某个元素而不是 HTML 标记，请改用 <xref:System.Windows.Forms.HtmlElement.InnerText%2A> 属性。  
  
 将值赋给 <xref:System.Windows.Forms.HtmlElement.InnerHtml%2A> 将销毁以前使用指定的任何文本值 <xref:System.Windows.Forms.HtmlElement.InnerText%2A> 。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">不允许在此元素上创建子元素。</exception>
        <altmember cref="M:System.Windows.Forms.HtmlElement.AppendChild(System.Windows.Forms.HtmlElement)" />
        <altmember cref="M:System.Windows.Forms.HtmlElement.InsertAdjacentElement(System.Windows.Forms.HtmlElementInsertionOrientation,System.Windows.Forms.HtmlElement)" />
        <altmember cref="P:System.Windows.Forms.HtmlElement.InnerText" />
        <related type="ExternalDocumentation" href="https://developer.mozilla.org/en-us/docs/web/api/element/innerhtml">innerHTML 属性</related>
        <related type="ExternalDocumentation" href="https://developer.mozilla.org/en-us/docs/web/api/element/insertadjacenthtml">insertAdjacentHTML 方法</related>
      </Docs>
    </Member>
    <Member MemberName="InnerText">
      <MemberSignature Language="C#" Value="public string InnerText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string InnerText" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlElement.InnerText" />
      <MemberSignature Language="VB.NET" Value="Public Property InnerText As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ InnerText { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.InnerText : string with get, set" Usage="System.Windows.Forms.HtmlElement.InnerText" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置分配给此元素的文本。</summary>
        <value>此元素的文本，不包括任何 HTML 标记。 如果此元素包含子元素，则仅保留那些子元素中的文本。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果尝试使用将 HTML 分配到元素 <xref:System.Windows.Forms.HtmlElement.InnerText%2A> ，html 代码将在文档中显示为文本，就像你在文本文件中查看 html 一样。 如果使用属性将 HTML 分配给某个元素 <xref:System.Windows.Forms.HtmlElement.InnerHtml%2A> ， <xref:System.Windows.Forms.HtmlElement.InnerText%2A> 则将返回该 html 中的所有文本，并将标记删除。  
  
 向赋值 <xref:System.Windows.Forms.HtmlElement.InnerText%2A> 会销毁属于该元素的所有子元素。  
  
   
  
## Examples  
 下面的代码使用创建一个新的超链接 <xref:System.Windows.Forms.HtmlDocument.CreateElement%2A> ，并使用属性将文本分配给该链接 <xref:System.Windows.Forms.HtmlElement.InnerText%2A> 。  
  
 [!code-csharp[System.Windows.Forms.HtmlElement#8](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlElement/CS/Form1.cs#8)]
 [!code-vb[System.Windows.Forms.HtmlElement#8](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlElement/VB/Form1.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">指定的元素不能包含文本（例如，<c>IMG</c> 元素）。</exception>
        <altmember cref="P:System.Windows.Forms.HtmlElement.InnerHtml" />
        <related type="ExternalDocumentation" href="https://developer.mozilla.org/en-us/docs/web/api/htmlelement/innertext">innerText 属性</related>
      </Docs>
    </Member>
    <Member MemberName="InsertAdjacentElement">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlElement InsertAdjacentElement (System.Windows.Forms.HtmlElementInsertionOrientation orient, System.Windows.Forms.HtmlElement newElement);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.HtmlElement InsertAdjacentElement(valuetype System.Windows.Forms.HtmlElementInsertionOrientation orient, class System.Windows.Forms.HtmlElement newElement) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlElement.InsertAdjacentElement(System.Windows.Forms.HtmlElementInsertionOrientation,System.Windows.Forms.HtmlElement)" />
      <MemberSignature Language="VB.NET" Value="Public Function InsertAdjacentElement (orient As HtmlElementInsertionOrientation, newElement As HtmlElement) As HtmlElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::HtmlElement ^ InsertAdjacentElement(System::Windows::Forms::HtmlElementInsertionOrientation orient, System::Windows::Forms::HtmlElement ^ newElement);" />
      <MemberSignature Language="F#" Value="member this.InsertAdjacentElement : System.Windows.Forms.HtmlElementInsertionOrientation * System.Windows.Forms.HtmlElement -&gt; System.Windows.Forms.HtmlElement" Usage="htmlElement.InsertAdjacentElement (orient, newElement)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="orient" Type="System.Windows.Forms.HtmlElementInsertionOrientation" />
        <Parameter Name="newElement" Type="System.Windows.Forms.HtmlElement" />
      </Parameters>
      <Docs>
        <param name="orient">此元素要插入到的相对于当前元素的位置。</param>
        <param name="newElement">要插入的新元素。</param>
        <summary>将新元素插入到文档对象模型 (DOM) 中。</summary>
        <returns>刚才插入的 <see cref="T:System.Windows.Forms.HtmlElement" />。 如果插入失败，将返回 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 直到 <xref:System.Windows.Forms.WebBrowser.DocumentCompleted> 控件上的事件发生之后，才能调用此方法 <xref:System.Windows.Forms.WebBrowser> 。 在此之前调用此方法会导致异常，因为文档将不会完成加载。  
  
 的值是否 <xref:System.Windows.Forms.HtmlElementInsertionOrientation> 有效将取决于元素的类型。 例如， <xref:System.Windows.Forms.HtmlElementInsertionOrientation.AfterBegin> 如果元素是一个 `DIV` ，但不 `SCRIPT` `IMG` 能包含或元素，则这两个均不能包含子元素。  
  
   
  
## Examples  
 下面的代码示例将一个 `DIV` 元素插入到用户在 ADatum.com 服务器外部查看的每一页的顶部。 该示例要求您的窗体包含一个 <xref:System.Windows.Forms.WebBrowser> 名为的控件 `WebBrowser1` 。 示例还必须导入命名空间 <xref:System.Text.RegularExpressions> 。  
  
 [!code-csharp[System.Windows.Forms.HtmlElement#9](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlElement/CS/Form1.cs#9)]
 [!code-vb[System.Windows.Forms.HtmlElement#9](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlElement/VB/Form1.vb#9)]  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://developer.mozilla.org/en-us/docs/web/api/element/insertadjacentelement">insertAdjacentElement 方法</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="InvokeMember">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>执行当前元素独有的方法。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="InvokeMember">
      <MemberSignature Language="C#" Value="public object InvokeMember (string methodName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object InvokeMember(string methodName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlElement.InvokeMember(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function InvokeMember (methodName As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ InvokeMember(System::String ^ methodName);" />
      <MemberSignature Language="F#" Value="member this.InvokeMember : string -&gt; obj" Usage="htmlElement.InvokeMember methodName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="methodName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="methodName">要调用的属性或方法的名称。</param>
        <summary>对此元素的基础 DOM 元素执行未公开的方法。</summary>
        <returns>此方法返回的元素，以 <see cref="T:System.Object" /> 形式表示。 如果此 <see cref="T:System.Object" /> 为另一个 HTML 元素，并且你引用了添加到项目中的非托管 MSHTML 库，则可以将此对象强制转换为与其对应的非托管接口。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法可用于从不在托管代码中具有等效项的文档对象模型 (DOM) 调用方法。 使用此版本的 <xref:System.Windows.Forms.HtmlElement.InvokeMember%2A> 可执行不带参数的未公开方法。 有关示例，请参见 <xref:System.Windows.Forms.HtmlElement.InvokeMember%2A>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeMember">
      <MemberSignature Language="C#" Value="public object InvokeMember (string methodName, params object[] parameter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object InvokeMember(string methodName, object[] parameter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlElement.InvokeMember(System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function InvokeMember (methodName As String, ParamArray parameter As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ InvokeMember(System::String ^ methodName, ... cli::array &lt;System::Object ^&gt; ^ parameter);" />
      <MemberSignature Language="F#" Value="member this.InvokeMember : string * obj[] -&gt; obj" Usage="htmlElement.InvokeMember (methodName, parameter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="methodName" Type="System.String" />
        <Parameter Name="parameter" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="net-5.0">
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="methodName">要调用的属性或方法的名称。</param>
        <param name="parameter">要传递的参数的列表。</param>
        <summary>执行在当前 HTML 页中用脚本语言定义的函数。</summary>
        <returns>函数返回的元素，以 <see cref="T:System.Object" /> 形式表示。 如果此 <see cref="T:System.Object" /> 为另一个 HTML 元素，并且你引用了添加到项目中的非托管 MSHTML 库，则可以将此对象强制转换为与其对应的非托管接口。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法可用于从不在托管代码中具有等效项的文档对象模型 (DOM) 调用方法。 提供给的所有参数 <xref:System.Windows.Forms.HtmlElement.InvokeMember%2A> 将在 `VARIANT` 传递到命名脚本函数之前转换为 Win32 数据类型。  
  
   
  
## Examples  
 下面的代码示例获取一个 `TABLE` 名为的 `dataTable` ，并使用未公开的 `moveRow` 方法将行从表的末尾移到开始处。  
  
 [!code-csharp[System.Windows.Forms.HtmlElement#11](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlElement/CS/Form1.cs#11)]
 [!code-vb[System.Windows.Forms.HtmlElement#11](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlElement/VB/Form1.vb#11)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="KeyDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler KeyDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler KeyDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlElement.KeyDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event KeyDown As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ KeyDown;" />
      <MemberSignature Language="F#" Value="member this.KeyDown : System.Windows.Forms.HtmlElementEventHandler " Usage="member this.KeyDown : System.Windows.Forms.HtmlElementEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当用户按下键盘上的某个键时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlElement.KeyDown> 在之前发生 <xref:System.Windows.Forms.HtmlElement.KeyPress> ，这会在之前发生 <xref:System.Windows.Forms.HtmlElement.KeyUp> 。  
  
 <xref:System.Windows.Forms.HtmlElement.KeyDown>通过将类的属性设置为，可以取消元素上的事件的默认操作 <xref:System.Windows.Forms.HtmlElementEventArgs.ReturnValue%2A> <xref:System.Windows.Forms.HtmlElementEventArgs> `true` 。  
  
 <xref:System.Windows.Forms.HtmlElement.KeyDown> <xref:System.Windows.Forms.HtmlDocument> 除非您将类的属性设置为，否则元素上的事件也将出现在该元素的父元素和类本身上 <xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A> <xref:System.Windows.Forms.HtmlElementEventArgs> `true` 。  
  
   
  
## Examples  
 下面的代码示例演示如何使用此成员。 在此示例中，事件处理程序报告事件的发生 <xref:System.Windows.Forms.HtmlElement.KeyDown> 。 此报表可帮助你了解何时发生事件，并可帮助你进行调试。 若要报告多个事件或频繁发生的事件，请考虑 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 将消息替换为多行或将其追加到多行 <xref:System.Windows.Forms.TextBox> 。  
  
 若要运行示例代码，请将其粘贴到包含名为的类型的实例的项目中 <xref:System.Windows.Forms.HtmlElement> `HtmlElement1` 。 然后，确保事件处理程序与事件相关联 <xref:System.Windows.Forms.HtmlElement.KeyDown> 。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#442](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#442)]
 [!code-vb[System.Windows.Forms.EventExamples#442](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#442)]  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://developer.mozilla.org/en-us/docs/web/api/document/keydown_event">onkeydown 事件</related>
      </Docs>
    </Member>
    <Member MemberName="KeyPress">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler KeyPress;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler KeyPress" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlElement.KeyPress" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event KeyPress As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ KeyPress;" />
      <MemberSignature Language="F#" Value="member this.KeyPress : System.Windows.Forms.HtmlElementEventHandler " Usage="member this.KeyPress : System.Windows.Forms.HtmlElementEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当用户按下并释放键盘上的某个键时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlElement.KeyPress> 发生在之后 <xref:System.Windows.Forms.HtmlElement.KeyDown> 和之前 <xref:System.Windows.Forms.HtmlElement.KeyUp> 。  
  
 <xref:System.Windows.Forms.HtmlElement.KeyPress>通过将类的属性设置为，可以取消元素上的事件的默认操作 <xref:System.Windows.Forms.HtmlElementEventArgs.ReturnValue%2A> <xref:System.Windows.Forms.HtmlElementEventArgs> `true` 。  
  
 <xref:System.Windows.Forms.HtmlElement.KeyPress> <xref:System.Windows.Forms.HtmlDocument> 除非您将类的属性设置为，否则元素上的事件也将出现在该元素的父元素和类本身上 <xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A> <xref:System.Windows.Forms.HtmlElementEventArgs> `true` 。  
  
   
  
## Examples  
 下面的代码示例演示如何使用此成员。 在此示例中，事件处理程序报告事件的发生 <xref:System.Windows.Forms.HtmlElement.KeyPress> 。 此报表可帮助你了解何时发生事件，并可帮助你进行调试。 若要报告多个事件或频繁发生的事件，请考虑 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 将消息替换为多行或将其追加到多行 <xref:System.Windows.Forms.TextBox> 。  
  
 若要运行示例代码，请将其粘贴到包含名为的类型的实例的项目中 <xref:System.Windows.Forms.HtmlElement> `HtmlElement1` 。 然后，确保事件处理程序与事件相关联 <xref:System.Windows.Forms.HtmlElement.KeyPress> 。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#443](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#443)]
 [!code-vb[System.Windows.Forms.EventExamples#443](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#443)]  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://developer.mozilla.org/en-us/docs/web/api/document/keypress_event">onkeypress 事件</related>
      </Docs>
    </Member>
    <Member MemberName="KeyUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler KeyUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler KeyUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlElement.KeyUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event KeyUp As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ KeyUp;" />
      <MemberSignature Language="F#" Value="member this.KeyUp : System.Windows.Forms.HtmlElementEventHandler " Usage="member this.KeyUp : System.Windows.Forms.HtmlElementEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当用户释放键盘上的某个键时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlElement.KeyUp> 发生在后发生 <xref:System.Windows.Forms.HtmlElement.KeyPress> 的情况 <xref:System.Windows.Forms.HtmlElement.KeyDown> 。  
  
 你无法取消此事件。  
  
 <xref:System.Windows.Forms.HtmlElement.KeyUp> <xref:System.Windows.Forms.HtmlDocument> 除非您将类的属性设置为，否则元素上的事件也将出现在该元素的父元素和类本身上 <xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A> <xref:System.Windows.Forms.HtmlElementEventArgs> `true` 。  
  
   
  
## Examples  
 下面的代码示例演示如何使用此成员。 在此示例中，事件处理程序报告事件的发生 <xref:System.Windows.Forms.HtmlElement.KeyUp> 。 此报表可帮助你了解何时发生事件，并可帮助你进行调试。 若要报告多个事件或频繁发生的事件，请考虑 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 将消息替换为多行或将其追加到多行 <xref:System.Windows.Forms.TextBox> 。  
  
 若要运行示例代码，请将其粘贴到包含名为的类型的实例的项目中 <xref:System.Windows.Forms.HtmlElement> `HtmlElement1` 。 然后，确保事件处理程序与事件相关联 <xref:System.Windows.Forms.HtmlElement.KeyUp> 。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#444](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#444)]
 [!code-vb[System.Windows.Forms.EventExamples#444](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#444)]  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://developer.mozilla.org/en-us/docs/web/api/document/keyup_event">onkeyup 事件</related>
      </Docs>
    </Member>
    <Member MemberName="LosingFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler LosingFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler LosingFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlElement.LosingFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LosingFocus As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ LosingFocus;" />
      <MemberSignature Language="F#" Value="member this.LosingFocus : System.Windows.Forms.HtmlElementEventHandler " Usage="member this.LosingFocus : System.Windows.Forms.HtmlElementEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当元素正在失去用户输入焦点时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例演示如何使用此成员。 在此示例中，事件处理程序报告事件的发生 <xref:System.Windows.Forms.HtmlElement.LosingFocus> 。 此报表可帮助你了解何时发生事件，并可帮助你进行调试。  
  
 若要运行示例代码，请将其粘贴到包含名为的类型的实例的项目中 <xref:System.Windows.Forms.HtmlElement> `HtmlElement1` 。 然后，确保事件处理程序与事件相关联 <xref:System.Windows.Forms.HtmlElement.LosingFocus> 。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#440](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#440)]
 [!code-vb[System.Windows.Forms.EventExamples#440](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#440)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler LostFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler LostFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlElement.LostFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LostFocus As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ LostFocus;" />
      <MemberSignature Language="F#" Value="member this.LostFocus : System.Windows.Forms.HtmlElementEventHandler " Usage="member this.LostFocus : System.Windows.Forms.HtmlElementEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当元素已失去用户输入焦点时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 发生之后，元素将不再接收关键笔画事件 <xref:System.Windows.Forms.HtmlElement.LostFocus> ，直到再次给予该元素时，用户可以通过在页面上选择它或通过调用该元素上的方法的应用程序来获得焦点 <xref:System.Windows.Forms.HtmlElement.Focus%2A> 。  
  
 你无法取消此事件。  
  
 <xref:System.Windows.Forms.HtmlElement.LostFocus> <xref:System.Windows.Forms.HtmlDocument> 除非将类的属性设置为，否则元素上的事件也将出现在该元素的父级和类本身上 <xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A> <xref:System.Windows.Forms.HtmlElementEventArgs> `true` 。  
  
   
  
## Examples  
 下面的代码示例演示如何使用此成员。 在此示例中，事件处理程序报告事件的发生 <xref:System.Windows.Forms.HtmlElement.LostFocus> 。 此报表可帮助你了解何时发生事件，并可帮助你进行调试。  
  
 若要运行示例代码，请将其粘贴到包含名为的类型的实例的项目中 <xref:System.Windows.Forms.HtmlElement> `HtmlElement1` 。 然后，确保事件处理程序与事件相关联 <xref:System.Windows.Forms.HtmlElement.LostFocus> 。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#441](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#441)]
 [!code-vb[System.Windows.Forms.EventExamples#441](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#441)]  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://developer.mozilla.org/en-us/docs/web/api/element/focusout_event">onfocusout 事件</related>
      </Docs>
    </Member>
    <Member MemberName="MouseDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler MouseDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler MouseDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlElement.MouseDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseDown As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ MouseDown;" />
      <MemberSignature Language="F#" Value="member this.MouseDown : System.Windows.Forms.HtmlElementEventHandler " Usage="member this.MouseDown : System.Windows.Forms.HtmlElementEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当用户按下鼠标按钮时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlElement.MouseDown>通过将类的属性设置为，可以取消元素上的事件的默认操作 <xref:System.Windows.Forms.HtmlElementEventArgs.ReturnValue%2A> <xref:System.Windows.Forms.HtmlElementEventArgs> `true` 。  
  
 <xref:System.Windows.Forms.HtmlElement.MouseDown> <xref:System.Windows.Forms.HtmlDocument> 除非您将类的属性设置为，否则元素上的事件也将出现在该元素的父元素和类本身上 <xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A> <xref:System.Windows.Forms.HtmlElementEventArgs> `true` 。  
  
   
  
## Examples  
 下面的代码示例演示如何使用此成员。 在此示例中，事件处理程序报告事件的发生 <xref:System.Windows.Forms.HtmlElement.MouseDown> 。 此报表可帮助你了解何时发生事件，并可帮助你进行调试。 若要报告多个事件或频繁发生的事件，请考虑 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 将消息替换为多行或将其追加到多行 <xref:System.Windows.Forms.TextBox> 。  
  
 若要运行示例代码，请将其粘贴到包含名为的类型的实例的项目中 <xref:System.Windows.Forms.HtmlElement> `HtmlElement1` 。 然后，确保事件处理程序与事件相关联 <xref:System.Windows.Forms.HtmlElement.MouseDown> 。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#446](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#446)]
 [!code-vb[System.Windows.Forms.EventExamples#446](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#446)]  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://developer.mozilla.org/en-us/docs/web/api/element/mousedown_event">onmousedown 事件</related>
      </Docs>
    </Member>
    <Member MemberName="MouseEnter">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler MouseEnter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler MouseEnter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlElement.MouseEnter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseEnter As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ MouseEnter;" />
      <MemberSignature Language="F#" Value="member this.MouseEnter : System.Windows.Forms.HtmlElementEventHandler " Usage="member this.MouseEnter : System.Windows.Forms.HtmlElementEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当用户首次将鼠标光标移动到当前元素上时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例演示如何使用此成员。 在此示例中，事件处理程序报告事件的发生 <xref:System.Windows.Forms.HtmlElement.MouseEnter> 。 此报表可帮助你了解何时发生事件，并可帮助你进行调试。 若要报告多个事件或频繁发生的事件，请考虑 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 将消息替换为多行或将其追加到多行 <xref:System.Windows.Forms.TextBox> 。  
  
 若要运行示例代码，请将其粘贴到包含名为的类型的实例的项目中 <xref:System.Windows.Forms.HtmlElement> `HtmlElement1` 。 然后，确保事件处理程序与事件相关联 <xref:System.Windows.Forms.HtmlElement.MouseEnter> 。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#449](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#449)]
 [!code-vb[System.Windows.Forms.EventExamples#449](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#449)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseLeave">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler MouseLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler MouseLeave" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlElement.MouseLeave" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseLeave As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ MouseLeave;" />
      <MemberSignature Language="F#" Value="member this.MouseLeave : System.Windows.Forms.HtmlElementEventHandler " Usage="member this.MouseLeave : System.Windows.Forms.HtmlElementEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当用户将鼠标光标从当前元素上移开时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例演示如何使用此成员。 在此示例中，事件处理程序报告事件的发生 <xref:System.Windows.Forms.HtmlElement.MouseLeave> 。 此报表可帮助你了解何时发生事件，并可帮助你进行调试。 若要报告多个事件或频繁发生的事件，请考虑 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 将消息替换为多行或将其追加到多行 <xref:System.Windows.Forms.TextBox> 。  
  
 若要运行示例代码，请将其粘贴到包含名为的类型的实例的项目中 <xref:System.Windows.Forms.HtmlElement> `HtmlElement1` 。 然后，确保事件处理程序与事件相关联 <xref:System.Windows.Forms.HtmlElement.MouseLeave> 。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#450](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#450)]
 [!code-vb[System.Windows.Forms.EventExamples#450](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#450)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler MouseMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler MouseMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlElement.MouseMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseMove As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ MouseMove;" />
      <MemberSignature Language="F#" Value="member this.MouseMove : System.Windows.Forms.HtmlElementEventHandler " Usage="member this.MouseMove : System.Windows.Forms.HtmlElementEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当用户将鼠标光标通过元素时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 你无法取消此事件。  
  
 <xref:System.Windows.Forms.HtmlElement.MouseMove> <xref:System.Windows.Forms.HtmlDocument> 除非您将类的属性设置为，否则元素上的事件也将出现在该元素的父元素和类本身上 <xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A> <xref:System.Windows.Forms.HtmlElementEventArgs> `true` 。  
  
   
  
## Examples  
 下面的代码示例演示如何使用此成员。 在此示例中，事件处理程序报告事件的发生 <xref:System.Windows.Forms.HtmlElement.MouseMove> 。 此报表可帮助你了解何时发生事件，并可帮助你进行调试。 若要报告多个事件或频繁发生的事件，请考虑 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 将消息替换为多行或将其追加到多行 <xref:System.Windows.Forms.TextBox> 。  
  
 若要运行示例代码，请将其粘贴到包含名为的类型的实例的项目中 <xref:System.Windows.Forms.HtmlElement> `HtmlElement1` 。 然后，确保事件处理程序与事件相关联 <xref:System.Windows.Forms.HtmlElement.MouseMove> 。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#445](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#445)]
 [!code-vb[System.Windows.Forms.EventExamples#445](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#445)]  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://developer.mozilla.org/en-us/docs/web/api/element/mousemove_event">onmousemove 事件</related>
      </Docs>
    </Member>
    <Member MemberName="MouseOver">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler MouseOver;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler MouseOver" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlElement.MouseOver" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseOver As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ MouseOver;" />
      <MemberSignature Language="F#" Value="member this.MouseOver : System.Windows.Forms.HtmlElementEventHandler " Usage="member this.MouseOver : System.Windows.Forms.HtmlElementEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当鼠标光标进入元素的边界时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlElement.MouseOver>通过将类的属性设置为，可以取消元素上的事件的默认操作 <xref:System.Windows.Forms.HtmlElementEventArgs.ReturnValue%2A> <xref:System.Windows.Forms.HtmlElementEventArgs> `true` 。  
  
 <xref:System.Windows.Forms.HtmlElement.MouseOver> <xref:System.Windows.Forms.HtmlDocument> 除非您将类的属性设置为，否则元素上的事件也将出现在该元素的父元素和类本身上 <xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A> <xref:System.Windows.Forms.HtmlElementEventArgs> `true` 。  
  
   
  
## Examples  
 下面的代码示例演示如何使用此成员。 在此示例中，事件处理程序报告事件的发生 <xref:System.Windows.Forms.HtmlElement.MouseOver> 。 此报表可帮助你了解何时发生事件，并可帮助你进行调试。 若要报告多个事件或频繁发生的事件，请考虑 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 将消息替换为多行或将其追加到多行 <xref:System.Windows.Forms.TextBox> 。  
  
 若要运行示例代码，请将其粘贴到包含名为的类型的实例的项目中 <xref:System.Windows.Forms.HtmlElement> `HtmlElement1` 。 然后，确保事件处理程序与事件相关联 <xref:System.Windows.Forms.HtmlElement.MouseOver> 。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#447](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#447)]
 [!code-vb[System.Windows.Forms.EventExamples#447](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#447)]  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://developer.mozilla.org/en-us/docs/web/api/element/mouseover_event">onmouseover 事件</related>
      </Docs>
    </Member>
    <Member MemberName="MouseUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler MouseUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler MouseUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlElement.MouseUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseUp As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ MouseUp;" />
      <MemberSignature Language="F#" Value="member this.MouseUp : System.Windows.Forms.HtmlElementEventHandler " Usage="member this.MouseUp : System.Windows.Forms.HtmlElementEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当用户释放鼠标按钮时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlElement.MouseUp>通过将类的属性设置为，可以取消元素上的事件的默认操作 <xref:System.Windows.Forms.HtmlElementEventArgs.ReturnValue%2A> <xref:System.Windows.Forms.HtmlElementEventArgs> `true` 。  
  
 <xref:System.Windows.Forms.HtmlElement.MouseUp> <xref:System.Windows.Forms.HtmlDocument> 除非您将类的属性设置为，否则元素上的事件也将出现在该元素的父元素和类本身上 <xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A> <xref:System.Windows.Forms.HtmlElementEventArgs> `true` 。  
  
   
  
## Examples  
 下面的代码示例演示如何使用此成员。 在此示例中，事件处理程序报告事件的发生 <xref:System.Windows.Forms.HtmlElement.MouseUp> 。 此报表可帮助你了解何时发生事件，并可帮助你进行调试。 若要报告多个事件或频繁发生的事件，请考虑 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 将消息替换为多行或将其追加到多行 <xref:System.Windows.Forms.TextBox> 。  
  
 若要运行示例代码，请将其粘贴到包含名为的类型的实例的项目中 <xref:System.Windows.Forms.HtmlElement> `HtmlElement1` 。 然后，确保事件处理程序与事件相关联 <xref:System.Windows.Forms.HtmlElement.MouseUp> 。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#448](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#448)]
 [!code-vb[System.Windows.Forms.EventExamples#448](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#448)]  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://developer.mozilla.org/en-us/docs/web/api/element/mouseup_event">onmouseup 事件</related>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlElement.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Name : string with get, set" Usage="System.Windows.Forms.HtmlElement.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置元素的名称。</summary>
        <value>表示元素名称的 <see cref="T:System.String" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用 <xref:System.Windows.Forms.HtmlElement.Name%2A> 属性可以在的属性上使用方法从文档中检索元素 <xref:System.Windows.Forms.HtmlElementCollection.GetElementsByName%2A> <xref:System.Windows.Forms.HtmlElement.All%2A> <xref:System.Windows.Forms.HtmlDocument> 。  
  
 当应用于 `INPUT` 元素时，将为 <xref:System.Windows.Forms.HtmlElement.Name%2A> 该元素的数据提交到服务器时，定义该元素的数据的变量名称。  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://developer.mozilla.org/en-us/docs/web/html/attributes">name 属性</related>
      </Docs>
    </Member>
    <Member MemberName="NextSibling">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlElement NextSibling { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.HtmlElement NextSibling" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlElement.NextSibling" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property NextSibling As HtmlElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::HtmlElement ^ NextSibling { System::Windows::Forms::HtmlElement ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.NextSibling : System.Windows.Forms.HtmlElement" Usage="System.Windows.Forms.HtmlElement.NextSibling" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElement</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取文档树中与此元素位于同一级别的下一个元素。</summary>
        <value>一个 <see cref="T:System.Windows.Forms.HtmlElement" />，表示位于当前元素右侧的元素。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 将 <xref:System.Windows.Forms.HtmlElement.NextSibling%2A> 与结合使用 <xref:System.Windows.Forms.HtmlElement.FirstChild%2A> 来遍历 HTML 元素的文档树。  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://developer.mozilla.org/en-us/docs/web/api/node/nextsibling">nextSibling 属性</related>
      </Docs>
    </Member>
    <Member MemberName="OffsetParent">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlElement OffsetParent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.HtmlElement OffsetParent" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlElement.OffsetParent" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OffsetParent As HtmlElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::HtmlElement ^ OffsetParent { System::Windows::Forms::HtmlElement ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.OffsetParent : System.Windows.Forms.HtmlElement" Usage="System.Windows.Forms.HtmlElement.OffsetParent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElement</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取从中计算 <see cref="P:System.Windows.Forms.HtmlElement.OffsetRectangle" /> 的元素。</summary>
        <value>从中计算偏移量的元素。  
  
如果某个元素的父级或此元素层次结构中的其他元素使用相对或绝对定位，则 <see langword="OffsetParent" /> 将成为当前元素嵌套到的第一个相对或绝对定位元素。 如果当前元素以上的任何元素都不是绝对或相对定位的，则 <see langword="OffsetParent" /> 将是文档的 <c>正文</c> 标记。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 可以通过以下三种方式之一将元素定位到 HTML 页：默认流定位;相对定位，其中元素相对于其父级的固定量偏移;和绝对定位，其中，元素的相对于文档的左上角为固定坐标位置。  
  
 如果文档的元素使用相对或绝对定位，则可以使用 `OffsetParent` 计算工作区中元素的坐标位置。  
  
 有关 HTML 中的元素定位的详细信息，请参阅 [关于元素定位](https://msdn.microsoft.com/library/ms533005.aspx)。  
  
   
  
## Examples  
 下面的代码示例演示了 <xref:System.Windows.Forms.HtmlElement.OffsetParent%2A> 和 <xref:System.Windows.Forms.HtmlElement.OffsetRectangle%2A> 的不同之处 `span1` `span2` `span3` ：  
  
```  
<HTML>  
    <BODY id="documentBody">  
  
        <DIV id="div1">  
            <SPAN id="span1">Placeholder text 1.</SPAN>  
        </DIV>  
  
        <DIV id="div2" style="position:relative;top:100px;left:100px;">  
            <SPAN id="span2">Placeholder text 2.</SPAN>  
        </DIV>  
  
        <DIV id="div3" style="position:absolute;top:200px;left:200px;">  
            <DIV id="div4" style="position:relative;top:100px;left:100px;">  
                <SPAN id="span3">Placeholder text 3.</SPAN>  
            </DIV>  
        </DIV>  
  
    </BODY>  
</HTML>  
```  
  
 [!code-csharp[System.Windows.Forms.HtmlElement#6](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlElement/CS/Form1.cs#6)]
 [!code-vb[System.Windows.Forms.HtmlElement#6](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlElement/VB/Form1.vb#6)]  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://developer.mozilla.org/en-us/docs/web/api/htmlelement/offsetparent">offsetParent 属性</related>
      </Docs>
    </Member>
    <Member MemberName="OffsetRectangle">
      <MemberSignature Language="C#" Value="public System.Drawing.Rectangle OffsetRectangle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Rectangle OffsetRectangle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlElement.OffsetRectangle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OffsetRectangle As Rectangle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Rectangle OffsetRectangle { System::Drawing::Rectangle get(); };" />
      <MemberSignature Language="F#" Value="member this.OffsetRectangle : System.Drawing.Rectangle" Usage="System.Windows.Forms.HtmlElement.OffsetRectangle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Rectangle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取元素相对于其父级的位置。</summary>
        <value>元素相对于其父级的 x 和 y 坐标位置以及其宽度和高度。  
  
如果元素的父级为相对或绝对定位，则 <see cref="P:System.Windows.Forms.HtmlElement.OffsetRectangle" /> 将返回父元素的偏移量。 如果元素本身为相对于其父级的相对定位，则 <see cref="P:System.Windows.Forms.HtmlElement.OffsetRectangle" /> 将返回距其父级的偏移量。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 可以通过以下三种方式之一在 HTML 页上定位元素：  
  
-   默认流定位。  
  
-   相对定位，其中元素相对于其父级的固定量偏移。  
  
-   绝对定位，其中，元素的相对于文档的左上角为固定坐标位置。  
  
 有关 HTML 中的元素定位的详细信息，请参阅 [关于元素定位](https://msdn.microsoft.com/library/ms533005.aspx)。  
  
   
  
## Examples  
 下面的代码示例演示了 <xref:System.Windows.Forms.HtmlElement.OffsetParent%2A> 和 <xref:System.Windows.Forms.HtmlElement.OffsetRectangle%2A> 的不同之处 `span1` `span2` `span3` ：  
  
```  
<HTML>  
    <BODY id="documentBody">  
  
        <DIV id="div1">  
            <SPAN id="span1">Placeholder text 1.</SPAN>  
        </DIV>  
  
        <DIV id="div2" style="position:relative;top:100px;left:100px;">  
            <SPAN id="span2">Placeholder text 2.</SPAN>  
        </DIV>  
  
        <DIV id="div3" style="position:absolute;top:200px;left:200px;">  
            <DIV id="div4" style="position:relative;top:100px;left:100px;">  
                <SPAN id="span3">Placeholder text 3.</SPAN>  
            </DIV>  
        </DIV>  
  
    </BODY>  
</HTML>  
```  
  
 [!code-csharp[System.Windows.Forms.HtmlElement#6](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlElement/CS/Form1.cs#6)]
 [!code-vb[System.Windows.Forms.HtmlElement#6](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlElement/VB/Form1.vb#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.HtmlElement.OffsetParent" />
        <related type="ExternalDocumentation" href="https://developer.mozilla.org/en-us/docs/web/api/htmlelement/offsetleft">offsetLeft 属性</related>
        <related type="ExternalDocumentation" href="https://developer.mozilla.org/en-us/docs/web/api/htmlelement/offsettop">offsetTop 属性</related>
        <related type="ExternalDocumentation" href="https://developer.mozilla.org/en-us/docs/web/api/htmlelement/offsetwidth">offsetWidth 属性</related>
        <related type="ExternalDocumentation" href="https://developer.mozilla.org/en-us/docs/web/api/htmlelement/offsetheight">offsetHeight 属性</related>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Windows.Forms.HtmlElement left, System.Windows.Forms.HtmlElement right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(class System.Windows.Forms.HtmlElement left, class System.Windows.Forms.HtmlElement right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlElement.op_Equality(System.Windows.Forms.HtmlElement,System.Windows.Forms.HtmlElement)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As HtmlElement, right As HtmlElement) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Windows::Forms::HtmlElement ^ left, System::Windows::Forms::HtmlElement ^ right);" />
      <MemberSignature Language="F#" Value="static member ( = ) : System.Windows.Forms.HtmlElement * System.Windows.Forms.HtmlElement -&gt; bool" Usage="left = right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Windows.Forms.HtmlElement" />
        <Parameter Name="right" Type="System.Windows.Forms.HtmlElement" />
      </Parameters>
      <Docs>
        <param name="left">第一个 <see cref="T:System.Windows.Forms.HtmlElement" />。</param>
        <param name="right">第二个 <see cref="T:System.Windows.Forms.HtmlElement" />。</param>
        <summary>比较两个元素是否相等。</summary>
        <returns>如果两个参数都为 <see langword="null" />，或是两个元素具有相同的基础 COM 接口，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 相等运算符测试所 `IUnknown` 提供的类所包装的基础 COM 对象的指针 <xref:System.Windows.Forms.HtmlElement> 。  
  
 此运算符的等效方法是 <xref:System.Windows.Forms.HtmlElement.Equals%2A?displayProperty=nameWithType>]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Windows.Forms.HtmlElement left, System.Windows.Forms.HtmlElement right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(class System.Windows.Forms.HtmlElement left, class System.Windows.Forms.HtmlElement right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlElement.op_Inequality(System.Windows.Forms.HtmlElement,System.Windows.Forms.HtmlElement)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As HtmlElement, right As HtmlElement) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Windows::Forms::HtmlElement ^ left, System::Windows::Forms::HtmlElement ^ right);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : System.Windows.Forms.HtmlElement * System.Windows.Forms.HtmlElement -&gt; bool" Usage="System.Windows.Forms.HtmlElement.op_Inequality (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Windows.Forms.HtmlElement" />
        <Parameter Name="right" Type="System.Windows.Forms.HtmlElement" />
      </Parameters>
      <Docs>
        <param name="left">第一个 <see cref="T:System.Windows.Forms.HtmlElement" />。</param>
        <param name="right">第二个 <see cref="T:System.Windows.Forms.HtmlElement" />。</param>
        <summary>比较两个 <see cref="T:System.Windows.Forms.HtmlElement" /> 对象是否相等。</summary>
        <returns>如果仅有一个元素为 <see langword="null" />，或是两个对象不相等，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[此运算符的等效方法是 <xref:System.Windows.Forms.HtmlElement.Equals%2A?displayProperty=nameWithType>]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OuterHtml">
      <MemberSignature Language="C#" Value="public string OuterHtml { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string OuterHtml" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlElement.OuterHtml" />
      <MemberSignature Language="VB.NET" Value="Public Property OuterHtml As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ OuterHtml { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.OuterHtml : string with get, set" Usage="System.Windows.Forms.HtmlElement.OuterHtml" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置当前元素的 HTML 代码。</summary>
        <value>当前元素及其子级的 HTML 代码。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 但 <xref:System.Windows.Forms.HtmlElement.InnerHtml%2A> 将返回当前元素中包含的包含在当前元素的周围标记之外的所有 HTML， <xref:System.Windows.Forms.HtmlElement.OuterHtml%2A> 其中包括当前元素的标记以及标记包含的 HTML，例如：  
  
 `<HTML>`  
  
 `<BODY>`  
  
 `<DIV id="div1">`  
  
 `Hello`  
  
 `<DIV id="div2">`  
  
 `World`  
  
 `<DIV id="div3">`  
  
 `How are you?`  
  
 `</DIV>`  
  
 `</DIV>`  
  
 `</DIV>`  
  
 `</BODY>`  
  
 `</HTML>`  
  
 在此示例中， <xref:System.Windows.Forms.HtmlElement.OuterHtml%2A> 对的调用 `div2` 将返回：  
  
 `<DIV id="div2">`  
  
 `World`  
  
 `<DIV id="div3">`  
  
 `How are you?`  
  
 `</DIV>`  
  
 `</DIV>`  
  
 调用 <xref:System.Windows.Forms.HtmlElement.InnerHtml%2A> 将返回：  
  
 `World`  
  
 `<DIV id="div3">`  
  
 `How are you?`  
  
 `</DIV>`  
  
 如果将新值分配给 <xref:System.Windows.Forms.HtmlElement.OuterHtml%2A> ，则当前元素引用将变为无效，它不会反映刚分配的 HTML 的名称、属性和子内容。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.HtmlElement.InnerHtml" />
        <related type="ExternalDocumentation" href="https://developer.mozilla.org/en-us/docs/web/api/element/outerhtml">outerHTML 属性</related>
      </Docs>
    </Member>
    <Member MemberName="OuterText">
      <MemberSignature Language="C#" Value="public string OuterText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string OuterText" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlElement.OuterText" />
      <MemberSignature Language="VB.NET" Value="Public Property OuterText As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ OuterText { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.OuterText : string with get, set" Usage="System.Windows.Forms.HtmlElement.OuterText" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置当前元素的文本。</summary>
        <value>当前元素及此元素的子级中的文本。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果尝试使用将 HTML 分配到元素 <xref:System.Windows.Forms.HtmlElement.OuterText%2A> ，html 代码将在文档中显示为文本，就像你在文本文件中查看 html 一样。 如果使用属性将 HTML 分配给某个元素 <xref:System.Windows.Forms.HtmlElement.InnerHtml%2A> ， <xref:System.Windows.Forms.HtmlElement.OuterText%2A> 则将返回该 html 中的所有文本，并将标记删除。  
  
 向赋值 <xref:System.Windows.Forms.HtmlElement.OuterText%2A> 会销毁属于该元素的所有子元素。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">不能设置此元素之外的文本。</exception>
        <altmember cref="P:System.Windows.Forms.HtmlElement.InnerText" />
        <related type="ExternalDocumentation" href="https://developer.mozilla.org/en-us/docs/web/api/htmlelement/outertext">outerText 属性</related>
      </Docs>
    </Member>
    <Member MemberName="Parent">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlElement Parent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.HtmlElement Parent" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlElement.Parent" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Parent As HtmlElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::HtmlElement ^ Parent { System::Windows::Forms::HtmlElement ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Parent : System.Windows.Forms.HtmlElement" Usage="System.Windows.Forms.HtmlElement.Parent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElement</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取当前元素的父元素。</summary>
        <value>HTML 文档层次结构中位于当前元素之上的元素。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlElement.Parent%2A>属性允许发现元素的上下文。 它在事件处理程序内非常有用，例如 <xref:System.Windows.Forms.HtmlElement.Click> ，可以为文档的对象层次结构中任何位置的任何元素触发。  
  
 Html <xref:System.Windows.Forms.HtmlElement.Parent%2A> 元素的属性 (html 文档的顶部) 点回自身。 如果在 <xref:System.Windows.Forms.HtmlElement.Parent%2A> 循环内调用，请验证循环的中断条件是否与属性的类型和属性的类型相比较 `Parent` ，否则，代码可能会执行无限循环。  
  
   
  
## Examples  
 下面的代码示例将查找 `IMG` 文档中的所有标记，并使用 <xref:System.Windows.Forms.HtmlElement.Parent%2A> 属性来测试是否为 `IMG` 指向另一页的超链接; 如果为，则代码将该 URL 分配给 `ALT` 标记的属性 `IMG` ，以便用户可以在图像上查看所用的位置。  
  
 [!code-csharp[System.Windows.Forms.HtmlElement#7](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlElement/CS/Form1.cs#7)]
 [!code-vb[System.Windows.Forms.HtmlElement#7](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlElement/VB/Form1.vb#7)]  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://developer.mozilla.org/en-us/docs/web/api/node/parentelement">parentElement 属性</related>
      </Docs>
    </Member>
    <Member MemberName="RaiseEvent">
      <MemberSignature Language="C#" Value="public void RaiseEvent (string eventName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RaiseEvent(string eventName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlElement.RaiseEvent(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RaiseEvent (eventName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RaiseEvent(System::String ^ eventName);" />
      <MemberSignature Language="F#" Value="member this.RaiseEvent : string -&gt; unit" Usage="htmlElement.RaiseEvent eventName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="eventName">要引发的事件的名称。</param>
        <summary>使指定的事件调用所有已注册的事件处理程序。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法用于访问 HTML 文档对象模型 (DOM) 事件。 它直接调用 [IHTMLElement3：： fireEvent](https://go.microsoft.com/fwlink/?LinkId=103189) 方法。 有关如何通过类使用 DOM 的详细信息 <xref:System.Windows.Forms.HtmlElement> ，请参阅 [访问托管 HTML 文档对象模型上的未公开成员](/dotnet/framework/winforms/controls/accessing-unexposed-members-on-the-managed-html-document-object-model)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveFocus">
      <MemberSignature Language="C#" Value="public void RemoveFocus ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveFocus() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlElement.RemoveFocus" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveFocus ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveFocus();" />
      <MemberSignature Language="F#" Value="member this.RemoveFocus : unit -&gt; unit" Usage="htmlElement.RemoveFocus " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>移除当前元素的焦点（如果此元素有焦点）。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 调用此方法将引发 <xref:System.Windows.Forms.HtmlElement.LostFocus> 元素的事件。  
  
 如果使用此方法从元素中清除焦点，则将其提供给包含元素的文档，而不是 tab 键顺序中的下一个元素。  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://developer.mozilla.org/en-us/docs/web/api/htmlorforeignelement/blur">模糊方法</related>
      </Docs>
    </Member>
    <Member MemberName="ScrollIntoView">
      <MemberSignature Language="C#" Value="public void ScrollIntoView (bool alignWithTop);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ScrollIntoView(bool alignWithTop) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlElement.ScrollIntoView(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ScrollIntoView (alignWithTop As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ScrollIntoView(bool alignWithTop);" />
      <MemberSignature Language="F#" Value="member this.ScrollIntoView : bool -&gt; unit" Usage="htmlElement.ScrollIntoView alignWithTop" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="alignWithTop" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="alignWithTop">如果为 <see langword="true" />，则对象顶部将显示在窗口的顶部。 如果为 <see langword="false" />，则对象底部将显示在窗口的底部。</param>
        <summary>滚动包含此元素的文档，直到此元素的上边缘或下边缘与此文档窗口对齐为止。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例按名称查找元素并滚动页面，使元素顶部与可见页面的顶部对齐。  
  
 [!code-csharp[System.Windows.Forms.HtmlElement#12](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlElement/CS/Form1.cs#12)]
 [!code-vb[System.Windows.Forms.HtmlElement#12](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlElement/VB/Form1.vb#12)]  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://developer.mozilla.org/en-us/docs/web/api/element/scrollintoview">scrollIntoView 方法</related>
      </Docs>
    </Member>
    <Member MemberName="ScrollLeft">
      <MemberSignature Language="C#" Value="public int ScrollLeft { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ScrollLeft" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlElement.ScrollLeft" />
      <MemberSignature Language="VB.NET" Value="Public Property ScrollLeft As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ScrollLeft { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.ScrollLeft : int with get, set" Usage="System.Windows.Forms.HtmlElement.ScrollLeft" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置元素边缘与其内容的左边缘之间的距离。</summary>
        <value>元素的左边缘与其内容的左边缘之间的距离（以像素为单位）。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 滚动区域的完整尺寸可以使用 <xref:System.Windows.Forms.HtmlElement.ScrollRectangle%2A> ; `ScrollLeft` 而 <xref:System.Windows.Forms.HtmlElement.ScrollTop%2A> 是独立公开的，因为它们是开发人员可以设置的滚动区域的两个属性。  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://developer.mozilla.org/en-us/docs/web/api/element/scrollleft">scrollLeft 属性</related>
      </Docs>
    </Member>
    <Member MemberName="ScrollRectangle">
      <MemberSignature Language="C#" Value="public System.Drawing.Rectangle ScrollRectangle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Rectangle ScrollRectangle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlElement.ScrollRectangle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ScrollRectangle As Rectangle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Rectangle ScrollRectangle { System::Drawing::Rectangle get(); };" />
      <MemberSignature Language="F#" Value="member this.ScrollRectangle : System.Drawing.Rectangle" Usage="System.Windows.Forms.HtmlElement.ScrollRectangle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Rectangle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取元素的可滚动区尺寸。</summary>
        <value>元素的可滚动区的大小和坐标位置。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果元素的内容超出其维度的大小，则该元素将具有可滚动区域，除非元素上的溢出样式禁止呈现滚动条。  
  
 您无法直接修改滚动区域的大小，但您可以修改滚动区域边缘和元素边缘之间的距离。 使用 <xref:System.Windows.Forms.HtmlElement.ScrollLeft%2A> 和 <xref:System.Windows.Forms.HtmlElement.ScrollTop%2A> 属性来实现此目的。  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://developer.mozilla.org/en-us/docs/web/api/element/scrollleft">scrollLeft 属性</related>
        <related type="ExternalDocumentation" href="https://developer.mozilla.org/en-us/docs/web/api/element/scrolltop">scrollTop 属性</related>
        <related type="ExternalDocumentation" href="https://developer.mozilla.org/en-us/docs/web/api/element/scrollheight">scrollHeight 属性</related>
        <related type="ExternalDocumentation" href="https://developer.mozilla.org/en-us/docs/web/api/element/scrollwidth">scrollWidth 属性</related>
      </Docs>
    </Member>
    <Member MemberName="ScrollTop">
      <MemberSignature Language="C#" Value="public int ScrollTop { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ScrollTop" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlElement.ScrollTop" />
      <MemberSignature Language="VB.NET" Value="Public Property ScrollTop As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ScrollTop { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.ScrollTop : int with get, set" Usage="System.Windows.Forms.HtmlElement.ScrollTop" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置此元素边缘与其内容的上边缘之间的距离。</summary>
        <value>此元素的上边缘与其内容的上边缘之间的距离（以像素为单位）。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 滚动区域的完整尺寸可以使用 <xref:System.Windows.Forms.HtmlElement.ScrollRectangle%2A> ; <xref:System.Windows.Forms.HtmlElement.ScrollLeft%2A> 而 `ScrollTop` 是独立公开的，因为它们是开发人员可以设置的滚动区域的两个属性。  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://developer.mozilla.org/en-us/docs/web/api/element/scrolltop">scrollTop 属性</related>
      </Docs>
    </Member>
    <Member MemberName="SetAttribute">
      <MemberSignature Language="C#" Value="public void SetAttribute (string attributeName, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetAttribute(string attributeName, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlElement.SetAttribute(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetAttribute (attributeName As String, value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetAttribute(System::String ^ attributeName, System::String ^ value);" />
      <MemberSignature Language="F#" Value="member this.SetAttribute : string * string -&gt; unit" Usage="htmlElement.SetAttribute (attributeName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeName" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="attributeName">要设置的特性的名称。</param>
        <param name="value">此特性的新值。</param>
        <summary>设置元素中已命名特性的值。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 HTML 中的属性是该元素的任何有效的名称/值对。 <xref:System.Windows.Forms.HtmlElement> 仅公开所有元素共有的属性，而不是仅适用于某些类型的元素的属性; `SRC` 是标记的预定义特性 `IMG` ，例如，而不是标记的特性 `DIV` 。 使用 <xref:System.Windows.Forms.HtmlElement.GetAttribute%2A> 和 <xref:System.Windows.Forms.HtmlElement.SetAttribute%2A> 操作在托管文档对象模型 (DOM) 上未公开的属性。  
  
 如果不是 `attributeName` 元素上已定义的属性， <xref:System.Windows.Forms.HtmlElement.SetAttribute%2A> 将在元素上将其定义为新属性。  
  
 <xref:System.Windows.Forms.HtmlElement.GetAttribute%2A> 和 <xref:System.Windows.Forms.HtmlElement.SetAttribute%2A> 不区分大小写。  
  
 若要 `class` 在上设置属性 <xref:System.Windows.Forms.HtmlElement> ，必须在将 `className` 第一个参数指定为时，引用属性 <xref:System.Windows.Forms.HtmlElement.SetAttribute%2A>  
  
   
  
## Examples  
 下面的代码示例 `IMG` 使用 <xref:System.Windows.Forms.HtmlElement.SetAttribute%2A> 设置图像的属性，将新元素添加到当前文档中 `SRC` 。  
  
 [!code-csharp[System.Windows.Forms.HtmlElement#13](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlElement/CS/Form1.cs#13)]
 [!code-vb[System.Windows.Forms.HtmlElement#13](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlElement/VB/Form1.vb#13)]  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://developer.mozilla.org/en-us/docs/web/api/element/setattribute">setAttribute 方法</related>
      </Docs>
    </Member>
    <Member MemberName="Style">
      <MemberSignature Language="C#" Value="public string Style { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Style" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlElement.Style" />
      <MemberSignature Language="VB.NET" Value="Public Property Style As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Style { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Style : string with get, set" Usage="System.Windows.Forms.HtmlElement.Style" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置当前元素的以分号分隔的样式列表。</summary>
        <value>包含元素的所有样式的字符串。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 HTML 文档对象模型 (DOM) 使用 World Wide Web Consortiums 级联样式表规范中定义的样式来控制元素的显示。 属性中的样式 <xref:System.Windows.Forms.HtmlElement.Style%2A> 采用冒号分隔的名称-值对的形式，每个对用分号分隔，如下所示：  
  
 `style-name1:value1;...;[style-nameN:valueN;]`  
  
 若要将元素的字体设置 `DIV` 为14磅的新罗马粗体，可以分配以下字符串：  
  
 `font-face:Times New Roman;font-size:14px;font-weight:bold;`  
  
 有关 HTML DOM 中所有可用样式的完整列表，请参阅 [STYLE 特性](https://developer.mozilla.org/en-us/docs/web/html/global_attributes/style)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TabIndex">
      <MemberSignature Language="C#" Value="public short TabIndex { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int16 TabIndex" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlElement.TabIndex" />
      <MemberSignature Language="VB.NET" Value="Public Property TabIndex As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property short TabIndex { short get(); void set(short value); };" />
      <MemberSignature Language="F#" Value="member this.TabIndex : int16 with get, set" Usage="System.Windows.Forms.HtmlElement.TabIndex" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 Tab 键顺序中此元素的位置。</summary>
        <value>Tab 键顺序中此元素的数字索引。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlElement.TabIndex%2A> 确定当用户按 TAB 键时，下一个 HTML 文档中的元素将接收焦点。 默认情况下，tab 键顺序中包含的元素只有 `INPUT` 元素、 `SELECT` 控件和其 `contentEditable` 属性设置为的任何元素 `true` 。 你可以通过将任何 HTML 元素包含在 tab 键顺序中（例如 `DIV` ），并将其显式分配给它 <xref:System.Windows.Forms.HtmlElement.TabIndex%2A> 。  
  
 <xref:System.Windows.Forms.HtmlElement.TabIndex%2A>范围从-32767 到32767的有效值。  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://developer.mozilla.org/en-us/docs/web/html/global_attributes/tabindex">tabIndex 属性</related>
      </Docs>
    </Member>
    <Member MemberName="TagName">
      <MemberSignature Language="C#" Value="public string TagName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TagName" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlElement.TagName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TagName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ TagName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TagName : string" Usage="System.Windows.Forms.HtmlElement.TagName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 HTML 标记的名称。</summary>
        <value>使用 HTML 标记创建此元素时使用的名称。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 HTML 文档对象模型中的许多元素都具有这些元素独有的特性、属性和方法;例如 `HREF` 元素上的特性 `A` 或 `Submit` 中的方法 `FORM` 。 <xref:System.Windows.Forms.HtmlElement.TagName%2A>当你具有可能任意类型的元素，并且需要执行特定于类型的操作时，请使用。  
  
   
  
## Examples  
 下面的代码示例将查找 `IMG` 文档中的所有标记，并使用 `TagName` 属性来测试是否为 `IMG` 指向另一页的超链接; 如果为，则代码将该 URL 分配给 `ALT` 标记的属性 `IMG` ，以便用户可以在图像上查看所用的位置。  
  
 [!code-csharp[System.Windows.Forms.HtmlElement#7](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlElement/CS/Form1.cs#7)]
 [!code-vb[System.Windows.Forms.HtmlElement#7](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlElement/VB/Form1.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.HtmlDocument.GetElementsByTagName(System.String)" />
        <related type="ExternalDocumentation" href="https://developer.mozilla.org/en-us/docs/web/api/element/tagname">tagName 属性</related>
      </Docs>
    </Member>
  </Members>
</Type>
