<Type Name="AntiXssEncoder" FullName="System.Web.Security.AntiXss.AntiXssEncoder">
  <Metadata><Meta Name="ms.openlocfilehash" Value="31e388abcbc5c78d78481fd53c9856e9dff9d05e" /><Meta Name="ms.sourcegitcommit" Value="c982ad9e10a242d90f1e631b5981570f9e5d9f34" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/10/2020" /><Meta Name="ms.locfileid" Value="89718225" /></Metadata><TypeSignature Language="C#" Value="public class AntiXssEncoder : System.Web.Util.HttpEncoder" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit AntiXssEncoder extends System.Web.Util.HttpEncoder" />
  <TypeSignature Language="DocId" Value="T:System.Web.Security.AntiXss.AntiXssEncoder" />
  <TypeSignature Language="VB.NET" Value="Public Class AntiXssEncoder&#xA;Inherits HttpEncoder" />
  <TypeSignature Language="C++ CLI" Value="public ref class AntiXssEncoder : System::Web::Util::HttpEncoder" />
  <TypeSignature Language="F#" Value="type AntiXssEncoder = class&#xA;    inherit HttpEncoder" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.Util.HttpEncoder</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>编码 HTML、XML、CSS 和 URL 使用的字符串。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以使用 <xref:System.Web.Security.AntiXss.AntiXssEncoder> 类重写 <xref:System.Web.Util.HttpEncoder> 默认情况下用于在类的方法（如、和）中对字符串进行编码和解码的类 <xref:System.Web.HttpUtility> <xref:System.Web.HttpServerUtility> <xref:System.Net.HttpResponseHeader> 。  
  
 在 <xref:System.Web.Security.AntiXss.AntiXssEncoder> 类中，在安全列表中找不到的所有字符都由 <xref:System.Web.Security.AntiXss.AntiXssEncoder.HtmlAttributeEncode%2A> 和方法进行编码 <xref:System.Web.Security.AntiXss.AntiXssEncoder.HtmlEncode%2A> 。  
  
 若要将 <xref:System.Web.Util.HttpEncoder> 类替换为 <xref:System.Web.Security.AntiXss.AntiXssEncoder> 类，请使用 `encoderType` Web.config 文件中的 httpRuntime 元素的特性注册它，如以下示例中所示：  
  
```  
<httpRuntime encoderType="System.Web.Security.AntiXss.AntiXssEncoder" />  
```  
  
 可在 <xref:System.Web.Security.AntiXss.AntiXssEncoder.HtmlAttributeEncode%2A> 、、 <xref:System.Web.Security.AntiXss.AntiXssEncoder.HtmlEncode%2A> <xref:System.Web.Security.AntiXss.AntiXssEncoder.XmlAttributeEncode%2A> 和方法的 "备注" 中找到不同编码方法的默认安全字符列表 <xref:System.Web.Security.AntiXss.AntiXssEncoder.XmlEncode%2A> 。 可以使用方法修改默认安全列表 <xref:System.Web.Security.AntiXss.AntiXssEncoder.MarkAsSafe%2A> 。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AntiXssEncoder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.AntiXss.AntiXssEncoder.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; AntiXssEncoder();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Web.Security.AntiXss.AntiXssEncoder" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CssEncode">
      <MemberSignature Language="C#" Value="public static string CssEncode (string input);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string CssEncode(string input) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.AntiXss.AntiXssEncoder.CssEncode(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CssEncode (input As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ CssEncode(System::String ^ input);" />
      <MemberSignature Language="F#" Value="static member CssEncode : string -&gt; string" Usage="System.Web.Security.AntiXss.AntiXssEncoder.CssEncode input" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">要编码的字符串。</param>
        <summary>为级联样式表（CSS）编码指定字符串。</summary>
        <returns>编码的字符串。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法对不安全列表中的所有字符进行编码。  
  
> [!NOTE]
>  向级联样式表添加引号之前，在生成的字符串周围 )  ( ""。  
  
 下表列出了默认的安全字符。 全部来自 [Unicode C0 控件和基本拉丁](https://www.unicode.org/charts/PDF/U0000.pdf) 字符范围。
  
|字符|说明|  
|--------------------|-----------------|  
|A-Z|大写字母字符|  
|a-z|小写字母字符|  
|0-9|数字|  
  
 下表列出了输入和相应编码输出的示例。  
  
|||  
|-|-|  
|`alert('XSS Attack!');`|`alert\000028\000027XSS\000020Attack\000021\000027\000029\00003B`|  
|`user@contoso.com`|`user\000040contoso\00002Ecom`|  
|`Anti-Cross Site Scripting Namespace`|`Anti\00002DCross\000020Site\000020Scripting\000020Namespace`|  
  
 CSS 字符转义序列包含一个反斜杠字符 (\\) 后跟六个十六进制数字，它们表示 ISO 10646 标准中的一个字符代码。  (ISO 10646 标准有效地等于 Unicode。 ) 十六进制数字以外的任何字符都会终止转义序列。 如果转义序列后面的字符也是有效的十六进制数字，则它必须在转义序列中包含六个数字或使用空白字符来终止转义序列。 例如， `\000020` 表示空格。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HtmlAttributeEncode">
      <MemberSignature Language="C#" Value="protected internal override void HtmlAttributeEncode (string value, System.IO.TextWriter output);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void HtmlAttributeEncode(string value, class System.IO.TextWriter output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.AntiXss.AntiXssEncoder.HtmlAttributeEncode(System.String,System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub HtmlAttributeEncode (value As String, output As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void HtmlAttributeEncode(System::String ^ value, System::IO::TextWriter ^ output);" />
      <MemberSignature Language="F#" Value="override this.HtmlAttributeEncode : string * System.IO.TextWriter -&gt; unit" Usage="antiXssEncoder.HtmlAttributeEncode (value, output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="output" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="value">要编码的字符串。</param>
        <param name="output">用于输出字符串的文本编写器。</param>
        <summary>编码并输出用于 HTML 特性的指定字符串。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法对不安全列表中的所有字符进行编码。 使用表示法对字符进行编码 `&#DECIMAL;` 。  
  
> [!NOTE]
>  在将结果字符串添加到页面之前，请将双引号括 ( "" ) 或单引号 ( "" ) 。  
  
 下表列出了默认的安全字符。 除 "说明" 列中所述，所有来自 Unicode [C0 控件和基本拉丁](https://www.unicode.org/charts/PDF/U0000.pdf) 字符范围。  
  
|字符|说明|  
|--------------------|-----------------|  
|A-Z|大写字母拉丁字母字符|  
|a-z|小写拉丁字母字符|  
|0-9|数字|  
|\!|感叹号|  
|\#|数字符号、哈希|  
|\$|美元符号|  
|\%|百分号|  
|( )|括号|  
|\*|星号|  
|\+|正号|  
|\,|逗号|  
|\-|连字符，减|  
|\.|Period、句点、full stop|  
|\/|斜杠|  
|\:|冒号|  
|\;|分号|  
|\=|等号|  
|\?|问号|  
|\@|商业签署|  
|\[ \]|方括号|  
|\\ |反斜杠|  
|\^|西文插入记号|  
|\_|强调|  
|\`|重音符|  
|\{ \}|大括号、大括号|  
|\||竖线|  
|\~|波形符|  
|0x00A1 - 0x00AC|从 Unicode [C1 控件和拉丁语-1 补充](https://www.unicode.org/charts/PDF/U0080.pdf) 字符范围开始，0x00A1 (161 decimal) 和 0x00AC (172) decimal 之间的特殊字符。|  
|0x00AE - 0x00FF|从 Unicode [C1 控件和拉丁语-1 补充](https://www.unicode.org/charts/PDF/U0080.pdf) 字符范围开始，0x00AE (174 decimal) 和 0x00FF (255) decimal 之间的特殊字符。|  
|0x0100-0x017F|0x0100 (256 decimal) 与 0x017F (383 decimal) 之间的字符。  (Unicode [拉丁语扩展](https://www.unicode.org/charts/PDF/U0100.pdf) 的字符范围。 ) |
|0x0180 - 0x024F|0x0180 (384 decimal) 与 0x024F (591 decimal) 之间的字符。  (Unicode [拉丁语扩展 B](https://www.unicode.org/charts/PDF/U0180.pdf) 字符范围。 ) |  
|0x0250 - 0x02AF|0x0250 (592 decimal) 与 0x02AF (687 decimal) 之间的字符。  (Unicode [IPA extension](https://www.unicode.org/charts/PDF/U0250.pdf) 字符范围。 ) | 
|0x02B0 - 0x02FF|0x02B0 (688 decimal) 与 0x02FF (767 decimal) 之间的字符。  (Unicode [间距修饰符字母](https://www.unicode.org/charts/PDF/U02B0.pdf) 字符范围。 ) |
|0x0300 - 0x036F|0x0300 (768 decimal) 与 0x036F (879 decimal) 之间的字符。  (Unicode [合并变音符](https://www.unicode.org/charts/PDF/U0300.pdf) 字符范围。 ) |  
  
 下表列出了输入和相应编码输出的示例。  
  
|输入示例| 编码的输出|  
|-|-|  
|`alert('XSS Attack!');`|`alert(&#39;XSS&#32;Attack!&#39;);`|  
|`<script>alert('XSS Attack!');</script>`|`&lt;script&gt;alert(&#39;XSS Attack!&#39;);&lt;/script&gt;`|  
|`alert('XSSあAttack!');`|`alert(&#39;XSS&#12354;Attack!&#39;);`|  
|`user@contoso.com`|`user@contoso.com`|  
|`"Anti-Cross Site Scripting Namespace"`|`&quot;Anti-Cross&#32;Site&#32;Scripting&#32;Namespace&quot;`|  
  
 若要自定义安全列表，请调用 <xref:System.Web.Security.AntiXss.AntiXssEncoder.MarkAsSafe%2A> 方法。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="HtmlEncode">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>编码指定字符串作为 HTML 标记文本使用。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="HtmlEncode">
      <MemberSignature Language="C#" Value="public static string HtmlEncode (string input, bool useNamedEntities);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string HtmlEncode(string input, bool useNamedEntities) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.AntiXss.AntiXssEncoder.HtmlEncode(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function HtmlEncode (input As String, useNamedEntities As Boolean) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ HtmlEncode(System::String ^ input, bool useNamedEntities);" />
      <MemberSignature Language="F#" Value="static member HtmlEncode : string * bool -&gt; string" Usage="System.Web.Security.AntiXss.AntiXssEncoder.HtmlEncode (input, useNamedEntities)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="useNamedEntities" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="input">要编码的字符串。</param>
        <param name="useNamedEntities">如果为某些字符编码使用 HTML 4.0 的命名实体，则为 <see langword="true" /> ；如果仅使用 <c>&amp;#DECIMAL;</c> 表示法，则为 <see langword="false" />。</param>
        <summary>编码指定字符串作为 HTML 标记文本使用，且可选择性地指定是否使用 HTML 4.0 命名的实体。</summary>
        <returns>编码的字符串。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法对不安全列表中的所有字符进行编码。 使用表示法对字符进行编码 `&#DECIMAL;` 。  
  
> [!NOTE]
>  在将结果字符串添加到页面之前，请将双引号括 ( "" ) 或单引号 ( "" ) 。  
  
 下表列出了默认的安全字符。 除 "说明" 列中所述，所有字符均来自 Unicode [C0 控件和基本拉丁](https://www.unicode.org/charts/PDF/U0000.pdf) 字符范围。
  
|字符|说明|  
|--------------------|-----------------|  
|A-Z|大写字母拉丁字母字符|  
|a-z|小写拉丁字母字符|  
|0-9|数字|  
| (空间) |Space|  
|!|感叹号|  
|#|数字符号、哈希|  
|$|美元符号|  
|%|百分号|  
|( )|括号|  
|*|星号|  
|+|正号|  
|,|逗号|  
|-|连字符，减|  
|。|Period、句点、full stop|  
|/|斜杠|  
|:|冒号|  
|;|分号|  
|=|等号|  
|?|问号|  
|@|商业|  
|[ ]|方括号|  
|&#92;|反斜杠|  
|^|西文插入记号|  
|_|强调|  
|\`|重音符|  
|{ }|大括号、大括号|  
|&#124;|竖线|  
|~|波形符|  
|0x00A1 - 0x00AC|从 Unicode [C1 控件和拉丁语-1 补充](https://www.unicode.org/charts/PDF/U0080.pdf) 字符范围开始，0x00A1 (161 decimal) 和 0x00AC (172) decimal 之间的特殊字符。 当为时，将对此范围内的字符进行编码 `useNamedEntities` `true` 。|  
|0x00AE - 0x00FF|从 Unicode [C1 控件和拉丁语-1 补充](https://www.unicode.org/charts/PDF/U0080.pdf) 字符范围开始，0x00AE (174 decimal) 和 0x00FF (255) decimal 之间的特殊字符。 当为时，将对此范围内的字符进行编码 `useNamedEntities` `true` 。|  
|0x0100-0x017F|0x0100 (256 decimal) 与 0x017F (383 decimal) 之间的字符。  (Unicode [拉丁语扩展](https://www.unicode.org/charts/PDF/U0100.pdf) 的字符范围。 ) |
|0x0180 - 0x024F|0x0180 (384 decimal) 与 0x024F (591 decimal) 之间的字符。  (Unicode [拉丁语扩展 B](https://www.unicode.org/charts/PDF/U0180.pdf) 字符范围。 ) |  
|0x0250 - 0x02AF|0x0250 (592 decimal) 与 0x02AF (687 decimal) 之间的字符。  (Unicode [IPA extension](https://www.unicode.org/charts/PDF/U0250.pdf) 字符范围。 ) |  
|0x02B0 - 0x02FF|0x02B0 (688 decimal) 与 0x02FF (767 decimal) 之间的字符。  (Unicode [间距修饰符字母](https://www.unicode.org/charts/PDF/U02B0.pdf) 字符范围。 ) |
|0x0300 - 0x036F|0x0300 (768 decimal) 与 0x036F (879 decimal) 之间的字符。  (Unicode [合并变音符](https://www.unicode.org/charts/PDF/U0300.pdf) 字符范围。 ) | 
  
 下表列出了输入和相应编码输出的示例。  
  
|||  
|-|-|  
|`alert('XSS Attack!');`|`alert(&#39;XSS&#32;Attack!&#39;);`|  
|`<script>alert('XSS Attack!');</script>`|`&lt;script&gt;alert(&#39;XSS Attack!&#39;);&lt;/script&gt;`|  
|`alert('XSSあAttack!');`|`alert(&#39;XSS&#12354;Attack!&#39;);`|  
|`user@contoso.com`|`user@contoso.com`|  
|`"Anti-Cross Site Scripting Namespace"`|`&quot;Anti-Cross&#32;Site&#32;Scripting&#32;Namespace&quot;`|  
  
 若要自定义安全列表，请调用 <xref:System.Web.Security.AntiXss.AntiXssEncoder.MarkAsSafe%2A> 方法。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HtmlEncode">
      <MemberSignature Language="C#" Value="protected internal override void HtmlEncode (string value, System.IO.TextWriter output);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void HtmlEncode(string value, class System.IO.TextWriter output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.AntiXss.AntiXssEncoder.HtmlEncode(System.String,System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub HtmlEncode (value As String, output As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void HtmlEncode(System::String ^ value, System::IO::TextWriter ^ output);" />
      <MemberSignature Language="F#" Value="override this.HtmlEncode : string * System.IO.TextWriter -&gt; unit" Usage="antiXssEncoder.HtmlEncode (value, output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="output" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="value">要编码的字符串。</param>
        <param name="output">用于输出字符串的文本编写器。</param>
        <summary>编码指定字符串作为 HTML 标记文本使用，且通过指定文本读写器输出字符串。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法对不安全列表中的所有字符进行编码。 使用表示法对字符进行编码 `&#DECIMAL;` 。  
  
> [!NOTE]
>  在将结果字符串添加到页面之前，请将双引号括 ( "" ) 或单引号 ( "" ) 。  
  
 下表列出了默认的安全字符。 除 "说明" 列中所述，所有字符均来自 Unicode [C0 控件和基本拉丁](https://www.unicode.org/charts/PDF/U0000.pdf) 字符范围。
  
|字符|说明|  
|--------------------|-----------------|  
|A-Z|大写字母拉丁字母字符|  
|a-z|小写拉丁字母字符|  
|0-9|数字|  
| (空间) |Space|  
|!|感叹号|  
|#|数字符号、哈希|  
|$|美元符号|  
|%|百分号|  
|( )|括号|  
|*|星号|  
|+|正号|  
|,|逗号|  
|-|连字符，减|  
|。|Period、句点、full stop|  
|/|斜杠|  
|:|冒号|  
|;|分号|  
|=|等号|  
|?|问号|  
|@|商业|  
|[ ]|方括号|  
|&#92;|反斜杠|  
|^|西文插入记号|  
|_|强调|  
|\`|重音符|  
|{ }|大括号、大括号|  
|&#124;|竖线|  
|~|波形符|  
|0x00A1 - 0x00AC|从 Unicode [C1 控件和拉丁语-1 补充](https://www.unicode.org/charts/PDF/U0080.pdf) 字符范围开始，0x00A1 (161 decimal) 和 0x00AC (172) decimal 之间的特殊字符。 当为时，将对此范围内的字符进行编码 `useNamedEntities` `true` 。|  
|0x00AE - 0x00FF|从 Unicode [C1 控件和拉丁语-1 补充](https://www.unicode.org/charts/PDF/U0080.pdf) 字符范围开始，0x00AE (174 decimal) 和 0x00FF (255) decimal 之间的特殊字符。 当为时，将对此范围内的字符进行编码 `useNamedEntities` `true` 。|  
|0x0100-0x017F|0x0100 (256 decimal) 与 0x017F (383 decimal) 之间的字符。  (Unicode [拉丁语扩展](https://www.unicode.org/charts/PDF/U0100.pdf) 的字符范围。 ) |
|0x0180 - 0x024F|0x0180 (384 decimal) 与 0x024F (591 decimal) 之间的字符。  (Unicode [拉丁语扩展 B](https://www.unicode.org/charts/PDF/U0180.pdf) 字符范围。 ) | 
|0x0250 - 0x02AF|0x0250 (592 decimal) 与 0x02AF (687 decimal) 之间的字符。  (Unicode [IPA extension](https://www.unicode.org/charts/PDF/U0250.pdf) 字符范围。 ) | 
|0x02B0 - 0x02FF|0x02B0 (688 decimal) 与 0x02FF (767 decimal) 之间的字符。  (Unicode [间距修饰符字母](https://www.unicode.org/charts/PDF/U02B0.pdf) 字符范围。 ) |
|0x0300 - 0x036F|0x0300 (768 decimal) 与 0x036F (879 decimal) 之间的字符。  (Unicode [合并变音符](https://www.unicode.org/charts/PDF/U0300.pdf) 字符范围。 ) | 
  
 下表列出了输入和相应编码输出的示例。  
  
|||  
|-|-|  
|`alert('XSS Attack!');`|`alert(&#39;XSS&#32;Attack!&#39;);`|  
|`<script>alert('XSS Attack!');</script>`|`&lt;script&gt;alert(&#39;XSS Attack!&#39;);&lt;/script&gt;`|  
|`alert('XSSあAttack!');`|`alert(&#39;XSS&#12354;Attack!&#39;);`|  
|`user@contoso.com`|`user@contoso.com`|  
|`"Anti-Cross Site Scripting Namespace"`|`&quot;Anti-Cross&#32;Site&#32;Scripting&#32;Namespace&quot;`|  
  
 若要自定义安全列表，请调用 <xref:System.Web.Security.AntiXss.AntiXssEncoder.MarkAsSafe%2A> 方法。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="HtmlFormUrlEncode">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>为 MIME 类型为 "application/x-www-form-urlencoded" 的窗体提交编码指定字符串。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="HtmlFormUrlEncode">
      <MemberSignature Language="C#" Value="public static string HtmlFormUrlEncode (string input);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string HtmlFormUrlEncode(string input) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.AntiXss.AntiXssEncoder.HtmlFormUrlEncode(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function HtmlFormUrlEncode (input As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ HtmlFormUrlEncode(System::String ^ input);" />
      <MemberSignature Language="F#" Value="static member HtmlFormUrlEncode : string -&gt; string" Usage="System.Web.Security.AntiXss.AntiXssEncoder.HtmlFormUrlEncode input" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">要编码的字符串。</param>
        <summary>为 MIME 类型为 "application/x-www-form-urlencoded" 的窗体提交编码指定字符串。</summary>
        <returns>编码的字符串。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法对不安全列表中的所有字符进行编码。 使用表示法对字符进行编码 `%SINGLE_BYTE_HEX` 。 
  
> [!NOTE]
>  在将结果字符串添加到页面之前，请将双引号括 ( "" ) 或单引号 ( "" ) 。   

下表列出了默认的安全字符。 所有字符均来自 Unicode [C0 控件和基本拉丁](https://www.unicode.org/charts/PDF/U0000.pdf) 字符范围。 
    
|Unicode 代码图表|字符|说明|  
|------------------------|--------------------|-----------------|  
|A-Z|大写字母字符|  
|a-z|小写字母字符|  
|0-9|数字|  
|-|连字符，减|  
|。|Period、句点、full stop|  
|_|强调|  
|~|波形符|  
  
 下表列出了输入和相应编码输出的示例。  
  
|||  
|-|-|  
|`alert('XSS Attack!');`|`alert%28%27XSS+Attack%21%27%29%3b`|  
|`<script>alert('XSS Attack!');</script>`|`%3cscript%3ealert%28%27XSS+Attack%21%27%29%3b%3c%2fscript%3e`|  
|`alert('XSSあAttack!');`|`alert%28%27XSS%e3%81%82Attack%21%27%29%3b`|  
|`user@contoso.com`|`user@contoso.com`|  
|`Anti-Cross Site Scripting Namespace`|`Anti-Cross+Site+Scripting+Namespace`|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HtmlFormUrlEncode">
      <MemberSignature Language="C#" Value="public static string HtmlFormUrlEncode (string input, int codePage);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string HtmlFormUrlEncode(string input, int32 codePage) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.AntiXss.AntiXssEncoder.HtmlFormUrlEncode(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function HtmlFormUrlEncode (input As String, codePage As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ HtmlFormUrlEncode(System::String ^ input, int codePage);" />
      <MemberSignature Language="F#" Value="static member HtmlFormUrlEncode : string * int -&gt; string" Usage="System.Web.Security.AntiXss.AntiXssEncoder.HtmlFormUrlEncode (input, codePage)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="codePage" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="input">要编码的字符串。</param>
        <param name="codePage">要用于编码 <paramref name="input" /> 字符串的代码页。</param>
        <summary>通过使用指定代码页，为 MIME 类型为 "application/x-www-form-urlencoded" 的窗体提交编码指定字符串。</summary>
        <returns>编码的字符串。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法对不安全列表中的所有字符进行编码。 使用表示法对字符进行编码 `%SINGLE_BYTE_HEX` 。  
  
> [!NOTE]
>  在将结果字符串添加到页面之前，请将双引号括 ( "" ) 或单引号 ( "" ) 。  
  
 下表列出了默认的安全字符。 所有字符均来自 Unicode [C0 控件和基本拉丁](https://www.unicode.org/charts/PDF/U0000.pdf) 字符范围。 
  
|字符|说明|  
|--------------------|-----------------|  
|A-Z|大写字母字符|  
|a-z|小写字母字符|  
|0-9|数字|  
|-|连字符，减|  
|。|Period、句点、full stop|  
|_|强调|  
|~|波形符|  
  
 下表列出了输入和相应编码输出的示例。  
  
|||  
|-|-|  
|`alert('XSS Attack!');`|`alert%28%27XSS+Attack%21%27%29%3b`|  
|`<script>alert('XSS Attack!');</script>`|`%3cscript%3ealert%28%27XSS+Attack%21%27%29%3b%3c%2fscript%3e`|  
|`alert('XSSあAttack!');`|`alert%28%27XSS%e3%81%82Attack%21%27%29%3b`|  
|`user@contoso.com`|`user%40contoso.com`|  
|`Anti-Cross Site Scripting Namespace`|`Anti-Cross+Site+Scripting+Namespace`|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HtmlFormUrlEncode">
      <MemberSignature Language="C#" Value="public static string HtmlFormUrlEncode (string input, System.Text.Encoding inputEncoding);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string HtmlFormUrlEncode(string input, class System.Text.Encoding inputEncoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.AntiXss.AntiXssEncoder.HtmlFormUrlEncode(System.String,System.Text.Encoding)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function HtmlFormUrlEncode (input As String, inputEncoding As Encoding) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ HtmlFormUrlEncode(System::String ^ input, System::Text::Encoding ^ inputEncoding);" />
      <MemberSignature Language="F#" Value="static member HtmlFormUrlEncode : string * System.Text.Encoding -&gt; string" Usage="System.Web.Security.AntiXss.AntiXssEncoder.HtmlFormUrlEncode (input, inputEncoding)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="inputEncoding" Type="System.Text.Encoding" />
      </Parameters>
      <Docs>
        <param name="input">要编码的字符串。</param>
        <param name="inputEncoding">输入编码类型。</param>
        <summary>通过使用指定字符编码类型，为 MIME 类型为 "application/x-www-form-urlencoded" 的窗体提交编码指定字符串。</summary>
        <returns>编码的字符串。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法对不安全列表中的所有字符进行编码。 使用表示法对字符进行编码 `%SINGLE_BYTE_HEX` 。  
  
> [!NOTE]
>  在将结果字符串添加到页面之前，请将双引号括 ( "" ) 或单引号 ( "" ) 。  
  
 下表列出了默认的安全字符。 所有字符均来自 Unicode [C0 控件和基本拉丁](https://www.unicode.org/charts/PDF/U0000.pdf) 字符范围。 
  
|字符|说明|  
|--------------------|-----------------|  
|A-Z|大写字母字符|  
|a-z|小写字母字符|  
|0-9|数字|  
|-|连字符，减|  
|。|Period、句点、full stop|  
|_|强调|  
|~|波形符|  
  
 下表列出了输入和相应编码输出的示例。  
  
|||  
|-|-|  
|`alert('XSS Attack!');`|`alert%28%27XSS+Attack%21%27%29%3b`|  
|`<script>alert('XSS Attack!');</script>`|`%3cscript%3ealert%28%27XSS+Attack%21%27%29%3b%3c%2fscript%3e`|  
|`alert('XSSあAttack!');`|`alert%28%27XSS%e3%81%82Attack%21%27%29%3b`|  
|`user@contoso.com`|`user%40contoso.com`|  
|`Anti-Cross Site Scripting Namespace`|`Anti-Cross+Site+Scripting+Namespace`|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MarkAsSafe">
      <MemberSignature Language="C#" Value="public static void MarkAsSafe (System.Web.Security.AntiXss.LowerCodeCharts lowerCodeCharts, System.Web.Security.AntiXss.LowerMidCodeCharts lowerMidCodeCharts, System.Web.Security.AntiXss.MidCodeCharts midCodeCharts, System.Web.Security.AntiXss.UpperMidCodeCharts upperMidCodeCharts, System.Web.Security.AntiXss.UpperCodeCharts upperCodeCharts);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void MarkAsSafe(valuetype System.Web.Security.AntiXss.LowerCodeCharts lowerCodeCharts, valuetype System.Web.Security.AntiXss.LowerMidCodeCharts lowerMidCodeCharts, valuetype System.Web.Security.AntiXss.MidCodeCharts midCodeCharts, valuetype System.Web.Security.AntiXss.UpperMidCodeCharts upperMidCodeCharts, valuetype System.Web.Security.AntiXss.UpperCodeCharts upperCodeCharts) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.AntiXss.AntiXssEncoder.MarkAsSafe(System.Web.Security.AntiXss.LowerCodeCharts,System.Web.Security.AntiXss.LowerMidCodeCharts,System.Web.Security.AntiXss.MidCodeCharts,System.Web.Security.AntiXss.UpperMidCodeCharts,System.Web.Security.AntiXss.UpperCodeCharts)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub MarkAsSafe (lowerCodeCharts As LowerCodeCharts, lowerMidCodeCharts As LowerMidCodeCharts, midCodeCharts As MidCodeCharts, upperMidCodeCharts As UpperMidCodeCharts, upperCodeCharts As UpperCodeCharts)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void MarkAsSafe(System::Web::Security::AntiXss::LowerCodeCharts lowerCodeCharts, System::Web::Security::AntiXss::LowerMidCodeCharts lowerMidCodeCharts, System::Web::Security::AntiXss::MidCodeCharts midCodeCharts, System::Web::Security::AntiXss::UpperMidCodeCharts upperMidCodeCharts, System::Web::Security::AntiXss::UpperCodeCharts upperCodeCharts);" />
      <MemberSignature Language="F#" Value="static member MarkAsSafe : System.Web.Security.AntiXss.LowerCodeCharts * System.Web.Security.AntiXss.LowerMidCodeCharts * System.Web.Security.AntiXss.MidCodeCharts * System.Web.Security.AntiXss.UpperMidCodeCharts * System.Web.Security.AntiXss.UpperCodeCharts -&gt; unit" Usage="System.Web.Security.AntiXss.AntiXssEncoder.MarkAsSafe (lowerCodeCharts, lowerMidCodeCharts, midCodeCharts, upperMidCodeCharts, upperCodeCharts)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lowerCodeCharts" Type="System.Web.Security.AntiXss.LowerCodeCharts" />
        <Parameter Name="lowerMidCodeCharts" Type="System.Web.Security.AntiXss.LowerMidCodeCharts" />
        <Parameter Name="midCodeCharts" Type="System.Web.Security.AntiXss.MidCodeCharts" />
        <Parameter Name="upperMidCodeCharts" Type="System.Web.Security.AntiXss.UpperMidCodeCharts" />
        <Parameter Name="upperCodeCharts" Type="System.Web.Security.AntiXss.UpperCodeCharts" />
      </Parameters>
      <Docs>
        <param name="lowerCodeCharts">要标记为安全的下方代码图表的组合。</param>
        <param name="lowerMidCodeCharts">要标记为安全的中部下方代码图表的组合。</param>
        <param name="midCodeCharts">要标记为安全的中部代码图表的组合。</param>
        <param name="upperMidCodeCharts">要标记为安全的中部上方代码图表的组合。</param>
        <param name="upperCodeCharts">要标记为安全的上方代码图表的组合。</param>
        <summary>标记指定的 Unicode 代码字符作为安全标记。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 安全列表将影响所有 HTML XML、CSS 和 URL 编码方法。  
  
 除了一些例外情况，Unicode 代码图表并不直接对应于书面语言。 若要添加对特定语言或一组语言的支持，通常需要将多个代码图表标记为安全。  
  
 若要添加日语支持，同时继续允许使用英语，请使用以下语法：  
  
```  
  
MarkAsSafe(  
            LowerCodeCharts.Default,  
            LowerMidCodeCharts.HangulJamo,  
            MidCodeCharts.None,  
            UpperMidCodeCharts.CjkRadicalsSupplement |   
            UpperMidCodeCharts.CjkSymbolsAndPunctuation |   
            UpperMidCodeCharts.Hiragana |   
            UpperMidCodeCharts.Katakana |   
            UpperMidCodeCharts.KatakanaPhoneticExtensions |   
            UpperMidCodeCharts.LatinExtendedD |  
            UpperMidCodeCharts.CjkUnifiedIdeographs,  
            UpperCodeCharts.None);  
```  
  
> [!NOTE]
>  <xref:System.Web.Security.AntiXss.AntiXssEncoder.MarkAsSafe%2A>必须在 global.asax 文件的方法中调用方法 `Application_Start` 。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">该 <see cref="M:System.Web.Security.AntiXss.AntiXssEncoder.MarkAsSafe(System.Web.Security.AntiXss.LowerCodeCharts,System.Web.Security.AntiXss.LowerMidCodeCharts,System.Web.Security.AntiXss.MidCodeCharts,System.Web.Security.AntiXss.UpperMidCodeCharts,System.Web.Security.AntiXss.UpperCodeCharts)" /> 方法在 Global.asax 文件中的 <see langword="Application_Start" /> 方法之外被调用。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="UrlEncode">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>编码用于 URL 的字符串和字节数组。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="UrlEncode">
      <MemberSignature Language="C#" Value="public static string UrlEncode (string input);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string UrlEncode(string input) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.AntiXss.AntiXssEncoder.UrlEncode(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function UrlEncode (input As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ UrlEncode(System::String ^ input);" />
      <MemberSignature Language="F#" Value="static member UrlEncode : string -&gt; string" Usage="System.Web.Security.AntiXss.AntiXssEncoder.UrlEncode input" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">要编码的字符串。</param>
        <summary>为 URL 编码指定字符串。</summary>
        <returns>编码的字符串。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法对不安全列表中的所有字符进行编码。 使用表示法对字符进行编码 `%SINGLE_BYTE_HEX` 。  
  
 下表列出了默认的安全字符。 所有字符均来自 Unicode [C0 控件和基本拉丁](https://www.unicode.org/charts/PDF/U0000.pdf) 字符范围。 
    
  
|字符|说明|  
|--------------------|-----------------|  
|A-Z|大写字母字符|  
|a-z|小写字母字符|  
|0-9|数字|  
|-|连字符，减|  
|。|Period、句点、full stop|  
|_|强调|  
|~|波形符|  
  
 下表列出了输入和相应编码输出的示例。  
  
|||  
|-|-|  
|`alert('XSS Attack!');`|`alert%28%27XSS%20Attack%21%27%29%3b`|  
|`<script>alert('XSS Attack!');</script>`|`%3cscript%3ealert%28%27XSS%20Attack%21%27%29%3b%3c%2fscript%3e`|  
|`alert('XSSあAttack!');`|`alert%28%27XSS%e3%81%82Attack%21%27%29%3b`|  
|`user@contoso.com`|`user%40contoso.com`|  
|`"Anti-Cross Site Scripting Namespace"`|`%22Anti-Cross%20Site%20Scripting%20Namespace%22`|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UrlEncode">
      <MemberSignature Language="C#" Value="public static string UrlEncode (string input, int codePage);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string UrlEncode(string input, int32 codePage) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.AntiXss.AntiXssEncoder.UrlEncode(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function UrlEncode (input As String, codePage As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ UrlEncode(System::String ^ input, int codePage);" />
      <MemberSignature Language="F#" Value="static member UrlEncode : string * int -&gt; string" Usage="System.Web.Security.AntiXss.AntiXssEncoder.UrlEncode (input, codePage)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="codePage" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="input">要编码的字符串。</param>
        <param name="codePage">要用于编码 <paramref name="input" /> 字符串的代码页。</param>
        <summary>通过使用指定代码页为 URL 编码指定字符。</summary>
        <returns>编码的字符串。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法对不安全列表中的所有字符进行编码。 使用表示法对字符进行编码 `%SINGLE_BYTE_HEX` 。  
  
 下表列出了默认的安全字符。 所有字符均来自 Unicode [C0 控件和基本拉丁](https://www.unicode.org/charts/PDF/U0000.pdf) 字符范围。 
    
  
|Unicode 代码图表|字符|说明|  
|------------------------|--------------------|-----------------|  
|A-Z|大写字母字符|  
|a-z|小写字母字符|  
|0-9|数字|  
|-|连字符，减|  
|。|Period、句点、full stop|  
|_|强调|  
|~|波形符|  
  
 下表列出了输入和相应编码输出的示例。  
  
|||  
|-|-|  
|`alert('XSS Attack!');`|`alert%28%27XSS%20Attack%21%27%29%3b`|  
|`<script>alert('XSS Attack!');</script>`|`%3cscript%3ealert%28%27XSS%20Attack%21%27%29%3b%3c%2fscript%3e`|  
|`alert('XSSあAttack!');`|`alert%28%27XSS%e3%81%82Attack%21%27%29%3b`|  
|`user@contoso.com`|`user%40contoso.com`|  
|`"Anti-Cross Site Scripting Namespace"`|`%22Anti-Cross%20Site%20Scripting%20Namespace%22`|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UrlEncode">
      <MemberSignature Language="C#" Value="public static string UrlEncode (string input, System.Text.Encoding inputEncoding);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string UrlEncode(string input, class System.Text.Encoding inputEncoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.AntiXss.AntiXssEncoder.UrlEncode(System.String,System.Text.Encoding)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function UrlEncode (input As String, inputEncoding As Encoding) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ UrlEncode(System::String ^ input, System::Text::Encoding ^ inputEncoding);" />
      <MemberSignature Language="F#" Value="static member UrlEncode : string * System.Text.Encoding -&gt; string" Usage="System.Web.Security.AntiXss.AntiXssEncoder.UrlEncode (input, inputEncoding)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="inputEncoding" Type="System.Text.Encoding" />
      </Parameters>
      <Docs>
        <param name="input">要编码的字符串。</param>
        <param name="inputEncoding">输入编码类型。</param>
        <summary>通过使用指定字符编码类型为 URL 编码指定字符。</summary>
        <returns>编码的字符串。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法对不安全列表中的所有字符进行编码。 使用表示法对字符进行编码 `%SINGLE_BYTE_HEX` 。  
  
 下表列出了默认的安全字符。 所有字符均来自 Unicode [C0 控件和基本拉丁](https://www.unicode.org/charts/PDF/U0000.pdf) 字符范围。 
    
  
|字符|说明|  
|--------------------|-----------------|  
|A-Z|大写字母字符|  
|a-z|小写字母字符|  
|0-9|数字|  
|-|连字符，减|  
|。|Period、句点、full stop|  
|_|强调|  
|~|波形符|  
  
 下表列出了输入和相应编码输出的示例。  
  
|||  
|-|-|  
|`alert('XSS Attack!');`|`alert%28%27XSS%20Attack%21%27%29%3b`|  
|`<script>alert('XSS Attack!');</script>`|`%3cscript%3ealert%28%27XSS%20Attack%21%27%29%3b%3c%2fscript%3e`|  
|`alert('XSSあAttack!');`|`alert%28%27XSS%e3%81%82Attack%21%27%29%3b`|  
|`user@contoso.com`|`user%40contoso.com`|  
|`"Anti-Cross Site Scripting Namespace"`|`%22Anti-Cross%20Site%20Scripting%20Namespace%22`|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UrlEncode">
      <MemberSignature Language="C#" Value="protected internal override byte[] UrlEncode (byte[] bytes, int offset, int count);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance unsigned int8[] UrlEncode(unsigned int8[] bytes, int32 offset, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.AntiXss.AntiXssEncoder.UrlEncode(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Function UrlEncode (bytes As Byte(), offset As Integer, count As Integer) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override cli::array &lt;System::Byte&gt; ^ UrlEncode(cli::array &lt;System::Byte&gt; ^ bytes, int offset, int count);" />
      <MemberSignature Language="F#" Value="override this.UrlEncode : byte[] * int * int -&gt; byte[]" Usage="antiXssEncoder.UrlEncode (bytes, offset, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes">要编码的字节数组。</param>
        <param name="offset">要解码的第一个字节的索引。</param>
        <param name="count">要编码的字节数。</param>
        <summary>编码用于 URL 的指定字节数组，从字节数组指定的偏移开始，并解码指定字节数。</summary>
        <returns>这些编码的字节数组。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法对不安全列表中的所有字符进行编码。 使用表示法对字符进行编码 `%SINGLE_BYTE_HEX` 。  
  
 下表列出了默认的安全字符。 所有字符均来自 Unicode [C0 控件和基本拉丁](https://www.unicode.org/charts/PDF/U0000.pdf) 字符范围。 
   
  
|字符|说明|  
|--------------------|-----------------|  
|A-Z|大写字母字符|  
|a-z|小写字母字符|  
|0-9|数字|  
|-|连字符，减|  
|。|Period、句点、full stop|  
|_|强调|  
|~|波形符|  
  
 下表列出了输入和相应编码输出的示例。  
  
|||  
|-|-|  
|`alert('XSS Attack!');`|`alert%28%27XSS%20Attack%21%27%29%3b`|  
|`<script>alert('XSS Attack!');</script>`|`%3cscript%3ealert%28%27XSS%20Attack%21%27%29%3b%3c%2fscript%3e`|  
|`alert('XSSあAttack!');`|`alert%28%27XSS%e3%81%82Attack%21%27%29%3b`|  
|`user@contoso.com`|`user%40contoso.com`|  
|`"Anti-Cross Site Scripting Namespace"`|`%22Anti-Cross%20Site%20Scripting%20Namespace%22`|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UrlPathEncode">
      <MemberSignature Language="C#" Value="protected internal override string UrlPathEncode (string value);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance string UrlPathEncode(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.AntiXss.AntiXssEncoder.UrlPathEncode(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Function UrlPathEncode (value As String) As String" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override System::String ^ UrlPathEncode(System::String ^ value);" />
      <MemberSignature Language="F#" Value="override this.UrlPathEncode : string -&gt; string" Usage="antiXssEncoder.UrlPathEncode value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">要编码的字符串。</param>
        <summary>编码用于 URL 的路径字符串。</summary>
        <returns>包含编码路径的 URL。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
此方法对不安全列表中的所有字符进行编码。 使用表示法对字符进行编码 `%SINGLE_BYTE_HEX` 。  

下表列出了默认的安全字符。 所有字符均来自 Unicode [C0 控件和基本拉丁](https://www.unicode.org/charts/PDF/U0000.pdf) 字符范围。 
    
|字符|说明|  
|--------------------|-----------------|  
|A-Z|大写字母字符|  
|a-z|小写字母字符|  
|0-9|数字|  
|#|数字符号、哈希|  
|%|百分号|  
|( )|括号|  
|-|连字符，减|  
|。|Period、句点、full stop|  
|/|斜杠|  
|&#92;|反斜杠|  
|_|强调|  
|{ }|大括号、大括号|  
|&#124;|竖线|  
|~|波形符|  
  
 下表列出了输入和相应编码输出的示例。  
  
|||  
|-|-|  
|`http://www.contoso.com:8080/<en-us>/[page].htm?v={value1}#x=[amount]`|`http://www.contoso.com:8080/%3cen-us%3e/%5bpage%5d.htm?v={value1}#x=[amount]`|  
|`alert('XSS Attack!');`|`alert(%27XSS%20Attack%21%27)%3b`|  
|`<script>alert('XSS Attack!');</script>`|`%3cscript%3ealert(%27XSS%20Attack%21%27)%3b%3c/script%3e`|  
|`alert('XSSあAttack!');`|`alert(%27XSS%e3%81%82Attack%21%27)%3b`|  
|`user@contoso.com`|`user%40contoso.com`|  
|`"Anti-Cross Site Scripting Namespace"`|`%22Anti-Cross%20Site%20Scripting%20Namespace%22`|  
  
 此方法仅对 URL 的路径进行编码。 此方法不会对方案进行编码 (例如， `http:` 、 `ftp:` 或 `file:`) 、颁发机构 (例如 `www.northwind.com` 或 `www.contoso.com:8080`) 或查询或片段 (例如 `?v=s978dfs9#x=103`) 。 如果字符串中没有方案或授权，则假定该字符串是相对路径，并且已对该路径进行编码。 在以下 URL 中，只对子字符串 `/default.htm` 进行编码：  
  
 `http://www.contoso.com:8080/default.htm?v=s978dfs9#x=103`  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlAttributeEncode">
      <MemberSignature Language="C#" Value="public static string XmlAttributeEncode (string input);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string XmlAttributeEncode(string input) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.AntiXss.AntiXssEncoder.XmlAttributeEncode(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlAttributeEncode (input As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ XmlAttributeEncode(System::String ^ input);" />
      <MemberSignature Language="F#" Value="static member XmlAttributeEncode : string -&gt; string" Usage="System.Web.Security.AntiXss.AntiXssEncoder.XmlAttributeEncode input" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">要编码的字符串。</param>
        <summary>为 XML 特性编码指定字符串。</summary>
        <returns>编码的字符串。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法对不安全列表中的所有字符进行编码。 使用表示法对字符进行编码 `&#DECIMAL;` 。  
  
> [!NOTE]
>  在将结果字符串添加到页面之前，请将双引号括 ( "" ) 或单引号 ( "" ) 。  
  
 下表列出了默认的安全字符。 除 "说明" 列中所述，所有字符均来自 Unicode [C0 控件和基本拉丁](https://www.unicode.org/charts/PDF/U0000.pdf) 字符范围。  
   
  
|Unicode 代码图表|字符|说明|  
|------------------------|--------------------|-----------------|  
|A-Z|大写字母拉丁字母字符|  
|a-z|小写拉丁字母字符|  
|0-9|数字|  
|!|感叹号|  
|#|数字符号、哈希|  
|$|美元符号|  
|%|百分号|  
|( )|括号|  
|*|星号|  
|+|正号|  
|,|逗号|  
|-|连字符，减|  
|。|Period、句点、full stop|  
|/|斜杠|  
|:|冒号|  
|;|分号|  
|=|等号|  
|?|问号|  
|@|商业签署|  
|[ ]|方括号|  
|&#92;|反斜杠|  
|^|西文插入记号|  
|_|强调|  
|\`|重音符|  
|{ }|大括号、大括号|  
|&#124;|竖线|  
|~|波形符|  
|0x00A1 - 0x00AC|从 Unicode [C1 控件和拉丁语-1 补充](https://www.unicode.org/charts/PDF/U0080.pdf) 字符范围开始，0x00A1 (161 decimal) 和 0x00AC (172) decimal 之间的特殊字符。|  
|从 Unicode [C1 控件和拉丁语-1 补充](https://www.unicode.org/charts/PDF/U0080.pdf) 字符范围开始，0x00AE (174 decimal) 和 0x00FF (255) decimal 之间的特殊字符。|  
|0x0100-0x017F|0x0100 (256 decimal) 与 0x017F (383 decimal) 之间的字符。  (Unicode [拉丁语扩展](https://www.unicode.org/charts/PDF/U0100.pdf) 的字符范围。 ) | 
|0x0180 - 0x024F|0x0180 (384 decimal) 与 0x024F (591 decimal) 之间的字符。  (Unicode [拉丁语扩展 B](https://www.unicode.org/charts/PDF/U0180.pdf) 字符范围。 ) | 
|0x0250 - 0x02AF|0x0250 (592 decimal) 与 0x02AF (687 decimal) 之间的字符。  (Unicode [IPA extension](https://www.unicode.org/charts/PDF/U0250.pdf) 字符范围。 ) | 
|0x02B0 - 0x02FF|0x02B0 (688 decimal) 与 0x02FF (767 decimal) 之间的字符。  (Unicode [间距修饰符字母](https://www.unicode.org/charts/PDF/U02B0.pdf) 字符范围。 ) |
|0x0300 - 0x036F|0x0300 (768 decimal) 与 0x036F (879 decimal) 之间的字符。  (Unicode [合并变音符](https://www.unicode.org/charts/PDF/U0300.pdf) 字符范围。 ) |  
  
 下表列出了输入和相应编码输出的示例。  
  
|||  
|-|-|  
|`alert('XSS Attack!');`|`alert(&apos;XSS&#32;Attack!&apos;);`|  
|`<script>alert('XSS Attack!');</script>`|`&lt;script&gt;alert(&apos;XSS&#32;Attack!&apos;);&lt;/script&gt;`|  
|`alert('XSSあAttack!');`|`alert(&apos;XSS&#12354;Attack!&apos;);`|  
|`user@contoso.com`|`user@contoso.com`|  
|`"Anti-Cross Site Scripting Namespace"`|`&quot;Anti-Cross&#32;Site&#32;Scripting&#32;Namespace&quot;`|  
  
 若要自定义安全列表，请调用 <xref:System.Web.Security.AntiXss.AntiXssEncoder.MarkAsSafe%2A> 方法。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlEncode">
      <MemberSignature Language="C#" Value="public static string XmlEncode (string input);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string XmlEncode(string input) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.AntiXss.AntiXssEncoder.XmlEncode(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlEncode (input As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ XmlEncode(System::String ^ input);" />
      <MemberSignature Language="F#" Value="static member XmlEncode : string -&gt; string" Usage="System.Web.Security.AntiXss.AntiXssEncoder.XmlEncode input" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">要编码的字符串。</param>
        <summary>为 XML 特性编码指定字符串。</summary>
        <returns>编码的字符串。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法对不安全列表中的所有字符进行编码。 使用表示法对字符进行编码 `&#DECIMAL;` 。  
  
> [!NOTE]
>  在将结果字符串添加到页面之前，请将双引号括 ( "" ) 或单引号 ( "" ) 。  
  
 下表列出了默认的安全字符。 除了 "说明" 列中所述，所有字符均来自 Unicode [C0 控件和基本拉丁](https://www.unicode.org/charts/PDF/U0000.pdf) 字符范围。   
  
|字符|说明|  
|--------------------|-----------------|  
|A-Z|大写字母拉丁字母字符|  
|a-z|小写拉丁字母字符|  
|0-9|数字|  
| (空间) |Space|  
|!|感叹号|  
|#|数字符号、哈希|  
|$|美元符号|  
|%|百分号|  
|( )|括号|  
|*|星号|  
|+|正号|  
|,|逗号|  
|-|连字符，减|  
|。|周期|  
|/|斜杠|  
|:|冒号|  
|;|分号|  
|=|等号|  
|?|问号|  
|@|商业|  
|[ ]|方括号|  
|&#92;|反斜杠|  
|^|西文插入记号|  
|_|强调|  
|\`|重音符|  
|{ }|大括号、大括号|  
|&#124;|竖线|  
|~|波形符|  
|0x00A1 - 0x00AC|从 Unicode [C1 控件和拉丁语-1 补充](https://www.unicode.org/charts/PDF/U0080.pdf) 字符范围开始，0x00A1 (161 decimal) 和 0x00AC (172) decimal 之间的特殊字符。 当为时，将对此范围内的字符进行编码 `useNamedEntities` `true` 。|  
|0x00AE - 0x00FF|从 Unicode [C1 控件和拉丁语-1 补充](https://www.unicode.org/charts/PDF/U0080.pdf) 字符范围开始，0x00AE (174 decimal) 和 0x00FF (255) decimal 之间的特殊字符。 当为时，将对此范围内的字符进行编码 `useNamedEntities` `true` 。|  
|0x0100-0x017F|0x0100 (256 decimal) 与 0x017F (383 decimal) 之间的字符。  (Unicode [拉丁语扩展](https://www.unicode.org/charts/PDF/U0100.pdf) 的字符范围。 ) | 
|0x0180 - 0x024F|0x0180 (384 decimal) 与 0x024F (591 decimal) 之间的字符。  (Unicode [拉丁语扩展 B](https://www.unicode.org/charts/PDF/U0180.pdf) 字符范围。 ) |
|0x0250 - 0x02AF|0x0250 (592 decimal) 与 0x02AF (687 decimal) 之间的字符。  (Unicode [IPA extension](https://www.unicode.org/charts/PDF/U0250.pdf) 字符范围。 ) | 
|0x02B0 - 0x02FF|0x02B0 (688 decimal) 与 0x02FF (767 decimal) 之间的字符。  (Unicode [间距修饰符字母](https://www.unicode.org/charts/PDF/U02B0.pdf) 字符范围。 ) |
|0x0300 - 0x036F|0x0300 (768 decimal) 与 0x036F (879 decimal) 之间的字符。  (Unicode [合并变音符](https://www.unicode.org/charts/PDF/U0300.pdf) 字符范围。 ) | 
  
 下表列出了输入和相应编码输出的示例。  
  
|||  
|-|-|  
|`alert('XSS Attack!');`|`alert(&#39;XSS&#32;Attack!&#39;);`|  
|`<script>alert('XSS Attack!');</script>`|`&lt;script&gt;alert(&apos;XSS Attack!&apos;);&lt;/script&gt;`|  
|`alert('XSSあAttack!');`|`alert(&apos;XSS&#12354;Attack!&apos;);`|  
|`user@contoso.com`|`user@contoso.com`|  
|`"Anti-Cross Site Scripting Namespace"`|`&quot;Anti-Cross&#32;Site&#32;Scripting&#32;Namespace&quot;`|  
  
 若要自定义安全列表，请调用 <xref:System.Web.Security.AntiXss.AntiXssEncoder.MarkAsSafe%2A> 方法。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
