<Type Name="TcpClient" FullName="System.Net.Sockets.TcpClient">
  <Metadata><Meta Name="ms.openlocfilehash" Value="073c31374d172cdc548c170e671a0f24f026fc4b" /><Meta Name="ms.sourcegitcommit" Value="b6b9d5f3f9c7eb43f14a8a1a68d044603cb8ed73" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="05/18/2020" /><Meta Name="ms.locfileid" Value="83520123" /></Metadata><TypeSignature Language="C#" Value="public class TcpClient : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit TcpClient extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Net.Sockets.TcpClient" />
  <TypeSignature Language="VB.NET" Value="Public Class TcpClient&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class TcpClient : IDisposable" />
  <TypeSignature Language="F#" Value="type TcpClient = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Net.Sockets</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Net.Sockets" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="2c9ca-101">为 TCP 网络服务提供客户端连接。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-101">Provides client connections for TCP network services.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c9ca-102">`TcpClient` 类提供了在同步阻止模式下通过网络连接、发送和接收流数据的简单方法。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-102">The `TcpClient` class provides simple methods for connecting, sending, and receiving stream data over a network in synchronous blocking mode.</span></span>  
  
 <span data-ttu-id="2c9ca-103">为了 `TcpClient` 连接和交换数据，使用 TCP <xref:System.Net.Sockets.ProtocolType> 创建的 <xref:System.Net.Sockets.TcpListener> 或 <xref:System.Net.Sockets.Socket> 必须侦听传入的连接请求。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-103">In order for `TcpClient` to connect and exchange data, a <xref:System.Net.Sockets.TcpListener> or <xref:System.Net.Sockets.Socket> created with the TCP <xref:System.Net.Sockets.ProtocolType> must be listening for incoming connection requests.</span></span> <span data-ttu-id="2c9ca-104">可以通过以下两种方式之一连接到此侦听器：</span><span class="sxs-lookup"><span data-stu-id="2c9ca-104">You can connect to this listener in one of the following two ways:</span></span>  
  
-   <span data-ttu-id="2c9ca-105">创建一个 `TcpClient` 并调用三个可用 <xref:System.Net.Sockets.TcpClient.Connect%2A> 方法之一。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-105">Create a `TcpClient` and call one of the three available <xref:System.Net.Sockets.TcpClient.Connect%2A> methods.</span></span>  
  
-   <span data-ttu-id="2c9ca-106">使用远程主机的主机名和端口号创建 `TcpClient`。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-106">Create a `TcpClient` using the host name and port number of the remote host.</span></span> <span data-ttu-id="2c9ca-107">此构造函数将自动尝试连接。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-107">This constructor will automatically attempt a connection.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2c9ca-108">如果要在同步阻止模式下发送无连接的数据报，请使用 <xref:System.Net.Sockets.UdpClient> 类。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-108">If you want to send connectionless datagrams in synchronous blocking mode, use the <xref:System.Net.Sockets.UdpClient> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c9ca-109">下面的代码示例建立 `TcpClient` 连接。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-109">The following code example establishes a `TcpClient` connection.</span></span>  
  
 [!code-cpp[System.Net.Sockets.TcpClient#1](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpClient/CPP/tcpclient.cpp#1)]
 [!code-csharp[System.Net.Sockets.TcpClient#1](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpClient/CS/tcpclient.cs#1)]
 [!code-vb[System.Net.Sockets.TcpClient#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.TcpClient/VB/tcpclient.vb#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para><span data-ttu-id="2c9ca-110">若要发送和接收数据，请使用 <see cref="M:System.Net.Sockets.TcpClient.GetStream" /> 方法获取 <see cref="T:System.Net.Sockets.NetworkStream" />。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-110">To send and receive data, use the <see cref="M:System.Net.Sockets.TcpClient.GetStream" /> method to obtain a <see cref="T:System.Net.Sockets.NetworkStream" />.</span></span> <span data-ttu-id="2c9ca-111">调用 <see cref="T:System.Net.Sockets.NetworkStream" /> 的 <see cref="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)" /> 和 <see cref="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)" /> 方法，以发送和接收与远程主机的数据。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-111">Call the <see cref="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)" /> and <see cref="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)" /> methods of the <see cref="T:System.Net.Sockets.NetworkStream" /> to send and receive data with the remote host.</span></span> <span data-ttu-id="2c9ca-112">使用 <see cref="M:System.Net.Sockets.NetworkStream.Close(System.Int32)" /> 方法可释放与 <see cref="T:System.Net.Sockets.TcpClient" />关联的所有资源。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-112">Use the <see cref="M:System.Net.Sockets.NetworkStream.Close(System.Int32)" /> method to release all resources associated with the <see cref="T:System.Net.Sockets.TcpClient" />.</span></span></para></block>
    <altmember cref="T:System.Net.Sockets.TcpListener" />
    <altmember cref="T:System.Net.Sockets.NetworkStream" />
    <altmember cref="T:System.Net.Sockets.Socket" />
    <altmember cref="T:System.Net.Sockets.ProtocolType" />
    <altmember cref="T:System.Net.IPEndPoint" />
    <altmember cref="M:System.Net.Sockets.TcpClient.Connect(System.String,System.Int32)" />
    <altmember cref="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)" />
    <altmember cref="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)" />
    <related type="Article" href="~/docs/framework/network-programming/tcp-udp.md"><span data-ttu-id="2c9ca-113">TCP-UDP</span><span class="sxs-lookup"><span data-stu-id="2c9ca-113">TCP-UDP</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="2c9ca-114">初始化 <see cref="T:System.Net.Sockets.TcpClient" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-114">Initializes a new instance of the <see cref="T:System.Net.Sockets.TcpClient" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TcpClient ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpClient.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TcpClient();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="2c9ca-115">初始化 <see cref="T:System.Net.Sockets.TcpClient" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-115">Initializes a new instance of the <see cref="T:System.Net.Sockets.TcpClient" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c9ca-116">此构造函数将创建一个新 <xref:System.Net.Sockets.TcpClient>，并允许基础服务提供程序分配最适当的本地 IP 地址和端口号。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-116">This constructor creates a new <xref:System.Net.Sockets.TcpClient> and allows the underlying service provider to assign the most appropriate local IP address and port number.</span></span> <span data-ttu-id="2c9ca-117">在发送和接收数据之前，必须先调用 <xref:System.Net.Sockets.TcpClient.Connect%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-117">You must first call the <xref:System.Net.Sockets.TcpClient.Connect%2A> method before sending and receiving data.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2c9ca-118">此构造函数仅适用于 IPv4 地址类型。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-118">This constructor works only with IPv4 address types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2c9ca-119">当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-119">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="2c9ca-120">有关详细信息，请参阅[.NET Framework 中的网络跟踪](~/docs/framework/network-programming/network-tracing.md)。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-120">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c9ca-121">下面的代码示例演示如何使用无参数构造函数创建新的 <xref:System.Net.Sockets.TcpClient>。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-121">The following code example demonstrates how to use the parameterless constructor to create a new <xref:System.Net.Sockets.TcpClient>.</span></span>  
  
 [!code-cpp[ClassicTcpClient.PublicMethodsAndPropertiesExample#4](~/samples/snippets/cpp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#4)]
 [!code-csharp[ClassicTcpClient.PublicMethodsAndPropertiesExample#4](~/samples/snippets/csharp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CS/source.cs#4)]
 [!code-vb[ClassicTcpClient.PublicMethodsAndPropertiesExample#4](~/samples/snippets/visualbasic/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/VB/source.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Net.Sockets.TcpClient.Connect(System.String,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TcpClient (System.Net.IPEndPoint localEP);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Net.IPEndPoint localEP) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpClient.#ctor(System.Net.IPEndPoint)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (localEP As IPEndPoint)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TcpClient(System::Net::IPEndPoint ^ localEP);" />
      <MemberSignature Language="F#" Value="new System.Net.Sockets.TcpClient : System.Net.IPEndPoint -&gt; System.Net.Sockets.TcpClient" Usage="new System.Net.Sockets.TcpClient localEP" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="localEP" Type="System.Net.IPEndPoint" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="localEP"><span data-ttu-id="2c9ca-122">要将 TCP <see cref="T:System.Net.Sockets.Socket" /> 绑定到的 <see cref="T:System.Net.IPEndPoint" />。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-122">The <see cref="T:System.Net.IPEndPoint" /> to which you bind the TCP <see cref="T:System.Net.Sockets.Socket" />.</span></span></param>
        <summary><span data-ttu-id="2c9ca-123">初始化 <see cref="T:System.Net.Sockets.TcpClient" /> 类的新实例，并将其绑定到指定的本地终结点。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-123">Initializes a new instance of the <see cref="T:System.Net.Sockets.TcpClient" /> class and binds it to the specified local endpoint.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c9ca-124">此构造函数将创建一个新 <xref:System.Net.Sockets.TcpClient>，并将其绑定到由 `localEP` 参数指定的 <xref:System.Net.IPEndPoint>。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-124">This constructor creates a new <xref:System.Net.Sockets.TcpClient> and binds it to the <xref:System.Net.IPEndPoint> specified by the `localEP` parameter.</span></span> <span data-ttu-id="2c9ca-125">调用此构造函数之前，必须使用要发送和接收数据的 IP 地址和端口号创建 `IPEndPoint`。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-125">Before you call this constructor, you must create an `IPEndPoint` using the IP address and port number from which you intend to send and receive data.</span></span> <span data-ttu-id="2c9ca-126">在连接和通信之前，无需指定本地 IP 地址和端口号。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-126">You do not need to specify a local IP address and port number before connecting and communicating.</span></span> <span data-ttu-id="2c9ca-127">如果使用任何其他构造函数创建 `TcpClient`，则基础服务提供程序将分配最适当的本地 IP 地址和端口号。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-127">If you create a `TcpClient` using any other constructor, the underlying service provider will assign the most appropriate local IP address and port number.</span></span>  
  
 <span data-ttu-id="2c9ca-128">在发送和接收数据之前，必须调用 <xref:System.Net.Sockets.TcpClient.Connect%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-128">You must call the <xref:System.Net.Sockets.TcpClient.Connect%2A> method before sending and receiving data.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2c9ca-129">当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-129">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="2c9ca-130">有关详细信息，请参阅[.NET Framework 中的网络跟踪](~/docs/framework/network-programming/network-tracing.md)。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-130">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c9ca-131">下面的代码示例演示如何使用本地终结点创建 <xref:System.Net.Sockets.TcpClient> 类的实例。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-131">The following code example demonstrates how to create an instance of the <xref:System.Net.Sockets.TcpClient> class using a local endpoint.</span></span>  
  
 [!code-cpp[ClassicTcpClient.PublicMethodsAndPropertiesExample#2](~/samples/snippets/cpp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#2)]
 [!code-csharp[ClassicTcpClient.PublicMethodsAndPropertiesExample#2](~/samples/snippets/csharp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CS/source.cs#2)]
 [!code-vb[ClassicTcpClient.PublicMethodsAndPropertiesExample#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2c9ca-132"><paramref name="localEP" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-132">The  <paramref name="localEP" /> parameter is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Net.IPEndPoint" />
        <altmember cref="M:System.Net.Sockets.TcpClient.Connect(System.String,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TcpClient (System.Net.Sockets.AddressFamily family);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Net.Sockets.AddressFamily family) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpClient.#ctor(System.Net.Sockets.AddressFamily)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (family As AddressFamily)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TcpClient(System::Net::Sockets::AddressFamily family);" />
      <MemberSignature Language="F#" Value="new System.Net.Sockets.TcpClient : System.Net.Sockets.AddressFamily -&gt; System.Net.Sockets.TcpClient" Usage="new System.Net.Sockets.TcpClient family" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="family" Type="System.Net.Sockets.AddressFamily" />
      </Parameters>
      <Docs>
        <param name="family"><span data-ttu-id="2c9ca-133">IP 协议的 <see cref="P:System.Net.IPAddress.AddressFamily" />。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-133">The <see cref="P:System.Net.IPAddress.AddressFamily" /> of the IP protocol.</span></span></param>
        <summary><span data-ttu-id="2c9ca-134">使用指定的族初始化 <see cref="T:System.Net.Sockets.TcpClient" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-134">Initializes a new instance of the <see cref="T:System.Net.Sockets.TcpClient" /> class with the specified family.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="2c9ca-135">当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-135">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="2c9ca-136">有关详细信息，请参阅[.NET Framework 中的网络跟踪](~/docs/framework/network-programming/network-tracing.md)。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-136">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c9ca-137">下面的代码示例演示如何创建 <xref:System.Net.Sockets.TcpClient> 类的实例。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-137">The following code example demonstrates how to create an instance of the <xref:System.Net.Sockets.TcpClient> class.</span></span>  
  
 [!code-cpp[ClassicTcpClient.PublicMethodsAndPropertiesExample#15](~/samples/snippets/cpp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#15)]
 [!code-csharp[ClassicTcpClient.PublicMethodsAndPropertiesExample#15](~/samples/snippets/csharp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CS/source.cs#15)]
 [!code-vb[ClassicTcpClient.PublicMethodsAndPropertiesExample#15](~/samples/snippets/visualbasic/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/VB/source.vb#15)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2c9ca-138"><paramref name="family" /> 参数不等于 AddressFamily.InterNetwork</span><span class="sxs-lookup"><span data-stu-id="2c9ca-138">The <paramref name="family" /> parameter is not equal to AddressFamily.InterNetwork</span></span> 
<span data-ttu-id="2c9ca-139">- 或 -</span><span class="sxs-lookup"><span data-stu-id="2c9ca-139">-or-</span></span> 
<span data-ttu-id="2c9ca-140"><paramref name="family" /> 参数不等于 AddressFamily.InterNetworkV6</span><span class="sxs-lookup"><span data-stu-id="2c9ca-140">The <paramref name="family" /> parameter is not equal to AddressFamily.InterNetworkV6</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TcpClient (string hostname, int port);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string hostname, int32 port) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpClient.#ctor(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (hostname As String, port As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TcpClient(System::String ^ hostname, int port);" />
      <MemberSignature Language="F#" Value="new System.Net.Sockets.TcpClient : string * int -&gt; System.Net.Sockets.TcpClient" Usage="new System.Net.Sockets.TcpClient (hostname, port)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="hostname" Type="System.String" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="port" Type="System.Int32" Index="1" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="hostname"><span data-ttu-id="2c9ca-141">要连接到的远程主机的 DNS 名。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-141">The DNS name of the remote host to which you intend to connect.</span></span></param>
        <param name="port"><span data-ttu-id="2c9ca-142">要连接到的远程主机的端口号。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-142">The port number of the remote host to which you intend to connect.</span></span></param>
        <summary><span data-ttu-id="2c9ca-143">初始化 <see cref="T:System.Net.Sockets.TcpClient" /> 类的新实例并连接到指定主机上的指定端口。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-143">Initializes a new instance of the <see cref="T:System.Net.Sockets.TcpClient" /> class and connects to the specified port on the specified host.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c9ca-144">此构造函数将创建一个新的 <xref:System.Net.Sockets.TcpClient>，并与所提供的主机名和端口号建立同步连接尝试。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-144">This constructor creates a new <xref:System.Net.Sockets.TcpClient> and makes a synchronous connection attempt to the provided host name and port number.</span></span> <span data-ttu-id="2c9ca-145">基础服务提供程序将分配最适当的本地 IP 地址和端口号。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-145">The underlying service provider will assign the most appropriate local IP address and port number.</span></span> <span data-ttu-id="2c9ca-146">`TcpClient` 将被阻止，直到它连接或失败。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-146">`TcpClient` will block until it either connects or fails.</span></span> <span data-ttu-id="2c9ca-147">此构造函数允许初始化、解析 DNS 主机名，并在一个方便的步骤中进行连接。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-147">This constructor allows you to initialize, resolve the DNS host name, and connect in one convenient step.</span></span>  
  
 <span data-ttu-id="2c9ca-148">如果启用了 IPv6，并且调用 <xref:System.Net.Sockets.TcpClient.%23ctor%28System.String%2CSystem.Int32%29> 方法连接到解析 IPv6 和 IPv4 地址的主机，则在 IPv4 地址之前将首先尝试连接到 IPv6 地址。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-148">If IPv6 is enabled and the <xref:System.Net.Sockets.TcpClient.%23ctor%28System.String%2CSystem.Int32%29> method is called to connect to a host that resolves to both IPv6 and IPv4 addresses, the connection to the IPv6 address will be attempted first before the IPv4 address.</span></span> <span data-ttu-id="2c9ca-149">如果主机未侦听 IPv6 地址，则这可能会延迟建立连接的时间。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-149">This may have the effect of delaying the time to establish the connection if the host is not listening on the IPv6 address.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2c9ca-150">如果收到 <xref:System.Net.Sockets.SocketException>，请使用 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> 获取特定的错误代码。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-150">If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> to obtain the specific error code.</span></span> <span data-ttu-id="2c9ca-151">获取此代码后，可以参考[Windows 套接字版本 2 API 错误代码](/windows/desktop/winsock/windows-sockets-error-codes-2)文档，以获取有关错误的详细说明。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-151">After you have obtained this code, you can refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2c9ca-152">当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-152">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="2c9ca-153">有关详细信息，请参阅[.NET Framework 中的网络跟踪](~/docs/framework/network-programming/network-tracing.md)。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-153">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c9ca-154">下面的代码示例演示如何使用主机名和端口号创建 <xref:System.Net.Sockets.TcpClient> 类的实例。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-154">The following code example demonstrates how to create an instance of the <xref:System.Net.Sockets.TcpClient> class using a host name and port number.</span></span>  
  
 [!code-cpp[ClassicTcpClient.PublicMethodsAndPropertiesExample#3](~/samples/snippets/cpp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#3)]
 [!code-csharp[ClassicTcpClient.PublicMethodsAndPropertiesExample#3](~/samples/snippets/csharp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CS/source.cs#3)]
 [!code-vb[ClassicTcpClient.PublicMethodsAndPropertiesExample#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/VB/source.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2c9ca-155">
          <paramref name="hostname" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-155">The <paramref name="hostname" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="2c9ca-156"><paramref name="port" /> 参数不介于 <see cref="F:System.Net.IPEndPoint.MinPort" /> 与 <see cref="F:System.Net.IPEndPoint.MaxPort" /> 之间。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-156">The <paramref name="port" /> parameter is not between <see cref="F:System.Net.IPEndPoint.MinPort" /> and <see cref="F:System.Net.IPEndPoint.MaxPort" />.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="2c9ca-157">访问套接字时出错。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-157">An error occurred when accessing the socket.</span></span></exception>
        <altmember cref="Overload:System.Net.Sockets.TcpClient.#ctor" />
        <altmember cref="M:System.Net.Sockets.TcpClient.Connect(System.String,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Active">
      <MemberSignature Language="C#" Value="protected bool Active { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Active" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.TcpClient.Active" />
      <MemberSignature Language="VB.NET" Value="Protected Property Active As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property bool Active { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Active : bool with get, set" Usage="System.Net.Sockets.TcpClient.Active" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2c9ca-158">获取或设置一个值，它指示是否已建立连接。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-158">Gets or sets a value that indicates whether a connection has been made.</span></span></summary>
        <value><span data-ttu-id="2c9ca-159">如果已建立连接，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-159"><see langword="true" /> if the connection has been made; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c9ca-160">派生自 <xref:System.Net.Sockets.TcpClient> 的类可以使用此属性来确定连接尝试是否已成功。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-160">Classes deriving from <xref:System.Net.Sockets.TcpClient> can use this property to determine if a connection attempt has succeeded.</span></span> <span data-ttu-id="2c9ca-161">它不会监视 `TcpClient`的持续连接状态。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-161">It does not monitor the ongoing connection state of `TcpClient`.</span></span> <span data-ttu-id="2c9ca-162">如果远程主机关闭连接，则不会更新 `Active`。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-162">If the remote host closes the connection, `Active` will not be updated.</span></span> <span data-ttu-id="2c9ca-163">如果从 `TcpClient` 派生并且需要更密切关注连接状态，请使用 <xref:System.Net.Sockets.TcpClient.Client%2A> 属性返回的 <xref:System.Net.Sockets.Socket> 的 <xref:System.Net.Sockets.Socket.Connected%2A> 属性。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-163">If you are deriving from `TcpClient` and require closer attention to the connection state, use the <xref:System.Net.Sockets.Socket.Connected%2A> property of the <xref:System.Net.Sockets.Socket> returned by the <xref:System.Net.Sockets.TcpClient.Client%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Net.Sockets.Socket.Connected" />
        <altmember cref="M:System.Net.Sockets.TcpClient.Connect(System.String,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Available">
      <MemberSignature Language="C#" Value="public int Available { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Available" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.TcpClient.Available" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Available As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Available { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Available : int" Usage="System.Net.Sockets.TcpClient.Available" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2c9ca-164">获取已经从网络接收且可供读取的数据量。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-164">Gets the amount of data that has been received from the network and is available to be read.</span></span></summary>
        <value><span data-ttu-id="2c9ca-165">从网络接收的、可供读取的数据的字节数。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-165">The number of bytes of data received from the network and available to be read.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
<span data-ttu-id="2c9ca-166">`Available` 属性是确定数据是否排队等待读取的一种方法。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-166">The `Available` property is a way to determine whether data is queued for reading.</span></span> <span data-ttu-id="2c9ca-167">如果数据可用，请调用 <xref:System.Net.Sockets.NetworkStream.Read%2A> 以获取数据。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-167">If data is available, call <xref:System.Net.Sockets.NetworkStream.Read%2A> to get the data.</span></span> <span data-ttu-id="2c9ca-168">可用数据是要读取的网络缓冲区中排队的数据总量。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-168">The available data is the total amount of data queued in the network buffer for reading.</span></span> <span data-ttu-id="2c9ca-169">如果网络缓冲区中没有数据排队，`Available` 将返回0。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-169">If no data is queued in the network buffer, `Available` returns 0.</span></span>  
  
 <span data-ttu-id="2c9ca-170">如果远程主机关闭或关闭连接，`Available` 可能会引发 <xref:System.Net.Sockets.SocketException>。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-170">If the remote host shuts down or closes the connection, `Available` may throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="2c9ca-171">如果收到 `SocketException`，请使用 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> 获取特定的错误代码。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-171">If you receive a `SocketException`, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> to obtain the specific error code.</span></span> <span data-ttu-id="2c9ca-172">获取此代码后，可以参考[Windows 套接字版本 2 API 错误代码](/windows/desktop/winsock/windows-sockets-error-codes-2)文档，以获取有关错误的详细说明。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-172">After you have obtained this code, you can refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c9ca-173">下面的代码示例演示如何使用 `Available` 属性。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-173">The following code example shows the use of the `Available` property.</span></span>  
  
 [!code-cpp[System.Net.Sockets.TcpClient1#1](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpClient1/CPP/newtcpclient.cpp#1)]
 [!code-csharp[System.Net.Sockets.TcpClient1#1](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpClient1/CS/newtcpclient.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="2c9ca-174">尝试访问套接字时出错。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-174">An error occurred when attempting to access the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="2c9ca-175"><see cref="T:System.Net.Sockets.Socket" /> 已关闭。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-175">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginConnect">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="2c9ca-176">开始一个对远程主机连接的异步请求。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-176">Begins an asynchronous request for a remote host connection.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginConnect">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginConnect (System.Net.IPAddress address, int port, AsyncCallback requestCallback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginConnect(class System.Net.IPAddress address, int32 port, class System.AsyncCallback requestCallback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpClient.BeginConnect(System.Net.IPAddress,System.Int32,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginConnect (address As IPAddress, port As Integer, requestCallback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginConnect(System::Net::IPAddress ^ address, int port, AsyncCallback ^ requestCallback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginConnect : System.Net.IPAddress * int * AsyncCallback * obj -&gt; IAsyncResult" Usage="tcpClient.BeginConnect (address, port, requestCallback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="port" Type="System.Int32" Index="1" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="requestCallback" Type="System.AsyncCallback" Index="2" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="state" Type="System.Object" Index="3" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="address"><span data-ttu-id="2c9ca-177">远程主机的 <see cref="T:System.Net.IPAddress" />。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-177">The <see cref="T:System.Net.IPAddress" /> of the remote host.</span></span></param>
        <param name="port"><span data-ttu-id="2c9ca-178">远程主机的端口号。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-178">The port number of the remote host.</span></span></param>
        <param name="requestCallback"><span data-ttu-id="2c9ca-179">一个 <see cref="T:System.AsyncCallback" /> 委托，它引用操作完成时要调用的方法。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-179">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</span></span></param>
        <param name="state"><span data-ttu-id="2c9ca-180">一个用户定义对象，其中包含连接操作的相关信息。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-180">A user-defined object that contains information about the connect operation.</span></span> <span data-ttu-id="2c9ca-181">当操作完成时，此对象会被传递给 <paramref name="requestCallback" /> 委托。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-181">This object is passed to the <paramref name="requestCallback" /> delegate when the operation is complete.</span></span></param>
        <summary><span data-ttu-id="2c9ca-182">开始一个对远程主机连接的异步请求。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-182">Begins an asynchronous request for a remote host connection.</span></span> <span data-ttu-id="2c9ca-183">远程主机由 <see cref="T:System.Net.IPAddress" /> 和端口号 (<see cref="T:System.Int32" />) 指定。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-183">The remote host is specified by an <see cref="T:System.Net.IPAddress" /> and a port number (<see cref="T:System.Int32" />).</span></span></summary>
        <returns><span data-ttu-id="2c9ca-184">一个 <see cref="T:System.IAsyncResult" /> 对象，它引用异步连接。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-184">An <see cref="T:System.IAsyncResult" /> object that references the asynchronous connection.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c9ca-185">异步 `BeginConnect` 操作必须通过调用 <xref:System.Net.Sockets.TcpClient.EndConnect%2A> 方法完成。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-185">The asynchronous `BeginConnect` operation must be completed by calling the <xref:System.Net.Sockets.TcpClient.EndConnect%2A> method.</span></span> <span data-ttu-id="2c9ca-186">通常，方法由 `asyncCallback` 委托调用。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-186">Typically, the method is invoked by the `asyncCallback` delegate.</span></span>  
  
 <span data-ttu-id="2c9ca-187">在操作完成之前，此方法不会被阻止。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-187">This method does not block until the operation completes.</span></span> <span data-ttu-id="2c9ca-188">若要在操作完成之前一直阻止，请使用 <xref:System.Net.Sockets.TcpClient.Connect%2A> 方法重载之一。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-188">To block until the operation completes, use one of the <xref:System.Net.Sockets.TcpClient.Connect%2A> method overloads.</span></span>  
  
 <span data-ttu-id="2c9ca-189">有关使用异步编程模型的详细信息，请参阅[以异步方式调用同步方法](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-189">For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c9ca-190">下面的代码示例创建 <xref:System.Net.Sockets.TcpClient>，并连接到远程主机。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-190">The following code example creates a <xref:System.Net.Sockets.TcpClient> and connects to a remote host.</span></span>  
  
 [!code-cpp[System.Net.Sockets.TcpClient1#4](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpClient1/CPP/newtcpclient.cpp#4)]
 [!code-csharp[System.Net.Sockets.TcpClient1#4](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpClient1/CS/newtcpclient.cs#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2c9ca-191">
          <paramref name="address" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-191">The <paramref name="address" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="2c9ca-192">尝试访问套接字时出错。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-192">An error occurred when attempting to access the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="2c9ca-193"><see cref="T:System.Net.Sockets.Socket" /> 已关闭。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-193">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="2c9ca-194">调用堆栈中的较高调用方无权执行所请求的操作。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-194">A caller higher in the call stack does not have permission for the requested operation.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="2c9ca-195">端口号无效。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-195">The port number is not valid.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="BeginConnect">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginConnect (System.Net.IPAddress[] addresses, int port, AsyncCallback requestCallback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginConnect(class System.Net.IPAddress[] addresses, int32 port, class System.AsyncCallback requestCallback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpClient.BeginConnect(System.Net.IPAddress[],System.Int32,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginConnect (addresses As IPAddress(), port As Integer, requestCallback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginConnect(cli::array &lt;System::Net::IPAddress ^&gt; ^ addresses, int port, AsyncCallback ^ requestCallback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginConnect : System.Net.IPAddress[] * int * AsyncCallback * obj -&gt; IAsyncResult" Usage="tcpClient.BeginConnect (addresses, port, requestCallback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="addresses" Type="System.Net.IPAddress[]" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="port" Type="System.Int32" Index="1" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="requestCallback" Type="System.AsyncCallback" Index="2" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="state" Type="System.Object" Index="3" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="addresses"><span data-ttu-id="2c9ca-196">至少一个指定远程主机的 <see cref="T:System.Net.IPAddress" />。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-196">At least one <see cref="T:System.Net.IPAddress" /> that designates the remote hosts.</span></span></param>
        <param name="port"><span data-ttu-id="2c9ca-197">远程主机的端口号。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-197">The port number of the remote hosts.</span></span></param>
        <param name="requestCallback"><span data-ttu-id="2c9ca-198">一个 <see cref="T:System.AsyncCallback" /> 委托，它引用操作完成时要调用的方法。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-198">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</span></span></param>
        <param name="state"><span data-ttu-id="2c9ca-199">一个用户定义对象，其中包含连接操作的相关信息。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-199">A user-defined object that contains information about the connect operation.</span></span> <span data-ttu-id="2c9ca-200">当操作完成时，此对象会被传递给 <paramref name="requestCallback" /> 委托。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-200">This object is passed to the <paramref name="requestCallback" /> delegate when the operation is complete.</span></span></param>
        <summary><span data-ttu-id="2c9ca-201">开始一个对远程主机连接的异步请求。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-201">Begins an asynchronous request for a remote host connection.</span></span> <span data-ttu-id="2c9ca-202">远程主机由 <see cref="T:System.Net.IPAddress" /> 数组和端口号 (<see cref="T:System.Int32" />) 指定。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-202">The remote host is specified by an <see cref="T:System.Net.IPAddress" /> array and a port number (<see cref="T:System.Int32" />).</span></span></summary>
        <returns><span data-ttu-id="2c9ca-203">一个 <see cref="T:System.IAsyncResult" /> 对象，它引用异步连接。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-203">An <see cref="T:System.IAsyncResult" /> object that references the asynchronous connection.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c9ca-204">异步 `BeginConnect` 操作必须通过调用 <xref:System.Net.Sockets.TcpClient.EndConnect%2A> 方法完成。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-204">The asynchronous `BeginConnect` operation must be completed by calling the <xref:System.Net.Sockets.TcpClient.EndConnect%2A> method.</span></span> <span data-ttu-id="2c9ca-205">通常，方法由 `asyncCallback` 委托调用。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-205">Typically, the method is invoked by the `asyncCallback` delegate.</span></span>  
  
 <span data-ttu-id="2c9ca-206">在操作完成之前，此方法不会被阻止。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-206">This method does not block until the operation completes.</span></span> <span data-ttu-id="2c9ca-207">若要在操作完成之前一直阻止，请使用 <xref:System.Net.Sockets.TcpClient.Connect%2A> 方法重载之一。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-207">To block until the operation completes, use one of the <xref:System.Net.Sockets.TcpClient.Connect%2A> method overloads.</span></span>  
  
 <span data-ttu-id="2c9ca-208">有关使用异步编程模型的详细信息，请参阅[以异步方式调用同步方法](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-208">For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).</span></span>  
  
 <span data-ttu-id="2c9ca-209">此方法通常在调用 <xref:System.Net.Dns.BeginGetHostAddresses%2A> 方法之后立即使用，该方法可为单个主机返回多个 IP 地址。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-209">This method is typically used immediately after a call to the <xref:System.Net.Dns.BeginGetHostAddresses%2A> method, which can return multiple IP addresses for a single host.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c9ca-210">下面的代码示例创建 <xref:System.Net.Sockets.TcpClient>，并连接到远程主机。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-210">The following code example creates a <xref:System.Net.Sockets.TcpClient> and connects to a remote host.</span></span>  
  
 [!code-cpp[System.Net.Sockets.TcpClient1#5](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpClient1/CPP/newtcpclient.cpp#5)]
 [!code-csharp[System.Net.Sockets.TcpClient1#5](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpClient1/CS/newtcpclient.cs#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2c9ca-211">
          <paramref name="addresses" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-211">The <paramref name="addresses" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="2c9ca-212">尝试访问套接字时出错。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-212">An error occurred when attempting to access the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="2c9ca-213"><see cref="T:System.Net.Sockets.Socket" /> 已关闭。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-213">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="2c9ca-214">调用堆栈中的较高调用方无权执行所请求的操作。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-214">A caller higher in the call stack does not have permission for the requested operation.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="2c9ca-215">端口号无效。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-215">The port number is not valid.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="BeginConnect">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginConnect (string host, int port, AsyncCallback requestCallback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginConnect(string host, int32 port, class System.AsyncCallback requestCallback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpClient.BeginConnect(System.String,System.Int32,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginConnect (host As String, port As Integer, requestCallback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginConnect(System::String ^ host, int port, AsyncCallback ^ requestCallback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginConnect : string * int * AsyncCallback * obj -&gt; IAsyncResult" Usage="tcpClient.BeginConnect (host, port, requestCallback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="host" Type="System.String" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="port" Type="System.Int32" Index="1" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="requestCallback" Type="System.AsyncCallback" Index="2" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="state" Type="System.Object" Index="3" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="host"><span data-ttu-id="2c9ca-216">远程主机的名称。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-216">The name of the remote host.</span></span></param>
        <param name="port"><span data-ttu-id="2c9ca-217">远程主机的端口号。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-217">The port number of the remote host.</span></span></param>
        <param name="requestCallback"><span data-ttu-id="2c9ca-218">一个 <see cref="T:System.AsyncCallback" /> 委托，它引用操作完成时要调用的方法。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-218">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</span></span></param>
        <param name="state"><span data-ttu-id="2c9ca-219">一个用户定义对象，其中包含连接操作的相关信息。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-219">A user-defined object that contains information about the connect operation.</span></span> <span data-ttu-id="2c9ca-220">当操作完成时，此对象会被传递给 <paramref name="requestCallback" /> 委托。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-220">This object is passed to the <paramref name="requestCallback" /> delegate when the operation is complete.</span></span></param>
        <summary><span data-ttu-id="2c9ca-221">开始一个对远程主机连接的异步请求。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-221">Begins an asynchronous request for a remote host connection.</span></span> <span data-ttu-id="2c9ca-222">远程主机由主机名 (<see cref="T:System.String" />) 和端口号 (<see cref="T:System.Int32" />) 指定。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-222">The remote host is specified by a host name (<see cref="T:System.String" />) and a port number (<see cref="T:System.Int32" />).</span></span></summary>
        <returns><span data-ttu-id="2c9ca-223">一个 <see cref="T:System.IAsyncResult" /> 对象，它引用异步连接。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-223">An <see cref="T:System.IAsyncResult" /> object that references the asynchronous connection.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c9ca-224">异步 `BeginConnect` 操作必须通过调用 <xref:System.Net.Sockets.TcpClient.EndConnect%2A> 方法完成。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-224">The asynchronous `BeginConnect` operation must be completed by calling the <xref:System.Net.Sockets.TcpClient.EndConnect%2A> method.</span></span> <span data-ttu-id="2c9ca-225">通常，方法由 `asyncCallback` 委托调用。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-225">Typically, the method is invoked by the `asyncCallback` delegate.</span></span>  
  
 <span data-ttu-id="2c9ca-226">在操作完成之前，此方法不会被阻止。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-226">This method does not block until the operation completes.</span></span> <span data-ttu-id="2c9ca-227">若要在操作完成之前一直阻止，请使用 <xref:System.Net.Sockets.TcpClient.Connect%2A> 方法重载之一。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-227">To block until the operation completes, use one of the <xref:System.Net.Sockets.TcpClient.Connect%2A> method overloads.</span></span>  
  
 <span data-ttu-id="2c9ca-228">有关使用异步编程模型的详细信息，请参阅[以异步方式调用同步方法](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-228">For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c9ca-229">下面的代码示例创建 <xref:System.Net.Sockets.TcpClient>，并连接到远程主机。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-229">The following code example creates a <xref:System.Net.Sockets.TcpClient> and connects to a remote host.</span></span>  
  
 [!code-cpp[System.Net.Sockets.TcpClient1#6](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpClient1/CPP/newtcpclient.cpp#6)]
 [!code-csharp[System.Net.Sockets.TcpClient1#6](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpClient1/CS/newtcpclient.cs#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2c9ca-230">
          <paramref name="host" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-230">The <paramref name="host" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="2c9ca-231">尝试访问套接字时出错。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-231">An error occurred when attempting to access the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="2c9ca-232"><see cref="T:System.Net.Sockets.Socket" /> 已关闭。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-232">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="2c9ca-233">调用堆栈中的较高调用方无权执行所请求的操作。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-233">A caller higher in the call stack does not have permission for the requested operation.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="2c9ca-234">端口号无效。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-234">The port number is not valid.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Client">
      <MemberSignature Language="C#" Value="public System.Net.Sockets.Socket Client { get; set; }" FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.Sockets.Socket Client" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.TcpClient.Client" />
      <MemberSignature Language="VB.NET" Value="Public Property Client As Socket" FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::Sockets::Socket ^ Client { System::Net::Sockets::Socket ^ get(); void set(System::Net::Sockets::Socket ^ value); };" FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="member this.Client : System.Net.Sockets.Socket with get, set" Usage="System.Net.Sockets.TcpClient.Client" />
      <MemberSignature Language="C#" Value="protected System.Net.Sockets.Socket Client { get; set; }" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="VB.NET" Value="Protected Property Client As Socket" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Net::Sockets::Socket ^ Client { System::Net::Sockets::Socket ^ get(); void set(System::Net::Sockets::Socket ^ value); };" FrameworkAlternate="netframework-1.1" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.Socket</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2c9ca-235">获取或设置基础 <see cref="T:System.Net.Sockets.Socket" />。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-235">Gets or sets the underlying <see cref="T:System.Net.Sockets.Socket" />.</span></span></summary>
        <value><span data-ttu-id="2c9ca-236">基础网络 <see cref="T:System.Net.Sockets.Socket" />。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-236">The underlying network <see cref="T:System.Net.Sockets.Socket" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c9ca-237"><xref:System.Net.Sockets.TcpClient> 创建一个 <xref:System.Net.Sockets.Socket> 通过网络发送和接收数据。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-237"><xref:System.Net.Sockets.TcpClient> creates a <xref:System.Net.Sockets.Socket> to send and receive data over a network.</span></span> <span data-ttu-id="2c9ca-238">派生自 `TcpClient` 的类可以使用此属性获取或设置此 `Socket`。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-238">Classes deriving from `TcpClient` can use this property to get or set this `Socket`.</span></span> <span data-ttu-id="2c9ca-239">如果需要访问 `TcpClient` 提供的权限之外的访问权限，请使用从 `Client` 返回的基础 `Socket`。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-239">Use the underlying `Socket` returned from `Client` if you require access beyond that which `TcpClient` provides.</span></span> <span data-ttu-id="2c9ca-240">你还可以使用 `Client` 将基础 `Socket` 设置为现有 `Socket`。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-240">You can also use `Client` to set the underlying `Socket` to an existing `Socket`.</span></span> <span data-ttu-id="2c9ca-241">如果您想要充分利用使用预先存在的 `Socket`的 `TcpClient` 简易性，这可能很有用。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-241">This might be useful if you want to take advantage of the simplicity of `TcpClient` using a pre-existing `Socket`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c9ca-242">下面的代码示例演示如何使用 `Client` 属性。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-242">The following code example demonstrates the use of the `Client` property.</span></span> <span data-ttu-id="2c9ca-243">在此示例中，将更改基础 <xref:System.Net.Sockets.Socket> 的接收缓冲区大小。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-243">In this example, the receive buffer size of the underlying <xref:System.Net.Sockets.Socket> is changed.</span></span>  
  
 [!code-csharp[TcpClientProtectedMethodsAndPropertiesExample#1](~/samples/snippets/csharp/VS_Snippets_Remoting/TcpClientProtectedMethodsAndPropertiesExample/CS/source.cs#1)]
 [!code-vb[TcpClientProtectedMethodsAndPropertiesExample#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/TcpClientProtectedMethodsAndPropertiesExample/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Net.Sockets.Socket" />
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpClient.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberSignature Language="F#" Value="member this.Close : unit -&gt; unit" Usage="tcpClient.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="2c9ca-244">释放此 <see cref="T:System.Net.Sockets.TcpClient" /> 实例，并请求关闭基础 TCP 连接。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-244">Disposes this <see cref="T:System.Net.Sockets.TcpClient" /> instance and requests that the underlying TCP connection be closed.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c9ca-245">`Close` 方法将实例标记为已释放，并请求关联的 <xref:System.Net.Sockets.Socket> 关闭 TCP 连接。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-245">The `Close` method marks the instance as disposed and requests that the associated <xref:System.Net.Sockets.Socket> close the TCP connection.</span></span> <span data-ttu-id="2c9ca-246">根据 <xref:System.Net.Sockets.TcpClient.LingerState%2A> 属性，TCP 连接可能会在一段时间后保持打开状态，以便在数据仍处于发送状态时调用 `Close` 方法。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-246">Based on the <xref:System.Net.Sockets.TcpClient.LingerState%2A> property, the TCP connection may stay open for some time after the `Close` method is called when data remains to be sent.</span></span> <span data-ttu-id="2c9ca-247">基础连接完成结束时，未提供任何通知。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-247">There is no notification provided when the underlying connection has completed closing.</span></span>  
  
 <span data-ttu-id="2c9ca-248">调用此方法最终将导致关联的 `Socket` 关闭，并且还会关闭用于发送和接收数据的关联 <xref:System.Net.Sockets.NetworkStream> （如果已创建）。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-248">Calling this method will eventually result in the close of the associated `Socket` and will also close the associated <xref:System.Net.Sockets.NetworkStream> that is used to send and receive data if one was created.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2c9ca-249">当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-249">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="2c9ca-250">有关详细信息，请参阅[.NET Framework 中的网络跟踪](~/docs/framework/network-programming/network-tracing.md)。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-250">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c9ca-251">下面的代码示例演示如何通过调用 `Close` 方法关闭 <xref:System.Net.Sockets.TcpClient>。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-251">The following code example demonstrates closing a <xref:System.Net.Sockets.TcpClient> by calling the `Close` method.</span></span>  
  
 [!code-cpp[NCLTCPClientSync#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLTcpClientSync/CPP/tcpclient.cpp#1)]
 [!code-csharp[NCLTCPClientSync#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLTcpClientSync/CS/tcpclient.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Connect">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="2c9ca-252">使用指定的主机名和端口号将客户端连接到 TCP 主机。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-252">Connects the client to a remote TCP host using the specified host name and port number.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Connect">
      <MemberSignature Language="C#" Value="public void Connect (System.Net.IPEndPoint remoteEP);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Connect(class System.Net.IPEndPoint remoteEP) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpClient.Connect(System.Net.IPEndPoint)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Connect (remoteEP As IPEndPoint)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Connect(System::Net::IPEndPoint ^ remoteEP);" />
      <MemberSignature Language="F#" Value="member this.Connect : System.Net.IPEndPoint -&gt; unit" Usage="tcpClient.Connect remoteEP" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="remoteEP" Type="System.Net.IPEndPoint" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="remoteEP"><span data-ttu-id="2c9ca-253">您打算连接到的 <see cref="T:System.Net.IPEndPoint" />。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-253">The <see cref="T:System.Net.IPEndPoint" /> to which you intend to connect.</span></span></param>
        <summary><span data-ttu-id="2c9ca-254">使用指定的远程网络终结点将客户端连接到远程 TCP 主机。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-254">Connects the client to a remote TCP host using the specified remote network endpoint.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c9ca-255">调用此方法以建立与指定 <xref:System.Net.IPEndPoint>的同步远程主机连接。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-255">Call this method to establish a synchronous remote host connection to the specified <xref:System.Net.IPEndPoint>.</span></span> <span data-ttu-id="2c9ca-256">在调用 `Connect`之前，必须使用 IP 地址和端口号创建 `IPEndPoint` 类的实例。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-256">Before you call `Connect`, you must create an instance of the `IPEndPoint` class using an IP address and a port number.</span></span> <span data-ttu-id="2c9ca-257">使用此 `IPEndPoint` 作为 `remoteEP` 参数。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-257">Use this `IPEndPoint` as the `remoteEP` parameter.</span></span> <span data-ttu-id="2c9ca-258">`Connect` 方法将被阻止，直到它连接或失败。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-258">The `Connect` method will block until it either connects or fails.</span></span> <span data-ttu-id="2c9ca-259">与远程主机连接后，请使用 <xref:System.Net.Sockets.TcpClient.GetStream%2A> 方法获取基础 <xref:System.Net.Sockets.NetworkStream>。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-259">After connecting with the remote host, use the <xref:System.Net.Sockets.TcpClient.GetStream%2A> method to obtain the underlying <xref:System.Net.Sockets.NetworkStream>.</span></span> <span data-ttu-id="2c9ca-260">使用此 `NetworkStream` 来发送和接收数据。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-260">Use this `NetworkStream` to send and receive data.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2c9ca-261">如果收到 <xref:System.Net.Sockets.SocketException>，请使用 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> 获取特定的错误代码。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-261">If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> to obtain the specific error code.</span></span> <span data-ttu-id="2c9ca-262">获取此代码后，可以参考[Windows 套接字版本 2 API 错误代码](/windows/desktop/winsock/windows-sockets-error-codes-2)文档，以获取有关错误的详细说明。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-262">After you have obtained this code, you can refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2c9ca-263">当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-263">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="2c9ca-264">有关详细信息，请参阅[.NET Framework 中的网络跟踪](~/docs/framework/network-programming/network-tracing.md)</span><span class="sxs-lookup"><span data-stu-id="2c9ca-264">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c9ca-265">下面的代码示例使用 <xref:System.Net.IPEndPoint> 连接到远程主机。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-265">The following code example uses an <xref:System.Net.IPEndPoint> to connect with a remote host.</span></span>  
  
 [!code-cpp[ClassicTcpClient.PublicMethodsAndPropertiesExample#7](~/samples/snippets/cpp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#7)]
 [!code-csharp[ClassicTcpClient.PublicMethodsAndPropertiesExample#7](~/samples/snippets/csharp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CS/source.cs#7)]
 [!code-vb[ClassicTcpClient.PublicMethodsAndPropertiesExample#7](~/samples/snippets/visualbasic/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2c9ca-266">
          <paramref name="remoteEp" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-266">The <paramref name="remoteEp" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="2c9ca-267">访问套接字时出错。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-267">An error occurred when accessing the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="2c9ca-268"><see cref="T:System.Net.Sockets.TcpClient" /> 是关闭的。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-268">The <see cref="T:System.Net.Sockets.TcpClient" /> is closed.</span></span></exception>
        <altmember cref="T:System.Net.IPEndPoint" />
        <altmember cref="M:System.Net.Sockets.TcpClient.GetStream" />
      </Docs>
    </Member>
    <Member MemberName="Connect">
      <MemberSignature Language="C#" Value="public void Connect (System.Net.IPAddress address, int port);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Connect(class System.Net.IPAddress address, int32 port) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpClient.Connect(System.Net.IPAddress,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Connect (address As IPAddress, port As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Connect(System::Net::IPAddress ^ address, int port);" />
      <MemberSignature Language="F#" Value="member this.Connect : System.Net.IPAddress * int -&gt; unit" Usage="tcpClient.Connect (address, port)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="port" Type="System.Int32" Index="1" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="address"><span data-ttu-id="2c9ca-269">你打算连接到的主机的 <see cref="T:System.Net.IPAddress" />。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-269">The <see cref="T:System.Net.IPAddress" /> of the host to which you intend to connect.</span></span></param>
        <param name="port"><span data-ttu-id="2c9ca-270">要连接到的端口号。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-270">The port number to which you intend to connect.</span></span></param>
        <summary><span data-ttu-id="2c9ca-271">使用指定的 IP 地址和端口号将客户端连接到 TCP 主机。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-271">Connects the client to a remote TCP host using the specified IP address and port number.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c9ca-272">调用此方法以建立与指定 <xref:System.Net.IPAddress> 和端口号的同步远程主机连接。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-272">Call this method to establish a synchronous remote host connection to the specified <xref:System.Net.IPAddress> and port number.</span></span> <span data-ttu-id="2c9ca-273"><xref:System.Net.Sockets.TcpClient.Connect%2A> 方法将被阻止，直到它连接或失败。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-273">The <xref:System.Net.Sockets.TcpClient.Connect%2A> method will block until it either connects or fails.</span></span> <span data-ttu-id="2c9ca-274">与远程主机连接后，请使用 <xref:System.Net.Sockets.TcpClient.GetStream%2A> 方法获取基础 <xref:System.Net.Sockets.NetworkStream>。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-274">After connecting with the remote host, use the <xref:System.Net.Sockets.TcpClient.GetStream%2A> method to obtain the underlying <xref:System.Net.Sockets.NetworkStream>.</span></span> <span data-ttu-id="2c9ca-275">使用此 `NetworkStream` 来发送和接收数据。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-275">Use this `NetworkStream` to send and receive data.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2c9ca-276">如果收到 <xref:System.Net.Sockets.SocketException>，请使用 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> 获取特定的错误代码。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-276">If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> to obtain the specific error code.</span></span> <span data-ttu-id="2c9ca-277">获取此代码后，可以参考[Windows 套接字版本 2 API 错误代码](/windows/desktop/winsock/windows-sockets-error-codes-2)文档，以获取有关错误的详细说明。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-277">After you have obtained this code, you can refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2c9ca-278">当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-278">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="2c9ca-279">有关详细信息，请参阅[.NET Framework 中的网络跟踪](~/docs/framework/network-programming/network-tracing.md)。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-279">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c9ca-280">下面的代码示例使用 IP 地址和端口号连接到远程主机。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-280">The following code example uses an IP Address and port number to connect with a remote host.</span></span>  
  
 [!code-cpp[ClassicTcpClient.PublicMethodsAndPropertiesExample#6](~/samples/snippets/cpp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#6)]
 [!code-csharp[ClassicTcpClient.PublicMethodsAndPropertiesExample#6](~/samples/snippets/csharp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CS/source.cs#6)]
 [!code-vb[ClassicTcpClient.PublicMethodsAndPropertiesExample#6](~/samples/snippets/visualbasic/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/VB/source.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2c9ca-281">
          <paramref name="address" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-281">The <paramref name="address" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="2c9ca-282"><paramref name="port" /> 不在 <see cref="F:System.Net.IPEndPoint.MinPort" /> 和 <see cref="F:System.Net.IPEndPoint.MaxPort" /> 之间。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-282">The <paramref name="port" /> is not between <see cref="F:System.Net.IPEndPoint.MinPort" /> and <see cref="F:System.Net.IPEndPoint.MaxPort" />.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="2c9ca-283">访问套接字时出错。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-283">An error occurred when accessing the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="2c9ca-284"><see cref="T:System.Net.Sockets.TcpClient" /> 已关闭。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-284"><see cref="T:System.Net.Sockets.TcpClient" /> is closed.</span></span></exception>
        <altmember cref="M:System.Net.Sockets.TcpClient.GetStream" />
      </Docs>
    </Member>
    <Member MemberName="Connect">
      <MemberSignature Language="C#" Value="public void Connect (System.Net.IPAddress[] ipAddresses, int port);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Connect(class System.Net.IPAddress[] ipAddresses, int32 port) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpClient.Connect(System.Net.IPAddress[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Connect (ipAddresses As IPAddress(), port As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Connect(cli::array &lt;System::Net::IPAddress ^&gt; ^ ipAddresses, int port);" />
      <MemberSignature Language="F#" Value="member this.Connect : System.Net.IPAddress[] * int -&gt; unit" Usage="tcpClient.Connect (ipAddresses, port)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ipAddresses" Type="System.Net.IPAddress[]" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="port" Type="System.Int32" Index="1" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="ipAddresses"><span data-ttu-id="2c9ca-285">要连接到的主机的 <see cref="T:System.Net.IPAddress" /> 数组。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-285">The <see cref="T:System.Net.IPAddress" /> array of the host to which you intend to connect.</span></span></param>
        <param name="port"><span data-ttu-id="2c9ca-286">要连接到的端口号。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-286">The port number to which you intend to connect.</span></span></param>
        <summary><span data-ttu-id="2c9ca-287">使用指定的 IP 地址和端口号将客户端连接到远程 TCP 主机。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-287">Connects the client to a remote TCP host using the specified IP addresses and port number.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c9ca-288">此方法通常在调用 <xref:System.Net.Dns.BeginGetHostAddresses%2A> 方法之后立即使用，该方法可为单个主机返回多个 IP 地址。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-288">This method is typically used immediately after a call to the <xref:System.Net.Dns.BeginGetHostAddresses%2A> method, which can return multiple IP addresses for a single host.</span></span> <span data-ttu-id="2c9ca-289">调用 `Connect` 方法，建立与 <xref:System.Net.IPAddress> 元素数组和端口号指定的主机的同步远程主机连接。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-289">Call the `Connect` method to establish a synchronous remote host connection to the host specified by the array of <xref:System.Net.IPAddress> elements and the port number.</span></span> <span data-ttu-id="2c9ca-290">`Connect` 方法将被阻止，直到它连接或失败。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-290">The `Connect` method will block until it either connects or fails.</span></span> <span data-ttu-id="2c9ca-291">与远程主机连接后，请使用 <xref:System.Net.Sockets.TcpClient.GetStream%2A> 方法获取基础 <xref:System.Net.Sockets.NetworkStream>。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-291">After connecting with the remote host, use the <xref:System.Net.Sockets.TcpClient.GetStream%2A> method to obtain the underlying <xref:System.Net.Sockets.NetworkStream>.</span></span> <span data-ttu-id="2c9ca-292">使用此 `NetworkStream` 来发送和接收数据。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-292">Use this `NetworkStream` to send and receive data.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2c9ca-293">如果收到 <xref:System.Net.Sockets.SocketException>，请使用 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> 获取特定的错误代码。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-293">If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> to obtain the specific error code.</span></span> <span data-ttu-id="2c9ca-294">获取此代码后，可以参考[Windows 套接字版本 2 API 错误代码](/windows/desktop/winsock/windows-sockets-error-codes-2)文档，以获取有关错误的详细说明。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-294">After you have obtained this code, you can refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2c9ca-295">当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-295">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="2c9ca-296">有关详细信息，请参阅[.NET Framework 中的网络跟踪](~/docs/framework/network-programming/network-tracing.md)。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-296">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c9ca-297">下面的代码示例使用 IP 地址和端口号连接到远程主机。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-297">The following code example uses an IP Address and port number to connect with a remote host.</span></span>  
  
 [!code-cpp[System.Net.Sockets.TcpClient1#8](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpClient1/CPP/newtcpclient.cpp#8)]
 [!code-csharp[System.Net.Sockets.TcpClient1#8](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpClient1/CS/newtcpclient.cs#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2c9ca-298">
          <paramref name="ipAddresses" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-298">The <paramref name="ipAddresses" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="2c9ca-299">端口号无效。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-299">The port number is not valid.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="2c9ca-300">尝试访问套接字时出错。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-300">An error occurred when attempting to access the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="2c9ca-301"><see cref="T:System.Net.Sockets.Socket" /> 已关闭。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-301">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="2c9ca-302">调用堆栈中的较高调用方无权执行所请求的操作。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-302">A caller higher in the call stack does not have permission for the requested operation.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="2c9ca-303">此方法对于使用 <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /> 标志或 <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" /> 标志的套接字有效。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-303">This method is valid for sockets that use the <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /> flag or the <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" /> flag.</span></span></exception>
        <altmember cref="T:System.Net.Sockets.TcpListener" />
      </Docs>
    </Member>
    <Member MemberName="Connect">
      <MemberSignature Language="C#" Value="public void Connect (string hostname, int port);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Connect(string hostname, int32 port) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpClient.Connect(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Connect (hostname As String, port As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Connect(System::String ^ hostname, int port);" />
      <MemberSignature Language="F#" Value="member this.Connect : string * int -&gt; unit" Usage="tcpClient.Connect (hostname, port)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostname" Type="System.String" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="port" Type="System.Int32" Index="1" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="hostname"><span data-ttu-id="2c9ca-304">要连接到的远程主机的 DNS 名。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-304">The DNS name of the remote host to which you intend to connect.</span></span></param>
        <param name="port"><span data-ttu-id="2c9ca-305">要连接到的远程主机的端口号。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-305">The port number of the remote host to which you intend to connect.</span></span></param>
        <summary><span data-ttu-id="2c9ca-306">将客户端连接到指定主机上的指定端口。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-306">Connects the client to the specified port on the specified host.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c9ca-307">调用此方法以建立与指定的主机名和端口号的同步远程主机连接。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-307">Call this method to establish a synchronous remote host connection to the specified host name and port number.</span></span> <span data-ttu-id="2c9ca-308">`Connect` 方法将被阻止，直到它连接或失败。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-308">The `Connect` method will block until it either connects or fails.</span></span> <span data-ttu-id="2c9ca-309">与远程主机连接后，请使用 <xref:System.Net.Sockets.TcpClient.GetStream%2A> 方法获取基础 <xref:System.Net.Sockets.NetworkStream>。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-309">After connecting with the remote host, use the <xref:System.Net.Sockets.TcpClient.GetStream%2A> method to obtain the underlying <xref:System.Net.Sockets.NetworkStream>.</span></span> <span data-ttu-id="2c9ca-310">使用此 `NetworkStream` 来发送和接收数据。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-310">Use this  `NetworkStream` to send and receive data.</span></span>  
  
 <span data-ttu-id="2c9ca-311">如果启用了 IPv6，并且调用 `Connect(String, Int32)` 方法连接到解析 IPv6 和 IPv4 地址的主机，则在 IPv4 地址之前将首先尝试连接到 IPv6 地址。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-311">If IPv6 is enabled and the `Connect(String, Int32)` method is called to connect to a host that resolves to both IPv6 and IPv4 addresses, the connection to the IPv6 address will be attempted first before the IPv4 address.</span></span> <span data-ttu-id="2c9ca-312">如果主机未侦听 IPv6 地址，则这可能会延迟建立连接的时间。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-312">This may have the effect of delaying the time to establish the connection if the host is not listening on the IPv6 address.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2c9ca-313">如果收到 <xref:System.Net.Sockets.SocketException>，请使用 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> 获取特定的错误代码。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-313">If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> to obtain the specific error code.</span></span> <span data-ttu-id="2c9ca-314">获取此代码后，可以参考[Windows 套接字版本 2 API 错误代码](/windows/desktop/winsock/windows-sockets-error-codes-2)文档，以获取有关错误的详细说明。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-314">After you have obtained this code, you can refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2c9ca-315">当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-315">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="2c9ca-316">有关详细信息，请参阅[.NET Framework 中的网络跟踪](~/docs/framework/network-programming/network-tracing.md)。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-316">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c9ca-317">下面的代码示例使用主机名和端口号与远程主机连接。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-317">The following code example uses the host name and port number to connect with a remote host.</span></span>  
  
 [!code-cpp[ClassicTcpClient.PublicMethodsAndPropertiesExample#5](~/samples/snippets/cpp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#5)]
 [!code-csharp[ClassicTcpClient.PublicMethodsAndPropertiesExample#5](~/samples/snippets/csharp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CS/source.cs#5)]
 [!code-vb[ClassicTcpClient.PublicMethodsAndPropertiesExample#5](~/samples/snippets/visualbasic/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/VB/source.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2c9ca-318">
          <paramref name="hostname" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-318">The <paramref name="hostname" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="2c9ca-319"><paramref name="port" /> 参数不介于 <see cref="F:System.Net.IPEndPoint.MinPort" /> 与 <see cref="F:System.Net.IPEndPoint.MaxPort" /> 之间。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-319">The <paramref name="port" /> parameter is not between <see cref="F:System.Net.IPEndPoint.MinPort" /> and <see cref="F:System.Net.IPEndPoint.MaxPort" />.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="2c9ca-320">访问套接字时出错。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-320">An error occurred when accessing the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="2c9ca-321"><see cref="T:System.Net.Sockets.TcpClient" /> 已关闭。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-321"><see cref="T:System.Net.Sockets.TcpClient" /> is closed.</span></span></exception>
        <altmember cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.TcpClient.GetStream" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ConnectAsync">
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="2c9ca-322">使用指定的主机名和端口号将客户端连接到远程 TCP 主机以作为异步操作。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-322">Connects the client to a remote TCP host using the specified host name and port number as an asynchronous operation.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ConnectAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ConnectAsync (System.Net.IPAddress address, int port);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ConnectAsync(class System.Net.IPAddress address, int32 port) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpClient.ConnectAsync(System.Net.IPAddress,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function ConnectAsync (address As IPAddress, port As Integer) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ ConnectAsync(System::Net::IPAddress ^ address, int port);" />
      <MemberSignature Language="F#" Value="member this.ConnectAsync : System.Net.IPAddress * int -&gt; System.Threading.Tasks.Task" Usage="tcpClient.ConnectAsync (address, port)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" Index="0" FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="port" Type="System.Int32" Index="1" FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="address"><span data-ttu-id="2c9ca-323">你打算连接到的主机的 <see cref="T:System.Net.IPAddress" />。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-323">The <see cref="T:System.Net.IPAddress" /> of the host to which you intend to connect.</span></span></param>
        <param name="port"><span data-ttu-id="2c9ca-324">要连接到的端口号。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-324">The port number to which you intend to connect.</span></span></param>
        <summary><span data-ttu-id="2c9ca-325">使用指定的 IP 地址和端口号将客户端连接到远程 TCP 主机以作为异步操作。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-325">Connects the client to a remote TCP host using the specified IP address and port number as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="2c9ca-326">表示异步操作的任务对象。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-326">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c9ca-327">此操作不会阻止。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-327">This operation will not block.</span></span> <span data-ttu-id="2c9ca-328">返回的返回 <xref:System.Threading.Tasks.Task> 对象将在建立 TCP 连接后完成。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-328">The returned Returns <xref:System.Threading.Tasks.Task> object will complete after the TCP connection has been established.</span></span> <span data-ttu-id="2c9ca-329">当连接请求正在进行时，此方法不会阻止调用线程。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-329">This method does not block the calling thread while the connection request is underway.</span></span>  
  
 <span data-ttu-id="2c9ca-330">调用此方法以与指定的 <xref:System.Net.IPAddress> 和端口号建立同步远程主机连接作为异步操作。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-330">Call this method to establish a synchronous remote host connection to the specified <xref:System.Net.IPAddress> and port number as an asynchronous operation.</span></span> <span data-ttu-id="2c9ca-331">与远程主机连接后，请使用 <xref:System.Net.Sockets.TcpClient.GetStream%2A> 方法获取基础 <xref:System.Net.Sockets.NetworkStream>。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-331">After connecting with the remote host, use the <xref:System.Net.Sockets.TcpClient.GetStream%2A> method to obtain the underlying <xref:System.Net.Sockets.NetworkStream>.</span></span> <span data-ttu-id="2c9ca-332">使用此 `NetworkStream` 来发送和接收数据。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-332">Use this `NetworkStream` to send and receive data.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2c9ca-333">如果收到 <xref:System.Net.Sockets.SocketException>，请使用 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> 获取特定的错误代码。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-333">If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> to obtain the specific error code.</span></span> <span data-ttu-id="2c9ca-334">获取此代码后，可以参考[Windows 套接字版本 2 API 错误代码](/windows/desktop/winsock/windows-sockets-error-codes-2)文档，以获取有关错误的详细说明。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-334">After you have obtained this code, you can refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2c9ca-335">当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-335">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="2c9ca-336">有关详细信息，请参阅[.NET Framework 中的网络跟踪](~/docs/framework/network-programming/network-tracing.md)。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-336">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2c9ca-337">
          <paramref name="address" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-337">The <paramref name="address" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="2c9ca-338"><paramref name="port" /> 不在 <see cref="F:System.Net.IPEndPoint.MinPort" /> 和 <see cref="F:System.Net.IPEndPoint.MaxPort" /> 之间。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-338">The <paramref name="port" /> is not between <see cref="F:System.Net.IPEndPoint.MinPort" /> and <see cref="F:System.Net.IPEndPoint.MaxPort" />.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="2c9ca-339">访问套接字时出错。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-339">An error occurred when accessing the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="2c9ca-340"><see cref="T:System.Net.Sockets.TcpClient" /> 已关闭。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-340"><see cref="T:System.Net.Sockets.TcpClient" /> is closed.</span></span></exception>
        <altmember cref="M:System.Net.Sockets.TcpClient.GetStream" />
      </Docs>
    </Member>
    <Member MemberName="ConnectAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ConnectAsync (System.Net.IPAddress[] addresses, int port);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ConnectAsync(class System.Net.IPAddress[] addresses, int32 port) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpClient.ConnectAsync(System.Net.IPAddress[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function ConnectAsync (addresses As IPAddress(), port As Integer) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ ConnectAsync(cli::array &lt;System::Net::IPAddress ^&gt; ^ addresses, int port);" />
      <MemberSignature Language="F#" Value="member this.ConnectAsync : System.Net.IPAddress[] * int -&gt; System.Threading.Tasks.Task" Usage="tcpClient.ConnectAsync (addresses, port)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="addresses" Type="System.Net.IPAddress[]" Index="0" FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="port" Type="System.Int32" Index="1" FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="addresses"><span data-ttu-id="2c9ca-341">要连接到的主机的 <see cref="T:System.Net.IPAddress" /> 数组。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-341">The <see cref="T:System.Net.IPAddress" /> array of the host to which you intend to connect.</span></span></param>
        <param name="port"><span data-ttu-id="2c9ca-342">要连接到的端口号。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-342">The port number to which you intend to connect.</span></span></param>
        <summary><span data-ttu-id="2c9ca-343">使用指定的 IP 地址和端口号将客户端连接到远程 TCP 主机以作为异步操作。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-343">Connects the client to a remote TCP host using the specified IP addresses and port number as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="2c9ca-344">表示异步操作的任务对象。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-344">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c9ca-345">此操作不会阻止。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-345">This operation will not block.</span></span> <span data-ttu-id="2c9ca-346">返回的返回 <xref:System.Threading.Tasks.Task> 对象将在建立 TCP 连接后完成。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-346">The returned Returns <xref:System.Threading.Tasks.Task> object will complete after the TCP connection has been established.</span></span> <span data-ttu-id="2c9ca-347">当连接请求正在进行时，此方法不会阻止调用线程。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-347">This method does not block the calling thread while the connection request is underway.</span></span>  
  
 <span data-ttu-id="2c9ca-348">此方法通常在调用 <xref:System.Net.Dns.BeginGetHostAddresses%2A> 方法之后立即使用，该方法可为单个主机返回多个 IP 地址。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-348">This method is typically used immediately after a call to the <xref:System.Net.Dns.BeginGetHostAddresses%2A> method, which can return multiple IP addresses for a single host.</span></span> <span data-ttu-id="2c9ca-349">调用此方法可建立与 <xref:System.Net.IPAddress> 元素数组和端口号指定的主机的同步远程主机连接，作为异步操作。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-349">Call this method to establish a synchronous remote host connection to the host specified by the array of <xref:System.Net.IPAddress> elements and the port number as an asynchronous operation.</span></span> <span data-ttu-id="2c9ca-350">与远程主机连接后，请使用 <xref:System.Net.Sockets.TcpClient.GetStream%2A> 方法获取基础 <xref:System.Net.Sockets.NetworkStream>。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-350">After connecting with the remote host, use the <xref:System.Net.Sockets.TcpClient.GetStream%2A> method to obtain the underlying <xref:System.Net.Sockets.NetworkStream>.</span></span> <span data-ttu-id="2c9ca-351">使用此 `NetworkStream` 来发送和接收数据。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-351">Use this `NetworkStream` to send and receive data.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2c9ca-352">如果收到 <xref:System.Net.Sockets.SocketException>，请使用 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> 获取特定的错误代码。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-352">If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> to obtain the specific error code.</span></span> <span data-ttu-id="2c9ca-353">获取此代码后，可以参考[Windows 套接字版本 2 API 错误代码](/windows/desktop/winsock/windows-sockets-error-codes-2)文档，以获取有关错误的详细说明。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-353">After you have obtained this code, you can refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2c9ca-354">当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-354">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="2c9ca-355">有关详细信息，请参阅[.NET Framework 中的网络跟踪](~/docs/framework/network-programming/network-tracing.md)。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-355">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2c9ca-356">
          <paramref name="ipAddresses" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-356">The <paramref name="ipAddresses" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="2c9ca-357">端口号无效。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-357">The port number is not valid.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="2c9ca-358">尝试访问套接字时出错。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-358">An error occurred when attempting to access the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="2c9ca-359"><see cref="T:System.Net.Sockets.Socket" /> 已关闭。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-359">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="2c9ca-360">调用堆栈中的较高调用方无权执行所请求的操作。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-360">A caller higher in the call stack does not have permission for the requested operation.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="2c9ca-361">此方法对于使用 <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /> 标志或 <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" /> 标志的套接字有效。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-361">This method is valid for sockets that use the <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /> flag or the <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" /> flag.</span></span></exception>
        <altmember cref="T:System.Net.Sockets.TcpListener" />
      </Docs>
    </Member>
    <Member MemberName="ConnectAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ConnectAsync (string host, int port);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ConnectAsync(string host, int32 port) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpClient.ConnectAsync(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function ConnectAsync (host As String, port As Integer) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ ConnectAsync(System::String ^ host, int port);" />
      <MemberSignature Language="F#" Value="member this.ConnectAsync : string * int -&gt; System.Threading.Tasks.Task" Usage="tcpClient.ConnectAsync (host, port)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="host" Type="System.String" Index="0" FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="port" Type="System.Int32" Index="1" FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="host"><span data-ttu-id="2c9ca-362">要连接到的远程主机的 DNS 名。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-362">The DNS name of the remote host to which you intend to connect.</span></span></param>
        <param name="port"><span data-ttu-id="2c9ca-363">要连接到的远程主机的端口号。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-363">The port number of the remote host to which you intend to connect.</span></span></param>
        <summary><span data-ttu-id="2c9ca-364">将客户端连接到指定主机上的指定 TCP 端口以作为异步操作。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-364">Connects the client to the specified TCP port on the specified host as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="2c9ca-365">表示异步操作的任务对象。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-365">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c9ca-366">此操作不会阻止。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-366">This operation will not block.</span></span> <span data-ttu-id="2c9ca-367">返回的返回 <xref:System.Threading.Tasks.Task> 对象将在建立 TCP 连接后完成。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-367">The returned Returns <xref:System.Threading.Tasks.Task> object will complete after the TCP connection has been established.</span></span> <span data-ttu-id="2c9ca-368">当连接请求正在进行时，此方法不会阻止调用线程。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-368">This method does not block the calling thread while the connection request is underway.</span></span>  
  
 <span data-ttu-id="2c9ca-369">调用此方法以将同步远程主机连接与指定的主机名和端口号建立为异步操作。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-369">Call this method to establish a synchronous remote host connection to the specified host name and port number as an asynchronous operation.</span></span> <span data-ttu-id="2c9ca-370">与远程主机连接后，请使用 <xref:System.Net.Sockets.TcpClient.GetStream%2A> 方法获取基础 <xref:System.Net.Sockets.NetworkStream>。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-370">After connecting with the remote host, use the <xref:System.Net.Sockets.TcpClient.GetStream%2A> method to obtain the underlying <xref:System.Net.Sockets.NetworkStream>.</span></span> <span data-ttu-id="2c9ca-371">使用此 `NetworkStream` 来发送和接收数据。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-371">Use this `NetworkStream` to send and receive data.</span></span>  
  
 <span data-ttu-id="2c9ca-372">如果启用了 IPv6，并且调用 <xref:System.Net.Sockets.TcpClient.ConnectAsync%28System.String%2CSystem.Int32%29> 方法连接到解析 IPv6 和 IPv4 地址的主机，则在 IPv4 地址之前将首先尝试连接到 IPv6 地址。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-372">If IPv6 is enabled and the <xref:System.Net.Sockets.TcpClient.ConnectAsync%28System.String%2CSystem.Int32%29> method is called to connect to a host that resolves to both IPv6 and IPv4 addresses, the connection to the IPv6 address will be attempted first before the IPv4 address.</span></span> <span data-ttu-id="2c9ca-373">如果主机未侦听 IPv6 地址，则这可能会延迟建立连接的时间。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-373">This may have the effect of delaying the time to establish the connection if the host is not listening on the IPv6 address.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2c9ca-374">如果收到 <xref:System.Net.Sockets.SocketException>，请使用 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> 获取特定的错误代码。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-374">If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> to obtain the specific error code.</span></span> <span data-ttu-id="2c9ca-375">获取此代码后，可以参考[Windows 套接字版本 2 API 错误代码](/windows/desktop/winsock/windows-sockets-error-codes-2)文档，以获取有关错误的详细说明。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-375">After you have obtained this code, you can refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2c9ca-376">当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-376">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="2c9ca-377">有关详细信息，请参阅[.NET Framework 中的网络跟踪](~/docs/framework/network-programming/network-tracing.md)。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-377">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2c9ca-378">
          <paramref name="hostname" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-378">The <paramref name="hostname" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="2c9ca-379"><paramref name="port" /> 参数不介于 <see cref="F:System.Net.IPEndPoint.MinPort" /> 与 <see cref="F:System.Net.IPEndPoint.MaxPort" /> 之间。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-379">The <paramref name="port" /> parameter is not between <see cref="F:System.Net.IPEndPoint.MinPort" /> and <see cref="F:System.Net.IPEndPoint.MaxPort" />.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="2c9ca-380">访问套接字时出错。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-380">An error occurred when accessing the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="2c9ca-381"><see cref="T:System.Net.Sockets.TcpClient" /> 已关闭。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-381"><see cref="T:System.Net.Sockets.TcpClient" /> is closed.</span></span></exception>
        <altmember cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.TcpClient.GetStream" />
      </Docs>
    </Member>
    <Member MemberName="Connected">
      <MemberSignature Language="C#" Value="public bool Connected { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Connected" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.TcpClient.Connected" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Connected As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Connected { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.Connected : bool" Usage="System.Net.Sockets.TcpClient.Connected" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2c9ca-382">获取一个值，该值指示 <see cref="T:System.Net.Sockets.Socket" /> 的基础 <see cref="T:System.Net.Sockets.TcpClient" /> 是否已连接到远程主机。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-382">Gets a value indicating whether the underlying <see cref="T:System.Net.Sockets.Socket" /> for a <see cref="T:System.Net.Sockets.TcpClient" /> is connected to a remote host.</span></span></summary>
        <value><span data-ttu-id="2c9ca-383">如果 <see cref="P:System.Net.Sockets.TcpClient.Client" /> 套接字与截止到最近的操作时的远程资源连接，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-383"><see langword="true" /> if the <see cref="P:System.Net.Sockets.TcpClient.Client" /> socket was connected to a remote resource as of the most recent operation; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c9ca-384">`Connected` 属性获取上一次 i/o 操作之前 <xref:System.Net.Sockets.TcpClient.Client%2A> 套接字的连接状态。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-384">The `Connected` property gets the connection state of the <xref:System.Net.Sockets.TcpClient.Client%2A> socket as of the last I/O operation.</span></span> <span data-ttu-id="2c9ca-385">当它返回 `false`时，`Client` 套接字要么从未连接，要么不再处于连接状态。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-385">When it returns `false`, the `Client` socket was either never connected, or is no longer connected.</span></span>  
  
 <span data-ttu-id="2c9ca-386">由于 `Connected` 属性仅反映最近操作的连接状态，因此你应该尝试发送或接收消息以确定当前状态。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-386">Because the `Connected` property only reflects the state of the connection as of the most recent operation, you should attempt to send or receive a message to determine the current state.</span></span> <span data-ttu-id="2c9ca-387">消息发送失败后，此属性将不再返回 `true`。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-387">After the message send fails, this property no longer returns `true`.</span></span> <span data-ttu-id="2c9ca-388">请注意，此行为是设计的。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-388">Note that this behavior is by design.</span></span> <span data-ttu-id="2c9ca-389">无法可靠地测试连接状态，因为在测试与发送/接收之间，连接可能已丢失。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-389">You cannot reliably test the state of the connection because, in the time between the test and a send/receive, the connection could have been lost.</span></span> <span data-ttu-id="2c9ca-390">你的代码应假设已连接套接字，并妥善处理失败的传输。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-390">Your code should assume the socket is connected, and gracefully handle failed transmissions.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c9ca-391">下面的代码示例连接到远程终结点，并验证连接。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-391">The following code example connects to a remote endpoint and then verifies the connection.</span></span>  
  
 [!code-cpp[System.Net.Sockets.TcpClient1#2](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpClient1/CPP/newtcpclient.cpp#2)]
 [!code-csharp[System.Net.Sockets.TcpClient1#2](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpClient1/CS/newtcpclient.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpClient.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="tcpClient.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="2c9ca-392">释放由 <see cref="T:System.Net.Sockets.TcpClient" /> 占用的托管和非托管资源。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-392">Releases the managed and unmanaged resources used by the <see cref="T:System.Net.Sockets.TcpClient" />.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpClient.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="tcpClient.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing"><span data-ttu-id="2c9ca-393">设置为 <see langword="true" /> 可释放托管资源和非托管资源；设置为 <see langword="false" /> 只能释放非托管资源。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-393">Set to <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</span></span></param>
        <summary><span data-ttu-id="2c9ca-394">释放 <see cref="T:System.Net.Sockets.TcpClient" /> 使用的非托管资源，并选择性地释放托管资源。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-394">Releases the unmanaged resources used by the <see cref="T:System.Net.Sockets.TcpClient" /> and optionally releases the managed resources.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c9ca-395">此方法由 public `Dispose()` 方法和 <xref:System.Object.Finalize%2A> 方法调用。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-395">This method is called by the public `Dispose()` method and the <xref:System.Object.Finalize%2A> method.</span></span> <span data-ttu-id="2c9ca-396">`Dispose()` 在 `disposing` 参数设置为 `true`时调用此方法。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-396">`Dispose()` invokes this method with the `disposing` parameter set to `true`.</span></span> <span data-ttu-id="2c9ca-397">`Finalize` 在将 `disposing` 设置为 `false`时调用此方法。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-397">`Finalize` invokes this method with `disposing` set to `false`.</span></span>  
  
 <span data-ttu-id="2c9ca-398">当 `disposing` 参数为 `true` 时，此方法释放该 <xref:System.Net.Sockets.TcpClient> 引用的、由任何托管对象持有的全部资源。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-398">When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Net.Sockets.TcpClient> references.</span></span> <span data-ttu-id="2c9ca-399">它通过调用每个引用对象的 `Dispose()` 方法来实现此目标。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-399">It does this by invoking the `Dispose()` method of each referenced object.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2c9ca-400">当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-400">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="2c9ca-401">有关详细信息，请参阅[.NET Framework 中的网络跟踪](~/docs/framework/network-programming/network-tracing.md)。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-401">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="2c9ca-402">
            <see langword="Dispose" /> 可以由其他对象多次调用。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-402">
            <see langword="Dispose" /> can be called multiple times by other objects.</span></span> <span data-ttu-id="2c9ca-403">重写 <see langword="Dispose(Boolean)" /> 时，请注意不要引用在以前调用 <see langword="Dispose" /> 时已释放的对象。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-403">When overriding <see langword="Dispose(Boolean)" />, be careful not to reference objects that have been previously disposed of in an earlier call to <see langword="Dispose" />.</span></span> <span data-ttu-id="2c9ca-404">有关如何实现 <see langword="Dispose(Boolean)" />的详细信息，请参阅[实现 Dispose 方法](~/docs/standard/garbage-collection/implementing-dispose.md)。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-404">For more information about how to implement <see langword="Dispose(Boolean)" />, see [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span></span>  
  
<span data-ttu-id="2c9ca-405">有关 <see langword="Dispose" /> 和 <see cref="M:System.Object.Finalize" />的详细信息，请参阅[清理非托管资源](~/docs/standard/garbage-collection/unmanaged.md)和[重写 Finalize 方法](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ddae83kx(v=vs.100))。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-405">For more information about <see langword="Dispose" /> and <see cref="M:System.Object.Finalize" />, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Overriding the Finalize Method](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ddae83kx(v=vs.100)).</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="EndConnect">
      <MemberSignature Language="C#" Value="public void EndConnect (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndConnect(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpClient.EndConnect(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndConnect (asyncResult As IAsyncResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EndConnect(IAsyncResult ^ asyncResult);" />
      <MemberSignature Language="F#" Value="member this.EndConnect : IAsyncResult -&gt; unit" Usage="tcpClient.EndConnect asyncResult" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="asyncResult"><span data-ttu-id="2c9ca-406">调用 <see cref="Overload:System.Net.Sockets.TcpClient.BeginConnect" /> 后返回的 <see cref="T:System.IAsyncResult" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-406">An <see cref="T:System.IAsyncResult" /> object returned by a call to <see cref="Overload:System.Net.Sockets.TcpClient.BeginConnect" />.</span></span></param>
        <summary><span data-ttu-id="2c9ca-407">结束挂起的异步连接尝试。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-407">Ends a pending asynchronous connection attempt.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c9ca-408">此方法将在操作完成之前一直阻止。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-408">This method blocks until the operation is complete.</span></span> <span data-ttu-id="2c9ca-409">若要同步执行此操作，请使用 <xref:System.Net.Sockets.TcpClient.Connect%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-409">To perform this operation synchronously, use a <xref:System.Net.Sockets.TcpClient.Connect%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2c9ca-410">如果收到 <xref:System.Net.Sockets.SocketException>，请使用 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> 获取特定的错误代码。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-410">If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> to obtain the specific error code.</span></span> <span data-ttu-id="2c9ca-411">获取此代码后，可以参考[Windows 套接字版本 2 API 错误代码](/windows/desktop/winsock/windows-sockets-error-codes-2)文档，以获取有关错误的详细说明。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-411">After you have obtained this code, you can refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c9ca-412">下面的代码示例结束了异步连接尝试。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-412">The following code example ends the asynchronous connection attempt.</span></span>  
  
 [!code-cpp[System.Net.Sockets.TcpClient1#7](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpClient1/CPP/newtcpclient.cpp#7)]
 [!code-csharp[System.Net.Sockets.TcpClient1#7](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpClient1/CS/newtcpclient.cs#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2c9ca-413">
          <paramref name="asyncResult" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-413">The <paramref name="asyncResult" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2c9ca-414">调用 <see cref="Overload:System.Net.Sockets.TcpClient.BeginConnect" /> 方法后，未返回 <paramref name="asyncResult" /> 参数。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-414">The <paramref name="asyncResult" /> parameter was not returned by a call to a <see cref="Overload:System.Net.Sockets.TcpClient.BeginConnect" /> method.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="2c9ca-415">先前曾为异步连接调用过 <see cref="M:System.Net.Sockets.TcpClient.EndConnect(System.IAsyncResult)" /> 方法。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-415">The <see cref="M:System.Net.Sockets.TcpClient.EndConnect(System.IAsyncResult)" /> method was previously called for the asynchronous connection.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="2c9ca-416">尝试访问 <see cref="T:System.Net.Sockets.Socket" /> 时出错。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-416">An error occurred when attempting to access the <see cref="T:System.Net.Sockets.Socket" />.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="2c9ca-417">已关闭基础 <see cref="T:System.Net.Sockets.Socket" />。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-417">The underlying <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ExclusiveAddressUse">
      <MemberSignature Language="C#" Value="public bool ExclusiveAddressUse { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ExclusiveAddressUse" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.TcpClient.ExclusiveAddressUse" />
      <MemberSignature Language="VB.NET" Value="Public Property ExclusiveAddressUse As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ExclusiveAddressUse { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ExclusiveAddressUse : bool with get, set" Usage="System.Net.Sockets.TcpClient.ExclusiveAddressUse" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2c9ca-418">获取或设置 <see cref="T:System.Boolean" /> 值，指定 <see cref="T:System.Net.Sockets.TcpClient" /> 是否只允许一个客户端使用端口。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-418">Gets or sets a <see cref="T:System.Boolean" /> value that specifies whether the <see cref="T:System.Net.Sockets.TcpClient" /> allows only one client to use a port.</span></span></summary>
        <value><span data-ttu-id="2c9ca-419">如果 <see cref="T:System.Net.Sockets.TcpClient" /> 只允许一个客户端使用特定端口，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-419"><see langword="true" /> if the <see cref="T:System.Net.Sockets.TcpClient" /> allows only one client to use a specific port; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="2c9ca-420">在 Windows Server 2003、Windows XP Service Pack 2 及更高版本中，默认为 <see langword="true" />；在所有其他版本中，默认为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-420">The default is <see langword="true" /> for Windows Server 2003 and Windows XP Service Pack 2 and later, and <see langword="false" /> for all other versions.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c9ca-421">默认情况下，多个客户端可以使用特定端口;但是，只有一个客户端可以对发送到端口的网络流量执行操作。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-421">By default, multiple clients can use a specific port; however, only one of the clients can perform operations on the network traffic sent to the port.</span></span> <span data-ttu-id="2c9ca-422">你可以使用 `ExclusiveAddressUse` 属性来防止多个客户端使用特定端口。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-422">You can use the `ExclusiveAddressUse` property to prevent multiple clients from using a specific port.</span></span>  
  
 <span data-ttu-id="2c9ca-423">在将基础套接字绑定到客户端端口之前，必须设置此属性。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-423">This property must be set before the underlying socket is bound to a client port.</span></span> <span data-ttu-id="2c9ca-424">如果调用 <xref:System.Net.Sockets.TcpClient.Connect%2A>、<xref:System.Net.Sockets.TcpClient.BeginConnect%2A>、<xref:System.Net.Sockets.TcpClient.%23ctor%28System.Net.IPEndPoint%29>或 <xref:System.Net.Sockets.TcpClient.%23ctor%28System.String%2CSystem.Int32%29>，则会将客户端端口绑定为该方法的副作用，并且你随后不能设置 `ExclusiveAddressUse` 属性。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-424">If you call <xref:System.Net.Sockets.TcpClient.Connect%2A>, <xref:System.Net.Sockets.TcpClient.BeginConnect%2A>, <xref:System.Net.Sockets.TcpClient.%23ctor%28System.Net.IPEndPoint%29>, or <xref:System.Net.Sockets.TcpClient.%23ctor%28System.String%2CSystem.Int32%29>, the client port is bound as a side effect of the method, and you cannot subsequently set the `ExclusiveAddressUse` property.</span></span>
  
   
  
## Examples  
 <span data-ttu-id="2c9ca-425">下面的代码示例创建 <xref:System.Net.Sockets.TcpClient>，并获取和设置 `ExclusiveAddressUse` 属性的值。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-425">The following code example creates a <xref:System.Net.Sockets.TcpClient> and gets and sets the value of the `ExclusiveAddressUse` property.</span></span>  
  
 [!code-cpp[System.Net.Sockets.TcpClient1#3](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpClient1/CPP/newtcpclient.cpp#3)]
 [!code-csharp[System.Net.Sockets.TcpClient1#3](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpClient1/CS/newtcpclient.cs#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="2c9ca-426">尝试访问基础套接字时出错。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-426">An error occurred when attempting to access the underlying socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="2c9ca-427">已关闭基础 <see cref="T:System.Net.Sockets.Socket" />。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-427">The underlying <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~TcpClient ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpClient.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!TcpClient ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="tcpClient.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="2c9ca-428">释放 <see cref="T:System.Net.Sockets.TcpClient" /> 类使用的资源。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-428">Frees resources used by the <see cref="T:System.Net.Sockets.TcpClient" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c9ca-429">此方法重写 <xref:System.Object.Finalize%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-429">This method overrides <xref:System.Object.Finalize%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="2c9ca-430">应用程序代码不应调用此方法;在垃圾回收过程中会自动调用对象的 `Finalize` 方法，除非已通过调用 <xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType> 方法禁用了垃圾回收器终止。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-430">Application code should not call this method; an object's `Finalize` method is automatically invoked during garbage collection, unless finalization by the garbage collector has been disabled by a call to the <xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="2c9ca-431"><xref:System.Net.Sockets.TcpClient> 类终结器会关闭 TCP 连接，并释放与 `TcpClient`关联的所有托管资源。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-431">The <xref:System.Net.Sockets.TcpClient> class finalizer closes the TCP connection and releases all managed resources associated with the `TcpClient`.</span></span> <span data-ttu-id="2c9ca-432">这些资源包括用于连接远程主机的基础 <xref:System.Net.Sockets.Socket>，以及用于发送和接收数据的 <xref:System.Net.Sockets.NetworkStream>。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-432">These resources include the underlying <xref:System.Net.Sockets.Socket> used for connecting with the remote host, and the <xref:System.Net.Sockets.NetworkStream> used to send and receive data.</span></span> <span data-ttu-id="2c9ca-433">终结器不会释放任何非托管资源。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-433">The finalizer does not release any unmanaged resources.</span></span>  
  
 <span data-ttu-id="2c9ca-434">有关详细信息，请参阅[Finalize 方法和析构函数](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/0s71x931(v%3dvs.100))、[清理非托管资源](~/docs/standard/garbage-collection/unmanaged.md)和[重写 Finalize 方法](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ddae83kx(v=vs.100))。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-434">For more information, see [Finalize Methods and Destructors](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/0s71x931(v%3dvs.100)), [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md), and [Overriding the Finalize Method](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ddae83kx(v=vs.100)).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Net.Sockets.TcpClient.Close" />
        <related type="Article" href="~/docs/standard/garbage-collection/index.md"><span data-ttu-id="2c9ca-435">垃圾回收</span><span class="sxs-lookup"><span data-stu-id="2c9ca-435">Garbage Collection</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetStream">
      <MemberSignature Language="C#" Value="public System.Net.Sockets.NetworkStream GetStream ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.Sockets.NetworkStream GetStream() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpClient.GetStream" />
      <MemberSignature Language="VB.NET" Value="Public Function GetStream () As NetworkStream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::Sockets::NetworkStream ^ GetStream();" />
      <MemberSignature Language="F#" Value="member this.GetStream : unit -&gt; System.Net.Sockets.NetworkStream" Usage="tcpClient.GetStream " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.NetworkStream</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="2c9ca-436">返回用于发送和接收数据的 <see cref="T:System.Net.Sockets.NetworkStream" />。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-436">Returns the <see cref="T:System.Net.Sockets.NetworkStream" /> used to send and receive data.</span></span></summary>
        <returns><span data-ttu-id="2c9ca-437">基础 <see cref="T:System.Net.Sockets.NetworkStream" />。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-437">The underlying <see cref="T:System.Net.Sockets.NetworkStream" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
<span data-ttu-id="2c9ca-438">`GetStream` 方法返回一个可用于发送和接收数据的 <xref:System.Net.Sockets.NetworkStream>。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-438">The `GetStream` method returns a <xref:System.Net.Sockets.NetworkStream> that you can use to send and receive data.</span></span> <span data-ttu-id="2c9ca-439">`NetworkStream` 类继承自 <xref:System.IO.Stream> 类，该类提供了一组丰富的方法和属性，用于促进网络通信。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-439">The `NetworkStream` class inherits from the <xref:System.IO.Stream> class, which provides a rich collection of methods and properties used to facilitate network communications.</span></span>  
  
 <span data-ttu-id="2c9ca-440">必须先调用 <xref:System.Net.Sockets.TcpClient.Connect%2A> 方法，否则 <xref:System.Net.Sockets.TcpClient.GetStream%2A> 方法将引发 <xref:System.InvalidOperationException>。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-440">You must call the <xref:System.Net.Sockets.TcpClient.Connect%2A> method first, or the <xref:System.Net.Sockets.TcpClient.GetStream%2A> method will throw an <xref:System.InvalidOperationException>.</span></span> <span data-ttu-id="2c9ca-441">获取 `NetworkStream`后，调用 <xref:System.Net.Sockets.NetworkStream.Write%2A> 方法将数据发送到远程主机。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-441">After you have obtained the `NetworkStream`, call the <xref:System.Net.Sockets.NetworkStream.Write%2A> method to send data to the remote host.</span></span> <span data-ttu-id="2c9ca-442">调用 <xref:System.Net.Sockets.NetworkStream.Read%2A> 方法接收从远程主机传入的数据。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-442">Call the <xref:System.Net.Sockets.NetworkStream.Read%2A> method to receive data arriving from the remote host.</span></span> <span data-ttu-id="2c9ca-443">这两种方法都将一直阻塞，直到执行指定的操作。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-443">Both of these methods block until the specified operation is performed.</span></span> <span data-ttu-id="2c9ca-444">可以通过检查 <xref:System.Net.Sockets.NetworkStream.DataAvailable%2A> 属性来避免阻塞读取操作。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-444">You can avoid blocking on a read operation by checking the <xref:System.Net.Sockets.NetworkStream.DataAvailable%2A> property.</span></span> <span data-ttu-id="2c9ca-445">`true` 值表示数据已从远程主机传入并且可供读取。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-445">A `true` value means that data has arrived from the remote host and is available for reading.</span></span> <span data-ttu-id="2c9ca-446">在这种情况下，保证 <xref:System.Net.Sockets.NetworkStream.Read%2A> 立即完成。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-446">In this case, <xref:System.Net.Sockets.NetworkStream.Read%2A> is guaranteed to complete immediately.</span></span> <span data-ttu-id="2c9ca-447">如果远程主机已关闭其连接，<xref:System.Net.Sockets.NetworkStream.Read%2A> 将立即返回，并返回零字节。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-447">If the remote host has shutdown its connection, <xref:System.Net.Sockets.NetworkStream.Read%2A> will immediately return with zero bytes.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2c9ca-448">在发送和接收数据时，必须关闭 `NetworkStream`。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-448">You must close the `NetworkStream` when you are through sending and receiving data.</span></span> <span data-ttu-id="2c9ca-449">关闭 <xref:System.Net.Sockets.TcpClient> 不会释放 `NetworkStream`。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-449">Closing <xref:System.Net.Sockets.TcpClient> does not release the `NetworkStream`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2c9ca-450">如果收到 <xref:System.Net.Sockets.SocketException>，请使用 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> 获取特定的错误代码。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-450">If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> to obtain the specific error code.</span></span> <span data-ttu-id="2c9ca-451">获取此代码后，可以参考[Windows 套接字版本 2 API 错误代码](/windows/desktop/winsock/windows-sockets-error-codes-2)文档，以获取有关错误的详细说明。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-451">After you have obtained this code, you can refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2c9ca-452">当你在应用程序中启用网络跟踪后，此成员将输出跟踪信息。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-452">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="2c9ca-453">有关详细信息，请参阅[.NET Framework 中的网络跟踪](~/docs/framework/network-programming/network-tracing.md)。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-453">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c9ca-454">下面的代码示例使用 `GetStream` 获取基础 <xref:System.Net.Sockets.NetworkStream>。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-454">The following code example uses `GetStream` to obtain the underlying <xref:System.Net.Sockets.NetworkStream>.</span></span> <span data-ttu-id="2c9ca-455">获取 <xref:System.Net.Sockets.NetworkStream>后，它将使用其 <xref:System.Net.Sockets.NetworkStream.Write%2A> 和 <xref:System.Net.Sockets.NetworkStream.Read%2A> 方法发送和接收。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-455">After obtaining the <xref:System.Net.Sockets.NetworkStream>, it sends and receives using its <xref:System.Net.Sockets.NetworkStream.Write%2A> and <xref:System.Net.Sockets.NetworkStream.Read%2A> methods.</span></span>  
  
 [!code-cpp[ClassicTcpClient.PublicMethodsAndPropertiesExample#14](~/samples/snippets/cpp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#14)]
 [!code-csharp[ClassicTcpClient.PublicMethodsAndPropertiesExample#14](~/samples/snippets/csharp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CS/source.cs#14)]
 [!code-vb[ClassicTcpClient.PublicMethodsAndPropertiesExample#14](~/samples/snippets/visualbasic/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/VB/source.vb#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="2c9ca-456"><see cref="T:System.Net.Sockets.TcpClient" /> 未连接到远程主机。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-456">The <see cref="T:System.Net.Sockets.TcpClient" /> is not connected to a remote host.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="2c9ca-457"><see cref="T:System.Net.Sockets.TcpClient" /> 已关闭。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-457">The <see cref="T:System.Net.Sockets.TcpClient" /> has been closed.</span></span></exception>
        <altmember cref="T:System.Net.Sockets.NetworkStream" />
        <altmember cref="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="P:System.Net.Sockets.NetworkStream.DataAvailable" />
        <altmember cref="T:System.IO.Stream" />
        <altmember cref="M:System.Net.Sockets.TcpClient.Connect(System.String,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="LingerState">
      <MemberSignature Language="C#" Value="public System.Net.Sockets.LingerOption LingerState { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.Sockets.LingerOption LingerState" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.TcpClient.LingerState" />
      <MemberSignature Language="VB.NET" Value="Public Property LingerState As LingerOption" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::Sockets::LingerOption ^ LingerState { System::Net::Sockets::LingerOption ^ get(); void set(System::Net::Sockets::LingerOption ^ value); };" />
      <MemberSignature Language="F#" Value="member this.LingerState : System.Net.Sockets.LingerOption with get, set" Usage="System.Net.Sockets.TcpClient.LingerState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.LingerOption</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2c9ca-458">获取或设置有关关联的套接字的延迟状态的信息。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-458">Gets or sets information about the linger state of the associated socket.</span></span></summary>
        <value><span data-ttu-id="2c9ca-459">一个 <see cref="T:System.Net.Sockets.LingerOption" />。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-459">A <see cref="T:System.Net.Sockets.LingerOption" />.</span></span> <span data-ttu-id="2c9ca-460">默认情况下，禁用逗留。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-460">By default, lingering is disabled.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c9ca-461">`LingerState` 属性更改 <xref:System.Net.Sockets.Socket.Close%2A> 方法行为的方式。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-461">The `LingerState` property changes the way <xref:System.Net.Sockets.Socket.Close%2A> method behaves.</span></span> <span data-ttu-id="2c9ca-462">设置此属性时，此属性修改 Winsock 可以重置连接时的条件。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-462">This property when set modifies the conditions under which the connection can be reset by Winsock.</span></span> <span data-ttu-id="2c9ca-463">仍然可以基于 IP 协议行为重置连接。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-463">Connection resets can still occur based on the IP protocol behavior.</span></span>  
  
 <span data-ttu-id="2c9ca-464">此属性控制在要发送数据时 TCP 连接将保持打开 <xref:System.Net.Sockets.TcpClient.Close%2A> 状态的时间长度。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-464">This property controls the length of time that the TCP connection will remain open after a call to <xref:System.Net.Sockets.TcpClient.Close%2A> when data remains to be sent.</span></span> <span data-ttu-id="2c9ca-465">调用 <xref:System.Net.Sockets.NetworkStream.Write%2A> 方法时，数据将被置于传出网络缓冲区。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-465">When you call the <xref:System.Net.Sockets.NetworkStream.Write%2A> method, data is placed in the outgoing network buffer.</span></span> <span data-ttu-id="2c9ca-466">此属性可用于确保在 <xref:System.Net.Sockets.TcpClient.Close%2A> 方法断开连接之前，将此数据发送到远程主机。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-466">This property can be used to ensure that this data is sent to the remote host before the <xref:System.Net.Sockets.TcpClient.Close%2A> method drops the connection.</span></span>  
  
 <span data-ttu-id="2c9ca-467">若要启用延迟，请创建包含所需值的 <xref:System.Net.Sockets.LingerOption> 实例，并将 `LingerState` 属性设置为此实例。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-467">To enable lingering, create a <xref:System.Net.Sockets.LingerOption> instance containing the desired values, and set the `LingerState` property to this instance.</span></span>  
  
 <span data-ttu-id="2c9ca-468">下表描述了 <xref:System.Net.Sockets.LingerOption.Enabled%2A> 属性的可能值和 `LingerState` 属性中存储的 <xref:System.Net.Sockets.LingerOption.LingerTime%2A> 属性的 <xref:System.Net.Sockets.TcpClient.Close%2A> 方法的行为。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-468">The following table describes the behavior of the <xref:System.Net.Sockets.TcpClient.Close%2A> method for the possible values of the <xref:System.Net.Sockets.LingerOption.Enabled%2A> property and the <xref:System.Net.Sockets.LingerOption.LingerTime%2A> property stored in the `LingerState` property.</span></span>  
  
|<span data-ttu-id="2c9ca-469">LingerState.Enabled</span><span class="sxs-lookup"><span data-stu-id="2c9ca-469">LingerState.Enabled</span></span>|<span data-ttu-id="2c9ca-470">LingerState.LingerTime</span><span class="sxs-lookup"><span data-stu-id="2c9ca-470">LingerState.LingerTime</span></span>|<span data-ttu-id="2c9ca-471">行为</span><span class="sxs-lookup"><span data-stu-id="2c9ca-471">Behavior</span></span>|  
|-------------------------|----------------------------|--------------|  
|<span data-ttu-id="2c9ca-472">`false` （已禁用），默认值为</span><span class="sxs-lookup"><span data-stu-id="2c9ca-472">`false` (disabled), the default value</span></span>|<span data-ttu-id="2c9ca-473">超时不适用，（默认值）。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-473">The time-out is not applicable, (default).</span></span>|<span data-ttu-id="2c9ca-474">在默认 IP 协议超时过期之前，尝试发送挂起的数据。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-474">Attempts to send pending data until the default IP protocol time-out expires.</span></span>|  
|<span data-ttu-id="2c9ca-475">`true` （已启用）</span><span class="sxs-lookup"><span data-stu-id="2c9ca-475">`true` (enabled)</span></span>|<span data-ttu-id="2c9ca-476">非零超时</span><span class="sxs-lookup"><span data-stu-id="2c9ca-476">A nonzero time-out</span></span>|<span data-ttu-id="2c9ca-477">尝试发送挂起的数据直到指定的超时过期，如果尝试失败，Winsock 将重置连接。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-477">Attempts to send pending data until the specified time-out expires, and if the attempt fails, then Winsock resets the connection.</span></span>|  
|<span data-ttu-id="2c9ca-478">`true` （已启用）</span><span class="sxs-lookup"><span data-stu-id="2c9ca-478">`true` (enabled)</span></span>|<span data-ttu-id="2c9ca-479">零超时。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-479">A zero timeout.</span></span>|<span data-ttu-id="2c9ca-480">丢弃所有挂起的数据，Winsock 重置连接。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-480">Discards any pending data and Winsock resets the connection.</span></span>|  
  
 <span data-ttu-id="2c9ca-481">IP 堆栈根据连接的往返时间来计算要使用的默认 IP 协议超时期限。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-481">The IP stack computes the default IP protocol time-out period to use based on the round trip time of the connection.</span></span> <span data-ttu-id="2c9ca-482">在大多数情况下，堆栈计算出的超时比应用程序定义的超时更密切。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-482">In most cases, the time-out computed by the stack is more relevant than one defined by an application.</span></span> <span data-ttu-id="2c9ca-483">这是未设置 `LingerState` 属性时套接字的默认行为。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-483">This is the default behavior for a socket when the `LingerState` property is not set.</span></span>  
  
 <span data-ttu-id="2c9ca-484">如果在 `LingerState` 属性中存储的 <xref:System.Net.Sockets.LingerOption.LingerTime%2A> 属性设置为大于默认 IP 协议超时值，则默认的 IP 协议超时将仍适用并将替代。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-484">When the <xref:System.Net.Sockets.LingerOption.LingerTime%2A> property stored in the `LingerState` property is set greater than the default IP protocol time-out, the default IP protocol time-out will still apply and override.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c9ca-485">下面的代码示例设置并获取套接字逗留时间。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-485">The following code example sets and gets the sockets linger time.</span></span>  
  
 [!code-cpp[ClassicTcpClient.PublicMethodsAndPropertiesExample#12](~/samples/snippets/cpp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#12)]
 [!code-csharp[ClassicTcpClient.PublicMethodsAndPropertiesExample#12](~/samples/snippets/csharp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CS/source.cs#12)]
 [!code-vb[ClassicTcpClient.PublicMethodsAndPropertiesExample#12](~/samples/snippets/visualbasic/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/VB/source.vb#12)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Net.Sockets.LingerOption" />
        <altmember cref="M:System.Net.Sockets.TcpClient.Close" />
        <altmember cref="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="NoDelay">
      <MemberSignature Language="C#" Value="public bool NoDelay { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool NoDelay" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.TcpClient.NoDelay" />
      <MemberSignature Language="VB.NET" Value="Public Property NoDelay As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool NoDelay { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.NoDelay : bool with get, set" Usage="System.Net.Sockets.TcpClient.NoDelay" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2c9ca-486">获取或设置一个值，该值在发送或接收缓冲区未满时禁用延迟。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-486">Gets or sets a value that disables a delay when send or receive buffers are not full.</span></span></summary>
        <value><span data-ttu-id="2c9ca-487">如果禁用延迟，则为 <see langword="true" />;否则，<see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-487"><see langword="true" /> if the delay is disabled; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="2c9ca-488">默认值是 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-488">The default value is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c9ca-489">`false``NoDelay` 时，<xref:System.Net.Sockets.TcpClient> 不会通过网络发送数据包，直到它收集了大量的传出数据。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-489">When `NoDelay` is `false`, a <xref:System.Net.Sockets.TcpClient> does not send a packet over the network until it has collected a significant amount of outgoing data.</span></span> <span data-ttu-id="2c9ca-490">由于 TCP 段中的开销很大，因此发送少量数据是低效的。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-490">Because of the amount of overhead in a TCP segment, sending small amounts of data is inefficient.</span></span> <span data-ttu-id="2c9ca-491">但是，在某些情况下，您需要发送非常少的数据，或者希望从每个发送的数据包立即响应。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-491">However, situations do exist where you need to send very small amounts of data or expect immediate responses from each packet you send.</span></span> <span data-ttu-id="2c9ca-492">决策应权衡网络效率与应用程序要求的相对重要性。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-492">Your decision should weigh the relative importance of network efficiency versus application requirements.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c9ca-493">下面的代码示例将禁用延迟。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-493">The following code example disables the delay.</span></span> <span data-ttu-id="2c9ca-494">然后，它会检查 `NoDelay` 的值，以验证属性是否已成功设置。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-494">It then checks the value of `NoDelay` to verify that the property was successfully set.</span></span>  
  
 [!code-cpp[ClassicTcpClient.PublicMethodsAndPropertiesExample#13](~/samples/snippets/cpp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#13)]
 [!code-csharp[ClassicTcpClient.PublicMethodsAndPropertiesExample#13](~/samples/snippets/csharp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CS/source.cs#13)]
 [!code-vb[ClassicTcpClient.PublicMethodsAndPropertiesExample#13](~/samples/snippets/visualbasic/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/VB/source.vb#13)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReceiveBufferSize">
      <MemberSignature Language="C#" Value="public int ReceiveBufferSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ReceiveBufferSize" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.TcpClient.ReceiveBufferSize" />
      <MemberSignature Language="VB.NET" Value="Public Property ReceiveBufferSize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ReceiveBufferSize { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.ReceiveBufferSize : int with get, set" Usage="System.Net.Sockets.TcpClient.ReceiveBufferSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2c9ca-495">获取或设置接收缓冲区的大小。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-495">Gets or sets the size of the receive buffer.</span></span></summary>
        <value><span data-ttu-id="2c9ca-496">接收缓冲区的大小（以字节为单位）。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-496">The size of the receive buffer, in bytes.</span></span> <span data-ttu-id="2c9ca-497">默认值为 8192 字节。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-497">The default value is 8192 bytes.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c9ca-498">`ReceiveBufferSize` 属性获取或设置要在接收缓冲区中为每个读取操作存储的字节数。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-498">The `ReceiveBufferSize` property gets or sets the number of bytes that you are expecting to store in the receive buffer for each read operation.</span></span> <span data-ttu-id="2c9ca-499">此属性实际上操作分配给接收传入数据的网络缓冲区空间。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-499">This property actually manipulates the network buffer space allocated for receiving incoming data.</span></span>  
  
 <span data-ttu-id="2c9ca-500">网络缓冲区的大小至少应等于应用程序缓冲区，以确保调用 <xref:System.Net.Sockets.NetworkStream.Read%2A?displayProperty=nameWithType> 方法时所需的数据可用。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-500">Your network buffer should be at least as large as your application buffer to ensure that the desired data will be available when you call the <xref:System.Net.Sockets.NetworkStream.Read%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="2c9ca-501">使用 <xref:System.Net.Sockets.TcpClient.ReceiveBufferSize%2A> 属性设置此大小。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-501">Use the <xref:System.Net.Sockets.TcpClient.ReceiveBufferSize%2A> property to set this size.</span></span> <span data-ttu-id="2c9ca-502">如果你的应用程序将接收大容量数据，则应将 `Read` 方法传递到非常大的应用程序缓冲区。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-502">If your application will be receiving bulk data, you should pass the `Read` method a very large application buffer.</span></span>  
  
 <span data-ttu-id="2c9ca-503">如果网络缓冲区小于 `Read` 方法中请求的数据量，将无法在一个读取操作中检索所需的数据量。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-503">If the network buffer is smaller than the amount of data you request in the `Read` method, you will not be able to retrieve the desired amount of data in one read operation.</span></span> <span data-ttu-id="2c9ca-504">这会导致额外调用 `Read` 方法的开销。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-504">This incurs the overhead of additional calls to the `Read` method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c9ca-505">下面的代码示例设置并获取接收缓冲区大小。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-505">The following code example sets and gets the receive buffer size.</span></span>  
  
 [!code-cpp[ClassicTcpClient.PublicMethodsAndPropertiesExample#8](~/samples/snippets/cpp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#8)]
 [!code-csharp[ClassicTcpClient.PublicMethodsAndPropertiesExample#8](~/samples/snippets/csharp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CS/source.cs#8)]
 [!code-vb[ClassicTcpClient.PublicMethodsAndPropertiesExample#8](~/samples/snippets/visualbasic/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/VB/source.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="2c9ca-506">设置缓冲区大小时出错。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-506">An error occurred when setting the buffer size.</span></span>  
  
 <span data-ttu-id="2c9ca-507">- 或 -</span><span class="sxs-lookup"><span data-stu-id="2c9ca-507">-or-</span></span>  
  
 <span data-ttu-id="2c9ca-508">在 .NET Compact Framework 应用程序中，无法设置此属性。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-508">In .NET Compact Framework applications, you cannot set this property.</span></span> <span data-ttu-id="2c9ca-509">有关解决方法，请参阅“备注”中的“平台说明”。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-509">For a workaround, see the Platform Note in Remarks.</span></span></exception>
        <altmember cref="P:System.Net.Sockets.TcpClient.SendBufferSize" />
        <altmember cref="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="ReceiveTimeout">
      <MemberSignature Language="C#" Value="public int ReceiveTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ReceiveTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.TcpClient.ReceiveTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Property ReceiveTimeout As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ReceiveTimeout { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.ReceiveTimeout : int with get, set" Usage="System.Net.Sockets.TcpClient.ReceiveTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2c9ca-510">获取或设置在初始化一个读取操作以后 <see cref="T:System.Net.Sockets.TcpClient" /> 等待接收数据的时间量。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-510">Gets or sets the amount of time a <see cref="T:System.Net.Sockets.TcpClient" /> will wait to receive data once a read operation is initiated.</span></span></summary>
        <value><span data-ttu-id="2c9ca-511">连接的超时值（以毫秒为单位）。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-511">The time-out value of the connection in milliseconds.</span></span> <span data-ttu-id="2c9ca-512">默认值为 0。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-512">The default value is 0.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c9ca-513">`ReceiveTimeout` 属性确定 <xref:System.Net.Sockets.NetworkStream.Read%2A> 方法在能够接收数据之前将阻塞的时间量。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-513">The `ReceiveTimeout` property determines the amount of time that the <xref:System.Net.Sockets.NetworkStream.Read%2A> method will block until it is able to receive data.</span></span> <span data-ttu-id="2c9ca-514">此时间以毫秒为单位。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-514">This time is measured in milliseconds.</span></span> <span data-ttu-id="2c9ca-515">如果在 `Read` 成功完成之前超时过期，<xref:System.Net.Sockets.TcpClient> 会引发 <xref:System.IO.IOException>。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-515">If the time-out expires before `Read` successfully completes, <xref:System.Net.Sockets.TcpClient> throws a <xref:System.IO.IOException>.</span></span> <span data-ttu-id="2c9ca-516">默认情况下没有超时。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-516">There is no time-out by default.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c9ca-517">下面的代码示例设置并获取接收超时。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-517">The following code example sets and gets the receive time out.</span></span>  
  
 [!code-cpp[ClassicTcpClient.PublicMethodsAndPropertiesExample#10](~/samples/snippets/cpp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#10)]
 [!code-csharp[ClassicTcpClient.PublicMethodsAndPropertiesExample#10](~/samples/snippets/csharp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CS/source.cs#10)]
 [!code-vb[ClassicTcpClient.PublicMethodsAndPropertiesExample#10](~/samples/snippets/visualbasic/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/VB/source.vb#10)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="P:System.Net.Sockets.TcpClient.SendTimeout" />
      </Docs>
    </Member>
    <Member MemberName="SendBufferSize">
      <MemberSignature Language="C#" Value="public int SendBufferSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 SendBufferSize" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.TcpClient.SendBufferSize" />
      <MemberSignature Language="VB.NET" Value="Public Property SendBufferSize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int SendBufferSize { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.SendBufferSize : int with get, set" Usage="System.Net.Sockets.TcpClient.SendBufferSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2c9ca-518">获取或设置发送缓冲区的大小。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-518">Gets or sets the size of the send buffer.</span></span></summary>
        <value><span data-ttu-id="2c9ca-519">发送缓冲区的大小（以字节为单位）。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-519">The size of the send buffer, in bytes.</span></span> <span data-ttu-id="2c9ca-520">默认值为 8192 字节。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-520">The default value is 8192 bytes.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c9ca-521">`SendBufferSize` 属性获取或设置每次调用 <xref:System.Net.Sockets.NetworkStream.Write%2A?displayProperty=nameWithType> 方法时希望发送的字节数。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-521">The `SendBufferSize` property gets or sets the number of bytes that you are expecting to send in each call to the <xref:System.Net.Sockets.NetworkStream.Write%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="2c9ca-522">此属性实际上操作为发送操作分配的网络缓冲区空间。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-522">This property actually manipulates the network buffer space allocated for send operation.</span></span>  
  
 <span data-ttu-id="2c9ca-523">网络缓冲区应至少与应用程序缓冲区一样大，以确保在一个操作中存储和发送所需的数据。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-523">Your network buffer should be at least as large as your application buffer to ensure that the desired data will be stored and sent in one operation.</span></span> <span data-ttu-id="2c9ca-524">使用 <xref:System.Net.Sockets.TcpClient.SendBufferSize%2A> 属性设置此大小。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-524">Use the <xref:System.Net.Sockets.TcpClient.SendBufferSize%2A> property to set this size.</span></span> <span data-ttu-id="2c9ca-525">如果你的应用程序将发送大容量数据，则应将 `Write` 方法传递到非常大的应用程序缓冲区。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-525">If your application will be sending bulk data, you should pass the `Write` method a very large application buffer.</span></span>  
  
 <span data-ttu-id="2c9ca-526">如果网络缓冲区小于提供 `Write` 方法的数据量，则将对你对 `Write` 方法进行的每个调用执行多个网络发送操作。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-526">If the network buffer is smaller than the amount of data you provide the `Write` method, several network send operations will be performed for every call you make to the `Write` method.</span></span> <span data-ttu-id="2c9ca-527">可以通过确保网络缓冲区的大小至少与应用程序缓冲区一样大来实现更大的数据吞吐量。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-527">You can achieve greater data throughput by ensuring that your network buffer is at least as large as your application buffer.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c9ca-528">下面的代码示例设置并获取发送缓冲区的大小。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-528">The following code example sets and gets the send buffer size.</span></span>  
  
 [!code-cpp[ClassicTcpClient.PublicMethodsAndPropertiesExample#9](~/samples/snippets/cpp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#9)]
 [!code-csharp[ClassicTcpClient.PublicMethodsAndPropertiesExample#9](~/samples/snippets/csharp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CS/source.cs#9)]
 [!code-vb[ClassicTcpClient.PublicMethodsAndPropertiesExample#9](~/samples/snippets/visualbasic/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/VB/source.vb#9)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Net.Sockets.TcpClient.ReceiveBufferSize" />
        <altmember cref="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="SendTimeout">
      <MemberSignature Language="C#" Value="public int SendTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 SendTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.TcpClient.SendTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Property SendTimeout As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int SendTimeout { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.SendTimeout : int with get, set" Usage="System.Net.Sockets.TcpClient.SendTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2c9ca-529">获取或设置 <see cref="T:System.Net.Sockets.TcpClient" /> 等待发送操作成功完成的时间量。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-529">Gets or sets the amount of time a <see cref="T:System.Net.Sockets.TcpClient" /> will wait for a send operation to complete successfully.</span></span></summary>
        <value><span data-ttu-id="2c9ca-530">发送超时值（以毫秒为单位）。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-530">The send time-out value, in milliseconds.</span></span> <span data-ttu-id="2c9ca-531">默认值为 0。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-531">The default is 0.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c9ca-532">`SendTimeout` 属性确定 <xref:System.Net.Sockets.Socket.Send%2A> 方法在能够成功返回之前将阻止的时间量。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-532">The `SendTimeout` property determines the amount of time that the <xref:System.Net.Sockets.Socket.Send%2A> method will block until it is able to return successfully.</span></span> <span data-ttu-id="2c9ca-533">此时间以毫秒为单位。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-533">This time is measured in milliseconds.</span></span>  
  
 <span data-ttu-id="2c9ca-534">调用 <xref:System.Net.Sockets.NetworkStream.Write%2A> 方法后，基础 <xref:System.Net.Sockets.Socket> 返回实际发送到主机的字节数。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-534">After you call the <xref:System.Net.Sockets.NetworkStream.Write%2A> method, the underlying <xref:System.Net.Sockets.Socket> returns the number of bytes actually sent to the host.</span></span> <span data-ttu-id="2c9ca-535">`SendTimeout` 属性确定 <xref:System.Net.Sockets.TcpClient> 在收到返回的字节数之前要等待的时间量。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-535">The `SendTimeout` property determines the amount of time a <xref:System.Net.Sockets.TcpClient> will wait before receiving the number of bytes returned.</span></span> <span data-ttu-id="2c9ca-536">如果在 `Send` 方法成功完成之前超时过期，`TcpClient` 将引发 <xref:System.Net.Sockets.SocketException>。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-536">If the time-out expires before the `Send` method successfully completes, `TcpClient` will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="2c9ca-537">默认情况下没有超时。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-537">There is no time-out by default.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c9ca-538">下面的代码示例设置并获取 `SendTimeout` 值。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-538">The following code example sets and gets the `SendTimeout` value.</span></span>  
  
 [!code-cpp[ClassicTcpClient.PublicMethodsAndPropertiesExample#11](~/samples/snippets/cpp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#11)]
 [!code-csharp[ClassicTcpClient.PublicMethodsAndPropertiesExample#11](~/samples/snippets/csharp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CS/source.cs#11)]
 [!code-vb[ClassicTcpClient.PublicMethodsAndPropertiesExample#11](~/samples/snippets/visualbasic/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/VB/source.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="P:System.Net.Sockets.TcpClient.ReceiveTimeout" />
      </Docs>
    </Member>
    <Member MemberName="System.IDisposable.Dispose">
      <MemberSignature Language="C#" Value="void IDisposable.Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.IDisposable.Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpClient.System#IDisposable#Dispose" />
      <MemberSignature Language="VB.NET" Value="Sub Dispose () Implements IDisposable.Dispose" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.IDisposable.Dispose() = IDisposable::Dispose;" />
      <MemberSignature Language="F#" Value="abstract member System.IDisposable.Dispose : unit -&gt; unit&#xA;override this.System.IDisposable.Dispose : unit -&gt; unit" Usage="tcpClient.System.IDisposable.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="2c9ca-539">释放 <see cref="T:System.Net.Sockets.TcpClient" /> 使用的所有资源。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-539">Releases all resources used by the <see cref="T:System.Net.Sockets.TcpClient" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
<span data-ttu-id="2c9ca-540">使用完 <xref:System.Net.Sockets.TcpClient>后，请调用 IDisposable。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-540">Call IDisposable.Dispose when you are finished using the <xref:System.Net.Sockets.TcpClient>.</span></span> <span data-ttu-id="2c9ca-541">IDisposable 方法将 <xref:System.Net.Sockets.TcpClient> 保持为不可用状态。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-541">The IDisposable.Dispose method leaves the <xref:System.Net.Sockets.TcpClient> in an unusable state.</span></span> <span data-ttu-id="2c9ca-542">调用 IDisposable 之后，必须释放对 <xref:System.Net.Sockets.TcpClient> 的所有引用，以便垃圾回收器可以回收 <xref:System.Net.Sockets.TcpClient> 占用的内存。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-542">After calling IDisposable.Dispose, you must release all references to the <xref:System.Net.Sockets.TcpClient> so the garbage collector can reclaim the memory that the <xref:System.Net.Sockets.TcpClient> was occupying.</span></span> <span data-ttu-id="2c9ca-543">有关详细信息，请参阅[清理非托管资源](~/docs/standard/garbage-collection/unmanaged.md)和[实现 Dispose 方法](~/docs/standard/garbage-collection/implementing-dispose.md)。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-543">For more information, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span></span>

> [!NOTE] 
> <span data-ttu-id="2c9ca-544">在释放对 <xref:System.Net.Sockets.TcpClient>的最后一个引用之前，请始终调用 IDisposable。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-544">Always call IDisposable.Dispose before you release your last reference to the <xref:System.Net.Sockets.TcpClient>.</span></span> <span data-ttu-id="2c9ca-545">否则，在垃圾回收器调用 <xref:System.Net.Sockets.TcpClient> 对象的**Finalize**方法之前，不会释放它所使用的资源。</span><span class="sxs-lookup"><span data-stu-id="2c9ca-545">Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Net.Sockets.TcpClient> object's **Finalize** method.</span></span>

]]></format>
        </remarks>
        <forInternalUseOnly />
      </Docs>
    </Member>
  </Members>
</Type>
