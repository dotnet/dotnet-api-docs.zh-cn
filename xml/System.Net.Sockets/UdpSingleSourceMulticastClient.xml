<Type Name="UdpSingleSourceMulticastClient" FullName="System.Net.Sockets.UdpSingleSourceMulticastClient">
  <Metadata><Meta Name="ms.openlocfilehash" Value="b3988fbd5a050ee48e6a7b003b9770b9a1a60544" /><Meta Name="ms.sourcegitcommit" Value="b53d35b4a410c949742abd4c6a989d1af5357bca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="86809643" /></Metadata><TypeSignature Language="C#" Value="public class UdpSingleSourceMulticastClient : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit UdpSingleSourceMulticastClient extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Net.Sockets.UdpSingleSourceMulticastClient" />
  <TypeSignature Language="VB.NET" Value="Public Class UdpSingleSourceMulticastClient&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class UdpSingleSourceMulticastClient : IDisposable" />
  <TypeSignature Language="F#" Value="type UdpSingleSourceMulticastClient = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Net</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>一个从单一源接收多播流量的客户端，亦称为源特定多播 (SSM)。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 多路广播组地址和发件人源地址必须是已知的。  
  
 除了从特定发件人接收多播数据外， <xref:System.Net.Sockets.UdpSingleSourceMulticastClient> 客户端还可以将单播数据发送回发送方。  
  
 若要从多个源接收多播，或在未提前知道源的情况下使用类，请改用 <xref:System.Net.Sockets.UdpSingleSourceMulticastClient> 类。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UdpSingleSourceMulticastClient (System.Net.IPAddress sourceAddress, System.Net.IPAddress groupAddress, int localPort);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Net.IPAddress sourceAddress, class System.Net.IPAddress groupAddress, int32 localPort) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpSingleSourceMulticastClient.#ctor(System.Net.IPAddress,System.Net.IPAddress,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (sourceAddress As IPAddress, groupAddress As IPAddress, localPort As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; UdpSingleSourceMulticastClient(System::Net::IPAddress ^ sourceAddress, System::Net::IPAddress ^ groupAddress, int localPort);" />
      <MemberSignature Language="F#" Value="new System.Net.Sockets.UdpSingleSourceMulticastClient : System.Net.IPAddress * System.Net.IPAddress * int -&gt; System.Net.Sockets.UdpSingleSourceMulticastClient" Usage="new System.Net.Sockets.UdpSingleSourceMulticastClient (sourceAddress, groupAddress, localPort)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="sourceAddress" Type="System.Net.IPAddress" />
        <Parameter Name="groupAddress" Type="System.Net.IPAddress" />
        <Parameter Name="localPort" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="sourceAddress">此接收器要订阅的发送器源地址。</param>
        <param name="groupAddress">此接收器要订阅的多播组地址。</param>
        <param name="localPort">此接收器要绑定到的本地端口。</param>
        <summary>创建一个可以订阅组地址并从单一源接收数据报的新 <see cref="T:System.Net.Sockets.UdpSingleSourceMulticastClient" /> UDP 客户端。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.Sockets.UdpSingleSourceMulticastClient.%23ctor%2A>构造函数将 UDP 多播套接字与组地址和端口关联，但不绑定或以其他方式使用套接字。  
  
 参数可以是 `groupAddress` IPv6 或 IPv4 多播地址。 但是，和参数的地址族 `sourceAddress` `groupAddress` 必须相同。  
  
 `localPort`参数不得指定小于1024的端口。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="sourceAddress" /> 和 <paramref name="groupAddress" /> 必须为相同地址族。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="sourceAddress" /> 为 null 引用（在 Visual Basic 中为 Nothing）。  
  
- 或 - 
 <paramref name="groupAddress" /> 为 null 引用（在 Visual Basic 中为 Nothing）。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="localPort" /> 小于 0 
- 或 - 
 <paramref name="localPort" /> 大于 65,535。</exception>
        <exception cref="T:System.Net.Sockets.SocketException"><paramref name="localPort" /> 小于 1024</exception>
      </Docs>
    </Member>
    <Member MemberName="BeginJoinGroup">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginJoinGroup (AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginJoinGroup(class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpSingleSourceMulticastClient.BeginJoinGroup(System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginJoinGroup (callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginJoinGroup(AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginJoinGroup : AsyncCallback * obj -&gt; IAsyncResult" Usage="udpSingleSourceMulticastClient.BeginJoinGroup (callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="callback">要在此操作完成时调用的回调方法。</param>
        <param name="state">要为此操作传递给 <paramref name="callback" /> 方法的可选状态信息。</param>
        <summary>绑定套接字并开始多播组的联接操作，以便允许接收来自单个源地址的数据报。</summary>
        <returns>引用此操作的 <see cref="T:System.IAsyncResult" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.Sockets.UdpSingleSourceMulticastClient.BeginJoinGroup%2A>方法将 UDP 多播套接字绑定到本地端口，并联接多播组，以允许从单个源地址接收数据报。 要绑定到的多播组地址、单个源地址和本地端口都在 <xref:System.Net.Sockets.UdpSingleSourceMulticastClient.%23ctor%2A> 构造函数中指定。  
  
 `callback`当联接多播组的操作已完成时，将调用参数中指定的方法。  
  
 如果运行时需要，该  <xref:System.Net.Sockets.UdpSingleSourceMulticastClient.BeginJoinGroup%2A> 方法还执行策略检查以验证是否允许客户端访问多路广播组。 如果不允许客户端访问， <xref:System.Net.Sockets.SocketException> 则会引发 <xref:System.Net.Sockets.SocketError.AccessDenied> 。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">已经联接多播组，或联接操作正在进行。</exception>
        <exception cref="T:System.ObjectDisposedException">已释放了 <see cref="T:System.Net.Sockets.UdpSingleSourceMulticastClient" />。</exception>
        <exception cref="T:System.Net.Sockets.SocketException">尝试访问套接字时出错。</exception>
      </Docs>
    </Member>
    <Member MemberName="BeginReceiveFromSource">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginReceiveFromSource (byte[] buffer, int offset, int count, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginReceiveFromSource(unsigned int8[] buffer, int32 offset, int32 count, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpSingleSourceMulticastClient.BeginReceiveFromSource(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginReceiveFromSource (buffer As Byte(), offset As Integer, count As Integer, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginReceiveFromSource(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int count, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginReceiveFromSource : byte[] * int * int * AsyncCallback * obj -&gt; IAsyncResult" Usage="udpSingleSourceMulticastClient.BeginReceiveFromSource (buffer, offset, count, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="buffer">用于存储已接收数据的缓冲区。</param>
        <param name="offset">应存储数据的 <paramref name="buffer" /> 开始处的偏移量（以字节为单位）。</param>
        <param name="count">要接收并存储在 <paramref name="buffer" /> 中的最大字节数。</param>
        <param name="callback">要在此操作完成时调用的回调方法。</param>
        <param name="state">要为此操作传递给 <paramref name="callback" /> 方法的可选状态信息。</param>
        <summary>开始执行从已联接的多播组接收数据包的操作，并在来自指定发送器的数据包到达组时调用指定的回叫。</summary>
        <returns>引用此操作的 <see cref="T:System.IAsyncResult" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.Sockets.UdpSingleSourceMulticastClient.BeginReceiveFromSource%2A>方法开始从一个发送方的已联接的多播组接收 UDP 数据包的操作。 本地端口、多播组和发件人源地址在 <xref:System.Net.Sockets.UdpSingleSourceMulticastClient.%23ctor%2A> 构造函数中指定。 多播客户端还必须已完成到多播组的联接。  
  
 接收到数据包时，将调用参数中指定的方法 `callback` 。  
  
 如果接收操作同步失败，则可能会出现套接字故障，但这种情况不太常见。 如果出现套接字故障， <xref:System.Net.Sockets.SocketException> 则会引发。 收到的错误被指定为枚举的成员 <xref:System.Net.Sockets.SocketError> 。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="buffer" /> 为 null 引用（在 Visual Basic 中为 Nothing）。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset" /> 小于 0 
- 或 - 
 <paramref name="offset" /> 大于 <paramref name="buffer" /> 的长度。  
  
- 或 - 
 <paramref name="count" /> 小于 0 
- 或 - 
 <paramref name="offset" /> 加上此计数大于 <paramref name="buffer" /> 的长度。</exception>
        <exception cref="T:System.InvalidOperationException">尚未联接多播组。</exception>
        <exception cref="T:System.ObjectDisposedException">已释放了 <see cref="T:System.Net.Sockets.UdpSingleSourceMulticastClient" />。</exception>
        <exception cref="T:System.Net.Sockets.SocketException">试图访问供接收的套接字时发生错误。</exception>
      </Docs>
    </Member>
    <Member MemberName="BeginSendToSource">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginSendToSource (byte[] buffer, int offset, int count, int remotePort, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginSendToSource(unsigned int8[] buffer, int32 offset, int32 count, int32 remotePort, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpSingleSourceMulticastClient.BeginSendToSource(System.Byte[],System.Int32,System.Int32,System.Int32,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginSendToSource (buffer As Byte(), offset As Integer, count As Integer, remotePort As Integer, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginSendToSource(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int count, int remotePort, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginSendToSource : byte[] * int * int * int * AsyncCallback * obj -&gt; IAsyncResult" Usage="udpSingleSourceMulticastClient.BeginSendToSource (buffer, offset, count, remotePort, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="remotePort" Type="System.Int32" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="buffer">包含要发送的数据的缓冲区。</param>
        <param name="offset">要从中读取待发送数据的从 <paramref name="buffer" /> 开始处的偏移量（以字节为单位）。</param>
        <param name="count">要从 <paramref name="buffer" /> 发送的字节数。</param>
        <param name="remotePort">要向其发送数据包的远程端口。 远程地址由 <see cref="M:System.Net.Sockets.UdpSingleSourceMulticastClient.#ctor(System.Net.IPAddress,System.Net.IPAddress,System.Int32)" /> 构造函数指定。</param>
        <param name="callback">要在此操作完成时调用的回调方法。</param>
        <param name="state">要为此操作传递给 <paramref name="callback" /> 方法的可选状态信息。</param>
        <summary>开始执行向之前指定的源发送单播数据包的操作。</summary>
        <returns>引用此操作的 <see cref="T:System.IAsyncResult" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.Sockets.UdpSingleSourceMulticastClient.BeginSendToSource%2A>方法开始向之前指定的源发送 UDP 数据包的操作。  
  
 某些协议使用此信息传递流控制、服务统计信息或恢复消息。  
  
 发送数据包时，将调用参数中指定的方法 `callback` 。  
  
 客户端必须已完成到多播组的联接。  
  
 如果参数中指定的目标端口 `remotePort` 小于1024， <xref:System.Net.Sockets.SocketException> 则会引发 <xref:System.Net.Sockets.SocketError.AccessDenied> 。  
  
 如果发送操作同步失败，则可能会出现套接字故障，但这种情况并不常见。 如果出现套接字故障， <xref:System.Net.Sockets.SocketException> 则会引发。 收到的错误被指定为枚举的成员 <xref:System.Net.Sockets.SocketError> 。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="buffer" /> 为 null 引用（在 Visual Basic 中为 Nothing）。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset" /> 小于 0 
- 或 - 
 <paramref name="offset" /> 大于 <paramref name="buffer" /> 的长度。  
  
- 或 - 
 <paramref name="count" /> 小于 0 
- 或 - 
 <paramref name="offset" /> 加上此计数大于 <paramref name="buffer" /> 的长度。  
  
- 或 - 
 <paramref name="remotePort" /> 小于 0 或大于 65,535。</exception>
        <exception cref="T:System.InvalidOperationException">尚未联接多播组。</exception>
        <exception cref="T:System.ObjectDisposedException">已释放了 <see cref="T:System.Net.Sockets.UdpSingleSourceMulticastClient" />。</exception>
        <exception cref="T:System.Net.Sockets.SocketException">尝试访问套接字时出错。</exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpSingleSourceMulticastClient.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="udpSingleSourceMulticastClient.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>离开多播组并释放 <see cref="T:System.Net.Sockets.UdpSingleSourceMulticastClient" /> 类和基础 <see cref="T:System.Net.Sockets.Socket" /> 的当前实例所使用的所有资源。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在完成使用 <xref:System.Net.Sockets.UdpSingleSourceMulticastClient.Dispose%2A> 后，应调用 <xref:System.Net.Sockets.UdpSingleSourceMulticastClient>。 <xref:System.Net.Sockets.UdpSingleSourceMulticastClient.Dispose%2A> 方法使 <xref:System.Net.Sockets.UdpSingleSourceMulticastClient> 处于不可用状态。 调用后 <xref:System.Net.Sockets.UdpSingleSourceMulticastClient.Dispose%2A> ，必须释放对的所有引用， <xref:System.Net.Sockets.UdpSingleSourceMulticastClient> 以便垃圾回收器能够回收占用的内存 <xref:System.Net.Sockets.UdpSingleSourceMulticastClient> 。  
  
 每次释放对 <xref:System.Net.Sockets.UdpSingleSourceMulticastClient.Dispose%2A> 的最后一个引用前，均应调用 <xref:System.Net.Sockets.UdpSingleSourceMulticastClient>。 否则，在垃圾回收器调用 <xref:System.Net.Sockets.UdpSingleSourceMulticastClient> 对象的 <xref:System.Object.Finalize%2A> 方法之前，该对象正在使用的资源不会被释放。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndJoinGroup">
      <MemberSignature Language="C#" Value="public void EndJoinGroup (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndJoinGroup(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpSingleSourceMulticastClient.EndJoinGroup(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndJoinGroup (result As IAsyncResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EndJoinGroup(IAsyncResult ^ result);" />
      <MemberSignature Language="F#" Value="member this.EndJoinGroup : IAsyncResult -&gt; unit" Usage="udpSingleSourceMulticastClient.EndJoinGroup result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result">异步联接操作的结果。</param>
        <summary>完成多播组的异步联接组操作。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.Sockets.UdpSingleSourceMulticastClient.EndJoinGroup%2A>方法完成到套接字的异步绑定，并将操作联接到多播组。  
  
 如果运行时需要，该  <xref:System.Net.Sockets.UdpSingleSourceMulticastClient.EndJoinGroup%2A> 方法还执行策略检查以验证是否允许客户端访问多路广播组。 如果不允许客户端访问， <xref:System.Net.Sockets.SocketException> 则会引发 <xref:System.Net.Sockets.SocketError.AccessDenied> 。  
  
 如果在执行联接组操作时出现套接字错误， <xref:System.Net.Sockets.SocketException> 则会引发。 收到的错误被指定为枚举的成员 <xref:System.Net.Sockets.SocketError> 。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="result" /> 为 null 引用（在 Visual Basic 中为 Nothing）。</exception>
        <exception cref="T:System.ObjectDisposedException">已释放了 <see cref="T:System.Net.Sockets.UdpSingleSourceMulticastClient" />。</exception>
        <exception cref="T:System.Net.Sockets.SocketException">尝试访问套接字时出错。</exception>
      </Docs>
    </Member>
    <Member MemberName="EndReceiveFromSource">
      <MemberSignature Language="C#" Value="public int EndReceiveFromSource (IAsyncResult result, out int sourcePort);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 EndReceiveFromSource(class System.IAsyncResult result, [out] int32&amp; sourcePort) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpSingleSourceMulticastClient.EndReceiveFromSource(System.IAsyncResult,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndReceiveFromSource (result As IAsyncResult, ByRef sourcePort As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int EndReceiveFromSource(IAsyncResult ^ result, [Runtime::InteropServices::Out] int % sourcePort);" />
      <MemberSignature Language="F#" Value="member this.EndReceiveFromSource : IAsyncResult * int -&gt; int" Usage="udpSingleSourceMulticastClient.EndReceiveFromSource (result, sourcePort)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
        <Parameter Name="sourcePort" Type="System.Int32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="result">异步接收操作的结果。</param>
        <param name="sourcePort">从中接收数据包的源终结点。</param>
        <summary>完成从已联接的多播组接收数据包的异步操作并提供接收到的信息。</summary>
        <returns>存储在传递给 <see cref="M:System.Net.Sockets.UdpSingleSourceMulticastClient.BeginReceiveFromSource(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> 方法的 <paramref name="buffer" /> 参数中的消息的长度（以字节为单位）。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.Sockets.UdpSingleSourceMulticastClient.EndReceiveFromSource%2A>方法完成异步操作以接收来自多路广播组中单个源的数据包。  
  
 如果在执行接收操作时出现套接字错误，则 <xref:System.Net.Sockets.SocketException> 会引发。 收到的错误被指定为枚举的成员 <xref:System.Net.Sockets.SocketError> 。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="result" /> 为 null 引用（在 Visual Basic 中为 Nothing）。</exception>
        <exception cref="T:System.InvalidOperationException">尚未联接多播组。</exception>
        <exception cref="T:System.ObjectDisposedException">已释放了 <see cref="T:System.Net.Sockets.UdpSingleSourceMulticastClient" />。</exception>
        <exception cref="T:System.Net.Sockets.SocketException">尝试访问套接字时出错。</exception>
      </Docs>
    </Member>
    <Member MemberName="EndSendToSource">
      <MemberSignature Language="C#" Value="public void EndSendToSource (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndSendToSource(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpSingleSourceMulticastClient.EndSendToSource(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndSendToSource (result As IAsyncResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EndSendToSource(IAsyncResult ^ result);" />
      <MemberSignature Language="F#" Value="member this.EndSendToSource : IAsyncResult -&gt; unit" Usage="udpSingleSourceMulticastClient.EndSendToSource result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result">异步发送操作的结果。</param>
        <summary>完成向单个源发送单播数据包的操作。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.Sockets.UdpSingleSourceMulticastClient.EndSendToSource%2A>方法完成将数据包发送到以前指定的单一源的异步操作。  
  
 如果在执行接收操作时出现套接字错误，则 <xref:System.Net.Sockets.SocketException> 会引发。 收到的错误被指定为枚举的成员 <xref:System.Net.Sockets.SocketError> 。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="result" /> 为 null 引用（在 Visual Basic 中为 Nothing）。</exception>
        <exception cref="T:System.InvalidOperationException">尚未联接多播组。</exception>
        <exception cref="T:System.ObjectDisposedException">已释放了 <see cref="T:System.Net.Sockets.UdpSingleSourceMulticastClient" />。</exception>
        <exception cref="T:System.Net.Sockets.SocketException">尝试访问套接字时出错。</exception>
      </Docs>
    </Member>
    <Member MemberName="ReceiveBufferSize">
      <MemberSignature Language="C#" Value="public int ReceiveBufferSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ReceiveBufferSize" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.UdpSingleSourceMulticastClient.ReceiveBufferSize" />
      <MemberSignature Language="VB.NET" Value="Public Property ReceiveBufferSize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ReceiveBufferSize { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.ReceiveBufferSize : int with get, set" Usage="System.Net.Sockets.UdpSingleSourceMulticastClient.ReceiveBufferSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:System.Net.Sockets.Socket" /> 的接收缓冲区的大小（以字节为单位），该缓冲区用于此 <see cref="T:System.Net.Sockets.UdpSingleSourceMulticastClient" /> 实例上的多播接收操作。</summary>
        <value>返回 <see cref="T:System.Int32" />。  
  
接收缓冲区的大小（以字节为单位）。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `ReceiveBufferSize`属性获取或设置 <xref:System.Net.Sockets.Socket> 用于此实例上的多播接收操作的基础的接收缓冲区的大小（以字节为单位） <xref:System.Net.Sockets.UdpSingleSourceMulticastClient> 。 具体而言， `ReceiveBufferSize` 属性控制堆栈在包到达时使用的缓冲区大小，但应用程序尚未调用 <xref:System.Net.Sockets.UdpSingleSourceMulticastClient.BeginReceiveFromSource%2A> 方法。 如果此缓冲区已满，并且包在应用程序调用和方法之前继续存在 <xref:System.Net.Sockets.UdpSingleSourceMulticastClient.BeginReceiveFromSource%2A> <xref:System.Net.Sockets.UdpSingleSourceMulticastClient.EndReceiveFromSource%2A> ，则将删除旧的数据包。 应用程序将永远无法接收旧数据包，并将在调用方法时接收到较新的数据包 <xref:System.Net.Sockets.UdpSingleSourceMulticastClient.BeginReceiveFromSource%2A> 。  
  
 Windows 上的接收缓冲区的默认大小为8192。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">指定的缓冲区大小小于 0。</exception>
        <exception cref="T:System.InvalidOperationException">尚未联接多播组。</exception>
        <exception cref="T:System.ObjectDisposedException">已释放了 <see cref="T:System.Net.Sockets.UdpSingleSourceMulticastClient" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="SendBufferSize">
      <MemberSignature Language="C#" Value="public int SendBufferSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 SendBufferSize" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.UdpSingleSourceMulticastClient.SendBufferSize" />
      <MemberSignature Language="VB.NET" Value="Public Property SendBufferSize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int SendBufferSize { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.SendBufferSize : int with get, set" Usage="System.Net.Sockets.UdpSingleSourceMulticastClient.SendBufferSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:System.Net.Sockets.Socket" /> 的发送缓冲区的大小（以字节为单位），该缓冲区用于此 <see cref="T:System.Net.Sockets.UdpSingleSourceMulticastClient" /> 实例上的多播发送操作。</summary>
        <value>返回 <see cref="T:System.Int32" />。  
  
发送缓冲区的大小（以字节为单位）。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 SendBufferSize 属性获取或设置基础的发送缓冲区的大小（以字节为单位），该缓冲区 <xref:System.Net.Sockets.Socket> 用于此实例上的多播发送操作 <xref:System.Net.Sockets.UdpSingleSourceMulticastClient> 。  
  
 在 Mac OS X 上， <xref:System.Net.Sockets.UdpSingleSourceMulticastClient.SendBufferSize%2A> 属性控制在其他方法启动失败之前，网络堆栈等待发送的缓冲区中的字节数 <xref:System.Net.Sockets.UdpSingleSourceMulticastClient.BeginSendToSource%2A> 。 如果应用程序在较短时间内发送大量 UDP 数据包，则 Mac OS X 上的应用程序可能需要与此属性相关。  
  
 在 Windows 上， <xref:System.Net.Sockets.UdpSingleSourceMulticastClient.BeginSendToSource%2A> <xref:System.Net.Sockets.UdpSingleSourceMulticastClient.SendBufferSize%2A> 如果发送缓冲区已满，调用方法将需要更长的时间来调用回调。 <xref:System.Net.Sockets.UdpSingleSourceMulticastClient.SendBufferSize%2A>属性仅控制用户的缓冲区是否在物理内存中保持锁定状态，直到发送完成。  
  
 Windows 上的发送缓冲区的默认大小为8192。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">指定的缓冲区大小小于 0。</exception>
        <exception cref="T:System.InvalidOperationException">尚未联接多播组。</exception>
        <exception cref="T:System.ObjectDisposedException">已释放了 <see cref="T:System.Net.Sockets.UdpSingleSourceMulticastClient" />。</exception>
      </Docs>
    </Member>
  </Members>
</Type>
