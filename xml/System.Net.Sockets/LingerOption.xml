<Type Name="LingerOption" FullName="System.Net.Sockets.LingerOption">
  <Metadata><Meta Name="ms.openlocfilehash" Value="cbcb310a6b0d7e4296e686bd4293a448cc65cf55" /><Meta Name="ms.sourcegitcommit" Value="c982ad9e10a242d90f1e631b5981570f9e5d9f34" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/10/2020" /><Meta Name="ms.locfileid" Value="89787243" /></Metadata><TypeSignature Language="C#" Value="public class LingerOption" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit LingerOption extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Net.Sockets.LingerOption" />
  <TypeSignature Language="VB.NET" Value="Public Class LingerOption" />
  <TypeSignature Language="C++ CLI" Value="public ref class LingerOption" />
  <TypeSignature Language="F#" Value="type LingerOption = class" />
  <AssemblyInfo>
    <AssemblyName>System.Net.Sockets</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Net.Sockets" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>指定在调用 <see cref="T:System.Net.Sockets.Socket" /> 或 <see cref="M:System.Net.Sockets.Socket.Close" /> 方法之后，如果仍有数据要发送，<see cref="M:System.Net.Sockets.TcpClient.Close" /> 是否保持连接以及保持多长时间。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在应用程序调用或方法之后，传出网络缓冲区中可能仍有可用的数据 <xref:System.Net.Sockets.Socket> <xref:System.Net.Sockets.TcpClient> 。 如果要指定在 <xref:System.Net.Sockets.Socket> 关闭后将尝试传输未发送数据的时间量，请创建 <xref:System.Net.Sockets.LingerOption> `enable` 参数设置为的 `true` ，并将 `seconds` 参数设置为所需的时间量。 `seconds`参数用于指示在 <xref:System.Net.Sockets.Socket> 超时之前要保持连接的时间长度。如果您不希望在 <xref:System.Net.Sockets.Socket> 关闭后保持连接的时间长度，请创建一个 <xref:System.Net.Sockets.LingerOption> 实例，并将 `enable` 参数设置为 `true` ，并将 `seconds` 参数设置为零。 在这种情况下， <xref:System.Net.Sockets.Socket> 将立即关闭，任何未发送的数据都将丢失。 创建后，将传递 <xref:System.Net.Sockets.LingerOption> 给 <xref:System.Net.Sockets.Socket.SetSocketOption%2A?displayProperty=nameWithType> 方法。 如果要使用发送和接收数据 <xref:System.Net.Sockets.TcpClient> ，请 <xref:System.Net.Sockets.LingerOption> 在属性中设置实例 <xref:System.Net.Sockets.TcpClient.LingerState%2A?displayProperty=nameWithType> 。  
  
 IP 堆栈根据连接的往返时间来计算要使用的默认 IP 协议超时期限。 在大多数情况下，堆栈计算出的超时比应用程序定义的超时更密切。 当未设置属性时，这是的默认行为 <xref:System.Net.Sockets.Socket> <xref:System.Net.Sockets.Socket.LingerState%2A> ， <xref:System.Net.Sockets.TcpClient> 如果 <xref:System.Net.Sockets.TcpClient.LingerState%2A> 未设置属性，则为。  
  
   
  
## Examples  
 下面的示例将以前创建的设置 <xref:System.Net.Sockets.Socket> 为在调用方法后逗留一秒钟 <xref:System.Net.Sockets.Socket.Close%2A> 。  
  
 [!code-cpp[Classic LingerOption Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic LingerOption Example/CPP/source.cpp#1)]
 [!code-csharp[Classic LingerOption Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic LingerOption Example/CS/source.cs#1)]
 [!code-vb[Classic LingerOption Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic LingerOption Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LingerOption (bool enable, int seconds);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool enable, int32 seconds) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.LingerOption.#ctor(System.Boolean,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (enable As Boolean, seconds As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LingerOption(bool enable, int seconds);" />
      <MemberSignature Language="F#" Value="new System.Net.Sockets.LingerOption : bool * int -&gt; System.Net.Sockets.LingerOption" Usage="new System.Net.Sockets.LingerOption (enable, seconds)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="enable" Type="System.Boolean" />
        <Parameter Name="seconds" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="enable">如果调用 <see cref="M:System.Net.Sockets.Socket.Close" /> 方法后保持连接，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
        <param name="seconds">调用 <see cref="M:System.Net.Sockets.Socket.Close" /> 方法后保持连接的秒数。</param>
        <summary>初始化 <see cref="T:System.Net.Sockets.LingerOption" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 关闭后，传出网络缓冲区中可能仍有可用数据 <xref:System.Net.Sockets.Socket> 。 使用 `enable` 参数指定是否希望在 <xref:System.Net.Sockets.Socket> 调用 close 方法后继续传输未发送的数据。 使用 `seconds` 参数来指示希望在 <xref:System.Net.Sockets.Socket> 超时前尝试传输未发送的数据的时间长度。如果为参数指定 `true` `enable` ，并为参数指定 0 `seconds` ，则在 <xref:System.Net.Sockets.Socket> 传出网络缓冲区中没有剩余的数据之前，将尝试发送数据。 如果 `false` 为 `enable` 参数指定，则 <xref:System.Net.Sockets.Socket> 将立即关闭，任何未发送的数据都将丢失。  
  
 下表描述了在 <xref:System.Net.Sockets.Socket.Close%2A?displayProperty=nameWithType> <xref:System.Net.Sockets.TcpClient.Close%2A?displayProperty=nameWithType> `enable` `seconds` 或属性中创建和设置 T:System.Net.Sockets.LingerOption 实例时，如何根据和参数的可能值对和方法的 <xref:System.Net.Sockets.Socket.LingerState%2A?displayProperty=nameWithType> 行为进行了说明 <xref:System.Net.Sockets.TcpClient.LingerState%2A?displayProperty=nameWithType> 。  
  
|`enable`|`seconds`|行为|  
|--------------|---------------|--------------|  
|`false` (禁用) ，默认值|超时不适用， (默认) 。|尝试发送面向连接的套接字的挂起数据 (TCP，例如) ，直到默认 IP 协议超时过期。|  
|`true` (启用) |非零超时|尝试发送挂起的数据直到指定的超时过期，如果尝试失败，Winsock 将重置连接。|  
|`true` (启用) |零超时。|丢弃所有挂起的数据。 对于面向连接的套接字 (TCP，如) ，Winsock 重置连接。|  
  
 IP 堆栈根据连接的往返时间来计算要使用的默认 IP 协议超时期限。 在大多数情况下，堆栈计算出的超时比应用程序定义的超时更密切。 当未设置属性时，这是套接字的默认行为 <xref:System.Net.Sockets.Socket.LingerState%2A> 。  
  
 当 <xref:System.Net.Sockets.LingerOption.LingerTime%2A> 属性中存储的属性 <xref:System.Net.Sockets.Socket.LingerState%2A> 设置为大于默认 ip 协议超时值时，默认的 ip 协议超时值仍将应用并将替代。  
  
   
  
## Examples  
 下面的示例将以前创建的设置 <xref:System.Net.Sockets.Socket> 为在调用方法后逗留一秒钟 <xref:System.Net.Sockets.Socket.Close%2A> 。  
  
 [!code-cpp[Classic LingerOption Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic LingerOption Example/CPP/source.cpp#1)]
 [!code-csharp[Classic LingerOption Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic LingerOption Example/CS/source.cs#1)]
 [!code-vb[Classic LingerOption Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic LingerOption Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Enabled">
      <MemberSignature Language="C#" Value="public bool Enabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Enabled" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.LingerOption.Enabled" />
      <MemberSignature Language="VB.NET" Value="Public Property Enabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Enabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Enabled : bool with get, set" Usage="System.Net.Sockets.LingerOption.Enabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，指示 <see cref="T:System.Net.Sockets.Socket" /> 关闭后是否逗留。</summary>
        <value>如果 <see cref="T:System.Net.Sockets.Socket" /> 在调用 <see cref="M:System.Net.Sockets.Socket.Close" /> 之后将逗留，则为 <see langword="true" />；否则，为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以使用 <xref:System.Net.Sockets.LingerOption.Enabled%2A> 属性来确定 <xref:System.Net.Sockets.Socket> 关闭后是否会逗留。 将此值更改为 `true` 或 `false` ，并将更改传递 <xref:System.Net.Sockets.LingerOption> 给方法， <xref:System.Net.Sockets.Socket.SetSocketOption%2A> 或设置 <xref:System.Net.Sockets.TcpClient.LingerState%2A> 或 <xref:System.Net.Sockets.Socket.LingerState%2A> property.to 禁用或启用延迟。  
  
 下表介绍属性的可能值 <xref:System.Net.Sockets.LingerOption.Enabled%2A> 和 <xref:System.Net.Sockets.LingerOption.LingerTime%2A> 存储在属性中的属性的行为 <xref:System.Net.Sockets.Socket.LingerState%2A> 。  
  
|`enable`|`seconds`|行为|  
|--------------|---------------|--------------|  
|`false` (禁用) ，默认值|超时不适用， (默认) 。|尝试发送面向连接的套接字的挂起数据 (TCP，例如) ，直到默认 IP 协议超时过期。|  
|`true` (启用) |非零超时|尝试发送挂起的数据直到指定的超时过期，如果尝试失败，Winsock 将重置连接。|  
|`true` (启用) |零超时。|丢弃所有挂起的数据。 对于面向连接的套接字 (TCP，如) ，Winsock 重置连接。|  
  
 IP 堆栈根据连接的往返时间来计算要使用的默认 IP 协议超时期限。 在大多数情况下，堆栈计算出的超时比应用程序定义的超时更密切。 当未设置属性时，这是套接字的默认行为 <xref:System.Net.Sockets.Socket.LingerState%2A> 。  
  
 当 <xref:System.Net.Sockets.LingerOption.LingerTime%2A> 属性中存储的属性 <xref:System.Net.Sockets.Socket.LingerState%2A> 设置为大于默认 ip 协议超时值时，默认的 ip 协议超时值仍将应用并将替代。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LingerTime">
      <MemberSignature Language="C#" Value="public int LingerTime { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 LingerTime" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.LingerOption.LingerTime" />
      <MemberSignature Language="VB.NET" Value="Public Property LingerTime As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int LingerTime { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.LingerTime : int with get, set" Usage="System.Net.Sockets.LingerOption.LingerTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置在调用 <see cref="M:System.Net.Sockets.Socket.Close" /> 方法后仍有数据要发送的情况下将保持连接的时间量。</summary>
        <value>调用 <see cref="M:System.Net.Sockets.Socket.Close" /> 后保持连接的时间量（以秒为单位）。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果要确定已关闭 <xref:System.Net.Sockets.Socket> 将在超时前尝试传输未发送的数据的时间长度，请使用此值。你还可以将此值设置为所需的超时期限（以秒为单位）。  
  
 如果 <xref:System.Net.Sockets.LingerOption.Enabled%2A> 属性为 `true` ，并且将设置 <xref:System.Net.Sockets.LingerOption.LingerTime%2A> 为0，则将 <xref:System.Net.Sockets.Socket> 丢弃要发送到传出网络缓冲区中的任何挂起的数据。 如果更改此值，则必须将更改后的 <xref:System.Net.Sockets.LingerOption> 实例传递给 <xref:System.Net.Sockets.Socket.SetSocketOption%2A> 方法，或设置 <xref:System.Net.Sockets.TcpClient.LingerState%2A> 或 <xref:System.Net.Sockets.Socket.LingerState%2A> 属性。  
  
 下表介绍属性的可能值 <xref:System.Net.Sockets.LingerOption.Enabled%2A> 和 <xref:System.Net.Sockets.LingerOption.LingerTime%2A> 存储在属性中的属性的行为 <xref:System.Net.Sockets.Socket.LingerState%2A> 。  
  
|`enable`|`seconds`|行为|  
|--------------|---------------|--------------|  
|`false` (禁用) ，默认值|超时不适用， (默认) 。|尝试发送面向连接的套接字的挂起数据 (TCP，例如) ，直到默认 IP 协议超时过期。|  
|`true` (启用) |非零超时|尝试发送挂起的数据直到指定的超时过期，如果尝试失败，Winsock 将重置连接。|  
|`true` (启用) |零超时。|丢弃所有挂起的数据。 对于面向连接的套接字 (TCP，如) ，Winsock 重置连接。|  
  
 IP 堆栈根据连接的往返时间来计算要使用的默认 IP 协议超时期限。 在大多数情况下，堆栈计算出的超时比应用程序定义的超时更密切。 当未设置属性时，这是套接字的默认行为 <xref:System.Net.Sockets.Socket.LingerState%2A> 。  
  
 当 <xref:System.Net.Sockets.LingerOption.LingerTime%2A> 属性中存储的属性 <xref:System.Net.Sockets.Socket.LingerState%2A> 设置为大于默认 ip 协议超时值时，默认的 ip 协议超时值仍将应用并将替代。  
  
   
  
## Examples  
 下面的示例显示此属性的值。  
  
 [!code-cpp[Socket_Socket_Options#2](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Socket_Options/CPP/source.cpp#2)]
 [!code-csharp[Socket_Socket_Options#2](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Socket_Options/CS/source.cs#2)]
 [!code-vb[Socket_Socket_Options#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Socket_Options/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
