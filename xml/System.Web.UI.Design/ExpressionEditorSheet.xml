<Type Name="ExpressionEditorSheet" FullName="System.Web.UI.Design.ExpressionEditorSheet">
  <Metadata><Meta Name="ms.openlocfilehash" Value="0f9bc61821e174025406867d1abdf98ebad0502f" /><Meta Name="ms.sourcegitcommit" Value="b53d35b4a410c949742abd4c6a989d1af5357bca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="86614768" /></Metadata><TypeSignature Language="C#" Value="public abstract class ExpressionEditorSheet" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit ExpressionEditorSheet extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.Design.ExpressionEditorSheet" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ExpressionEditorSheet" />
  <TypeSignature Language="C++ CLI" Value="public ref class ExpressionEditorSheet abstract" />
  <TypeSignature Language="F#" Value="type ExpressionEditorSheet = class" />
  <AssemblyInfo>
    <AssemblyName>System.Design</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="d8184-101">表示自定义表达式的设计时编辑器表。</span><span class="sxs-lookup"><span data-stu-id="d8184-101">Represents a design-time editor sheet for a custom expression.</span></span> <span data-ttu-id="d8184-102">必须继承此类。</span><span class="sxs-lookup"><span data-stu-id="d8184-102">This class must be inherited.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d8184-103">自定义表达式编辑器表使开发人员可以在设计时设置自定义表达式的属性。</span><span class="sxs-lookup"><span data-stu-id="d8184-103">A custom expression editor sheet lets a developer set properties on a custom expression at design-time.</span></span> <span data-ttu-id="d8184-104">可以使用表达式字符串设置控件属性值;表达式字符串是在运行时由表达式生成器在设计时计算的。</span><span class="sxs-lookup"><span data-stu-id="d8184-104">Control property values can be set using expression strings; the expression strings are evaluated at run time by an expression builder and at design time by an expression editor.</span></span>  
  
 <span data-ttu-id="d8184-105">当您 <xref:System.Web.UI.Design.HtmlControlDesigner.Expressions%2A> 在 "设计时属性" 网格中浏览控件的属性时，可视化设计器会显示一个对话框，用于设置为控件属性提供值的表达式。</span><span class="sxs-lookup"><span data-stu-id="d8184-105">When you browse the <xref:System.Web.UI.Design.HtmlControlDesigner.Expressions%2A> property for a control in the design-time properties grid, the visual designer displays a dialog box to set expressions that provide the value for a control property.</span></span> <span data-ttu-id="d8184-106">您可以选择基于表达式前缀列表的表达式类型。</span><span class="sxs-lookup"><span data-stu-id="d8184-106">You can select the expression type based on a list of expression prefixes.</span></span> <span data-ttu-id="d8184-107">从列表中选择表达式前缀时，可视化设计器会使用关联的 <xref:System.Web.UI.Design.ExpressionEditor> 和 <xref:System.Web.UI.Design.ExpressionEditorSheet> 对象根据该类型的表达式的语法来计算和转换表达式字符串。</span><span class="sxs-lookup"><span data-stu-id="d8184-107">When you select an expression prefix from the list, the visual designer uses the associated <xref:System.Web.UI.Design.ExpressionEditor> and <xref:System.Web.UI.Design.ExpressionEditorSheet> objects to evaluate and convert the expression string based on the syntax for that type of expression.</span></span> <span data-ttu-id="d8184-108">可视化设计器使用表达式编辑器表属性来提示输入一个或多个合并到自定义表达式字符串的字符串。</span><span class="sxs-lookup"><span data-stu-id="d8184-108">The visual designer uses expression editor sheet properties to prompt for one or more strings that combine into the custom expression string.</span></span>  
  
 <span data-ttu-id="d8184-109">通常，若要在设计时提供新的表达式类型，请定义唯一的表达式前缀，并提供自定义 <xref:System.Web.Compilation.ExpressionBuilder> 和 <xref:System.Web.UI.Design.ExpressionEditor> 实现。</span><span class="sxs-lookup"><span data-stu-id="d8184-109">Typically, to supply a new expression type at design time, you define a unique expression prefix and provide custom <xref:System.Web.Compilation.ExpressionBuilder> and <xref:System.Web.UI.Design.ExpressionEditor> implementations.</span></span> <span data-ttu-id="d8184-110">还可以提供自定义 <xref:System.Web.UI.Design.ExpressionEditorSheet> 实现，该实现定义用于构成表达式的属性。</span><span class="sxs-lookup"><span data-stu-id="d8184-110">Optionally, you can provide a custom <xref:System.Web.UI.Design.ExpressionEditorSheet> implementation that defines properties that are used to form the expression.</span></span> <span data-ttu-id="d8184-111">若要将表达式前缀与表达式生成器和表达式编辑器相关联，请将 <xref:System.Web.Compilation.ExpressionEditorAttribute> 属性和属性应用于 <xref:System.Web.Compilation.ExpressionPrefixAttribute> 自定义 <xref:System.Web.Configuration.ExpressionBuilder> 类，然后在 Web 配置文件中的元素中配置表达式生成器的表达式前缀 `expressionBuilders` 。</span><span class="sxs-lookup"><span data-stu-id="d8184-111">To associate an expression prefix with an expression builder and an expression editor, apply the <xref:System.Web.Compilation.ExpressionEditorAttribute> attribute and an <xref:System.Web.Compilation.ExpressionPrefixAttribute> attribute to the custom <xref:System.Web.Configuration.ExpressionBuilder> class, and then configure the expression prefix for an expression builder in the `expressionBuilders` element in the Web configuration file.</span></span>  
  
 <span data-ttu-id="d8184-112">方法的默认实现将 <xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet%2A> 返回一个基本编辑器表，该工作表使用单个输入字符串来构成表达式。</span><span class="sxs-lookup"><span data-stu-id="d8184-112">The default implementation of the <xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet%2A> method returns a basic editor sheet, which uses a single input string to form the expression.</span></span> <span data-ttu-id="d8184-113">派生自的自定义表达式编辑器 <xref:System.Web.UI.Design.ExpressionEditor> 可以重写 <xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet%2A> 方法以返回自定义编辑器表实现。</span><span class="sxs-lookup"><span data-stu-id="d8184-113">Custom expression editors that are derived from the <xref:System.Web.UI.Design.ExpressionEditor> can override the <xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet%2A> method to return a custom editor sheet implementation.</span></span> <span data-ttu-id="d8184-114">通常，自定义编辑器表包含多个用于生成表达式字符串的属性。</span><span class="sxs-lookup"><span data-stu-id="d8184-114">Typically, a custom editor sheet contains multiple properties that are used to build the expression string.</span></span> <span data-ttu-id="d8184-115"><xref:System.Web.UI.Design.ExpressionEditorSheet.GetExpression%2A>方法根据当前的表达式属性返回生成的表达式字符串。</span><span class="sxs-lookup"><span data-stu-id="d8184-115">The <xref:System.Web.UI.Design.ExpressionEditorSheet.GetExpression%2A> method returns the resulting expression string based on the current expression properties.</span></span>  
  
 <span data-ttu-id="d8184-116">例如， <xref:System.Web.UI.Design.ResourceExpressionEditor> 类派生自 <xref:System.Web.UI.Design.ExpressionEditor> 类，并提供用于在设计时计算资源字符串引用并将资源字符串引用与控件属性关联的实现。</span><span class="sxs-lookup"><span data-stu-id="d8184-116">For example, the <xref:System.Web.UI.Design.ResourceExpressionEditor> class derives from the <xref:System.Web.UI.Design.ExpressionEditor> class and provides an implementation for evaluating and associating a resource string reference with a control property at design time.</span></span> <span data-ttu-id="d8184-117"><xref:System.Web.Compilation.ResourceExpressionBuilder>类与表达式前缀和实现相关联 `Resources` <xref:System.Web.UI.Design.ResourceExpressionEditor> 。</span><span class="sxs-lookup"><span data-stu-id="d8184-117">The <xref:System.Web.Compilation.ResourceExpressionBuilder> class is associated with the expression prefix `Resources` and the <xref:System.Web.UI.Design.ResourceExpressionEditor> implementation.</span></span> <span data-ttu-id="d8184-118"><xref:System.Web.UI.Design.ResourceExpressionEditor.GetExpressionEditorSheet%2A>方法返回 <xref:System.Web.UI.Design.ResourceExpressionEditorSheet> ，它定义构成资源引用表达式的各个属性。</span><span class="sxs-lookup"><span data-stu-id="d8184-118">The <xref:System.Web.UI.Design.ResourceExpressionEditor.GetExpressionEditorSheet%2A> method returns a <xref:System.Web.UI.Design.ResourceExpressionEditorSheet>, which defines the individual properties that form a resource reference expression.</span></span>  
  
 <span data-ttu-id="d8184-119">从类继承时 <xref:System.Web.UI.Design.ExpressionEditorSheet> ，必须重写以下成员：</span><span class="sxs-lookup"><span data-stu-id="d8184-119">When you inherit from the <xref:System.Web.UI.Design.ExpressionEditorSheet> class, you must override the following members:</span></span>  
  
-   <span data-ttu-id="d8184-120"><xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet%2A>返回自定义编辑器表实现的方法。</span><span class="sxs-lookup"><span data-stu-id="d8184-120">The <xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet%2A> method to return a custom editor sheet implementation.</span></span>  
  
-   <span data-ttu-id="d8184-121">用于 <xref:System.Web.UI.Design.ExpressionEditorSheet.%23ctor%2A> 实现表达式编辑器表实现的自定义初始化操作的构造函数。</span><span class="sxs-lookup"><span data-stu-id="d8184-121">The <xref:System.Web.UI.Design.ExpressionEditorSheet.%23ctor%2A> constructor to implement custom initialization actions for your expression editor sheet implementation.</span></span>  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para><span data-ttu-id="d8184-122"><see cref="T:System.Web.UI.Design.ExpressionEditorSheet" />如果要为控件属性值定义新的表达式类型，并且想要基于多个表达式属性值生成表达式字符串，请从类派生自定义表达式编辑器表。</span><span class="sxs-lookup"><span data-stu-id="d8184-122">Derive a custom expression editor sheet from the <see cref="T:System.Web.UI.Design.ExpressionEditorSheet" /> class, if you are defining a new expression type for control property values and you want to build the expression string based on multiple expression property values.</span></span> <span data-ttu-id="d8184-123">派生类实现应包含以下内容：</span><span class="sxs-lookup"><span data-stu-id="d8184-123">A derived class implementation should contain the following:</span></span> 
<span data-ttu-id="d8184-124">-可在设计时设置的表达式字符串中的每个非重复值的公共属性。</span><span class="sxs-lookup"><span data-stu-id="d8184-124">-   A public property for each distinct value in the expression string that can be set at design time.</span></span>  
  
<span data-ttu-id="d8184-125">- <see cref="M:System.Web.UI.Design.ExpressionEditorSheet.GetExpression" /> 从编辑器表属性值组成自定义表达式字符串的方法的实现。</span><span class="sxs-lookup"><span data-stu-id="d8184-125">-   An implementation of the <see cref="M:System.Web.UI.Design.ExpressionEditorSheet.GetExpression" /> method that forms the custom expression string from the editor sheet property values.</span></span>  
  
<span data-ttu-id="d8184-126">-（可选）一个设置编辑器表属性的初始值的构造函数实现。</span><span class="sxs-lookup"><span data-stu-id="d8184-126">-   Optionally, a constructor implementation that sets the initial values of the editor sheet properties.</span></span>  
  
<span data-ttu-id="d8184-127">关联的自定义表达式编辑器类在方法中创建一个派生编辑器表的实例 <see cref="M:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet(System.String,System.IServiceProvider)" /> ，使用该控件属性的当前表达式字符串来初始化该实例，并将该实例返回到可视化设计器。</span><span class="sxs-lookup"><span data-stu-id="d8184-127">The associated custom expression editor class creates an instance of the derived editor sheet in the <see cref="M:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet(System.String,System.IServiceProvider)" /> method, initializes that instance with the current expression string set for the control property, and returns the instance to the visual designer.</span></span> <span data-ttu-id="d8184-128">可视化设计器允许您设置表达式表属性，然后调用 <see cref="M:System.Web.UI.Design.ExpressionEditorSheet.GetExpression" /> 方法，以从输入表达式表属性值中形成表达式字符串。</span><span class="sxs-lookup"><span data-stu-id="d8184-128">The visual designer allows you to set the expression sheet properties, and then calls the <see cref="M:System.Web.UI.Design.ExpressionEditorSheet.GetExpression" /> method to form the expression string from the input expression sheet property values.</span></span></para></block>
    <altmember cref="T:System.Web.UI.Design.ExpressionEditor" />
    <altmember cref="M:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet(System.String,System.IServiceProvider)" />
    <altmember cref="T:System.Web.UI.Design.ResourceExpressionEditorSheet" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ExpressionEditorSheet (IServiceProvider serviceProvider);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.IServiceProvider serviceProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Design.ExpressionEditorSheet.#ctor(System.IServiceProvider)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (serviceProvider As IServiceProvider)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ExpressionEditorSheet(IServiceProvider ^ serviceProvider);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.Design.ExpressionEditorSheet : IServiceProvider -&gt; System.Web.UI.Design.ExpressionEditorSheet" Usage="new System.Web.UI.Design.ExpressionEditorSheet serviceProvider" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="serviceProvider" Type="System.IServiceProvider" />
      </Parameters>
      <Docs>
        <param name="serviceProvider"><span data-ttu-id="d8184-129">一个由设计器宿主提供的服务提供程序实现，用于获取其他设计时服务。</span><span class="sxs-lookup"><span data-stu-id="d8184-129">A service provider implementation supplied by the designer host, used to obtain additional design-time services.</span></span></param>
        <summary><span data-ttu-id="d8184-130">初始化 <see cref="T:System.Web.UI.Design.ExpressionEditorSheet" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="d8184-130">Initializes a new instance of the <see cref="T:System.Web.UI.Design.ExpressionEditorSheet" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d8184-131">由于 <xref:System.Web.UI.Design.ExpressionEditorSheet> 类是抽象类，因此不能 <xref:System.Web.UI.Design.ExpressionEditorSheet> 使用构造函数直接创建的实例 <xref:System.Web.UI.Design.ExpressionEditorSheet.%23ctor%2A> 。</span><span class="sxs-lookup"><span data-stu-id="d8184-131">Because the <xref:System.Web.UI.Design.ExpressionEditorSheet> class is abstract, you cannot create an instance of an <xref:System.Web.UI.Design.ExpressionEditorSheet> directly using the <xref:System.Web.UI.Design.ExpressionEditorSheet.%23ctor%2A> constructor.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="d8184-132">从类派生时 <see cref="T:System.Web.UI.Design.ExpressionEditorSheet" /> ，重写 <see cref="M:System.Web.UI.Design.ExpressionEditorSheet.#ctor(System.IServiceProvider)" /> 构造函数以实现表达式编辑器表实现的自定义初始化操作。</span><span class="sxs-lookup"><span data-stu-id="d8184-132">When deriving from the <see cref="T:System.Web.UI.Design.ExpressionEditorSheet" /> class, override the <see cref="M:System.Web.UI.Design.ExpressionEditorSheet.#ctor(System.IServiceProvider)" /> constructor to implement custom initialization actions for your expression editor sheet implementation.</span></span>  
  
<span data-ttu-id="d8184-133">例如，实现其他表达式属性的自定义表达式编辑器表类可以定义构造函数中的表达式属性的默认值 <see cref="M:System.Web.UI.Design.ExpressionEditorSheet.#ctor(System.IServiceProvider)" /> 。</span><span class="sxs-lookup"><span data-stu-id="d8184-133">For example, a custom expression editor sheet class that implements additional expression properties can define the default values for the expression properties in the <see cref="M:System.Web.UI.Design.ExpressionEditorSheet.#ctor(System.IServiceProvider)" /> constructor.</span></span> <span data-ttu-id="d8184-134">自定义表达式编辑器表类可以定义其他公共构造函数重载，这些重载使用输入参数值来设置表达式属性的初始值。</span><span class="sxs-lookup"><span data-stu-id="d8184-134">A custom expression editor sheet class can define additional public constructor overloads that use input parameter values to set the initial values for the expression properties.</span></span></para></block>
        <altmember cref="Overload:System.Web.UI.Design.ExpressionEditor.GetExpressionEditor" />
        <altmember cref="T:System.Web.UI.Design.ExpressionEditor" />
        <altmember cref="T:System.Web.UI.Design.ResourceExpressionEditorSheet" />
      </Docs>
    </Member>
    <Member MemberName="GetExpression">
      <MemberSignature Language="C#" Value="public abstract string GetExpression ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetExpression() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Design.ExpressionEditorSheet.GetExpression" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetExpression () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::String ^ GetExpression();" />
      <MemberSignature Language="F#" Value="abstract member GetExpression : unit -&gt; string" Usage="expressionEditorSheet.GetExpression " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="d8184-135">当在派生类中重写时，返回由表达式编辑器表属性值组成的表达式字符串。</span><span class="sxs-lookup"><span data-stu-id="d8184-135">When overridden in a derived class, returns the expression string that is formed by the expression editor sheet property values.</span></span></summary>
        <returns><span data-ttu-id="d8184-136">当前属性值的自定义表达式字符串。</span><span class="sxs-lookup"><span data-stu-id="d8184-136">The custom expression string for the current property values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d8184-137">自定义表达式编辑器表包含多个表达式属性的设计时设置，这些属性组合起来形成一个表达式字符串。</span><span class="sxs-lookup"><span data-stu-id="d8184-137">A custom expression editor sheet contains design-time settings for multiple expression properties, which are combined to form an expression string.</span></span> <span data-ttu-id="d8184-138">可以使用表达式字符串设置控件属性值;表达式字符串是在运行时由表达式生成器计算得出的。</span><span class="sxs-lookup"><span data-stu-id="d8184-138">Control property values can be set using expression strings; the expression strings are evaluated at run time by an expression builder.</span></span>  
  
 <span data-ttu-id="d8184-139"><xref:System.Web.UI.Design.ExpressionEditorSheet.GetExpression%2A>方法返回从当前表达式属性生成的表达式字符串。</span><span class="sxs-lookup"><span data-stu-id="d8184-139">The <xref:System.Web.UI.Design.ExpressionEditorSheet.GetExpression%2A> method returns an expression string that is built from the current expression properties.</span></span> <span data-ttu-id="d8184-140">可视化设计器允许您设置表达式表属性，然后调用 <xref:System.Web.UI.Design.ExpressionEditorSheet.GetExpression%2A> 方法来获取表达式字符串并设置控件属性值。</span><span class="sxs-lookup"><span data-stu-id="d8184-140">The visual designer allows you to set the expression sheet properties, and then calls the <xref:System.Web.UI.Design.ExpressionEditorSheet.GetExpression%2A> method to get the expression string and set the control property value.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="d8184-141"><see cref="T:System.Web.UI.Design.ExpressionEditorSheet" />如果要为控件属性值定义新的表达式类型，并且想要基于多个表达式属性值生成表达式字符串，请从类派生自定义表达式编辑器表。</span><span class="sxs-lookup"><span data-stu-id="d8184-141">Derive a custom expression editor sheet from the <see cref="T:System.Web.UI.Design.ExpressionEditorSheet" /> class, if you are defining a new expression type for control property values and you want to build the expression string based on multiple expression property values.</span></span> <span data-ttu-id="d8184-142">派生类实现应包含以下内容：</span><span class="sxs-lookup"><span data-stu-id="d8184-142">A derived class implementation should contain the following:</span></span> 
<span data-ttu-id="d8184-143">-可在设计时设置的表达式字符串中的每个非重复值的公共属性。</span><span class="sxs-lookup"><span data-stu-id="d8184-143">-   A public property for each distinct value in the expression string that can be set at design time.</span></span>  
  
<span data-ttu-id="d8184-144">- <see cref="M:System.Web.UI.Design.ExpressionEditorSheet.GetExpression" /> 从编辑器表属性值组成自定义表达式字符串的方法的实现。</span><span class="sxs-lookup"><span data-stu-id="d8184-144">-   An implementation of the <see cref="M:System.Web.UI.Design.ExpressionEditorSheet.GetExpression" /> method that forms the custom expression string from the editor sheet property values.</span></span>  
  
<span data-ttu-id="d8184-145">-（可选）一个设置编辑器表属性的初始值的构造函数实现。</span><span class="sxs-lookup"><span data-stu-id="d8184-145">-   Optionally, a constructor implementation that sets the initial values of the editor sheet properties.</span></span>  
  
<span data-ttu-id="d8184-146">关联的自定义表达式编辑器类在方法中创建一个派生编辑器表的实例 <see cref="M:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet(System.String,System.IServiceProvider)" /> ，使用该控件属性的当前表达式字符串来初始化该实例，然后将该实例返回到可视化设计器。</span><span class="sxs-lookup"><span data-stu-id="d8184-146">The associated custom expression editor class creates an instance of the derived editor sheet in the <see cref="M:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet(System.String,System.IServiceProvider)" /> method, initializes that instance with the current expression string set for the control property, and then returns the instance to the visual designer.</span></span> <span data-ttu-id="d8184-147">可视化设计器允许您设置表达式表属性，然后调用 <see cref="M:System.Web.UI.Design.ExpressionEditorSheet.GetExpression" /> 方法，以从输入表达式表属性值中形成表达式字符串。</span><span class="sxs-lookup"><span data-stu-id="d8184-147">The visual designer allows you to set the expression sheet properties, and then calls the <see cref="M:System.Web.UI.Design.ExpressionEditorSheet.GetExpression" /> method to form the expression string from the input expression sheet property values.</span></span></para></block>
        <altmember cref="T:System.Web.UI.Design.ExpressionEditor" />
        <altmember cref="M:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet(System.String,System.IServiceProvider)" />
        <altmember cref="T:System.Web.UI.Design.ResourceExpressionEditorSheet" />
      </Docs>
    </Member>
    <Member MemberName="IsValid">
      <MemberSignature Language="C#" Value="public virtual bool IsValid { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsValid" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.Design.ExpressionEditorSheet.IsValid" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsValid As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsValid { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsValid : bool" Usage="System.Web.UI.Design.ExpressionEditorSheet.IsValid" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="d8184-148">获取一个值，该值指示表达式字符串是否有效。</span><span class="sxs-lookup"><span data-stu-id="d8184-148">Gets a value that indicates whether the expression string is valid.</span></span></summary>
        <value><span data-ttu-id="d8184-149">如果表达式字符串有效，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="d8184-149"><see langword="true" />, if the expression string is valid; otherwise <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d8184-150">此基实现始终返回 `true`。</span><span class="sxs-lookup"><span data-stu-id="d8184-150">This base implementation always returns `true`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.Design.ExpressionEditor" />
        <altmember cref="M:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet(System.String,System.IServiceProvider)" />
        <altmember cref="T:System.Web.UI.Design.ResourceExpressionEditorSheet" />
      </Docs>
    </Member>
    <Member MemberName="ServiceProvider">
      <MemberSignature Language="C#" Value="public IServiceProvider ServiceProvider { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IServiceProvider ServiceProvider" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.Design.ExpressionEditorSheet.ServiceProvider" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ServiceProvider As IServiceProvider" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IServiceProvider ^ ServiceProvider { IServiceProvider ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ServiceProvider : IServiceProvider" Usage="System.Web.UI.Design.ExpressionEditorSheet.ServiceProvider" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IServiceProvider</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="d8184-151">获取表达式编辑器表使用的服务提供程序实现。</span><span class="sxs-lookup"><span data-stu-id="d8184-151">Gets the service provider implementation that is used by the expression editor sheet.</span></span></summary>
        <value><span data-ttu-id="d8184-152">一个 <see cref="T:System.IServiceProvider" />，通常由设计宿主提供，可用于获取其他设计时服务。</span><span class="sxs-lookup"><span data-stu-id="d8184-152">An <see cref="T:System.IServiceProvider" />, typically provided by the design host, that can be used to obtain additional design-time services.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d8184-153">使用 <xref:System.Web.UI.Design.ExpressionEditorSheet.%23ctor%2A> 构造函数设置 <xref:System.Web.UI.Design.ExpressionEditorSheet.ServiceProvider%2A> 自定义表达式编辑器表的实现。</span><span class="sxs-lookup"><span data-stu-id="d8184-153">Use the <xref:System.Web.UI.Design.ExpressionEditorSheet.%23ctor%2A> constructor to set the <xref:System.Web.UI.Design.ExpressionEditorSheet.ServiceProvider%2A> implementation for a custom expression editor sheet.</span></span>  
  
 <span data-ttu-id="d8184-154"><xref:System.Web.UI.Design.ExpressionEditorSheet.ServiceProvider%2A>属性可用于访问设计器宿主提供的服务。</span><span class="sxs-lookup"><span data-stu-id="d8184-154">The <xref:System.Web.UI.Design.ExpressionEditorSheet.ServiceProvider%2A> property can be used to access services that are provided by the designer host.</span></span> <span data-ttu-id="d8184-155">例如， <xref:System.IServiceProvider.GetService%2A> 使用接口调用方法， <xref:System.Web.UI.Design.IWebApplication> 以访问通过可视化设计器提供的项目项、文档或配置文件详细信息。</span><span class="sxs-lookup"><span data-stu-id="d8184-155">For example, call the <xref:System.IServiceProvider.GetService%2A> method with the <xref:System.Web.UI.Design.IWebApplication> interface to access project items, documents, or configuration file details that are provided through the visual designer.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet(System.String,System.IServiceProvider)" />
        <altmember cref="M:System.Web.UI.Design.ExpressionEditorSheet.#ctor(System.IServiceProvider)" />
      </Docs>
    </Member>
  </Members>
</Type>
