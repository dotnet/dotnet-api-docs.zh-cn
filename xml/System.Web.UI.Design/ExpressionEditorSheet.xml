<Type Name="ExpressionEditorSheet" FullName="System.Web.UI.Design.ExpressionEditorSheet">
  <Metadata><Meta Name="ms.openlocfilehash" Value="0f9bc61821e174025406867d1abdf98ebad0502f" /><Meta Name="ms.sourcegitcommit" Value="b53d35b4a410c949742abd4c6a989d1af5357bca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="86614768" /></Metadata><TypeSignature Language="C#" Value="public abstract class ExpressionEditorSheet" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit ExpressionEditorSheet extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.Design.ExpressionEditorSheet" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ExpressionEditorSheet" />
  <TypeSignature Language="C++ CLI" Value="public ref class ExpressionEditorSheet abstract" />
  <TypeSignature Language="F#" Value="type ExpressionEditorSheet = class" />
  <AssemblyInfo>
    <AssemblyName>System.Design</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>表示自定义表达式的设计时编辑器表。 必须继承此类。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 自定义表达式编辑器表使开发人员可以在设计时设置自定义表达式的属性。 可以使用表达式字符串设置控件属性值;表达式字符串是在运行时由表达式生成器在设计时计算的。  
  
 当您 <xref:System.Web.UI.Design.HtmlControlDesigner.Expressions%2A> 在 "设计时属性" 网格中浏览控件的属性时，可视化设计器会显示一个对话框，用于设置为控件属性提供值的表达式。 您可以选择基于表达式前缀列表的表达式类型。 从列表中选择表达式前缀时，可视化设计器会使用关联的 <xref:System.Web.UI.Design.ExpressionEditor> 和 <xref:System.Web.UI.Design.ExpressionEditorSheet> 对象根据该类型的表达式的语法来计算和转换表达式字符串。 可视化设计器使用表达式编辑器表属性来提示输入一个或多个合并到自定义表达式字符串的字符串。  
  
 通常，若要在设计时提供新的表达式类型，请定义唯一的表达式前缀，并提供自定义 <xref:System.Web.Compilation.ExpressionBuilder> 和 <xref:System.Web.UI.Design.ExpressionEditor> 实现。 还可以提供自定义 <xref:System.Web.UI.Design.ExpressionEditorSheet> 实现，该实现定义用于构成表达式的属性。 若要将表达式前缀与表达式生成器和表达式编辑器相关联，请将 <xref:System.Web.Compilation.ExpressionEditorAttribute> 属性和属性应用于 <xref:System.Web.Compilation.ExpressionPrefixAttribute> 自定义 <xref:System.Web.Configuration.ExpressionBuilder> 类，然后在 Web 配置文件中的元素中配置表达式生成器的表达式前缀 `expressionBuilders` 。  
  
 方法的默认实现将 <xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet%2A> 返回一个基本编辑器表，该工作表使用单个输入字符串来构成表达式。 派生自的自定义表达式编辑器 <xref:System.Web.UI.Design.ExpressionEditor> 可以重写 <xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet%2A> 方法以返回自定义编辑器表实现。 通常，自定义编辑器表包含多个用于生成表达式字符串的属性。 <xref:System.Web.UI.Design.ExpressionEditorSheet.GetExpression%2A>方法根据当前的表达式属性返回生成的表达式字符串。  
  
 例如， <xref:System.Web.UI.Design.ResourceExpressionEditor> 类派生自 <xref:System.Web.UI.Design.ExpressionEditor> 类，并提供用于在设计时计算资源字符串引用并将资源字符串引用与控件属性关联的实现。 <xref:System.Web.Compilation.ResourceExpressionBuilder>类与表达式前缀和实现相关联 `Resources` <xref:System.Web.UI.Design.ResourceExpressionEditor> 。 <xref:System.Web.UI.Design.ResourceExpressionEditor.GetExpressionEditorSheet%2A>方法返回 <xref:System.Web.UI.Design.ResourceExpressionEditorSheet> ，它定义构成资源引用表达式的各个属性。  
  
 从类继承时 <xref:System.Web.UI.Design.ExpressionEditorSheet> ，必须重写以下成员：  
  
-   <xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet%2A>返回自定义编辑器表实现的方法。  
  
-   用于 <xref:System.Web.UI.Design.ExpressionEditorSheet.%23ctor%2A> 实现表达式编辑器表实现的自定义初始化操作的构造函数。  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para><see cref="T:System.Web.UI.Design.ExpressionEditorSheet" />如果要为控件属性值定义新的表达式类型，并且想要基于多个表达式属性值生成表达式字符串，请从类派生自定义表达式编辑器表。 派生类实现应包含以下内容： 
-可在设计时设置的表达式字符串中的每个非重复值的公共属性。  
  
- <see cref="M:System.Web.UI.Design.ExpressionEditorSheet.GetExpression" /> 从编辑器表属性值组成自定义表达式字符串的方法的实现。  
  
-（可选）一个设置编辑器表属性的初始值的构造函数实现。  
  
关联的自定义表达式编辑器类在方法中创建一个派生编辑器表的实例 <see cref="M:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet(System.String,System.IServiceProvider)" /> ，使用该控件属性的当前表达式字符串来初始化该实例，并将该实例返回到可视化设计器。 可视化设计器允许您设置表达式表属性，然后调用 <see cref="M:System.Web.UI.Design.ExpressionEditorSheet.GetExpression" /> 方法，以从输入表达式表属性值中形成表达式字符串。</para></block>
    <altmember cref="T:System.Web.UI.Design.ExpressionEditor" />
    <altmember cref="M:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet(System.String,System.IServiceProvider)" />
    <altmember cref="T:System.Web.UI.Design.ResourceExpressionEditorSheet" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ExpressionEditorSheet (IServiceProvider serviceProvider);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.IServiceProvider serviceProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Design.ExpressionEditorSheet.#ctor(System.IServiceProvider)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (serviceProvider As IServiceProvider)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ExpressionEditorSheet(IServiceProvider ^ serviceProvider);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.Design.ExpressionEditorSheet : IServiceProvider -&gt; System.Web.UI.Design.ExpressionEditorSheet" Usage="new System.Web.UI.Design.ExpressionEditorSheet serviceProvider" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="serviceProvider" Type="System.IServiceProvider" />
      </Parameters>
      <Docs>
        <param name="serviceProvider">一个由设计器宿主提供的服务提供程序实现，用于获取其他设计时服务。</param>
        <summary>初始化 <see cref="T:System.Web.UI.Design.ExpressionEditorSheet" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 由于 <xref:System.Web.UI.Design.ExpressionEditorSheet> 类是抽象类，因此不能 <xref:System.Web.UI.Design.ExpressionEditorSheet> 使用构造函数直接创建的实例 <xref:System.Web.UI.Design.ExpressionEditorSheet.%23ctor%2A> 。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>从类派生时 <see cref="T:System.Web.UI.Design.ExpressionEditorSheet" /> ，重写 <see cref="M:System.Web.UI.Design.ExpressionEditorSheet.#ctor(System.IServiceProvider)" /> 构造函数以实现表达式编辑器表实现的自定义初始化操作。  
  
例如，实现其他表达式属性的自定义表达式编辑器表类可以定义构造函数中的表达式属性的默认值 <see cref="M:System.Web.UI.Design.ExpressionEditorSheet.#ctor(System.IServiceProvider)" /> 。 自定义表达式编辑器表类可以定义其他公共构造函数重载，这些重载使用输入参数值来设置表达式属性的初始值。</para></block>
        <altmember cref="Overload:System.Web.UI.Design.ExpressionEditor.GetExpressionEditor" />
        <altmember cref="T:System.Web.UI.Design.ExpressionEditor" />
        <altmember cref="T:System.Web.UI.Design.ResourceExpressionEditorSheet" />
      </Docs>
    </Member>
    <Member MemberName="GetExpression">
      <MemberSignature Language="C#" Value="public abstract string GetExpression ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetExpression() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Design.ExpressionEditorSheet.GetExpression" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetExpression () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::String ^ GetExpression();" />
      <MemberSignature Language="F#" Value="abstract member GetExpression : unit -&gt; string" Usage="expressionEditorSheet.GetExpression " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>当在派生类中重写时，返回由表达式编辑器表属性值组成的表达式字符串。</summary>
        <returns>当前属性值的自定义表达式字符串。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 自定义表达式编辑器表包含多个表达式属性的设计时设置，这些属性组合起来形成一个表达式字符串。 可以使用表达式字符串设置控件属性值;表达式字符串是在运行时由表达式生成器计算得出的。  
  
 <xref:System.Web.UI.Design.ExpressionEditorSheet.GetExpression%2A>方法返回从当前表达式属性生成的表达式字符串。 可视化设计器允许您设置表达式表属性，然后调用 <xref:System.Web.UI.Design.ExpressionEditorSheet.GetExpression%2A> 方法来获取表达式字符串并设置控件属性值。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><see cref="T:System.Web.UI.Design.ExpressionEditorSheet" />如果要为控件属性值定义新的表达式类型，并且想要基于多个表达式属性值生成表达式字符串，请从类派生自定义表达式编辑器表。 派生类实现应包含以下内容： 
-可在设计时设置的表达式字符串中的每个非重复值的公共属性。  
  
- <see cref="M:System.Web.UI.Design.ExpressionEditorSheet.GetExpression" /> 从编辑器表属性值组成自定义表达式字符串的方法的实现。  
  
-（可选）一个设置编辑器表属性的初始值的构造函数实现。  
  
关联的自定义表达式编辑器类在方法中创建一个派生编辑器表的实例 <see cref="M:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet(System.String,System.IServiceProvider)" /> ，使用该控件属性的当前表达式字符串来初始化该实例，然后将该实例返回到可视化设计器。 可视化设计器允许您设置表达式表属性，然后调用 <see cref="M:System.Web.UI.Design.ExpressionEditorSheet.GetExpression" /> 方法，以从输入表达式表属性值中形成表达式字符串。</para></block>
        <altmember cref="T:System.Web.UI.Design.ExpressionEditor" />
        <altmember cref="M:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet(System.String,System.IServiceProvider)" />
        <altmember cref="T:System.Web.UI.Design.ResourceExpressionEditorSheet" />
      </Docs>
    </Member>
    <Member MemberName="IsValid">
      <MemberSignature Language="C#" Value="public virtual bool IsValid { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsValid" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.Design.ExpressionEditorSheet.IsValid" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsValid As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsValid { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsValid : bool" Usage="System.Web.UI.Design.ExpressionEditorSheet.IsValid" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示表达式字符串是否有效。</summary>
        <value>如果表达式字符串有效，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此基实现始终返回 `true`。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.Design.ExpressionEditor" />
        <altmember cref="M:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet(System.String,System.IServiceProvider)" />
        <altmember cref="T:System.Web.UI.Design.ResourceExpressionEditorSheet" />
      </Docs>
    </Member>
    <Member MemberName="ServiceProvider">
      <MemberSignature Language="C#" Value="public IServiceProvider ServiceProvider { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IServiceProvider ServiceProvider" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.Design.ExpressionEditorSheet.ServiceProvider" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ServiceProvider As IServiceProvider" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IServiceProvider ^ ServiceProvider { IServiceProvider ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ServiceProvider : IServiceProvider" Usage="System.Web.UI.Design.ExpressionEditorSheet.ServiceProvider" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IServiceProvider</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取表达式编辑器表使用的服务提供程序实现。</summary>
        <value>一个 <see cref="T:System.IServiceProvider" />，通常由设计宿主提供，可用于获取其他设计时服务。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用 <xref:System.Web.UI.Design.ExpressionEditorSheet.%23ctor%2A> 构造函数设置 <xref:System.Web.UI.Design.ExpressionEditorSheet.ServiceProvider%2A> 自定义表达式编辑器表的实现。  
  
 <xref:System.Web.UI.Design.ExpressionEditorSheet.ServiceProvider%2A>属性可用于访问设计器宿主提供的服务。 例如， <xref:System.IServiceProvider.GetService%2A> 使用接口调用方法， <xref:System.Web.UI.Design.IWebApplication> 以访问通过可视化设计器提供的项目项、文档或配置文件详细信息。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet(System.String,System.IServiceProvider)" />
        <altmember cref="M:System.Web.UI.Design.ExpressionEditorSheet.#ctor(System.IServiceProvider)" />
      </Docs>
    </Member>
  </Members>
</Type>
