<Type Name="KeyedCollection&lt;TKey,TItem&gt;" FullName="System.Collections.ObjectModel.KeyedCollection&lt;TKey,TItem&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="5f5d50e3b4bf156e2003d7d4ad6e0488de81edc2" /><Meta Name="ms.sourcegitcommit" Value="11d168140aa8fade0768c2a9dde3e3bcacfdfb7d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="05/27/2020" /><Meta Name="ms.locfileid" Value="83967712" /></Metadata><TypeSignature Language="C#" Value="public abstract class KeyedCollection&lt;TKey,TItem&gt; : System.Collections.ObjectModel.Collection&lt;TItem&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit KeyedCollection`2&lt;TKey, TItem&gt; extends System.Collections.ObjectModel.Collection`1&lt;!TItem&gt;" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1" />
  <TypeSignature Language="DocId" Value="T:System.Collections.ObjectModel.KeyedCollection`2" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class KeyedCollection(Of TKey, TItem)&#xA;Inherits Collection(Of TItem)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TKey, typename TItem&gt;&#xA;public ref class KeyedCollection abstract : System::Collections::ObjectModel::Collection&lt;TItem&gt;" />
  <TypeSignature Language="F#" Value="type KeyedCollection&lt;'Key, 'Item&gt; = class&#xA;    inherit Collection&lt;'Item&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract serializable beforefieldinit KeyedCollection`2&lt;TKey, TItem&gt; extends System.Collections.ObjectModel.Collection`1&lt;!TItem&gt;" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <AssemblyInfo>
    <AssemblyName>System.ObjectModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="mscorlib" FromVersion="4.0.0.0" To="System.ObjectModel" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0" />
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.ObjectModel" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <TypeParameters>
    <TypeParameter Name="TKey" />
    <TypeParameter Name="TItem" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Collections.ObjectModel.Collection&lt;TItem&gt;</BaseTypeName>
    <BaseTypeArguments>
      <BaseTypeArgument TypeParamName="T">TItem</BaseTypeArgument>
    </BaseTypeArguments>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerDisplay("Count = {Count}")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerTypeProxy(typeof(System.Collections.Generic.Mscorlib_KeyedCollectionDebugView`2))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="TKey"><span data-ttu-id="00751-101">集合中的键的类型。</span><span class="sxs-lookup"><span data-stu-id="00751-101">The type of keys in the collection.</span></span></typeparam>
    <typeparam name="TItem"><span data-ttu-id="00751-102">集合中的项的类型。</span><span class="sxs-lookup"><span data-stu-id="00751-102">The type of items in the collection.</span></span></typeparam>
    <summary><span data-ttu-id="00751-103">提供键嵌入在值中的集合的抽象基类。</span><span class="sxs-lookup"><span data-stu-id="00751-103">Provides the abstract base class for a collection whose keys are embedded in the values.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00751-104"><xref:System.Collections.ObjectModel.KeyedCollection%602> 类提供 O （1）个索引检索和加密方法（1）的加密方法。</span><span class="sxs-lookup"><span data-stu-id="00751-104">The <xref:System.Collections.ObjectModel.KeyedCollection%602> class provides both O(1) indexed retrieval and keyed retrieval that approaches O(1).</span></span> <span data-ttu-id="00751-105">它是抽象类型，或者更准确地说是一组无限抽象类型，因为其构造的泛型类型都是抽象基类。</span><span class="sxs-lookup"><span data-stu-id="00751-105">It is an abstract type, or more accurately an infinite set of abstract types, because each of its constructed generic types is an abstract base class.</span></span> <span data-ttu-id="00751-106">若要使用 <xref:System.Collections.ObjectModel.KeyedCollection%602>，请从适当的构造类型中派生集合类型。</span><span class="sxs-lookup"><span data-stu-id="00751-106">To use <xref:System.Collections.ObjectModel.KeyedCollection%602>, derive your collection type from the appropriate constructed type.</span></span>  
  
 <span data-ttu-id="00751-107"><xref:System.Collections.ObjectModel.KeyedCollection%602> 类基于 <xref:System.Collections.Generic.IList%601> 泛型接口和基于 <xref:System.Collections.Generic.IDictionary%602> 泛型接口的集合之间的混合。</span><span class="sxs-lookup"><span data-stu-id="00751-107">The <xref:System.Collections.ObjectModel.KeyedCollection%602> class is a hybrid between a collection based on the <xref:System.Collections.Generic.IList%601> generic interface and a collection based on the <xref:System.Collections.Generic.IDictionary%602> generic interface.</span></span> <span data-ttu-id="00751-108">类似于基于 <xref:System.Collections.Generic.IList%601> 泛型接口的集合，<xref:System.Collections.ObjectModel.KeyedCollection%602> 是项的索引列表。</span><span class="sxs-lookup"><span data-stu-id="00751-108">Like collections based on the <xref:System.Collections.Generic.IList%601> generic interface, <xref:System.Collections.ObjectModel.KeyedCollection%602> is an indexed list of items.</span></span> <span data-ttu-id="00751-109">类似于基于 <xref:System.Collections.Generic.IDictionary%602> 泛型接口的集合，<xref:System.Collections.ObjectModel.KeyedCollection%602> 具有与每个元素相关联的键。</span><span class="sxs-lookup"><span data-stu-id="00751-109">Like collections based on the <xref:System.Collections.Generic.IDictionary%602> generic interface, <xref:System.Collections.ObjectModel.KeyedCollection%602> has a key associated with each element.</span></span>  
  
 <span data-ttu-id="00751-110">与字典不同，<xref:System.Collections.ObjectModel.KeyedCollection%602> 的元素不是键/值对;相反，整个元素为值，键嵌入在值中。</span><span class="sxs-lookup"><span data-stu-id="00751-110">Unlike dictionaries, an element of <xref:System.Collections.ObjectModel.KeyedCollection%602> is not a key/value pair; instead, the entire element is the value and the key is embedded within the value.</span></span>  <span data-ttu-id="00751-111">例如，派生自 `KeyedCollection\<String,String>` 的集合的元素（在 Visual Basic 中`KeyedCollection(Of String, String)`）可能是 "John Doe Jr"。</span><span class="sxs-lookup"><span data-stu-id="00751-111">For example, an element of a collection derived from `KeyedCollection\<String,String>` (`KeyedCollection(Of String, String)` in Visual Basic) might be "John Doe Jr."</span></span> <span data-ttu-id="00751-112">其中，值为 "John Doe Jr"。</span><span class="sxs-lookup"><span data-stu-id="00751-112">where the value is "John Doe Jr."</span></span> <span data-ttu-id="00751-113">密钥为 "Doe";或者，包含整数键的雇员记录集合可以从 `KeyedCollection\<int,Employee>`派生。</span><span class="sxs-lookup"><span data-stu-id="00751-113">and the key is "Doe"; or a collection of employee records containing integer keys could be derived from `KeyedCollection\<int,Employee>`.</span></span> <span data-ttu-id="00751-114">Abstract <xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A> 方法从元素中提取键。</span><span class="sxs-lookup"><span data-stu-id="00751-114">The abstract <xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A> method extracts the key from the element.</span></span>  
  
 <span data-ttu-id="00751-115">默认情况下，<xref:System.Collections.ObjectModel.KeyedCollection%602> 包括可使用 <xref:System.Collections.ObjectModel.KeyedCollection%602.Dictionary%2A> 属性获取的查找字典。</span><span class="sxs-lookup"><span data-stu-id="00751-115">By default, the <xref:System.Collections.ObjectModel.KeyedCollection%602> includes a lookup dictionary that you can obtain with the <xref:System.Collections.ObjectModel.KeyedCollection%602.Dictionary%2A> property.</span></span>  <span data-ttu-id="00751-116">在将项添加到 <xref:System.Collections.ObjectModel.KeyedCollection%602>时，该项的键将被提取一次并保存在查找字典中，以加快搜索速度。</span><span class="sxs-lookup"><span data-stu-id="00751-116">When an item is added to the <xref:System.Collections.ObjectModel.KeyedCollection%602>, the item's key is extracted once and saved in the lookup dictionary for faster searches.</span></span> <span data-ttu-id="00751-117">此行为是在创建 <xref:System.Collections.ObjectModel.KeyedCollection%602>时指定字典创建阈值而重写的。</span><span class="sxs-lookup"><span data-stu-id="00751-117">This behavior is overridden by specifying a dictionary creation threshold when you create the <xref:System.Collections.ObjectModel.KeyedCollection%602>.</span></span> <span data-ttu-id="00751-118">第一次元素数目超过该阈值时，会创建查找字典。</span><span class="sxs-lookup"><span data-stu-id="00751-118">The lookup dictionary is created the first time the number of elements exceeds that threshold.</span></span>  <span data-ttu-id="00751-119">如果指定-1 作为阈值，则永远不会创建查找字典。</span><span class="sxs-lookup"><span data-stu-id="00751-119">If you specify -1 as the threshold, the lookup dictionary is never created.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="00751-120">当使用内部查找字典时，它包含对集合中所有项的引用（如果 `TItem` 是引用类型），或者如果 `TItem` 为值类型，则为集合中所有项的副本。</span><span class="sxs-lookup"><span data-stu-id="00751-120">When the internal lookup dictionary is used, it contains references to all the items in the collection if `TItem` is a reference type, or copies of all the items in the collection if `TItem` is a value type.</span></span> <span data-ttu-id="00751-121">因此，如果 `TItem` 是值类型，则使用查找字典可能不适合。</span><span class="sxs-lookup"><span data-stu-id="00751-121">Thus, using the lookup dictionary may not be appropriate if `TItem` is a value type.</span></span>  
  
 <span data-ttu-id="00751-122">您可以通过使用 <xref:System.Collections.ObjectModel.KeyedCollection%602.Item%2A> 属性按项的索引或键访问该项。</span><span class="sxs-lookup"><span data-stu-id="00751-122">You can access an item by its index or key by using the <xref:System.Collections.ObjectModel.KeyedCollection%602.Item%2A> property.</span></span> <span data-ttu-id="00751-123">可以添加没有键的项，但随后只能通过索引访问这些项。</span><span class="sxs-lookup"><span data-stu-id="00751-123">You can add items without a key, but these items can subsequently be accessed only by index.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="00751-124">本部分包含两个代码示例。</span><span class="sxs-lookup"><span data-stu-id="00751-124">This section contains two code examples.</span></span> <span data-ttu-id="00751-125">第一个示例演示从 <xref:System.Collections.ObjectModel.KeyedCollection%602>派生所需的最少代码，并演示了许多继承的方法。</span><span class="sxs-lookup"><span data-stu-id="00751-125">The first example shows the minimum code required to derive from <xref:System.Collections.ObjectModel.KeyedCollection%602>, and demonstrates many of the inherited methods.</span></span> <span data-ttu-id="00751-126">第二个示例演示如何重写 <xref:System.Collections.ObjectModel.KeyedCollection%602> 的受保护方法以提供自定义行为。</span><span class="sxs-lookup"><span data-stu-id="00751-126">The second example shows how to override the protected methods of <xref:System.Collections.ObjectModel.KeyedCollection%602> to provide custom behavior.</span></span>  
  
 <span data-ttu-id="00751-127">**示例 1**</span><span class="sxs-lookup"><span data-stu-id="00751-127">**Example 1**</span></span>  
  
 <span data-ttu-id="00751-128">此代码示例演示从 <xref:System.Collections.ObjectModel.KeyedCollection%602>派生集合类所需的最少代码：重写 <xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A> 方法并提供委托给基类构造函数的公共构造函数。</span><span class="sxs-lookup"><span data-stu-id="00751-128">This code example shows the minimum code necessary to derive a collection class from <xref:System.Collections.ObjectModel.KeyedCollection%602>: overriding the <xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A> method and providing a public constructor that delegates to a base class constructor.</span></span> <span data-ttu-id="00751-129">此代码示例还演示了继承自 <xref:System.Collections.ObjectModel.KeyedCollection%602> 和 <xref:System.Collections.ObjectModel.Collection%601> 类的许多属性和方法。</span><span class="sxs-lookup"><span data-stu-id="00751-129">The code example also demonstrates many of the properties and methods inherited from <xref:System.Collections.ObjectModel.KeyedCollection%602> and <xref:System.Collections.ObjectModel.Collection%601> classes.</span></span>  
  
 <span data-ttu-id="00751-130">`SimpleOrder` 类是一个非常简单的申请列表，其中包含 `OrderItem` 对象，每个对象都表示顺序中的行项。</span><span class="sxs-lookup"><span data-stu-id="00751-130">The `SimpleOrder` class is a very simple requisition list that contains `OrderItem` objects, each of which represents a line item in the order.</span></span> <span data-ttu-id="00751-131">`OrderItem` 的键是不可变的，这是派生自 <xref:System.Collections.ObjectModel.KeyedCollection%602>的类的重要注意事项。</span><span class="sxs-lookup"><span data-stu-id="00751-131">The key of `OrderItem` is immutable, an important consideration for classes that derive from <xref:System.Collections.ObjectModel.KeyedCollection%602>.</span></span> <span data-ttu-id="00751-132">有关使用可变键的代码示例，请参阅 <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>。</span><span class="sxs-lookup"><span data-stu-id="00751-132">For a code example that uses mutable keys, see <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>.</span></span>  
  
 [!code-cpp[KeyedCollection#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection/cs/source.cs#1)]
 [!code-vb[KeyedCollection#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection/VB/source.vb#1)]  
  
 <span data-ttu-id="00751-133">**示例 2**</span><span class="sxs-lookup"><span data-stu-id="00751-133">**Example 2**</span></span>  
  
 <span data-ttu-id="00751-134">下面的代码示例演示如何重写受保护的 <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>、<xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>、<xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>和 <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> 方法，以便为 <xref:System.Collections.ObjectModel.Collection%601.Add%2A>、<xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A>和 <xref:System.Collections.ObjectModel.Collection%601.Clear%2A> 方法提供自定义行为，并设置默认的 <xref:System.Collections.ObjectModel.Collection%601.Item%2A> 属性（中C#的索引器）。</span><span class="sxs-lookup"><span data-stu-id="00751-134">The following code example shows how to override the protected <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>, and <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> methods, to provide custom behavior for the <xref:System.Collections.ObjectModel.Collection%601.Add%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A>, and <xref:System.Collections.ObjectModel.Collection%601.Clear%2A> methods, and for setting the default <xref:System.Collections.ObjectModel.Collection%601.Item%2A> property (the indexer in C#).</span></span> <span data-ttu-id="00751-135">在此示例中提供的自定义行为是一个名为 `Changed`的通知事件，它在每个重写的方法的末尾引发。</span><span class="sxs-lookup"><span data-stu-id="00751-135">The custom behavior provided in this example is a notification event named `Changed`, which is raised at the end of each of the overridden methods.</span></span>  
  
 <span data-ttu-id="00751-136">此代码示例创建了 `SimpleOrder` 类，该类派生自 <xref:System.Collections.ObjectModel.KeyedCollection%602> 并表示一个简单的订单窗体。</span><span class="sxs-lookup"><span data-stu-id="00751-136">The code example creates the `SimpleOrder` class, which derives from <xref:System.Collections.ObjectModel.KeyedCollection%602> and represents a simple order form.</span></span> <span data-ttu-id="00751-137">订单窗体包含表示排序项 `OrderItem` 对象。</span><span class="sxs-lookup"><span data-stu-id="00751-137">The order form contains `OrderItem` objects representing items ordered.</span></span> <span data-ttu-id="00751-138">此代码示例还创建了一个包含事件信息的 `SimpleOrderChangedEventArgs` 类和一个用于标识更改类型的枚举。</span><span class="sxs-lookup"><span data-stu-id="00751-138">The code example also creates a `SimpleOrderChangedEventArgs` class to contain the event information, and an enumeration to identify the type of change.</span></span>  
  
 <span data-ttu-id="00751-139">此代码示例通过在 `Demo` 类的 `Main` 方法中调用派生类的属性和方法，演示了自定义行为。</span><span class="sxs-lookup"><span data-stu-id="00751-139">The code example demonstrates the custom behavior by calling the properties and methods of the derived class, in the `Main` method of the `Demo` class.</span></span>  
  
 <span data-ttu-id="00751-140">此代码示例使用具有不可变键的对象。</span><span class="sxs-lookup"><span data-stu-id="00751-140">This code example uses objects with immutable keys.</span></span> <span data-ttu-id="00751-141">有关使用可变键的代码示例，请参阅 <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>。</span><span class="sxs-lookup"><span data-stu-id="00751-141">For a code example that uses mutable keys, see <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>.</span></span>  
  
 [!code-cpp[KeyedCollection2#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection2/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection2#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection2/cs/source.cs#1)]
 [!code-vb[KeyedCollection2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection2/vb/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Collections.Specialized.StringDictionary" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="00751-142">初始化 <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="00751-142">Initializes a new instance of the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected KeyedCollection ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; KeyedCollection();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="00751-143">初始化使用默认相等比较器的 <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="00751-143">Initializes a new instance of the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> class that uses the default equality comparer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00751-144">使用此构造函数创建的 <xref:System.Collections.ObjectModel.KeyedCollection%602> 使用从 <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType>获取的键类型的默认泛型相等比较器。</span><span class="sxs-lookup"><span data-stu-id="00751-144">A <xref:System.Collections.ObjectModel.KeyedCollection%602> created with this constructor uses the default generic equality comparer for the type of the key, obtained from <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="00751-145">若要指定不同的泛型相等比较器，请使用 <xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%29> 构造函数或 <xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%2CSystem.Int32%29> 构造函数。</span><span class="sxs-lookup"><span data-stu-id="00751-145">To specify a different generic equality comparer, use the <xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%29> constructor or the <xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%2CSystem.Int32%29> constructor.</span></span>  
  
 <span data-ttu-id="00751-146">默认情况下，<xref:System.Collections.ObjectModel.KeyedCollection%602> 包括添加第一项时创建的查找字典。</span><span class="sxs-lookup"><span data-stu-id="00751-146">By default, the <xref:System.Collections.ObjectModel.KeyedCollection%602> includes a lookup dictionary that is created when the first item is added.</span></span> <span data-ttu-id="00751-147">在将项添加到 <xref:System.Collections.ObjectModel.KeyedCollection%602>时，该项的键将被提取一次并保存在查找字典中，以加快搜索速度。</span><span class="sxs-lookup"><span data-stu-id="00751-147">When an item is added to the <xref:System.Collections.ObjectModel.KeyedCollection%602>, the item's key is extracted once and saved in the lookup dictionary for faster searches.</span></span> <span data-ttu-id="00751-148">可以通过使用 <xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%2CSystem.Int32%29> 构造函数并指定字典创建阈值来重写此行为。</span><span class="sxs-lookup"><span data-stu-id="00751-148">This behavior can be overridden by using the <xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%2CSystem.Int32%29> constructor and specifying a dictionary creation threshold.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="00751-149">由于 <xref:System.Collections.ObjectModel.KeyedCollection%602> 类是抽象的（`MustInherit` 在 Visual Basic 中），因此必须从派生该类才能使用。</span><span class="sxs-lookup"><span data-stu-id="00751-149">Because the <xref:System.Collections.ObjectModel.KeyedCollection%602> class is abstract (`MustInherit` in Visual Basic), you must derive from it in order to use it.</span></span> <span data-ttu-id="00751-150">在派生类型的构造函数中，调用相应的 <xref:System.Collections.ObjectModel.KeyedCollection%602> 构造函数。</span><span class="sxs-lookup"><span data-stu-id="00751-150">In the constructor for your derived type, call the appropriate <xref:System.Collections.ObjectModel.KeyedCollection%602> constructor.</span></span> <span data-ttu-id="00751-151">不需要公开功能，如相等比较器或构造函数中的字典创建阈值。</span><span class="sxs-lookup"><span data-stu-id="00751-151">It is not necessary to expose functionality like the equality comparer or the dictionary creation threshold in your constructors.</span></span>  
  
 <span data-ttu-id="00751-152">此构造函数的运算复杂度为 O （1）。</span><span class="sxs-lookup"><span data-stu-id="00751-152">This constructor is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="00751-153">此代码示例演示从 <xref:System.Collections.ObjectModel.KeyedCollection%602>派生集合类所需的最少代码：重写 <xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A> 方法并提供委托给基类构造函数的公共构造函数。</span><span class="sxs-lookup"><span data-stu-id="00751-153">This code example shows the minimum code necessary to derive a collection class from <xref:System.Collections.ObjectModel.KeyedCollection%602>: overriding the <xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A> method and providing a public constructor that delegates to a base class constructor.</span></span> <span data-ttu-id="00751-154">此代码示例还演示了继承自 <xref:System.Collections.ObjectModel.KeyedCollection%602> 和 <xref:System.Collections.ObjectModel.Collection%601> 类的许多属性和方法。</span><span class="sxs-lookup"><span data-stu-id="00751-154">The code example also demonstrates many of the properties and methods inherited from <xref:System.Collections.ObjectModel.KeyedCollection%602> and <xref:System.Collections.ObjectModel.Collection%601> classes.</span></span>  
  
 <span data-ttu-id="00751-155">`SimpleOrder` 类是一个非常简单的申请列表，其中包含 `OrderItem` 对象，每个对象都表示顺序中的行项。</span><span class="sxs-lookup"><span data-stu-id="00751-155">The `SimpleOrder` class is a very simple requisition list that contains `OrderItem` objects, each of which represents a line item in the order.</span></span> <span data-ttu-id="00751-156">`OrderItem` 的键是不可变的，这是派生自 <xref:System.Collections.ObjectModel.KeyedCollection%602>的类的重要注意事项。</span><span class="sxs-lookup"><span data-stu-id="00751-156">The key of `OrderItem` is immutable, an important consideration for classes that derive from <xref:System.Collections.ObjectModel.KeyedCollection%602>.</span></span> <span data-ttu-id="00751-157">有关使用可变键的代码示例，请参阅 <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>。</span><span class="sxs-lookup"><span data-stu-id="00751-157">For a code example that uses mutable keys, see <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>.</span></span>  
  
 [!code-cpp[KeyedCollection#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection/cs/source.cs#1)]
 [!code-vb[KeyedCollection#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.Generic.IEqualityComparer`1" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected KeyedCollection (System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Collections.Generic.IEqualityComparer`1&lt;!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (comparer As IEqualityComparer(Of TKey))" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; KeyedCollection(System::Collections::Generic::IEqualityComparer&lt;TKey&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="new System.Collections.ObjectModel.KeyedCollection&lt;'Key, 'Item&gt; : System.Collections.Generic.IEqualityComparer&lt;'Key&gt; -&gt; System.Collections.ObjectModel.KeyedCollection&lt;'Key, 'Item&gt;" Usage="new System.Collections.ObjectModel.KeyedCollection&lt;'Key, 'Item&gt; comparer" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
      </Parameters>
      <Docs>
        <param name="comparer"><span data-ttu-id="00751-158">比较键时要使用的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 泛型接口的实现，如果为 <see langword="null" />，则使用从 <see cref="P:System.Collections.Generic.EqualityComparer`1.Default" /> 获取的该类型的键的默认相等比较器。</span><span class="sxs-lookup"><span data-stu-id="00751-158">The implementation of the <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> generic interface to use when comparing keys, or <see langword="null" /> to use the default equality comparer for the type of the key, obtained from <see cref="P:System.Collections.Generic.EqualityComparer`1.Default" />.</span></span></param>
        <summary><span data-ttu-id="00751-159">初始化使用指定相等比较器的 <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="00751-159">Initializes a new instance of the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> class that uses the specified equality comparer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00751-160">默认情况下，<xref:System.Collections.ObjectModel.KeyedCollection%602> 包括添加第一项时创建的查找字典。</span><span class="sxs-lookup"><span data-stu-id="00751-160">By default, the <xref:System.Collections.ObjectModel.KeyedCollection%602> includes a lookup dictionary that is created when the first item is added.</span></span> <span data-ttu-id="00751-161">在将项添加到 <xref:System.Collections.ObjectModel.KeyedCollection%602>时，该项的键将被提取一次并保存在查找字典中，以加快搜索速度。</span><span class="sxs-lookup"><span data-stu-id="00751-161">When an item is added to the <xref:System.Collections.ObjectModel.KeyedCollection%602>, the item's key is extracted once and saved in the lookup dictionary for faster searches.</span></span> <span data-ttu-id="00751-162">可以通过使用 <xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%2CSystem.Int32%29> 构造函数并指定字典创建阈值来重写此行为。</span><span class="sxs-lookup"><span data-stu-id="00751-162">This behavior can be overridden by using the <xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%2CSystem.Int32%29> constructor and specifying a dictionary creation threshold.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="00751-163">由于 <xref:System.Collections.ObjectModel.KeyedCollection%602> 类是抽象的（`MustInherit` 在 Visual Basic 中），因此必须从派生该类才能使用。</span><span class="sxs-lookup"><span data-stu-id="00751-163">Because the <xref:System.Collections.ObjectModel.KeyedCollection%602> class is abstract (`MustInherit` in Visual Basic), you must derive from it in order to use it.</span></span> <span data-ttu-id="00751-164">在派生类型的构造函数中，调用相应的 <xref:System.Collections.ObjectModel.KeyedCollection%602> 构造函数。</span><span class="sxs-lookup"><span data-stu-id="00751-164">In the constructor for your derived type, call the appropriate <xref:System.Collections.ObjectModel.KeyedCollection%602> constructor.</span></span> <span data-ttu-id="00751-165">不需要公开功能，如相等比较器或构造函数中的字典创建阈值。</span><span class="sxs-lookup"><span data-stu-id="00751-165">It is not necessary to expose functionality like the equality comparer or the dictionary creation threshold in your constructors.</span></span>  
  
 <span data-ttu-id="00751-166">此构造函数的运算复杂度为 O （1）。</span><span class="sxs-lookup"><span data-stu-id="00751-166">This constructor is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.Generic.IEqualityComparer`1" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected KeyedCollection (System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer, int dictionaryCreationThreshold);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Collections.Generic.IEqualityComparer`1&lt;!TKey&gt; comparer, int32 dictionaryCreationThreshold) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (comparer As IEqualityComparer(Of TKey), dictionaryCreationThreshold As Integer)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; KeyedCollection(System::Collections::Generic::IEqualityComparer&lt;TKey&gt; ^ comparer, int dictionaryCreationThreshold);" />
      <MemberSignature Language="F#" Value="new System.Collections.ObjectModel.KeyedCollection&lt;'Key, 'Item&gt; : System.Collections.Generic.IEqualityComparer&lt;'Key&gt; * int -&gt; System.Collections.ObjectModel.KeyedCollection&lt;'Key, 'Item&gt;" Usage="new System.Collections.ObjectModel.KeyedCollection&lt;'Key, 'Item&gt; (comparer, dictionaryCreationThreshold)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
        <Parameter Name="dictionaryCreationThreshold" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="comparer"><span data-ttu-id="00751-167">比较键时要使用的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 泛型接口的实现，如果为 <see langword="null" />，则使用从 <see cref="P:System.Collections.Generic.EqualityComparer`1.Default" /> 获取的该类型的键的默认相等比较器。</span><span class="sxs-lookup"><span data-stu-id="00751-167">The implementation of the <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> generic interface to use when comparing keys, or <see langword="null" /> to use the default equality comparer for the type of the key, obtained from <see cref="P:System.Collections.Generic.EqualityComparer`1.Default" />.</span></span></param>
        <param name="dictionaryCreationThreshold"><span data-ttu-id="00751-168">在不创建查找字典的情况下集合可容纳的元素的数目（0 表示添加第一项时创建查找字典）；或者为 -1，表示指定永远不会创建查找字典。</span><span class="sxs-lookup"><span data-stu-id="00751-168">The number of elements the collection can hold without creating a lookup dictionary (0 creates the lookup dictionary when the first item is added), or -1 to specify that a lookup dictionary is never created.</span></span></param>
        <summary><span data-ttu-id="00751-169">初始化 <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> 类的新实例，该新实例使用指定的相等比较器并在超过指定阈值时创建一个查找字典。</span><span class="sxs-lookup"><span data-stu-id="00751-169">Initializes a new instance of the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> class that uses the specified equality comparer and creates a lookup dictionary when the specified threshold is exceeded.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00751-170">默认情况下，<xref:System.Collections.ObjectModel.KeyedCollection%602> 包括添加第一项时创建的查找字典。</span><span class="sxs-lookup"><span data-stu-id="00751-170">By default, the <xref:System.Collections.ObjectModel.KeyedCollection%602> includes a lookup dictionary that is created when the first item is added.</span></span> <span data-ttu-id="00751-171">在将项添加到 <xref:System.Collections.ObjectModel.KeyedCollection%602>时，该项的键将被提取一次并保存在查找字典中，以加快搜索速度。</span><span class="sxs-lookup"><span data-stu-id="00751-171">When an item is added to the <xref:System.Collections.ObjectModel.KeyedCollection%602>, the item's key is extracted once and saved in the lookup dictionary for faster searches.</span></span> <span data-ttu-id="00751-172">此构造函数允许你重写该行为。</span><span class="sxs-lookup"><span data-stu-id="00751-172">This constructor allows you to override that behavior.</span></span> <span data-ttu-id="00751-173">指定0将在添加第一个元素时创建字典，1则在添加第二个元素时创建字典，依此类推。</span><span class="sxs-lookup"><span data-stu-id="00751-173">Specify 0 to create the dictionary when the first element is added, 1 to create the dictionary when the second element is added, and so on.</span></span> <span data-ttu-id="00751-174">如果指定-1 作为阈值，则永远不会创建查找字典。</span><span class="sxs-lookup"><span data-stu-id="00751-174">If you specify -1 as the threshold, the lookup dictionary is never created.</span></span>  
  
 <span data-ttu-id="00751-175">对于非常小的集合，查找字典提供的检索速度改进可能不值得字典所需的额外内存。</span><span class="sxs-lookup"><span data-stu-id="00751-175">For very small collections the improvement in retrieval speed provided by the lookup dictionary might not be worth the extra memory required by the dictionary.</span></span> <span data-ttu-id="00751-176">通过设置阈值，您可以决定何时进行权衡。</span><span class="sxs-lookup"><span data-stu-id="00751-176">Setting a threshold allows you to decide when to make that tradeoff.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="00751-177">由于 <xref:System.Collections.ObjectModel.KeyedCollection%602> 类是抽象的（`MustInherit` 在 Visual Basic 中），因此必须从派生该类才能使用。</span><span class="sxs-lookup"><span data-stu-id="00751-177">Because the <xref:System.Collections.ObjectModel.KeyedCollection%602> class is abstract (`MustInherit` in Visual Basic), you must derive from it in order to use it.</span></span> <span data-ttu-id="00751-178">在派生类型的构造函数中，调用相应的 <xref:System.Collections.ObjectModel.KeyedCollection%602> 构造函数。</span><span class="sxs-lookup"><span data-stu-id="00751-178">In the constructor for your derived type, call the appropriate <xref:System.Collections.ObjectModel.KeyedCollection%602> constructor.</span></span> <span data-ttu-id="00751-179">不需要公开功能，如相等比较器或构造函数中的字典创建阈值。</span><span class="sxs-lookup"><span data-stu-id="00751-179">It is not necessary to expose functionality like the equality comparer or the dictionary creation threshold in your constructors.</span></span>  
  
 <span data-ttu-id="00751-180">此构造函数的运算复杂度为 O （1）。</span><span class="sxs-lookup"><span data-stu-id="00751-180">This constructor is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="00751-181">下面的代码示例演示如何重写受保护的 <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>、<xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>、<xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>和 <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> 方法，以便为 <xref:System.Collections.ObjectModel.Collection%601.Add%2A>、<xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A>和 <xref:System.Collections.ObjectModel.Collection%601.Clear%2A> 方法提供自定义行为，并设置默认的 <xref:System.Collections.ObjectModel.Collection%601.Item%2A> 属性（中C#的索引器）。</span><span class="sxs-lookup"><span data-stu-id="00751-181">The following code example shows how to override the protected <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>, and <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> methods, to provide custom behavior for the <xref:System.Collections.ObjectModel.Collection%601.Add%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A>, and <xref:System.Collections.ObjectModel.Collection%601.Clear%2A> methods, and for setting the default <xref:System.Collections.ObjectModel.Collection%601.Item%2A> property (the indexer in C#).</span></span> <span data-ttu-id="00751-182">在此示例中提供的自定义行为是一个名为 `Changed`的通知事件，它在每个重写的方法的末尾引发。</span><span class="sxs-lookup"><span data-stu-id="00751-182">The custom behavior provided in this example is a notification event named `Changed`, which is raised at the end of each of the overridden methods.</span></span>  
  
 <span data-ttu-id="00751-183">此代码示例使用阈值为0的 <xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%2CSystem.Int32%29> 构造函数，以便在第一次将对象添加到集合时创建内部字典。</span><span class="sxs-lookup"><span data-stu-id="00751-183">The code example uses the <xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%2CSystem.Int32%29> constructor with a threshold of 0, so that the internal dictionary is created the first time an object is added to the collection.</span></span>  
  
 <span data-ttu-id="00751-184">此代码示例创建了 `SimpleOrder` 类，该类派生自 <xref:System.Collections.ObjectModel.KeyedCollection%602> 并表示一个简单的订单窗体。</span><span class="sxs-lookup"><span data-stu-id="00751-184">The code example creates the `SimpleOrder` class, which derives from <xref:System.Collections.ObjectModel.KeyedCollection%602> and represents a simple order form.</span></span> <span data-ttu-id="00751-185">订单窗体包含表示排序项 `OrderItem` 对象。</span><span class="sxs-lookup"><span data-stu-id="00751-185">The order form contains `OrderItem` objects representing items ordered.</span></span> <span data-ttu-id="00751-186">此代码示例还创建了一个包含事件信息的 `SimpleOrderChangedEventArgs` 类和一个用于标识更改类型的枚举。</span><span class="sxs-lookup"><span data-stu-id="00751-186">The code example also creates a `SimpleOrderChangedEventArgs` class to contain the event information, and an enumeration to identify the type of change.</span></span>  
  
 <span data-ttu-id="00751-187">此代码示例通过在 `Demo` 类的 `Main` 方法中调用派生类的属性和方法，演示了自定义行为。</span><span class="sxs-lookup"><span data-stu-id="00751-187">The code example demonstrates the custom behavior by calling the properties and methods of the derived class, in the `Main` method of the `Demo` class.</span></span>  
  
 <span data-ttu-id="00751-188">此代码示例使用具有不可变键的对象。</span><span class="sxs-lookup"><span data-stu-id="00751-188">This code example uses objects with immutable keys.</span></span> <span data-ttu-id="00751-189">有关使用可变键的代码示例，请参阅 <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>。</span><span class="sxs-lookup"><span data-stu-id="00751-189">For a code example that uses mutable keys, see <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>.</span></span>  
  
 [!code-cpp[KeyedCollection2#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection2/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection2#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection2/cs/source.cs#1)]
 [!code-vb[KeyedCollection2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection2/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="00751-190"><paramref name="dictionaryCreationThreshold" /> 小于 -1。</span><span class="sxs-lookup"><span data-stu-id="00751-190"><paramref name="dictionaryCreationThreshold" /> is less than -1.</span></span></exception>
        <altmember cref="T:System.Collections.Generic.IEqualityComparer`1" />
      </Docs>
    </Member>
    <Member MemberName="ChangeItemKey">
      <MemberSignature Language="C#" Value="protected void ChangeItemKey (TItem item, TKey newKey);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void ChangeItemKey(!TItem item, !TKey newKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.ChangeItemKey(`1,`0)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub ChangeItemKey (item As TItem, newKey As TKey)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void ChangeItemKey(TItem item, TKey newKey);" />
      <MemberSignature Language="F#" Value="member this.ChangeItemKey : 'Item * 'Key -&gt; unit" Usage="keyedCollection.ChangeItemKey (item, newKey)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="TItem" />
        <Parameter Name="newKey" Type="TKey" />
      </Parameters>
      <Docs>
        <param name="item"><span data-ttu-id="00751-191">要更改其键的元素。</span><span class="sxs-lookup"><span data-stu-id="00751-191">The element to change the key of.</span></span></param>
        <param name="newKey"><span data-ttu-id="00751-192"><paramref name="item" /> 的新键。</span><span class="sxs-lookup"><span data-stu-id="00751-192">The new key for <paramref name="item" />.</span></span></param>
        <summary><span data-ttu-id="00751-193">更改与查找字典中指定元素相关联的键。</span><span class="sxs-lookup"><span data-stu-id="00751-193">Changes the key associated with the specified element in the lookup dictionary.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00751-194">此方法不会修改嵌入在 `item`中的键;它只替换保存在查找字典中的密钥。</span><span class="sxs-lookup"><span data-stu-id="00751-194">This method does not modify the key embedded in `item`; it simply replaces the key saved in the lookup dictionary.</span></span>  <span data-ttu-id="00751-195">因此，如果 `newKey` 不同于嵌入 `item`中的键，则不能使用 <xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A>返回的键访问 `item`。</span><span class="sxs-lookup"><span data-stu-id="00751-195">Therefore, if `newKey` is different from the key that is embedded in `item`, you cannot access `item` by using the key returned by <xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A>.</span></span>  
  
 <span data-ttu-id="00751-196">如果 <xref:System.Collections.ObjectModel.KeyedCollection%602> 没有查找字典，则此方法不执行任何操作。</span><span class="sxs-lookup"><span data-stu-id="00751-196">This method does nothing if the <xref:System.Collections.ObjectModel.KeyedCollection%602> does not have a lookup dictionary.</span></span>  
  
 <span data-ttu-id="00751-197"><xref:System.Collections.ObjectModel.KeyedCollection%602> 中的每个键都必须是唯一的。</span><span class="sxs-lookup"><span data-stu-id="00751-197">Every key in a <xref:System.Collections.ObjectModel.KeyedCollection%602> must be unique.</span></span> <span data-ttu-id="00751-198">不能 `null`密钥。</span><span class="sxs-lookup"><span data-stu-id="00751-198">A key cannot be `null`.</span></span>  
  
 <span data-ttu-id="00751-199">此方法为 O （1）操作。</span><span class="sxs-lookup"><span data-stu-id="00751-199">This method is an O(1) operation.</span></span>  
  
## <a name="notes-for-implementers"></a><span data-ttu-id="00751-200">实施者注意事项</span><span class="sxs-lookup"><span data-stu-id="00751-200">Notes for Implementers</span></span>  
 <span data-ttu-id="00751-201">在修改项目中嵌入的键之前，必须调用此方法以更新查找字典中的键。</span><span class="sxs-lookup"><span data-stu-id="00751-201">Before modifying the key embedded in an item, you must call this method to update the key in the lookup dictionary.</span></span> <span data-ttu-id="00751-202">如果字典创建阈值为-1，则不需要调用此方法。</span><span class="sxs-lookup"><span data-stu-id="00751-202">If the dictionary creation threshold is -1, calling this method is not necessary.</span></span>  
  
 <span data-ttu-id="00751-203">不要将 <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A> 方法公开为派生类的公共方法。</span><span class="sxs-lookup"><span data-stu-id="00751-203">Do not expose the <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A> method as a public method of a derived class.</span></span> <span data-ttu-id="00751-204">此方法误用会使查找字典与项键不同步。</span><span class="sxs-lookup"><span data-stu-id="00751-204">Misuse of this method puts the lookup dictionary out of sync with item keys.</span></span> <span data-ttu-id="00751-205">例如，将 "密钥" 设置为 "`null`"，然后将其设置为另一个值时，会将一个项的多个键添加到查找字典中。</span><span class="sxs-lookup"><span data-stu-id="00751-205">For example, setting the key to `null` and then setting it to another value adds multiple keys for an item to the lookup dictionary.</span></span> <span data-ttu-id="00751-206">在内部公开此方法以允许可变项键：当项的键发生更改时，此方法用于更改查找字典中的键。</span><span class="sxs-lookup"><span data-stu-id="00751-206">Expose this method internally to allow mutable item keys: When the key for an item changes, this method is used to change the key in the lookup dictionary.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="00751-207">下面的代码示例演示如何重写受保护的 <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A> 方法以支持可变键，以及如何重写受保护的 <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>、<xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>、<xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>和 <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> 方法以维护密钥和集合的完整性。</span><span class="sxs-lookup"><span data-stu-id="00751-207">The following code example shows how to override the protected <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A> method to support mutable keys, and how to override the protected <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>, and <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> methods to maintain the integrity of the keys and the collection.</span></span>  
  
 <span data-ttu-id="00751-208">此代码示例创建从 <xref:System.Collections.ObjectModel.KeyedCollection%602>派生的 `MutableKeys` 集合，以及 `MutableKey` 类。</span><span class="sxs-lookup"><span data-stu-id="00751-208">The code example creates the `MutableKeys` collection, which derives from <xref:System.Collections.ObjectModel.KeyedCollection%602>, and the `MutableKey` class.</span></span> <span data-ttu-id="00751-209">`MutableKey` 类具有可设置的 `Key` 属性。</span><span class="sxs-lookup"><span data-stu-id="00751-209">The `MutableKey` class has a settable `Key` property.</span></span> <span data-ttu-id="00751-210">将新键分配给属性后，属性 setter 将调用集合的 `internal` （`Friend` Visual Basic `ChangeKey`），以测试新密钥是否与现有密钥冲突。</span><span class="sxs-lookup"><span data-stu-id="00751-210">When a new key is assigned to the property, the property setter calls the `internal` (`Friend` in Visual Basic) `ChangeKey` method of the collection to test whether the new key would conflict with an existing key.</span></span> <span data-ttu-id="00751-211">如果是这样，则会引发异常，并且不会更改属性值。</span><span class="sxs-lookup"><span data-stu-id="00751-211">If so, an exception is thrown and the property value is not changed.</span></span>  
  
 <span data-ttu-id="00751-212">为了保持 `MutableKey` 对象与 `MutableKeys` 集合之间的连接，并阻止将某个对象插入到两个集合中，`MutableKey` 类在`Friend` Visual Basic）字段中具有 `internal` （`Collection`）。</span><span class="sxs-lookup"><span data-stu-id="00751-212">In order to maintain the connection between a `MutableKey` object and the `MutableKeys` collection and to prevent an object from being inserted into two collections, the `MutableKey` class has an `internal` (`Friend` in Visual Basic) `Collection` field.</span></span> <span data-ttu-id="00751-213">此字段由受保护的方法维护，这些方法提供了用于在集合中添加和移除项的自定义行为，例如 <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="00751-213">This field is maintained by the protected methods that provide custom behavior for adding and removing items from the collection, such as the <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A> method.</span></span> <span data-ttu-id="00751-214">在将项添加到集合并在移除该项时清除此字段。</span><span class="sxs-lookup"><span data-stu-id="00751-214">The field is set when the item is added to a collection and cleared when the item is removed.</span></span>  
  
 [!code-csharp[KeyedCollectionMutable#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollectionMutable/cs/source.cs#1)]
 [!code-vb[KeyedCollectionMutable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollectionMutable/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="00751-215"><paramref name="item" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="00751-215"><paramref name="item" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="00751-216">- 或 -</span><span class="sxs-lookup"><span data-stu-id="00751-216">-or-</span></span> 
 <span data-ttu-id="00751-217"><paramref name="key" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="00751-217"><paramref name="key" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="00751-218"><paramref name="item" /> 未找到。</span><span class="sxs-lookup"><span data-stu-id="00751-218"><paramref name="item" /> is not found.</span></span>  
  
<span data-ttu-id="00751-219">- 或 -</span><span class="sxs-lookup"><span data-stu-id="00751-219">-or-</span></span> 
 <span data-ttu-id="00751-220"><paramref name="key" /> 在 <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> 中已存在。</span><span class="sxs-lookup"><span data-stu-id="00751-220"><paramref name="key" /> already exists in the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />.</span></span></exception>
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.GetKeyForItem(`1)" />
        <altmember cref="P:System.Collections.ObjectModel.KeyedCollection`2.Item(`0)" />
      </Docs>
    </Member>
    <Member MemberName="ClearItems">
      <MemberSignature Language="C#" Value="protected override void ClearItems ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void ClearItems() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.ClearItems" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub ClearItems ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void ClearItems();" />
      <MemberSignature Language="F#" Value="override this.ClearItems : unit -&gt; unit" Usage="keyedCollection.ClearItems " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="00751-221">从 <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> 中删除所有元素。</span><span class="sxs-lookup"><span data-stu-id="00751-221">Removes all elements from the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00751-222">如果有查找字典，此方法会将其清除，但不会将其删除。</span><span class="sxs-lookup"><span data-stu-id="00751-222">If there is a lookup dictionary, this method clears it but does not delete it.</span></span>  
  
 <span data-ttu-id="00751-223">如果元素数已超过字典创建阈值，并且 <xref:System.Collections.ObjectModel.KeyedCollection%602> 使用的是查找字典，则即使元素数在阈值下也是如此，它仍将继续使用查找字典。</span><span class="sxs-lookup"><span data-stu-id="00751-223">If the number of elements has exceeded the dictionary creation threshold and the <xref:System.Collections.ObjectModel.KeyedCollection%602> is using a lookup dictionary, it will continue to use a lookup dictionary even though the number of elements is again under the threshold.</span></span>  
  
 <span data-ttu-id="00751-224">此方法是一个 O （`n`）操作，其中 `n` 是 <xref:System.Collections.ObjectModel.Collection%601.Count%2A>的。</span><span class="sxs-lookup"><span data-stu-id="00751-224">This method is an O(`n`) operation, where `n` is <xref:System.Collections.ObjectModel.Collection%601.Count%2A>.</span></span>  
  
## <a name="notes-for-implementers"></a><span data-ttu-id="00751-225">实施者注意事项</span><span class="sxs-lookup"><span data-stu-id="00751-225">Notes for Implementers</span></span>  
 <span data-ttu-id="00751-226">重写此方法以提供从 <xref:System.Collections.ObjectModel.Collection%601> 泛型类继承的 <xref:System.Collections.ObjectModel.Collection%601.Clear%2A> 方法的自定义行为。</span><span class="sxs-lookup"><span data-stu-id="00751-226">Override this method to provide customized behavior for the <xref:System.Collections.ObjectModel.Collection%601.Clear%2A> method, inherited from the <xref:System.Collections.ObjectModel.Collection%601> generic class.</span></span>  
  
 <span data-ttu-id="00751-227">调用此方法的基类实现以清除基础集合并清除查找字典。</span><span class="sxs-lookup"><span data-stu-id="00751-227">Call the base class implementation of this method to clear the underlying collection and to clear the lookup dictionary.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="00751-228">本部分包含两个代码示例，这些示例演示如何重写 <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A> 方法，以提供从集合中清除所有对象的自定义行为。</span><span class="sxs-lookup"><span data-stu-id="00751-228">This section contains two code examples that demonstrate overriding the <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A> method to provide custom behavior for clearing all objects from the collection.</span></span> <span data-ttu-id="00751-229">第一个示例添加了一个自定义通知事件，第二个示例为具有可变键的对象集合提供支持。</span><span class="sxs-lookup"><span data-stu-id="00751-229">The first example adds a custom notification event and the second provides support for a collection of objects with mutable keys.</span></span>  
  
 <span data-ttu-id="00751-230">示例 1</span><span class="sxs-lookup"><span data-stu-id="00751-230">Example 1</span></span>  
  
 <span data-ttu-id="00751-231">下面的代码示例演示如何重写受保护的 <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>、<xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>、<xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>和 <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> 方法，以便为 <xref:System.Collections.ObjectModel.Collection%601.Add%2A>、<xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A>和 <xref:System.Collections.ObjectModel.Collection%601.Clear%2A> 方法提供自定义行为，并设置默认的 <xref:System.Collections.ObjectModel.Collection%601.Item%2A> 属性（中C#的索引器）。</span><span class="sxs-lookup"><span data-stu-id="00751-231">The following code example shows how to override the protected <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>, and <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> methods, to provide custom behavior for the <xref:System.Collections.ObjectModel.Collection%601.Add%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A>, and <xref:System.Collections.ObjectModel.Collection%601.Clear%2A> methods, and for setting the default <xref:System.Collections.ObjectModel.Collection%601.Item%2A> property (the indexer in C#).</span></span> <span data-ttu-id="00751-232">在此示例中提供的自定义行为是一个名为 `Changed`的通知事件，它在每个重写的方法的末尾引发。</span><span class="sxs-lookup"><span data-stu-id="00751-232">The custom behavior provided in this example is a notification event named `Changed`, which is raised at the end of each of the overridden methods.</span></span>  
  
 <span data-ttu-id="00751-233">此代码示例创建了 `SimpleOrder` 类，该类派生自 <xref:System.Collections.ObjectModel.KeyedCollection%602> 并表示一个简单的订单窗体。</span><span class="sxs-lookup"><span data-stu-id="00751-233">The code example creates the `SimpleOrder` class, which derives from <xref:System.Collections.ObjectModel.KeyedCollection%602> and represents a simple order form.</span></span> <span data-ttu-id="00751-234">订单窗体包含表示排序项 `OrderItem` 对象。</span><span class="sxs-lookup"><span data-stu-id="00751-234">The order form contains `OrderItem` objects representing items ordered.</span></span> <span data-ttu-id="00751-235">此代码示例还创建了一个包含事件信息的 `SimpleOrderChangedEventArgs` 类和一个用于标识更改类型的枚举。</span><span class="sxs-lookup"><span data-stu-id="00751-235">The code example also creates a `SimpleOrderChangedEventArgs` class to contain the event information, and an enumeration to identify the type of change.</span></span>  
  
 <span data-ttu-id="00751-236">此代码示例通过在 `Demo` 类的 `Main` 方法中调用派生类的属性和方法，演示了自定义行为。</span><span class="sxs-lookup"><span data-stu-id="00751-236">The code example demonstrates the custom behavior by calling the properties and methods of the derived class, in the `Main` method of the `Demo` class.</span></span>  
  
 <span data-ttu-id="00751-237">此代码示例使用具有不可变键的对象。</span><span class="sxs-lookup"><span data-stu-id="00751-237">This code example uses objects with immutable keys.</span></span> <span data-ttu-id="00751-238">有关使用可变键的代码示例，请参阅 <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>。</span><span class="sxs-lookup"><span data-stu-id="00751-238">For a code example that uses mutable keys, see <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>.</span></span>  
  
 [!code-cpp[KeyedCollection2#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection2/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection2#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection2/cs/source.cs#1)]
 [!code-vb[KeyedCollection2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection2/vb/source.vb#1)]  
  
 <span data-ttu-id="00751-239">示例 2</span><span class="sxs-lookup"><span data-stu-id="00751-239">Example 2</span></span>  
  
 <span data-ttu-id="00751-240">下面的代码示例演示如何重写受保护的 <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A> 方法以支持可变键，以及如何重写受保护的 <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>、<xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>、<xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>和 <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> 方法以维护密钥和集合的完整性。</span><span class="sxs-lookup"><span data-stu-id="00751-240">The following code example shows how to override the protected <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A> method to support mutable keys, and how to override the protected <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>, and <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> methods to maintain the integrity of the keys and the collection.</span></span>  
  
 <span data-ttu-id="00751-241">此代码示例创建从 <xref:System.Collections.ObjectModel.KeyedCollection%602>派生的 `MutableKeys` 集合，以及 `MutableKey` 类。</span><span class="sxs-lookup"><span data-stu-id="00751-241">The code example creates the `MutableKeys` collection, which derives from <xref:System.Collections.ObjectModel.KeyedCollection%602>, and the `MutableKey` class.</span></span> <span data-ttu-id="00751-242">`MutableKey` 类具有可设置的 `Key` 属性。</span><span class="sxs-lookup"><span data-stu-id="00751-242">The `MutableKey` class has a settable `Key` property.</span></span> <span data-ttu-id="00751-243">将新键分配给属性后，属性 setter 将调用集合的 `internal` （`Friend` Visual Basic `ChangeKey`），以测试新密钥是否与现有密钥冲突。</span><span class="sxs-lookup"><span data-stu-id="00751-243">When a new key is assigned to the property, the property setter calls the `internal` (`Friend` in Visual Basic) `ChangeKey` method of the collection to test whether the new key would conflict with an existing key.</span></span> <span data-ttu-id="00751-244">如果是这样，则会引发异常，并且不会更改属性值。</span><span class="sxs-lookup"><span data-stu-id="00751-244">If so, an exception is thrown and the property value is not changed.</span></span>  
  
 <span data-ttu-id="00751-245">为了保持 `MutableKey` 对象与 `MutableKeys` 集合之间的连接，并阻止将某个对象插入到两个集合中，`MutableKey` 类在`Friend` Visual Basic）字段中具有 `internal` （`Collection`）。</span><span class="sxs-lookup"><span data-stu-id="00751-245">In order to maintain the connection between a `MutableKey` object and the `MutableKeys` collection and to prevent an object from being inserted into two collections, the `MutableKey` class has an `internal` (`Friend` in Visual Basic) `Collection` field.</span></span> <span data-ttu-id="00751-246">此字段由受保护的方法维护，这些方法提供了用于在集合中添加和移除项的自定义行为，例如 <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="00751-246">This field is maintained by the protected methods that provide custom behavior for adding and removing items from the collection, such as the <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A> method.</span></span> <span data-ttu-id="00751-247">在将项添加到集合并在移除该项时清除此字段。</span><span class="sxs-lookup"><span data-stu-id="00751-247">The field is set when the item is added to a collection and cleared when the item is removed.</span></span>  
  
 [!code-csharp[KeyedCollectionMutable#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollectionMutable/cs/source.cs#1)]
 [!code-vb[KeyedCollectionMutable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollectionMutable/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.Remove(`0)" />
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.RemoveItem(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Comparer">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEqualityComparer&lt;TKey&gt; Comparer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEqualityComparer`1&lt;!TKey&gt; Comparer" />
      <MemberSignature Language="DocId" Value="P:System.Collections.ObjectModel.KeyedCollection`2.Comparer" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Comparer As IEqualityComparer(Of TKey)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IEqualityComparer&lt;TKey&gt; ^ Comparer { System::Collections::Generic::IEqualityComparer&lt;TKey&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Comparer : System.Collections.Generic.IEqualityComparer&lt;'Key&gt;" Usage="System.Collections.ObjectModel.KeyedCollection&lt;'Key, 'Item&gt;.Comparer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEqualityComparer&lt;TKey&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="00751-248">获取用于确定集合中的键是否相等的泛型相等比较器。</span><span class="sxs-lookup"><span data-stu-id="00751-248">Gets the generic equality comparer that is used to determine equality of keys in the collection.</span></span></summary>
        <value><span data-ttu-id="00751-249">用于确定集合中的键是否相等的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 泛型接口的实现。</span><span class="sxs-lookup"><span data-stu-id="00751-249">The implementation of the <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> generic interface that is used to determine equality of keys in the collection.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00751-250">检索此属性的值的运算复杂度为 O(1)。</span><span class="sxs-lookup"><span data-stu-id="00751-250">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (TKey key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains(!TKey key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.Contains(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (key As TKey) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Contains(TKey key);" />
      <MemberSignature Language="F#" Value="override this.Contains : 'Key -&gt; bool" Usage="keyedCollection.Contains key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TKey" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="00751-251">要在 <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> 中定位的键。</span><span class="sxs-lookup"><span data-stu-id="00751-251">The key to locate in the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />.</span></span></param>
        <summary><span data-ttu-id="00751-252">确定集合是否包含具有指定键的元素。</span><span class="sxs-lookup"><span data-stu-id="00751-252">Determines whether the collection contains an element with the specified key.</span></span></summary>
        <returns><span data-ttu-id="00751-253">如果 <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> 包含具有指定键的元素，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="00751-253"><see langword="true" /> if the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> contains an element with the specified key; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00751-254">如果 <xref:System.Collections.ObjectModel.KeyedCollection%602> 包含查找字典，则 `key` 用于搜索字典。</span><span class="sxs-lookup"><span data-stu-id="00751-254">If the <xref:System.Collections.ObjectModel.KeyedCollection%602> has a lookup dictionary, `key` is used to search the dictionary.</span></span> <span data-ttu-id="00751-255">如果没有查找字典，则使用 <xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A> 方法提取每个元素的键，并与指定键进行比较。</span><span class="sxs-lookup"><span data-stu-id="00751-255">If there is no lookup dictionary, the key of each element is extracted using the <xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A> method and compared with the specified key.</span></span>  
  
 <span data-ttu-id="00751-256">如果 <xref:System.Collections.ObjectModel.KeyedCollection%602> 包含查找字典，则此方法为 O （1）操作;否则，它是一个 O （`n`）操作，其中 `n` 是 <xref:System.Collections.ObjectModel.Collection%601.Count%2A>的。</span><span class="sxs-lookup"><span data-stu-id="00751-256">This method is an O(1) operation if the <xref:System.Collections.ObjectModel.KeyedCollection%602> has a lookup dictionary; otherwise it is an O(`n`) operation, where `n` is <xref:System.Collections.ObjectModel.Collection%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="00751-257">此代码示例演示从 <xref:System.Collections.ObjectModel.KeyedCollection%602>派生集合类所需的最少代码：重写 <xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A> 方法并提供委托给基类构造函数的公共构造函数。</span><span class="sxs-lookup"><span data-stu-id="00751-257">This code example shows the minimum code necessary to derive a collection class from <xref:System.Collections.ObjectModel.KeyedCollection%602>: overriding the <xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A> method and providing a public constructor that delegates to a base class constructor.</span></span> <span data-ttu-id="00751-258">此代码示例还演示了继承自 <xref:System.Collections.ObjectModel.KeyedCollection%602> 和 <xref:System.Collections.ObjectModel.Collection%601> 类的许多属性和方法。</span><span class="sxs-lookup"><span data-stu-id="00751-258">The code example also demonstrates many of the properties and methods inherited from <xref:System.Collections.ObjectModel.KeyedCollection%602> and <xref:System.Collections.ObjectModel.Collection%601> classes.</span></span>  
  
 <span data-ttu-id="00751-259">`SimpleOrder` 类是一个非常简单的申请列表，其中包含 `OrderItem` 对象，每个对象都表示顺序中的行项。</span><span class="sxs-lookup"><span data-stu-id="00751-259">The `SimpleOrder` class is a very simple requisition list that contains `OrderItem` objects, each of which represents a line item in the order.</span></span> <span data-ttu-id="00751-260">`OrderItem` 的键是不可变的，这是派生自 <xref:System.Collections.ObjectModel.KeyedCollection%602>的类的重要注意事项。</span><span class="sxs-lookup"><span data-stu-id="00751-260">The key of `OrderItem` is immutable, an important consideration for classes that derive from <xref:System.Collections.ObjectModel.KeyedCollection%602>.</span></span> <span data-ttu-id="00751-261">有关使用可变键的代码示例，请参阅 <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>。</span><span class="sxs-lookup"><span data-stu-id="00751-261">For a code example that uses mutable keys, see <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>.</span></span>  
  
 [!code-cpp[KeyedCollection#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection/cs/source.cs#1)]
 [!code-vb[KeyedCollection#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="00751-262"><paramref name="key" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="00751-262"><paramref name="key" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.GetKeyForItem(`1)" />
      </Docs>
    </Member>
    <Member MemberName="Dictionary">
      <MemberSignature Language="C#" Value="protected System.Collections.Generic.IDictionary&lt;TKey,TItem&gt; Dictionary { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IDictionary`2&lt;!TKey, !TItem&gt; Dictionary" />
      <MemberSignature Language="DocId" Value="P:System.Collections.ObjectModel.KeyedCollection`2.Dictionary" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property Dictionary As IDictionary(Of TKey, TItem)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Collections::Generic::IDictionary&lt;TKey, TItem&gt; ^ Dictionary { System::Collections::Generic::IDictionary&lt;TKey, TItem&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Dictionary : System.Collections.Generic.IDictionary&lt;'Key, 'Item&gt;" Usage="System.Collections.ObjectModel.KeyedCollection&lt;'Key, 'Item&gt;.Dictionary" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;TKey,TItem&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="00751-263">获取 <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> 的查找字典。</span><span class="sxs-lookup"><span data-stu-id="00751-263">Gets the lookup dictionary of the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />.</span></span></summary>
        <value><span data-ttu-id="00751-264"><see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> 的查找字典（如果存在），否则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="00751-264">The lookup dictionary of the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />, if it exists; otherwise, <see langword="null" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00751-265">默认情况下，<xref:System.Collections.ObjectModel.KeyedCollection%602> 包括添加第一项时创建的查找字典。</span><span class="sxs-lookup"><span data-stu-id="00751-265">By default, the <xref:System.Collections.ObjectModel.KeyedCollection%602> includes a lookup dictionary that is created when the first item is added.</span></span> <span data-ttu-id="00751-266">在将项添加到 <xref:System.Collections.ObjectModel.KeyedCollection%602>时，该项的键将被提取一次并保存在查找字典中，以加快搜索速度。</span><span class="sxs-lookup"><span data-stu-id="00751-266">When an item is added to the <xref:System.Collections.ObjectModel.KeyedCollection%602>, the item's key is extracted once and saved in the lookup dictionary for faster searches.</span></span> <span data-ttu-id="00751-267">可以通过使用 <xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%2CSystem.Int32%29> 构造函数并指定字典创建阈值来重写此行为。</span><span class="sxs-lookup"><span data-stu-id="00751-267">This behavior can be overridden by using the <xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%2CSystem.Int32%29> constructor and specifying a dictionary creation threshold.</span></span>  
  
 <span data-ttu-id="00751-268">检索此属性的值的运算复杂度为 O(1)。</span><span class="sxs-lookup"><span data-stu-id="00751-268">Retrieving the value of this property is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="00751-269">下面的代码示例演示如何重写受保护的 <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A> 方法以支持可变键，以及如何重写受保护的 <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>、<xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>、<xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>和 <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> 方法以维护密钥和集合的完整性。</span><span class="sxs-lookup"><span data-stu-id="00751-269">The following code example shows how to override the protected <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A> method to support mutable keys, and how to override the protected <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>, and <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> methods to maintain the integrity of the keys and the collection.</span></span>  
  
 <span data-ttu-id="00751-270">此代码示例创建从 <xref:System.Collections.ObjectModel.KeyedCollection%602>派生的 `MutableKeys` 集合，以及 `MutableKey` 类。</span><span class="sxs-lookup"><span data-stu-id="00751-270">The code example creates the `MutableKeys` collection, which derives from <xref:System.Collections.ObjectModel.KeyedCollection%602>, and the `MutableKey` class.</span></span> <span data-ttu-id="00751-271">`MutableKey` 类具有可设置的 `Key` 属性。</span><span class="sxs-lookup"><span data-stu-id="00751-271">The `MutableKey` class has a settable `Key` property.</span></span> <span data-ttu-id="00751-272">将新键分配给属性后，属性 setter 将调用集合的 `internal` （`Friend` Visual Basic `ChangeKey`），以测试新密钥是否与现有密钥冲突。</span><span class="sxs-lookup"><span data-stu-id="00751-272">When a new key is assigned to the property, the property setter calls the `internal` (`Friend` in Visual Basic) `ChangeKey` method of the collection to test whether the new key would conflict with an existing key.</span></span> <span data-ttu-id="00751-273">如果是这样，则会引发异常，并且不会更改属性值。</span><span class="sxs-lookup"><span data-stu-id="00751-273">If so, an exception is thrown and the property value is not changed.</span></span>  
  
 <span data-ttu-id="00751-274">为了保持 `MutableKey` 对象与 `MutableKeys` 集合之间的连接，并阻止将某个对象插入到两个集合中，`MutableKey` 类在`Friend` Visual Basic）字段中具有 `internal` （`Collection`）。</span><span class="sxs-lookup"><span data-stu-id="00751-274">In order to maintain the connection between a `MutableKey` object and the `MutableKeys` collection and to prevent an object from being inserted into two collections, the `MutableKey` class has an `internal` (`Friend` in Visual Basic) `Collection` field.</span></span> <span data-ttu-id="00751-275">此字段由受保护的方法维护，这些方法提供了用于在集合中添加和移除项的自定义行为，例如 <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="00751-275">This field is maintained by the protected methods that provide custom behavior for adding and removing items from the collection, such as the <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A> method.</span></span> <span data-ttu-id="00751-276">在将项添加到集合并在移除该项时清除此字段。</span><span class="sxs-lookup"><span data-stu-id="00751-276">The field is set when the item is added to a collection and cleared when the item is removed.</span></span>  
  
 [!code-csharp[KeyedCollectionMutable#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollectionMutable/cs/source.cs#1)]
 [!code-vb[KeyedCollectionMutable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollectionMutable/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.Generic.IDictionary`2" />
      </Docs>
    </Member>
    <Member MemberName="GetKeyForItem">
      <MemberSignature Language="C#" Value="protected abstract TKey GetKeyForItem (TItem item);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance !TKey GetKeyForItem(!TItem item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.GetKeyForItem(`1)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function GetKeyForItem (item As TItem) As TKey" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract TKey GetKeyForItem(TItem item);" />
      <MemberSignature Language="F#" Value="abstract member GetKeyForItem : 'Item -&gt; 'Key" Usage="keyedCollection.GetKeyForItem item" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TKey</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="TItem" />
      </Parameters>
      <Docs>
        <param name="item"><span data-ttu-id="00751-277">从中提取键的元素。</span><span class="sxs-lookup"><span data-stu-id="00751-277">The element from which to extract the key.</span></span></param>
        <summary><span data-ttu-id="00751-278">在派生类中实现时，将从指定元素提取键。</span><span class="sxs-lookup"><span data-stu-id="00751-278">When implemented in a derived class, extracts the key from the specified element.</span></span></summary>
        <returns><span data-ttu-id="00751-279">指定元素的键。</span><span class="sxs-lookup"><span data-stu-id="00751-279">The key for the specified element.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00751-280">如果查找字典中的键与 `item`嵌入的键不同，则不能通过使用 <xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A>返回的键来访问 `item`。</span><span class="sxs-lookup"><span data-stu-id="00751-280">If the key in the lookup dictionary is different from the key that is embedded in `item`, you cannot access `item` by using the key returned by <xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A>.</span></span>  
  
 <span data-ttu-id="00751-281">您可以实现此方法以返回包含没有键的项的集合 `null`，在这种情况下，只能通过索引来访问项。</span><span class="sxs-lookup"><span data-stu-id="00751-281">You can implement this method to return `null` for a collection that contains items without keys, in which case the items can be accessed only by their index.</span></span> <span data-ttu-id="00751-282">此方法为 O （1）操作。</span><span class="sxs-lookup"><span data-stu-id="00751-282">This method is an O(1) operation.</span></span>  
  
## <a name="notes-for-implementers"></a><span data-ttu-id="00751-283">实施者注意事项</span><span class="sxs-lookup"><span data-stu-id="00751-283">Notes for Implementers</span></span>  
 <span data-ttu-id="00751-284">必须重写此方法以提供一种方法，以便从字典中的项中提取键。</span><span class="sxs-lookup"><span data-stu-id="00751-284">You must override this method to provide the dictionary with a way to extract keys from items in the dictionary.</span></span>  
  
 <span data-ttu-id="00751-285">此方法在内部调用。</span><span class="sxs-lookup"><span data-stu-id="00751-285">This method is called internally.</span></span> <span data-ttu-id="00751-286">它不是公共的。</span><span class="sxs-lookup"><span data-stu-id="00751-286">It is not necessary for it to be public.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="00751-287">此代码示例演示从 <xref:System.Collections.ObjectModel.KeyedCollection%602>派生集合类所需的最少代码：重写 <xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A> 方法并提供委托给基类构造函数的公共构造函数。</span><span class="sxs-lookup"><span data-stu-id="00751-287">This code example shows the minimum code necessary to derive a collection class from <xref:System.Collections.ObjectModel.KeyedCollection%602>: overriding the <xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A> method and providing a public constructor that delegates to a base class constructor.</span></span> <span data-ttu-id="00751-288">此代码示例还演示了继承自 <xref:System.Collections.ObjectModel.KeyedCollection%602> 和 <xref:System.Collections.ObjectModel.Collection%601> 类的许多属性和方法。</span><span class="sxs-lookup"><span data-stu-id="00751-288">The code example also demonstrates many of the properties and methods inherited from <xref:System.Collections.ObjectModel.KeyedCollection%602> and <xref:System.Collections.ObjectModel.Collection%601> classes.</span></span>  
  
 <span data-ttu-id="00751-289">`SimpleOrder` 类是一个非常简单的申请列表，其中包含 `OrderItem` 对象，每个对象都表示顺序中的行项。</span><span class="sxs-lookup"><span data-stu-id="00751-289">The `SimpleOrder` class is a very simple requisition list that contains `OrderItem` objects, each of which represents a line item in the order.</span></span> <span data-ttu-id="00751-290">`OrderItem` 的键是不可变的，这是派生自 <xref:System.Collections.ObjectModel.KeyedCollection%602>的类的重要注意事项。</span><span class="sxs-lookup"><span data-stu-id="00751-290">The key of `OrderItem` is immutable, an important consideration for classes that derive from <xref:System.Collections.ObjectModel.KeyedCollection%602>.</span></span> <span data-ttu-id="00751-291">有关使用可变键的代码示例，请参阅 <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>。</span><span class="sxs-lookup"><span data-stu-id="00751-291">For a code example that uses mutable keys, see <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>.</span></span>  
  
 [!code-cpp[KeyedCollection#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection/cs/source.cs#1)]
 [!code-vb[KeyedCollection#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.ChangeItemKey(`1,`0)" />
        <altmember cref="P:System.Collections.ObjectModel.KeyedCollection`2.Item(`0)" />
      </Docs>
    </Member>
    <Member MemberName="InsertItem">
      <MemberSignature Language="C#" Value="protected override void InsertItem (int index, TItem item);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void InsertItem(int32 index, !TItem item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.InsertItem(System.Int32,`1)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub InsertItem (index As Integer, item As TItem)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void InsertItem(int index, TItem item);" />
      <MemberSignature Language="F#" Value="override this.InsertItem : int * 'Item -&gt; unit" Usage="keyedCollection.InsertItem (index, item)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="item" Type="TItem" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="00751-292">从零开始的索引，应在该索引处插入 <paramref name="item" />。</span><span class="sxs-lookup"><span data-stu-id="00751-292">The zero-based index at which <paramref name="item" /> should be inserted.</span></span></param>
        <param name="item"><span data-ttu-id="00751-293">要插入的对象。</span><span class="sxs-lookup"><span data-stu-id="00751-293">The object to insert.</span></span></param>
        <summary><span data-ttu-id="00751-294">将元素插入到 <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> 中的指定索引处。</span><span class="sxs-lookup"><span data-stu-id="00751-294">Inserts an element into the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> at the specified index.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00751-295">如果 `index` 等于 <xref:System.Collections.ObjectModel.Collection%601.Count%2A>，则 `item` 添加到 <xref:System.Collections.ObjectModel.KeyedCollection%602>的末尾。</span><span class="sxs-lookup"><span data-stu-id="00751-295">If `index` is equal to <xref:System.Collections.ObjectModel.Collection%601.Count%2A>, `item` is added to the end of the <xref:System.Collections.ObjectModel.KeyedCollection%602>.</span></span>  
  
 <span data-ttu-id="00751-296">此方法是一个 O （`n`）操作，其中 `n` 是 <xref:System.Collections.ObjectModel.Collection%601.Count%2A>的。</span><span class="sxs-lookup"><span data-stu-id="00751-296">This method is an O(`n`) operation, where `n` is <xref:System.Collections.ObjectModel.Collection%601.Count%2A>.</span></span>  
  
 <span data-ttu-id="00751-297"><xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A> 由 <xref:System.Collections.ObjectModel.Collection%601.Add%2A> 和 <xref:System.Collections.ObjectModel.Collection%601.Insert%2A> 方法调用。</span><span class="sxs-lookup"><span data-stu-id="00751-297"><xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A> is called by the <xref:System.Collections.ObjectModel.Collection%601.Add%2A> and <xref:System.Collections.ObjectModel.Collection%601.Insert%2A> methods.</span></span>  
  
## <a name="notes-for-implementers"></a><span data-ttu-id="00751-298">实施者注意事项</span><span class="sxs-lookup"><span data-stu-id="00751-298">Notes for Implementers</span></span>  
 <span data-ttu-id="00751-299">重写此方法，以便为从 <xref:System.Collections.ObjectModel.Collection%601> 泛型类继承的 <xref:System.Collections.ObjectModel.Collection%601.Add%2A> 和 <xref:System.Collections.ObjectModel.Collection%601.Insert%2A> 方法提供自定义的行为。</span><span class="sxs-lookup"><span data-stu-id="00751-299">Override this method to provide customized behavior for the <xref:System.Collections.ObjectModel.Collection%601.Add%2A> and <xref:System.Collections.ObjectModel.Collection%601.Insert%2A> methods, inherited from the <xref:System.Collections.ObjectModel.Collection%601> generic class.</span></span>  
  
 <span data-ttu-id="00751-300">调用此方法的基类实现，将项插入到基础集合中并更新查找字典。</span><span class="sxs-lookup"><span data-stu-id="00751-300">Call the base class implementation of this method to insert the item into the underlying collection and to update the lookup dictionary.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="00751-301">本节包含两个代码示例，这些示例演示如何重写 <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A> 方法，以提供用于在集合中添加或插入对象的自定义行为。</span><span class="sxs-lookup"><span data-stu-id="00751-301">This section contains two code examples that demonstrate overriding the <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A> method to provide custom behavior for adding or inserting objects into the collection.</span></span> <span data-ttu-id="00751-302">第一个示例添加了一个自定义通知事件，第二个示例为具有可变键的对象集合提供支持。</span><span class="sxs-lookup"><span data-stu-id="00751-302">The first example adds a custom notification event and the second provides support for a collection of objects with mutable keys.</span></span>  
  
 <span data-ttu-id="00751-303">示例 1</span><span class="sxs-lookup"><span data-stu-id="00751-303">Example 1</span></span>  
  
 <span data-ttu-id="00751-304">下面的代码示例演示如何重写受保护的 <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>、<xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>、<xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>和 <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> 方法，以便为 <xref:System.Collections.ObjectModel.Collection%601.Add%2A>、<xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A>和 <xref:System.Collections.ObjectModel.Collection%601.Clear%2A> 方法提供自定义行为，并设置默认的 <xref:System.Collections.ObjectModel.Collection%601.Item%2A> 属性（中C#的索引器）。</span><span class="sxs-lookup"><span data-stu-id="00751-304">The following code example shows how to override the protected <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>, and <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> methods, to provide custom behavior for the <xref:System.Collections.ObjectModel.Collection%601.Add%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A>, and <xref:System.Collections.ObjectModel.Collection%601.Clear%2A> methods, and for setting the default <xref:System.Collections.ObjectModel.Collection%601.Item%2A> property (the indexer in C#).</span></span> <span data-ttu-id="00751-305">在此示例中提供的自定义行为是一个名为 `Changed`的通知事件，它在每个重写的方法的末尾引发。</span><span class="sxs-lookup"><span data-stu-id="00751-305">The custom behavior provided in this example is a notification event named `Changed`, which is raised at the end of each of the overridden methods.</span></span>  
  
 <span data-ttu-id="00751-306">此代码示例创建了 `SimpleOrder` 类，该类派生自 <xref:System.Collections.ObjectModel.KeyedCollection%602> 并表示一个简单的订单窗体。</span><span class="sxs-lookup"><span data-stu-id="00751-306">The code example creates the `SimpleOrder` class, which derives from <xref:System.Collections.ObjectModel.KeyedCollection%602> and represents a simple order form.</span></span> <span data-ttu-id="00751-307">订单窗体包含表示排序项 `OrderItem` 对象。</span><span class="sxs-lookup"><span data-stu-id="00751-307">The order form contains `OrderItem` objects representing items ordered.</span></span> <span data-ttu-id="00751-308">此代码示例还创建了一个包含事件信息的 `SimpleOrderChangedEventArgs` 类和一个用于标识更改类型的枚举。</span><span class="sxs-lookup"><span data-stu-id="00751-308">The code example also creates a `SimpleOrderChangedEventArgs` class to contain the event information, and an enumeration to identify the type of change.</span></span>  
  
 <span data-ttu-id="00751-309">此代码示例通过在 `Demo` 类的 `Main` 方法中调用派生类的属性和方法，演示了自定义行为。</span><span class="sxs-lookup"><span data-stu-id="00751-309">The code example demonstrates the custom behavior by calling the properties and methods of the derived class, in the `Main` method of the `Demo` class.</span></span>  
  
 <span data-ttu-id="00751-310">此代码示例使用具有不可变键的对象。</span><span class="sxs-lookup"><span data-stu-id="00751-310">This code example uses objects with immutable keys.</span></span> <span data-ttu-id="00751-311">有关使用可变键的代码示例，请参阅 <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>。</span><span class="sxs-lookup"><span data-stu-id="00751-311">For a code example that uses mutable keys, see <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>.</span></span>  
  
 [!code-cpp[KeyedCollection2#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection2/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection2#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection2/cs/source.cs#1)]
 [!code-vb[KeyedCollection2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection2/vb/source.vb#1)]  
  
 <span data-ttu-id="00751-312">示例 2</span><span class="sxs-lookup"><span data-stu-id="00751-312">Example 2</span></span>  
  
 <span data-ttu-id="00751-313">下面的代码示例演示如何重写受保护的 <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A> 方法以支持可变键，以及如何重写受保护的 <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>、<xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>、<xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>和 <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> 方法以维护密钥和集合的完整性。</span><span class="sxs-lookup"><span data-stu-id="00751-313">The following code example shows how to override the protected <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A> method to support mutable keys, and how to override the protected <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>, and <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> methods to maintain the integrity of the keys and the collection.</span></span>  
  
 <span data-ttu-id="00751-314">此代码示例创建从 <xref:System.Collections.ObjectModel.KeyedCollection%602>派生的 `MutableKeys` 集合，以及 `MutableKey` 类。</span><span class="sxs-lookup"><span data-stu-id="00751-314">The code example creates the `MutableKeys` collection, which derives from <xref:System.Collections.ObjectModel.KeyedCollection%602>, and the `MutableKey` class.</span></span> <span data-ttu-id="00751-315">`MutableKey` 类具有可设置的 `Key` 属性。</span><span class="sxs-lookup"><span data-stu-id="00751-315">The `MutableKey` class has a settable `Key` property.</span></span> <span data-ttu-id="00751-316">将新键分配给属性后，属性 setter 将调用集合的 `internal` （`Friend` Visual Basic `ChangeKey`），以测试新密钥是否与现有密钥冲突。</span><span class="sxs-lookup"><span data-stu-id="00751-316">When a new key is assigned to the property, the property setter calls the `internal` (`Friend` in Visual Basic) `ChangeKey` method of the collection to test whether the new key would conflict with an existing key.</span></span> <span data-ttu-id="00751-317">如果是这样，则会引发异常，并且不会更改属性值。</span><span class="sxs-lookup"><span data-stu-id="00751-317">If so, an exception is thrown and the property value is not changed.</span></span>  
  
 <span data-ttu-id="00751-318">为了保持 `MutableKey` 对象与 `MutableKeys` 集合之间的连接，并阻止将某个对象插入到两个集合中，`MutableKey` 类在`Friend` Visual Basic）字段中具有 `internal` （`Collection`）。</span><span class="sxs-lookup"><span data-stu-id="00751-318">In order to maintain the connection between a `MutableKey` object and the `MutableKeys` collection and to prevent an object from being inserted into two collections, the `MutableKey` class has an `internal` (`Friend` in Visual Basic) `Collection` field.</span></span> <span data-ttu-id="00751-319">此字段由受保护的方法维护，这些方法提供了用于在集合中添加和移除项的自定义行为，例如 <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="00751-319">This field is maintained by the protected methods that provide custom behavior for adding and removing items from the collection, such as the <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A> method.</span></span> <span data-ttu-id="00751-320">在将项添加到集合并在移除该项时清除此字段。</span><span class="sxs-lookup"><span data-stu-id="00751-320">The field is set when the item is added to a collection and cleared when the item is removed.</span></span>  
  
 [!code-csharp[KeyedCollectionMutable#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollectionMutable/cs/source.cs#1)]
 [!code-vb[KeyedCollectionMutable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollectionMutable/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="00751-321"><paramref name="index" /> 小于 0。</span><span class="sxs-lookup"><span data-stu-id="00751-321"><paramref name="index" /> is less than 0.</span></span>  
  
<span data-ttu-id="00751-322">- 或 -</span><span class="sxs-lookup"><span data-stu-id="00751-322">-or-</span></span> 
 <span data-ttu-id="00751-323"><paramref name="index" /> 大于 <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />。</span><span class="sxs-lookup"><span data-stu-id="00751-323"><paramref name="index" /> is greater than <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />.</span></span></exception>
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)" />
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public TItem this[TKey key] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !TItem Item(!TKey)" />
      <MemberSignature Language="DocId" Value="P:System.Collections.ObjectModel.KeyedCollection`2.Item(`0)" />
      <MemberSignature Language="VB.NET" Value="Default Public ReadOnly Property Item(key As TKey) As TItem" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TItem default[TKey] { TItem get(TKey key); };" />
      <MemberSignature Language="F#" Value="member this.Item('Key) : 'Item" Usage="System.Collections.ObjectModel.KeyedCollection&lt;'Key, 'Item&gt;.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TItem</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TKey" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="00751-324">要获取的元素的键。</span><span class="sxs-lookup"><span data-stu-id="00751-324">The key of the element to get.</span></span></param>
        <summary><span data-ttu-id="00751-325">获取具有指定键的元素。</span><span class="sxs-lookup"><span data-stu-id="00751-325">Gets the element with the specified key.</span></span></summary>
        <value><span data-ttu-id="00751-326">带有指定键的元素。</span><span class="sxs-lookup"><span data-stu-id="00751-326">The element with the specified key.</span></span> <span data-ttu-id="00751-327">如果未找到具有指定键的元素，则引发异常。</span><span class="sxs-lookup"><span data-stu-id="00751-327">If an element with the specified key is not found, an exception is thrown.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00751-328">此属性提供了使用以下语法访问集合中的特定元素的功能： `myCollection[key]` （`myCollection(key)` 在 Visual Basic 中）。</span><span class="sxs-lookup"><span data-stu-id="00751-328">This property provides the ability to access a specific element in the collection by using the following syntax: `myCollection[key]` (`myCollection(key)` in Visual Basic).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="00751-329">此属性与继承的 <xref:System.Collections.ObjectModel.Collection%601.Item%2A?displayProperty=nameWithType> 属性不同，后者按数值索引获取和设置元素。</span><span class="sxs-lookup"><span data-stu-id="00751-329">This property is distinct from the inherited <xref:System.Collections.ObjectModel.Collection%601.Item%2A?displayProperty=nameWithType> property, which gets and sets elements by numeric index.</span></span> <span data-ttu-id="00751-330">但是，如果 `TKey` 的类型 <xref:System.Int32>，则此属性将屏蔽继承的属性。</span><span class="sxs-lookup"><span data-stu-id="00751-330">However, if `TKey` is of type <xref:System.Int32>, this property masks the inherited property.</span></span> <span data-ttu-id="00751-331">在这种情况下，可以通过将 <xref:System.Collections.ObjectModel.KeyedCollection%602> 强制转换为其基类型来访问继承的属性。</span><span class="sxs-lookup"><span data-stu-id="00751-331">In that case, you can access the inherited property by casting the <xref:System.Collections.ObjectModel.KeyedCollection%602> to its base type.</span></span> <span data-ttu-id="00751-332">例如，`KeyedCollection<int, MyType>` （Visual Basic 中的`KeyedCollection(Of Integer, MyType)`，`KeyedCollection<int, MyType^>` 中C++）可以强制转换为 `Collection<MyType>` （`Collection(Of MyType)` Visual Basic 中的 `Collection<MyType^>` C++）。</span><span class="sxs-lookup"><span data-stu-id="00751-332">For example, `KeyedCollection<int, MyType>` (`KeyedCollection(Of Integer, MyType)` in Visual Basic, `KeyedCollection<int, MyType^>` in C++) can be cast to `Collection<MyType>` (`Collection(Of MyType)` in Visual Basic, `Collection<MyType^>` in C++).</span></span>  
  
 <span data-ttu-id="00751-333">如果 <xref:System.Collections.ObjectModel.KeyedCollection%602> 包含查找字典，则 `key` 用于从字典中检索元素。</span><span class="sxs-lookup"><span data-stu-id="00751-333">If the <xref:System.Collections.ObjectModel.KeyedCollection%602> has a lookup dictionary, `key` is used to retrieve the element from the dictionary.</span></span>  <span data-ttu-id="00751-334">如果没有查找字典，则使用 <xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A> 方法提取每个元素的键，并与指定键进行比较。</span><span class="sxs-lookup"><span data-stu-id="00751-334">If there is no lookup dictionary, the key of each element is extracted using the <xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A> method and compared with the specified key.</span></span>  
  
 <span data-ttu-id="00751-335">该C#语言使用[this](/dotnet/csharp/language-reference/keywords/this)关键字来定义索引器，而不是实现 <xref:System.Collections.ObjectModel.KeyedCollection%602.Item%2A> 属性。</span><span class="sxs-lookup"><span data-stu-id="00751-335">The C# language uses the [this](/dotnet/csharp/language-reference/keywords/this) keyword to define the indexers instead of implementing the <xref:System.Collections.ObjectModel.KeyedCollection%602.Item%2A> property.</span></span> <span data-ttu-id="00751-336">Visual Basic 将 <xref:System.Collections.ObjectModel.KeyedCollection%602.Item%2A> 实现为[默认属性](/dotnet/visual-basic/language-reference/modifiers/default)，该属性提供相同的索引功能。</span><span class="sxs-lookup"><span data-stu-id="00751-336">Visual Basic implements <xref:System.Collections.ObjectModel.KeyedCollection%602.Item%2A> as a [default property](/dotnet/visual-basic/language-reference/modifiers/default), which provides the same indexing functionality.</span></span>  
  
 <span data-ttu-id="00751-337">如果 <xref:System.Collections.ObjectModel.KeyedCollection%602> 包含查找字典，则检索此属性的值为 O （1）操作;否则，它是一个 O （`n`）操作，其中 `n` 是 <xref:System.Collections.ObjectModel.Collection%601.Count%2A>的。</span><span class="sxs-lookup"><span data-stu-id="00751-337">Retrieving the value of this property is an O(1) operation if the <xref:System.Collections.ObjectModel.KeyedCollection%602> has a lookup dictionary; otherwise it is an O(`n`) operation, where `n` is <xref:System.Collections.ObjectModel.Collection%601.Count%2A>.</span></span>

## Examples  
 <span data-ttu-id="00751-338">此代码示例演示从 <xref:System.Collections.ObjectModel.KeyedCollection%602>派生集合类所需的最少代码：重写 <xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A> 方法并提供委托给基类构造函数的公共构造函数。</span><span class="sxs-lookup"><span data-stu-id="00751-338">This code example shows the minimum code necessary to derive a collection class from <xref:System.Collections.ObjectModel.KeyedCollection%602>: overriding the <xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A> method and providing a public constructor that delegates to a base class constructor.</span></span> <span data-ttu-id="00751-339">此代码示例还演示了继承自 <xref:System.Collections.ObjectModel.KeyedCollection%602> 和 <xref:System.Collections.ObjectModel.Collection%601> 类的许多属性和方法。</span><span class="sxs-lookup"><span data-stu-id="00751-339">The code example also demonstrates many of the properties and methods inherited from <xref:System.Collections.ObjectModel.KeyedCollection%602> and <xref:System.Collections.ObjectModel.Collection%601> classes.</span></span>  
  
 <span data-ttu-id="00751-340">此代码示例调用 <xref:System.Collections.ObjectModel.KeyedCollection%602.Item%2A?displayProperty=nameWithType> 属性，该属性是只读的并且按键进行检索，而 <xref:System.Collections.ObjectModel.Collection%601.Item%2A?displayProperty=nameWithType> 属性可设置，并按索引检索。</span><span class="sxs-lookup"><span data-stu-id="00751-340">The code example calls both the <xref:System.Collections.ObjectModel.KeyedCollection%602.Item%2A?displayProperty=nameWithType> property, which is read-only and retrieves by key, and the <xref:System.Collections.ObjectModel.Collection%601.Item%2A?displayProperty=nameWithType> property, which is settable and retrieves by index.</span></span> <span data-ttu-id="00751-341">它演示当派生集合中的对象具有整数键时如何访问后者属性，这与用于索引检索的整数不区分。</span><span class="sxs-lookup"><span data-stu-id="00751-341">It shows how to access the latter property when the objects in the derived collection have integer keys, indistinguishable from the integers used for indexed retrieval.</span></span>  
  
 <span data-ttu-id="00751-342">`SimpleOrder` 类是一个非常简单的申请列表，其中包含 `OrderItem` 对象，每个对象都表示顺序中的行项。</span><span class="sxs-lookup"><span data-stu-id="00751-342">The `SimpleOrder` class is a very simple requisition list that contains `OrderItem` objects, each of which represents a line item in the order.</span></span> <span data-ttu-id="00751-343">`OrderItem` 的键是不可变的，这是派生自 <xref:System.Collections.ObjectModel.KeyedCollection%602>的类的重要注意事项。</span><span class="sxs-lookup"><span data-stu-id="00751-343">The key of `OrderItem` is immutable, an important consideration for classes that derive from <xref:System.Collections.ObjectModel.KeyedCollection%602>.</span></span> <span data-ttu-id="00751-344">有关使用可变键的代码示例，请参阅 <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>。</span><span class="sxs-lookup"><span data-stu-id="00751-344">For a code example that uses mutable keys, see <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>.</span></span>  
  
 [!code-cpp[KeyedCollection#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection/cs/source.cs#1)]
 [!code-vb[KeyedCollection#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="00751-345"><paramref name="key" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="00751-345"><paramref name="key" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Collections.Generic.KeyNotFoundException"><span data-ttu-id="00751-346">集合中不存在具有指定键的元素。</span><span class="sxs-lookup"><span data-stu-id="00751-346">An element with the specified key does not exist in the collection.</span></span></exception>
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)" />
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public bool Remove (TKey key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Remove(!TKey key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.Remove(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Remove (key As TKey) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Remove(TKey key);" />
      <MemberSignature Language="F#" Value="override this.Remove : 'Key -&gt; bool" Usage="keyedCollection.Remove key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TKey" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="00751-347">要移除的元素的键。</span><span class="sxs-lookup"><span data-stu-id="00751-347">The key of the element to remove.</span></span></param>
        <summary><span data-ttu-id="00751-348">从 <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> 中移除包含指定键的元素。</span><span class="sxs-lookup"><span data-stu-id="00751-348">Removes the element with the specified key from the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />.</span></span></summary>
        <returns><span data-ttu-id="00751-349">如果已成功删除该元素，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="00751-349"><see langword="true" /> if the element is successfully removed; otherwise, <see langword="false" />.</span></span>  <span data-ttu-id="00751-350">如果在 <see langword="false" /> 中没有找到 <paramref name="key" />，则此方法也会返回 <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />。</span><span class="sxs-lookup"><span data-stu-id="00751-350">This method also returns <see langword="false" /> if <paramref name="key" /> is not found in the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00751-351">还将从查找字典中删除元素的键。</span><span class="sxs-lookup"><span data-stu-id="00751-351">The key of the element is also removed from the lookup dictionary.</span></span>  
  
 <span data-ttu-id="00751-352">如果元素数已超过字典创建阈值，并且 <xref:System.Collections.ObjectModel.KeyedCollection%602> 使用的是查找字典，则即使元素数在阈值下也是如此，它仍将继续使用查找字典。</span><span class="sxs-lookup"><span data-stu-id="00751-352">If the number of elements has exceeded the dictionary creation threshold and the <xref:System.Collections.ObjectModel.KeyedCollection%602> is using a lookup dictionary, it will continue to use a lookup dictionary even though the number of elements is again under the threshold.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="00751-353">若要自定义此方法的行为，请重写 <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="00751-353">To customize the behavior of this method, override the <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A> method.</span></span>  
  
 <span data-ttu-id="00751-354">此方法是一个 O （`n`）操作，其中 `n` 是 <xref:System.Collections.ObjectModel.Collection%601.Count%2A>的。</span><span class="sxs-lookup"><span data-stu-id="00751-354">This method is an O(`n`) operation, where `n` is <xref:System.Collections.ObjectModel.Collection%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="00751-355">此代码示例演示从 <xref:System.Collections.ObjectModel.KeyedCollection%602>派生集合类所需的最少代码：重写 <xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A> 方法并提供委托给基类构造函数的公共构造函数。</span><span class="sxs-lookup"><span data-stu-id="00751-355">This code example shows the minimum code necessary to derive a collection class from <xref:System.Collections.ObjectModel.KeyedCollection%602>: overriding the <xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A> method and providing a public constructor that delegates to a base class constructor.</span></span> <span data-ttu-id="00751-356">此代码示例还演示了继承自 <xref:System.Collections.ObjectModel.KeyedCollection%602> 和 <xref:System.Collections.ObjectModel.Collection%601> 类的许多属性和方法。</span><span class="sxs-lookup"><span data-stu-id="00751-356">The code example also demonstrates many of the properties and methods inherited from <xref:System.Collections.ObjectModel.KeyedCollection%602> and <xref:System.Collections.ObjectModel.Collection%601> classes.</span></span>  
  
 <span data-ttu-id="00751-357">该示例演示了从 <xref:System.Collections.ObjectModel.KeyedCollection%602>继承 <xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A> 方法，该方法将移除具有指定键的项，同时还会从 <xref:System.Collections.ObjectModel.Collection%601>继承的 <xref:System.Collections.ObjectModel.Collection%601.Remove%2A> 和 <xref:System.Collections.ObjectModel.Collection%601.RemoveAt%2A> 方法，并分别从对象和索引中移除。</span><span class="sxs-lookup"><span data-stu-id="00751-357">The example demonstrates <xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A> method inherited from <xref:System.Collections.ObjectModel.KeyedCollection%602>, which removes the item with a specified key, and also the <xref:System.Collections.ObjectModel.Collection%601.Remove%2A> and <xref:System.Collections.ObjectModel.Collection%601.RemoveAt%2A> methods inherited from <xref:System.Collections.ObjectModel.Collection%601>, which remove by object and by index respectively.</span></span>  
  
 <span data-ttu-id="00751-358">`SimpleOrder` 类是一个非常简单的申请列表，其中包含 `OrderItem` 对象，每个对象都表示顺序中的行项。</span><span class="sxs-lookup"><span data-stu-id="00751-358">The `SimpleOrder` class is a very simple requisition list that contains `OrderItem` objects, each of which represents a line item in the order.</span></span> <span data-ttu-id="00751-359">`OrderItem` 的键是不可变的，这是派生自 <xref:System.Collections.ObjectModel.KeyedCollection%602>的类的重要注意事项。</span><span class="sxs-lookup"><span data-stu-id="00751-359">The key of `OrderItem` is immutable, an important consideration for classes that derive from <xref:System.Collections.ObjectModel.KeyedCollection%602>.</span></span> <span data-ttu-id="00751-360">有关使用可变键的代码示例，请参阅 <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>。</span><span class="sxs-lookup"><span data-stu-id="00751-360">For a code example that uses mutable keys, see <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>.</span></span>  
  
 [!code-cpp[KeyedCollection#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection/cs/source.cs#1)]
 [!code-vb[KeyedCollection#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="00751-361"><paramref name="key" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="00751-361"><paramref name="key" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.RemoveItem(System.Int32)" />
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.ClearItems" />
      </Docs>
    </Member>
    <Member MemberName="RemoveItem">
      <MemberSignature Language="C#" Value="protected override void RemoveItem (int index);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void RemoveItem(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.RemoveItem(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub RemoveItem (index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void RemoveItem(int index);" />
      <MemberSignature Language="F#" Value="override this.RemoveItem : int -&gt; unit" Usage="keyedCollection.RemoveItem index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="00751-362">要移除的元素的索引。</span><span class="sxs-lookup"><span data-stu-id="00751-362">The index of the element to remove.</span></span></param>
        <summary><span data-ttu-id="00751-363">移除 <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> 的指定索引处的元素。</span><span class="sxs-lookup"><span data-stu-id="00751-363">Removes the element at the specified index of the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00751-364">还将从查找字典中删除元素的键。</span><span class="sxs-lookup"><span data-stu-id="00751-364">The key of the element is also removed from the lookup dictionary.</span></span>  
  
 <span data-ttu-id="00751-365">如果元素数已超过字典创建阈值，并且 <xref:System.Collections.ObjectModel.KeyedCollection%602> 使用的是查找字典，则即使元素数在阈值下也是如此，它仍将继续使用查找字典。</span><span class="sxs-lookup"><span data-stu-id="00751-365">If the number of elements has exceeded the dictionary creation threshold and the <xref:System.Collections.ObjectModel.KeyedCollection%602> is using a lookup dictionary, it will continue to use a lookup dictionary even though the number of elements is again under the threshold.</span></span>  
  
 <span data-ttu-id="00751-366">此方法是一个 O （`n`）操作，其中 `n` 是 <xref:System.Collections.ObjectModel.Collection%601.Count%2A>的。</span><span class="sxs-lookup"><span data-stu-id="00751-366">This method is an O(`n`) operation, where `n` is <xref:System.Collections.ObjectModel.Collection%601.Count%2A>.</span></span>  
  
## <a name="notes-for-implementers"></a><span data-ttu-id="00751-367">实施者注意事项</span><span class="sxs-lookup"><span data-stu-id="00751-367">Notes for Implementers</span></span>  
 <span data-ttu-id="00751-368">重写此方法可为 <xref:System.Collections.ObjectModel.Collection%601.Remove%28%600%29> 和 <xref:System.Collections.ObjectModel.Collection%601.RemoveAt%28System.Int32%29> 方法提供自定义行为，继承自 <xref:System.Collections.ObjectModel.Collection%601> 泛型类和 <xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%28%600%29> 方法。</span><span class="sxs-lookup"><span data-stu-id="00751-368">Override this method to provide customized behavior for the <xref:System.Collections.ObjectModel.Collection%601.Remove%28%600%29> and <xref:System.Collections.ObjectModel.Collection%601.RemoveAt%28System.Int32%29> methods, inherited from the <xref:System.Collections.ObjectModel.Collection%601> generic class, and the <xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%28%600%29> method.</span></span>  
  
 <span data-ttu-id="00751-369">调用此方法的基类实现，以从基础集合中删除该项并更新查找字典。</span><span class="sxs-lookup"><span data-stu-id="00751-369">Call the base class implementation of this method to remove the item from the underlying collection and to update the lookup dictionary.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="00751-370">本节包含两个代码示例，这些示例演示如何重写 <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A> 方法，以提供从集合中移除对象的自定义行为。</span><span class="sxs-lookup"><span data-stu-id="00751-370">This section contains two code examples that demonstrate overriding the <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A> method to provide custom behavior for removing objects from the collection.</span></span> <span data-ttu-id="00751-371">第一个示例添加了一个自定义通知事件，第二个示例为具有可变键的对象集合提供支持。</span><span class="sxs-lookup"><span data-stu-id="00751-371">The first example adds a custom notification event and the second provides support for a collection of objects with mutable keys.</span></span>  
  
 <span data-ttu-id="00751-372">示例 1</span><span class="sxs-lookup"><span data-stu-id="00751-372">Example 1</span></span>  
  
 <span data-ttu-id="00751-373">下面的代码示例演示如何重写受保护的 <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>、<xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>、<xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>和 <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> 方法，以便为 <xref:System.Collections.ObjectModel.Collection%601.Add%2A>、<xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A>和 <xref:System.Collections.ObjectModel.Collection%601.Clear%2A> 方法提供自定义行为，并设置默认的 <xref:System.Collections.ObjectModel.Collection%601.Item%2A> 属性（中C#的索引器）。</span><span class="sxs-lookup"><span data-stu-id="00751-373">The following code example shows how to override the protected <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>, and <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> methods, to provide custom behavior for the <xref:System.Collections.ObjectModel.Collection%601.Add%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A>, and <xref:System.Collections.ObjectModel.Collection%601.Clear%2A> methods, and for setting the default <xref:System.Collections.ObjectModel.Collection%601.Item%2A> property (the indexer in C#).</span></span> <span data-ttu-id="00751-374">在此示例中提供的自定义行为是一个名为 `Changed`的通知事件，它在每个重写的方法的末尾引发。</span><span class="sxs-lookup"><span data-stu-id="00751-374">The custom behavior provided in this example is a notification event named `Changed`, which is raised at the end of each of the overridden methods.</span></span>  
  
 <span data-ttu-id="00751-375">此代码示例创建了 `SimpleOrder` 类，该类派生自 <xref:System.Collections.ObjectModel.KeyedCollection%602> 并表示一个简单的订单窗体。</span><span class="sxs-lookup"><span data-stu-id="00751-375">The code example creates the `SimpleOrder` class, which derives from <xref:System.Collections.ObjectModel.KeyedCollection%602> and represents a simple order form.</span></span> <span data-ttu-id="00751-376">订单窗体包含表示排序项 `OrderItem` 对象。</span><span class="sxs-lookup"><span data-stu-id="00751-376">The order form contains `OrderItem` objects representing items ordered.</span></span> <span data-ttu-id="00751-377">此代码示例还创建了一个包含事件信息的 `SimpleOrderChangedEventArgs` 类和一个用于标识更改类型的枚举。</span><span class="sxs-lookup"><span data-stu-id="00751-377">The code example also creates a `SimpleOrderChangedEventArgs` class to contain the event information, and an enumeration to identify the type of change.</span></span>  
  
 <span data-ttu-id="00751-378">此代码示例通过在 `Demo` 类的 `Main` 方法中调用派生类的属性和方法，演示了自定义行为。</span><span class="sxs-lookup"><span data-stu-id="00751-378">The code example demonstrates the custom behavior by calling the properties and methods of the derived class, in the `Main` method of the `Demo` class.</span></span>  
  
 <span data-ttu-id="00751-379">此代码示例使用具有不可变键的对象。</span><span class="sxs-lookup"><span data-stu-id="00751-379">This code example uses objects with immutable keys.</span></span> <span data-ttu-id="00751-380">有关使用可变键的代码示例，请参阅 <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>。</span><span class="sxs-lookup"><span data-stu-id="00751-380">For a code example that uses mutable keys, see <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>.</span></span>  
  
 [!code-cpp[KeyedCollection2#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection2/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection2#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection2/cs/source.cs#1)]
 [!code-vb[KeyedCollection2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection2/vb/source.vb#1)]  
  
 <span data-ttu-id="00751-381">示例 2</span><span class="sxs-lookup"><span data-stu-id="00751-381">Example 2</span></span>  
  
 <span data-ttu-id="00751-382">下面的代码示例演示如何重写受保护的 <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A> 方法以支持可变键，以及如何重写受保护的 <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>、<xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>、<xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>和 <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> 方法以维护密钥和集合的完整性。</span><span class="sxs-lookup"><span data-stu-id="00751-382">The following code example shows how to override the protected <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A> method to support mutable keys, and how to override the protected <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>, and <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> methods to maintain the integrity of the keys and the collection.</span></span>  
  
 <span data-ttu-id="00751-383">此代码示例创建从 <xref:System.Collections.ObjectModel.KeyedCollection%602>派生的 `MutableKeys` 集合，以及 `MutableKey` 类。</span><span class="sxs-lookup"><span data-stu-id="00751-383">The code example creates the `MutableKeys` collection, which derives from <xref:System.Collections.ObjectModel.KeyedCollection%602>, and the `MutableKey` class.</span></span> <span data-ttu-id="00751-384">`MutableKey` 类具有可设置的 `Key` 属性。</span><span class="sxs-lookup"><span data-stu-id="00751-384">The `MutableKey` class has a settable `Key` property.</span></span> <span data-ttu-id="00751-385">将新键分配给属性后，属性 setter 将调用集合的 `internal` （`Friend` Visual Basic `ChangeKey`），以测试新密钥是否与现有密钥冲突。</span><span class="sxs-lookup"><span data-stu-id="00751-385">When a new key is assigned to the property, the property setter calls the `internal` (`Friend` in Visual Basic) `ChangeKey` method of the collection to test whether the new key would conflict with an existing key.</span></span> <span data-ttu-id="00751-386">如果是这样，则会引发异常，并且不会更改属性值。</span><span class="sxs-lookup"><span data-stu-id="00751-386">If so, an exception is thrown and the property value is not changed.</span></span>  
  
 <span data-ttu-id="00751-387">为了保持 `MutableKey` 对象与 `MutableKeys` 集合之间的连接，并阻止将某个对象插入到两个集合中，`MutableKey` 类在`Friend` Visual Basic）字段中具有 `internal` （`Collection`）。</span><span class="sxs-lookup"><span data-stu-id="00751-387">In order to maintain the connection between a `MutableKey` object and the `MutableKeys` collection and to prevent an object from being inserted into two collections, the `MutableKey` class has an `internal` (`Friend` in Visual Basic) `Collection` field.</span></span> <span data-ttu-id="00751-388">此字段由受保护的方法维护，这些方法提供了用于在集合中添加和移除项的自定义行为，例如 <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="00751-388">This field is maintained by the protected methods that provide custom behavior for adding and removing items from the collection, such as the <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A> method.</span></span> <span data-ttu-id="00751-389">在将项添加到集合并在移除该项时清除此字段。</span><span class="sxs-lookup"><span data-stu-id="00751-389">The field is set when the item is added to a collection and cleared when the item is removed.</span></span>  
  
 [!code-csharp[KeyedCollectionMutable#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollectionMutable/cs/source.cs#1)]
 [!code-vb[KeyedCollectionMutable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollectionMutable/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.Remove(`0)" />
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.ClearItems" />
      </Docs>
    </Member>
    <Member MemberName="SetItem">
      <MemberSignature Language="C#" Value="protected override void SetItem (int index, TItem item);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void SetItem(int32 index, !TItem item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub SetItem (index As Integer, item As TItem)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void SetItem(int index, TItem item);" />
      <MemberSignature Language="F#" Value="override this.SetItem : int * 'Item -&gt; unit" Usage="keyedCollection.SetItem (index, item)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="item" Type="TItem" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="00751-390">要替换的项的从零开始的索引。</span><span class="sxs-lookup"><span data-stu-id="00751-390">The zero-based index of the item to be replaced.</span></span></param>
        <param name="item"><span data-ttu-id="00751-391">新项目。</span><span class="sxs-lookup"><span data-stu-id="00751-391">The new item.</span></span></param>
        <summary><span data-ttu-id="00751-392">使用指定项替换指定索引处的项。</span><span class="sxs-lookup"><span data-stu-id="00751-392">Replaces the item at the specified index with the specified item.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00751-393">查找字典会相应地进行更新。</span><span class="sxs-lookup"><span data-stu-id="00751-393">The lookup dictionary is updated accordingly.</span></span> <span data-ttu-id="00751-394">也就是说，将从查找字典中删除要替换的项的键，并添加新项的键。</span><span class="sxs-lookup"><span data-stu-id="00751-394">That is, the key of the item that is being replaced is removed from the lookup dictionary, and the key of the new item is added.</span></span>  
  
 <span data-ttu-id="00751-395">此方法为 O （1）操作。</span><span class="sxs-lookup"><span data-stu-id="00751-395">This method is an O(1) operation.</span></span>  
  
## <a name="notes-for-implementers"></a><span data-ttu-id="00751-396">实施者注意事项</span><span class="sxs-lookup"><span data-stu-id="00751-396">Notes for Implementers</span></span>  
 <span data-ttu-id="00751-397">重写此方法以提供自定义的行为，用于设置从 <xref:System.Collections.ObjectModel.Collection%601> 泛型类继承的 <xref:System.Collections.ObjectModel.Collection%601.Item%2A> 属性。</span><span class="sxs-lookup"><span data-stu-id="00751-397">Override this method to provide customized behavior for setting the <xref:System.Collections.ObjectModel.Collection%601.Item%2A> property inherited from the <xref:System.Collections.ObjectModel.Collection%601> generic class.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="00751-398">此方法不会影响 <xref:System.Collections.ObjectModel.KeyedCollection%602.Item%2A?displayProperty=nameWithType> 属性的行为，该属性是只读的。</span><span class="sxs-lookup"><span data-stu-id="00751-398">This method does not affect the behavior of the <xref:System.Collections.ObjectModel.KeyedCollection%602.Item%2A?displayProperty=nameWithType> property, which is read-only.</span></span>  
  
 <span data-ttu-id="00751-399">调用此方法的基类实现，以设置基础集合中的项并更新查找字典。</span><span class="sxs-lookup"><span data-stu-id="00751-399">Call the base class implementation of this method to set the item in the underlying collection and to update the lookup dictionary.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="00751-400">本节包含两个代码示例，这些示例演示如何重写 <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> 方法，以提供设置 <xref:System.Collections.ObjectModel.Collection%601.Item%2A?displayProperty=nameWithType> 属性的自定义行为。</span><span class="sxs-lookup"><span data-stu-id="00751-400">This section contains two code examples that demonstrate overriding the <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> method to provide custom behavior for setting the <xref:System.Collections.ObjectModel.Collection%601.Item%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="00751-401">第一个示例添加了一个自定义通知事件，第二个示例为具有可变键的对象集合提供支持。</span><span class="sxs-lookup"><span data-stu-id="00751-401">The first example adds a custom notification event and the second provides support for a collection of objects with mutable keys.</span></span>  
  
 <span data-ttu-id="00751-402">示例 1</span><span class="sxs-lookup"><span data-stu-id="00751-402">Example 1</span></span>  
  
 <span data-ttu-id="00751-403">下面的代码示例演示如何重写受保护的 <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>、<xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>、<xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>和 <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> 方法，以便为 <xref:System.Collections.ObjectModel.Collection%601.Add%2A>、<xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A>和 <xref:System.Collections.ObjectModel.Collection%601.Clear%2A> 方法提供自定义行为，并设置默认的 <xref:System.Collections.ObjectModel.Collection%601.Item%2A> 属性（中C#的索引器）。</span><span class="sxs-lookup"><span data-stu-id="00751-403">The following code example shows how to override the protected <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>, and <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> methods, to provide custom behavior for the <xref:System.Collections.ObjectModel.Collection%601.Add%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A>, and <xref:System.Collections.ObjectModel.Collection%601.Clear%2A> methods, and for setting the default <xref:System.Collections.ObjectModel.Collection%601.Item%2A> property (the indexer in C#).</span></span> <span data-ttu-id="00751-404">在此示例中提供的自定义行为是一个名为 `Changed`的通知事件，它在每个重写的方法的末尾引发。</span><span class="sxs-lookup"><span data-stu-id="00751-404">The custom behavior provided in this example is a notification event named `Changed`, which is raised at the end of each of the overridden methods.</span></span>  
  
 <span data-ttu-id="00751-405">此代码示例创建了 `SimpleOrder` 类，该类派生自 <xref:System.Collections.ObjectModel.KeyedCollection%602> 并表示一个简单的订单窗体。</span><span class="sxs-lookup"><span data-stu-id="00751-405">The code example creates the `SimpleOrder` class, which derives from <xref:System.Collections.ObjectModel.KeyedCollection%602> and represents a simple order form.</span></span> <span data-ttu-id="00751-406">订单窗体包含表示排序项 `OrderItem` 对象。</span><span class="sxs-lookup"><span data-stu-id="00751-406">The order form contains `OrderItem` objects representing items ordered.</span></span> <span data-ttu-id="00751-407">此代码示例还创建了一个包含事件信息的 `SimpleOrderChangedEventArgs` 类和一个用于标识更改类型的枚举。</span><span class="sxs-lookup"><span data-stu-id="00751-407">The code example also creates a `SimpleOrderChangedEventArgs` class to contain the event information, and an enumeration to identify the type of change.</span></span>  
  
 <span data-ttu-id="00751-408">此代码示例通过在 `Demo` 类的 `Main` 方法中调用派生类的属性和方法，演示了自定义行为。</span><span class="sxs-lookup"><span data-stu-id="00751-408">The code example demonstrates the custom behavior by calling the properties and methods of the derived class, in the `Main` method of the `Demo` class.</span></span>  
  
 <span data-ttu-id="00751-409">此代码示例使用具有不可变键的对象。</span><span class="sxs-lookup"><span data-stu-id="00751-409">This code example uses objects with immutable keys.</span></span> <span data-ttu-id="00751-410">有关使用可变键的代码示例，请参阅 <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>。</span><span class="sxs-lookup"><span data-stu-id="00751-410">For a code example that uses mutable keys, see <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>.</span></span>  
  
 [!code-cpp[KeyedCollection2#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection2/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection2#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection2/cs/source.cs#1)]
 [!code-vb[KeyedCollection2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection2/vb/source.vb#1)]  
  
 <span data-ttu-id="00751-411">示例 2</span><span class="sxs-lookup"><span data-stu-id="00751-411">Example 2</span></span>  
  
 <span data-ttu-id="00751-412">下面的代码示例演示如何重写受保护的 <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A> 方法以支持可变键，以及如何重写受保护的 <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>、<xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>、<xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>和 <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> 方法以维护密钥和集合的完整性。</span><span class="sxs-lookup"><span data-stu-id="00751-412">The following code example shows how to override the protected <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A> method to support mutable keys, and how to override the protected <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>, and <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> methods to maintain the integrity of the keys and the collection.</span></span>  
  
 <span data-ttu-id="00751-413">此代码示例创建从 <xref:System.Collections.ObjectModel.KeyedCollection%602>派生的 `MutableKeys` 集合，以及 `MutableKey` 类。</span><span class="sxs-lookup"><span data-stu-id="00751-413">The code example creates the `MutableKeys` collection, which derives from <xref:System.Collections.ObjectModel.KeyedCollection%602>, and the `MutableKey` class.</span></span> <span data-ttu-id="00751-414">`MutableKey` 类具有可设置的 `Key` 属性。</span><span class="sxs-lookup"><span data-stu-id="00751-414">The `MutableKey` class has a settable `Key` property.</span></span> <span data-ttu-id="00751-415">将新键分配给属性后，属性 setter 将调用集合的 `internal` （`Friend` Visual Basic `ChangeKey`），以测试新密钥是否与现有密钥冲突。</span><span class="sxs-lookup"><span data-stu-id="00751-415">When a new key is assigned to the property, the property setter calls the `internal` (`Friend` in Visual Basic) `ChangeKey` method of the collection to test whether the new key would conflict with an existing key.</span></span> <span data-ttu-id="00751-416">如果是这样，则会引发异常，并且不会更改属性值。</span><span class="sxs-lookup"><span data-stu-id="00751-416">If so, an exception is thrown and the property value is not changed.</span></span>  
  
 <span data-ttu-id="00751-417">为了保持 `MutableKey` 对象与 `MutableKeys` 集合之间的连接，并阻止将某个对象插入到两个集合中，`MutableKey` 类在`Friend` Visual Basic）字段中具有 `internal` （`Collection`）。</span><span class="sxs-lookup"><span data-stu-id="00751-417">In order to maintain the connection between a `MutableKey` object and the `MutableKeys` collection and to prevent an object from being inserted into two collections, the `MutableKey` class has an `internal` (`Friend` in Visual Basic) `Collection` field.</span></span> <span data-ttu-id="00751-418">此字段由受保护的方法维护，这些方法提供了用于在集合中添加和移除项的自定义行为，例如 <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="00751-418">This field is maintained by the protected methods that provide custom behavior for adding and removing items from the collection, such as the <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A> method.</span></span> <span data-ttu-id="00751-419">在将项添加到集合并在移除该项时清除此字段。</span><span class="sxs-lookup"><span data-stu-id="00751-419">The field is set when the item is added to a collection and cleared when the item is removed.</span></span>  
  
 [!code-csharp[KeyedCollectionMutable#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollectionMutable/cs/source.cs#1)]
 [!code-vb[KeyedCollectionMutable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollectionMutable/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.ObjectModel.KeyedCollection`2.Item(`0)" />
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.InsertItem(System.Int32,`1)" />
      </Docs>
    </Member>
    <Member MemberName="TryGetValue">
      <MemberSignature Language="C#" Value="public bool TryGetValue (TKey key, out TItem item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetValue(!TKey key, [out] !TItem&amp; item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.TryGetValue(`0,`1@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetValue (key As TKey, ByRef item As TItem) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetValue(TKey key, [Runtime::InteropServices::Out] TItem % item);" />
      <MemberSignature Language="F#" Value="member this.TryGetValue : 'Key * 'Item -&gt; bool" Usage="keyedCollection.TryGetValue (key, item)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TKey" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="item" Type="TItem" RefType="out" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="00751-420">要在集合中搜索的项的键。</span><span class="sxs-lookup"><span data-stu-id="00751-420">The key of the item to search in the collection.</span></span></param>
        <param name="item"><span data-ttu-id="00751-421">如果此方法返回 <see langword="true" />，则为集合中与所提供的键相匹配的项；如果此方法返回 <see langword="false" />，则为集合类型的 <see langword="default" /> 值。</span><span class="sxs-lookup"><span data-stu-id="00751-421">When this method returns <see langword="true" />, the item from the collection that matches the provided key; when this method returns <see langword="false" />, the <see langword="default" /> value for the type of the collection.</span></span></param>
        <summary><span data-ttu-id="00751-422">尝试使用指定的键从集合中获取项。</span><span class="sxs-lookup"><span data-stu-id="00751-422">Tries to get an item from the collection using the specified key.</span></span></summary>
        <returns><span data-ttu-id="00751-423">如果在集合中找到了指定键的项，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="00751-423"><see langword="true" /> if an item for the specified key was found in the collection; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="00751-424"><paramref name="key" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="00751-424"><paramref name="key" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>
