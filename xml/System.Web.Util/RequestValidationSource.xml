<Type Name="RequestValidationSource" FullName="System.Web.Util.RequestValidationSource">
  <Metadata><Meta Name="ms.openlocfilehash" Value="478ffa5993b6ecb9fbd6874f5e7cac44d682af68" /><Meta Name="ms.sourcegitcommit" Value="397961a0164281b579f68064c3bb66c071f374d9" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/14/2020" /><Meta Name="ms.locfileid" Value="69386366" /></Metadata><TypeSignature Language="C#" Value="public enum RequestValidationSource" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed RequestValidationSource extends System.Enum" />
  <TypeSignature Language="DocId" Value="T:System.Web.Util.RequestValidationSource" />
  <TypeSignature Language="VB.NET" Value="Public Enum RequestValidationSource" />
  <TypeSignature Language="C++ CLI" Value="public enum class RequestValidationSource" />
  <TypeSignature Language="F#" Value="type RequestValidationSource = " />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Docs>
    <summary>指定要验证何种 HTTP 请求数据。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks 

可以通过实现类型来创建自定义请求验证类型 <xref:System.Web.Util.RequestValidator> 。 当 ASP.NET 调用 <xref:System.Web.Util.RequestValidator.IsValidRequestString%2A> 方法来验证请求时，ASP.NET 会传递一个 `requestValidationSource` 参数来指定要验证的数据源。 <xref:System.Web.Util.RequestValidationSource>枚举用于指定正在验证的请求数据的源或类型。 枚举指示在方法的参数中传递的 HTTP 输入的类型 `value` <xref:System.Web.Util.RequestValidator.IsValidRequestString%2A> 。 如果你不想使用自定义逻辑进行验证，则可以使用枚举作为回退到 HTTP 输入的基本请求验证实现的方法。  

下表显示了如何 `collectionKey` `value` <xref:System.Web.Util.RequestValidator.IsValidRequestString%2A?displayProperty=nameWithType> 为枚举的每个成员解释方法的和参数的值 `RequestValidationSource` 。

|枚举成员|`collectionKey` 参数|`value` 参数|
|--|--|--|
|`Cookies`|集合中的 cookie 的名称。|集合中的值。|
|`Files`|集合中已上传的文件的名称。|集合中上载的文件的值。|
|`Form`|集合中的窗体参数的名称|集合中的窗体参数的值。|
|`Headers`|集合中的 HTTP 标头的名称。|集合中的 HTTP 标头的值。|
|`Path`|`null`（不 `Path` 是值的集合）。|"路径" 字段的值。|
|`PathInfo`|`null`（不 `PathInfo` 是值的集合）。|PathInfo 字段的值。|
|`QueryString`|集合中的查询字符串参数的名称。|集合中的查询字符串参数的值。|
|`RawUrl`|`null`（不是 `RawUrl` 值的集合。）|RawUrl 字段的值。|
  
## Examples  
 下面的示例演示如何创建自定义请求验证程序类，该类只允许使用特定字符串作为查询字符串值。  
  
```vb
Imports System.Web  
Imports System.Web.Util  
  
Public Class CustomRequestValidation  
    Inherits RequestValidator  
  
Protected Overloads Overrides Function IsValidRequestString( _  
        ByVal context As HttpContext, _  
        ByVal value As String, _  
        ByVal requestValidationSource__1 As RequestValidationSource, _  
        ByVal collectionKey As String, _  
        ByRef validationFailureIndex As Integer) As Boolean  
    validationFailureIndex = -1  
    ' Set a default value for the out parameter.  
    ' This application does not use RawUrl directly, so you can   
    ' ignore the check for RequestValidationSource.RawUrl.  
    If requestValidationSource = RequestValidationSource.RawUrl Then  
        Return True  
    End If  
  
    ' Allow the query-string key "data" to have an XML-like value.  
    If (requestValidationSource = _  
            (RequestValidationSource.QueryString) AndAlso _  
            (collectionKey = "data") Then  
        ' The querystring value "<example>1234</example>" is allowed.  
        If value = "<example>1234</example>" Then  
            validationFailureIndex = -1  
            Return True  
        Else  
            ' Leave any further checks to ASP.NET.  
            Return MyBase.IsValidRequestString(context, value, _  
                requestValidationSource__1, collectionKey, _  
                validationFailureIndex)  
        End If  
    Else  
        ' All other HTTP input checks fall back to   
        ' the base ASP.NET implementation.  
        Return MyBase.IsValidRequestString(context, value, _  
            requestValidationSource__1, collectionKey, _  
            validationFailureIndex)  
    End If  
End Function  
End Class  
```  
  
```csharp  
using System;  
using System.Web;  
using System.Web.Util;  
  
public class CustomRequestValidation : RequestValidator  
{  
    public CustomRequestValidation() {}  
  
    protected override bool IsValidRequestString(  
        HttpContext context, string value,   
        RequestValidationSource requestValidationSource, string collectionKey,   
        out int validationFailureIndex)  
    {  
        //Set a default value for the out parameter.  
        validationFailureIndex = -1;  
  
        // This application does not use RawUrl directly,   
        // so you can ignore the check for RequestValidationSource.RawUrl.  
        if (requestValidationSource == RequestValidationSource.RawUrl)  
            return true;  
  
        // Allow the query-string key "data" to have an XML-like value.  
        if (  
            (requestValidationSource == RequestValidationSource.QueryString) &&  
            (collectionKey == "data")  
           )  
        {  
            // The querystring value "<example>1234</example>" is allowed.  
            if (value == "<example>1234</example>")  
            {  
                validationFailureIndex = -1;  
                return true;  
            }  
            else  
           // Leave any further checks to ASP.NET.  
                return base.IsValidRequestString(context, value,   
                requestValidationSource, collectionKey, out   
                validationFailureIndex);  
        }  
        // All other HTTP input checks fall back to   
        // the base ASP.NET implementation.  
        else  
        {  
            return base.IsValidRequestString(context, value,   
                requestValidationSource, collectionKey,   
                out validationFailureIndex);  
        }  
    }  
}  
```  
  
 下面的示例演示如何将 ASP.NET 配置为使用自定义验证程序。  
  
```  
<httpRuntime requestValidationType="CustomRequestValidation" />  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.Util.RequestValidator" />
  </Docs>
  <Members>
    <Member MemberName="Cookies">
      <MemberSignature Language="C#" Value="Cookies" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Web.Util.RequestValidationSource Cookies = int32(2)" />
      <MemberSignature Language="DocId" Value="F:System.Web.Util.RequestValidationSource.Cookies" />
      <MemberSignature Language="VB.NET" Value="Cookies" />
      <MemberSignature Language="C++ CLI" Value="Cookies" />
      <MemberSignature Language="F#" Value="Cookies = 2" Usage="System.Web.Util.RequestValidationSource.Cookies" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Util.RequestValidationSource</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary>请求 Cookie。</summary>
      </Docs>
    </Member>
    <Member MemberName="Files">
      <MemberSignature Language="C#" Value="Files" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Web.Util.RequestValidationSource Files = int32(3)" />
      <MemberSignature Language="DocId" Value="F:System.Web.Util.RequestValidationSource.Files" />
      <MemberSignature Language="VB.NET" Value="Files" />
      <MemberSignature Language="C++ CLI" Value="Files" />
      <MemberSignature Language="F#" Value="Files = 3" Usage="System.Web.Util.RequestValidationSource.Files" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Util.RequestValidationSource</ReturnType>
      </ReturnValue>
      <MemberValue>3</MemberValue>
      <Docs>
        <summary>上载的文件。</summary>
      </Docs>
    </Member>
    <Member MemberName="Form">
      <MemberSignature Language="C#" Value="Form" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Web.Util.RequestValidationSource Form = int32(1)" />
      <MemberSignature Language="DocId" Value="F:System.Web.Util.RequestValidationSource.Form" />
      <MemberSignature Language="VB.NET" Value="Form" />
      <MemberSignature Language="C++ CLI" Value="Form" />
      <MemberSignature Language="F#" Value="Form = 1" Usage="System.Web.Util.RequestValidationSource.Form" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Util.RequestValidationSource</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>窗体值。</summary>
      </Docs>
    </Member>
    <Member MemberName="Headers">
      <MemberSignature Language="C#" Value="Headers" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Web.Util.RequestValidationSource Headers = int32(7)" />
      <MemberSignature Language="DocId" Value="F:System.Web.Util.RequestValidationSource.Headers" />
      <MemberSignature Language="VB.NET" Value="Headers" />
      <MemberSignature Language="C++ CLI" Value="Headers" />
      <MemberSignature Language="F#" Value="Headers = 7" Usage="System.Web.Util.RequestValidationSource.Headers" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Util.RequestValidationSource</ReturnType>
      </ReturnValue>
      <MemberValue>7</MemberValue>
      <Docs>
        <summary>请求标头。</summary>
      </Docs>
    </Member>
    <Member MemberName="Path">
      <MemberSignature Language="C#" Value="Path" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Web.Util.RequestValidationSource Path = int32(5)" />
      <MemberSignature Language="DocId" Value="F:System.Web.Util.RequestValidationSource.Path" />
      <MemberSignature Language="VB.NET" Value="Path" />
      <MemberSignature Language="C++ CLI" Value="Path" />
      <MemberSignature Language="F#" Value="Path = 5" Usage="System.Web.Util.RequestValidationSource.Path" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Util.RequestValidationSource</ReturnType>
      </ReturnValue>
      <MemberValue>5</MemberValue>
      <Docs>
        <summary>虚拟路径。</summary>
      </Docs>
    </Member>
    <Member MemberName="PathInfo">
      <MemberSignature Language="C#" Value="PathInfo" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Web.Util.RequestValidationSource PathInfo = int32(6)" />
      <MemberSignature Language="DocId" Value="F:System.Web.Util.RequestValidationSource.PathInfo" />
      <MemberSignature Language="VB.NET" Value="PathInfo" />
      <MemberSignature Language="C++ CLI" Value="PathInfo" />
      <MemberSignature Language="F#" Value="PathInfo = 6" Usage="System.Web.Util.RequestValidationSource.PathInfo" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Util.RequestValidationSource</ReturnType>
      </ReturnValue>
      <MemberValue>6</MemberValue>
      <Docs>
        <summary>HTTP <see cref="P:System.Web.HttpRequest.PathInfo" /> 字符串（URL 路径的扩展）。</summary>
      </Docs>
    </Member>
    <Member MemberName="QueryString">
      <MemberSignature Language="C#" Value="QueryString" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Web.Util.RequestValidationSource QueryString = int32(0)" />
      <MemberSignature Language="DocId" Value="F:System.Web.Util.RequestValidationSource.QueryString" />
      <MemberSignature Language="VB.NET" Value="QueryString" />
      <MemberSignature Language="C++ CLI" Value="QueryString" />
      <MemberSignature Language="F#" Value="QueryString = 0" Usage="System.Web.Util.RequestValidationSource.QueryString" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Util.RequestValidationSource</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary>查询字符串。</summary>
      </Docs>
    </Member>
    <Member MemberName="RawUrl">
      <MemberSignature Language="C#" Value="RawUrl" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Web.Util.RequestValidationSource RawUrl = int32(4)" />
      <MemberSignature Language="DocId" Value="F:System.Web.Util.RequestValidationSource.RawUrl" />
      <MemberSignature Language="VB.NET" Value="RawUrl" />
      <MemberSignature Language="C++ CLI" Value="RawUrl" />
      <MemberSignature Language="F#" Value="RawUrl = 4" Usage="System.Web.Util.RequestValidationSource.RawUrl" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Util.RequestValidationSource</ReturnType>
      </ReturnValue>
      <MemberValue>4</MemberValue>
      <Docs>
        <summary>原始 URL。 （域后的 URL 部分。）</summary>
      </Docs>
    </Member>
  </Members>
</Type>
