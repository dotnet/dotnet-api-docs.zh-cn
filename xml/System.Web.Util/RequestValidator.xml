<Type Name="RequestValidator" FullName="System.Web.Util.RequestValidator">
  <Metadata><Meta Name="ms.openlocfilehash" Value="4f6099ae9f82121174714f1cc7e1bbfb3cfe33e4" /><Meta Name="ms.sourcegitcommit" Value="b53d35b4a410c949742abd4c6a989d1af5357bca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="86655402" /></Metadata><TypeSignature Language="C#" Value="public class RequestValidator" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit RequestValidator extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.Util.RequestValidator" />
  <TypeSignature Language="VB.NET" Value="Public Class RequestValidator" />
  <TypeSignature Language="C++ CLI" Value="public ref class RequestValidator" />
  <TypeSignature Language="F#" Value="type RequestValidator = class" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>定义自定义请求验证的基方法。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 默认情况下，ASP.NET 不会验证请求，直到代码显式请求请求中的值。 例如，在代码访问集合之前，ASP.NET 不会验证查询字符串值 <xref:System.Web.HttpRequest.QueryString%2A> 。 默认情况下，ASP.NET 也不会验证某些类型的请求数据，如窗体值、cookie、使用 HTTP 上传的文件的名称以及属性的值 <xref:System.Web.HttpRequest.RawUrl%2A> 。  
  
 <xref:System.Web.Util.RequestValidator>类是一个基类，可以实现此基类以提供自定义请求验证。 通过实现此类，可以确定验证发生的时间以及要对其执行验证的请求数据的类型。  
  
 默认情况下，ASP.NET 提供跨站点脚本 (XSS) 检查。 但是，可以通过创建 XSS 的自定义实现来补充或替换 ASP.NET 中提供的请求验证逻辑。 例如，你可以编写一个自定义请求验证实现，该实现除了检查 XSS 攻击以外，还会扫描 SQL 注入攻击。  
  
 若要创建自定义请求验证，请编写一个派生自基类的自定义类 <xref:System.Web.Util.RequestValidator> 。 然后，将 ASP.NET 配置为使用应用程序级别 Web.config 文件中的自定义请求验证程序。 可以将自定义类放入 App_Code 文件夹、Bin 文件夹中的已编译类库或 GAC 中的已编译类库中。  
  
> [!NOTE]
>  对于应用程序，只能配置一个自定义请求验证类型。 不能为单个虚拟路径或页面配置不同的请求验证类型。  
  
   
  
## Examples  
 下面的示例演示如何创建自定义请求验证程序，该验证器仅允许将特定字符串用于查询字符串值。  
  
 [!code-csharp[System.Web.Util.RequestValidator#1](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.util.requestvalidator/cs/requestvalidator.cs#1)]
 [!code-vb[System.Web.Util.RequestValidator#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.util.requestvalidator/vb/requestvalidator.vb#1)]  
  
 下面的示例演示如何将 ASP.NET 配置为在应用程序的 Web.config 文件中使用自定义验证程序。  
  
```  
<system.web>  
  <httpRuntime requestValidationType="CustomRequestValidation" />  
</system.web>  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.Util.RequestValidationSource" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RequestValidator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.RequestValidator.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RequestValidator();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Web.Util.RequestValidator" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Util.RequestValidator>类具有无参数的构造函数。 初始化类的新实例时，内部方法会从应用程序的配置信息中检索自定义验证详细信息。 配置详细信息包含在部分中 <xref:System.Web.Configuration.HttpRuntimeSection> 。 有关详细信息，请参阅 [HttpRuntime 元素 (ASP.NET Settings Schema) ](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/e1f13641(v=vs.100)) 和 <xref:System.Web.Configuration.HttpRuntimeSection.RequestValidationType%2A> 属性。  
  
 在初始化期间， <xref:System.Web.Util.RequestValidator> 会创建类的单个实例，并在属性中维护对实例的引用 <xref:System.Web.Util.RequestValidator.Current%2A> 。 ASP.NET 不会为每个请求创建新的请求验证程序实例。 因此，类的自定义实现 <xref:System.Web.Util.RequestValidator> 必须是线程安全的。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public static System.Web.Util.RequestValidator Current { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Web.Util.RequestValidator Current" />
      <MemberSignature Language="DocId" Value="P:System.Web.Util.RequestValidator.Current" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property Current As RequestValidator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Web::Util::RequestValidator ^ Current { System::Web::Util::RequestValidator ^ get(); void set(System::Web::Util::RequestValidator ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Current : System.Web.Util.RequestValidator with get, set" Usage="System.Web.Util.RequestValidator.Current" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Util.RequestValidator</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置对将在应用程序中使用的当前 <see cref="T:System.Web.Util.RequestValidator" /> 实例的引用。</summary>
        <value><see cref="T:System.Web.Util.RequestValidator" /> 类的实例。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Util.RequestValidator.Current%2A>属性维护对类的单个允许实例的引用 <xref:System.Web.Util.RequestValidator> 。 如果不存在实例，则创建一个新实例。 如果某个实例已存在，则返回当前实例。  
  
 在初始化期间， <xref:System.Web.Util.RequestValidator> 会创建类的单个实例，并在属性中提供对实例的引用 <xref:System.Web.Util.RequestValidator.Current%2A> 。 ASP.NET 不会为每个请求创建新的请求验证程序实例。 因此，类的自定义实现 <xref:System.Web.Util.RequestValidator> 必须是线程安全的。  
  
> [!NOTE]
>  属性在 <xref:System.Web.Util.RequestValidator.Current%2A> 设置对当前类的引用时不是线程安全的 <xref:System.Web.Util.RequestValidator> 。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">属性为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="InvokeIsValidRequestString">
      <MemberSignature Language="C#" Value="public bool InvokeIsValidRequestString (System.Web.HttpContext context, string value, System.Web.Util.RequestValidationSource requestValidationSource, string collectionKey, out int validationFailureIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool InvokeIsValidRequestString(class System.Web.HttpContext context, string value, valuetype System.Web.Util.RequestValidationSource requestValidationSource, string collectionKey, [out] int32&amp; validationFailureIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.RequestValidator.InvokeIsValidRequestString(System.Web.HttpContext,System.String,System.Web.Util.RequestValidationSource,System.String,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Function InvokeIsValidRequestString (context As HttpContext, value As String, requestValidationSource As RequestValidationSource, collectionKey As String, ByRef validationFailureIndex As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool InvokeIsValidRequestString(System::Web::HttpContext ^ context, System::String ^ value, System::Web::Util::RequestValidationSource requestValidationSource, System::String ^ collectionKey, [Runtime::InteropServices::Out] int % validationFailureIndex);" />
      <MemberSignature Language="F#" Value="member this.InvokeIsValidRequestString : System.Web.HttpContext * string * System.Web.Util.RequestValidationSource * string * int -&gt; bool" Usage="requestValidator.InvokeIsValidRequestString (context, value, requestValidationSource, collectionKey, validationFailureIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Web.HttpContext" Index="0" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="value" Type="System.String" Index="1" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="requestValidationSource" Type="System.Web.Util.RequestValidationSource" Index="2" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="collectionKey" Type="System.String" Index="3" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="validationFailureIndex" Type="System.Int32" RefType="out" Index="4" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="context">请求的 HTTP 上下文。</param>
        <param name="value">要验证的 HTTP 请求数据。</param>
        <param name="requestValidationSource">一个枚举，表示正在验证的请求数据的源。 以下是枚举的可能值： 
-   <see langword="QueryString" />  
  
-   <see langword="Form" />  
  
-   <see langword="Cookies" />  
  
-   <see langword="Files" />  
  
-   <see langword="Path" />  
  
-   <see langword="PathInfo" />  
  
-   <see langword="Headers" /></param>
        <param name="collectionKey">（可选）验证项的请求集合中的键。 如果从集合中获得要验证的数据，则使用此参数。 如果要验证的数据不是集合中的数据，则此参数可以为 <see langword="null" />。</param>
        <param name="validationFailureIndex">此方法返回时，指示请求集合中有问题或无效文本的从零开始的起点。 此参数未经初始化即被传递。</param>
        <summary>提供一种公共方法，其调用受保护的 <see cref="M:System.Web.Util.RequestValidator.IsValidRequestString(System.Web.HttpContext,System.String,System.Web.Util.RequestValidationSource,System.String,System.Int32@)" /> 方法来验证 HTTP 请求数据。</summary>
        <returns>如果要验证的字符串不包含可用于恶意脚本攻击的未编码字符，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Util.RequestValidator.InvokeIsValidRequestString%2A>方法提供对受保护方法的公共访问 <xref:System.Web.Util.RequestValidator.IsValidRequestString%2A> 。 这使你可以为类创建自定义包装器类 <xref:System.Web.Util.RequestValidator> 并调用 <xref:System.Web.Util.RequestValidator.IsValidRequestString%2A> 方法，而不必从类继承 <xref:System.Web.Util.RequestValidator> 。  
  
 有关请求验证的信息，请参阅 <xref:System.Web.UnvalidatedRequestValues> 。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsValidRequestString">
      <MemberSignature Language="C#" Value="protected internal virtual bool IsValidRequestString (System.Web.HttpContext context, string value, System.Web.Util.RequestValidationSource requestValidationSource, string collectionKey, out int validationFailureIndex);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance bool IsValidRequestString(class System.Web.HttpContext context, string value, valuetype System.Web.Util.RequestValidationSource requestValidationSource, string collectionKey, [out] int32&amp; validationFailureIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.RequestValidator.IsValidRequestString(System.Web.HttpContext,System.String,System.Web.Util.RequestValidationSource,System.String,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function IsValidRequestString (context As HttpContext, value As String, requestValidationSource As RequestValidationSource, collectionKey As String, ByRef validationFailureIndex As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual bool IsValidRequestString(System::Web::HttpContext ^ context, System::String ^ value, System::Web::Util::RequestValidationSource requestValidationSource, System::String ^ collectionKey, [Runtime::InteropServices::Out] int % validationFailureIndex);" />
      <MemberSignature Language="F#" Value="abstract member IsValidRequestString : System.Web.HttpContext * string * System.Web.Util.RequestValidationSource * string * int -&gt; bool&#xA;override this.IsValidRequestString : System.Web.HttpContext * string * System.Web.Util.RequestValidationSource * string * int -&gt; bool" Usage="requestValidator.IsValidRequestString (context, value, requestValidationSource, collectionKey, validationFailureIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Web.HttpContext" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="requestValidationSource" Type="System.Web.Util.RequestValidationSource" />
        <Parameter Name="collectionKey" Type="System.String" />
        <Parameter Name="validationFailureIndex" Type="System.Int32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="context">当前请求的上下文。</param>
        <param name="value">要验证的 HTTP 请求数据。</param>
        <param name="requestValidationSource">一个枚举，表示正在验证的请求数据的源。 以下是枚举的可能值： 
- <see langword="QueryString" />
- <see langword="Form " />
- <see langword="Cookies" />
- <see langword="Files" />
- <see langword="RawUrl" />
- <see langword="Path" />
- <see langword="PathInfo" />
- <see langword="Headers" /></param>
        <param name="collectionKey">要验证的项的请求集合中的键。 此参数是可选的。 如果从集合中获得要验证的数据，则使用此参数。 如果要验证的数据不是集合中的数据，<paramref name="collectionKey" /> 可以是 <see langword="null" />。</param>
        <param name="validationFailureIndex">此方法返回时，指示请求集合中有问题或无效文本的从零开始的起点。 此参数未经初始化即被传递。</param>
        <summary>验证包含 HTTP 请求数据的字符串。</summary>
        <returns>如果要验证的字符串有效，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 实现此方法可以执行请求数据的自定义验证。 方法的基本行为 <xref:System.Web.Util.RequestValidator.IsValidRequestString%28System.Web.HttpContext%2CSystem.String%2CSystem.Web.Util.RequestValidationSource%2CSystem.String%2CSystem.Int32%40%29> 类似于 ASP.NET 在内部实现以检查跨站点脚本验证中的危险字符串的行为。 有关详细信息，请参阅 [如何：在 ASP.NET 中阻止跨站点脚本](https://go.microsoft.com/fwlink/?LinkID=178708)。  
  
 如果自定义验证逻辑检测到错误，则此方法应返回， `false` 并在中提供一个值 `validationFailureIndex` 以指示导致错误的文本的起始点。 中的值 `validationFailureIndex` 必须为0或正整数。  
  
 请求验证检查中的逻辑按如下方式继续：  
  
-   <xref:System.Web.HttpRequest>类对传入数据执行 null 字符删除检查。  
  
-   <xref:System.Web.HttpRequest>类) 调用方法的 <xref:System.Web.Util.RequestValidator.IsValidRequestString%2A> 默认实现 (方法，或调用方法的派生版本。  
  
-   如果 <xref:System.Web.Util.RequestValidator.IsValidRequestString%2A> 方法返回 `false` 以指示验证失败，ASP.NET 会根据需要构造错误字符串 (如有必要) 并引发 <xref:System.Web.HttpRequestValidationException> 异常。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
