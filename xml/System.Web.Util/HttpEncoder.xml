<Type Name="HttpEncoder" FullName="System.Web.Util.HttpEncoder">
  <Metadata><Meta Name="ms.openlocfilehash" Value="f87e4daf65dd7c0c3a1289bfb49564ffe1d3d0af" /><Meta Name="ms.sourcegitcommit" Value="b53d35b4a410c949742abd4c6a989d1af5357bca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="86655470" /></Metadata><TypeSignature Language="C#" Value="public class HttpEncoder" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit HttpEncoder extends System.Object" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <TypeSignature Language="DocId" Value="T:System.Web.Util.HttpEncoder" />
  <TypeSignature Language="VB.NET" Value="Public Class HttpEncoder" />
  <TypeSignature Language="C++ CLI" Value="public ref class HttpEncoder" />
  <TypeSignature Language="F#" Value="type HttpEncoder = class" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi HttpEncoder extends System.Object" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Web.Services</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>提供编码和解码逻辑。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 类包含类中的方法使用的编码和解码逻辑 <xref:System.Web.HttpUtility> ，如、 <xref:System.Web.HttpServerUtility> 和 <xref:System.Net.HttpResponseHeader> 。  
  
 可以从 <xref:System.Web.Util.HttpEncoder> 类继承并重写其行为，以自定义 ASP.NET 的默认编码和解码行为。 然后，设置 <xref:System.Web.Configuration.HttpRuntimeSection.EncoderType%2A> 类的属性 <xref:System.Web.Configuration.HttpRuntimeSection> 以配置自定义类。  
  
 派生自的编码和解码的自定义类 <xref:System.Web.Util.HttpEncoder> 可以覆盖内置的 ASP.NET 编码和解码行为，或仅更改其所选的方面。  
  
 可以在 ASP.NET 中配置自定义编码类型，以替换或补充以下编码行为：  
  
-   HTML 编码  
  
-   HTML 特性编码  
  
-   URL 编码  
  
-   URL 路径编码  
  
-   HTTP 标头名称和标头值编码  
  
 默认情况下，ASP.NET 应用程序配置为使用 <xref:System.Web.Security.AntiXss.AntiXssEncoder> 所有输出编码的类型。  
  
 应用程序级 Web.config 文件中的以下示例显示了如何 <xref:System.Web.Security.AntiXss.AntiXssEncoder> 为 ASP.NET 应用程序设置类型：  
  
 `<httpRuntime requestValidationMode="4.5" encoderType="System.Web.Security.AntiXss.AntiXssEncoder, System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"/>`  
  
 该示例中的配置设置将 <xref:System.Web.Security.AntiXss.AntiXssEncoder> 类设置为在应用程序中执行所有输出编码。 有关详细信息，请参阅 <xref:System.Web.Security.AntiXss.AntiXssEncoder> 类概述。  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para>当创建自定义编码器类并重写基类的基方法时，派生的编码器可能会从任何重写的方法中引发异常。 但是，在以下情况下，引发此类异常可能会导致 ASP.NET 中出现意外行为：  
  
-如果 ASP.NET 呈现由自定义编码器引发的未经处理的异常导致的错误页，则 ASP.NET 不会尝试通过调用自定义编码器来编码其错误输出。 这样可以避免递归错误情况。  
  
-当 ASP.NET 向 IIS 发送 HTTP 标头时，ASP.NET 不会预配未经处理的异常。 因此，如果配置设置允许) 显示此页，则将 (呈现标准的 ASP.NET 错误页。</para></block>
    <altmember cref="T:System.Web.HttpUtility" />
    <altmember cref="T:System.Web.HttpServerUtility" />
    <altmember cref="T:System.Web.Configuration.HttpRuntimeSection" />
    <altmember cref="T:System.Web.Security.AntiXss.AntiXssEncoder" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HttpEncoder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.HttpEncoder.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HttpEncoder();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Web.Util.HttpEncoder" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public static System.Web.Util.HttpEncoder Current { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Web.Util.HttpEncoder Current" />
      <MemberSignature Language="DocId" Value="P:System.Web.Util.HttpEncoder.Current" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property Current As HttpEncoder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Web::Util::HttpEncoder ^ Current { System::Web::Util::HttpEncoder ^ get(); void set(System::Web::Util::HttpEncoder ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Current : System.Web.Util.HttpEncoder with get, set" Usage="System.Web.Util.HttpEncoder.Current" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Util.HttpEncoder</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置将在应用程序中使用的 <see cref="T:System.Web.Util.HttpEncoder" /> 类型。</summary>
        <value>对将要使用的编码器/解码器类型的引用。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果 <xref:System.Web.Util.HttpEncoder> 在配置文件中指定派生类型，则属性将 <xref:System.Web.Util.HttpEncoder.Current%2A> 返回对自定义类型的引用。 但是，如果未使用自定义编码器，则属性将返回对默认 ASP.NET 实例的引用 <xref:System.Web.Util.HttpEncoder> 。  
  
 此 <xref:System.Web.Util.HttpEncoder.Current%2A> 属性不是线程安全的。 仅在应用程序的方法中设置此属性 `Application_Start` ，因为 `Application_Start` 在单个线程上运行。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">分配给此属性的编码器实例是 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="Default">
      <MemberSignature Language="C#" Value="public static System.Web.Util.HttpEncoder Default { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Web.Util.HttpEncoder Default" />
      <MemberSignature Language="DocId" Value="P:System.Web.Util.HttpEncoder.Default" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Default As HttpEncoder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Web::Util::HttpEncoder ^ Default { System::Web::Util::HttpEncoder ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Default : System.Web.Util.HttpEncoder" Usage="System.Web.Util.HttpEncoder.Default" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.Util.HttpEncoder</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取对 ASP.NET 的默认编码器的引用。</summary>
        <value>对默认编码器的引用。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 常见的编码问题在于，默认 ASP.NET <xref:System.Web.Util.HttpEncoder.UrlEncode%2A> 行为会将空格转换为 "+" 字符。 从历史角度来看，"+" 字符是将 URL 中的空格字符编码为更易于阅读的方式的 Internet 约定。 但是，根据标准，空格字符应编码为 "%20"，而不是 "+" 字符。 ASP.NET 允许你实现更符合标准的编码算法。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HeaderNameValueEncode">
      <MemberSignature Language="C#" Value="protected internal virtual void HeaderNameValueEncode (string headerName, string headerValue, out string encodedHeaderName, out string encodedHeaderValue);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void HeaderNameValueEncode(string headerName, string headerValue, [out] string&amp; encodedHeaderName, [out] string&amp; encodedHeaderValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.HttpEncoder.HeaderNameValueEncode(System.String,System.String,System.String@,System.String@)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub HeaderNameValueEncode (headerName As String, headerValue As String, ByRef encodedHeaderName As String, ByRef encodedHeaderValue As String)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void HeaderNameValueEncode(System::String ^ headerName, System::String ^ headerValue, [Runtime::InteropServices::Out] System::String ^ % encodedHeaderName, [Runtime::InteropServices::Out] System::String ^ % encodedHeaderValue);" />
      <MemberSignature Language="F#" Value="abstract member HeaderNameValueEncode : string * string * string * string -&gt; unit&#xA;override this.HeaderNameValueEncode : string * string * string * string -&gt; unit" Usage="httpEncoder.HeaderNameValueEncode (headerName, headerValue, encodedHeaderName, encodedHeaderValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="headerName" Type="System.String" />
        <Parameter Name="headerValue" Type="System.String" />
        <Parameter Name="encodedHeaderName" Type="System.String" RefType="out" />
        <Parameter Name="encodedHeaderValue" Type="System.String" RefType="out" />
      </Parameters>
      <Docs>
        <param name="headerName">要编码的 HTTP 标头名称。</param>
        <param name="headerValue">要编码的 HTTP 标头值。</param>
        <param name="encodedHeaderName">当此方法返回时，返回值包含要用于 HTTP 标头的已编码名称。 此参数未经初始化即被传递。</param>
        <param name="encodedHeaderValue">当此方法返回时，返回值包含要用于 HTTP 标头的已编码值。 此参数未经初始化即被传递。</param>
        <summary>将标头名称和值编码为可用作 HTTP 标头的字符串。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Util.HttpEncoder.HeaderNameValueEncode%2A>方法从和参数获取输入字符串 `headerName` `headerValue` 并对它们进行编码。 编码值作为输出参数返回。  
  
 <xref:System.Web.Util.HttpEncoder.HeaderNameValueEncode%2A>方法使用以下逻辑对标头名称和值进行编码：  
  
-   Unicode 值小于 ASCII 字符32的所有字符（ASCII 字符9除外）都将 URL 编码为 `%NN` `N` 字符表示十六进制值的格式。  
  
-   ASCII 字符 9 (水平制表符) 不是 URL 编码的字符。  
  
-   ASCII 字符127编码为 `%7F` 。  
  
-   所有其他字符不进行编码。  
  
    > [!NOTE]
    >  尽管此方法可用于 Unicode 值，但它通常用于 ASCII 范围内的值。  
  
 <xref:System.Web.Util.HttpEncoder.HeaderNameValueEncode%2A> `headerValue` `encodedHeaderValue` 如果 `headerValue` 为 `null` 或为空字符串，则方法的默认实现将返回中的值。 同样， `headerName` `encodedHeaderName` 如果 `headerName` 为 `null` 或为空字符串，则默认实现将返回中的值。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HtmlAttributeEncode">
      <MemberSignature Language="C#" Value="protected internal virtual void HtmlAttributeEncode (string value, System.IO.TextWriter output);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void HtmlAttributeEncode(string value, class System.IO.TextWriter output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.HttpEncoder.HtmlAttributeEncode(System.String,System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub HtmlAttributeEncode (value As String, output As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void HtmlAttributeEncode(System::String ^ value, System::IO::TextWriter ^ output);" />
      <MemberSignature Language="F#" Value="abstract member HtmlAttributeEncode : string * System.IO.TextWriter -&gt; unit&#xA;override this.HtmlAttributeEncode : string * System.IO.TextWriter -&gt; unit" Usage="httpEncoder.HtmlAttributeEncode (value, output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="output" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="value">要编码的字符串。</param>
        <param name="output">要将已编码值写入到的文本编写器。</param>
        <summary>将传入值编码为可插入 HTML 特性（由单引号或双引号分隔）的字符串。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Util.HttpEncoder.HtmlAttributeEncode%2A>方法使用标准 HTML 实体对字符进行编码。 例如， `<` (左尖括号) 编码为 `&lt;` ， `\` (反斜杠) 编码为 `&#92;` 。  
  
 可以安全地 <xref:System.Web.Util.HttpEncoder.HtmlAttributeEncode%2A> 在带单引号和双引号的属性中使用。 值必须用引号引起来。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="output" /> 为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="HtmlDecode">
      <MemberSignature Language="C#" Value="protected internal virtual void HtmlDecode (string value, System.IO.TextWriter output);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void HtmlDecode(string value, class System.IO.TextWriter output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.HttpEncoder.HtmlDecode(System.String,System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub HtmlDecode (value As String, output As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void HtmlDecode(System::String ^ value, System::IO::TextWriter ^ output);" />
      <MemberSignature Language="F#" Value="abstract member HtmlDecode : string * System.IO.TextWriter -&gt; unit&#xA;override this.HtmlDecode : string * System.IO.TextWriter -&gt; unit" Usage="httpEncoder.HtmlDecode (value, output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="output" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="value">要解码的字符串。</param>
        <param name="output">要将已解码值写入到的文本编写器。</param>
        <summary>解码 HTML 编码的字符串中的值。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 下表列出了 ASP.NET 解码逻辑可以解码的字符序列。  
  
|字符序列|规则|  
|------------------------|----------|  
|`&#NNN;` (ASCII 字符的十进制代码) 。|解码为指定的 ASCII 字符。 字符序列以 # 字符后的第一个数字开头，并以分号结束。|  
|`&#xZZ;`)  (ASCII 字符的十六进制代码。|解码为指定的 ASCII 字符。 编码的窗体通过使用十六进制字符而不是十进制值来指定字符。 字符序列以 # 字符后的第一个数字开头，并以分号结束。|  
|命名的 HTML 实体。|解码为等效的 ASCII 字符。|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="output" /> 为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="HtmlEncode">
      <MemberSignature Language="C#" Value="protected internal virtual void HtmlEncode (string value, System.IO.TextWriter output);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void HtmlEncode(string value, class System.IO.TextWriter output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.HttpEncoder.HtmlEncode(System.String,System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub HtmlEncode (value As String, output As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void HtmlEncode(System::String ^ value, System::IO::TextWriter ^ output);" />
      <MemberSignature Language="F#" Value="abstract member HtmlEncode : string * System.IO.TextWriter -&gt; unit&#xA;override this.HtmlEncode : string * System.IO.TextWriter -&gt; unit" Usage="httpEncoder.HtmlEncode (value, output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="output" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="value">要编码的字符串。</param>
        <param name="output">要将已编码值写入到的文本编写器。</param>
        <summary>将字符串编码为 HTML 编码的字符串。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 下表列出了 ASP.NET 编码逻辑可以解码的字符序列。  
  
|字符|编码为|  
|---------------|----------------|  
|`<` (左尖括号) |`&lt;`|  
|`>` (右尖括号) |`&gt;`|  
|`"` (双引号) |`&quot;`|  
|`&`（与号）|`&amp;`|  
|`\` (反斜杠) |`&#92;`|  
|从160到255的 ASCII 字符|`&#NNN;`，其中 `NNN` 是三位十进制字符代码|  
  
 如果重写 <xref:System.Web.Util.HttpEncoder.HtmlEncode%2A> 方法，则必须生成在带引号或单引号的 HTML 特性内也安全的输出。 这适用于 Razor 引擎的分析，其中的标记和代码可以组合在一起，例如 \<tag attr="@value"> 。 此外，当 Razor 引擎处理时，@ 运算符不能识别上下文，因此它调用而不是 <xref:System.Web.Util.HttpEncoder.HtmlEncode%2A> <xref:System.Web.Util.HttpEncoder.HtmlAttributeEncode%2A> 。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="output" /> 为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="JavaScriptStringEncode">
      <MemberSignature Language="C#" Value="protected internal virtual string JavaScriptStringEncode (string value);" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance string JavaScriptStringEncode(string value) cil managed" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.HttpEncoder.JavaScriptStringEncode(System.String)" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function JavaScriptStringEncode (value As String) As String" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual System::String ^ JavaScriptStringEncode(System::String ^ value);" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="F#" Value="abstract member JavaScriptStringEncode : string -&gt; string&#xA;override this.JavaScriptStringEncode : string -&gt; string" Usage="httpEncoder.JavaScriptStringEncode value" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" Index="0" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="value">要编码的字符串。</param>
        <summary>对字符串进行编码。</summary>
        <returns>已编码的字符串。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 URL 编码可确保所有浏览器都正确传输 URL 字符串中的文本。 某些浏览器可能会截断或损坏问号，如问号 (？ ) ，and 号 ( # A0) 、斜杠 (/) 和空格。 因此，必须对这些字符进行编码。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UrlEncode">
      <MemberSignature Language="C#" Value="protected internal virtual byte[] UrlEncode (byte[] bytes, int offset, int count);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance unsigned int8[] UrlEncode(unsigned int8[] bytes, int32 offset, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.HttpEncoder.UrlEncode(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function UrlEncode (bytes As Byte(), offset As Integer, count As Integer) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual cli::array &lt;System::Byte&gt; ^ UrlEncode(cli::array &lt;System::Byte&gt; ^ bytes, int offset, int count);" />
      <MemberSignature Language="F#" Value="abstract member UrlEncode : byte[] * int * int -&gt; byte[]&#xA;override this.UrlEncode : byte[] * int * int -&gt; byte[]" Usage="httpEncoder.UrlEncode (bytes, offset, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes">要编码的字节数组。</param>
        <param name="offset"><paramref name="bytes" /> 数组中作为编码起始点的位置。</param>
        <param name="count"><paramref name="bytes" /> 数组中要编码的项数。</param>
        <summary>将 URL 中不允许使用的字符数组编码为等效十六进制字符实体。</summary>
        <returns>已编码字符的数组。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Util.HttpEncoder.UrlEncode%2A>方法由类中的多个 URL 编码方法调用 <xref:System.Web.HttpUtility> 。  
  
 <xref:System.Web.Util.HttpEncoder.UrlEncode%2A>方法对不在被视为 URL 安全的 ASCII 字符集中的任何字符进行 url 编码。 空格编码为 ASCII " `+"` 字符。 URL 安全的 ASCII 字符包括 ASCII 字符 (A 到 Z 和 A 到 z) 、数字 (0 到 9) 以及一些标点符号。 下表列出了被视为 URL 安全 ASCII 字符的标点符号。  
  
|字符|说明|  
|---------------|-----------------|  
|-|Hyphen|  
|_|强调|  
|.|句点 (点) |  
|!|感叹号|  
|*|星号 (星号) |  
|(|左括号|  
|)|右括号|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset" /> 小于零或大于 <paramref name="bytes" /> 数组的长度。  
  
- 或 - 
 <paramref name="count" /> 小于零或 <paramref name="count" /> 加上 <paramref name="offset" /> 大于 <paramref name="bytes" /> 数组的长度。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="bytes" /> 为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="UrlPathEncode">
      <MemberSignature Language="C#" Value="protected internal virtual string UrlPathEncode (string value);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance string UrlPathEncode(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.HttpEncoder.UrlPathEncode(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function UrlPathEncode (value As String) As String" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual System::String ^ UrlPathEncode(System::String ^ value);" />
      <MemberSignature Language="F#" Value="abstract member UrlPathEncode : string -&gt; string&#xA;override this.UrlPathEncode : string -&gt; string" Usage="httpEncoder.UrlPathEncode value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">要编码的字符串。</param>
        <summary>对 URL 的子节进行编码。</summary>
        <returns>URL 编码的字符串。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Util.HttpEncoder.UrlPathEncode%2A> 方法由 <xref:System.Web.HttpUtility.UrlPathEncode%2A> 方法调用。 <xref:System.Web.HttpUtility.UrlPathEncode%2A>方法执行以下步骤：  
  
-   将方法的编码逻辑 <xref:System.Web.Util.HttpEncoder.UrlPathEncode%2A> 仅应用到 URL 的路径部分， (不包括查询字符串) 。 方法假定 URL 编码为 UTF-8 字符串。  
  
-   对非空格编码，以便在生成的编码字符串中仅使用前128个 ASCII 字符的子集。 Unicode 值为128、更高、32和更小的任何字符都是 URL 编码的。  
  
-   将空格编码为 %20。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
