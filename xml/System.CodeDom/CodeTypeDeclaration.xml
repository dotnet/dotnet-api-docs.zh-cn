<Type Name="CodeTypeDeclaration" FullName="System.CodeDom.CodeTypeDeclaration">
  <Metadata><Meta Name="ms.openlocfilehash" Value="a634e4a75864ca718b16f32c8abd00abbcf64a23" /><Meta Name="ms.sourcegitcommit" Value="c982ad9e10a242d90f1e631b5981570f9e5d9f34" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/10/2020" /><Meta Name="ms.locfileid" Value="89851603" /></Metadata><TypeSignature Language="C#" Value="public class CodeTypeDeclaration : System.CodeDom.CodeTypeMember" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CodeTypeDeclaration extends System.CodeDom.CodeTypeMember" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1" />
  <TypeSignature Language="DocId" Value="T:System.CodeDom.CodeTypeDeclaration" />
  <TypeSignature Language="VB.NET" Value="Public Class CodeTypeDeclaration&#xA;Inherits CodeTypeMember" />
  <TypeSignature Language="C++ CLI" Value="public ref class CodeTypeDeclaration : System::CodeDom::CodeTypeMember" />
  <TypeSignature Language="F#" Value="type CodeTypeDeclaration = class&#xA;    inherit CodeTypeMember" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit CodeTypeDeclaration extends System.CodeDom.CodeTypeMember" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.CodeDom</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
    <AssemblyVersion>4.0.2.0</AssemblyVersion>
    <AssemblyVersion>4.0.3.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.CodeDom.CodeTypeMember</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
      <AttributeName Language="C#">[System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.AutoDispatch)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.AutoDispatch)&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
      <AttributeName Language="C#">[System.Runtime.InteropServices.ComVisible(true)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.ComVisible(true)&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
      <AttributeName Language="C#">[System.Serializable]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Serializable&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="2bd8f-101">表示类、结构、接口或枚举的类型声明。</span><span class="sxs-lookup"><span data-stu-id="2bd8f-101">Represents a type declaration for a class, structure, interface, or enumeration.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2bd8f-102"><xref:System.CodeDom.CodeTypeDeclaration> 可用于表示声明类、结构、接口或枚举的代码。</span><span class="sxs-lookup"><span data-stu-id="2bd8f-102"><xref:System.CodeDom.CodeTypeDeclaration> can be used to represent code that declares a class, structure, interface, or enumeration.</span></span> <span data-ttu-id="2bd8f-103"><xref:System.CodeDom.CodeTypeDeclaration> 可用于声明嵌套在另一类型中的类型。</span><span class="sxs-lookup"><span data-stu-id="2bd8f-103"><xref:System.CodeDom.CodeTypeDeclaration> can be used to declare a type that is nested within another type.</span></span>  
  
 <span data-ttu-id="2bd8f-104"><xref:System.CodeDom.CodeTypeDeclaration.BaseTypes%2A>属性指定正在声明的类型的基类型或基类型。</span><span class="sxs-lookup"><span data-stu-id="2bd8f-104">The <xref:System.CodeDom.CodeTypeDeclaration.BaseTypes%2A> property specifies the base type or base types of the type being declared.</span></span> <span data-ttu-id="2bd8f-105"><xref:System.CodeDom.CodeTypeDeclaration.Members%2A>属性包含类型成员，这些成员可以包含方法、字段、属性、注释和其他类型。</span><span class="sxs-lookup"><span data-stu-id="2bd8f-105">The <xref:System.CodeDom.CodeTypeDeclaration.Members%2A> property contains the type members, which can include methods, fields, properties, comments and other types.</span></span> <span data-ttu-id="2bd8f-106"><xref:System.CodeDom.CodeTypeDeclaration.TypeAttributes%2A>属性指示类型 <xref:System.Reflection.TypeAttributes> 声明的值，它指示类型的类型类别。</span><span class="sxs-lookup"><span data-stu-id="2bd8f-106">The <xref:System.CodeDom.CodeTypeDeclaration.TypeAttributes%2A> property indicates the <xref:System.Reflection.TypeAttributes> values for the type declaration, which indicate the type category of the type.</span></span> <span data-ttu-id="2bd8f-107"><xref:System.CodeDom.CodeTypeDeclaration.IsClass%2A>、 <xref:System.CodeDom.CodeTypeDeclaration.IsStruct%2A> 、 <xref:System.CodeDom.CodeTypeDeclaration.IsEnum%2A> 和 <xref:System.CodeDom.CodeTypeDeclaration.IsInterface%2A> 方法分别指示该类型是类、结构、枚举还是接口类型。</span><span class="sxs-lookup"><span data-stu-id="2bd8f-107">The <xref:System.CodeDom.CodeTypeDeclaration.IsClass%2A>, <xref:System.CodeDom.CodeTypeDeclaration.IsStruct%2A>, <xref:System.CodeDom.CodeTypeDeclaration.IsEnum%2A>, and <xref:System.CodeDom.CodeTypeDeclaration.IsInterface%2A> methods indicate whether the type is a class, structure, enumeration, or interface type, respectively.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2bd8f-108">某些编程语言仅支持引用类型或类的声明。</span><span class="sxs-lookup"><span data-stu-id="2bd8f-108">Some programming languages only support the declaration of reference types, or classes.</span></span> <span data-ttu-id="2bd8f-109">若要检查特定于语言的 CodeDOM 代码生成器是否支持声明接口、枚举或值类型，请调用 <xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A> 方法来测试适当的 <xref:System.CodeDom.Compiler.GeneratorSupport> 标志。</span><span class="sxs-lookup"><span data-stu-id="2bd8f-109">To check a language-specific CodeDOM code generator for support for declaring interfaces, enumerations, or value types, call the <xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A> method to test for the appropriate <xref:System.CodeDom.Compiler.GeneratorSupport> flags.</span></span> <span data-ttu-id="2bd8f-110"><xref:System.CodeDom.Compiler.GeneratorSupport.DeclareInterfaces> 指示支持接口， <xref:System.CodeDom.Compiler.GeneratorSupport.DeclareEnums> 表示支持枚举，并 <xref:System.CodeDom.Compiler.GeneratorSupport.DeclareValueTypes> 指示对值类型（如结构）的支持。</span><span class="sxs-lookup"><span data-stu-id="2bd8f-110"><xref:System.CodeDom.Compiler.GeneratorSupport.DeclareInterfaces> indicates support for interfaces, <xref:System.CodeDom.Compiler.GeneratorSupport.DeclareEnums> indicates support for enumerations, and <xref:System.CodeDom.Compiler.GeneratorSupport.DeclareValueTypes> indicates support for value types such as structures.</span></span>  
  
 <span data-ttu-id="2bd8f-111">您可以在一个完整的声明中生成一个类或结构实现，也可以跨多个声明来实现该实现。</span><span class="sxs-lookup"><span data-stu-id="2bd8f-111">You can build a class or a structure implementation in one complete declaration, or spread the implementation across multiple declarations.</span></span> <span data-ttu-id="2bd8f-112"><xref:System.CodeDom.CodeTypeDeclaration.IsPartial%2A>属性指示类型声明是完整的还是部分的。</span><span class="sxs-lookup"><span data-stu-id="2bd8f-112">The <xref:System.CodeDom.CodeTypeDeclaration.IsPartial%2A> property indicates whether the type declaration is complete or partial.</span></span> <span data-ttu-id="2bd8f-113">并非所有代码生成器都支持分部类型声明，因此，您应通过使用标志调用方法来测试此支持 <xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A> <xref:System.CodeDom.Compiler.GeneratorSupport.PartialTypes> 。</span><span class="sxs-lookup"><span data-stu-id="2bd8f-113">Not all code generators support partial type declarations, so you should test for this support by calling the <xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A> method with the flag <xref:System.CodeDom.Compiler.GeneratorSupport.PartialTypes>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2bd8f-114">此示例演示如何使用 <xref:System.CodeDom.CodeTypeDeclaration> 声明类型。</span><span class="sxs-lookup"><span data-stu-id="2bd8f-114">This example demonstrates using a <xref:System.CodeDom.CodeTypeDeclaration> to declare a type.</span></span>  
  
 [!code-cpp[CodeTypeDeclarationExample#2](~/samples/snippets/cpp/VS_Snippets_CLR/CodeTypeDeclarationExample/CPP/codetypedeclarationexample.cpp#2)]
 [!code-csharp[CodeTypeDeclarationExample#2](~/samples/snippets/csharp/VS_Snippets_CLR/CodeTypeDeclarationExample/CS/codetypedeclarationexample.cs#2)]
 [!code-vb[CodeTypeDeclarationExample#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeTypeDeclarationExample/VB/codetypedeclarationexample.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.CodeDom.CodeTypeDeclarationCollection" />
    <altmember cref="T:System.CodeDom.Compiler.GeneratorSupport" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="2bd8f-115">初始化 <see cref="T:System.CodeDom.CodeTypeDeclaration" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="2bd8f-115">Initializes a new instance of the <see cref="T:System.CodeDom.CodeTypeDeclaration" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CodeTypeDeclaration ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.CodeTypeDeclaration.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CodeTypeDeclaration();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="2bd8f-116">初始化 <see cref="T:System.CodeDom.CodeTypeDeclaration" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="2bd8f-116">Initializes a new instance of the <see cref="T:System.CodeDom.CodeTypeDeclaration" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CodeTypeDeclaration (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.CodeTypeDeclaration.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CodeTypeDeclaration(System::String ^ name);" />
      <MemberSignature Language="F#" Value="new System.CodeDom.CodeTypeDeclaration : string -&gt; System.CodeDom.CodeTypeDeclaration" Usage="new System.CodeDom.CodeTypeDeclaration name" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="2bd8f-117">新类型的名称。</span><span class="sxs-lookup"><span data-stu-id="2bd8f-117">The name for the new type.</span></span></param>
        <summary><span data-ttu-id="2bd8f-118">用指定的名称初始化 <see cref="T:System.CodeDom.CodeTypeDeclaration" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="2bd8f-118">Initializes a new instance of the <see cref="T:System.CodeDom.CodeTypeDeclaration" /> class with the specified name.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BaseTypes">
      <MemberSignature Language="C#" Value="public System.CodeDom.CodeTypeReferenceCollection BaseTypes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.CodeDom.CodeTypeReferenceCollection BaseTypes" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.CodeTypeDeclaration.BaseTypes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BaseTypes As CodeTypeReferenceCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::CodeDom::CodeTypeReferenceCollection ^ BaseTypes { System::CodeDom::CodeTypeReferenceCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.BaseTypes : System.CodeDom.CodeTypeReferenceCollection" Usage="System.CodeDom.CodeTypeDeclaration.BaseTypes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeTypeReferenceCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2bd8f-119">获取类型的基类型。</span><span class="sxs-lookup"><span data-stu-id="2bd8f-119">Gets the base types of the type.</span></span></summary>
        <value><span data-ttu-id="2bd8f-120">一个 <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> 对象，它指示类型的基类型。</span><span class="sxs-lookup"><span data-stu-id="2bd8f-120">A <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> object that indicates the base types of the type.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2bd8f-121">若要在 Visual Basic 中生成一个不是从基类型继承的类，但它实现了一个或多个接口，则必须将 <xref:System.Object> 作为集合中的第一项包括在内 <xref:System.CodeDom.CodeTypeDeclaration.BaseTypes%2A> 。</span><span class="sxs-lookup"><span data-stu-id="2bd8f-121">To generate a class in Visual Basic that does not inherit from a base type, but that does implement one or more interfaces, you must include <xref:System.Object> as the first item in the <xref:System.CodeDom.CodeTypeDeclaration.BaseTypes%2A> collection.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2bd8f-122">在 .NET Framework 版本2.0 中，如果要实现的 <xref:System.CodeDom.CodeTypeReference> <xref:System.Object> 接口已存在并且你按类型引用它，则不需要。</span><span class="sxs-lookup"><span data-stu-id="2bd8f-122">In the .NET Framework version 2.0 you do not need the <xref:System.CodeDom.CodeTypeReference> for <xref:System.Object> if the interface you are implementing already exists and you are referring to it by type.</span></span> <span data-ttu-id="2bd8f-123">例如，如果要实现 <xref:System.Collections.ICollection> 接口并将其添加到包含此语句的集合， `ctd.BaseTypes.Add(New CodeTypeReference(typeof(ICollection)))` 则不需要前面的 `ctd.BaseTypes.Add(New CodeTypeReference(GetType(Object)))` 语句。</span><span class="sxs-lookup"><span data-stu-id="2bd8f-123">For example, if you are implementing the <xref:System.Collections.ICollection> interface and add it to the collection with this statement, `ctd.BaseTypes.Add(New CodeTypeReference(typeof(ICollection)))`, you do not need the preceding `ctd.BaseTypes.Add(New CodeTypeReference(GetType(Object)))` statement.</span></span>  
  
 <span data-ttu-id="2bd8f-124">下面的代码演示如何将添加 <xref:System.CodeDom.CodeTypeReference> 到引用的集合 <xref:System.Object> 。</span><span class="sxs-lookup"><span data-stu-id="2bd8f-124">The following code illustrates the addition of a <xref:System.CodeDom.CodeTypeReference> to the collection that refers to <xref:System.Object>.</span></span>  
  
```vb  
Dim ctd As New CodeTypeDeclaration("Class1")  
ctd.IsClass = True  
ctd.BaseTypes.Add(New CodeTypeReference(GetType(Object)))  
ctd.BaseTypes.Add(New CodeTypeReference("Interface1"))  
```  
  
```csharp  
CodeTypeDeclaration ctd = new CodeTypeDeclaration("Class1");  
ctd.IsClass = true;  
ctd.BaseTypes.Add(new CodeTypeReference(typeof(Object)));  
ctd.BaseTypes.Add(new CodeTypeReference("Interface1"));  
```  
  
 <span data-ttu-id="2bd8f-125">前面的代码生成以下 Visual Basic 代码的等效项。</span><span class="sxs-lookup"><span data-stu-id="2bd8f-125">The preceding code generates the equivalent of the following Visual Basic code.</span></span>  
  
```vb  
Public Class Class1  
Implements Interface1  
```  
  
 <span data-ttu-id="2bd8f-126">但是，实际生成的 Visual Basic 代码如下所示。</span><span class="sxs-lookup"><span data-stu-id="2bd8f-126">However, the Visual Basic code actually generated is the following.</span></span>  
  
```vb  
Public Class Class1  
Inherits Object  
Implements Interface1  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.CodeDom.CodeTypeReferenceCollection" />
      </Docs>
    </Member>
    <Member MemberName="IsClass">
      <MemberSignature Language="C#" Value="public bool IsClass { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsClass" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.CodeTypeDeclaration.IsClass" />
      <MemberSignature Language="VB.NET" Value="Public Property IsClass As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsClass { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsClass : bool with get, set" Usage="System.CodeDom.CodeTypeDeclaration.IsClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2bd8f-127">获取或设置一个值，该值指示该类型是否是类或引用类型。</span><span class="sxs-lookup"><span data-stu-id="2bd8f-127">Gets or sets a value indicating whether the type is a class or reference type.</span></span></summary>
        <value><span data-ttu-id="2bd8f-128">如果该类型是类或引用类型，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="2bd8f-128"><see langword="true" /> if the type is a class or reference type; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEnum">
      <MemberSignature Language="C#" Value="public bool IsEnum { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEnum" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.CodeTypeDeclaration.IsEnum" />
      <MemberSignature Language="VB.NET" Value="Public Property IsEnum As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsEnum { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsEnum : bool with get, set" Usage="System.CodeDom.CodeTypeDeclaration.IsEnum" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2bd8f-129">获取或设置一个值，该值指示该类型是否是枚举。</span><span class="sxs-lookup"><span data-stu-id="2bd8f-129">Gets or sets a value indicating whether the type is an enumeration.</span></span></summary>
        <value><span data-ttu-id="2bd8f-130">如果该类型是枚举，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="2bd8f-130"><see langword="true" /> if the type is an enumeration; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsInterface">
      <MemberSignature Language="C#" Value="public bool IsInterface { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsInterface" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.CodeTypeDeclaration.IsInterface" />
      <MemberSignature Language="VB.NET" Value="Public Property IsInterface As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsInterface { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsInterface : bool with get, set" Usage="System.CodeDom.CodeTypeDeclaration.IsInterface" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2bd8f-131">获取或设置一个值，该值指示该类型是否是接口。</span><span class="sxs-lookup"><span data-stu-id="2bd8f-131">Gets or sets a value indicating whether the type is an interface.</span></span></summary>
        <value><span data-ttu-id="2bd8f-132">如果该类型是接口，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="2bd8f-132"><see langword="true" /> if the type is an interface; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPartial">
      <MemberSignature Language="C#" Value="public bool IsPartial { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPartial" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.CodeTypeDeclaration.IsPartial" />
      <MemberSignature Language="VB.NET" Value="Public Property IsPartial As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsPartial { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsPartial : bool with get, set" Usage="System.CodeDom.CodeTypeDeclaration.IsPartial" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2bd8f-133">获取或设置一个值，该值指示该类型声明是完整的类型声明还是分部类型声明。</span><span class="sxs-lookup"><span data-stu-id="2bd8f-133">Gets or sets a value indicating whether the type declaration is complete or partial.</span></span></summary>
        <value><span data-ttu-id="2bd8f-134">如果该类或结构声明是实现的分部表示形式，则为 <see langword="true" />；如果该声明是该类或结构的完整实现，则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="2bd8f-134"><see langword="true" /> if the class or structure declaration is a partial representation of the implementation; <see langword="false" /> if the declaration is a complete implementation of the class or structure.</span></span> <span data-ttu-id="2bd8f-135">默认值为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="2bd8f-135">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2bd8f-136">您可以在一个完整的声明中生成一个类或结构实现，也可以跨多个声明来实现实现。</span><span class="sxs-lookup"><span data-stu-id="2bd8f-136">You can build a class or structure implementation in one complete declaration, or spread the implementation across multiple declarations.</span></span> <span data-ttu-id="2bd8f-137">实现通常在一个完整的类型声明中提供。</span><span class="sxs-lookup"><span data-stu-id="2bd8f-137">Implementations are commonly supplied in one complete type declaration.</span></span> <span data-ttu-id="2bd8f-138">在这种情况下，将 type 声明 <xref:System.CodeDom.CodeTypeDeclaration.IsPartial%2A> 属性设置为 `false` ，这指示类型声明表示类或结构实现的所有详细信息。</span><span class="sxs-lookup"><span data-stu-id="2bd8f-138">In this case, set the type declaration <xref:System.CodeDom.CodeTypeDeclaration.IsPartial%2A> property to `false`, which indicates that the type declaration represents all details for the class or structure implementation.</span></span>  
  
 <span data-ttu-id="2bd8f-139">利用分部类型声明，可以更轻松地在应用程序的不同模块中生成类或结构实现的不同部分。</span><span class="sxs-lookup"><span data-stu-id="2bd8f-139">A partial type declaration makes it easier to build different portions of a class or structure implementation in different modules of your application.</span></span> <span data-ttu-id="2bd8f-140">分部类型声明可以存储在一个源文件中，也可以分布在多个源文件中，这些源文件最终编译在一起以形成合并类型实现。</span><span class="sxs-lookup"><span data-stu-id="2bd8f-140">The partial type declarations can be stored in one source file, or spread across multiple source files that are eventually compiled together to form the combined type implementation.</span></span>  
  
 <span data-ttu-id="2bd8f-141">C # 语言通过关键字支持类和结构的分部类型声明 `partial` 。</span><span class="sxs-lookup"><span data-stu-id="2bd8f-141">The C# language supports partial type declarations of classes and structures through the `partial` keyword.</span></span> <span data-ttu-id="2bd8f-142">Visual Basic 支持带有关键字的类和结构的分部类型声明 `Partial` 。</span><span class="sxs-lookup"><span data-stu-id="2bd8f-142">Visual Basic supports partial type declarations of classes and structures with the `Partial` keyword.</span></span> <span data-ttu-id="2bd8f-143">并非所有代码生成器都支持分部类型声明，因此，您应通过使用标志调用方法来测试此支持 <xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A> <xref:System.CodeDom.Compiler.GeneratorSupport.PartialTypes> 。</span><span class="sxs-lookup"><span data-stu-id="2bd8f-143">Not all code generators support partial type declarations, so you should test for this support by calling the <xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A> method with the flag <xref:System.CodeDom.Compiler.GeneratorSupport.PartialTypes>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2bd8f-144">类和结构支持分部类型声明。</span><span class="sxs-lookup"><span data-stu-id="2bd8f-144">Partial type declarations are supported for classes and structures.</span></span> <span data-ttu-id="2bd8f-145">如果为枚举或接口指定了分部类型声明，则生成的代码会生成编译器错误。</span><span class="sxs-lookup"><span data-stu-id="2bd8f-145">If you specify a partial type declaration for an enumeration or interface, the generated code produces compiler errors.</span></span>  
  
 <span data-ttu-id="2bd8f-146">当跨多个声明提供类或结构实现时，请将 <xref:System.CodeDom.CodeTypeDeclaration.IsPartial%2A> `true` 初始声明和所有补充声明的属性设置为。</span><span class="sxs-lookup"><span data-stu-id="2bd8f-146">When supplying a class or structure implementation across multiple declarations, set the <xref:System.CodeDom.CodeTypeDeclaration.IsPartial%2A> property to `true` for the initial declaration and all supplemental declarations.</span></span> <span data-ttu-id="2bd8f-147">初始声明必须完全指定类型签名，包括访问修饰符、继承的类型和实现的接口。</span><span class="sxs-lookup"><span data-stu-id="2bd8f-147">The initial declaration must fully specify the type signature, including access modifiers, inherited types, and implemented interfaces.</span></span> <span data-ttu-id="2bd8f-148">补充声明不需要重新指定类型签名。</span><span class="sxs-lookup"><span data-stu-id="2bd8f-148">The supplementary declarations do not need to re-specify the type signature.</span></span> <span data-ttu-id="2bd8f-149">如果在补充声明中重新定义类型签名，则通常会产生编译器错误。</span><span class="sxs-lookup"><span data-stu-id="2bd8f-149">A compiler error typically results if you redefine the type signature in a supplementary declaration.</span></span>  
  
 <span data-ttu-id="2bd8f-150">Visual Studio 2005 使用分部类型将用户生成的代码与设计器代码分开。</span><span class="sxs-lookup"><span data-stu-id="2bd8f-150">Visual Studio 2005 uses partial types to separate user-generated code from designer code.</span></span> <span data-ttu-id="2bd8f-151">在 Visual Basic Windows 应用程序项目中，用户代码放置在未由关键字限定的分部类中 `Partial` ; 设计器提供的代码出现在包含关键字的分部类中 `Partial` 。</span><span class="sxs-lookup"><span data-stu-id="2bd8f-151">In Visual Basic Windows Application projects, the user code is placed in a partial class that is not qualified by the `Partial` keyword; the designer-provided code appears in the partial class that has the `Partial` keyword.</span></span> <span data-ttu-id="2bd8f-152">在 c # 中，用户代码和设计器代码都出现在由关键字标识的分部类中 `partial` 。</span><span class="sxs-lookup"><span data-stu-id="2bd8f-152">In C#, both the user code and designer code appear in partial classes identified by the `partial` keyword.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2bd8f-153">此示例演示如何使用在 <xref:System.CodeDom.CodeTypeDeclaration> 多个声明中提供类实现。</span><span class="sxs-lookup"><span data-stu-id="2bd8f-153">This example demonstrates using a <xref:System.CodeDom.CodeTypeDeclaration> to supply a class implementation across multiple declarations.</span></span> <span data-ttu-id="2bd8f-154">该示例生成了初始类声明语句，并将 <xref:System.CodeDom.CodeTypeDeclaration.IsPartial%2A> 属性设置为 `true` 。</span><span class="sxs-lookup"><span data-stu-id="2bd8f-154">The example builds the initial class declaration statement and sets the <xref:System.CodeDom.CodeTypeDeclaration.IsPartial%2A> property to `true`.</span></span>  
  
 [!code-cpp[CodeDomPartialTypeExample#3](~/samples/snippets/cpp/VS_Snippets_CLR/CodeDomPartialTypeExample/CPP/source.cpp#3)]
 [!code-csharp[CodeDomPartialTypeExample#3](~/samples/snippets/csharp/VS_Snippets_CLR/CodeDomPartialTypeExample/CS/source.cs#3)]
 [!code-vb[CodeDomPartialTypeExample#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeDomPartialTypeExample/VB/source.vb#3)]  
  
 <span data-ttu-id="2bd8f-155">示例中的其他方法扩展了类实现。</span><span class="sxs-lookup"><span data-stu-id="2bd8f-155">A different method in the example extends the class implementation.</span></span> <span data-ttu-id="2bd8f-156">此方法为现有类生成新的类型声明语句，并将 <xref:System.CodeDom.CodeTypeDeclaration.IsPartial%2A> 属性设置为 `true` 。</span><span class="sxs-lookup"><span data-stu-id="2bd8f-156">This method builds a new type declaration statement for the existing class and sets the <xref:System.CodeDom.CodeTypeDeclaration.IsPartial%2A> property to `true`.</span></span> <span data-ttu-id="2bd8f-157">编译器将两个分部类型声明组合在一起，以实现完整的类实现。</span><span class="sxs-lookup"><span data-stu-id="2bd8f-157">The compiler combines the two partial type declarations together for the complete class implementation.</span></span>  
  
 [!code-cpp[CodeDomPartialTypeExample#7](~/samples/snippets/cpp/VS_Snippets_CLR/CodeDomPartialTypeExample/CPP/source.cpp#7)]
 [!code-csharp[CodeDomPartialTypeExample#7](~/samples/snippets/csharp/VS_Snippets_CLR/CodeDomPartialTypeExample/CS/source.cs#7)]
 [!code-vb[CodeDomPartialTypeExample#7](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeDomPartialTypeExample/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.CodeDom.Compiler.GeneratorSupport.PartialTypes" />
      </Docs>
    </Member>
    <Member MemberName="IsStruct">
      <MemberSignature Language="C#" Value="public bool IsStruct { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStruct" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.CodeTypeDeclaration.IsStruct" />
      <MemberSignature Language="VB.NET" Value="Public Property IsStruct As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStruct { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsStruct : bool with get, set" Usage="System.CodeDom.CodeTypeDeclaration.IsStruct" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2bd8f-158">获取或设置一个值，该值指示该类型是不是值类型（结构）。</span><span class="sxs-lookup"><span data-stu-id="2bd8f-158">Gets or sets a value indicating whether the type is a value type (struct).</span></span></summary>
        <value><span data-ttu-id="2bd8f-159">如果该类型是值类型，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="2bd8f-159"><see langword="true" /> if the type is a value type; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Members">
      <MemberSignature Language="C#" Value="public System.CodeDom.CodeTypeMemberCollection Members { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.CodeDom.CodeTypeMemberCollection Members" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.CodeTypeDeclaration.Members" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Members As CodeTypeMemberCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::CodeDom::CodeTypeMemberCollection ^ Members { System::CodeDom::CodeTypeMemberCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Members : System.CodeDom.CodeTypeMemberCollection" Usage="System.CodeDom.CodeTypeDeclaration.Members" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeTypeMemberCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2bd8f-160">获取所表示的类型的类成员的集合。</span><span class="sxs-lookup"><span data-stu-id="2bd8f-160">Gets the collection of class members for the represented type.</span></span></summary>
        <value><span data-ttu-id="2bd8f-161">一个指示类成员的 <see cref="T:System.CodeDom.CodeTypeMemberCollection" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="2bd8f-161">A <see cref="T:System.CodeDom.CodeTypeMemberCollection" /> object that indicates the class members.</span></span></value>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeTypeMemberCollection" />
      </Docs>
    </Member>
    <Member MemberName="PopulateBaseTypes">
      <MemberSignature Language="C#" Value="public event EventHandler PopulateBaseTypes;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler PopulateBaseTypes" />
      <MemberSignature Language="DocId" Value="E:System.CodeDom.CodeTypeDeclaration.PopulateBaseTypes" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PopulateBaseTypes As EventHandler " FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ PopulateBaseTypes;" />
      <MemberSignature Language="F#" Value="member this.PopulateBaseTypes : EventHandler " Usage="member this.PopulateBaseTypes : System.EventHandler " />
      <MemberSignature Language="VB.NET" Value="Public Event PopulateBaseTypes As EventHandler " FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2bd8f-162">当首次访问 <see cref="P:System.CodeDom.CodeTypeDeclaration.BaseTypes" /> 集合时发生。</span><span class="sxs-lookup"><span data-stu-id="2bd8f-162">Occurs when the <see cref="P:System.CodeDom.CodeTypeDeclaration.BaseTypes" /> collection is accessed for the first time.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PopulateMembers">
      <MemberSignature Language="C#" Value="public event EventHandler PopulateMembers;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler PopulateMembers" />
      <MemberSignature Language="DocId" Value="E:System.CodeDom.CodeTypeDeclaration.PopulateMembers" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PopulateMembers As EventHandler " FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ PopulateMembers;" />
      <MemberSignature Language="F#" Value="member this.PopulateMembers : EventHandler " Usage="member this.PopulateMembers : System.EventHandler " />
      <MemberSignature Language="VB.NET" Value="Public Event PopulateMembers As EventHandler " FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2bd8f-163">当首次访问 <see cref="P:System.CodeDom.CodeTypeDeclaration.Members" /> 集合时发生。</span><span class="sxs-lookup"><span data-stu-id="2bd8f-163">Occurs when the <see cref="P:System.CodeDom.CodeTypeDeclaration.Members" /> collection is accessed for the first time.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeAttributes">
      <MemberSignature Language="C#" Value="public System.Reflection.TypeAttributes TypeAttributes { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.TypeAttributes TypeAttributes" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.CodeTypeDeclaration.TypeAttributes" />
      <MemberSignature Language="VB.NET" Value="Public Property TypeAttributes As TypeAttributes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Reflection::TypeAttributes TypeAttributes { System::Reflection::TypeAttributes get(); void set(System::Reflection::TypeAttributes value); };" />
      <MemberSignature Language="F#" Value="member this.TypeAttributes : System.Reflection.TypeAttributes with get, set" Usage="System.CodeDom.CodeTypeDeclaration.TypeAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.TypeAttributes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2bd8f-164">获取或设置类型的特性。</span><span class="sxs-lookup"><span data-stu-id="2bd8f-164">Gets or sets the attributes of the type.</span></span></summary>
        <value><span data-ttu-id="2bd8f-165">一个 <see cref="T:System.Reflection.TypeAttributes" /> 对象，它指示该类型的特性。</span><span class="sxs-lookup"><span data-stu-id="2bd8f-165">A <see cref="T:System.Reflection.TypeAttributes" /> object that indicates the attributes of the type.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2bd8f-166"><xref:System.Reflection.TypeAttributes>属性包含在 <xref:System.Reflection> 运行时调查类型时所使用的相同类型的值。</span><span class="sxs-lookup"><span data-stu-id="2bd8f-166">The <xref:System.Reflection.TypeAttributes> property contains the same type of values used by <xref:System.Reflection> when investigating a type at run time.</span></span> <span data-ttu-id="2bd8f-167">其中许多标志并不对应于某些语言的类型声明语法。</span><span class="sxs-lookup"><span data-stu-id="2bd8f-167">Many of these flags do not correspond to the type declaration syntax for some languages.</span></span> <span data-ttu-id="2bd8f-168">因此，只有以下标志对 <xref:System.CodeDom.CodeTypeDeclaration> ： <xref:System.Reflection.TypeAttributes.Class> 、 <xref:System.Reflection.TypeAttributes.Interface> 、 <xref:System.Reflection.TypeAttributes.Abstract> 、 <xref:System.Reflection.TypeAttributes.Sealed> 、 <xref:System.Reflection.TypeAttributes.Public> 、、 <xref:System.Reflection.TypeAttributes.NotPublic> <xref:System.Reflection.TypeAttributes.NestedPublic> 和 <xref:System.Reflection.TypeAttributes.NestedPrivate> 很重要。</span><span class="sxs-lookup"><span data-stu-id="2bd8f-168">As a result, only the following flags are significant to <xref:System.CodeDom.CodeTypeDeclaration> : <xref:System.Reflection.TypeAttributes.Class>, <xref:System.Reflection.TypeAttributes.Interface>, <xref:System.Reflection.TypeAttributes.Abstract>, <xref:System.Reflection.TypeAttributes.Sealed>, <xref:System.Reflection.TypeAttributes.Public>, <xref:System.Reflection.TypeAttributes.NotPublic>, <xref:System.Reflection.TypeAttributes.NestedPublic>, and <xref:System.Reflection.TypeAttributes.NestedPrivate>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2bd8f-169">某些标志（如）的 <xref:System.Reflection.TypeAttributes.Abstract> 属性中的标志含义重叠 <xref:System.CodeDom.CodeTypeMember.Attributes%2A> <xref:System.CodeDom.CodeTypeDeclaration> ，后者继承自 <xref:System.CodeDom.CodeTypeMember> 。</span><span class="sxs-lookup"><span data-stu-id="2bd8f-169">Some of the flags such as <xref:System.Reflection.TypeAttributes.Abstract> overlap with the meaning of flags in the <xref:System.CodeDom.CodeTypeMember.Attributes%2A> property of <xref:System.CodeDom.CodeTypeDeclaration> that is inherited from <xref:System.CodeDom.CodeTypeMember>.</span></span> <span data-ttu-id="2bd8f-170"><xref:System.CodeDom.CodeTypeMember.Attributes%2A>属性是继承自的类的副作用， <xref:System.CodeDom.CodeTypeDeclaration> <xref:System.CodeDom.CodeTypeMember> 因此可以嵌套类。</span><span class="sxs-lookup"><span data-stu-id="2bd8f-170">The <xref:System.CodeDom.CodeTypeMember.Attributes%2A> property is a side effect of the <xref:System.CodeDom.CodeTypeDeclaration> class inheriting from <xref:System.CodeDom.CodeTypeMember> so that classes can be nested.</span></span> <span data-ttu-id="2bd8f-171">应使用属性中的标志， <xref:System.CodeDom.CodeTypeDeclaration.TypeAttributes%2A> 而不是属性中的标志 <xref:System.CodeDom.CodeTypeMember.Attributes%2A> 。</span><span class="sxs-lookup"><span data-stu-id="2bd8f-171">The flags in the <xref:System.CodeDom.CodeTypeDeclaration.TypeAttributes%2A> property should be used instead of the flags in the <xref:System.CodeDom.CodeTypeMember.Attributes%2A> property.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2bd8f-172">用于设置可见性标志 (标志（包含单词或) ）的模式 `Public` `Nested` 是使用屏蔽所有可见性标志 <xref:System.Reflection.TypeAttributes.VisibilityMask> ，然后设置所需的可见性标志。</span><span class="sxs-lookup"><span data-stu-id="2bd8f-172">The pattern for setting the visibility flags (flags containing the words `Public` or `Nested`) is to mask out all visibility flags using the <xref:System.Reflection.TypeAttributes.VisibilityMask> and then set the desired visibility flag.</span></span> <span data-ttu-id="2bd8f-173">例如，c # 代码语句标识 <xref:System.CodeDom.CodeTypeDeclaration> `cd` 作为内部类) 的 (`cd.TypeAttributes = (cd.TypeAttributes & ~TypeAttributes.VisibilityMask) | TypeAttributes.NotPublic;` 。</span><span class="sxs-lookup"><span data-stu-id="2bd8f-173">For example, the C# code statement to identify the <xref:System.CodeDom.CodeTypeDeclaration> (named `cd`) as an internal class is `cd.TypeAttributes = (cd.TypeAttributes & ~TypeAttributes.VisibilityMask) | TypeAttributes.NotPublic;`.</span></span>  <span data-ttu-id="2bd8f-174">在 Visual Basic 中设置相同值的代码为 `cd.TypeAttributes = (cd.TypeAttributes And (TypeAttributes.VisibilityMask Xor -1)) Or TypeAttributes.NotPublic` 。</span><span class="sxs-lookup"><span data-stu-id="2bd8f-174">The code to set the same value in Visual Basic is `cd.TypeAttributes = (cd.TypeAttributes And (TypeAttributes.VisibilityMask Xor -1)) Or TypeAttributes.NotPublic`.</span></span> <span data-ttu-id="2bd8f-175">将 <xref:System.CodeDom.CodeTypeDeclaration.TypeAttributes%2A> 属性直接设置为可见性标志 (`cd.TypeAttributes = TypeAttributes.NotPublic;`) 会清除可能设置的所有其他标志。</span><span class="sxs-lookup"><span data-stu-id="2bd8f-175">Setting the <xref:System.CodeDom.CodeTypeDeclaration.TypeAttributes%2A> property directly to a visibility flag (`cd.TypeAttributes = TypeAttributes.NotPublic;`) erases all other flags that might be set.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
      </Docs>
    </Member>
    <Member MemberName="TypeParameters">
      <MemberSignature Language="C#" Value="public System.CodeDom.CodeTypeParameterCollection TypeParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.CodeDom.CodeTypeParameterCollection TypeParameters" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.CodeTypeDeclaration.TypeParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TypeParameters As CodeTypeParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::CodeDom::CodeTypeParameterCollection ^ TypeParameters { System::CodeDom::CodeTypeParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TypeParameters : System.CodeDom.CodeTypeParameterCollection" Usage="System.CodeDom.CodeTypeDeclaration.TypeParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Runtime.InteropServices.ComVisible(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.ComVisible(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeTypeParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2bd8f-176">获取类型声明的类型参数。</span><span class="sxs-lookup"><span data-stu-id="2bd8f-176">Gets the type parameters for the type declaration.</span></span></summary>
        <value><span data-ttu-id="2bd8f-177"><see cref="T:System.CodeDom.CodeTypeParameterCollection" /> 包含类型声明的类型参数。</span><span class="sxs-lookup"><span data-stu-id="2bd8f-177">A <see cref="T:System.CodeDom.CodeTypeParameterCollection" /> that contains the type parameters for the type declaration.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2bd8f-178">泛型类型声明包含一个或多个未指定的类型（称为类型参数）。</span><span class="sxs-lookup"><span data-stu-id="2bd8f-178">A generic type declaration contains one or more unspecified types known as type parameters.</span></span> <span data-ttu-id="2bd8f-179">类型参数名称代表泛型声明主体中的类型。</span><span class="sxs-lookup"><span data-stu-id="2bd8f-179">A type parameter name stands for the type within the body of the generic declaration.</span></span> <span data-ttu-id="2bd8f-180">例如，类的泛型声明 <xref:System.Collections.Generic.List%601> 包含类型参数 `T` 。</span><span class="sxs-lookup"><span data-stu-id="2bd8f-180">For example, the generic declaration for the <xref:System.Collections.Generic.List%601> class contains the type parameter `T`.</span></span>  
  
 <span data-ttu-id="2bd8f-181">有关泛型的详细信息，请参阅 [.NET Framework 类库中的泛型](/dotnet/csharp/programming-guide/generics/generics-in-the-net-framework-class-library)。</span><span class="sxs-lookup"><span data-stu-id="2bd8f-181">For more information on generics, see [Generics in the .NET Framework Class Library](/dotnet/csharp/programming-guide/generics/generics-in-the-net-framework-class-library).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.CodeDom.CodeTypeParameterCollection" />
        <altmember cref="T:System.CodeDom.CodeTypeParameter" />
      </Docs>
    </Member>
  </Members>
</Type>
