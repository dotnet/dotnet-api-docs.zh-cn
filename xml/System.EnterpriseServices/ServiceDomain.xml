<Type Name="ServiceDomain" FullName="System.EnterpriseServices.ServiceDomain">
  <Metadata><Meta Name="ms.openlocfilehash" Value="b263553b45d735a76d6f5285dec39614eaf4fd34" /><Meta Name="ms.sourcegitcommit" Value="b53d35b4a410c949742abd4c6a989d1af5357bca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="86816364" /></Metadata><TypeSignature Language="C#" Value="public sealed class ServiceDomain" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ServiceDomain extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.EnterpriseServices.ServiceDomain" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ServiceDomain" />
  <TypeSignature Language="C++ CLI" Value="public ref class ServiceDomain sealed" />
  <TypeSignature Language="F#" Value="type ServiceDomain = class" />
  <AssemblyInfo>
    <AssemblyName>System.EnterpriseServices</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[System.Runtime.InteropServices.ComVisible(false)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.ComVisible(false)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>允许由 <see cref="M:System.EnterpriseServices.ServiceDomain.Enter(System.EnterpriseServices.ServiceConfig)" /> 和 <see cref="M:System.EnterpriseServices.ServiceDomain.Leave" /> 标识的代码段在其自身的上下文中运行，其行为如同在此上下文中创建的对象上调用的方法。 此类不能被继承。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.EnterpriseServices.ServiceDomain.Enter%2A>和 <xref:System.EnterpriseServices.ServiceDomain.Leave%2A> 方法成对使用来包围代码，然后即可使用 com + 服务。 在对的调用 <xref:System.EnterpriseServices.ServiceDomain.Enter%2A> 和 <xref:System.EnterpriseServices.ServiceDomain.Leave%2A> 在其自身的上下文中运行的代码，并表现为在上下文中创建的对象上调用的方法。 <xref:System.EnterpriseServices.ServiceDomain.Enter%2A>和 <xref:System.EnterpriseServices.ServiceDomain.Leave%2A> 对可以嵌套。 用户需要确保对调用进行平衡，以便每个调用都 <xref:System.EnterpriseServices.ServiceDomain.Leave%2A> 与之前对的调用匹配 <xref:System.EnterpriseServices.ServiceDomain.Enter%2A> 。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Enter">
      <MemberSignature Language="C#" Value="public static void Enter (System.EnterpriseServices.ServiceConfig cfg);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Enter(class System.EnterpriseServices.ServiceConfig cfg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.ServiceDomain.Enter(System.EnterpriseServices.ServiceConfig)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Enter (cfg As ServiceConfig)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Enter(System::EnterpriseServices::ServiceConfig ^ cfg);" />
      <MemberSignature Language="F#" Value="static member Enter : System.EnterpriseServices.ServiceConfig -&gt; unit" Usage="System.EnterpriseServices.ServiceDomain.Enter cfg" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cfg" Type="System.EnterpriseServices.ServiceConfig" />
      </Parameters>
      <Docs>
        <param name="cfg">一个 <see cref="T:System.EnterpriseServices.ServiceConfig" />，它包含要在包含代码中使用的服务的配置信息。</param>
        <summary>创建由 <see cref="T:System.EnterpriseServices.ServiceConfig" /> 对象指定的上下文，并将其推至上下文堆栈，使之成为当前上下文。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.EnterpriseServices.ServiceDomain.Enter%2A> 首先，创建一个按 <xref:System.EnterpriseServices.ServiceConfig> 作为参数传递的对象指定的上下文 `cfg` 。 然后，会触发客户端和服务器端的策略，就像调用了方法一样。 然后，新上下文将被推送到上下文堆栈上并成为当前上下文。 由于其设计效率很高且不涉及线程封送处理，因此使用 <xref:System.EnterpriseServices.ServiceDomain.Enter%2A> 和 <xref:System.EnterpriseServices.ServiceDomain.Leave%2A> 涉及与等效方法调用相比大大降低了开销。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.PlatformNotSupportedException">当前平台不支持 <see cref="T:System.EnterpriseServices.ServiceConfig" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="Leave">
      <MemberSignature Language="C#" Value="public static System.EnterpriseServices.TransactionStatus Leave ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.EnterpriseServices.TransactionStatus Leave() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.ServiceDomain.Leave" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Leave () As TransactionStatus" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::EnterpriseServices::TransactionStatus Leave();" />
      <MemberSignature Language="F#" Value="static member Leave : unit -&gt; System.EnterpriseServices.TransactionStatus" Usage="System.EnterpriseServices.ServiceDomain.Leave " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EnterpriseServices.TransactionStatus</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>触发服务器端的策略，随后触发客户端的策略，如同一个方法调用正在返回。 然后，当前上下文被弹出上下文堆栈，调用 <see cref="M:System.EnterpriseServices.ServiceDomain.Enter(System.EnterpriseServices.ServiceConfig)" /> 时正在运行的上下文成为当前的上下文。</summary>
        <returns><see cref="T:System.EnterpriseServices.TransactionStatus" /> 值之一。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.PlatformNotSupportedException">当前平台不支持 <see cref="T:System.EnterpriseServices.ServiceConfig" />。</exception>
      </Docs>
    </Member>
  </Members>
</Type>
