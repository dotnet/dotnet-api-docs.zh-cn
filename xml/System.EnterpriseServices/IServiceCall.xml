<Type Name="IServiceCall" FullName="System.EnterpriseServices.IServiceCall">
  <Metadata><Meta Name="ms.openlocfilehash" Value="c35a13777014aec3c78c73564d9a3ec176819ac5" /><Meta Name="ms.sourcegitcommit" Value="b53d35b4a410c949742abd4c6a989d1af5357bca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="86817534" /></Metadata><TypeSignature Language="C#" Value="public interface IServiceCall" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IServiceCall" />
  <TypeSignature Language="DocId" Value="T:System.EnterpriseServices.IServiceCall" />
  <TypeSignature Language="VB.NET" Value="Public Interface IServiceCall" />
  <TypeSignature Language="C++ CLI" Value="public interface class IServiceCall" />
  <TypeSignature Language="F#" Value="type IServiceCall = interface" />
  <AssemblyInfo>
    <AssemblyName>System.EnterpriseServices</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[System.Runtime.InteropServices.Guid("BD3E2E12-42DD-40f4-A09A-95A50C58304B")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.Guid("BD3E2E12-42DD-40f4-A09A-95A50C58304B")&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[System.Runtime.InteropServices.InterfaceType(System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.InterfaceType(System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>实现通过由 <see cref="T:System.EnterpriseServices.Activity" /> 创建的活动提交的批处理工作。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用 <xref:System.EnterpriseServices.IServiceCall> 可以执行使用 COM + 服务的批处理工作，而无需专门创建组件来使用这些服务。 脚本环境（如 Internet Information Services (IIS) 和 ASP.NET）可以使用此接口来利用 COM + 服务，无需创建 COM + 组件。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="OnCall">
      <MemberSignature Language="C#" Value="public void OnCall ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnCall() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.IServiceCall.OnCall" />
      <MemberSignature Language="VB.NET" Value="Public Sub OnCall ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void OnCall();" />
      <MemberSignature Language="F#" Value="abstract member OnCall : unit -&gt; unit" Usage="iServiceCall.OnCall " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>开始执行在此方法中实现的批处理工作。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在此方法中运行的批处理工作在通过调用创建的活动的上下文和线程单元中运行 <xref:System.EnterpriseServices.Activity> 。 此方法中的批处理工作通过对或的调用来运行 <xref:System.EnterpriseServices.Activity.SynchronousCall%2A?displayProperty=nameWithType> <xref:System.EnterpriseServices.Activity.AsynchronousCall%2A?displayProperty=nameWithType> 。  
  
> [!CAUTION]
>  如果创建的活动对象不是使用同步上下文创建的，则必须确保此方法是线程安全的 <xref:System.EnterpriseServices.Activity> ，因为在这种情况下，很多调用 <xref:System.EnterpriseServices.IServiceCall.OnCall%2A> 都可以同时运行。  
  
 若要从系统中获得最佳性能，应将创建的活动的上下文配置 <xref:System.EnterpriseServices.Activity> 与方法所执行的批处理工作进行匹配 <xref:System.EnterpriseServices.IServiceCall.OnCall%2A> 。 例如，如果方法中的批处理工作 <xref:System.EnterpriseServices.IServiceCall.OnCall%2A> 使用可入池对象，则应将创建的活动 <xref:System.EnterpriseServices.Activity> 配置为使用多线程单元 (MTA) 。  
  
 有关可入池对象的信息，请参阅 MSDN 中的平台 SDK 中的 "可入池对象的要求" 主题。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
