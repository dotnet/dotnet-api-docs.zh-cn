<Type Name="ServicedComponent" FullName="System.EnterpriseServices.ServicedComponent">
  <Metadata><Meta Name="ms.openlocfilehash" Value="b66b33eb84292cc93d2d3cda3586d3c55c2a0de3" /><Meta Name="ms.sourcegitcommit" Value="b53d35b4a410c949742abd4c6a989d1af5357bca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="86816286" /></Metadata><TypeSignature Language="C#" Value="public abstract class ServicedComponent : ContextBoundObject, IDisposable, System.EnterpriseServices.IRemoteDispatch, System.EnterpriseServices.IServicedComponentInfo" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract serializable ServicedComponent extends System.ContextBoundObject implements class System.EnterpriseServices.IRemoteDispatch, class System.EnterpriseServices.IServicedComponentInfo, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.EnterpriseServices.ServicedComponent" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ServicedComponent&#xA;Inherits ContextBoundObject&#xA;Implements IDisposable, IRemoteDispatch, IServicedComponentInfo" />
  <TypeSignature Language="C++ CLI" Value="public ref class ServicedComponent abstract : ContextBoundObject, IDisposable, System::EnterpriseServices::IRemoteDispatch, System::EnterpriseServices::IServicedComponentInfo" />
  <TypeSignature Language="F#" Value="type ServicedComponent = class&#xA;    inherit ContextBoundObject&#xA;    interface IRemoteDispatch&#xA;    interface IDisposable&#xA;    interface IServicedComponentInfo" />
  <AssemblyInfo>
    <AssemblyName>System.EnterpriseServices</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ContextBoundObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.EnterpriseServices.IRemoteDispatch</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.EnterpriseServices.IServicedComponentInfo</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[System.Serializable]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Serializable&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="cf322-101">表示使用 COM+ 服务的所有类的基类。</span><span class="sxs-lookup"><span data-stu-id="cf322-101">Represents the base class of all classes using COM+ services.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cf322-102">在某些情况下，从 <xref:System.EnterpriseServices.ServicedComponent> COM + 应用程序中运行的派生的类可能会停止响应。</span><span class="sxs-lookup"><span data-stu-id="cf322-102">Under certain conditions, a class that is derived from <xref:System.EnterpriseServices.ServicedComponent> that runs in a COM+ application may stop responding.</span></span> <span data-ttu-id="cf322-103">此问题是由活动死锁引起的。</span><span class="sxs-lookup"><span data-stu-id="cf322-103">This problem is caused by an Activity deadlock.</span></span> <span data-ttu-id="cf322-104">由于组件引用的异步清理，多线程应用程序上的活动会死锁。</span><span class="sxs-lookup"><span data-stu-id="cf322-104">Activities can deadlock on multithreaded applications because of an asynchronous cleanup of component references.</span></span> <span data-ttu-id="cf322-105">若要解决此问题，请 <xref:System.EnterpriseServices.ServicedComponent.Dispose%2A> 在使用派生自的对象完成工作时调用方法 <xref:System.EnterpriseServices.ServicedComponent> 。</span><span class="sxs-lookup"><span data-stu-id="cf322-105">To work around this problem, call the <xref:System.EnterpriseServices.ServicedComponent.Dispose%2A> method when you complete work with objects derived from <xref:System.EnterpriseServices.ServicedComponent>.</span></span>
  
> [!NOTE]
>  <span data-ttu-id="cf322-106">客户端代码必须调用 `Dispose` 服务组件，以确保正确操作。</span><span class="sxs-lookup"><span data-stu-id="cf322-106">Client code must call `Dispose` on serviced components to ensure proper operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cf322-107">下面的代码示例演示如何将类公开为已配置的 COM 组件。</span><span class="sxs-lookup"><span data-stu-id="cf322-107">The following code example demonstrates how to expose a class as a configured COM component.</span></span>  
  
 [!code-cpp[EnterpriseServices_Basic#1](~/samples/snippets/cpp/VS_Snippets_Remoting/EnterpriseServices_Basic/CPP/calculator.cpp#1)]
 [!code-csharp[EnterpriseServices_Basic#1](~/samples/snippets/csharp/VS_Snippets_Remoting/EnterpriseServices_Basic/CS/calculator.cs#1)]  
  
 <span data-ttu-id="cf322-108">若要将此类部署为已配置的 COM 组件，则必须生成一个强密钥，将该类编译为库并注册库。</span><span class="sxs-lookup"><span data-stu-id="cf322-108">To deploy this class as a configured COM component, you must generate a strong key, compile the class as a library, and register the library.</span></span> <span data-ttu-id="cf322-109">这三个步骤是通过以下三个命令来完成的。</span><span class="sxs-lookup"><span data-stu-id="cf322-109">These three steps are accomplished by the following three commands.</span></span>  
  
```  
sn -k Calculator.snk  
csc /t:library Calculator.cs  
regsvcs Calculator.dll  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ServicedComponent ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.ServicedComponent.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ServicedComponent();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="cf322-110">初始化 <see cref="T:System.EnterpriseServices.ServicedComponent" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="cf322-110">Initializes a new instance of the <see cref="T:System.EnterpriseServices.ServicedComponent" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cf322-111">此构造函数由派生类构造函数调用以初始化此类型中的状态。</span><span class="sxs-lookup"><span data-stu-id="cf322-111">This constructor is called by derived class constructors to initialize state in this type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Activate">
      <MemberSignature Language="C#" Value="protected internal virtual void Activate ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void Activate() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.ServicedComponent.Activate" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub Activate ()" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void Activate();" />
      <MemberSignature Language="F#" Value="abstract member Activate : unit -&gt; unit&#xA;override this.Activate : unit -&gt; unit" Usage="servicedComponent.Activate " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="cf322-112">当从池创建或分配对象时，由基础结构调用。</span><span class="sxs-lookup"><span data-stu-id="cf322-112">Called by the infrastructure when the object is created or allocated from a pool.</span></span> <span data-ttu-id="cf322-113">重写此方法以将自定义初始化代码添加到对象中。</span><span class="sxs-lookup"><span data-stu-id="cf322-113">Override this method to add custom initialization code to objects.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="cf322-114">下面的代码示例演示如何使用此方法。</span><span class="sxs-lookup"><span data-stu-id="cf322-114">The following code example demonstrates the use of this method.</span></span>  
  
 [!code-cpp[EnterpriseServices_Pooling#3](~/samples/snippets/cpp/VS_Snippets_Remoting/EnterpriseServices_Pooling/CPP/inspector.cpp#3)]
 [!code-csharp[EnterpriseServices_Pooling#3](~/samples/snippets/csharp/VS_Snippets_Remoting/EnterpriseServices_Pooling/CS/inspector.cs#3)]
 [!code-vb[EnterpriseServices_Pooling#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/EnterpriseServices_Pooling/VB/inspector.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanBePooled">
      <MemberSignature Language="C#" Value="protected internal virtual bool CanBePooled ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance bool CanBePooled() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.ServicedComponent.CanBePooled" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function CanBePooled () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual bool CanBePooled();" />
      <MemberSignature Language="F#" Value="abstract member CanBePooled : unit -&gt; bool&#xA;override this.CanBePooled : unit -&gt; bool" Usage="servicedComponent.CanBePooled " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="cf322-115">在将对象放回到池中之前结构调用该方法。</span><span class="sxs-lookup"><span data-stu-id="cf322-115">This method is called by the infrastructure before the object is put back into the pool.</span></span> <span data-ttu-id="cf322-116">重写此方法以决定是否将对象放回到池中。</span><span class="sxs-lookup"><span data-stu-id="cf322-116">Override this method to vote on whether the object is put back into the pool.</span></span></summary>
        <returns><span data-ttu-id="cf322-117">如果已维护的组件可被放入池中，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="cf322-117"><see langword="true" /> if the serviced component can be pooled; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="cf322-118">下面的代码示例演示如何使用此方法。</span><span class="sxs-lookup"><span data-stu-id="cf322-118">The following code example demonstrates the use of this method.</span></span>  
  
 [!code-cpp[EnterpriseServices_Pooling#5](~/samples/snippets/cpp/VS_Snippets_Remoting/EnterpriseServices_Pooling/CPP/inspector.cpp#5)]
 [!code-csharp[EnterpriseServices_Pooling#5](~/samples/snippets/csharp/VS_Snippets_Remoting/EnterpriseServices_Pooling/CS/inspector.cs#5)]
 [!code-vb[EnterpriseServices_Pooling#5](~/samples/snippets/visualbasic/VS_Snippets_Remoting/EnterpriseServices_Pooling/VB/inspector.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Construct">
      <MemberSignature Language="C#" Value="protected internal virtual void Construct (string s);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void Construct(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.ServicedComponent.Construct(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub Construct (s As String)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void Construct(System::String ^ s);" />
      <MemberSignature Language="F#" Value="abstract member Construct : string -&gt; unit&#xA;override this.Construct : string -&gt; unit" Usage="servicedComponent.Construct s" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="cf322-119">结构字符串。</span><span class="sxs-lookup"><span data-stu-id="cf322-119">The construction string.</span></span></param>
        <summary><span data-ttu-id="cf322-120">恰好在调用构造函数后由基础结构调用，并且在构造函数字符串中传递。</span><span class="sxs-lookup"><span data-stu-id="cf322-120">Called by the infrastructure just after the constructor is called, passing in the constructor string.</span></span> <span data-ttu-id="cf322-121">重写该方法以使用结构字符串值。</span><span class="sxs-lookup"><span data-stu-id="cf322-121">Override this method to make use of the construction string value.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Deactivate">
      <MemberSignature Language="C#" Value="protected internal virtual void Deactivate ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void Deactivate() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.ServicedComponent.Deactivate" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub Deactivate ()" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void Deactivate();" />
      <MemberSignature Language="F#" Value="abstract member Deactivate : unit -&gt; unit&#xA;override this.Deactivate : unit -&gt; unit" Usage="servicedComponent.Deactivate " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="cf322-122">当对象即将停用时由基础结构调用。</span><span class="sxs-lookup"><span data-stu-id="cf322-122">Called by the infrastructure when the object is about to be deactivated.</span></span> <span data-ttu-id="cf322-123">重写该方法以在使用实时 (JIT) 编译代码或对象池时向对象添加自定义终止代码。</span><span class="sxs-lookup"><span data-stu-id="cf322-123">Override this method to add custom finalization code to objects when just-in-time (JIT) compiled code or object pooling is used.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="cf322-124">下面的代码示例演示如何使用此方法。</span><span class="sxs-lookup"><span data-stu-id="cf322-124">The following code example demonstrates the use of this method.</span></span>  
  
 [!code-cpp[EnterpriseServices_Pooling#4](~/samples/snippets/cpp/VS_Snippets_Remoting/EnterpriseServices_Pooling/CPP/inspector.cpp#4)]
 [!code-csharp[EnterpriseServices_Pooling#4](~/samples/snippets/csharp/VS_Snippets_Remoting/EnterpriseServices_Pooling/CS/inspector.cs#4)]
 [!code-vb[EnterpriseServices_Pooling#4](~/samples/snippets/visualbasic/VS_Snippets_Remoting/EnterpriseServices_Pooling/VB/inspector.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="cf322-125">释放由 <see cref="T:System.EnterpriseServices.ServicedComponent" /> 占用的资源。</span><span class="sxs-lookup"><span data-stu-id="cf322-125">Releases the resources used by the <see cref="T:System.EnterpriseServices.ServicedComponent" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.ServicedComponent.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="servicedComponent.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="cf322-126">释放由 <see cref="T:System.EnterpriseServices.ServicedComponent" /> 使用的所有资源。</span><span class="sxs-lookup"><span data-stu-id="cf322-126">Releases all resources used by the <see cref="T:System.EnterpriseServices.ServicedComponent" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cf322-127">完成对象并删除关联的 COM + 上下文。</span><span class="sxs-lookup"><span data-stu-id="cf322-127">Finalizes the object and removes the associated COM+ context.</span></span>  
  
 <span data-ttu-id="cf322-128">建议在垃圾回收器释放对象之前显式释放 COM + 对象和外部资源。</span><span class="sxs-lookup"><span data-stu-id="cf322-128">It is recommended to explicitly release COM+ objects and external resources before the garbage collector frees the object.</span></span> <span data-ttu-id="cf322-129">如果外部资源缺乏或昂贵，则当不再需要 COM + 资源时，可以通过显式释放这些资源来获得更好的性能。</span><span class="sxs-lookup"><span data-stu-id="cf322-129">If the external resource is scarce or expensive, better performance can be achieved by explicitly releasing COM+ resources when they are no longer needed.</span></span> <span data-ttu-id="cf322-130">显式控件由 <xref:System.EnterpriseServices.ServicedComponent.Dispose%2A> 方法提供。</span><span class="sxs-lookup"><span data-stu-id="cf322-130">Explicit control is provided by the <xref:System.EnterpriseServices.ServicedComponent.Dispose%2A> method.</span></span>  
  
 <span data-ttu-id="cf322-131">调用 <xref:System.EnterpriseServices.ServicedComponent.Dispose%2A> 会允许出于其他目的重新分配所使用的资源 <xref:System.EnterpriseServices.ServicedComponent> 。</span><span class="sxs-lookup"><span data-stu-id="cf322-131">Calling <xref:System.EnterpriseServices.ServicedComponent.Dispose%2A> allows the resources used by the <xref:System.EnterpriseServices.ServicedComponent> to be reallocated for other purposes.</span></span> <span data-ttu-id="cf322-132">有关的详细信息 <xref:System.EnterpriseServices.ServicedComponent.Dispose%2A> ，请参阅 [清理非托管资源](/dotnet/standard/garbage-collection/unmanaged)。</span><span class="sxs-lookup"><span data-stu-id="cf322-132">For more information about <xref:System.EnterpriseServices.ServicedComponent.Dispose%2A>, see [Cleaning Up Unmanaged Resources](/dotnet/standard/garbage-collection/unmanaged).</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="cf322-133">重写 <see cref="M:System.EnterpriseServices.ServicedComponent.Dispose(System.Boolean)" /> 方法以自定义此类的释放逻辑。</span><span class="sxs-lookup"><span data-stu-id="cf322-133">Override the <see cref="M:System.EnterpriseServices.ServicedComponent.Dispose(System.Boolean)" /> method to customize the dispose logic for this class.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.ServicedComponent.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="servicedComponent.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing"><span data-ttu-id="cf322-134">若要释放托管资源和非托管资源，则为 <see langword="true" />；否则为 <see langword="false" />，这仅释放非托管资源。</span><span class="sxs-lookup"><span data-stu-id="cf322-134"><see langword="true" /> to release both managed and unmanaged resources; otherwise, <see langword="false" /> to release only unmanaged resources.</span></span></param>
        <summary><span data-ttu-id="cf322-135">释放由 <see cref="T:System.EnterpriseServices.ServicedComponent" /> 占用的非托管资源，还可以另外再释放托管资源。</span><span class="sxs-lookup"><span data-stu-id="cf322-135">Releases the unmanaged resources used by the <see cref="T:System.EnterpriseServices.ServicedComponent" /> and optionally releases the managed resources.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cf322-136">此方法由公共 `Dispose` 方法和 <xref:System.Object.Finalize%2A> 方法调用。</span><span class="sxs-lookup"><span data-stu-id="cf322-136">This method is called by the public `Dispose` method and the <xref:System.Object.Finalize%2A> method.</span></span> <span data-ttu-id="cf322-137">`Dispose` 调用受保护的 `Dispose(Boolean)` 方法，并将 `disposing` 参数设置为 `true` 。</span><span class="sxs-lookup"><span data-stu-id="cf322-137">`Dispose` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`.</span></span> <span data-ttu-id="cf322-138"><xref:System.Object.Finalize%2A>`Dispose`在设置为的情况调用 `disposing` `false` 。</span><span class="sxs-lookup"><span data-stu-id="cf322-138"><xref:System.Object.Finalize%2A> invokes `Dispose` with `disposing` set to `false`.</span></span>  
  
 <span data-ttu-id="cf322-139">当 `disposing` 参数为 `true` 时，此方法释放该 <xref:System.EnterpriseServices.ServicedComponent> 引用的、由任何托管对象持有的全部资源。</span><span class="sxs-lookup"><span data-stu-id="cf322-139">When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.EnterpriseServices.ServicedComponent> references.</span></span> <span data-ttu-id="cf322-140">此方法将调用每个被引用对象的 `Dispose` 方法。</span><span class="sxs-lookup"><span data-stu-id="cf322-140">This method invokes the `Dispose` method of each referenced object.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="cf322-141">
            <see langword="Dispose" /> 可以由其他对象多次调用。</span><span class="sxs-lookup"><span data-stu-id="cf322-141">
            <see langword="Dispose" /> can be called multiple times by other objects.</span></span> <span data-ttu-id="cf322-142">重写 <see langword="Dispose(Boolean)" /> 时，请注意不要引用在以前调用 <see langword="Dispose" /> 时已释放的对象。</span><span class="sxs-lookup"><span data-stu-id="cf322-142">When overriding <see langword="Dispose(Boolean)" />, be careful not to reference objects that have been previously disposed of in an earlier call to <see langword="Dispose" />.</span></span> <span data-ttu-id="cf322-143">有关如何实现的详细信息 <see langword="Dispose(Boolean)" /> ，请参阅 [实现 Dispose 方法](/dotnet/standard/garbage-collection/implementing-dispose)。</span><span class="sxs-lookup"><span data-stu-id="cf322-143">For more information about how to implement <see langword="Dispose(Boolean)" />, see [Implementing a Dispose Method](/dotnet/standard/garbage-collection/implementing-dispose).</span></span>  
  
<span data-ttu-id="cf322-144">有关和的详细 <see langword="Dispose" /> 信息 <see cref="M:System.Object.Finalize" /> ，请参阅 [清理非托管资源](/dotnet/standard/garbage-collection/unmanaged) 和 [重写 Finalize 方法](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ddae83kx(v=vs.100))。</span><span class="sxs-lookup"><span data-stu-id="cf322-144">For more information about <see langword="Dispose" /> and <see cref="M:System.Object.Finalize" />, see [Cleaning Up Unmanaged Resources](/dotnet/standard/garbage-collection/unmanaged) and [Overriding the Finalize Method](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ddae83kx(v=vs.100)).</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="DisposeObject">
      <MemberSignature Language="C#" Value="public static void DisposeObject (System.EnterpriseServices.ServicedComponent sc);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void DisposeObject(class System.EnterpriseServices.ServicedComponent sc) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.ServicedComponent.DisposeObject(System.EnterpriseServices.ServicedComponent)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub DisposeObject (sc As ServicedComponent)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void DisposeObject(System::EnterpriseServices::ServicedComponent ^ sc);" />
      <MemberSignature Language="F#" Value="static member DisposeObject : System.EnterpriseServices.ServicedComponent -&gt; unit" Usage="System.EnterpriseServices.ServicedComponent.DisposeObject sc" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sc" Type="System.EnterpriseServices.ServicedComponent" />
      </Parameters>
      <Docs>
        <param name="sc"><span data-ttu-id="cf322-145">要释放的对象。</span><span class="sxs-lookup"><span data-stu-id="cf322-145">The object to dispose.</span></span></param>
        <summary><span data-ttu-id="cf322-146">完成对象并移除关联的 COM+ 引用。</span><span class="sxs-lookup"><span data-stu-id="cf322-146">Finalizes the object and removes the associated COM+ reference.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cf322-147">最好使用 `Dispose` 设计模式而不是 <xref:System.EnterpriseServices.ServicedComponent.DisposeObject%2A> 。</span><span class="sxs-lookup"><span data-stu-id="cf322-147">It is preferable to use the `Dispose` design pattern rather than <xref:System.EnterpriseServices.ServicedComponent.DisposeObject%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.EnterpriseServices.IRemoteDispatch.RemoteDispatchAutoDone">
      <MemberSignature Language="C#" Value="string IRemoteDispatch.RemoteDispatchAutoDone (string s);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance string System.EnterpriseServices.IRemoteDispatch.RemoteDispatchAutoDone(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.ServicedComponent.System#EnterpriseServices#IRemoteDispatch#RemoteDispatchAutoDone(System.String)" />
      <MemberSignature Language="VB.NET" Value="Function RemoteDispatchAutoDone (s As String) As String Implements IRemoteDispatch.RemoteDispatchAutoDone" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::String ^ System.EnterpriseServices.IRemoteDispatch.RemoteDispatchAutoDone(System::String ^ s) = System::EnterpriseServices::IRemoteDispatch::RemoteDispatchAutoDone;" />
      <MemberSignature Language="F#" Value="abstract member System.EnterpriseServices.IRemoteDispatch.RemoteDispatchAutoDone : string -&gt; string&#xA;override this.System.EnterpriseServices.IRemoteDispatch.RemoteDispatchAutoDone : string -&gt; string" Usage="servicedComponent.System.EnterpriseServices.IRemoteDispatch.RemoteDispatchAutoDone s" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.EnterpriseServices.IRemoteDispatch.RemoteDispatchAutoDone(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.EnterpriseServices.AutoComplete(true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.EnterpriseServices.AutoComplete(true)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="cf322-148">一个字符串，它将转换为实现 <see cref="T:System.Runtime.Remoting.Messaging.IMessage" /> 接口的请求对象。</span><span class="sxs-lookup"><span data-stu-id="cf322-148">A string to be converted into a request object that implements the <see cref="T:System.Runtime.Remoting.Messaging.IMessage" /> interface.</span></span></param>
        <summary><span data-ttu-id="cf322-149">确保在 COM+ 上下文中，<see cref="T:System.EnterpriseServices.ServicedComponent" /> 类对象的 <see langword="done" /> 位在远程方法调用后设置为 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="cf322-149">Ensures that, in the COM+ context, the <see cref="T:System.EnterpriseServices.ServicedComponent" /> class object's <see langword="done" /> bit is set to <see langword="true" /> after a remote method invocation.</span></span></summary>
        <returns><span data-ttu-id="cf322-150">一个字符串，由实现 <see cref="T:System.Runtime.Remoting.Messaging.IMethodReturnMessage" /> 接口的响应对象转换而成。</span><span class="sxs-lookup"><span data-stu-id="cf322-150">A string converted from a response object that implements the <see cref="T:System.Runtime.Remoting.Messaging.IMethodReturnMessage" /> interface.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
<span data-ttu-id="cf322-151"><xref:System.EnterpriseServices.IRemoteDispatch.RemoteDispatchAutoDone%2A>方法不属于类的已发布接口 <xref:System.EnterpriseServices.ServicedComponent> ，不需要在其他位置实现。</span><span class="sxs-lookup"><span data-stu-id="cf322-151">The <xref:System.EnterpriseServices.IRemoteDispatch.RemoteDispatchAutoDone%2A> method does not belong to the published interface of the <xref:System.EnterpriseServices.ServicedComponent> class and does not need to be implemented elsewhere.</span></span>  

]]></format>
        </remarks>
        <forInternalUseOnly />
      </Docs>
    </Member>
    <Member MemberName="System.EnterpriseServices.IRemoteDispatch.RemoteDispatchNotAutoDone">
      <MemberSignature Language="C#" Value="string IRemoteDispatch.RemoteDispatchNotAutoDone (string s);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance string System.EnterpriseServices.IRemoteDispatch.RemoteDispatchNotAutoDone(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.ServicedComponent.System#EnterpriseServices#IRemoteDispatch#RemoteDispatchNotAutoDone(System.String)" />
      <MemberSignature Language="VB.NET" Value="Function RemoteDispatchNotAutoDone (s As String) As String Implements IRemoteDispatch.RemoteDispatchNotAutoDone" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::String ^ System.EnterpriseServices.IRemoteDispatch.RemoteDispatchNotAutoDone(System::String ^ s) = System::EnterpriseServices::IRemoteDispatch::RemoteDispatchNotAutoDone;" />
      <MemberSignature Language="F#" Value="abstract member System.EnterpriseServices.IRemoteDispatch.RemoteDispatchNotAutoDone : string -&gt; string&#xA;override this.System.EnterpriseServices.IRemoteDispatch.RemoteDispatchNotAutoDone : string -&gt; string" Usage="servicedComponent.System.EnterpriseServices.IRemoteDispatch.RemoteDispatchNotAutoDone s" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.EnterpriseServices.IRemoteDispatch.RemoteDispatchNotAutoDone(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.EnterpriseServices.AutoComplete(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.EnterpriseServices.AutoComplete(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="cf322-152">一个字符串，它将转换为实现 <see cref="T:System.Runtime.Remoting.Messaging.IMessage" /> 接口的请求对象。</span><span class="sxs-lookup"><span data-stu-id="cf322-152">A string to be converted into a request object that implements the <see cref="T:System.Runtime.Remoting.Messaging.IMessage" /> interface.</span></span></param>
        <summary><span data-ttu-id="cf322-153">不确保在 COM+ 上下文中，<see cref="T:System.EnterpriseServices.ServicedComponent" /> 类对象的 <see langword="done" /> 位在远程方法调用后设置为 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="cf322-153">Does not ensure that, in the COM+ context, the <see cref="T:System.EnterpriseServices.ServicedComponent" /> class object's <see langword="done" /> bit is set to <see langword="true" /> after a remote method invocation.</span></span></summary>
        <returns><span data-ttu-id="cf322-154">一个字符串，由实现 <see cref="T:System.Runtime.Remoting.Messaging.IMethodReturnMessage" /> 接口的响应对象转换而成。</span><span class="sxs-lookup"><span data-stu-id="cf322-154">A string converted from a response object that implements the <see cref="T:System.Runtime.Remoting.Messaging.IMethodReturnMessage" /> interface.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cf322-155"><xref:System.EnterpriseServices.IRemoteDispatch.RemoteDispatchNotAutoDone%2A>方法不属于类的已发布接口 <xref:System.EnterpriseServices.ServicedComponent> ，不需要在其他位置实现。</span><span class="sxs-lookup"><span data-stu-id="cf322-155">The <xref:System.EnterpriseServices.IRemoteDispatch.RemoteDispatchNotAutoDone%2A> method does not belong to the published interface of the <xref:System.EnterpriseServices.ServicedComponent> class and does not need to be implemented elsewhere.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.EnterpriseServices.IServicedComponentInfo.GetComponentInfo">
      <MemberSignature Language="C#" Value="void IServicedComponentInfo.GetComponentInfo (ref int infoMask, out string[] infoArray);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.EnterpriseServices.IServicedComponentInfo.GetComponentInfo(int32&amp; infoMask, [out] string[]&amp; infoArray) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.ServicedComponent.System#EnterpriseServices#IServicedComponentInfo#GetComponentInfo(System.Int32@,System.String[]@)" />
      <MemberSignature Language="VB.NET" Value="Sub GetComponentInfo (ByRef infoMask As Integer, ByRef infoArray As String()) Implements IServicedComponentInfo.GetComponentInfo" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.EnterpriseServices.IServicedComponentInfo.GetComponentInfo(int % infoMask, [Runtime::InteropServices::Out] cli::array &lt;System::String ^&gt; ^ % infoArray) = System::EnterpriseServices::IServicedComponentInfo::GetComponentInfo;" />
      <MemberSignature Language="F#" Value="abstract member System.EnterpriseServices.IServicedComponentInfo.GetComponentInfo : int * String[] -&gt; unit&#xA;override this.System.EnterpriseServices.IServicedComponentInfo.GetComponentInfo : int * String[] -&gt; unit" Usage="servicedComponent.System.EnterpriseServices.IServicedComponentInfo.GetComponentInfo (infoMask, infoArray)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.EnterpriseServices.IServicedComponentInfo.GetComponentInfo(System.Int32@,System.String[]@)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="infoMask" Type="System.Int32" RefType="ref" />
        <Parameter Name="infoArray" Type="System.String[]" RefType="out" />
      </Parameters>
      <Docs>
        <param name="infoMask"><span data-ttu-id="cf322-156">一个位掩码，其中：0x00000001 为服务组件进程 ID 的键，0x00000002 为应用程序域 ID 的键，0x00000004 为服务组件远程 URI 的键。</span><span class="sxs-lookup"><span data-stu-id="cf322-156">A bitmask where 0x00000001 is a key for the serviced component's process ID, 0x00000002 is a key for the application domain ID, and 0x00000004 is a key for the serviced component's remote URI.</span></span></param>
        <param name="infoArray"><span data-ttu-id="cf322-157">一个字符串数组，可以依次包含以下任一项或全部项：服务组件的进程 ID、应用程序域 ID 以及服务组件的远程 URI。</span><span class="sxs-lookup"><span data-stu-id="cf322-157">A string array that may contain any or all of the following, in order: the serviced component's process ID, the application domain ID, and the serviced component's remote URI.</span></span></param>
        <summary><span data-ttu-id="cf322-158">获取关于 <see cref="T:System.EnterpriseServices.ServicedComponent" /> 类实例的某些信息。</span><span class="sxs-lookup"><span data-stu-id="cf322-158">Obtains certain information about the <see cref="T:System.EnterpriseServices.ServicedComponent" /> class instance.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cf322-159"><xref:System.EnterpriseServices.IServicedComponentInfo.GetComponentInfo%2A>方法不属于类的已发布接口 <xref:System.EnterpriseServices.ServicedComponent> ，不需要在其他位置实现。</span><span class="sxs-lookup"><span data-stu-id="cf322-159">The <xref:System.EnterpriseServices.IServicedComponentInfo.GetComponentInfo%2A> method does not belong to the published interface of the <xref:System.EnterpriseServices.ServicedComponent> class and does not need to be implemented elsewhere.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
