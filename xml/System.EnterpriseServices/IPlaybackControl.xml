<Type Name="IPlaybackControl" FullName="System.EnterpriseServices.IPlaybackControl">
  <Metadata><Meta Name="ms.openlocfilehash" Value="6f1b4ed9250e6a7d39498f1b15c45c83e21578df" /><Meta Name="ms.sourcegitcommit" Value="c982ad9e10a242d90f1e631b5981570f9e5d9f34" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/10/2020" /><Meta Name="ms.locfileid" Value="89895457" /></Metadata><TypeSignature Language="C#" Value="public interface IPlaybackControl" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IPlaybackControl" />
  <TypeSignature Language="DocId" Value="T:System.EnterpriseServices.IPlaybackControl" />
  <TypeSignature Language="VB.NET" Value="Public Interface IPlaybackControl" />
  <TypeSignature Language="C++ CLI" Value="public interface class IPlaybackControl" />
  <TypeSignature Language="F#" Value="type IPlaybackControl = interface" />
  <AssemblyInfo>
    <AssemblyName>System.EnterpriseServices</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[System.Runtime.InteropServices.Guid("51372AFD-CAE7-11CF-BE81-00AA00A2FA25")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.Guid("51372AFD-CAE7-11CF-BE81-00AA00A2FA25")&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[System.Runtime.InteropServices.InterfaceType(System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.InterfaceType(System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>“消息队列”传送机制的服务器端播放错误和客户端失败的异常处理中的“排队组件”中的函数。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在 COM + 目录中为组件定义的 exception 类实现 <xref:System.EnterpriseServices.IPlaybackControl> 了和原始类的接口。 原始类接口的方法实现用于对类本身中失败的方法执行异常处理。 它们将在或之后 <xref:System.EnterpriseServices.IPlaybackControl.FinalClientRetry%2A> 调用 <xref:System.EnterpriseServices.IPlaybackControl.FinalServerRetry%2A> ，以处理最初调用的方法的异常。  
  
 排队的组件扮演者调用的方法 <xref:System.EnterpriseServices.IPlaybackControl> 来通知异常处理程序对象，消息将要放置在最终的静止或死信队列中。 然后，排队组件扮演者会在原始方法调用失败的异常处理程序对象中调用相同的方法。 异常处理程序对象可以实现一种替代方法，例如，收集问题诊断信息，或生成通知客户端问题的对象或消息。 如果应用程序未实现 <xref:System.EnterpriseServices.IPlaybackControl> ，则当排队组件播放机用完所有重试时，病毒消息会被放置在最终的静止或死信队列中。  
  
 病毒消息是由于某些原因而无法处理的消息，可能是因为服务器或队列系统有问题。 事务被回滚，病毒消息将进入队列的顶部。 当消息再次取消排队时，将发生相同的情况。 此消息可能会无限期地继续循环，直到完成纠正此问题所需的操作。 排队组件服务通过使用一系列重试来处理病毒消息。 重试多次失败后，会将消息移动到最终的静止队列。 病毒消息将保留在静止队列中，直到使用排队组件消息移动器工具手动移动。  
  
 也可以使用方法以编程方式解析病毒消息的情况 <xref:System.EnterpriseServices.IPlaybackControl.FinalServerRetry%2A> ，这会通知服务器端组件作者所有尝试播放延迟激活的尝试都已失败。  
  
 如果发现病毒消息，则可以快速解决问题的根本原因。 例如，如果由于某种原因而使服务器脱机，则可以将服务器恢复联机状态。 如果无法快速解决问题，则可以自动生成另一个事务，通知请求者未发生事务。 然后，请求者可以进行补偿事务，以反转已提交的事务的效果。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="FinalClientRetry">
      <MemberSignature Language="C#" Value="public void FinalClientRetry ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void FinalClientRetry() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.IPlaybackControl.FinalClientRetry" />
      <MemberSignature Language="VB.NET" Value="Public Sub FinalClientRetry ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FinalClientRetry();" />
      <MemberSignature Language="F#" Value="abstract member FinalClientRetry : unit -&gt; unit" Usage="iPlaybackControl.FinalClientRetry " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>通知客户端异常处理组件，消息队列将消息发送至服务器的所有尝试均被拒绝，消息终止于客户端的 Xact 死信队列。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当消息到达事务死信队列时，COM + 会尝试调用与服务器类相关的客户端异常处理程序来传递此通知。 它通过首先调用 <xref:System.EnterpriseServices.IPlaybackControl.FinalClientRetry%2A> ，然后在异常处理程序对象中调用 failed 方法的异常处理版本来实现此目的。 然后，此异常方法可以执行异常操作，如记录故障、向管理员发送电子邮件或获取客户端补偿操作 (反转先前事务) 的影响。 如果异常方法不成功，消息将保留在事务死信队列中。  
  
 可以在 Microsoft 消息队列 (MSMQ) 资源管理器中查看事务死信队列。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FinalServerRetry">
      <MemberSignature Language="C#" Value="public void FinalServerRetry ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void FinalServerRetry() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.IPlaybackControl.FinalServerRetry" />
      <MemberSignature Language="VB.NET" Value="Public Sub FinalServerRetry ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FinalServerRetry();" />
      <MemberSignature Language="F#" Value="abstract member FinalServerRetry : unit -&gt; unit" Usage="iPlaybackControl.FinalServerRetry " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>通知服务器端异常类实现，所有将被推迟的激活播放至服务器的尝试均已失败，该消息将被移至其最终静止队列。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当消息到达事务死信队列时，COM + 会尝试调用与服务器类相关的服务器端异常处理程序来传递此通知。 它通过首先调用 <xref:System.EnterpriseServices.IPlaybackControl.FinalServerRetry%2A> ，然后在异常处理程序对象中调用 failed 方法的异常处理版本来实现此目的。 然后，此异常方法可以执行异常操作，如记录故障、向管理员发送电子邮件或获取客户端补偿操作 (反转先前事务) 的影响。 服务器对象应该尽力完成此事务。 否则，重新处理消息需要手动干预。 如果异常方法不成功，则将消息移动到最终的静止队列。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
