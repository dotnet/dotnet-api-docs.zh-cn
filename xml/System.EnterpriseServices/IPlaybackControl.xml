<Type Name="IPlaybackControl" FullName="System.EnterpriseServices.IPlaybackControl">
  <Metadata><Meta Name="ms.openlocfilehash" Value="6f1b4ed9250e6a7d39498f1b15c45c83e21578df" /><Meta Name="ms.sourcegitcommit" Value="b53d35b4a410c949742abd4c6a989d1af5357bca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="86817664" /></Metadata><TypeSignature Language="C#" Value="public interface IPlaybackControl" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IPlaybackControl" />
  <TypeSignature Language="DocId" Value="T:System.EnterpriseServices.IPlaybackControl" />
  <TypeSignature Language="VB.NET" Value="Public Interface IPlaybackControl" />
  <TypeSignature Language="C++ CLI" Value="public interface class IPlaybackControl" />
  <TypeSignature Language="F#" Value="type IPlaybackControl = interface" />
  <AssemblyInfo>
    <AssemblyName>System.EnterpriseServices</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[System.Runtime.InteropServices.Guid("51372AFD-CAE7-11CF-BE81-00AA00A2FA25")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.Guid("51372AFD-CAE7-11CF-BE81-00AA00A2FA25")&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[System.Runtime.InteropServices.InterfaceType(System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.InterfaceType(System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="41101-101">“消息队列”传送机制的服务器端播放错误和客户端失败的异常处理中的“排队组件”中的函数。</span><span class="sxs-lookup"><span data-stu-id="41101-101">Functions in Queued Components in the abnormal handling of server-side playback errors and client-side failures of the Message Queuing delivery mechanism.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="41101-102">在 COM + 目录中为组件定义的 exception 类实现 <xref:System.EnterpriseServices.IPlaybackControl> 了和原始类的接口。</span><span class="sxs-lookup"><span data-stu-id="41101-102">The exception class defined for the component in the COM+ catalog implements both <xref:System.EnterpriseServices.IPlaybackControl> and the interface for the original class.</span></span> <span data-ttu-id="41101-103">原始类接口的方法实现用于对类本身中失败的方法执行异常处理。</span><span class="sxs-lookup"><span data-stu-id="41101-103">The method implementations of the original class interface are used to perform the exception handling for the failed methods in the class itself.</span></span> <span data-ttu-id="41101-104">它们将在或之后 <xref:System.EnterpriseServices.IPlaybackControl.FinalClientRetry%2A> 调用 <xref:System.EnterpriseServices.IPlaybackControl.FinalServerRetry%2A> ，以处理最初调用的方法的异常。</span><span class="sxs-lookup"><span data-stu-id="41101-104">They will be called after <xref:System.EnterpriseServices.IPlaybackControl.FinalClientRetry%2A> or <xref:System.EnterpriseServices.IPlaybackControl.FinalServerRetry%2A> to process exceptions for the method originally called.</span></span>  
  
 <span data-ttu-id="41101-105">排队的组件扮演者调用的方法 <xref:System.EnterpriseServices.IPlaybackControl> 来通知异常处理程序对象，消息将要放置在最终的静止或死信队列中。</span><span class="sxs-lookup"><span data-stu-id="41101-105">The Queued Components Player calls the methods of <xref:System.EnterpriseServices.IPlaybackControl> to inform the exception-handler object that a message is about to be placed on the final resting or dead letter queue.</span></span> <span data-ttu-id="41101-106">然后，排队组件扮演者会在原始方法调用失败的异常处理程序对象中调用相同的方法。</span><span class="sxs-lookup"><span data-stu-id="41101-106">The Queued Components Player then calls the same method in the exception-handler object that had failed in the original method call.</span></span> <span data-ttu-id="41101-107">异常处理程序对象可以实现一种替代方法，例如，收集问题诊断信息，或生成通知客户端问题的对象或消息。</span><span class="sxs-lookup"><span data-stu-id="41101-107">The exception-handler object can implement an alternative, for example, by gathering problem diagnosis information or generating an object or message that informs the client of the problem.</span></span> <span data-ttu-id="41101-108">如果应用程序未实现 <xref:System.EnterpriseServices.IPlaybackControl> ，则当排队组件播放机用完所有重试时，病毒消息会被放置在最终的静止或死信队列中。</span><span class="sxs-lookup"><span data-stu-id="41101-108">If the application does not implement <xref:System.EnterpriseServices.IPlaybackControl>, the poison message is placed on the final resting or dead letter queue when the Queued Components Player exhausts all retries.</span></span>  
  
 <span data-ttu-id="41101-109">病毒消息是由于某些原因而无法处理的消息，可能是因为服务器或队列系统有问题。</span><span class="sxs-lookup"><span data-stu-id="41101-109">A poison message is a message that cannot be processed for some reason, perhaps because of a problem with the server or queuing system.</span></span> <span data-ttu-id="41101-110">事务被回滚，病毒消息将进入队列的顶部。</span><span class="sxs-lookup"><span data-stu-id="41101-110">The transaction is rolled back, and the poison message goes to the top of the queue.</span></span> <span data-ttu-id="41101-111">当消息再次取消排队时，将发生相同的情况。</span><span class="sxs-lookup"><span data-stu-id="41101-111">When the message is dequeued again, the same condition occurs.</span></span> <span data-ttu-id="41101-112">此消息可能会无限期地继续循环，直到完成纠正此问题所需的操作。</span><span class="sxs-lookup"><span data-stu-id="41101-112">This message can continue looping indefinitely until something is done to correct the problem.</span></span> <span data-ttu-id="41101-113">排队组件服务通过使用一系列重试来处理病毒消息。</span><span class="sxs-lookup"><span data-stu-id="41101-113">The Queued Components service handles the poison message by using a series of retries.</span></span> <span data-ttu-id="41101-114">重试多次失败后，会将消息移动到最终的静止队列。</span><span class="sxs-lookup"><span data-stu-id="41101-114">After several unsuccessful retries, the message is moved to a final resting queue.</span></span> <span data-ttu-id="41101-115">病毒消息将保留在静止队列中，直到使用排队组件消息移动器工具手动移动。</span><span class="sxs-lookup"><span data-stu-id="41101-115">Poison messages remain in the resting queue until manually moved by using the Queued Components Message Mover tool.</span></span>  
  
 <span data-ttu-id="41101-116">也可以使用方法以编程方式解析病毒消息的情况 <xref:System.EnterpriseServices.IPlaybackControl.FinalServerRetry%2A> ，这会通知服务器端组件作者所有尝试播放延迟激活的尝试都已失败。</span><span class="sxs-lookup"><span data-stu-id="41101-116">The poison message situation can also be resolved programmatically, using the <xref:System.EnterpriseServices.IPlaybackControl.FinalServerRetry%2A> method, which informs the server-side component author that all attempts to play back the deferred activation have failed.</span></span>  
  
 <span data-ttu-id="41101-117">如果发现病毒消息，则可以快速解决问题的根本原因。</span><span class="sxs-lookup"><span data-stu-id="41101-117">If you discover a poison message, you might be able to solve the underlying cause of the problem quickly.</span></span> <span data-ttu-id="41101-118">例如，如果由于某种原因而使服务器脱机，则可以将服务器恢复联机状态。</span><span class="sxs-lookup"><span data-stu-id="41101-118">For example, if the server was offline for some reason, you can bring the server back online.</span></span> <span data-ttu-id="41101-119">如果无法快速解决问题，则可以自动生成另一个事务，通知请求者未发生事务。</span><span class="sxs-lookup"><span data-stu-id="41101-119">If you cannot solve the problem quickly, you can automatically generate another transaction that notifies the requestor that the transaction did not occur.</span></span> <span data-ttu-id="41101-120">然后，请求者可以进行补偿事务，以反转已提交的事务的效果。</span><span class="sxs-lookup"><span data-stu-id="41101-120">The requestor can then make a compensating transaction that reverses the effect of a transaction that has already committed.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="FinalClientRetry">
      <MemberSignature Language="C#" Value="public void FinalClientRetry ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void FinalClientRetry() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.IPlaybackControl.FinalClientRetry" />
      <MemberSignature Language="VB.NET" Value="Public Sub FinalClientRetry ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FinalClientRetry();" />
      <MemberSignature Language="F#" Value="abstract member FinalClientRetry : unit -&gt; unit" Usage="iPlaybackControl.FinalClientRetry " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="41101-121">通知客户端异常处理组件，消息队列将消息发送至服务器的所有尝试均被拒绝，消息终止于客户端的 Xact 死信队列。</span><span class="sxs-lookup"><span data-stu-id="41101-121">Informs the client-side exception-handling component that all Message Queuing attempts to deliver the message to the server were rejected, and the message ended up on the client-side Xact Dead Letter queue.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="41101-122">当消息到达事务死信队列时，COM + 会尝试调用与服务器类相关的客户端异常处理程序来传递此通知。</span><span class="sxs-lookup"><span data-stu-id="41101-122">As messages arrive in the Xact Dead Letter queue, COM+ attempts to invoke a client-side exception handler related to the server class to deliver this notification.</span></span> <span data-ttu-id="41101-123">它通过首先调用 <xref:System.EnterpriseServices.IPlaybackControl.FinalClientRetry%2A> ，然后在异常处理程序对象中调用 failed 方法的异常处理版本来实现此目的。</span><span class="sxs-lookup"><span data-stu-id="41101-123">It does so by first calling <xref:System.EnterpriseServices.IPlaybackControl.FinalClientRetry%2A>, then calling the exception-handling version of the failed method in the exception-handler object.</span></span> <span data-ttu-id="41101-124">然后，此异常方法可以执行异常操作，如记录故障、向管理员发送电子邮件或获取客户端补偿操作 (反转先前事务) 的影响。</span><span class="sxs-lookup"><span data-stu-id="41101-124">This exception method can then take an exception action, such as recording the failure, sending a mail message to the administrator, or taking client-side compensating action (reversing the effect of an earlier transaction).</span></span> <span data-ttu-id="41101-125">如果异常方法不成功，消息将保留在事务死信队列中。</span><span class="sxs-lookup"><span data-stu-id="41101-125">If the exception method is not successful, the message is left on the Xact Dead Letter queue.</span></span>  
  
 <span data-ttu-id="41101-126">可以在 Microsoft 消息队列 (MSMQ) 资源管理器中查看事务死信队列。</span><span class="sxs-lookup"><span data-stu-id="41101-126">The Xact Dead Letter queue can be viewed in the Microsoft Message Queue (MSMQ) Explorer.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FinalServerRetry">
      <MemberSignature Language="C#" Value="public void FinalServerRetry ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void FinalServerRetry() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.IPlaybackControl.FinalServerRetry" />
      <MemberSignature Language="VB.NET" Value="Public Sub FinalServerRetry ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FinalServerRetry();" />
      <MemberSignature Language="F#" Value="abstract member FinalServerRetry : unit -&gt; unit" Usage="iPlaybackControl.FinalServerRetry " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="41101-127">通知服务器端异常类实现，所有将被推迟的激活播放至服务器的尝试均已失败，该消息将被移至其最终静止队列。</span><span class="sxs-lookup"><span data-stu-id="41101-127">Informs the server-side exception class implementation that all attempts to play back the deferred activation to the server have failed, and the message is about to be moved to its final resting queue.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="41101-128">当消息到达事务死信队列时，COM + 会尝试调用与服务器类相关的服务器端异常处理程序来传递此通知。</span><span class="sxs-lookup"><span data-stu-id="41101-128">As messages arrive on the Xact Dead Letter queue, COM+ attempts to invoke a server-side exception handler related to the server class to deliver this notification.</span></span> <span data-ttu-id="41101-129">它通过首先调用 <xref:System.EnterpriseServices.IPlaybackControl.FinalServerRetry%2A> ，然后在异常处理程序对象中调用 failed 方法的异常处理版本来实现此目的。</span><span class="sxs-lookup"><span data-stu-id="41101-129">It does so by first calling <xref:System.EnterpriseServices.IPlaybackControl.FinalServerRetry%2A>, then calling the exception handling version of the failed method in the exception handler object.</span></span> <span data-ttu-id="41101-130">然后，此异常方法可以执行异常操作，如记录故障、向管理员发送电子邮件或获取客户端补偿操作 (反转先前事务) 的影响。</span><span class="sxs-lookup"><span data-stu-id="41101-130">This exception method can then take an exception action, such as recording the failure, sending a mail message to the administrator, or taking client-side compensating action (reversing the effect of an earlier transaction).</span></span> <span data-ttu-id="41101-131">服务器对象应该尽力完成此事务。</span><span class="sxs-lookup"><span data-stu-id="41101-131">The server object should make every effort to complete this transaction successfully.</span></span> <span data-ttu-id="41101-132">否则，重新处理消息需要手动干预。</span><span class="sxs-lookup"><span data-stu-id="41101-132">Otherwise, manual intervention is required to reprocess the message.</span></span> <span data-ttu-id="41101-133">如果异常方法不成功，则将消息移动到最终的静止队列。</span><span class="sxs-lookup"><span data-stu-id="41101-133">If the exception method is not successful, the message is moved to the final resting queue.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
