<Type Name="IProcessInitializer" FullName="System.EnterpriseServices.IProcessInitializer">
  <Metadata><Meta Name="ms.openlocfilehash" Value="a58cd2132ea0c3e8a67847041fcffaf473d5aff5" /><Meta Name="ms.sourcegitcommit" Value="c982ad9e10a242d90f1e631b5981570f9e5d9f34" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/10/2020" /><Meta Name="ms.locfileid" Value="90002268" /></Metadata><TypeSignature Language="C#" Value="public interface IProcessInitializer" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IProcessInitializer" />
  <TypeSignature Language="DocId" Value="T:System.EnterpriseServices.IProcessInitializer" />
  <TypeSignature Language="VB.NET" Value="Public Interface IProcessInitializer" />
  <TypeSignature Language="C++ CLI" Value="public interface class IProcessInitializer" />
  <TypeSignature Language="F#" Value="type IProcessInitializer = interface" />
  <AssemblyInfo>
    <AssemblyName>System.EnterpriseServices</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[System.Runtime.InteropServices.Guid("1113f52d-dc7f-4943-aed6-88d04027e32a")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.Guid("1113f52d-dc7f-4943-aed6-88d04027e32a")&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[System.Runtime.InteropServices.InterfaceType(System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.InterfaceType(System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="fec17-101">支持 COM 组件启动或关闭时可调用的方法。</span><span class="sxs-lookup"><span data-stu-id="fec17-101">Supports methods that can be called when a COM component starts up or shuts down.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fec17-102"><xref:System.EnterpriseServices.IProcessInitializer>如果要在服务器进程 ( # A0) 启动或关闭时运行初始化或关闭代码，请在服务组件上实现接口方法。</span><span class="sxs-lookup"><span data-stu-id="fec17-102">Implement the <xref:System.EnterpriseServices.IProcessInitializer> interface methods on serviced components if you want to run initialization or shutdown code when a server process (Dllhost.exe) starts up or shuts down, respectively.</span></span>  
  
 <span data-ttu-id="fec17-103">`Startup` `Shutdown` 当 Dllhost.exe 开始和结束时，com + 提供和事件。</span><span class="sxs-lookup"><span data-stu-id="fec17-103">COM+ provides `Startup` and `Shutdown` events when Dllhost.exe starts and ends.</span></span> <span data-ttu-id="fec17-104">此功能使在 COM + 服务器应用程序中安装的任何 COM + 组件 (称为服务器组件) 运行自定义初始化并清理代码。</span><span class="sxs-lookup"><span data-stu-id="fec17-104">This feature enables any COM+ components that are installed in a COM+ server application (referred to as server components hereafter) to run custom initialization and clean up code.</span></span> <span data-ttu-id="fec17-105">在 <xref:System.EnterpriseServices.IProcessInitializer> 进程的持续时间内，将创建并存储实现接口的每个组件的实例。</span><span class="sxs-lookup"><span data-stu-id="fec17-105">An instance of each component that implements the <xref:System.EnterpriseServices.IProcessInitializer> interface will be created and stored for the duration of the process.</span></span> <span data-ttu-id="fec17-106">在上实现时 <xref:System.EnterpriseServices.ServicedComponent> ， `InitializesServerApplication` 组件集合中的参数 `COMAdminCatalogObject` 需要在组件注册过程中设置为 `true` ，以便在启动和关闭过程中调用接口方法。</span><span class="sxs-lookup"><span data-stu-id="fec17-106">When implemented on a <xref:System.EnterpriseServices.ServicedComponent>, the `InitializesServerApplication` parameter in the `COMAdminCatalogObject` within the Components collection needs to be set to `true` during registration of the component, in order for the interface methods to be called during startup and shutdown.</span></span>
  
 <span data-ttu-id="fec17-107">使用 `Startup` 和 `Shutdown` 事件，可以初始化资源、创建连接、初始化共享数据以及运行清理代码。</span><span class="sxs-lookup"><span data-stu-id="fec17-107">Using the `Startup` and `Shutdown` events, you can initialize resources, create connections, initialize shared data, and run cleanup code.</span></span> <span data-ttu-id="fec17-108">但是，您不能访问特定于 COM + 的状态，因为尚未创建服务器组件的实例。</span><span class="sxs-lookup"><span data-stu-id="fec17-108">However, you must not access states that are specific to COM+ because instances of server components have not yet been created.</span></span> <span data-ttu-id="fec17-109">此外，和事件中的代码 `Startup` `Shutdown` 应尽可能快地返回，因为系统仅等待90秒，Dllhost.exe 在系统启动进程后准备接受激活。</span><span class="sxs-lookup"><span data-stu-id="fec17-109">In addition, the code in the `Startup` and `Shutdown` events should return as quickly as possible, because the system waits only 90 seconds for Dllhost.exe to prepare to accept activations after the system starts the process.</span></span> <span data-ttu-id="fec17-110">如果 Dllhost.exe 在90秒内未发出信号，则系统将结束进程;因此，所有初始化处理都需要在此时间范围内完成。</span><span class="sxs-lookup"><span data-stu-id="fec17-110">If Dllhost.exe does not signal that it is ready within 90 seconds, the system ends the process; thus, all initialization processing needs to be completed within this time frame.</span></span> <span data-ttu-id="fec17-111">参与初始化的每个服务器组件都必须支持 <xref:System.EnterpriseServices.IProcessInitializer> 接口。</span><span class="sxs-lookup"><span data-stu-id="fec17-111">Each server component that participates in initialization must support the <xref:System.EnterpriseServices.IProcessInitializer> interface.</span></span> <span data-ttu-id="fec17-112">DllHost.exe 启动时，COM + 会创建所有服务器组件，请求此服务、调用 `QueryInterface` <xref:System.EnterpriseServices.IProcessInitializer> 接口并调用 <xref:System.EnterpriseServices.IProcessInitializer.Startup%2A> 函数。</span><span class="sxs-lookup"><span data-stu-id="fec17-112">On DllHost.exe startup, COM+ creates all server components that requested this service, calls `QueryInterface` for the <xref:System.EnterpriseServices.IProcessInitializer> interface, and calls the <xref:System.EnterpriseServices.IProcessInitializer.Startup%2A> function.</span></span> <span data-ttu-id="fec17-113">同样，当关闭 DllHost.exe 进程时，它将 <xref:System.EnterpriseServices.IProcessInitializer.Shutdown%2A> 在以前存储的接口指针上调用函数。</span><span class="sxs-lookup"><span data-stu-id="fec17-113">Similarly, when the DllHost.exe process is shut down, it calls the <xref:System.EnterpriseServices.IProcessInitializer.Shutdown%2A> function on those previously stored interface pointers.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Shutdown">
      <MemberSignature Language="C#" Value="public void Shutdown ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Shutdown() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.IProcessInitializer.Shutdown" />
      <MemberSignature Language="VB.NET" Value="Public Sub Shutdown ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Shutdown();" />
      <MemberSignature Language="F#" Value="abstract member Shutdown : unit -&gt; unit" Usage="iProcessInitializer.Shutdown " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="fec17-114">执行关闭操作。</span><span class="sxs-lookup"><span data-stu-id="fec17-114">Performs shutdown actions.</span></span> <span data-ttu-id="fec17-115">关闭 Dllhost.exe 时被调用。</span><span class="sxs-lookup"><span data-stu-id="fec17-115">Called when Dllhost.exe is shut down.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fec17-116"><xref:System.EnterpriseServices.IProcessInitializer.Shutdown%2A> 在 failfast 或其他灾难性关机事件期间，不会调用。</span><span class="sxs-lookup"><span data-stu-id="fec17-116"><xref:System.EnterpriseServices.IProcessInitializer.Shutdown%2A> is not called during a failfast or other catastrophic shutdown events.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Startup">
      <MemberSignature Language="C#" Value="public void Startup (object punkProcessControl);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Startup([in]object punkProcessControl) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.IProcessInitializer.Startup(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Startup (punkProcessControl As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Startup(System::Object ^ punkProcessControl);" />
      <MemberSignature Language="F#" Value="abstract member Startup : obj -&gt; unit" Usage="iProcessInitializer.Startup punkProcessControl" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="punkProcessControl" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="punkProcessControl"><span data-ttu-id="fec17-117">在 Microsoft Windows XP 中，一个指向 <see langword="IUnknown" /> COM 组件启动接口的指针。</span><span class="sxs-lookup"><span data-stu-id="fec17-117">In Microsoft Windows XP, a pointer to the <see langword="IUnknown" /> interface of the COM component starting up.</span></span> <span data-ttu-id="fec17-118">在 Microsoft Windows 2000 中，该参数始终为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="fec17-118">In Microsoft Windows 2000, this argument is always <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="fec17-119">在启动时执行初始化。</span><span class="sxs-lookup"><span data-stu-id="fec17-119">Performs initialization at startup.</span></span> <span data-ttu-id="fec17-120">启动 Dllhost.exe 时被调用。</span><span class="sxs-lookup"><span data-stu-id="fec17-120">Called when Dllhost.exe is started.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fec17-121">由引用的对象 `punkProcessControl` 实现 <xref:System.EnterpriseServices.IProcessInitControl> 接口。</span><span class="sxs-lookup"><span data-stu-id="fec17-121">The object referenced by `punkProcessControl` implements an <xref:System.EnterpriseServices.IProcessInitControl> interface.</span></span> <span data-ttu-id="fec17-122"><xref:System.EnterpriseServices.IProcessInitControl> 支持单个方法 <xref:System.EnterpriseServices.IProcessInitControl.ResetInitializerTimeout%2A> 。</span><span class="sxs-lookup"><span data-stu-id="fec17-122"><xref:System.EnterpriseServices.IProcessInitControl> supports the single method <xref:System.EnterpriseServices.IProcessInitControl.ResetInitializerTimeout%2A>.</span></span>  
  
 <span data-ttu-id="fec17-123">中的初始化代码 <xref:System.EnterpriseServices.IProcessInitializer.Startup%2A> 可调用 <xref:System.EnterpriseServices.IProcessInitControl.ResetInitializerTimeout%2A> ，超时设置等于在组件启动超时之前剩余的秒数。</span><span class="sxs-lookup"><span data-stu-id="fec17-123">The initialization code in <xref:System.EnterpriseServices.IProcessInitializer.Startup%2A> can call the <xref:System.EnterpriseServices.IProcessInitControl.ResetInitializerTimeout%2A>, with the time-out set equal to the number of seconds remaining before the startup of the component times out.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
