<Type Name="FileUpload" FullName="System.Web.UI.WebControls.FileUpload">
  <Metadata><Meta Name="ms.openlocfilehash" Value="3bfd7992086e87379119dd696f19bee2cc59e3b6" /><Meta Name="ms.sourcegitcommit" Value="c982ad9e10a242d90f1e631b5981570f9e5d9f34" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/10/2020" /><Meta Name="ms.locfileid" Value="89680337" /></Metadata><TypeSignature Language="C#" Value="public class FileUpload : System.Web.UI.WebControls.WebControl" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit FileUpload extends System.Web.UI.WebControls.WebControl" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.FileUpload" />
  <TypeSignature Language="VB.NET" Value="Public Class FileUpload&#xA;Inherits WebControl" />
  <TypeSignature Language="C++ CLI" Value="public ref class FileUpload : System::Web::UI::WebControls::WebControl" />
  <TypeSignature Language="F#" Value="type FileUpload = class&#xA;    inherit WebControl" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.WebControls.WebControl</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
      <AttributeName Language="C#">[System.ComponentModel.Designer("System.Web.UI.Design.WebControls.PreviewControlDesigner, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.ComponentModel.Designer("System.Web.UI.Design.WebControls.PreviewControlDesigner, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[System.Web.UI.ControlValueProperty("FileBytes")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Web.UI.ControlValueProperty("FileBytes")&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[System.Web.UI.ValidationProperty("FileName")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Web.UI.ValidationProperty("FileName")&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName Language="C#">[System.ComponentModel.Designer("System.Web.UI.Design.WebControls.PreviewControlDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.ComponentModel.Designer("System.Web.UI.Design.WebControls.PreviewControlDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>显示一个文本框控件和一个浏览按钮，使用户可以选择要上载到服务器的文件。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 本主题内容：  
  
-   [介绍](#introduction)  
  
-   [正在保存上载的文件](#saving_uploaded_files)  
  
-   [安全注意事项](#security_considerations)  
  
-   [内存限制](#memory_limitations)  
  
-   [将 FileUpload 控件与 UpdatePanel 控件一起使用](#using_the_FileUpload_Control_with_the_UpdatePanel_control)  
  
-   [声明性语法](#DeclarativeSyntax)  
  
<a name="introduction"></a>   
## <a name="introduction"></a>介绍  
 <xref:System.Web.UI.WebControls.FileUpload>类将显示一个文本框控件和一个浏览按钮，使用户可以在客户端上选择文件并将其上传到 Web 服务器。 用户通过输入本地计算机上文件的完整路径来指定要上传的文件 (例如，在控件文本框中 **C:\MyFiles\TestFile.txt**) 。 或者，用户可以通过单击 " **浏览** " 按钮选择该文件，然后在 " **选择文件** " 对话框中找到它。  
  
 使用 <xref:System.Web.UI.WebControls.FileUpload.FileName%2A> 属性可获取客户端上使用控件上载的文件的名称 <xref:System.Web.UI.WebControls.FileUpload> 。 此属性返回的文件名不包括客户端上文件的路径。  
  
 <xref:System.Web.UI.WebControls.FileUpload.FileContent%2A>属性获取一个 <xref:System.IO.Stream> 指向要上传的文件的对象。 使用此属性以字节的形式访问该文件的内容。 例如，你可以使用 <xref:System.IO.Stream> 属性返回的对象将 <xref:System.Web.UI.WebControls.FileUpload.FileContent%2A> 文件内容作为字节来读取，并将其存储在字节数组中。 或者，可以使用 <xref:System.Web.UI.WebControls.FileUpload.FileBytes%2A> 属性来检索文件中的所有字节。  
  
 <xref:System.Web.UI.WebControls.FileUpload.PostedFile%2A>属性获取 <xref:System.Web.HttpPostedFile> 要上载的文件的基础对象。 您可以使用此属性来访问该文件的其他属性。 <xref:System.Web.HttpPostedFile.ContentLength%2A>属性获取文件的长度。 <xref:System.Web.HttpPostedFile.ContentType%2A>属性获取文件的 MIME 内容类型。 此外，还可以使用 <xref:System.Web.UI.WebControls.FileUpload.PostedFile%2A> 属性来访问 <xref:System.Web.HttpPostedFile.FileName%2A> 属性、 <xref:System.Web.HttpPostedFile.InputStream%2A> 属性和 <xref:System.Web.HttpPostedFile.SaveAs%2A> 方法。 但是， <xref:System.Web.UI.WebControls.FileUpload.FileName%2A> 属性、 <xref:System.Web.UI.WebControls.FileUpload.FileContent%2A> 属性和方法提供了相同的功能 <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> 。  
  
<a name="saving_uploaded_files"></a>   
## <a name="saving-uploaded-files"></a>正在保存上载的文件  
 <xref:System.Web.UI.WebControls.FileUpload>用户选择要上载的文件后，控件不会自动将文件保存到服务器。 您必须显式提供一个控件或机制以允许用户提交指定的文件。 例如，你可以提供一个按钮，用户单击它即可上传文件。 你编写的用于保存指定文件的代码应调用 <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> 方法，该方法会将文件内容保存到服务器上的指定路径。 通常， <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> 在引发回发到服务器的事件的事件处理方法中调用方法。 例如，如果你提供了一个用于提交文件的按钮，则可以包含代码以将该文件保存在 click 事件的事件处理方法内。  
  
 在调用 <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> 方法以将文件保存到服务器之前，请使用 <xref:System.Web.UI.WebControls.FileUpload.HasFile%2A> 属性来验证 <xref:System.Web.UI.WebControls.FileUpload> 控件是否包含文件。 如果 <xref:System.Web.UI.WebControls.FileUpload.HasFile%2A> 返回 `true` ，则调用 <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> 方法。 如果它返回 `false` ，则向用户显示一条消息，指示该控件不包含文件。 不要检查 <xref:System.Web.UI.WebControls.FileUpload.PostedFile%2A> 属性以确定要上传的文件是否存在，因为默认情况下，此属性包含0个字节。 因此，即使 <xref:System.Web.UI.WebControls.FileUpload> 控件为空白，属性也将 <xref:System.Web.UI.WebControls.FileUpload.PostedFile%2A> 返回一个非 null 值。  
  
<a name="security_considerations"></a>   
## <a name="security-considerations"></a>安全注意事项  
 调用 <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> 方法时，必须指定要在其中保存上载文件的目录的完整路径。 如果未在应用程序代码中显式指定路径，则当用户尝试上传文件时，将引发异常。 此行为可防止用户在应用程序的目录结构中写入任意位置以及阻止对敏感的根目录的访问，从而有助于保护服务器上的文件的安全。  
  
 <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A>方法将上传的文件写入指定的目录。 因此，ASP.NET 应用程序必须具有对服务器上的目录的写访问权限。 应用程序可以通过两种方式获取写入访问权限。 你可以在将保存上载文件的目录中显式授予对运行应用程序的帐户的写入权限。 或者，可以增加授予 ASP.NET 应用程序的信任级别。 若要对应用程序的执行目录进行写入访问，必须为应用程序授予 <xref:System.Web.AspNetHostingPermission> 信任级别设置为值的对象 <xref:System.Web.AspNetHostingPermissionLevel.Medium?displayProperty=nameWithType> 。 提高信任级别会增加应用程序访问服务器上资源的权限。 请注意，这并不是一种安全的方法，因为获得您的应用程序控制的恶意用户也可以在这一更高的信任级别下运行。 最佳做法是在用户的上下文中运行 ASP.NET 应用程序，该用户具有运行应用程序所需的最小特权。 有关 ASP.NET 应用程序中的安全性的详细信息，请参阅 [Web 应用程序的基本安全实践](https://docs.microsoft.com/previous-versions/aspnet/zdh19h94(v=vs.100)) 和 [ASP.NET 信任级别和策略文件](https://msdn.microsoft.com/library/f897c794-10d3-414c-86b7-59b66564bbf1)。  
  
<a name="memory_limitations"></a>   
## <a name="memory-limitations"></a>内存限制  
 防范拒绝服务攻击的一种方法是限制可使用控件上传的文件的大小 <xref:System.Web.UI.WebControls.FileUpload> 。 应设置适用于预计要上传的文件类型的大小限制。 默认大小限制为 4096 kb (KB) 或 4 mb (MB) 。 可以通过设置 HttpRuntime 元素的属性，允许上载更大的文件 `maxRequestLength` 。 [httpRuntime](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/e1f13641(v=vs.100)) 若要为整个应用程序增加允许的最大文件大小，请 `maxRequestLength` 在 Web.config 文件中设置属性。 若要增加指定页允许的最大文件大小，请 `maxRequestLength` `location` 在 Web.config 中的元素内设置特性。有关示例，请参阅 [Location 元素 (ASP.NET Settings Schema) ](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/b6x6shw7(v=vs.100))。  
  
 上传大型文件时，用户可能还会收到以下错误消息：  
  
 `aspnet_wp.exe (PID: 1520) was recycled because memory consumption exceeded 460 MB (60 percent of available RAM).`  
  
 如果用户遇到此错误消息，请将 `memoryLimit` [processModel](https://msdn.microsoft.com/library/4b8fe20e-74c8-4566-b72c-ce5f83c8e32d) 的元素的值增加到应用程序的 Web.config 文件。 `memoryLimit`特性指定辅助进程可使用的最大内存量。 如果工作进程超出了该 `memoryLimit` 数量，则将创建一个新进程来替换它，并将所有当前请求重新分配给新进程。  
  
 若要控制在处理请求时，要上传的文件是否暂时存储在内存中，或在服务器上进行处理，请设置 `requestLengthDiskThreshold` [httpRuntime](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/e1f13641(v=vs.100)) 元素的属性。 此属性使你能够管理输入流缓冲区的大小。 默认值为256字节。 指定的值不应超过为属性指定的值 `maxRequestLength` 。  
  
<a name="using_the_FileUpload_Control_with_the_UpdatePanel_control"></a>   
## <a name="using-the-fileupload-control-with-the-updatepanel-control"></a>将 FileUpload 控件与 UpdatePanel 控件一起使用  
 <xref:System.Web.UI.WebControls.FileUpload>控件设计为仅用于回发方案，而不是在部分页面呈现期间在异步回发方案中使用。 在控件内使用控件时 <xref:System.Web.UI.WebControls.FileUpload> <xref:System.Web.UI.UpdatePanel> ，必须使用作为面板对象的控件来上载该文件 <xref:System.Web.UI.PostBackTrigger> 。 <xref:System.Web.UI.UpdatePanel> 控件用于更新页面的选定区域，而不是使用回发来更新整个页面。 有关详细信息，请参阅 [UpdatePanel 控件概述](https://docs.microsoft.com/previous-versions/aspnet/bb386454(v=vs.100)) 和 [部分页呈现概述](https://docs.microsoft.com/previous-versions/aspnet/bb386573(v=vs.100))。  
  
<a name="DeclarativeSyntax"></a>   
## <a name="declarative-syntax"></a>声明性语法  
  
```  
<asp:FileUpload  
    AccessKey="string"  
    BackColor="color name|#dddddd"  
    BorderColor="color name|#dddddd"  
    BorderStyle="NotSet|None|Dotted|Dashed|Solid|Double|Groove|Ridge|  
        Inset|Outset"  
    BorderWidth="size"  
    CssClass="string"  
    Enabled="True|False"  
    EnableTheming="True|False"  
    EnableViewState="True|False"  
    Font-Bold="True|False"  
    Font-Italic="True|False"  
    Font-Names="string"  
    Font-Overline="True|False"  
    Font-Size="string|Smaller|Larger|XX-Small|X-Small|Small|Medium|  
        Large|X-Large|XX-Large"  
    Font-Strikeout="True|False"  
    Font-Underline="True|False"  
    ForeColor="color name|#dddddd"  
    Height="size"  
    ID="string"  
    OnDataBinding="DataBinding event handler"  
    OnDisposed="Disposed event handler"  
    OnInit="Init event handler"  
    OnLoad="Load event handler"  
    OnPreRender="PreRender event handler"  
    OnUnload="Unload event handler"  
    runat="server"  
    SkinID="string"  
    Style="string"  
    TabIndex="integer"  
    ToolTip="string"  
    Visible="True|False"  
    Width="size"  
/>  
```  
  
   
  
## Examples  
 本主题提供了包含源代码的 Visual Studio 网站项目： [下载](https://go.microsoft.com/fwlink/?LinkId=191897)。  
  
 本部分包含以下四个示例：  
  
-   第一个示例演示如何创建一个 <xref:System.Web.UI.WebControls.FileUpload> 控件，该控件将文件保存到在代码中指定的路径。  
  
-   第二个示例演示如何创建一个将 <xref:System.Web.UI.WebControls.FileUpload> 文件保存到应用程序文件系统中指定目录的控件。  
  
-   第三个示例演示如何创建一个将 <xref:System.Web.UI.WebControls.FileUpload> 文件保存到指定路径的控件，并限制可上载的文件的大小。  
  
-   第四个示例演示如何创建一个 <xref:System.Web.UI.WebControls.FileUpload> 控件，该控件将文件保存到指定的路径，并只允许上传具有 .doc 或 .xls 文件扩展名的文件。  
  
> [!CAUTION]
>  这些示例演示了控件的基本语法 <xref:System.Web.UI.WebControls.FileUpload> ，但并不演示了在保存文件之前应完成的所有必要错误检查。 有关更完整的示例，请参见 <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A>。  
  
 下面的示例演示如何创建一个 <xref:System.Web.UI.WebControls.FileUpload> 控件，该控件将文件保存到在代码中指定的路径。 <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A>调用方法以将文件保存到服务器上的指定路径。  
  
 [!code-aspx-csharp[FileUploadClass1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FileUploadClass1/cs/fileuploadclass1cs.aspx#1)]
 [!code-aspx-vb[FileUploadClass1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FileUploadClass1/VB/fileuploadclass1vb.aspx#1)]  
  
 下面的示例演示如何创建一个 <xref:System.Web.UI.WebControls.FileUpload> 控件，该控件将文件保存到应用程序文件系统中的指定目录。 <xref:System.Web.HttpRequest.PhysicalApplicationPath%2A?displayProperty=nameWithType>属性用于获取当前正在执行的服务器应用程序的根目录的物理文件系统路径。 <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A>调用方法以将文件保存到服务器上的指定路径。  
  
 [!code-aspx-csharp[FileUploadClass2#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FileUploadClass2/cs/fileuploadclass2cs.aspx#1)]
 [!code-aspx-vb[FileUploadClass2#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FileUploadClass2/VB/fileuploadclass2vb.aspx#1)]  
  
 下面的示例演示如何创建一个 <xref:System.Web.UI.WebControls.FileUpload> 控件，该控件将文件保存到代码中指定的路径。 控件限制可上传到 2 MB 的文件的大小。 <xref:System.Web.UI.WebControls.FileUpload.PostedFile%2A>属性用于访问基础 <xref:System.Web.HttpPostedFile.ContentLength%2A> 属性并返回文件的大小。 如果要上传的文件的大小小于 2 MB，则 <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> 调用方法以将文件保存到服务器上的指定路径。 除了在应用程序代码中检查 "最大文件大小" 设置，还可以将 `maxRequestLength` [httpRuntime](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/e1f13641(v=vs.100)) 元素的属性设置为应用程序配置文件中允许的最大大小。  
  
 [!code-aspx-csharp[FileUploadClass3#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FileUploadClass3/cs/fileuploadclass3cs.aspx#1)]
 [!code-aspx-vb[FileUploadClass3#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FileUploadClass3/VB/fileuploadclass3vb.aspx#1)]  
  
 下面的示例演示如何创建一个 <xref:System.Web.UI.WebControls.FileUpload> 控件，该控件将文件保存到代码中指定的路径。 此示例只允许上传具有 .doc 或 .xls 文件扩展名的文件。 <xref:System.IO.Path.GetExtension%2A?displayProperty=nameWithType>调用方法以返回要上传的文件的扩展名。 如果该文件的文件扩展名为 .doc 或 .xls，则 <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> 调用方法将该文件保存到服务器上的指定路径。  
  
 [!code-aspx-csharp[FileUploadClass4#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FileUploadClass4/cs/fileuploadclass4cs.aspx#1)]
 [!code-aspx-vb[FileUploadClass4#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FileUploadClass4/VB/fileuploadclass4vb.aspx#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="M:System.Web.UI.WebControls.FileUpload.SaveAs(System.String)" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FileUpload ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FileUpload.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FileUpload();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Web.UI.WebControls.FileUpload" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用 <xref:System.Web.UI.WebControls.FileUpload.%23ctor%2A> 构造函数初始化类的新实例 <xref:System.Web.UI.WebControls.FileUpload> 。 <xref:System.Web.UI.WebControls.FileUpload>用户选择要上载的文件后，控件不会自动将文件保存到服务器。 您必须显式提供一个控件或机制以允许用户提交指定的文件。 例如，你可以提供一个按钮，用户单击它即可上传文件。  
  
   
  
## Examples  
 下面的示例演示如何初始化类的新实例 <xref:System.Web.UI.WebControls.FileUpload> 。 请注意，此示例演示了构造函数语法，但在创建后不会向控件添加功能。  
  
 此示例是为类提供的更大示例的一部分 <xref:System.Web.UI.WebControls.FileUpload> 。  
  
 [!code-aspx-vb[FileUploadCstr#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FileUploadCstr/VB/fileuploadcstrvb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddAttributesToRender">
      <MemberSignature Language="C#" Value="protected override void AddAttributesToRender (System.Web.UI.HtmlTextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void AddAttributesToRender(class System.Web.UI.HtmlTextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FileUpload.AddAttributesToRender(System.Web.UI.HtmlTextWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub AddAttributesToRender (writer As HtmlTextWriter)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void AddAttributesToRender(System::Web::UI::HtmlTextWriter ^ writer);" />
      <MemberSignature Language="F#" Value="override this.AddAttributesToRender : System.Web.UI.HtmlTextWriter -&gt; unit" Usage="fileUpload.AddAttributesToRender writer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">表示在客户端上呈现 HTML 内容的输出流的 <see cref="T:System.Web.UI.HtmlTextWriter" />。</param>
        <summary>为指定的 <see cref="T:System.Web.UI.HtmlTextWriter" /> 对象添加 <see cref="T:System.Web.UI.WebControls.FileUpload" /> 控件的 HTML 特性和样式，以在呈现内容时使用它们。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此 <xref:System.Web.UI.WebControls.FileUpload.AddAttributesToRender%2A> 方法主要由控件开发人员用来将适当的特性和样式插入 <xref:System.Web.UI.HtmlTextWriter?displayProperty=nameWithType> 控件的输出流中 <xref:System.Web.UI.WebControls.FileUpload> 。 <xref:System.Web.UI.WebControls.FileUpload.AddAttributesToRender%2A>方法将重写 <xref:System.Web.UI.WebControls.WebControl.AddAttributesToRender%2A?displayProperty=nameWithType> 方法。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.HtmlTextWriter" />
        <altmember cref="M:System.Web.UI.WebControls.WebControl.AddAttributesToRender(System.Web.UI.HtmlTextWriter)" />
      </Docs>
    </Member>
    <Member MemberName="AllowMultiple">
      <MemberSignature Language="C#" Value="public virtual bool AllowMultiple { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowMultiple" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FileUpload.AllowMultiple" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property AllowMultiple As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool AllowMultiple { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AllowMultiple : bool with get, set" Usage="System.Web.UI.WebControls.FileUpload.AllowMultiple" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.ComponentModel.Browsable(true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(true)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置指定是否可选择多个文件用于上载的值。</summary>
        <value>如果可以选定多个文件，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FileBytes">
      <MemberSignature Language="C#" Value="public byte[] FileBytes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance unsigned int8[] FileBytes" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FileUpload.FileBytes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FileBytes As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::Byte&gt; ^ FileBytes { cli::array &lt;System::Byte&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.FileBytes : byte[]" Usage="System.Web.UI.WebControls.FileUpload.FileBytes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Bindable(true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Bindable(true)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>从使用 <see cref="T:System.Web.UI.WebControls.FileUpload" /> 控件指定的文件中获取一个字节数组。</summary>
        <value><see cref="T:System.Byte" /> 数组，包含指定文件的内容。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.FileUpload>控件不会从客户端自动读取文件。 您必须显式提供一个控件或机制以允许用户提交指定的文件。 例如，你可以提供一个按钮，用户可以单击该按钮来上传文件。 你编写的用于保存指定文件的代码可以调用 <xref:System.Web.UI.WebControls.FileUpload.FileBytes%2A> 属性，该属性将返回文件的内容。  
  
 在调用 <xref:System.Web.UI.WebControls.FileUpload.FileBytes%2A> 属性之前，应使用 <xref:System.Web.UI.WebControls.FileUpload.HasFile%2A> 属性来验证 <xref:System.Web.UI.WebControls.FileUpload> 控件是否包含要上载的文件。 如果 <xref:System.Web.UI.WebControls.FileUpload.HasFile%2A> 返回 `true` ，则调用 <xref:System.Web.UI.WebControls.FileUpload.FileBytes%2A> 属性。 如果它返回 `false` ，则向用户显示一条消息，指示该控件不包含文件。 如果未提供错误处理代码来验证文件是否存在，则尝试保存不存在的文件会引发 <xref:System.Web.HttpException> 异常。  
  
   
  
## Examples  
 下面的示例演示如何创建 <xref:System.Web.UI.WebControls.FileUpload> 控件。 当用户单击 " **上传文件** " 按钮时，该文件的内容将在页面的文本框中显示为字节。 此示例使用 <xref:System.Web.UI.WebControls.FileUpload.FileBytes%2A> 属性上传整个文件。  
  
 [!code-aspx-csharp[FileUploadFileBytes#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FileUploadFileBytes/CS/FileUploadFileBytesCS.aspx#1)]
 [!code-aspx-vb[FileUploadFileBytes#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FileUploadFileBytes/VB/FileUploadFileBytesVB.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">未读取整个文件。</exception>
        <altmember cref="P:System.Web.UI.WebControls.FileUpload.HasFile" />
      </Docs>
    </Member>
    <Member MemberName="FileContent">
      <MemberSignature Language="C#" Value="public System.IO.Stream FileContent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IO.Stream FileContent" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FileUpload.FileContent" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FileContent As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IO::Stream ^ FileContent { System::IO::Stream ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.FileContent : System.IO.Stream" Usage="System.Web.UI.WebControls.FileUpload.FileContent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 <see cref="T:System.IO.Stream" /> 对象，它指向要使用 <see cref="T:System.Web.UI.WebControls.FileUpload" /> 控件上载的文件。</summary>
        <value><see cref="T:System.IO.Stream" />，指向使用 <see cref="T:System.Web.UI.WebControls.FileUpload" /> 上载的文件。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.FileUpload.FileContent%2A>属性获取一个 <xref:System.IO.Stream> 对象，该对象指向要使用控件上载的文件 <xref:System.Web.UI.WebControls.FileUpload> 。 使用 <xref:System.Web.UI.WebControls.FileUpload.FileContent%2A> 属性访问该文件的内容。 例如，你可以使用 <xref:System.IO.Stream> 此属性返回的对象将文件内容作为字节读取，并将其存储在字节数组中。  
  
   
  
## Examples  
 下面的示例演示如何创建 <xref:System.Web.UI.WebControls.FileUpload> 控件。 <xref:System.Web.UI.WebControls.FileUpload.FileContent%2A>属性用于将文件的内容读入字节数组。 当用户单击 " **上传文件** " 按钮时，该文件的内容将在页面的文本框中显示为字节。  
  
 [!code-aspx-csharp[FileUpload.FileContent#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FileUpload.FileContent/cs/fileupload.filecontentcs.aspx#1)]
 [!code-aspx-vb[FileUpload.FileContent#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FileUpload.FileContent/VB/fileupload.filecontentvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.Stream" />
        <altmember cref="M:System.Web.UI.WebControls.FileUpload.SaveAs(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="FileName">
      <MemberSignature Language="C#" Value="public string FileName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FileName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FileUpload.FileName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FileName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ FileName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.FileName : string" Usage="System.Web.UI.WebControls.FileUpload.FileName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取客户端上使用 <see cref="T:System.Web.UI.WebControls.FileUpload" /> 控件上载的文件的名称。</summary>
        <value>该字符串指定客户端上使用 <see cref="T:System.Web.UI.WebControls.FileUpload" /> 上载的文件的名称。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 获取客户端上使用 <xref:System.Web.UI.WebControls.FileUpload> 控件上载的文件的名称。 <xref:System.Web.UI.WebControls.FileUpload.FileName%2A>属性返回的文件名不包括客户端上文件的路径。  
  
   
  
## Examples  
 下面的示例演示如何创建一个 <xref:System.Web.UI.WebControls.FileUpload> 控件，该控件将文件保存到在代码中指定的路径。 <xref:System.Web.UI.WebControls.FileUpload.FileName%2A>属性用于获取要上传的文件的名称。 <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A>调用方法以将文件保存到服务器上指定的路径，并使用该文件在客户端上的相同名称。 请注意，此示例演示此控件的基本语法，但并不演示在保存文件之前应完成的所有必要错误检查。 有关更完整的示例，请参见 <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A>。  
  
 [!code-aspx-csharp[FileUploadClass1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FileUploadClass1/cs/fileuploadclass1cs.aspx#1)]
 [!code-aspx-vb[FileUploadClass1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FileUploadClass1/VB/fileuploadclass1vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.FileUpload.SaveAs(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="HasFile">
      <MemberSignature Language="C#" Value="public bool HasFile { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasFile" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FileUpload.HasFile" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasFile As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasFile { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasFile : bool" Usage="System.Web.UI.WebControls.FileUpload.HasFile" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示 <see cref="T:System.Web.UI.WebControls.FileUpload" /> 控件是否包含文件。</summary>
        <value>如果 <see cref="T:System.Web.UI.WebControls.FileUpload" /> 包含文件，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.FileUpload.HasFile%2A>属性获取一个值，该值指示 <xref:System.Web.UI.WebControls.FileUpload> 控件是否包含要上载的文件。 使用此属性验证在对文件执行操作之前是否存在要上载的文件。 例如，在调用 <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> 方法以将文件保存到磁盘之前，请使用 <xref:System.Web.UI.WebControls.FileUpload.HasFile%2A> 属性来验证该文件是否存在。 如果 <xref:System.Web.UI.WebControls.FileUpload.HasFile%2A> 返回 `true` ，则调用 <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> 方法。 如果它返回 `false` ，则向用户显示一条消息，指示该控件不包含文件。  
  
   
  
## Examples  
 下面的示例演示如何创建 <xref:System.Web.UI.WebControls.FileUpload> 执行错误检查的控件。 在保存文件之前， <xref:System.Web.UI.WebControls.FileUpload.HasFile%2A> 调用方法以验证控件是否包含要上载的文件。 此外， <xref:System.IO.File.Exists%2A?displayProperty=nameWithType> 调用方法以检查路径中是否已存在同名的文件。 如果是这样，则在调用方法之前，要上传的文件的名称以下划线字符为前缀 <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> 。 这可以防止覆盖现有文件。  
  
 [!code-aspx-csharp[FileUpload.SaveAs#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FileUpload.SaveAs/cs/fileupload.saveascs.aspx#1)]
 [!code-aspx-vb[FileUpload.SaveAs#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FileUpload.SaveAs/VB/fileupload.saveasvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.FileUpload.SaveAs(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="HasFiles">
      <MemberSignature Language="C#" Value="public bool HasFiles { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasFiles" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FileUpload.HasFiles" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasFiles As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasFiles { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasFiles : bool" Usage="System.Web.UI.WebControls.FileUpload.HasFiles" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取指示所有未见是否已经被上传的值。</summary>
        <value>如果上载任何文件中，则为<see langword="true" />；否则，为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `false`如果上载的空文件 (零字节) ，此方法也会返回。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreRender">
      <MemberSignature Language="C#" Value="protected internal override void OnPreRender (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnPreRender(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FileUpload.OnPreRender(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub OnPreRender (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnPreRender(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnPreRender : EventArgs -&gt; unit" Usage="fileUpload.OnPreRender e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.EventArgs" /> 对象。</param>
        <summary>为 <see cref="E:System.Web.UI.Control.PreRender" /> 控件引发 <see cref="T:System.Web.UI.WebControls.FileUpload" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.FileUpload.OnPreRender%2A>方法通知 <xref:System.Web.UI.WebControls.FileUpload> 控件在保存视图状态和呈现内容之前执行任何必需的预呈现步骤。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PostedFile">
      <MemberSignature Language="C#" Value="public System.Web.HttpPostedFile PostedFile { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.HttpPostedFile PostedFile" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FileUpload.PostedFile" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PostedFile As HttpPostedFile" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::HttpPostedFile ^ PostedFile { System::Web::HttpPostedFile ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.PostedFile : System.Web.HttpPostedFile" Usage="System.Web.UI.WebControls.FileUpload.PostedFile" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.HttpPostedFile</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取使用 <see cref="T:System.Web.UI.WebControls.FileUpload" /> 控件上载的文件的基础 <see cref="T:System.Web.HttpPostedFile" /> 对象。</summary>
        <value>使用 <see cref="T:System.Web.UI.WebControls.FileUpload" /> 上载的文件的 <see cref="T:System.Web.HttpPostedFile" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.FileUpload.PostedFile%2A>属性获取 <xref:System.Web.HttpPostedFile> 使用控件上载的文件的基础对象 <xref:System.Web.UI.WebControls.FileUpload> 。 使用此属性可以访问上载的文件上的其他属性。  
  
 您可以使用 <xref:System.Web.HttpPostedFile.ContentLength%2A> 属性来获取文件的长度。 您可以使用 <xref:System.Web.HttpPostedFile.ContentType%2A> 属性来获取文件的 MIME 内容类型。 此外，还可以使用 <xref:System.Web.UI.WebControls.FileUpload.PostedFile%2A> 属性来访问 <xref:System.Web.HttpPostedFile.FileName%2A> 属性、 <xref:System.Web.HttpPostedFile.InputStream%2A> 属性和 <xref:System.Web.HttpPostedFile.SaveAs%2A> 方法。 但是， <xref:System.Web.UI.WebControls.FileUpload.FileName%2A> 属性、 <xref:System.Web.UI.WebControls.FileUpload.FileContent%2A> 属性和方法提供了相同的功能 <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> 。  
  
   
  
## Examples  
 下面的示例演示如何创建 <xref:System.Web.UI.WebControls.FileUpload> 控件。 当用户单击 " **上传文件** " 按钮时，该文件的内容将在页面的文本框中显示为字节。 此示例使用 <xref:System.Web.UI.WebControls.FileUpload.PostedFile%2A> 属性访问 <xref:System.Web.HttpPostedFile.ContentLength%2A?displayProperty=nameWithType> 属性。 <xref:System.Web.HttpPostedFile.ContentLength%2A>属性用于确定文件的长度，然后将文件内容复制到字节数组。  
  
 [!code-aspx-csharp[FileUpload.FileContent#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FileUpload.FileContent/cs/fileupload.filecontentcs.aspx#1)]
 [!code-aspx-vb[FileUpload.FileContent#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FileUpload.FileContent/VB/fileupload.filecontentvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.HttpPostedFile" />
      </Docs>
    </Member>
    <Member MemberName="PostedFiles">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IList&lt;System.Web.HttpPostedFile&gt; PostedFiles { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IList`1&lt;class System.Web.HttpPostedFile&gt; PostedFiles" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FileUpload.PostedFiles" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PostedFiles As IList(Of HttpPostedFile)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IList&lt;System::Web::HttpPostedFile ^&gt; ^ PostedFiles { System::Collections::Generic::IList&lt;System::Web::HttpPostedFile ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.PostedFiles : System.Collections.Generic.IList&lt;System.Web.HttpPostedFile&gt;" Usage="System.Web.UI.WebControls.FileUpload.PostedFiles" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Web.HttpPostedFile&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取已上载文件的集合。</summary>
        <value>上载的文件集合。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Render">
      <MemberSignature Language="C#" Value="protected internal override void Render (System.Web.UI.HtmlTextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void Render(class System.Web.UI.HtmlTextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FileUpload.Render(System.Web.UI.HtmlTextWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub Render (writer As HtmlTextWriter)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void Render(System::Web::UI::HtmlTextWriter ^ writer);" />
      <MemberSignature Language="F#" Value="override this.Render : System.Web.UI.HtmlTextWriter -&gt; unit" Usage="fileUpload.Render writer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">接收 <see cref="T:System.Web.UI.WebControls.FileUpload" /> 控件内容的 <see cref="T:System.Web.UI.HtmlTextWriter" /> 对象。</param>
        <summary>将 <see cref="T:System.Web.UI.WebControls.FileUpload" /> 控件内容发送到指定的 <see cref="T:System.Web.UI.HtmlTextWriter" /> 对象，该对象编写相应内容以便呈现在客户端。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.FileUpload.Render%2A>方法将 <xref:System.Web.UI.WebControls.FileUpload> 控件内容发送到指定的 <xref:System.Web.UI.HtmlTextWriter?displayProperty=nameWithType> 对象，该对象写入要在客户端上呈现的内容。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.HtmlTextWriter" />
      </Docs>
    </Member>
    <Member MemberName="SaveAs">
      <MemberSignature Language="C#" Value="public void SaveAs (string filename);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SaveAs(string filename) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FileUpload.SaveAs(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SaveAs (filename As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SaveAs(System::String ^ filename);" />
      <MemberSignature Language="F#" Value="member this.SaveAs : string -&gt; unit" Usage="fileUpload.SaveAs filename" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filename" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="filename">一个字符串，指定服务器上用于保存上载文件的位置的完整路径。</param>
        <summary>将上载文件的内容保存到 Web 服务器上的指定路径。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A>方法将上载文件的内容保存到 Web 服务器上的指定路径。  
  
 <xref:System.Web.UI.WebControls.FileUpload>用户选择要上载的文件后，控件不会自动将文件保存到服务器。 您必须显式提供一个控件或机制以允许用户提交指定的文件。 例如，你可以提供一个按钮，用户单击它即可上传文件。 你编写的用于保存指定文件的代码应调用 <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> 方法，该方法会将文件内容保存到服务器上的指定路径。 通常， <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> 在引发回发到服务器的事件的事件处理方法中调用方法。 例如，如果你提供了一个按钮来提交文件，则将文件保存到服务器的代码可以包含在 click 事件的事件处理方法内。  
  
 调用 <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> 方法时，必须指定要在其中保存上载文件的服务器上的目录的完整路径。 如果未在应用程序代码中显式指定路径，则 <xref:System.Web.HttpException> 当用户尝试上传文件时，将引发异常。 此行为可帮助用户指定要在其中保存其上传的文件的路径，从而有助于保护服务器上的文件。  
  
 在调用 <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> 方法之前，应使用 <xref:System.Web.UI.WebControls.FileUpload.HasFile%2A> 属性来验证 <xref:System.Web.UI.WebControls.FileUpload> 控件是否包含要上载的文件。 如果 <xref:System.Web.UI.WebControls.FileUpload.HasFile%2A> 返回 `true` ，则调用 <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> 方法。 如果它返回 `false` ，则向用户显示一条消息，指示该控件不包含文件。 如果未提供错误处理代码来验证文件是否存在，则尝试保存不存在的文件会引发 <xref:System.Web.HttpException> 异常。  
  
 若要运行的调用 <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> ，ASP.NET 应用程序必须具有对服务器上的目录的写访问权限。 应用程序可以通过两种方式获取写入访问权限。 你可以在将保存上载文件的目录中显式授予对运行应用程序的帐户的写入权限。 或者，可以增加授予 ASP.NET 应用程序的信任级别。 若要对应用程序的执行目录进行写入访问，必须为应用程序授予 <xref:System.Web.AspNetHostingPermission> 信任级别设置为值的对象 <xref:System.Web.AspNetHostingPermissionLevel.Medium?displayProperty=nameWithType> 。 提高信任级别会增加应用程序访问服务器上资源的权限。 请注意，这并不是一种安全的方法，因为获得您的应用程序控制的恶意用户也可以在这一更高的信任级别下运行。 最佳做法是在具有运行该应用程序所需的最低权限的用户上下文中运行 ASP.NET 应用程序。 有关 ASP.NET 应用程序中的安全性的详细信息，请参阅 [Web 应用程序的基本安全实践](https://docs.microsoft.com/previous-versions/aspnet/zdh19h94(v=vs.100)) 和 [ASP.NET 信任级别和策略文件](https://msdn.microsoft.com/library/f897c794-10d3-414c-86b7-59b66564bbf1)。  
  
   
  
## Examples  
 下面的示例演示如何创建 <xref:System.Web.UI.WebControls.FileUpload> 执行错误检查的控件。 在保存文件之前，将 <xref:System.Web.UI.WebControls.FileUpload.HasFile%2A> 调用方法来验证要上传的文件是否存在。 此外， <xref:System.IO.File.Exists%2A?displayProperty=nameWithType> 调用方法以检查路径中是否已存在同名的文件。 如果是这样，则在调用方法之前，要上传的文件的名称以数字为前缀 <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> 。 这可以防止覆盖现有文件。  
  
 [!code-aspx-csharp[FileUpload.SaveAs#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FileUpload.SaveAs/cs/fileupload.saveascs.aspx#1)]
 [!code-aspx-vb[FileUpload.SaveAs#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FileUpload.SaveAs/VB/fileupload.saveasvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException"><paramref name="filename" /> 不是完整路径。</exception>
        <altmember cref="P:System.Web.UI.WebControls.FileUpload.HasFile" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/zdh19h94(v=vs.100)">Basic Security Practices for Web Applications（Web 应用程序的基本安全实践）</related>
      </Docs>
    </Member>
  </Members>
</Type>
